
FDT_E2E.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010f58  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00410f58  00410f58  00020f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b30  20400000  00410f60  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000006e4  20400b40  00411aa0  00030b30  2**5
                  ALLOC
  4 .stack        00008004  20401224  00412184  00030b30  2**0
                  ALLOC
  5 .heap         00000200  20409228  0041a188  00030b30  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00030b30  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00030b5e  2**0
                  CONTENTS, READONLY
  8 .debug_info   000516b7  00000000  00000000  00030bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007cf4  00000000  00000000  0008226e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001fc66  00000000  00000000  00089f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000018b0  00000000  00000000  000a9bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001c20  00000000  00000000  000ab478  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002f6c1  00000000  00000000  000ad098  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023927  00000000  00000000  000dc759  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a8cdb  00000000  00000000  00100080  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004c78  00000000  00000000  001a8d5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	28 92 40 20 29 4b 40 00 19 4b 40 00 19 4b 40 00     (.@ )K@..K@..K@.
  400010:	19 4b 40 00 19 4b 40 00 19 4b 40 00 00 00 00 00     .K@..K@..K@.....
	...
  40002c:	19 4b 40 00 19 4b 40 00 00 00 00 00 19 4b 40 00     .K@..K@......K@.
  40003c:	19 4b 40 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .K@..K@..K@..K@.
  40004c:	19 4b 40 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .K@..K@..K@..K@.
  40005c:	19 4b 40 00 19 4b 40 00 00 00 00 00 1d 34 40 00     .K@..K@......4@.
  40006c:	31 34 40 00 45 34 40 00 19 4b 40 00 19 4b 40 00     14@.E4@..K@..K@.
  40007c:	19 4b 40 00 59 34 40 00 6d 34 40 00 19 4b 40 00     .K@.Y4@.m4@..K@.
  40008c:	19 4b 40 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .K@..K@..K@..K@.
  40009c:	19 4b 40 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .K@..K@..K@..K@.
  4000ac:	19 4b 40 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .K@..K@..K@..K@.
  4000bc:	19 4b 40 00 19 4b 40 00 19 4b 40 00 79 3d 40 00     .K@..K@..K@.y=@.
  4000cc:	19 4b 40 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .K@..K@..K@..K@.
  4000dc:	19 4b 40 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .K@..K@..K@..K@.
  4000ec:	19 4b 40 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .K@..K@..K@..K@.
  4000fc:	19 4b 40 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .K@..K@..K@..K@.
  40010c:	19 4b 40 00 19 4b 40 00 19 4b 40 00 00 00 00 00     .K@..K@..K@.....
  40011c:	00 00 00 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .....K@..K@..K@.
  40012c:	dd 71 40 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .q@..K@..K@..K@.
  40013c:	19 4b 40 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .K@..K@..K@..K@.
  40014c:	19 4b 40 00 19 4b 40 00 19 4b 40 00 19 4b 40 00     .K@..K@..K@..K@.
  40015c:	19 4b 40 00 19 4b 40 00 19 4b 40 00                 .K@..K@..K@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400b40 	.word	0x20400b40
  400184:	00000000 	.word	0x00000000
  400188:	00410f60 	.word	0x00410f60

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00410f60 	.word	0x00410f60
  4001c8:	20400b44 	.word	0x20400b44
  4001cc:	00410f60 	.word	0x00410f60
  4001d0:	00000000 	.word	0x00000000

004001d4 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twihs* const p_twi, twihs_packet_t* const p_packet)
{
  4001d4:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twihs_master_read(p_twi, p_packet);
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <ov_read_reg+0x8>)
  4001d8:	4798      	blx	r3

	return ul_status;
}
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	0040157d 	.word	0x0040157d

004001e0 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twihs* const p_twi, twihs_packet_t* const p_packet)
{
  4001e0:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twihs_master_write(p_twi, p_packet);
  4001e2:	4b01      	ldr	r3, [pc, #4]	; (4001e8 <ov_write_reg+0x8>)
  4001e4:	4798      	blx	r3

	return ul_status;
}
  4001e6:	bd08      	pop	{r3, pc}
  4001e8:	00401629 	.word	0x00401629

004001ec <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twihs* const p_twi, const ov_reg *p_reg_list)
{
  4001ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001f0:	b086      	sub	sp, #24
  4001f2:	4606      	mov	r6, r0
  4001f4:	1c8c      	adds	r4, r1, #2
			twi_packet_regs.addr_length = 2;
			twi_packet_regs.chip = OV_I2C_2655_ADDRESS;
			twi_packet_regs.length = 1;
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  4001f6:	4d15      	ldr	r5, [pc, #84]	; (40024c <ov_write_regs+0x60>)
			delay_ms(5);
  4001f8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400254 <ov_write_regs+0x68>
  4001fc:	4f14      	ldr	r7, [pc, #80]	; (400250 <ov_write_regs+0x64>)
	while (!((p_next->reg == OV_REG_TERM) &&
  4001fe:	e015      	b.n	40022c <ov_write_regs+0x40>
  400200:	7822      	ldrb	r2, [r4, #0]
  400202:	2aff      	cmp	r2, #255	; 0xff
  400204:	d01e      	beq.n	400244 <ov_write_regs+0x58>
			twi_packet_regs.addr[0] = (p_next->reg)>>8;
  400206:	0a1a      	lsrs	r2, r3, #8
  400208:	f88d 2004 	strb.w	r2, [sp, #4]
			twi_packet_regs.addr[1] = (p_next->reg)&0x00FF;
  40020c:	f88d 3005 	strb.w	r3, [sp, #5]
			twi_packet_regs.addr_length = 2;
  400210:	2302      	movs	r3, #2
  400212:	9302      	str	r3, [sp, #8]
			twi_packet_regs.chip = OV_I2C_2655_ADDRESS;
  400214:	2330      	movs	r3, #48	; 0x30
  400216:	f88d 3014 	strb.w	r3, [sp, #20]
			twi_packet_regs.length = 1;
  40021a:	2301      	movs	r3, #1
  40021c:	9304      	str	r3, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  40021e:	9103      	str	r1, [sp, #12]
			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400220:	a901      	add	r1, sp, #4
  400222:	4630      	mov	r0, r6
  400224:	47a8      	blx	r5
			ul_size++;

			if (ul_err == TWIHS_BUSY) {
  400226:	2808      	cmp	r0, #8
  400228:	d00d      	beq.n	400246 <ov_write_regs+0x5a>
  40022a:	3404      	adds	r4, #4
  40022c:	4621      	mov	r1, r4
	while (!((p_next->reg == OV_REG_TERM) &&
  40022e:	f834 3c02 	ldrh.w	r3, [r4, #-2]
  400232:	f64f 72ff 	movw	r2, #65535	; 0xffff
  400236:	4293      	cmp	r3, r2
  400238:	d0e2      	beq.n	400200 <ov_write_regs+0x14>
		if (p_next->reg == 0xFE) {
  40023a:	2bfe      	cmp	r3, #254	; 0xfe
  40023c:	d1e3      	bne.n	400206 <ov_write_regs+0x1a>
			delay_ms(5);
  40023e:	4640      	mov	r0, r8
  400240:	47b8      	blx	r7
  400242:	e7f2      	b.n	40022a <ov_write_regs+0x3e>
			}
		}

		p_next++;
	}
	return 0;
  400244:	2000      	movs	r0, #0
			ov_read_reg(p_twi, &twi_packet_regs);
			printf("%c%c%c%c%c%c%c%c",0xFE,0x46,0xFE,0x48,0xFE,0x4C,0xFE,0x51);//clear display, cursor home
			delay_ms(10);
			printf("%x:%x ",twi_packet_regs.addr[0],ul_value);
			delay_ms(2000);*/
}
  400246:	b006      	add	sp, #24
  400248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40024c:	004001e1 	.word	0x004001e1
  400250:	2040008d 	.word	0x2040008d
  400254:	0003dbc2 	.word	0x0003dbc2

00400258 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twihs* const p_twi)
{
  400258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40025c:	b08c      	sub	sp, #48	; 0x30
  40025e:	4680      	mov	r8, r0
	uint32_t ul_id = 0;
  400260:	2300      	movs	r3, #0
  400262:	9300      	str	r3, [sp, #0]
	uint32_t ul_ver = 0;
  400264:	9301      	str	r3, [sp, #4]
	packet_pid.chip = OV_I2C_2655_ADDRESS;  //BC WORKS!! (0x78>>1) OV7692was 0x78 for CamCube.  0x60 for OV2655
  400266:	2430      	movs	r4, #48	; 0x30
  400268:	f88d 4018 	strb.w	r4, [sp, #24]
	packet_pid.addr[0] = 0x30;
  40026c:	f88d 4008 	strb.w	r4, [sp, #8]
	packet_pid.addr[1] = OV2655_PIDH;
  400270:	230a      	movs	r3, #10
  400272:	f88d 3009 	strb.w	r3, [sp, #9]
	packet_pid.addr_length = 2;
  400276:	2702      	movs	r7, #2
  400278:	9703      	str	r7, [sp, #12]
	packet_pid.buffer = &ul_id;
  40027a:	f8cd d010 	str.w	sp, [sp, #16]
	packet_pid.length = 1;
  40027e:	2601      	movs	r6, #1
  400280:	9605      	str	r6, [sp, #20]
	ov_read_reg(p_twi, &packet_pid);
  400282:	a902      	add	r1, sp, #8
  400284:	4d29      	ldr	r5, [pc, #164]	; (40032c <ov_init+0xd4>)
  400286:	47a8      	blx	r5
	packet_ver.chip = OV_I2C_2655_ADDRESS;//was 0x78 for CamCube.  0x60 for OV2655
  400288:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	packet_ver.addr[0] = 0x30;
  40028c:	f88d 401c 	strb.w	r4, [sp, #28]
	packet_ver.addr[1] = OV2655_PIDL;
  400290:	230b      	movs	r3, #11
  400292:	f88d 301d 	strb.w	r3, [sp, #29]
	packet_ver.addr_length = 2;
  400296:	9708      	str	r7, [sp, #32]
	packet_ver.buffer = &ul_ver;
  400298:	ab01      	add	r3, sp, #4
  40029a:	9309      	str	r3, [sp, #36]	; 0x24
	packet_ver.length = 1;
  40029c:	960a      	str	r6, [sp, #40]	; 0x28
	ov_read_reg(p_twi, &packet_ver);
  40029e:	a907      	add	r1, sp, #28
  4002a0:	4640      	mov	r0, r8
  4002a2:	47a8      	blx	r5
	return ((uint32_t)(ul_id << 8) | ul_ver);
  4002a4:	9b01      	ldr	r3, [sp, #4]
  4002a6:	9a00      	ldr	r2, [sp, #0]
  4002a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	uint32_t ul_id = 0;

	ul_id = ov_id(p_twi);

//	if (((ul_id >> 8) & 0xff)  == OV2710_PIDH_DEFAULT) {
	if (((ul_id >> 8) & 0xff)  == OV2655_PIDH_DEFAULT) {
  4002ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4002b0:	2b26      	cmp	r3, #38	; 0x26
  4002b2:	d003      	beq.n	4002bc <ov_init+0x64>
				return 0;
			}
//		}
	}

	return 1;
  4002b4:	2001      	movs	r0, #1
}
  4002b6:	b00c      	add	sp, #48	; 0x30
  4002b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t ul_value = 0;
  4002bc:	2300      	movs	r3, #0
  4002be:	9300      	str	r3, [sp, #0]
	uint32_t ul_oldvalue = 0;
  4002c0:	9301      	str	r3, [sp, #4]
	uint32_t ul_entervalue = 0;
  4002c2:	9302      	str	r3, [sp, #8]
	twi_packet.addr[0] = 0x30;
  4002c4:	f88d 401c 	strb.w	r4, [sp, #28]
	twi_packet.addr[1] = 0x04;
  4002c8:	2204      	movs	r2, #4
  4002ca:	f88d 201d 	strb.w	r2, [sp, #29]
	twi_packet.addr_length = 2;
  4002ce:	9708      	str	r7, [sp, #32]
	twi_packet.chip = OV_I2C_2655_ADDRESS;
  4002d0:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	twi_packet.length = 1;
  4002d4:	960a      	str	r6, [sp, #40]	; 0x28
	twi_packet.buffer = &ul_oldvalue;
  4002d6:	ab01      	add	r3, sp, #4
  4002d8:	9309      	str	r3, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4002da:	a907      	add	r1, sp, #28
  4002dc:	4640      	mov	r0, r8
  4002de:	47a8      	blx	r5
	ul_entervalue = 0x11;
  4002e0:	ab0c      	add	r3, sp, #48	; 0x30
  4002e2:	2211      	movs	r2, #17
  4002e4:	f843 2d28 	str.w	r2, [r3, #-40]!
	twi_packet.buffer = &ul_entervalue;
  4002e8:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  4002ea:	a907      	add	r1, sp, #28
  4002ec:	4640      	mov	r0, r8
  4002ee:	4b10      	ldr	r3, [pc, #64]	; (400330 <ov_init+0xd8>)
  4002f0:	4798      	blx	r3
	twi_packet.buffer = &ul_value;
  4002f2:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4002f6:	a907      	add	r1, sp, #28
  4002f8:	4640      	mov	r0, r8
  4002fa:	47a8      	blx	r5
	if (ul_value != ul_entervalue) {
  4002fc:	9b02      	ldr	r3, [sp, #8]
  4002fe:	9a00      	ldr	r2, [sp, #0]
  400300:	429a      	cmp	r2, r3
  400302:	d001      	beq.n	400308 <ov_init+0xb0>
		return 1;
  400304:	2001      	movs	r0, #1
  400306:	e7d6      	b.n	4002b6 <ov_init+0x5e>
	twi_packet.buffer = &ul_oldvalue;
  400308:	ab01      	add	r3, sp, #4
  40030a:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  40030c:	a907      	add	r1, sp, #28
  40030e:	4640      	mov	r0, r8
  400310:	4b07      	ldr	r3, [pc, #28]	; (400330 <ov_init+0xd8>)
  400312:	4798      	blx	r3
	twi_packet.buffer = &ul_value;
  400314:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400318:	a907      	add	r1, sp, #28
  40031a:	4640      	mov	r0, r8
  40031c:	47a8      	blx	r5
	if (ul_value != ul_oldvalue) {
  40031e:	9b01      	ldr	r3, [sp, #4]
  400320:	9800      	ldr	r0, [sp, #0]
  400322:	1ac0      	subs	r0, r0, r3
  400324:	bf18      	it	ne
  400326:	2001      	movne	r0, #1
  400328:	e7c5      	b.n	4002b6 <ov_init+0x5e>
  40032a:	bf00      	nop
  40032c:	004001d5 	.word	0x004001d5
  400330:	004001e1 	.word	0x004001e1

00400334 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twihs* const p_twi, const e_ov7740_format format)
{
  400334:	b508      	push	{r3, lr}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
  400336:	2908      	cmp	r1, #8
  400338:	d814      	bhi.n	400364 <ov_configure+0x30>
  40033a:	e8df f001 	tbb	[pc, r1]
  40033e:	0515      	.short	0x0515
  400340:	0b090717 	.word	0x0b090717
  400344:	0f0d      	.short	0x0f0d
  400346:	11          	.byte	0x11
  400347:	00          	.byte	0x00
	case MY_OV2710_RESET:
		p_regs_conf = MY_OV2710_BASIC_RESET;
		break;

	case MY_OV2710_CONFIG:
		p_regs_conf = MY_OV2710_BASIC_CONFIG;
  400348:	490b      	ldr	r1, [pc, #44]	; (400378 <ov_configure+0x44>)
  40034a:	e010      	b.n	40036e <ov_configure+0x3a>
	case MY_OV2655_CONFIG:
		p_regs_conf = MY_OV2655_BASIC_CONFIG;
		break;

	case MY_OV2655_FALLBACK:
		p_regs_conf = MY_OV2655_BASIC_FALLBACK;
  40034c:	490b      	ldr	r1, [pc, #44]	; (40037c <ov_configure+0x48>)
		break;
  40034e:	e00e      	b.n	40036e <ov_configure+0x3a>

	case MY_OV2655_RESET:
		p_regs_conf = MY_OV2655_BASIC_RESET;
  400350:	490b      	ldr	r1, [pc, #44]	; (400380 <ov_configure+0x4c>)
		break;
  400352:	e00c      	b.n	40036e <ov_configure+0x3a>

	case MY_OV2655_FromUSB:
		p_regs_conf = MY_OV2655_BASIC_RESET;
  400354:	490a      	ldr	r1, [pc, #40]	; (400380 <ov_configure+0x4c>)
		break;
  400356:	e00a      	b.n	40036e <ov_configure+0x3a>

	case MY_OV2655_36:
		p_regs_conf = MY_OV2655_BASIC_FALLBACK;
  400358:	4908      	ldr	r1, [pc, #32]	; (40037c <ov_configure+0x48>)
		break;
  40035a:	e008      	b.n	40036e <ov_configure+0x3a>

	case TEST_PATTERN:
		p_regs_conf = OV7740_TEST_PATTERN;
  40035c:	4909      	ldr	r1, [pc, #36]	; (400384 <ov_configure+0x50>)
		break;
  40035e:	e006      	b.n	40036e <ov_configure+0x3a>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV7740_VGA_YUV422_20FPS;
  400360:	4909      	ldr	r1, [pc, #36]	; (400388 <ov_configure+0x54>)
		break;
  400362:	e004      	b.n	40036e <ov_configure+0x3a>
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf);
		return 0;
	}

	return 1;
  400364:	2001      	movs	r0, #1
  400366:	bd08      	pop	{r3, pc}
		p_regs_conf = MY_OV2710_BASIC_RESET;
  400368:	4908      	ldr	r1, [pc, #32]	; (40038c <ov_configure+0x58>)
  40036a:	e000      	b.n	40036e <ov_configure+0x3a>
		p_regs_conf = MY_OV2655_BASIC_CONFIG;
  40036c:	4908      	ldr	r1, [pc, #32]	; (400390 <ov_configure+0x5c>)
		ov_write_regs( p_twi, p_regs_conf);
  40036e:	4b09      	ldr	r3, [pc, #36]	; (400394 <ov_configure+0x60>)
  400370:	4798      	blx	r3
		return 0;
  400372:	2000      	movs	r0, #0
}
  400374:	bd08      	pop	{r3, pc}
  400376:	bf00      	nop
  400378:	0040fca0 	.word	0x0040fca0
  40037c:	0040fc94 	.word	0x0040fc94
  400380:	0040fc98 	.word	0x0040fc98
  400384:	0040fcb4 	.word	0x0040fcb4
  400388:	0040fcbc 	.word	0x0040fcbc
  40038c:	0040fca4 	.word	0x0040fca4
  400390:	0040fa78 	.word	0x0040fa78
  400394:	004001ed 	.word	0x004001ed

00400398 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  400398:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40039a:	4b06      	ldr	r3, [pc, #24]	; (4003b4 <sd_mmc_configure_slot+0x1c>)
  40039c:	6819      	ldr	r1, [r3, #0]
  40039e:	7f8b      	ldrb	r3, [r1, #30]
  4003a0:	3300      	adds	r3, #0
  4003a2:	bf18      	it	ne
  4003a4:	2301      	movne	r3, #1
  4003a6:	7b4a      	ldrb	r2, [r1, #13]
  4003a8:	6809      	ldr	r1, [r1, #0]
  4003aa:	4803      	ldr	r0, [pc, #12]	; (4003b8 <sd_mmc_configure_slot+0x20>)
  4003ac:	7800      	ldrb	r0, [r0, #0]
  4003ae:	4c03      	ldr	r4, [pc, #12]	; (4003bc <sd_mmc_configure_slot+0x24>)
  4003b0:	47a0      	blx	r4
  4003b2:	bd10      	pop	{r4, pc}
  4003b4:	20400b5c 	.word	0x20400b5c
  4003b8:	20400b84 	.word	0x20400b84
  4003bc:	00401fe9 	.word	0x00401fe9

004003c0 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4003c0:	b108      	cbz	r0, 4003c6 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4003c2:	2004      	movs	r0, #4
  4003c4:	4770      	bx	lr
{
  4003c6:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4003c8:	4b0e      	ldr	r3, [pc, #56]	; (400404 <sd_mmc_select_slot+0x44>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  4003ca:	7a9b      	ldrb	r3, [r3, #10]
  4003cc:	3b03      	subs	r3, #3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4003ce:	b2db      	uxtb	r3, r3
  4003d0:	2b01      	cmp	r3, #1
  4003d2:	d90d      	bls.n	4003f0 <sd_mmc_select_slot+0x30>
	sd_mmc_slot_sel = slot;
  4003d4:	2200      	movs	r2, #0
  4003d6:	4b0c      	ldr	r3, [pc, #48]	; (400408 <sd_mmc_select_slot+0x48>)
  4003d8:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  4003da:	4c0a      	ldr	r4, [pc, #40]	; (400404 <sd_mmc_select_slot+0x44>)
  4003dc:	4b0b      	ldr	r3, [pc, #44]	; (40040c <sd_mmc_select_slot+0x4c>)
  4003de:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  4003e0:	4b0b      	ldr	r3, [pc, #44]	; (400410 <sd_mmc_select_slot+0x50>)
  4003e2:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  4003e4:	7aa0      	ldrb	r0, [r4, #10]
  4003e6:	2802      	cmp	r0, #2
  4003e8:	bf14      	ite	ne
  4003ea:	2000      	movne	r0, #0
  4003ec:	2001      	moveq	r0, #1
  4003ee:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  4003f0:	4b04      	ldr	r3, [pc, #16]	; (400404 <sd_mmc_select_slot+0x44>)
  4003f2:	2202      	movs	r2, #2
  4003f4:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  4003f6:	4a07      	ldr	r2, [pc, #28]	; (400414 <sd_mmc_select_slot+0x54>)
  4003f8:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  4003fa:	2201      	movs	r2, #1
  4003fc:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  4003fe:	2200      	movs	r2, #0
  400400:	779a      	strb	r2, [r3, #30]
  400402:	e7e7      	b.n	4003d4 <sd_mmc_select_slot+0x14>
  400404:	20400b60 	.word	0x20400b60
  400408:	20400b84 	.word	0x20400b84
  40040c:	20400b5c 	.word	0x20400b5c
  400410:	00400399 	.word	0x00400399
  400414:	00061a80 	.word	0x00061a80

00400418 <sdio_cmd52>:
{
  400418:	b538      	push	{r3, r4, r5, lr}
  40041a:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  40041c:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  40041e:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  400422:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  400426:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  40042a:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  40042c:	4311      	orrs	r1, r2
  40042e:	f241 3034 	movw	r0, #4916	; 0x1334
  400432:	4b05      	ldr	r3, [pc, #20]	; (400448 <sdio_cmd52+0x30>)
  400434:	4798      	blx	r3
  400436:	4605      	mov	r5, r0
  400438:	b908      	cbnz	r0, 40043e <sdio_cmd52+0x26>
}
  40043a:	4628      	mov	r0, r5
  40043c:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  40043e:	4b03      	ldr	r3, [pc, #12]	; (40044c <sdio_cmd52+0x34>)
  400440:	4798      	blx	r3
  400442:	7020      	strb	r0, [r4, #0]
	return true;
  400444:	e7f9      	b.n	40043a <sdio_cmd52+0x22>
  400446:	bf00      	nop
  400448:	004020d1 	.word	0x004020d1
  40044c:	004020f5 	.word	0x004020f5

00400450 <sd_mmc_cmd9_mci>:
{
  400450:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  400452:	4b09      	ldr	r3, [pc, #36]	; (400478 <sd_mmc_cmd9_mci+0x28>)
  400454:	681b      	ldr	r3, [r3, #0]
  400456:	8919      	ldrh	r1, [r3, #8]
  400458:	0409      	lsls	r1, r1, #16
  40045a:	f641 3009 	movw	r0, #6921	; 0x1b09
  40045e:	4b07      	ldr	r3, [pc, #28]	; (40047c <sd_mmc_cmd9_mci+0x2c>)
  400460:	4798      	blx	r3
  400462:	4604      	mov	r4, r0
  400464:	b908      	cbnz	r0, 40046a <sd_mmc_cmd9_mci+0x1a>
}
  400466:	4620      	mov	r0, r4
  400468:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  40046a:	4b03      	ldr	r3, [pc, #12]	; (400478 <sd_mmc_cmd9_mci+0x28>)
  40046c:	6818      	ldr	r0, [r3, #0]
  40046e:	300e      	adds	r0, #14
  400470:	4b03      	ldr	r3, [pc, #12]	; (400480 <sd_mmc_cmd9_mci+0x30>)
  400472:	4798      	blx	r3
	return true;
  400474:	e7f7      	b.n	400466 <sd_mmc_cmd9_mci+0x16>
  400476:	bf00      	nop
  400478:	20400b5c 	.word	0x20400b5c
  40047c:	004020d1 	.word	0x004020d1
  400480:	004020fd 	.word	0x004020fd

00400484 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400484:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400486:	4b04      	ldr	r3, [pc, #16]	; (400498 <sd_mmc_deselect_slot+0x14>)
  400488:	781b      	ldrb	r3, [r3, #0]
  40048a:	b103      	cbz	r3, 40048e <sd_mmc_deselect_slot+0xa>
  40048c:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40048e:	2000      	movs	r0, #0
  400490:	4b02      	ldr	r3, [pc, #8]	; (40049c <sd_mmc_deselect_slot+0x18>)
  400492:	4798      	blx	r3
	}
}
  400494:	e7fa      	b.n	40048c <sd_mmc_deselect_slot+0x8>
  400496:	bf00      	nop
  400498:	20400b84 	.word	0x20400b84
  40049c:	004020ad 	.word	0x004020ad

004004a0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  4004a0:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4004a2:	2204      	movs	r2, #4
  4004a4:	4b03      	ldr	r3, [pc, #12]	; (4004b4 <sd_mmc_init+0x14>)
  4004a6:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4004a8:	22ff      	movs	r2, #255	; 0xff
  4004aa:	4b03      	ldr	r3, [pc, #12]	; (4004b8 <sd_mmc_init+0x18>)
  4004ac:	701a      	strb	r2, [r3, #0]
	driver_init();
  4004ae:	4b03      	ldr	r3, [pc, #12]	; (4004bc <sd_mmc_init+0x1c>)
  4004b0:	4798      	blx	r3
  4004b2:	bd08      	pop	{r3, pc}
  4004b4:	20400b60 	.word	0x20400b60
  4004b8:	20400b84 	.word	0x20400b84
  4004bc:	00401fad 	.word	0x00401fad

004004c0 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  4004c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4004c4:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4004c6:	4ba7      	ldr	r3, [pc, #668]	; (400764 <sd_mmc_check+0x2a4>)
  4004c8:	4798      	blx	r3
  4004ca:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4004cc:	2801      	cmp	r0, #1
  4004ce:	d005      	beq.n	4004dc <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  4004d0:	4ba5      	ldr	r3, [pc, #660]	; (400768 <sd_mmc_check+0x2a8>)
  4004d2:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  4004d4:	4620      	mov	r0, r4
  4004d6:	b015      	add	sp, #84	; 0x54
  4004d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  4004dc:	ae14      	add	r6, sp, #80	; 0x50
  4004de:	2308      	movs	r3, #8
  4004e0:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  4004e4:	4ba1      	ldr	r3, [pc, #644]	; (40076c <sd_mmc_check+0x2ac>)
  4004e6:	681b      	ldr	r3, [r3, #0]
  4004e8:	2701      	movs	r7, #1
  4004ea:	72df      	strb	r7, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4004ec:	2500      	movs	r5, #0
  4004ee:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
  4004f0:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
  4004f2:	4b9f      	ldr	r3, [pc, #636]	; (400770 <sd_mmc_check+0x2b0>)
  4004f4:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4004f6:	9600      	str	r6, [sp, #0]
  4004f8:	462b      	mov	r3, r5
  4004fa:	2206      	movs	r2, #6
  4004fc:	4629      	mov	r1, r5
  4004fe:	4638      	mov	r0, r7
  400500:	4e9c      	ldr	r6, [pc, #624]	; (400774 <sd_mmc_check+0x2b4>)
  400502:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400504:	4629      	mov	r1, r5
  400506:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40050a:	4b9b      	ldr	r3, [pc, #620]	; (400778 <sd_mmc_check+0x2b8>)
  40050c:	4798      	blx	r3
  40050e:	b930      	cbnz	r0, 40051e <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  400510:	4b96      	ldr	r3, [pc, #600]	; (40076c <sd_mmc_check+0x2ac>)
  400512:	681b      	ldr	r3, [r3, #0]
  400514:	2403      	movs	r4, #3
  400516:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  400518:	4b93      	ldr	r3, [pc, #588]	; (400768 <sd_mmc_check+0x2a8>)
  40051a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  40051c:	e7da      	b.n	4004d4 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  40051e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  400522:	f245 5008 	movw	r0, #21768	; 0x5508
  400526:	4b94      	ldr	r3, [pc, #592]	; (400778 <sd_mmc_check+0x2b8>)
  400528:	4798      	blx	r3
  40052a:	2800      	cmp	r0, #0
  40052c:	f040 8093 	bne.w	400656 <sd_mmc_check+0x196>
	*v2 = 0;
  400530:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  400534:	2100      	movs	r1, #0
  400536:	f244 5005 	movw	r0, #17669	; 0x4505
  40053a:	4b8f      	ldr	r3, [pc, #572]	; (400778 <sd_mmc_check+0x2b8>)
  40053c:	4798      	blx	r3
  40053e:	2800      	cmp	r0, #0
  400540:	f040 8097 	bne.w	400672 <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400544:	4b89      	ldr	r3, [pc, #548]	; (40076c <sd_mmc_check+0x2ac>)
  400546:	681b      	ldr	r3, [r3, #0]
  400548:	7adb      	ldrb	r3, [r3, #11]
  40054a:	f013 0f01 	tst.w	r3, #1
  40054e:	f040 80b5 	bne.w	4006bc <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400552:	2100      	movs	r1, #0
  400554:	f245 1003 	movw	r0, #20739	; 0x5103
  400558:	4b87      	ldr	r3, [pc, #540]	; (400778 <sd_mmc_check+0x2b8>)
  40055a:	4798      	blx	r3
  40055c:	2800      	cmp	r0, #0
  40055e:	d0d7      	beq.n	400510 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400560:	4d82      	ldr	r5, [pc, #520]	; (40076c <sd_mmc_check+0x2ac>)
  400562:	682e      	ldr	r6, [r5, #0]
  400564:	4b85      	ldr	r3, [pc, #532]	; (40077c <sd_mmc_check+0x2bc>)
  400566:	4798      	blx	r3
  400568:	0c00      	lsrs	r0, r0, #16
  40056a:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40056c:	682b      	ldr	r3, [r5, #0]
  40056e:	7adb      	ldrb	r3, [r3, #11]
  400570:	f013 0f01 	tst.w	r3, #1
  400574:	d034      	beq.n	4005e0 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  400576:	4b82      	ldr	r3, [pc, #520]	; (400780 <sd_mmc_check+0x2c0>)
  400578:	4798      	blx	r3
  40057a:	2800      	cmp	r0, #0
  40057c:	d0c8      	beq.n	400510 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  40057e:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400580:	7c5a      	ldrb	r2, [r3, #17]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400582:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400586:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40058a:	497e      	ldr	r1, [pc, #504]	; (400784 <sd_mmc_check+0x2c4>)
  40058c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400594:	fb02 f201 	mul.w	r2, r2, r1
  400598:	497b      	ldr	r1, [pc, #492]	; (400788 <sd_mmc_check+0x2c8>)
  40059a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40059e:	fb02 f201 	mul.w	r2, r2, r1
  4005a2:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  4005a4:	7b9a      	ldrb	r2, [r3, #14]
  4005a6:	0992      	lsrs	r2, r2, #6
  4005a8:	f040 820b 	bne.w	4009c2 <sd_mmc_check+0x502>
  4005ac:	7d99      	ldrb	r1, [r3, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005ae:	7d58      	ldrb	r0, [r3, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005b0:	7d1a      	ldrb	r2, [r3, #20]
  4005b2:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005b4:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  4005b8:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005bc:	7e18      	ldrb	r0, [r3, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005be:	7dd9      	ldrb	r1, [r3, #23]
  4005c0:	0049      	lsls	r1, r1, #1
  4005c2:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  4005c6:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4005ca:	3201      	adds	r2, #1
  4005cc:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  4005d0:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4005d2:	408a      	lsls	r2, r1
  4005d4:	7cd9      	ldrb	r1, [r3, #19]
  4005d6:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4005da:	408a      	lsls	r2, r1
				/ 1024;
  4005dc:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4005de:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4005e0:	4b62      	ldr	r3, [pc, #392]	; (40076c <sd_mmc_check+0x2ac>)
  4005e2:	681b      	ldr	r3, [r3, #0]
  4005e4:	8919      	ldrh	r1, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4005e6:	0409      	lsls	r1, r1, #16
  4005e8:	f243 1007 	movw	r0, #12551	; 0x3107
  4005ec:	4b62      	ldr	r3, [pc, #392]	; (400778 <sd_mmc_check+0x2b8>)
  4005ee:	4798      	blx	r3
  4005f0:	2800      	cmp	r0, #0
  4005f2:	d08d      	beq.n	400510 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4005f4:	4b5d      	ldr	r3, [pc, #372]	; (40076c <sd_mmc_check+0x2ac>)
  4005f6:	681b      	ldr	r3, [r3, #0]
  4005f8:	7ada      	ldrb	r2, [r3, #11]
  4005fa:	f012 0f01 	tst.w	r2, #1
  4005fe:	f040 81ed 	bne.w	4009dc <sd_mmc_check+0x51c>
	if (IS_SDIO()) {
  400602:	4b5a      	ldr	r3, [pc, #360]	; (40076c <sd_mmc_check+0x2ac>)
  400604:	681b      	ldr	r3, [r3, #0]
  400606:	7adb      	ldrb	r3, [r3, #11]
  400608:	f013 0f04 	tst.w	r3, #4
  40060c:	f000 829c 	beq.w	400b48 <sd_mmc_check+0x688>
  400610:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  400612:	2700      	movs	r7, #0
  400614:	4e57      	ldr	r6, [pc, #348]	; (400774 <sd_mmc_check+0x2b4>)
  400616:	f1a5 0309 	sub.w	r3, r5, #9
  40061a:	aa03      	add	r2, sp, #12
  40061c:	4413      	add	r3, r2
  40061e:	9300      	str	r3, [sp, #0]
  400620:	463b      	mov	r3, r7
  400622:	462a      	mov	r2, r5
  400624:	4639      	mov	r1, r7
  400626:	4638      	mov	r0, r7
  400628:	47b0      	blx	r6
		addr_old++;
  40062a:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  40062c:	2d0d      	cmp	r5, #13
  40062e:	d1f2      	bne.n	400616 <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400630:	f89d 300d 	ldrb.w	r3, [sp, #13]
  400634:	f89d 900c 	ldrb.w	r9, [sp, #12]
  400638:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40063c:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400640:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400644:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400648:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  40064c:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40064e:	f04f 0800 	mov.w	r8, #0
  400652:	4f48      	ldr	r7, [pc, #288]	; (400774 <sd_mmc_check+0x2b4>)
  400654:	e239      	b.n	400aca <sd_mmc_check+0x60a>
	resp = driver_get_response();
  400656:	4b49      	ldr	r3, [pc, #292]	; (40077c <sd_mmc_check+0x2bc>)
  400658:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  40065a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40065e:	f000 8347 	beq.w	400cf0 <sd_mmc_check+0x830>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400662:	f3c0 000b 	ubfx	r0, r0, #0, #12
  400666:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40066a:	f47f af51 	bne.w	400510 <sd_mmc_check+0x50>
	*v2 = 1;
  40066e:	46b9      	mov	r9, r7
  400670:	e760      	b.n	400534 <sd_mmc_check+0x74>
	resp = driver_get_response();
  400672:	4b42      	ldr	r3, [pc, #264]	; (40077c <sd_mmc_check+0x2bc>)
  400674:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  400676:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  40067a:	f43f af63 	beq.w	400544 <sd_mmc_check+0x84>
  40067e:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400682:	f244 5805 	movw	r8, #17669	; 0x4505
  400686:	4e3c      	ldr	r6, [pc, #240]	; (400778 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400688:	4f3c      	ldr	r7, [pc, #240]	; (40077c <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40068a:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  40068e:	4640      	mov	r0, r8
  400690:	47b0      	blx	r6
  400692:	2800      	cmp	r0, #0
  400694:	f43f af3c 	beq.w	400510 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400698:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  40069a:	2800      	cmp	r0, #0
  40069c:	db02      	blt.n	4006a4 <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  40069e:	3d01      	subs	r5, #1
  4006a0:	d1f3      	bne.n	40068a <sd_mmc_check+0x1ca>
  4006a2:	e735      	b.n	400510 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  4006a4:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  4006a8:	d104      	bne.n	4006b4 <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  4006aa:	4b30      	ldr	r3, [pc, #192]	; (40076c <sd_mmc_check+0x2ac>)
  4006ac:	681b      	ldr	r3, [r3, #0]
  4006ae:	2204      	movs	r2, #4
  4006b0:	72da      	strb	r2, [r3, #11]
  4006b2:	e74e      	b.n	400552 <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  4006b4:	4b2d      	ldr	r3, [pc, #180]	; (40076c <sd_mmc_check+0x2ac>)
  4006b6:	681b      	ldr	r3, [r3, #0]
  4006b8:	2205      	movs	r2, #5
  4006ba:	72da      	strb	r2, [r3, #11]
  4006bc:	f1b9 0f00 	cmp.w	r9, #0
  4006c0:	4f32      	ldr	r7, [pc, #200]	; (40078c <sd_mmc_check+0x2cc>)
  4006c2:	bf14      	ite	ne
  4006c4:	46b9      	movne	r9, r7
  4006c6:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  4006ca:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4006ce:	f04f 0800 	mov.w	r8, #0
  4006d2:	4e29      	ldr	r6, [pc, #164]	; (400778 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4006d4:	4f29      	ldr	r7, [pc, #164]	; (40077c <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4006d6:	4641      	mov	r1, r8
  4006d8:	f241 1037 	movw	r0, #4407	; 0x1137
  4006dc:	47b0      	blx	r6
  4006de:	b148      	cbz	r0, 4006f4 <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4006e0:	4649      	mov	r1, r9
  4006e2:	f244 5029 	movw	r0, #17705	; 0x4529
  4006e6:	47b0      	blx	r6
  4006e8:	b120      	cbz	r0, 4006f4 <sd_mmc_check+0x234>
		resp = driver_get_response();
  4006ea:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4006ec:	2800      	cmp	r0, #0
  4006ee:	db20      	blt.n	400732 <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4006f0:	3d01      	subs	r5, #1
  4006f2:	d1f0      	bne.n	4006d6 <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4006f4:	4b1d      	ldr	r3, [pc, #116]	; (40076c <sd_mmc_check+0x2ac>)
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	2202      	movs	r2, #2
  4006fa:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4006fc:	2100      	movs	r1, #0
  4006fe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400702:	4b1d      	ldr	r3, [pc, #116]	; (400778 <sd_mmc_check+0x2b8>)
  400704:	4798      	blx	r3
  400706:	2800      	cmp	r0, #0
  400708:	f43f af02 	beq.w	400510 <sd_mmc_check+0x50>
  40070c:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400710:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40078c <sd_mmc_check+0x2cc>
  400714:	4e18      	ldr	r6, [pc, #96]	; (400778 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400716:	4f19      	ldr	r7, [pc, #100]	; (40077c <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400718:	4641      	mov	r1, r8
  40071a:	f244 5001 	movw	r0, #17665	; 0x4501
  40071e:	47b0      	blx	r6
  400720:	2800      	cmp	r0, #0
  400722:	f43f aef5 	beq.w	400510 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400726:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  400728:	2800      	cmp	r0, #0
  40072a:	db31      	blt.n	400790 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  40072c:	3d01      	subs	r5, #1
  40072e:	d1f3      	bne.n	400718 <sd_mmc_check+0x258>
  400730:	e6ee      	b.n	400510 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  400732:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400736:	d005      	beq.n	400744 <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400738:	4b0c      	ldr	r3, [pc, #48]	; (40076c <sd_mmc_check+0x2ac>)
  40073a:	681a      	ldr	r2, [r3, #0]
  40073c:	7ad3      	ldrb	r3, [r2, #11]
  40073e:	f043 0308 	orr.w	r3, r3, #8
  400742:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400744:	4b09      	ldr	r3, [pc, #36]	; (40076c <sd_mmc_check+0x2ac>)
  400746:	681b      	ldr	r3, [r3, #0]
  400748:	7adb      	ldrb	r3, [r3, #11]
  40074a:	f013 0f01 	tst.w	r3, #1
  40074e:	f43f af00 	beq.w	400552 <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400752:	2100      	movs	r1, #0
  400754:	f645 3002 	movw	r0, #23298	; 0x5b02
  400758:	4b07      	ldr	r3, [pc, #28]	; (400778 <sd_mmc_check+0x2b8>)
  40075a:	4798      	blx	r3
  40075c:	2800      	cmp	r0, #0
  40075e:	f47f aef8 	bne.w	400552 <sd_mmc_check+0x92>
  400762:	e6d5      	b.n	400510 <sd_mmc_check+0x50>
  400764:	004003c1 	.word	0x004003c1
  400768:	00400485 	.word	0x00400485
  40076c:	20400b5c 	.word	0x20400b5c
  400770:	004020af 	.word	0x004020af
  400774:	00400419 	.word	0x00400419
  400778:	004020d1 	.word	0x004020d1
  40077c:	004020f5 	.word	0x004020f5
  400780:	00400451 	.word	0x00400451
  400784:	0040fd00 	.word	0x0040fd00
  400788:	0040fd1c 	.word	0x0040fd1c
  40078c:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  400790:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  400794:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400798:	d027      	beq.n	4007ea <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40079a:	2100      	movs	r1, #0
  40079c:	f645 3002 	movw	r0, #23298	; 0x5b02
  4007a0:	4ba7      	ldr	r3, [pc, #668]	; (400a40 <sd_mmc_check+0x580>)
  4007a2:	4798      	blx	r3
  4007a4:	2800      	cmp	r0, #0
  4007a6:	f43f aeb3 	beq.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  4007aa:	4ba6      	ldr	r3, [pc, #664]	; (400a44 <sd_mmc_check+0x584>)
  4007ac:	681b      	ldr	r3, [r3, #0]
  4007ae:	2201      	movs	r2, #1
  4007b0:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4007b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4007b6:	f241 1003 	movw	r0, #4355	; 0x1103
  4007ba:	4ba1      	ldr	r3, [pc, #644]	; (400a40 <sd_mmc_check+0x580>)
  4007bc:	4798      	blx	r3
  4007be:	2800      	cmp	r0, #0
  4007c0:	f43f aea6 	beq.w	400510 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  4007c4:	4ba0      	ldr	r3, [pc, #640]	; (400a48 <sd_mmc_check+0x588>)
  4007c6:	4798      	blx	r3
  4007c8:	2800      	cmp	r0, #0
  4007ca:	f43f aea1 	beq.w	400510 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4007ce:	4b9d      	ldr	r3, [pc, #628]	; (400a44 <sd_mmc_check+0x584>)
  4007d0:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4007d2:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
  4007d4:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4007d8:	3b01      	subs	r3, #1
  4007da:	2b03      	cmp	r3, #3
  4007dc:	d80c      	bhi.n	4007f8 <sd_mmc_check+0x338>
  4007de:	e8df f013 	tbh	[pc, r3, lsl #1]
  4007e2:	00cc      	.short	0x00cc
  4007e4:	00d200cf 	.word	0x00d200cf
  4007e8:	00d5      	.short	0x00d5
				sd_mmc_card->type |= CARD_TYPE_HC;
  4007ea:	4b96      	ldr	r3, [pc, #600]	; (400a44 <sd_mmc_check+0x584>)
  4007ec:	681a      	ldr	r2, [r3, #0]
  4007ee:	7ad3      	ldrb	r3, [r2, #11]
  4007f0:	f043 0308 	orr.w	r3, r3, #8
  4007f4:	72d3      	strb	r3, [r2, #11]
  4007f6:	e7d0      	b.n	40079a <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4007f8:	2312      	movs	r3, #18
  4007fa:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4007fc:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4007fe:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400802:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400806:	4991      	ldr	r1, [pc, #580]	; (400a4c <sd_mmc_check+0x58c>)
  400808:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  40080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400810:	fb03 f301 	mul.w	r3, r3, r1
  400814:	498e      	ldr	r1, [pc, #568]	; (400a50 <sd_mmc_check+0x590>)
  400816:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40081a:	fb03 f301 	mul.w	r3, r3, r1
  40081e:	6013      	str	r3, [r2, #0]
  400820:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400822:	7d50      	ldrb	r0, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400824:	7d13      	ldrb	r3, [r2, #20]
  400826:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400828:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  40082c:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400830:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  400834:	f640 71ff 	movw	r1, #4095	; 0xfff
  400838:	428b      	cmp	r3, r1
  40083a:	d00f      	beq.n	40085c <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40083c:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40083e:	7dd1      	ldrb	r1, [r2, #23]
  400840:	0049      	lsls	r1, r1, #1
  400842:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400846:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400848:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  40084c:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40084e:	408b      	lsls	r3, r1
  400850:	7cd1      	ldrb	r1, [r2, #19]
  400852:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  400856:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400858:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  40085a:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  40085c:	8911      	ldrh	r1, [r2, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40085e:	0409      	lsls	r1, r1, #16
  400860:	f243 1007 	movw	r0, #12551	; 0x3107
  400864:	4b76      	ldr	r3, [pc, #472]	; (400a40 <sd_mmc_check+0x580>)
  400866:	4798      	blx	r3
  400868:	2800      	cmp	r0, #0
  40086a:	f43f ae51 	beq.w	400510 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  40086e:	4b75      	ldr	r3, [pc, #468]	; (400a44 <sd_mmc_check+0x584>)
  400870:	681b      	ldr	r3, [r3, #0]
  400872:	7b1b      	ldrb	r3, [r3, #12]
  400874:	2b3f      	cmp	r3, #63	; 0x3f
  400876:	f240 8096 	bls.w	4009a6 <sd_mmc_check+0x4e6>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  40087a:	2100      	movs	r1, #0
  40087c:	9100      	str	r1, [sp, #0]
  40087e:	2301      	movs	r3, #1
  400880:	f44f 7200 	mov.w	r2, #512	; 0x200
  400884:	4873      	ldr	r0, [pc, #460]	; (400a54 <sd_mmc_check+0x594>)
  400886:	4d74      	ldr	r5, [pc, #464]	; (400a58 <sd_mmc_check+0x598>)
  400888:	47a8      	blx	r5
  40088a:	2800      	cmp	r0, #0
  40088c:	f43f ae40 	beq.w	400510 <sd_mmc_check+0x50>
  400890:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  400892:	4e72      	ldr	r6, [pc, #456]	; (400a5c <sd_mmc_check+0x59c>)
  400894:	a803      	add	r0, sp, #12
  400896:	47b0      	blx	r6
  400898:	2800      	cmp	r0, #0
  40089a:	f43f ae39 	beq.w	400510 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  40089e:	3501      	adds	r5, #1
  4008a0:	b2ad      	uxth	r5, r5
  4008a2:	2d32      	cmp	r5, #50	; 0x32
  4008a4:	d1f6      	bne.n	400894 <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  4008a6:	9e03      	ldr	r6, [sp, #12]
  4008a8:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4008ac:	4b65      	ldr	r3, [pc, #404]	; (400a44 <sd_mmc_check+0x584>)
  4008ae:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4008b0:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4008b2:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008b4:	7d1b      	ldrb	r3, [r3, #20]
  4008b6:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008b8:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  4008bc:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4008c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4008c4:	f640 72ff 	movw	r2, #4095	; 0xfff
  4008c8:	4293      	cmp	r3, r2
  4008ca:	d10e      	bne.n	4008ea <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  4008cc:	4f63      	ldr	r7, [pc, #396]	; (400a5c <sd_mmc_check+0x59c>)
  4008ce:	a804      	add	r0, sp, #16
  4008d0:	47b8      	blx	r7
  4008d2:	2800      	cmp	r0, #0
  4008d4:	f43f ae1c 	beq.w	400510 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4008d8:	3501      	adds	r5, #1
  4008da:	b2ad      	uxth	r5, r5
  4008dc:	2d35      	cmp	r5, #53	; 0x35
  4008de:	d9f6      	bls.n	4008ce <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  4008e0:	4b58      	ldr	r3, [pc, #352]	; (400a44 <sd_mmc_check+0x584>)
  4008e2:	681a      	ldr	r2, [r3, #0]
  4008e4:	9b04      	ldr	r3, [sp, #16]
  4008e6:	085b      	lsrs	r3, r3, #1
  4008e8:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4008ea:	4f5c      	ldr	r7, [pc, #368]	; (400a5c <sd_mmc_check+0x59c>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4008ec:	2d7f      	cmp	r5, #127	; 0x7f
  4008ee:	d950      	bls.n	400992 <sd_mmc_check+0x4d2>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4008f0:	4b5b      	ldr	r3, [pc, #364]	; (400a60 <sd_mmc_check+0x5a0>)
  4008f2:	7818      	ldrb	r0, [r3, #0]
  4008f4:	4b5b      	ldr	r3, [pc, #364]	; (400a64 <sd_mmc_check+0x5a4>)
  4008f6:	4798      	blx	r3
  4008f8:	2803      	cmp	r0, #3
  4008fa:	d91d      	bls.n	400938 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4008fc:	4b58      	ldr	r3, [pc, #352]	; (400a60 <sd_mmc_check+0x5a0>)
  4008fe:	7818      	ldrb	r0, [r3, #0]
  400900:	4b58      	ldr	r3, [pc, #352]	; (400a64 <sd_mmc_check+0x5a4>)
  400902:	4798      	blx	r3
  400904:	4605      	mov	r5, r0
	switch (bus_width) {
  400906:	2804      	cmp	r0, #4
  400908:	d04b      	beq.n	4009a2 <sd_mmc_check+0x4e2>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40090a:	4b57      	ldr	r3, [pc, #348]	; (400a68 <sd_mmc_check+0x5a8>)
  40090c:	4957      	ldr	r1, [pc, #348]	; (400a6c <sd_mmc_check+0x5ac>)
  40090e:	2808      	cmp	r0, #8
  400910:	bf18      	it	ne
  400912:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  400914:	f243 1006 	movw	r0, #12550	; 0x3106
  400918:	4b49      	ldr	r3, [pc, #292]	; (400a40 <sd_mmc_check+0x580>)
  40091a:	4798      	blx	r3
  40091c:	2800      	cmp	r0, #0
  40091e:	f43f adf7 	beq.w	400510 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400922:	4b53      	ldr	r3, [pc, #332]	; (400a70 <sd_mmc_check+0x5b0>)
  400924:	4798      	blx	r3
  400926:	f010 0f80 	tst.w	r0, #128	; 0x80
  40092a:	f47f adf1 	bne.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  40092e:	4b45      	ldr	r3, [pc, #276]	; (400a44 <sd_mmc_check+0x584>)
  400930:	681b      	ldr	r3, [r3, #0]
  400932:	735d      	strb	r5, [r3, #13]
			sd_mmc_configure_slot();
  400934:	4b4f      	ldr	r3, [pc, #316]	; (400a74 <sd_mmc_check+0x5b4>)
  400936:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400938:	4b4f      	ldr	r3, [pc, #316]	; (400a78 <sd_mmc_check+0x5b8>)
  40093a:	4798      	blx	r3
  40093c:	b1b6      	cbz	r6, 40096c <sd_mmc_check+0x4ac>
  40093e:	b1a8      	cbz	r0, 40096c <sd_mmc_check+0x4ac>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400940:	494e      	ldr	r1, [pc, #312]	; (400a7c <sd_mmc_check+0x5bc>)
  400942:	f243 1006 	movw	r0, #12550	; 0x3106
  400946:	4b3e      	ldr	r3, [pc, #248]	; (400a40 <sd_mmc_check+0x580>)
  400948:	4798      	blx	r3
  40094a:	2800      	cmp	r0, #0
  40094c:	f43f ade0 	beq.w	400510 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400950:	4b47      	ldr	r3, [pc, #284]	; (400a70 <sd_mmc_check+0x5b0>)
  400952:	4798      	blx	r3
  400954:	f010 0f80 	tst.w	r0, #128	; 0x80
  400958:	f47f adda 	bne.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  40095c:	4b39      	ldr	r3, [pc, #228]	; (400a44 <sd_mmc_check+0x584>)
  40095e:	681b      	ldr	r3, [r3, #0]
  400960:	2201      	movs	r2, #1
  400962:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  400964:	4a46      	ldr	r2, [pc, #280]	; (400a80 <sd_mmc_check+0x5c0>)
  400966:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400968:	4b42      	ldr	r3, [pc, #264]	; (400a74 <sd_mmc_check+0x5b4>)
  40096a:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  40096c:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40096e:	f44f 7800 	mov.w	r8, #512	; 0x200
  400972:	f241 1710 	movw	r7, #4368	; 0x1110
  400976:	4e32      	ldr	r6, [pc, #200]	; (400a40 <sd_mmc_check+0x580>)
  400978:	e01d      	b.n	4009b6 <sd_mmc_check+0x4f6>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  40097a:	2314      	movs	r3, #20
  40097c:	7313      	strb	r3, [r2, #12]
  40097e:	e73d      	b.n	4007fc <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  400980:	2322      	movs	r3, #34	; 0x22
  400982:	7313      	strb	r3, [r2, #12]
  400984:	e73a      	b.n	4007fc <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  400986:	2330      	movs	r3, #48	; 0x30
  400988:	7313      	strb	r3, [r2, #12]
  40098a:	e737      	b.n	4007fc <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  40098c:	2340      	movs	r3, #64	; 0x40
  40098e:	7313      	strb	r3, [r2, #12]
  400990:	e734      	b.n	4007fc <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  400992:	a804      	add	r0, sp, #16
  400994:	47b8      	blx	r7
  400996:	2800      	cmp	r0, #0
  400998:	f43f adba 	beq.w	400510 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  40099c:	3501      	adds	r5, #1
  40099e:	b2ad      	uxth	r5, r5
  4009a0:	e7a4      	b.n	4008ec <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4009a2:	4938      	ldr	r1, [pc, #224]	; (400a84 <sd_mmc_check+0x5c4>)
  4009a4:	e7b6      	b.n	400914 <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  4009a6:	4b33      	ldr	r3, [pc, #204]	; (400a74 <sd_mmc_check+0x5b4>)
  4009a8:	4798      	blx	r3
  4009aa:	e7df      	b.n	40096c <sd_mmc_check+0x4ac>
  4009ac:	3d01      	subs	r5, #1
	while (retry--) {
  4009ae:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  4009b2:	f43f adad 	beq.w	400510 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4009b6:	4641      	mov	r1, r8
  4009b8:	4638      	mov	r0, r7
  4009ba:	47b0      	blx	r6
  4009bc:	2800      	cmp	r0, #0
  4009be:	d0f5      	beq.n	4009ac <sd_mmc_check+0x4ec>
  4009c0:	e10e      	b.n	400be0 <sd_mmc_check+0x720>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4009c2:	7dd9      	ldrb	r1, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4009c4:	7d98      	ldrb	r0, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4009c6:	7d5a      	ldrb	r2, [r3, #21]
  4009c8:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4009ca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  4009ce:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  4009d0:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  4009d4:	3201      	adds	r2, #1
  4009d6:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4009d8:	605a      	str	r2, [r3, #4]
  4009da:	e601      	b.n	4005e0 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4009dc:	8919      	ldrh	r1, [r3, #8]
  4009de:	0409      	lsls	r1, r1, #16
  4009e0:	f241 1037 	movw	r0, #4407	; 0x1137
  4009e4:	4b16      	ldr	r3, [pc, #88]	; (400a40 <sd_mmc_check+0x580>)
  4009e6:	4798      	blx	r3
  4009e8:	2800      	cmp	r0, #0
  4009ea:	f43f ad91 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4009ee:	2301      	movs	r3, #1
  4009f0:	9300      	str	r3, [sp, #0]
  4009f2:	2208      	movs	r2, #8
  4009f4:	2100      	movs	r1, #0
  4009f6:	4824      	ldr	r0, [pc, #144]	; (400a88 <sd_mmc_check+0x5c8>)
  4009f8:	4d17      	ldr	r5, [pc, #92]	; (400a58 <sd_mmc_check+0x598>)
  4009fa:	47a8      	blx	r5
  4009fc:	2800      	cmp	r0, #0
  4009fe:	f43f ad87 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  400a02:	2101      	movs	r1, #1
  400a04:	a804      	add	r0, sp, #16
  400a06:	4b21      	ldr	r3, [pc, #132]	; (400a8c <sd_mmc_check+0x5cc>)
  400a08:	4798      	blx	r3
  400a0a:	2800      	cmp	r0, #0
  400a0c:	f43f ad80 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400a10:	4b1f      	ldr	r3, [pc, #124]	; (400a90 <sd_mmc_check+0x5d0>)
  400a12:	4798      	blx	r3
  400a14:	2800      	cmp	r0, #0
  400a16:	f43f ad7b 	beq.w	400510 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  400a1a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a1e:	f003 030f 	and.w	r3, r3, #15
  400a22:	2b01      	cmp	r3, #1
  400a24:	d036      	beq.n	400a94 <sd_mmc_check+0x5d4>
  400a26:	b133      	cbz	r3, 400a36 <sd_mmc_check+0x576>
  400a28:	2b02      	cmp	r3, #2
  400a2a:	d038      	beq.n	400a9e <sd_mmc_check+0x5de>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400a2c:	4b05      	ldr	r3, [pc, #20]	; (400a44 <sd_mmc_check+0x584>)
  400a2e:	681b      	ldr	r3, [r3, #0]
  400a30:	2210      	movs	r2, #16
  400a32:	731a      	strb	r2, [r3, #12]
  400a34:	e5e5      	b.n	400602 <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400a36:	4b03      	ldr	r3, [pc, #12]	; (400a44 <sd_mmc_check+0x584>)
  400a38:	681b      	ldr	r3, [r3, #0]
  400a3a:	2210      	movs	r2, #16
  400a3c:	731a      	strb	r2, [r3, #12]
  400a3e:	e5e0      	b.n	400602 <sd_mmc_check+0x142>
  400a40:	004020d1 	.word	0x004020d1
  400a44:	20400b5c 	.word	0x20400b5c
  400a48:	00400451 	.word	0x00400451
  400a4c:	0040fd00 	.word	0x0040fd00
  400a50:	0040fcc0 	.word	0x0040fcc0
  400a54:	00081108 	.word	0x00081108
  400a58:	0040212d 	.word	0x0040212d
  400a5c:	004021f5 	.word	0x004021f5
  400a60:	20400b84 	.word	0x20400b84
  400a64:	00401fd9 	.word	0x00401fd9
  400a68:	01b70000 	.word	0x01b70000
  400a6c:	01b70200 	.word	0x01b70200
  400a70:	004020f5 	.word	0x004020f5
  400a74:	00400399 	.word	0x00400399
  400a78:	00401fe3 	.word	0x00401fe3
  400a7c:	03b90100 	.word	0x03b90100
  400a80:	03197500 	.word	0x03197500
  400a84:	01b70100 	.word	0x01b70100
  400a88:	00081133 	.word	0x00081133
  400a8c:	00402269 	.word	0x00402269
  400a90:	004022f9 	.word	0x004022f9
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400a94:	4b98      	ldr	r3, [pc, #608]	; (400cf8 <sd_mmc_check+0x838>)
  400a96:	681b      	ldr	r3, [r3, #0]
  400a98:	221a      	movs	r2, #26
  400a9a:	731a      	strb	r2, [r3, #12]
  400a9c:	e5b1      	b.n	400602 <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400a9e:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400aa2:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400aa4:	4b94      	ldr	r3, [pc, #592]	; (400cf8 <sd_mmc_check+0x838>)
  400aa6:	681b      	ldr	r3, [r3, #0]
  400aa8:	bf14      	ite	ne
  400aaa:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400aac:	2220      	moveq	r2, #32
  400aae:	731a      	strb	r2, [r3, #12]
  400ab0:	e5a7      	b.n	400602 <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  400ab2:	f89d 3011 	ldrb.w	r3, [sp, #17]
  400ab6:	2b00      	cmp	r3, #0
  400ab8:	f43f ad2a 	beq.w	400510 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400abc:	3302      	adds	r3, #2
  400abe:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  400ac0:	f509 7380 	add.w	r3, r9, #256	; 0x100
  400ac4:	429e      	cmp	r6, r3
  400ac6:	f63f ad23 	bhi.w	400510 <sd_mmc_check+0x50>
	addr_new = addr_old;
  400aca:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400acc:	ab04      	add	r3, sp, #16
  400ace:	442b      	add	r3, r5
  400ad0:	9300      	str	r3, [sp, #0]
  400ad2:	4643      	mov	r3, r8
  400ad4:	1972      	adds	r2, r6, r5
  400ad6:	4641      	mov	r1, r8
  400ad8:	4640      	mov	r0, r8
  400ada:	47b8      	blx	r7
  400adc:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  400ade:	2d03      	cmp	r5, #3
  400ae0:	d1f4      	bne.n	400acc <sd_mmc_check+0x60c>
		if (buf[0] == SDIO_CISTPL_END) {
  400ae2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400ae6:	2bff      	cmp	r3, #255	; 0xff
  400ae8:	f43f ad12 	beq.w	400510 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  400aec:	2b22      	cmp	r3, #34	; 0x22
  400aee:	d1e0      	bne.n	400ab2 <sd_mmc_check+0x5f2>
  400af0:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400af4:	2b00      	cmp	r3, #0
  400af6:	d1dc      	bne.n	400ab2 <sd_mmc_check+0x5f2>
  400af8:	ad04      	add	r5, sp, #16
  400afa:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400afe:	f04f 0800 	mov.w	r8, #0
  400b02:	4f7e      	ldr	r7, [pc, #504]	; (400cfc <sd_mmc_check+0x83c>)
  400b04:	9500      	str	r5, [sp, #0]
  400b06:	4643      	mov	r3, r8
  400b08:	4632      	mov	r2, r6
  400b0a:	4641      	mov	r1, r8
  400b0c:	4640      	mov	r0, r8
  400b0e:	47b8      	blx	r7
		addr_new++;
  400b10:	3601      	adds	r6, #1
  400b12:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  400b14:	454e      	cmp	r6, r9
  400b16:	d1f5      	bne.n	400b04 <sd_mmc_check+0x644>
	tplfe_max_tran_speed = buf[5];
  400b18:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400b1c:	2b32      	cmp	r3, #50	; 0x32
  400b1e:	bf28      	it	cs
  400b20:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  400b22:	4a75      	ldr	r2, [pc, #468]	; (400cf8 <sd_mmc_check+0x838>)
  400b24:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  400b26:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  400b2a:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400b2e:	4974      	ldr	r1, [pc, #464]	; (400d00 <sd_mmc_check+0x840>)
  400b30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  400b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400b38:	fb03 f301 	mul.w	r3, r3, r1
  400b3c:	4971      	ldr	r1, [pc, #452]	; (400d04 <sd_mmc_check+0x844>)
  400b3e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400b42:	fb03 f301 	mul.w	r3, r3, r1
  400b46:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400b48:	4b6f      	ldr	r3, [pc, #444]	; (400d08 <sd_mmc_check+0x848>)
  400b4a:	7818      	ldrb	r0, [r3, #0]
  400b4c:	4b6f      	ldr	r3, [pc, #444]	; (400d0c <sd_mmc_check+0x84c>)
  400b4e:	4798      	blx	r3
  400b50:	2803      	cmp	r0, #3
  400b52:	d922      	bls.n	400b9a <sd_mmc_check+0x6da>
		if (IS_SDIO()) {
  400b54:	4b68      	ldr	r3, [pc, #416]	; (400cf8 <sd_mmc_check+0x838>)
  400b56:	681b      	ldr	r3, [r3, #0]
  400b58:	7adb      	ldrb	r3, [r3, #11]
  400b5a:	f013 0f04 	tst.w	r3, #4
  400b5e:	d146      	bne.n	400bee <sd_mmc_check+0x72e>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b60:	4b65      	ldr	r3, [pc, #404]	; (400cf8 <sd_mmc_check+0x838>)
  400b62:	681b      	ldr	r3, [r3, #0]
  400b64:	7ada      	ldrb	r2, [r3, #11]
  400b66:	f012 0f01 	tst.w	r2, #1
  400b6a:	d014      	beq.n	400b96 <sd_mmc_check+0x6d6>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400b6c:	8919      	ldrh	r1, [r3, #8]
  400b6e:	0409      	lsls	r1, r1, #16
  400b70:	f241 1037 	movw	r0, #4407	; 0x1137
  400b74:	4b66      	ldr	r3, [pc, #408]	; (400d10 <sd_mmc_check+0x850>)
  400b76:	4798      	blx	r3
  400b78:	2800      	cmp	r0, #0
  400b7a:	f43f acc9 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400b7e:	2102      	movs	r1, #2
  400b80:	f241 1006 	movw	r0, #4358	; 0x1106
  400b84:	4b62      	ldr	r3, [pc, #392]	; (400d10 <sd_mmc_check+0x850>)
  400b86:	4798      	blx	r3
  400b88:	2800      	cmp	r0, #0
  400b8a:	f43f acc1 	beq.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400b8e:	4b5a      	ldr	r3, [pc, #360]	; (400cf8 <sd_mmc_check+0x838>)
  400b90:	681b      	ldr	r3, [r3, #0]
  400b92:	2204      	movs	r2, #4
  400b94:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
  400b96:	4b5f      	ldr	r3, [pc, #380]	; (400d14 <sd_mmc_check+0x854>)
  400b98:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400b9a:	4b5f      	ldr	r3, [pc, #380]	; (400d18 <sd_mmc_check+0x858>)
  400b9c:	4798      	blx	r3
  400b9e:	b180      	cbz	r0, 400bc2 <sd_mmc_check+0x702>
		if (IS_SDIO()) {
  400ba0:	4b55      	ldr	r3, [pc, #340]	; (400cf8 <sd_mmc_check+0x838>)
  400ba2:	681b      	ldr	r3, [r3, #0]
  400ba4:	7adb      	ldrb	r3, [r3, #11]
  400ba6:	f013 0f04 	tst.w	r3, #4
  400baa:	d141      	bne.n	400c30 <sd_mmc_check+0x770>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400bac:	4b52      	ldr	r3, [pc, #328]	; (400cf8 <sd_mmc_check+0x838>)
  400bae:	681b      	ldr	r3, [r3, #0]
  400bb0:	7ada      	ldrb	r2, [r3, #11]
  400bb2:	f012 0f01 	tst.w	r2, #1
  400bb6:	d002      	beq.n	400bbe <sd_mmc_check+0x6fe>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400bb8:	7b1b      	ldrb	r3, [r3, #12]
  400bba:	2b10      	cmp	r3, #16
  400bbc:	d85d      	bhi.n	400c7a <sd_mmc_check+0x7ba>
		sd_mmc_configure_slot();
  400bbe:	4b55      	ldr	r3, [pc, #340]	; (400d14 <sd_mmc_check+0x854>)
  400bc0:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400bc2:	4b4d      	ldr	r3, [pc, #308]	; (400cf8 <sd_mmc_check+0x838>)
  400bc4:	681b      	ldr	r3, [r3, #0]
  400bc6:	7adb      	ldrb	r3, [r3, #11]
  400bc8:	f013 0f01 	tst.w	r3, #1
  400bcc:	d008      	beq.n	400be0 <sd_mmc_check+0x720>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400bce:	f44f 7100 	mov.w	r1, #512	; 0x200
  400bd2:	f241 1010 	movw	r0, #4368	; 0x1110
  400bd6:	4b4e      	ldr	r3, [pc, #312]	; (400d10 <sd_mmc_check+0x850>)
  400bd8:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400bda:	2800      	cmp	r0, #0
  400bdc:	f43f ac98 	beq.w	400510 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400be0:	4b45      	ldr	r3, [pc, #276]	; (400cf8 <sd_mmc_check+0x838>)
  400be2:	681b      	ldr	r3, [r3, #0]
  400be4:	2200      	movs	r2, #0
  400be6:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  400be8:	4b4c      	ldr	r3, [pc, #304]	; (400d1c <sd_mmc_check+0x85c>)
  400bea:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400bec:	e472      	b.n	4004d4 <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400bee:	ab04      	add	r3, sp, #16
  400bf0:	9300      	str	r3, [sp, #0]
  400bf2:	2300      	movs	r3, #0
  400bf4:	2208      	movs	r2, #8
  400bf6:	4619      	mov	r1, r3
  400bf8:	4618      	mov	r0, r3
  400bfa:	4d40      	ldr	r5, [pc, #256]	; (400cfc <sd_mmc_check+0x83c>)
  400bfc:	47a8      	blx	r5
  400bfe:	2800      	cmp	r0, #0
  400c00:	f43f ac86 	beq.w	400510 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400c04:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400c08:	2b00      	cmp	r3, #0
  400c0a:	daa9      	bge.n	400b60 <sd_mmc_check+0x6a0>
	u8_value = SDIO_BUSWIDTH_4B;
  400c0c:	ab14      	add	r3, sp, #80	; 0x50
  400c0e:	2202      	movs	r2, #2
  400c10:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400c14:	9300      	str	r3, [sp, #0]
  400c16:	2301      	movs	r3, #1
  400c18:	2207      	movs	r2, #7
  400c1a:	2100      	movs	r1, #0
  400c1c:	4618      	mov	r0, r3
  400c1e:	47a8      	blx	r5
  400c20:	2800      	cmp	r0, #0
  400c22:	f43f ac75 	beq.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400c26:	4b34      	ldr	r3, [pc, #208]	; (400cf8 <sd_mmc_check+0x838>)
  400c28:	681b      	ldr	r3, [r3, #0]
  400c2a:	2204      	movs	r2, #4
  400c2c:	735a      	strb	r2, [r3, #13]
  400c2e:	e797      	b.n	400b60 <sd_mmc_check+0x6a0>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400c30:	ab04      	add	r3, sp, #16
  400c32:	9300      	str	r3, [sp, #0]
  400c34:	2300      	movs	r3, #0
  400c36:	2213      	movs	r2, #19
  400c38:	4619      	mov	r1, r3
  400c3a:	4618      	mov	r0, r3
  400c3c:	4d2f      	ldr	r5, [pc, #188]	; (400cfc <sd_mmc_check+0x83c>)
  400c3e:	47a8      	blx	r5
  400c40:	2800      	cmp	r0, #0
  400c42:	f43f ac65 	beq.w	400510 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400c46:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400c4a:	f013 0f01 	tst.w	r3, #1
  400c4e:	d0ad      	beq.n	400bac <sd_mmc_check+0x6ec>
	u8_value = SDIO_EHS;
  400c50:	ab14      	add	r3, sp, #80	; 0x50
  400c52:	2202      	movs	r2, #2
  400c54:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400c58:	9300      	str	r3, [sp, #0]
  400c5a:	2301      	movs	r3, #1
  400c5c:	2213      	movs	r2, #19
  400c5e:	2100      	movs	r1, #0
  400c60:	4618      	mov	r0, r3
  400c62:	47a8      	blx	r5
  400c64:	2800      	cmp	r0, #0
  400c66:	f43f ac53 	beq.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400c6a:	4b23      	ldr	r3, [pc, #140]	; (400cf8 <sd_mmc_check+0x838>)
  400c6c:	681b      	ldr	r3, [r3, #0]
  400c6e:	2201      	movs	r2, #1
  400c70:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400c72:	681a      	ldr	r2, [r3, #0]
  400c74:	0052      	lsls	r2, r2, #1
  400c76:	601a      	str	r2, [r3, #0]
  400c78:	e798      	b.n	400bac <sd_mmc_check+0x6ec>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400c7a:	2540      	movs	r5, #64	; 0x40
  400c7c:	462a      	mov	r2, r5
  400c7e:	2100      	movs	r1, #0
  400c80:	a804      	add	r0, sp, #16
  400c82:	4b27      	ldr	r3, [pc, #156]	; (400d20 <sd_mmc_check+0x860>)
  400c84:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400c86:	2301      	movs	r3, #1
  400c88:	9300      	str	r3, [sp, #0]
  400c8a:	462a      	mov	r2, r5
  400c8c:	4925      	ldr	r1, [pc, #148]	; (400d24 <sd_mmc_check+0x864>)
  400c8e:	4826      	ldr	r0, [pc, #152]	; (400d28 <sd_mmc_check+0x868>)
  400c90:	4d26      	ldr	r5, [pc, #152]	; (400d2c <sd_mmc_check+0x86c>)
  400c92:	47a8      	blx	r5
  400c94:	2800      	cmp	r0, #0
  400c96:	f43f ac3b 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400c9a:	2101      	movs	r1, #1
  400c9c:	a804      	add	r0, sp, #16
  400c9e:	4b24      	ldr	r3, [pc, #144]	; (400d30 <sd_mmc_check+0x870>)
  400ca0:	4798      	blx	r3
  400ca2:	2800      	cmp	r0, #0
  400ca4:	f43f ac34 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400ca8:	4b22      	ldr	r3, [pc, #136]	; (400d34 <sd_mmc_check+0x874>)
  400caa:	4798      	blx	r3
  400cac:	2800      	cmp	r0, #0
  400cae:	f43f ac2f 	beq.w	400510 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400cb2:	4b21      	ldr	r3, [pc, #132]	; (400d38 <sd_mmc_check+0x878>)
  400cb4:	4798      	blx	r3
  400cb6:	f010 0f80 	tst.w	r0, #128	; 0x80
  400cba:	f47f ac29 	bne.w	400510 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400cbe:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400cc2:	f003 030f 	and.w	r3, r3, #15
  400cc6:	2b0f      	cmp	r3, #15
  400cc8:	f43f af79 	beq.w	400bbe <sd_mmc_check+0x6fe>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400ccc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400cd0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400cd4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400cd8:	f47f ac1a 	bne.w	400510 <sd_mmc_check+0x50>
	driver_send_clock();
  400cdc:	4b17      	ldr	r3, [pc, #92]	; (400d3c <sd_mmc_check+0x87c>)
  400cde:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400ce0:	4b05      	ldr	r3, [pc, #20]	; (400cf8 <sd_mmc_check+0x838>)
  400ce2:	681b      	ldr	r3, [r3, #0]
  400ce4:	2201      	movs	r2, #1
  400ce6:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400ce8:	681a      	ldr	r2, [r3, #0]
  400cea:	0052      	lsls	r2, r2, #1
  400cec:	601a      	str	r2, [r3, #0]
  400cee:	e766      	b.n	400bbe <sd_mmc_check+0x6fe>
	*v2 = 0;
  400cf0:	f04f 0900 	mov.w	r9, #0
  400cf4:	e41e      	b.n	400534 <sd_mmc_check+0x74>
  400cf6:	bf00      	nop
  400cf8:	20400b5c 	.word	0x20400b5c
  400cfc:	00400419 	.word	0x00400419
  400d00:	0040fd00 	.word	0x0040fd00
  400d04:	0040fd1c 	.word	0x0040fd1c
  400d08:	20400b84 	.word	0x20400b84
  400d0c:	00401fd9 	.word	0x00401fd9
  400d10:	004020d1 	.word	0x004020d1
  400d14:	00400399 	.word	0x00400399
  400d18:	00401fe3 	.word	0x00401fe3
  400d1c:	00400485 	.word	0x00400485
  400d20:	0040cfb5 	.word	0x0040cfb5
  400d24:	80ffff01 	.word	0x80ffff01
  400d28:	00081106 	.word	0x00081106
  400d2c:	0040212d 	.word	0x0040212d
  400d30:	00402269 	.word	0x00402269
  400d34:	004022f9 	.word	0x004022f9
  400d38:	004020f5 	.word	0x004020f5
  400d3c:	004020af 	.word	0x004020af

00400d40 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400d40:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400d42:	4b05      	ldr	r3, [pc, #20]	; (400d58 <sd_mmc_get_type+0x18>)
  400d44:	4798      	blx	r3
  400d46:	b108      	cbz	r0, 400d4c <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400d48:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400d4a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400d4c:	4b03      	ldr	r3, [pc, #12]	; (400d5c <sd_mmc_get_type+0x1c>)
  400d4e:	4798      	blx	r3
	return sd_mmc_card->type;
  400d50:	4b03      	ldr	r3, [pc, #12]	; (400d60 <sd_mmc_get_type+0x20>)
  400d52:	681b      	ldr	r3, [r3, #0]
  400d54:	7ad8      	ldrb	r0, [r3, #11]
  400d56:	bd08      	pop	{r3, pc}
  400d58:	004003c1 	.word	0x004003c1
  400d5c:	00400485 	.word	0x00400485
  400d60:	20400b5c 	.word	0x20400b5c

00400d64 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400d64:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400d66:	4b05      	ldr	r3, [pc, #20]	; (400d7c <sd_mmc_get_capacity+0x18>)
  400d68:	4798      	blx	r3
  400d6a:	b108      	cbz	r0, 400d70 <sd_mmc_get_capacity+0xc>
		return 0;
  400d6c:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400d6e:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400d70:	4b03      	ldr	r3, [pc, #12]	; (400d80 <sd_mmc_get_capacity+0x1c>)
  400d72:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400d74:	4b03      	ldr	r3, [pc, #12]	; (400d84 <sd_mmc_get_capacity+0x20>)
  400d76:	681b      	ldr	r3, [r3, #0]
  400d78:	6858      	ldr	r0, [r3, #4]
  400d7a:	bd08      	pop	{r3, pc}
  400d7c:	004003c1 	.word	0x004003c1
  400d80:	00400485 	.word	0x00400485
  400d84:	20400b5c 	.word	0x20400b5c

00400d88 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400d88:	2000      	movs	r0, #0
  400d8a:	4770      	bx	lr

00400d8c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400d90:	b082      	sub	sp, #8
  400d92:	468a      	mov	sl, r1
  400d94:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400d96:	4b26      	ldr	r3, [pc, #152]	; (400e30 <sd_mmc_init_read_blocks+0xa4>)
  400d98:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400d9a:	4680      	mov	r8, r0
  400d9c:	b118      	cbz	r0, 400da6 <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400d9e:	4640      	mov	r0, r8
  400da0:	b002      	add	sp, #8
  400da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400da6:	4c23      	ldr	r4, [pc, #140]	; (400e34 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400da8:	4e23      	ldr	r6, [pc, #140]	; (400e38 <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400daa:	4d24      	ldr	r5, [pc, #144]	; (400e3c <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400dac:	4f24      	ldr	r7, [pc, #144]	; (400e40 <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400dae:	6833      	ldr	r3, [r6, #0]
  400db0:	8919      	ldrh	r1, [r3, #8]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400db2:	0409      	lsls	r1, r1, #16
  400db4:	f241 100d 	movw	r0, #4365	; 0x110d
  400db8:	47a8      	blx	r5
  400dba:	b128      	cbz	r0, 400dc8 <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400dbc:	47b8      	blx	r7
  400dbe:	f410 7f80 	tst.w	r0, #256	; 0x100
  400dc2:	d117      	bne.n	400df4 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400dc4:	3c01      	subs	r4, #1
  400dc6:	d1f2      	bne.n	400dae <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  400dc8:	4b1e      	ldr	r3, [pc, #120]	; (400e44 <sd_mmc_init_read_blocks+0xb8>)
  400dca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400dcc:	f04f 0805 	mov.w	r8, #5
  400dd0:	e7e5      	b.n	400d9e <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400dd2:	4b1b      	ldr	r3, [pc, #108]	; (400e40 <sd_mmc_init_read_blocks+0xb4>)
  400dd4:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400dd6:	4b1c      	ldr	r3, [pc, #112]	; (400e48 <sd_mmc_init_read_blocks+0xbc>)
  400dd8:	4003      	ands	r3, r0
  400dda:	b933      	cbnz	r3, 400dea <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400ddc:	4b1b      	ldr	r3, [pc, #108]	; (400e4c <sd_mmc_init_read_blocks+0xc0>)
  400dde:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400de2:	4b1b      	ldr	r3, [pc, #108]	; (400e50 <sd_mmc_init_read_blocks+0xc4>)
  400de4:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400de8:	e7d9      	b.n	400d9e <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  400dea:	4b16      	ldr	r3, [pc, #88]	; (400e44 <sd_mmc_init_read_blocks+0xb8>)
  400dec:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400dee:	f04f 0805 	mov.w	r8, #5
  400df2:	e7d4      	b.n	400d9e <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400df4:	4b17      	ldr	r3, [pc, #92]	; (400e54 <sd_mmc_init_read_blocks+0xc8>)
  400df6:	4818      	ldr	r0, [pc, #96]	; (400e58 <sd_mmc_init_read_blocks+0xcc>)
  400df8:	f1b9 0f01 	cmp.w	r9, #1
  400dfc:	bf98      	it	ls
  400dfe:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400e00:	4b0d      	ldr	r3, [pc, #52]	; (400e38 <sd_mmc_init_read_blocks+0xac>)
  400e02:	681b      	ldr	r3, [r3, #0]
  400e04:	7adb      	ldrb	r3, [r3, #11]
  400e06:	f013 0f08 	tst.w	r3, #8
  400e0a:	d101      	bne.n	400e10 <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400e0c:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400e10:	2301      	movs	r3, #1
  400e12:	9300      	str	r3, [sp, #0]
  400e14:	464b      	mov	r3, r9
  400e16:	f44f 7200 	mov.w	r2, #512	; 0x200
  400e1a:	4651      	mov	r1, sl
  400e1c:	4c0f      	ldr	r4, [pc, #60]	; (400e5c <sd_mmc_init_read_blocks+0xd0>)
  400e1e:	47a0      	blx	r4
  400e20:	2800      	cmp	r0, #0
  400e22:	d1d6      	bne.n	400dd2 <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  400e24:	4b07      	ldr	r3, [pc, #28]	; (400e44 <sd_mmc_init_read_blocks+0xb8>)
  400e26:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400e28:	f04f 0805 	mov.w	r8, #5
  400e2c:	e7b7      	b.n	400d9e <sd_mmc_init_read_blocks+0x12>
  400e2e:	bf00      	nop
  400e30:	004003c1 	.word	0x004003c1
  400e34:	00030d41 	.word	0x00030d41
  400e38:	20400b5c 	.word	0x20400b5c
  400e3c:	004020d1 	.word	0x004020d1
  400e40:	004020f5 	.word	0x004020f5
  400e44:	00400485 	.word	0x00400485
  400e48:	e4580000 	.word	0xe4580000
  400e4c:	20400b80 	.word	0x20400b80
  400e50:	20400b82 	.word	0x20400b82
  400e54:	00081111 	.word	0x00081111
  400e58:	00101112 	.word	0x00101112
  400e5c:	0040212d 	.word	0x0040212d

00400e60 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400e60:	b510      	push	{r4, lr}
  400e62:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400e64:	4b06      	ldr	r3, [pc, #24]	; (400e80 <sd_mmc_start_read_blocks+0x20>)
  400e66:	4798      	blx	r3
  400e68:	b920      	cbnz	r0, 400e74 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e6a:	2200      	movs	r2, #0
  400e6c:	4b05      	ldr	r3, [pc, #20]	; (400e84 <sd_mmc_start_read_blocks+0x24>)
  400e6e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e70:	2005      	movs	r0, #5
  400e72:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e74:	4a03      	ldr	r2, [pc, #12]	; (400e84 <sd_mmc_start_read_blocks+0x24>)
  400e76:	8813      	ldrh	r3, [r2, #0]
  400e78:	1b1c      	subs	r4, r3, r4
  400e7a:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e7c:	2000      	movs	r0, #0
}
  400e7e:	bd10      	pop	{r4, pc}
  400e80:	00402269 	.word	0x00402269
  400e84:	20400b80 	.word	0x20400b80

00400e88 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400e88:	b510      	push	{r4, lr}
  400e8a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400e8c:	4b13      	ldr	r3, [pc, #76]	; (400edc <sd_mmc_wait_end_of_read_blocks+0x54>)
  400e8e:	4798      	blx	r3
  400e90:	b908      	cbnz	r0, 400e96 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400e92:	2005      	movs	r0, #5
  400e94:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400e96:	b184      	cbz	r4, 400eba <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400e98:	2200      	movs	r2, #0
  400e9a:	4b11      	ldr	r3, [pc, #68]	; (400ee0 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400e9c:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e9e:	4b11      	ldr	r3, [pc, #68]	; (400ee4 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400ea0:	881b      	ldrh	r3, [r3, #0]
  400ea2:	2b01      	cmp	r3, #1
  400ea4:	d00f      	beq.n	400ec6 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400ea6:	2100      	movs	r1, #0
  400ea8:	f243 100c 	movw	r0, #12556	; 0x310c
  400eac:	4b0e      	ldr	r3, [pc, #56]	; (400ee8 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400eae:	4798      	blx	r3
  400eb0:	b168      	cbz	r0, 400ece <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400eb2:	4b0e      	ldr	r3, [pc, #56]	; (400eec <sd_mmc_wait_end_of_read_blocks+0x64>)
  400eb4:	4798      	blx	r3
	return SD_MMC_OK;
  400eb6:	2000      	movs	r0, #0
  400eb8:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400eba:	4b09      	ldr	r3, [pc, #36]	; (400ee0 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400ebc:	881b      	ldrh	r3, [r3, #0]
  400ebe:	2b00      	cmp	r3, #0
  400ec0:	d0ed      	beq.n	400e9e <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400ec2:	2000      	movs	r0, #0
}
  400ec4:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400ec6:	4b09      	ldr	r3, [pc, #36]	; (400eec <sd_mmc_wait_end_of_read_blocks+0x64>)
  400ec8:	4798      	blx	r3
		return SD_MMC_OK;
  400eca:	2000      	movs	r0, #0
  400ecc:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400ece:	2100      	movs	r1, #0
  400ed0:	f243 100c 	movw	r0, #12556	; 0x310c
  400ed4:	4b04      	ldr	r3, [pc, #16]	; (400ee8 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400ed6:	4798      	blx	r3
  400ed8:	e7eb      	b.n	400eb2 <sd_mmc_wait_end_of_read_blocks+0x2a>
  400eda:	bf00      	nop
  400edc:	004022f9 	.word	0x004022f9
  400ee0:	20400b80 	.word	0x20400b80
  400ee4:	20400b82 	.word	0x20400b82
  400ee8:	004020d1 	.word	0x004020d1
  400eec:	00400485 	.word	0x00400485

00400ef0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400ef0:	b570      	push	{r4, r5, r6, lr}
  400ef2:	b082      	sub	sp, #8
  400ef4:	460e      	mov	r6, r1
  400ef6:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400ef8:	4b16      	ldr	r3, [pc, #88]	; (400f54 <sd_mmc_init_write_blocks+0x64>)
  400efa:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400efc:	4604      	mov	r4, r0
  400efe:	b9b8      	cbnz	r0, 400f30 <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400f00:	4b15      	ldr	r3, [pc, #84]	; (400f58 <sd_mmc_init_write_blocks+0x68>)
  400f02:	4816      	ldr	r0, [pc, #88]	; (400f5c <sd_mmc_init_write_blocks+0x6c>)
  400f04:	2d01      	cmp	r5, #1
  400f06:	bf98      	it	ls
  400f08:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400f0a:	4b15      	ldr	r3, [pc, #84]	; (400f60 <sd_mmc_init_write_blocks+0x70>)
  400f0c:	681b      	ldr	r3, [r3, #0]
  400f0e:	7adb      	ldrb	r3, [r3, #11]
  400f10:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400f14:	bf08      	it	eq
  400f16:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400f18:	2301      	movs	r3, #1
  400f1a:	9300      	str	r3, [sp, #0]
  400f1c:	462b      	mov	r3, r5
  400f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400f22:	4631      	mov	r1, r6
  400f24:	4e0f      	ldr	r6, [pc, #60]	; (400f64 <sd_mmc_init_write_blocks+0x74>)
  400f26:	47b0      	blx	r6
  400f28:	b928      	cbnz	r0, 400f36 <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400f2a:	4b0f      	ldr	r3, [pc, #60]	; (400f68 <sd_mmc_init_write_blocks+0x78>)
  400f2c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400f2e:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400f30:	4620      	mov	r0, r4
  400f32:	b002      	add	sp, #8
  400f34:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400f36:	4b0d      	ldr	r3, [pc, #52]	; (400f6c <sd_mmc_init_write_blocks+0x7c>)
  400f38:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400f3a:	4b0d      	ldr	r3, [pc, #52]	; (400f70 <sd_mmc_init_write_blocks+0x80>)
  400f3c:	4003      	ands	r3, r0
  400f3e:	b923      	cbnz	r3, 400f4a <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400f40:	4b0c      	ldr	r3, [pc, #48]	; (400f74 <sd_mmc_init_write_blocks+0x84>)
  400f42:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400f44:	4b0c      	ldr	r3, [pc, #48]	; (400f78 <sd_mmc_init_write_blocks+0x88>)
  400f46:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400f48:	e7f2      	b.n	400f30 <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400f4a:	4b07      	ldr	r3, [pc, #28]	; (400f68 <sd_mmc_init_write_blocks+0x78>)
  400f4c:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400f4e:	2405      	movs	r4, #5
  400f50:	e7ee      	b.n	400f30 <sd_mmc_init_write_blocks+0x40>
  400f52:	bf00      	nop
  400f54:	004003c1 	.word	0x004003c1
  400f58:	00089118 	.word	0x00089118
  400f5c:	00109119 	.word	0x00109119
  400f60:	20400b5c 	.word	0x20400b5c
  400f64:	0040212d 	.word	0x0040212d
  400f68:	00400485 	.word	0x00400485
  400f6c:	004020f5 	.word	0x004020f5
  400f70:	e4580000 	.word	0xe4580000
  400f74:	20400b80 	.word	0x20400b80
  400f78:	20400b82 	.word	0x20400b82

00400f7c <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400f7c:	b510      	push	{r4, lr}
  400f7e:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400f80:	4b06      	ldr	r3, [pc, #24]	; (400f9c <sd_mmc_start_write_blocks+0x20>)
  400f82:	4798      	blx	r3
  400f84:	b920      	cbnz	r0, 400f90 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400f86:	2200      	movs	r2, #0
  400f88:	4b05      	ldr	r3, [pc, #20]	; (400fa0 <sd_mmc_start_write_blocks+0x24>)
  400f8a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400f8c:	2005      	movs	r0, #5
  400f8e:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400f90:	4a03      	ldr	r2, [pc, #12]	; (400fa0 <sd_mmc_start_write_blocks+0x24>)
  400f92:	8813      	ldrh	r3, [r2, #0]
  400f94:	1b1c      	subs	r4, r3, r4
  400f96:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400f98:	2000      	movs	r0, #0
}
  400f9a:	bd10      	pop	{r4, pc}
  400f9c:	0040235d 	.word	0x0040235d
  400fa0:	20400b80 	.word	0x20400b80

00400fa4 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400fa4:	b510      	push	{r4, lr}
  400fa6:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400fa8:	4b12      	ldr	r3, [pc, #72]	; (400ff4 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400faa:	4798      	blx	r3
  400fac:	b908      	cbnz	r0, 400fb2 <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400fae:	2005      	movs	r0, #5
  400fb0:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400fb2:	b184      	cbz	r4, 400fd6 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400fb4:	2200      	movs	r2, #0
  400fb6:	4b10      	ldr	r3, [pc, #64]	; (400ff8 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400fb8:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400fba:	4b10      	ldr	r3, [pc, #64]	; (400ffc <sd_mmc_wait_end_of_write_blocks+0x58>)
  400fbc:	881b      	ldrh	r3, [r3, #0]
  400fbe:	2b01      	cmp	r3, #1
  400fc0:	d00f      	beq.n	400fe2 <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400fc2:	2100      	movs	r1, #0
  400fc4:	f243 100c 	movw	r0, #12556	; 0x310c
  400fc8:	4b0d      	ldr	r3, [pc, #52]	; (401000 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400fca:	4798      	blx	r3
  400fcc:	b968      	cbnz	r0, 400fea <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400fce:	4b0d      	ldr	r3, [pc, #52]	; (401004 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400fd0:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400fd2:	2005      	movs	r0, #5
  400fd4:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400fd6:	4b08      	ldr	r3, [pc, #32]	; (400ff8 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400fd8:	881b      	ldrh	r3, [r3, #0]
  400fda:	2b00      	cmp	r3, #0
  400fdc:	d0ed      	beq.n	400fba <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400fde:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400fe0:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400fe2:	4b08      	ldr	r3, [pc, #32]	; (401004 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400fe4:	4798      	blx	r3
		return SD_MMC_OK;
  400fe6:	2000      	movs	r0, #0
  400fe8:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400fea:	4b06      	ldr	r3, [pc, #24]	; (401004 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400fec:	4798      	blx	r3
	return SD_MMC_OK;
  400fee:	2000      	movs	r0, #0
  400ff0:	bd10      	pop	{r4, pc}
  400ff2:	bf00      	nop
  400ff4:	004023ed 	.word	0x004023ed
  400ff8:	20400b80 	.word	0x20400b80
  400ffc:	20400b82 	.word	0x20400b82
  401000:	004020d1 	.word	0x004020d1
  401004:	00400485 	.word	0x00400485

00401008 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  401008:	b510      	push	{r4, lr}
  40100a:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  40100c:	4b0f      	ldr	r3, [pc, #60]	; (40104c <sd_mmc_test_unit_ready+0x44>)
  40100e:	4798      	blx	r3
  401010:	2801      	cmp	r0, #1
  401012:	d018      	beq.n	401046 <sd_mmc_test_unit_ready+0x3e>
  401014:	b118      	cbz	r0, 40101e <sd_mmc_test_unit_ready+0x16>
  401016:	2802      	cmp	r0, #2
  401018:	d010      	beq.n	40103c <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  40101a:	2001      	movs	r0, #1
  40101c:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  40101e:	4b0c      	ldr	r3, [pc, #48]	; (401050 <sd_mmc_test_unit_ready+0x48>)
  401020:	5d1b      	ldrb	r3, [r3, r4]
  401022:	b10b      	cbz	r3, 401028 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  401024:	2002      	movs	r0, #2
	}
}
  401026:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  401028:	4620      	mov	r0, r4
  40102a:	4b0a      	ldr	r3, [pc, #40]	; (401054 <sd_mmc_test_unit_ready+0x4c>)
  40102c:	4798      	blx	r3
  40102e:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  401032:	2800      	cmp	r0, #0
  401034:	bf14      	ite	ne
  401036:	2000      	movne	r0, #0
  401038:	2002      	moveq	r0, #2
  40103a:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  40103c:	2200      	movs	r2, #0
  40103e:	4b04      	ldr	r3, [pc, #16]	; (401050 <sd_mmc_test_unit_ready+0x48>)
  401040:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  401042:	2002      	movs	r0, #2
  401044:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  401046:	2003      	movs	r0, #3
  401048:	bd10      	pop	{r4, pc}
  40104a:	bf00      	nop
  40104c:	004004c1 	.word	0x004004c1
  401050:	20400b88 	.word	0x20400b88
  401054:	00400d41 	.word	0x00400d41

00401058 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  401058:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  40105a:	2000      	movs	r0, #0
  40105c:	4b01      	ldr	r3, [pc, #4]	; (401064 <sd_mmc_test_unit_ready_0+0xc>)
  40105e:	4798      	blx	r3
}
  401060:	bd08      	pop	{r3, pc}
  401062:	bf00      	nop
  401064:	00401009 	.word	0x00401009

00401068 <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
  401068:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(1);
  40106a:	2001      	movs	r0, #1
  40106c:	4b01      	ldr	r3, [pc, #4]	; (401074 <sd_mmc_test_unit_ready_1+0xc>)
  40106e:	4798      	blx	r3
}
  401070:	bd08      	pop	{r3, pc}
  401072:	bf00      	nop
  401074:	00401009 	.word	0x00401009

00401078 <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  401078:	b538      	push	{r3, r4, r5, lr}
  40107a:	4604      	mov	r4, r0
  40107c:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  40107e:	4b04      	ldr	r3, [pc, #16]	; (401090 <sd_mmc_read_capacity+0x18>)
  401080:	4798      	blx	r3
  401082:	0040      	lsls	r0, r0, #1
  401084:	3801      	subs	r0, #1
  401086:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  401088:	4620      	mov	r0, r4
  40108a:	4b02      	ldr	r3, [pc, #8]	; (401094 <sd_mmc_read_capacity+0x1c>)
  40108c:	4798      	blx	r3
}
  40108e:	bd38      	pop	{r3, r4, r5, pc}
  401090:	00400d65 	.word	0x00400d65
  401094:	00401009 	.word	0x00401009

00401098 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  401098:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  40109a:	4601      	mov	r1, r0
  40109c:	2000      	movs	r0, #0
  40109e:	4b01      	ldr	r3, [pc, #4]	; (4010a4 <sd_mmc_read_capacity_0+0xc>)
  4010a0:	4798      	blx	r3
}
  4010a2:	bd08      	pop	{r3, pc}
  4010a4:	00401079 	.word	0x00401079

004010a8 <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
  4010a8:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(1, nb_sector);
  4010aa:	4601      	mov	r1, r0
  4010ac:	2001      	movs	r0, #1
  4010ae:	4b01      	ldr	r3, [pc, #4]	; (4010b4 <sd_mmc_read_capacity_1+0xc>)
  4010b0:	4798      	blx	r3
}
  4010b2:	bd08      	pop	{r3, pc}
  4010b4:	00401079 	.word	0x00401079

004010b8 <sd_mmc_unload_0>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
  4010b8:	4b01      	ldr	r3, [pc, #4]	; (4010c0 <sd_mmc_unload_0+0x8>)
  4010ba:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
  4010bc:	2001      	movs	r0, #1
  4010be:	4770      	bx	lr
  4010c0:	20400b88 	.word	0x20400b88

004010c4 <sd_mmc_unload_1>:
	sd_mmc_ejected[slot] = unload;
  4010c4:	4b01      	ldr	r3, [pc, #4]	; (4010cc <sd_mmc_unload_1+0x8>)
  4010c6:	7058      	strb	r0, [r3, #1]

bool sd_mmc_unload_1(bool unload)
{
	return sd_mmc_unload(1, unload);
}
  4010c8:	2001      	movs	r0, #1
  4010ca:	4770      	bx	lr
  4010cc:	20400b88 	.word	0x20400b88

004010d0 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  4010d0:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  4010d2:	2000      	movs	r0, #0
  4010d4:	4b01      	ldr	r3, [pc, #4]	; (4010dc <sd_mmc_wr_protect_0+0xc>)
  4010d6:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  4010d8:	bd08      	pop	{r3, pc}
  4010da:	bf00      	nop
  4010dc:	00400d89 	.word	0x00400d89

004010e0 <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
  4010e0:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  4010e2:	2001      	movs	r0, #1
  4010e4:	4b01      	ldr	r3, [pc, #4]	; (4010ec <sd_mmc_wr_protect_1+0xc>)
  4010e6:	4798      	blx	r3
	return sd_mmc_wr_protect(1);
}
  4010e8:	bd08      	pop	{r3, pc}
  4010ea:	bf00      	nop
  4010ec:	00400d89 	.word	0x00400d89

004010f0 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
  4010f0:	2001      	movs	r0, #1
  4010f2:	4770      	bx	lr

004010f4 <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
	return sd_mmc_removal(1);
}
  4010f4:	2001      	movs	r0, #1
  4010f6:	4770      	bx	lr

004010f8 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  4010f8:	b510      	push	{r4, lr}
  4010fa:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  4010fc:	2201      	movs	r2, #1
  4010fe:	4b0a      	ldr	r3, [pc, #40]	; (401128 <sd_mmc_mem_2_ram+0x30>)
  401100:	4798      	blx	r3
  401102:	b120      	cbz	r0, 40110e <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  401104:	2802      	cmp	r0, #2
  401106:	bf0c      	ite	eq
  401108:	2002      	moveq	r0, #2
  40110a:	2001      	movne	r0, #1
  40110c:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  40110e:	2101      	movs	r1, #1
  401110:	4620      	mov	r0, r4
  401112:	4b06      	ldr	r3, [pc, #24]	; (40112c <sd_mmc_mem_2_ram+0x34>)
  401114:	4798      	blx	r3
  401116:	b108      	cbz	r0, 40111c <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  401118:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  40111a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  40111c:	4b04      	ldr	r3, [pc, #16]	; (401130 <sd_mmc_mem_2_ram+0x38>)
  40111e:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  401120:	3000      	adds	r0, #0
  401122:	bf18      	it	ne
  401124:	2001      	movne	r0, #1
  401126:	bd10      	pop	{r4, pc}
  401128:	00400d8d 	.word	0x00400d8d
  40112c:	00400e61 	.word	0x00400e61
  401130:	00400e89 	.word	0x00400e89

00401134 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  401134:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  401136:	460a      	mov	r2, r1
  401138:	4601      	mov	r1, r0
  40113a:	2000      	movs	r0, #0
  40113c:	4b01      	ldr	r3, [pc, #4]	; (401144 <sd_mmc_mem_2_ram_0+0x10>)
  40113e:	4798      	blx	r3
}
  401140:	bd08      	pop	{r3, pc}
  401142:	bf00      	nop
  401144:	004010f9 	.word	0x004010f9

00401148 <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
  401148:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(1, addr, ram);
  40114a:	460a      	mov	r2, r1
  40114c:	4601      	mov	r1, r0
  40114e:	2001      	movs	r0, #1
  401150:	4b01      	ldr	r3, [pc, #4]	; (401158 <sd_mmc_mem_2_ram_1+0x10>)
  401152:	4798      	blx	r3
}
  401154:	bd08      	pop	{r3, pc}
  401156:	bf00      	nop
  401158:	004010f9 	.word	0x004010f9

0040115c <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  40115c:	b510      	push	{r4, lr}
  40115e:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  401160:	2201      	movs	r2, #1
  401162:	4b0a      	ldr	r3, [pc, #40]	; (40118c <sd_mmc_ram_2_mem+0x30>)
  401164:	4798      	blx	r3
  401166:	b120      	cbz	r0, 401172 <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  401168:	2802      	cmp	r0, #2
  40116a:	bf0c      	ite	eq
  40116c:	2002      	moveq	r0, #2
  40116e:	2001      	movne	r0, #1
  401170:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  401172:	2101      	movs	r1, #1
  401174:	4620      	mov	r0, r4
  401176:	4b06      	ldr	r3, [pc, #24]	; (401190 <sd_mmc_ram_2_mem+0x34>)
  401178:	4798      	blx	r3
  40117a:	b108      	cbz	r0, 401180 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  40117c:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  40117e:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  401180:	4b04      	ldr	r3, [pc, #16]	; (401194 <sd_mmc_ram_2_mem+0x38>)
  401182:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  401184:	3000      	adds	r0, #0
  401186:	bf18      	it	ne
  401188:	2001      	movne	r0, #1
  40118a:	bd10      	pop	{r4, pc}
  40118c:	00400ef1 	.word	0x00400ef1
  401190:	00400f7d 	.word	0x00400f7d
  401194:	00400fa5 	.word	0x00400fa5

00401198 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  401198:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  40119a:	460a      	mov	r2, r1
  40119c:	4601      	mov	r1, r0
  40119e:	2000      	movs	r0, #0
  4011a0:	4b01      	ldr	r3, [pc, #4]	; (4011a8 <sd_mmc_ram_2_mem_0+0x10>)
  4011a2:	4798      	blx	r3
}
  4011a4:	bd08      	pop	{r3, pc}
  4011a6:	bf00      	nop
  4011a8:	0040115d 	.word	0x0040115d

004011ac <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
  4011ac:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(1, addr, ram);
  4011ae:	460a      	mov	r2, r1
  4011b0:	4601      	mov	r1, r0
  4011b2:	2001      	movs	r0, #1
  4011b4:	4b01      	ldr	r3, [pc, #4]	; (4011bc <sd_mmc_ram_2_mem_1+0x10>)
  4011b6:	4798      	blx	r3
}
  4011b8:	bd08      	pop	{r3, pc}
  4011ba:	bf00      	nop
  4011bc:	0040115d 	.word	0x0040115d

004011c0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4011c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4011c4:	4baa      	ldr	r3, [pc, #680]	; (401470 <board_init+0x2b0>)
  4011c6:	4aab      	ldr	r2, [pc, #684]	; (401474 <board_init+0x2b4>)
  4011c8:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4011ca:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  4011ce:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4011d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4011d4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4011d8:	4ba7      	ldr	r3, [pc, #668]	; (401478 <board_init+0x2b8>)
  4011da:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4011de:	f022 0201 	bic.w	r2, r2, #1
  4011e2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4011e6:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4011ea:	f022 0201 	bic.w	r2, r2, #1
  4011ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4011f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4011f6:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4011fa:	200a      	movs	r0, #10
  4011fc:	f8df 8294 	ldr.w	r8, [pc, #660]	; 401494 <board_init+0x2d4>
  401200:	47c0      	blx	r8
  401202:	200b      	movs	r0, #11
  401204:	47c0      	blx	r8
  401206:	200c      	movs	r0, #12
  401208:	47c0      	blx	r8
  40120a:	2010      	movs	r0, #16
  40120c:	47c0      	blx	r8
  40120e:	2011      	movs	r0, #17
  401210:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401212:	4b9a      	ldr	r3, [pc, #616]	; (40147c <board_init+0x2bc>)
  401214:	f04f 0e01 	mov.w	lr, #1
  401218:	f8c3 e010 	str.w	lr, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40121c:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401220:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401224:	4c96      	ldr	r4, [pc, #600]	; (401480 <board_init+0x2c0>)
  401226:	2204      	movs	r2, #4
  401228:	6162      	str	r2, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40122a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  40122e:	6662      	str	r2, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401230:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401234:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401236:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401238:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40123c:	6f21      	ldr	r1, [r4, #112]	; 0x70
  40123e:	f021 0104 	bic.w	r1, r1, #4
  401242:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401244:	6f61      	ldr	r1, [r4, #116]	; 0x74
  401246:	f021 0104 	bic.w	r1, r1, #4
  40124a:	6761      	str	r1, [r4, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40124c:	498d      	ldr	r1, [pc, #564]	; (401484 <board_init+0x2c4>)
  40124e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401252:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401254:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401258:	6308      	str	r0, [r1, #48]	; 0x30
#define UART3_TXD_GPIO   PIO_PD30_IDX
   
#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
//	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40125a:	4f8b      	ldr	r7, [pc, #556]	; (401488 <board_init+0x2c8>)
  40125c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
  401260:	f041 0110 	orr.w	r1, r1, #16
  401264:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
		base->PIO_PUDR = mask;
  401268:	2108      	movs	r1, #8
  40126a:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40126c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401270:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401272:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401274:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401278:	6f20      	ldr	r0, [r4, #112]	; 0x70
  40127a:	f020 0008 	bic.w	r0, r0, #8
  40127e:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401280:	6f60      	ldr	r0, [r4, #116]	; 0x74
  401282:	f020 0008 	bic.w	r0, r0, #8
  401286:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401288:	6061      	str	r1, [r4, #4]
		base->PIO_PUDR = mask;
  40128a:	2510      	movs	r5, #16
  40128c:	6625      	str	r5, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40128e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401292:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401294:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401296:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40129a:	6f20      	ldr	r0, [r4, #112]	; 0x70
  40129c:	f020 0010 	bic.w	r0, r0, #16
  4012a0:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4012a2:	6f60      	ldr	r0, [r4, #116]	; 0x74
  4012a4:	f020 0010 	bic.w	r0, r0, #16
  4012a8:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4012aa:	6065      	str	r5, [r4, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012ac:	2680      	movs	r6, #128	; 0x80
  4012ae:	611e      	str	r6, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012b0:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012b4:	631e      	str	r6, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012b6:	f44f 7080 	mov.w	r0, #256	; 0x100
  4012ba:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012bc:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4012c0:	6360      	str	r0, [r4, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012c2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  4012c6:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012c8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4012cc:	6360      	str	r0, [r4, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4012d2:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012d4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012d8:	6320      	str	r0, [r4, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4012da:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  4012de:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012e0:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4012e4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  4012e8:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012ea:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012ee:	4867      	ldr	r0, [pc, #412]	; (40148c <board_init+0x2cc>)
  4012f0:	6102      	str	r2, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012f2:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012f6:	6302      	str	r2, [r0, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012f8:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012fa:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012fe:	6319      	str	r1, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401300:	f8c0 e010 	str.w	lr, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401304:	f8c0 e0a0 	str.w	lr, [r0, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401308:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
	ioport_set_pin_level(BigTiny_CLK, HIGH);
	/* DAT to Tiny.*/
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(BigTiny_DAT, HIGH);
	/* WU Tiny to Big. */
	pmc_enable_periph_clk(ID_PIOA);
  40130c:	200a      	movs	r0, #10
  40130e:	47c0      	blx	r8
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401310:	2302      	movs	r3, #2
  401312:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401314:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40131c:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40131e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401322:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  401326:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401328:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	ioport_set_pin_dir(USB_ID_PIN, IOPORT_DIR_INPUT);
# endif
#endif

#ifdef CONF_BOARD_SDRAMC
	pio_configure_pin(SDRAM_A0_PIO, SDRAM_A_FLAGS);	//V71 A2
  40132c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401330:	2054      	movs	r0, #84	; 0x54
  401332:	4c57      	ldr	r4, [pc, #348]	; (401490 <board_init+0x2d0>)
  401334:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A1_PIO, SDRAM_A_FLAGS);	//V71 A3
  401336:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40133a:	2055      	movs	r0, #85	; 0x55
  40133c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);	//V71 A4
  40133e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401342:	2056      	movs	r0, #86	; 0x56
  401344:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  //V71 A5
  401346:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40134a:	2057      	movs	r0, #87	; 0x57
  40134c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  //V71 A6
  40134e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401352:	2058      	movs	r0, #88	; 0x58
  401354:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  //V71 A7
  401356:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40135a:	2059      	movs	r0, #89	; 0x59
  40135c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  //V71 A8
  40135e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401362:	205a      	movs	r0, #90	; 0x5a
  401364:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  //V71 A9
  401366:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40136a:	205b      	movs	r0, #91	; 0x5b
  40136c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);	 //V71 A10
  40136e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401372:	205c      	movs	r0, #92	; 0x5c
  401374:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  //V71 A11
  401376:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40137a:	205d      	movs	r0, #93	; 0x5d
  40137c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS); //V71 SDA10
  40137e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401382:	206d      	movs	r0, #109	; 0x6d
  401384:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A13_FLAGS); //V71 A13
  401386:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40138a:	205f      	movs	r0, #95	; 0x5f
  40138c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A12_PIO, SDRAM_A14_FLAGS); //V71 A14
  40138e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401392:	2012      	movs	r0, #18
  401394:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  401396:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40139a:	2014      	movs	r0, #20
  40139c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA1_PIO, SDRAM_BA1_FLAGS);
  40139e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013a2:	2000      	movs	r0, #0
  4013a4:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  4013a6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013aa:	2077      	movs	r0, #119	; 0x77
  4013ac:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  4013ae:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013b2:	206e      	movs	r0, #110	; 0x6e
  4013b4:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  4013b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013ba:	204f      	movs	r0, #79	; 0x4f
  4013bc:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  4013be:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013c2:	2070      	movs	r0, #112	; 0x70
  4013c4:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  4013c6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013ca:	2071      	movs	r0, #113	; 0x71
  4013cc:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  4013ce:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013d2:	207d      	movs	r0, #125	; 0x7d
  4013d4:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  4013d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013da:	2052      	movs	r0, #82	; 0x52
  4013dc:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  4013de:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013e2:	206f      	movs	r0, #111	; 0x6f
  4013e4:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);
  4013e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013ea:	2040      	movs	r0, #64	; 0x40
  4013ec:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);
  4013ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013f2:	2041      	movs	r0, #65	; 0x41
  4013f4:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);
  4013f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013fa:	2042      	movs	r0, #66	; 0x42
  4013fc:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);
  4013fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401402:	2043      	movs	r0, #67	; 0x43
  401404:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);
  401406:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40140a:	2044      	movs	r0, #68	; 0x44
  40140c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);
  40140e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401412:	2045      	movs	r0, #69	; 0x45
  401414:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);
  401416:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40141a:	2046      	movs	r0, #70	; 0x46
  40141c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);
  40141e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401422:	2047      	movs	r0, #71	; 0x47
  401424:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);
  401426:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40142a:	4630      	mov	r0, r6
  40142c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);
  40142e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401432:	2081      	movs	r0, #129	; 0x81
  401434:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS);
  401436:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40143a:	2082      	movs	r0, #130	; 0x82
  40143c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS);
  40143e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401442:	2083      	movs	r0, #131	; 0x83
  401444:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS);
  401446:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40144a:	2084      	movs	r0, #132	; 0x84
  40144c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS);
  40144e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401452:	2085      	movs	r0, #133	; 0x85
  401454:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS);
  401456:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40145a:	200f      	movs	r0, #15
  40145c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS);
  40145e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401462:	4628      	mov	r0, r5
  401464:	47a0      	blx	r4

	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  401466:	f8c7 5124 	str.w	r5, [r7, #292]	; 0x124
  40146a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40146e:	bf00      	nop
  401470:	400e0c00 	.word	0x400e0c00
  401474:	5a00080c 	.word	0x5a00080c
  401478:	e000ed00 	.word	0xe000ed00
  40147c:	400e1400 	.word	0x400e1400
  401480:	400e0e00 	.word	0x400e0e00
  401484:	400e1200 	.word	0x400e1200
  401488:	40088000 	.word	0x40088000
  40148c:	400e1000 	.word	0x400e1000
  401490:	0040329d 	.word	0x0040329d
  401494:	004035a1 	.word	0x004035a1

00401498 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401498:	4b28      	ldr	r3, [pc, #160]	; (40153c <twihs_set_speed+0xa4>)
  40149a:	4299      	cmp	r1, r3
  40149c:	d84b      	bhi.n	401536 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40149e:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4014a2:	4299      	cmp	r1, r3
  4014a4:	d92d      	bls.n	401502 <twihs_set_speed+0x6a>
{
  4014a6:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4014a8:	4c25      	ldr	r4, [pc, #148]	; (401540 <twihs_set_speed+0xa8>)
  4014aa:	fba4 3402 	umull	r3, r4, r4, r2
  4014ae:	0ba4      	lsrs	r4, r4, #14
  4014b0:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4014b2:	4b24      	ldr	r3, [pc, #144]	; (401544 <twihs_set_speed+0xac>)
  4014b4:	440b      	add	r3, r1
  4014b6:	009b      	lsls	r3, r3, #2
  4014b8:	fbb2 f2f3 	udiv	r2, r2, r3
  4014bc:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014be:	2cff      	cmp	r4, #255	; 0xff
  4014c0:	d91d      	bls.n	4014fe <twihs_set_speed+0x66>
  4014c2:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4014c4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4014c6:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014c8:	2cff      	cmp	r4, #255	; 0xff
  4014ca:	d901      	bls.n	4014d0 <twihs_set_speed+0x38>
  4014cc:	2906      	cmp	r1, #6
  4014ce:	d9f9      	bls.n	4014c4 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014d0:	2aff      	cmp	r2, #255	; 0xff
  4014d2:	d907      	bls.n	4014e4 <twihs_set_speed+0x4c>
  4014d4:	2906      	cmp	r1, #6
  4014d6:	d805      	bhi.n	4014e4 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4014d8:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4014da:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014dc:	2aff      	cmp	r2, #255	; 0xff
  4014de:	d901      	bls.n	4014e4 <twihs_set_speed+0x4c>
  4014e0:	2906      	cmp	r1, #6
  4014e2:	d9f9      	bls.n	4014d8 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4014e4:	0213      	lsls	r3, r2, #8
  4014e6:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  4014e8:	0409      	lsls	r1, r1, #16
  4014ea:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4014ee:	430b      	orrs	r3, r1
  4014f0:	b2e4      	uxtb	r4, r4
  4014f2:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  4014f4:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4014f6:	2000      	movs	r0, #0
}
  4014f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014fc:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4014fe:	2100      	movs	r1, #0
  401500:	e7e6      	b.n	4014d0 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401502:	0049      	lsls	r1, r1, #1
  401504:	fbb2 f2f1 	udiv	r2, r2, r1
  401508:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40150a:	2aff      	cmp	r2, #255	; 0xff
  40150c:	d911      	bls.n	401532 <twihs_set_speed+0x9a>
  40150e:	2300      	movs	r3, #0
			ckdiv++;
  401510:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401512:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401514:	2aff      	cmp	r2, #255	; 0xff
  401516:	d901      	bls.n	40151c <twihs_set_speed+0x84>
  401518:	2b06      	cmp	r3, #6
  40151a:	d9f9      	bls.n	401510 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40151c:	0211      	lsls	r1, r2, #8
  40151e:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401520:	041b      	lsls	r3, r3, #16
  401522:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401526:	430b      	orrs	r3, r1
  401528:	b2d2      	uxtb	r2, r2
  40152a:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  40152c:	6102      	str	r2, [r0, #16]
	return PASS;
  40152e:	2000      	movs	r0, #0
  401530:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401532:	2300      	movs	r3, #0
  401534:	e7f2      	b.n	40151c <twihs_set_speed+0x84>
		return FAIL;
  401536:	2001      	movs	r0, #1
  401538:	4770      	bx	lr
  40153a:	bf00      	nop
  40153c:	00061a80 	.word	0x00061a80
  401540:	057619f1 	.word	0x057619f1
  401544:	3ffd1200 	.word	0x3ffd1200

00401548 <twihs_master_init>:
{
  401548:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  40154a:	f04f 32ff 	mov.w	r2, #4294967295
  40154e:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401550:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401552:	2280      	movs	r2, #128	; 0x80
  401554:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401556:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401558:	2208      	movs	r2, #8
  40155a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  40155c:	2220      	movs	r2, #32
  40155e:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401560:	2204      	movs	r2, #4
  401562:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401564:	680a      	ldr	r2, [r1, #0]
  401566:	6849      	ldr	r1, [r1, #4]
  401568:	4b03      	ldr	r3, [pc, #12]	; (401578 <twihs_master_init+0x30>)
  40156a:	4798      	blx	r3
}
  40156c:	2801      	cmp	r0, #1
  40156e:	bf14      	ite	ne
  401570:	2000      	movne	r0, #0
  401572:	2001      	moveq	r0, #1
  401574:	bd08      	pop	{r3, pc}
  401576:	bf00      	nop
  401578:	00401499 	.word	0x00401499

0040157c <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  40157c:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  40157e:	2a00      	cmp	r2, #0
  401580:	d04c      	beq.n	40161c <twihs_master_read+0xa0>
{
  401582:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401584:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401586:	2600      	movs	r6, #0
  401588:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40158a:	684b      	ldr	r3, [r1, #4]
  40158c:	021b      	lsls	r3, r3, #8
  40158e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401592:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401596:	7c0d      	ldrb	r5, [r1, #16]
  401598:	042d      	lsls	r5, r5, #16
  40159a:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  40159e:	432b      	orrs	r3, r5
  4015a0:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4015a2:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4015a4:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4015a6:	b15d      	cbz	r5, 4015c0 <twihs_master_read+0x44>
	val = addr[0];
  4015a8:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  4015aa:	2d01      	cmp	r5, #1
  4015ac:	dd02      	ble.n	4015b4 <twihs_master_read+0x38>
		val |= addr[1];
  4015ae:	784e      	ldrb	r6, [r1, #1]
  4015b0:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  4015b4:	2d02      	cmp	r5, #2
  4015b6:	dd04      	ble.n	4015c2 <twihs_master_read+0x46>
		val |= addr[2];
  4015b8:	7889      	ldrb	r1, [r1, #2]
  4015ba:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  4015be:	e000      	b.n	4015c2 <twihs_master_read+0x46>
		return 0;
  4015c0:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4015c2:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4015c4:	2301      	movs	r3, #1
  4015c6:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4015c8:	2502      	movs	r5, #2
  4015ca:	e012      	b.n	4015f2 <twihs_master_read+0x76>
  4015cc:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4015ce:	f013 0f02 	tst.w	r3, #2
  4015d2:	d01b      	beq.n	40160c <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  4015d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015d6:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4015d8:	6a03      	ldr	r3, [r0, #32]
  4015da:	f013 0f01 	tst.w	r3, #1
  4015de:	d0fb      	beq.n	4015d8 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  4015e0:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4015e2:	2000      	movs	r0, #0
}
  4015e4:	bc70      	pop	{r4, r5, r6}
  4015e6:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  4015e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015ea:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  4015ee:	3a01      	subs	r2, #1
  4015f0:	d0f2      	beq.n	4015d8 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4015f2:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4015f4:	f413 7f80 	tst.w	r3, #256	; 0x100
  4015f8:	d114      	bne.n	401624 <twihs_master_read+0xa8>
  4015fa:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  4015fe:	2a01      	cmp	r2, #1
  401600:	d0e4      	beq.n	4015cc <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401602:	f013 0f02 	tst.w	r3, #2
  401606:	d1ef      	bne.n	4015e8 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401608:	2a00      	cmp	r2, #0
  40160a:	d0e5      	beq.n	4015d8 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  40160c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40160e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401612:	d105      	bne.n	401620 <twihs_master_read+0xa4>
		if (!timeout--) {
  401614:	3901      	subs	r1, #1
  401616:	d1f2      	bne.n	4015fe <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401618:	2009      	movs	r0, #9
  40161a:	e7e3      	b.n	4015e4 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  40161c:	2001      	movs	r0, #1
  40161e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401620:	2005      	movs	r0, #5
  401622:	e7df      	b.n	4015e4 <twihs_master_read+0x68>
  401624:	2005      	movs	r0, #5
  401626:	e7dd      	b.n	4015e4 <twihs_master_read+0x68>

00401628 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401628:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  40162a:	2b00      	cmp	r3, #0
  40162c:	d043      	beq.n	4016b6 <twihs_master_write+0x8e>
{
  40162e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401630:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401632:	2600      	movs	r6, #0
  401634:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401636:	7c0a      	ldrb	r2, [r1, #16]
  401638:	0412      	lsls	r2, r2, #16
  40163a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40163e:	684d      	ldr	r5, [r1, #4]
  401640:	022d      	lsls	r5, r5, #8
  401642:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401646:	432a      	orrs	r2, r5
  401648:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40164a:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40164c:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  40164e:	b15d      	cbz	r5, 401668 <twihs_master_write+0x40>
	val = addr[0];
  401650:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401652:	2d01      	cmp	r5, #1
  401654:	dd02      	ble.n	40165c <twihs_master_write+0x34>
		val |= addr[1];
  401656:	784e      	ldrb	r6, [r1, #1]
  401658:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  40165c:	2d02      	cmp	r5, #2
  40165e:	dd04      	ble.n	40166a <twihs_master_write+0x42>
		val |= addr[2];
  401660:	7889      	ldrb	r1, [r1, #2]
  401662:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401666:	e000      	b.n	40166a <twihs_master_write+0x42>
		return 0;
  401668:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40166a:	60c2      	str	r2, [r0, #12]
  40166c:	e004      	b.n	401678 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  40166e:	f814 2b01 	ldrb.w	r2, [r4], #1
  401672:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401674:	3b01      	subs	r3, #1
  401676:	d00f      	beq.n	401698 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401678:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40167a:	f412 7f80 	tst.w	r2, #256	; 0x100
  40167e:	d11e      	bne.n	4016be <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401680:	f012 0f04 	tst.w	r2, #4
  401684:	d1f3      	bne.n	40166e <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401686:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401688:	f412 7f80 	tst.w	r2, #256	; 0x100
  40168c:	d115      	bne.n	4016ba <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  40168e:	f012 0f04 	tst.w	r2, #4
  401692:	d1ec      	bne.n	40166e <twihs_master_write+0x46>
	while (cnt > 0) {
  401694:	2b00      	cmp	r3, #0
  401696:	d1f6      	bne.n	401686 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401698:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40169a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40169e:	d111      	bne.n	4016c4 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  4016a0:	f013 0f04 	tst.w	r3, #4
  4016a4:	d0f8      	beq.n	401698 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4016a6:	2302      	movs	r3, #2
  4016a8:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4016aa:	6a03      	ldr	r3, [r0, #32]
  4016ac:	f013 0f01 	tst.w	r3, #1
  4016b0:	d0fb      	beq.n	4016aa <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  4016b2:	2000      	movs	r0, #0
  4016b4:	e004      	b.n	4016c0 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  4016b6:	2001      	movs	r0, #1
  4016b8:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4016ba:	2005      	movs	r0, #5
  4016bc:	e000      	b.n	4016c0 <twihs_master_write+0x98>
  4016be:	2005      	movs	r0, #5
}
  4016c0:	bc70      	pop	{r4, r5, r6}
  4016c2:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4016c4:	2005      	movs	r0, #5
  4016c6:	e7fb      	b.n	4016c0 <twihs_master_write+0x98>

004016c8 <twi_start_cond_L>:
	SENS_SDA_FLOAT;
}

/*! \brief Sends start condition */
char twi_start_cond_L(void)
{
  4016c8:	b570      	push	{r4, r5, r6, lr}
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4016ca:	4c0b      	ldr	r4, [pc, #44]	; (4016f8 <twi_start_cond_L+0x30>)
  4016cc:	f44f 7500 	mov.w	r5, #512	; 0x200
  4016d0:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4016d2:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4016d6:	f44f 7380 	mov.w	r3, #256	; 0x100
  4016da:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4016dc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	SENS_SCL_FLOAT;
	SENS_SDA_DRIVE;
	delay_us(DELAY_L);
  4016e0:	f240 40be 	movw	r0, #1214	; 0x4be
  4016e4:	4e05      	ldr	r6, [pc, #20]	; (4016fc <twi_start_cond_L+0x34>)
  4016e6:	47b0      	blx	r6
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4016e8:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4016ea:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	SENS_SCL_DRIVE;
	delay_us(DELAY_L);
  4016ee:	f240 40be 	movw	r0, #1214	; 0x4be
  4016f2:	47b0      	blx	r6
	return 1;
}
  4016f4:	2001      	movs	r0, #1
  4016f6:	bd70      	pop	{r4, r5, r6, pc}
  4016f8:	400e1200 	.word	0x400e1200
  4016fc:	2040008d 	.word	0x2040008d

00401700 <twi_stop_cond_L>:

/*! \brief Sends stop condition */
char twi_stop_cond_L(void)
{
  401700:	b538      	push	{r3, r4, r5, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401702:	4c0a      	ldr	r4, [pc, #40]	; (40172c <twi_stop_cond_L+0x2c>)
  401704:	f44f 7380 	mov.w	r3, #256	; 0x100
  401708:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40170a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	SENS_SDA_DRIVE;
	delay_us(DELAY_L);
  40170e:	f240 40be 	movw	r0, #1214	; 0x4be
  401712:	4d07      	ldr	r5, [pc, #28]	; (401730 <twi_stop_cond_L+0x30>)
  401714:	47a8      	blx	r5
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401716:	f44f 7300 	mov.w	r3, #512	; 0x200
  40171a:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40171c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	SENS_SCL_FLOAT;
	delay_us(DELAY_L);
  401720:	f240 40be 	movw	r0, #1214	; 0x4be
  401724:	47a8      	blx	r5
	return 1;
}
  401726:	2001      	movs	r0, #1
  401728:	bd38      	pop	{r3, r4, r5, pc}
  40172a:	bf00      	nop
  40172c:	400e1200 	.word	0x400e1200
  401730:	2040008d 	.word	0x2040008d

00401734 <i2c_read_byte_L>:
    \param bytes  Number of bytes to read
    \param index Position of the incoming byte in hte receive buffer 
    \return 1 if successful, otherwise 0
 */
char i2c_read_byte_L(unsigned char* rcvdata, unsigned char bytes, unsigned char index)
{
  401734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401738:	b085      	sub	sp, #20
  40173a:	9001      	str	r0, [sp, #4]
  40173c:	9102      	str	r1, [sp, #8]
  40173e:	9203      	str	r2, [sp, #12]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401740:	4b39      	ldr	r3, [pc, #228]	; (401828 <i2c_read_byte_L+0xf4>)
  401742:	f44f 7280 	mov.w	r2, #256	; 0x100
  401746:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401748:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  40174c:	2507      	movs	r5, #7
    unsigned char byte = 0;
  40174e:	f04f 0a00 	mov.w	sl, #0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401752:	461c      	mov	r4, r3
  401754:	f44f 7600 	mov.w	r6, #512	; 0x200
  401758:	46b1      	mov	r9, r6
	//release SDA
	SENS_SDA_FLOAT;
	for (bit = 0; bit < 8; bit++) 
	{
           SENS_SCL_FLOAT;//goes high
           delay_us(DELAY_L);
  40175a:	f240 48be 	movw	r8, #1214	; 0x4be
  40175e:	4f33      	ldr	r7, [pc, #204]	; (40182c <i2c_read_byte_L+0xf8>)
           if(READ_SDA_L())
                     byte|= (1 << (7- bit));
  401760:	f04f 0b01 	mov.w	fp, #1
  401764:	e008      	b.n	401778 <i2c_read_byte_L+0x44>
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401766:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401768:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
			SENS_SCL_DRIVE;//goes low
//			if(bit!=7)	
			delay_us(DELAY_L);
  40176c:	4640      	mov	r0, r8
  40176e:	47b8      	blx	r7
  401770:	3d01      	subs	r5, #1
	for (bit = 0; bit < 8; bit++) 
  401772:	f1b5 3fff 	cmp.w	r5, #4294967295
  401776:	d010      	beq.n	40179a <i2c_read_byte_L+0x66>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401778:	f8c4 9014 	str.w	r9, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40177c:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
           delay_us(DELAY_L);
  401780:	4640      	mov	r0, r8
  401782:	47b8      	blx	r7
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401784:	6be3      	ldr	r3, [r4, #60]	; 0x3c
           if(READ_SDA_L())
  401786:	f413 7f80 	tst.w	r3, #256	; 0x100
  40178a:	d0ec      	beq.n	401766 <i2c_read_byte_L+0x32>
                     byte|= (1 << (7- bit));
  40178c:	fa0b f305 	lsl.w	r3, fp, r5
  401790:	ea43 0a0a 	orr.w	sl, r3, sl
  401794:	fa5f fa8a 	uxtb.w	sl, sl
  401798:	e7e5      	b.n	401766 <i2c_read_byte_L+0x32>
        }
	rcvdata[index] = byte;
  40179a:	9b01      	ldr	r3, [sp, #4]
  40179c:	4619      	mov	r1, r3
  40179e:	9a03      	ldr	r2, [sp, #12]
  4017a0:	f801 a002 	strb.w	sl, [r1, r2]
	if(index < (bytes-1))//if not the last byte, ACK the slave
  4017a4:	9b02      	ldr	r3, [sp, #8]
  4017a6:	3b01      	subs	r3, #1
  4017a8:	429a      	cmp	r2, r3
  4017aa:	db23      	blt.n	4017f4 <i2c_read_byte_L+0xc0>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4017ac:	4c1e      	ldr	r4, [pc, #120]	; (401828 <i2c_read_byte_L+0xf4>)
  4017ae:	f44f 7380 	mov.w	r3, #256	; 0x100
  4017b2:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017b4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4017b8:	f44f 7500 	mov.w	r5, #512	; 0x200
  4017bc:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017be:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	}
	else //send NACK on the last byte
	{
		SENS_SDA_FLOAT; //NACK
		SENS_SCL_FLOAT; //SCL high for the 9th clock
		delay_us(DELAY_L);
  4017c2:	f240 40be 	movw	r0, #1214	; 0x4be
  4017c6:	4e19      	ldr	r6, [pc, #100]	; (40182c <i2c_read_byte_L+0xf8>)
  4017c8:	47b0      	blx	r6
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4017ca:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017cc:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		//Pull SCL low
		SENS_SCL_DRIVE; //SCL low after 9th clock 
		//release SDA
		delay_us(DELAY_L);
  4017d0:	f240 40be 	movw	r0, #1214	; 0x4be
  4017d4:	47b0      	blx	r6
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4017d6:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017d8:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		SENS_SCL_FLOAT; //goes high for the 9th clock
		delay_us(DELAY_L);
  4017dc:	f240 40be 	movw	r0, #1214	; 0x4be
  4017e0:	47b0      	blx	r6
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4017e2:	4622      	mov	r2, r4
  4017e4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
		while(!READ_SCL_L()){}
  4017e6:	f413 7f00 	tst.w	r3, #512	; 0x200
  4017ea:	d0fb      	beq.n	4017e4 <i2c_read_byte_L+0xb0>
	}		
	return 1;
		
}	
  4017ec:	2001      	movs	r0, #1
  4017ee:	b005      	add	sp, #20
  4017f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4017f4:	4c0c      	ldr	r4, [pc, #48]	; (401828 <i2c_read_byte_L+0xf4>)
  4017f6:	f44f 7580 	mov.w	r5, #256	; 0x100
  4017fa:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017fc:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401800:	f44f 7600 	mov.w	r6, #512	; 0x200
  401804:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401806:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		delay_us(DELAY_L);
  40180a:	f240 40be 	movw	r0, #1214	; 0x4be
  40180e:	4f07      	ldr	r7, [pc, #28]	; (40182c <i2c_read_byte_L+0xf8>)
  401810:	47b8      	blx	r7
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401812:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401814:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		delay_us(DELAY_L);
  401818:	f240 40be 	movw	r0, #1214	; 0x4be
  40181c:	47b8      	blx	r7
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40181e:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401820:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
  401824:	e7e2      	b.n	4017ec <i2c_read_byte_L+0xb8>
  401826:	bf00      	nop
  401828:	400e1200 	.word	0x400e1200
  40182c:	2040008d 	.word	0x2040008d

00401830 <write_sda_L>:
/*! \brief Writes SDA.
    \param x tristates SDA when x = 1, other wise 0
 */
void write_sda_L (char x)
{
	if(x)
  401830:	b930      	cbnz	r0, 401840 <write_sda_L+0x10>
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401832:	4b07      	ldr	r3, [pc, #28]	; (401850 <write_sda_L+0x20>)
  401834:	f44f 7280 	mov.w	r2, #256	; 0x100
  401838:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40183a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  40183e:	4770      	bx	lr
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401840:	4b03      	ldr	r3, [pc, #12]	; (401850 <write_sda_L+0x20>)
  401842:	f44f 7280 	mov.w	r2, #256	; 0x100
  401846:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401848:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  40184c:	4770      	bx	lr
  40184e:	bf00      	nop
  401850:	400e1200 	.word	0x400e1200

00401854 <i2c_write_byte_L>:
{
  401854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401858:	4606      	mov	r6, r0
  40185a:	468a      	mov	sl, r1
  40185c:	2508      	movs	r5, #8
            write_sda_L((byte & 0x80) != 0);
  40185e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 401900 <i2c_write_byte_L+0xac>
            delay_us(DELAY_L);
  401862:	f240 48be 	movw	r8, #1214	; 0x4be
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401866:	4f25      	ldr	r7, [pc, #148]	; (4018fc <i2c_write_byte_L+0xa8>)
            write_sda_L((byte & 0x80) != 0);
  401868:	09f0      	lsrs	r0, r6, #7
  40186a:	47c8      	blx	r9
            delay_us(DELAY_L);
  40186c:	4640      	mov	r0, r8
  40186e:	f8df b094 	ldr.w	fp, [pc, #148]	; 401904 <i2c_write_byte_L+0xb0>
  401872:	47d8      	blx	fp
  401874:	f44f 7400 	mov.w	r4, #512	; 0x200
  401878:	617c      	str	r4, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40187a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
            delay_us(DELAY_L);
  40187e:	4640      	mov	r0, r8
  401880:	47d8      	blx	fp
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401882:	613c      	str	r4, [r7, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401884:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
            byte <<= 1;
  401888:	0076      	lsls	r6, r6, #1
  40188a:	b2f6      	uxtb	r6, r6
            delay_us(DELAY_L);
  40188c:	4640      	mov	r0, r8
  40188e:	47d8      	blx	fp
  401890:	1e68      	subs	r0, r5, #1
	for (bit = 0; bit < 8; bit++) 
  401892:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
  401896:	d1e7      	bne.n	401868 <i2c_write_byte_L+0x14>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401898:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
  40189c:	f504 2461 	add.w	r4, r4, #921600	; 0xe1000
  4018a0:	f44f 7380 	mov.w	r3, #256	; 0x100
  4018a4:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018a6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4018aa:	f44f 7300 	mov.w	r3, #512	; 0x200
  4018ae:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018b0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    delay_us(DELAY_L);
  4018b4:	f240 40be 	movw	r0, #1214	; 0x4be
  4018b8:	47d8      	blx	fp
	delay_us(4);
  4018ba:	20cb      	movs	r0, #203	; 0xcb
  4018bc:	47d8      	blx	fp
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4018be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if(READ_SDA_L())
  4018c0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4018c4:	d002      	beq.n	4018cc <i2c_write_byte_L+0x78>
}	
  4018c6:	4628      	mov	r0, r5
  4018c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4018cc:	f44f 7200 	mov.w	r2, #512	; 0x200
  4018d0:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018d2:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4018d6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4018da:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018dc:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
	delay_us(DELAY_L);
  4018e0:	f240 40be 	movw	r0, #1214	; 0x4be
  4018e4:	47d8      	blx	fp
	if(stretch)delay_ms(1);
  4018e6:	f1ba 0f00 	cmp.w	sl, #0
  4018ea:	d101      	bne.n	4018f0 <i2c_write_byte_L+0x9c>
	return 1;
  4018ec:	2501      	movs	r5, #1
  4018ee:	e7ea      	b.n	4018c6 <i2c_write_byte_L+0x72>
	if(stretch)delay_ms(1);
  4018f0:	f24c 508e 	movw	r0, #50574	; 0xc58e
  4018f4:	47d8      	blx	fp
	return 1;
  4018f6:	2501      	movs	r5, #1
  4018f8:	e7e5      	b.n	4018c6 <i2c_write_byte_L+0x72>
  4018fa:	bf00      	nop
  4018fc:	400e1200 	.word	0x400e1200
  401900:	00401831 	.word	0x00401831
  401904:	2040008d 	.word	0x2040008d

00401908 <send_slave_Address_L>:
{
  401908:	b508      	push	{r3, lr}
 	return i2c_write_byte_L(slaveAddress | read, 0 );
  40190a:	4308      	orrs	r0, r1
  40190c:	2100      	movs	r1, #0
  40190e:	4b01      	ldr	r3, [pc, #4]	; (401914 <send_slave_Address_L+0xc>)
  401910:	4798      	blx	r3
} 
  401912:	bd08      	pop	{r3, pc}
  401914:	00401855 	.word	0x00401855

00401918 <read_bytes_L>:
{
  401918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40191c:	4607      	mov	r7, r0
  40191e:	460d      	mov	r5, r1
  401920:	4614      	mov	r4, r2
	if(!twi_start_cond_L())
  401922:	4b11      	ldr	r3, [pc, #68]	; (401968 <read_bytes_L+0x50>)
  401924:	4798      	blx	r3
  401926:	4606      	mov	r6, r0
  401928:	b910      	cbnz	r0, 401930 <read_bytes_L+0x18>
}	
  40192a:	4630      	mov	r0, r6
  40192c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!send_slave_Address_L(READ_L, slaveAddress))
  401930:	4621      	mov	r1, r4
  401932:	2001      	movs	r0, #1
  401934:	4b0d      	ldr	r3, [pc, #52]	; (40196c <read_bytes_L+0x54>)
  401936:	4798      	blx	r3
  401938:	4606      	mov	r6, r0
  40193a:	2800      	cmp	r0, #0
  40193c:	d0f5      	beq.n	40192a <read_bytes_L+0x12>
	for(index = 0; index < bytes; index++)
  40193e:	b17d      	cbz	r5, 401960 <read_bytes_L+0x48>
  401940:	2400      	movs	r4, #0
		success = i2c_read_byte_L(data, bytes, index);//db: always returns 1?
  401942:	4e0b      	ldr	r6, [pc, #44]	; (401970 <read_bytes_L+0x58>)
  401944:	4622      	mov	r2, r4
  401946:	4629      	mov	r1, r5
  401948:	4638      	mov	r0, r7
  40194a:	47b0      	blx	r6
		if(!success)
  40194c:	4680      	mov	r8, r0
  40194e:	b118      	cbz	r0, 401958 <read_bytes_L+0x40>
	for(index = 0; index < bytes; index++)
  401950:	3401      	adds	r4, #1
  401952:	b2e4      	uxtb	r4, r4
  401954:	42a5      	cmp	r5, r4
  401956:	d1f5      	bne.n	401944 <read_bytes_L+0x2c>
	twi_stop_cond_L();
  401958:	4b06      	ldr	r3, [pc, #24]	; (401974 <read_bytes_L+0x5c>)
  40195a:	4798      	blx	r3
	return success;
  40195c:	4646      	mov	r6, r8
  40195e:	e7e4      	b.n	40192a <read_bytes_L+0x12>
	for(index = 0; index < bytes; index++)
  401960:	f04f 0800 	mov.w	r8, #0
  401964:	e7f8      	b.n	401958 <read_bytes_L+0x40>
  401966:	bf00      	nop
  401968:	004016c9 	.word	0x004016c9
  40196c:	00401909 	.word	0x00401909
  401970:	00401735 	.word	0x00401735
  401974:	00401701 	.word	0x00401701

00401978 <write_data_L>:
{
  401978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40197c:	4605      	mov	r5, r0
  40197e:	460f      	mov	r7, r1
  401980:	4614      	mov	r4, r2
  401982:	4699      	mov	r9, r3
	if(!twi_start_cond_L())
  401984:	4b1d      	ldr	r3, [pc, #116]	; (4019fc <write_data_L+0x84>)
  401986:	4798      	blx	r3
  401988:	4606      	mov	r6, r0
  40198a:	b910      	cbnz	r0, 401992 <write_data_L+0x1a>
}
  40198c:	4630      	mov	r0, r6
  40198e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!send_slave_Address_L(WRITE_L, slaveAddress))
  401992:	4621      	mov	r1, r4
  401994:	2000      	movs	r0, #0
  401996:	4b1a      	ldr	r3, [pc, #104]	; (401a00 <write_data_L+0x88>)
  401998:	4798      	blx	r3
  40199a:	4606      	mov	r6, r0
  40199c:	2800      	cmp	r0, #0
  40199e:	d0f5      	beq.n	40198c <write_data_L+0x14>
	for(index = 0; index < bytes; index++)
  4019a0:	b357      	cbz	r7, 4019f8 <write_data_L+0x80>
  4019a2:	f107 38ff 	add.w	r8, r7, #4294967295
  4019a6:	fa5f f888 	uxtb.w	r8, r8
  4019aa:	f108 0801 	add.w	r8, r8, #1
  4019ae:	2400      	movs	r4, #0
		if(index==(bytes-1))ack = i2c_write_byte_L(indata[index], stretch);
  4019b0:	3f01      	subs	r7, #1
		 else ack = i2c_write_byte_L(indata[index], 0);
  4019b2:	46a3      	mov	fp, r4
  4019b4:	f8df a054 	ldr.w	sl, [pc, #84]	; 401a0c <write_data_L+0x94>
		if(index==(bytes-1))ack = i2c_write_byte_L(indata[index], stretch);
  4019b8:	42bc      	cmp	r4, r7
  4019ba:	bf0c      	ite	eq
  4019bc:	4649      	moveq	r1, r9
		 else ack = i2c_write_byte_L(indata[index], 0);
  4019be:	4659      	movne	r1, fp
  4019c0:	7828      	ldrb	r0, [r5, #0]
  4019c2:	47d0      	blx	sl
  4019c4:	4606      	mov	r6, r0
		 if(!ack)
  4019c6:	b118      	cbz	r0, 4019d0 <write_data_L+0x58>
  4019c8:	3401      	adds	r4, #1
  4019ca:	3501      	adds	r5, #1
	for(index = 0; index < bytes; index++)
  4019cc:	4544      	cmp	r4, r8
  4019ce:	d1f3      	bne.n	4019b8 <write_data_L+0x40>
	if(stretch==0)SENS_SCL_FLOAT;
  4019d0:	f1b9 0f00 	cmp.w	r9, #0
  4019d4:	d105      	bne.n	4019e2 <write_data_L+0x6a>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4019d6:	4b0b      	ldr	r3, [pc, #44]	; (401a04 <write_data_L+0x8c>)
  4019d8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4019dc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	delay_us(SCL_SDA_DELAY_L);
  4019e2:	f240 205f 	movw	r0, #607	; 0x25f
  4019e6:	4b08      	ldr	r3, [pc, #32]	; (401a08 <write_data_L+0x90>)
  4019e8:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4019ea:	4b06      	ldr	r3, [pc, #24]	; (401a04 <write_data_L+0x8c>)
  4019ec:	f44f 7280 	mov.w	r2, #256	; 0x100
  4019f0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return ack;
  4019f6:	e7c9      	b.n	40198c <write_data_L+0x14>
	for(index = 0; index < bytes; index++)
  4019f8:	2600      	movs	r6, #0
  4019fa:	e7e9      	b.n	4019d0 <write_data_L+0x58>
  4019fc:	004016c9 	.word	0x004016c9
  401a00:	00401909 	.word	0x00401909
  401a04:	400e1200 	.word	0x400e1200
  401a08:	2040008d 	.word	0x2040008d
  401a0c:	00401855 	.word	0x00401855

00401a10 <write_SCL_RTC>:
	
/*! \brief Writes SCL.
    \param x tristates SCL when x = 1, other wise 0
 */
void write_SCL_RTC (char x)
{
  401a10:	b508      	push	{r3, lr}
      if(x)
  401a12:	b158      	cbz	r0, 401a2c <write_SCL_RTC+0x1c>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401a14:	4b0a      	ldr	r3, [pc, #40]	; (401a40 <write_SCL_RTC+0x30>)
  401a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401a1a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401a20:	461a      	mov	r2, r3
  401a22:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
      {
//             DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_RTC, IOPORT_DIR_INPUT);
 	    //check clock stretching
 	    while(!READ_SCL_RTC());
  401a24:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401a28:	d0fb      	beq.n	401a22 <write_SCL_RTC+0x12>
  401a2a:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401a2c:	4b04      	ldr	r3, [pc, #16]	; (401a40 <write_SCL_RTC+0x30>)
  401a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401a32:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a34:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      else
      {
//             DDR_SCL |= (1 << SCL); //output 
//             PORT_SCL &= ~(1 << SCL); //set it low
			ioport_set_pin_dir(SCL_RTC, IOPORT_DIR_OUTPUT);
			pio_set_pin_low(SCL_RTC);
  401a38:	204d      	movs	r0, #77	; 0x4d
  401a3a:	4b02      	ldr	r3, [pc, #8]	; (401a44 <write_SCL_RTC+0x34>)
  401a3c:	4798      	blx	r3
  401a3e:	bd08      	pop	{r3, pc}
  401a40:	400e1200 	.word	0x400e1200
  401a44:	00403281 	.word	0x00403281

00401a48 <write_SDA_RTC>:

/*! \brief Writes SDA.
    \param x tristates SDA when x = 1, other wise 0
 */
void write_SDA_RTC (char x)
{
  401a48:	b508      	push	{r3, lr}
	if(x)
  401a4a:	b130      	cbz	r0, 401a5a <write_SDA_RTC+0x12>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401a4c:	4b08      	ldr	r3, [pc, #32]	; (401a70 <write_SDA_RTC+0x28>)
  401a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401a52:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401a58:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401a5a:	4b05      	ldr	r3, [pc, #20]	; (401a70 <write_SDA_RTC+0x28>)
  401a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401a60:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	else
	{
		///            DDR_SDA |= (1 << SDA); //output
		///            PORT_SDA &= ~(1 << SDA); //set it low
		ioport_set_pin_dir(SDA_RTC, IOPORT_DIR_OUTPUT);
		pio_set_pin_low(SDA_RTC);
  401a66:	204a      	movs	r0, #74	; 0x4a
  401a68:	4b02      	ldr	r3, [pc, #8]	; (401a74 <write_SDA_RTC+0x2c>)
  401a6a:	4798      	blx	r3
  401a6c:	bd08      	pop	{r3, pc}
  401a6e:	bf00      	nop
  401a70:	400e1200 	.word	0x400e1200
  401a74:	00403281 	.word	0x00403281

00401a78 <twi_init_RTC>:
{
  401a78:	b508      	push	{r3, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401a7a:	4b09      	ldr	r3, [pc, #36]	; (401aa0 <twi_init_RTC+0x28>)
  401a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401a80:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401a8a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a8c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	write_SDA_RTC(1);
  401a90:	2001      	movs	r0, #1
  401a92:	4b04      	ldr	r3, [pc, #16]	; (401aa4 <twi_init_RTC+0x2c>)
  401a94:	4798      	blx	r3
    write_SCL_RTC(1);
  401a96:	2001      	movs	r0, #1
  401a98:	4b03      	ldr	r3, [pc, #12]	; (401aa8 <twi_init_RTC+0x30>)
  401a9a:	4798      	blx	r3
  401a9c:	bd08      	pop	{r3, pc}
  401a9e:	bf00      	nop
  401aa0:	400e1200 	.word	0x400e1200
  401aa4:	00401a49 	.word	0x00401a49
  401aa8:	00401a11 	.word	0x00401a11

00401aac <twi_start_cond_RTC>:
{
  401aac:	b510      	push	{r4, lr}
    write_SDA_RTC(0);
  401aae:	2000      	movs	r0, #0
  401ab0:	4b06      	ldr	r3, [pc, #24]	; (401acc <twi_start_cond_RTC+0x20>)
  401ab2:	4798      	blx	r3
	delay_us(DELAY_RTC);
  401ab4:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401ab8:	4c05      	ldr	r4, [pc, #20]	; (401ad0 <twi_start_cond_RTC+0x24>)
  401aba:	47a0      	blx	r4
	write_SCL_RTC(0);	
  401abc:	2000      	movs	r0, #0
  401abe:	4b05      	ldr	r3, [pc, #20]	; (401ad4 <twi_start_cond_RTC+0x28>)
  401ac0:	4798      	blx	r3
	delay_us(DELAY_RTC);
  401ac2:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401ac6:	47a0      	blx	r4
}
  401ac8:	2001      	movs	r0, #1
  401aca:	bd10      	pop	{r4, pc}
  401acc:	00401a49 	.word	0x00401a49
  401ad0:	2040008d 	.word	0x2040008d
  401ad4:	00401a11 	.word	0x00401a11

00401ad8 <toggle_SCL_RTC>:
		
	}
}

void toggle_SCL_RTC() 
{
  401ad8:	b508      	push	{r3, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401ada:	4b0d      	ldr	r3, [pc, #52]	; (401b10 <toggle_SCL_RTC+0x38>)
  401adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(SCL_RTC))
  401ade:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401ae2:	d10b      	bne.n	401afc <toggle_SCL_RTC+0x24>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401ae4:	4b0a      	ldr	r3, [pc, #40]	; (401b10 <toggle_SCL_RTC+0x38>)
  401ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401aea:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401aec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401af0:	461a      	mov	r2, r3
  401af2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	}
	else
	{
// 		DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_RTC, IOPORT_DIR_INPUT);
 		while(!READ_SCL_RTC());
  401af4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401af8:	d0fb      	beq.n	401af2 <toggle_SCL_RTC+0x1a>
  401afa:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401afc:	4b04      	ldr	r3, [pc, #16]	; (401b10 <toggle_SCL_RTC+0x38>)
  401afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401b02:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pio_set_pin_low(SCL_RTC);
  401b08:	204d      	movs	r0, #77	; 0x4d
  401b0a:	4b02      	ldr	r3, [pc, #8]	; (401b14 <toggle_SCL_RTC+0x3c>)
  401b0c:	4798      	blx	r3
  401b0e:	bd08      	pop	{r3, pc}
  401b10:	400e1200 	.word	0x400e1200
  401b14:	00403281 	.word	0x00403281

00401b18 <i2c_write_byte_RTC>:
{
  401b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401b1c:	4604      	mov	r4, r0
  401b1e:	2708      	movs	r7, #8
            write_SDA_RTC((byte & 0x80) != 0);
  401b20:	f8df 9078 	ldr.w	r9, [pc, #120]	; 401b9c <i2c_write_byte_RTC+0x84>
            delay_us(DELAY_RTC);
  401b24:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
  401b28:	4d1a      	ldr	r5, [pc, #104]	; (401b94 <i2c_write_byte_RTC+0x7c>)
            write_SDA_RTC((byte & 0x80) != 0);
  401b2a:	09e0      	lsrs	r0, r4, #7
  401b2c:	47c8      	blx	r9
            delay_us(DELAY_RTC);
  401b2e:	4630      	mov	r0, r6
  401b30:	47a8      	blx	r5
            toggle_SCL_RTC();//goes high
  401b32:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401ba0 <i2c_write_byte_RTC+0x88>
  401b36:	47c0      	blx	r8
            delay_us(DELAY_RTC);
  401b38:	4630      	mov	r0, r6
  401b3a:	47a8      	blx	r5
            toggle_SCL_RTC();//goes low
  401b3c:	47c0      	blx	r8
            byte <<= 1;
  401b3e:	0064      	lsls	r4, r4, #1
  401b40:	b2e4      	uxtb	r4, r4
            delay_us(DELAY_RTC);
  401b42:	4630      	mov	r0, r6
  401b44:	47a8      	blx	r5
  401b46:	1e78      	subs	r0, r7, #1
	for (bit = 0; bit < 8; bit++) 
  401b48:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
  401b4c:	d1ed      	bne.n	401b2a <i2c_write_byte_RTC+0x12>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401b4e:	4c12      	ldr	r4, [pc, #72]	; (401b98 <i2c_write_byte_RTC+0x80>)
  401b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401b54:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b56:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	toggle_SCL_RTC(); //goes high for the 9th clock
  401b5a:	47c0      	blx	r8
	delay_us(16);
  401b5c:	f240 302a 	movw	r0, #810	; 0x32a
  401b60:	4b0c      	ldr	r3, [pc, #48]	; (401b94 <i2c_write_byte_RTC+0x7c>)
  401b62:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401b64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if(READ_SDA_RTC())
  401b66:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401b6a:	d002      	beq.n	401b72 <i2c_write_byte_RTC+0x5a>
}	
  401b6c:	4638      	mov	r0, r7
  401b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	delay_us(DELAY_RTC);
  401b72:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401b76:	4c07      	ldr	r4, [pc, #28]	; (401b94 <i2c_write_byte_RTC+0x7c>)
  401b78:	47a0      	blx	r4
	toggle_SCL_RTC(); //end of byte with acknowledgment. SCL LOW.
  401b7a:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401b7c:	4b06      	ldr	r3, [pc, #24]	; (401b98 <i2c_write_byte_RTC+0x80>)
  401b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401b82:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	delay_us(DELAY_RTC); 
  401b88:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401b8c:	47a0      	blx	r4
	return 1;
  401b8e:	2701      	movs	r7, #1
  401b90:	e7ec      	b.n	401b6c <i2c_write_byte_RTC+0x54>
  401b92:	bf00      	nop
  401b94:	2040008d 	.word	0x2040008d
  401b98:	400e1200 	.word	0x400e1200
  401b9c:	00401a49 	.word	0x00401a49
  401ba0:	00401ad9 	.word	0x00401ad9

00401ba4 <write_data_RTC>:
{
  401ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401ba6:	4607      	mov	r7, r0
  401ba8:	460e      	mov	r6, r1
	if(!twi_start_cond_RTC())
  401baa:	4b13      	ldr	r3, [pc, #76]	; (401bf8 <write_data_RTC+0x54>)
  401bac:	4798      	blx	r3
  401bae:	4605      	mov	r5, r0
  401bb0:	b908      	cbnz	r0, 401bb6 <write_data_RTC+0x12>
}
  401bb2:	4628      	mov	r0, r5
  401bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 	return i2c_write_byte_RTC(SLAVE_ADDRESS_RTC | read );
  401bb6:	20a2      	movs	r0, #162	; 0xa2
  401bb8:	4b10      	ldr	r3, [pc, #64]	; (401bfc <write_data_RTC+0x58>)
  401bba:	4798      	blx	r3
	if(!send_slave_address_RTC(WRITE_RTC))
  401bbc:	4605      	mov	r5, r0
  401bbe:	2800      	cmp	r0, #0
  401bc0:	d0f7      	beq.n	401bb2 <write_data_RTC+0xe>
	for(index = 0; index < bytes; index++)
  401bc2:	b1b6      	cbz	r6, 401bf2 <write_data_RTC+0x4e>
  401bc4:	1e7c      	subs	r4, r7, #1
  401bc6:	3e01      	subs	r6, #1
  401bc8:	fa57 f686 	uxtab	r6, r7, r6
		 ack = i2c_write_byte_RTC(indata[index]);
  401bcc:	4f0b      	ldr	r7, [pc, #44]	; (401bfc <write_data_RTC+0x58>)
  401bce:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  401bd2:	47b8      	blx	r7
		 if(!ack)
  401bd4:	4605      	mov	r5, r0
  401bd6:	b108      	cbz	r0, 401bdc <write_data_RTC+0x38>
	for(index = 0; index < bytes; index++)
  401bd8:	42b4      	cmp	r4, r6
  401bda:	d1f8      	bne.n	401bce <write_data_RTC+0x2a>
	write_SCL_RTC(1);
  401bdc:	2001      	movs	r0, #1
  401bde:	4b08      	ldr	r3, [pc, #32]	; (401c00 <write_data_RTC+0x5c>)
  401be0:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_RTC);
  401be2:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401be6:	4b07      	ldr	r3, [pc, #28]	; (401c04 <write_data_RTC+0x60>)
  401be8:	4798      	blx	r3
	write_SDA_RTC(1);
  401bea:	2001      	movs	r0, #1
  401bec:	4b06      	ldr	r3, [pc, #24]	; (401c08 <write_data_RTC+0x64>)
  401bee:	4798      	blx	r3
	return ack;
  401bf0:	e7df      	b.n	401bb2 <write_data_RTC+0xe>
	for(index = 0; index < bytes; index++)
  401bf2:	2500      	movs	r5, #0
  401bf4:	e7f2      	b.n	401bdc <write_data_RTC+0x38>
  401bf6:	bf00      	nop
  401bf8:	00401aad 	.word	0x00401aad
  401bfc:	00401b19 	.word	0x00401b19
  401c00:	00401a11 	.word	0x00401a11
  401c04:	2040008d 	.word	0x2040008d
  401c08:	00401a49 	.word	0x00401a49

00401c0c <i2c_read_byte_RTC>:
{
  401c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c10:	b083      	sub	sp, #12
  401c12:	4683      	mov	fp, r0
  401c14:	9101      	str	r1, [sp, #4]
  401c16:	4692      	mov	sl, r2
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401c18:	4b28      	ldr	r3, [pc, #160]	; (401cbc <i2c_read_byte_RTC+0xb0>)
  401c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401c1e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401c24:	2407      	movs	r4, #7
        unsigned char byte = 0;
  401c26:	f04f 0800 	mov.w	r8, #0
             toggle_SCL_RTC();//goes high
  401c2a:	4f25      	ldr	r7, [pc, #148]	; (401cc0 <i2c_read_byte_RTC+0xb4>)
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401c2c:	4699      	mov	r9, r3
              delay_us(DELAY_RTC);
  401c2e:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
  401c32:	e009      	b.n	401c48 <i2c_read_byte_RTC+0x3c>
  401c34:	4630      	mov	r0, r6
  401c36:	4d23      	ldr	r5, [pc, #140]	; (401cc4 <i2c_read_byte_RTC+0xb8>)
  401c38:	47a8      	blx	r5
              toggle_SCL_RTC();//goes low
  401c3a:	47b8      	blx	r7
              delay_us(DELAY_RTC);
  401c3c:	4630      	mov	r0, r6
  401c3e:	47a8      	blx	r5
  401c40:	3c01      	subs	r4, #1
	for (bit = 0; bit < 8; bit++) 
  401c42:	f1b4 3fff 	cmp.w	r4, #4294967295
  401c46:	d00c      	beq.n	401c62 <i2c_read_byte_RTC+0x56>
             toggle_SCL_RTC();//goes high
  401c48:	47b8      	blx	r7
  401c4a:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
             if(READ_SDA_RTC())
  401c4e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401c52:	d0ef      	beq.n	401c34 <i2c_read_byte_RTC+0x28>
                     byte|= (1 << (7- bit));
  401c54:	2301      	movs	r3, #1
  401c56:	40a3      	lsls	r3, r4
  401c58:	ea43 0808 	orr.w	r8, r3, r8
  401c5c:	fa5f f888 	uxtb.w	r8, r8
  401c60:	e7e8      	b.n	401c34 <i2c_read_byte_RTC+0x28>
	rcvdata[index] = byte;
  401c62:	f80b 800a 	strb.w	r8, [fp, sl]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401c66:	4b15      	ldr	r3, [pc, #84]	; (401cbc <i2c_read_byte_RTC+0xb0>)
  401c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401c6c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if(index < (bytes-1))
  401c72:	9b01      	ldr	r3, [sp, #4]
  401c74:	3b01      	subs	r3, #1
  401c76:	459a      	cmp	sl, r3
  401c78:	db10      	blt.n	401c9c <i2c_read_byte_RTC+0x90>
		write_SDA_RTC(1);
  401c7a:	2001      	movs	r0, #1
  401c7c:	4b12      	ldr	r3, [pc, #72]	; (401cc8 <i2c_read_byte_RTC+0xbc>)
  401c7e:	4798      	blx	r3
		toggle_SCL_RTC(); //goes high for the 9th clock
  401c80:	4d0f      	ldr	r5, [pc, #60]	; (401cc0 <i2c_read_byte_RTC+0xb4>)
  401c82:	47a8      	blx	r5
		delay_us(DELAY_RTC);
  401c84:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401c88:	4c0e      	ldr	r4, [pc, #56]	; (401cc4 <i2c_read_byte_RTC+0xb8>)
  401c8a:	47a0      	blx	r4
		toggle_SCL_RTC(); //end of byte with acknowledgment. 
  401c8c:	47a8      	blx	r5
		delay_us(DELAY_RTC);
  401c8e:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401c92:	47a0      	blx	r4
}	
  401c94:	2001      	movs	r0, #1
  401c96:	b003      	add	sp, #12
  401c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		write_SDA_RTC(0);
  401c9c:	2000      	movs	r0, #0
  401c9e:	4d0a      	ldr	r5, [pc, #40]	; (401cc8 <i2c_read_byte_RTC+0xbc>)
  401ca0:	47a8      	blx	r5
		toggle_SCL_RTC(); //goes high for the 9th clock
  401ca2:	4e07      	ldr	r6, [pc, #28]	; (401cc0 <i2c_read_byte_RTC+0xb4>)
  401ca4:	47b0      	blx	r6
		delay_us(DELAY_RTC);
  401ca6:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401caa:	4c06      	ldr	r4, [pc, #24]	; (401cc4 <i2c_read_byte_RTC+0xb8>)
  401cac:	47a0      	blx	r4
		toggle_SCL_RTC(); //end of byte with acknowledgment. 
  401cae:	47b0      	blx	r6
		write_SDA_RTC(1);
  401cb0:	2001      	movs	r0, #1
  401cb2:	47a8      	blx	r5
		delay_us(DELAY_RTC);
  401cb4:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401cb8:	47a0      	blx	r4
  401cba:	e7eb      	b.n	401c94 <i2c_read_byte_RTC+0x88>
  401cbc:	400e1200 	.word	0x400e1200
  401cc0:	00401ad9 	.word	0x00401ad9
  401cc4:	2040008d 	.word	0x2040008d
  401cc8:	00401a49 	.word	0x00401a49

00401ccc <read_bytes_RTC>:
{
  401ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401cd0:	4607      	mov	r7, r0
  401cd2:	460d      	mov	r5, r1
	if(!twi_start_cond_RTC())
  401cd4:	4b18      	ldr	r3, [pc, #96]	; (401d38 <read_bytes_RTC+0x6c>)
  401cd6:	4798      	blx	r3
  401cd8:	4606      	mov	r6, r0
  401cda:	b910      	cbnz	r0, 401ce2 <read_bytes_RTC+0x16>
}	
  401cdc:	4630      	mov	r0, r6
  401cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 	return i2c_write_byte_RTC(SLAVE_ADDRESS_RTC | read );
  401ce2:	20a3      	movs	r0, #163	; 0xa3
  401ce4:	4b15      	ldr	r3, [pc, #84]	; (401d3c <read_bytes_RTC+0x70>)
  401ce6:	4798      	blx	r3
	if(!send_slave_address_RTC(READ_RTC))
  401ce8:	4606      	mov	r6, r0
  401cea:	2800      	cmp	r0, #0
  401cec:	d0f6      	beq.n	401cdc <read_bytes_RTC+0x10>
	for(index = 0; index < bytes; index++)
  401cee:	b1fd      	cbz	r5, 401d30 <read_bytes_RTC+0x64>
  401cf0:	2400      	movs	r4, #0
		success = i2c_read_byte_RTC(data, bytes, index);//db: always returns 1?
  401cf2:	4e13      	ldr	r6, [pc, #76]	; (401d40 <read_bytes_RTC+0x74>)
  401cf4:	4622      	mov	r2, r4
  401cf6:	4629      	mov	r1, r5
  401cf8:	4638      	mov	r0, r7
  401cfa:	47b0      	blx	r6
		if(!success)
  401cfc:	4680      	mov	r8, r0
  401cfe:	b118      	cbz	r0, 401d08 <read_bytes_RTC+0x3c>
	for(index = 0; index < bytes; index++)
  401d00:	3401      	adds	r4, #1
  401d02:	b2e4      	uxtb	r4, r4
  401d04:	42a5      	cmp	r5, r4
  401d06:	d1f5      	bne.n	401cf4 <read_bytes_RTC+0x28>
	delay_us(SCL_SDA_DELAY_RTC);
  401d08:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401d0c:	4c0d      	ldr	r4, [pc, #52]	; (401d44 <read_bytes_RTC+0x78>)
  401d0e:	47a0      	blx	r4
	write_SDA_RTC(0);
  401d10:	2000      	movs	r0, #0
  401d12:	4d0d      	ldr	r5, [pc, #52]	; (401d48 <read_bytes_RTC+0x7c>)
  401d14:	47a8      	blx	r5
	delay_us(SCL_SDA_DELAY_RTC);
  401d16:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401d1a:	47a0      	blx	r4
	write_SCL_RTC(1);
  401d1c:	2001      	movs	r0, #1
  401d1e:	4b0b      	ldr	r3, [pc, #44]	; (401d4c <read_bytes_RTC+0x80>)
  401d20:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_RTC);
  401d22:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401d26:	47a0      	blx	r4
	write_SDA_RTC(1);
  401d28:	2001      	movs	r0, #1
  401d2a:	47a8      	blx	r5
	return success;
  401d2c:	4646      	mov	r6, r8
  401d2e:	e7d5      	b.n	401cdc <read_bytes_RTC+0x10>
	for(index = 0; index < bytes; index++)
  401d30:	f04f 0800 	mov.w	r8, #0
  401d34:	e7e8      	b.n	401d08 <read_bytes_RTC+0x3c>
  401d36:	bf00      	nop
  401d38:	00401aad 	.word	0x00401aad
  401d3c:	00401b19 	.word	0x00401b19
  401d40:	00401c0d 	.word	0x00401c0d
  401d44:	2040008d 	.word	0x2040008d
  401d48:	00401a49 	.word	0x00401a49
  401d4c:	00401a11 	.word	0x00401a11

00401d50 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401d50:	2801      	cmp	r0, #1
  401d52:	d901      	bls.n	401d58 <mem_test_unit_ready+0x8>
  401d54:	2001      	movs	r0, #1
  401d56:	4770      	bx	lr
{
  401d58:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401d5a:	0140      	lsls	r0, r0, #5
  401d5c:	4b01      	ldr	r3, [pc, #4]	; (401d64 <mem_test_unit_ready+0x14>)
  401d5e:	581b      	ldr	r3, [r3, r0]
  401d60:	4798      	blx	r3
  401d62:	bd08      	pop	{r3, pc}
  401d64:	0040fd5c 	.word	0x0040fd5c

00401d68 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401d68:	2801      	cmp	r0, #1
  401d6a:	d901      	bls.n	401d70 <mem_read_capacity+0x8>
  401d6c:	2001      	movs	r0, #1
  401d6e:	4770      	bx	lr
{
  401d70:	b508      	push	{r3, lr}
  401d72:	4603      	mov	r3, r0
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401d74:	4803      	ldr	r0, [pc, #12]	; (401d84 <mem_read_capacity+0x1c>)
  401d76:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401d7a:	6843      	ldr	r3, [r0, #4]
  401d7c:	4608      	mov	r0, r1
  401d7e:	4798      	blx	r3
  401d80:	bd08      	pop	{r3, pc}
  401d82:	bf00      	nop
  401d84:	0040fd5c 	.word	0x0040fd5c

00401d88 <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  401d88:	2801      	cmp	r0, #1
  401d8a:	bf8c      	ite	hi
  401d8c:	2000      	movhi	r0, #0
  401d8e:	2001      	movls	r0, #1
  401d90:	4770      	bx	lr
	...

00401d94 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401d94:	2801      	cmp	r0, #1
  401d96:	d901      	bls.n	401d9c <mem_wr_protect+0x8>
  401d98:	2001      	movs	r0, #1
  401d9a:	4770      	bx	lr
{
  401d9c:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401d9e:	4b03      	ldr	r3, [pc, #12]	; (401dac <mem_wr_protect+0x18>)
  401da0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  401da4:	68c3      	ldr	r3, [r0, #12]
  401da6:	4798      	blx	r3
  401da8:	bd08      	pop	{r3, pc}
  401daa:	bf00      	nop
  401dac:	0040fd5c 	.word	0x0040fd5c

00401db0 <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  401db0:	2801      	cmp	r0, #1
  401db2:	d901      	bls.n	401db8 <memory_2_ram+0x8>
  401db4:	2001      	movs	r0, #1
  401db6:	4770      	bx	lr
{
  401db8:	b510      	push	{r4, lr}
  401dba:	460c      	mov	r4, r1
  401dbc:	4603      	mov	r3, r0
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  401dbe:	4804      	ldr	r0, [pc, #16]	; (401dd0 <memory_2_ram+0x20>)
  401dc0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401dc4:	6943      	ldr	r3, [r0, #20]
  401dc6:	4611      	mov	r1, r2
  401dc8:	4620      	mov	r0, r4
  401dca:	4798      	blx	r3
  401dcc:	bd10      	pop	{r4, pc}
  401dce:	bf00      	nop
  401dd0:	0040fd5c 	.word	0x0040fd5c

00401dd4 <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  401dd4:	2801      	cmp	r0, #1
  401dd6:	d901      	bls.n	401ddc <ram_2_memory+0x8>
  401dd8:	2001      	movs	r0, #1
  401dda:	4770      	bx	lr
{
  401ddc:	b510      	push	{r4, lr}
  401dde:	460c      	mov	r4, r1
  401de0:	4603      	mov	r3, r0
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  401de2:	4804      	ldr	r0, [pc, #16]	; (401df4 <ram_2_memory+0x20>)
  401de4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401de8:	6983      	ldr	r3, [r0, #24]
  401dea:	4611      	mov	r1, r2
  401dec:	4620      	mov	r0, r4
  401dee:	4798      	blx	r3
  401df0:	bd10      	pop	{r4, pc}
  401df2:	bf00      	nop
  401df4:	0040fd5c 	.word	0x0040fd5c

00401df8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401dfc:	b980      	cbnz	r0, 401e20 <_read+0x28>
  401dfe:	460c      	mov	r4, r1
  401e00:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  401e02:	2a00      	cmp	r2, #0
  401e04:	dd0f      	ble.n	401e26 <_read+0x2e>
  401e06:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  401e08:	4e08      	ldr	r6, [pc, #32]	; (401e2c <_read+0x34>)
  401e0a:	4d09      	ldr	r5, [pc, #36]	; (401e30 <_read+0x38>)
  401e0c:	6830      	ldr	r0, [r6, #0]
  401e0e:	4621      	mov	r1, r4
  401e10:	682b      	ldr	r3, [r5, #0]
  401e12:	4798      	blx	r3
		ptr++;
  401e14:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  401e16:	42bc      	cmp	r4, r7
  401e18:	d1f8      	bne.n	401e0c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  401e1a:	4640      	mov	r0, r8
  401e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401e20:	f04f 38ff 	mov.w	r8, #4294967295
  401e24:	e7f9      	b.n	401e1a <_read+0x22>
	for (; len > 0; --len) {
  401e26:	4680      	mov	r8, r0
  401e28:	e7f7      	b.n	401e1a <_read+0x22>
  401e2a:	bf00      	nop
  401e2c:	20401110 	.word	0x20401110
  401e30:	20401108 	.word	0x20401108

00401e34 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401e34:	3801      	subs	r0, #1
  401e36:	2802      	cmp	r0, #2
  401e38:	d815      	bhi.n	401e66 <_write+0x32>
{
  401e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e3e:	460e      	mov	r6, r1
  401e40:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  401e42:	b19a      	cbz	r2, 401e6c <_write+0x38>
  401e44:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401e46:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401e80 <_write+0x4c>
  401e4a:	4f0c      	ldr	r7, [pc, #48]	; (401e7c <_write+0x48>)
  401e4c:	f8d8 0000 	ldr.w	r0, [r8]
  401e50:	f815 1b01 	ldrb.w	r1, [r5], #1
  401e54:	683b      	ldr	r3, [r7, #0]
  401e56:	4798      	blx	r3
  401e58:	2800      	cmp	r0, #0
  401e5a:	db0a      	blt.n	401e72 <_write+0x3e>
  401e5c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  401e5e:	3c01      	subs	r4, #1
  401e60:	d1f4      	bne.n	401e4c <_write+0x18>
  401e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401e66:	f04f 30ff 	mov.w	r0, #4294967295
  401e6a:	4770      	bx	lr
	for (; len != 0; --len) {
  401e6c:	4610      	mov	r0, r2
  401e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  401e72:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401e7a:	bf00      	nop
  401e7c:	2040110c 	.word	0x2040110c
  401e80:	20401110 	.word	0x20401110

00401e84 <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  401e84:	f1a1 030e 	sub.w	r3, r1, #14
  401e88:	2b01      	cmp	r3, #1
  401e8a:	d802      	bhi.n	401e92 <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
  401e8c:	f04f 30ff 	mov.w	r0, #4294967295
  401e90:	4770      	bx	lr
{
  401e92:	b510      	push	{r4, lr}
  401e94:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401e96:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401e9a:	fab3 f383 	clz	r3, r3
  401e9e:	095b      	lsrs	r3, r3, #5
  401ea0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401ea2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401ea4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ea8:	2400      	movs	r4, #0
  401eaa:	4b0a      	ldr	r3, [pc, #40]	; (401ed4 <efc_perform_command+0x50>)
  401eac:	701c      	strb	r4, [r3, #0]
	return flags;
  401eae:	9c01      	ldr	r4, [sp, #4]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  401eb0:	4b09      	ldr	r3, [pc, #36]	; (401ed8 <efc_perform_command+0x54>)
  401eb2:	ea03 2202 	and.w	r2, r3, r2, lsl #8
	result = efc_perform_fcr(p_efc,
  401eb6:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
  401eba:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
  401ebc:	4311      	orrs	r1, r2
  401ebe:	4b07      	ldr	r3, [pc, #28]	; (401edc <efc_perform_command+0x58>)
  401ec0:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401ec2:	b12c      	cbz	r4, 401ed0 <efc_perform_command+0x4c>
		cpu_irq_enable();
  401ec4:	2201      	movs	r2, #1
  401ec6:	4b03      	ldr	r3, [pc, #12]	; (401ed4 <efc_perform_command+0x50>)
  401ec8:	701a      	strb	r2, [r3, #0]
  401eca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401ece:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
  401ed0:	b002      	add	sp, #8
  401ed2:	bd10      	pop	{r4, pc}
  401ed4:	20400177 	.word	0x20400177
  401ed8:	00ffff00 	.word	0x00ffff00
  401edc:	2040006d 	.word	0x2040006d

00401ee0 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  401ee0:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  401ee2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401ee6:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401ee8:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401eea:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401eec:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401eee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401ef0:	2680      	movs	r6, #128	; 0x80
  401ef2:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  401ef4:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401ef6:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401ef8:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401efa:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  401efc:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  401efe:	2200      	movs	r2, #0
  401f00:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401f02:	2205      	movs	r2, #5
  401f04:	601a      	str	r2, [r3, #0]
}
  401f06:	bc70      	pop	{r4, r5, r6}
  401f08:	4770      	bx	lr
	...

00401f0c <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  401f0c:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  401f0e:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  401f12:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  401f14:	f411 7f80 	tst.w	r1, #256	; 0x100
  401f18:	d004      	beq.n	401f24 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  401f1a:	f411 6f00 	tst.w	r1, #2048	; 0x800
  401f1e:	d00e      	beq.n	401f3e <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  401f20:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  401f24:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  401f28:	bf18      	it	ne
  401f2a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  401f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401f32:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  401f34:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  401f36:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  401f38:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  401f3c:	e00d      	b.n	401f5a <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  401f3e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  401f42:	bf14      	ite	ne
  401f44:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  401f48:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  401f4c:	e7ea      	b.n	401f24 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401f4e:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  401f52:	d10c      	bne.n	401f6e <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  401f54:	f013 0f01 	tst.w	r3, #1
  401f58:	d10d      	bne.n	401f76 <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  401f5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  401f5c:	2a00      	cmp	r2, #0
  401f5e:	d0f6      	beq.n	401f4e <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401f60:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  401f64:	d0f6      	beq.n	401f54 <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  401f66:	4b10      	ldr	r3, [pc, #64]	; (401fa8 <hsmci_send_cmd_execute+0x9c>)
  401f68:	4798      	blx	r3
				return false;
  401f6a:	2000      	movs	r0, #0
  401f6c:	bd08      	pop	{r3, pc}
				hsmci_reset();
  401f6e:	4b0e      	ldr	r3, [pc, #56]	; (401fa8 <hsmci_send_cmd_execute+0x9c>)
  401f70:	4798      	blx	r3
				return false;
  401f72:	2000      	movs	r0, #0
  401f74:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  401f76:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  401f7a:	d103      	bne.n	401f84 <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  401f7c:	2001      	movs	r0, #1
  401f7e:	bd08      	pop	{r3, pc}
	return true;
  401f80:	2001      	movs	r0, #1
  401f82:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  401f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401f8a:	f04f 32ff 	mov.w	r2, #4294967295
  401f8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  401f92:	f003 0330 	and.w	r3, r3, #48	; 0x30
  401f96:	2b20      	cmp	r3, #32
  401f98:	d0f2      	beq.n	401f80 <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  401f9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  401f9c:	3a01      	subs	r2, #1
  401f9e:	d1f8      	bne.n	401f92 <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  401fa0:	4b01      	ldr	r3, [pc, #4]	; (401fa8 <hsmci_send_cmd_execute+0x9c>)
  401fa2:	4798      	blx	r3
			return false;
  401fa4:	2000      	movs	r0, #0
  401fa6:	bd08      	pop	{r3, pc}
  401fa8:	00401ee1 	.word	0x00401ee1

00401fac <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  401fac:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  401fae:	2012      	movs	r0, #18
  401fb0:	4c08      	ldr	r4, [pc, #32]	; (401fd4 <hsmci_init+0x28>)
  401fb2:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  401fb4:	203a      	movs	r0, #58	; 0x3a
  401fb6:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401fbc:	2272      	movs	r2, #114	; 0x72
  401fbe:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  401fc0:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  401fc2:	2211      	movs	r2, #17
  401fc4:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  401fc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  401fca:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401fcc:	2205      	movs	r2, #5
  401fce:	601a      	str	r2, [r3, #0]
  401fd0:	bd10      	pop	{r4, pc}
  401fd2:	bf00      	nop
  401fd4:	004035a1 	.word	0x004035a1

00401fd8 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  401fd8:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  401fda:	bf0c      	ite	eq
  401fdc:	2004      	moveq	r0, #4
  401fde:	2000      	movne	r0, #0
  401fe0:	4770      	bx	lr

00401fe2 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  401fe2:	2001      	movs	r0, #1
  401fe4:	4770      	bx	lr
	...

00401fe8 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  401fe8:	b37b      	cbz	r3, 40204a <hsmci_select_device+0x62>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401fea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401fee:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401ff4:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  401ff6:	4b2b      	ldr	r3, [pc, #172]	; (4020a4 <hsmci_select_device+0xbc>)
  401ff8:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  401ffc:	d337      	bcc.n	40206e <hsmci_select_device+0x86>
{
  401ffe:	b410      	push	{r4}
		div = (mck / speed) - 2;
  402000:	4829      	ldr	r0, [pc, #164]	; (4020a8 <hsmci_select_device+0xc0>)
  402002:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  402006:	fb01 0113 	mls	r1, r1, r3, r0
  40200a:	bb29      	cbnz	r1, 402058 <hsmci_select_device+0x70>
		div = (mck / speed) - 2;
  40200c:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  40200e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402012:	6848      	ldr	r0, [r1, #4]
  402014:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  402018:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  40201a:	684c      	ldr	r4, [r1, #4]
  40201c:	f3c3 0047 	ubfx	r0, r3, #1, #8
  402020:	4320      	orrs	r0, r4
  402022:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  402024:	f013 0f01 	tst.w	r3, #1
  402028:	d018      	beq.n	40205c <hsmci_select_device+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  40202a:	684b      	ldr	r3, [r1, #4]
  40202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402030:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  402032:	2a04      	cmp	r2, #4
  402034:	d019      	beq.n	40206a <hsmci_select_device+0x82>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  402036:	2a08      	cmp	r2, #8
  402038:	bf0c      	ite	eq
  40203a:	22c0      	moveq	r2, #192	; 0xc0
  40203c:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  40203e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402042:	60da      	str	r2, [r3, #12]
}
  402044:	f85d 4b04 	ldr.w	r4, [sp], #4
  402048:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  40204a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40204e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  402050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402054:	6543      	str	r3, [r0, #84]	; 0x54
  402056:	e7ce      	b.n	401ff6 <hsmci_select_device+0xe>
			div++;
  402058:	3b01      	subs	r3, #1
  40205a:	e7d8      	b.n	40200e <hsmci_select_device+0x26>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  40205c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402060:	684b      	ldr	r3, [r1, #4]
  402062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  402066:	604b      	str	r3, [r1, #4]
  402068:	e7e3      	b.n	402032 <hsmci_select_device+0x4a>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  40206a:	2280      	movs	r2, #128	; 0x80
  40206c:	e7e7      	b.n	40203e <hsmci_select_device+0x56>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  40206e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402072:	6859      	ldr	r1, [r3, #4]
  402074:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  402078:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  40207a:	6859      	ldr	r1, [r3, #4]
  40207c:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  40207e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402082:	684b      	ldr	r3, [r1, #4]
  402084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  402088:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  40208a:	2a04      	cmp	r2, #4
  40208c:	d007      	beq.n	40209e <hsmci_select_device+0xb6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  40208e:	2a08      	cmp	r2, #8
  402090:	bf0c      	ite	eq
  402092:	22c0      	moveq	r2, #192	; 0xc0
  402094:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  402096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40209a:	60da      	str	r2, [r3, #12]
  40209c:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  40209e:	2280      	movs	r2, #128	; 0x80
  4020a0:	e7f9      	b.n	402096 <hsmci_select_device+0xae>
  4020a2:	bf00      	nop
  4020a4:	08f0d17f 	.word	0x08f0d17f
  4020a8:	08f0d180 	.word	0x08f0d180

004020ac <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  4020ac:	4770      	bx	lr

004020ae <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4020ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4020b2:	685a      	ldr	r2, [r3, #4]
  4020b4:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4020b8:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  4020ba:	2200      	movs	r2, #0
  4020bc:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  4020be:	f44f 6210 	mov.w	r2, #2304	; 0x900
  4020c2:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  4020c4:	461a      	mov	r2, r3
  4020c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
  4020c8:	f013 0f01 	tst.w	r3, #1
  4020cc:	d0fb      	beq.n	4020c6 <hsmci_send_clock+0x18>
}
  4020ce:	4770      	bx	lr

004020d0 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  4020d0:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4020d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4020d6:	685a      	ldr	r2, [r3, #4]
  4020d8:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4020dc:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  4020de:	2400      	movs	r4, #0
  4020e0:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  4020e2:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  4020e4:	460a      	mov	r2, r1
  4020e6:	4601      	mov	r1, r0
  4020e8:	4620      	mov	r0, r4
  4020ea:	4b01      	ldr	r3, [pc, #4]	; (4020f0 <hsmci_send_cmd+0x20>)
  4020ec:	4798      	blx	r3
}
  4020ee:	bd10      	pop	{r4, pc}
  4020f0:	00401f0d 	.word	0x00401f0d

004020f4 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  4020f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4020f8:	6a18      	ldr	r0, [r3, #32]
}
  4020fa:	4770      	bx	lr

004020fc <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  4020fc:	b410      	push	{r4}
  4020fe:	1d03      	adds	r3, r0, #4
  402100:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  402102:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  402106:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  402108:	0e11      	lsrs	r1, r2, #24
  40210a:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  40210e:	0c11      	lsrs	r1, r2, #16
  402110:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  402114:	0a11      	lsrs	r1, r2, #8
  402116:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  40211a:	f803 2c01 	strb.w	r2, [r3, #-1]
  40211e:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  402120:	4283      	cmp	r3, r0
  402122:	d1f0      	bne.n	402106 <hsmci_get_response_128+0xa>
		response++;
	}
}
  402124:	f85d 4b04 	ldr.w	r4, [sp], #4
  402128:	4770      	bx	lr
	...

0040212c <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  40212c:	b570      	push	{r4, r5, r6, lr}
  40212e:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  402132:	b384      	cbz	r4, 402196 <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  402134:	f44f 7580 	mov.w	r5, #256	; 0x100
  402138:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  40213c:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  40213e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  402142:	686c      	ldr	r4, [r5, #4]
  402144:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  402148:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  40214a:	f012 0f03 	tst.w	r2, #3
  40214e:	d027      	beq.n	4021a0 <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  402150:	686c      	ldr	r4, [r5, #4]
  402152:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  402156:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  402158:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  40215c:	2c00      	cmp	r4, #0
  40215e:	bf14      	ite	ne
  402160:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  402164:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  402168:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  40216c:	d11f      	bne.n	4021ae <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  40216e:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  402172:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  402176:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  402178:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  40217c:	d12b      	bne.n	4021d6 <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  40217e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  402182:	d12b      	bne.n	4021dc <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  402184:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  402188:	d118      	bne.n	4021bc <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  40218a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  40218e:	bf18      	it	ne
  402190:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  402194:	e012      	b.n	4021bc <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  402196:	2500      	movs	r5, #0
  402198:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  40219c:	6525      	str	r5, [r4, #80]	; 0x50
  40219e:	e7ce      	b.n	40213e <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4021a0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4021a4:	686c      	ldr	r4, [r5, #4]
  4021a6:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  4021aa:	606c      	str	r4, [r5, #4]
  4021ac:	e7d4      	b.n	402158 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  4021ae:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  4021b2:	f3c2 0508 	ubfx	r5, r2, #0, #9
  4021b6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  4021ba:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  4021bc:	2600      	movs	r6, #0
  4021be:	4d09      	ldr	r5, [pc, #36]	; (4021e4 <hsmci_adtc_start+0xb8>)
  4021c0:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  4021c2:	4d09      	ldr	r5, [pc, #36]	; (4021e8 <hsmci_adtc_start+0xbc>)
  4021c4:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  4021c6:	4a09      	ldr	r2, [pc, #36]	; (4021ec <hsmci_adtc_start+0xc0>)
  4021c8:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  4021ca:	460a      	mov	r2, r1
  4021cc:	4601      	mov	r1, r0
  4021ce:	4620      	mov	r0, r4
  4021d0:	4b07      	ldr	r3, [pc, #28]	; (4021f0 <hsmci_adtc_start+0xc4>)
  4021d2:	4798      	blx	r3
}
  4021d4:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  4021d6:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  4021da:	e7ef      	b.n	4021bc <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  4021dc:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4021e0:	e7ec      	b.n	4021bc <hsmci_adtc_start+0x90>
  4021e2:	bf00      	nop
  4021e4:	20400b90 	.word	0x20400b90
  4021e8:	20400b8a 	.word	0x20400b8a
  4021ec:	20400b8c 	.word	0x20400b8c
  4021f0:	00401f0d 	.word	0x00401f0d

004021f4 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  4021f4:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  4021f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4021fa:	4a16      	ldr	r2, [pc, #88]	; (402254 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  4021fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4021fe:	4213      	tst	r3, r2
  402200:	d11d      	bne.n	40223e <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  402202:	f013 0f02 	tst.w	r3, #2
  402206:	d0f9      	beq.n	4021fc <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  402208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40220e:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  402210:	4a11      	ldr	r2, [pc, #68]	; (402258 <hsmci_read_word+0x64>)
  402212:	6813      	ldr	r3, [r2, #0]
  402214:	3304      	adds	r3, #4
  402216:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  402218:	4a10      	ldr	r2, [pc, #64]	; (40225c <hsmci_read_word+0x68>)
  40221a:	8811      	ldrh	r1, [r2, #0]
  40221c:	4a10      	ldr	r2, [pc, #64]	; (402260 <hsmci_read_word+0x6c>)
  40221e:	8812      	ldrh	r2, [r2, #0]
  402220:	fb02 f201 	mul.w	r2, r2, r1
  402224:	4293      	cmp	r3, r2
  402226:	d312      	bcc.n	40224e <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  402228:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40222c:	4a09      	ldr	r2, [pc, #36]	; (402254 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  40222e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  402230:	4213      	tst	r3, r2
  402232:	d108      	bne.n	402246 <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  402234:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  402238:	d0f9      	beq.n	40222e <hsmci_read_word+0x3a>
	return true;
  40223a:	2001      	movs	r0, #1
  40223c:	bd08      	pop	{r3, pc}
			hsmci_reset();
  40223e:	4b09      	ldr	r3, [pc, #36]	; (402264 <hsmci_read_word+0x70>)
  402240:	4798      	blx	r3
			return false;
  402242:	2000      	movs	r0, #0
  402244:	bd08      	pop	{r3, pc}
			hsmci_reset();
  402246:	4b07      	ldr	r3, [pc, #28]	; (402264 <hsmci_read_word+0x70>)
  402248:	4798      	blx	r3
			return false;
  40224a:	2000      	movs	r0, #0
  40224c:	bd08      	pop	{r3, pc}
		return true;
  40224e:	2001      	movs	r0, #1
}
  402250:	bd08      	pop	{r3, pc}
  402252:	bf00      	nop
  402254:	c0600000 	.word	0xc0600000
  402258:	20400b90 	.word	0x20400b90
  40225c:	20400b8a 	.word	0x20400b8a
  402260:	20400b8c 	.word	0x20400b8c
  402264:	00401ee1 	.word	0x00401ee1

00402268 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  402268:	b530      	push	{r4, r5, lr}
  40226a:	b089      	sub	sp, #36	; 0x24
  40226c:	4605      	mov	r5, r0
  40226e:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  402270:	2220      	movs	r2, #32
  402272:	2100      	movs	r1, #0
  402274:	4668      	mov	r0, sp
  402276:	4b18      	ldr	r3, [pc, #96]	; (4022d8 <hsmci_start_read_blocks+0x70>)
  402278:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40227a:	2201      	movs	r2, #1
  40227c:	4b17      	ldr	r3, [pc, #92]	; (4022dc <hsmci_start_read_blocks+0x74>)
  40227e:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  402280:	4b17      	ldr	r3, [pc, #92]	; (4022e0 <hsmci_start_read_blocks+0x78>)
  402282:	881b      	ldrh	r3, [r3, #0]
  402284:	fb04 f403 	mul.w	r4, r4, r3

	if((uint32_t)dest & 3) {
  402288:	f015 0f03 	tst.w	r5, #3
  40228c:	d11a      	bne.n	4022c4 <hsmci_start_read_blocks+0x5c>
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40228e:	4b15      	ldr	r3, [pc, #84]	; (4022e4 <hsmci_start_read_blocks+0x7c>)
  402290:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF1
						| XDMAC_CC_DIF_AHB_IF0
						| XDMAC_CC_SAM_FIXED_AM
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  402292:	08a3      	lsrs	r3, r4, #2
  402294:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  402296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40229a:	6853      	ldr	r3, [r2, #4]
  40229c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4022a0:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  4022a2:	4b11      	ldr	r3, [pc, #68]	; (4022e8 <hsmci_start_read_blocks+0x80>)
  4022a4:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  4022a6:	9502      	str	r5, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  4022a8:	4d0c      	ldr	r5, [pc, #48]	; (4022dc <hsmci_start_read_blocks+0x74>)
  4022aa:	466a      	mov	r2, sp
  4022ac:	2100      	movs	r1, #0
  4022ae:	4628      	mov	r0, r5
  4022b0:	4b0e      	ldr	r3, [pc, #56]	; (4022ec <hsmci_start_read_blocks+0x84>)
  4022b2:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4022b4:	2001      	movs	r0, #1
  4022b6:	61e8      	str	r0, [r5, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  4022b8:	4a0d      	ldr	r2, [pc, #52]	; (4022f0 <hsmci_start_read_blocks+0x88>)
  4022ba:	6813      	ldr	r3, [r2, #0]
  4022bc:	441c      	add	r4, r3
  4022be:	6014      	str	r4, [r2, #0]
	return true;
}
  4022c0:	b009      	add	sp, #36	; 0x24
  4022c2:	bd30      	pop	{r4, r5, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4022c4:	4b0b      	ldr	r3, [pc, #44]	; (4022f4 <hsmci_start_read_blocks+0x8c>)
  4022c6:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  4022c8:	9400      	str	r4, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4022ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4022ce:	6853      	ldr	r3, [r2, #4]
  4022d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4022d4:	6053      	str	r3, [r2, #4]
  4022d6:	e7e4      	b.n	4022a2 <hsmci_start_read_blocks+0x3a>
  4022d8:	0040cfb5 	.word	0x0040cfb5
  4022dc:	40078000 	.word	0x40078000
  4022e0:	20400b8a 	.word	0x20400b8a
  4022e4:	00043001 	.word	0x00043001
  4022e8:	40000200 	.word	0x40000200
  4022ec:	0040499d 	.word	0x0040499d
  4022f0:	20400b90 	.word	0x20400b90
  4022f4:	00042001 	.word	0x00042001

004022f8 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  4022f8:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4022fa:	4b12      	ldr	r3, [pc, #72]	; (402344 <hsmci_wait_end_of_read_blocks+0x4c>)
  4022fc:	881b      	ldrh	r3, [r3, #0]
  4022fe:	4a12      	ldr	r2, [pc, #72]	; (402348 <hsmci_wait_end_of_read_blocks+0x50>)
  402300:	8812      	ldrh	r2, [r2, #0]
  402302:	fb02 f203 	mul.w	r2, r2, r3
  402306:	4b11      	ldr	r3, [pc, #68]	; (40234c <hsmci_wait_end_of_read_blocks+0x54>)
  402308:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  40230a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40230e:	4910      	ldr	r1, [pc, #64]	; (402350 <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  402310:	4e10      	ldr	r6, [pc, #64]	; (402354 <hsmci_wait_end_of_read_blocks+0x5c>)
  402312:	e009      	b.n	402328 <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  402314:	4b10      	ldr	r3, [pc, #64]	; (402358 <hsmci_wait_end_of_read_blocks+0x60>)
  402316:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  402318:	2201      	movs	r2, #1
  40231a:	4b0e      	ldr	r3, [pc, #56]	; (402354 <hsmci_wait_end_of_read_blocks+0x5c>)
  40231c:	621a      	str	r2, [r3, #32]
			return false;
  40231e:	2000      	movs	r0, #0
  402320:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  402322:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  402326:	d10a      	bne.n	40233e <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  402328:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40232a:	420b      	tst	r3, r1
  40232c:	d1f2      	bne.n	402314 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40232e:	42a2      	cmp	r2, r4
  402330:	d9f7      	bls.n	402322 <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  402332:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  402334:	f015 0f01 	tst.w	r5, #1
  402338:	d0f3      	beq.n	402322 <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  40233a:	2001      	movs	r0, #1
	return true;
}
  40233c:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  40233e:	2001      	movs	r0, #1
  402340:	bd70      	pop	{r4, r5, r6, pc}
  402342:	bf00      	nop
  402344:	20400b8a 	.word	0x20400b8a
  402348:	20400b8c 	.word	0x20400b8c
  40234c:	20400b90 	.word	0x20400b90
  402350:	c0600000 	.word	0xc0600000
  402354:	40078000 	.word	0x40078000
  402358:	00401ee1 	.word	0x00401ee1

0040235c <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  40235c:	b530      	push	{r4, r5, lr}
  40235e:	b089      	sub	sp, #36	; 0x24
  402360:	4605      	mov	r5, r0
  402362:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  402364:	2220      	movs	r2, #32
  402366:	2100      	movs	r1, #0
  402368:	4668      	mov	r0, sp
  40236a:	4b18      	ldr	r3, [pc, #96]	; (4023cc <hsmci_start_write_blocks+0x70>)
  40236c:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40236e:	2201      	movs	r2, #1
  402370:	4b17      	ldr	r3, [pc, #92]	; (4023d0 <hsmci_start_write_blocks+0x74>)
  402372:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  402374:	4b17      	ldr	r3, [pc, #92]	; (4023d4 <hsmci_start_write_blocks+0x78>)
  402376:	881b      	ldrh	r3, [r3, #0]
  402378:	fb04 f403 	mul.w	r4, r4, r3

	if((uint32_t)src & 3) {
  40237c:	f015 0f03 	tst.w	r5, #3
  402380:	d11a      	bne.n	4023b8 <hsmci_start_write_blocks+0x5c>
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  402382:	4b15      	ldr	r3, [pc, #84]	; (4023d8 <hsmci_start_write_blocks+0x7c>)
  402384:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF0
						| XDMAC_CC_DIF_AHB_IF1
						| XDMAC_CC_SAM_INCREMENTED_AM
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  402386:	08a3      	lsrs	r3, r4, #2
  402388:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  40238a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40238e:	6853      	ldr	r3, [r2, #4]
  402390:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402394:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)src;
  402396:	9501      	str	r5, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  402398:	4b10      	ldr	r3, [pc, #64]	; (4023dc <hsmci_start_write_blocks+0x80>)
  40239a:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  40239c:	4d0c      	ldr	r5, [pc, #48]	; (4023d0 <hsmci_start_write_blocks+0x74>)
  40239e:	466a      	mov	r2, sp
  4023a0:	2100      	movs	r1, #0
  4023a2:	4628      	mov	r0, r5
  4023a4:	4b0e      	ldr	r3, [pc, #56]	; (4023e0 <hsmci_start_write_blocks+0x84>)
  4023a6:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4023a8:	2001      	movs	r0, #1
  4023aa:	61e8      	str	r0, [r5, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  4023ac:	4a0d      	ldr	r2, [pc, #52]	; (4023e4 <hsmci_start_write_blocks+0x88>)
  4023ae:	6813      	ldr	r3, [r2, #0]
  4023b0:	441c      	add	r4, r3
  4023b2:	6014      	str	r4, [r2, #0]
	return true;
}
  4023b4:	b009      	add	sp, #36	; 0x24
  4023b6:	bd30      	pop	{r4, r5, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4023b8:	4b0b      	ldr	r3, [pc, #44]	; (4023e8 <hsmci_start_write_blocks+0x8c>)
  4023ba:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  4023bc:	9400      	str	r4, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4023be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4023c2:	6853      	ldr	r3, [r2, #4]
  4023c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4023c8:	6053      	str	r3, [r2, #4]
  4023ca:	e7e4      	b.n	402396 <hsmci_start_write_blocks+0x3a>
  4023cc:	0040cfb5 	.word	0x0040cfb5
  4023d0:	40078000 	.word	0x40078000
  4023d4:	20400b8a 	.word	0x20400b8a
  4023d8:	00015011 	.word	0x00015011
  4023dc:	40000200 	.word	0x40000200
  4023e0:	0040499d 	.word	0x0040499d
  4023e4:	20400b90 	.word	0x20400b90
  4023e8:	00014011 	.word	0x00014011

004023ec <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  4023ec:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4023ee:	4b12      	ldr	r3, [pc, #72]	; (402438 <hsmci_wait_end_of_write_blocks+0x4c>)
  4023f0:	881b      	ldrh	r3, [r3, #0]
  4023f2:	4a12      	ldr	r2, [pc, #72]	; (40243c <hsmci_wait_end_of_write_blocks+0x50>)
  4023f4:	8812      	ldrh	r2, [r2, #0]
  4023f6:	fb02 f203 	mul.w	r2, r2, r3
  4023fa:	4b11      	ldr	r3, [pc, #68]	; (402440 <hsmci_wait_end_of_write_blocks+0x54>)
  4023fc:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  4023fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  402402:	4910      	ldr	r1, [pc, #64]	; (402444 <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  402404:	4e10      	ldr	r6, [pc, #64]	; (402448 <hsmci_wait_end_of_write_blocks+0x5c>)
  402406:	e009      	b.n	40241c <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  402408:	4b10      	ldr	r3, [pc, #64]	; (40244c <hsmci_wait_end_of_write_blocks+0x60>)
  40240a:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40240c:	2201      	movs	r2, #1
  40240e:	4b0e      	ldr	r3, [pc, #56]	; (402448 <hsmci_wait_end_of_write_blocks+0x5c>)
  402410:	621a      	str	r2, [r3, #32]
			return false;
  402412:	2000      	movs	r0, #0
  402414:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  402416:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  40241a:	d10a      	bne.n	402432 <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  40241c:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40241e:	420b      	tst	r3, r1
  402420:	d1f2      	bne.n	402408 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  402422:	42a2      	cmp	r2, r4
  402424:	d9f7      	bls.n	402416 <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  402426:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  402428:	f015 0f01 	tst.w	r5, #1
  40242c:	d0f3      	beq.n	402416 <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  40242e:	2001      	movs	r0, #1

	return true;
}
  402430:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  402432:	2001      	movs	r0, #1
  402434:	bd70      	pop	{r4, r5, r6, pc}
  402436:	bf00      	nop
  402438:	20400b8a 	.word	0x20400b8a
  40243c:	20400b8c 	.word	0x20400b8c
  402440:	20400b90 	.word	0x20400b90
  402444:	c0600000 	.word	0xc0600000
  402448:	40078000 	.word	0x40078000
  40244c:	00401ee1 	.word	0x00401ee1

00402450 <isi_init>:
 *
 * \param p_isi  Pointer to a ISI instance.
 * \param isi_cfg   Configuration for the ISI
 */
void isi_init(Isi *p_isi, struct isi_config_t *isi_cfg)
{
  402450:	b410      	push	{r4}
	uint32_t reg = 0;

	if(isi_cfg->hpol) {
  402452:	780b      	ldrb	r3, [r1, #0]
		reg |= ISI_CFG1_HSYNC_POL;
  402454:	2b00      	cmp	r3, #0
  402456:	bf0c      	ite	eq
  402458:	2200      	moveq	r2, #0
  40245a:	2204      	movne	r2, #4
	}
	if(isi_cfg->vpol) {
  40245c:	784b      	ldrb	r3, [r1, #1]
  40245e:	b10b      	cbz	r3, 402464 <isi_init+0x14>
		reg |= ISI_CFG1_VSYNC_POL;
  402460:	f042 0208 	orr.w	r2, r2, #8
	}
	if(isi_cfg->pck_pol) {
  402464:	788b      	ldrb	r3, [r1, #2]
  402466:	b10b      	cbz	r3, 40246c <isi_init+0x1c>
		reg |= ISI_CFG1_PIXCLK_POL;
  402468:	f042 0210 	orr.w	r2, r2, #16
	}
	if(isi_cfg->emb_sync) {
  40246c:	78cb      	ldrb	r3, [r1, #3]
  40246e:	b10b      	cbz	r3, 402474 <isi_init+0x24>
		reg |= ISI_CFG1_EMB_SYNC;
  402470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	}
	if(isi_cfg->crc_sync) {
  402474:	790b      	ldrb	r3, [r1, #4]
  402476:	b10b      	cbz	r3, 40247c <isi_init+0x2c>
		reg |= ISI_CFG1_CRC_SYNC;
  402478:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  40247c:	794b      	ldrb	r3, [r1, #5]
  40247e:	035b      	lsls	r3, r3, #13
  402480:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
  402484:	798c      	ldrb	r4, [r1, #6]
  402486:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		| ISI_CFG1_SFD(isi_cfg->sfd);
  40248a:	79cc      	ldrb	r4, [r1, #7]
  40248c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  402490:	4313      	orrs	r3, r2
	p_isi->ISI_CFG1 = reg;
  402492:	6003      	str	r3, [r0, #0]
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  402494:	4b18      	ldr	r3, [pc, #96]	; (4024f8 <isi_init+0xa8>)
  402496:	685a      	ldr	r2, [r3, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  402498:	685b      	ldr	r3, [r3, #4]
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  40249a:	0ed2      	lsrs	r2, r2, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40249c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
  4024a0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28

	reg = _isi_get_CFG2_workaround();
	switch(isi_cfg->image_fmt) {
  4024a4:	7a0a      	ldrb	r2, [r1, #8]
  4024a6:	2a04      	cmp	r2, #4
  4024a8:	d806      	bhi.n	4024b8 <isi_init+0x68>
  4024aa:	e8df f002 	tbb	[pc, r2]
  4024ae:	1403      	.short	0x1403
  4024b0:	1c17      	.short	0x1c17
  4024b2:	1f          	.byte	0x1f
  4024b3:	00          	.byte	0x00
		case ISI_INPUT_YUV:
			reg &= ~ISI_CFG2_COL_SPACE;
  4024b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  4024b8:	68ca      	ldr	r2, [r1, #12]
  4024ba:	1e54      	subs	r4, r2, #1
  4024bc:	4a0f      	ldr	r2, [pc, #60]	; (4024fc <isi_init+0xac>)
  4024be:	ea02 4204 	and.w	r2, r2, r4, lsl #16
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  4024c2:	6909      	ldr	r1, [r1, #16]
  4024c4:	3901      	subs	r1, #1
  4024c6:	f3c1 010a 	ubfx	r1, r1, #0, #11
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  4024ca:	430a      	orrs	r2, r1
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  4024cc:	4313      	orrs	r3, r2
	p_isi->ISI_CFG2 = reg;
  4024ce:	6043      	str	r3, [r0, #4]
}
  4024d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4024d4:	4770      	bx	lr
			reg |= ISI_CFG2_RGB_MODE;
  4024d6:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
			break;
  4024da:	e7ed      	b.n	4024b8 <isi_init+0x68>
			reg &= ~ISI_CFG2_RGB_MODE;
  4024dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4024e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			break;
  4024e4:	e7e8      	b.n	4024b8 <isi_init+0x68>
			reg |= ISI_CFG2_GRAYSCALE;
  4024e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
			break;
  4024ea:	e7e5      	b.n	4024b8 <isi_init+0x68>
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
  4024ec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
  4024f0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
			break;
  4024f4:	e7e0      	b.n	4024b8 <isi_init+0x68>
  4024f6:	bf00      	nop
  4024f8:	4004c000 	.word	0x4004c000
  4024fc:	07ff0000 	.word	0x07ff0000

00402500 <isi_set_dma_codec_path>:
 * \param frame_buf_start_addr  DMA codec base address.
 */
void isi_set_dma_codec_path(Isi *p_isi, uint8_t full_mode, uint8_t discr,
		uint32_t base_buf_desc, uint32_t dma_ctrl, uint32_t frame_buf_start_addr)
{
	if(full_mode) {
  402500:	b171      	cbz	r1, 402520 <isi_set_dma_codec_path+0x20>
		p_isi->ISI_CFG1 |= ISI_CFG1_FULL;
  402502:	6801      	ldr	r1, [r0, #0]
  402504:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  402508:	6001      	str	r1, [r0, #0]
	} else {
		p_isi->ISI_CFG1 &= ~ISI_CFG1_FULL;
	}
	if(discr) {
  40250a:	b972      	cbnz	r2, 40252a <isi_set_dma_codec_path+0x2a>
		p_isi->ISI_CFG1 |= ISI_CFG1_DISCR;
	} else {
		p_isi->ISI_CFG1 &= ~ISI_CFG1_DISCR;
  40250c:	6802      	ldr	r2, [r0, #0]
  40250e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  402512:	6002      	str	r2, [r0, #0]
	}

	p_isi->ISI_DMA_C_DSCR = base_buf_desc;
  402514:	6583      	str	r3, [r0, #88]	; 0x58
	p_isi->ISI_DMA_C_CTRL = dma_ctrl;
  402516:	9b00      	ldr	r3, [sp, #0]
  402518:	6543      	str	r3, [r0, #84]	; 0x54
	p_isi->ISI_DMA_C_ADDR = frame_buf_start_addr;
  40251a:	9b01      	ldr	r3, [sp, #4]
  40251c:	6503      	str	r3, [r0, #80]	; 0x50
  40251e:	4770      	bx	lr
		p_isi->ISI_CFG1 &= ~ISI_CFG1_FULL;
  402520:	6801      	ldr	r1, [r0, #0]
  402522:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  402526:	6001      	str	r1, [r0, #0]
  402528:	e7ef      	b.n	40250a <isi_set_dma_codec_path+0xa>
		p_isi->ISI_CFG1 |= ISI_CFG1_DISCR;
  40252a:	6802      	ldr	r2, [r0, #0]
  40252c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  402530:	6002      	str	r2, [r0, #0]
  402532:	e7ef      	b.n	402514 <isi_set_dma_codec_path+0x14>

00402534 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  402534:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  402536:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  402538:	6884      	ldr	r4, [r0, #8]
  40253a:	42a5      	cmp	r5, r4
  40253c:	d003      	beq.n	402546 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  40253e:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  402540:	6884      	ldr	r4, [r0, #8]
  402542:	42ac      	cmp	r4, r5
  402544:	d1fb      	bne.n	40253e <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  402546:	b161      	cbz	r1, 402562 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402548:	f3c4 5001 	ubfx	r0, r4, #20, #2
  40254c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  402550:	f3c4 4003 	ubfx	r0, r4, #16, #4
  402554:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  402558:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  40255c:	bf18      	it	ne
  40255e:	300c      	addne	r0, #12
  402560:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  402562:	b142      	cbz	r2, 402576 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  402564:	f3c4 3102 	ubfx	r1, r4, #12, #3
  402568:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40256c:	f3c4 2003 	ubfx	r0, r4, #8, #4
  402570:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  402574:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  402576:	b143      	cbz	r3, 40258a <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402578:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40257c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402580:	f004 040f 	and.w	r4, r4, #15
  402584:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  402588:	601c      	str	r4, [r3, #0]
	}
}
  40258a:	bc30      	pop	{r4, r5}
  40258c:	4770      	bx	lr
	...

00402590 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  402590:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  402592:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  402594:	f014 0f01 	tst.w	r4, #1
  402598:	d005      	beq.n	4025a6 <rtc_set_time+0x16>
  40259a:	290c      	cmp	r1, #12
  40259c:	d903      	bls.n	4025a6 <rtc_set_time+0x16>
			ul_hour -= 12;
  40259e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  4025a0:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  4025a4:	e000      	b.n	4025a8 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4025a6:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4025a8:	4c1c      	ldr	r4, [pc, #112]	; (40261c <rtc_set_time+0x8c>)
  4025aa:	fba4 5603 	umull	r5, r6, r4, r3
  4025ae:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4025b0:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4025b4:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4025b8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4025bc:	fba4 6502 	umull	r6, r5, r4, r2
  4025c0:	08ed      	lsrs	r5, r5, #3
  4025c2:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4025c6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4025ca:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  4025ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  4025d2:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4025d4:	fba4 4201 	umull	r4, r2, r4, r1
  4025d8:	08d2      	lsrs	r2, r2, #3
  4025da:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4025de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4025e2:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4025e6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4025ea:	6983      	ldr	r3, [r0, #24]
  4025ec:	f013 0f04 	tst.w	r3, #4
  4025f0:	d0fb      	beq.n	4025ea <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  4025f2:	6803      	ldr	r3, [r0, #0]
  4025f4:	f043 0301 	orr.w	r3, r3, #1
  4025f8:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4025fa:	6983      	ldr	r3, [r0, #24]
  4025fc:	f013 0f01 	tst.w	r3, #1
  402600:	d0fb      	beq.n	4025fa <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  402602:	2301      	movs	r3, #1
  402604:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  402606:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  402608:	6803      	ldr	r3, [r0, #0]
  40260a:	f023 0301 	bic.w	r3, r3, #1
  40260e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  402610:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  402612:	f000 0001 	and.w	r0, r0, #1
  402616:	bcf0      	pop	{r4, r5, r6, r7}
  402618:	4770      	bx	lr
  40261a:	bf00      	nop
  40261c:	cccccccd 	.word	0xcccccccd

00402620 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  402620:	b4f0      	push	{r4, r5, r6, r7}
  402622:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  402624:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  402626:	68c4      	ldr	r4, [r0, #12]
  402628:	42a5      	cmp	r5, r4
  40262a:	d003      	beq.n	402634 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  40262c:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40262e:	68c4      	ldr	r4, [r0, #12]
  402630:	42ac      	cmp	r4, r5
  402632:	d1fb      	bne.n	40262c <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  402634:	b199      	cbz	r1, 40265e <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402636:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40263a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40263e:	f3c4 2703 	ubfx	r7, r4, #8, #4
  402642:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402646:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40264a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40264e:	f004 000f 	and.w	r0, r4, #15
  402652:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402656:	2564      	movs	r5, #100	; 0x64
  402658:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40265c:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  40265e:	b142      	cbz	r2, 402672 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402660:	f3c4 5000 	ubfx	r0, r4, #20, #1
  402664:	0081      	lsls	r1, r0, #2
  402666:	4408      	add	r0, r1
  402668:	f3c4 4103 	ubfx	r1, r4, #16, #4
  40266c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  402670:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  402672:	b143      	cbz	r3, 402686 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402674:	f3c4 7201 	ubfx	r2, r4, #28, #2
  402678:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40267c:	f3c4 6103 	ubfx	r1, r4, #24, #4
  402680:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  402684:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  402686:	b116      	cbz	r6, 40268e <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  402688:	f3c4 5442 	ubfx	r4, r4, #21, #3
  40268c:	6034      	str	r4, [r6, #0]
	}
}
  40268e:	bcf0      	pop	{r4, r5, r6, r7}
  402690:	4770      	bx	lr
	...

00402694 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  402694:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402696:	4d2a      	ldr	r5, [pc, #168]	; (402740 <rtc_set_date+0xac>)
  402698:	fba5 4603 	umull	r4, r6, r5, r3
  40269c:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40269e:	9c03      	ldr	r4, [sp, #12]
  4026a0:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4026a2:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4026a6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4026aa:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4026ae:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4026b2:	fba5 6402 	umull	r6, r4, r5, r2
  4026b6:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4026b8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4026bc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4026c0:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4026c4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4026c8:	4b1e      	ldr	r3, [pc, #120]	; (402744 <rtc_set_date+0xb0>)
  4026ca:	fba3 4301 	umull	r4, r3, r3, r1
  4026ce:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4026d0:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4026d4:	4b1c      	ldr	r3, [pc, #112]	; (402748 <rtc_set_date+0xb4>)
  4026d6:	fba3 4301 	umull	r4, r3, r3, r1
  4026da:	095b      	lsrs	r3, r3, #5
  4026dc:	fba5 6403 	umull	r6, r4, r5, r3
  4026e0:	08e4      	lsrs	r4, r4, #3
  4026e2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4026e6:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4026ea:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  4026ec:	fba5 4301 	umull	r4, r3, r5, r1
  4026f0:	08db      	lsrs	r3, r3, #3
  4026f2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  4026f6:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4026fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  4026fe:	fba5 1503 	umull	r1, r5, r5, r3
  402702:	08ed      	lsrs	r5, r5, #3
  402704:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402708:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40270c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  402710:	6983      	ldr	r3, [r0, #24]
  402712:	f013 0f04 	tst.w	r3, #4
  402716:	d0fb      	beq.n	402710 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  402718:	6803      	ldr	r3, [r0, #0]
  40271a:	f043 0302 	orr.w	r3, r3, #2
  40271e:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  402720:	6983      	ldr	r3, [r0, #24]
  402722:	f013 0f01 	tst.w	r3, #1
  402726:	d0fb      	beq.n	402720 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  402728:	2301      	movs	r3, #1
  40272a:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  40272c:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40272e:	6803      	ldr	r3, [r0, #0]
  402730:	f023 0302 	bic.w	r3, r3, #2
  402734:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  402736:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  402738:	f000 0002 	and.w	r0, r0, #2
  40273c:	bc70      	pop	{r4, r5, r6}
  40273e:	4770      	bx	lr
  402740:	cccccccd 	.word	0xcccccccd
  402744:	10624dd3 	.word	0x10624dd3
  402748:	51eb851f 	.word	0x51eb851f

0040274c <supc_set_wakeup_inputs>:
 * 0 means a low-to-high level transition forces the wake up of core power supply.
 */
void supc_set_wakeup_inputs(Supc *p_supc, uint32_t ul_inputs,
		uint32_t ul_transition)
{
	p_supc->SUPC_WUIR = ul_inputs | ul_transition;
  40274c:	430a      	orrs	r2, r1
  40274e:	6102      	str	r2, [r0, #16]
  402750:	4770      	bx	lr

00402752 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402752:	6943      	ldr	r3, [r0, #20]
  402754:	f013 0f02 	tst.w	r3, #2
  402758:	d004      	beq.n	402764 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40275a:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40275e:	61c1      	str	r1, [r0, #28]
	return 0;
  402760:	2000      	movs	r0, #0
  402762:	4770      	bx	lr
		return 1;
  402764:	2001      	movs	r0, #1
}
  402766:	4770      	bx	lr

00402768 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402768:	6943      	ldr	r3, [r0, #20]
  40276a:	f013 0f01 	tst.w	r3, #1
  40276e:	d005      	beq.n	40277c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402770:	6983      	ldr	r3, [r0, #24]
  402772:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402776:	600b      	str	r3, [r1, #0]

	return 0;
  402778:	2000      	movs	r0, #0
  40277a:	4770      	bx	lr
		return 1;
  40277c:	2001      	movs	r0, #1
}
  40277e:	4770      	bx	lr

00402780 <sdramc_init>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  402780:	4b51      	ldr	r3, [pc, #324]	; (4028c8 <sdramc_init+0x148>)
  402782:	781b      	ldrb	r3, [r3, #0]
  402784:	2bff      	cmp	r3, #255	; 0xff
  402786:	f000 809d 	beq.w	4028c4 <sdramc_init+0x144>
 *
 * \param p_sdram  Pointer to the sdram memory structure.
 * \param ul_clk  SDRAM clock frequency.
 */
void sdramc_init(sdramc_memory_dev_t *p_sdram, uint32_t ul_clk)
{
  40278a:	b4f0      	push	{r4, r5, r6, r7}
  40278c:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40278e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402792:	fab3 f383 	clz	r3, r3
  402796:	095b      	lsrs	r3, r3, #5
  402798:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40279a:	b672      	cpsid	i
  40279c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4027a0:	2200      	movs	r2, #0
  4027a2:	4b4a      	ldr	r3, [pc, #296]	; (4028cc <sdramc_init+0x14c>)
  4027a4:	701a      	strb	r2, [r3, #0]
	return flags;
  4027a6:	9c00      	ldr	r4, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4027a8:	4a47      	ldr	r2, [pc, #284]	; (4028c8 <sdramc_init+0x148>)
  4027aa:	7813      	ldrb	r3, [r2, #0]
  4027ac:	3301      	adds	r3, #1
  4027ae:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4027b0:	b12c      	cbz	r4, 4027be <sdramc_init+0x3e>
		cpu_irq_enable();
  4027b2:	2201      	movs	r2, #1
  4027b4:	4b45      	ldr	r3, [pc, #276]	; (4028cc <sdramc_init+0x14c>)
  4027b6:	701a      	strb	r2, [r3, #0]
  4027b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4027bc:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);

	/* SDRAM device configuration */
	/* Step 1. */
	/* Set the features of SDRAM device into the Configuration Register */
	SDRAMC->SDRAMC_CR = p_sdram->cr.ul_cfg;
  4027be:	6883      	ldr	r3, [r0, #8]
  4027c0:	4a43      	ldr	r2, [pc, #268]	; (4028d0 <sdramc_init+0x150>)
  4027c2:	6093      	str	r3, [r2, #8]
	/* Step 2. */

	/* For low-power SDRAM, Temperature-Compensated Self Refresh (TCSR),
	   Drive Strength (DS) and Partial Array Self Refresh (PASR) must be set
	   in the Low-power Register. */
	SDRAMC->SDRAMC_LPR = 0;
  4027c4:	2300      	movs	r3, #0
  4027c6:	6113      	str	r3, [r2, #16]

	/* Step 3. */
	/* Program the memory device type into the Memory Device Register */
	SDRAMC->SDRAMC_MDR = SDRAMC_MDR_MD_SDRAM;
  4027c8:	6253      	str	r3, [r2, #36]	; 0x24

	/* Step 4. */

	/* A minimum pause of 200 µs is provided to precede any signal toggle.
	   (6 core cycles per iteration) */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  4027ca:	9301      	str	r3, [sp, #4]
  4027cc:	4b41      	ldr	r3, [pc, #260]	; (4028d4 <sdramc_init+0x154>)
  4027ce:	fba3 2301 	umull	r2, r3, r3, r1
  4027d2:	0c9a      	lsrs	r2, r3, #18
  4027d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4027d8:	fb03 f302 	mul.w	r3, r3, r2
  4027dc:	4a3e      	ldr	r2, [pc, #248]	; (4028d8 <sdramc_init+0x158>)
  4027de:	fba2 2303 	umull	r2, r3, r2, r3
  4027e2:	089b      	lsrs	r3, r3, #2
  4027e4:	9a01      	ldr	r2, [sp, #4]
  4027e6:	4293      	cmp	r3, r2
  4027e8:	d905      	bls.n	4027f6 <sdramc_init+0x76>
  4027ea:	9a01      	ldr	r2, [sp, #4]
  4027ec:	3201      	adds	r2, #1
  4027ee:	9201      	str	r2, [sp, #4]
  4027f0:	9a01      	ldr	r2, [sp, #4]
  4027f2:	429a      	cmp	r2, r3
  4027f4:	d3f9      	bcc.n	4027ea <sdramc_init+0x6a>
	/* A NOP command is issued to the SDR-SDRAM. Program NOP command into
	   Mode Register, and the application must set Mode to 1 in the Mode
	   Register. Perform a write access to any SDR-SDRAM address to
	   acknowledge this command. Now the clock which drives SDR-SDRAM
	   device is enabled. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NOP;
  4027f6:	4d36      	ldr	r5, [pc, #216]	; (4028d0 <sdramc_init+0x150>)
  4027f8:	2201      	movs	r2, #1
  4027fa:	602a      	str	r2, [r5, #0]
	*pSdram = 0x0;
  4027fc:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  402800:	2200      	movs	r2, #0
  402802:	8022      	strh	r2, [r4, #0]

	/* An all banks precharge command is issued to the SDR-SDRAM. Program
	   all banks precharge command into Mode Register, and the application
	   must set Mode to 2 in the Mode Register. Perform a write access to
	   any SDRSDRAM address to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_ALLBANKS_PRECHARGE;
  402804:	2602      	movs	r6, #2
  402806:	602e      	str	r6, [r5, #0]
	*pSdram = 0x0;
  402808:	8022      	strh	r2, [r4, #0]

	/* Add some delays after precharge */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  40280a:	9201      	str	r2, [sp, #4]
  40280c:	9a01      	ldr	r2, [sp, #4]
  40280e:	429a      	cmp	r2, r3
  402810:	d205      	bcs.n	40281e <sdramc_init+0x9e>
  402812:	9a01      	ldr	r2, [sp, #4]
  402814:	3201      	adds	r2, #1
  402816:	9201      	str	r2, [sp, #4]
  402818:	9a01      	ldr	r2, [sp, #4]
  40281a:	429a      	cmp	r2, r3
  40281c:	d3f9      	bcc.n	402812 <sdramc_init+0x92>
	/* Step 7. */
	/* Eight auto-refresh (CBR) cycles are provided. Program the auto
	   refresh command (CBR) into Mode Register, and the application
	   must set Mode to 4 in the Mode Register. Once in the idle state,
	   eight AUTO REFRESH cycles must be performed. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40281e:	4a2c      	ldr	r2, [pc, #176]	; (4028d0 <sdramc_init+0x150>)
  402820:	2404      	movs	r4, #4
  402822:	6014      	str	r4, [r2, #0]
	*pSdram = 0x1;
  402824:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
  402828:	2601      	movs	r6, #1
  40282a:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40282c:	6014      	str	r4, [r2, #0]
	*pSdram = 0x2;
  40282e:	2602      	movs	r6, #2
  402830:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  402832:	6014      	str	r4, [r2, #0]
	*pSdram = 0x3;
  402834:	2603      	movs	r6, #3
  402836:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  402838:	6014      	str	r4, [r2, #0]
	*pSdram = 0x4;
  40283a:	802c      	strh	r4, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40283c:	6014      	str	r4, [r2, #0]
	*pSdram = 0x5;
  40283e:	2705      	movs	r7, #5
  402840:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  402842:	6014      	str	r4, [r2, #0]
	*pSdram = 0x6;
  402844:	2706      	movs	r7, #6
  402846:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  402848:	6014      	str	r4, [r2, #0]
	*pSdram = 0x7;
  40284a:	2707      	movs	r7, #7
  40284c:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40284e:	6014      	str	r4, [r2, #0]
	*pSdram = 0x8;
  402850:	2408      	movs	r4, #8
  402852:	802c      	strh	r4, [r5, #0]

	/* Step 8. */
	/* A Mode Register Set (MRS) cycle is issued to program the parameters
	   of the SDRAM devices, in particular CAS latency and burst length. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_LOAD_MODEREG;
  402854:	6016      	str	r6, [r2, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  402856:	6842      	ldr	r2, [r0, #4]
  402858:	0052      	lsls	r2, r2, #1
  40285a:	442a      	add	r2, r5
  40285c:	f64c 24fe 	movw	r4, #51966	; 0xcafe
  402860:	8014      	strh	r4, [r2, #0]
    
	/* Add some delays */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  402862:	2200      	movs	r2, #0
  402864:	9201      	str	r2, [sp, #4]
  402866:	9a01      	ldr	r2, [sp, #4]
  402868:	429a      	cmp	r2, r3
  40286a:	d205      	bcs.n	402878 <sdramc_init+0xf8>
  40286c:	9a01      	ldr	r2, [sp, #4]
  40286e:	3201      	adds	r2, #1
  402870:	9201      	str	r2, [sp, #4]
  402872:	9a01      	ldr	r2, [sp, #4]
  402874:	429a      	cmp	r2, r3
  402876:	d3f9      	bcc.n	40286c <sdramc_init+0xec>

	/* For low-power SDR-SDRAM initialization, an Extended Mode Register Set
	   (EMRS) cycle is issued to program the SDR-SDRAM parameters (TCSR,
	   PASR, DS). The write address must be chosen so that BA[1] is set to
	   1 and BA[0] is set to 0. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_EXT_LOAD_MODEREG;
  402878:	4a15      	ldr	r2, [pc, #84]	; (4028d0 <sdramc_init+0x150>)
  40287a:	2305      	movs	r3, #5
  40287c:	6013      	str	r3, [r2, #0]
	*((uint16_t *)(pSdram + (1 << p_sdram->ul_bk1))) = 0x0;
  40287e:	6800      	ldr	r0, [r0, #0]
  402880:	2302      	movs	r3, #2
  402882:	4083      	lsls	r3, r0
  402884:	f103 43e0 	add.w	r3, r3, #1879048192	; 0x70000000
  402888:	2000      	movs	r0, #0
  40288a:	8018      	strh	r0, [r3, #0]

	/* Step 10. */
	/* The application must go into Normal Mode, setting Mode to 0 in the
	   Mode Register and perform a write access at any location in the\
	   SDRAM to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NORMAL;
  40288c:	6010      	str	r0, [r2, #0]
	*pSdram = 0x0;
  40288e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  402892:	8018      	strh	r0, [r3, #0]

	/* Step 11. */

	/* Write the refresh rate into the count field in the SDRAMC Refresh
	   Timer register. Set Refresh timer to 15.625 us. */
	i = ul_clk / 1000u;
  402894:	4b11      	ldr	r3, [pc, #68]	; (4028dc <sdramc_init+0x15c>)
  402896:	fba3 1301 	umull	r1, r3, r3, r1
  40289a:	099b      	lsrs	r3, r3, #6
  40289c:	9301      	str	r3, [sp, #4]
	i *= 15625u;
  40289e:	9901      	ldr	r1, [sp, #4]
  4028a0:	f643 5309 	movw	r3, #15625	; 0x3d09
  4028a4:	fb03 f301 	mul.w	r3, r3, r1
  4028a8:	9301      	str	r3, [sp, #4]
	i /= 1000000u;
  4028aa:	9b01      	ldr	r3, [sp, #4]
  4028ac:	4909      	ldr	r1, [pc, #36]	; (4028d4 <sdramc_init+0x154>)
  4028ae:	fba1 1303 	umull	r1, r3, r1, r3
  4028b2:	0c9b      	lsrs	r3, r3, #18
  4028b4:	9301      	str	r3, [sp, #4]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  4028b6:	9b01      	ldr	r3, [sp, #4]
  4028b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4028bc:	6053      	str	r3, [r2, #4]
}
  4028be:	b002      	add	sp, #8
  4028c0:	bcf0      	pop	{r4, r5, r6, r7}
  4028c2:	4770      	bx	lr
  4028c4:	e7fe      	b.n	4028c4 <sdramc_init+0x144>
  4028c6:	bf00      	nop
  4028c8:	20401114 	.word	0x20401114
  4028cc:	20400177 	.word	0x20400177
  4028d0:	40084000 	.word	0x40084000
  4028d4:	431bde83 	.word	0x431bde83
  4028d8:	aaaaaaab 	.word	0xaaaaaaab
  4028dc:	10624dd3 	.word	0x10624dd3

004028e0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4028e0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4028e2:	23ac      	movs	r3, #172	; 0xac
  4028e4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4028e6:	680b      	ldr	r3, [r1, #0]
  4028e8:	684a      	ldr	r2, [r1, #4]
  4028ea:	fbb3 f3f2 	udiv	r3, r3, r2
  4028ee:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4028f0:	1e5c      	subs	r4, r3, #1
  4028f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4028f6:	4294      	cmp	r4, r2
  4028f8:	d808      	bhi.n	40290c <uart_init+0x2c>
		return 1;

	p_uart->UART_BRGR = cd;
  4028fa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4028fc:	688b      	ldr	r3, [r1, #8]
  4028fe:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402900:	2350      	movs	r3, #80	; 0x50
  402902:	6003      	str	r3, [r0, #0]

	return 0;
  402904:	2000      	movs	r0, #0
}
  402906:	f85d 4b04 	ldr.w	r4, [sp], #4
  40290a:	4770      	bx	lr
		return 1;
  40290c:	2001      	movs	r0, #1
  40290e:	e7fa      	b.n	402906 <uart_init+0x26>

00402910 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  402910:	2340      	movs	r3, #64	; 0x40
  402912:	6003      	str	r3, [r0, #0]
  402914:	4770      	bx	lr

00402916 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402916:	6943      	ldr	r3, [r0, #20]
  402918:	f013 0f02 	tst.w	r3, #2
  40291c:	d002      	beq.n	402924 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40291e:	61c1      	str	r1, [r0, #28]
	return 0;
  402920:	2000      	movs	r0, #0
  402922:	4770      	bx	lr
		return 1;
  402924:	2001      	movs	r0, #1
}
  402926:	4770      	bx	lr

00402928 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402928:	6943      	ldr	r3, [r0, #20]
  40292a:	f013 0f01 	tst.w	r3, #1
  40292e:	d003      	beq.n	402938 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402930:	6983      	ldr	r3, [r0, #24]
  402932:	700b      	strb	r3, [r1, #0]
	return 0;
  402934:	2000      	movs	r0, #0
  402936:	4770      	bx	lr
		return 1;
  402938:	2001      	movs	r0, #1
}
  40293a:	4770      	bx	lr

0040293c <ui_powerdown>:
{
	/* Initialize LEDs */
}

void ui_powerdown(void)
{
  40293c:	4770      	bx	lr

0040293e <ui_wakeup>:
}

void ui_wakeup(void)
{
  40293e:	4770      	bx	lr

00402940 <ui_loop_back_state>:
}

void ui_loop_back_state(bool b_started)
{
  402940:	4770      	bx	lr

00402942 <ui_process>:
}

void ui_process(uint16_t framenumber)
{
  402942:	4770      	bx	lr

00402944 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402944:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  402946:	4810      	ldr	r0, [pc, #64]	; (402988 <sysclk_init+0x44>)
  402948:	4b10      	ldr	r3, [pc, #64]	; (40298c <sysclk_init+0x48>)
  40294a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40294c:	211c      	movs	r1, #28
  40294e:	2000      	movs	r0, #0
  402950:	4b0f      	ldr	r3, [pc, #60]	; (402990 <sysclk_init+0x4c>)
  402952:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402954:	4c0f      	ldr	r4, [pc, #60]	; (402994 <sysclk_init+0x50>)
  402956:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402958:	2800      	cmp	r0, #0
  40295a:	d0fc      	beq.n	402956 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40295c:	4b0e      	ldr	r3, [pc, #56]	; (402998 <sysclk_init+0x54>)
  40295e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402960:	4a0e      	ldr	r2, [pc, #56]	; (40299c <sysclk_init+0x58>)
  402962:	4b0f      	ldr	r3, [pc, #60]	; (4029a0 <sysclk_init+0x5c>)
  402964:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  402966:	4c0f      	ldr	r4, [pc, #60]	; (4029a4 <sysclk_init+0x60>)
  402968:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40296a:	2800      	cmp	r0, #0
  40296c:	d0fc      	beq.n	402968 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40296e:	2002      	movs	r0, #2
  402970:	4b0d      	ldr	r3, [pc, #52]	; (4029a8 <sysclk_init+0x64>)
  402972:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402974:	2000      	movs	r0, #0
  402976:	4b0d      	ldr	r3, [pc, #52]	; (4029ac <sysclk_init+0x68>)
  402978:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40297a:	4b0d      	ldr	r3, [pc, #52]	; (4029b0 <sysclk_init+0x6c>)
  40297c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40297e:	4802      	ldr	r0, [pc, #8]	; (402988 <sysclk_init+0x44>)
  402980:	4b02      	ldr	r3, [pc, #8]	; (40298c <sysclk_init+0x48>)
  402982:	4798      	blx	r3
  402984:	bd10      	pop	{r4, pc}
  402986:	bf00      	nop
  402988:	08f0d180 	.word	0x08f0d180
  40298c:	00404cfd 	.word	0x00404cfd
  402990:	0040351d 	.word	0x0040351d
  402994:	00403571 	.word	0x00403571
  402998:	00403581 	.word	0x00403581
  40299c:	20183f01 	.word	0x20183f01
  4029a0:	400e0600 	.word	0x400e0600
  4029a4:	00403591 	.word	0x00403591
  4029a8:	00403481 	.word	0x00403481
  4029ac:	004034b9 	.word	0x004034b9
  4029b0:	00404bf1 	.word	0x00404bf1

004029b4 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
  4029b4:	4b01      	ldr	r3, [pc, #4]	; (4029bc <udi_vendor_getsetting+0x8>)
  4029b6:	7818      	ldrb	r0, [r3, #0]
  4029b8:	4770      	bx	lr
  4029ba:	bf00      	nop
  4029bc:	20400b94 	.word	0x20400b94

004029c0 <udi_vendor_enable>:
{
  4029c0:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
  4029c2:	4b06      	ldr	r3, [pc, #24]	; (4029dc <udi_vendor_enable+0x1c>)
  4029c4:	4798      	blx	r3
  4029c6:	78c3      	ldrb	r3, [r0, #3]
  4029c8:	4a05      	ldr	r2, [pc, #20]	; (4029e0 <udi_vendor_enable+0x20>)
  4029ca:	7013      	strb	r3, [r2, #0]
	if (1 == udi_vendor_alternate_setting) {
  4029cc:	2b01      	cmp	r3, #1
  4029ce:	d001      	beq.n	4029d4 <udi_vendor_enable+0x14>
	return true;
  4029d0:	2001      	movs	r0, #1
}
  4029d2:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
  4029d4:	4b03      	ldr	r3, [pc, #12]	; (4029e4 <udi_vendor_enable+0x24>)
  4029d6:	4798      	blx	r3
  4029d8:	bd08      	pop	{r3, pc}
  4029da:	bf00      	nop
  4029dc:	00402ca5 	.word	0x00402ca5
  4029e0:	20400b94 	.word	0x20400b94
  4029e4:	0040aed1 	.word	0x0040aed1

004029e8 <udi_vendor_disable>:
{
  4029e8:	b508      	push	{r3, lr}
	if (1 == udi_vendor_alternate_setting) {
  4029ea:	4b04      	ldr	r3, [pc, #16]	; (4029fc <udi_vendor_disable+0x14>)
  4029ec:	781b      	ldrb	r3, [r3, #0]
  4029ee:	2b01      	cmp	r3, #1
  4029f0:	d000      	beq.n	4029f4 <udi_vendor_disable+0xc>
  4029f2:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
  4029f4:	4b02      	ldr	r3, [pc, #8]	; (402a00 <udi_vendor_disable+0x18>)
  4029f6:	4798      	blx	r3
}
  4029f8:	e7fb      	b.n	4029f2 <udi_vendor_disable+0xa>
  4029fa:	bf00      	nop
  4029fc:	20400b94 	.word	0x20400b94
  402a00:	00407261 	.word	0x00407261

00402a04 <udi_vendor_setup>:
{
  402a04:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
  402a06:	4b13      	ldr	r3, [pc, #76]	; (402a54 <udi_vendor_setup+0x50>)
  402a08:	781b      	ldrb	r3, [r3, #0]
  402a0a:	f013 0f80 	tst.w	r3, #128	; 0x80
  402a0e:	d105      	bne.n	402a1c <udi_vendor_setup+0x18>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
  402a10:	f003 0360 	and.w	r3, r3, #96	; 0x60
  402a14:	2b40      	cmp	r3, #64	; 0x40
  402a16:	d00f      	beq.n	402a38 <udi_vendor_setup+0x34>
	return false; // Not supported request
  402a18:	2000      	movs	r0, #0
  402a1a:	bd08      	pop	{r3, pc}
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
  402a1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
  402a20:	2b40      	cmp	r3, #64	; 0x40
  402a22:	d001      	beq.n	402a28 <udi_vendor_setup+0x24>
	return false; // Not supported request
  402a24:	2000      	movs	r0, #0
  402a26:	bd08      	pop	{r3, pc}
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
  402a28:	4b0a      	ldr	r3, [pc, #40]	; (402a54 <udi_vendor_setup+0x50>)
  402a2a:	785b      	ldrb	r3, [r3, #1]
  402a2c:	b10b      	cbz	r3, 402a32 <udi_vendor_setup+0x2e>
	return false; // Not supported request
  402a2e:	2000      	movs	r0, #0
  402a30:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_IN_RECEIVED();
  402a32:	4b09      	ldr	r3, [pc, #36]	; (402a58 <udi_vendor_setup+0x54>)
  402a34:	4798      	blx	r3
  402a36:	bd08      	pop	{r3, pc}
				&& (udd_g_ctrlreq.req.bRequest == 0)
  402a38:	4b06      	ldr	r3, [pc, #24]	; (402a54 <udi_vendor_setup+0x50>)
  402a3a:	785b      	ldrb	r3, [r3, #1]
  402a3c:	b93b      	cbnz	r3, 402a4e <udi_vendor_setup+0x4a>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
  402a3e:	4b05      	ldr	r3, [pc, #20]	; (402a54 <udi_vendor_setup+0x50>)
  402a40:	88db      	ldrh	r3, [r3, #6]
  402a42:	b90b      	cbnz	r3, 402a48 <udi_vendor_setup+0x44>
	return false; // Not supported request
  402a44:	2000      	movs	r0, #0
}
  402a46:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
  402a48:	4b04      	ldr	r3, [pc, #16]	; (402a5c <udi_vendor_setup+0x58>)
  402a4a:	4798      	blx	r3
  402a4c:	bd08      	pop	{r3, pc}
	return false; // Not supported request
  402a4e:	2000      	movs	r0, #0
  402a50:	bd08      	pop	{r3, pc}
  402a52:	bf00      	nop
  402a54:	2040111c 	.word	0x2040111c
  402a58:	0040728d 	.word	0x0040728d
  402a5c:	0040726d 	.word	0x0040726d

00402a60 <udi_vendor_interrupt_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402a60:	b510      	push	{r4, lr}
  402a62:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_IN,
  402a64:	9200      	str	r2, [sp, #0]
  402a66:	460b      	mov	r3, r1
  402a68:	4602      	mov	r2, r0
  402a6a:	2100      	movs	r1, #0
  402a6c:	2081      	movs	r0, #129	; 0x81
  402a6e:	4c02      	ldr	r4, [pc, #8]	; (402a78 <udi_vendor_interrupt_in_run+0x18>)
  402a70:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402a72:	b002      	add	sp, #8
  402a74:	bd10      	pop	{r4, pc}
  402a76:	bf00      	nop
  402a78:	00404611 	.word	0x00404611

00402a7c <udi_vendor_interrupt_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402a7c:	b510      	push	{r4, lr}
  402a7e:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_OUT,
  402a80:	9200      	str	r2, [sp, #0]
  402a82:	460b      	mov	r3, r1
  402a84:	4602      	mov	r2, r0
  402a86:	2100      	movs	r1, #0
  402a88:	2002      	movs	r0, #2
  402a8a:	4c02      	ldr	r4, [pc, #8]	; (402a94 <udi_vendor_interrupt_out_run+0x18>)
  402a8c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402a8e:	b002      	add	sp, #8
  402a90:	bd10      	pop	{r4, pc}
  402a92:	bf00      	nop
  402a94:	00404611 	.word	0x00404611

00402a98 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(char * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402a98:	b510      	push	{r4, lr}
  402a9a:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
  402a9c:	9200      	str	r2, [sp, #0]
  402a9e:	460b      	mov	r3, r1
  402aa0:	4602      	mov	r2, r0
  402aa2:	2100      	movs	r1, #0
  402aa4:	2083      	movs	r0, #131	; 0x83
  402aa6:	4c02      	ldr	r4, [pc, #8]	; (402ab0 <udi_vendor_bulk_in_run+0x18>)
  402aa8:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402aaa:	b002      	add	sp, #8
  402aac:	bd10      	pop	{r4, pc}
  402aae:	bf00      	nop
  402ab0:	00404611 	.word	0x00404611

00402ab4 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402ab4:	b510      	push	{r4, lr}
  402ab6:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
  402ab8:	9200      	str	r2, [sp, #0]
  402aba:	460b      	mov	r3, r1
  402abc:	4602      	mov	r2, r0
  402abe:	2100      	movs	r1, #0
  402ac0:	2004      	movs	r0, #4
  402ac2:	4c02      	ldr	r4, [pc, #8]	; (402acc <udi_vendor_bulk_out_run+0x18>)
  402ac4:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402ac6:	b002      	add	sp, #8
  402ac8:	bd10      	pop	{r4, pc}
  402aca:	bf00      	nop
  402acc:	00404611 	.word	0x00404611

00402ad0 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402ad0:	b510      	push	{r4, lr}
  402ad2:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
  402ad4:	9200      	str	r2, [sp, #0]
  402ad6:	460b      	mov	r3, r1
  402ad8:	4602      	mov	r2, r0
  402ada:	2100      	movs	r1, #0
  402adc:	2085      	movs	r0, #133	; 0x85
  402ade:	4c02      	ldr	r4, [pc, #8]	; (402ae8 <udi_vendor_iso_in_run+0x18>)
  402ae0:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402ae2:	b002      	add	sp, #8
  402ae4:	bd10      	pop	{r4, pc}
  402ae6:	bf00      	nop
  402ae8:	00404611 	.word	0x00404611

00402aec <udi_vendor_iso_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402aec:	b510      	push	{r4, lr}
  402aee:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_ISO_OUT,
  402af0:	9200      	str	r2, [sp, #0]
  402af2:	460b      	mov	r3, r1
  402af4:	4602      	mov	r2, r0
  402af6:	2100      	movs	r1, #0
  402af8:	2006      	movs	r0, #6
  402afa:	4c02      	ldr	r4, [pc, #8]	; (402b04 <udi_vendor_iso_out_run+0x18>)
  402afc:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402afe:	b002      	add	sp, #8
  402b00:	bd10      	pop	{r4, pc}
  402b02:	bf00      	nop
  402b04:	00404611 	.word	0x00404611

00402b08 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  402b08:	4b10      	ldr	r3, [pc, #64]	; (402b4c <udc_next_desc_in_iface+0x44>)
  402b0a:	681b      	ldr	r3, [r3, #0]
  402b0c:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  402b0e:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  402b10:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  402b12:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  402b14:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  402b16:	4290      	cmp	r0, r2
  402b18:	d211      	bcs.n	402b3e <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  402b1a:	7843      	ldrb	r3, [r0, #1]
  402b1c:	2b04      	cmp	r3, #4
  402b1e:	d010      	beq.n	402b42 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  402b20:	428b      	cmp	r3, r1
  402b22:	d009      	beq.n	402b38 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  402b24:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  402b26:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  402b28:	4290      	cmp	r0, r2
  402b2a:	d206      	bcs.n	402b3a <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  402b2c:	7843      	ldrb	r3, [r0, #1]
  402b2e:	2b04      	cmp	r3, #4
  402b30:	d009      	beq.n	402b46 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  402b32:	428b      	cmp	r3, r1
  402b34:	d1f6      	bne.n	402b24 <udc_next_desc_in_iface+0x1c>
  402b36:	e007      	b.n	402b48 <udc_next_desc_in_iface+0x40>
  402b38:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  402b3a:	2000      	movs	r0, #0
  402b3c:	4770      	bx	lr
  402b3e:	2000      	movs	r0, #0
  402b40:	4770      	bx	lr
  402b42:	2000      	movs	r0, #0
  402b44:	4770      	bx	lr
  402b46:	2000      	movs	r0, #0
}
  402b48:	4770      	bx	lr
  402b4a:	bf00      	nop
  402b4c:	20400ba4 	.word	0x20400ba4

00402b50 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  402b50:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  402b52:	4b03      	ldr	r3, [pc, #12]	; (402b60 <udc_valid_address+0x10>)
  402b54:	7898      	ldrb	r0, [r3, #2]
  402b56:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  402b5a:	4b02      	ldr	r3, [pc, #8]	; (402b64 <udc_valid_address+0x14>)
  402b5c:	4798      	blx	r3
  402b5e:	bd08      	pop	{r3, pc}
  402b60:	2040111c 	.word	0x2040111c
  402b64:	0040436d 	.word	0x0040436d

00402b68 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  402b68:	4b19      	ldr	r3, [pc, #100]	; (402bd0 <udc_update_iface_desc+0x68>)
  402b6a:	781b      	ldrb	r3, [r3, #0]
  402b6c:	b34b      	cbz	r3, 402bc2 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  402b6e:	4b19      	ldr	r3, [pc, #100]	; (402bd4 <udc_update_iface_desc+0x6c>)
  402b70:	681b      	ldr	r3, [r3, #0]
  402b72:	681b      	ldr	r3, [r3, #0]
  402b74:	791a      	ldrb	r2, [r3, #4]
  402b76:	4282      	cmp	r2, r0
  402b78:	d925      	bls.n	402bc6 <udc_update_iface_desc+0x5e>
{
  402b7a:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  402b7c:	4a16      	ldr	r2, [pc, #88]	; (402bd8 <udc_update_iface_desc+0x70>)
  402b7e:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  402b80:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  402b82:	441c      	add	r4, r3
	while (ptr_end_desc >
  402b84:	42a3      	cmp	r3, r4
  402b86:	d220      	bcs.n	402bca <udc_update_iface_desc+0x62>
  402b88:	2500      	movs	r5, #0
  402b8a:	2601      	movs	r6, #1
  402b8c:	e007      	b.n	402b9e <udc_update_iface_desc+0x36>
  402b8e:	4a12      	ldr	r2, [pc, #72]	; (402bd8 <udc_update_iface_desc+0x70>)
  402b90:	6013      	str	r3, [r2, #0]
  402b92:	e00f      	b.n	402bb4 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  402b94:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  402b96:	4413      	add	r3, r2
  402b98:	4635      	mov	r5, r6
	while (ptr_end_desc >
  402b9a:	42a3      	cmp	r3, r4
  402b9c:	d20c      	bcs.n	402bb8 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  402b9e:	785a      	ldrb	r2, [r3, #1]
  402ba0:	2a04      	cmp	r2, #4
  402ba2:	d1f7      	bne.n	402b94 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  402ba4:	789a      	ldrb	r2, [r3, #2]
  402ba6:	4282      	cmp	r2, r0
  402ba8:	d1f4      	bne.n	402b94 <udc_update_iface_desc+0x2c>
  402baa:	78da      	ldrb	r2, [r3, #3]
  402bac:	428a      	cmp	r2, r1
  402bae:	d1f1      	bne.n	402b94 <udc_update_iface_desc+0x2c>
  402bb0:	2d00      	cmp	r5, #0
  402bb2:	d1ec      	bne.n	402b8e <udc_update_iface_desc+0x26>
				return true; // Interface found
  402bb4:	2001      	movs	r0, #1
  402bb6:	e002      	b.n	402bbe <udc_update_iface_desc+0x56>
  402bb8:	4a07      	ldr	r2, [pc, #28]	; (402bd8 <udc_update_iface_desc+0x70>)
  402bba:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  402bbc:	2000      	movs	r0, #0
}
  402bbe:	bc70      	pop	{r4, r5, r6}
  402bc0:	4770      	bx	lr
		return false;
  402bc2:	2000      	movs	r0, #0
  402bc4:	4770      	bx	lr
		return false;
  402bc6:	2000      	movs	r0, #0
  402bc8:	4770      	bx	lr
	return false; // Interface not found
  402bca:	2000      	movs	r0, #0
  402bcc:	e7f7      	b.n	402bbe <udc_update_iface_desc+0x56>
  402bce:	bf00      	nop
  402bd0:	20400ba0 	.word	0x20400ba0
  402bd4:	20400ba4 	.word	0x20400ba4
  402bd8:	20400ba8 	.word	0x20400ba8

00402bdc <udc_iface_disable>:
{
  402bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402be0:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  402be2:	2100      	movs	r1, #0
  402be4:	4b13      	ldr	r3, [pc, #76]	; (402c34 <udc_iface_disable+0x58>)
  402be6:	4798      	blx	r3
  402be8:	4680      	mov	r8, r0
  402bea:	b910      	cbnz	r0, 402bf2 <udc_iface_disable+0x16>
}
  402bec:	4640      	mov	r0, r8
  402bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  402bf2:	4b11      	ldr	r3, [pc, #68]	; (402c38 <udc_iface_disable+0x5c>)
  402bf4:	681b      	ldr	r3, [r3, #0]
  402bf6:	685b      	ldr	r3, [r3, #4]
  402bf8:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  402bfc:	f8d9 300c 	ldr.w	r3, [r9, #12]
  402c00:	4798      	blx	r3
  402c02:	4601      	mov	r1, r0
  402c04:	4620      	mov	r0, r4
  402c06:	4b0b      	ldr	r3, [pc, #44]	; (402c34 <udc_iface_disable+0x58>)
  402c08:	4798      	blx	r3
  402c0a:	4680      	mov	r8, r0
  402c0c:	2800      	cmp	r0, #0
  402c0e:	d0ed      	beq.n	402bec <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  402c10:	4b0a      	ldr	r3, [pc, #40]	; (402c3c <udc_iface_disable+0x60>)
  402c12:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402c14:	2605      	movs	r6, #5
  402c16:	4d0a      	ldr	r5, [pc, #40]	; (402c40 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  402c18:	4f0a      	ldr	r7, [pc, #40]	; (402c44 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402c1a:	4631      	mov	r1, r6
  402c1c:	4620      	mov	r0, r4
  402c1e:	47a8      	blx	r5
			if (NULL == ep_desc) {
  402c20:	4604      	mov	r4, r0
  402c22:	b110      	cbz	r0, 402c2a <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  402c24:	7880      	ldrb	r0, [r0, #2]
  402c26:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402c28:	e7f7      	b.n	402c1a <udc_iface_disable+0x3e>
	udi_api->disable();
  402c2a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  402c2e:	4798      	blx	r3
	return true;
  402c30:	e7dc      	b.n	402bec <udc_iface_disable+0x10>
  402c32:	bf00      	nop
  402c34:	00402b69 	.word	0x00402b69
  402c38:	20400ba4 	.word	0x20400ba4
  402c3c:	20400ba8 	.word	0x20400ba8
  402c40:	00402b09 	.word	0x00402b09
  402c44:	004043c1 	.word	0x004043c1

00402c48 <udc_iface_enable>:
{
  402c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402c4c:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  402c4e:	4b10      	ldr	r3, [pc, #64]	; (402c90 <udc_iface_enable+0x48>)
  402c50:	4798      	blx	r3
  402c52:	4603      	mov	r3, r0
  402c54:	b1c8      	cbz	r0, 402c8a <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  402c56:	4b0f      	ldr	r3, [pc, #60]	; (402c94 <udc_iface_enable+0x4c>)
  402c58:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402c5a:	2605      	movs	r6, #5
  402c5c:	4d0e      	ldr	r5, [pc, #56]	; (402c98 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  402c5e:	4f0f      	ldr	r7, [pc, #60]	; (402c9c <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402c60:	4631      	mov	r1, r6
  402c62:	4620      	mov	r0, r4
  402c64:	47a8      	blx	r5
		if (NULL == ep_desc)
  402c66:	4604      	mov	r4, r0
  402c68:	b138      	cbz	r0, 402c7a <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  402c6a:	8882      	ldrh	r2, [r0, #4]
  402c6c:	78c1      	ldrb	r1, [r0, #3]
  402c6e:	7880      	ldrb	r0, [r0, #2]
  402c70:	47b8      	blx	r7
  402c72:	4603      	mov	r3, r0
  402c74:	2800      	cmp	r0, #0
  402c76:	d1f3      	bne.n	402c60 <udc_iface_enable+0x18>
  402c78:	e007      	b.n	402c8a <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  402c7a:	4b09      	ldr	r3, [pc, #36]	; (402ca0 <udc_iface_enable+0x58>)
  402c7c:	681b      	ldr	r3, [r3, #0]
  402c7e:	685b      	ldr	r3, [r3, #4]
  402c80:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  402c84:	681b      	ldr	r3, [r3, #0]
  402c86:	4798      	blx	r3
  402c88:	4603      	mov	r3, r0
}
  402c8a:	4618      	mov	r0, r3
  402c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c90:	00402b69 	.word	0x00402b69
  402c94:	20400ba8 	.word	0x20400ba8
  402c98:	00402b09 	.word	0x00402b09
  402c9c:	0040471d 	.word	0x0040471d
  402ca0:	20400ba4 	.word	0x20400ba4

00402ca4 <udc_get_interface_desc>:
}
  402ca4:	4b01      	ldr	r3, [pc, #4]	; (402cac <udc_get_interface_desc+0x8>)
  402ca6:	6818      	ldr	r0, [r3, #0]
  402ca8:	4770      	bx	lr
  402caa:	bf00      	nop
  402cac:	20400ba8 	.word	0x20400ba8

00402cb0 <udc_reset>:
{
  402cb0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  402cb2:	4b0d      	ldr	r3, [pc, #52]	; (402ce8 <udc_reset+0x38>)
  402cb4:	781b      	ldrb	r3, [r3, #0]
  402cb6:	b183      	cbz	r3, 402cda <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402cb8:	4b0c      	ldr	r3, [pc, #48]	; (402cec <udc_reset+0x3c>)
  402cba:	681b      	ldr	r3, [r3, #0]
  402cbc:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  402cbe:	791b      	ldrb	r3, [r3, #4]
  402cc0:	b15b      	cbz	r3, 402cda <udc_reset+0x2a>
  402cc2:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  402cc4:	4e0a      	ldr	r6, [pc, #40]	; (402cf0 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402cc6:	4d09      	ldr	r5, [pc, #36]	; (402cec <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  402cc8:	4620      	mov	r0, r4
  402cca:	47b0      	blx	r6
				iface_num++) {
  402ccc:	3401      	adds	r4, #1
  402cce:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402cd0:	682b      	ldr	r3, [r5, #0]
  402cd2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  402cd4:	791b      	ldrb	r3, [r3, #4]
  402cd6:	42a3      	cmp	r3, r4
  402cd8:	d8f6      	bhi.n	402cc8 <udc_reset+0x18>
	udc_num_configuration = 0;
  402cda:	2200      	movs	r2, #0
  402cdc:	4b02      	ldr	r3, [pc, #8]	; (402ce8 <udc_reset+0x38>)
  402cde:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  402ce0:	2201      	movs	r2, #1
  402ce2:	4b04      	ldr	r3, [pc, #16]	; (402cf4 <udc_reset+0x44>)
  402ce4:	801a      	strh	r2, [r3, #0]
  402ce6:	bd70      	pop	{r4, r5, r6, pc}
  402ce8:	20400ba0 	.word	0x20400ba0
  402cec:	20400ba4 	.word	0x20400ba4
  402cf0:	00402bdd 	.word	0x00402bdd
  402cf4:	20400b96 	.word	0x20400b96

00402cf8 <udc_sof_notify>:
{
  402cf8:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  402cfa:	4b0d      	ldr	r3, [pc, #52]	; (402d30 <udc_sof_notify+0x38>)
  402cfc:	781b      	ldrb	r3, [r3, #0]
  402cfe:	b1b3      	cbz	r3, 402d2e <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402d00:	4b0c      	ldr	r3, [pc, #48]	; (402d34 <udc_sof_notify+0x3c>)
  402d02:	681b      	ldr	r3, [r3, #0]
  402d04:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  402d06:	7912      	ldrb	r2, [r2, #4]
  402d08:	b18a      	cbz	r2, 402d2e <udc_sof_notify+0x36>
  402d0a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402d0c:	4d09      	ldr	r5, [pc, #36]	; (402d34 <udc_sof_notify+0x3c>)
  402d0e:	e006      	b.n	402d1e <udc_sof_notify+0x26>
				iface_num++) {
  402d10:	3401      	adds	r4, #1
  402d12:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402d14:	682b      	ldr	r3, [r5, #0]
  402d16:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  402d18:	7912      	ldrb	r2, [r2, #4]
  402d1a:	42a2      	cmp	r2, r4
  402d1c:	d907      	bls.n	402d2e <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  402d1e:	685b      	ldr	r3, [r3, #4]
  402d20:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  402d24:	691b      	ldr	r3, [r3, #16]
  402d26:	2b00      	cmp	r3, #0
  402d28:	d0f2      	beq.n	402d10 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  402d2a:	4798      	blx	r3
  402d2c:	e7f0      	b.n	402d10 <udc_sof_notify+0x18>
  402d2e:	bd38      	pop	{r3, r4, r5, pc}
  402d30:	20400ba0 	.word	0x20400ba0
  402d34:	20400ba4 	.word	0x20400ba4

00402d38 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  402d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  402d3a:	4b88      	ldr	r3, [pc, #544]	; (402f5c <udc_process_setup+0x224>)
  402d3c:	2200      	movs	r2, #0
  402d3e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  402d40:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  402d42:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  402d44:	781b      	ldrb	r3, [r3, #0]
  402d46:	f013 0f80 	tst.w	r3, #128	; 0x80
  402d4a:	d114      	bne.n	402d76 <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  402d4c:	f013 0f60 	tst.w	r3, #96	; 0x60
  402d50:	f000 80d5 	beq.w	402efe <udc_process_setup+0x1c6>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  402d54:	4b81      	ldr	r3, [pc, #516]	; (402f5c <udc_process_setup+0x224>)
  402d56:	781b      	ldrb	r3, [r3, #0]
  402d58:	f003 031f 	and.w	r3, r3, #31
  402d5c:	2b01      	cmp	r3, #1
  402d5e:	f000 816c 	beq.w	40303a <udc_process_setup+0x302>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  402d62:	4b7e      	ldr	r3, [pc, #504]	; (402f5c <udc_process_setup+0x224>)
  402d64:	781b      	ldrb	r3, [r3, #0]
  402d66:	f003 031f 	and.w	r3, r3, #31
  402d6a:	2b02      	cmp	r3, #2
  402d6c:	f000 81c7 	beq.w	4030fe <udc_process_setup+0x3c6>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  402d70:	2300      	movs	r3, #0
#endif
}
  402d72:	4618      	mov	r0, r3
  402d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  402d76:	4a79      	ldr	r2, [pc, #484]	; (402f5c <udc_process_setup+0x224>)
  402d78:	88d2      	ldrh	r2, [r2, #6]
  402d7a:	2a00      	cmp	r2, #0
  402d7c:	f000 81e8 	beq.w	403150 <udc_process_setup+0x418>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  402d80:	f013 0f60 	tst.w	r3, #96	; 0x60
  402d84:	d1e6      	bne.n	402d54 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  402d86:	f013 031f 	ands.w	r3, r3, #31
  402d8a:	d106      	bne.n	402d9a <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  402d8c:	4973      	ldr	r1, [pc, #460]	; (402f5c <udc_process_setup+0x224>)
  402d8e:	7849      	ldrb	r1, [r1, #1]
  402d90:	2906      	cmp	r1, #6
  402d92:	d014      	beq.n	402dbe <udc_process_setup+0x86>
  402d94:	2908      	cmp	r1, #8
  402d96:	d074      	beq.n	402e82 <udc_process_setup+0x14a>
  402d98:	b151      	cbz	r1, 402db0 <udc_process_setup+0x78>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  402d9a:	2b01      	cmp	r3, #1
  402d9c:	d079      	beq.n	402e92 <udc_process_setup+0x15a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  402d9e:	2b02      	cmp	r3, #2
  402da0:	d1d8      	bne.n	402d54 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  402da2:	4b6e      	ldr	r3, [pc, #440]	; (402f5c <udc_process_setup+0x224>)
  402da4:	785b      	ldrb	r3, [r3, #1]
  402da6:	2b00      	cmp	r3, #0
  402da8:	f000 809b 	beq.w	402ee2 <udc_process_setup+0x1aa>
	return false;
  402dac:	2300      	movs	r3, #0
  402dae:	e188      	b.n	4030c2 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  402db0:	2a02      	cmp	r2, #2
  402db2:	d1d6      	bne.n	402d62 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  402db4:	2102      	movs	r1, #2
  402db6:	486a      	ldr	r0, [pc, #424]	; (402f60 <udc_process_setup+0x228>)
  402db8:	4b6a      	ldr	r3, [pc, #424]	; (402f64 <udc_process_setup+0x22c>)
  402dba:	4798      	blx	r3
  402dbc:	e0bb      	b.n	402f36 <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  402dbe:	4b67      	ldr	r3, [pc, #412]	; (402f5c <udc_process_setup+0x224>)
  402dc0:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  402dc2:	0a13      	lsrs	r3, r2, #8
  402dc4:	3b01      	subs	r3, #1
  402dc6:	2b0e      	cmp	r3, #14
  402dc8:	f200 8178 	bhi.w	4030bc <udc_process_setup+0x384>
  402dcc:	e8df f013 	tbh	[pc, r3, lsl #1]
  402dd0:	001d000f 	.word	0x001d000f
  402dd4:	01760037 	.word	0x01760037
  402dd8:	01760176 	.word	0x01760176
  402ddc:	01760176 	.word	0x01760176
  402de0:	01760176 	.word	0x01760176
  402de4:	01760176 	.word	0x01760176
  402de8:	01760176 	.word	0x01760176
  402dec:	002f      	.short	0x002f
				(uint8_t *) udc_config.confdev_lsfs,
  402dee:	4b5e      	ldr	r3, [pc, #376]	; (402f68 <udc_process_setup+0x230>)
  402df0:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  402df2:	7801      	ldrb	r1, [r0, #0]
  402df4:	4b5b      	ldr	r3, [pc, #364]	; (402f64 <udc_process_setup+0x22c>)
  402df6:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  402df8:	4b58      	ldr	r3, [pc, #352]	; (402f5c <udc_process_setup+0x224>)
  402dfa:	88da      	ldrh	r2, [r3, #6]
  402dfc:	899b      	ldrh	r3, [r3, #12]
  402dfe:	4293      	cmp	r3, r2
  402e00:	f240 8099 	bls.w	402f36 <udc_process_setup+0x1fe>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  402e04:	4b55      	ldr	r3, [pc, #340]	; (402f5c <udc_process_setup+0x224>)
  402e06:	819a      	strh	r2, [r3, #12]
  402e08:	e095      	b.n	402f36 <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  402e0a:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  402e0c:	4b56      	ldr	r3, [pc, #344]	; (402f68 <udc_process_setup+0x230>)
  402e0e:	681b      	ldr	r3, [r3, #0]
  402e10:	7c5b      	ldrb	r3, [r3, #17]
  402e12:	4293      	cmp	r3, r2
  402e14:	d9a5      	bls.n	402d62 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  402e16:	4b54      	ldr	r3, [pc, #336]	; (402f68 <udc_process_setup+0x230>)
  402e18:	685b      	ldr	r3, [r3, #4]
  402e1a:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  402e1e:	8841      	ldrh	r1, [r0, #2]
  402e20:	4b50      	ldr	r3, [pc, #320]	; (402f64 <udc_process_setup+0x22c>)
  402e22:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  402e24:	4b4d      	ldr	r3, [pc, #308]	; (402f5c <udc_process_setup+0x224>)
  402e26:	689b      	ldr	r3, [r3, #8]
  402e28:	2202      	movs	r2, #2
  402e2a:	705a      	strb	r2, [r3, #1]
  402e2c:	e7e4      	b.n	402df8 <udc_process_setup+0xc0>
		if (udc_config.conf_bos == NULL) {
  402e2e:	4b4e      	ldr	r3, [pc, #312]	; (402f68 <udc_process_setup+0x230>)
  402e30:	6898      	ldr	r0, [r3, #8]
  402e32:	2800      	cmp	r0, #0
  402e34:	d095      	beq.n	402d62 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  402e36:	8841      	ldrh	r1, [r0, #2]
  402e38:	4b4a      	ldr	r3, [pc, #296]	; (402f64 <udc_process_setup+0x22c>)
  402e3a:	4798      	blx	r3
  402e3c:	e7dc      	b.n	402df8 <udc_process_setup+0xc0>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  402e3e:	b2d2      	uxtb	r2, r2
  402e40:	2a01      	cmp	r2, #1
  402e42:	d01b      	beq.n	402e7c <udc_process_setup+0x144>
  402e44:	b1aa      	cbz	r2, 402e72 <udc_process_setup+0x13a>
  402e46:	2a02      	cmp	r2, #2
  402e48:	d184      	bne.n	402d54 <udc_process_setup+0x1c>
		str = udc_string_product_name;
  402e4a:	4a48      	ldr	r2, [pc, #288]	; (402f6c <udc_process_setup+0x234>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  402e4c:	240a      	movs	r4, #10
  402e4e:	3a01      	subs	r2, #1
  402e50:	4947      	ldr	r1, [pc, #284]	; (402f70 <udc_process_setup+0x238>)
  402e52:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  402e54:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  402e58:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
  402e5c:	3301      	adds	r3, #1
  402e5e:	b2db      	uxtb	r3, r3
  402e60:	42a3      	cmp	r3, r4
  402e62:	d3f7      	bcc.n	402e54 <udc_process_setup+0x11c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  402e64:	0061      	lsls	r1, r4, #1
  402e66:	3102      	adds	r1, #2
  402e68:	4841      	ldr	r0, [pc, #260]	; (402f70 <udc_process_setup+0x238>)
  402e6a:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  402e6c:	4b3d      	ldr	r3, [pc, #244]	; (402f64 <udc_process_setup+0x22c>)
  402e6e:	4798      	blx	r3
  402e70:	e7c2      	b.n	402df8 <udc_process_setup+0xc0>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  402e72:	2104      	movs	r1, #4
  402e74:	483f      	ldr	r0, [pc, #252]	; (402f74 <udc_process_setup+0x23c>)
  402e76:	4b3b      	ldr	r3, [pc, #236]	; (402f64 <udc_process_setup+0x22c>)
  402e78:	4798      	blx	r3
  402e7a:	e7bd      	b.n	402df8 <udc_process_setup+0xc0>
		str = udc_string_manufacturer_name;
  402e7c:	4a3e      	ldr	r2, [pc, #248]	; (402f78 <udc_process_setup+0x240>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  402e7e:	2417      	movs	r4, #23
  402e80:	e7e5      	b.n	402e4e <udc_process_setup+0x116>
	if (udd_g_ctrlreq.req.wLength != 1) {
  402e82:	2a01      	cmp	r2, #1
  402e84:	f47f af6d 	bne.w	402d62 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
  402e88:	2101      	movs	r1, #1
  402e8a:	483c      	ldr	r0, [pc, #240]	; (402f7c <udc_process_setup+0x244>)
  402e8c:	4b35      	ldr	r3, [pc, #212]	; (402f64 <udc_process_setup+0x22c>)
  402e8e:	4798      	blx	r3
  402e90:	e051      	b.n	402f36 <udc_process_setup+0x1fe>
			switch (udd_g_ctrlreq.req.bRequest) {
  402e92:	4932      	ldr	r1, [pc, #200]	; (402f5c <udc_process_setup+0x224>)
  402e94:	7849      	ldrb	r1, [r1, #1]
  402e96:	290a      	cmp	r1, #10
  402e98:	d181      	bne.n	402d9e <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  402e9a:	2a01      	cmp	r2, #1
  402e9c:	f040 80cd 	bne.w	40303a <udc_process_setup+0x302>
	if (!udc_num_configuration) {
  402ea0:	4b36      	ldr	r3, [pc, #216]	; (402f7c <udc_process_setup+0x244>)
  402ea2:	781b      	ldrb	r3, [r3, #0]
  402ea4:	2b00      	cmp	r3, #0
  402ea6:	f000 80c8 	beq.w	40303a <udc_process_setup+0x302>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  402eaa:	4b2c      	ldr	r3, [pc, #176]	; (402f5c <udc_process_setup+0x224>)
  402eac:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  402eae:	4b34      	ldr	r3, [pc, #208]	; (402f80 <udc_process_setup+0x248>)
  402eb0:	681d      	ldr	r5, [r3, #0]
  402eb2:	682b      	ldr	r3, [r5, #0]
  402eb4:	791b      	ldrb	r3, [r3, #4]
  402eb6:	42a3      	cmp	r3, r4
  402eb8:	f240 80bf 	bls.w	40303a <udc_process_setup+0x302>
	if (!udc_update_iface_desc(iface_num, 0)) {
  402ebc:	2100      	movs	r1, #0
  402ebe:	4620      	mov	r0, r4
  402ec0:	4b30      	ldr	r3, [pc, #192]	; (402f84 <udc_process_setup+0x24c>)
  402ec2:	4798      	blx	r3
  402ec4:	2800      	cmp	r0, #0
  402ec6:	f43f af45 	beq.w	402d54 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  402eca:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  402ecc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  402ed0:	68db      	ldr	r3, [r3, #12]
  402ed2:	4798      	blx	r3
  402ed4:	4b2c      	ldr	r3, [pc, #176]	; (402f88 <udc_process_setup+0x250>)
  402ed6:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  402ed8:	2101      	movs	r1, #1
  402eda:	4618      	mov	r0, r3
  402edc:	4b21      	ldr	r3, [pc, #132]	; (402f64 <udc_process_setup+0x22c>)
  402ede:	4798      	blx	r3
  402ee0:	e029      	b.n	402f36 <udc_process_setup+0x1fe>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  402ee2:	2a02      	cmp	r2, #2
  402ee4:	f47f af3d 	bne.w	402d62 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  402ee8:	4b1c      	ldr	r3, [pc, #112]	; (402f5c <udc_process_setup+0x224>)
  402eea:	7918      	ldrb	r0, [r3, #4]
  402eec:	4b27      	ldr	r3, [pc, #156]	; (402f8c <udc_process_setup+0x254>)
  402eee:	4798      	blx	r3
  402ef0:	4b27      	ldr	r3, [pc, #156]	; (402f90 <udc_process_setup+0x258>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  402ef2:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  402ef4:	2102      	movs	r1, #2
  402ef6:	4618      	mov	r0, r3
  402ef8:	4b1a      	ldr	r3, [pc, #104]	; (402f64 <udc_process_setup+0x22c>)
  402efa:	4798      	blx	r3
  402efc:	e01b      	b.n	402f36 <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  402efe:	f013 031f 	ands.w	r3, r3, #31
  402f02:	f040 8083 	bne.w	40300c <udc_process_setup+0x2d4>
			switch (udd_g_ctrlreq.req.bRequest) {
  402f06:	4a15      	ldr	r2, [pc, #84]	; (402f5c <udc_process_setup+0x224>)
  402f08:	7852      	ldrb	r2, [r2, #1]
  402f0a:	3a01      	subs	r2, #1
  402f0c:	2a08      	cmp	r2, #8
  402f0e:	d87d      	bhi.n	40300c <udc_process_setup+0x2d4>
  402f10:	e8df f012 	tbh	[pc, r2, lsl #1]
  402f14:	007c0013 	.word	0x007c0013
  402f18:	007c00d6 	.word	0x007c00d6
  402f1c:	007c0009 	.word	0x007c0009
  402f20:	007c007c 	.word	0x007c007c
  402f24:	0042      	.short	0x0042
	if (udd_g_ctrlreq.req.wLength) {
  402f26:	4b0d      	ldr	r3, [pc, #52]	; (402f5c <udc_process_setup+0x224>)
  402f28:	88db      	ldrh	r3, [r3, #6]
  402f2a:	2b00      	cmp	r3, #0
  402f2c:	f47f af19 	bne.w	402d62 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
  402f30:	4a18      	ldr	r2, [pc, #96]	; (402f94 <udc_process_setup+0x25c>)
  402f32:	4b0a      	ldr	r3, [pc, #40]	; (402f5c <udc_process_setup+0x224>)
  402f34:	611a      	str	r2, [r3, #16]
			return true;
  402f36:	2301      	movs	r3, #1
  402f38:	e71b      	b.n	402d72 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  402f3a:	4b08      	ldr	r3, [pc, #32]	; (402f5c <udc_process_setup+0x224>)
  402f3c:	88db      	ldrh	r3, [r3, #6]
  402f3e:	2b00      	cmp	r3, #0
  402f40:	f47f af0f 	bne.w	402d62 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  402f44:	4b05      	ldr	r3, [pc, #20]	; (402f5c <udc_process_setup+0x224>)
  402f46:	885b      	ldrh	r3, [r3, #2]
  402f48:	2b01      	cmp	r3, #1
  402f4a:	f47f af0a 	bne.w	402d62 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  402f4e:	4a04      	ldr	r2, [pc, #16]	; (402f60 <udc_process_setup+0x228>)
  402f50:	8813      	ldrh	r3, [r2, #0]
  402f52:	f023 0302 	bic.w	r3, r3, #2
  402f56:	8013      	strh	r3, [r2, #0]
  402f58:	e7ed      	b.n	402f36 <udc_process_setup+0x1fe>
  402f5a:	bf00      	nop
  402f5c:	2040111c 	.word	0x2040111c
  402f60:	20400b96 	.word	0x20400b96
  402f64:	004043b5 	.word	0x004043b5
  402f68:	204000ac 	.word	0x204000ac
  402f6c:	2040016c 	.word	0x2040016c
  402f70:	20400120 	.word	0x20400120
  402f74:	20400150 	.word	0x20400150
  402f78:	20400154 	.word	0x20400154
  402f7c:	20400ba0 	.word	0x20400ba0
  402f80:	20400ba4 	.word	0x20400ba4
  402f84:	00402b69 	.word	0x00402b69
  402f88:	20400b9c 	.word	0x20400b9c
  402f8c:	0040441d 	.word	0x0040441d
  402f90:	20400b98 	.word	0x20400b98
  402f94:	00402b51 	.word	0x00402b51
	if (udd_g_ctrlreq.req.wLength) {
  402f98:	4b6f      	ldr	r3, [pc, #444]	; (403158 <udc_process_setup+0x420>)
  402f9a:	88db      	ldrh	r3, [r3, #6]
  402f9c:	2b00      	cmp	r3, #0
  402f9e:	f47f aee0 	bne.w	402d62 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
  402fa2:	4b6e      	ldr	r3, [pc, #440]	; (40315c <udc_process_setup+0x424>)
  402fa4:	4798      	blx	r3
  402fa6:	2800      	cmp	r0, #0
  402fa8:	f43f aed4 	beq.w	402d54 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  402fac:	4b6a      	ldr	r3, [pc, #424]	; (403158 <udc_process_setup+0x420>)
  402fae:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  402fb0:	4b6b      	ldr	r3, [pc, #428]	; (403160 <udc_process_setup+0x428>)
  402fb2:	681b      	ldr	r3, [r3, #0]
  402fb4:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  402fb6:	429a      	cmp	r2, r3
  402fb8:	f73f aecc 	bgt.w	402d54 <udc_process_setup+0x1c>
	udc_reset();
  402fbc:	4b69      	ldr	r3, [pc, #420]	; (403164 <udc_process_setup+0x42c>)
  402fbe:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  402fc0:	4b65      	ldr	r3, [pc, #404]	; (403158 <udc_process_setup+0x420>)
  402fc2:	789a      	ldrb	r2, [r3, #2]
  402fc4:	4b68      	ldr	r3, [pc, #416]	; (403168 <udc_process_setup+0x430>)
  402fc6:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  402fc8:	2a00      	cmp	r2, #0
  402fca:	d0b4      	beq.n	402f36 <udc_process_setup+0x1fe>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  402fcc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  402fd0:	4413      	add	r3, r2
  402fd2:	4a63      	ldr	r2, [pc, #396]	; (403160 <udc_process_setup+0x428>)
  402fd4:	6852      	ldr	r2, [r2, #4]
  402fd6:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  402fda:	4964      	ldr	r1, [pc, #400]	; (40316c <udc_process_setup+0x434>)
  402fdc:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402fde:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  402fe2:	791b      	ldrb	r3, [r3, #4]
  402fe4:	2b00      	cmp	r3, #0
  402fe6:	d0a6      	beq.n	402f36 <udc_process_setup+0x1fe>
  402fe8:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  402fea:	4626      	mov	r6, r4
  402fec:	4d60      	ldr	r5, [pc, #384]	; (403170 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402fee:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  402ff0:	4631      	mov	r1, r6
  402ff2:	4620      	mov	r0, r4
  402ff4:	47a8      	blx	r5
  402ff6:	2800      	cmp	r0, #0
  402ff8:	f43f aeac 	beq.w	402d54 <udc_process_setup+0x1c>
			iface_num++) {
  402ffc:	3401      	adds	r4, #1
  402ffe:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403000:	683b      	ldr	r3, [r7, #0]
  403002:	681b      	ldr	r3, [r3, #0]
  403004:	791b      	ldrb	r3, [r3, #4]
  403006:	42a3      	cmp	r3, r4
  403008:	d8f2      	bhi.n	402ff0 <udc_process_setup+0x2b8>
  40300a:	e794      	b.n	402f36 <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40300c:	2b01      	cmp	r3, #1
  40300e:	d00a      	beq.n	403026 <udc_process_setup+0x2ee>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  403010:	2b02      	cmp	r3, #2
  403012:	f47f ae9f 	bne.w	402d54 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  403016:	4b50      	ldr	r3, [pc, #320]	; (403158 <udc_process_setup+0x420>)
  403018:	785b      	ldrb	r3, [r3, #1]
  40301a:	2b01      	cmp	r3, #1
  40301c:	d02b      	beq.n	403076 <udc_process_setup+0x33e>
  40301e:	2b03      	cmp	r3, #3
  403020:	d039      	beq.n	403096 <udc_process_setup+0x35e>
	return false;
  403022:	2300      	movs	r3, #0
  403024:	e04d      	b.n	4030c2 <udc_process_setup+0x38a>
			switch (udd_g_ctrlreq.req.bRequest) {
  403026:	4a4c      	ldr	r2, [pc, #304]	; (403158 <udc_process_setup+0x420>)
  403028:	7852      	ldrb	r2, [r2, #1]
  40302a:	2a0b      	cmp	r2, #11
  40302c:	d1f0      	bne.n	403010 <udc_process_setup+0x2d8>
	if (udd_g_ctrlreq.req.wLength) {
  40302e:	4b4a      	ldr	r3, [pc, #296]	; (403158 <udc_process_setup+0x420>)
  403030:	88db      	ldrh	r3, [r3, #6]
  403032:	b913      	cbnz	r3, 40303a <udc_process_setup+0x302>
	if (!udc_num_configuration) {
  403034:	4b4c      	ldr	r3, [pc, #304]	; (403168 <udc_process_setup+0x430>)
  403036:	781b      	ldrb	r3, [r3, #0]
  403038:	b973      	cbnz	r3, 403058 <udc_process_setup+0x320>
	if (0 == udc_num_configuration) {
  40303a:	4b4b      	ldr	r3, [pc, #300]	; (403168 <udc_process_setup+0x430>)
  40303c:	781b      	ldrb	r3, [r3, #0]
  40303e:	2b00      	cmp	r3, #0
  403040:	f000 8088 	beq.w	403154 <udc_process_setup+0x41c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  403044:	4b44      	ldr	r3, [pc, #272]	; (403158 <udc_process_setup+0x420>)
  403046:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  403048:	4b48      	ldr	r3, [pc, #288]	; (40316c <udc_process_setup+0x434>)
  40304a:	681d      	ldr	r5, [r3, #0]
  40304c:	682b      	ldr	r3, [r5, #0]
  40304e:	791b      	ldrb	r3, [r3, #4]
  403050:	42a3      	cmp	r3, r4
  403052:	d83a      	bhi.n	4030ca <udc_process_setup+0x392>
	return false;
  403054:	2300      	movs	r3, #0
  403056:	e68c      	b.n	402d72 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  403058:	4b3f      	ldr	r3, [pc, #252]	; (403158 <udc_process_setup+0x420>)
  40305a:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  40305c:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  40305e:	4620      	mov	r0, r4
  403060:	4b44      	ldr	r3, [pc, #272]	; (403174 <udc_process_setup+0x43c>)
  403062:	4798      	blx	r3
  403064:	2800      	cmp	r0, #0
  403066:	f43f ae75 	beq.w	402d54 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  40306a:	b2e9      	uxtb	r1, r5
  40306c:	4620      	mov	r0, r4
  40306e:	4b40      	ldr	r3, [pc, #256]	; (403170 <udc_process_setup+0x438>)
  403070:	4798      	blx	r3
  403072:	4603      	mov	r3, r0
  403074:	e025      	b.n	4030c2 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength) {
  403076:	4b38      	ldr	r3, [pc, #224]	; (403158 <udc_process_setup+0x420>)
  403078:	88db      	ldrh	r3, [r3, #6]
  40307a:	2b00      	cmp	r3, #0
  40307c:	f47f ae71 	bne.w	402d62 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  403080:	4b35      	ldr	r3, [pc, #212]	; (403158 <udc_process_setup+0x420>)
  403082:	885b      	ldrh	r3, [r3, #2]
  403084:	2b00      	cmp	r3, #0
  403086:	f47f ae6c 	bne.w	402d62 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  40308a:	4b33      	ldr	r3, [pc, #204]	; (403158 <udc_process_setup+0x420>)
  40308c:	7918      	ldrb	r0, [r3, #4]
  40308e:	4b3a      	ldr	r3, [pc, #232]	; (403178 <udc_process_setup+0x440>)
  403090:	4798      	blx	r3
  403092:	4603      	mov	r3, r0
  403094:	e015      	b.n	4030c2 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength) {
  403096:	4b30      	ldr	r3, [pc, #192]	; (403158 <udc_process_setup+0x420>)
  403098:	88db      	ldrh	r3, [r3, #6]
  40309a:	2b00      	cmp	r3, #0
  40309c:	f47f ae61 	bne.w	402d62 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4030a0:	4b2d      	ldr	r3, [pc, #180]	; (403158 <udc_process_setup+0x420>)
  4030a2:	885b      	ldrh	r3, [r3, #2]
  4030a4:	2b00      	cmp	r3, #0
  4030a6:	f47f ae5c 	bne.w	402d62 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  4030aa:	4c2b      	ldr	r4, [pc, #172]	; (403158 <udc_process_setup+0x420>)
  4030ac:	7920      	ldrb	r0, [r4, #4]
  4030ae:	4b33      	ldr	r3, [pc, #204]	; (40317c <udc_process_setup+0x444>)
  4030b0:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4030b2:	7920      	ldrb	r0, [r4, #4]
  4030b4:	4b32      	ldr	r3, [pc, #200]	; (403180 <udc_process_setup+0x448>)
  4030b6:	4798      	blx	r3
  4030b8:	4603      	mov	r3, r0
  4030ba:	e002      	b.n	4030c2 <udc_process_setup+0x38a>
		return false;
  4030bc:	2300      	movs	r3, #0
  4030be:	e000      	b.n	4030c2 <udc_process_setup+0x38a>
				return udc_req_std_dev_set_feature();
  4030c0:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  4030c2:	2b00      	cmp	r3, #0
  4030c4:	f47f ae55 	bne.w	402d72 <udc_process_setup+0x3a>
  4030c8:	e644      	b.n	402d54 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  4030ca:	2100      	movs	r1, #0
  4030cc:	4620      	mov	r0, r4
  4030ce:	4b2d      	ldr	r3, [pc, #180]	; (403184 <udc_process_setup+0x44c>)
  4030d0:	4798      	blx	r3
  4030d2:	2800      	cmp	r0, #0
  4030d4:	f43f ae45 	beq.w	402d62 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4030d8:	686b      	ldr	r3, [r5, #4]
  4030da:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4030de:	68eb      	ldr	r3, [r5, #12]
  4030e0:	4798      	blx	r3
  4030e2:	4601      	mov	r1, r0
  4030e4:	4620      	mov	r0, r4
  4030e6:	4b27      	ldr	r3, [pc, #156]	; (403184 <udc_process_setup+0x44c>)
  4030e8:	4798      	blx	r3
  4030ea:	2800      	cmp	r0, #0
  4030ec:	f43f ae39 	beq.w	402d62 <udc_process_setup+0x2a>
	return udi_api->setup();
  4030f0:	68ab      	ldr	r3, [r5, #8]
  4030f2:	4798      	blx	r3
		if (udc_req_iface()) {
  4030f4:	4603      	mov	r3, r0
  4030f6:	2800      	cmp	r0, #0
  4030f8:	f47f ae3b 	bne.w	402d72 <udc_process_setup+0x3a>
  4030fc:	e631      	b.n	402d62 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  4030fe:	4b1a      	ldr	r3, [pc, #104]	; (403168 <udc_process_setup+0x430>)
  403100:	781b      	ldrb	r3, [r3, #0]
  403102:	b30b      	cbz	r3, 403148 <udc_process_setup+0x410>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403104:	4b19      	ldr	r3, [pc, #100]	; (40316c <udc_process_setup+0x434>)
  403106:	681a      	ldr	r2, [r3, #0]
  403108:	6813      	ldr	r3, [r2, #0]
  40310a:	791b      	ldrb	r3, [r3, #4]
  40310c:	b1f3      	cbz	r3, 40314c <udc_process_setup+0x414>
  40310e:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  403110:	4e1c      	ldr	r6, [pc, #112]	; (403184 <udc_process_setup+0x44c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403112:	4f16      	ldr	r7, [pc, #88]	; (40316c <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  403114:	6853      	ldr	r3, [r2, #4]
  403116:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40311a:	68eb      	ldr	r3, [r5, #12]
  40311c:	4798      	blx	r3
  40311e:	4601      	mov	r1, r0
  403120:	4620      	mov	r0, r4
  403122:	47b0      	blx	r6
  403124:	4603      	mov	r3, r0
  403126:	2800      	cmp	r0, #0
  403128:	f43f ae23 	beq.w	402d72 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  40312c:	68ab      	ldr	r3, [r5, #8]
  40312e:	4798      	blx	r3
  403130:	4603      	mov	r3, r0
  403132:	2800      	cmp	r0, #0
  403134:	f47f ae1d 	bne.w	402d72 <udc_process_setup+0x3a>
			iface_num++) {
  403138:	3401      	adds	r4, #1
  40313a:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40313c:	683a      	ldr	r2, [r7, #0]
  40313e:	6811      	ldr	r1, [r2, #0]
  403140:	7909      	ldrb	r1, [r1, #4]
  403142:	42a1      	cmp	r1, r4
  403144:	d8e6      	bhi.n	403114 <udc_process_setup+0x3dc>
  403146:	e614      	b.n	402d72 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  403148:	2300      	movs	r3, #0
  40314a:	e612      	b.n	402d72 <udc_process_setup+0x3a>
	return false;
  40314c:	2300      	movs	r3, #0
  40314e:	e610      	b.n	402d72 <udc_process_setup+0x3a>
			return false; // Error from USB host
  403150:	2300      	movs	r3, #0
  403152:	e60e      	b.n	402d72 <udc_process_setup+0x3a>
	return false;
  403154:	2300      	movs	r3, #0
  403156:	e60c      	b.n	402d72 <udc_process_setup+0x3a>
  403158:	2040111c 	.word	0x2040111c
  40315c:	00404395 	.word	0x00404395
  403160:	204000ac 	.word	0x204000ac
  403164:	00402cb1 	.word	0x00402cb1
  403168:	20400ba0 	.word	0x20400ba0
  40316c:	20400ba4 	.word	0x20400ba4
  403170:	00402c49 	.word	0x00402c49
  403174:	00402bdd 	.word	0x00402bdd
  403178:	00404535 	.word	0x00404535
  40317c:	00404915 	.word	0x00404915
  403180:	00404431 	.word	0x00404431
  403184:	00402b69 	.word	0x00402b69

00403188 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  403188:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40318a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40318e:	d03a      	beq.n	403206 <pio_set_peripheral+0x7e>
  403190:	d813      	bhi.n	4031ba <pio_set_peripheral+0x32>
  403192:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  403196:	d025      	beq.n	4031e4 <pio_set_peripheral+0x5c>
  403198:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40319c:	d10a      	bne.n	4031b4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40319e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4031a0:	4313      	orrs	r3, r2
  4031a2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4031a4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4031a6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4031a8:	400b      	ands	r3, r1
  4031aa:	ea23 0302 	bic.w	r3, r3, r2
  4031ae:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4031b0:	6042      	str	r2, [r0, #4]
  4031b2:	4770      	bx	lr
	switch (ul_type) {
  4031b4:	2900      	cmp	r1, #0
  4031b6:	d1fb      	bne.n	4031b0 <pio_set_peripheral+0x28>
  4031b8:	4770      	bx	lr
  4031ba:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4031be:	d021      	beq.n	403204 <pio_set_peripheral+0x7c>
  4031c0:	d809      	bhi.n	4031d6 <pio_set_peripheral+0x4e>
  4031c2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4031c6:	d1f3      	bne.n	4031b0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4031c8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4031ca:	4313      	orrs	r3, r2
  4031cc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4031ce:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4031d0:	4313      	orrs	r3, r2
  4031d2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4031d4:	e7ec      	b.n	4031b0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4031d6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4031da:	d013      	beq.n	403204 <pio_set_peripheral+0x7c>
  4031dc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4031e0:	d010      	beq.n	403204 <pio_set_peripheral+0x7c>
  4031e2:	e7e5      	b.n	4031b0 <pio_set_peripheral+0x28>
{
  4031e4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4031e6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4031e8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4031ea:	43d3      	mvns	r3, r2
  4031ec:	4021      	ands	r1, r4
  4031ee:	461c      	mov	r4, r3
  4031f0:	4019      	ands	r1, r3
  4031f2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4031f4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4031f6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4031f8:	400b      	ands	r3, r1
  4031fa:	4023      	ands	r3, r4
  4031fc:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4031fe:	6042      	str	r2, [r0, #4]
}
  403200:	f85d 4b04 	ldr.w	r4, [sp], #4
  403204:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  403206:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403208:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40320a:	400b      	ands	r3, r1
  40320c:	ea23 0302 	bic.w	r3, r3, r2
  403210:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403212:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403214:	4313      	orrs	r3, r2
  403216:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403218:	e7ca      	b.n	4031b0 <pio_set_peripheral+0x28>

0040321a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40321a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40321c:	f012 0f01 	tst.w	r2, #1
  403220:	d10d      	bne.n	40323e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  403222:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  403224:	f012 0f0a 	tst.w	r2, #10
  403228:	d00b      	beq.n	403242 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40322a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40322c:	f012 0f02 	tst.w	r2, #2
  403230:	d109      	bne.n	403246 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  403232:	f012 0f08 	tst.w	r2, #8
  403236:	d008      	beq.n	40324a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  403238:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40323c:	e005      	b.n	40324a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40323e:	6641      	str	r1, [r0, #100]	; 0x64
  403240:	e7f0      	b.n	403224 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  403242:	6241      	str	r1, [r0, #36]	; 0x24
  403244:	e7f2      	b.n	40322c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  403246:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40324a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40324c:	6001      	str	r1, [r0, #0]
  40324e:	4770      	bx	lr

00403250 <pio_set_output>:
{
  403250:	b410      	push	{r4}
  403252:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  403254:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  403256:	b94c      	cbnz	r4, 40326c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  403258:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40325a:	b14b      	cbz	r3, 403270 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40325c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40325e:	b94a      	cbnz	r2, 403274 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  403260:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  403262:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  403264:	6001      	str	r1, [r0, #0]
}
  403266:	f85d 4b04 	ldr.w	r4, [sp], #4
  40326a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40326c:	6641      	str	r1, [r0, #100]	; 0x64
  40326e:	e7f4      	b.n	40325a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  403270:	6541      	str	r1, [r0, #84]	; 0x54
  403272:	e7f4      	b.n	40325e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  403274:	6301      	str	r1, [r0, #48]	; 0x30
  403276:	e7f4      	b.n	403262 <pio_set_output+0x12>

00403278 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  403278:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40327a:	4770      	bx	lr

0040327c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40327c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40327e:	4770      	bx	lr

00403280 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403280:	4b05      	ldr	r3, [pc, #20]	; (403298 <pio_set_pin_low+0x18>)
  403282:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  403286:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  403288:	f000 001f 	and.w	r0, r0, #31
  40328c:	2201      	movs	r2, #1
  40328e:	fa02 f000 	lsl.w	r0, r2, r0
  403292:	6358      	str	r0, [r3, #52]	; 0x34
  403294:	4770      	bx	lr
  403296:	bf00      	nop
  403298:	00200707 	.word	0x00200707

0040329c <pio_configure_pin>:
{
  40329c:	b570      	push	{r4, r5, r6, lr}
  40329e:	b082      	sub	sp, #8
  4032a0:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4032a2:	4c46      	ldr	r4, [pc, #280]	; (4033bc <pio_configure_pin+0x120>)
  4032a4:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  4032a8:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4032aa:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4032ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4032b2:	d059      	beq.n	403368 <pio_configure_pin+0xcc>
  4032b4:	d80a      	bhi.n	4032cc <pio_configure_pin+0x30>
  4032b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4032ba:	d02f      	beq.n	40331c <pio_configure_pin+0x80>
  4032bc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4032c0:	d03f      	beq.n	403342 <pio_configure_pin+0xa6>
  4032c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4032c6:	d016      	beq.n	4032f6 <pio_configure_pin+0x5a>
		return 0;
  4032c8:	2000      	movs	r0, #0
  4032ca:	e012      	b.n	4032f2 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  4032cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4032d0:	d05d      	beq.n	40338e <pio_configure_pin+0xf2>
  4032d2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4032d6:	d05a      	beq.n	40338e <pio_configure_pin+0xf2>
  4032d8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4032dc:	d1f4      	bne.n	4032c8 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4032de:	f000 011f 	and.w	r1, r0, #31
  4032e2:	2601      	movs	r6, #1
  4032e4:	462a      	mov	r2, r5
  4032e6:	fa06 f101 	lsl.w	r1, r6, r1
  4032ea:	4620      	mov	r0, r4
  4032ec:	4b34      	ldr	r3, [pc, #208]	; (4033c0 <pio_configure_pin+0x124>)
  4032ee:	4798      	blx	r3
	return 1;
  4032f0:	4630      	mov	r0, r6
}
  4032f2:	b002      	add	sp, #8
  4032f4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4032f6:	f000 001f 	and.w	r0, r0, #31
  4032fa:	2601      	movs	r6, #1
  4032fc:	4086      	lsls	r6, r0
  4032fe:	4632      	mov	r2, r6
  403300:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403304:	4620      	mov	r0, r4
  403306:	4b2f      	ldr	r3, [pc, #188]	; (4033c4 <pio_configure_pin+0x128>)
  403308:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40330a:	f015 0f01 	tst.w	r5, #1
  40330e:	d102      	bne.n	403316 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  403310:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  403312:	2001      	movs	r0, #1
  403314:	e7ed      	b.n	4032f2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  403316:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  403318:	2001      	movs	r0, #1
  40331a:	e7ea      	b.n	4032f2 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40331c:	f000 001f 	and.w	r0, r0, #31
  403320:	2601      	movs	r6, #1
  403322:	4086      	lsls	r6, r0
  403324:	4632      	mov	r2, r6
  403326:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40332a:	4620      	mov	r0, r4
  40332c:	4b25      	ldr	r3, [pc, #148]	; (4033c4 <pio_configure_pin+0x128>)
  40332e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  403330:	f015 0f01 	tst.w	r5, #1
  403334:	d102      	bne.n	40333c <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  403336:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  403338:	2001      	movs	r0, #1
  40333a:	e7da      	b.n	4032f2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40333c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40333e:	2001      	movs	r0, #1
  403340:	e7d7      	b.n	4032f2 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  403342:	f000 001f 	and.w	r0, r0, #31
  403346:	2601      	movs	r6, #1
  403348:	4086      	lsls	r6, r0
  40334a:	4632      	mov	r2, r6
  40334c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403350:	4620      	mov	r0, r4
  403352:	4b1c      	ldr	r3, [pc, #112]	; (4033c4 <pio_configure_pin+0x128>)
  403354:	4798      	blx	r3
	if (ul_pull_up_enable) {
  403356:	f015 0f01 	tst.w	r5, #1
  40335a:	d102      	bne.n	403362 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  40335c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40335e:	2001      	movs	r0, #1
  403360:	e7c7      	b.n	4032f2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  403362:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  403364:	2001      	movs	r0, #1
  403366:	e7c4      	b.n	4032f2 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  403368:	f000 001f 	and.w	r0, r0, #31
  40336c:	2601      	movs	r6, #1
  40336e:	4086      	lsls	r6, r0
  403370:	4632      	mov	r2, r6
  403372:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403376:	4620      	mov	r0, r4
  403378:	4b12      	ldr	r3, [pc, #72]	; (4033c4 <pio_configure_pin+0x128>)
  40337a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40337c:	f015 0f01 	tst.w	r5, #1
  403380:	d102      	bne.n	403388 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  403382:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  403384:	2001      	movs	r0, #1
  403386:	e7b4      	b.n	4032f2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  403388:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40338a:	2001      	movs	r0, #1
  40338c:	e7b1      	b.n	4032f2 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40338e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  403392:	f000 011f 	and.w	r1, r0, #31
  403396:	2601      	movs	r6, #1
  403398:	ea05 0306 	and.w	r3, r5, r6
  40339c:	9300      	str	r3, [sp, #0]
  40339e:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4033a2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4033a6:	bf14      	ite	ne
  4033a8:	2200      	movne	r2, #0
  4033aa:	2201      	moveq	r2, #1
  4033ac:	fa06 f101 	lsl.w	r1, r6, r1
  4033b0:	4620      	mov	r0, r4
  4033b2:	4c05      	ldr	r4, [pc, #20]	; (4033c8 <pio_configure_pin+0x12c>)
  4033b4:	47a0      	blx	r4
	return 1;
  4033b6:	4630      	mov	r0, r6
		break;
  4033b8:	e79b      	b.n	4032f2 <pio_configure_pin+0x56>
  4033ba:	bf00      	nop
  4033bc:	00200707 	.word	0x00200707
  4033c0:	0040321b 	.word	0x0040321b
  4033c4:	00403189 	.word	0x00403189
  4033c8:	00403251 	.word	0x00403251

004033cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4033cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4033d0:	4604      	mov	r4, r0
  4033d2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4033d4:	4b0e      	ldr	r3, [pc, #56]	; (403410 <pio_handler_process+0x44>)
  4033d6:	4798      	blx	r3
  4033d8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4033da:	4620      	mov	r0, r4
  4033dc:	4b0d      	ldr	r3, [pc, #52]	; (403414 <pio_handler_process+0x48>)
  4033de:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4033e0:	4005      	ands	r5, r0
  4033e2:	d013      	beq.n	40340c <pio_handler_process+0x40>
  4033e4:	4c0c      	ldr	r4, [pc, #48]	; (403418 <pio_handler_process+0x4c>)
  4033e6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4033ea:	e003      	b.n	4033f4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4033ec:	42b4      	cmp	r4, r6
  4033ee:	d00d      	beq.n	40340c <pio_handler_process+0x40>
  4033f0:	3410      	adds	r4, #16
		while (status != 0) {
  4033f2:	b15d      	cbz	r5, 40340c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4033f4:	6820      	ldr	r0, [r4, #0]
  4033f6:	4540      	cmp	r0, r8
  4033f8:	d1f8      	bne.n	4033ec <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4033fa:	6861      	ldr	r1, [r4, #4]
  4033fc:	4229      	tst	r1, r5
  4033fe:	d0f5      	beq.n	4033ec <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403400:	68e3      	ldr	r3, [r4, #12]
  403402:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  403404:	6863      	ldr	r3, [r4, #4]
  403406:	ea25 0503 	bic.w	r5, r5, r3
  40340a:	e7ef      	b.n	4033ec <pio_handler_process+0x20>
  40340c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403410:	00403279 	.word	0x00403279
  403414:	0040327d 	.word	0x0040327d
  403418:	20400bac 	.word	0x20400bac

0040341c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40341c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40341e:	210a      	movs	r1, #10
  403420:	4801      	ldr	r0, [pc, #4]	; (403428 <PIOA_Handler+0xc>)
  403422:	4b02      	ldr	r3, [pc, #8]	; (40342c <PIOA_Handler+0x10>)
  403424:	4798      	blx	r3
  403426:	bd08      	pop	{r3, pc}
  403428:	400e0e00 	.word	0x400e0e00
  40342c:	004033cd 	.word	0x004033cd

00403430 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403430:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  403432:	210b      	movs	r1, #11
  403434:	4801      	ldr	r0, [pc, #4]	; (40343c <PIOB_Handler+0xc>)
  403436:	4b02      	ldr	r3, [pc, #8]	; (403440 <PIOB_Handler+0x10>)
  403438:	4798      	blx	r3
  40343a:	bd08      	pop	{r3, pc}
  40343c:	400e1000 	.word	0x400e1000
  403440:	004033cd 	.word	0x004033cd

00403444 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  403444:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  403446:	210c      	movs	r1, #12
  403448:	4801      	ldr	r0, [pc, #4]	; (403450 <PIOC_Handler+0xc>)
  40344a:	4b02      	ldr	r3, [pc, #8]	; (403454 <PIOC_Handler+0x10>)
  40344c:	4798      	blx	r3
  40344e:	bd08      	pop	{r3, pc}
  403450:	400e1200 	.word	0x400e1200
  403454:	004033cd 	.word	0x004033cd

00403458 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  403458:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40345a:	2110      	movs	r1, #16
  40345c:	4801      	ldr	r0, [pc, #4]	; (403464 <PIOD_Handler+0xc>)
  40345e:	4b02      	ldr	r3, [pc, #8]	; (403468 <PIOD_Handler+0x10>)
  403460:	4798      	blx	r3
  403462:	bd08      	pop	{r3, pc}
  403464:	400e1400 	.word	0x400e1400
  403468:	004033cd 	.word	0x004033cd

0040346c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40346c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40346e:	2111      	movs	r1, #17
  403470:	4801      	ldr	r0, [pc, #4]	; (403478 <PIOE_Handler+0xc>)
  403472:	4b02      	ldr	r3, [pc, #8]	; (40347c <PIOE_Handler+0x10>)
  403474:	4798      	blx	r3
  403476:	bd08      	pop	{r3, pc}
  403478:	400e1600 	.word	0x400e1600
  40347c:	004033cd 	.word	0x004033cd

00403480 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  403480:	2803      	cmp	r0, #3
  403482:	d011      	beq.n	4034a8 <pmc_mck_set_division+0x28>
  403484:	2804      	cmp	r0, #4
  403486:	d012      	beq.n	4034ae <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  403488:	2802      	cmp	r0, #2
  40348a:	bf0c      	ite	eq
  40348c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  403490:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  403492:	4a08      	ldr	r2, [pc, #32]	; (4034b4 <pmc_mck_set_division+0x34>)
  403494:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40349a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40349c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40349e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4034a0:	f013 0f08 	tst.w	r3, #8
  4034a4:	d0fb      	beq.n	40349e <pmc_mck_set_division+0x1e>
}
  4034a6:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4034a8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4034ac:	e7f1      	b.n	403492 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4034ae:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4034b2:	e7ee      	b.n	403492 <pmc_mck_set_division+0x12>
  4034b4:	400e0600 	.word	0x400e0600

004034b8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4034b8:	4a17      	ldr	r2, [pc, #92]	; (403518 <pmc_switch_mck_to_pllack+0x60>)
  4034ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4034bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4034c0:	4318      	orrs	r0, r3
  4034c2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4034c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4034c6:	f013 0f08 	tst.w	r3, #8
  4034ca:	d10a      	bne.n	4034e2 <pmc_switch_mck_to_pllack+0x2a>
  4034cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4034d0:	4911      	ldr	r1, [pc, #68]	; (403518 <pmc_switch_mck_to_pllack+0x60>)
  4034d2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4034d4:	f012 0f08 	tst.w	r2, #8
  4034d8:	d103      	bne.n	4034e2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4034da:	3b01      	subs	r3, #1
  4034dc:	d1f9      	bne.n	4034d2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4034de:	2001      	movs	r0, #1
  4034e0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4034e2:	4a0d      	ldr	r2, [pc, #52]	; (403518 <pmc_switch_mck_to_pllack+0x60>)
  4034e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4034e6:	f023 0303 	bic.w	r3, r3, #3
  4034ea:	f043 0302 	orr.w	r3, r3, #2
  4034ee:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4034f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4034f2:	f013 0f08 	tst.w	r3, #8
  4034f6:	d10a      	bne.n	40350e <pmc_switch_mck_to_pllack+0x56>
  4034f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4034fc:	4906      	ldr	r1, [pc, #24]	; (403518 <pmc_switch_mck_to_pllack+0x60>)
  4034fe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403500:	f012 0f08 	tst.w	r2, #8
  403504:	d105      	bne.n	403512 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403506:	3b01      	subs	r3, #1
  403508:	d1f9      	bne.n	4034fe <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40350a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40350c:	4770      	bx	lr
	return 0;
  40350e:	2000      	movs	r0, #0
  403510:	4770      	bx	lr
  403512:	2000      	movs	r0, #0
  403514:	4770      	bx	lr
  403516:	bf00      	nop
  403518:	400e0600 	.word	0x400e0600

0040351c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40351c:	b9a0      	cbnz	r0, 403548 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40351e:	480e      	ldr	r0, [pc, #56]	; (403558 <pmc_switch_mainck_to_xtal+0x3c>)
  403520:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  403522:	0209      	lsls	r1, r1, #8
  403524:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  403526:	4a0d      	ldr	r2, [pc, #52]	; (40355c <pmc_switch_mainck_to_xtal+0x40>)
  403528:	401a      	ands	r2, r3
  40352a:	4b0d      	ldr	r3, [pc, #52]	; (403560 <pmc_switch_mainck_to_xtal+0x44>)
  40352c:	4313      	orrs	r3, r2
  40352e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403530:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  403532:	4602      	mov	r2, r0
  403534:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403536:	f013 0f01 	tst.w	r3, #1
  40353a:	d0fb      	beq.n	403534 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40353c:	4a06      	ldr	r2, [pc, #24]	; (403558 <pmc_switch_mainck_to_xtal+0x3c>)
  40353e:	6a11      	ldr	r1, [r2, #32]
  403540:	4b08      	ldr	r3, [pc, #32]	; (403564 <pmc_switch_mainck_to_xtal+0x48>)
  403542:	430b      	orrs	r3, r1
  403544:	6213      	str	r3, [r2, #32]
  403546:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403548:	4903      	ldr	r1, [pc, #12]	; (403558 <pmc_switch_mainck_to_xtal+0x3c>)
  40354a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40354c:	4a06      	ldr	r2, [pc, #24]	; (403568 <pmc_switch_mainck_to_xtal+0x4c>)
  40354e:	401a      	ands	r2, r3
  403550:	4b06      	ldr	r3, [pc, #24]	; (40356c <pmc_switch_mainck_to_xtal+0x50>)
  403552:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403554:	620b      	str	r3, [r1, #32]
  403556:	4770      	bx	lr
  403558:	400e0600 	.word	0x400e0600
  40355c:	ffc8fffc 	.word	0xffc8fffc
  403560:	00370001 	.word	0x00370001
  403564:	01370000 	.word	0x01370000
  403568:	fec8fffc 	.word	0xfec8fffc
  40356c:	01370002 	.word	0x01370002

00403570 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  403570:	4b02      	ldr	r3, [pc, #8]	; (40357c <pmc_osc_is_ready_mainck+0xc>)
  403572:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403574:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  403578:	4770      	bx	lr
  40357a:	bf00      	nop
  40357c:	400e0600 	.word	0x400e0600

00403580 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403580:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  403584:	4b01      	ldr	r3, [pc, #4]	; (40358c <pmc_disable_pllack+0xc>)
  403586:	629a      	str	r2, [r3, #40]	; 0x28
  403588:	4770      	bx	lr
  40358a:	bf00      	nop
  40358c:	400e0600 	.word	0x400e0600

00403590 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403590:	4b02      	ldr	r3, [pc, #8]	; (40359c <pmc_is_locked_pllack+0xc>)
  403592:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403594:	f000 0002 	and.w	r0, r0, #2
  403598:	4770      	bx	lr
  40359a:	bf00      	nop
  40359c:	400e0600 	.word	0x400e0600

004035a0 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4035a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4035a4:	4b05      	ldr	r3, [pc, #20]	; (4035bc <pmc_enable_periph_clk+0x1c>)
  4035a6:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4035aa:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4035ae:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4035b2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4035b6:	2000      	movs	r0, #0
  4035b8:	4770      	bx	lr
  4035ba:	bf00      	nop
  4035bc:	400e0600 	.word	0x400e0600

004035c0 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4035c0:	4770      	bx	lr
	...

004035c4 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4035c4:	4a10      	ldr	r2, [pc, #64]	; (403608 <pmc_enable_waitmode+0x44>)
  4035c6:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4035c8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4035cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4035d0:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4035d2:	6a11      	ldr	r1, [r2, #32]
  4035d4:	4b0d      	ldr	r3, [pc, #52]	; (40360c <pmc_enable_waitmode+0x48>)
  4035d6:	430b      	orrs	r3, r1
  4035d8:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4035da:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4035dc:	f013 0f08 	tst.w	r3, #8
  4035e0:	d0fb      	beq.n	4035da <pmc_enable_waitmode+0x16>
  4035e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  4035e6:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4035e8:	3b01      	subs	r3, #1
  4035ea:	d1fc      	bne.n	4035e6 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4035ec:	4a06      	ldr	r2, [pc, #24]	; (403608 <pmc_enable_waitmode+0x44>)
  4035ee:	6a13      	ldr	r3, [r2, #32]
  4035f0:	f013 0f08 	tst.w	r3, #8
  4035f4:	d0fb      	beq.n	4035ee <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4035f6:	4a04      	ldr	r2, [pc, #16]	; (403608 <pmc_enable_waitmode+0x44>)
  4035f8:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4035fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4035fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  403602:	6713      	str	r3, [r2, #112]	; 0x70
  403604:	4770      	bx	lr
  403606:	bf00      	nop
  403608:	400e0600 	.word	0x400e0600
  40360c:	00370004 	.word	0x00370004

00403610 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  403610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  403614:	1e43      	subs	r3, r0, #1
  403616:	2b04      	cmp	r3, #4
  403618:	f200 8107 	bhi.w	40382a <pmc_sleep+0x21a>
  40361c:	e8df f013 	tbh	[pc, r3, lsl #1]
  403620:	00050005 	.word	0x00050005
  403624:	00150015 	.word	0x00150015
  403628:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  40362a:	4a81      	ldr	r2, [pc, #516]	; (403830 <pmc_sleep+0x220>)
  40362c:	6913      	ldr	r3, [r2, #16]
  40362e:	f023 0304 	bic.w	r3, r3, #4
  403632:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  403634:	2201      	movs	r2, #1
  403636:	4b7f      	ldr	r3, [pc, #508]	; (403834 <pmc_sleep+0x224>)
  403638:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40363a:	f3bf 8f5f 	dmb	sy
  40363e:	b662      	cpsie	i
  __ASM volatile ("dsb");
  403640:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  403644:	bf30      	wfi
  403646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40364a:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  40364c:	2803      	cmp	r0, #3
  40364e:	bf0c      	ite	eq
  403650:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  403652:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  403656:	4b78      	ldr	r3, [pc, #480]	; (403838 <pmc_sleep+0x228>)
  403658:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  40365a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40365c:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  403660:	2200      	movs	r2, #0
  403662:	4b74      	ldr	r3, [pc, #464]	; (403834 <pmc_sleep+0x224>)
  403664:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  403666:	2201      	movs	r2, #1
  403668:	4b74      	ldr	r3, [pc, #464]	; (40383c <pmc_sleep+0x22c>)
  40366a:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  40366c:	4b74      	ldr	r3, [pc, #464]	; (403840 <pmc_sleep+0x230>)
  40366e:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  403670:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  403672:	4a74      	ldr	r2, [pc, #464]	; (403844 <pmc_sleep+0x234>)
  403674:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  403678:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  40367a:	4a73      	ldr	r2, [pc, #460]	; (403848 <pmc_sleep+0x238>)
  40367c:	433a      	orrs	r2, r7
  40367e:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  403680:	f005 0903 	and.w	r9, r5, #3
  403684:	f1b9 0f01 	cmp.w	r9, #1
  403688:	f240 8089 	bls.w	40379e <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  40368c:	f025 0103 	bic.w	r1, r5, #3
  403690:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  403694:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403696:	461a      	mov	r2, r3
  403698:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40369a:	f013 0f08 	tst.w	r3, #8
  40369e:	d0fb      	beq.n	403698 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  4036a0:	f011 0f70 	tst.w	r1, #112	; 0x70
  4036a4:	d008      	beq.n	4036b8 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  4036a6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  4036aa:	4b65      	ldr	r3, [pc, #404]	; (403840 <pmc_sleep+0x230>)
  4036ac:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4036ae:	461a      	mov	r2, r3
  4036b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4036b2:	f013 0f08 	tst.w	r3, #8
  4036b6:	d0fb      	beq.n	4036b0 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4036b8:	4b64      	ldr	r3, [pc, #400]	; (40384c <pmc_sleep+0x23c>)
  4036ba:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4036bc:	4a60      	ldr	r2, [pc, #384]	; (403840 <pmc_sleep+0x230>)
  4036be:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4036c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4036c4:	d0fb      	beq.n	4036be <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4036c6:	4a5e      	ldr	r2, [pc, #376]	; (403840 <pmc_sleep+0x230>)
  4036c8:	6a11      	ldr	r1, [r2, #32]
  4036ca:	4b61      	ldr	r3, [pc, #388]	; (403850 <pmc_sleep+0x240>)
  4036cc:	400b      	ands	r3, r1
  4036ce:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4036d2:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4036d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4036d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4036da:	d0fb      	beq.n	4036d4 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4036dc:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4036e0:	4a58      	ldr	r2, [pc, #352]	; (403844 <pmc_sleep+0x234>)
  4036e2:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4036e4:	2c04      	cmp	r4, #4
  4036e6:	d05c      	beq.n	4037a2 <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4036e8:	4c52      	ldr	r4, [pc, #328]	; (403834 <pmc_sleep+0x224>)
  4036ea:	2301      	movs	r3, #1
  4036ec:	7023      	strb	r3, [r4, #0]
  4036ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4036f2:	b662      	cpsie	i

		pmc_enable_waitmode();
  4036f4:	4b57      	ldr	r3, [pc, #348]	; (403854 <pmc_sleep+0x244>)
  4036f6:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4036f8:	b672      	cpsid	i
  4036fa:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4036fe:	2300      	movs	r3, #0
  403700:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  403702:	f017 0f02 	tst.w	r7, #2
  403706:	d055      	beq.n	4037b4 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403708:	4a4d      	ldr	r2, [pc, #308]	; (403840 <pmc_sleep+0x230>)
  40370a:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40370c:	4952      	ldr	r1, [pc, #328]	; (403858 <pmc_sleep+0x248>)
  40370e:	4019      	ands	r1, r3
  403710:	4b52      	ldr	r3, [pc, #328]	; (40385c <pmc_sleep+0x24c>)
  403712:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403714:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  403716:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  403718:	4b51      	ldr	r3, [pc, #324]	; (403860 <pmc_sleep+0x250>)
  40371a:	400b      	ands	r3, r1
  40371c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  403720:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  403722:	4b50      	ldr	r3, [pc, #320]	; (403864 <pmc_sleep+0x254>)
  403724:	4033      	ands	r3, r6
  403726:	2b00      	cmp	r3, #0
  403728:	d06e      	beq.n	403808 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  40372a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40372e:	4b44      	ldr	r3, [pc, #272]	; (403840 <pmc_sleep+0x230>)
  403730:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  403732:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  403734:	f1b9 0f02 	cmp.w	r9, #2
  403738:	d104      	bne.n	403744 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  40373a:	4a41      	ldr	r2, [pc, #260]	; (403840 <pmc_sleep+0x230>)
  40373c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40373e:	f013 0f02 	tst.w	r3, #2
  403742:	d0fb      	beq.n	40373c <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  403744:	4a3e      	ldr	r2, [pc, #248]	; (403840 <pmc_sleep+0x230>)
  403746:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  403748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  40374c:	f005 0070 	and.w	r0, r5, #112	; 0x70
  403750:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  403752:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403754:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403756:	f013 0f08 	tst.w	r3, #8
  40375a:	d0fb      	beq.n	403754 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  40375c:	4b39      	ldr	r3, [pc, #228]	; (403844 <pmc_sleep+0x234>)
  40375e:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  403762:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  403766:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403768:	461a      	mov	r2, r3
  40376a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40376c:	f013 0f08 	tst.w	r3, #8
  403770:	d0fb      	beq.n	40376a <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  403772:	4a33      	ldr	r2, [pc, #204]	; (403840 <pmc_sleep+0x230>)
  403774:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403776:	420b      	tst	r3, r1
  403778:	d0fc      	beq.n	403774 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  40377a:	2200      	movs	r2, #0
  40377c:	4b2f      	ldr	r3, [pc, #188]	; (40383c <pmc_sleep+0x22c>)
  40377e:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  403780:	4b39      	ldr	r3, [pc, #228]	; (403868 <pmc_sleep+0x258>)
  403782:	681b      	ldr	r3, [r3, #0]
  403784:	b11b      	cbz	r3, 40378e <pmc_sleep+0x17e>
			callback_clocks_restored();
  403786:	4798      	blx	r3
			callback_clocks_restored = NULL;
  403788:	2200      	movs	r2, #0
  40378a:	4b37      	ldr	r3, [pc, #220]	; (403868 <pmc_sleep+0x258>)
  40378c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40378e:	2201      	movs	r2, #1
  403790:	4b28      	ldr	r3, [pc, #160]	; (403834 <pmc_sleep+0x224>)
  403792:	701a      	strb	r2, [r3, #0]
  403794:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403798:	b662      	cpsie	i
  40379a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40379e:	4629      	mov	r1, r5
  4037a0:	e77e      	b.n	4036a0 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4037a2:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4037a6:	6a11      	ldr	r1, [r2, #32]
  4037a8:	4b30      	ldr	r3, [pc, #192]	; (40386c <pmc_sleep+0x25c>)
  4037aa:	400b      	ands	r3, r1
  4037ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4037b0:	6213      	str	r3, [r2, #32]
  4037b2:	e799      	b.n	4036e8 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4037b4:	f017 0f01 	tst.w	r7, #1
  4037b8:	d0b3      	beq.n	403722 <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4037ba:	4b21      	ldr	r3, [pc, #132]	; (403840 <pmc_sleep+0x230>)
  4037bc:	6a1b      	ldr	r3, [r3, #32]
  4037be:	f013 0f01 	tst.w	r3, #1
  4037c2:	d10b      	bne.n	4037dc <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4037c4:	491e      	ldr	r1, [pc, #120]	; (403840 <pmc_sleep+0x230>)
  4037c6:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4037c8:	4a29      	ldr	r2, [pc, #164]	; (403870 <pmc_sleep+0x260>)
  4037ca:	401a      	ands	r2, r3
  4037cc:	4b29      	ldr	r3, [pc, #164]	; (403874 <pmc_sleep+0x264>)
  4037ce:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4037d0:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4037d2:	460a      	mov	r2, r1
  4037d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4037d6:	f013 0f01 	tst.w	r3, #1
  4037da:	d0fb      	beq.n	4037d4 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4037dc:	4b18      	ldr	r3, [pc, #96]	; (403840 <pmc_sleep+0x230>)
  4037de:	6a1b      	ldr	r3, [r3, #32]
  4037e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4037e4:	d108      	bne.n	4037f8 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4037e6:	4a16      	ldr	r2, [pc, #88]	; (403840 <pmc_sleep+0x230>)
  4037e8:	6a11      	ldr	r1, [r2, #32]
  4037ea:	4b23      	ldr	r3, [pc, #140]	; (403878 <pmc_sleep+0x268>)
  4037ec:	430b      	orrs	r3, r1
  4037ee:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4037f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4037f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4037f6:	d0fb      	beq.n	4037f0 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4037f8:	4a11      	ldr	r2, [pc, #68]	; (403840 <pmc_sleep+0x230>)
  4037fa:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4037fc:	4b18      	ldr	r3, [pc, #96]	; (403860 <pmc_sleep+0x250>)
  4037fe:	400b      	ands	r3, r1
  403800:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  403804:	6213      	str	r3, [r2, #32]
  403806:	e78c      	b.n	403722 <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  403808:	2100      	movs	r1, #0
  40380a:	e793      	b.n	403734 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  40380c:	4a08      	ldr	r2, [pc, #32]	; (403830 <pmc_sleep+0x220>)
  40380e:	6913      	ldr	r3, [r2, #16]
  403810:	f043 0304 	orr.w	r3, r3, #4
  403814:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  403816:	4a19      	ldr	r2, [pc, #100]	; (40387c <pmc_sleep+0x26c>)
  403818:	4b19      	ldr	r3, [pc, #100]	; (403880 <pmc_sleep+0x270>)
  40381a:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  40381c:	2201      	movs	r2, #1
  40381e:	4b05      	ldr	r3, [pc, #20]	; (403834 <pmc_sleep+0x224>)
  403820:	701a      	strb	r2, [r3, #0]
  403822:	f3bf 8f5f 	dmb	sy
  403826:	b662      	cpsie	i
  __ASM volatile ("wfi");
  403828:	bf30      	wfi
  40382a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40382e:	bf00      	nop
  403830:	e000ed00 	.word	0xe000ed00
  403834:	20400177 	.word	0x20400177
  403838:	004035c1 	.word	0x004035c1
  40383c:	20400c1c 	.word	0x20400c1c
  403840:	400e0600 	.word	0x400e0600
  403844:	400e0c00 	.word	0x400e0c00
  403848:	00370008 	.word	0x00370008
  40384c:	00403581 	.word	0x00403581
  403850:	fec8ffff 	.word	0xfec8ffff
  403854:	004035c5 	.word	0x004035c5
  403858:	fec8fffc 	.word	0xfec8fffc
  40385c:	01370002 	.word	0x01370002
  403860:	ffc8ff87 	.word	0xffc8ff87
  403864:	07ff0000 	.word	0x07ff0000
  403868:	20400c20 	.word	0x20400c20
  40386c:	ffc8fffe 	.word	0xffc8fffe
  403870:	ffc8fffc 	.word	0xffc8fffc
  403874:	00370001 	.word	0x00370001
  403878:	01370000 	.word	0x01370000
  40387c:	a5000004 	.word	0xa5000004
  403880:	400e1810 	.word	0x400e1810

00403884 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  403884:	4b02      	ldr	r3, [pc, #8]	; (403890 <pmc_is_wakeup_clocks_restored+0xc>)
  403886:	7818      	ldrb	r0, [r3, #0]
}
  403888:	f080 0001 	eor.w	r0, r0, #1
  40388c:	4770      	bx	lr
  40388e:	bf00      	nop
  403890:	20400c1c 	.word	0x20400c1c

00403894 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_idle true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  403894:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  403896:	4601      	mov	r1, r0
  403898:	bb28      	cbnz	r0, 4038e6 <udd_sleep_mode+0x52>
  40389a:	4b24      	ldr	r3, [pc, #144]	; (40392c <udd_sleep_mode+0x98>)
  40389c:	781b      	ldrb	r3, [r3, #0]
  40389e:	b91b      	cbnz	r3, 4038a8 <udd_sleep_mode+0x14>
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(USBHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  4038a0:	4b22      	ldr	r3, [pc, #136]	; (40392c <udd_sleep_mode+0x98>)
  4038a2:	7019      	strb	r1, [r3, #0]
}
  4038a4:	b002      	add	sp, #8
  4038a6:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  4038a8:	4b21      	ldr	r3, [pc, #132]	; (403930 <udd_sleep_mode+0x9c>)
  4038aa:	789b      	ldrb	r3, [r3, #2]
  4038ac:	b903      	cbnz	r3, 4038b0 <udd_sleep_mode+0x1c>
  4038ae:	e7fe      	b.n	4038ae <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4038b0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4038b4:	fab3 f383 	clz	r3, r3
  4038b8:	095b      	lsrs	r3, r3, #5
  4038ba:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4038bc:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4038be:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4038c2:	2200      	movs	r2, #0
  4038c4:	4b1b      	ldr	r3, [pc, #108]	; (403934 <udd_sleep_mode+0xa0>)
  4038c6:	701a      	strb	r2, [r3, #0]
	return flags;
  4038c8:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  4038ca:	4a19      	ldr	r2, [pc, #100]	; (403930 <udd_sleep_mode+0x9c>)
  4038cc:	7893      	ldrb	r3, [r2, #2]
  4038ce:	3b01      	subs	r3, #1
  4038d0:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  4038d2:	2800      	cmp	r0, #0
  4038d4:	d0e4      	beq.n	4038a0 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  4038d6:	2201      	movs	r2, #1
  4038d8:	4b16      	ldr	r3, [pc, #88]	; (403934 <udd_sleep_mode+0xa0>)
  4038da:	701a      	strb	r2, [r3, #0]
  4038dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4038e0:	b662      	cpsie	i
  4038e2:	e7dd      	b.n	4038a0 <udd_sleep_mode+0xc>
  4038e4:	e7fe      	b.n	4038e4 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  4038e6:	4b11      	ldr	r3, [pc, #68]	; (40392c <udd_sleep_mode+0x98>)
  4038e8:	781b      	ldrb	r3, [r3, #0]
  4038ea:	2b00      	cmp	r3, #0
  4038ec:	d1d8      	bne.n	4038a0 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  4038ee:	4b10      	ldr	r3, [pc, #64]	; (403930 <udd_sleep_mode+0x9c>)
  4038f0:	789b      	ldrb	r3, [r3, #2]
  4038f2:	2bff      	cmp	r3, #255	; 0xff
  4038f4:	d0f6      	beq.n	4038e4 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4038f6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4038fa:	fab3 f383 	clz	r3, r3
  4038fe:	095b      	lsrs	r3, r3, #5
  403900:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403902:	b672      	cpsid	i
  403904:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403908:	2200      	movs	r2, #0
  40390a:	4b0a      	ldr	r3, [pc, #40]	; (403934 <udd_sleep_mode+0xa0>)
  40390c:	701a      	strb	r2, [r3, #0]
	return flags;
  40390e:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  403910:	4a07      	ldr	r2, [pc, #28]	; (403930 <udd_sleep_mode+0x9c>)
  403912:	7893      	ldrb	r3, [r2, #2]
  403914:	3301      	adds	r3, #1
  403916:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  403918:	2800      	cmp	r0, #0
  40391a:	d0c1      	beq.n	4038a0 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  40391c:	2201      	movs	r2, #1
  40391e:	4b05      	ldr	r3, [pc, #20]	; (403934 <udd_sleep_mode+0xa0>)
  403920:	701a      	strb	r2, [r3, #0]
  403922:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403926:	b662      	cpsie	i
  403928:	e7ba      	b.n	4038a0 <udd_sleep_mode+0xc>
  40392a:	bf00      	nop
  40392c:	20400c25 	.word	0x20400c25
  403930:	20401114 	.word	0x20401114
  403934:	20400177 	.word	0x20400177

00403938 <udd_ctrl_init>:
	udd_enable_endpoint_interrupt(0);
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
  403938:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40393a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40393e:	fab3 f383 	clz	r3, r3
  403942:	095b      	lsrs	r3, r3, #5
  403944:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403946:	b672      	cpsid	i
  403948:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40394c:	2200      	movs	r2, #0
  40394e:	4b0c      	ldr	r3, [pc, #48]	; (403980 <udd_ctrl_init+0x48>)
  403950:	701a      	strb	r2, [r3, #0]
	return flags;
  403952:	9b01      	ldr	r3, [sp, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
  403954:	2101      	movs	r1, #1
  403956:	4a0b      	ldr	r2, [pc, #44]	; (403984 <udd_ctrl_init+0x4c>)
  403958:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  40395a:	b123      	cbz	r3, 403966 <udd_ctrl_init+0x2e>
		cpu_irq_enable();
  40395c:	4b08      	ldr	r3, [pc, #32]	; (403980 <udd_ctrl_init+0x48>)
  40395e:	7019      	strb	r1, [r3, #0]
  403960:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403964:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
  403966:	2202      	movs	r2, #2
  403968:	4b07      	ldr	r3, [pc, #28]	; (403988 <udd_ctrl_init+0x50>)
  40396a:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
  40396c:	4a07      	ldr	r2, [pc, #28]	; (40398c <udd_ctrl_init+0x54>)
  40396e:	2300      	movs	r3, #0
  403970:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  403972:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  403974:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  403976:	4a06      	ldr	r2, [pc, #24]	; (403990 <udd_ctrl_init+0x58>)
  403978:	7013      	strb	r3, [r2, #0]
}
  40397a:	b002      	add	sp, #8
  40397c:	4770      	bx	lr
  40397e:	bf00      	nop
  403980:	20400177 	.word	0x20400177
  403984:	40038220 	.word	0x40038220
  403988:	40038160 	.word	0x40038160
  40398c:	2040111c 	.word	0x2040111c
  403990:	20400c2a 	.word	0x20400c2a

00403994 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  403994:	2205      	movs	r2, #5
  403996:	4b03      	ldr	r3, [pc, #12]	; (4039a4 <udd_ctrl_stall_data+0x10>)
  403998:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  40399a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40399e:	4b02      	ldr	r3, [pc, #8]	; (4039a8 <udd_ctrl_stall_data+0x14>)
  4039a0:	601a      	str	r2, [r3, #0]
  4039a2:	4770      	bx	lr
  4039a4:	20400c2a 	.word	0x20400c2a
  4039a8:	400381f0 	.word	0x400381f0

004039ac <udd_ctrl_send_zlp_in>:
}


static void udd_ctrl_send_zlp_in(void)
{
  4039ac:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  4039ae:	2203      	movs	r2, #3
  4039b0:	4b0f      	ldr	r3, [pc, #60]	; (4039f0 <udd_ctrl_send_zlp_in+0x44>)
  4039b2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4039b4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4039b8:	fab3 f383 	clz	r3, r3
  4039bc:	095b      	lsrs	r3, r3, #5
  4039be:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4039c0:	b672      	cpsid	i
  4039c2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4039c6:	2200      	movs	r2, #0
  4039c8:	4b0a      	ldr	r3, [pc, #40]	; (4039f4 <udd_ctrl_send_zlp_in+0x48>)
  4039ca:	701a      	strb	r2, [r3, #0]
	return flags;
  4039cc:	9801      	ldr	r0, [sp, #4]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
  4039ce:	490a      	ldr	r1, [pc, #40]	; (4039f8 <udd_ctrl_send_zlp_in+0x4c>)
  4039d0:	2201      	movs	r2, #1
  4039d2:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
  4039d4:	4b09      	ldr	r3, [pc, #36]	; (4039fc <udd_ctrl_send_zlp_in+0x50>)
  4039d6:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
  4039d8:	2208      	movs	r2, #8
  4039da:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
  4039dc:	601a      	str	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4039de:	b128      	cbz	r0, 4039ec <udd_ctrl_send_zlp_in+0x40>
		cpu_irq_enable();
  4039e0:	2201      	movs	r2, #1
  4039e2:	4b04      	ldr	r3, [pc, #16]	; (4039f4 <udd_ctrl_send_zlp_in+0x48>)
  4039e4:	701a      	strb	r2, [r3, #0]
  4039e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4039ea:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
  4039ec:	b002      	add	sp, #8
  4039ee:	4770      	bx	lr
  4039f0:	20400c2a 	.word	0x20400c2a
  4039f4:	20400177 	.word	0x20400177
  4039f8:	40038160 	.word	0x40038160
  4039fc:	400381f0 	.word	0x400381f0

00403a00 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
  403a00:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  403a02:	4b02      	ldr	r3, [pc, #8]	; (403a0c <udd_ctrl_endofrequest+0xc>)
  403a04:	691b      	ldr	r3, [r3, #16]
  403a06:	b103      	cbz	r3, 403a0a <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  403a08:	4798      	blx	r3
  403a0a:	bd08      	pop	{r3, pc}
  403a0c:	2040111c 	.word	0x2040111c

00403a10 <udd_ctrl_in_sent>:
{
  403a10:	b530      	push	{r4, r5, lr}
  403a12:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403a14:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403a18:	fab3 f383 	clz	r3, r3
  403a1c:	095b      	lsrs	r3, r3, #5
  403a1e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403a20:	b672      	cpsid	i
  403a22:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403a26:	2200      	movs	r2, #0
  403a28:	4b4f      	ldr	r3, [pc, #316]	; (403b68 <udd_ctrl_in_sent+0x158>)
  403a2a:	701a      	strb	r2, [r3, #0]
	return flags;
  403a2c:	9b01      	ldr	r3, [sp, #4]
	udd_disable_in_send_interrupt(0);
  403a2e:	2101      	movs	r1, #1
  403a30:	4a4e      	ldr	r2, [pc, #312]	; (403b6c <udd_ctrl_in_sent+0x15c>)
  403a32:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403a34:	b123      	cbz	r3, 403a40 <udd_ctrl_in_sent+0x30>
		cpu_irq_enable();
  403a36:	4b4c      	ldr	r3, [pc, #304]	; (403b68 <udd_ctrl_in_sent+0x158>)
  403a38:	7019      	strb	r1, [r3, #0]
  403a3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403a3e:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  403a40:	4b4b      	ldr	r3, [pc, #300]	; (403b70 <udd_ctrl_in_sent+0x160>)
  403a42:	781b      	ldrb	r3, [r3, #0]
  403a44:	2b03      	cmp	r3, #3
  403a46:	d05d      	beq.n	403b04 <udd_ctrl_in_sent+0xf4>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
  403a48:	4b4a      	ldr	r3, [pc, #296]	; (403b74 <udd_ctrl_in_sent+0x164>)
  403a4a:	881b      	ldrh	r3, [r3, #0]
  403a4c:	4a4a      	ldr	r2, [pc, #296]	; (403b78 <udd_ctrl_in_sent+0x168>)
  403a4e:	8994      	ldrh	r4, [r2, #12]
  403a50:	1ae4      	subs	r4, r4, r3
  403a52:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  403a54:	b9c4      	cbnz	r4, 403a88 <udd_ctrl_in_sent+0x78>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
  403a56:	4a49      	ldr	r2, [pc, #292]	; (403b7c <udd_ctrl_in_sent+0x16c>)
  403a58:	8811      	ldrh	r1, [r2, #0]
  403a5a:	440b      	add	r3, r1
  403a5c:	b29b      	uxth	r3, r3
  403a5e:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
  403a60:	4a45      	ldr	r2, [pc, #276]	; (403b78 <udd_ctrl_in_sent+0x168>)
  403a62:	88d2      	ldrh	r2, [r2, #6]
  403a64:	429a      	cmp	r2, r3
  403a66:	d052      	beq.n	403b0e <udd_ctrl_in_sent+0xfe>
					|| b_shortpacket) {
  403a68:	4b45      	ldr	r3, [pc, #276]	; (403b80 <udd_ctrl_in_sent+0x170>)
  403a6a:	781b      	ldrb	r3, [r3, #0]
  403a6c:	2b00      	cmp	r3, #0
  403a6e:	d14e      	bne.n	403b0e <udd_ctrl_in_sent+0xfe>
		if ((!udd_g_ctrlreq.over_under_run)
  403a70:	4b41      	ldr	r3, [pc, #260]	; (403b78 <udd_ctrl_in_sent+0x168>)
  403a72:	695b      	ldr	r3, [r3, #20]
  403a74:	2b00      	cmp	r3, #0
  403a76:	d067      	beq.n	403b48 <udd_ctrl_in_sent+0x138>
				|| (!udd_g_ctrlreq.over_under_run())) {
  403a78:	4798      	blx	r3
  403a7a:	2800      	cmp	r0, #0
  403a7c:	d064      	beq.n	403b48 <udd_ctrl_in_sent+0x138>
			udd_ctrl_payload_buf_cnt = 0;
  403a7e:	2200      	movs	r2, #0
  403a80:	4b3c      	ldr	r3, [pc, #240]	; (403b74 <udd_ctrl_in_sent+0x164>)
  403a82:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  403a84:	4b3c      	ldr	r3, [pc, #240]	; (403b78 <udd_ctrl_in_sent+0x168>)
  403a86:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  403a88:	2c3f      	cmp	r4, #63	; 0x3f
  403a8a:	d95d      	bls.n	403b48 <udd_ctrl_in_sent+0x138>
		b_shortpacket = false;
  403a8c:	2200      	movs	r2, #0
  403a8e:	4b3c      	ldr	r3, [pc, #240]	; (403b80 <udd_ctrl_in_sent+0x170>)
  403a90:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  403a92:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  403a94:	4b38      	ldr	r3, [pc, #224]	; (403b78 <udd_ctrl_in_sent+0x168>)
  403a96:	6899      	ldr	r1, [r3, #8]
  403a98:	4b36      	ldr	r3, [pc, #216]	; (403b74 <udd_ctrl_in_sent+0x164>)
  403a9a:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403a9c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403aa0:	fab3 f383 	clz	r3, r3
  403aa4:	095b      	lsrs	r3, r3, #5
  403aa6:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  403aa8:	b672      	cpsid	i
  403aaa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403aae:	2200      	movs	r2, #0
  403ab0:	4b2d      	ldr	r3, [pc, #180]	; (403b68 <udd_ctrl_in_sent+0x158>)
  403ab2:	701a      	strb	r2, [r3, #0]
	return flags;
  403ab4:	9d02      	ldr	r5, [sp, #8]
	if (Is_udd_out_received(0)) {
  403ab6:	4b33      	ldr	r3, [pc, #204]	; (403b84 <udd_ctrl_in_sent+0x174>)
  403ab8:	681b      	ldr	r3, [r3, #0]
  403aba:	f013 0f02 	tst.w	r3, #2
  403abe:	d147      	bne.n	403b50 <udd_ctrl_in_sent+0x140>
	for (i = 0; i < nb_remain; i++) {
  403ac0:	b154      	cbz	r4, 403ad8 <udd_ctrl_in_sent+0xc8>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  403ac2:	4401      	add	r1, r0
  403ac4:	4830      	ldr	r0, [pc, #192]	; (403b88 <udd_ctrl_in_sent+0x178>)
		*ptr_dest++ = *ptr_src++;
  403ac6:	1c43      	adds	r3, r0, #1
  403ac8:	780a      	ldrb	r2, [r1, #0]
  403aca:	b2d2      	uxtb	r2, r2
  403acc:	7002      	strb	r2, [r0, #0]
  403ace:	4618      	mov	r0, r3
  403ad0:	3101      	adds	r1, #1
	for (i = 0; i < nb_remain; i++) {
  403ad2:	b2db      	uxtb	r3, r3
  403ad4:	42a3      	cmp	r3, r4
  403ad6:	d3f6      	bcc.n	403ac6 <udd_ctrl_in_sent+0xb6>
	udd_ctrl_payload_buf_cnt += nb_remain;
  403ad8:	4b26      	ldr	r3, [pc, #152]	; (403b74 <udd_ctrl_in_sent+0x164>)
  403ada:	881a      	ldrh	r2, [r3, #0]
  403adc:	4414      	add	r4, r2
  403ade:	801c      	strh	r4, [r3, #0]
  __ASM volatile ("dsb");
  403ae0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403ae4:	f3bf 8f6f 	isb	sy
	udd_ack_in_send(0);
  403ae8:	2301      	movs	r3, #1
  403aea:	4a28      	ldr	r2, [pc, #160]	; (403b8c <udd_ctrl_in_sent+0x17c>)
  403aec:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
  403aee:	3290      	adds	r2, #144	; 0x90
  403af0:	6013      	str	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403af2:	2d00      	cmp	r5, #0
  403af4:	d036      	beq.n	403b64 <udd_ctrl_in_sent+0x154>
		cpu_irq_enable();
  403af6:	461a      	mov	r2, r3
  403af8:	4b1b      	ldr	r3, [pc, #108]	; (403b68 <udd_ctrl_in_sent+0x158>)
  403afa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  403afc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403b00:	b662      	cpsie	i
  403b02:	e02f      	b.n	403b64 <udd_ctrl_in_sent+0x154>
		udd_ctrl_endofrequest();
  403b04:	4b22      	ldr	r3, [pc, #136]	; (403b90 <udd_ctrl_in_sent+0x180>)
  403b06:	4798      	blx	r3
		udd_ctrl_init();
  403b08:	4b22      	ldr	r3, [pc, #136]	; (403b94 <udd_ctrl_in_sent+0x184>)
  403b0a:	4798      	blx	r3
		return;
  403b0c:	e02a      	b.n	403b64 <udd_ctrl_in_sent+0x154>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  403b0e:	2204      	movs	r2, #4
  403b10:	4b17      	ldr	r3, [pc, #92]	; (403b70 <udd_ctrl_in_sent+0x160>)
  403b12:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403b14:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403b18:	fab3 f383 	clz	r3, r3
  403b1c:	095b      	lsrs	r3, r3, #5
  403b1e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  403b20:	b672      	cpsid	i
  403b22:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403b26:	2200      	movs	r2, #0
  403b28:	4b0f      	ldr	r3, [pc, #60]	; (403b68 <udd_ctrl_in_sent+0x158>)
  403b2a:	701a      	strb	r2, [r3, #0]
	return flags;
  403b2c:	9a03      	ldr	r2, [sp, #12]
	udd_ack_nak_in(0);
  403b2e:	2310      	movs	r3, #16
  403b30:	4916      	ldr	r1, [pc, #88]	; (403b8c <udd_ctrl_in_sent+0x17c>)
  403b32:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
  403b34:	3190      	adds	r1, #144	; 0x90
  403b36:	600b      	str	r3, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403b38:	b1a2      	cbz	r2, 403b64 <udd_ctrl_in_sent+0x154>
		cpu_irq_enable();
  403b3a:	2201      	movs	r2, #1
  403b3c:	4b0a      	ldr	r3, [pc, #40]	; (403b68 <udd_ctrl_in_sent+0x158>)
  403b3e:	701a      	strb	r2, [r3, #0]
  403b40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403b44:	b662      	cpsie	i
  403b46:	e00d      	b.n	403b64 <udd_ctrl_in_sent+0x154>
		b_shortpacket = true;
  403b48:	2201      	movs	r2, #1
  403b4a:	4b0d      	ldr	r3, [pc, #52]	; (403b80 <udd_ctrl_in_sent+0x170>)
  403b4c:	701a      	strb	r2, [r3, #0]
  403b4e:	e7a1      	b.n	403a94 <udd_ctrl_in_sent+0x84>
	if (cpu_irq_is_enabled_flags(flags))
  403b50:	b12d      	cbz	r5, 403b5e <udd_ctrl_in_sent+0x14e>
		cpu_irq_enable();
  403b52:	2201      	movs	r2, #1
  403b54:	4b04      	ldr	r3, [pc, #16]	; (403b68 <udd_ctrl_in_sent+0x158>)
  403b56:	701a      	strb	r2, [r3, #0]
  403b58:	f3bf 8f5f 	dmb	sy
  403b5c:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  403b5e:	2204      	movs	r2, #4
  403b60:	4b03      	ldr	r3, [pc, #12]	; (403b70 <udd_ctrl_in_sent+0x160>)
  403b62:	701a      	strb	r2, [r3, #0]
}
  403b64:	b005      	add	sp, #20
  403b66:	bd30      	pop	{r4, r5, pc}
  403b68:	20400177 	.word	0x20400177
  403b6c:	40038220 	.word	0x40038220
  403b70:	20400c2a 	.word	0x20400c2a
  403b74:	20400c26 	.word	0x20400c26
  403b78:	2040111c 	.word	0x2040111c
  403b7c:	20400c28 	.word	0x20400c28
  403b80:	20400c24 	.word	0x20400c24
  403b84:	40038130 	.word	0x40038130
  403b88:	a0100000 	.word	0xa0100000
  403b8c:	40038160 	.word	0x40038160
  403b90:	00403a01 	.word	0x00403a01
  403b94:	00403939 	.word	0x00403939

00403b98 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
  403b98:	7d03      	ldrb	r3, [r0, #20]
  403b9a:	f013 0f01 	tst.w	r3, #1
  403b9e:	d013      	beq.n	403bc8 <udd_ep_finish_job+0x30>
{
  403ba0:	b510      	push	{r4, lr}
  403ba2:	460c      	mov	r4, r1
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
  403ba4:	7d03      	ldrb	r3, [r0, #20]
  403ba6:	f36f 0300 	bfc	r3, #0, #1
  403baa:	7503      	strb	r3, [r0, #20]
	if (NULL == ptr_job->call_trans) {
  403bac:	6803      	ldr	r3, [r0, #0]
  403bae:	b153      	cbz	r3, 403bc6 <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
  403bb0:	4906      	ldr	r1, [pc, #24]	; (403bcc <udd_ep_finish_job+0x34>)
  403bb2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  403bb6:	f411 7f80 	tst.w	r1, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
  403bba:	bf18      	it	ne
  403bbc:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
  403bc0:	6881      	ldr	r1, [r0, #8]
  403bc2:	4620      	mov	r0, r4
  403bc4:	4798      	blx	r3
  403bc6:	bd10      	pop	{r4, pc}
  403bc8:	4770      	bx	lr
  403bca:	bf00      	nop
  403bcc:	40038100 	.word	0x40038100

00403bd0 <udd_ep_trans_done>:
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
  403bd0:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
  403bd2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  403bd6:	4a5f      	ldr	r2, [pc, #380]	; (403d54 <udd_ep_trans_done+0x184>)
  403bd8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  403bdc:	7d12      	ldrb	r2, [r2, #20]
  403bde:	f012 0f01 	tst.w	r2, #1
  403be2:	f000 80b6 	beq.w	403d52 <udd_ep_trans_done+0x182>
{
  403be6:	b5f0      	push	{r4, r5, r6, r7, lr}
  403be8:	b083      	sub	sp, #12
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
  403bea:	460a      	mov	r2, r1
  403bec:	4959      	ldr	r1, [pc, #356]	; (403d54 <udd_ep_trans_done+0x184>)
  403bee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  403bf2:	68d1      	ldr	r1, [r2, #12]
  403bf4:	6892      	ldr	r2, [r2, #8]
  403bf6:	4291      	cmp	r1, r2
  403bf8:	d078      	beq.n	403cec <udd_ep_trans_done+0x11c>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
  403bfa:	1a52      	subs	r2, r2, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
  403bfc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  403c00:	d81b      	bhi.n	403c3a <udd_ep_trans_done+0x6a>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
  403c02:	0417      	lsls	r7, r2, #16
		}
		if (Is_udd_endpoint_in(ep)) {
  403c04:	4c54      	ldr	r4, [pc, #336]	; (403d58 <udd_ep_trans_done+0x188>)
  403c06:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  403c0a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403c0e:	d018      	beq.n	403c42 <udd_ep_trans_done+0x72>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
  403c10:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  403c14:	f3c5 1502 	ubfx	r5, r5, #4, #3
  403c18:	2408      	movs	r4, #8
  403c1a:	40ac      	lsls	r4, r5
  403c1c:	3c01      	subs	r4, #1
  403c1e:	4214      	tst	r4, r2
  403c20:	d017      	beq.n	403c52 <udd_ep_trans_done+0x82>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  403c22:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
  403c26:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  403c2a:	4d4a      	ldr	r5, [pc, #296]	; (403d54 <udd_ep_trans_done+0x184>)
  403c2c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
  403c30:	7d25      	ldrb	r5, [r4, #20]
  403c32:	f36f 0541 	bfc	r5, #1, #1
  403c36:	7525      	strb	r5, [r4, #20]
  403c38:	e00b      	b.n	403c52 <udd_ep_trans_done+0x82>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
  403c3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  403c3e:	2700      	movs	r7, #0
  403c40:	e7e0      	b.n	403c04 <udd_ep_trans_done+0x34>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
  403c42:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  403c46:	f3c5 25c1 	ubfx	r5, r5, #11, #2
  403c4a:	2d01      	cmp	r5, #1
  403c4c:	d037      	beq.n	403cbe <udd_ep_trans_done+0xee>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT
  403c4e:	f047 0714 	orr.w	r7, r7, #20
						| USBHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
  403c52:	4c42      	ldr	r4, [pc, #264]	; (403d5c <udd_ep_trans_done+0x18c>)
  403c54:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  403c58:	eb03 0543 	add.w	r5, r3, r3, lsl #1
  403c5c:	4e3d      	ldr	r6, [pc, #244]	; (403d54 <udd_ep_trans_done+0x184>)
  403c5e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  403c62:	686d      	ldr	r5, [r5, #4]
  403c64:	4429      	add	r1, r5
  403c66:	6061      	str	r1, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403c68:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403c6c:	fab1 f181 	clz	r1, r1
  403c70:	0949      	lsrs	r1, r1, #5
  403c72:	9101      	str	r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403c74:	b672      	cpsid	i
  403c76:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403c7a:	2500      	movs	r5, #0
  403c7c:	4938      	ldr	r1, [pc, #224]	; (403d60 <udd_ep_trans_done+0x190>)
  403c7e:	700d      	strb	r5, [r1, #0]
	return flags;
  403c80:	9d01      	ldr	r5, [sp, #4]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
  403c82:	68e1      	ldr	r1, [r4, #12]
  403c84:	f011 0f10 	tst.w	r1, #16
  403c88:	d122      	bne.n	403cd0 <udd_ep_trans_done+0x100>
		udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT |
  403c8a:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& USBHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
  403c8e:	60a7      	str	r7, [r4, #8]
			ptr_job->buf_cnt += next_trans;
  403c90:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  403c94:	eb06 01c0 	add.w	r1, r6, r0, lsl #3
  403c98:	68c8      	ldr	r0, [r1, #12]
  403c9a:	4410      	add	r0, r2
  403c9c:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
  403c9e:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
  403ca0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  403ca4:	fa00 f303 	lsl.w	r3, r0, r3
  403ca8:	4a2e      	ldr	r2, [pc, #184]	; (403d64 <udd_ep_trans_done+0x194>)
  403caa:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
  403cac:	2d00      	cmp	r5, #0
  403cae:	d04e      	beq.n	403d4e <udd_ep_trans_done+0x17e>
		cpu_irq_enable();
  403cb0:	2201      	movs	r2, #1
  403cb2:	4b2b      	ldr	r3, [pc, #172]	; (403d60 <udd_ep_trans_done+0x190>)
  403cb4:	701a      	strb	r2, [r3, #0]
  403cb6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403cba:	b662      	cpsie	i
  403cbc:	e047      	b.n	403d4e <udd_ep_trans_done+0x17e>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
  403cbe:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  403cc2:	f3c5 1502 	ubfx	r5, r5, #4, #3
  403cc6:	2408      	movs	r4, #8
  403cc8:	40ac      	lsls	r4, r5
  403cca:	42a2      	cmp	r2, r4
  403ccc:	d8c1      	bhi.n	403c52 <udd_ep_trans_done+0x82>
  403cce:	e7be      	b.n	403c4e <udd_ep_trans_done+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
  403cd0:	b12d      	cbz	r5, 403cde <udd_ep_trans_done+0x10e>
		cpu_irq_enable();
  403cd2:	2101      	movs	r1, #1
  403cd4:	4a22      	ldr	r2, [pc, #136]	; (403d60 <udd_ep_trans_done+0x190>)
  403cd6:	7011      	strb	r1, [r2, #0]
  403cd8:	f3bf 8f5f 	dmb	sy
  403cdc:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
  403cde:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  403ce2:	491c      	ldr	r1, [pc, #112]	; (403d54 <udd_ep_trans_done+0x184>)
  403ce4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  403ce8:	68d1      	ldr	r1, [r2, #12]
  403cea:	6091      	str	r1, [r2, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
  403cec:	4a1a      	ldr	r2, [pc, #104]	; (403d58 <udd_ep_trans_done+0x188>)
  403cee:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  403cf2:	f412 7f80 	tst.w	r2, #256	; 0x100
  403cf6:	d021      	beq.n	403d3c <udd_ep_trans_done+0x16c>
		if (ptr_job->b_shortpacket) {
  403cf8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  403cfc:	4915      	ldr	r1, [pc, #84]	; (403d54 <udd_ep_trans_done+0x184>)
  403cfe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  403d02:	7d12      	ldrb	r2, [r2, #20]
  403d04:	f012 0f02 	tst.w	r2, #2
  403d08:	d018      	beq.n	403d3c <udd_ep_trans_done+0x16c>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
  403d0a:	2201      	movs	r2, #1
  403d0c:	4b16      	ldr	r3, [pc, #88]	; (403d68 <udd_ep_trans_done+0x198>)
  403d0e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (Is_udd_write_enabled(ep)) {
  403d12:	3b30      	subs	r3, #48	; 0x30
  403d14:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  403d18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  403d1c:	d002      	beq.n	403d24 <udd_ep_trans_done+0x154>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
  403d1e:	4b13      	ldr	r3, [pc, #76]	; (403d6c <udd_ep_trans_done+0x19c>)
  403d20:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
  403d24:	2201      	movs	r2, #1
  403d26:	4b12      	ldr	r3, [pc, #72]	; (403d70 <udd_ep_trans_done+0x1a0>)
  403d28:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_enable_endpoint_interrupt(ep);
  403d2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403d30:	fa02 f000 	lsl.w	r0, r2, r0
  403d34:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
  403d38:	6198      	str	r0, [r3, #24]
			return;
  403d3a:	e008      	b.n	403d4e <udd_ep_trans_done+0x17e>
  403d3c:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
  403d3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	} else {
		_dcache_invalidate(ptr_job->buf, ptr_job->buf_size);
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
  403d42:	2100      	movs	r1, #0
  403d44:	4803      	ldr	r0, [pc, #12]	; (403d54 <udd_ep_trans_done+0x184>)
  403d46:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
  403d4a:	4b0a      	ldr	r3, [pc, #40]	; (403d74 <udd_ep_trans_done+0x1a4>)
  403d4c:	4798      	blx	r3
}
  403d4e:	b003      	add	sp, #12
  403d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d52:	4770      	bx	lr
  403d54:	20400c2c 	.word	0x20400c2c
  403d58:	40038100 	.word	0x40038100
  403d5c:	40038300 	.word	0x40038300
  403d60:	20400177 	.word	0x20400177
  403d64:	40038000 	.word	0x40038000
  403d68:	40038160 	.word	0x40038160
  403d6c:	40038190 	.word	0x40038190
  403d70:	400381f0 	.word	0x400381f0
  403d74:	00403b99 	.word	0x00403b99

00403d78 <USBHS_Handler>:
{
  403d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403d7c:	b085      	sub	sp, #20
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  403d7e:	4b87      	ldr	r3, [pc, #540]	; (403f9c <USBHS_Handler+0x224>)
  403d80:	4798      	blx	r3
  403d82:	b920      	cbnz	r0, 403d8e <USBHS_Handler+0x16>
  403d84:	4b86      	ldr	r3, [pc, #536]	; (403fa0 <USBHS_Handler+0x228>)
  403d86:	685b      	ldr	r3, [r3, #4]
  403d88:	f013 0f01 	tst.w	r3, #1
  403d8c:	d011      	beq.n	403db2 <USBHS_Handler+0x3a>
	if (Is_udd_sof()) {
  403d8e:	4b84      	ldr	r3, [pc, #528]	; (403fa0 <USBHS_Handler+0x228>)
  403d90:	685b      	ldr	r3, [r3, #4]
  403d92:	f013 0f04 	tst.w	r3, #4
  403d96:	d016      	beq.n	403dc6 <USBHS_Handler+0x4e>
		udd_ack_sof();
  403d98:	4b81      	ldr	r3, [pc, #516]	; (403fa0 <USBHS_Handler+0x228>)
  403d9a:	2204      	movs	r2, #4
  403d9c:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
  403d9e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
  403da2:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  403da6:	d00b      	beq.n	403dc0 <USBHS_Handler+0x48>
		UDC_SOF_EVENT();
  403da8:	4b7e      	ldr	r3, [pc, #504]	; (403fa4 <USBHS_Handler+0x22c>)
  403daa:	4798      	blx	r3
}
  403dac:	b005      	add	sp, #20
  403dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("cpsid i" : : : "memory");
  403db2:	b672      	cpsid	i
  403db4:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  403db8:	2200      	movs	r2, #0
  403dba:	4b7b      	ldr	r3, [pc, #492]	; (403fa8 <USBHS_Handler+0x230>)
  403dbc:	701a      	strb	r2, [r3, #0]
		return;
  403dbe:	e7f5      	b.n	403dac <USBHS_Handler+0x34>
			udc_sof_notify();
  403dc0:	4b7a      	ldr	r3, [pc, #488]	; (403fac <USBHS_Handler+0x234>)
  403dc2:	4798      	blx	r3
  403dc4:	e7f0      	b.n	403da8 <USBHS_Handler+0x30>
	if (Is_udd_msof()) {
  403dc6:	4b76      	ldr	r3, [pc, #472]	; (403fa0 <USBHS_Handler+0x228>)
  403dc8:	685b      	ldr	r3, [r3, #4]
  403dca:	f013 0f02 	tst.w	r3, #2
  403dce:	d133      	bne.n	403e38 <USBHS_Handler+0xc0>
	if (!Is_udd_endpoint_interrupt(0)) {
  403dd0:	4b73      	ldr	r3, [pc, #460]	; (403fa0 <USBHS_Handler+0x228>)
  403dd2:	685b      	ldr	r3, [r3, #4]
  403dd4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  403dd8:	d026      	beq.n	403e28 <USBHS_Handler+0xb0>
	udd_disable_nak_in_interrupt(0);
  403dda:	4b75      	ldr	r3, [pc, #468]	; (403fb0 <USBHS_Handler+0x238>)
  403ddc:	2210      	movs	r2, #16
  403dde:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
  403de0:	2208      	movs	r2, #8
  403de2:	601a      	str	r2, [r3, #0]
	if (Is_udd_setup_received(0)) {
  403de4:	3bf0      	subs	r3, #240	; 0xf0
  403de6:	681b      	ldr	r3, [r3, #0]
  403de8:	f013 0f04 	tst.w	r3, #4
  403dec:	d12a      	bne.n	403e44 <USBHS_Handler+0xcc>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
  403dee:	4b71      	ldr	r3, [pc, #452]	; (403fb4 <USBHS_Handler+0x23c>)
  403df0:	681b      	ldr	r3, [r3, #0]
  403df2:	f013 0f01 	tst.w	r3, #1
  403df6:	d005      	beq.n	403e04 <USBHS_Handler+0x8c>
  403df8:	4b6f      	ldr	r3, [pc, #444]	; (403fb8 <USBHS_Handler+0x240>)
  403dfa:	681b      	ldr	r3, [r3, #0]
  403dfc:	f013 0f01 	tst.w	r3, #1
  403e00:	f040 808b 	bne.w	403f1a <USBHS_Handler+0x1a2>
	if (Is_udd_out_received(0)) {
  403e04:	4b6b      	ldr	r3, [pc, #428]	; (403fb4 <USBHS_Handler+0x23c>)
  403e06:	681b      	ldr	r3, [r3, #0]
  403e08:	f013 0f02 	tst.w	r3, #2
  403e0c:	f040 8088 	bne.w	403f20 <USBHS_Handler+0x1a8>
	if (Is_udd_nak_out(0)) {
  403e10:	4b68      	ldr	r3, [pc, #416]	; (403fb4 <USBHS_Handler+0x23c>)
  403e12:	681b      	ldr	r3, [r3, #0]
  403e14:	f013 0f08 	tst.w	r3, #8
  403e18:	f040 8135 	bne.w	404086 <USBHS_Handler+0x30e>
	if (Is_udd_nak_in(0)) {
  403e1c:	4b65      	ldr	r3, [pc, #404]	; (403fb4 <USBHS_Handler+0x23c>)
  403e1e:	681b      	ldr	r3, [r3, #0]
  403e20:	f013 0f10 	tst.w	r3, #16
  403e24:	f040 8142 	bne.w	4040ac <USBHS_Handler+0x334>
	for (i = 0; i < nb_data; i++) {
  403e28:	4e64      	ldr	r6, [pc, #400]	; (403fbc <USBHS_Handler+0x244>)
  403e2a:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  403e2c:	4a5c      	ldr	r2, [pc, #368]	; (403fa0 <USBHS_Handler+0x228>)
  403e2e:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  403e32:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  403e36:	e184      	b.n	404142 <USBHS_Handler+0x3ca>
		udd_ack_msof();
  403e38:	2202      	movs	r2, #2
  403e3a:	4b59      	ldr	r3, [pc, #356]	; (403fa0 <USBHS_Handler+0x228>)
  403e3c:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
  403e3e:	4b5b      	ldr	r3, [pc, #364]	; (403fac <USBHS_Handler+0x234>)
  403e40:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  403e42:	e7b3      	b.n	403dac <USBHS_Handler+0x34>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  403e44:	4b5e      	ldr	r3, [pc, #376]	; (403fc0 <USBHS_Handler+0x248>)
  403e46:	781b      	ldrb	r3, [r3, #0]
  403e48:	2b00      	cmp	r3, #0
  403e4a:	d147      	bne.n	403edc <USBHS_Handler+0x164>
	if (8 != udd_byte_count(0)) {
  403e4c:	4b59      	ldr	r3, [pc, #356]	; (403fb4 <USBHS_Handler+0x23c>)
  403e4e:	681b      	ldr	r3, [r3, #0]
  403e50:	f3c3 530a 	ubfx	r3, r3, #20, #11
  403e54:	2b08      	cmp	r3, #8
  403e56:	d146      	bne.n	403ee6 <USBHS_Handler+0x16e>
	uint16_t nb_data = udd_byte_count(0);
  403e58:	4b56      	ldr	r3, [pc, #344]	; (403fb4 <USBHS_Handler+0x23c>)
  403e5a:	6818      	ldr	r0, [r3, #0]
  403e5c:	f3c0 500a 	ubfx	r0, r0, #20, #11
	for (i = 0; i < nb_data; i++) {
  403e60:	b148      	cbz	r0, 403e76 <USBHS_Handler+0xfe>
  403e62:	4b58      	ldr	r3, [pc, #352]	; (403fc4 <USBHS_Handler+0x24c>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
  403e64:	4c58      	ldr	r4, [pc, #352]	; (403fc8 <USBHS_Handler+0x250>)
  403e66:	1c5a      	adds	r2, r3, #1
  403e68:	7819      	ldrb	r1, [r3, #0]
  403e6a:	b2db      	uxtb	r3, r3
  403e6c:	5519      	strb	r1, [r3, r4]
  403e6e:	4613      	mov	r3, r2
	for (i = 0; i < nb_data; i++) {
  403e70:	b2d2      	uxtb	r2, r2
  403e72:	4282      	cmp	r2, r0
  403e74:	d3f7      	bcc.n	403e66 <USBHS_Handler+0xee>
	if (udc_process_setup() == false) {
  403e76:	4b55      	ldr	r3, [pc, #340]	; (403fcc <USBHS_Handler+0x254>)
  403e78:	4798      	blx	r3
  403e7a:	2800      	cmp	r0, #0
  403e7c:	d039      	beq.n	403ef2 <USBHS_Handler+0x17a>
	udd_ack_setup_received(0);
  403e7e:	2204      	movs	r2, #4
  403e80:	4b53      	ldr	r3, [pc, #332]	; (403fd0 <USBHS_Handler+0x258>)
  403e82:	601a      	str	r2, [r3, #0]
	if (Udd_setup_is_in()) {
  403e84:	4b50      	ldr	r3, [pc, #320]	; (403fc8 <USBHS_Handler+0x250>)
  403e86:	f993 3000 	ldrsb.w	r3, [r3]
  403e8a:	2b00      	cmp	r3, #0
  403e8c:	db37      	blt.n	403efe <USBHS_Handler+0x186>
		if (0 == udd_g_ctrlreq.req.wLength) {
  403e8e:	4b4e      	ldr	r3, [pc, #312]	; (403fc8 <USBHS_Handler+0x250>)
  403e90:	88db      	ldrh	r3, [r3, #6]
  403e92:	2b00      	cmp	r3, #0
  403e94:	d03e      	beq.n	403f14 <USBHS_Handler+0x19c>
		udd_ctrl_prev_payload_buf_cnt = 0;
  403e96:	2200      	movs	r2, #0
  403e98:	4b4e      	ldr	r3, [pc, #312]	; (403fd4 <USBHS_Handler+0x25c>)
  403e9a:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
  403e9c:	4b4e      	ldr	r3, [pc, #312]	; (403fd8 <USBHS_Handler+0x260>)
  403e9e:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  403ea0:	2101      	movs	r1, #1
  403ea2:	4b47      	ldr	r3, [pc, #284]	; (403fc0 <USBHS_Handler+0x248>)
  403ea4:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
  403ea6:	2110      	movs	r1, #16
  403ea8:	4b49      	ldr	r3, [pc, #292]	; (403fd0 <USBHS_Handler+0x258>)
  403eaa:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403eac:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403eb0:	fab3 f383 	clz	r3, r3
  403eb4:	095b      	lsrs	r3, r3, #5
  403eb6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403eb8:	b672      	cpsid	i
  403eba:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403ebe:	4b3a      	ldr	r3, [pc, #232]	; (403fa8 <USBHS_Handler+0x230>)
  403ec0:	701a      	strb	r2, [r3, #0]
	return flags;
  403ec2:	9b01      	ldr	r3, [sp, #4]
		udd_enable_nak_in_interrupt(0);
  403ec4:	4a45      	ldr	r2, [pc, #276]	; (403fdc <USBHS_Handler+0x264>)
  403ec6:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403ec8:	2b00      	cmp	r3, #0
  403eca:	f43f af6f 	beq.w	403dac <USBHS_Handler+0x34>
		cpu_irq_enable();
  403ece:	2201      	movs	r2, #1
  403ed0:	4b35      	ldr	r3, [pc, #212]	; (403fa8 <USBHS_Handler+0x230>)
  403ed2:	701a      	strb	r2, [r3, #0]
  403ed4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403ed8:	b662      	cpsie	i
  403eda:	e767      	b.n	403dac <USBHS_Handler+0x34>
		udd_ctrl_endofrequest();
  403edc:	4b40      	ldr	r3, [pc, #256]	; (403fe0 <USBHS_Handler+0x268>)
  403ede:	4798      	blx	r3
		udd_ctrl_init();
  403ee0:	4b40      	ldr	r3, [pc, #256]	; (403fe4 <USBHS_Handler+0x26c>)
  403ee2:	4798      	blx	r3
  403ee4:	e7b2      	b.n	403e4c <USBHS_Handler+0xd4>
		udd_ctrl_stall_data();
  403ee6:	4b40      	ldr	r3, [pc, #256]	; (403fe8 <USBHS_Handler+0x270>)
  403ee8:	4798      	blx	r3
		udd_ack_setup_received(0);
  403eea:	2204      	movs	r2, #4
  403eec:	4b38      	ldr	r3, [pc, #224]	; (403fd0 <USBHS_Handler+0x258>)
  403eee:	601a      	str	r2, [r3, #0]
  403ef0:	e75c      	b.n	403dac <USBHS_Handler+0x34>
		udd_ctrl_stall_data();
  403ef2:	4b3d      	ldr	r3, [pc, #244]	; (403fe8 <USBHS_Handler+0x270>)
  403ef4:	4798      	blx	r3
		udd_ack_setup_received(0);
  403ef6:	2204      	movs	r2, #4
  403ef8:	4b35      	ldr	r3, [pc, #212]	; (403fd0 <USBHS_Handler+0x258>)
  403efa:	601a      	str	r2, [r3, #0]
  403efc:	e756      	b.n	403dac <USBHS_Handler+0x34>
		udd_ctrl_prev_payload_buf_cnt = 0;
  403efe:	2300      	movs	r3, #0
  403f00:	4a34      	ldr	r2, [pc, #208]	; (403fd4 <USBHS_Handler+0x25c>)
  403f02:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
  403f04:	4a34      	ldr	r2, [pc, #208]	; (403fd8 <USBHS_Handler+0x260>)
  403f06:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  403f08:	2202      	movs	r2, #2
  403f0a:	4b2d      	ldr	r3, [pc, #180]	; (403fc0 <USBHS_Handler+0x248>)
  403f0c:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  403f0e:	4b37      	ldr	r3, [pc, #220]	; (403fec <USBHS_Handler+0x274>)
  403f10:	4798      	blx	r3
  403f12:	e74b      	b.n	403dac <USBHS_Handler+0x34>
			udd_ctrl_send_zlp_in();
  403f14:	4b36      	ldr	r3, [pc, #216]	; (403ff0 <USBHS_Handler+0x278>)
  403f16:	4798      	blx	r3
  403f18:	e748      	b.n	403dac <USBHS_Handler+0x34>
		udd_ctrl_in_sent();
  403f1a:	4b34      	ldr	r3, [pc, #208]	; (403fec <USBHS_Handler+0x274>)
  403f1c:	4798      	blx	r3
  403f1e:	e745      	b.n	403dac <USBHS_Handler+0x34>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  403f20:	4b27      	ldr	r3, [pc, #156]	; (403fc0 <USBHS_Handler+0x248>)
  403f22:	781b      	ldrb	r3, [r3, #0]
  403f24:	2b01      	cmp	r3, #1
  403f26:	d00b      	beq.n	403f40 <USBHS_Handler+0x1c8>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  403f28:	2b02      	cmp	r3, #2
  403f2a:	d004      	beq.n	403f36 <USBHS_Handler+0x1be>
  403f2c:	2b04      	cmp	r3, #4
  403f2e:	d002      	beq.n	403f36 <USBHS_Handler+0x1be>
			udd_ctrl_stall_data();
  403f30:	4b2d      	ldr	r3, [pc, #180]	; (403fe8 <USBHS_Handler+0x270>)
  403f32:	4798      	blx	r3
  403f34:	e001      	b.n	403f3a <USBHS_Handler+0x1c2>
			udd_ctrl_endofrequest();
  403f36:	4b2a      	ldr	r3, [pc, #168]	; (403fe0 <USBHS_Handler+0x268>)
  403f38:	4798      	blx	r3
		udd_ctrl_init();
  403f3a:	4b2a      	ldr	r3, [pc, #168]	; (403fe4 <USBHS_Handler+0x26c>)
  403f3c:	4798      	blx	r3
  403f3e:	e735      	b.n	403dac <USBHS_Handler+0x34>
	nb_data = udd_byte_count(0);
  403f40:	4b1c      	ldr	r3, [pc, #112]	; (403fb4 <USBHS_Handler+0x23c>)
  403f42:	6818      	ldr	r0, [r3, #0]
  403f44:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
  403f48:	4b1f      	ldr	r3, [pc, #124]	; (403fc8 <USBHS_Handler+0x250>)
  403f4a:	899b      	ldrh	r3, [r3, #12]
  403f4c:	4a22      	ldr	r2, [pc, #136]	; (403fd8 <USBHS_Handler+0x260>)
  403f4e:	8814      	ldrh	r4, [r2, #0]
  403f50:	1822      	adds	r2, r4, r0
  403f52:	4293      	cmp	r3, r2
  403f54:	da01      	bge.n	403f5a <USBHS_Handler+0x1e2>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
  403f56:	1b1b      	subs	r3, r3, r4
  403f58:	b298      	uxth	r0, r3
	volatile uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  403f5a:	4b1b      	ldr	r3, [pc, #108]	; (403fc8 <USBHS_Handler+0x250>)
  403f5c:	6899      	ldr	r1, [r3, #8]
  403f5e:	4421      	add	r1, r4
	for (i = 0; i < nb_data; i++) {
  403f60:	b178      	cbz	r0, 403f82 <USBHS_Handler+0x20a>
  403f62:	4a18      	ldr	r2, [pc, #96]	; (403fc4 <USBHS_Handler+0x24c>)
		*ptr_dest++ = *ptr_src++;
  403f64:	1c53      	adds	r3, r2, #1
  403f66:	7812      	ldrb	r2, [r2, #0]
  403f68:	b2d2      	uxtb	r2, r2
  403f6a:	700a      	strb	r2, [r1, #0]
  403f6c:	3101      	adds	r1, #1
  403f6e:	461a      	mov	r2, r3
	for (i = 0; i < nb_data; i++) {
  403f70:	b2db      	uxtb	r3, r3
  403f72:	4283      	cmp	r3, r0
  403f74:	d3f6      	bcc.n	403f64 <USBHS_Handler+0x1ec>
	udd_ctrl_payload_buf_cnt += nb_data;
  403f76:	4404      	add	r4, r0
  403f78:	b2a4      	uxth	r4, r4
  403f7a:	4b17      	ldr	r3, [pc, #92]	; (403fd8 <USBHS_Handler+0x260>)
  403f7c:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  403f7e:	2840      	cmp	r0, #64	; 0x40
  403f80:	d038      	beq.n	403ff4 <USBHS_Handler+0x27c>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
  403f82:	4b11      	ldr	r3, [pc, #68]	; (403fc8 <USBHS_Handler+0x250>)
  403f84:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  403f86:	695b      	ldr	r3, [r3, #20]
  403f88:	b113      	cbz	r3, 403f90 <USBHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
  403f8a:	4798      	blx	r3
  403f8c:	2800      	cmp	r0, #0
  403f8e:	d05a      	beq.n	404046 <USBHS_Handler+0x2ce>
		udd_ack_out_received(0);
  403f90:	2202      	movs	r2, #2
  403f92:	4b0f      	ldr	r3, [pc, #60]	; (403fd0 <USBHS_Handler+0x258>)
  403f94:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
  403f96:	4b16      	ldr	r3, [pc, #88]	; (403ff0 <USBHS_Handler+0x278>)
  403f98:	4798      	blx	r3
  403f9a:	e707      	b.n	403dac <USBHS_Handler+0x34>
  403f9c:	00403885 	.word	0x00403885
  403fa0:	40038000 	.word	0x40038000
  403fa4:	00407241 	.word	0x00407241
  403fa8:	20400177 	.word	0x20400177
  403fac:	00402cf9 	.word	0x00402cf9
  403fb0:	40038220 	.word	0x40038220
  403fb4:	40038130 	.word	0x40038130
  403fb8:	400381c0 	.word	0x400381c0
  403fbc:	40038134 	.word	0x40038134
  403fc0:	20400c2a 	.word	0x20400c2a
  403fc4:	a0100000 	.word	0xa0100000
  403fc8:	2040111c 	.word	0x2040111c
  403fcc:	00402d39 	.word	0x00402d39
  403fd0:	40038160 	.word	0x40038160
  403fd4:	20400c28 	.word	0x20400c28
  403fd8:	20400c26 	.word	0x20400c26
  403fdc:	400381f0 	.word	0x400381f0
  403fe0:	00403a01 	.word	0x00403a01
  403fe4:	00403939 	.word	0x00403939
  403fe8:	00403995 	.word	0x00403995
  403fec:	00403a11 	.word	0x00403a11
  403ff0:	004039ad 	.word	0x004039ad
			|| (udd_g_ctrlreq.req.wLength <=
  403ff4:	4ba8      	ldr	r3, [pc, #672]	; (404298 <USBHS_Handler+0x520>)
  403ff6:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
  403ff8:	4ba8      	ldr	r3, [pc, #672]	; (40429c <USBHS_Handler+0x524>)
  403ffa:	881b      	ldrh	r3, [r3, #0]
  403ffc:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
  403ffe:	429a      	cmp	r2, r3
  404000:	ddbf      	ble.n	403f82 <USBHS_Handler+0x20a>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
  404002:	4ba5      	ldr	r3, [pc, #660]	; (404298 <USBHS_Handler+0x520>)
  404004:	899b      	ldrh	r3, [r3, #12]
  404006:	42a3      	cmp	r3, r4
  404008:	d023      	beq.n	404052 <USBHS_Handler+0x2da>
	udd_ack_out_received(0);
  40400a:	4ba5      	ldr	r3, [pc, #660]	; (4042a0 <USBHS_Handler+0x528>)
  40400c:	2202      	movs	r2, #2
  40400e:	601a      	str	r2, [r3, #0]
	udd_ack_nak_in(0);
  404010:	2210      	movs	r2, #16
  404012:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404014:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404018:	fab3 f383 	clz	r3, r3
  40401c:	095b      	lsrs	r3, r3, #5
  40401e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  404020:	b672      	cpsid	i
  404022:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404026:	2100      	movs	r1, #0
  404028:	4b9e      	ldr	r3, [pc, #632]	; (4042a4 <USBHS_Handler+0x52c>)
  40402a:	7019      	strb	r1, [r3, #0]
	return flags;
  40402c:	9b02      	ldr	r3, [sp, #8]
	udd_enable_nak_in_interrupt(0);
  40402e:	499e      	ldr	r1, [pc, #632]	; (4042a8 <USBHS_Handler+0x530>)
  404030:	600a      	str	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  404032:	2b00      	cmp	r3, #0
  404034:	f43f aeba 	beq.w	403dac <USBHS_Handler+0x34>
		cpu_irq_enable();
  404038:	2201      	movs	r2, #1
  40403a:	4b9a      	ldr	r3, [pc, #616]	; (4042a4 <USBHS_Handler+0x52c>)
  40403c:	701a      	strb	r2, [r3, #0]
  40403e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404042:	b662      	cpsie	i
  404044:	e6b2      	b.n	403dac <USBHS_Handler+0x34>
				udd_ctrl_stall_data();
  404046:	4b99      	ldr	r3, [pc, #612]	; (4042ac <USBHS_Handler+0x534>)
  404048:	4798      	blx	r3
				udd_ack_out_received(0);
  40404a:	2202      	movs	r2, #2
  40404c:	4b94      	ldr	r3, [pc, #592]	; (4042a0 <USBHS_Handler+0x528>)
  40404e:	601a      	str	r2, [r3, #0]
  404050:	e6ac      	b.n	403dac <USBHS_Handler+0x34>
		if (!udd_g_ctrlreq.over_under_run) {
  404052:	4b91      	ldr	r3, [pc, #580]	; (404298 <USBHS_Handler+0x520>)
  404054:	695b      	ldr	r3, [r3, #20]
  404056:	b153      	cbz	r3, 40406e <USBHS_Handler+0x2f6>
		if (!udd_g_ctrlreq.over_under_run()) {
  404058:	4798      	blx	r3
  40405a:	b170      	cbz	r0, 40407a <USBHS_Handler+0x302>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
  40405c:	498f      	ldr	r1, [pc, #572]	; (40429c <USBHS_Handler+0x524>)
  40405e:	4a94      	ldr	r2, [pc, #592]	; (4042b0 <USBHS_Handler+0x538>)
  404060:	880b      	ldrh	r3, [r1, #0]
  404062:	8810      	ldrh	r0, [r2, #0]
  404064:	4403      	add	r3, r0
  404066:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
  404068:	2300      	movs	r3, #0
  40406a:	8013      	strh	r3, [r2, #0]
  40406c:	e7cd      	b.n	40400a <USBHS_Handler+0x292>
			udd_ctrl_stall_data();
  40406e:	4b8f      	ldr	r3, [pc, #572]	; (4042ac <USBHS_Handler+0x534>)
  404070:	4798      	blx	r3
			udd_ack_out_received(0);
  404072:	2202      	movs	r2, #2
  404074:	4b8a      	ldr	r3, [pc, #552]	; (4042a0 <USBHS_Handler+0x528>)
  404076:	601a      	str	r2, [r3, #0]
  404078:	e698      	b.n	403dac <USBHS_Handler+0x34>
			udd_ctrl_stall_data();
  40407a:	4b8c      	ldr	r3, [pc, #560]	; (4042ac <USBHS_Handler+0x534>)
  40407c:	4798      	blx	r3
			udd_ack_out_received(0);
  40407e:	2202      	movs	r2, #2
  404080:	4b87      	ldr	r3, [pc, #540]	; (4042a0 <USBHS_Handler+0x528>)
  404082:	601a      	str	r2, [r3, #0]
  404084:	e692      	b.n	403dac <USBHS_Handler+0x34>
		udd_ack_nak_out(0);
  404086:	2208      	movs	r2, #8
  404088:	4b85      	ldr	r3, [pc, #532]	; (4042a0 <USBHS_Handler+0x528>)
  40408a:	601a      	str	r2, [r3, #0]
	if (Is_udd_in_send(0))
  40408c:	3b30      	subs	r3, #48	; 0x30
  40408e:	681b      	ldr	r3, [r3, #0]
  404090:	f013 0f01 	tst.w	r3, #1
  404094:	f47f ae8a 	bne.w	403dac <USBHS_Handler+0x34>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  404098:	4b86      	ldr	r3, [pc, #536]	; (4042b4 <USBHS_Handler+0x53c>)
  40409a:	781b      	ldrb	r3, [r3, #0]
  40409c:	2b03      	cmp	r3, #3
  40409e:	f47f ae85 	bne.w	403dac <USBHS_Handler+0x34>
		udd_enable_stall_handshake(0);
  4040a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4040a6:	4b80      	ldr	r3, [pc, #512]	; (4042a8 <USBHS_Handler+0x530>)
  4040a8:	601a      	str	r2, [r3, #0]
  4040aa:	e67f      	b.n	403dac <USBHS_Handler+0x34>
		udd_ack_nak_in(0);
  4040ac:	2210      	movs	r2, #16
  4040ae:	4b7c      	ldr	r3, [pc, #496]	; (4042a0 <USBHS_Handler+0x528>)
  4040b0:	601a      	str	r2, [r3, #0]
	if (Is_udd_out_received(0))
  4040b2:	3b30      	subs	r3, #48	; 0x30
  4040b4:	681b      	ldr	r3, [r3, #0]
  4040b6:	f013 0f02 	tst.w	r3, #2
  4040ba:	f47f ae77 	bne.w	403dac <USBHS_Handler+0x34>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
  4040be:	4b7d      	ldr	r3, [pc, #500]	; (4042b4 <USBHS_Handler+0x53c>)
  4040c0:	781b      	ldrb	r3, [r3, #0]
  4040c2:	2b01      	cmp	r3, #1
  4040c4:	d007      	beq.n	4040d6 <USBHS_Handler+0x35e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
  4040c6:	2b04      	cmp	r3, #4
  4040c8:	f47f ae70 	bne.w	403dac <USBHS_Handler+0x34>
		udd_enable_stall_handshake(0);
  4040cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4040d0:	4b75      	ldr	r3, [pc, #468]	; (4042a8 <USBHS_Handler+0x530>)
  4040d2:	601a      	str	r2, [r3, #0]
  4040d4:	e66a      	b.n	403dac <USBHS_Handler+0x34>
		udd_ctrl_send_zlp_in();
  4040d6:	4b78      	ldr	r3, [pc, #480]	; (4042b8 <USBHS_Handler+0x540>)
  4040d8:	4798      	blx	r3
  4040da:	e667      	b.n	403dac <USBHS_Handler+0x34>
			if (udd_endpoint_dma_get_status(ep)
  4040dc:	4b77      	ldr	r3, [pc, #476]	; (4042bc <USBHS_Handler+0x544>)
  4040de:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4040e2:	68da      	ldr	r2, [r3, #12]
  4040e4:	f012 0f01 	tst.w	r2, #1
  4040e8:	f47f ae60 	bne.w	403dac <USBHS_Handler+0x34>
			udd_disable_endpoint_dma_interrupt(ep);
  4040ec:	4a74      	ldr	r2, [pc, #464]	; (4042c0 <USBHS_Handler+0x548>)
  4040ee:	6151      	str	r1, [r2, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
  4040f0:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
  4040f2:	0c1b      	lsrs	r3, r3, #16
  4040f4:	d008      	beq.n	404108 <USBHS_Handler+0x390>
				ptr_job->buf_cnt -= nb_remaining;
  4040f6:	4a73      	ldr	r2, [pc, #460]	; (4042c4 <USBHS_Handler+0x54c>)
  4040f8:	007c      	lsls	r4, r7, #1
  4040fa:	19e5      	adds	r5, r4, r7
  4040fc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
  404100:	68e9      	ldr	r1, [r5, #12]
  404102:	1acb      	subs	r3, r1, r3
  404104:	60eb      	str	r3, [r5, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
  404106:	60ab      	str	r3, [r5, #8]
			udd_ep_trans_done(ep);
  404108:	4b6f      	ldr	r3, [pc, #444]	; (4042c8 <USBHS_Handler+0x550>)
  40410a:	4798      	blx	r3
  40410c:	e64e      	b.n	403dac <USBHS_Handler+0x34>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
  40410e:	4b6f      	ldr	r3, [pc, #444]	; (4042cc <USBHS_Handler+0x554>)
  404110:	2201      	movs	r2, #1
  404112:	f849 2003 	str.w	r2, [r9, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
  404116:	4962      	ldr	r1, [pc, #392]	; (4042a0 <USBHS_Handler+0x528>)
  404118:	f849 2001 	str.w	r2, [r9, r1]
				udd_ack_fifocon(ep);
  40411c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  404120:	f849 2003 	str.w	r2, [r9, r3]
		ptr_job = &udd_ep_job[ep - 1];
  404124:	eb07 0747 	add.w	r7, r7, r7, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
  404128:	4602      	mov	r2, r0
  40412a:	2100      	movs	r1, #0
  40412c:	4865      	ldr	r0, [pc, #404]	; (4042c4 <USBHS_Handler+0x54c>)
  40412e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
  404132:	4b67      	ldr	r3, [pc, #412]	; (4042d0 <USBHS_Handler+0x558>)
  404134:	4798      	blx	r3
  404136:	e639      	b.n	403dac <USBHS_Handler+0x34>
  404138:	3301      	adds	r3, #1
  40413a:	3604      	adds	r6, #4
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  40413c:	2b07      	cmp	r3, #7
  40413e:	f000 80d5 	beq.w	4042ec <USBHS_Handler+0x574>
  404142:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
  404144:	461d      	mov	r5, r3
  404146:	1e5f      	subs	r7, r3, #1
  404148:	46b8      	mov	r8, r7
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  40414a:	6914      	ldr	r4, [r2, #16]
  40414c:	fa0e f107 	lsl.w	r1, lr, r7
  404150:	420c      	tst	r4, r1
  404152:	d002      	beq.n	40415a <USBHS_Handler+0x3e2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
  404154:	6854      	ldr	r4, [r2, #4]
  404156:	4221      	tst	r1, r4
  404158:	d1c0      	bne.n	4040dc <USBHS_Handler+0x364>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  40415a:	6911      	ldr	r1, [r2, #16]
  40415c:	fa0c f505 	lsl.w	r5, ip, r5
  404160:	4229      	tst	r1, r5
  404162:	d0e9      	beq.n	404138 <USBHS_Handler+0x3c0>
  404164:	ea4f 0983 	mov.w	r9, r3, lsl #2
  404168:	f106 0490 	add.w	r4, r6, #144	; 0x90
			if (Is_udd_in_send_interrupt_enabled(ep)
  40416c:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
  404170:	f011 0f01 	tst.w	r1, #1
  404174:	d003      	beq.n	40417e <USBHS_Handler+0x406>
					&& Is_udd_in_send(ep)) {
  404176:	6831      	ldr	r1, [r6, #0]
  404178:	f011 0f01 	tst.w	r1, #1
  40417c:	d1c7      	bne.n	40410e <USBHS_Handler+0x396>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
  40417e:	6821      	ldr	r1, [r4, #0]
  404180:	f411 5f80 	tst.w	r1, #4096	; 0x1000
  404184:	d0d8      	beq.n	404138 <USBHS_Handler+0x3c0>
					&& (0 == udd_nb_busy_bank(ep))) {
  404186:	6831      	ldr	r1, [r6, #0]
  404188:	f411 5f40 	tst.w	r1, #12288	; 0x3000
  40418c:	d1d4      	bne.n	404138 <USBHS_Handler+0x3c0>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
  40418e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  404192:	4b4e      	ldr	r3, [pc, #312]	; (4042cc <USBHS_Handler+0x554>)
  404194:	f849 2003 	str.w	r2, [r9, r3]
				udd_disable_endpoint_interrupt(ep);
  404198:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
  40419c:	615d      	str	r5, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
  40419e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  4041a2:	4b48      	ldr	r3, [pc, #288]	; (4042c4 <USBHS_Handler+0x54c>)
  4041a4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
  4041a8:	f898 2014 	ldrb.w	r2, [r8, #20]
  4041ac:	f36f 0282 	bfc	r2, #2, #1
  4041b0:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
  4041b4:	4a47      	ldr	r2, [pc, #284]	; (4042d4 <USBHS_Handler+0x55c>)
  4041b6:	f859 3002 	ldr.w	r3, [r9, r2]
  4041ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  4041be:	f849 3002 	str.w	r3, [r9, r2]
				udd_enable_stall_handshake(ep);
  4041c2:	4b39      	ldr	r3, [pc, #228]	; (4042a8 <USBHS_Handler+0x530>)
  4041c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4041c8:	f849 2003 	str.w	r2, [r9, r3]
				udd_reset_data_toggle(ep);
  4041cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4041d0:	f849 2003 	str.w	r2, [r9, r3]
  4041d4:	e5ea      	b.n	403dac <USBHS_Handler+0x34>
		udd_ack_reset();
  4041d6:	2208      	movs	r2, #8
  4041d8:	4b39      	ldr	r3, [pc, #228]	; (4042c0 <USBHS_Handler+0x548>)
  4041da:	609a      	str	r2, [r3, #8]
  4041dc:	4d39      	ldr	r5, [pc, #228]	; (4042c4 <USBHS_Handler+0x54c>)
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4041de:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
  4041e0:	2701      	movs	r7, #1
  4041e2:	4e3b      	ldr	r6, [pc, #236]	; (4042d0 <USBHS_Handler+0x558>)
  4041e4:	3401      	adds	r4, #1
  4041e6:	b2e4      	uxtb	r4, r4
  4041e8:	4622      	mov	r2, r4
  4041ea:	4639      	mov	r1, r7
  4041ec:	4628      	mov	r0, r5
  4041ee:	47b0      	blx	r6
  4041f0:	3518      	adds	r5, #24
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4041f2:	2c06      	cmp	r4, #6
  4041f4:	d1f6      	bne.n	4041e4 <USBHS_Handler+0x46c>
		udc_reset();
  4041f6:	4b38      	ldr	r3, [pc, #224]	; (4042d8 <USBHS_Handler+0x560>)
  4041f8:	4798      	blx	r3
	udd_configure_address(0);
  4041fa:	4b31      	ldr	r3, [pc, #196]	; (4042c0 <USBHS_Handler+0x548>)
  4041fc:	681a      	ldr	r2, [r3, #0]
  4041fe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  404202:	601a      	str	r2, [r3, #0]
	udd_enable_address();
  404204:	681a      	ldr	r2, [r3, #0]
  404206:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40420a:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
  40420c:	4931      	ldr	r1, [pc, #196]	; (4042d4 <USBHS_Handler+0x55c>)
  40420e:	6808      	ldr	r0, [r1, #0]
  404210:	4a32      	ldr	r2, [pc, #200]	; (4042dc <USBHS_Handler+0x564>)
  404212:	4002      	ands	r2, r0
  404214:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  404218:	600a      	str	r2, [r1, #0]
	udd_allocate_memory(0);
  40421a:	680a      	ldr	r2, [r1, #0]
  40421c:	f042 0202 	orr.w	r2, r2, #2
  404220:	600a      	str	r2, [r1, #0]
	udd_enable_endpoint(0);
  404222:	69da      	ldr	r2, [r3, #28]
  404224:	f042 0201 	orr.w	r2, r2, #1
  404228:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40422a:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40422e:	fab2 f282 	clz	r2, r2
  404232:	0952      	lsrs	r2, r2, #5
  404234:	9203      	str	r2, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  404236:	b672      	cpsid	i
  404238:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40423c:	2100      	movs	r1, #0
  40423e:	4a19      	ldr	r2, [pc, #100]	; (4042a4 <USBHS_Handler+0x52c>)
  404240:	7011      	strb	r1, [r2, #0]
	return flags;
  404242:	9903      	ldr	r1, [sp, #12]
	udd_enable_setup_received_interrupt(0);
  404244:	4a18      	ldr	r2, [pc, #96]	; (4042a8 <USBHS_Handler+0x530>)
  404246:	2004      	movs	r0, #4
  404248:	6010      	str	r0, [r2, #0]
	udd_enable_out_received_interrupt(0);
  40424a:	2002      	movs	r0, #2
  40424c:	6010      	str	r0, [r2, #0]
	udd_enable_endpoint_interrupt(0);
  40424e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  404252:	619a      	str	r2, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
  404254:	b129      	cbz	r1, 404262 <USBHS_Handler+0x4ea>
		cpu_irq_enable();
  404256:	2201      	movs	r2, #1
  404258:	4b12      	ldr	r3, [pc, #72]	; (4042a4 <USBHS_Handler+0x52c>)
  40425a:	701a      	strb	r2, [r3, #0]
  40425c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404260:	b662      	cpsie	i
		udd_ctrl_init();
  404262:	4b1f      	ldr	r3, [pc, #124]	; (4042e0 <USBHS_Handler+0x568>)
  404264:	4798      	blx	r3
		goto udd_interrupt_end;
  404266:	e5a1      	b.n	403dac <USBHS_Handler+0x34>
		otg_unfreeze_clock();
  404268:	4b15      	ldr	r3, [pc, #84]	; (4042c0 <USBHS_Handler+0x548>)
  40426a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  40426e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  404272:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_disable_suspend_interrupt();
  404276:	2201      	movs	r2, #1
  404278:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  40427a:	2210      	movs	r2, #16
  40427c:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
  40427e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  404282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  404286:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
  40428a:	2000      	movs	r0, #0
  40428c:	4b15      	ldr	r3, [pc, #84]	; (4042e4 <USBHS_Handler+0x56c>)
  40428e:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
  404290:	4b15      	ldr	r3, [pc, #84]	; (4042e8 <USBHS_Handler+0x570>)
  404292:	4798      	blx	r3
		goto udd_interrupt_end;
  404294:	e58a      	b.n	403dac <USBHS_Handler+0x34>
  404296:	bf00      	nop
  404298:	2040111c 	.word	0x2040111c
  40429c:	20400c28 	.word	0x20400c28
  4042a0:	40038160 	.word	0x40038160
  4042a4:	20400177 	.word	0x20400177
  4042a8:	400381f0 	.word	0x400381f0
  4042ac:	00403995 	.word	0x00403995
  4042b0:	20400c26 	.word	0x20400c26
  4042b4:	20400c2a 	.word	0x20400c2a
  4042b8:	004039ad 	.word	0x004039ad
  4042bc:	40038300 	.word	0x40038300
  4042c0:	40038000 	.word	0x40038000
  4042c4:	20400c2c 	.word	0x20400c2c
  4042c8:	00403bd1 	.word	0x00403bd1
  4042cc:	40038220 	.word	0x40038220
  4042d0:	00403b99 	.word	0x00403b99
  4042d4:	40038100 	.word	0x40038100
  4042d8:	00402cb1 	.word	0x00402cb1
  4042dc:	ffffe683 	.word	0xffffe683
  4042e0:	00403939 	.word	0x00403939
  4042e4:	00403895 	.word	0x00403895
  4042e8:	00407211 	.word	0x00407211
	if (Is_udd_reset()) {
  4042ec:	4b1b      	ldr	r3, [pc, #108]	; (40435c <USBHS_Handler+0x5e4>)
  4042ee:	685b      	ldr	r3, [r3, #4]
  4042f0:	f013 0f08 	tst.w	r3, #8
  4042f4:	f47f af6f 	bne.w	4041d6 <USBHS_Handler+0x45e>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  4042f8:	4b18      	ldr	r3, [pc, #96]	; (40435c <USBHS_Handler+0x5e4>)
  4042fa:	691b      	ldr	r3, [r3, #16]
  4042fc:	f013 0f01 	tst.w	r3, #1
  404300:	d004      	beq.n	40430c <USBHS_Handler+0x594>
  404302:	4b16      	ldr	r3, [pc, #88]	; (40435c <USBHS_Handler+0x5e4>)
  404304:	685b      	ldr	r3, [r3, #4]
  404306:	f013 0f01 	tst.w	r3, #1
  40430a:	d1ad      	bne.n	404268 <USBHS_Handler+0x4f0>
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
  40430c:	4b13      	ldr	r3, [pc, #76]	; (40435c <USBHS_Handler+0x5e4>)
  40430e:	691b      	ldr	r3, [r3, #16]
  404310:	f013 0f10 	tst.w	r3, #16
  404314:	f43f ad4a 	beq.w	403dac <USBHS_Handler+0x34>
  404318:	4b10      	ldr	r3, [pc, #64]	; (40435c <USBHS_Handler+0x5e4>)
  40431a:	685b      	ldr	r3, [r3, #4]
  40431c:	f013 0f10 	tst.w	r3, #16
  404320:	f43f ad44 	beq.w	403dac <USBHS_Handler+0x34>
		otg_unfreeze_clock();
  404324:	4a0d      	ldr	r2, [pc, #52]	; (40435c <USBHS_Handler+0x5e4>)
  404326:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  40432a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  40432e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
  404332:	4613      	mov	r3, r2
  404334:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
  404338:	f412 4f80 	tst.w	r2, #16384	; 0x4000
  40433c:	d103      	bne.n	404346 <USBHS_Handler+0x5ce>
			if (Is_udd_suspend()) {
  40433e:	685a      	ldr	r2, [r3, #4]
  404340:	f012 0f01 	tst.w	r2, #1
  404344:	d0f6      	beq.n	404334 <USBHS_Handler+0x5bc>
		udd_disable_wake_up_interrupt();
  404346:	4b05      	ldr	r3, [pc, #20]	; (40435c <USBHS_Handler+0x5e4>)
  404348:	2210      	movs	r2, #16
  40434a:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
  40434c:	2001      	movs	r0, #1
  40434e:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
  404350:	4b03      	ldr	r3, [pc, #12]	; (404360 <USBHS_Handler+0x5e8>)
  404352:	4798      	blx	r3
		UDC_RESUME_EVENT();
  404354:	4b03      	ldr	r3, [pc, #12]	; (404364 <USBHS_Handler+0x5ec>)
  404356:	4798      	blx	r3
		goto udd_interrupt_end;
  404358:	e528      	b.n	403dac <USBHS_Handler+0x34>
  40435a:	bf00      	nop
  40435c:	40038000 	.word	0x40038000
  404360:	00403895 	.word	0x00403895
  404364:	00407229 	.word	0x00407229

00404368 <udd_is_high_speed>:
}
  404368:	2000      	movs	r0, #0
  40436a:	4770      	bx	lr

0040436c <udd_set_address>:
	udd_disable_address();
  40436c:	4b08      	ldr	r3, [pc, #32]	; (404390 <udd_set_address+0x24>)
  40436e:	681a      	ldr	r2, [r3, #0]
  404370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  404374:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
  404376:	681a      	ldr	r2, [r3, #0]
  404378:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  40437c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  404380:	4302      	orrs	r2, r0
  404382:	601a      	str	r2, [r3, #0]
	udd_enable_address();
  404384:	681a      	ldr	r2, [r3, #0]
  404386:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40438a:	601a      	str	r2, [r3, #0]
  40438c:	4770      	bx	lr
  40438e:	bf00      	nop
  404390:	40038000 	.word	0x40038000

00404394 <udd_getaddress>:
	return udd_get_configured_address();
  404394:	4b02      	ldr	r3, [pc, #8]	; (4043a0 <udd_getaddress+0xc>)
  404396:	6818      	ldr	r0, [r3, #0]
}
  404398:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40439c:	4770      	bx	lr
  40439e:	bf00      	nop
  4043a0:	40038000 	.word	0x40038000

004043a4 <udd_get_frame_number>:
	return udd_frame_number();
  4043a4:	4b02      	ldr	r3, [pc, #8]	; (4043b0 <udd_get_frame_number+0xc>)
  4043a6:	6a18      	ldr	r0, [r3, #32]
}
  4043a8:	f3c0 00ca 	ubfx	r0, r0, #3, #11
  4043ac:	4770      	bx	lr
  4043ae:	bf00      	nop
  4043b0:	40038000 	.word	0x40038000

004043b4 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  4043b4:	4b01      	ldr	r3, [pc, #4]	; (4043bc <udd_set_setup_payload+0x8>)
  4043b6:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  4043b8:	8199      	strh	r1, [r3, #12]
  4043ba:	4770      	bx	lr
  4043bc:	2040111c 	.word	0x2040111c

004043c0 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4043c0:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4043c4:	2a06      	cmp	r2, #6
  4043c6:	d900      	bls.n	4043ca <udd_ep_free+0xa>
  4043c8:	4770      	bx	lr
{
  4043ca:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
  4043cc:	4810      	ldr	r0, [pc, #64]	; (404410 <udd_ep_free+0x50>)
  4043ce:	69c3      	ldr	r3, [r0, #28]
  4043d0:	2101      	movs	r1, #1
  4043d2:	fa01 f402 	lsl.w	r4, r1, r2
  4043d6:	ea23 0304 	bic.w	r3, r3, r4
  4043da:	61c3      	str	r3, [r0, #28]
	udd_unallocate_memory(ep_index);
  4043dc:	f500 7080 	add.w	r0, r0, #256	; 0x100
  4043e0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
  4043e4:	f023 0302 	bic.w	r3, r3, #2
  4043e8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
  4043ec:	1e56      	subs	r6, r2, #1
  4043ee:	4c09      	ldr	r4, [pc, #36]	; (404414 <udd_ep_free+0x54>)
  4043f0:	fa06 f501 	lsl.w	r5, r6, r1
  4043f4:	19a8      	adds	r0, r5, r6
  4043f6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  4043fa:	4b07      	ldr	r3, [pc, #28]	; (404418 <udd_ep_free+0x58>)
  4043fc:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
  4043fe:	4435      	add	r5, r6
  404400:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  404404:	7d23      	ldrb	r3, [r4, #20]
  404406:	f36f 0382 	bfc	r3, #2, #1
  40440a:	7523      	strb	r3, [r4, #20]
  40440c:	bd70      	pop	{r4, r5, r6, pc}
  40440e:	bf00      	nop
  404410:	40038000 	.word	0x40038000
  404414:	20400c2c 	.word	0x20400c2c
  404418:	00403b99 	.word	0x00403b99

0040441c <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
  40441c:	f000 000f 	and.w	r0, r0, #15
  404420:	4b02      	ldr	r3, [pc, #8]	; (40442c <udd_ep_is_halted+0x10>)
  404422:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
  404426:	f3c0 40c0 	ubfx	r0, r0, #19, #1
  40442a:	4770      	bx	lr
  40442c:	400381c0 	.word	0x400381c0

00404430 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404430:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  404434:	2b06      	cmp	r3, #6
  404436:	d85d      	bhi.n	4044f4 <udd_ep_set_halt+0xc4>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
  404438:	4a36      	ldr	r2, [pc, #216]	; (404514 <udd_ep_set_halt+0xe4>)
  40443a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40443e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
  404442:	d159      	bne.n	4044f8 <udd_ep_set_halt+0xc8>
{
  404444:	b410      	push	{r4}
  404446:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  404448:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
  40444a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
  40444e:	4a32      	ldr	r2, [pc, #200]	; (404518 <udd_ep_set_halt+0xe8>)
  404450:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  404454:	7d12      	ldrb	r2, [r2, #20]
  404456:	f012 0f04 	tst.w	r2, #4
  40445a:	d14f      	bne.n	4044fc <udd_ep_set_halt+0xcc>
	if (ptr_job->busy == true) {
  40445c:	f012 0f01 	tst.w	r2, #1
  404460:	d151      	bne.n	404506 <udd_ep_set_halt+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404462:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404466:	fab2 f282 	clz	r2, r2
  40446a:	0952      	lsrs	r2, r2, #5
  40446c:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40446e:	b672      	cpsid	i
  404470:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404474:	2400      	movs	r4, #0
  404476:	4a29      	ldr	r2, [pc, #164]	; (40451c <udd_ep_set_halt+0xec>)
  404478:	7014      	strb	r4, [r2, #0]
	return flags;
  40447a:	9c01      	ldr	r4, [sp, #4]
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
  40447c:	f010 0f80 	tst.w	r0, #128	; 0x80
  404480:	d118      	bne.n	4044b4 <udd_ep_set_halt+0x84>
	udd_disable_endpoint_bank_autoswitch(ep_index);
  404482:	4927      	ldr	r1, [pc, #156]	; (404520 <udd_ep_set_halt+0xf0>)
  404484:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
  404488:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  40448c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_ack_stall(ep_index);
  404490:	2140      	movs	r1, #64	; 0x40
  404492:	4a24      	ldr	r2, [pc, #144]	; (404524 <udd_ep_set_halt+0xf4>)
  404494:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
  404498:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40449c:	3290      	adds	r2, #144	; 0x90
  40449e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
  4044a2:	2c00      	cmp	r4, #0
  4044a4:	d033      	beq.n	40450e <udd_ep_set_halt+0xde>
		cpu_irq_enable();
  4044a6:	2001      	movs	r0, #1
  4044a8:	4b1c      	ldr	r3, [pc, #112]	; (40451c <udd_ep_set_halt+0xec>)
  4044aa:	7018      	strb	r0, [r3, #0]
  4044ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4044b0:	b662      	cpsie	i
  4044b2:	e024      	b.n	4044fe <udd_ep_set_halt+0xce>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
  4044b4:	4a1c      	ldr	r2, [pc, #112]	; (404528 <udd_ep_set_halt+0xf8>)
  4044b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4044ba:	f412 5f40 	tst.w	r2, #12288	; 0x3000
  4044be:	d0e0      	beq.n	404482 <udd_ep_set_halt+0x52>
		ptr_job->stall_requested = true;
  4044c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4044c4:	4a14      	ldr	r2, [pc, #80]	; (404518 <udd_ep_set_halt+0xe8>)
  4044c6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
  4044ca:	7d0a      	ldrb	r2, [r1, #20]
  4044cc:	f042 0204 	orr.w	r2, r2, #4
  4044d0:	750a      	strb	r2, [r1, #20]
		udd_enable_bank_interrupt(ep_index);
  4044d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4044d6:	4915      	ldr	r1, [pc, #84]	; (40452c <udd_ep_set_halt+0xfc>)
  4044d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
  4044dc:	fa02 f303 	lsl.w	r3, r2, r3
  4044e0:	4a13      	ldr	r2, [pc, #76]	; (404530 <udd_ep_set_halt+0x100>)
  4044e2:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
  4044e4:	b18c      	cbz	r4, 40450a <udd_ep_set_halt+0xda>
		cpu_irq_enable();
  4044e6:	2001      	movs	r0, #1
  4044e8:	4b0c      	ldr	r3, [pc, #48]	; (40451c <udd_ep_set_halt+0xec>)
  4044ea:	7018      	strb	r0, [r3, #0]
  4044ec:	f3bf 8f5f 	dmb	sy
  4044f0:	b662      	cpsie	i
  4044f2:	e004      	b.n	4044fe <udd_ep_set_halt+0xce>
		return false;
  4044f4:	2000      	movs	r0, #0
  4044f6:	4770      	bx	lr
		return true; // Already STALL
  4044f8:	2001      	movs	r0, #1
  4044fa:	4770      	bx	lr
  4044fc:	2001      	movs	r0, #1
}
  4044fe:	b003      	add	sp, #12
  404500:	f85d 4b04 	ldr.w	r4, [sp], #4
  404504:	4770      	bx	lr
		return false; // Job on going, stall impossible
  404506:	2000      	movs	r0, #0
  404508:	e7f9      	b.n	4044fe <udd_ep_set_halt+0xce>
		return true;
  40450a:	2001      	movs	r0, #1
  40450c:	e7f7      	b.n	4044fe <udd_ep_set_halt+0xce>
	return true;
  40450e:	2001      	movs	r0, #1
  404510:	e7f5      	b.n	4044fe <udd_ep_set_halt+0xce>
  404512:	bf00      	nop
  404514:	400381c0 	.word	0x400381c0
  404518:	20400c2c 	.word	0x20400c2c
  40451c:	20400177 	.word	0x20400177
  404520:	40038100 	.word	0x40038100
  404524:	40038160 	.word	0x40038160
  404528:	40038130 	.word	0x40038130
  40452c:	400381f0 	.word	0x400381f0
  404530:	40038000 	.word	0x40038000

00404534 <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404534:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
  404538:	2806      	cmp	r0, #6
  40453a:	d851      	bhi.n	4045e0 <udd_ep_clear_halt+0xac>
{
  40453c:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40453e:	1e43      	subs	r3, r0, #1
	if (ptr_job->stall_requested) {
  404540:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  404544:	4a2c      	ldr	r2, [pc, #176]	; (4045f8 <udd_ep_clear_halt+0xc4>)
  404546:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40454a:	7d12      	ldrb	r2, [r2, #20]
  40454c:	f012 0f04 	tst.w	r2, #4
  404550:	d048      	beq.n	4045e4 <udd_ep_clear_halt+0xb0>
		ptr_job->stall_requested = false;
  404552:	460a      	mov	r2, r1
  404554:	4928      	ldr	r1, [pc, #160]	; (4045f8 <udd_ep_clear_halt+0xc4>)
  404556:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40455a:	7d11      	ldrb	r1, [r2, #20]
  40455c:	f36f 0182 	bfc	r1, #2, #1
  404560:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
  404562:	0082      	lsls	r2, r0, #2
  404564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404568:	4c24      	ldr	r4, [pc, #144]	; (4045fc <udd_ep_clear_halt+0xc8>)
  40456a:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
  40456e:	4081      	lsls	r1, r0
  404570:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
  404574:	6161      	str	r1, [r4, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
  404576:	4922      	ldr	r1, [pc, #136]	; (404600 <udd_ep_clear_halt+0xcc>)
  404578:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40457c:	f411 2f00 	tst.w	r1, #524288	; 0x80000
  404580:	d014      	beq.n	4045ac <udd_ep_clear_halt+0x78>
		if (Is_udd_stall(ep_index)) {
  404582:	4920      	ldr	r1, [pc, #128]	; (404604 <udd_ep_clear_halt+0xd0>)
  404584:	5851      	ldr	r1, [r2, r1]
  404586:	f011 0f40 	tst.w	r1, #64	; 0x40
  40458a:	d006      	beq.n	40459a <udd_ep_clear_halt+0x66>
			udd_ack_stall(ep_index);
  40458c:	2040      	movs	r0, #64	; 0x40
  40458e:	491e      	ldr	r1, [pc, #120]	; (404608 <udd_ep_clear_halt+0xd4>)
  404590:	5050      	str	r0, [r2, r1]
			udd_reset_data_toggle(ep_index);
  404592:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  404596:	3190      	adds	r1, #144	; 0x90
  404598:	5050      	str	r0, [r2, r1]
		udd_disable_stall_handshake(ep_index);
  40459a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  40459e:	4917      	ldr	r1, [pc, #92]	; (4045fc <udd_ep_clear_halt+0xc8>)
  4045a0:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
  4045a2:	481a      	ldr	r0, [pc, #104]	; (40460c <udd_ep_clear_halt+0xd8>)
  4045a4:	5811      	ldr	r1, [r2, r0]
  4045a6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  4045aa:	5011      	str	r1, [r2, r0]
		if (ptr_job->busy == true) {
  4045ac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  4045b0:	4911      	ldr	r1, [pc, #68]	; (4045f8 <udd_ep_clear_halt+0xc4>)
  4045b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4045b6:	7d12      	ldrb	r2, [r2, #20]
  4045b8:	f012 0f01 	tst.w	r2, #1
  4045bc:	d101      	bne.n	4045c2 <udd_ep_clear_halt+0x8e>
	return true;
  4045be:	2001      	movs	r0, #1
  4045c0:	bd10      	pop	{r4, pc}
			ptr_job->busy = false;
  4045c2:	4608      	mov	r0, r1
  4045c4:	0059      	lsls	r1, r3, #1
  4045c6:	18ca      	adds	r2, r1, r3
  4045c8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  4045cc:	7d14      	ldrb	r4, [r2, #20]
  4045ce:	f36f 0400 	bfc	r4, #0, #1
  4045d2:	7514      	strb	r4, [r2, #20]
			ptr_job->call_nohalt();
  4045d4:	440b      	add	r3, r1
  4045d6:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
  4045da:	4798      	blx	r3
	return true;
  4045dc:	2001      	movs	r0, #1
  4045de:	bd10      	pop	{r4, pc}
		return false;
  4045e0:	2000      	movs	r0, #0
  4045e2:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep_index)) {
  4045e4:	0082      	lsls	r2, r0, #2
  4045e6:	4906      	ldr	r1, [pc, #24]	; (404600 <udd_ep_clear_halt+0xcc>)
  4045e8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4045ec:	f411 2f00 	tst.w	r1, #524288	; 0x80000
  4045f0:	d1c7      	bne.n	404582 <udd_ep_clear_halt+0x4e>
	return true;
  4045f2:	2001      	movs	r0, #1
}
  4045f4:	bd10      	pop	{r4, pc}
  4045f6:	bf00      	nop
  4045f8:	20400c2c 	.word	0x20400c2c
  4045fc:	40038220 	.word	0x40038220
  404600:	400381c0 	.word	0x400381c0
  404604:	40038130 	.word	0x40038130
  404608:	40038160 	.word	0x40038160
  40460c:	40038100 	.word	0x40038100

00404610 <udd_ep_run>:
{
  404610:	b5f0      	push	{r4, r5, r6, r7, lr}
  404612:	b083      	sub	sp, #12
  404614:	f000 000f 	and.w	r0, r0, #15
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
  404618:	4c3a      	ldr	r4, [pc, #232]	; (404704 <udd_ep_run+0xf4>)
  40461a:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
	if (USB_DEVICE_MAX_EP < ep) {
  40461e:	2806      	cmp	r0, #6
  404620:	d864      	bhi.n	4046ec <udd_ep_run+0xdc>
	if ((!Is_udd_endpoint_enabled(ep))
  404622:	4c39      	ldr	r4, [pc, #228]	; (404708 <udd_ep_run+0xf8>)
  404624:	69e5      	ldr	r5, [r4, #28]
  404626:	2401      	movs	r4, #1
  404628:	4084      	lsls	r4, r0
  40462a:	422c      	tst	r4, r5
  40462c:	d061      	beq.n	4046f2 <udd_ep_run+0xe2>
			|| Is_udd_endpoint_stall_requested(ep)
  40462e:	4c37      	ldr	r4, [pc, #220]	; (40470c <udd_ep_run+0xfc>)
  404630:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
  404634:	f414 2f00 	tst.w	r4, #524288	; 0x80000
  404638:	d15d      	bne.n	4046f6 <udd_ep_run+0xe6>
	ptr_job = &udd_ep_job[ep - 1];
  40463a:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
  40463c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
  404640:	4d33      	ldr	r5, [pc, #204]	; (404710 <udd_ep_run+0x100>)
  404642:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
  404646:	7d2d      	ldrb	r5, [r5, #20]
  404648:	f015 0f04 	tst.w	r5, #4
  40464c:	d155      	bne.n	4046fa <udd_ep_run+0xea>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40464e:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404652:	fab5 f585 	clz	r5, r5
  404656:	096d      	lsrs	r5, r5, #5
  404658:	9501      	str	r5, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40465a:	b672      	cpsid	i
  40465c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404660:	2600      	movs	r6, #0
  404662:	4d2c      	ldr	r5, [pc, #176]	; (404714 <udd_ep_run+0x104>)
  404664:	702e      	strb	r6, [r5, #0]
	return flags;
  404666:	9f01      	ldr	r7, [sp, #4]
	if (ptr_job->busy == true) {
  404668:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  40466c:	4e28      	ldr	r6, [pc, #160]	; (404710 <udd_ep_run+0x100>)
  40466e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  404672:	7d2d      	ldrb	r5, [r5, #20]
  404674:	f015 0f01 	tst.w	r5, #1
  404678:	d009      	beq.n	40468e <udd_ep_run+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
  40467a:	2f00      	cmp	r7, #0
  40467c:	d03f      	beq.n	4046fe <udd_ep_run+0xee>
		cpu_irq_enable();
  40467e:	2201      	movs	r2, #1
  404680:	4b24      	ldr	r3, [pc, #144]	; (404714 <udd_ep_run+0x104>)
  404682:	701a      	strb	r2, [r3, #0]
  404684:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404688:	b662      	cpsie	i
		return false; // Job already on going
  40468a:	2000      	movs	r0, #0
  40468c:	e02f      	b.n	4046ee <udd_ep_run+0xde>
	ptr_job->busy = true;
  40468e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  404692:	4e1f      	ldr	r6, [pc, #124]	; (404710 <udd_ep_run+0x100>)
  404694:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  404698:	7d2e      	ldrb	r6, [r5, #20]
  40469a:	f046 0601 	orr.w	r6, r6, #1
  40469e:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
  4046a0:	b12f      	cbz	r7, 4046ae <udd_ep_run+0x9e>
		cpu_irq_enable();
  4046a2:	2601      	movs	r6, #1
  4046a4:	4d1b      	ldr	r5, [pc, #108]	; (404714 <udd_ep_run+0x104>)
  4046a6:	702e      	strb	r6, [r5, #0]
  4046a8:	f3bf 8f5f 	dmb	sy
  4046ac:	b662      	cpsie	i
	ptr_job->buf = buf;
  4046ae:	4d18      	ldr	r5, [pc, #96]	; (404710 <udd_ep_run+0x100>)
  4046b0:	0066      	lsls	r6, r4, #1
  4046b2:	1937      	adds	r7, r6, r4
  4046b4:	00ff      	lsls	r7, r7, #3
  4046b6:	eb05 0e07 	add.w	lr, r5, r7
  4046ba:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  4046be:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  4046c2:	2200      	movs	r2, #0
  4046c4:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->buf_load = 0;
  4046c8:	f8ce 2010 	str.w	r2, [lr, #16]
	ptr_job->call_trans = callback;
  4046cc:	9a08      	ldr	r2, [sp, #32]
  4046ce:	51ea      	str	r2, [r5, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4046d0:	2b00      	cmp	r3, #0
  4046d2:	bf08      	it	eq
  4046d4:	f041 0101 	orreq.w	r1, r1, #1
  4046d8:	f89e 3014 	ldrb.w	r3, [lr, #20]
  4046dc:	f361 0341 	bfi	r3, r1, #1, #1
  4046e0:	f88e 3014 	strb.w	r3, [lr, #20]
	udd_ep_trans_done(ep);
  4046e4:	4b0c      	ldr	r3, [pc, #48]	; (404718 <udd_ep_run+0x108>)
  4046e6:	4798      	blx	r3
	return true;
  4046e8:	2001      	movs	r0, #1
  4046ea:	e000      	b.n	4046ee <udd_ep_run+0xde>
		return false;
  4046ec:	2000      	movs	r0, #0
}
  4046ee:	b003      	add	sp, #12
  4046f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  4046f2:	2000      	movs	r0, #0
  4046f4:	e7fb      	b.n	4046ee <udd_ep_run+0xde>
  4046f6:	2000      	movs	r0, #0
  4046f8:	e7f9      	b.n	4046ee <udd_ep_run+0xde>
  4046fa:	2000      	movs	r0, #0
  4046fc:	e7f7      	b.n	4046ee <udd_ep_run+0xde>
		return false; // Job already on going
  4046fe:	2000      	movs	r0, #0
  404700:	e7f5      	b.n	4046ee <udd_ep_run+0xde>
  404702:	bf00      	nop
  404704:	40038100 	.word	0x40038100
  404708:	40038000 	.word	0x40038000
  40470c:	400381c0 	.word	0x400381c0
  404710:	20400c2c 	.word	0x20400c2c
  404714:	20400177 	.word	0x20400177
  404718:	00403bd1 	.word	0x00403bd1

0040471c <udd_ep_alloc>:
{
  40471c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404720:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  404722:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  404726:	2c06      	cmp	r4, #6
  404728:	f200 80df 	bhi.w	4048ea <udd_ep_alloc+0x1ce>
	if (Is_udd_endpoint_enabled(ep)) {
  40472c:	4b73      	ldr	r3, [pc, #460]	; (4048fc <udd_ep_alloc+0x1e0>)
  40472e:	69dd      	ldr	r5, [r3, #28]
  404730:	2301      	movs	r3, #1
  404732:	40a3      	lsls	r3, r4
  404734:	402b      	ands	r3, r5
  404736:	f040 80dd 	bne.w	4048f4 <udd_ep_alloc+0x1d8>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
  40473a:	f001 0503 	and.w	r5, r1, #3
  40473e:	2d02      	cmp	r5, #2
  404740:	d005      	beq.n	40474e <udd_ep_alloc+0x32>
  404742:	2d03      	cmp	r5, #3
  404744:	d020      	beq.n	404788 <udd_ep_alloc+0x6c>
  404746:	2d01      	cmp	r5, #1
  404748:	d01e      	beq.n	404788 <udd_ep_alloc+0x6c>
		return false;
  40474a:	2300      	movs	r3, #0
  40474c:	e0ce      	b.n	4048ec <udd_ep_alloc+0x1d0>
		bank = USBHS_DEVEPTCFG_EPBK_2_BANK >>
  40474e:	f04f 0e01 	mov.w	lr, #1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  404752:	4e6b      	ldr	r6, [pc, #428]	; (404900 <udd_ep_alloc+0x1e4>)
  404754:	eb06 0584 	add.w	r5, r6, r4, lsl #2
  404758:	f856 c024 	ldr.w	ip, [r6, r4, lsl #2]
  40475c:	4f69      	ldr	r7, [pc, #420]	; (404904 <udd_ep_alloc+0x1e8>)
  40475e:	ea0c 0707 	and.w	r7, ip, r7
  404762:	02c9      	lsls	r1, r1, #11
  404764:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
  404768:	b240      	sxtb	r0, r0
  40476a:	2800      	cmp	r0, #0
  40476c:	bfb8      	it	lt
  40476e:	f44f 7380 	movlt.w	r3, #256	; 0x100
  404772:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
  404776:	b280      	uxth	r0, r0
  404778:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
  40477c:	d307      	bcc.n	40478e <udd_ep_alloc+0x72>
  40477e:	2a08      	cmp	r2, #8
  404780:	d924      	bls.n	4047cc <udd_ep_alloc+0xb0>
  404782:	0052      	lsls	r2, r2, #1
  404784:	3a01      	subs	r2, #1
  404786:	e004      	b.n	404792 <udd_ep_alloc+0x76>
		bank = USBHS_DEVEPTCFG_EPBK_1_BANK >>
  404788:	f04f 0e00 	mov.w	lr, #0
  40478c:	e7e1      	b.n	404752 <udd_ep_alloc+0x36>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  40478e:	f240 72ff 	movw	r2, #2047	; 0x7ff
  404792:	fab2 f282 	clz	r2, r2
  404796:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
  40479a:	430b      	orrs	r3, r1
  40479c:	f1c2 021c 	rsb	r2, r2, #28
  4047a0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  4047a4:	f423 63d0 	bic.w	r3, r3, #1664	; 0x680
  4047a8:	f023 0303 	bic.w	r3, r3, #3
  4047ac:	04db      	lsls	r3, r3, #19
  4047ae:	0cdb      	lsrs	r3, r3, #19
  4047b0:	433b      	orrs	r3, r7
  4047b2:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	ep_allocated = 1 << ep;
  4047b6:	2701      	movs	r7, #1
  4047b8:	40a7      	lsls	r7, r4
  4047ba:	b2bf      	uxth	r7, r7
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
  4047bc:	2c05      	cmp	r4, #5
  4047be:	d81c      	bhi.n	4047fa <udd_ep_alloc+0xde>
  4047c0:	4a51      	ldr	r2, [pc, #324]	; (404908 <udd_ep_alloc+0x1ec>)
  4047c2:	2306      	movs	r3, #6
		if (Is_udd_endpoint_enabled(i)) {
  4047c4:	484d      	ldr	r0, [pc, #308]	; (4048fc <udd_ep_alloc+0x1e0>)
  4047c6:	f04f 0e01 	mov.w	lr, #1
  4047ca:	e006      	b.n	4047da <udd_ep_alloc+0xbe>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  4047cc:	220f      	movs	r2, #15
  4047ce:	e7e0      	b.n	404792 <udd_ep_alloc+0x76>
  4047d0:	3b01      	subs	r3, #1
  4047d2:	3a04      	subs	r2, #4
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
  4047d4:	b2d9      	uxtb	r1, r3
  4047d6:	428c      	cmp	r4, r1
  4047d8:	d20f      	bcs.n	4047fa <udd_ep_alloc+0xde>
		if (Is_udd_endpoint_enabled(i)) {
  4047da:	69c6      	ldr	r6, [r0, #28]
  4047dc:	fa0e f103 	lsl.w	r1, lr, r3
  4047e0:	420e      	tst	r6, r1
  4047e2:	d0f5      	beq.n	4047d0 <udd_ep_alloc+0xb4>
			ep_allocated |= 1 << i;
  4047e4:	430f      	orrs	r7, r1
  4047e6:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
  4047e8:	69c6      	ldr	r6, [r0, #28]
  4047ea:	ea26 0101 	bic.w	r1, r6, r1
  4047ee:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
  4047f0:	6811      	ldr	r1, [r2, #0]
  4047f2:	f021 0102 	bic.w	r1, r1, #2
  4047f6:	6011      	str	r1, [r2, #0]
  4047f8:	e7ea      	b.n	4047d0 <udd_ep_alloc+0xb4>
  4047fa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  4047fe:	4e43      	ldr	r6, [pc, #268]	; (40490c <udd_ep_alloc+0x1f0>)
  404800:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
			bool b_restart = ptr_job->busy;
  404804:	f8df 9104 	ldr.w	r9, [pc, #260]	; 40490c <udd_ep_alloc+0x1f0>
			udd_enable_endpoint(i);
  404808:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 4048fc <udd_ep_alloc+0x1e0>
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  40480c:	f8df a100 	ldr.w	sl, [pc, #256]	; 404910 <udd_ep_alloc+0x1f4>
  404810:	e01d      	b.n	40484e <udd_ep_alloc+0x132>
				if (NULL == ptr_job->call_trans) {
  404812:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  404816:	4a3d      	ldr	r2, [pc, #244]	; (40490c <udd_ep_alloc+0x1f0>)
  404818:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
  40481c:	2c00      	cmp	r4, #0
  40481e:	d06b      	beq.n	4048f8 <udd_ep_alloc+0x1dc>
				if (Is_udd_endpoint_in(i)) {
  404820:	682b      	ldr	r3, [r5, #0]
  404822:	f413 7f80 	tst.w	r3, #256	; 0x100
					i |= USB_EP_DIR_IN;
  404826:	bf18      	it	ne
  404828:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
  40482c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  404830:	4b36      	ldr	r3, [pc, #216]	; (40490c <udd_ep_alloc+0x1f0>)
  404832:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404836:	4602      	mov	r2, r0
  404838:	68c9      	ldr	r1, [r1, #12]
  40483a:	2001      	movs	r0, #1
  40483c:	47a0      	blx	r4
				return false;
  40483e:	2300      	movs	r3, #0
  404840:	e054      	b.n	4048ec <udd_ep_alloc+0x1d0>
  404842:	3401      	adds	r4, #1
  404844:	3504      	adds	r5, #4
  404846:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
  404848:	b2e3      	uxtb	r3, r4
  40484a:	2b06      	cmp	r3, #6
  40484c:	d84b      	bhi.n	4048e6 <udd_ep_alloc+0x1ca>
  40484e:	b2e0      	uxtb	r0, r4
		if (ep_allocated & (1 << i)) {
  404850:	fa47 f304 	asr.w	r3, r7, r4
  404854:	f013 0f01 	tst.w	r3, #1
  404858:	d0f3      	beq.n	404842 <udd_ep_alloc+0x126>
  40485a:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
  40485c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  404860:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
  404864:	f893 e014 	ldrb.w	lr, [r3, #20]
  404868:	f00e 0201 	and.w	r2, lr, #1
			ptr_job->busy = false;
  40486c:	f36f 0e00 	bfc	lr, #0, #1
  404870:	f883 e014 	strb.w	lr, [r3, #20]
			udd_allocate_memory(i);
  404874:	682b      	ldr	r3, [r5, #0]
  404876:	f043 0302 	orr.w	r3, r3, #2
  40487a:	602b      	str	r3, [r5, #0]
			udd_enable_endpoint(i);
  40487c:	f8d8 e01c 	ldr.w	lr, [r8, #28]
  404880:	2301      	movs	r3, #1
  404882:	40a3      	lsls	r3, r4
  404884:	ea43 030e 	orr.w	r3, r3, lr
  404888:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
  40488c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40488e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  404892:	d0be      	beq.n	404812 <udd_ep_alloc+0xf6>
			udd_enable_endpoint_bank_autoswitch(i);
  404894:	682b      	ldr	r3, [r5, #0]
  404896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40489a:	602b      	str	r3, [r5, #0]
			if (b_restart) {
  40489c:	2a00      	cmp	r2, #0
  40489e:	d0d0      	beq.n	404842 <udd_ep_alloc+0x126>
				ptr_job->buf_cnt -= ptr_job->buf_load;
  4048a0:	f856 3c0c 	ldr.w	r3, [r6, #-12]
  4048a4:	f856 2c08 	ldr.w	r2, [r6, #-8]
  4048a8:	1a9a      	subs	r2, r3, r2
  4048aa:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  4048ae:	682b      	ldr	r3, [r5, #0]
  4048b0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4048b4:	bf18      	it	ne
  4048b6:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
  4048ba:	f856 bc10 	ldr.w	fp, [r6, #-16]
  4048be:	f856 cc14 	ldr.w	ip, [r6, #-20]
						ptr_job->b_shortpacket,
  4048c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4048c6:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
  4048ca:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  4048cc:	f856 3c18 	ldr.w	r3, [r6, #-24]
  4048d0:	9300      	str	r3, [sp, #0]
  4048d2:	ebab 0302 	sub.w	r3, fp, r2
  4048d6:	4462      	add	r2, ip
  4048d8:	f3c1 0140 	ubfx	r1, r1, #1, #1
  4048dc:	47d0      	blx	sl
				if (!b_restart) {
  4048de:	4603      	mov	r3, r0
  4048e0:	2800      	cmp	r0, #0
  4048e2:	d1ae      	bne.n	404842 <udd_ep_alloc+0x126>
  4048e4:	e002      	b.n	4048ec <udd_ep_alloc+0x1d0>
	return true;
  4048e6:	2301      	movs	r3, #1
  4048e8:	e000      	b.n	4048ec <udd_ep_alloc+0x1d0>
		return false;
  4048ea:	2300      	movs	r3, #0
}
  4048ec:	4618      	mov	r0, r3
  4048ee:	b003      	add	sp, #12
  4048f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
  4048f4:	2300      	movs	r3, #0
  4048f6:	e7f9      	b.n	4048ec <udd_ep_alloc+0x1d0>
					return false;
  4048f8:	2300      	movs	r3, #0
  4048fa:	e7f7      	b.n	4048ec <udd_ep_alloc+0x1d0>
  4048fc:	40038000 	.word	0x40038000
  404900:	40038100 	.word	0x40038100
  404904:	ffffe683 	.word	0xffffe683
  404908:	40038118 	.word	0x40038118
  40490c:	20400c2c 	.word	0x20400c2c
  404910:	00404611 	.word	0x00404611

00404914 <udd_ep_abort>:
{
  404914:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404916:	f000 020f 	and.w	r2, r0, #15
		udd_disable_endpoint_dma_interrupt(ep_index);
  40491a:	1e54      	subs	r4, r2, #1
  40491c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  404920:	40a3      	lsls	r3, r4
  404922:	4918      	ldr	r1, [pc, #96]	; (404984 <udd_ep_abort+0x70>)
  404924:	614b      	str	r3, [r1, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
  404926:	4b18      	ldr	r3, [pc, #96]	; (404988 <udd_ep_abort+0x74>)
  404928:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  40492c:	2500      	movs	r5, #0
  40492e:	609d      	str	r5, [r3, #8]
	udd_disable_endpoint_interrupt(ep_index);
  404930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404934:	4093      	lsls	r3, r2
  404936:	614b      	str	r3, [r1, #20]
  __ASM volatile ("dsb");
  404938:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40493c:	f3bf 8f6f 	isb	sy
	if (ep & USB_EP_DIR_IN) {
  404940:	f010 0f80 	tst.w	r0, #128	; 0x80
  404944:	d108      	bne.n	404958 <udd_ep_abort+0x44>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
  404946:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  40494a:	2101      	movs	r1, #1
  40494c:	480f      	ldr	r0, [pc, #60]	; (40498c <udd_ep_abort+0x78>)
  40494e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  404952:	4b0f      	ldr	r3, [pc, #60]	; (404990 <udd_ep_abort+0x7c>)
  404954:	4798      	blx	r3
  404956:	bd70      	pop	{r4, r5, r6, pc}
		while(udd_nb_busy_bank(ep_index)) {
  404958:	0093      	lsls	r3, r2, #2
  40495a:	480e      	ldr	r0, [pc, #56]	; (404994 <udd_ep_abort+0x80>)
  40495c:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
  40495e:	4d0e      	ldr	r5, [pc, #56]	; (404998 <udd_ep_abort+0x84>)
  404960:	441d      	add	r5, r3
  404962:	f44f 5600 	mov.w	r6, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
  404966:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
  40496a:	4419      	add	r1, r3
  40496c:	e004      	b.n	404978 <udd_ep_abort+0x64>
			udd_kill_last_in_bank(ep_index);
  40496e:	602e      	str	r6, [r5, #0]
			while(Is_udd_kill_last(ep_index));
  404970:	680b      	ldr	r3, [r1, #0]
  404972:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  404976:	d1fb      	bne.n	404970 <udd_ep_abort+0x5c>
		while(udd_nb_busy_bank(ep_index)) {
  404978:	6803      	ldr	r3, [r0, #0]
  40497a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  40497e:	d1f6      	bne.n	40496e <udd_ep_abort+0x5a>
  404980:	e7e1      	b.n	404946 <udd_ep_abort+0x32>
  404982:	bf00      	nop
  404984:	40038000 	.word	0x40038000
  404988:	40038300 	.word	0x40038300
  40498c:	20400c2c 	.word	0x20400c2c
  404990:	00403b99 	.word	0x00403b99
  404994:	40038130 	.word	0x40038130
  404998:	400381f0 	.word	0x400381f0

0040499c <xdmac_configure_transfer>:
  40499c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4049a0:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4049a2:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  4049a4:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  4049a6:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  4049a8:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  4049aa:	6813      	ldr	r3, [r2, #0]
  4049ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4049b0:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4049b2:	6913      	ldr	r3, [r2, #16]
  4049b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4049b8:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  4049ba:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  4049bc:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  4049be:	6993      	ldr	r3, [r2, #24]
  4049c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4049c4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4049c8:	69d3      	ldr	r3, [r2, #28]
  4049ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4049ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4049d2:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4049d4:	678b      	str	r3, [r1, #120]	; 0x78
  4049d6:	4770      	bx	lr

004049d8 <flash_erase_sector>:
 * \param ul_address Flash sector start address.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_erase_sector(uint32_t ul_address)
{
  4049d8:	b508      	push	{r3, lr}
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  4049da:	f5a0 0280 	sub.w	r2, r0, #4194304	; 0x400000
	Efc *p_efc;
	uint16_t us_page;

	translate_address(&p_efc, ul_address, &us_page, NULL);

	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_ES, us_page)) {
  4049de:	f3c2 224f 	ubfx	r2, r2, #9, #16
  4049e2:	2111      	movs	r1, #17
  4049e4:	4803      	ldr	r0, [pc, #12]	; (4049f4 <flash_erase_sector+0x1c>)
  4049e6:	4b04      	ldr	r3, [pc, #16]	; (4049f8 <flash_erase_sector+0x20>)
  4049e8:	4798      	blx	r3
  4049ea:	2800      	cmp	r0, #0
		return FLASH_RC_ERROR;
	}

	return FLASH_RC_OK;
}
  4049ec:	bf18      	it	ne
  4049ee:	2010      	movne	r0, #16
  4049f0:	bd08      	pop	{r3, pc}
  4049f2:	bf00      	nop
  4049f4:	400e0c00 	.word	0x400e0c00
  4049f8:	00401e85 	.word	0x00401e85

004049fc <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  4049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a00:	b085      	sub	sp, #20
  404a02:	9100      	str	r1, [sp, #0]
  404a04:	9303      	str	r3, [sp, #12]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  404a06:	f5a0 0380 	sub.w	r3, r0, #4194304	; 0x400000
  404a0a:	f3c3 2a4f 	ubfx	sl, r3, #9, #16
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
  404a0e:	f3c0 0708 	ubfx	r7, r0, #0, #9
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  404a12:	4693      	mov	fp, r2
  404a14:	2a00      	cmp	r2, #0
  404a16:	d04d      	beq.n	404ab4 <flash_write+0xb8>
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  404a18:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 404ac4 <flash_write+0xc8>
  404a1c:	f509 75fe 	add.w	r5, r9, #508	; 0x1fc
  404a20:	e011      	b.n	404a46 <flash_write+0x4a>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
  404a22:	9a01      	ldr	r2, [sp, #4]
  404a24:	2101      	movs	r1, #1
  404a26:	4824      	ldr	r0, [pc, #144]	; (404ab8 <flash_write+0xbc>)
  404a28:	4b24      	ldr	r3, [pc, #144]	; (404abc <flash_write+0xc0>)
  404a2a:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
  404a2c:	2800      	cmp	r0, #0
  404a2e:	d13e      	bne.n	404aae <flash_write+0xb2>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
  404a30:	9b00      	ldr	r3, [sp, #0]
  404a32:	4423      	add	r3, r4
  404a34:	9300      	str	r3, [sp, #0]
		ul_size -= writeSize;
		us_page++;
  404a36:	f10a 0a01 	add.w	sl, sl, #1
  404a3a:	fa1f fa8a 	uxth.w	sl, sl
		us_offset = 0;
  404a3e:	2700      	movs	r7, #0
	while (ul_size > 0) {
  404a40:	ebbb 0b04 	subs.w	fp, fp, r4
  404a44:	d032      	beq.n	404aac <flash_write+0xb0>
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  404a46:	f5c7 7300 	rsb	r3, r7, #512	; 0x200
  404a4a:	9302      	str	r3, [sp, #8]
  404a4c:	461c      	mov	r4, r3
  404a4e:	455b      	cmp	r3, fp
  404a50:	bf28      	it	cs
  404a52:	465c      	movcs	r4, fp
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  404a54:	f8cd a004 	str.w	sl, [sp, #4]
  404a58:	f50a 5300 	add.w	r3, sl, #8192	; 0x2000
  404a5c:	ea4f 2843 	mov.w	r8, r3, lsl #9
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  404a60:	463a      	mov	r2, r7
  404a62:	4641      	mov	r1, r8
  404a64:	4648      	mov	r0, r9
  404a66:	4e16      	ldr	r6, [pc, #88]	; (404ac0 <flash_write+0xc4>)
  404a68:	47b0      	blx	r6
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
  404a6a:	4622      	mov	r2, r4
  404a6c:	9900      	ldr	r1, [sp, #0]
  404a6e:	eb09 0007 	add.w	r0, r9, r7
  404a72:	47b0      	blx	r6
		memcpy(puc_page_buffer + us_offset + writeSize,
  404a74:	1938      	adds	r0, r7, r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
  404a76:	9a02      	ldr	r2, [sp, #8]
  404a78:	1b12      	subs	r2, r2, r4
				(void *)(ul_page_addr + us_offset + writeSize),
  404a7a:	eb04 0108 	add.w	r1, r4, r8
		memcpy(puc_page_buffer + us_offset + writeSize,
  404a7e:	b292      	uxth	r2, r2
  404a80:	4439      	add	r1, r7
  404a82:	4448      	add	r0, r9
  404a84:	47b0      	blx	r6
  404a86:	f1a9 0304 	sub.w	r3, r9, #4
  404a8a:	f1a8 0204 	sub.w	r2, r8, #4
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  404a8e:	f853 1f04 	ldr.w	r1, [r3, #4]!
  404a92:	f842 1f04 	str.w	r1, [r2, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  404a96:	42ab      	cmp	r3, r5
  404a98:	d1f9      	bne.n	404a8e <flash_write+0x92>
		if (ul_erase_flag) {
  404a9a:	9b03      	ldr	r3, [sp, #12]
  404a9c:	2b00      	cmp	r3, #0
  404a9e:	d0c0      	beq.n	404a22 <flash_write+0x26>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  404aa0:	9a01      	ldr	r2, [sp, #4]
  404aa2:	2103      	movs	r1, #3
  404aa4:	4804      	ldr	r0, [pc, #16]	; (404ab8 <flash_write+0xbc>)
  404aa6:	4b05      	ldr	r3, [pc, #20]	; (404abc <flash_write+0xc0>)
  404aa8:	4798      	blx	r3
  404aaa:	e7bf      	b.n	404a2c <flash_write+0x30>
#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
#endif

	return FLASH_RC_OK;
  404aac:	4658      	mov	r0, fp
}
  404aae:	b005      	add	sp, #20
  404ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return FLASH_RC_OK;
  404ab4:	4610      	mov	r0, r2
  404ab6:	e7fa      	b.n	404aae <flash_write+0xb2>
  404ab8:	400e0c00 	.word	0x400e0c00
  404abc:	00401e85 	.word	0x00401e85
  404ac0:	0040ce81 	.word	0x0040ce81
  404ac4:	20400cbc 	.word	0x20400cbc

00404ac8 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
  404ac8:	b570      	push	{r4, r5, r6, lr}
  404aca:	b086      	sub	sp, #24
  404acc:	4604      	mov	r4, r0
  404ace:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
  404ad0:	2304      	movs	r3, #4
  404ad2:	9300      	str	r3, [sp, #0]
  404ad4:	ab02      	add	r3, sp, #8
  404ad6:	220f      	movs	r2, #15
  404ad8:	210e      	movs	r1, #14
  404ada:	480d      	ldr	r0, [pc, #52]	; (404b10 <flash_read_unique_id+0x48>)
  404adc:	4d0d      	ldr	r5, [pc, #52]	; (404b14 <flash_read_unique_id+0x4c>)
  404ade:	47a8      	blx	r5
  404ae0:	b118      	cbz	r0, 404aea <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
  404ae2:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
  404ae4:	4628      	mov	r0, r5
  404ae6:	b006      	add	sp, #24
  404ae8:	bd70      	pop	{r4, r5, r6, pc}
  404aea:	4605      	mov	r5, r0
  404aec:	2e04      	cmp	r6, #4
  404aee:	bf28      	it	cs
  404af0:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
  404af2:	b156      	cbz	r6, 404b0a <flash_read_unique_id+0x42>
  404af4:	aa02      	add	r2, sp, #8
  404af6:	4623      	mov	r3, r4
  404af8:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
  404afc:	f852 0b04 	ldr.w	r0, [r2], #4
  404b00:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
  404b04:	428b      	cmp	r3, r1
  404b06:	d1f9      	bne.n	404afc <flash_read_unique_id+0x34>
  404b08:	e7ec      	b.n	404ae4 <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
  404b0a:	4635      	mov	r5, r6
  404b0c:	e7ea      	b.n	404ae4 <flash_read_unique_id+0x1c>
  404b0e:	bf00      	nop
  404b10:	400e0c00 	.word	0x400e0c00
  404b14:	20400001 	.word	0x20400001

00404b18 <Dummy_Handler>:
//    uart_settings.ul_mck = sysclk_get_peripheral_hz();
//    uart_settings.ul_baudrate = CONF_UART_BAUDRATE;
//    uart_settings.ul_mode = CONF_UART_PARITY;
//    uart_init(CONF_UART, &uart_settings);
        while (1) {
			WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  404b18:	4a01      	ldr	r2, [pc, #4]	; (404b20 <Dummy_Handler+0x8>)
  404b1a:	4b02      	ldr	r3, [pc, #8]	; (404b24 <Dummy_Handler+0xc>)
  404b1c:	6013      	str	r3, [r2, #0]
  404b1e:	e7fd      	b.n	404b1c <Dummy_Handler+0x4>
  404b20:	400e1850 	.word	0x400e1850
  404b24:	a5000001 	.word	0xa5000001

00404b28 <Reset_Handler>:
{
  404b28:	b500      	push	{lr}
  404b2a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  404b2c:	4b25      	ldr	r3, [pc, #148]	; (404bc4 <Reset_Handler+0x9c>)
  404b2e:	4a26      	ldr	r2, [pc, #152]	; (404bc8 <Reset_Handler+0xa0>)
  404b30:	429a      	cmp	r2, r3
  404b32:	d010      	beq.n	404b56 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  404b34:	4b25      	ldr	r3, [pc, #148]	; (404bcc <Reset_Handler+0xa4>)
  404b36:	4a23      	ldr	r2, [pc, #140]	; (404bc4 <Reset_Handler+0x9c>)
  404b38:	429a      	cmp	r2, r3
  404b3a:	d20c      	bcs.n	404b56 <Reset_Handler+0x2e>
  404b3c:	3b01      	subs	r3, #1
  404b3e:	1a9b      	subs	r3, r3, r2
  404b40:	f023 0303 	bic.w	r3, r3, #3
  404b44:	3304      	adds	r3, #4
  404b46:	4413      	add	r3, r2
  404b48:	491f      	ldr	r1, [pc, #124]	; (404bc8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  404b4a:	f851 0b04 	ldr.w	r0, [r1], #4
  404b4e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  404b52:	429a      	cmp	r2, r3
  404b54:	d1f9      	bne.n	404b4a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  404b56:	4b1e      	ldr	r3, [pc, #120]	; (404bd0 <Reset_Handler+0xa8>)
  404b58:	4a1e      	ldr	r2, [pc, #120]	; (404bd4 <Reset_Handler+0xac>)
  404b5a:	429a      	cmp	r2, r3
  404b5c:	d20a      	bcs.n	404b74 <Reset_Handler+0x4c>
  404b5e:	3b01      	subs	r3, #1
  404b60:	1a9b      	subs	r3, r3, r2
  404b62:	f023 0303 	bic.w	r3, r3, #3
  404b66:	3304      	adds	r3, #4
  404b68:	4413      	add	r3, r2
                *pDest++ = 0;
  404b6a:	2100      	movs	r1, #0
  404b6c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  404b70:	4293      	cmp	r3, r2
  404b72:	d1fb      	bne.n	404b6c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  404b74:	4a18      	ldr	r2, [pc, #96]	; (404bd8 <Reset_Handler+0xb0>)
  404b76:	4b19      	ldr	r3, [pc, #100]	; (404bdc <Reset_Handler+0xb4>)
  404b78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  404b7c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404b7e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404b82:	fab3 f383 	clz	r3, r3
  404b86:	095b      	lsrs	r3, r3, #5
  404b88:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404b8a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  404b8c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404b90:	2200      	movs	r2, #0
  404b92:	4b13      	ldr	r3, [pc, #76]	; (404be0 <Reset_Handler+0xb8>)
  404b94:	701a      	strb	r2, [r3, #0]
	return flags;
  404b96:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  404b98:	4a12      	ldr	r2, [pc, #72]	; (404be4 <Reset_Handler+0xbc>)
  404b9a:	6813      	ldr	r3, [r2, #0]
  404b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  404ba0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  404ba2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404ba6:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  404baa:	b129      	cbz	r1, 404bb8 <Reset_Handler+0x90>
		cpu_irq_enable();
  404bac:	2201      	movs	r2, #1
  404bae:	4b0c      	ldr	r3, [pc, #48]	; (404be0 <Reset_Handler+0xb8>)
  404bb0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  404bb2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404bb6:	b662      	cpsie	i
        __libc_init_array();
  404bb8:	4b0b      	ldr	r3, [pc, #44]	; (404be8 <Reset_Handler+0xc0>)
  404bba:	4798      	blx	r3
        main();
  404bbc:	4b0b      	ldr	r3, [pc, #44]	; (404bec <Reset_Handler+0xc4>)
  404bbe:	4798      	blx	r3
  404bc0:	e7fe      	b.n	404bc0 <Reset_Handler+0x98>
  404bc2:	bf00      	nop
  404bc4:	20400000 	.word	0x20400000
  404bc8:	00410f60 	.word	0x00410f60
  404bcc:	20400b30 	.word	0x20400b30
  404bd0:	20401224 	.word	0x20401224
  404bd4:	20400b40 	.word	0x20400b40
  404bd8:	e000ed00 	.word	0xe000ed00
  404bdc:	00400000 	.word	0x00400000
  404be0:	20400177 	.word	0x20400177
  404be4:	e000ed88 	.word	0xe000ed88
  404be8:	0040ce09 	.word	0x0040ce09
  404bec:	0040c1ad 	.word	0x0040c1ad

00404bf0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  404bf0:	4b3b      	ldr	r3, [pc, #236]	; (404ce0 <SystemCoreClockUpdate+0xf0>)
  404bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404bf4:	f003 0303 	and.w	r3, r3, #3
  404bf8:	2b01      	cmp	r3, #1
  404bfa:	d01d      	beq.n	404c38 <SystemCoreClockUpdate+0x48>
  404bfc:	b183      	cbz	r3, 404c20 <SystemCoreClockUpdate+0x30>
  404bfe:	2b02      	cmp	r3, #2
  404c00:	d036      	beq.n	404c70 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  404c02:	4b37      	ldr	r3, [pc, #220]	; (404ce0 <SystemCoreClockUpdate+0xf0>)
  404c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404c06:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404c0a:	2b70      	cmp	r3, #112	; 0x70
  404c0c:	d05f      	beq.n	404cce <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  404c0e:	4b34      	ldr	r3, [pc, #208]	; (404ce0 <SystemCoreClockUpdate+0xf0>)
  404c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  404c12:	4934      	ldr	r1, [pc, #208]	; (404ce4 <SystemCoreClockUpdate+0xf4>)
  404c14:	f3c2 1202 	ubfx	r2, r2, #4, #3
  404c18:	680b      	ldr	r3, [r1, #0]
  404c1a:	40d3      	lsrs	r3, r2
  404c1c:	600b      	str	r3, [r1, #0]
  404c1e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  404c20:	4b31      	ldr	r3, [pc, #196]	; (404ce8 <SystemCoreClockUpdate+0xf8>)
  404c22:	695b      	ldr	r3, [r3, #20]
  404c24:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  404c28:	bf14      	ite	ne
  404c2a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  404c2e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  404c32:	4b2c      	ldr	r3, [pc, #176]	; (404ce4 <SystemCoreClockUpdate+0xf4>)
  404c34:	601a      	str	r2, [r3, #0]
  404c36:	e7e4      	b.n	404c02 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404c38:	4b29      	ldr	r3, [pc, #164]	; (404ce0 <SystemCoreClockUpdate+0xf0>)
  404c3a:	6a1b      	ldr	r3, [r3, #32]
  404c3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404c40:	d003      	beq.n	404c4a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  404c42:	4a2a      	ldr	r2, [pc, #168]	; (404cec <SystemCoreClockUpdate+0xfc>)
  404c44:	4b27      	ldr	r3, [pc, #156]	; (404ce4 <SystemCoreClockUpdate+0xf4>)
  404c46:	601a      	str	r2, [r3, #0]
  404c48:	e7db      	b.n	404c02 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404c4a:	4a29      	ldr	r2, [pc, #164]	; (404cf0 <SystemCoreClockUpdate+0x100>)
  404c4c:	4b25      	ldr	r3, [pc, #148]	; (404ce4 <SystemCoreClockUpdate+0xf4>)
  404c4e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  404c50:	4b23      	ldr	r3, [pc, #140]	; (404ce0 <SystemCoreClockUpdate+0xf0>)
  404c52:	6a1b      	ldr	r3, [r3, #32]
  404c54:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404c58:	2b10      	cmp	r3, #16
  404c5a:	d005      	beq.n	404c68 <SystemCoreClockUpdate+0x78>
  404c5c:	2b20      	cmp	r3, #32
  404c5e:	d1d0      	bne.n	404c02 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  404c60:	4a22      	ldr	r2, [pc, #136]	; (404cec <SystemCoreClockUpdate+0xfc>)
  404c62:	4b20      	ldr	r3, [pc, #128]	; (404ce4 <SystemCoreClockUpdate+0xf4>)
  404c64:	601a      	str	r2, [r3, #0]
          break;
  404c66:	e7cc      	b.n	404c02 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  404c68:	4a22      	ldr	r2, [pc, #136]	; (404cf4 <SystemCoreClockUpdate+0x104>)
  404c6a:	4b1e      	ldr	r3, [pc, #120]	; (404ce4 <SystemCoreClockUpdate+0xf4>)
  404c6c:	601a      	str	r2, [r3, #0]
          break;
  404c6e:	e7c8      	b.n	404c02 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404c70:	4b1b      	ldr	r3, [pc, #108]	; (404ce0 <SystemCoreClockUpdate+0xf0>)
  404c72:	6a1b      	ldr	r3, [r3, #32]
  404c74:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404c78:	d016      	beq.n	404ca8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  404c7a:	4a1c      	ldr	r2, [pc, #112]	; (404cec <SystemCoreClockUpdate+0xfc>)
  404c7c:	4b19      	ldr	r3, [pc, #100]	; (404ce4 <SystemCoreClockUpdate+0xf4>)
  404c7e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  404c80:	4b17      	ldr	r3, [pc, #92]	; (404ce0 <SystemCoreClockUpdate+0xf0>)
  404c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404c84:	f003 0303 	and.w	r3, r3, #3
  404c88:	2b02      	cmp	r3, #2
  404c8a:	d1ba      	bne.n	404c02 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  404c8c:	4a14      	ldr	r2, [pc, #80]	; (404ce0 <SystemCoreClockUpdate+0xf0>)
  404c8e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  404c90:	6a92      	ldr	r2, [r2, #40]	; 0x28
  404c92:	4814      	ldr	r0, [pc, #80]	; (404ce4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  404c94:	f3c1 410a 	ubfx	r1, r1, #16, #11
  404c98:	6803      	ldr	r3, [r0, #0]
  404c9a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  404c9e:	b2d2      	uxtb	r2, r2
  404ca0:	fbb3 f3f2 	udiv	r3, r3, r2
  404ca4:	6003      	str	r3, [r0, #0]
  404ca6:	e7ac      	b.n	404c02 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404ca8:	4a11      	ldr	r2, [pc, #68]	; (404cf0 <SystemCoreClockUpdate+0x100>)
  404caa:	4b0e      	ldr	r3, [pc, #56]	; (404ce4 <SystemCoreClockUpdate+0xf4>)
  404cac:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  404cae:	4b0c      	ldr	r3, [pc, #48]	; (404ce0 <SystemCoreClockUpdate+0xf0>)
  404cb0:	6a1b      	ldr	r3, [r3, #32]
  404cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404cb6:	2b10      	cmp	r3, #16
  404cb8:	d005      	beq.n	404cc6 <SystemCoreClockUpdate+0xd6>
  404cba:	2b20      	cmp	r3, #32
  404cbc:	d1e0      	bne.n	404c80 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  404cbe:	4a0b      	ldr	r2, [pc, #44]	; (404cec <SystemCoreClockUpdate+0xfc>)
  404cc0:	4b08      	ldr	r3, [pc, #32]	; (404ce4 <SystemCoreClockUpdate+0xf4>)
  404cc2:	601a      	str	r2, [r3, #0]
          break;
  404cc4:	e7dc      	b.n	404c80 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  404cc6:	4a0b      	ldr	r2, [pc, #44]	; (404cf4 <SystemCoreClockUpdate+0x104>)
  404cc8:	4b06      	ldr	r3, [pc, #24]	; (404ce4 <SystemCoreClockUpdate+0xf4>)
  404cca:	601a      	str	r2, [r3, #0]
          break;
  404ccc:	e7d8      	b.n	404c80 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  404cce:	4a05      	ldr	r2, [pc, #20]	; (404ce4 <SystemCoreClockUpdate+0xf4>)
  404cd0:	6813      	ldr	r3, [r2, #0]
  404cd2:	4909      	ldr	r1, [pc, #36]	; (404cf8 <SystemCoreClockUpdate+0x108>)
  404cd4:	fba1 1303 	umull	r1, r3, r1, r3
  404cd8:	085b      	lsrs	r3, r3, #1
  404cda:	6013      	str	r3, [r2, #0]
  404cdc:	4770      	bx	lr
  404cde:	bf00      	nop
  404ce0:	400e0600 	.word	0x400e0600
  404ce4:	20400178 	.word	0x20400178
  404ce8:	400e1810 	.word	0x400e1810
  404cec:	00b71b00 	.word	0x00b71b00
  404cf0:	003d0900 	.word	0x003d0900
  404cf4:	007a1200 	.word	0x007a1200
  404cf8:	aaaaaaab 	.word	0xaaaaaaab

00404cfc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  404cfc:	4b16      	ldr	r3, [pc, #88]	; (404d58 <system_init_flash+0x5c>)
  404cfe:	4298      	cmp	r0, r3
  404d00:	d913      	bls.n	404d2a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  404d02:	4b16      	ldr	r3, [pc, #88]	; (404d5c <system_init_flash+0x60>)
  404d04:	4298      	cmp	r0, r3
  404d06:	d915      	bls.n	404d34 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  404d08:	4b15      	ldr	r3, [pc, #84]	; (404d60 <system_init_flash+0x64>)
  404d0a:	4298      	cmp	r0, r3
  404d0c:	d916      	bls.n	404d3c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  404d0e:	4b15      	ldr	r3, [pc, #84]	; (404d64 <system_init_flash+0x68>)
  404d10:	4298      	cmp	r0, r3
  404d12:	d917      	bls.n	404d44 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  404d14:	4b14      	ldr	r3, [pc, #80]	; (404d68 <system_init_flash+0x6c>)
  404d16:	4298      	cmp	r0, r3
  404d18:	d918      	bls.n	404d4c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  404d1a:	4b14      	ldr	r3, [pc, #80]	; (404d6c <system_init_flash+0x70>)
  404d1c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  404d1e:	bf94      	ite	ls
  404d20:	4a13      	ldrls	r2, [pc, #76]	; (404d70 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  404d22:	4a14      	ldrhi	r2, [pc, #80]	; (404d74 <system_init_flash+0x78>)
  404d24:	4b14      	ldr	r3, [pc, #80]	; (404d78 <system_init_flash+0x7c>)
  404d26:	601a      	str	r2, [r3, #0]
  404d28:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  404d2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  404d2e:	4b12      	ldr	r3, [pc, #72]	; (404d78 <system_init_flash+0x7c>)
  404d30:	601a      	str	r2, [r3, #0]
  404d32:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  404d34:	4a11      	ldr	r2, [pc, #68]	; (404d7c <system_init_flash+0x80>)
  404d36:	4b10      	ldr	r3, [pc, #64]	; (404d78 <system_init_flash+0x7c>)
  404d38:	601a      	str	r2, [r3, #0]
  404d3a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  404d3c:	4a10      	ldr	r2, [pc, #64]	; (404d80 <system_init_flash+0x84>)
  404d3e:	4b0e      	ldr	r3, [pc, #56]	; (404d78 <system_init_flash+0x7c>)
  404d40:	601a      	str	r2, [r3, #0]
  404d42:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  404d44:	4a0f      	ldr	r2, [pc, #60]	; (404d84 <system_init_flash+0x88>)
  404d46:	4b0c      	ldr	r3, [pc, #48]	; (404d78 <system_init_flash+0x7c>)
  404d48:	601a      	str	r2, [r3, #0]
  404d4a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  404d4c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  404d50:	4b09      	ldr	r3, [pc, #36]	; (404d78 <system_init_flash+0x7c>)
  404d52:	601a      	str	r2, [r3, #0]
  404d54:	4770      	bx	lr
  404d56:	bf00      	nop
  404d58:	015ef3bf 	.word	0x015ef3bf
  404d5c:	02bde77f 	.word	0x02bde77f
  404d60:	041cdb3f 	.word	0x041cdb3f
  404d64:	057bceff 	.word	0x057bceff
  404d68:	06dac2bf 	.word	0x06dac2bf
  404d6c:	0839b67f 	.word	0x0839b67f
  404d70:	04000500 	.word	0x04000500
  404d74:	04000600 	.word	0x04000600
  404d78:	400e0c00 	.word	0x400e0c00
  404d7c:	04000100 	.word	0x04000100
  404d80:	04000200 	.word	0x04000200
  404d84:	04000300 	.word	0x04000300

00404d88 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  404d88:	4b0a      	ldr	r3, [pc, #40]	; (404db4 <_sbrk+0x2c>)
  404d8a:	681b      	ldr	r3, [r3, #0]
  404d8c:	b153      	cbz	r3, 404da4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  404d8e:	4b09      	ldr	r3, [pc, #36]	; (404db4 <_sbrk+0x2c>)
  404d90:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  404d92:	181a      	adds	r2, r3, r0
  404d94:	4908      	ldr	r1, [pc, #32]	; (404db8 <_sbrk+0x30>)
  404d96:	4291      	cmp	r1, r2
  404d98:	db08      	blt.n	404dac <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  404d9a:	4610      	mov	r0, r2
  404d9c:	4a05      	ldr	r2, [pc, #20]	; (404db4 <_sbrk+0x2c>)
  404d9e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  404da0:	4618      	mov	r0, r3
  404da2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  404da4:	4a05      	ldr	r2, [pc, #20]	; (404dbc <_sbrk+0x34>)
  404da6:	4b03      	ldr	r3, [pc, #12]	; (404db4 <_sbrk+0x2c>)
  404da8:	601a      	str	r2, [r3, #0]
  404daa:	e7f0      	b.n	404d8e <_sbrk+0x6>
		return (caddr_t) -1;	
  404dac:	f04f 30ff 	mov.w	r0, #4294967295
}
  404db0:	4770      	bx	lr
  404db2:	bf00      	nop
  404db4:	20400ebc 	.word	0x20400ebc
  404db8:	2045fffc 	.word	0x2045fffc
  404dbc:	20409428 	.word	0x20409428

00404dc0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  404dc0:	f04f 30ff 	mov.w	r0, #4294967295
  404dc4:	4770      	bx	lr

00404dc6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  404dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  404dca:	604b      	str	r3, [r1, #4]

	return 0;
}
  404dcc:	2000      	movs	r0, #0
  404dce:	4770      	bx	lr

00404dd0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  404dd0:	2001      	movs	r0, #1
  404dd2:	4770      	bx	lr

00404dd4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  404dd4:	2000      	movs	r0, #0
  404dd6:	4770      	bx	lr

00404dd8 <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  404dd8:	2802      	cmp	r0, #2
  404dda:	d815      	bhi.n	404e08 <disk_initialize+0x30>
{
  404ddc:	b510      	push	{r4, lr}
  404dde:	4604      	mov	r4, r0
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  404de0:	4b0b      	ldr	r3, [pc, #44]	; (404e10 <disk_initialize+0x38>)
  404de2:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  404de4:	2803      	cmp	r0, #3
  404de6:	d106      	bne.n	404df6 <disk_initialize+0x1e>
		mem_status = mem_test_unit_ready(drv);
  404de8:	4620      	mov	r0, r4
  404dea:	4b09      	ldr	r3, [pc, #36]	; (404e10 <disk_initialize+0x38>)
  404dec:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  404dee:	2803      	cmp	r0, #3
  404df0:	d101      	bne.n	404df6 <disk_initialize+0x1e>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  404df2:	2001      	movs	r0, #1
  404df4:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  404df6:	b948      	cbnz	r0, 404e0c <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  404df8:	4620      	mov	r0, r4
  404dfa:	4b06      	ldr	r3, [pc, #24]	; (404e14 <disk_initialize+0x3c>)
  404dfc:	4798      	blx	r3
  404dfe:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  404e00:	bf14      	ite	ne
  404e02:	2004      	movne	r0, #4
  404e04:	2000      	moveq	r0, #0
  404e06:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  404e08:	2001      	movs	r0, #1
  404e0a:	4770      	bx	lr
		return STA_NOINIT;
  404e0c:	2001      	movs	r0, #1
}
  404e0e:	bd10      	pop	{r4, pc}
  404e10:	00401d51 	.word	0x00401d51
  404e14:	00401d95 	.word	0x00401d95

00404e18 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  404e18:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  404e1a:	4b05      	ldr	r3, [pc, #20]	; (404e30 <disk_status+0x18>)
  404e1c:	4798      	blx	r3
  404e1e:	b120      	cbz	r0, 404e2a <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  404e20:	2802      	cmp	r0, #2
  404e22:	bf0c      	ite	eq
  404e24:	2003      	moveq	r0, #3
  404e26:	2001      	movne	r0, #1
  404e28:	bd08      	pop	{r3, pc}
		return 0;
  404e2a:	2000      	movs	r0, #0
	}
}
  404e2c:	bd08      	pop	{r3, pc}
  404e2e:	bf00      	nop
  404e30:	00401d51 	.word	0x00401d51

00404e34 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  404e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e38:	b083      	sub	sp, #12
  404e3a:	4680      	mov	r8, r0
  404e3c:	460d      	mov	r5, r1
  404e3e:	4614      	mov	r4, r2
  404e40:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  404e42:	4b15      	ldr	r3, [pc, #84]	; (404e98 <disk_read+0x64>)
  404e44:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  404e46:	b918      	cbnz	r0, 404e50 <disk_read+0x1c>
		return RES_ERROR;
  404e48:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  404e4a:	b003      	add	sp, #12
  404e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e50:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  404e52:	a901      	add	r1, sp, #4
  404e54:	4640      	mov	r0, r8
  404e56:	4b11      	ldr	r3, [pc, #68]	; (404e9c <disk_read+0x68>)
  404e58:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  404e5a:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  404e5c:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  404e60:	9b01      	ldr	r3, [sp, #4]
  404e62:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  404e66:	429a      	cmp	r2, r3
  404e68:	d901      	bls.n	404e6e <disk_read+0x3a>
		return RES_PARERR;
  404e6a:	2004      	movs	r0, #4
  404e6c:	e7ed      	b.n	404e4a <disk_read+0x16>
	for (i = 0; i < count; i++) {
  404e6e:	46ba      	mov	sl, r7
  404e70:	b177      	cbz	r7, 404e90 <disk_read+0x5c>
  404e72:	0276      	lsls	r6, r6, #9
  404e74:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  404e76:	f8df b028 	ldr.w	fp, [pc, #40]	; 404ea0 <disk_read+0x6c>
  404e7a:	462a      	mov	r2, r5
  404e7c:	4621      	mov	r1, r4
  404e7e:	4640      	mov	r0, r8
  404e80:	47d8      	blx	fp
  404e82:	b938      	cbnz	r0, 404e94 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  404e84:	3701      	adds	r7, #1
  404e86:	444c      	add	r4, r9
  404e88:	4435      	add	r5, r6
  404e8a:	4557      	cmp	r7, sl
  404e8c:	d1f5      	bne.n	404e7a <disk_read+0x46>
  404e8e:	e7dc      	b.n	404e4a <disk_read+0x16>
	return RES_OK;
  404e90:	2000      	movs	r0, #0
  404e92:	e7da      	b.n	404e4a <disk_read+0x16>
			return RES_ERROR;
  404e94:	2001      	movs	r0, #1
  404e96:	e7d8      	b.n	404e4a <disk_read+0x16>
  404e98:	00401d89 	.word	0x00401d89
  404e9c:	00401d69 	.word	0x00401d69
  404ea0:	00401db1 	.word	0x00401db1

00404ea4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  404ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ea8:	b083      	sub	sp, #12
  404eaa:	4680      	mov	r8, r0
  404eac:	460d      	mov	r5, r1
  404eae:	4614      	mov	r4, r2
  404eb0:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  404eb2:	4b15      	ldr	r3, [pc, #84]	; (404f08 <disk_write+0x64>)
  404eb4:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  404eb6:	b918      	cbnz	r0, 404ec0 <disk_write+0x1c>
		return RES_ERROR;
  404eb8:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  404eba:	b003      	add	sp, #12
  404ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ec0:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  404ec2:	a901      	add	r1, sp, #4
  404ec4:	4640      	mov	r0, r8
  404ec6:	4b11      	ldr	r3, [pc, #68]	; (404f0c <disk_write+0x68>)
  404ec8:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  404eca:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  404ecc:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  404ed0:	9b01      	ldr	r3, [sp, #4]
  404ed2:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  404ed6:	429a      	cmp	r2, r3
  404ed8:	d901      	bls.n	404ede <disk_write+0x3a>
		return RES_PARERR;
  404eda:	2004      	movs	r0, #4
  404edc:	e7ed      	b.n	404eba <disk_write+0x16>
	for (i = 0; i < count; i++) {
  404ede:	46ba      	mov	sl, r7
  404ee0:	b177      	cbz	r7, 404f00 <disk_write+0x5c>
  404ee2:	0276      	lsls	r6, r6, #9
  404ee4:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  404ee6:	f8df b028 	ldr.w	fp, [pc, #40]	; 404f10 <disk_write+0x6c>
  404eea:	462a      	mov	r2, r5
  404eec:	4621      	mov	r1, r4
  404eee:	4640      	mov	r0, r8
  404ef0:	47d8      	blx	fp
  404ef2:	b938      	cbnz	r0, 404f04 <disk_write+0x60>
	for (i = 0; i < count; i++) {
  404ef4:	3701      	adds	r7, #1
  404ef6:	444c      	add	r4, r9
  404ef8:	4435      	add	r5, r6
  404efa:	4557      	cmp	r7, sl
  404efc:	d1f5      	bne.n	404eea <disk_write+0x46>
  404efe:	e7dc      	b.n	404eba <disk_write+0x16>
	return RES_OK;
  404f00:	2000      	movs	r0, #0
  404f02:	e7da      	b.n	404eba <disk_write+0x16>
			return RES_ERROR;
  404f04:	2001      	movs	r0, #1
  404f06:	e7d8      	b.n	404eba <disk_write+0x16>
  404f08:	00401d89 	.word	0x00401d89
  404f0c:	00401d69 	.word	0x00401d69
  404f10:	00401dd5 	.word	0x00401dd5

00404f14 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  404f14:	b510      	push	{r4, lr}
  404f16:	b082      	sub	sp, #8
  404f18:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  404f1a:	2903      	cmp	r1, #3
  404f1c:	d825      	bhi.n	404f6a <disk_ioctl+0x56>
  404f1e:	e8df f001 	tbb	[pc, r1]
  404f22:	071d      	.short	0x071d
  404f24:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  404f26:	2301      	movs	r3, #1
  404f28:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  404f2a:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  404f2c:	b002      	add	sp, #8
  404f2e:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  404f30:	a901      	add	r1, sp, #4
  404f32:	4b11      	ldr	r3, [pc, #68]	; (404f78 <disk_ioctl+0x64>)
  404f34:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  404f36:	9b01      	ldr	r3, [sp, #4]
  404f38:	3301      	adds	r3, #1
  404f3a:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  404f3c:	2000      	movs	r0, #0
	break;
  404f3e:	e7f5      	b.n	404f2c <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  404f40:	4b0e      	ldr	r3, [pc, #56]	; (404f7c <disk_ioctl+0x68>)
  404f42:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  404f44:	2808      	cmp	r0, #8
  404f46:	d812      	bhi.n	404f6e <disk_ioctl+0x5a>
  404f48:	f44f 738b 	mov.w	r3, #278	; 0x116
  404f4c:	fa23 f000 	lsr.w	r0, r3, r0
				(uc_sector_size != SECTOR_SIZE_2048) &&
  404f50:	f010 0f01 	tst.w	r0, #1
  404f54:	d00d      	beq.n	404f72 <disk_ioctl+0x5e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  404f56:	2000      	movs	r0, #0
  404f58:	7020      	strb	r0, [r4, #0]
	break;
  404f5a:	e7e7      	b.n	404f2c <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  404f5c:	4b08      	ldr	r3, [pc, #32]	; (404f80 <disk_ioctl+0x6c>)
  404f5e:	4798      	blx	r3
  404f60:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  404f62:	bf0c      	ite	eq
  404f64:	2000      	moveq	r0, #0
  404f66:	2003      	movne	r0, #3
  404f68:	e7e0      	b.n	404f2c <disk_ioctl+0x18>
		res = RES_PARERR;
  404f6a:	2004      	movs	r0, #4
  404f6c:	e7de      	b.n	404f2c <disk_ioctl+0x18>
			return RES_ERROR;
  404f6e:	2001      	movs	r0, #1
  404f70:	e7dc      	b.n	404f2c <disk_ioctl+0x18>
  404f72:	2001      	movs	r0, #1
  404f74:	e7da      	b.n	404f2c <disk_ioctl+0x18>
  404f76:	bf00      	nop
  404f78:	00401d69 	.word	0x00401d69
  404f7c:	00401d89 	.word	0x00401d89
  404f80:	00401d51 	.word	0x00401d51

00404f84 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  404f84:	b530      	push	{r4, r5, lr}
  404f86:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  404f88:	4c11      	ldr	r4, [pc, #68]	; (404fd0 <get_fattime+0x4c>)
  404f8a:	ab07      	add	r3, sp, #28
  404f8c:	aa08      	add	r2, sp, #32
  404f8e:	a909      	add	r1, sp, #36	; 0x24
  404f90:	4620      	mov	r0, r4
  404f92:	4d10      	ldr	r5, [pc, #64]	; (404fd4 <get_fattime+0x50>)
  404f94:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  404f96:	ab03      	add	r3, sp, #12
  404f98:	9300      	str	r3, [sp, #0]
  404f9a:	ab04      	add	r3, sp, #16
  404f9c:	aa05      	add	r2, sp, #20
  404f9e:	a906      	add	r1, sp, #24
  404fa0:	4620      	mov	r0, r4
  404fa2:	4c0d      	ldr	r4, [pc, #52]	; (404fd8 <get_fattime+0x54>)
  404fa4:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  404fa6:	9b04      	ldr	r3, [sp, #16]
  404fa8:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  404faa:	9805      	ldr	r0, [sp, #20]
  404fac:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  404fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
  404fb2:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  404fb6:	9808      	ldr	r0, [sp, #32]
  404fb8:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  404fbc:	9807      	ldr	r0, [sp, #28]
  404fbe:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  404fc2:	9806      	ldr	r0, [sp, #24]
  404fc4:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  404fc8:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  404fcc:	b00b      	add	sp, #44	; 0x2c
  404fce:	bd30      	pop	{r4, r5, pc}
  404fd0:	400e1860 	.word	0x400e1860
  404fd4:	00402535 	.word	0x00402535
  404fd8:	00402621 	.word	0x00402621

00404fdc <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  404fdc:	b13a      	cbz	r2, 404fee <mem_cpy+0x12>
  404fde:	3801      	subs	r0, #1
  404fe0:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  404fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
  404fe6:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  404fea:	4291      	cmp	r1, r2
  404fec:	d1f9      	bne.n	404fe2 <mem_cpy+0x6>
  404fee:	4770      	bx	lr

00404ff0 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  404ff0:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  404ff2:	6983      	ldr	r3, [r0, #24]
  404ff4:	3b02      	subs	r3, #2
  404ff6:	4299      	cmp	r1, r3
  404ff8:	d204      	bcs.n	405004 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
  404ffa:	7883      	ldrb	r3, [r0, #2]
  404ffc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  404ffe:	fb01 0003 	mla	r0, r1, r3, r0
  405002:	4770      	bx	lr
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  405004:	2000      	movs	r0, #0
}
  405006:	4770      	bx	lr

00405008 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  405008:	4602      	mov	r2, r0
  40500a:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  40500e:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  405010:	01c3      	lsls	r3, r0, #7
  405012:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  405016:	f812 0b01 	ldrb.w	r0, [r2], #1
  40501a:	fa50 f383 	uxtab	r3, r0, r3
  40501e:	b2d8      	uxtb	r0, r3
  405020:	428a      	cmp	r2, r1
  405022:	d1f5      	bne.n	405010 <sum_sfn+0x8>
	return sum;
}
  405024:	4770      	bx	lr
	...

00405028 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  405028:	b198      	cbz	r0, 405052 <validate+0x2a>
{
  40502a:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  40502c:	7802      	ldrb	r2, [r0, #0]
  40502e:	b90a      	cbnz	r2, 405034 <validate+0xc>
		return FR_INVALID_OBJECT;
  405030:	2009      	movs	r0, #9
  405032:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  405034:	88c2      	ldrh	r2, [r0, #6]
  405036:	428a      	cmp	r2, r1
  405038:	d001      	beq.n	40503e <validate+0x16>
		return FR_INVALID_OBJECT;
  40503a:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  40503c:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  40503e:	7840      	ldrb	r0, [r0, #1]
  405040:	4b05      	ldr	r3, [pc, #20]	; (405058 <validate+0x30>)
  405042:	4798      	blx	r3
  405044:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  405048:	2800      	cmp	r0, #0
  40504a:	bf14      	ite	ne
  40504c:	2003      	movne	r0, #3
  40504e:	2000      	moveq	r0, #0
  405050:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  405052:	2009      	movs	r0, #9
  405054:	4770      	bx	lr
  405056:	bf00      	nop
  405058:	00404e19 	.word	0x00404e19

0040505c <check_fs>:
{
  40505c:	b538      	push	{r3, r4, r5, lr}
  40505e:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  405060:	2301      	movs	r3, #1
  405062:	460a      	mov	r2, r1
  405064:	f100 0130 	add.w	r1, r0, #48	; 0x30
  405068:	7840      	ldrb	r0, [r0, #1]
  40506a:	4d1d      	ldr	r5, [pc, #116]	; (4050e0 <check_fs+0x84>)
  40506c:	47a8      	blx	r5
  40506e:	b108      	cbz	r0, 405074 <check_fs+0x18>
		return 3;
  405070:	2003      	movs	r0, #3
  405072:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  405074:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  405078:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  40507c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  405080:	b21b      	sxth	r3, r3
  405082:	4a18      	ldr	r2, [pc, #96]	; (4050e4 <check_fs+0x88>)
  405084:	4293      	cmp	r3, r2
  405086:	d001      	beq.n	40508c <check_fs+0x30>
		return 2;
  405088:	2002      	movs	r0, #2
  40508a:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  40508c:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  405090:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  405094:	041b      	lsls	r3, r3, #16
  405096:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40509a:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  40509e:	4313      	orrs	r3, r2
  4050a0:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  4050a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4050a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4050ac:	4a0e      	ldr	r2, [pc, #56]	; (4050e8 <check_fs+0x8c>)
  4050ae:	4293      	cmp	r3, r2
  4050b0:	d013      	beq.n	4050da <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  4050b2:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  4050b6:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  4050ba:	0400      	lsls	r0, r0, #16
  4050bc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  4050c0:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  4050c4:	4318      	orrs	r0, r3
  4050c6:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  4050ca:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4050ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  4050d2:	1a80      	subs	r0, r0, r2
  4050d4:	bf18      	it	ne
  4050d6:	2001      	movne	r0, #1
  4050d8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  4050da:	2000      	movs	r0, #0
}
  4050dc:	bd38      	pop	{r3, r4, r5, pc}
  4050de:	bf00      	nop
  4050e0:	00404e35 	.word	0x00404e35
  4050e4:	ffffaa55 	.word	0xffffaa55
  4050e8:	00544146 	.word	0x00544146

004050ec <chk_mounted>:
{
  4050ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  4050ee:	6804      	ldr	r4, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  4050f0:	7823      	ldrb	r3, [r4, #0]
  4050f2:	3b30      	subs	r3, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  4050f4:	2b09      	cmp	r3, #9
  4050f6:	d802      	bhi.n	4050fe <chk_mounted+0x12>
  4050f8:	7865      	ldrb	r5, [r4, #1]
  4050fa:	2d3a      	cmp	r5, #58	; 0x3a
  4050fc:	d018      	beq.n	405130 <chk_mounted+0x44>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  4050fe:	4bb0      	ldr	r3, [pc, #704]	; (4053c0 <chk_mounted+0x2d4>)
  405100:	681c      	ldr	r4, [r3, #0]
  405102:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  405104:	2c00      	cmp	r4, #0
  405106:	f000 8143 	beq.w	405390 <chk_mounted+0x2a4>
  40510a:	4615      	mov	r5, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  40510c:	7823      	ldrb	r3, [r4, #0]
  40510e:	b1ab      	cbz	r3, 40513c <chk_mounted+0x50>
		stat = disk_status(fs->drv);
  405110:	7860      	ldrb	r0, [r4, #1]
  405112:	4bac      	ldr	r3, [pc, #688]	; (4053c4 <chk_mounted+0x2d8>)
  405114:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  405116:	f010 0f01 	tst.w	r0, #1
  40511a:	d10f      	bne.n	40513c <chk_mounted+0x50>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  40511c:	2d00      	cmp	r5, #0
  40511e:	f000 8139 	beq.w	405394 <chk_mounted+0x2a8>
  405122:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  405126:	2800      	cmp	r0, #0
  405128:	bf0c      	ite	eq
  40512a:	2000      	moveq	r0, #0
  40512c:	200a      	movne	r0, #10
  40512e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p += 2; *path = p;				/* Return pointer to the path name */
  405130:	3402      	adds	r4, #2
  405132:	6004      	str	r4, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  405134:	2b00      	cmp	r3, #0
  405136:	d0e2      	beq.n	4050fe <chk_mounted+0x12>
		return FR_INVALID_DRIVE;
  405138:	200b      	movs	r0, #11
  40513a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  40513c:	2000      	movs	r0, #0
  40513e:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  405140:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  405142:	4ba1      	ldr	r3, [pc, #644]	; (4053c8 <chk_mounted+0x2dc>)
  405144:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  405146:	f010 0f01 	tst.w	r0, #1
  40514a:	d001      	beq.n	405150 <chk_mounted+0x64>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  40514c:	2003      	movs	r0, #3
  40514e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  405150:	b125      	cbz	r5, 40515c <chk_mounted+0x70>
  405152:	f010 0f04 	tst.w	r0, #4
  405156:	d001      	beq.n	40515c <chk_mounted+0x70>
		return FR_WRITE_PROTECTED;
  405158:	200a      	movs	r0, #10
  40515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  40515c:	2100      	movs	r1, #0
  40515e:	4620      	mov	r0, r4
  405160:	4b9a      	ldr	r3, [pc, #616]	; (4053cc <chk_mounted+0x2e0>)
  405162:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  405164:	2801      	cmp	r0, #1
  405166:	d006      	beq.n	405176 <chk_mounted+0x8a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  405168:	2500      	movs	r5, #0
	if (fmt == 3) return FR_DISK_ERR;
  40516a:	2803      	cmp	r0, #3
  40516c:	f000 8114 	beq.w	405398 <chk_mounted+0x2ac>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  405170:	b1c8      	cbz	r0, 4051a6 <chk_mounted+0xba>
  405172:	200d      	movs	r0, #13
  405174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  405176:	f894 31f2 	ldrb.w	r3, [r4, #498]	; 0x1f2
  40517a:	b90b      	cbnz	r3, 405180 <chk_mounted+0x94>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  40517c:	200d      	movs	r0, #13
  40517e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  405180:	f894 31f9 	ldrb.w	r3, [r4, #505]	; 0x1f9
  405184:	f894 51f8 	ldrb.w	r5, [r4, #504]	; 0x1f8
  405188:	042d      	lsls	r5, r5, #16
  40518a:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
  40518e:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
  405192:	431d      	orrs	r5, r3
  405194:	f894 31f7 	ldrb.w	r3, [r4, #503]	; 0x1f7
  405198:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  40519c:	4629      	mov	r1, r5
  40519e:	4620      	mov	r0, r4
  4051a0:	4b8a      	ldr	r3, [pc, #552]	; (4053cc <chk_mounted+0x2e0>)
  4051a2:	4798      	blx	r3
  4051a4:	e7e1      	b.n	40516a <chk_mounted+0x7e>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  4051a6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  4051aa:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
  4051ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4051b2:	b21b      	sxth	r3, r3
  4051b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4051b8:	d001      	beq.n	4051be <chk_mounted+0xd2>
		return FR_NO_FILESYSTEM;
  4051ba:	200d      	movs	r0, #13
  4051bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  4051be:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  4051c2:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  4051c6:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  4051ca:	d10d      	bne.n	4051e8 <chk_mounted+0xfc>
  4051cc:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
  4051d0:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
  4051d4:	0412      	lsls	r2, r2, #16
  4051d6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  4051da:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
  4051de:	431a      	orrs	r2, r3
  4051e0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
  4051e4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  4051e8:	61e2      	str	r2, [r4, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  4051ea:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
  4051ee:	f884 e003 	strb.w	lr, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  4051f2:	f10e 33ff 	add.w	r3, lr, #4294967295
  4051f6:	b2db      	uxtb	r3, r3
  4051f8:	2b01      	cmp	r3, #1
  4051fa:	d901      	bls.n	405200 <chk_mounted+0x114>
  4051fc:	200d      	movs	r0, #13
  4051fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  405200:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
  405204:	70a6      	strb	r6, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  405206:	2e00      	cmp	r6, #0
  405208:	f000 80c8 	beq.w	40539c <chk_mounted+0x2b0>
  40520c:	1e73      	subs	r3, r6, #1
  40520e:	4233      	tst	r3, r6
  405210:	d001      	beq.n	405216 <chk_mounted+0x12a>
  405212:	200d      	movs	r0, #13
  405214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  405216:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  40521a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  40521e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  405222:	8121      	strh	r1, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  405224:	f011 0f0f 	tst.w	r1, #15
  405228:	f040 80ba 	bne.w	4053a0 <chk_mounted+0x2b4>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  40522c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  405230:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  405234:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  405238:	d10d      	bne.n	405256 <chk_mounted+0x16a>
  40523a:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
  40523e:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
  405242:	041b      	lsls	r3, r3, #16
  405244:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  405248:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
  40524c:	4303      	orrs	r3, r0
  40524e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  405252:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  405256:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
  40525a:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  40525e:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  405262:	f000 809f 	beq.w	4053a4 <chk_mounted+0x2b8>
	fasize *= b;										/* Number of sectors for FAT area */
  405266:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  40526a:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  40526e:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  405270:	4283      	cmp	r3, r0
  405272:	f0c0 8099 	bcc.w	4053a8 <chk_mounted+0x2bc>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  405276:	1a1b      	subs	r3, r3, r0
  405278:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  40527c:	2b00      	cmp	r3, #0
  40527e:	f000 8095 	beq.w	4053ac <chk_mounted+0x2c0>
	fmt = FS_FAT12;
  405282:	f640 76f5 	movw	r6, #4085	; 0xff5
  405286:	42b3      	cmp	r3, r6
  405288:	bf8c      	ite	hi
  40528a:	2602      	movhi	r6, #2
  40528c:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  40528e:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  405292:	4563      	cmp	r3, ip
  405294:	f200 80a4 	bhi.w	4053e0 <chk_mounted+0x2f4>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  405298:	3302      	adds	r3, #2
  40529a:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  40529c:	4428      	add	r0, r5
  40529e:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  4052a0:	443d      	add	r5, r7
  4052a2:	6225      	str	r5, [r4, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  4052a4:	2900      	cmp	r1, #0
  4052a6:	f000 8089 	beq.w	4053bc <chk_mounted+0x2d0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  4052aa:	4475      	add	r5, lr
  4052ac:	6265      	str	r5, [r4, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  4052ae:	2e02      	cmp	r6, #2
  4052b0:	d10b      	bne.n	4052ca <chk_mounted+0x1de>
  4052b2:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  4052b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  4052b8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  4052bc:	d37c      	bcc.n	4053b8 <chk_mounted+0x2cc>
	fs->free_clust = 0xFFFFFFFF;
  4052be:	f04f 33ff 	mov.w	r3, #4294967295
  4052c2:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
  4052c4:	2300      	movs	r3, #0
  4052c6:	60e3      	str	r3, [r4, #12]
  4052c8:	e051      	b.n	40536e <chk_mounted+0x282>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  4052ca:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4052ce:	f003 0301 	and.w	r3, r3, #1
  4052d2:	eb03 0351 	add.w	r3, r3, r1, lsr #1
  4052d6:	e7ed      	b.n	4052b4 <chk_mounted+0x1c8>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  4052d8:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  4052dc:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  4052e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  4052e4:	b21b      	sxth	r3, r3
  4052e6:	4a3a      	ldr	r2, [pc, #232]	; (4053d0 <chk_mounted+0x2e4>)
  4052e8:	4293      	cmp	r3, r2
  4052ea:	d14b      	bne.n	405384 <chk_mounted+0x298>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  4052ec:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  4052f0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  4052f4:	041b      	lsls	r3, r3, #16
  4052f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4052fa:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  4052fe:	4313      	orrs	r3, r2
  405300:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
  405304:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  405308:	4a32      	ldr	r2, [pc, #200]	; (4053d4 <chk_mounted+0x2e8>)
  40530a:	4293      	cmp	r3, r2
  40530c:	d13c      	bne.n	405388 <chk_mounted+0x29c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  40530e:	f894 2217 	ldrb.w	r2, [r4, #535]	; 0x217
  405312:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
  405316:	041b      	lsls	r3, r3, #16
  405318:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40531c:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
  405320:	4313      	orrs	r3, r2
  405322:	f894 2215 	ldrb.w	r2, [r4, #533]	; 0x215
  405326:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  40532a:	4a2b      	ldr	r2, [pc, #172]	; (4053d8 <chk_mounted+0x2ec>)
  40532c:	4293      	cmp	r3, r2
  40532e:	d12d      	bne.n	40538c <chk_mounted+0x2a0>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  405330:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
  405334:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
  405338:	041b      	lsls	r3, r3, #16
  40533a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40533e:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
  405342:	4313      	orrs	r3, r2
  405344:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
  405348:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40534c:	60e3      	str	r3, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  40534e:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
  405352:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
  405356:	041b      	lsls	r3, r3, #16
  405358:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40535c:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
  405360:	4313      	orrs	r3, r2
  405362:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
  405366:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40536a:	6123      	str	r3, [r4, #16]
  40536c:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  40536e:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  405370:	4a1a      	ldr	r2, [pc, #104]	; (4053dc <chk_mounted+0x2f0>)
  405372:	8813      	ldrh	r3, [r2, #0]
  405374:	3301      	adds	r3, #1
  405376:	b29b      	uxth	r3, r3
  405378:	8013      	strh	r3, [r2, #0]
  40537a:	80e3      	strh	r3, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  40537c:	2000      	movs	r0, #0
  40537e:	62e0      	str	r0, [r4, #44]	; 0x2c
	fs->wflag = 0;
  405380:	7120      	strb	r0, [r4, #4]
	return FR_OK;
  405382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405384:	2603      	movs	r6, #3
  405386:	e7f2      	b.n	40536e <chk_mounted+0x282>
  405388:	2603      	movs	r6, #3
  40538a:	e7f0      	b.n	40536e <chk_mounted+0x282>
  40538c:	2603      	movs	r6, #3
  40538e:	e7ee      	b.n	40536e <chk_mounted+0x282>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  405390:	200c      	movs	r0, #12
  405392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  405394:	2000      	movs	r0, #0
  405396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  405398:	2001      	movs	r0, #1
  40539a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  40539c:	200d      	movs	r0, #13
  40539e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  4053a0:	200d      	movs	r0, #13
  4053a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  4053a4:	200d      	movs	r0, #13
  4053a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  4053a8:	200d      	movs	r0, #13
  4053aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  4053ac:	200d      	movs	r0, #13
  4053ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  4053b0:	200d      	movs	r0, #13
  4053b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  4053b4:	200d      	movs	r0, #13
  4053b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  4053b8:	200d      	movs	r0, #13
  4053ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  4053bc:	200d      	movs	r0, #13
  4053be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4053c0:	20400ec0 	.word	0x20400ec0
  4053c4:	00404e19 	.word	0x00404e19
  4053c8:	00404dd9 	.word	0x00404dd9
  4053cc:	0040505d 	.word	0x0040505d
  4053d0:	ffffaa55 	.word	0xffffaa55
  4053d4:	41615252 	.word	0x41615252
  4053d8:	61417272 	.word	0x61417272
  4053dc:	20400ec4 	.word	0x20400ec4
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  4053e0:	3302      	adds	r3, #2
  4053e2:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  4053e4:	4428      	add	r0, r5
  4053e6:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  4053e8:	442f      	add	r7, r5
  4053ea:	6227      	str	r7, [r4, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  4053ec:	2900      	cmp	r1, #0
  4053ee:	d1e1      	bne.n	4053b4 <chk_mounted+0x2c8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  4053f0:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
  4053f4:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
  4053f8:	0409      	lsls	r1, r1, #16
  4053fa:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  4053fe:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  405402:	4301      	orrs	r1, r0
  405404:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  405408:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  40540c:	6261      	str	r1, [r4, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  40540e:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  405410:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  405414:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  405418:	d3ca      	bcc.n	4053b0 <chk_mounted+0x2c4>
	fs->free_clust = 0xFFFFFFFF;
  40541a:	f04f 33ff 	mov.w	r3, #4294967295
  40541e:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
  405420:	2300      	movs	r3, #0
  405422:	60e3      	str	r3, [r4, #12]
	 	fs->fsi_flag = 0;
  405424:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  405426:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
  40542a:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
  40542e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  405432:	442a      	add	r2, r5
  405434:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  405436:	2301      	movs	r3, #1
  405438:	f104 0130 	add.w	r1, r4, #48	; 0x30
  40543c:	7860      	ldrb	r0, [r4, #1]
  40543e:	4d03      	ldr	r5, [pc, #12]	; (40544c <chk_mounted+0x360>)
  405440:	47a8      	blx	r5
  405442:	2800      	cmp	r0, #0
  405444:	f43f af48 	beq.w	4052d8 <chk_mounted+0x1ec>
  405448:	2603      	movs	r6, #3
  40544a:	e790      	b.n	40536e <chk_mounted+0x282>
  40544c:	00404e35 	.word	0x00404e35

00405450 <move_window>:
{
  405450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  405454:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  405456:	428f      	cmp	r7, r1
  405458:	d035      	beq.n	4054c6 <move_window+0x76>
  40545a:	460e      	mov	r6, r1
  40545c:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  40545e:	7903      	ldrb	r3, [r0, #4]
  405460:	b91b      	cbnz	r3, 40546a <move_window+0x1a>
		if (sector) {
  405462:	bb2e      	cbnz	r6, 4054b0 <move_window+0x60>
	return FR_OK;
  405464:	2000      	movs	r0, #0
  405466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  40546a:	f100 0830 	add.w	r8, r0, #48	; 0x30
  40546e:	2301      	movs	r3, #1
  405470:	463a      	mov	r2, r7
  405472:	4641      	mov	r1, r8
  405474:	7840      	ldrb	r0, [r0, #1]
  405476:	4d18      	ldr	r5, [pc, #96]	; (4054d8 <move_window+0x88>)
  405478:	47a8      	blx	r5
  40547a:	bb38      	cbnz	r0, 4054cc <move_window+0x7c>
			fs->wflag = 0;
  40547c:	2300      	movs	r3, #0
  40547e:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  405480:	6a23      	ldr	r3, [r4, #32]
  405482:	69e2      	ldr	r2, [r4, #28]
  405484:	4413      	add	r3, r2
  405486:	429f      	cmp	r7, r3
  405488:	d2eb      	bcs.n	405462 <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40548a:	78e5      	ldrb	r5, [r4, #3]
  40548c:	2d01      	cmp	r5, #1
  40548e:	d9e8      	bls.n	405462 <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  405490:	f04f 0a01 	mov.w	sl, #1
  405494:	f8df 9040 	ldr.w	r9, [pc, #64]	; 4054d8 <move_window+0x88>
					wsect += fs->fsize;
  405498:	69e3      	ldr	r3, [r4, #28]
  40549a:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  40549c:	4653      	mov	r3, sl
  40549e:	463a      	mov	r2, r7
  4054a0:	4641      	mov	r1, r8
  4054a2:	7860      	ldrb	r0, [r4, #1]
  4054a4:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  4054a6:	3d01      	subs	r5, #1
  4054a8:	b2ed      	uxtb	r5, r5
  4054aa:	2d01      	cmp	r5, #1
  4054ac:	d1f4      	bne.n	405498 <move_window+0x48>
  4054ae:	e7d8      	b.n	405462 <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  4054b0:	2301      	movs	r3, #1
  4054b2:	4632      	mov	r2, r6
  4054b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
  4054b8:	7860      	ldrb	r0, [r4, #1]
  4054ba:	4d08      	ldr	r5, [pc, #32]	; (4054dc <move_window+0x8c>)
  4054bc:	47a8      	blx	r5
  4054be:	b940      	cbnz	r0, 4054d2 <move_window+0x82>
			fs->winsect = sector;
  4054c0:	62e6      	str	r6, [r4, #44]	; 0x2c
  4054c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  4054c6:	2000      	movs	r0, #0
  4054c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  4054cc:	2001      	movs	r0, #1
  4054ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  4054d2:	2001      	movs	r0, #1
}
  4054d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4054d8:	00404ea5 	.word	0x00404ea5
  4054dc:	00404e35 	.word	0x00404e35

004054e0 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4054e0:	2901      	cmp	r1, #1
  4054e2:	d96a      	bls.n	4055ba <get_fat+0xda>
{
  4054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4054e6:	6983      	ldr	r3, [r0, #24]
  4054e8:	4299      	cmp	r1, r3
  4054ea:	d268      	bcs.n	4055be <get_fat+0xde>
  4054ec:	460c      	mov	r4, r1
  4054ee:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  4054f0:	7803      	ldrb	r3, [r0, #0]
  4054f2:	2b02      	cmp	r3, #2
  4054f4:	d02f      	beq.n	405556 <get_fat+0x76>
  4054f6:	2b03      	cmp	r3, #3
  4054f8:	d041      	beq.n	40557e <get_fat+0x9e>
  4054fa:	2b01      	cmp	r3, #1
  4054fc:	d002      	beq.n	405504 <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4054fe:	f04f 30ff 	mov.w	r0, #4294967295
  405502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  405504:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  405508:	6a01      	ldr	r1, [r0, #32]
  40550a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  40550e:	4b2d      	ldr	r3, [pc, #180]	; (4055c4 <get_fat+0xe4>)
  405510:	4798      	blx	r3
  405512:	b110      	cbz	r0, 40551a <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405514:	f04f 30ff 	mov.w	r0, #4294967295
  405518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  40551a:	f3c7 0308 	ubfx	r3, r7, #0, #9
  40551e:	4433      	add	r3, r6
  405520:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  405524:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  405526:	6a31      	ldr	r1, [r6, #32]
  405528:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  40552c:	4630      	mov	r0, r6
  40552e:	4b25      	ldr	r3, [pc, #148]	; (4055c4 <get_fat+0xe4>)
  405530:	4798      	blx	r3
  405532:	b110      	cbz	r0, 40553a <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405534:	f04f 30ff 	mov.w	r0, #4294967295
  405538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  40553a:	f3c7 0708 	ubfx	r7, r7, #0, #9
  40553e:	19f0      	adds	r0, r6, r7
  405540:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  405544:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  405548:	f014 0f01 	tst.w	r4, #1
  40554c:	bf14      	ite	ne
  40554e:	0900      	lsrne	r0, r0, #4
  405550:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  405554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  405556:	6a01      	ldr	r1, [r0, #32]
  405558:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  40555c:	4b19      	ldr	r3, [pc, #100]	; (4055c4 <get_fat+0xe4>)
  40555e:	4798      	blx	r3
  405560:	b110      	cbz	r0, 405568 <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405562:	f04f 30ff 	mov.w	r0, #4294967295
  405566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  405568:	0060      	lsls	r0, r4, #1
  40556a:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  40556e:	4430      	add	r0, r6
  405570:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  405574:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  405578:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40557c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  40557e:	6a01      	ldr	r1, [r0, #32]
  405580:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  405584:	4b0f      	ldr	r3, [pc, #60]	; (4055c4 <get_fat+0xe4>)
  405586:	4798      	blx	r3
  405588:	b110      	cbz	r0, 405590 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40558a:	f04f 30ff 	mov.w	r0, #4294967295
}
  40558e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  405590:	00a0      	lsls	r0, r4, #2
  405592:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  405596:	f100 0230 	add.w	r2, r0, #48	; 0x30
  40559a:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  40559c:	78d1      	ldrb	r1, [r2, #3]
  40559e:	7893      	ldrb	r3, [r2, #2]
  4055a0:	041b      	lsls	r3, r3, #16
  4055a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4055a6:	4430      	add	r0, r6
  4055a8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4055ac:	4318      	orrs	r0, r3
  4055ae:	7853      	ldrb	r3, [r2, #1]
  4055b0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4055b4:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  4055b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  4055ba:	2001      	movs	r0, #1
  4055bc:	4770      	bx	lr
  4055be:	2001      	movs	r0, #1
  4055c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4055c2:	bf00      	nop
  4055c4:	00405451 	.word	0x00405451

004055c8 <dir_sdi>:
{
  4055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4055ca:	4605      	mov	r5, r0
  4055cc:	460c      	mov	r4, r1
	dj->index = idx;
  4055ce:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  4055d0:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  4055d2:	2901      	cmp	r1, #1
  4055d4:	d03d      	beq.n	405652 <dir_sdi+0x8a>
  4055d6:	6803      	ldr	r3, [r0, #0]
  4055d8:	699a      	ldr	r2, [r3, #24]
  4055da:	4291      	cmp	r1, r2
  4055dc:	d301      	bcc.n	4055e2 <dir_sdi+0x1a>
		return FR_INT_ERR;
  4055de:	2002      	movs	r0, #2
  4055e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  4055e2:	b961      	cbnz	r1, 4055fe <dir_sdi+0x36>
  4055e4:	781a      	ldrb	r2, [r3, #0]
  4055e6:	2a03      	cmp	r2, #3
  4055e8:	d006      	beq.n	4055f8 <dir_sdi+0x30>
		dj->clust = clst;
  4055ea:	2200      	movs	r2, #0
  4055ec:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  4055ee:	891a      	ldrh	r2, [r3, #8]
  4055f0:	42a2      	cmp	r2, r4
  4055f2:	d821      	bhi.n	405638 <dir_sdi+0x70>
			return FR_INT_ERR;
  4055f4:	2002      	movs	r0, #2
  4055f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  4055f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  4055fa:	2900      	cmp	r1, #0
  4055fc:	d0f5      	beq.n	4055ea <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  4055fe:	789e      	ldrb	r6, [r3, #2]
  405600:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  405602:	42b4      	cmp	r4, r6
  405604:	d310      	bcc.n	405628 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  405606:	4f17      	ldr	r7, [pc, #92]	; (405664 <dir_sdi+0x9c>)
  405608:	6828      	ldr	r0, [r5, #0]
  40560a:	47b8      	blx	r7
  40560c:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  40560e:	f1b0 3fff 	cmp.w	r0, #4294967295
  405612:	d020      	beq.n	405656 <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  405614:	2801      	cmp	r0, #1
  405616:	d920      	bls.n	40565a <dir_sdi+0x92>
  405618:	682b      	ldr	r3, [r5, #0]
  40561a:	699b      	ldr	r3, [r3, #24]
  40561c:	4298      	cmp	r0, r3
  40561e:	d21e      	bcs.n	40565e <dir_sdi+0x96>
			idx -= ic;
  405620:	1ba4      	subs	r4, r4, r6
  405622:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  405624:	42a6      	cmp	r6, r4
  405626:	d9ef      	bls.n	405608 <dir_sdi+0x40>
		dj->clust = clst;
  405628:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40562a:	6828      	ldr	r0, [r5, #0]
  40562c:	4b0e      	ldr	r3, [pc, #56]	; (405668 <dir_sdi+0xa0>)
  40562e:	4798      	blx	r3
  405630:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  405634:	6128      	str	r0, [r5, #16]
  405636:	e003      	b.n	405640 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  405638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40563a:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  40563e:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  405640:	682b      	ldr	r3, [r5, #0]
  405642:	3330      	adds	r3, #48	; 0x30
  405644:	f004 040f 	and.w	r4, r4, #15
  405648:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  40564c:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  40564e:	2000      	movs	r0, #0
  405650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  405652:	2002      	movs	r0, #2
  405654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  405656:	2001      	movs	r0, #1
  405658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  40565a:	2002      	movs	r0, #2
  40565c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40565e:	2002      	movs	r0, #2
}
  405660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405662:	bf00      	nop
  405664:	004054e1 	.word	0x004054e1
  405668:	00404ff1 	.word	0x00404ff1

0040566c <put_fat>:
{
  40566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  405670:	2901      	cmp	r1, #1
  405672:	f240 808f 	bls.w	405794 <put_fat+0x128>
  405676:	6983      	ldr	r3, [r0, #24]
  405678:	4299      	cmp	r1, r3
  40567a:	d301      	bcc.n	405680 <put_fat+0x14>
		res = FR_INT_ERR;
  40567c:	2702      	movs	r7, #2
	return res;
  40567e:	e08a      	b.n	405796 <put_fat+0x12a>
  405680:	4615      	mov	r5, r2
  405682:	460c      	mov	r4, r1
  405684:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  405686:	7803      	ldrb	r3, [r0, #0]
  405688:	2b02      	cmp	r3, #2
  40568a:	d04e      	beq.n	40572a <put_fat+0xbe>
  40568c:	2b03      	cmp	r3, #3
  40568e:	d05f      	beq.n	405750 <put_fat+0xe4>
  405690:	2b01      	cmp	r3, #1
  405692:	d003      	beq.n	40569c <put_fat+0x30>
			res = FR_INT_ERR;
  405694:	2702      	movs	r7, #2
		fs->wflag = 1;
  405696:	2301      	movs	r3, #1
  405698:	7133      	strb	r3, [r6, #4]
  40569a:	e07c      	b.n	405796 <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  40569c:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4056a0:	6a01      	ldr	r1, [r0, #32]
  4056a2:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4056a6:	4b3d      	ldr	r3, [pc, #244]	; (40579c <put_fat+0x130>)
  4056a8:	4798      	blx	r3
			if (res != FR_OK) break;
  4056aa:	4607      	mov	r7, r0
  4056ac:	2800      	cmp	r0, #0
  4056ae:	d1f2      	bne.n	405696 <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  4056b0:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4056b4:	f014 0f01 	tst.w	r4, #1
  4056b8:	d01c      	beq.n	4056f4 <put_fat+0x88>
  4056ba:	4433      	add	r3, r6
  4056bc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  4056c0:	f002 020f 	and.w	r2, r2, #15
  4056c4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  4056c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  4056cc:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  4056d0:	2301      	movs	r3, #1
  4056d2:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4056d4:	6a31      	ldr	r1, [r6, #32]
  4056d6:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4056da:	4630      	mov	r0, r6
  4056dc:	4b2f      	ldr	r3, [pc, #188]	; (40579c <put_fat+0x130>)
  4056de:	4798      	blx	r3
			if (res != FR_OK) break;
  4056e0:	2800      	cmp	r0, #0
  4056e2:	d153      	bne.n	40578c <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  4056e4:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  4056e8:	f3c5 1207 	ubfx	r2, r5, #4, #8
  4056ec:	44b0      	add	r8, r6
  4056ee:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  4056f2:	e7d0      	b.n	405696 <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4056f4:	4433      	add	r3, r6
  4056f6:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  4056fa:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  4056fe:	2301      	movs	r3, #1
  405700:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  405702:	6a31      	ldr	r1, [r6, #32]
  405704:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  405708:	4630      	mov	r0, r6
  40570a:	4b24      	ldr	r3, [pc, #144]	; (40579c <put_fat+0x130>)
  40570c:	4798      	blx	r3
			if (res != FR_OK) break;
  40570e:	2800      	cmp	r0, #0
  405710:	d13e      	bne.n	405790 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  405712:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  405716:	eb06 0308 	add.w	r3, r6, r8
  40571a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  40571e:	f023 030f 	bic.w	r3, r3, #15
  405722:	f3c5 2203 	ubfx	r2, r5, #8, #4
  405726:	431a      	orrs	r2, r3
  405728:	e7e0      	b.n	4056ec <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  40572a:	6a01      	ldr	r1, [r0, #32]
  40572c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  405730:	4b1a      	ldr	r3, [pc, #104]	; (40579c <put_fat+0x130>)
  405732:	4798      	blx	r3
			if (res != FR_OK) break;
  405734:	4607      	mov	r7, r0
  405736:	2800      	cmp	r0, #0
  405738:	d1ad      	bne.n	405696 <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  40573a:	0063      	lsls	r3, r4, #1
  40573c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  405740:	4433      	add	r3, r6
  405742:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  405746:	f3c5 2207 	ubfx	r2, r5, #8, #8
  40574a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  40574e:	e7a2      	b.n	405696 <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  405750:	6a01      	ldr	r1, [r0, #32]
  405752:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  405756:	4b11      	ldr	r3, [pc, #68]	; (40579c <put_fat+0x130>)
  405758:	4798      	blx	r3
			if (res != FR_OK) break;
  40575a:	4607      	mov	r7, r0
  40575c:	2800      	cmp	r0, #0
  40575e:	d19a      	bne.n	405696 <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  405760:	00a1      	lsls	r1, r4, #2
  405762:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  405766:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40576a:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  40576c:	78da      	ldrb	r2, [r3, #3]
  40576e:	0612      	lsls	r2, r2, #24
  405770:	4431      	add	r1, r6
  405772:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  405776:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  405778:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  40577c:	f3c2 2107 	ubfx	r1, r2, #8, #8
  405780:	7059      	strb	r1, [r3, #1]
  405782:	0c11      	lsrs	r1, r2, #16
  405784:	7099      	strb	r1, [r3, #2]
  405786:	0e12      	lsrs	r2, r2, #24
  405788:	70da      	strb	r2, [r3, #3]
			break;
  40578a:	e784      	b.n	405696 <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40578c:	4607      	mov	r7, r0
  40578e:	e782      	b.n	405696 <put_fat+0x2a>
  405790:	4607      	mov	r7, r0
  405792:	e780      	b.n	405696 <put_fat+0x2a>
		res = FR_INT_ERR;
  405794:	2702      	movs	r7, #2
}
  405796:	4638      	mov	r0, r7
  405798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40579c:	00405451 	.word	0x00405451

004057a0 <create_chain>:
{
  4057a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4057a4:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  4057a6:	4688      	mov	r8, r1
  4057a8:	b941      	cbnz	r1, 4057bc <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  4057aa:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4057ac:	b186      	cbz	r6, 4057d0 <create_chain+0x30>
  4057ae:	6983      	ldr	r3, [r0, #24]
  4057b0:	429e      	cmp	r6, r3
  4057b2:	bf28      	it	cs
  4057b4:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  4057b6:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4057b8:	4f27      	ldr	r7, [pc, #156]	; (405858 <create_chain+0xb8>)
  4057ba:	e017      	b.n	4057ec <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  4057bc:	4b26      	ldr	r3, [pc, #152]	; (405858 <create_chain+0xb8>)
  4057be:	4798      	blx	r3
  4057c0:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  4057c2:	2801      	cmp	r0, #1
  4057c4:	d93e      	bls.n	405844 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  4057c6:	69aa      	ldr	r2, [r5, #24]
  4057c8:	4290      	cmp	r0, r2
  4057ca:	d340      	bcc.n	40584e <create_chain+0xae>
		scl = clst;
  4057cc:	4646      	mov	r6, r8
  4057ce:	e7f2      	b.n	4057b6 <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4057d0:	2601      	movs	r6, #1
  4057d2:	e7f0      	b.n	4057b6 <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4057d4:	4621      	mov	r1, r4
  4057d6:	4628      	mov	r0, r5
  4057d8:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  4057da:	4603      	mov	r3, r0
  4057dc:	b170      	cbz	r0, 4057fc <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  4057de:	f1b0 3fff 	cmp.w	r0, #4294967295
  4057e2:	d034      	beq.n	40584e <create_chain+0xae>
  4057e4:	2801      	cmp	r0, #1
  4057e6:	d032      	beq.n	40584e <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  4057e8:	42b4      	cmp	r4, r6
  4057ea:	d02f      	beq.n	40584c <create_chain+0xac>
		ncl++;							/* Next cluster */
  4057ec:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  4057ee:	69ab      	ldr	r3, [r5, #24]
  4057f0:	429c      	cmp	r4, r3
  4057f2:	d3ef      	bcc.n	4057d4 <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  4057f4:	2e01      	cmp	r6, #1
  4057f6:	d927      	bls.n	405848 <create_chain+0xa8>
			ncl = 2;
  4057f8:	2402      	movs	r4, #2
  4057fa:	e7eb      	b.n	4057d4 <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  4057fc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  405800:	4621      	mov	r1, r4
  405802:	4628      	mov	r0, r5
  405804:	4b15      	ldr	r3, [pc, #84]	; (40585c <create_chain+0xbc>)
  405806:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  405808:	4603      	mov	r3, r0
  40580a:	b910      	cbnz	r0, 405812 <create_chain+0x72>
  40580c:	f1b8 0f00 	cmp.w	r8, #0
  405810:	d10b      	bne.n	40582a <create_chain+0x8a>
	if (res == FR_OK) {
  405812:	b98b      	cbnz	r3, 405838 <create_chain+0x98>
		fs->last_clust = ncl;			/* Update FSINFO */
  405814:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  405816:	692b      	ldr	r3, [r5, #16]
  405818:	f1b3 3fff 	cmp.w	r3, #4294967295
  40581c:	d01a      	beq.n	405854 <create_chain+0xb4>
			fs->free_clust--;
  40581e:	3b01      	subs	r3, #1
  405820:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  405822:	2301      	movs	r3, #1
  405824:	716b      	strb	r3, [r5, #5]
  405826:	4623      	mov	r3, r4
  405828:	e011      	b.n	40584e <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  40582a:	4622      	mov	r2, r4
  40582c:	4641      	mov	r1, r8
  40582e:	4628      	mov	r0, r5
  405830:	4b0a      	ldr	r3, [pc, #40]	; (40585c <create_chain+0xbc>)
  405832:	4798      	blx	r3
  405834:	4603      	mov	r3, r0
  405836:	e7ec      	b.n	405812 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  405838:	2b01      	cmp	r3, #1
  40583a:	bf0c      	ite	eq
  40583c:	f04f 33ff 	moveq.w	r3, #4294967295
  405840:	2301      	movne	r3, #1
  405842:	e004      	b.n	40584e <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  405844:	2301      	movs	r3, #1
  405846:	e002      	b.n	40584e <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  405848:	2300      	movs	r3, #0
  40584a:	e000      	b.n	40584e <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  40584c:	2300      	movs	r3, #0
}
  40584e:	4618      	mov	r0, r3
  405850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405854:	4623      	mov	r3, r4
  405856:	e7fa      	b.n	40584e <create_chain+0xae>
  405858:	004054e1 	.word	0x004054e1
  40585c:	0040566d 	.word	0x0040566d

00405860 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  405860:	2901      	cmp	r1, #1
  405862:	d92e      	bls.n	4058c2 <remove_chain+0x62>
{
  405864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405868:	4604      	mov	r4, r0
  40586a:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  40586c:	6983      	ldr	r3, [r0, #24]
  40586e:	4299      	cmp	r1, r3
  405870:	d303      	bcc.n	40587a <remove_chain+0x1a>
		res = FR_INT_ERR;
  405872:	2202      	movs	r2, #2
}
  405874:	4610      	mov	r0, r2
  405876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40587a:	4f16      	ldr	r7, [pc, #88]	; (4058d4 <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  40587c:	f04f 0900 	mov.w	r9, #0
  405880:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4058d8 <remove_chain+0x78>
  405884:	e003      	b.n	40588e <remove_chain+0x2e>
  405886:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  405888:	69a3      	ldr	r3, [r4, #24]
  40588a:	42ab      	cmp	r3, r5
  40588c:	d9f2      	bls.n	405874 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40588e:	4631      	mov	r1, r6
  405890:	4620      	mov	r0, r4
  405892:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  405894:	4605      	mov	r5, r0
  405896:	b1b8      	cbz	r0, 4058c8 <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  405898:	2801      	cmp	r0, #1
  40589a:	d017      	beq.n	4058cc <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  40589c:	f1b0 3fff 	cmp.w	r0, #4294967295
  4058a0:	d016      	beq.n	4058d0 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  4058a2:	464a      	mov	r2, r9
  4058a4:	4631      	mov	r1, r6
  4058a6:	4620      	mov	r0, r4
  4058a8:	47c0      	blx	r8
			if (res != FR_OK) break;
  4058aa:	4602      	mov	r2, r0
  4058ac:	2800      	cmp	r0, #0
  4058ae:	d1e1      	bne.n	405874 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  4058b0:	6923      	ldr	r3, [r4, #16]
  4058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4058b6:	d0e6      	beq.n	405886 <remove_chain+0x26>
				fs->free_clust++;
  4058b8:	3301      	adds	r3, #1
  4058ba:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  4058bc:	2301      	movs	r3, #1
  4058be:	7163      	strb	r3, [r4, #5]
  4058c0:	e7e1      	b.n	405886 <remove_chain+0x26>
		res = FR_INT_ERR;
  4058c2:	2202      	movs	r2, #2
}
  4058c4:	4610      	mov	r0, r2
  4058c6:	4770      	bx	lr
  4058c8:	2200      	movs	r2, #0
  4058ca:	e7d3      	b.n	405874 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4058cc:	2202      	movs	r2, #2
  4058ce:	e7d1      	b.n	405874 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4058d0:	2201      	movs	r2, #1
  4058d2:	e7cf      	b.n	405874 <remove_chain+0x14>
  4058d4:	004054e1 	.word	0x004054e1
  4058d8:	0040566d 	.word	0x0040566d

004058dc <sync>:
{
  4058dc:	b538      	push	{r3, r4, r5, lr}
  4058de:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  4058e0:	2100      	movs	r1, #0
  4058e2:	4b2e      	ldr	r3, [pc, #184]	; (40599c <sync+0xc0>)
  4058e4:	4798      	blx	r3
	if (res == FR_OK) {
  4058e6:	4603      	mov	r3, r0
  4058e8:	b950      	cbnz	r0, 405900 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  4058ea:	7823      	ldrb	r3, [r4, #0]
  4058ec:	2b03      	cmp	r3, #3
  4058ee:	d009      	beq.n	405904 <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  4058f0:	2200      	movs	r2, #0
  4058f2:	4611      	mov	r1, r2
  4058f4:	7860      	ldrb	r0, [r4, #1]
  4058f6:	4b2a      	ldr	r3, [pc, #168]	; (4059a0 <sync+0xc4>)
  4058f8:	4798      	blx	r3
	res = move_window(fs, 0);
  4058fa:	1c03      	adds	r3, r0, #0
  4058fc:	bf18      	it	ne
  4058fe:	2301      	movne	r3, #1
}
  405900:	4618      	mov	r0, r3
  405902:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  405904:	7963      	ldrb	r3, [r4, #5]
  405906:	2b00      	cmp	r3, #0
  405908:	d0f2      	beq.n	4058f0 <sync+0x14>
			fs->winsect = 0;
  40590a:	2300      	movs	r3, #0
  40590c:	62e3      	str	r3, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  40590e:	f104 0130 	add.w	r1, r4, #48	; 0x30
  405912:	f504 700c 	add.w	r0, r4, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  405916:	460b      	mov	r3, r1
		*d++ = (BYTE)val;
  405918:	2200      	movs	r2, #0
  40591a:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  40591e:	4283      	cmp	r3, r0
  405920:	d1fb      	bne.n	40591a <sync+0x3e>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  405922:	2355      	movs	r3, #85	; 0x55
  405924:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  405928:	23aa      	movs	r3, #170	; 0xaa
  40592a:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  40592e:	2352      	movs	r3, #82	; 0x52
  405930:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  405934:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  405938:	2361      	movs	r3, #97	; 0x61
  40593a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  40593e:	2241      	movs	r2, #65	; 0x41
  405940:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  405944:	2072      	movs	r0, #114	; 0x72
  405946:	f884 0214 	strb.w	r0, [r4, #532]	; 0x214
  40594a:	f884 0215 	strb.w	r0, [r4, #533]	; 0x215
  40594e:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  405952:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  405956:	6923      	ldr	r3, [r4, #16]
  405958:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  40595c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  405960:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  405964:	0c1a      	lsrs	r2, r3, #16
  405966:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  40596a:	0e1b      	lsrs	r3, r3, #24
  40596c:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  405970:	68e3      	ldr	r3, [r4, #12]
  405972:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  405976:	f3c3 2207 	ubfx	r2, r3, #8, #8
  40597a:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  40597e:	0c1a      	lsrs	r2, r3, #16
  405980:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  405984:	0e1b      	lsrs	r3, r3, #24
  405986:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  40598a:	2301      	movs	r3, #1
  40598c:	6962      	ldr	r2, [r4, #20]
  40598e:	7860      	ldrb	r0, [r4, #1]
  405990:	4d04      	ldr	r5, [pc, #16]	; (4059a4 <sync+0xc8>)
  405992:	47a8      	blx	r5
			fs->fsi_flag = 0;
  405994:	2300      	movs	r3, #0
  405996:	7163      	strb	r3, [r4, #5]
  405998:	e7aa      	b.n	4058f0 <sync+0x14>
  40599a:	bf00      	nop
  40599c:	00405451 	.word	0x00405451
  4059a0:	00404f15 	.word	0x00404f15
  4059a4:	00404ea5 	.word	0x00404ea5

004059a8 <dir_next>:
{
  4059a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  4059ac:	88c4      	ldrh	r4, [r0, #6]
  4059ae:	3401      	adds	r4, #1
  4059b0:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4059b2:	b914      	cbnz	r4, 4059ba <dir_next+0x12>
		return FR_NO_FILE;
  4059b4:	2004      	movs	r0, #4
  4059b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4059ba:	6903      	ldr	r3, [r0, #16]
  4059bc:	b913      	cbnz	r3, 4059c4 <dir_next+0x1c>
		return FR_NO_FILE;
  4059be:	2004      	movs	r0, #4
  4059c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059c4:	460e      	mov	r6, r1
  4059c6:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  4059c8:	f014 070f 	ands.w	r7, r4, #15
  4059cc:	d110      	bne.n	4059f0 <dir_next+0x48>
		dj->sect++;					/* Next sector */
  4059ce:	3301      	adds	r3, #1
  4059d0:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  4059d2:	68c1      	ldr	r1, [r0, #12]
  4059d4:	b931      	cbnz	r1, 4059e4 <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  4059d6:	6803      	ldr	r3, [r0, #0]
  4059d8:	891b      	ldrh	r3, [r3, #8]
  4059da:	42a3      	cmp	r3, r4
  4059dc:	d808      	bhi.n	4059f0 <dir_next+0x48>
				return FR_NO_FILE;
  4059de:	2004      	movs	r0, #4
  4059e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  4059e4:	6800      	ldr	r0, [r0, #0]
  4059e6:	7883      	ldrb	r3, [r0, #2]
  4059e8:	3b01      	subs	r3, #1
  4059ea:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  4059ee:	d008      	beq.n	405a02 <dir_next+0x5a>
	dj->index = i;
  4059f0:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  4059f2:	682b      	ldr	r3, [r5, #0]
  4059f4:	3330      	adds	r3, #48	; 0x30
  4059f6:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  4059fa:	616b      	str	r3, [r5, #20]
	return FR_OK;
  4059fc:	2000      	movs	r0, #0
  4059fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  405a02:	4b33      	ldr	r3, [pc, #204]	; (405ad0 <dir_next+0x128>)
  405a04:	4798      	blx	r3
  405a06:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  405a08:	2801      	cmp	r0, #1
  405a0a:	d94f      	bls.n	405aac <dir_next+0x104>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  405a0c:	f1b0 3fff 	cmp.w	r0, #4294967295
  405a10:	d04f      	beq.n	405ab2 <dir_next+0x10a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  405a12:	6828      	ldr	r0, [r5, #0]
  405a14:	6983      	ldr	r3, [r0, #24]
  405a16:	4598      	cmp	r8, r3
  405a18:	d340      	bcc.n	405a9c <dir_next+0xf4>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  405a1a:	b916      	cbnz	r6, 405a22 <dir_next+0x7a>
  405a1c:	2004      	movs	r0, #4
  405a1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  405a22:	68e9      	ldr	r1, [r5, #12]
  405a24:	4b2b      	ldr	r3, [pc, #172]	; (405ad4 <dir_next+0x12c>)
  405a26:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  405a28:	4680      	mov	r8, r0
  405a2a:	b910      	cbnz	r0, 405a32 <dir_next+0x8a>
  405a2c:	2007      	movs	r0, #7
  405a2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  405a32:	2801      	cmp	r0, #1
  405a34:	d040      	beq.n	405ab8 <dir_next+0x110>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  405a36:	f1b0 3fff 	cmp.w	r0, #4294967295
  405a3a:	d040      	beq.n	405abe <dir_next+0x116>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  405a3c:	2100      	movs	r1, #0
  405a3e:	6828      	ldr	r0, [r5, #0]
  405a40:	4b25      	ldr	r3, [pc, #148]	; (405ad8 <dir_next+0x130>)
  405a42:	4798      	blx	r3
  405a44:	2800      	cmp	r0, #0
  405a46:	d13d      	bne.n	405ac4 <dir_next+0x11c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  405a48:	682b      	ldr	r3, [r5, #0]
  405a4a:	f503 710c 	add.w	r1, r3, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  405a4e:	3330      	adds	r3, #48	; 0x30
		*d++ = (BYTE)val;
  405a50:	2200      	movs	r2, #0
  405a52:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  405a56:	428b      	cmp	r3, r1
  405a58:	d1fb      	bne.n	405a52 <dir_next+0xaa>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  405a5a:	682e      	ldr	r6, [r5, #0]
  405a5c:	4641      	mov	r1, r8
  405a5e:	4630      	mov	r0, r6
  405a60:	4b1e      	ldr	r3, [pc, #120]	; (405adc <dir_next+0x134>)
  405a62:	4798      	blx	r3
  405a64:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  405a66:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  405a68:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  405a6c:	46b2      	mov	sl, r6
  405a6e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 405ad8 <dir_next+0x130>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  405a72:	682b      	ldr	r3, [r5, #0]
  405a74:	7899      	ldrb	r1, [r3, #2]
  405a76:	b2f2      	uxtb	r2, r6
  405a78:	4291      	cmp	r1, r2
  405a7a:	d90b      	bls.n	405a94 <dir_next+0xec>
						dj->fs->wflag = 1;
  405a7c:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  405a80:	4651      	mov	r1, sl
  405a82:	6828      	ldr	r0, [r5, #0]
  405a84:	47c8      	blx	r9
  405a86:	3601      	adds	r6, #1
  405a88:	b9f8      	cbnz	r0, 405aca <dir_next+0x122>
						dj->fs->winsect++;
  405a8a:	682a      	ldr	r2, [r5, #0]
  405a8c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  405a8e:	3301      	adds	r3, #1
  405a90:	62d3      	str	r3, [r2, #44]	; 0x2c
  405a92:	e7ee      	b.n	405a72 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
  405a94:	4616      	mov	r6, r2
  405a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405a98:	1b96      	subs	r6, r2, r6
  405a9a:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  405a9c:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  405aa0:	4641      	mov	r1, r8
  405aa2:	6828      	ldr	r0, [r5, #0]
  405aa4:	4b0d      	ldr	r3, [pc, #52]	; (405adc <dir_next+0x134>)
  405aa6:	4798      	blx	r3
  405aa8:	6128      	str	r0, [r5, #16]
  405aaa:	e7a1      	b.n	4059f0 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  405aac:	2002      	movs	r0, #2
  405aae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  405ab2:	2001      	movs	r0, #1
  405ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  405ab8:	2002      	movs	r0, #2
  405aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  405abe:	2001      	movs	r0, #1
  405ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  405ac4:	2001      	movs	r0, #1
  405ac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  405aca:	2001      	movs	r0, #1
}
  405acc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ad0:	004054e1 	.word	0x004054e1
  405ad4:	004057a1 	.word	0x004057a1
  405ad8:	00405451 	.word	0x00405451
  405adc:	00404ff1 	.word	0x00404ff1

00405ae0 <dir_find>:
{
  405ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405ae4:	b085      	sub	sp, #20
  405ae6:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  405ae8:	2100      	movs	r1, #0
  405aea:	4b61      	ldr	r3, [pc, #388]	; (405c70 <dir_find+0x190>)
  405aec:	4798      	blx	r3
	if (res != FR_OK) return res;
  405aee:	4680      	mov	r8, r0
  405af0:	bb08      	cbnz	r0, 405b36 <dir_find+0x56>
  405af2:	f04f 0bff 	mov.w	fp, #255	; 0xff
  405af6:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  405af8:	4f5e      	ldr	r7, [pc, #376]	; (405c74 <dir_find+0x194>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  405afa:	46da      	mov	sl, fp
  405afc:	e094      	b.n	405c28 <dir_find+0x148>
			if (a == AM_LFN) {			/* An LFN entry is found */
  405afe:	2a0f      	cmp	r2, #15
  405b00:	d01d      	beq.n	405b3e <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  405b02:	f1b9 0f00 	cmp.w	r9, #0
  405b06:	d104      	bne.n	405b12 <dir_find+0x32>
  405b08:	4620      	mov	r0, r4
  405b0a:	4b5b      	ldr	r3, [pc, #364]	; (405c78 <dir_find+0x198>)
  405b0c:	4798      	blx	r3
  405b0e:	4582      	cmp	sl, r0
  405b10:	d011      	beq.n	405b36 <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  405b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
  405b16:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  405b18:	69ab      	ldr	r3, [r5, #24]
  405b1a:	7ada      	ldrb	r2, [r3, #11]
  405b1c:	f012 0f01 	tst.w	r2, #1
  405b20:	d179      	bne.n	405c16 <dir_find+0x136>
  405b22:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  405b26:	f814 1b01 	ldrb.w	r1, [r4], #1
  405b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
  405b2e:	4291      	cmp	r1, r2
  405b30:	d16b      	bne.n	405c0a <dir_find+0x12a>
  405b32:	4284      	cmp	r4, r0
  405b34:	d1f7      	bne.n	405b26 <dir_find+0x46>
}
  405b36:	4640      	mov	r0, r8
  405b38:	b005      	add	sp, #20
  405b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  405b3e:	f8d5 801c 	ldr.w	r8, [r5, #28]
  405b42:	f1b8 0f00 	cmp.w	r8, #0
  405b46:	d068      	beq.n	405c1a <dir_find+0x13a>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  405b48:	f016 0f40 	tst.w	r6, #64	; 0x40
  405b4c:	d00c      	beq.n	405b68 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  405b4e:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  405b52:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  405b56:	88eb      	ldrh	r3, [r5, #6]
  405b58:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  405b5a:	f894 b00d 	ldrb.w	fp, [r4, #13]
  405b5e:	45d3      	cmp	fp, sl
  405b60:	d007      	beq.n	405b72 <dir_find+0x92>
  405b62:	f04f 09ff 	mov.w	r9, #255	; 0xff
  405b66:	e058      	b.n	405c1a <dir_find+0x13a>
  405b68:	45b1      	cmp	r9, r6
  405b6a:	d0f6      	beq.n	405b5a <dir_find+0x7a>
  405b6c:	f04f 09ff 	mov.w	r9, #255	; 0xff
  405b70:	e053      	b.n	405c1a <dir_find+0x13a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  405b72:	f894 a000 	ldrb.w	sl, [r4]
  405b76:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  405b7a:	f10a 3aff 	add.w	sl, sl, #4294967295
  405b7e:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  405b82:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  405b86:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 405c84 <dir_find+0x1a4>
  405b8a:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  405b8e:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  405b90:	9603      	str	r6, [sp, #12]
  405b92:	f8cd b004 	str.w	fp, [sp, #4]
  405b96:	461e      	mov	r6, r3
  405b98:	9502      	str	r5, [sp, #8]
  405b9a:	e00f      	b.n	405bbc <dir_find+0xdc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  405b9c:	4618      	mov	r0, r3
  405b9e:	4b37      	ldr	r3, [pc, #220]	; (405c7c <dir_find+0x19c>)
  405ba0:	4798      	blx	r3
  405ba2:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  405ba4:	2efe      	cmp	r6, #254	; 0xfe
  405ba6:	d85a      	bhi.n	405c5e <dir_find+0x17e>
  405ba8:	1c75      	adds	r5, r6, #1
  405baa:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  405bae:	4b33      	ldr	r3, [pc, #204]	; (405c7c <dir_find+0x19c>)
  405bb0:	4798      	blx	r3
  405bb2:	4583      	cmp	fp, r0
  405bb4:	d157      	bne.n	405c66 <dir_find+0x186>
  405bb6:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  405bb8:	45d1      	cmp	r9, sl
  405bba:	d013      	beq.n	405be4 <dir_find+0x104>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  405bbc:	f819 2b01 	ldrb.w	r2, [r9], #1
  405bc0:	18a3      	adds	r3, r4, r2
  405bc2:	7859      	ldrb	r1, [r3, #1]
  405bc4:	5ca3      	ldrb	r3, [r4, r2]
  405bc6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  405bca:	2800      	cmp	r0, #0
  405bcc:	d1e6      	bne.n	405b9c <dir_find+0xbc>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  405bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
  405bd2:	4293      	cmp	r3, r2
  405bd4:	d0f0      	beq.n	405bb8 <dir_find+0xd8>
  405bd6:	f8dd b004 	ldr.w	fp, [sp, #4]
  405bda:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  405bdc:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  405bde:	f04f 09ff 	mov.w	r9, #255	; 0xff
  405be2:	e01a      	b.n	405c1a <dir_find+0x13a>
  405be4:	f8dd b004 	ldr.w	fp, [sp, #4]
  405be8:	4632      	mov	r2, r6
  405bea:	9e03      	ldr	r6, [sp, #12]
  405bec:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  405bee:	7823      	ldrb	r3, [r4, #0]
  405bf0:	f013 0f40 	tst.w	r3, #64	; 0x40
  405bf4:	d004      	beq.n	405c00 <dir_find+0x120>
  405bf6:	b118      	cbz	r0, 405c00 <dir_find+0x120>
  405bf8:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  405bfc:	2b00      	cmp	r3, #0
  405bfe:	d1ed      	bne.n	405bdc <dir_find+0xfc>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  405c00:	3e01      	subs	r6, #1
  405c02:	fa5f f986 	uxtb.w	r9, r6
  405c06:	46da      	mov	sl, fp
  405c08:	e007      	b.n	405c1a <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  405c0a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  405c0e:	e004      	b.n	405c1a <dir_find+0x13a>
			ord = 0xFF;
  405c10:	f04f 09ff 	mov.w	r9, #255	; 0xff
  405c14:	e001      	b.n	405c1a <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  405c16:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  405c1a:	2100      	movs	r1, #0
  405c1c:	4628      	mov	r0, r5
  405c1e:	4b18      	ldr	r3, [pc, #96]	; (405c80 <dir_find+0x1a0>)
  405c20:	4798      	blx	r3
	} while (res == FR_OK);
  405c22:	4680      	mov	r8, r0
  405c24:	2800      	cmp	r0, #0
  405c26:	d186      	bne.n	405b36 <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  405c28:	6929      	ldr	r1, [r5, #16]
  405c2a:	6828      	ldr	r0, [r5, #0]
  405c2c:	47b8      	blx	r7
		if (res != FR_OK) break;
  405c2e:	4680      	mov	r8, r0
  405c30:	2800      	cmp	r0, #0
  405c32:	d180      	bne.n	405b36 <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  405c34:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  405c36:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  405c38:	b176      	cbz	r6, 405c58 <dir_find+0x178>
		a = dir[DIR_Attr] & AM_MASK;
  405c3a:	7ae3      	ldrb	r3, [r4, #11]
  405c3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  405c40:	2ee5      	cmp	r6, #229	; 0xe5
  405c42:	d0e5      	beq.n	405c10 <dir_find+0x130>
  405c44:	f013 0f08 	tst.w	r3, #8
  405c48:	f43f af59 	beq.w	405afe <dir_find+0x1e>
  405c4c:	2a0f      	cmp	r2, #15
  405c4e:	f43f af56 	beq.w	405afe <dir_find+0x1e>
			ord = 0xFF;
  405c52:	f04f 09ff 	mov.w	r9, #255	; 0xff
  405c56:	e7e0      	b.n	405c1a <dir_find+0x13a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  405c58:	f04f 0804 	mov.w	r8, #4
  405c5c:	e76b      	b.n	405b36 <dir_find+0x56>
  405c5e:	f8dd b004 	ldr.w	fp, [sp, #4]
  405c62:	9d02      	ldr	r5, [sp, #8]
  405c64:	e7ba      	b.n	405bdc <dir_find+0xfc>
  405c66:	f8dd b004 	ldr.w	fp, [sp, #4]
  405c6a:	9d02      	ldr	r5, [sp, #8]
  405c6c:	e7b6      	b.n	405bdc <dir_find+0xfc>
  405c6e:	bf00      	nop
  405c70:	004055c9 	.word	0x004055c9
  405c74:	00405451 	.word	0x00405451
  405c78:	00405009 	.word	0x00405009
  405c7c:	00406a31 	.word	0x00406a31
  405c80:	004059a9 	.word	0x004059a9
  405c84:	0040fdcc 	.word	0x0040fdcc

00405c88 <follow_path>:
{
  405c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c8c:	b083      	sub	sp, #12
  405c8e:	4682      	mov	sl, r0
  405c90:	460f      	mov	r7, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  405c92:	780b      	ldrb	r3, [r1, #0]
  405c94:	2b2f      	cmp	r3, #47	; 0x2f
  405c96:	d00a      	beq.n	405cae <follow_path+0x26>
  405c98:	2b5c      	cmp	r3, #92	; 0x5c
  405c9a:	d008      	beq.n	405cae <follow_path+0x26>
	dj->sclust = 0;						/* Start from the root dir */
  405c9c:	2300      	movs	r3, #0
  405c9e:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  405ca2:	783b      	ldrb	r3, [r7, #0]
  405ca4:	2b1f      	cmp	r3, #31
  405ca6:	d904      	bls.n	405cb2 <follow_path+0x2a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  405ca8:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 405fa8 <follow_path+0x320>
  405cac:	e133      	b.n	405f16 <follow_path+0x28e>
		path++;
  405cae:	3701      	adds	r7, #1
  405cb0:	e7f4      	b.n	405c9c <follow_path+0x14>
		res = dir_sdi(dj, 0);
  405cb2:	2100      	movs	r1, #0
  405cb4:	4650      	mov	r0, sl
  405cb6:	4bb7      	ldr	r3, [pc, #732]	; (405f94 <follow_path+0x30c>)
  405cb8:	4798      	blx	r3
  405cba:	4603      	mov	r3, r0
		dj->dir = 0;
  405cbc:	2200      	movs	r2, #0
  405cbe:	f8ca 2014 	str.w	r2, [sl, #20]
  405cc2:	e15d      	b.n	405f80 <follow_path+0x2f8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  405cc4:	2b00      	cmp	r3, #0
  405cc6:	f040 8155 	bne.w	405f74 <follow_path+0x2ec>
		lfn[di++] = w;					/* Store the Unicode char */
  405cca:	f826 2f02 	strh.w	r2, [r6, #2]!
		w = p[si++];					/* Get a character */
  405cce:	1c63      	adds	r3, r4, #1
  405cd0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  405cd4:	282f      	cmp	r0, #47	; 0x2f
  405cd6:	bf18      	it	ne
  405cd8:	281f      	cmpne	r0, #31
  405cda:	d91b      	bls.n	405d14 <follow_path+0x8c>
  405cdc:	285c      	cmp	r0, #92	; 0x5c
  405cde:	d019      	beq.n	405d14 <follow_path+0x8c>
		if (di >= _MAX_LFN)				/* Reject too long name */
  405ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  405ce4:	f000 8146 	beq.w	405f74 <follow_path+0x2ec>
		w = p[si++];					/* Get a character */
  405ce8:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  405cea:	4641      	mov	r1, r8
  405cec:	47c8      	blx	r9
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  405cee:	4602      	mov	r2, r0
  405cf0:	2800      	cmp	r0, #0
  405cf2:	f000 813f 	beq.w	405f74 <follow_path+0x2ec>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  405cf6:	287f      	cmp	r0, #127	; 0x7f
  405cf8:	d8e7      	bhi.n	405cca <follow_path+0x42>
	while (*str && *str != chr) str++;
  405cfa:	2822      	cmp	r0, #34	; 0x22
  405cfc:	f000 813f 	beq.w	405f7e <follow_path+0x2f6>
  405d00:	232a      	movs	r3, #42	; 0x2a
  405d02:	49a5      	ldr	r1, [pc, #660]	; (405f98 <follow_path+0x310>)
  405d04:	b298      	uxth	r0, r3
  405d06:	4290      	cmp	r0, r2
  405d08:	d0dc      	beq.n	405cc4 <follow_path+0x3c>
  405d0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  405d0e:	2b00      	cmp	r3, #0
  405d10:	d1f8      	bne.n	405d04 <follow_path+0x7c>
  405d12:	e7da      	b.n	405cca <follow_path+0x42>
	*path = &p[si];						/* Return pointer to the next segment */
  405d14:	441f      	add	r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  405d16:	2820      	cmp	r0, #32
  405d18:	bf34      	ite	cc
  405d1a:	2504      	movcc	r5, #4
  405d1c:	2500      	movcs	r5, #0
	while (di) {						/* Strip trailing spaces and dots */
  405d1e:	2c00      	cmp	r4, #0
  405d20:	f000 812d 	beq.w	405f7e <follow_path+0x2f6>
		w = lfn[di-1];
  405d24:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  405d28:	4423      	add	r3, r4
  405d2a:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
  405d2e:	f83b 3013 	ldrh.w	r3, [fp, r3, lsl #1]
		if (w != ' ' && w != '.') break;
  405d32:	2b20      	cmp	r3, #32
  405d34:	d001      	beq.n	405d3a <follow_path+0xb2>
  405d36:	2b2e      	cmp	r3, #46	; 0x2e
  405d38:	d108      	bne.n	405d4c <follow_path+0xc4>
	while (di) {						/* Strip trailing spaces and dots */
  405d3a:	3c01      	subs	r4, #1
  405d3c:	f000 811f 	beq.w	405f7e <follow_path+0x2f6>
		w = lfn[di-1];
  405d40:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  405d44:	2b20      	cmp	r3, #32
  405d46:	d0f8      	beq.n	405d3a <follow_path+0xb2>
  405d48:	2b2e      	cmp	r3, #46	; 0x2e
  405d4a:	d0f6      	beq.n	405d3a <follow_path+0xb2>
	lfn[di] = 0;						/* LFN is created */
  405d4c:	0060      	lsls	r0, r4, #1
  405d4e:	2300      	movs	r3, #0
  405d50:	f82b 3014 	strh.w	r3, [fp, r4, lsl #1]
	mem_set(dj->fn, ' ', 11);
  405d54:	f8da 3018 	ldr.w	r3, [sl, #24]
  405d58:	f103 010b 	add.w	r1, r3, #11
		*d++ = (BYTE)val;
  405d5c:	2220      	movs	r2, #32
  405d5e:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  405d62:	4299      	cmp	r1, r3
  405d64:	d1fb      	bne.n	405d5e <follow_path+0xd6>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  405d66:	f8bb 3000 	ldrh.w	r3, [fp]
  405d6a:	2b20      	cmp	r3, #32
  405d6c:	d001      	beq.n	405d72 <follow_path+0xea>
  405d6e:	2b2e      	cmp	r3, #46	; 0x2e
  405d70:	d11f      	bne.n	405db2 <follow_path+0x12a>
  405d72:	4659      	mov	r1, fp
  405d74:	2300      	movs	r3, #0
  405d76:	3301      	adds	r3, #1
  405d78:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  405d7c:	2a20      	cmp	r2, #32
  405d7e:	d0fa      	beq.n	405d76 <follow_path+0xee>
  405d80:	2a2e      	cmp	r2, #46	; 0x2e
  405d82:	d0f8      	beq.n	405d76 <follow_path+0xee>
	if (si) cf |= NS_LOSS | NS_LFN;
  405d84:	b10b      	cbz	r3, 405d8a <follow_path+0x102>
  405d86:	f045 0503 	orr.w	r5, r5, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  405d8a:	3802      	subs	r0, #2
  405d8c:	eb0b 0200 	add.w	r2, fp, r0
  405d90:	f83b 1000 	ldrh.w	r1, [fp, r0]
  405d94:	292e      	cmp	r1, #46	; 0x2e
  405d96:	d005      	beq.n	405da4 <follow_path+0x11c>
  405d98:	3c01      	subs	r4, #1
  405d9a:	d003      	beq.n	405da4 <follow_path+0x11c>
  405d9c:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  405da0:	292e      	cmp	r1, #46	; 0x2e
  405da2:	d1f9      	bne.n	405d98 <follow_path+0x110>
		dj->fn[i++] = (BYTE)w;
  405da4:	2208      	movs	r2, #8
  405da6:	9200      	str	r2, [sp, #0]
  405da8:	f04f 0800 	mov.w	r8, #0
  405dac:	f8cd 8004 	str.w	r8, [sp, #4]
  405db0:	e004      	b.n	405dbc <follow_path+0x134>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  405db2:	2300      	movs	r3, #0
  405db4:	e7e9      	b.n	405d8a <follow_path+0x102>
			cf |= NS_LOSS | NS_LFN; continue;
  405db6:	f045 0503 	orr.w	r5, r5, #3
		w = lfn[si++];					/* Get an LFN char */
  405dba:	4633      	mov	r3, r6
  405dbc:	1c5e      	adds	r6, r3, #1
  405dbe:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  405dc2:	2800      	cmp	r0, #0
  405dc4:	d066      	beq.n	405e94 <follow_path+0x20c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  405dc6:	2820      	cmp	r0, #32
  405dc8:	d0f5      	beq.n	405db6 <follow_path+0x12e>
  405dca:	282e      	cmp	r0, #46	; 0x2e
  405dcc:	d101      	bne.n	405dd2 <follow_path+0x14a>
  405dce:	42a6      	cmp	r6, r4
  405dd0:	d1f1      	bne.n	405db6 <follow_path+0x12e>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  405dd2:	9b00      	ldr	r3, [sp, #0]
  405dd4:	4598      	cmp	r8, r3
  405dd6:	d218      	bcs.n	405e0a <follow_path+0x182>
  405dd8:	42a6      	cmp	r6, r4
  405dda:	d016      	beq.n	405e0a <follow_path+0x182>
		if (w >= 0x80) {				/* Non ASCII char */
  405ddc:	287f      	cmp	r0, #127	; 0x7f
  405dde:	d831      	bhi.n	405e44 <follow_path+0x1bc>
	while (*str && *str != chr) str++;
  405de0:	282b      	cmp	r0, #43	; 0x2b
  405de2:	d03d      	beq.n	405e60 <follow_path+0x1d8>
  405de4:	232c      	movs	r3, #44	; 0x2c
  405de6:	496d      	ldr	r1, [pc, #436]	; (405f9c <follow_path+0x314>)
  405de8:	b29a      	uxth	r2, r3
  405dea:	4282      	cmp	r2, r0
  405dec:	d043      	beq.n	405e76 <follow_path+0x1ee>
  405dee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  405df2:	2b00      	cmp	r3, #0
  405df4:	d1f8      	bne.n	405de8 <follow_path+0x160>
				if (IsUpper(w)) {		/* ASCII large capital */
  405df6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  405dfa:	b29b      	uxth	r3, r3
  405dfc:	2b19      	cmp	r3, #25
  405dfe:	d83d      	bhi.n	405e7c <follow_path+0x1f4>
					b |= 2;
  405e00:	9b01      	ldr	r3, [sp, #4]
  405e02:	f043 0302 	orr.w	r3, r3, #2
  405e06:	9301      	str	r3, [sp, #4]
  405e08:	e02d      	b.n	405e66 <follow_path+0x1de>
			if (ni == 11) {				/* Long extension */
  405e0a:	9b00      	ldr	r3, [sp, #0]
  405e0c:	2b0b      	cmp	r3, #11
  405e0e:	d00f      	beq.n	405e30 <follow_path+0x1a8>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  405e10:	42a6      	cmp	r6, r4
  405e12:	bf18      	it	ne
  405e14:	f045 0503 	orrne.w	r5, r5, #3
			if (si > di) break;			/* No extension */
  405e18:	42a6      	cmp	r6, r4
  405e1a:	d83b      	bhi.n	405e94 <follow_path+0x20c>
			b <<= 2; continue;
  405e1c:	9b01      	ldr	r3, [sp, #4]
  405e1e:	009b      	lsls	r3, r3, #2
  405e20:	b2db      	uxtb	r3, r3
  405e22:	9301      	str	r3, [sp, #4]
  405e24:	4623      	mov	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
  405e26:	220b      	movs	r2, #11
  405e28:	9200      	str	r2, [sp, #0]
  405e2a:	f04f 0808 	mov.w	r8, #8
  405e2e:	e7c5      	b.n	405dbc <follow_path+0x134>
				cf |= NS_LOSS | NS_LFN; break;
  405e30:	f045 0503 	orr.w	r5, r5, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  405e34:	f8da 3018 	ldr.w	r3, [sl, #24]
  405e38:	781a      	ldrb	r2, [r3, #0]
  405e3a:	2ae5      	cmp	r2, #229	; 0xe5
  405e3c:	d132      	bne.n	405ea4 <follow_path+0x21c>
  405e3e:	2205      	movs	r2, #5
  405e40:	701a      	strb	r2, [r3, #0]
  405e42:	e02c      	b.n	405e9e <follow_path+0x216>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  405e44:	2100      	movs	r1, #0
  405e46:	47c8      	blx	r9
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  405e48:	4603      	mov	r3, r0
  405e4a:	2800      	cmp	r0, #0
  405e4c:	f000 809f 	beq.w	405f8e <follow_path+0x306>
  405e50:	4a53      	ldr	r2, [pc, #332]	; (405fa0 <follow_path+0x318>)
  405e52:	4413      	add	r3, r2
  405e54:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  405e58:	f045 0502 	orr.w	r5, r5, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  405e5c:	2800      	cmp	r0, #0
  405e5e:	d1bf      	bne.n	405de0 <follow_path+0x158>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  405e60:	f045 0503 	orr.w	r5, r5, #3
  405e64:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  405e66:	f8da 3018 	ldr.w	r3, [sl, #24]
  405e6a:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  405e6e:	4633      	mov	r3, r6
		dj->fn[i++] = (BYTE)w;
  405e70:	f108 0801 	add.w	r8, r8, #1
  405e74:	e7a2      	b.n	405dbc <follow_path+0x134>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  405e76:	2b00      	cmp	r3, #0
  405e78:	d1f2      	bne.n	405e60 <follow_path+0x1d8>
  405e7a:	e7bc      	b.n	405df6 <follow_path+0x16e>
					if (IsLower(w)) {	/* ASCII small capital */
  405e7c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  405e80:	b29b      	uxth	r3, r3
  405e82:	2b19      	cmp	r3, #25
  405e84:	d8ef      	bhi.n	405e66 <follow_path+0x1de>
						b |= 1; w -= 0x20;
  405e86:	9b01      	ldr	r3, [sp, #4]
  405e88:	f043 0301 	orr.w	r3, r3, #1
  405e8c:	9301      	str	r3, [sp, #4]
  405e8e:	3820      	subs	r0, #32
  405e90:	b280      	uxth	r0, r0
  405e92:	e7e8      	b.n	405e66 <follow_path+0x1de>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  405e94:	f8da 3018 	ldr.w	r3, [sl, #24]
  405e98:	781a      	ldrb	r2, [r3, #0]
  405e9a:	2ae5      	cmp	r2, #229	; 0xe5
  405e9c:	d0cf      	beq.n	405e3e <follow_path+0x1b6>
	if (ni == 8) b <<= 2;
  405e9e:	9b00      	ldr	r3, [sp, #0]
  405ea0:	2b08      	cmp	r3, #8
  405ea2:	d052      	beq.n	405f4a <follow_path+0x2c2>
  405ea4:	9a01      	ldr	r2, [sp, #4]
  405ea6:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  405eaa:	2b0c      	cmp	r3, #12
  405eac:	d054      	beq.n	405f58 <follow_path+0x2d0>
  405eae:	f002 0203 	and.w	r2, r2, #3
  405eb2:	2a03      	cmp	r2, #3
  405eb4:	d050      	beq.n	405f58 <follow_path+0x2d0>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  405eb6:	f015 0f02 	tst.w	r5, #2
  405eba:	d10b      	bne.n	405ed4 <follow_path+0x24c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  405ebc:	9a01      	ldr	r2, [sp, #4]
  405ebe:	f002 0b03 	and.w	fp, r2, #3
  405ec2:	f1bb 0f01 	cmp.w	fp, #1
  405ec6:	bf08      	it	eq
  405ec8:	f045 0510 	orreq.w	r5, r5, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  405ecc:	2b04      	cmp	r3, #4
  405ece:	bf08      	it	eq
  405ed0:	f045 0508 	orreq.w	r5, r5, #8
	dj->fn[NS] = cf;	/* SFN is created */
  405ed4:	f8da 3018 	ldr.w	r3, [sl, #24]
  405ed8:	72dd      	strb	r5, [r3, #11]
			res = dir_find(dj);				/* Find it */
  405eda:	4650      	mov	r0, sl
  405edc:	4b31      	ldr	r3, [pc, #196]	; (405fa4 <follow_path+0x31c>)
  405ede:	4798      	blx	r3
			ns = *(dj->fn+NS);
  405ee0:	f8da 3018 	ldr.w	r3, [sl, #24]
  405ee4:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  405ee6:	4603      	mov	r3, r0
  405ee8:	2800      	cmp	r0, #0
  405eea:	d138      	bne.n	405f5e <follow_path+0x2d6>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  405eec:	f012 0f04 	tst.w	r2, #4
  405ef0:	d146      	bne.n	405f80 <follow_path+0x2f8>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  405ef2:	f8da 3014 	ldr.w	r3, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  405ef6:	7ada      	ldrb	r2, [r3, #11]
  405ef8:	f012 0f10 	tst.w	r2, #16
  405efc:	d038      	beq.n	405f70 <follow_path+0x2e8>
			dj->sclust = LD_CLUST(dir);
  405efe:	7d59      	ldrb	r1, [r3, #21]
  405f00:	7d1a      	ldrb	r2, [r3, #20]
  405f02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  405f06:	7ed9      	ldrb	r1, [r3, #27]
  405f08:	7e9b      	ldrb	r3, [r3, #26]
  405f0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  405f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405f12:	f8ca 3008 	str.w	r3, [sl, #8]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  405f16:	783b      	ldrb	r3, [r7, #0]
  405f18:	2b2f      	cmp	r3, #47	; 0x2f
  405f1a:	d001      	beq.n	405f20 <follow_path+0x298>
  405f1c:	2b5c      	cmp	r3, #92	; 0x5c
  405f1e:	d105      	bne.n	405f2c <follow_path+0x2a4>
  405f20:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  405f24:	2b2f      	cmp	r3, #47	; 0x2f
  405f26:	d0fb      	beq.n	405f20 <follow_path+0x298>
  405f28:	2b5c      	cmp	r3, #92	; 0x5c
  405f2a:	d0f9      	beq.n	405f20 <follow_path+0x298>
	lfn = dj->lfn;
  405f2c:	f8da b01c 	ldr.w	fp, [sl, #28]
		w = p[si++];					/* Get a character */
  405f30:	7838      	ldrb	r0, [r7, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  405f32:	282f      	cmp	r0, #47	; 0x2f
  405f34:	bf18      	it	ne
  405f36:	281f      	cmpne	r0, #31
  405f38:	d91e      	bls.n	405f78 <follow_path+0x2f0>
  405f3a:	285c      	cmp	r0, #92	; 0x5c
  405f3c:	d01c      	beq.n	405f78 <follow_path+0x2f0>
  405f3e:	f1ab 0602 	sub.w	r6, fp, #2
  405f42:	463d      	mov	r5, r7
  405f44:	2401      	movs	r4, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  405f46:	46a0      	mov	r8, r4
  405f48:	e6cf      	b.n	405cea <follow_path+0x62>
	if (ni == 8) b <<= 2;
  405f4a:	9b01      	ldr	r3, [sp, #4]
  405f4c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  405f50:	fa5f f38b 	uxtb.w	r3, fp
  405f54:	9301      	str	r3, [sp, #4]
  405f56:	e7a5      	b.n	405ea4 <follow_path+0x21c>
		cf |= NS_LFN;
  405f58:	f045 0502 	orr.w	r5, r5, #2
  405f5c:	e7ab      	b.n	405eb6 <follow_path+0x22e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  405f5e:	2804      	cmp	r0, #4
  405f60:	d10e      	bne.n	405f80 <follow_path+0x2f8>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  405f62:	f002 0204 	and.w	r2, r2, #4
  405f66:	2a00      	cmp	r2, #0
  405f68:	bf14      	ite	ne
  405f6a:	4603      	movne	r3, r0
  405f6c:	2305      	moveq	r3, #5
  405f6e:	e007      	b.n	405f80 <follow_path+0x2f8>
				res = FR_NO_PATH; break;
  405f70:	2305      	movs	r3, #5
  405f72:	e005      	b.n	405f80 <follow_path+0x2f8>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  405f74:	2306      	movs	r3, #6
	return res;
  405f76:	e003      	b.n	405f80 <follow_path+0x2f8>
	*path = &p[si];						/* Return pointer to the next segment */
  405f78:	3701      	adds	r7, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  405f7a:	281f      	cmp	r0, #31
  405f7c:	d804      	bhi.n	405f88 <follow_path+0x300>
  405f7e:	2306      	movs	r3, #6
}
  405f80:	4618      	mov	r0, r3
  405f82:	b003      	add	sp, #12
  405f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	si = di = 0;
  405f88:	2400      	movs	r4, #0
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  405f8a:	4625      	mov	r5, r4
  405f8c:	e6c7      	b.n	405d1e <follow_path+0x96>
			cf |= NS_LFN;				/* Force create LFN entry */
  405f8e:	f045 0502 	orr.w	r5, r5, #2
  405f92:	e765      	b.n	405e60 <follow_path+0x1d8>
  405f94:	004055c9 	.word	0x004055c9
  405f98:	0040fe5d 	.word	0x0040fe5d
  405f9c:	0040fe69 	.word	0x0040fe69
  405fa0:	0040fddc 	.word	0x0040fddc
  405fa4:	00405ae1 	.word	0x00405ae1
  405fa8:	004069f1 	.word	0x004069f1

00405fac <dir_register>:
{
  405fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405fb0:	b089      	sub	sp, #36	; 0x24
  405fb2:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  405fb4:	6985      	ldr	r5, [r0, #24]
  405fb6:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  405fba:	220c      	movs	r2, #12
  405fbc:	4629      	mov	r1, r5
  405fbe:	a805      	add	r0, sp, #20
  405fc0:	4baa      	ldr	r3, [pc, #680]	; (40626c <dir_register+0x2c0>)
  405fc2:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  405fc4:	f89d 301f 	ldrb.w	r3, [sp, #31]
  405fc8:	f013 0f01 	tst.w	r3, #1
  405fcc:	d079      	beq.n	4060c2 <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  405fce:	2300      	movs	r3, #0
  405fd0:	72eb      	strb	r3, [r5, #11]
  405fd2:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  405fd4:	220b      	movs	r2, #11
  405fd6:	a905      	add	r1, sp, #20
  405fd8:	4628      	mov	r0, r5
  405fda:	4ba4      	ldr	r3, [pc, #656]	; (40626c <dir_register+0x2c0>)
  405fdc:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  405fde:	2701      	movs	r7, #1
  405fe0:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405fe2:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  405fe6:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 406288 <dir_register+0x2dc>
	mem_cpy(dst, src, 11);
  405fea:	f8df a280 	ldr.w	sl, [pc, #640]	; 40626c <dir_register+0x2c0>
  405fee:	e032      	b.n	406056 <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  405ff0:	463b      	mov	r3, r7
  405ff2:	e030      	b.n	406056 <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  405ff4:	4613      	mov	r3, r2
  405ff6:	e002      	b.n	405ffe <dir_register+0x52>
  405ff8:	2300      	movs	r3, #0
  405ffa:	e000      	b.n	405ffe <dir_register+0x52>
  405ffc:	4613      	mov	r3, r2
  405ffe:	442b      	add	r3, r5
  406000:	e005      	b.n	40600e <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406002:	4641      	mov	r1, r8
  406004:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  406008:	1b59      	subs	r1, r3, r5
  40600a:	2907      	cmp	r1, #7
  40600c:	d807      	bhi.n	40601e <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  40600e:	2a07      	cmp	r2, #7
  406010:	d8f7      	bhi.n	406002 <dir_register+0x56>
  406012:	a908      	add	r1, sp, #32
  406014:	4411      	add	r1, r2
  406016:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  40601a:	3201      	adds	r2, #1
  40601c:	e7f2      	b.n	406004 <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  40601e:	4620      	mov	r0, r4
  406020:	47c8      	blx	r9
			if (res != FR_OK) break;
  406022:	4606      	mov	r6, r0
  406024:	2800      	cmp	r0, #0
  406026:	d13e      	bne.n	4060a6 <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  406028:	3701      	adds	r7, #1
  40602a:	b2bf      	uxth	r7, r7
  40602c:	2f64      	cmp	r7, #100	; 0x64
  40602e:	d038      	beq.n	4060a2 <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  406030:	220b      	movs	r2, #11
  406032:	a905      	add	r1, sp, #20
  406034:	4628      	mov	r0, r5
  406036:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  406038:	2f05      	cmp	r7, #5
  40603a:	d9d9      	bls.n	405ff0 <dir_register+0x44>
  40603c:	463b      	mov	r3, r7
  40603e:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  406040:	03da      	lsls	r2, r3, #15
  406042:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  406046:	f831 2b02 	ldrh.w	r2, [r1], #2
  40604a:	fa12 f383 	uxtah	r3, r2, r3
  40604e:	b29b      	uxth	r3, r3
  406050:	880a      	ldrh	r2, [r1, #0]
  406052:	2a00      	cmp	r2, #0
  406054:	d1f4      	bne.n	406040 <dir_register+0x94>
  406056:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  40605a:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  40605c:	f003 000f 	and.w	r0, r3, #15
  406060:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  406064:	2939      	cmp	r1, #57	; 0x39
  406066:	bf88      	it	hi
  406068:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  40606c:	3a01      	subs	r2, #1
  40606e:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  406072:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  406076:	2b00      	cmp	r3, #0
  406078:	d1f0      	bne.n	40605c <dir_register+0xb0>
	ns[i] = '~';
  40607a:	217e      	movs	r1, #126	; 0x7e
  40607c:	ab08      	add	r3, sp, #32
  40607e:	4413      	add	r3, r2
  406080:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  406084:	2a00      	cmp	r2, #0
  406086:	d0b5      	beq.n	405ff4 <dir_register+0x48>
  406088:	782b      	ldrb	r3, [r5, #0]
  40608a:	2b20      	cmp	r3, #32
  40608c:	d0b4      	beq.n	405ff8 <dir_register+0x4c>
  40608e:	4629      	mov	r1, r5
  406090:	2300      	movs	r3, #0
  406092:	3301      	adds	r3, #1
  406094:	429a      	cmp	r2, r3
  406096:	d0b1      	beq.n	405ffc <dir_register+0x50>
  406098:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40609c:	2820      	cmp	r0, #32
  40609e:	d1f8      	bne.n	406092 <dir_register+0xe6>
  4060a0:	e7ad      	b.n	405ffe <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  4060a2:	2607      	movs	r6, #7
  4060a4:	e004      	b.n	4060b0 <dir_register+0x104>
  4060a6:	2f64      	cmp	r7, #100	; 0x64
  4060a8:	f000 80af 	beq.w	40620a <dir_register+0x25e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  4060ac:	2804      	cmp	r0, #4
  4060ae:	d003      	beq.n	4060b8 <dir_register+0x10c>
}
  4060b0:	4630      	mov	r0, r6
  4060b2:	b009      	add	sp, #36	; 0x24
  4060b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  4060b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4060bc:	72eb      	strb	r3, [r5, #11]
  4060be:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  4060c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4060c6:	f013 0f02 	tst.w	r3, #2
  4060ca:	d014      	beq.n	4060f6 <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  4060cc:	f8bb 3000 	ldrh.w	r3, [fp]
  4060d0:	b17b      	cbz	r3, 4060f2 <dir_register+0x146>
  4060d2:	2300      	movs	r3, #0
  4060d4:	3301      	adds	r3, #1
  4060d6:	b29b      	uxth	r3, r3
  4060d8:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  4060dc:	2a00      	cmp	r2, #0
  4060de:	d1f9      	bne.n	4060d4 <dir_register+0x128>
		ne = (ne + 25) / 13;
  4060e0:	3319      	adds	r3, #25
  4060e2:	4f63      	ldr	r7, [pc, #396]	; (406270 <dir_register+0x2c4>)
  4060e4:	fb87 2703 	smull	r2, r7, r7, r3
  4060e8:	17db      	asrs	r3, r3, #31
  4060ea:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  4060ee:	b2bf      	uxth	r7, r7
  4060f0:	e002      	b.n	4060f8 <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  4060f2:	2300      	movs	r3, #0
  4060f4:	e7f4      	b.n	4060e0 <dir_register+0x134>
		ne = 1;
  4060f6:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  4060f8:	2100      	movs	r1, #0
  4060fa:	4620      	mov	r0, r4
  4060fc:	4b5d      	ldr	r3, [pc, #372]	; (406274 <dir_register+0x2c8>)
  4060fe:	4798      	blx	r3
	if (res != FR_OK) return res;
  406100:	4606      	mov	r6, r0
  406102:	2800      	cmp	r0, #0
  406104:	d1d4      	bne.n	4060b0 <dir_register+0x104>
  406106:	f04f 0a00 	mov.w	sl, #0
  40610a:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  40610c:	f8df 816c 	ldr.w	r8, [pc, #364]	; 40627c <dir_register+0x2d0>
			n = 0;					/* Not a blank entry. Restart to search */
  406110:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  406112:	f8df 9164 	ldr.w	r9, [pc, #356]	; 406278 <dir_register+0x2cc>
  406116:	e00a      	b.n	40612e <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  406118:	1c6b      	adds	r3, r5, #1
  40611a:	b29b      	uxth	r3, r3
  40611c:	429f      	cmp	r7, r3
  40611e:	d076      	beq.n	40620e <dir_register+0x262>
  406120:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  406122:	2101      	movs	r1, #1
  406124:	4620      	mov	r0, r4
  406126:	47c8      	blx	r9
	} while (res == FR_OK);
  406128:	4606      	mov	r6, r0
  40612a:	2800      	cmp	r0, #0
  40612c:	d1c0      	bne.n	4060b0 <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  40612e:	6921      	ldr	r1, [r4, #16]
  406130:	6820      	ldr	r0, [r4, #0]
  406132:	47c0      	blx	r8
		if (res != FR_OK) break;
  406134:	4606      	mov	r6, r0
  406136:	2800      	cmp	r0, #0
  406138:	d1ba      	bne.n	4060b0 <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  40613a:	6963      	ldr	r3, [r4, #20]
  40613c:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  40613e:	2be5      	cmp	r3, #229	; 0xe5
  406140:	d000      	beq.n	406144 <dir_register+0x198>
  406142:	b923      	cbnz	r3, 40614e <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  406144:	2d00      	cmp	r5, #0
  406146:	d1e7      	bne.n	406118 <dir_register+0x16c>
  406148:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  40614c:	e7e4      	b.n	406118 <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  40614e:	465d      	mov	r5, fp
  406150:	e7e7      	b.n	406122 <dir_register+0x176>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  406152:	4671      	mov	r1, lr
  406154:	e073      	b.n	40623e <dir_register+0x292>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  406156:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40615a:	4293      	cmp	r3, r2
  40615c:	d002      	beq.n	406164 <dir_register+0x1b8>
  40615e:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  406162:	b90b      	cbnz	r3, 406168 <dir_register+0x1bc>
  406164:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  406168:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  40616c:	6823      	ldr	r3, [r4, #0]
  40616e:	2201      	movs	r2, #1
  406170:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  406172:	4639      	mov	r1, r7
  406174:	4620      	mov	r0, r4
  406176:	4b40      	ldr	r3, [pc, #256]	; (406278 <dir_register+0x2cc>)
  406178:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  40617a:	4606      	mov	r6, r0
  40617c:	2800      	cmp	r0, #0
  40617e:	d197      	bne.n	4060b0 <dir_register+0x104>
  406180:	3d01      	subs	r5, #1
  406182:	b2ad      	uxth	r5, r5
  406184:	b315      	cbz	r5, 4061cc <dir_register+0x220>
				res = move_window(dj->fs, dj->sect);
  406186:	6921      	ldr	r1, [r4, #16]
  406188:	6820      	ldr	r0, [r4, #0]
  40618a:	4b3c      	ldr	r3, [pc, #240]	; (40627c <dir_register+0x2d0>)
  40618c:	4798      	blx	r3
				if (res != FR_OK) break;
  40618e:	4606      	mov	r6, r0
  406190:	2800      	cmp	r0, #0
  406192:	d18d      	bne.n	4060b0 <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  406194:	f8d4 901c 	ldr.w	r9, [r4, #28]
  406198:	6960      	ldr	r0, [r4, #20]
  40619a:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  40619e:	f89d 3000 	ldrb.w	r3, [sp]
  4061a2:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  4061a4:	230f      	movs	r3, #15
  4061a6:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  4061a8:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  4061aa:	7687      	strb	r7, [r0, #26]
  4061ac:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  4061ae:	f10b 31ff 	add.w	r1, fp, #4294967295
  4061b2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  4061b6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  4061ba:	4a31      	ldr	r2, [pc, #196]	; (406280 <dir_register+0x2d4>)
  4061bc:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  4061c0:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4061c2:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4061c6:	f04f 0aff 	mov.w	sl, #255	; 0xff
  4061ca:	e03b      	b.n	406244 <dir_register+0x298>
		res = move_window(dj->fs, dj->sect);
  4061cc:	6921      	ldr	r1, [r4, #16]
  4061ce:	6820      	ldr	r0, [r4, #0]
  4061d0:	4b2a      	ldr	r3, [pc, #168]	; (40627c <dir_register+0x2d0>)
  4061d2:	4798      	blx	r3
		if (res == FR_OK) {
  4061d4:	4606      	mov	r6, r0
  4061d6:	2800      	cmp	r0, #0
  4061d8:	f47f af6a 	bne.w	4060b0 <dir_register+0x104>
			dir = dj->dir;
  4061dc:	6965      	ldr	r5, [r4, #20]
  4061de:	f105 0120 	add.w	r1, r5, #32
	BYTE *d = (BYTE*)dst;
  4061e2:	462b      	mov	r3, r5
		*d++ = (BYTE)val;
  4061e4:	2200      	movs	r2, #0
  4061e6:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  4061ea:	4299      	cmp	r1, r3
  4061ec:	d1fb      	bne.n	4061e6 <dir_register+0x23a>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  4061ee:	220b      	movs	r2, #11
  4061f0:	69a1      	ldr	r1, [r4, #24]
  4061f2:	4628      	mov	r0, r5
  4061f4:	4b1d      	ldr	r3, [pc, #116]	; (40626c <dir_register+0x2c0>)
  4061f6:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  4061f8:	69a3      	ldr	r3, [r4, #24]
  4061fa:	7adb      	ldrb	r3, [r3, #11]
  4061fc:	f003 0318 	and.w	r3, r3, #24
  406200:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  406202:	6823      	ldr	r3, [r4, #0]
  406204:	2201      	movs	r2, #1
  406206:	711a      	strb	r2, [r3, #4]
  406208:	e752      	b.n	4060b0 <dir_register+0x104>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40620a:	2607      	movs	r6, #7
  40620c:	e750      	b.n	4060b0 <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  40620e:	2b01      	cmp	r3, #1
  406210:	d9dc      	bls.n	4061cc <dir_register+0x220>
		res = dir_sdi(dj, is);
  406212:	4651      	mov	r1, sl
  406214:	4620      	mov	r0, r4
  406216:	4b17      	ldr	r3, [pc, #92]	; (406274 <dir_register+0x2c8>)
  406218:	4798      	blx	r3
		if (res == FR_OK) {
  40621a:	4606      	mov	r6, r0
  40621c:	2800      	cmp	r0, #0
  40621e:	f47f af47 	bne.w	4060b0 <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  406222:	69a0      	ldr	r0, [r4, #24]
  406224:	4b17      	ldr	r3, [pc, #92]	; (406284 <dir_register+0x2d8>)
  406226:	4798      	blx	r3
  406228:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  40622a:	2700      	movs	r7, #0
	s = wc = 0;
  40622c:	9701      	str	r7, [sp, #4]
  40622e:	e7aa      	b.n	406186 <dir_register+0x1da>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  406230:	f892 e000 	ldrb.w	lr, [r2]
  406234:	f800 a00e 	strb.w	sl, [r0, lr]
  406238:	4486      	add	lr, r0
  40623a:	f88e a001 	strb.w	sl, [lr, #1]
  40623e:	3201      	adds	r2, #1
	} while (++s < 13);
  406240:	4542      	cmp	r2, r8
  406242:	d088      	beq.n	406156 <dir_register+0x1aa>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  406244:	42b3      	cmp	r3, r6
  406246:	d0f3      	beq.n	406230 <dir_register+0x284>
  406248:	f101 0e01 	add.w	lr, r1, #1
  40624c:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  406250:	7811      	ldrb	r1, [r2, #0]
  406252:	5443      	strb	r3, [r0, r1]
  406254:	4401      	add	r1, r0
  406256:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  40625a:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  40625e:	2b00      	cmp	r3, #0
  406260:	f47f af77 	bne.w	406152 <dir_register+0x1a6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  406264:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  406266:	4633      	mov	r3, r6
  406268:	e7e9      	b.n	40623e <dir_register+0x292>
  40626a:	bf00      	nop
  40626c:	00404fdd 	.word	0x00404fdd
  406270:	4ec4ec4f 	.word	0x4ec4ec4f
  406274:	004055c9 	.word	0x004055c9
  406278:	004059a9 	.word	0x004059a9
  40627c:	00405451 	.word	0x00405451
  406280:	0040fdcc 	.word	0x0040fdcc
  406284:	00405009 	.word	0x00405009
  406288:	00405ae1 	.word	0x00405ae1

0040628c <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  40628c:	b108      	cbz	r0, 406292 <f_mount+0x6>
		return FR_INVALID_DRIVE;
  40628e:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  406290:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  406292:	4b06      	ldr	r3, [pc, #24]	; (4062ac <f_mount+0x20>)
  406294:	681b      	ldr	r3, [r3, #0]
	if (rfs) {
  406296:	b10b      	cbz	r3, 40629c <f_mount+0x10>
		rfs->fs_type = 0;		/* Clear old fs object */
  406298:	2200      	movs	r2, #0
  40629a:	701a      	strb	r2, [r3, #0]
	if (fs) {
  40629c:	b109      	cbz	r1, 4062a2 <f_mount+0x16>
		fs->fs_type = 0;		/* Clear new fs object */
  40629e:	2300      	movs	r3, #0
  4062a0:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  4062a2:	4b02      	ldr	r3, [pc, #8]	; (4062ac <f_mount+0x20>)
  4062a4:	6019      	str	r1, [r3, #0]
	return FR_OK;
  4062a6:	2000      	movs	r0, #0
  4062a8:	4770      	bx	lr
  4062aa:	bf00      	nop
  4062ac:	20400ec0 	.word	0x20400ec0

004062b0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  4062b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4062b4:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  4062b8:	4605      	mov	r5, r0
  4062ba:	9101      	str	r1, [sp, #4]
  4062bc:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  4062be:	2300      	movs	r3, #0
  4062c0:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  4062c2:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  4062c6:	f002 021e 	and.w	r2, r2, #30
  4062ca:	a985      	add	r1, sp, #532	; 0x214
  4062cc:	a801      	add	r0, sp, #4
  4062ce:	4b58      	ldr	r3, [pc, #352]	; (406430 <f_open+0x180>)
  4062d0:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  4062d2:	ab82      	add	r3, sp, #520	; 0x208
  4062d4:	938b      	str	r3, [sp, #556]	; 0x22c
  4062d6:	ab02      	add	r3, sp, #8
  4062d8:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  4062da:	b168      	cbz	r0, 4062f8 <f_open+0x48>
  4062dc:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  4062de:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  4062e0:	f016 0f1c 	tst.w	r6, #28
  4062e4:	d158      	bne.n	406398 <f_open+0xe8>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  4062e6:	2b00      	cmp	r3, #0
  4062e8:	f040 8096 	bne.w	406418 <f_open+0x168>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  4062ec:	7ae3      	ldrb	r3, [r4, #11]
  4062ee:	f013 0f10 	tst.w	r3, #16
  4062f2:	d062      	beq.n	4063ba <f_open+0x10a>
				res = FR_NO_FILE;
  4062f4:	2304      	movs	r3, #4
  4062f6:	e08f      	b.n	406418 <f_open+0x168>
		res = follow_path(&dj, path);	/* Follow the file path */
  4062f8:	9901      	ldr	r1, [sp, #4]
  4062fa:	a885      	add	r0, sp, #532	; 0x214
  4062fc:	4b4d      	ldr	r3, [pc, #308]	; (406434 <f_open+0x184>)
  4062fe:	4798      	blx	r3
  406300:	4603      	mov	r3, r0
	dir = dj.dir;
  406302:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (!dir)	/* Current dir itself */
  406304:	b934      	cbnz	r4, 406314 <f_open+0x64>
  406306:	b928      	cbnz	r0, 406314 <f_open+0x64>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  406308:	f016 0f1c 	tst.w	r6, #28
  40630c:	f040 8089 	bne.w	406422 <f_open+0x172>
			res = FR_INVALID_NAME;
  406310:	2306      	movs	r3, #6
  406312:	e046      	b.n	4063a2 <f_open+0xf2>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  406314:	f016 0f1c 	tst.w	r6, #28
  406318:	d0e5      	beq.n	4062e6 <f_open+0x36>
		if (res != FR_OK) {					/* No file, create new */
  40631a:	2b00      	cmp	r3, #0
  40631c:	d13c      	bne.n	406398 <f_open+0xe8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  40631e:	7ae3      	ldrb	r3, [r4, #11]
  406320:	f013 0f11 	tst.w	r3, #17
  406324:	d17f      	bne.n	406426 <f_open+0x176>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  406326:	f016 0f04 	tst.w	r6, #4
  40632a:	d17e      	bne.n	40642a <f_open+0x17a>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  40632c:	f017 0f08 	tst.w	r7, #8
  406330:	d050      	beq.n	4063d4 <f_open+0x124>
			dw = get_fattime();					/* Created time */
  406332:	4b41      	ldr	r3, [pc, #260]	; (406438 <f_open+0x188>)
  406334:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  406336:	73a0      	strb	r0, [r4, #14]
  406338:	f3c0 2307 	ubfx	r3, r0, #8, #8
  40633c:	73e3      	strb	r3, [r4, #15]
  40633e:	0c03      	lsrs	r3, r0, #16
  406340:	7423      	strb	r3, [r4, #16]
  406342:	0e00      	lsrs	r0, r0, #24
  406344:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  406346:	2300      	movs	r3, #0
  406348:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  40634a:	7723      	strb	r3, [r4, #28]
  40634c:	7763      	strb	r3, [r4, #29]
  40634e:	77a3      	strb	r3, [r4, #30]
  406350:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  406352:	7d62      	ldrb	r2, [r4, #21]
  406354:	7d26      	ldrb	r6, [r4, #20]
  406356:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  40635a:	7ee1      	ldrb	r1, [r4, #27]
  40635c:	7ea2      	ldrb	r2, [r4, #26]
  40635e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  406362:	76a3      	strb	r3, [r4, #26]
  406364:	76e3      	strb	r3, [r4, #27]
  406366:	7523      	strb	r3, [r4, #20]
  406368:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  40636a:	9885      	ldr	r0, [sp, #532]	; 0x214
  40636c:	2301      	movs	r3, #1
  40636e:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  406370:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  406374:	d02c      	beq.n	4063d0 <f_open+0x120>
				dw = dj.fs->winsect;
  406376:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  40637a:	4631      	mov	r1, r6
  40637c:	4b2f      	ldr	r3, [pc, #188]	; (40643c <f_open+0x18c>)
  40637e:	4798      	blx	r3
				if (res == FR_OK) {
  406380:	4603      	mov	r3, r0
  406382:	2800      	cmp	r0, #0
  406384:	d148      	bne.n	406418 <f_open+0x168>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  406386:	9885      	ldr	r0, [sp, #532]	; 0x214
  406388:	3e01      	subs	r6, #1
  40638a:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  40638c:	4641      	mov	r1, r8
  40638e:	4b2c      	ldr	r3, [pc, #176]	; (406440 <f_open+0x190>)
  406390:	4798      	blx	r3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  406392:	4603      	mov	r3, r0
  406394:	b1e0      	cbz	r0, 4063d0 <f_open+0x120>
  406396:	e03f      	b.n	406418 <f_open+0x168>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  406398:	2b04      	cmp	r3, #4
  40639a:	d004      	beq.n	4063a6 <f_open+0xf6>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  40639c:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  4063a0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  4063a2:	b1db      	cbz	r3, 4063dc <f_open+0x12c>
  4063a4:	e038      	b.n	406418 <f_open+0x168>
				res = dir_register(&dj);
  4063a6:	a885      	add	r0, sp, #532	; 0x214
  4063a8:	4b26      	ldr	r3, [pc, #152]	; (406444 <f_open+0x194>)
  4063aa:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  4063ac:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  4063b0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  4063b2:	4603      	mov	r3, r0
  4063b4:	2800      	cmp	r0, #0
  4063b6:	d0b9      	beq.n	40632c <f_open+0x7c>
  4063b8:	e02e      	b.n	406418 <f_open+0x168>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  4063ba:	f016 0f02 	tst.w	r6, #2
  4063be:	d004      	beq.n	4063ca <f_open+0x11a>
  4063c0:	f013 0f01 	tst.w	r3, #1
  4063c4:	d001      	beq.n	4063ca <f_open+0x11a>
					res = FR_DENIED;
  4063c6:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  4063c8:	e026      	b.n	406418 <f_open+0x168>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  4063ca:	f016 0f08 	tst.w	r6, #8
  4063ce:	d001      	beq.n	4063d4 <f_open+0x124>
			mode |= FA__WRITTEN;
  4063d0:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  4063d4:	9b85      	ldr	r3, [sp, #532]	; 0x214
  4063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4063d8:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  4063da:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  4063dc:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  4063de:	7d62      	ldrb	r2, [r4, #21]
  4063e0:	7d23      	ldrb	r3, [r4, #20]
  4063e2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4063e6:	7ee1      	ldrb	r1, [r4, #27]
  4063e8:	7ea3      	ldrb	r3, [r4, #26]
  4063ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  4063ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4063f2:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  4063f4:	7fe2      	ldrb	r2, [r4, #31]
  4063f6:	7fa3      	ldrb	r3, [r4, #30]
  4063f8:	041b      	lsls	r3, r3, #16
  4063fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4063fe:	7f22      	ldrb	r2, [r4, #28]
  406400:	4313      	orrs	r3, r2
  406402:	7f62      	ldrb	r2, [r4, #29]
  406404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  406408:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  40640a:	2300      	movs	r3, #0
  40640c:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  40640e:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  406410:	9a85      	ldr	r2, [sp, #532]	; 0x214
  406412:	602a      	str	r2, [r5, #0]
  406414:	88d2      	ldrh	r2, [r2, #6]
  406416:	80aa      	strh	r2, [r5, #4]
}
  406418:	4618      	mov	r0, r3
  40641a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  40641e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_INVALID_NAME;
  406422:	2306      	movs	r3, #6
  406424:	e7ba      	b.n	40639c <f_open+0xec>
				res = FR_DENIED;
  406426:	2307      	movs	r3, #7
  406428:	e7f6      	b.n	406418 <f_open+0x168>
					res = FR_EXIST;
  40642a:	2308      	movs	r3, #8
  40642c:	e7f4      	b.n	406418 <f_open+0x168>
  40642e:	bf00      	nop
  406430:	004050ed 	.word	0x004050ed
  406434:	00405c89 	.word	0x00405c89
  406438:	00404f85 	.word	0x00404f85
  40643c:	00405861 	.word	0x00405861
  406440:	00405451 	.word	0x00405451
  406444:	00405fad 	.word	0x00405fad

00406448 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  406448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40644c:	b083      	sub	sp, #12
  40644e:	4604      	mov	r4, r0
  406450:	4689      	mov	r9, r1
  406452:	4616      	mov	r6, r2
  406454:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  406456:	2300      	movs	r3, #0
  406458:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  40645c:	8881      	ldrh	r1, [r0, #4]
  40645e:	6800      	ldr	r0, [r0, #0]
  406460:	4b75      	ldr	r3, [pc, #468]	; (406638 <f_write+0x1f0>)
  406462:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  406464:	9001      	str	r0, [sp, #4]
  406466:	2800      	cmp	r0, #0
  406468:	f040 80e2 	bne.w	406630 <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  40646c:	79a3      	ldrb	r3, [r4, #6]
  40646e:	f013 0f80 	tst.w	r3, #128	; 0x80
  406472:	f040 80db 	bne.w	40662c <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  406476:	f013 0f02 	tst.w	r3, #2
  40647a:	d102      	bne.n	406482 <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  40647c:	2307      	movs	r3, #7
  40647e:	9301      	str	r3, [sp, #4]
  406480:	e0d6      	b.n	406630 <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  406482:	68e3      	ldr	r3, [r4, #12]
  406484:	42f3      	cmn	r3, r6
  406486:	d20f      	bcs.n	4064a8 <f_write+0x60>

	for ( ;  btw;							/* Repeat until all data written */
  406488:	2e00      	cmp	r6, #0
  40648a:	d17a      	bne.n	406582 <f_write+0x13a>
  40648c:	e00c      	b.n	4064a8 <f_write+0x60>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  40648e:	2100      	movs	r1, #0
  406490:	4b6a      	ldr	r3, [pc, #424]	; (40663c <f_write+0x1f4>)
  406492:	4798      	blx	r3
  406494:	4603      	mov	r3, r0
  406496:	6120      	str	r0, [r4, #16]
  406498:	e003      	b.n	4064a2 <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  40649a:	6961      	ldr	r1, [r4, #20]
  40649c:	4b67      	ldr	r3, [pc, #412]	; (40663c <f_write+0x1f4>)
  40649e:	4798      	blx	r3
  4064a0:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  4064a2:	2b00      	cmp	r3, #0
  4064a4:	f040 8081 	bne.w	4065aa <f_write+0x162>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  4064a8:	68a3      	ldr	r3, [r4, #8]
  4064aa:	68e2      	ldr	r2, [r4, #12]
  4064ac:	4293      	cmp	r3, r2
  4064ae:	bf88      	it	hi
  4064b0:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  4064b2:	79a3      	ldrb	r3, [r4, #6]
  4064b4:	f043 0320 	orr.w	r3, r3, #32
  4064b8:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  4064ba:	e0b9      	b.n	406630 <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4064bc:	79a3      	ldrb	r3, [r4, #6]
  4064be:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4064c2:	71a3      	strb	r3, [r4, #6]
  4064c4:	2302      	movs	r3, #2
  4064c6:	9301      	str	r3, [sp, #4]
  4064c8:	e0b2      	b.n	406630 <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4064ca:	79a3      	ldrb	r3, [r4, #6]
  4064cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4064d0:	71a3      	strb	r3, [r4, #6]
  4064d2:	2301      	movs	r3, #1
  4064d4:	9301      	str	r3, [sp, #4]
  4064d6:	e0ab      	b.n	406630 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  4064d8:	6820      	ldr	r0, [r4, #0]
  4064da:	2301      	movs	r3, #1
  4064dc:	69a2      	ldr	r2, [r4, #24]
  4064de:	f104 0124 	add.w	r1, r4, #36	; 0x24
  4064e2:	7840      	ldrb	r0, [r0, #1]
  4064e4:	4d56      	ldr	r5, [pc, #344]	; (406640 <f_write+0x1f8>)
  4064e6:	47a8      	blx	r5
  4064e8:	b920      	cbnz	r0, 4064f4 <f_write+0xac>
				fp->flag &= ~FA__DIRTY;
  4064ea:	79a3      	ldrb	r3, [r4, #6]
  4064ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4064f0:	71a3      	strb	r3, [r4, #6]
  4064f2:	e064      	b.n	4065be <f_write+0x176>
					ABORT(fp->fs, FR_DISK_ERR);
  4064f4:	79a3      	ldrb	r3, [r4, #6]
  4064f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4064fa:	71a3      	strb	r3, [r4, #6]
  4064fc:	2301      	movs	r3, #1
  4064fe:	9301      	str	r3, [sp, #4]
  406500:	e096      	b.n	406630 <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  406502:	79a3      	ldrb	r3, [r4, #6]
  406504:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406508:	71a3      	strb	r3, [r4, #6]
  40650a:	2302      	movs	r3, #2
  40650c:	9301      	str	r3, [sp, #4]
  40650e:	e08f      	b.n	406630 <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  406510:	79a3      	ldrb	r3, [r4, #6]
  406512:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406516:	71a3      	strb	r3, [r4, #6]
  406518:	2301      	movs	r3, #1
  40651a:	9301      	str	r3, [sp, #4]
  40651c:	e088      	b.n	406630 <f_write+0x1e8>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  40651e:	f44f 7200 	mov.w	r2, #512	; 0x200
  406522:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  406526:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40652a:	4b46      	ldr	r3, [pc, #280]	; (406644 <f_write+0x1fc>)
  40652c:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
  40652e:	79a3      	ldrb	r3, [r4, #6]
  406530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  406534:	71a3      	strb	r3, [r4, #6]
  406536:	e065      	b.n	406604 <f_write+0x1bc>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
  406538:	69a3      	ldr	r3, [r4, #24]
  40653a:	429d      	cmp	r5, r3
  40653c:	d003      	beq.n	406546 <f_write+0xfe>
				if (fp->fptr < fp->fsize &&
  40653e:	68a2      	ldr	r2, [r4, #8]
  406540:	68e3      	ldr	r3, [r4, #12]
  406542:	429a      	cmp	r2, r3
  406544:	d361      	bcc.n	40660a <f_write+0x1c2>
			fp->dsect = sect;
  406546:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  406548:	68a0      	ldr	r0, [r4, #8]
  40654a:	f3c0 0008 	ubfx	r0, r0, #0, #9
  40654e:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
  406552:	42b5      	cmp	r5, r6
  406554:	bf28      	it	cs
  406556:	4635      	movcs	r5, r6
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  406558:	3024      	adds	r0, #36	; 0x24
  40655a:	462a      	mov	r2, r5
  40655c:	4649      	mov	r1, r9
  40655e:	4420      	add	r0, r4
  406560:	4b38      	ldr	r3, [pc, #224]	; (406644 <f_write+0x1fc>)
  406562:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
  406564:	79a3      	ldrb	r3, [r4, #6]
  406566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40656a:	71a3      	strb	r3, [r4, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  40656c:	44a9      	add	r9, r5
  40656e:	68a3      	ldr	r3, [r4, #8]
  406570:	442b      	add	r3, r5
  406572:	60a3      	str	r3, [r4, #8]
  406574:	f8d8 3000 	ldr.w	r3, [r8]
  406578:	442b      	add	r3, r5
  40657a:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  40657e:	1b76      	subs	r6, r6, r5
  406580:	d092      	beq.n	4064a8 <f_write+0x60>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  406582:	68a2      	ldr	r2, [r4, #8]
  406584:	f3c2 0308 	ubfx	r3, r2, #0, #9
  406588:	2b00      	cmp	r3, #0
  40658a:	d1dd      	bne.n	406548 <f_write+0x100>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  40658c:	6820      	ldr	r0, [r4, #0]
  40658e:	7883      	ldrb	r3, [r0, #2]
  406590:	3b01      	subs	r3, #1
  406592:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  406596:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  40659a:	d10c      	bne.n	4065b6 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
  40659c:	2a00      	cmp	r2, #0
  40659e:	f47f af7c 	bne.w	40649a <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  4065a2:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  4065a4:	2b00      	cmp	r3, #0
  4065a6:	f43f af72 	beq.w	40648e <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4065aa:	2b01      	cmp	r3, #1
  4065ac:	d086      	beq.n	4064bc <f_write+0x74>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
  4065b2:	d08a      	beq.n	4064ca <f_write+0x82>
				fp->clust = clst;			/* Update current cluster */
  4065b4:	6163      	str	r3, [r4, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
  4065b6:	79a3      	ldrb	r3, [r4, #6]
  4065b8:	f013 0f40 	tst.w	r3, #64	; 0x40
  4065bc:	d18c      	bne.n	4064d8 <f_write+0x90>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  4065be:	f8d4 a000 	ldr.w	sl, [r4]
  4065c2:	6961      	ldr	r1, [r4, #20]
  4065c4:	4650      	mov	r0, sl
  4065c6:	4b20      	ldr	r3, [pc, #128]	; (406648 <f_write+0x200>)
  4065c8:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  4065ca:	4605      	mov	r5, r0
  4065cc:	2800      	cmp	r0, #0
  4065ce:	d098      	beq.n	406502 <f_write+0xba>
			sect += csect;
  4065d0:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  4065d2:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  4065d6:	d0af      	beq.n	406538 <f_write+0xf0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  4065d8:	f89a 3002 	ldrb.w	r3, [sl, #2]
  4065dc:	eb07 020b 	add.w	r2, r7, fp
  4065e0:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  4065e2:	bf88      	it	hi
  4065e4:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  4065e8:	fa5f f38b 	uxtb.w	r3, fp
  4065ec:	462a      	mov	r2, r5
  4065ee:	4649      	mov	r1, r9
  4065f0:	f89a 0001 	ldrb.w	r0, [sl, #1]
  4065f4:	4f12      	ldr	r7, [pc, #72]	; (406640 <f_write+0x1f8>)
  4065f6:	47b8      	blx	r7
  4065f8:	2800      	cmp	r0, #0
  4065fa:	d189      	bne.n	406510 <f_write+0xc8>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  4065fc:	69a1      	ldr	r1, [r4, #24]
  4065fe:	1b49      	subs	r1, r1, r5
  406600:	458b      	cmp	fp, r1
  406602:	d88c      	bhi.n	40651e <f_write+0xd6>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  406604:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  406608:	e7b0      	b.n	40656c <f_write+0x124>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  40660a:	2301      	movs	r3, #1
  40660c:	462a      	mov	r2, r5
  40660e:	f104 0124 	add.w	r1, r4, #36	; 0x24
  406612:	f89a 0001 	ldrb.w	r0, [sl, #1]
  406616:	4f0d      	ldr	r7, [pc, #52]	; (40664c <f_write+0x204>)
  406618:	47b8      	blx	r7
				if (fp->fptr < fp->fsize &&
  40661a:	2800      	cmp	r0, #0
  40661c:	d093      	beq.n	406546 <f_write+0xfe>
						ABORT(fp->fs, FR_DISK_ERR);
  40661e:	79a3      	ldrb	r3, [r4, #6]
  406620:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406624:	71a3      	strb	r3, [r4, #6]
  406626:	2301      	movs	r3, #1
  406628:	9301      	str	r3, [sp, #4]
  40662a:	e001      	b.n	406630 <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  40662c:	2302      	movs	r3, #2
  40662e:	9301      	str	r3, [sp, #4]
}
  406630:	9801      	ldr	r0, [sp, #4]
  406632:	b003      	add	sp, #12
  406634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406638:	00405029 	.word	0x00405029
  40663c:	004057a1 	.word	0x004057a1
  406640:	00404ea5 	.word	0x00404ea5
  406644:	00404fdd 	.word	0x00404fdd
  406648:	00404ff1 	.word	0x00404ff1
  40664c:	00404e35 	.word	0x00404e35

00406650 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  406650:	b538      	push	{r3, r4, r5, lr}
  406652:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  406654:	8881      	ldrh	r1, [r0, #4]
  406656:	6800      	ldr	r0, [r0, #0]
  406658:	4b28      	ldr	r3, [pc, #160]	; (4066fc <f_sync+0xac>)
  40665a:	4798      	blx	r3
	if (res == FR_OK) {
  40665c:	4603      	mov	r3, r0
  40665e:	b9d0      	cbnz	r0, 406696 <f_sync+0x46>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  406660:	79a2      	ldrb	r2, [r4, #6]
  406662:	f012 0f20 	tst.w	r2, #32
  406666:	d016      	beq.n	406696 <f_sync+0x46>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
  406668:	f012 0f40 	tst.w	r2, #64	; 0x40
  40666c:	d00d      	beq.n	40668a <f_sync+0x3a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  40666e:	6820      	ldr	r0, [r4, #0]
  406670:	2301      	movs	r3, #1
  406672:	69a2      	ldr	r2, [r4, #24]
  406674:	f104 0124 	add.w	r1, r4, #36	; 0x24
  406678:	7840      	ldrb	r0, [r0, #1]
  40667a:	4d21      	ldr	r5, [pc, #132]	; (406700 <f_sync+0xb0>)
  40667c:	47a8      	blx	r5
  40667e:	2800      	cmp	r0, #0
  406680:	d139      	bne.n	4066f6 <f_sync+0xa6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
  406682:	79a3      	ldrb	r3, [r4, #6]
  406684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  406688:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  40668a:	69e1      	ldr	r1, [r4, #28]
  40668c:	6820      	ldr	r0, [r4, #0]
  40668e:	4b1d      	ldr	r3, [pc, #116]	; (406704 <f_sync+0xb4>)
  406690:	4798      	blx	r3
			if (res == FR_OK) {
  406692:	4603      	mov	r3, r0
  406694:	b108      	cbz	r0, 40669a <f_sync+0x4a>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  406696:	4618      	mov	r0, r3
  406698:	bd38      	pop	{r3, r4, r5, pc}
				dir = fp->dir_ptr;
  40669a:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  40669c:	7aeb      	ldrb	r3, [r5, #11]
  40669e:	f043 0320 	orr.w	r3, r3, #32
  4066a2:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  4066a4:	68e3      	ldr	r3, [r4, #12]
  4066a6:	772b      	strb	r3, [r5, #28]
  4066a8:	89a3      	ldrh	r3, [r4, #12]
  4066aa:	0a1b      	lsrs	r3, r3, #8
  4066ac:	776b      	strb	r3, [r5, #29]
  4066ae:	89e3      	ldrh	r3, [r4, #14]
  4066b0:	77ab      	strb	r3, [r5, #30]
  4066b2:	7be3      	ldrb	r3, [r4, #15]
  4066b4:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  4066b6:	6923      	ldr	r3, [r4, #16]
  4066b8:	76ab      	strb	r3, [r5, #26]
  4066ba:	8a23      	ldrh	r3, [r4, #16]
  4066bc:	0a1b      	lsrs	r3, r3, #8
  4066be:	76eb      	strb	r3, [r5, #27]
  4066c0:	8a63      	ldrh	r3, [r4, #18]
  4066c2:	752b      	strb	r3, [r5, #20]
  4066c4:	8a63      	ldrh	r3, [r4, #18]
  4066c6:	0a1b      	lsrs	r3, r3, #8
  4066c8:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  4066ca:	4b0f      	ldr	r3, [pc, #60]	; (406708 <f_sync+0xb8>)
  4066cc:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  4066ce:	75a8      	strb	r0, [r5, #22]
  4066d0:	f3c0 2307 	ubfx	r3, r0, #8, #8
  4066d4:	75eb      	strb	r3, [r5, #23]
  4066d6:	0c03      	lsrs	r3, r0, #16
  4066d8:	762b      	strb	r3, [r5, #24]
  4066da:	0e00      	lsrs	r0, r0, #24
  4066dc:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  4066de:	79a3      	ldrb	r3, [r4, #6]
  4066e0:	f023 0320 	bic.w	r3, r3, #32
  4066e4:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  4066e6:	6823      	ldr	r3, [r4, #0]
  4066e8:	2201      	movs	r2, #1
  4066ea:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  4066ec:	6820      	ldr	r0, [r4, #0]
  4066ee:	4b07      	ldr	r3, [pc, #28]	; (40670c <f_sync+0xbc>)
  4066f0:	4798      	blx	r3
  4066f2:	4603      	mov	r3, r0
  4066f4:	e7cf      	b.n	406696 <f_sync+0x46>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  4066f6:	2301      	movs	r3, #1
  4066f8:	e7cd      	b.n	406696 <f_sync+0x46>
  4066fa:	bf00      	nop
  4066fc:	00405029 	.word	0x00405029
  406700:	00404ea5 	.word	0x00404ea5
  406704:	00405451 	.word	0x00405451
  406708:	00404f85 	.word	0x00404f85
  40670c:	004058dd 	.word	0x004058dd

00406710 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  406710:	b510      	push	{r4, lr}
  406712:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  406714:	4b03      	ldr	r3, [pc, #12]	; (406724 <f_close+0x14>)
  406716:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  406718:	4603      	mov	r3, r0
  40671a:	b908      	cbnz	r0, 406720 <f_close+0x10>
  40671c:	2200      	movs	r2, #0
  40671e:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  406720:	4618      	mov	r0, r3
  406722:	bd10      	pop	{r4, pc}
  406724:	00406651 	.word	0x00406651

00406728 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
  406728:	b510      	push	{r4, lr}
  40672a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
  40672e:	4604      	mov	r4, r0
  406730:	9101      	str	r1, [sp, #4]
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
  406732:	2200      	movs	r2, #0
  406734:	4601      	mov	r1, r0
  406736:	a801      	add	r0, sp, #4
  406738:	4b18      	ldr	r3, [pc, #96]	; (40679c <f_opendir+0x74>)
  40673a:	4798      	blx	r3
	if (res == FR_OK) {
  40673c:	4603      	mov	r3, r0
  40673e:	b118      	cbz	r0, 406748 <f_opendir+0x20>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
  406740:	4618      	mov	r0, r3
  406742:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
  406746:	bd10      	pop	{r4, pc}
		INIT_BUF(*dj);
  406748:	ab83      	add	r3, sp, #524	; 0x20c
  40674a:	61a3      	str	r3, [r4, #24]
  40674c:	ab03      	add	r3, sp, #12
  40674e:	61e3      	str	r3, [r4, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
  406750:	9901      	ldr	r1, [sp, #4]
  406752:	4620      	mov	r0, r4
  406754:	4b12      	ldr	r3, [pc, #72]	; (4067a0 <f_opendir+0x78>)
  406756:	4798      	blx	r3
		if (res == FR_OK) {						/* Follow completed */
  406758:	4603      	mov	r3, r0
  40675a:	b9c0      	cbnz	r0, 40678e <f_opendir+0x66>
			if (dj->dir) {						/* It is not the root dir */
  40675c:	6963      	ldr	r3, [r4, #20]
  40675e:	b173      	cbz	r3, 40677e <f_opendir+0x56>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
  406760:	7ada      	ldrb	r2, [r3, #11]
  406762:	f012 0f10 	tst.w	r2, #16
  406766:	d016      	beq.n	406796 <f_opendir+0x6e>
					dj->sclust = LD_CLUST(dj->dir);
  406768:	7d59      	ldrb	r1, [r3, #21]
  40676a:	7d1a      	ldrb	r2, [r3, #20]
  40676c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  406770:	7ed9      	ldrb	r1, [r3, #27]
  406772:	7e9b      	ldrb	r3, [r3, #26]
  406774:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  406778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40677c:	60a3      	str	r3, [r4, #8]
				dj->id = dj->fs->id;
  40677e:	6823      	ldr	r3, [r4, #0]
  406780:	88db      	ldrh	r3, [r3, #6]
  406782:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
  406784:	2100      	movs	r1, #0
  406786:	4620      	mov	r0, r4
  406788:	4b06      	ldr	r3, [pc, #24]	; (4067a4 <f_opendir+0x7c>)
  40678a:	4798      	blx	r3
  40678c:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
  40678e:	2b04      	cmp	r3, #4
  406790:	bf08      	it	eq
  406792:	2305      	moveq	r3, #5
  406794:	e7d4      	b.n	406740 <f_opendir+0x18>
					res = FR_NO_PATH;
  406796:	2305      	movs	r3, #5
	LEAVE_FF(dj->fs, res);
  406798:	e7d2      	b.n	406740 <f_opendir+0x18>
  40679a:	bf00      	nop
  40679c:	004050ed 	.word	0x004050ed
  4067a0:	00405c89 	.word	0x00405c89
  4067a4:	004055c9 	.word	0x004055c9

004067a8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
  4067a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4067ac:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  4067b0:	9001      	str	r0, [sp, #4]
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
  4067b2:	4b6e      	ldr	r3, [pc, #440]	; (40696c <f_mkdir+0x1c4>)
  4067b4:	4798      	blx	r3
  4067b6:	4607      	mov	r7, r0
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
  4067b8:	2201      	movs	r2, #1
  4067ba:	a985      	add	r1, sp, #532	; 0x214
  4067bc:	a801      	add	r0, sp, #4
  4067be:	4b6c      	ldr	r3, [pc, #432]	; (406970 <f_mkdir+0x1c8>)
  4067c0:	4798      	blx	r3
	if (res == FR_OK) {
  4067c2:	4605      	mov	r5, r0
  4067c4:	b120      	cbz	r0, 4067d0 <f_mkdir+0x28>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
  4067c6:	4628      	mov	r0, r5
  4067c8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  4067cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_BUF(dj);
  4067d0:	ab82      	add	r3, sp, #520	; 0x208
  4067d2:	938b      	str	r3, [sp, #556]	; 0x22c
  4067d4:	ab02      	add	r3, sp, #8
  4067d6:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);			/* Follow the file path */
  4067d8:	9901      	ldr	r1, [sp, #4]
  4067da:	a885      	add	r0, sp, #532	; 0x214
  4067dc:	4b65      	ldr	r3, [pc, #404]	; (406974 <f_mkdir+0x1cc>)
  4067de:	4798      	blx	r3
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
  4067e0:	2800      	cmp	r0, #0
  4067e2:	f000 809a 	beq.w	40691a <f_mkdir+0x172>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
  4067e6:	2804      	cmp	r0, #4
  4067e8:	d001      	beq.n	4067ee <f_mkdir+0x46>
		res = follow_path(&dj, path);			/* Follow the file path */
  4067ea:	4605      	mov	r5, r0
	LEAVE_FF(dj.fs, res);
  4067ec:	e7eb      	b.n	4067c6 <f_mkdir+0x1e>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
  4067ee:	2100      	movs	r1, #0
  4067f0:	9885      	ldr	r0, [sp, #532]	; 0x214
  4067f2:	4b61      	ldr	r3, [pc, #388]	; (406978 <f_mkdir+0x1d0>)
  4067f4:	4798      	blx	r3
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
  4067f6:	4681      	mov	r9, r0
  4067f8:	b140      	cbz	r0, 40680c <f_mkdir+0x64>
			if (dcl == 1) res = FR_INT_ERR;
  4067fa:	2801      	cmp	r0, #1
  4067fc:	d101      	bne.n	406802 <f_mkdir+0x5a>
  4067fe:	2502      	movs	r5, #2
  406800:	e005      	b.n	40680e <f_mkdir+0x66>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
  406802:	f1b0 3fff 	cmp.w	r0, #4294967295
  406806:	d102      	bne.n	40680e <f_mkdir+0x66>
  406808:	2501      	movs	r5, #1
  40680a:	e08c      	b.n	406926 <f_mkdir+0x17e>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
  40680c:	2507      	movs	r5, #7
			if (res == FR_OK)					/* Flush FAT */
  40680e:	b125      	cbz	r5, 40681a <f_mkdir+0x72>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
  406810:	4649      	mov	r1, r9
  406812:	9885      	ldr	r0, [sp, #532]	; 0x214
  406814:	4b59      	ldr	r3, [pc, #356]	; (40697c <f_mkdir+0x1d4>)
  406816:	4798      	blx	r3
  406818:	e7d5      	b.n	4067c6 <f_mkdir+0x1e>
				res = move_window(dj.fs, 0);
  40681a:	2100      	movs	r1, #0
  40681c:	9885      	ldr	r0, [sp, #532]	; 0x214
  40681e:	4b58      	ldr	r3, [pc, #352]	; (406980 <f_mkdir+0x1d8>)
  406820:	4798      	blx	r3
			if (res == FR_OK) {					/* Initialize the new directory table */
  406822:	4605      	mov	r5, r0
  406824:	2800      	cmp	r0, #0
  406826:	d1f3      	bne.n	406810 <f_mkdir+0x68>
				dsc = clust2sect(dj.fs, dcl);
  406828:	9e85      	ldr	r6, [sp, #532]	; 0x214
  40682a:	4649      	mov	r1, r9
  40682c:	4630      	mov	r0, r6
  40682e:	4b55      	ldr	r3, [pc, #340]	; (406984 <f_mkdir+0x1dc>)
  406830:	4798      	blx	r3
  406832:	4605      	mov	r5, r0
				dir = dj.fs->win;
  406834:	f106 0330 	add.w	r3, r6, #48	; 0x30
  406838:	9300      	str	r3, [sp, #0]
  40683a:	f506 720c 	add.w	r2, r6, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  40683e:	461c      	mov	r4, r3
		*d++ = (BYTE)val;
  406840:	2300      	movs	r3, #0
  406842:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt--)
  406846:	42a2      	cmp	r2, r4
  406848:	d1fb      	bne.n	406842 <f_mkdir+0x9a>
  40684a:	f106 013b 	add.w	r1, r6, #59	; 0x3b
  40684e:	9b00      	ldr	r3, [sp, #0]
		*d++ = (BYTE)val;
  406850:	2220      	movs	r2, #32
  406852:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  406856:	428b      	cmp	r3, r1
  406858:	d1fb      	bne.n	406852 <f_mkdir+0xaa>
				dir[DIR_Name] = '.';
  40685a:	f04f 082e 	mov.w	r8, #46	; 0x2e
  40685e:	f886 8030 	strb.w	r8, [r6, #48]	; 0x30
				dir[DIR_Attr] = AM_DIR;
  406862:	2310      	movs	r3, #16
  406864:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
				ST_DWORD(dir+DIR_WrtTime, tim);
  406868:	f886 7046 	strb.w	r7, [r6, #70]	; 0x46
  40686c:	f3c7 2307 	ubfx	r3, r7, #8, #8
  406870:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
  406874:	0c3b      	lsrs	r3, r7, #16
  406876:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
  40687a:	0e3b      	lsrs	r3, r7, #24
  40687c:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
				ST_CLUST(dir, dcl);
  406880:	f886 904a 	strb.w	r9, [r6, #74]	; 0x4a
  406884:	f3c9 2307 	ubfx	r3, r9, #8, #8
  406888:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
  40688c:	ea4f 4319 	mov.w	r3, r9, lsr #16
  406890:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
  406894:	0a1b      	lsrs	r3, r3, #8
  406896:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
  40689a:	2220      	movs	r2, #32
  40689c:	9900      	ldr	r1, [sp, #0]
  40689e:	f106 0050 	add.w	r0, r6, #80	; 0x50
  4068a2:	4b39      	ldr	r3, [pc, #228]	; (406988 <f_mkdir+0x1e0>)
  4068a4:	4798      	blx	r3
				dir[33] = '.'; pcl = dj.sclust;
  4068a6:	f886 8051 	strb.w	r8, [r6, #81]	; 0x51
  4068aa:	9b87      	ldr	r3, [sp, #540]	; 0x21c
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  4068ac:	9a85      	ldr	r2, [sp, #532]	; 0x214
  4068ae:	7811      	ldrb	r1, [r2, #0]
  4068b0:	2903      	cmp	r1, #3
  4068b2:	d018      	beq.n	4068e6 <f_mkdir+0x13e>
				ST_CLUST(dir+SZ_DIR, pcl);
  4068b4:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
  4068b8:	f3c3 2107 	ubfx	r1, r3, #8, #8
  4068bc:	f886 106b 	strb.w	r1, [r6, #107]	; 0x6b
  4068c0:	0c1b      	lsrs	r3, r3, #16
  4068c2:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
  4068c6:	0a1b      	lsrs	r3, r3, #8
  4068c8:	f886 3065 	strb.w	r3, [r6, #101]	; 0x65
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
  4068cc:	7893      	ldrb	r3, [r2, #2]
  4068ce:	b333      	cbz	r3, 40691e <f_mkdir+0x176>
  4068d0:	f103 3aff 	add.w	sl, r3, #4294967295
  4068d4:	fa5f fa8a 	uxtb.w	sl, sl
  4068d8:	f10a 0a01 	add.w	sl, sl, #1
  4068dc:	44aa      	add	sl, r5
					dj.fs->wflag = 1;
  4068de:	f04f 0b01 	mov.w	fp, #1
					res = move_window(dj.fs, 0);
  4068e2:	2600      	movs	r6, #0
  4068e4:	e007      	b.n	4068f6 <f_mkdir+0x14e>
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  4068e6:	6a51      	ldr	r1, [r2, #36]	; 0x24
					pcl = 0;
  4068e8:	428b      	cmp	r3, r1
  4068ea:	bf08      	it	eq
  4068ec:	2300      	moveq	r3, #0
  4068ee:	e7e1      	b.n	4068b4 <f_mkdir+0x10c>
					dj.fs->winsect = dsc++;
  4068f0:	4645      	mov	r5, r8
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
  4068f2:	45d0      	cmp	r8, sl
  4068f4:	d013      	beq.n	40691e <f_mkdir+0x176>
					dj.fs->winsect = dsc++;
  4068f6:	9885      	ldr	r0, [sp, #532]	; 0x214
  4068f8:	f105 0801 	add.w	r8, r5, #1
  4068fc:	62c5      	str	r5, [r0, #44]	; 0x2c
					dj.fs->wflag = 1;
  4068fe:	f880 b004 	strb.w	fp, [r0, #4]
					res = move_window(dj.fs, 0);
  406902:	4631      	mov	r1, r6
  406904:	4b1e      	ldr	r3, [pc, #120]	; (406980 <f_mkdir+0x1d8>)
  406906:	4798      	blx	r3
					if (res != FR_OK) break;
  406908:	4605      	mov	r5, r0
  40690a:	2800      	cmp	r0, #0
  40690c:	d180      	bne.n	406810 <f_mkdir+0x68>
  40690e:	9b00      	ldr	r3, [sp, #0]
		*d++ = (BYTE)val;
  406910:	f803 6b01 	strb.w	r6, [r3], #1
	while (cnt--)
  406914:	429c      	cmp	r4, r3
  406916:	d1fb      	bne.n	406910 <f_mkdir+0x168>
  406918:	e7ea      	b.n	4068f0 <f_mkdir+0x148>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
  40691a:	2508      	movs	r5, #8
  40691c:	e753      	b.n	4067c6 <f_mkdir+0x1e>
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
  40691e:	a885      	add	r0, sp, #532	; 0x214
  406920:	4b1a      	ldr	r3, [pc, #104]	; (40698c <f_mkdir+0x1e4>)
  406922:	4798      	blx	r3
  406924:	4605      	mov	r5, r0
			if (res != FR_OK) {
  406926:	2d00      	cmp	r5, #0
  406928:	f47f af72 	bne.w	406810 <f_mkdir+0x68>
				dir = dj.dir;
  40692c:	9b8a      	ldr	r3, [sp, #552]	; 0x228
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
  40692e:	2210      	movs	r2, #16
  406930:	72da      	strb	r2, [r3, #11]
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
  406932:	759f      	strb	r7, [r3, #22]
  406934:	f3c7 2207 	ubfx	r2, r7, #8, #8
  406938:	75da      	strb	r2, [r3, #23]
  40693a:	0c3a      	lsrs	r2, r7, #16
  40693c:	761a      	strb	r2, [r3, #24]
  40693e:	0e3f      	lsrs	r7, r7, #24
  406940:	765f      	strb	r7, [r3, #25]
				ST_CLUST(dir, dcl);					/* Table start cluster */
  406942:	f883 901a 	strb.w	r9, [r3, #26]
  406946:	f3c9 2207 	ubfx	r2, r9, #8, #8
  40694a:	76da      	strb	r2, [r3, #27]
  40694c:	ea4f 4919 	mov.w	r9, r9, lsr #16
  406950:	f883 9014 	strb.w	r9, [r3, #20]
  406954:	ea4f 2919 	mov.w	r9, r9, lsr #8
  406958:	f883 9015 	strb.w	r9, [r3, #21]
				dj.fs->wflag = 1;
  40695c:	9885      	ldr	r0, [sp, #532]	; 0x214
  40695e:	2301      	movs	r3, #1
  406960:	7103      	strb	r3, [r0, #4]
				res = sync(dj.fs);
  406962:	4b0b      	ldr	r3, [pc, #44]	; (406990 <f_mkdir+0x1e8>)
  406964:	4798      	blx	r3
  406966:	4605      	mov	r5, r0
  406968:	e72d      	b.n	4067c6 <f_mkdir+0x1e>
  40696a:	bf00      	nop
  40696c:	00404f85 	.word	0x00404f85
  406970:	004050ed 	.word	0x004050ed
  406974:	00405c89 	.word	0x00405c89
  406978:	004057a1 	.word	0x004057a1
  40697c:	00405861 	.word	0x00405861
  406980:	00405451 	.word	0x00405451
  406984:	00404ff1 	.word	0x00404ff1
  406988:	00404fdd 	.word	0x00404fdd
  40698c:	00405fad 	.word	0x00405fad
  406990:	004058dd 	.word	0x004058dd

00406994 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  406994:	b510      	push	{r4, lr}
  406996:	b082      	sub	sp, #8
  406998:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  40699a:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  40699e:	ab01      	add	r3, sp, #4
  4069a0:	2201      	movs	r2, #1
  4069a2:	4669      	mov	r1, sp
  4069a4:	4620      	mov	r0, r4
  4069a6:	4c05      	ldr	r4, [pc, #20]	; (4069bc <f_putc+0x28>)
  4069a8:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  4069aa:	9b01      	ldr	r3, [sp, #4]
  4069ac:	2b01      	cmp	r3, #1
}
  4069ae:	bf0c      	ite	eq
  4069b0:	2001      	moveq	r0, #1
  4069b2:	f04f 30ff 	movne.w	r0, #4294967295
  4069b6:	b002      	add	sp, #8
  4069b8:	bd10      	pop	{r4, pc}
  4069ba:	bf00      	nop
  4069bc:	00406449 	.word	0x00406449

004069c0 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  4069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;


	for (n = 0; *str; str++, n++) {
  4069c2:	7803      	ldrb	r3, [r0, #0]
  4069c4:	b17b      	cbz	r3, 4069e6 <f_puts+0x26>
  4069c6:	460e      	mov	r6, r1
  4069c8:	4605      	mov	r5, r0
  4069ca:	1c44      	adds	r4, r0, #1
		if (f_putc(*str, fil) == EOF) return EOF;
  4069cc:	4f07      	ldr	r7, [pc, #28]	; (4069ec <f_puts+0x2c>)
  4069ce:	4631      	mov	r1, r6
  4069d0:	4618      	mov	r0, r3
  4069d2:	47b8      	blx	r7
  4069d4:	f1b0 3fff 	cmp.w	r0, #4294967295
  4069d8:	d006      	beq.n	4069e8 <f_puts+0x28>
  4069da:	1b60      	subs	r0, r4, r5
	for (n = 0; *str; str++, n++) {
  4069dc:	f814 3b01 	ldrb.w	r3, [r4], #1
  4069e0:	2b00      	cmp	r3, #0
  4069e2:	d1f4      	bne.n	4069ce <f_puts+0xe>
  4069e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4069e6:	2000      	movs	r0, #0
	}
	return n;
}
  4069e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4069ea:	bf00      	nop
  4069ec:	00406995 	.word	0x00406995

004069f0 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  4069f0:	287f      	cmp	r0, #127	; 0x7f
  4069f2:	d919      	bls.n	406a28 <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  4069f4:	b971      	cbnz	r1, 406a14 <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  4069f6:	28c7      	cmp	r0, #199	; 0xc7
  4069f8:	d013      	beq.n	406a22 <ff_convert+0x32>
  4069fa:	4a0c      	ldr	r2, [pc, #48]	; (406a2c <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  4069fc:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  4069fe:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  406a02:	4281      	cmp	r1, r0
  406a04:	d003      	beq.n	406a0e <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  406a06:	3301      	adds	r3, #1
  406a08:	b29b      	uxth	r3, r3
  406a0a:	2b80      	cmp	r3, #128	; 0x80
  406a0c:	d1f7      	bne.n	4069fe <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  406a0e:	3380      	adds	r3, #128	; 0x80
  406a10:	b2d8      	uxtb	r0, r3
  406a12:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  406a14:	28ff      	cmp	r0, #255	; 0xff
  406a16:	d806      	bhi.n	406a26 <ff_convert+0x36>
  406a18:	3880      	subs	r0, #128	; 0x80
  406a1a:	4b04      	ldr	r3, [pc, #16]	; (406a2c <ff_convert+0x3c>)
  406a1c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  406a20:	4770      	bx	lr
				if (src == Tbl[c]) break;
  406a22:	2300      	movs	r3, #0
  406a24:	e7f3      	b.n	406a0e <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  406a26:	2000      	movs	r0, #0
		}
	}

	return c;
}
  406a28:	4770      	bx	lr
  406a2a:	bf00      	nop
  406a2c:	0040fe70 	.word	0x0040fe70

00406a30 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  406a30:	2861      	cmp	r0, #97	; 0x61
  406a32:	d00e      	beq.n	406a52 <ff_wtoupper+0x22>
  406a34:	4908      	ldr	r1, [pc, #32]	; (406a58 <ff_wtoupper+0x28>)
  406a36:	2200      	movs	r2, #0
  406a38:	3201      	adds	r2, #1
  406a3a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  406a3e:	4283      	cmp	r3, r0
  406a40:	d001      	beq.n	406a46 <ff_wtoupper+0x16>
  406a42:	2b00      	cmp	r3, #0
  406a44:	d1f8      	bne.n	406a38 <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  406a46:	b11b      	cbz	r3, 406a50 <ff_wtoupper+0x20>
  406a48:	4b04      	ldr	r3, [pc, #16]	; (406a5c <ff_wtoupper+0x2c>)
  406a4a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  406a4e:	4770      	bx	lr
  406a50:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  406a52:	2200      	movs	r2, #0
  406a54:	e7f8      	b.n	406a48 <ff_wtoupper+0x18>
  406a56:	bf00      	nop
  406a58:	0040ff70 	.word	0x0040ff70
  406a5c:	00410150 	.word	0x00410150

00406a60 <sleepmgr_lock_mode>:
	if(sleepmgr_locks[mode] >= 0xff) {
  406a60:	4b0f      	ldr	r3, [pc, #60]	; (406aa0 <sleepmgr_lock_mode+0x40>)
  406a62:	5c1b      	ldrb	r3, [r3, r0]
  406a64:	2bff      	cmp	r3, #255	; 0xff
  406a66:	d01a      	beq.n	406a9e <sleepmgr_lock_mode+0x3e>
{
  406a68:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  406a6a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  406a6e:	fab3 f383 	clz	r3, r3
  406a72:	095b      	lsrs	r3, r3, #5
  406a74:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  406a76:	b672      	cpsid	i
  406a78:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  406a7c:	2200      	movs	r2, #0
  406a7e:	4b09      	ldr	r3, [pc, #36]	; (406aa4 <sleepmgr_lock_mode+0x44>)
  406a80:	701a      	strb	r2, [r3, #0]
	return flags;
  406a82:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  406a84:	4a06      	ldr	r2, [pc, #24]	; (406aa0 <sleepmgr_lock_mode+0x40>)
  406a86:	5c13      	ldrb	r3, [r2, r0]
  406a88:	3301      	adds	r3, #1
  406a8a:	5413      	strb	r3, [r2, r0]
	if (cpu_irq_is_enabled_flags(flags))
  406a8c:	b129      	cbz	r1, 406a9a <sleepmgr_lock_mode+0x3a>
		cpu_irq_enable();
  406a8e:	2201      	movs	r2, #1
  406a90:	4b04      	ldr	r3, [pc, #16]	; (406aa4 <sleepmgr_lock_mode+0x44>)
  406a92:	701a      	strb	r2, [r3, #0]
  406a94:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  406a98:	b662      	cpsie	i
}
  406a9a:	b002      	add	sp, #8
  406a9c:	4770      	bx	lr
  406a9e:	e7fe      	b.n	406a9e <sleepmgr_lock_mode+0x3e>
  406aa0:	20401114 	.word	0x20401114
  406aa4:	20400177 	.word	0x20400177

00406aa8 <hex1ToAscii>:
 /***********************************************************************/
 /*  hex1ToAscii nibble to 2-byte Ascii
 ***********************************************************************/
 static unsigned int hex1ToAscii(int hex){
   int a;
   hex &= 0x000F;
  406aa8:	f000 000f 	and.w	r0, r0, #15
     switch (hex) {
  406aac:	280f      	cmp	r0, #15
  406aae:	d80a      	bhi.n	406ac6 <hex1ToAscii+0x1e>
  406ab0:	e8df f000 	tbb	[pc, r0]
  406ab4:	0f0d0b08 	.word	0x0f0d0b08
  406ab8:	17151311 	.word	0x17151311
  406abc:	1f1d1b19 	.word	0x1f1d1b19
  406ac0:	27252321 	.word	0x27252321
       case 0: a = 0x30;
  406ac4:	2330      	movs	r3, #48	; 0x30
       break;
       case 15: a = 0x46;
       break;
     };
    return a;
 }
  406ac6:	4618      	mov	r0, r3
  406ac8:	4770      	bx	lr
       case 1: a = 0x31;
  406aca:	2331      	movs	r3, #49	; 0x31
       break;
  406acc:	e7fb      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 2: a = 0x32;
  406ace:	2332      	movs	r3, #50	; 0x32
       break;
  406ad0:	e7f9      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 3: a = 0x33;
  406ad2:	2333      	movs	r3, #51	; 0x33
       break;
  406ad4:	e7f7      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 4: a = 0x34;
  406ad6:	2334      	movs	r3, #52	; 0x34
       break;
  406ad8:	e7f5      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 5: a = 0x35;
  406ada:	2335      	movs	r3, #53	; 0x35
       break;
  406adc:	e7f3      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 6: a = 0x36;
  406ade:	2336      	movs	r3, #54	; 0x36
       break;
  406ae0:	e7f1      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 7: a = 0x37;
  406ae2:	2337      	movs	r3, #55	; 0x37
       break;
  406ae4:	e7ef      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 8: a = 0x38;
  406ae6:	2338      	movs	r3, #56	; 0x38
       break;
  406ae8:	e7ed      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 9: a = 0x39;
  406aea:	2339      	movs	r3, #57	; 0x39
       break;
  406aec:	e7eb      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 10: a = 0x41;
  406aee:	2341      	movs	r3, #65	; 0x41
       break;
  406af0:	e7e9      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 11: a = 0x42;
  406af2:	2342      	movs	r3, #66	; 0x42
       break;
  406af4:	e7e7      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 12: a = 0x43;
  406af6:	2343      	movs	r3, #67	; 0x43
       break;
  406af8:	e7e5      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 13: a = 0x44;
  406afa:	2344      	movs	r3, #68	; 0x44
       break;
  406afc:	e7e3      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 14: a = 0x45;
  406afe:	2345      	movs	r3, #69	; 0x45
       break;
  406b00:	e7e1      	b.n	406ac6 <hex1ToAscii+0x1e>
       case 15: a = 0x46;
  406b02:	2346      	movs	r3, #70	; 0x46
       break;
  406b04:	e7df      	b.n	406ac6 <hex1ToAscii+0x1e>

00406b06 <bcdToHex>:
/***********************************************************************/
/*  Converts BCD to Hex.
***********************************************************************/
char bcdToHex (char toConvert){
char inHex;
inHex = ((toConvert>>4)*10)+(toConvert%16);
  406b06:	0903      	lsrs	r3, r0, #4
  406b08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  406b0c:	f000 000f 	and.w	r0, r0, #15
  406b10:	eb00 0043 	add.w	r0, r0, r3, lsl #1
return inHex;
}
  406b14:	b2c0      	uxtb	r0, r0
  406b16:	4770      	bx	lr

00406b18 <hexToBCD>:
/***********************************************************************/
/*  Converts Hex to BCD. Works up to 99,999.
***********************************************************************/
static int hexToBCD (int toConvert){
  406b18:	b410      	push	{r4}
	char tenThous=0;
	char thousands=0;
	char hundreds=0;
	char tens=0;
	if(toConvert>89999){tenThous=9;toConvert-=90000;}
  406b1a:	4b8c      	ldr	r3, [pc, #560]	; (406d4c <hexToBCD+0x234>)
  406b1c:	4298      	cmp	r0, r3
  406b1e:	dd31      	ble.n	406b84 <hexToBCD+0x6c>
  406b20:	f5a0 30af 	sub.w	r0, r0, #89600	; 0x15e00
  406b24:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
  406b28:	2409      	movs	r4, #9
	else if(toConvert>39999){tenThous=4;toConvert-=40000;}
	else if(toConvert>29999){tenThous=3;toConvert-=30000;}
	else if(toConvert>19999){tenThous=2;toConvert-=20000;}
	else if(toConvert>9999){tenThous=1;toConvert-=10000;}

	if(toConvert>8999){thousands=9;toConvert-=9000;}
  406b2a:	f242 3127 	movw	r1, #8999	; 0x2327
  406b2e:	4288      	cmp	r0, r1
  406b30:	dd71      	ble.n	406c16 <hexToBCD+0xfe>
  406b32:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
  406b36:	3828      	subs	r0, #40	; 0x28
  406b38:	2209      	movs	r2, #9
	else if(toConvert>3999){thousands=4;toConvert-=4000;}
	else if(toConvert>2999){thousands=3;toConvert-=3000;}
	else if(toConvert>1999){thousands=2;toConvert-=2000;}
	else if(toConvert>999){thousands=1;toConvert-=1000;}

	if(toConvert>899){hundreds=9;toConvert-=900;}
  406b3a:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
  406b3e:	f2c0 80ab 	blt.w	406c98 <hexToBCD+0x180>
  406b42:	f5a0 7061 	sub.w	r0, r0, #900	; 0x384
  406b46:	2309      	movs	r3, #9
	else if(toConvert>399){hundreds=4;toConvert-=400;}
	else if(toConvert>299){hundreds=3;toConvert-=300;}
	else if(toConvert>199){hundreds=2;toConvert-=200;}
	else if(toConvert>99){hundreds=1;toConvert-=100;}

	if(toConvert>89){tens=9;toConvert-=90;}
  406b48:	2859      	cmp	r0, #89	; 0x59
  406b4a:	f300 80db 	bgt.w	406d04 <hexToBCD+0x1ec>
	else if(toConvert>79){tens=8;toConvert-=80;}
  406b4e:	284f      	cmp	r0, #79	; 0x4f
  406b50:	f300 80e5 	bgt.w	406d1e <hexToBCD+0x206>
	else if(toConvert>69){tens=7;toConvert-=70;}
  406b54:	2845      	cmp	r0, #69	; 0x45
  406b56:	f300 80e5 	bgt.w	406d24 <hexToBCD+0x20c>
	else if(toConvert>59){tens=6;toConvert-=60;}
  406b5a:	283b      	cmp	r0, #59	; 0x3b
  406b5c:	f300 80e5 	bgt.w	406d2a <hexToBCD+0x212>
	else if(toConvert>49){tens=5;toConvert-=50;}
  406b60:	2831      	cmp	r0, #49	; 0x31
  406b62:	f300 80e5 	bgt.w	406d30 <hexToBCD+0x218>
	else if(toConvert>39){tens=4;toConvert-=40;}
  406b66:	2827      	cmp	r0, #39	; 0x27
  406b68:	f300 80e5 	bgt.w	406d36 <hexToBCD+0x21e>
	else if(toConvert>29){tens=3;toConvert-=30;}
  406b6c:	281d      	cmp	r0, #29
  406b6e:	f300 80e5 	bgt.w	406d3c <hexToBCD+0x224>
	else if(toConvert>19){tens=2;toConvert-=20;}
  406b72:	2813      	cmp	r0, #19
  406b74:	f300 80e5 	bgt.w	406d42 <hexToBCD+0x22a>
	else if(toConvert>9){tens=1;toConvert-=10;}
  406b78:	2809      	cmp	r0, #9
  406b7a:	f340 80e5 	ble.w	406d48 <hexToBCD+0x230>
  406b7e:	380a      	subs	r0, #10
  406b80:	2101      	movs	r1, #1
  406b82:	e0c1      	b.n	406d08 <hexToBCD+0x1f0>
	else if(toConvert>79999){tenThous=8;toConvert-=80000;}
  406b84:	4b72      	ldr	r3, [pc, #456]	; (406d50 <hexToBCD+0x238>)
  406b86:	4298      	cmp	r0, r3
  406b88:	dd04      	ble.n	406b94 <hexToBCD+0x7c>
  406b8a:	f5a0 309c 	sub.w	r0, r0, #79872	; 0x13800
  406b8e:	3880      	subs	r0, #128	; 0x80
  406b90:	2408      	movs	r4, #8
  406b92:	e7ca      	b.n	406b2a <hexToBCD+0x12>
	else if(toConvert>69999){tenThous=7;toConvert-=70000;}
  406b94:	4b6f      	ldr	r3, [pc, #444]	; (406d54 <hexToBCD+0x23c>)
  406b96:	4298      	cmp	r0, r3
  406b98:	dd05      	ble.n	406ba6 <hexToBCD+0x8e>
  406b9a:	f5a0 3088 	sub.w	r0, r0, #69632	; 0x11000
  406b9e:	f5a0 70b8 	sub.w	r0, r0, #368	; 0x170
  406ba2:	2407      	movs	r4, #7
  406ba4:	e7c1      	b.n	406b2a <hexToBCD+0x12>
	else if(toConvert>59999){tenThous=6;toConvert-=60000;}
  406ba6:	f64e 235f 	movw	r3, #59999	; 0xea5f
  406baa:	4298      	cmp	r0, r3
  406bac:	dd04      	ble.n	406bb8 <hexToBCD+0xa0>
  406bae:	f5a0 406a 	sub.w	r0, r0, #59904	; 0xea00
  406bb2:	3860      	subs	r0, #96	; 0x60
  406bb4:	2406      	movs	r4, #6
  406bb6:	e7b8      	b.n	406b2a <hexToBCD+0x12>
	else if(toConvert>49999){tenThous=5;toConvert-=50000;}
  406bb8:	f24c 334f 	movw	r3, #49999	; 0xc34f
  406bbc:	4298      	cmp	r0, r3
  406bbe:	dd04      	ble.n	406bca <hexToBCD+0xb2>
  406bc0:	f5a0 4043 	sub.w	r0, r0, #49920	; 0xc300
  406bc4:	3850      	subs	r0, #80	; 0x50
  406bc6:	2405      	movs	r4, #5
  406bc8:	e7af      	b.n	406b2a <hexToBCD+0x12>
	else if(toConvert>39999){tenThous=4;toConvert-=40000;}
  406bca:	f649 433f 	movw	r3, #39999	; 0x9c3f
  406bce:	4298      	cmp	r0, r3
  406bd0:	dd04      	ble.n	406bdc <hexToBCD+0xc4>
  406bd2:	f5a0 401c 	sub.w	r0, r0, #39936	; 0x9c00
  406bd6:	3840      	subs	r0, #64	; 0x40
  406bd8:	2404      	movs	r4, #4
  406bda:	e7a6      	b.n	406b2a <hexToBCD+0x12>
	else if(toConvert>29999){tenThous=3;toConvert-=30000;}
  406bdc:	f247 532f 	movw	r3, #29999	; 0x752f
  406be0:	4298      	cmp	r0, r3
  406be2:	dd04      	ble.n	406bee <hexToBCD+0xd6>
  406be4:	f5a0 40ea 	sub.w	r0, r0, #29952	; 0x7500
  406be8:	3830      	subs	r0, #48	; 0x30
  406bea:	2403      	movs	r4, #3
  406bec:	e79d      	b.n	406b2a <hexToBCD+0x12>
	else if(toConvert>19999){tenThous=2;toConvert-=20000;}
  406bee:	f644 631f 	movw	r3, #19999	; 0x4e1f
  406bf2:	4298      	cmp	r0, r3
  406bf4:	dd04      	ble.n	406c00 <hexToBCD+0xe8>
  406bf6:	f5a0 409c 	sub.w	r0, r0, #19968	; 0x4e00
  406bfa:	3820      	subs	r0, #32
  406bfc:	2402      	movs	r4, #2
  406bfe:	e794      	b.n	406b2a <hexToBCD+0x12>
	else if(toConvert>9999){tenThous=1;toConvert-=10000;}
  406c00:	f242 730f 	movw	r3, #9999	; 0x270f
  406c04:	4298      	cmp	r0, r3
  406c06:	dd04      	ble.n	406c12 <hexToBCD+0xfa>
  406c08:	f5a0 501c 	sub.w	r0, r0, #9984	; 0x2700
  406c0c:	3810      	subs	r0, #16
  406c0e:	2401      	movs	r4, #1
  406c10:	e78b      	b.n	406b2a <hexToBCD+0x12>
	char tenThous=0;
  406c12:	2400      	movs	r4, #0
  406c14:	e789      	b.n	406b2a <hexToBCD+0x12>
	else if(toConvert>7999){thousands=8;toConvert-=8000;}
  406c16:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
  406c1a:	db03      	blt.n	406c24 <hexToBCD+0x10c>
  406c1c:	f5a0 50fa 	sub.w	r0, r0, #8000	; 0x1f40
  406c20:	2208      	movs	r2, #8
  406c22:	e78a      	b.n	406b3a <hexToBCD+0x22>
	else if(toConvert>6999){thousands=7;toConvert-=7000;}
  406c24:	f641 3357 	movw	r3, #6999	; 0x1b57
  406c28:	4298      	cmp	r0, r3
  406c2a:	dd04      	ble.n	406c36 <hexToBCD+0x11e>
  406c2c:	f5a0 50da 	sub.w	r0, r0, #6976	; 0x1b40
  406c30:	3818      	subs	r0, #24
  406c32:	2207      	movs	r2, #7
  406c34:	e781      	b.n	406b3a <hexToBCD+0x22>
	else if(toConvert>5999){thousands=6;toConvert-=6000;}
  406c36:	f241 736f 	movw	r3, #5999	; 0x176f
  406c3a:	4298      	cmp	r0, r3
  406c3c:	dd04      	ble.n	406c48 <hexToBCD+0x130>
  406c3e:	f5a0 50bb 	sub.w	r0, r0, #5984	; 0x1760
  406c42:	3810      	subs	r0, #16
  406c44:	2206      	movs	r2, #6
  406c46:	e778      	b.n	406b3a <hexToBCD+0x22>
	else if(toConvert>4999){thousands=5;toConvert-=5000;}
  406c48:	f241 3387 	movw	r3, #4999	; 0x1387
  406c4c:	4298      	cmp	r0, r3
  406c4e:	dd04      	ble.n	406c5a <hexToBCD+0x142>
  406c50:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
  406c54:	3808      	subs	r0, #8
  406c56:	2205      	movs	r2, #5
  406c58:	e76f      	b.n	406b3a <hexToBCD+0x22>
	else if(toConvert>3999){thousands=4;toConvert-=4000;}
  406c5a:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
  406c5e:	db03      	blt.n	406c68 <hexToBCD+0x150>
  406c60:	f5a0 607a 	sub.w	r0, r0, #4000	; 0xfa0
  406c64:	2204      	movs	r2, #4
  406c66:	e768      	b.n	406b3a <hexToBCD+0x22>
	else if(toConvert>2999){thousands=3;toConvert-=3000;}
  406c68:	f640 33b7 	movw	r3, #2999	; 0xbb7
  406c6c:	4298      	cmp	r0, r3
  406c6e:	dd03      	ble.n	406c78 <hexToBCD+0x160>
  406c70:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
  406c74:	2203      	movs	r2, #3
  406c76:	e760      	b.n	406b3a <hexToBCD+0x22>
	else if(toConvert>1999){thousands=2;toConvert-=2000;}
  406c78:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
  406c7c:	db03      	blt.n	406c86 <hexToBCD+0x16e>
  406c7e:	f5a0 60fa 	sub.w	r0, r0, #2000	; 0x7d0
  406c82:	2202      	movs	r2, #2
  406c84:	e759      	b.n	406b3a <hexToBCD+0x22>
	else if(toConvert>999){thousands=1;toConvert-=1000;}
  406c86:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  406c8a:	db03      	blt.n	406c94 <hexToBCD+0x17c>
  406c8c:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
  406c90:	2201      	movs	r2, #1
  406c92:	e752      	b.n	406b3a <hexToBCD+0x22>
	char thousands=0;
  406c94:	2200      	movs	r2, #0
  406c96:	e750      	b.n	406b3a <hexToBCD+0x22>
	else if(toConvert>799){hundreds=8;toConvert-=800;}
  406c98:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
  406c9c:	db03      	blt.n	406ca6 <hexToBCD+0x18e>
  406c9e:	f5a0 7048 	sub.w	r0, r0, #800	; 0x320
  406ca2:	2308      	movs	r3, #8
  406ca4:	e750      	b.n	406b48 <hexToBCD+0x30>
	else if(toConvert>699){hundreds=7;toConvert-=700;}
  406ca6:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
  406caa:	db03      	blt.n	406cb4 <hexToBCD+0x19c>
  406cac:	f5a0 702f 	sub.w	r0, r0, #700	; 0x2bc
  406cb0:	2307      	movs	r3, #7
  406cb2:	e749      	b.n	406b48 <hexToBCD+0x30>
	else if(toConvert>599){hundreds=6;toConvert-=600;}
  406cb4:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
  406cb8:	db03      	blt.n	406cc2 <hexToBCD+0x1aa>
  406cba:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
  406cbe:	2306      	movs	r3, #6
  406cc0:	e742      	b.n	406b48 <hexToBCD+0x30>
	else if(toConvert>499){hundreds=5;toConvert-=500;}
  406cc2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  406cc6:	db03      	blt.n	406cd0 <hexToBCD+0x1b8>
  406cc8:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
  406ccc:	2305      	movs	r3, #5
  406cce:	e73b      	b.n	406b48 <hexToBCD+0x30>
	else if(toConvert>399){hundreds=4;toConvert-=400;}
  406cd0:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
  406cd4:	db03      	blt.n	406cde <hexToBCD+0x1c6>
  406cd6:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
  406cda:	2304      	movs	r3, #4
  406cdc:	e734      	b.n	406b48 <hexToBCD+0x30>
	else if(toConvert>299){hundreds=3;toConvert-=300;}
  406cde:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
  406ce2:	db03      	blt.n	406cec <hexToBCD+0x1d4>
  406ce4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
  406ce8:	2303      	movs	r3, #3
  406cea:	e72d      	b.n	406b48 <hexToBCD+0x30>
	else if(toConvert>199){hundreds=2;toConvert-=200;}
  406cec:	28c7      	cmp	r0, #199	; 0xc7
  406cee:	dd02      	ble.n	406cf6 <hexToBCD+0x1de>
  406cf0:	38c8      	subs	r0, #200	; 0xc8
  406cf2:	2302      	movs	r3, #2
  406cf4:	e728      	b.n	406b48 <hexToBCD+0x30>
	else if(toConvert>99){hundreds=1;toConvert-=100;}
  406cf6:	2863      	cmp	r0, #99	; 0x63
  406cf8:	dd02      	ble.n	406d00 <hexToBCD+0x1e8>
  406cfa:	3864      	subs	r0, #100	; 0x64
  406cfc:	2301      	movs	r3, #1
  406cfe:	e723      	b.n	406b48 <hexToBCD+0x30>
	char hundreds=0;
  406d00:	2300      	movs	r3, #0
  406d02:	e721      	b.n	406b48 <hexToBCD+0x30>
	if(toConvert>89){tens=9;toConvert-=90;}
  406d04:	385a      	subs	r0, #90	; 0x5a
  406d06:	2109      	movs	r1, #9

	return (tenThous*65536)+(thousands*4096)+(hundreds*256)+(tens*16)+toConvert;
  406d08:	eb02 1204 	add.w	r2, r2, r4, lsl #4
  406d0c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  406d10:	eb01 1303 	add.w	r3, r1, r3, lsl #4
}
  406d14:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  406d18:	f85d 4b04 	ldr.w	r4, [sp], #4
  406d1c:	4770      	bx	lr
	else if(toConvert>79){tens=8;toConvert-=80;}
  406d1e:	3850      	subs	r0, #80	; 0x50
  406d20:	2108      	movs	r1, #8
  406d22:	e7f1      	b.n	406d08 <hexToBCD+0x1f0>
	else if(toConvert>69){tens=7;toConvert-=70;}
  406d24:	3846      	subs	r0, #70	; 0x46
  406d26:	2107      	movs	r1, #7
  406d28:	e7ee      	b.n	406d08 <hexToBCD+0x1f0>
	else if(toConvert>59){tens=6;toConvert-=60;}
  406d2a:	383c      	subs	r0, #60	; 0x3c
  406d2c:	2106      	movs	r1, #6
  406d2e:	e7eb      	b.n	406d08 <hexToBCD+0x1f0>
	else if(toConvert>49){tens=5;toConvert-=50;}
  406d30:	3832      	subs	r0, #50	; 0x32
  406d32:	2105      	movs	r1, #5
  406d34:	e7e8      	b.n	406d08 <hexToBCD+0x1f0>
	else if(toConvert>39){tens=4;toConvert-=40;}
  406d36:	3828      	subs	r0, #40	; 0x28
  406d38:	2104      	movs	r1, #4
  406d3a:	e7e5      	b.n	406d08 <hexToBCD+0x1f0>
	else if(toConvert>29){tens=3;toConvert-=30;}
  406d3c:	381e      	subs	r0, #30
  406d3e:	2103      	movs	r1, #3
  406d40:	e7e2      	b.n	406d08 <hexToBCD+0x1f0>
	else if(toConvert>19){tens=2;toConvert-=20;}
  406d42:	3814      	subs	r0, #20
  406d44:	2102      	movs	r1, #2
  406d46:	e7df      	b.n	406d08 <hexToBCD+0x1f0>
	char tens=0;
  406d48:	2100      	movs	r1, #0
  406d4a:	e7dd      	b.n	406d08 <hexToBCD+0x1f0>
  406d4c:	00015f8f 	.word	0x00015f8f
  406d50:	0001387f 	.word	0x0001387f
  406d54:	0001116f 	.word	0x0001116f

00406d58 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  406d58:	b5f0      	push	{r4, r5, r6, r7, lr}
  406d5a:	b083      	sub	sp, #12
  406d5c:	4605      	mov	r5, r0
  406d5e:	460c      	mov	r4, r1
	uint32_t val = 0;
  406d60:	2300      	movs	r3, #0
  406d62:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406d64:	4b2a      	ldr	r3, [pc, #168]	; (406e10 <usart_serial_getchar+0xb8>)
  406d66:	4298      	cmp	r0, r3
  406d68:	d013      	beq.n	406d92 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  406d6a:	4b2a      	ldr	r3, [pc, #168]	; (406e14 <usart_serial_getchar+0xbc>)
  406d6c:	4298      	cmp	r0, r3
  406d6e:	d018      	beq.n	406da2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406d70:	4b29      	ldr	r3, [pc, #164]	; (406e18 <usart_serial_getchar+0xc0>)
  406d72:	4298      	cmp	r0, r3
  406d74:	d01d      	beq.n	406db2 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  406d76:	4b29      	ldr	r3, [pc, #164]	; (406e1c <usart_serial_getchar+0xc4>)
  406d78:	429d      	cmp	r5, r3
  406d7a:	d022      	beq.n	406dc2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406d7c:	4b28      	ldr	r3, [pc, #160]	; (406e20 <usart_serial_getchar+0xc8>)
  406d7e:	429d      	cmp	r5, r3
  406d80:	d027      	beq.n	406dd2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  406d82:	4b28      	ldr	r3, [pc, #160]	; (406e24 <usart_serial_getchar+0xcc>)
  406d84:	429d      	cmp	r5, r3
  406d86:	d02e      	beq.n	406de6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406d88:	4b27      	ldr	r3, [pc, #156]	; (406e28 <usart_serial_getchar+0xd0>)
  406d8a:	429d      	cmp	r5, r3
  406d8c:	d035      	beq.n	406dfa <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  406d8e:	b003      	add	sp, #12
  406d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  406d92:	461f      	mov	r7, r3
  406d94:	4e25      	ldr	r6, [pc, #148]	; (406e2c <usart_serial_getchar+0xd4>)
  406d96:	4621      	mov	r1, r4
  406d98:	4638      	mov	r0, r7
  406d9a:	47b0      	blx	r6
  406d9c:	2800      	cmp	r0, #0
  406d9e:	d1fa      	bne.n	406d96 <usart_serial_getchar+0x3e>
  406da0:	e7e9      	b.n	406d76 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  406da2:	461f      	mov	r7, r3
  406da4:	4e21      	ldr	r6, [pc, #132]	; (406e2c <usart_serial_getchar+0xd4>)
  406da6:	4621      	mov	r1, r4
  406da8:	4638      	mov	r0, r7
  406daa:	47b0      	blx	r6
  406dac:	2800      	cmp	r0, #0
  406dae:	d1fa      	bne.n	406da6 <usart_serial_getchar+0x4e>
  406db0:	e7e4      	b.n	406d7c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  406db2:	461f      	mov	r7, r3
  406db4:	4e1d      	ldr	r6, [pc, #116]	; (406e2c <usart_serial_getchar+0xd4>)
  406db6:	4621      	mov	r1, r4
  406db8:	4638      	mov	r0, r7
  406dba:	47b0      	blx	r6
  406dbc:	2800      	cmp	r0, #0
  406dbe:	d1fa      	bne.n	406db6 <usart_serial_getchar+0x5e>
  406dc0:	e7df      	b.n	406d82 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  406dc2:	461f      	mov	r7, r3
  406dc4:	4e19      	ldr	r6, [pc, #100]	; (406e2c <usart_serial_getchar+0xd4>)
  406dc6:	4621      	mov	r1, r4
  406dc8:	4638      	mov	r0, r7
  406dca:	47b0      	blx	r6
  406dcc:	2800      	cmp	r0, #0
  406dce:	d1fa      	bne.n	406dc6 <usart_serial_getchar+0x6e>
  406dd0:	e7da      	b.n	406d88 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  406dd2:	461e      	mov	r6, r3
  406dd4:	4d16      	ldr	r5, [pc, #88]	; (406e30 <usart_serial_getchar+0xd8>)
  406dd6:	a901      	add	r1, sp, #4
  406dd8:	4630      	mov	r0, r6
  406dda:	47a8      	blx	r5
  406ddc:	2800      	cmp	r0, #0
  406dde:	d1fa      	bne.n	406dd6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  406de0:	9b01      	ldr	r3, [sp, #4]
  406de2:	7023      	strb	r3, [r4, #0]
  406de4:	e7d3      	b.n	406d8e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  406de6:	461e      	mov	r6, r3
  406de8:	4d11      	ldr	r5, [pc, #68]	; (406e30 <usart_serial_getchar+0xd8>)
  406dea:	a901      	add	r1, sp, #4
  406dec:	4630      	mov	r0, r6
  406dee:	47a8      	blx	r5
  406df0:	2800      	cmp	r0, #0
  406df2:	d1fa      	bne.n	406dea <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  406df4:	9b01      	ldr	r3, [sp, #4]
  406df6:	7023      	strb	r3, [r4, #0]
  406df8:	e7c9      	b.n	406d8e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  406dfa:	461e      	mov	r6, r3
  406dfc:	4d0c      	ldr	r5, [pc, #48]	; (406e30 <usart_serial_getchar+0xd8>)
  406dfe:	a901      	add	r1, sp, #4
  406e00:	4630      	mov	r0, r6
  406e02:	47a8      	blx	r5
  406e04:	2800      	cmp	r0, #0
  406e06:	d1fa      	bne.n	406dfe <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  406e08:	9b01      	ldr	r3, [sp, #4]
  406e0a:	7023      	strb	r3, [r4, #0]
}
  406e0c:	e7bf      	b.n	406d8e <usart_serial_getchar+0x36>
  406e0e:	bf00      	nop
  406e10:	400e0800 	.word	0x400e0800
  406e14:	400e0a00 	.word	0x400e0a00
  406e18:	400e1a00 	.word	0x400e1a00
  406e1c:	400e1c00 	.word	0x400e1c00
  406e20:	40024000 	.word	0x40024000
  406e24:	40028000 	.word	0x40028000
  406e28:	4002c000 	.word	0x4002c000
  406e2c:	00402929 	.word	0x00402929
  406e30:	00402769 	.word	0x00402769

00406e34 <usart_serial_putchar>:
{
  406e34:	b570      	push	{r4, r5, r6, lr}
  406e36:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  406e38:	4b2a      	ldr	r3, [pc, #168]	; (406ee4 <usart_serial_putchar+0xb0>)
  406e3a:	4298      	cmp	r0, r3
  406e3c:	d013      	beq.n	406e66 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  406e3e:	4b2a      	ldr	r3, [pc, #168]	; (406ee8 <usart_serial_putchar+0xb4>)
  406e40:	4298      	cmp	r0, r3
  406e42:	d019      	beq.n	406e78 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  406e44:	4b29      	ldr	r3, [pc, #164]	; (406eec <usart_serial_putchar+0xb8>)
  406e46:	4298      	cmp	r0, r3
  406e48:	d01f      	beq.n	406e8a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  406e4a:	4b29      	ldr	r3, [pc, #164]	; (406ef0 <usart_serial_putchar+0xbc>)
  406e4c:	4298      	cmp	r0, r3
  406e4e:	d025      	beq.n	406e9c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  406e50:	4b28      	ldr	r3, [pc, #160]	; (406ef4 <usart_serial_putchar+0xc0>)
  406e52:	4298      	cmp	r0, r3
  406e54:	d02b      	beq.n	406eae <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  406e56:	4b28      	ldr	r3, [pc, #160]	; (406ef8 <usart_serial_putchar+0xc4>)
  406e58:	4298      	cmp	r0, r3
  406e5a:	d031      	beq.n	406ec0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  406e5c:	4b27      	ldr	r3, [pc, #156]	; (406efc <usart_serial_putchar+0xc8>)
  406e5e:	4298      	cmp	r0, r3
  406e60:	d037      	beq.n	406ed2 <usart_serial_putchar+0x9e>
	return 0;
  406e62:	2000      	movs	r0, #0
}
  406e64:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406e66:	461e      	mov	r6, r3
  406e68:	4d25      	ldr	r5, [pc, #148]	; (406f00 <usart_serial_putchar+0xcc>)
  406e6a:	4621      	mov	r1, r4
  406e6c:	4630      	mov	r0, r6
  406e6e:	47a8      	blx	r5
  406e70:	2800      	cmp	r0, #0
  406e72:	d1fa      	bne.n	406e6a <usart_serial_putchar+0x36>
		return 1;
  406e74:	2001      	movs	r0, #1
  406e76:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406e78:	461e      	mov	r6, r3
  406e7a:	4d21      	ldr	r5, [pc, #132]	; (406f00 <usart_serial_putchar+0xcc>)
  406e7c:	4621      	mov	r1, r4
  406e7e:	4630      	mov	r0, r6
  406e80:	47a8      	blx	r5
  406e82:	2800      	cmp	r0, #0
  406e84:	d1fa      	bne.n	406e7c <usart_serial_putchar+0x48>
		return 1;
  406e86:	2001      	movs	r0, #1
  406e88:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406e8a:	461e      	mov	r6, r3
  406e8c:	4d1c      	ldr	r5, [pc, #112]	; (406f00 <usart_serial_putchar+0xcc>)
  406e8e:	4621      	mov	r1, r4
  406e90:	4630      	mov	r0, r6
  406e92:	47a8      	blx	r5
  406e94:	2800      	cmp	r0, #0
  406e96:	d1fa      	bne.n	406e8e <usart_serial_putchar+0x5a>
		return 1;
  406e98:	2001      	movs	r0, #1
  406e9a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406e9c:	461e      	mov	r6, r3
  406e9e:	4d18      	ldr	r5, [pc, #96]	; (406f00 <usart_serial_putchar+0xcc>)
  406ea0:	4621      	mov	r1, r4
  406ea2:	4630      	mov	r0, r6
  406ea4:	47a8      	blx	r5
  406ea6:	2800      	cmp	r0, #0
  406ea8:	d1fa      	bne.n	406ea0 <usart_serial_putchar+0x6c>
		return 1;
  406eaa:	2001      	movs	r0, #1
  406eac:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406eae:	461e      	mov	r6, r3
  406eb0:	4d14      	ldr	r5, [pc, #80]	; (406f04 <usart_serial_putchar+0xd0>)
  406eb2:	4621      	mov	r1, r4
  406eb4:	4630      	mov	r0, r6
  406eb6:	47a8      	blx	r5
  406eb8:	2800      	cmp	r0, #0
  406eba:	d1fa      	bne.n	406eb2 <usart_serial_putchar+0x7e>
		return 1;
  406ebc:	2001      	movs	r0, #1
  406ebe:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406ec0:	461e      	mov	r6, r3
  406ec2:	4d10      	ldr	r5, [pc, #64]	; (406f04 <usart_serial_putchar+0xd0>)
  406ec4:	4621      	mov	r1, r4
  406ec6:	4630      	mov	r0, r6
  406ec8:	47a8      	blx	r5
  406eca:	2800      	cmp	r0, #0
  406ecc:	d1fa      	bne.n	406ec4 <usart_serial_putchar+0x90>
		return 1;
  406ece:	2001      	movs	r0, #1
  406ed0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406ed2:	461e      	mov	r6, r3
  406ed4:	4d0b      	ldr	r5, [pc, #44]	; (406f04 <usart_serial_putchar+0xd0>)
  406ed6:	4621      	mov	r1, r4
  406ed8:	4630      	mov	r0, r6
  406eda:	47a8      	blx	r5
  406edc:	2800      	cmp	r0, #0
  406ede:	d1fa      	bne.n	406ed6 <usart_serial_putchar+0xa2>
		return 1;
  406ee0:	2001      	movs	r0, #1
  406ee2:	bd70      	pop	{r4, r5, r6, pc}
  406ee4:	400e0800 	.word	0x400e0800
  406ee8:	400e0a00 	.word	0x400e0a00
  406eec:	400e1a00 	.word	0x400e1a00
  406ef0:	400e1c00 	.word	0x400e1c00
  406ef4:	40024000 	.word	0x40024000
  406ef8:	40028000 	.word	0x40028000
  406efc:	4002c000 	.word	0x4002c000
  406f00:	00402917 	.word	0x00402917
  406f04:	00402753 	.word	0x00402753

00406f08 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
  406f08:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
  406f0a:	b672      	cpsid	i
  406f0c:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
  406f10:	2200      	movs	r2, #0
  406f12:	4b0f      	ldr	r3, [pc, #60]	; (406f50 <sleepmgr_enter_sleep+0x48>)
  406f14:	701a      	strb	r2, [r3, #0]
	while (!(*lock_ptr)) {
  406f16:	4b0f      	ldr	r3, [pc, #60]	; (406f54 <sleepmgr_enter_sleep+0x4c>)
  406f18:	781b      	ldrb	r3, [r3, #0]
  406f1a:	b943      	cbnz	r3, 406f2e <sleepmgr_enter_sleep+0x26>
  406f1c:	4b0d      	ldr	r3, [pc, #52]	; (406f54 <sleepmgr_enter_sleep+0x4c>)
  406f1e:	4610      	mov	r0, r2
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
  406f20:	3001      	adds	r0, #1
  406f22:	b2c0      	uxtb	r0, r0
	while (!(*lock_ptr)) {
  406f24:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  406f28:	2a00      	cmp	r2, #0
  406f2a:	d0f9      	beq.n	406f20 <sleepmgr_enter_sleep+0x18>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
  406f2c:	b930      	cbnz	r0, 406f3c <sleepmgr_enter_sleep+0x34>
		cpu_irq_enable();
  406f2e:	2201      	movs	r2, #1
  406f30:	4b07      	ldr	r3, [pc, #28]	; (406f50 <sleepmgr_enter_sleep+0x48>)
  406f32:	701a      	strb	r2, [r3, #0]
  406f34:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  406f38:	b662      	cpsie	i
  406f3a:	bd08      	pop	{r3, pc}
  __ASM volatile ("cpsid i" : : : "memory");
  406f3c:	b672      	cpsid	i
  406f3e:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
  406f42:	2200      	movs	r2, #0
  406f44:	4b02      	ldr	r3, [pc, #8]	; (406f50 <sleepmgr_enter_sleep+0x48>)
  406f46:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
  406f48:	4b03      	ldr	r3, [pc, #12]	; (406f58 <sleepmgr_enter_sleep+0x50>)
  406f4a:	4798      	blx	r3
  406f4c:	bd08      	pop	{r3, pc}
  406f4e:	bf00      	nop
  406f50:	20400177 	.word	0x20400177
  406f54:	20401114 	.word	0x20401114
  406f58:	00403611 	.word	0x00403611

00406f5c <main_vendor_int_out_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  406f5c:	b100      	cbz	r0, 406f60 <main_vendor_int_out_received+0x4>
  406f5e:	4770      	bx	lr
{
  406f60:	b510      	push	{r4, lr}
  406f62:	b084      	sub	sp, #16
	udi_vendor_interrupt_in_run(
  406f64:	4c0a      	ldr	r4, [pc, #40]	; (406f90 <main_vendor_int_out_received+0x34>)
  406f66:	4a0b      	ldr	r2, [pc, #44]	; (406f94 <main_vendor_int_out_received+0x38>)
  406f68:	4620      	mov	r0, r4
  406f6a:	4b0b      	ldr	r3, [pc, #44]	; (406f98 <main_vendor_int_out_received+0x3c>)
  406f6c:	4798      	blx	r3
	printf("OUT: %d %d %d %d %d %d %d\r\n",main_buf_loopback[0],main_buf_loopback[1],main_buf_loopback[2],main_buf_loopback[3],main_buf_loopback[4],main_buf_loopback[5],main_buf_loopback[6]);
  406f6e:	78a3      	ldrb	r3, [r4, #2]
  406f70:	7862      	ldrb	r2, [r4, #1]
  406f72:	7821      	ldrb	r1, [r4, #0]
  406f74:	79a0      	ldrb	r0, [r4, #6]
  406f76:	9003      	str	r0, [sp, #12]
  406f78:	7960      	ldrb	r0, [r4, #5]
  406f7a:	9002      	str	r0, [sp, #8]
  406f7c:	7920      	ldrb	r0, [r4, #4]
  406f7e:	9001      	str	r0, [sp, #4]
  406f80:	78e0      	ldrb	r0, [r4, #3]
  406f82:	9000      	str	r0, [sp, #0]
  406f84:	4805      	ldr	r0, [pc, #20]	; (406f9c <main_vendor_int_out_received+0x40>)
  406f86:	4c06      	ldr	r4, [pc, #24]	; (406fa0 <main_vendor_int_out_received+0x44>)
  406f88:	47a0      	blx	r4
}
  406f8a:	b004      	add	sp, #16
  406f8c:	bd10      	pop	{r4, pc}
  406f8e:	bf00      	nop
  406f90:	20400ed4 	.word	0x20400ed4
  406f94:	0040ae29 	.word	0x0040ae29
  406f98:	00402a61 	.word	0x00402a61
  406f9c:	00410908 	.word	0x00410908
  406fa0:	0040ce59 	.word	0x0040ce59

00406fa4 <main_vendor_bulk_in_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  406fa4:	b100      	cbz	r0, 406fa8 <main_vendor_bulk_in_received+0x4>
  406fa6:	4770      	bx	lr
{
  406fa8:	b510      	push	{r4, lr}
  406faa:	b086      	sub	sp, #24
	udi_vendor_bulk_out_run(
  406fac:	4c0b      	ldr	r4, [pc, #44]	; (406fdc <main_vendor_bulk_in_received+0x38>)
  406fae:	4a0c      	ldr	r2, [pc, #48]	; (406fe0 <main_vendor_bulk_in_received+0x3c>)
  406fb0:	2114      	movs	r1, #20
  406fb2:	4620      	mov	r0, r4
  406fb4:	4b0b      	ldr	r3, [pc, #44]	; (406fe4 <main_vendor_bulk_in_received+0x40>)
  406fb6:	4798      	blx	r3
	 printf("BULK OUT RCVD: %x %x %x %x %x %x %x %x\r\n",crapBuf[0],crapBuf[1],crapBuf[2],crapBuf[3],crapBuf[4],crapBuf[5],crapBuf[6],crapBuf[7]);
  406fb8:	78a3      	ldrb	r3, [r4, #2]
  406fba:	7862      	ldrb	r2, [r4, #1]
  406fbc:	7821      	ldrb	r1, [r4, #0]
  406fbe:	79e0      	ldrb	r0, [r4, #7]
  406fc0:	9004      	str	r0, [sp, #16]
  406fc2:	79a0      	ldrb	r0, [r4, #6]
  406fc4:	9003      	str	r0, [sp, #12]
  406fc6:	7960      	ldrb	r0, [r4, #5]
  406fc8:	9002      	str	r0, [sp, #8]
  406fca:	7920      	ldrb	r0, [r4, #4]
  406fcc:	9001      	str	r0, [sp, #4]
  406fce:	78e0      	ldrb	r0, [r4, #3]
  406fd0:	9000      	str	r0, [sp, #0]
  406fd2:	4805      	ldr	r0, [pc, #20]	; (406fe8 <main_vendor_bulk_in_received+0x44>)
  406fd4:	4c05      	ldr	r4, [pc, #20]	; (406fec <main_vendor_bulk_in_received+0x48>)
  406fd6:	47a0      	blx	r4
}
  406fd8:	b006      	add	sp, #24
  406fda:	bd10      	pop	{r4, pc}
  406fdc:	204011cc 	.word	0x204011cc
  406fe0:	00406ff1 	.word	0x00406ff1
  406fe4:	00402ab5 	.word	0x00402ab5
  406fe8:	0041084c 	.word	0x0041084c
  406fec:	0040ce59 	.word	0x0040ce59

00406ff0 <main_vendor_bulk_out_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  406ff0:	2800      	cmp	r0, #0
  406ff2:	d136      	bne.n	407062 <main_vendor_bulk_out_received+0x72>
{
  406ff4:	b510      	push	{r4, lr}
  406ff6:	b086      	sub	sp, #24
	if(g_imageSize==0){
  406ff8:	4b1a      	ldr	r3, [pc, #104]	; (407064 <main_vendor_bulk_out_received+0x74>)
  406ffa:	781b      	ldrb	r3, [r3, #0]
  406ffc:	b1cb      	cbz	r3, 407032 <main_vendor_bulk_out_received+0x42>
	udi_vendor_bulk_in_run(
  406ffe:	4a1a      	ldr	r2, [pc, #104]	; (407068 <main_vendor_bulk_out_received+0x78>)
  407000:	491a      	ldr	r1, [pc, #104]	; (40706c <main_vendor_bulk_out_received+0x7c>)
  407002:	4b1b      	ldr	r3, [pc, #108]	; (407070 <main_vendor_bulk_out_received+0x80>)
  407004:	6818      	ldr	r0, [r3, #0]
  407006:	4b1b      	ldr	r3, [pc, #108]	; (407074 <main_vendor_bulk_out_received+0x84>)
  407008:	4798      	blx	r3
			printf("BULK IN DATA SENT 888: %x %x %x %x %x %x %x %x\r\n",picBuff[0],picBuff[1],picBuff[2],picBuff[3],picBuff[4],picBuff[5],picBuff[6],picBuff[7]);
  40700a:	4b1b      	ldr	r3, [pc, #108]	; (407078 <main_vendor_bulk_out_received+0x88>)
  40700c:	6818      	ldr	r0, [r3, #0]
  40700e:	7883      	ldrb	r3, [r0, #2]
  407010:	7842      	ldrb	r2, [r0, #1]
  407012:	7801      	ldrb	r1, [r0, #0]
  407014:	79c4      	ldrb	r4, [r0, #7]
  407016:	9404      	str	r4, [sp, #16]
  407018:	7984      	ldrb	r4, [r0, #6]
  40701a:	9403      	str	r4, [sp, #12]
  40701c:	7944      	ldrb	r4, [r0, #5]
  40701e:	9402      	str	r4, [sp, #8]
  407020:	7904      	ldrb	r4, [r0, #4]
  407022:	9401      	str	r4, [sp, #4]
  407024:	78c0      	ldrb	r0, [r0, #3]
  407026:	9000      	str	r0, [sp, #0]
  407028:	4814      	ldr	r0, [pc, #80]	; (40707c <main_vendor_bulk_out_received+0x8c>)
  40702a:	4c15      	ldr	r4, [pc, #84]	; (407080 <main_vendor_bulk_out_received+0x90>)
  40702c:	47a0      	blx	r4
}
  40702e:	b006      	add	sp, #24
  407030:	bd10      	pop	{r4, pc}
	udi_vendor_bulk_in_run(
  407032:	4c11      	ldr	r4, [pc, #68]	; (407078 <main_vendor_bulk_out_received+0x88>)
  407034:	4a0c      	ldr	r2, [pc, #48]	; (407068 <main_vendor_bulk_out_received+0x78>)
  407036:	4913      	ldr	r1, [pc, #76]	; (407084 <main_vendor_bulk_out_received+0x94>)
  407038:	6820      	ldr	r0, [r4, #0]
  40703a:	4b0e      	ldr	r3, [pc, #56]	; (407074 <main_vendor_bulk_out_received+0x84>)
  40703c:	4798      	blx	r3
 	 printf("BULK IN DATA SENT 565: %x %x %x %x %x %x %x %x\r\n",picBuff[0],picBuff[1],picBuff[2],picBuff[3],picBuff[4],picBuff[5],picBuff[6],picBuff[7]);
  40703e:	6820      	ldr	r0, [r4, #0]
  407040:	7883      	ldrb	r3, [r0, #2]
  407042:	7842      	ldrb	r2, [r0, #1]
  407044:	7801      	ldrb	r1, [r0, #0]
  407046:	79c4      	ldrb	r4, [r0, #7]
  407048:	9404      	str	r4, [sp, #16]
  40704a:	7984      	ldrb	r4, [r0, #6]
  40704c:	9403      	str	r4, [sp, #12]
  40704e:	7944      	ldrb	r4, [r0, #5]
  407050:	9402      	str	r4, [sp, #8]
  407052:	7904      	ldrb	r4, [r0, #4]
  407054:	9401      	str	r4, [sp, #4]
  407056:	78c0      	ldrb	r0, [r0, #3]
  407058:	9000      	str	r0, [sp, #0]
  40705a:	480b      	ldr	r0, [pc, #44]	; (407088 <main_vendor_bulk_out_received+0x98>)
  40705c:	4c08      	ldr	r4, [pc, #32]	; (407080 <main_vendor_bulk_out_received+0x90>)
  40705e:	47a0      	blx	r4
  407060:	e7e5      	b.n	40702e <main_vendor_bulk_out_received+0x3e>
  407062:	4770      	bx	lr
  407064:	20400ecc 	.word	0x20400ecc
  407068:	00406fa5 	.word	0x00406fa5
  40706c:	0057e400 	.word	0x0057e400
  407070:	20400180 	.word	0x20400180
  407074:	00402a99 	.word	0x00402a99
  407078:	2040017c 	.word	0x2040017c
  40707c:	004108ac 	.word	0x004108ac
  407080:	0040ce59 	.word	0x0040ce59
  407084:	003a9800 	.word	0x003a9800
  407088:	00410878 	.word	0x00410878

0040708c <main_vendor_iso_in_received>:
{
  40708c:	b508      	push	{r3, lr}
	ui_loop_back_state(false);
  40708e:	2000      	movs	r0, #0
  407090:	4b01      	ldr	r3, [pc, #4]	; (407098 <main_vendor_iso_in_received+0xc>)
  407092:	4798      	blx	r3
  407094:	bd08      	pop	{r3, pc}
  407096:	bf00      	nop
  407098:	00402941 	.word	0x00402941

0040709c <main_vendor_iso_out_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  40709c:	bb20      	cbnz	r0, 4070e8 <main_vendor_iso_out_received+0x4c>
{
  40709e:	b510      	push	{r4, lr}
  4070a0:	460c      	mov	r4, r1
	if (nb_transfered) {
  4070a2:	b9a1      	cbnz	r1, 4070ce <main_vendor_iso_out_received+0x32>
	main_buf_iso_sel = main_buf_iso_sel? 0:1;
  4070a4:	4a11      	ldr	r2, [pc, #68]	; (4070ec <main_vendor_iso_out_received+0x50>)
  4070a6:	7813      	ldrb	r3, [r2, #0]
  4070a8:	fab3 f383 	clz	r3, r3
  4070ac:	095b      	lsrs	r3, r3, #5
  4070ae:	7013      	strb	r3, [r2, #0]
	buf_ptr = &main_buf_loopback[ main_buf_iso_sel
  4070b0:	4c0f      	ldr	r4, [pc, #60]	; (4070f0 <main_vendor_iso_out_received+0x54>)
  4070b2:	eb04 2403 	add.w	r4, r4, r3, lsl #8
			udd_is_high_speed()?
  4070b6:	4b0f      	ldr	r3, [pc, #60]	; (4070f4 <main_vendor_iso_out_received+0x58>)
  4070b8:	4798      	blx	r3
	udi_vendor_iso_out_run(
  4070ba:	2800      	cmp	r0, #0
  4070bc:	4a0e      	ldr	r2, [pc, #56]	; (4070f8 <main_vendor_iso_out_received+0x5c>)
  4070be:	bf14      	ite	ne
  4070c0:	2140      	movne	r1, #64	; 0x40
  4070c2:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4070c6:	4620      	mov	r0, r4
  4070c8:	4b0c      	ldr	r3, [pc, #48]	; (4070fc <main_vendor_iso_out_received+0x60>)
  4070ca:	4798      	blx	r3
  4070cc:	bd10      	pop	{r4, pc}
		ui_loop_back_state(true);
  4070ce:	2001      	movs	r0, #1
  4070d0:	4b0b      	ldr	r3, [pc, #44]	; (407100 <main_vendor_iso_out_received+0x64>)
  4070d2:	4798      	blx	r3
				*(sizeof(main_buf_loopback)/2) ];
  4070d4:	4b05      	ldr	r3, [pc, #20]	; (4070ec <main_vendor_iso_out_received+0x50>)
  4070d6:	7818      	ldrb	r0, [r3, #0]
		udi_vendor_iso_in_run(
  4070d8:	4a0a      	ldr	r2, [pc, #40]	; (407104 <main_vendor_iso_out_received+0x68>)
  4070da:	4621      	mov	r1, r4
  4070dc:	4b04      	ldr	r3, [pc, #16]	; (4070f0 <main_vendor_iso_out_received+0x54>)
  4070de:	eb03 2000 	add.w	r0, r3, r0, lsl #8
  4070e2:	4b09      	ldr	r3, [pc, #36]	; (407108 <main_vendor_iso_out_received+0x6c>)
  4070e4:	4798      	blx	r3
  4070e6:	e7dd      	b.n	4070a4 <main_vendor_iso_out_received+0x8>
  4070e8:	4770      	bx	lr
  4070ea:	bf00      	nop
  4070ec:	20400ed1 	.word	0x20400ed1
  4070f0:	20400ed4 	.word	0x20400ed4
  4070f4:	00404369 	.word	0x00404369
  4070f8:	0040709d 	.word	0x0040709d
  4070fc:	00402aed 	.word	0x00402aed
  407100:	00402941 	.word	0x00402941
  407104:	0040708d 	.word	0x0040708d
  407108:	00402ad1 	.word	0x00402ad1

0040710c <configure_console>:
{
  40710c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407110:	b086      	sub	sp, #24
		base->PIO_PUDR = mask;
  407112:	4b25      	ldr	r3, [pc, #148]	; (4071a8 <configure_console+0x9c>)
  407114:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  407118:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40711a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40711e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407120:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407126:	6f19      	ldr	r1, [r3, #112]	; 0x70
  407128:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  40712c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40712e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  407130:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  407134:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407136:	605a      	str	r2, [r3, #4]
  407138:	202d      	movs	r0, #45	; 0x2d
  40713a:	4d1c      	ldr	r5, [pc, #112]	; (4071ac <configure_console+0xa0>)
  40713c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40713e:	4c1c      	ldr	r4, [pc, #112]	; (4071b0 <configure_console+0xa4>)
  407140:	4b1c      	ldr	r3, [pc, #112]	; (4071b4 <configure_console+0xa8>)
  407142:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  407144:	4a1c      	ldr	r2, [pc, #112]	; (4071b8 <configure_console+0xac>)
  407146:	4b1d      	ldr	r3, [pc, #116]	; (4071bc <configure_console+0xb0>)
  407148:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40714a:	4a1d      	ldr	r2, [pc, #116]	; (4071c0 <configure_console+0xb4>)
  40714c:	4b1d      	ldr	r3, [pc, #116]	; (4071c4 <configure_console+0xb8>)
  40714e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  407150:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4071d0 <configure_console+0xc4>
  407154:	f8cd 8000 	str.w	r8, [sp]
	uart_settings.ul_baudrate = opt->baudrate;
  407158:	f44f 5716 	mov.w	r7, #9600	; 0x2580
  40715c:	9701      	str	r7, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  40715e:	f44f 6600 	mov.w	r6, #2048	; 0x800
  407162:	9602      	str	r6, [sp, #8]
  407164:	202d      	movs	r0, #45	; 0x2d
  407166:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  407168:	4669      	mov	r1, sp
  40716a:	4620      	mov	r0, r4
  40716c:	4d16      	ldr	r5, [pc, #88]	; (4071c8 <configure_console+0xbc>)
  40716e:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  407170:	f8df a060 	ldr.w	sl, [pc, #96]	; 4071d4 <configure_console+0xc8>
  407174:	f8da 3000 	ldr.w	r3, [sl]
  407178:	2100      	movs	r1, #0
  40717a:	6898      	ldr	r0, [r3, #8]
  40717c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 4071d8 <configure_console+0xcc>
  407180:	47c8      	blx	r9
	setbuf(stdin, NULL);
  407182:	f8da 3000 	ldr.w	r3, [sl]
  407186:	2100      	movs	r1, #0
  407188:	6858      	ldr	r0, [r3, #4]
  40718a:	47c8      	blx	r9
   uart_enable_tx(CONF_UART);
  40718c:	4620      	mov	r0, r4
  40718e:	4b0f      	ldr	r3, [pc, #60]	; (4071cc <configure_console+0xc0>)
  407190:	4798      	blx	r3
   uart_settings.ul_mck = sysclk_get_peripheral_hz();
  407192:	f8cd 800c 	str.w	r8, [sp, #12]
   uart_settings.ul_baudrate = CONF_UART_BAUDRATE;
  407196:	9704      	str	r7, [sp, #16]
   uart_settings.ul_mode = CONF_UART_PARITY;
  407198:	9605      	str	r6, [sp, #20]
   uart_init(CONF_UART, &uart_settings);
  40719a:	a903      	add	r1, sp, #12
  40719c:	4620      	mov	r0, r4
  40719e:	47a8      	blx	r5
}
  4071a0:	b006      	add	sp, #24
  4071a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4071a6:	bf00      	nop
  4071a8:	400e1400 	.word	0x400e1400
  4071ac:	004035a1 	.word	0x004035a1
  4071b0:	400e1c00 	.word	0x400e1c00
  4071b4:	20401110 	.word	0x20401110
  4071b8:	00406e35 	.word	0x00406e35
  4071bc:	2040110c 	.word	0x2040110c
  4071c0:	00406d59 	.word	0x00406d59
  4071c4:	20401108 	.word	0x20401108
  4071c8:	004028e1 	.word	0x004028e1
  4071cc:	00402911 	.word	0x00402911
  4071d0:	08f0d180 	.word	0x08f0d180
  4071d4:	20400184 	.word	0x20400184
  4071d8:	0040d051 	.word	0x0040d051

004071dc <ISI_Handler>:
	status = ISI->ISI_SR;
  4071dc:	4b0b      	ldr	r3, [pc, #44]	; (40720c <ISI_Handler+0x30>)
  4071de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	imr = ISI->ISI_IMR;
  4071e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	if ((status & ISI_SR_CXFR_DONE) && (imr & ISI_IMR_CXFR_DONE)) {
  4071e2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
  4071e6:	d00f      	beq.n	407208 <ISI_Handler+0x2c>
  4071e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4071ec:	d00c      	beq.n	407208 <ISI_Handler+0x2c>
		ISI->ISI_DMA_CHDR |= ISI_DMA_CHDR_C_CH_DIS;
  4071ee:	4b07      	ldr	r3, [pc, #28]	; (40720c <ISI_Handler+0x30>)
  4071f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4071f2:	f042 0202 	orr.w	r2, r2, #2
  4071f6:	63da      	str	r2, [r3, #60]	; 0x3c
		ISI->ISI_IDR = ISI_IDR_CXFR_DONE;
  4071f8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4071fc:	6319      	str	r1, [r3, #48]	; 0x30
		ISI->ISI_DMA_CHER |= ISI_DMA_CHER_C_CH_EN;
  4071fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407200:	f042 0202 	orr.w	r2, r2, #2
  407204:	639a      	str	r2, [r3, #56]	; 0x38
		ISI->ISI_IER = ISI_IER_CXFR_DONE;
  407206:	62d9      	str	r1, [r3, #44]	; 0x2c
  407208:	4770      	bx	lr
  40720a:	bf00      	nop
  40720c:	4004c000 	.word	0x4004c000

00407210 <main_suspend_action>:
{
  407210:	b508      	push	{r3, lr}
	ui_powerdown();
  407212:	4b03      	ldr	r3, [pc, #12]	; (407220 <main_suspend_action+0x10>)
  407214:	4798      	blx	r3
	g_usbFlagA=1;
  407216:	2201      	movs	r2, #1
  407218:	4b02      	ldr	r3, [pc, #8]	; (407224 <main_suspend_action+0x14>)
  40721a:	701a      	strb	r2, [r3, #0]
  40721c:	bd08      	pop	{r3, pc}
  40721e:	bf00      	nop
  407220:	0040293d 	.word	0x0040293d
  407224:	20400ecd 	.word	0x20400ecd

00407228 <main_resume_action>:
{
  407228:	b508      	push	{r3, lr}
	ui_wakeup();
  40722a:	4b03      	ldr	r3, [pc, #12]	; (407238 <main_resume_action+0x10>)
  40722c:	4798      	blx	r3
	g_usbFlagB=2;
  40722e:	2202      	movs	r2, #2
  407230:	4b02      	ldr	r3, [pc, #8]	; (40723c <main_resume_action+0x14>)
  407232:	701a      	strb	r2, [r3, #0]
  407234:	bd08      	pop	{r3, pc}
  407236:	bf00      	nop
  407238:	0040293f 	.word	0x0040293f
  40723c:	20400ece 	.word	0x20400ece

00407240 <main_sof_action>:
{
  407240:	b508      	push	{r3, lr}
	if (!main_b_vendor_enable)
  407242:	4b04      	ldr	r3, [pc, #16]	; (407254 <main_sof_action+0x14>)
  407244:	781b      	ldrb	r3, [r3, #0]
  407246:	b903      	cbnz	r3, 40724a <main_sof_action+0xa>
  407248:	bd08      	pop	{r3, pc}
	ui_process(udd_get_frame_number());
  40724a:	4b03      	ldr	r3, [pc, #12]	; (407258 <main_sof_action+0x18>)
  40724c:	4798      	blx	r3
  40724e:	4b03      	ldr	r3, [pc, #12]	; (40725c <main_sof_action+0x1c>)
  407250:	4798      	blx	r3
  407252:	e7f9      	b.n	407248 <main_sof_action+0x8>
  407254:	20400ed0 	.word	0x20400ed0
  407258:	004043a5 	.word	0x004043a5
  40725c:	00402943 	.word	0x00402943

00407260 <main_vendor_disable>:
	main_b_vendor_enable = false;
  407260:	2200      	movs	r2, #0
  407262:	4b01      	ldr	r3, [pc, #4]	; (407268 <main_vendor_disable+0x8>)
  407264:	701a      	strb	r2, [r3, #0]
  407266:	4770      	bx	lr
  407268:	20400ed0 	.word	0x20400ed0

0040726c <main_setup_out_received>:
	udd_g_ctrlreq.payload = main_buf_loopback;
  40726c:	4b05      	ldr	r3, [pc, #20]	; (407284 <main_setup_out_received+0x18>)
  40726e:	4a06      	ldr	r2, [pc, #24]	; (407288 <main_setup_out_received+0x1c>)
  407270:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = min(
  407272:	88da      	ldrh	r2, [r3, #6]
  407274:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407278:	bf28      	it	cs
  40727a:	f44f 7200 	movcs.w	r2, #512	; 0x200
  40727e:	819a      	strh	r2, [r3, #12]
}
  407280:	2001      	movs	r0, #1
  407282:	4770      	bx	lr
  407284:	2040111c 	.word	0x2040111c
  407288:	20400ed4 	.word	0x20400ed4

0040728c <main_setup_in_received>:
	udd_g_ctrlreq.payload = main_buf_loopback;
  40728c:	4b05      	ldr	r3, [pc, #20]	; (4072a4 <main_setup_in_received+0x18>)
  40728e:	4a06      	ldr	r2, [pc, #24]	; (4072a8 <main_setup_in_received+0x1c>)
  407290:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size =
  407292:	88da      	ldrh	r2, [r3, #6]
  407294:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407298:	bf28      	it	cs
  40729a:	f44f 7200 	movcs.w	r2, #512	; 0x200
  40729e:	819a      	strh	r2, [r3, #12]
}
  4072a0:	2001      	movs	r0, #1
  4072a2:	4770      	bx	lr
  4072a4:	2040111c 	.word	0x2040111c
  4072a8:	20400ed4 	.word	0x20400ed4

004072ac <receiveUSBcamConfig>:
void receiveUSBcamConfig(void){
  4072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4072ae:	4d06      	ldr	r5, [pc, #24]	; (4072c8 <receiveUSBcamConfig+0x1c>)
  4072b0:	1e6c      	subs	r4, r5, #1
  4072b2:	3577      	adds	r5, #119	; 0x77
		printf("%x",main_buf_loopback[iters]);
  4072b4:	4f05      	ldr	r7, [pc, #20]	; (4072cc <receiveUSBcamConfig+0x20>)
  4072b6:	4e06      	ldr	r6, [pc, #24]	; (4072d0 <receiveUSBcamConfig+0x24>)
  4072b8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  4072bc:	4638      	mov	r0, r7
  4072be:	47b0      	blx	r6
	for(iters=0;iters<120;iters++){
  4072c0:	42ac      	cmp	r4, r5
  4072c2:	d1f9      	bne.n	4072b8 <receiveUSBcamConfig+0xc>
}
  4072c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4072c6:	bf00      	nop
  4072c8:	20400ed4 	.word	0x20400ed4
  4072cc:	00410bec 	.word	0x00410bec
  4072d0:	0040ce59 	.word	0x0040ce59

004072d4 <RGB565toRGB888>:
void RGB565toRGB888 (void){
  4072d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  4072d8:	4822      	ldr	r0, [pc, #136]	; (407364 <RGB565toRGB888+0x90>)
  4072da:	4c23      	ldr	r4, [pc, #140]	; (407368 <RGB565toRGB888+0x94>)
  4072dc:	4f23      	ldr	r7, [pc, #140]	; (40736c <RGB565toRGB888+0x98>)
  4072de:	4e24      	ldr	r6, [pc, #144]	; (407370 <RGB565toRGB888+0x9c>)
	for(picBlockCtr=0;picBlockCtr<600;picBlockCtr++){
  4072e0:	4d24      	ldr	r5, [pc, #144]	; (407374 <RGB565toRGB888+0xa0>)
  4072e2:	19e1      	adds	r1, r4, r7
  4072e4:	f5a0 5296 	sub.w	r2, r0, #4800	; 0x12c0
  4072e8:	eb04 0806 	add.w	r8, r4, r6
			firstByte=*camBuffPtrA++;
  4072ec:	f811 cc02 	ldrb.w	ip, [r1, #-2]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  4072f0:	f811 ec01 	ldrb.w	lr, [r1, #-1]
			blueByte=(firstByte&0xF8);
  4072f4:	f02c 0307 	bic.w	r3, ip, #7
			*camBuffPtrC++=blueByte;
  4072f8:	f802 3c03 	strb.w	r3, [r2, #-3]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  4072fc:	ea4f 03ee 	mov.w	r3, lr, asr #3
  407300:	f003 031c 	and.w	r3, r3, #28
  407304:	eb03 134c 	add.w	r3, r3, ip, lsl #5
			*camBuffPtrC++=greenByte;
  407308:	f802 3c02 	strb.w	r3, [r2, #-2]
			redByte=(secondByte&0x1F)<<3;
  40730c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  407310:	f802 ec01 	strb.w	lr, [r2, #-1]
  407314:	3102      	adds	r1, #2
  407316:	3203      	adds	r2, #3
		for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  407318:	4541      	cmp	r1, r8
  40731a:	d1e7      	bne.n	4072ec <RGB565toRGB888+0x18>
  40731c:	f500 5896 	add.w	r8, r0, #4800	; 0x12c0
  407320:	4603      	mov	r3, r0
  407322:	46a6      	mov	lr, r4
			firstByte=*camBuffPtrB++;
  407324:	f81e cc02 	ldrb.w	ip, [lr, #-2]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  407328:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
			blueByte=(firstByte&0xF8);
  40732c:	f02c 0207 	bic.w	r2, ip, #7
			*camBuffPtrC++=blueByte;
  407330:	f803 2c03 	strb.w	r2, [r3, #-3]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  407334:	10ca      	asrs	r2, r1, #3
  407336:	f002 021c 	and.w	r2, r2, #28
  40733a:	eb02 124c 	add.w	r2, r2, ip, lsl #5
			*camBuffPtrC++=greenByte;
  40733e:	f803 2c02 	strb.w	r2, [r3, #-2]
			redByte=(secondByte&0x1F)<<3;
  407342:	00c9      	lsls	r1, r1, #3
  407344:	f803 1c01 	strb.w	r1, [r3, #-1]
  407348:	f10e 0e02 	add.w	lr, lr, #2
  40734c:	3303      	adds	r3, #3
		for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  40734e:	4543      	cmp	r3, r8
  407350:	d1e8      	bne.n	407324 <RGB565toRGB888+0x50>
  407352:	f504 6448 	add.w	r4, r4, #3200	; 0xc80
  407356:	f500 5016 	add.w	r0, r0, #9600	; 0x2580
	for(picBlockCtr=0;picBlockCtr<600;picBlockCtr++){
  40735a:	42a8      	cmp	r0, r5
  40735c:	d1c1      	bne.n	4072e2 <RGB565toRGB888+0xe>
  40735e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407362:	bf00      	nop
  407364:	703aaac3 	.word	0x703aaac3
  407368:	701d3302 	.word	0x701d3302
  40736c:	ffe2cd00 	.word	0xffe2cd00
  407370:	ffe2d980 	.word	0xffe2d980
  407374:	70928ec3 	.word	0x70928ec3

00407378 <LCDclear>:
void LCDclear (void){
  407378:	b510      	push	{r4, lr}
  40737a:	b086      	sub	sp, #24
	printf("%c%c%c%c%c%c%c%c",0xFE,0x46,0xFE,0x48,0xFE,0x4C,0xFE,0x51);//clear display, cursor home
  40737c:	2351      	movs	r3, #81	; 0x51
  40737e:	9304      	str	r3, [sp, #16]
  407380:	21fe      	movs	r1, #254	; 0xfe
  407382:	9103      	str	r1, [sp, #12]
  407384:	234c      	movs	r3, #76	; 0x4c
  407386:	9302      	str	r3, [sp, #8]
  407388:	9101      	str	r1, [sp, #4]
  40738a:	2348      	movs	r3, #72	; 0x48
  40738c:	9300      	str	r3, [sp, #0]
  40738e:	460b      	mov	r3, r1
  407390:	2246      	movs	r2, #70	; 0x46
  407392:	4804      	ldr	r0, [pc, #16]	; (4073a4 <LCDclear+0x2c>)
  407394:	4c04      	ldr	r4, [pc, #16]	; (4073a8 <LCDclear+0x30>)
  407396:	47a0      	blx	r4
	delay_ms(10);
  407398:	4804      	ldr	r0, [pc, #16]	; (4073ac <LCDclear+0x34>)
  40739a:	4b05      	ldr	r3, [pc, #20]	; (4073b0 <LCDclear+0x38>)
  40739c:	4798      	blx	r3
}
  40739e:	b006      	add	sp, #24
  4073a0:	bd10      	pop	{r4, pc}
  4073a2:	bf00      	nop
  4073a4:	0041055c 	.word	0x0041055c
  4073a8:	0040ce59 	.word	0x0040ce59
  4073ac:	0007b784 	.word	0x0007b784
  4073b0:	2040008d 	.word	0x2040008d

004073b4 <eraseSector>:
void eraseSector(unsigned int addr) {
  4073b4:	b510      	push	{r4, lr}
	ul_rc = flash_erase_sector(addr);
  4073b6:	4b06      	ldr	r3, [pc, #24]	; (4073d0 <eraseSector+0x1c>)
  4073b8:	4798      	blx	r3
	if (ul_rc != FLASH_RC_OK) {
  4073ba:	b900      	cbnz	r0, 4073be <eraseSector+0xa>
  4073bc:	bd10      	pop	{r4, pc}
  4073be:	4604      	mov	r4, r0
		LCDclear();
  4073c0:	4b04      	ldr	r3, [pc, #16]	; (4073d4 <eraseSector+0x20>)
  4073c2:	4798      	blx	r3
		printf("-F- Flash programming error %lu\n\r", (unsigned long)ul_rc);
  4073c4:	4621      	mov	r1, r4
  4073c6:	4804      	ldr	r0, [pc, #16]	; (4073d8 <eraseSector+0x24>)
  4073c8:	4b04      	ldr	r3, [pc, #16]	; (4073dc <eraseSector+0x28>)
  4073ca:	4798      	blx	r3
}
  4073cc:	e7f6      	b.n	4073bc <eraseSector+0x8>
  4073ce:	bf00      	nop
  4073d0:	004049d9 	.word	0x004049d9
  4073d4:	00407379 	.word	0x00407379
  4073d8:	0041059c 	.word	0x0041059c
  4073dc:	0040ce59 	.word	0x0040ce59

004073e0 <writeRecToFlash>:
void writeRecToFlash (unsigned int larchPtr, unsigned int* params, unsigned int l_recLen){
  4073e0:	b510      	push	{r4, lr}
	ul_rc =  flash_write(larchPtr, (unsigned int*)params, l_recLen, 0);
  4073e2:	2300      	movs	r3, #0
  4073e4:	4c05      	ldr	r4, [pc, #20]	; (4073fc <writeRecToFlash+0x1c>)
  4073e6:	47a0      	blx	r4
	if (ul_rc != FLASH_RC_OK) {
  4073e8:	b900      	cbnz	r0, 4073ec <writeRecToFlash+0xc>
  4073ea:	bd10      	pop	{r4, pc}
  4073ec:	4604      	mov	r4, r0
		LCDclear();
  4073ee:	4b04      	ldr	r3, [pc, #16]	; (407400 <writeRecToFlash+0x20>)
  4073f0:	4798      	blx	r3
		printf("ERROR Flash pgm %lu\n\r", (unsigned long)ul_rc);
  4073f2:	4621      	mov	r1, r4
  4073f4:	4803      	ldr	r0, [pc, #12]	; (407404 <writeRecToFlash+0x24>)
  4073f6:	4b04      	ldr	r3, [pc, #16]	; (407408 <writeRecToFlash+0x28>)
  4073f8:	4798      	blx	r3
}
  4073fa:	e7f6      	b.n	4073ea <writeRecToFlash+0xa>
  4073fc:	004049fd 	.word	0x004049fd
  407400:	00407379 	.word	0x00407379
  407404:	00410db8 	.word	0x00410db8
  407408:	0040ce59 	.word	0x0040ce59

0040740c <sendCmdToTiny>:
 void sendCmdToTiny(char cmdToSend){
  40740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40740e:	4604      	mov	r4, r0
	 if((cmdToSend&0x80)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407410:	f010 0f80 	tst.w	r0, #128	; 0x80
  407414:	f040 8086 	bne.w	407524 <sendCmdToTiny+0x118>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407418:	2201      	movs	r2, #1
  40741a:	4b52      	ldr	r3, [pc, #328]	; (407564 <sendCmdToTiny+0x158>)
  40741c:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  40741e:	f240 302a 	movw	r0, #810	; 0x32a
  407422:	4f51      	ldr	r7, [pc, #324]	; (407568 <sendCmdToTiny+0x15c>)
  407424:	47b8      	blx	r7
  407426:	4d51      	ldr	r5, [pc, #324]	; (40756c <sendCmdToTiny+0x160>)
  407428:	2608      	movs	r6, #8
  40742a:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  40742c:	f240 302a 	movw	r0, #810	; 0x32a
  407430:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407432:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x40)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407434:	f014 0f40 	tst.w	r4, #64	; 0x40
  407438:	d178      	bne.n	40752c <sendCmdToTiny+0x120>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40743a:	2201      	movs	r2, #1
  40743c:	4b49      	ldr	r3, [pc, #292]	; (407564 <sendCmdToTiny+0x158>)
  40743e:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  407440:	f240 302a 	movw	r0, #810	; 0x32a
  407444:	4f48      	ldr	r7, [pc, #288]	; (407568 <sendCmdToTiny+0x15c>)
  407446:	47b8      	blx	r7
  407448:	4d48      	ldr	r5, [pc, #288]	; (40756c <sendCmdToTiny+0x160>)
  40744a:	2608      	movs	r6, #8
  40744c:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  40744e:	f240 302a 	movw	r0, #810	; 0x32a
  407452:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407454:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x20)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407456:	f014 0f20 	tst.w	r4, #32
  40745a:	d16b      	bne.n	407534 <sendCmdToTiny+0x128>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40745c:	2201      	movs	r2, #1
  40745e:	4b41      	ldr	r3, [pc, #260]	; (407564 <sendCmdToTiny+0x158>)
  407460:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  407462:	f240 302a 	movw	r0, #810	; 0x32a
  407466:	4f40      	ldr	r7, [pc, #256]	; (407568 <sendCmdToTiny+0x15c>)
  407468:	47b8      	blx	r7
  40746a:	4d40      	ldr	r5, [pc, #256]	; (40756c <sendCmdToTiny+0x160>)
  40746c:	2608      	movs	r6, #8
  40746e:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  407470:	f240 302a 	movw	r0, #810	; 0x32a
  407474:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407476:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x10)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407478:	f014 0f10 	tst.w	r4, #16
  40747c:	d15e      	bne.n	40753c <sendCmdToTiny+0x130>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40747e:	2201      	movs	r2, #1
  407480:	4b38      	ldr	r3, [pc, #224]	; (407564 <sendCmdToTiny+0x158>)
  407482:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  407484:	f240 302a 	movw	r0, #810	; 0x32a
  407488:	4f37      	ldr	r7, [pc, #220]	; (407568 <sendCmdToTiny+0x15c>)
  40748a:	47b8      	blx	r7
  40748c:	4d37      	ldr	r5, [pc, #220]	; (40756c <sendCmdToTiny+0x160>)
  40748e:	2608      	movs	r6, #8
  407490:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  407492:	f240 302a 	movw	r0, #810	; 0x32a
  407496:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407498:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x08)==0)ioport_set_pin_level(BigTiny_DAT,0);
  40749a:	f014 0f08 	tst.w	r4, #8
  40749e:	d151      	bne.n	407544 <sendCmdToTiny+0x138>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4074a0:	2201      	movs	r2, #1
  4074a2:	4b30      	ldr	r3, [pc, #192]	; (407564 <sendCmdToTiny+0x158>)
  4074a4:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  4074a6:	f240 302a 	movw	r0, #810	; 0x32a
  4074aa:	4f2f      	ldr	r7, [pc, #188]	; (407568 <sendCmdToTiny+0x15c>)
  4074ac:	47b8      	blx	r7
  4074ae:	4d2f      	ldr	r5, [pc, #188]	; (40756c <sendCmdToTiny+0x160>)
  4074b0:	2608      	movs	r6, #8
  4074b2:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  4074b4:	f240 302a 	movw	r0, #810	; 0x32a
  4074b8:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4074ba:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x04)==0)ioport_set_pin_level(BigTiny_DAT,0);
  4074bc:	f014 0f04 	tst.w	r4, #4
  4074c0:	d144      	bne.n	40754c <sendCmdToTiny+0x140>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4074c2:	2201      	movs	r2, #1
  4074c4:	4b27      	ldr	r3, [pc, #156]	; (407564 <sendCmdToTiny+0x158>)
  4074c6:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  4074c8:	f240 302a 	movw	r0, #810	; 0x32a
  4074cc:	4f26      	ldr	r7, [pc, #152]	; (407568 <sendCmdToTiny+0x15c>)
  4074ce:	47b8      	blx	r7
  4074d0:	4d26      	ldr	r5, [pc, #152]	; (40756c <sendCmdToTiny+0x160>)
  4074d2:	2608      	movs	r6, #8
  4074d4:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  4074d6:	f240 302a 	movw	r0, #810	; 0x32a
  4074da:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4074dc:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x02)==0)ioport_set_pin_level(BigTiny_DAT,0);
  4074de:	f014 0f02 	tst.w	r4, #2
  4074e2:	d137      	bne.n	407554 <sendCmdToTiny+0x148>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4074e4:	2201      	movs	r2, #1
  4074e6:	4b1f      	ldr	r3, [pc, #124]	; (407564 <sendCmdToTiny+0x158>)
  4074e8:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  4074ea:	f240 302a 	movw	r0, #810	; 0x32a
  4074ee:	4f1e      	ldr	r7, [pc, #120]	; (407568 <sendCmdToTiny+0x15c>)
  4074f0:	47b8      	blx	r7
  4074f2:	4d1e      	ldr	r5, [pc, #120]	; (40756c <sendCmdToTiny+0x160>)
  4074f4:	2608      	movs	r6, #8
  4074f6:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  4074f8:	f240 302a 	movw	r0, #810	; 0x32a
  4074fc:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4074fe:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x01)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407500:	f014 0f01 	tst.w	r4, #1
  407504:	d02a      	beq.n	40755c <sendCmdToTiny+0x150>
  407506:	2201      	movs	r2, #1
  407508:	4b16      	ldr	r3, [pc, #88]	; (407564 <sendCmdToTiny+0x158>)
  40750a:	631a      	str	r2, [r3, #48]	; 0x30
	 delay_us(TINY_CLK_DELAY);
  40750c:	f240 302a 	movw	r0, #810	; 0x32a
  407510:	4e15      	ldr	r6, [pc, #84]	; (407568 <sendCmdToTiny+0x15c>)
  407512:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407514:	4c15      	ldr	r4, [pc, #84]	; (40756c <sendCmdToTiny+0x160>)
  407516:	2508      	movs	r5, #8
  407518:	6365      	str	r5, [r4, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  40751a:	f240 302a 	movw	r0, #810	; 0x32a
  40751e:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407520:	6325      	str	r5, [r4, #48]	; 0x30
  407522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407524:	2201      	movs	r2, #1
  407526:	4b0f      	ldr	r3, [pc, #60]	; (407564 <sendCmdToTiny+0x158>)
  407528:	631a      	str	r2, [r3, #48]	; 0x30
  40752a:	e778      	b.n	40741e <sendCmdToTiny+0x12>
  40752c:	2201      	movs	r2, #1
  40752e:	4b0d      	ldr	r3, [pc, #52]	; (407564 <sendCmdToTiny+0x158>)
  407530:	631a      	str	r2, [r3, #48]	; 0x30
  407532:	e785      	b.n	407440 <sendCmdToTiny+0x34>
  407534:	2201      	movs	r2, #1
  407536:	4b0b      	ldr	r3, [pc, #44]	; (407564 <sendCmdToTiny+0x158>)
  407538:	631a      	str	r2, [r3, #48]	; 0x30
  40753a:	e792      	b.n	407462 <sendCmdToTiny+0x56>
  40753c:	2201      	movs	r2, #1
  40753e:	4b09      	ldr	r3, [pc, #36]	; (407564 <sendCmdToTiny+0x158>)
  407540:	631a      	str	r2, [r3, #48]	; 0x30
  407542:	e79f      	b.n	407484 <sendCmdToTiny+0x78>
  407544:	2201      	movs	r2, #1
  407546:	4b07      	ldr	r3, [pc, #28]	; (407564 <sendCmdToTiny+0x158>)
  407548:	631a      	str	r2, [r3, #48]	; 0x30
  40754a:	e7ac      	b.n	4074a6 <sendCmdToTiny+0x9a>
  40754c:	2201      	movs	r2, #1
  40754e:	4b05      	ldr	r3, [pc, #20]	; (407564 <sendCmdToTiny+0x158>)
  407550:	631a      	str	r2, [r3, #48]	; 0x30
  407552:	e7b9      	b.n	4074c8 <sendCmdToTiny+0xbc>
  407554:	2201      	movs	r2, #1
  407556:	4b03      	ldr	r3, [pc, #12]	; (407564 <sendCmdToTiny+0x158>)
  407558:	631a      	str	r2, [r3, #48]	; 0x30
  40755a:	e7c6      	b.n	4074ea <sendCmdToTiny+0xde>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40755c:	2201      	movs	r2, #1
  40755e:	4b01      	ldr	r3, [pc, #4]	; (407564 <sendCmdToTiny+0x158>)
  407560:	635a      	str	r2, [r3, #52]	; 0x34
  407562:	e7d3      	b.n	40750c <sendCmdToTiny+0x100>
  407564:	400e1000 	.word	0x400e1000
  407568:	2040008d 	.word	0x2040008d
  40756c:	400e1400 	.word	0x400e1400

00407570 <getByteFromTiny>:
char getByteFromTiny(void){
  407570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407572:	4c48      	ldr	r4, [pc, #288]	; (407694 <getByteFromTiny+0x124>)
  407574:	2508      	movs	r5, #8
  407576:	6325      	str	r5, [r4, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep. Making only this one longer doesn't help.
  407578:	f240 302a 	movw	r0, #810	; 0x32a
  40757c:	4b46      	ldr	r3, [pc, #280]	; (407698 <getByteFromTiny+0x128>)
  40757e:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407580:	6365      	str	r5, [r4, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407582:	4b46      	ldr	r3, [pc, #280]	; (40769c <getByteFromTiny+0x12c>)
  407584:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  407586:	f004 0401 	and.w	r4, r4, #1
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x80;
  40758a:	01e4      	lsls	r4, r4, #7
	delay_us(TINY_CLK_DELAY);
  40758c:	f240 302a 	movw	r0, #810	; 0x32a
  407590:	4f41      	ldr	r7, [pc, #260]	; (407698 <getByteFromTiny+0x128>)
  407592:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407594:	4d3f      	ldr	r5, [pc, #252]	; (407694 <getByteFromTiny+0x124>)
  407596:	2608      	movs	r6, #8
  407598:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  40759a:	f240 302a 	movw	r0, #810	; 0x32a
  40759e:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4075a0:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4075a2:	4b3e      	ldr	r3, [pc, #248]	; (40769c <getByteFromTiny+0x12c>)
  4075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x40;
  4075a6:	f013 0f01 	tst.w	r3, #1
  4075aa:	bf18      	it	ne
  4075ac:	f044 0440 	orrne.w	r4, r4, #64	; 0x40
	delay_us(TINY_CLK_DELAY);
  4075b0:	f240 302a 	movw	r0, #810	; 0x32a
  4075b4:	4f38      	ldr	r7, [pc, #224]	; (407698 <getByteFromTiny+0x128>)
  4075b6:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4075b8:	4d36      	ldr	r5, [pc, #216]	; (407694 <getByteFromTiny+0x124>)
  4075ba:	2608      	movs	r6, #8
  4075bc:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  4075be:	f240 302a 	movw	r0, #810	; 0x32a
  4075c2:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4075c4:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4075c6:	4b35      	ldr	r3, [pc, #212]	; (40769c <getByteFromTiny+0x12c>)
  4075c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x20;
  4075ca:	f013 0f01 	tst.w	r3, #1
  4075ce:	bf18      	it	ne
  4075d0:	f044 0420 	orrne.w	r4, r4, #32
	delay_us(TINY_CLK_DELAY);
  4075d4:	f240 302a 	movw	r0, #810	; 0x32a
  4075d8:	4f2f      	ldr	r7, [pc, #188]	; (407698 <getByteFromTiny+0x128>)
  4075da:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4075dc:	4d2d      	ldr	r5, [pc, #180]	; (407694 <getByteFromTiny+0x124>)
  4075de:	2608      	movs	r6, #8
  4075e0:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  4075e2:	f240 302a 	movw	r0, #810	; 0x32a
  4075e6:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4075e8:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4075ea:	4b2c      	ldr	r3, [pc, #176]	; (40769c <getByteFromTiny+0x12c>)
  4075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x10;
  4075ee:	f013 0f01 	tst.w	r3, #1
  4075f2:	bf18      	it	ne
  4075f4:	f044 0410 	orrne.w	r4, r4, #16
	delay_us(TINY_CLK_DELAY);
  4075f8:	f240 302a 	movw	r0, #810	; 0x32a
  4075fc:	4f26      	ldr	r7, [pc, #152]	; (407698 <getByteFromTiny+0x128>)
  4075fe:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407600:	4d24      	ldr	r5, [pc, #144]	; (407694 <getByteFromTiny+0x124>)
  407602:	2608      	movs	r6, #8
  407604:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  407606:	f240 302a 	movw	r0, #810	; 0x32a
  40760a:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40760c:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40760e:	4b23      	ldr	r3, [pc, #140]	; (40769c <getByteFromTiny+0x12c>)
  407610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x08;
  407612:	f013 0f01 	tst.w	r3, #1
  407616:	bf18      	it	ne
  407618:	4334      	orrne	r4, r6
	delay_us(TINY_CLK_DELAY);
  40761a:	f240 302a 	movw	r0, #810	; 0x32a
  40761e:	4f1e      	ldr	r7, [pc, #120]	; (407698 <getByteFromTiny+0x128>)
  407620:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407622:	4d1c      	ldr	r5, [pc, #112]	; (407694 <getByteFromTiny+0x124>)
  407624:	2608      	movs	r6, #8
  407626:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  407628:	f240 302a 	movw	r0, #810	; 0x32a
  40762c:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40762e:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407630:	4b1a      	ldr	r3, [pc, #104]	; (40769c <getByteFromTiny+0x12c>)
  407632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x04;
  407634:	f013 0f01 	tst.w	r3, #1
  407638:	bf18      	it	ne
  40763a:	f044 0404 	orrne.w	r4, r4, #4
	delay_us(TINY_CLK_DELAY);
  40763e:	f240 302a 	movw	r0, #810	; 0x32a
  407642:	4f15      	ldr	r7, [pc, #84]	; (407698 <getByteFromTiny+0x128>)
  407644:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407646:	4d13      	ldr	r5, [pc, #76]	; (407694 <getByteFromTiny+0x124>)
  407648:	2608      	movs	r6, #8
  40764a:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  40764c:	f240 302a 	movw	r0, #810	; 0x32a
  407650:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407652:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407654:	4b11      	ldr	r3, [pc, #68]	; (40769c <getByteFromTiny+0x12c>)
  407656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x02;
  407658:	f013 0f01 	tst.w	r3, #1
  40765c:	bf18      	it	ne
  40765e:	f044 0402 	orrne.w	r4, r4, #2
	delay_us(TINY_CLK_DELAY);
  407662:	f240 302a 	movw	r0, #810	; 0x32a
  407666:	4f0c      	ldr	r7, [pc, #48]	; (407698 <getByteFromTiny+0x128>)
  407668:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40766a:	4d0a      	ldr	r5, [pc, #40]	; (407694 <getByteFromTiny+0x124>)
  40766c:	2608      	movs	r6, #8
  40766e:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  407670:	f240 302a 	movw	r0, #810	; 0x32a
  407674:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407676:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407678:	4b08      	ldr	r3, [pc, #32]	; (40769c <getByteFromTiny+0x12c>)
  40767a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x01;
  40767c:	f013 0f01 	tst.w	r3, #1
  407680:	bf18      	it	ne
  407682:	f044 0401 	orrne.w	r4, r4, #1
	delay_us(TINY_CLK_DELAY);
  407686:	f240 302a 	movw	r0, #810	; 0x32a
  40768a:	4b03      	ldr	r3, [pc, #12]	; (407698 <getByteFromTiny+0x128>)
  40768c:	4798      	blx	r3
}
  40768e:	4620      	mov	r0, r4
  407690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407692:	bf00      	nop
  407694:	400e1400 	.word	0x400e1400
  407698:	2040008d 	.word	0x2040008d
  40769c:	400e1000 	.word	0x400e1000

004076a0 <calcCRC>:
   for (i=0;i<LEN;i++){       //for each element
  4076a0:	2900      	cmp	r1, #0
  4076a2:	dd20      	ble.n	4076e6 <calcCRC+0x46>
unsigned short calcCRC(char cbuff[], int LEN) {
  4076a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4076a6:	4605      	mov	r5, r0
  4076a8:	1847      	adds	r7, r0, r1
   for (i=0;i<LEN;i++){       //for each element
  4076aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
       if((Y & cbuff[i]) != 0){ X++;};
  4076ae:	f04f 0e80 	mov.w	lr, #128	; 0x80
       if ((Z & 0x8000) != 0) {X ^= 0x1021; };
  4076b2:	f241 0621 	movw	r6, #4129	; 0x1021
  4076b6:	e011      	b.n	4076dc <calcCRC+0x3c>
       Y >>= 1;
  4076b8:	0849      	lsrs	r1, r1, #1
       if ((Z & 0x8000) != 0) {X ^= 0x1021; };
  4076ba:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  4076be:	bf14      	ite	ne
  4076c0:	ea83 0006 	eorne.w	r0, r3, r6
  4076c4:	4618      	moveq	r0, r3
     for (j=0;j<8;j++){
  4076c6:	3a01      	subs	r2, #1
  4076c8:	d006      	beq.n	4076d8 <calcCRC+0x38>
       X <<= 1;
  4076ca:	0043      	lsls	r3, r0, #1
  4076cc:	b29b      	uxth	r3, r3
       if((Y & cbuff[i]) != 0){ X++;};
  4076ce:	4221      	tst	r1, r4
  4076d0:	d0f2      	beq.n	4076b8 <calcCRC+0x18>
  4076d2:	3301      	adds	r3, #1
  4076d4:	b29b      	uxth	r3, r3
  4076d6:	e7ef      	b.n	4076b8 <calcCRC+0x18>
   for (i=0;i<LEN;i++){       //for each element
  4076d8:	42bd      	cmp	r5, r7
  4076da:	d013      	beq.n	407704 <calcCRC+0x64>
       if((Y & cbuff[i]) != 0){ X++;};
  4076dc:	f815 4b01 	ldrb.w	r4, [r5], #1
  4076e0:	2208      	movs	r2, #8
  4076e2:	4671      	mov	r1, lr
  4076e4:	e7f1      	b.n	4076ca <calcCRC+0x2a>
   unsigned short X = 0xFFFF;
  4076e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4076ea:	2310      	movs	r3, #16
    if ((X & 0x8000) != 0) { X<<=1; X ^= 0x1021; } else X <<= 1;
  4076ec:	f241 0221 	movw	r2, #4129	; 0x1021
  4076f0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  4076f4:	ea4f 0040 	mov.w	r0, r0, lsl #1
  4076f8:	b280      	uxth	r0, r0
  4076fa:	bf18      	it	ne
  4076fc:	4050      	eorne	r0, r2
  for (i=0;i<16;i++){
  4076fe:	3b01      	subs	r3, #1
  407700:	d1f6      	bne.n	4076f0 <calcCRC+0x50>
  407702:	4770      	bx	lr
   unsigned short X = 0xFFFF;
  407704:	2310      	movs	r3, #16
    if ((X & 0x8000) != 0) { X<<=1; X ^= 0x1021; } else X <<= 1;
  407706:	f241 0221 	movw	r2, #4129	; 0x1021
  40770a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40770e:	ea4f 0040 	mov.w	r0, r0, lsl #1
  407712:	b280      	uxth	r0, r0
  407714:	bf18      	it	ne
  407716:	4050      	eorne	r0, r2
  for (i=0;i<16;i++){
  407718:	3b01      	subs	r3, #1
  40771a:	d1f6      	bne.n	40770a <calcCRC+0x6a>
}
  40771c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00407720 <hex2ToAscii>:
void hex2ToAscii(int hexx, char* asciiChars){
  407720:	b570      	push	{r4, r5, r6, lr}
  407722:	460c      	mov	r4, r1
   hexx &= 0x000FFFFF;
  407724:	f3c0 0613 	ubfx	r6, r0, #0, #20
   asciiChars[0] = hex1ToAscii(hexx);
  407728:	4630      	mov	r0, r6
  40772a:	4d08      	ldr	r5, [pc, #32]	; (40774c <hex2ToAscii+0x2c>)
  40772c:	47a8      	blx	r5
  40772e:	7020      	strb	r0, [r4, #0]
   asciiChars[1] = hex1ToAscii(hexx);
  407730:	1130      	asrs	r0, r6, #4
  407732:	47a8      	blx	r5
  407734:	7060      	strb	r0, [r4, #1]
   asciiChars[2] = hex1ToAscii(hexx);
  407736:	1230      	asrs	r0, r6, #8
  407738:	47a8      	blx	r5
  40773a:	70a0      	strb	r0, [r4, #2]
   asciiChars[3] = hex1ToAscii(hexx);
  40773c:	1330      	asrs	r0, r6, #12
  40773e:	47a8      	blx	r5
  407740:	70e0      	strb	r0, [r4, #3]
   asciiChars[4] = hex1ToAscii(hexx);
  407742:	1430      	asrs	r0, r6, #16
  407744:	47a8      	blx	r5
  407746:	7120      	strb	r0, [r4, #4]
  407748:	bd70      	pop	{r4, r5, r6, pc}
  40774a:	bf00      	nop
  40774c:	00406aa9 	.word	0x00406aa9

00407750 <getGPSdateTimeFrmTiny>:
/***********************************************************************/
/*  Interrupt from Tiny
***********************************************************************/
void getGPSdateTimeFrmTiny(void){
  407750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407754:	b09b      	sub	sp, #108	; 0x6c
	char rcvFromTinyGG[56];
	char writeRet,iters;
	unsigned short crcrc;
	int yearNow;

	pmc_enable_periph_clk(ID_PIOB);
  407756:	200b      	movs	r0, #11
  407758:	4c97      	ldr	r4, [pc, #604]	; (4079b8 <getGPSdateTimeFrmTiny+0x268>)
  40775a:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  40775c:	2010      	movs	r0, #16
  40775e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407760:	4b96      	ldr	r3, [pc, #600]	; (4079bc <getGPSdateTimeFrmTiny+0x26c>)
  407762:	2208      	movs	r2, #8
  407764:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407766:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40776a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40776c:	4994      	ldr	r1, [pc, #592]	; (4079c0 <getGPSdateTimeFrmTiny+0x270>)
  40776e:	2001      	movs	r0, #1
  407770:	6148      	str	r0, [r1, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407772:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407776:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(BigTiny_CLK, 1);
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_INPUT);
	ioport_set_pin_level(BigTiny_CLK, 0);//start condition for big-to-tiny
	delay_us(150);
  407778:	f641 50a2 	movw	r0, #7586	; 0x1da2
  40777c:	4b91      	ldr	r3, [pc, #580]	; (4079c4 <getGPSdateTimeFrmTiny+0x274>)
  40777e:	4798      	blx	r3
  407780:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
  407784:	ae12      	add	r6, sp, #72	; 0x48
	for(iters=0;iters<25;iters++){
		rcvFromTinyGG[iters]=getByteFromTiny();
  407786:	4d90      	ldr	r5, [pc, #576]	; (4079c8 <getGPSdateTimeFrmTiny+0x278>)
  407788:	47a8      	blx	r5
  40778a:	f804 0f01 	strb.w	r0, [r4, #1]!
	for(iters=0;iters<25;iters++){
  40778e:	42a6      	cmp	r6, r4
  407790:	d1fa      	bne.n	407788 <getGPSdateTimeFrmTiny+0x38>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407792:	2208      	movs	r2, #8
  407794:	4b89      	ldr	r3, [pc, #548]	; (4079bc <getGPSdateTimeFrmTiny+0x26c>)
  407796:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ioport_set_pin_level(BigTiny_CLK, 1);//start condition for tiny-to-big
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  407798:	4a8c      	ldr	r2, [pc, #560]	; (4079cc <getGPSdateTimeFrmTiny+0x27c>)
  40779a:	f503 638a 	add.w	r3, r3, #1104	; 0x450
  40779e:	601a      	str	r2, [r3, #0]
	crcrc=calcCRC(rcvFromTinyGG,23);
  4077a0:	2117      	movs	r1, #23
  4077a2:	a80c      	add	r0, sp, #48	; 0x30
  4077a4:	4b8a      	ldr	r3, [pc, #552]	; (4079d0 <getGPSdateTimeFrmTiny+0x280>)
  4077a6:	4798      	blx	r3
	if(((crcrc>>8)!=rcvFromTinyGG[23])||((crcrc&0x00FF)!=rcvFromTinyGG[24])){
  4077a8:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
  4077ac:	f3c0 230f 	ubfx	r3, r0, #8, #16
  4077b0:	429a      	cmp	r2, r3
  4077b2:	d104      	bne.n	4077be <getGPSdateTimeFrmTiny+0x6e>
  4077b4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
  4077b8:	b2c0      	uxtb	r0, r0
  4077ba:	4283      	cmp	r3, r0
  4077bc:	d02e      	beq.n	40781c <getGPSdateTimeFrmTiny+0xcc>
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4077be:	4b7f      	ldr	r3, [pc, #508]	; (4079bc <getGPSdateTimeFrmTiny+0x26c>)
  4077c0:	2208      	movs	r2, #8
  4077c2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4077c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4077c8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4077ca:	4c7d      	ldr	r4, [pc, #500]	; (4079c0 <getGPSdateTimeFrmTiny+0x270>)
  4077cc:	2501      	movs	r5, #1
  4077ce:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4077d0:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);//WakeUp Tiny
		ioport_set_pin_level(BigTiny_CLK, 1);//start condition
		ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);//WakeUp Tiny
		sendCmdToTiny('b');//potential addition tshoooooooooooot
  4077d4:	2062      	movs	r0, #98	; 0x62
  4077d6:	4b7f      	ldr	r3, [pc, #508]	; (4079d4 <getGPSdateTimeFrmTiny+0x284>)
  4077d8:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4077da:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4077dc:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_INPUT);//WakeUp Tiny
#ifdef DO_DIAGS
		configure_console();  //TSHOOOOOOOOOOOOOOT
  4077e0:	4b7d      	ldr	r3, [pc, #500]	; (4079d8 <getGPSdateTimeFrmTiny+0x288>)
  4077e2:	4798      	blx	r3
		printf("\r\nFAIL CRC TO TINY\r\n");
  4077e4:	487d      	ldr	r0, [pc, #500]	; (4079dc <getGPSdateTimeFrmTiny+0x28c>)
  4077e6:	4b7e      	ldr	r3, [pc, #504]	; (4079e0 <getGPSdateTimeFrmTiny+0x290>)
  4077e8:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4077ea:	4b74      	ldr	r3, [pc, #464]	; (4079bc <getGPSdateTimeFrmTiny+0x26c>)
  4077ec:	2208      	movs	r2, #8
  4077ee:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4077f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4077f4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4077f6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4077fa:	2201      	movs	r2, #1
  4077fc:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4077fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407802:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407804:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
	ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);//WakeUp Tiny
	ioport_set_pin_level(BigTiny_CLK, 1);//start condition for tiny-to-big
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);//WakeUp Tiny
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_INPUT);//WakeUp Tiny
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  407808:	4c76      	ldr	r4, [pc, #472]	; (4079e4 <getGPSdateTimeFrmTiny+0x294>)
  40780a:	4d70      	ldr	r5, [pc, #448]	; (4079cc <getGPSdateTimeFrmTiny+0x27c>)
  40780c:	6025      	str	r5, [r4, #0]
	delay_ms(1000);
  40780e:	4876      	ldr	r0, [pc, #472]	; (4079e8 <getGPSdateTimeFrmTiny+0x298>)
  407810:	4b6c      	ldr	r3, [pc, #432]	; (4079c4 <getGPSdateTimeFrmTiny+0x274>)
  407812:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  407814:	6025      	str	r5, [r4, #0]
}
  407816:	b01b      	add	sp, #108	; 0x6c
  407818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40781c:	4b67      	ldr	r3, [pc, #412]	; (4079bc <getGPSdateTimeFrmTiny+0x26c>)
  40781e:	2208      	movs	r2, #8
  407820:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407822:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407826:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407828:	4c65      	ldr	r4, [pc, #404]	; (4079c0 <getGPSdateTimeFrmTiny+0x270>)
  40782a:	2501      	movs	r5, #1
  40782c:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40782e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		sendCmdToTiny('G');//potential addition tshoooooooooooot
  407832:	2047      	movs	r0, #71	; 0x47
  407834:	4b67      	ldr	r3, [pc, #412]	; (4079d4 <getGPSdateTimeFrmTiny+0x284>)
  407836:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407838:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40783a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		yearNow = rcvFromTinyGG[9];
  40783e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
  407842:	9303      	str	r3, [sp, #12]
		monthNow = rcvFromTinyGG[10];
  407844:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 407a10 <getGPSdateTimeFrmTiny+0x2c0>
  407848:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
  40784c:	f8ca 3000 	str.w	r3, [sl]
		dayNow = rcvFromTinyGG[11];
  407850:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 407a14 <getGPSdateTimeFrmTiny+0x2c4>
  407854:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
  407858:	f8cb 3000 	str.w	r3, [fp]
		hourNow = rcvFromTinyGG[12];
  40785c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 407a18 <getGPSdateTimeFrmTiny+0x2c8>
  407860:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  407864:	f8c8 3000 	str.w	r3, [r8]
		minsNow = rcvFromTinyGG[13];
  407868:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 407a1c <getGPSdateTimeFrmTiny+0x2cc>
  40786c:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
  407870:	f8c9 3000 	str.w	r3, [r9]
		secNow = rcvFromTinyGG[14];
  407874:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
  407878:	4a5c      	ldr	r2, [pc, #368]	; (4079ec <getGPSdateTimeFrmTiny+0x29c>)
  40787a:	6013      	str	r3, [r2, #0]
	pmc_enable_periph_clk(ID_PIOC);
  40787c:	200c      	movs	r0, #12
  40787e:	4b4e      	ldr	r3, [pc, #312]	; (4079b8 <getGPSdateTimeFrmTiny+0x268>)
  407880:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407882:	4b5b      	ldr	r3, [pc, #364]	; (4079f0 <getGPSdateTimeFrmTiny+0x2a0>)
  407884:	2204      	movs	r2, #4
  407886:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407888:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40788c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40788e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407892:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407894:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40789a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40789c:	f022 0204 	bic.w	r2, r2, #4
  4078a0:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4078a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4078a4:	f022 0204 	bic.w	r2, r2, #4
  4078a8:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4078aa:	f504 7400 	add.w	r4, r4, #512	; 0x200
  4078ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4078b2:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4078b4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4078b8:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4078bc:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4078be:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4078c2:	6323      	str	r3, [r4, #48]	; 0x30
  4078c4:	6326      	str	r6, [r4, #48]	; 0x30
	delay_ms(200);//looked fine even at only 1ms (when repeated every 500ms);
  4078c6:	484b      	ldr	r0, [pc, #300]	; (4079f4 <getGPSdateTimeFrmTiny+0x2a4>)
  4078c8:	4f3e      	ldr	r7, [pc, #248]	; (4079c4 <getGPSdateTimeFrmTiny+0x274>)
  4078ca:	47b8      	blx	r7
	twi_init_RTC();
  4078cc:	4b4a      	ldr	r3, [pc, #296]	; (4079f8 <getGPSdateTimeFrmTiny+0x2a8>)
  4078ce:	4798      	blx	r3
	delay_ms(500);//
  4078d0:	484a      	ldr	r0, [pc, #296]	; (4079fc <getGPSdateTimeFrmTiny+0x2ac>)
  4078d2:	47b8      	blx	r7
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4078d4:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4078d6:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4078da:	6666      	str	r6, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4078dc:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4078e0:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4078e2:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4078e4:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4078e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4078ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4078ee:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4078f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4078f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4078f6:	6763      	str	r3, [r4, #116]	; 0x74
	rtcData[0]=0x00;//write to Address 0x00  SET ALL
  4078f8:	2600      	movs	r6, #0
  4078fa:	f88d 6014 	strb.w	r6, [sp, #20]
	rtcData[1]=0x02;//contents of Addr 0x00 CTL1
  4078fe:	f04f 0202 	mov.w	r2, #2
  407902:	f88d 2015 	strb.w	r2, [sp, #21]
	rtcData[2]=0x00;//contents of Addr 0x01 CTL2
  407906:	f88d 6016 	strb.w	r6, [sp, #22]
	rtcData[3]=0x00;//contents of Addr 0x02 CTL3
  40790a:	f88d 6017 	strb.w	r6, [sp, #23]
	rtcData[4]=hexToBCD(secNow);//contents of Addr 0x03 SECONDS works
  40790e:	4a37      	ldr	r2, [pc, #220]	; (4079ec <getGPSdateTimeFrmTiny+0x29c>)
  407910:	6810      	ldr	r0, [r2, #0]
  407912:	4c3b      	ldr	r4, [pc, #236]	; (407a00 <getGPSdateTimeFrmTiny+0x2b0>)
  407914:	47a0      	blx	r4
  407916:	f88d 0018 	strb.w	r0, [sp, #24]
	rtcData[5]=hexToBCD(minsNow);//contents of Addr 0x04 MINUTES works
  40791a:	f8d9 0000 	ldr.w	r0, [r9]
  40791e:	47a0      	blx	r4
  407920:	f88d 0019 	strb.w	r0, [sp, #25]
	rtcData[6]=hexToBCD(hourNow);//contents of Addr 0x05 HOURS works
  407924:	f8d8 0000 	ldr.w	r0, [r8]
  407928:	47a0      	blx	r4
  40792a:	f88d 001a 	strb.w	r0, [sp, #26]
	rtcData[7]=hexToBCD(dayNow);//contents of Addr 0x06 DAYS
  40792e:	f8db 0000 	ldr.w	r0, [fp]
  407932:	47a0      	blx	r4
  407934:	f88d 001b 	strb.w	r0, [sp, #27]
	rtcData[8]=0x02;//contents of Addr 0x07 WEEKDAY
  407938:	f04f 0202 	mov.w	r2, #2
  40793c:	f88d 201c 	strb.w	r2, [sp, #28]
	rtcData[9]=hexToBCD(monthNow);//contents of Addr 0x08 MONTH
  407940:	f8da 0000 	ldr.w	r0, [sl]
  407944:	47a0      	blx	r4
  407946:	f88d 001d 	strb.w	r0, [sp, #29]
	rtcData[0x0A]=hexToBCD(yearNow);//contents of Addr 0x09 YEAR
  40794a:	9803      	ldr	r0, [sp, #12]
  40794c:	47a0      	blx	r4
  40794e:	f88d 001e 	strb.w	r0, [sp, #30]
	rtcData[0x0B]=0x80;//contents of Addr 0x0A  0x80 = second alarm disabled
  407952:	2380      	movs	r3, #128	; 0x80
  407954:	f88d 301f 	strb.w	r3, [sp, #31]
	rtcData[0x0C]=0x80;//contents of Addr 0x0B  0x80 = minute alarm disabled
  407958:	f88d 3020 	strb.w	r3, [sp, #32]
	rtcData[0x0D]=0x80;//contents of Addr 0x0C  0x80 = Hour alarm disabled
  40795c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	rtcData[0x0E]=0x80;//contents of Addr 0x0D  0x80 = day alarm disabled
  407960:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	rtcData[0x0F]=0x80;//contents of Addr 0x0E  0x80 = weekday alarm disabled
  407964:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	rtcData[0x10]=0x00;//contents of Addr 0x0F  0x00 = temperature clockout period 4 minutes
  407968:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	rtcData[0x11]=0x00;//contents of Addr 0x10  20=PULSED INTERRUPT
  40796c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
	writeRet = write_data_RTC(rtcData,18);//!< write sequentially to the slave "1" sends addr plus data[0].
  407970:	2112      	movs	r1, #18
  407972:	a805      	add	r0, sp, #20
  407974:	4c23      	ldr	r4, [pc, #140]	; (407a04 <getGPSdateTimeFrmTiny+0x2b4>)
  407976:	47a0      	blx	r4
	delay_ms(200);//
  407978:	481e      	ldr	r0, [pc, #120]	; (4079f4 <getGPSdateTimeFrmTiny+0x2a4>)
  40797a:	47b8      	blx	r7
	rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40797c:	f88d 5014 	strb.w	r5, [sp, #20]
	rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  407980:	2330      	movs	r3, #48	; 0x30
  407982:	f88d 3015 	strb.w	r3, [sp, #21]
	write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  407986:	2102      	movs	r1, #2
  407988:	a805      	add	r0, sp, #20
  40798a:	47a0      	blx	r4
		configure_console();  //TSHOOOOOOOOOOOOOOT
  40798c:	4b12      	ldr	r3, [pc, #72]	; (4079d8 <getGPSdateTimeFrmTiny+0x288>)
  40798e:	4798      	blx	r3
		printf("\r\nGOOD DATA RCVD FROM TINY: %d-%d-%d %d:%d \r\n",monthNow, dayNow, yearNow, hourNow, minsNow);
  407990:	f8db 2000 	ldr.w	r2, [fp]
  407994:	f8da 1000 	ldr.w	r1, [sl]
  407998:	f8d9 3000 	ldr.w	r3, [r9]
  40799c:	9301      	str	r3, [sp, #4]
  40799e:	f8d8 3000 	ldr.w	r3, [r8]
  4079a2:	9300      	str	r3, [sp, #0]
  4079a4:	9b03      	ldr	r3, [sp, #12]
  4079a6:	4818      	ldr	r0, [pc, #96]	; (407a08 <getGPSdateTimeFrmTiny+0x2b8>)
  4079a8:	4c0d      	ldr	r4, [pc, #52]	; (4079e0 <getGPSdateTimeFrmTiny+0x290>)
  4079aa:	47a0      	blx	r4
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4079ac:	4a07      	ldr	r2, [pc, #28]	; (4079cc <getGPSdateTimeFrmTiny+0x27c>)
  4079ae:	4b0d      	ldr	r3, [pc, #52]	; (4079e4 <getGPSdateTimeFrmTiny+0x294>)
  4079b0:	601a      	str	r2, [r3, #0]
		delay_s(2);
  4079b2:	4816      	ldr	r0, [pc, #88]	; (407a0c <getGPSdateTimeFrmTiny+0x2bc>)
  4079b4:	47b8      	blx	r7
  4079b6:	e718      	b.n	4077ea <getGPSdateTimeFrmTiny+0x9a>
  4079b8:	004035a1 	.word	0x004035a1
  4079bc:	400e1400 	.word	0x400e1400
  4079c0:	400e1000 	.word	0x400e1000
  4079c4:	2040008d 	.word	0x2040008d
  4079c8:	00407571 	.word	0x00407571
  4079cc:	a5000001 	.word	0xa5000001
  4079d0:	004076a1 	.word	0x004076a1
  4079d4:	0040740d 	.word	0x0040740d
  4079d8:	0040710d 	.word	0x0040710d
  4079dc:	004105c0 	.word	0x004105c0
  4079e0:	0040ce59 	.word	0x0040ce59
  4079e4:	400e1850 	.word	0x400e1850
  4079e8:	0303af6b 	.word	0x0303af6b
  4079ec:	20401170 	.word	0x20401170
  4079f0:	400e0e00 	.word	0x400e0e00
  4079f4:	009a5649 	.word	0x009a5649
  4079f8:	00401a79 	.word	0x00401a79
  4079fc:	0181d7b6 	.word	0x0181d7b6
  407a00:	00406b19 	.word	0x00406b19
  407a04:	00401ba5 	.word	0x00401ba5
  407a08:	004105d8 	.word	0x004105d8
  407a0c:	06075ed6 	.word	0x06075ed6
  407a10:	20401144 	.word	0x20401144
  407a14:	20401160 	.word	0x20401160
  407a18:	204011bc 	.word	0x204011bc
  407a1c:	20401190 	.word	0x20401190

00407a20 <getHumidity>:
/***********************************************************************/
/*  Get Humidity
***********************************************************************/
short getHumidity(char slaveAddress){
  407a20:	b5f0      	push	{r4, r5, r6, r7, lr}
  407a22:	b083      	sub	sp, #12
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407a24:	4c26      	ldr	r4, [pc, #152]	; (407ac0 <getHumidity+0xa0>)
  407a26:	f44f 7600 	mov.w	r6, #512	; 0x200
  407a2a:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407a2c:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407a30:	f44f 7580 	mov.w	r5, #256	; 0x100
  407a34:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407a36:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407a3a:	4b22      	ldr	r3, [pc, #136]	; (407ac4 <getHumidity+0xa4>)
  407a3c:	2240      	movs	r2, #64	; 0x40
  407a3e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407a40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407a44:	635a      	str	r2, [r3, #52]	; 0x34
	char errCtr;
		SENS_SCL_FLOAT;
		SENS_SDA_FLOAT;
		SENSPWR_OUTPUT;
		SENSPWR_ON;
		delay_ms(10);
  407a46:	4820      	ldr	r0, [pc, #128]	; (407ac8 <getHumidity+0xa8>)
  407a48:	4f20      	ldr	r7, [pc, #128]	; (407acc <getHumidity+0xac>)
  407a4a:	47b8      	blx	r7
 		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  407a4c:	4a20      	ldr	r2, [pc, #128]	; (407ad0 <getHumidity+0xb0>)
  407a4e:	4b21      	ldr	r3, [pc, #132]	; (407ad4 <getHumidity+0xb4>)
  407a50:	601a      	str	r2, [r3, #0]
  407a52:	6366      	str	r6, [r4, #52]	; 0x34
  407a54:	6365      	str	r5, [r4, #52]	; 0x34
		SENS_SCL_LO;//Make them both low so that when the code drives them they will be low.
		SENS_SDA_LO;//Make them both low so that when the code drives them they will be low.
		data[0]=0xF5;//Config
  407a56:	a802      	add	r0, sp, #8
  407a58:	23f5      	movs	r3, #245	; 0xf5
  407a5a:	f800 3d08 	strb.w	r3, [r0, #-8]!
		write_data_L(data,1,0x80,0);
  407a5e:	2300      	movs	r3, #0
  407a60:	2280      	movs	r2, #128	; 0x80
  407a62:	2101      	movs	r1, #1
  407a64:	4c1c      	ldr	r4, [pc, #112]	; (407ad8 <getHumidity+0xb8>)
  407a66:	47a0      	blx	r4
		delay_us(1);
  407a68:	2033      	movs	r0, #51	; 0x33
  407a6a:	47b8      	blx	r7
		errCtr=20;
		data[0]=0;data[1]=0;data[2]=0;
  407a6c:	2300      	movs	r3, #0
  407a6e:	f88d 3000 	strb.w	r3, [sp]
  407a72:	f88d 3001 	strb.w	r3, [sp, #1]
  407a76:	f88d 3002 	strb.w	r3, [sp, #2]
  407a7a:	2414      	movs	r4, #20
		while((errCtr>0)&&(read_bytes_L(data,3,0x80)==0)){
  407a7c:	4d17      	ldr	r5, [pc, #92]	; (407adc <getHumidity+0xbc>)
			errCtr--;
			delay_ms(2);
  407a7e:	4f18      	ldr	r7, [pc, #96]	; (407ae0 <getHumidity+0xc0>)
  407a80:	4e12      	ldr	r6, [pc, #72]	; (407acc <getHumidity+0xac>)
		while((errCtr>0)&&(read_bytes_L(data,3,0x80)==0)){
  407a82:	2280      	movs	r2, #128	; 0x80
  407a84:	2103      	movs	r1, #3
  407a86:	4668      	mov	r0, sp
  407a88:	47a8      	blx	r5
  407a8a:	b928      	cbnz	r0, 407a98 <getHumidity+0x78>
			delay_ms(2);
  407a8c:	4638      	mov	r0, r7
  407a8e:	47b0      	blx	r6
  407a90:	1e63      	subs	r3, r4, #1
		while((errCtr>0)&&(read_bytes_L(data,3,0x80)==0)){
  407a92:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  407a96:	d1f4      	bne.n	407a82 <getHumidity+0x62>
		}
		humidityMeasurement=(((unsigned int)data[0])<<2)+(((unsigned int)data[1])>>6);//only want the upper ten bits
  407a98:	f89d 0000 	ldrb.w	r0, [sp]
  407a9c:	f89d 2001 	ldrb.w	r2, [sp, #1]
  407aa0:	0992      	lsrs	r2, r2, #6
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407aa2:	4b07      	ldr	r3, [pc, #28]	; (407ac0 <getHumidity+0xa0>)
  407aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
  407aa8:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407aaa:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407aae:	f44f 7180 	mov.w	r1, #256	; 0x100
  407ab2:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407ab4:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		SENS_SCL_FLOAT;
		SENS_SDA_FLOAT;
	return(humidityMeasurement);
}
  407ab8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  407abc:	b003      	add	sp, #12
  407abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407ac0:	400e1200 	.word	0x400e1200
  407ac4:	400e0e00 	.word	0x400e0e00
  407ac8:	0007b784 	.word	0x0007b784
  407acc:	2040008d 	.word	0x2040008d
  407ad0:	a5000001 	.word	0xa5000001
  407ad4:	400e1850 	.word	0x400e1850
  407ad8:	00401979 	.word	0x00401979
  407adc:	00401919 	.word	0x00401919
  407ae0:	00018b1b 	.word	0x00018b1b

00407ae4 <getALSfromVEML>:
// 		return ((temperature<<16)+pressure);
//  }
/***********************************************************************/
/*  Get Ambient Light from VEML Sensor
***********************************************************************/
short getALSfromVEML(char slaveAddress){
  407ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ae8:	b083      	sub	sp, #12
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407aea:	4d35      	ldr	r5, [pc, #212]	; (407bc0 <getALSfromVEML+0xdc>)
  407aec:	f44f 7700 	mov.w	r7, #512	; 0x200
  407af0:	636f      	str	r7, [r5, #52]	; 0x34
  407af2:	f44f 7680 	mov.w	r6, #256	; 0x100
  407af6:	636e      	str	r6, [r5, #52]	; 0x34
	unsigned char data[4];
	char iters;
	unsigned short lightMeasurement;
		SENS_SCL_LO;
		SENS_SDA_LO;
		data[0]=0x01;//Register Address 01
  407af8:	f04f 0901 	mov.w	r9, #1
  407afc:	f88d 9004 	strb.w	r9, [sp, #4]
		data[1]=0x00;//Config:  High threshold window
  407b00:	2400      	movs	r4, #0
  407b02:	f88d 4005 	strb.w	r4, [sp, #5]
		data[2]=0x00;
  407b06:	f88d 4006 	strb.w	r4, [sp, #6]
		write_data_L(data,3,0x20,0);
  407b0a:	4623      	mov	r3, r4
  407b0c:	2220      	movs	r2, #32
  407b0e:	2103      	movs	r1, #3
  407b10:	a801      	add	r0, sp, #4
  407b12:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 407bd8 <getALSfromVEML+0xf4>
  407b16:	47c0      	blx	r8
		data[0]=0x02;//Register Address 02
  407b18:	f04f 0b02 	mov.w	fp, #2
  407b1c:	f88d b004 	strb.w	fp, [sp, #4]
		data[1]=0x00;//Config:  Low threshold window
  407b20:	f88d 4005 	strb.w	r4, [sp, #5]
		data[2]=0x00;
  407b24:	f88d 4006 	strb.w	r4, [sp, #6]
		write_data_L(data,3,0x20,0);
  407b28:	4623      	mov	r3, r4
  407b2a:	2220      	movs	r2, #32
  407b2c:	2103      	movs	r1, #3
  407b2e:	a801      	add	r0, sp, #4
  407b30:	47c0      	blx	r8
		data[0]=0x03;//Register Address 03
  407b32:	f04f 0a03 	mov.w	sl, #3
  407b36:	f88d a004 	strb.w	sl, [sp, #4]
		data[1]=0x00;//Power saving mode
  407b3a:	f88d 4005 	strb.w	r4, [sp, #5]
		data[2]=0x00;
  407b3e:	f88d 4006 	strb.w	r4, [sp, #6]
		write_data_L(data,3,0x20,0);
  407b42:	4623      	mov	r3, r4
  407b44:	2220      	movs	r2, #32
  407b46:	4651      	mov	r1, sl
  407b48:	a801      	add	r0, sp, #4
  407b4a:	47c0      	blx	r8
		data[0]=0x00;//Register Address 00
  407b4c:	f88d 4004 	strb.w	r4, [sp, #4]
		data[1]=0x00;//Config:  0x000 00(sensitivity=1) 0 00(integration time=100ms)
  407b50:	f88d 4005 	strb.w	r4, [sp, #5]
		data[2]=0x00;//00(integration time) 00(persistence) 00 0(no interrupt) 0(power on)
  407b54:	f88d 4006 	strb.w	r4, [sp, #6]
		write_data_L(data,3,0x20,0);
  407b58:	4623      	mov	r3, r4
  407b5a:	2220      	movs	r2, #32
  407b5c:	4651      	mov	r1, sl
  407b5e:	a801      	add	r0, sp, #4
  407b60:	47c0      	blx	r8
		delay_ms(100);
  407b62:	4818      	ldr	r0, [pc, #96]	; (407bc4 <getALSfromVEML+0xe0>)
  407b64:	4b18      	ldr	r3, [pc, #96]	; (407bc8 <getALSfromVEML+0xe4>)
  407b66:	4798      	blx	r3
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  407b68:	4a18      	ldr	r2, [pc, #96]	; (407bcc <getALSfromVEML+0xe8>)
  407b6a:	4b19      	ldr	r3, [pc, #100]	; (407bd0 <getALSfromVEML+0xec>)
  407b6c:	601a      	str	r2, [r3, #0]
		data[0]=0x04;//
  407b6e:	2304      	movs	r3, #4
  407b70:	f88d 3004 	strb.w	r3, [sp, #4]
		write_data_L(data,1,0x20,1);
  407b74:	464b      	mov	r3, r9
  407b76:	2220      	movs	r2, #32
  407b78:	4649      	mov	r1, r9
  407b7a:	a801      	add	r0, sp, #4
  407b7c:	47c0      	blx	r8
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407b7e:	616f      	str	r7, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407b80:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407b84:	616e      	str	r6, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407b86:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		SENS_SCL_FLOAT;
 		SENS_SDA_FLOAT;
		for(iters=0;iters<3;iters++)data[iters]=0;//ZERO the buffer
  407b8a:	f88d 4004 	strb.w	r4, [sp, #4]
  407b8e:	f88d 4005 	strb.w	r4, [sp, #5]
  407b92:	f88d 4006 	strb.w	r4, [sp, #6]
 		read_bytes_L(data,2,0x20);
  407b96:	2220      	movs	r2, #32
  407b98:	4659      	mov	r1, fp
  407b9a:	a801      	add	r0, sp, #4
  407b9c:	4b0d      	ldr	r3, [pc, #52]	; (407bd4 <getALSfromVEML+0xf0>)
  407b9e:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407ba0:	616f      	str	r7, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407ba2:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407ba6:	616e      	str	r6, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407ba8:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		SENS_SCL_FLOAT;
 		SENS_SDA_FLOAT;
		lightMeasurement = (data[1] << 4) + (data[0]>>4);
  407bac:	f89d 0005 	ldrb.w	r0, [sp, #5]
  407bb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
  407bb4:	091b      	lsrs	r3, r3, #4
	return(lightMeasurement);
}
  407bb6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  407bba:	b003      	add	sp, #12
  407bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407bc0:	400e1200 	.word	0x400e1200
  407bc4:	004d2b25 	.word	0x004d2b25
  407bc8:	2040008d 	.word	0x2040008d
  407bcc:	a5000001 	.word	0xa5000001
  407bd0:	400e1850 	.word	0x400e1850
  407bd4:	00401919 	.word	0x00401919
  407bd8:	00401979 	.word	0x00401979

00407bdc <mult64bit>:
		return (((compTemperature<<16)&0xFFFF0000)+(compPressure&0x0000FFFF));
 }
/***********************************************************************/
/*  32 x 32 = 64 bit MULTIPLY
***********************************************************************/
void mult64bit (unsigned int A32,unsigned int B32,unsigned int* resultHigh, unsigned int* resultLow) {
  407bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int Ahigh,Alow,Bhigh,Blow,BLALL,BLALH,BLAHL,BLAHH,BHALL,BHALH,BHAH,carry;
	Ahigh=(A32>>16)&0x0000FFFF;
  407bde:	0c04      	lsrs	r4, r0, #16
	Alow=A32&0x0000FFFF;
  407be0:	b280      	uxth	r0, r0
	Bhigh=(B32>>16)&0x0000FFFF;
  407be2:	0c0e      	lsrs	r6, r1, #16
	Blow=B32&0x0000FFFF;
  407be4:	b289      	uxth	r1, r1

	BLALH=Blow*Alow;
  407be6:	fb01 f700 	mul.w	r7, r1, r0
	BLALL=BLALH;
	BLALH=(BLALH>>16)&0x0000FFFF;
	BLALL&=0x0000FFFF;

	BLAHH=Blow*Ahigh;
  407bea:	fb01 f104 	mul.w	r1, r1, r4
	BLAHL=BLAHH;
	BLAHH=(BLAHH>>16)&0x0000FFFF;
	BLAHL&=0x0000FFFF;
	BHALH=Bhigh*Alow;
  407bee:	fb06 f000 	mul.w	r0, r6, r0
	BLAHL&=0x0000FFFF;
  407bf2:	b28d      	uxth	r5, r1
	BHALL=BHALH;
	BHALH=(BHALH>>16)&0x0000FFFF;
	BHALL&=0x0000FFFF;
	BHAH=Bhigh*Ahigh;
	carry=((BLALH+BLAHL+BHALL)&0xFFFF0000)>>16;
  407bf4:	eb05 4517 	add.w	r5, r5, r7, lsr #16
  407bf8:	fa15 f580 	uxtah	r5, r5, r0

	*resultLow=((BLALH+BLAHL+BHALL)<<16)+BLALL;
  407bfc:	ea4f 4e05 	mov.w	lr, r5, lsl #16
  407c00:	fa1e f787 	uxtah	r7, lr, r7
  407c04:	601f      	str	r7, [r3, #0]
	BHALH=(BHALH>>16)&0x0000FFFF;
  407c06:	0c00      	lsrs	r0, r0, #16
	*resultHigh=BLAHH+BHALH+BHAH + carry;
  407c08:	eb00 4011 	add.w	r0, r0, r1, lsr #16
  407c0c:	fb06 0004 	mla	r0, r6, r4, r0
  407c10:	eb00 4015 	add.w	r0, r0, r5, lsr #16
  407c14:	6010      	str	r0, [r2, #0]
  407c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00407c18 <getAltimeterTemperatureTE>:
unsigned int getAltimeterTemperatureTE(char slaveAddr){
  407c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407c1c:	b08f      	sub	sp, #60	; 0x3c
		pmc_enable_periph_clk(ID_PIOD);
  407c1e:	2010      	movs	r0, #16
  407c20:	4bb3      	ldr	r3, [pc, #716]	; (407ef0 <getAltimeterTemperatureTE+0x2d8>)
  407c22:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407c24:	4fb3      	ldr	r7, [pc, #716]	; (407ef4 <getAltimeterTemperatureTE+0x2dc>)
  407c26:	f44f 7300 	mov.w	r3, #512	; 0x200
  407c2a:	617b      	str	r3, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407c30:	f44f 7380 	mov.w	r3, #256	; 0x100
  407c34:	617b      	str	r3, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407c3a:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 407f18 <getAltimeterTemperatureTE+0x300>
  407c3e:	f04f 0b40 	mov.w	fp, #64	; 0x40
  407c42:	f8ca b010 	str.w	fp, [sl, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407c46:	f8ca b0a0 	str.w	fp, [sl, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407c4a:	f8ca b034 	str.w	fp, [sl, #52]	; 0x34
		delay_ms(20);//looked fine even at only 1ms (when repeated every 500ms);
  407c4e:	48aa      	ldr	r0, [pc, #680]	; (407ef8 <getAltimeterTemperatureTE+0x2e0>)
  407c50:	4daa      	ldr	r5, [pc, #680]	; (407efc <getAltimeterTemperatureTE+0x2e4>)
  407c52:	47a8      	blx	r5
		data[0]=0x1E;//Altimeter RESET
  407c54:	ab0e      	add	r3, sp, #56	; 0x38
  407c56:	461a      	mov	r2, r3
  407c58:	231e      	movs	r3, #30
  407c5a:	f802 3d18 	strb.w	r3, [r2, #-24]!
  407c5e:	4610      	mov	r0, r2
		writeRet = write_data_L(data,1,0xEE,0);
  407c60:	2300      	movs	r3, #0
  407c62:	22ee      	movs	r2, #238	; 0xee
  407c64:	2101      	movs	r1, #1
  407c66:	4681      	mov	r9, r0
  407c68:	4ea5      	ldr	r6, [pc, #660]	; (407f00 <getAltimeterTemperatureTE+0x2e8>)
  407c6a:	47b0      	blx	r6
		delay_ms(4);//datasheet says 2.8ms needed after reset
  407c6c:	48a5      	ldr	r0, [pc, #660]	; (407f04 <getAltimeterTemperatureTE+0x2ec>)
  407c6e:	47a8      	blx	r5
		data[0]=0xA2;//Ax=read PROM
  407c70:	23a2      	movs	r3, #162	; 0xa2
  407c72:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_L(data,1,0xEE,0);
  407c76:	2300      	movs	r3, #0
  407c78:	22ee      	movs	r2, #238	; 0xee
  407c7a:	2101      	movs	r1, #1
  407c7c:	4648      	mov	r0, r9
  407c7e:	47b0      	blx	r6
		data[0]=0;data[1]=0;
  407c80:	2400      	movs	r4, #0
  407c82:	f88d 4020 	strb.w	r4, [sp, #32]
  407c86:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		readRet = read_bytes_L(data,2,0xEE);
  407c8a:	22ee      	movs	r2, #238	; 0xee
  407c8c:	2102      	movs	r1, #2
  407c8e:	4648      	mov	r0, r9
  407c90:	f8df 8288 	ldr.w	r8, [pc, #648]	; 407f1c <getAltimeterTemperatureTE+0x304>
  407c94:	47c0      	blx	r8
		C1=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  407c96:	f89d 3020 	ldrb.w	r3, [sp, #32]
  407c9a:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
  407c9e:	eb01 2303 	add.w	r3, r1, r3, lsl #8
  407ca2:	9302      	str	r3, [sp, #8]
		data[0]=0xA4;//Ax=read PROM
  407ca4:	23a4      	movs	r3, #164	; 0xa4
  407ca6:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_L(data,1,0xEE,0);
  407caa:	4623      	mov	r3, r4
  407cac:	22ee      	movs	r2, #238	; 0xee
  407cae:	2101      	movs	r1, #1
  407cb0:	4648      	mov	r0, r9
  407cb2:	47b0      	blx	r6
		data[0]=0;data[1]=0;
  407cb4:	f88d 4020 	strb.w	r4, [sp, #32]
  407cb8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		readRet = read_bytes_L(data,2,0xEE);
  407cbc:	22ee      	movs	r2, #238	; 0xee
  407cbe:	2102      	movs	r1, #2
  407cc0:	4648      	mov	r0, r9
  407cc2:	47c0      	blx	r8
		C2=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  407cc4:	f89d 2020 	ldrb.w	r2, [sp, #32]
  407cc8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  407ccc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  407cd0:	9303      	str	r3, [sp, #12]
		data[0]=0xA6;//Ax=read PROM
  407cd2:	23a6      	movs	r3, #166	; 0xa6
  407cd4:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_L(data,1,0xEE,0);
  407cd8:	4623      	mov	r3, r4
  407cda:	22ee      	movs	r2, #238	; 0xee
  407cdc:	2101      	movs	r1, #1
  407cde:	4648      	mov	r0, r9
  407ce0:	47b0      	blx	r6
		data[0]=0;data[1]=0;
  407ce2:	f88d 4020 	strb.w	r4, [sp, #32]
  407ce6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		readRet = read_bytes_L(data,2,0xEE);
  407cea:	22ee      	movs	r2, #238	; 0xee
  407cec:	2102      	movs	r1, #2
  407cee:	4648      	mov	r0, r9
  407cf0:	47c0      	blx	r8
		C3=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  407cf2:	f89d 2020 	ldrb.w	r2, [sp, #32]
  407cf6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  407cfa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  407cfe:	9304      	str	r3, [sp, #16]
		data[0]=0xA8;//Ax=read PROM
  407d00:	23a8      	movs	r3, #168	; 0xa8
  407d02:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_L(data,1,0xEE,0);
  407d06:	4623      	mov	r3, r4
  407d08:	22ee      	movs	r2, #238	; 0xee
  407d0a:	2101      	movs	r1, #1
  407d0c:	4648      	mov	r0, r9
  407d0e:	47b0      	blx	r6
		data[0]=0;data[1]=0;
  407d10:	f88d 4020 	strb.w	r4, [sp, #32]
  407d14:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		readRet = read_bytes_L(data,2,0xEE);
  407d18:	22ee      	movs	r2, #238	; 0xee
  407d1a:	2102      	movs	r1, #2
  407d1c:	4648      	mov	r0, r9
  407d1e:	47c0      	blx	r8
		C4=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  407d20:	f89d 2020 	ldrb.w	r2, [sp, #32]
  407d24:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  407d28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  407d2c:	9305      	str	r3, [sp, #20]
		data[0]=0xAA;//Ax=read PROM
  407d2e:	23aa      	movs	r3, #170	; 0xaa
  407d30:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_L(data,1,0xEE,0);
  407d34:	4623      	mov	r3, r4
  407d36:	22ee      	movs	r2, #238	; 0xee
  407d38:	2101      	movs	r1, #1
  407d3a:	4648      	mov	r0, r9
  407d3c:	47b0      	blx	r6
		data[0]=0;data[1]=0;
  407d3e:	f88d 4020 	strb.w	r4, [sp, #32]
  407d42:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		readRet = read_bytes_L(data,2,0xEE);
  407d46:	22ee      	movs	r2, #238	; 0xee
  407d48:	2102      	movs	r1, #2
  407d4a:	4648      	mov	r0, r9
  407d4c:	47c0      	blx	r8
		C5=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  407d4e:	f89d 2020 	ldrb.w	r2, [sp, #32]
  407d52:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  407d56:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  407d5a:	9306      	str	r3, [sp, #24]
		data[0]=0xAC;//Ax=read PROM
  407d5c:	23ac      	movs	r3, #172	; 0xac
  407d5e:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_L(data,1,0xEE,0);
  407d62:	4623      	mov	r3, r4
  407d64:	22ee      	movs	r2, #238	; 0xee
  407d66:	2101      	movs	r1, #1
  407d68:	4648      	mov	r0, r9
  407d6a:	47b0      	blx	r6
		data[0]=0;data[1]=0;
  407d6c:	f88d 4020 	strb.w	r4, [sp, #32]
  407d70:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		readRet = read_bytes_L(data,2,0xEE);
  407d74:	22ee      	movs	r2, #238	; 0xee
  407d76:	2102      	movs	r1, #2
  407d78:	4648      	mov	r0, r9
  407d7a:	47c0      	blx	r8
		C6=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  407d7c:	f89d 2020 	ldrb.w	r2, [sp, #32]
  407d80:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  407d84:	eb03 2202 	add.w	r2, r3, r2, lsl #8
  407d88:	9207      	str	r2, [sp, #28]
			data[0]=0x48;//48=start conversion of 24 bit pressure
  407d8a:	2348      	movs	r3, #72	; 0x48
  407d8c:	f88d 3020 	strb.w	r3, [sp, #32]
			writeRet = write_data_L(data,1,0xEE,0);
  407d90:	4623      	mov	r3, r4
  407d92:	22ee      	movs	r2, #238	; 0xee
  407d94:	2101      	movs	r1, #1
  407d96:	4648      	mov	r0, r9
  407d98:	47b0      	blx	r6
			delay_ms(9);//datasheet says 8ms delay for 4096 OverSampling (OSR) bits
  407d9a:	485b      	ldr	r0, [pc, #364]	; (407f08 <getAltimeterTemperatureTE+0x2f0>)
  407d9c:	47a8      	blx	r5
			data[0]=0x00;//00=Read Command
  407d9e:	f88d 4020 	strb.w	r4, [sp, #32]
			writeRet = write_data_L(data,1,0xEE,0);
  407da2:	4623      	mov	r3, r4
  407da4:	22ee      	movs	r2, #238	; 0xee
  407da6:	2101      	movs	r1, #1
  407da8:	4648      	mov	r0, r9
  407daa:	47b0      	blx	r6
			data[0]=0;data[1]=0;data[2]=0;
  407dac:	f88d 4020 	strb.w	r4, [sp, #32]
  407db0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  407db4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
			readRet = read_bytes_L(data,3,0xEE);
  407db8:	22ee      	movs	r2, #238	; 0xee
  407dba:	2103      	movs	r1, #3
  407dbc:	f8cd 9004 	str.w	r9, [sp, #4]
  407dc0:	4648      	mov	r0, r9
  407dc2:	47c0      	blx	r8
			rawPressure+=(((int)data[0])<<16)+(((int)data[1])<<8)+(((int)data[2]));
  407dc4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  407dc8:	f89d 9021 	ldrb.w	r9, [sp, #33]	; 0x21
  407dcc:	ea4f 2909 	mov.w	r9, r9, lsl #8
  407dd0:	eb09 4903 	add.w	r9, r9, r3, lsl #16
  407dd4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
  407dd8:	4499      	add	r9, r3
			data[0]=0x58;//58=start conversion of 24 bit temperature
  407dda:	2358      	movs	r3, #88	; 0x58
  407ddc:	f88d 3020 	strb.w	r3, [sp, #32]
			writeRet = write_data_L(data,1,0xEE,0);
  407de0:	4623      	mov	r3, r4
  407de2:	22ee      	movs	r2, #238	; 0xee
  407de4:	2101      	movs	r1, #1
  407de6:	9801      	ldr	r0, [sp, #4]
  407de8:	47b0      	blx	r6
			delay_ms(9);
  407dea:	4847      	ldr	r0, [pc, #284]	; (407f08 <getAltimeterTemperatureTE+0x2f0>)
  407dec:	47a8      	blx	r5
			data[0]=0x00;//00=Read Command
  407dee:	f88d 4020 	strb.w	r4, [sp, #32]
			writeRet = write_data_L(data,1,0xEE,0);
  407df2:	4623      	mov	r3, r4
  407df4:	22ee      	movs	r2, #238	; 0xee
  407df6:	2101      	movs	r1, #1
  407df8:	9d01      	ldr	r5, [sp, #4]
  407dfa:	4628      	mov	r0, r5
  407dfc:	47b0      	blx	r6
			data[0]=0;data[1]=0;data[2]=0;
  407dfe:	f88d 4020 	strb.w	r4, [sp, #32]
  407e02:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  407e06:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
			readRet = read_bytes_L(data,3,0xEE);
  407e0a:	22ee      	movs	r2, #238	; 0xee
  407e0c:	2103      	movs	r1, #3
  407e0e:	4628      	mov	r0, r5
  407e10:	47c0      	blx	r8
			rawTemperature+=(((unsigned int)data[0])<<16)+(((unsigned int)data[1])<<8)+(((unsigned int)data[2]));
  407e12:	f89d 3020 	ldrb.w	r3, [sp, #32]
  407e16:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
  407e1a:	022d      	lsls	r5, r5, #8
  407e1c:	eb05 4503 	add.w	r5, r5, r3, lsl #16
  407e20:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
  407e24:	441d      	add	r5, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407e26:	f44f 7200 	mov.w	r2, #512	; 0x200
  407e2a:	617a      	str	r2, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407e2c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407e30:	f44f 7280 	mov.w	r2, #256	; 0x100
  407e34:	617a      	str	r2, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407e36:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407e3a:	f8ca b010 	str.w	fp, [sl, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407e3e:	f8ca b0a0 	str.w	fp, [sl, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407e42:	f8ca b030 	str.w	fp, [sl, #48]	; 0x30
			C5=C5<<8;
  407e46:	9b06      	ldr	r3, [sp, #24]
  407e48:	021b      	lsls	r3, r3, #8
			if(rawTemperature>C5){
  407e4a:	429d      	cmp	r5, r3
  407e4c:	d868      	bhi.n	407f20 <getAltimeterTemperatureTE+0x308>
					dT=C5-rawTemperature;//dT is negative
  407e4e:	1b5d      	subs	r5, r3, r5
					mult64bit(dT,C6,&HH64,&LL64);//28325
  407e50:	ab0c      	add	r3, sp, #48	; 0x30
  407e52:	aa0d      	add	r2, sp, #52	; 0x34
  407e54:	9907      	ldr	r1, [sp, #28]
  407e56:	4628      	mov	r0, r5
  407e58:	4c2c      	ldr	r4, [pc, #176]	; (407f0c <getAltimeterTemperatureTE+0x2f4>)
  407e5a:	47a0      	blx	r4
					below20 = ((int)((LL64>>23)+(HH64<<9)));
  407e5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  407e5e:	0264      	lsls	r4, r4, #9
  407e60:	980c      	ldr	r0, [sp, #48]	; 0x30
  407e62:	eb04 54d0 	add.w	r4, r4, r0, lsr #23
						compTemperature = 0-(below20-2000);
  407e66:	f5c4 64fa 	rsb	r4, r4, #2000	; 0x7d0
						mult64bit(C4,dT,&HH64,&LL64);
  407e6a:	ab0c      	add	r3, sp, #48	; 0x30
  407e6c:	aa0d      	add	r2, sp, #52	; 0x34
  407e6e:	4629      	mov	r1, r5
  407e70:	9805      	ldr	r0, [sp, #20]
  407e72:	f8df 8098 	ldr.w	r8, [pc, #152]	; 407f0c <getAltimeterTemperatureTE+0x2f4>
  407e76:	47c0      	blx	r8
						OFF_L+=(HH64<<25);
  407e78:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  407e7a:	067e      	lsls	r6, r7, #25
  407e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407e7e:	eb06 16d3 	add.w	r6, r6, r3, lsr #7
						mult64bit(C3,dT,&HH64,&LL64);
  407e82:	ab0c      	add	r3, sp, #48	; 0x30
  407e84:	aa0d      	add	r2, sp, #52	; 0x34
  407e86:	4629      	mov	r1, r5
  407e88:	9804      	ldr	r0, [sp, #16]
  407e8a:	47c0      	blx	r8
						SENS_L+=(HH64<<24);
  407e8c:	990d      	ldr	r1, [sp, #52]	; 0x34
  407e8e:	060b      	lsls	r3, r1, #24
  407e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407e92:	eb03 2312 	add.w	r3, r3, r2, lsr #8
						SENS_LL=SENS_L&0x00007FFF;
  407e96:	f3c3 000e 	ubfx	r0, r3, #0, #15
						SENS_H=(HH64>>8)&0x00FFFFFF;
  407e9a:	0a09      	lsrs	r1, r1, #8
						SENS_M=C1-SENS_M;
  407e9c:	9a02      	ldr	r2, [sp, #8]
  407e9e:	eba2 4141 	sub.w	r1, r2, r1, lsl #17
  407ea2:	eba1 31d3 	sub.w	r1, r1, r3, lsr #15
						mult64bit(rawPressure,SENS_L,&HH64,&LL64);
  407ea6:	ab0c      	add	r3, sp, #48	; 0x30
  407ea8:	aa0d      	add	r2, sp, #52	; 0x34
  407eaa:	eb00 31c1 	add.w	r1, r0, r1, lsl #15
  407eae:	4648      	mov	r0, r9
  407eb0:	47c0      	blx	r8
						compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  407eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407eb4:	02db      	lsls	r3, r3, #11
  407eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407eb8:	eb03 5352 	add.w	r3, r3, r2, lsr #21
						OFF_LL=OFF_L&0x0000FFFF;
  407ebc:	b2b2      	uxth	r2, r6
						compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  407ebe:	1a9b      	subs	r3, r3, r2
						OFF_H=(HH64>>7)&0x01FFFFFF;
  407ec0:	09ff      	lsrs	r7, r7, #7
						OFF_M=C2-OFF_M;
  407ec2:	9a03      	ldr	r2, [sp, #12]
  407ec4:	eba2 4707 	sub.w	r7, r2, r7, lsl #16
  407ec8:	eba7 4616 	sub.w	r6, r7, r6, lsr #16
						compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  407ecc:	eba3 4306 	sub.w	r3, r3, r6, lsl #16
  407ed0:	0bdb      	lsrs	r3, r3, #15
		compTemperature/=10;
  407ed2:	480f      	ldr	r0, [pc, #60]	; (407f10 <getAltimeterTemperatureTE+0x2f8>)
  407ed4:	fb80 2004 	smull	r2, r0, r0, r4
  407ed8:	17e4      	asrs	r4, r4, #31
  407eda:	ebc4 00a0 	rsb	r0, r4, r0, asr #2
		compPressure/=10;
  407ede:	4e0d      	ldr	r6, [pc, #52]	; (407f14 <getAltimeterTemperatureTE+0x2fc>)
  407ee0:	fba6 2303 	umull	r2, r3, r6, r3
		return (((compTemperature<<16)&0xFFFF0000)+(compPressure&0x0000FFFF));
  407ee4:	08db      	lsrs	r3, r3, #3
 }
  407ee6:	eb03 4000 	add.w	r0, r3, r0, lsl #16
  407eea:	b00f      	add	sp, #60	; 0x3c
  407eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ef0:	004035a1 	.word	0x004035a1
  407ef4:	400e1200 	.word	0x400e1200
  407ef8:	000f6f08 	.word	0x000f6f08
  407efc:	2040008d 	.word	0x2040008d
  407f00:	00401979 	.word	0x00401979
  407f04:	00031635 	.word	0x00031635
  407f08:	0006f1f7 	.word	0x0006f1f7
  407f0c:	00407bdd 	.word	0x00407bdd
  407f10:	66666667 	.word	0x66666667
  407f14:	cccccccd 	.word	0xcccccccd
  407f18:	400e0e00 	.word	0x400e0e00
  407f1c:	00401919 	.word	0x00401919
				dT=rawTemperature-C5;//dT is positive
  407f20:	1aed      	subs	r5, r5, r3
				mult64bit(dT,C6,&HH64,&LL64);
  407f22:	ab0c      	add	r3, sp, #48	; 0x30
  407f24:	aa0d      	add	r2, sp, #52	; 0x34
  407f26:	9907      	ldr	r1, [sp, #28]
  407f28:	4628      	mov	r0, r5
  407f2a:	4e1b      	ldr	r6, [pc, #108]	; (407f98 <getAltimeterTemperatureTE+0x380>)
  407f2c:	47b0      	blx	r6
				compTemperature=((int)((LL64>>23)+(HH64<<9)))+2000;
  407f2e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  407f30:	0264      	lsls	r4, r4, #9
  407f32:	980c      	ldr	r0, [sp, #48]	; 0x30
  407f34:	eb04 54d0 	add.w	r4, r4, r0, lsr #23
  407f38:	f504 64fa 	add.w	r4, r4, #2000	; 0x7d0
				mult64bit(C4,dT,&HH64,&LL64);
  407f3c:	ab0c      	add	r3, sp, #48	; 0x30
  407f3e:	aa0d      	add	r2, sp, #52	; 0x34
  407f40:	4629      	mov	r1, r5
  407f42:	9805      	ldr	r0, [sp, #20]
  407f44:	47b0      	blx	r6
				OFF_L+=(HH64<<25);
  407f46:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  407f48:	067f      	lsls	r7, r7, #25
  407f4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407f4c:	eb07 17d3 	add.w	r7, r7, r3, lsr #7
				mult64bit(C3,dT,&HH64,&LL64);
  407f50:	ab0c      	add	r3, sp, #48	; 0x30
  407f52:	aa0d      	add	r2, sp, #52	; 0x34
  407f54:	4629      	mov	r1, r5
  407f56:	9804      	ldr	r0, [sp, #16]
  407f58:	47b0      	blx	r6
				SENS_L+=(HH64<<24);
  407f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407f5c:	061b      	lsls	r3, r3, #24
  407f5e:	990c      	ldr	r1, [sp, #48]	; 0x30
  407f60:	eb03 2311 	add.w	r3, r3, r1, lsr #8
				SENS_LL=SENS_L&0x00007FFF;
  407f64:	f3c3 000e 	ubfx	r0, r3, #0, #15
				SENS_M=(SENS_H<<17)+(SENS_L>>15)+C1;
  407f68:	9a02      	ldr	r2, [sp, #8]
  407f6a:	eb02 31d3 	add.w	r1, r2, r3, lsr #15
				mult64bit(rawPressure,SENS_L,&HH64,&LL64);
  407f6e:	ab0c      	add	r3, sp, #48	; 0x30
  407f70:	aa0d      	add	r2, sp, #52	; 0x34
  407f72:	eb00 31c1 	add.w	r1, r0, r1, lsl #15
  407f76:	4648      	mov	r0, r9
  407f78:	47b0      	blx	r6
				compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  407f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407f7c:	02db      	lsls	r3, r3, #11
  407f7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407f80:	eb03 5352 	add.w	r3, r3, r2, lsr #21
				OFF_LL=OFF_L&0x0000FFFF;
  407f84:	b2ba      	uxth	r2, r7
				compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  407f86:	1a9b      	subs	r3, r3, r2
				OFF_M=(OFF_H<<16)+(OFF_L>>16)+C2;
  407f88:	9a03      	ldr	r2, [sp, #12]
  407f8a:	eb02 4717 	add.w	r7, r2, r7, lsr #16
				compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  407f8e:	eba3 4307 	sub.w	r3, r3, r7, lsl #16
  407f92:	0bdb      	lsrs	r3, r3, #15
  407f94:	e79d      	b.n	407ed2 <getAltimeterTemperatureTE+0x2ba>
  407f96:	bf00      	nop
  407f98:	00407bdd 	.word	0x00407bdd

00407f9c <sendPacketToTiny32>:
}
/*********************************************************
 * SEND PACKET TO TINY
 *********************************************************/
void sendPacketToTiny32(char partialMin){
  407f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407fa0:	4b25      	ldr	r3, [pc, #148]	; (408038 <sendPacketToTiny32+0x9c>)
  407fa2:	2208      	movs	r2, #8
  407fa4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407fa6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407faa:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407fac:	4c23      	ldr	r4, [pc, #140]	; (40803c <sendPacketToTiny32+0xa0>)
  407fae:	2601      	movs	r6, #1
  407fb0:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407fb2:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407fb6:	2704      	movs	r7, #4
  407fb8:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407fba:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407fbe:	6367      	str	r7, [r4, #52]	; 0x34
	ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);//WakeUp Tiny
	ioport_set_pin_level(BigTiny_CLK, 1);//start condition
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);//WakeUp Tiny
	ioport_set_pin_dir(ToTinyWU, IOPORT_DIR_OUTPUT);//WakeUp Tiny
	ioport_set_pin_level(ToTinyWU,0);//WakeUp Tiny
	minPacketForTiny[0]|=(char)((minsNow%6)&0x07);
  407fc0:	4d1f      	ldr	r5, [pc, #124]	; (408040 <sendPacketToTiny32+0xa4>)
  407fc2:	4b20      	ldr	r3, [pc, #128]	; (408044 <sendPacketToTiny32+0xa8>)
  407fc4:	681b      	ldr	r3, [r3, #0]
  407fc6:	4a20      	ldr	r2, [pc, #128]	; (408048 <sendPacketToTiny32+0xac>)
  407fc8:	fba2 1203 	umull	r1, r2, r2, r3
  407fcc:	0892      	lsrs	r2, r2, #2
  407fce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  407fd2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  407fd6:	f003 0307 	and.w	r3, r3, #7
  407fda:	782a      	ldrb	r2, [r5, #0]
  407fdc:	4313      	orrs	r3, r2
  407fde:	702b      	strb	r3, [r5, #0]
	minPacketForTiny[1]=partialMin;//Derived from RTC minutes, used by Tiny to determine which portion of Loc to return.
  407fe0:	7068      	strb	r0, [r5, #1]
	crcrcrc=calcCRC(minPacketForTiny,2);
  407fe2:	2102      	movs	r1, #2
  407fe4:	4628      	mov	r0, r5
  407fe6:	4b19      	ldr	r3, [pc, #100]	; (40804c <sendPacketToTiny32+0xb0>)
  407fe8:	4798      	blx	r3
	minPacketForTiny[2]=crcrcrc>>8;
  407fea:	f340 2307 	sbfx	r3, r0, #8, #8
  407fee:	70ab      	strb	r3, [r5, #2]
	minPacketForTiny[3]=crcrcrc&0x00FF;
  407ff0:	70e8      	strb	r0, [r5, #3]
	delay_us(50);//was 50us for Tiny817, which didn't always work.
  407ff2:	f640 10e1 	movw	r0, #2529	; 0x9e1
  407ff6:	4b16      	ldr	r3, [pc, #88]	; (408050 <sendPacketToTiny32+0xb4>)
  407ff8:	4798      	blx	r3
	sendCmdToTiny(minPacketForTiny[0]);
  407ffa:	7828      	ldrb	r0, [r5, #0]
  407ffc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 408054 <sendPacketToTiny32+0xb8>
  408000:	47c0      	blx	r8
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408002:	6327      	str	r7, [r4, #48]	; 0x30
	ioport_set_pin_level(ToTinyWU,1);//UnWakeUp Tiny
	sendCmdToTiny(minPacketForTiny[1]);
  408004:	7868      	ldrb	r0, [r5, #1]
  408006:	47c0      	blx	r8
	sendCmdToTiny(minPacketForTiny[2]);
  408008:	78a8      	ldrb	r0, [r5, #2]
  40800a:	47c0      	blx	r8
	sendCmdToTiny(minPacketForTiny[3]);
  40800c:	78e8      	ldrb	r0, [r5, #3]
  40800e:	47c0      	blx	r8
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  408010:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408012:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_PUDR = mask;
  408016:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408018:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40801c:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40801e:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408020:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408024:	6f23      	ldr	r3, [r4, #112]	; 0x70
  408026:	f023 0301 	bic.w	r3, r3, #1
  40802a:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40802c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40802e:	f023 0301 	bic.w	r3, r3, #1
  408032:	6763      	str	r3, [r4, #116]	; 0x74
  408034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408038:	400e1400 	.word	0x400e1400
  40803c:	400e1000 	.word	0x400e1000
  408040:	204011ec 	.word	0x204011ec
  408044:	20401190 	.word	0x20401190
  408048:	aaaaaaab 	.word	0xaaaaaaab
  40804c:	004076a1 	.word	0x004076a1
  408050:	2040008d 	.word	0x2040008d
  408054:	0040740d 	.word	0x0040740d

00408058 <getSetDeviceID>:
	ioport_set_pin_mode(BigTiny_DAT, 0);//BigTiny DAT
}
 /***********************************************************************/
 /*  READ ATMEL'S UNIQUE CHIP ID
 ***********************************************************************/
void getSetDeviceID(void){
  408058:	b500      	push	{lr}
  40805a:	b085      	sub	sp, #20
	char rdIDerr;
	int unique_id[4];
	rdIDerr = flash_read_unique_id(unique_id, 4);
  40805c:	2104      	movs	r1, #4
  40805e:	4668      	mov	r0, sp
  408060:	4b17      	ldr	r3, [pc, #92]	; (4080c0 <getSetDeviceID+0x68>)
  408062:	4798      	blx	r3
	if (rdIDerr != FLASH_RC_OK) {
  408064:	b2c0      	uxtb	r0, r0
  408066:	bb20      	cbnz	r0, 4080b2 <getSetDeviceID+0x5a>
		LCDclear();
		printf("UniqueID error");
	}
	DEVICEID[0]=(char)(unique_id[0]>>24);
  408068:	9a00      	ldr	r2, [sp, #0]
  40806a:	4b16      	ldr	r3, [pc, #88]	; (4080c4 <getSetDeviceID+0x6c>)
  40806c:	1611      	asrs	r1, r2, #24
  40806e:	7019      	strb	r1, [r3, #0]
	DEVICEID[1]=(char)((unique_id[0]>>16)&0x00FF);
  408070:	1411      	asrs	r1, r2, #16
  408072:	7059      	strb	r1, [r3, #1]
	DEVICEID[2]=(char)((unique_id[0]>>8)&0x00FF);
  408074:	1212      	asrs	r2, r2, #8
  408076:	709a      	strb	r2, [r3, #2]
	DEVICEID[3]=0x30;//(char)(unique_id[0]&0x00FF);
  408078:	2230      	movs	r2, #48	; 0x30
  40807a:	70da      	strb	r2, [r3, #3]
	DEVICEID[4]=(char)(unique_id[1]>>24);
  40807c:	9a01      	ldr	r2, [sp, #4]
  40807e:	1611      	asrs	r1, r2, #24
  408080:	7119      	strb	r1, [r3, #4]
	DEVICEID[5]=(char)((unique_id[1]>>16)&0x00FF);
  408082:	1411      	asrs	r1, r2, #16
  408084:	7159      	strb	r1, [r3, #5]
	DEVICEID[6]=(char)((unique_id[1]>>8)&0x00FF);
  408086:	1211      	asrs	r1, r2, #8
  408088:	7199      	strb	r1, [r3, #6]
	DEVICEID[7]=(char)(unique_id[1]&0x00FF);
  40808a:	71da      	strb	r2, [r3, #7]
	DEVICEID[8]=(char)(unique_id[2]>>24);
  40808c:	9a02      	ldr	r2, [sp, #8]
  40808e:	1611      	asrs	r1, r2, #24
  408090:	7219      	strb	r1, [r3, #8]
	DEVICEID[9]=(char)((unique_id[2]>>16)&0x00FF);
  408092:	1411      	asrs	r1, r2, #16
  408094:	7259      	strb	r1, [r3, #9]
	DEVICEID[10]=(char)((unique_id[2]>>8)&0x00FF);
  408096:	1211      	asrs	r1, r2, #8
  408098:	7299      	strb	r1, [r3, #10]
	DEVICEID[11]=(char)(unique_id[2]&0x00FF);
  40809a:	72da      	strb	r2, [r3, #11]
	DEVICEID[12]=(char)(unique_id[3]>>24);
  40809c:	9a03      	ldr	r2, [sp, #12]
  40809e:	1611      	asrs	r1, r2, #24
  4080a0:	7319      	strb	r1, [r3, #12]
	DEVICEID[13]=(char)((unique_id[3]>>16)&0x00FF);
  4080a2:	1411      	asrs	r1, r2, #16
  4080a4:	7359      	strb	r1, [r3, #13]
	DEVICEID[14]=(char)((unique_id[3]>>8)&0x00FF);
  4080a6:	1211      	asrs	r1, r2, #8
  4080a8:	7399      	strb	r1, [r3, #14]
	DEVICEID[15]=(char)(unique_id[3]&0x00FF);
  4080aa:	73da      	strb	r2, [r3, #15]
}
  4080ac:	b005      	add	sp, #20
  4080ae:	f85d fb04 	ldr.w	pc, [sp], #4
		LCDclear();
  4080b2:	4b05      	ldr	r3, [pc, #20]	; (4080c8 <getSetDeviceID+0x70>)
  4080b4:	4798      	blx	r3
		printf("UniqueID error");
  4080b6:	4805      	ldr	r0, [pc, #20]	; (4080cc <getSetDeviceID+0x74>)
  4080b8:	4b05      	ldr	r3, [pc, #20]	; (4080d0 <getSetDeviceID+0x78>)
  4080ba:	4798      	blx	r3
  4080bc:	e7d4      	b.n	408068 <getSetDeviceID+0x10>
  4080be:	bf00      	nop
  4080c0:	00404ac9 	.word	0x00404ac9
  4080c4:	204011a8 	.word	0x204011a8
  4080c8:	00407379 	.word	0x00407379
  4080cc:	00410608 	.word	0x00410608
  4080d0:	0040ce59 	.word	0x0040ce59

004080d4 <configPinsSDRAM>:
	}
}
/***********************************************************************
 *    CONFIGURE SDRAM PINS
 ***********************************************************************/
void configPinsSDRAM(void){
  4080d4:	b510      	push	{r4, lr}
	pio_configure_pin(SDRAM_A0_PIO, SDRAM_A_FLAGS);	//V71 A2
  4080d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4080da:	2054      	movs	r0, #84	; 0x54
  4080dc:	4c4d      	ldr	r4, [pc, #308]	; (408214 <configPinsSDRAM+0x140>)
  4080de:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A1_PIO, SDRAM_A_FLAGS);	//V71 A3
  4080e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4080e4:	2055      	movs	r0, #85	; 0x55
  4080e6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);	//V71 A4
  4080e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4080ec:	2056      	movs	r0, #86	; 0x56
  4080ee:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  //V71 A5
  4080f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4080f4:	2057      	movs	r0, #87	; 0x57
  4080f6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  //V71 A6
  4080f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4080fc:	2058      	movs	r0, #88	; 0x58
  4080fe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  //V71 A7
  408100:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408104:	2059      	movs	r0, #89	; 0x59
  408106:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  //V71 A8
  408108:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40810c:	205a      	movs	r0, #90	; 0x5a
  40810e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  //V71 A9
  408110:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408114:	205b      	movs	r0, #91	; 0x5b
  408116:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);	 //V71 A10
  408118:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40811c:	205c      	movs	r0, #92	; 0x5c
  40811e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  //V71 A11
  408120:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408124:	205d      	movs	r0, #93	; 0x5d
  408126:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS); //V71 SDA10
  408128:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40812c:	206d      	movs	r0, #109	; 0x6d
  40812e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A13_FLAGS); //V71 A13
  408130:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408134:	205f      	movs	r0, #95	; 0x5f
  408136:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A12_PIO, SDRAM_A14_FLAGS); //V71 A14
  408138:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40813c:	2012      	movs	r0, #18
  40813e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  408140:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  408144:	2014      	movs	r0, #20
  408146:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA1_PIO, SDRAM_BA1_FLAGS);
  408148:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40814c:	2000      	movs	r0, #0
  40814e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  408150:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  408154:	2077      	movs	r0, #119	; 0x77
  408156:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  408158:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40815c:	206e      	movs	r0, #110	; 0x6e
  40815e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  408160:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408164:	204f      	movs	r0, #79	; 0x4f
  408166:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  408168:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40816c:	2070      	movs	r0, #112	; 0x70
  40816e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  408170:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  408174:	2071      	movs	r0, #113	; 0x71
  408176:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  408178:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40817c:	207d      	movs	r0, #125	; 0x7d
  40817e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  408180:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408184:	2052      	movs	r0, #82	; 0x52
  408186:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  408188:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40818c:	206f      	movs	r0, #111	; 0x6f
  40818e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);
  408190:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408194:	2040      	movs	r0, #64	; 0x40
  408196:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);
  408198:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40819c:	2041      	movs	r0, #65	; 0x41
  40819e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);
  4081a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4081a4:	2042      	movs	r0, #66	; 0x42
  4081a6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);
  4081a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4081ac:	2043      	movs	r0, #67	; 0x43
  4081ae:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);
  4081b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4081b4:	2044      	movs	r0, #68	; 0x44
  4081b6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);
  4081b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4081bc:	2045      	movs	r0, #69	; 0x45
  4081be:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);
  4081c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4081c4:	2046      	movs	r0, #70	; 0x46
  4081c6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);
  4081c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4081cc:	2047      	movs	r0, #71	; 0x47
  4081ce:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);
  4081d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4081d4:	2080      	movs	r0, #128	; 0x80
  4081d6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);
  4081d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4081dc:	2081      	movs	r0, #129	; 0x81
  4081de:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS);
  4081e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4081e4:	2082      	movs	r0, #130	; 0x82
  4081e6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS);
  4081e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4081ec:	2083      	movs	r0, #131	; 0x83
  4081ee:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS);
  4081f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4081f4:	2084      	movs	r0, #132	; 0x84
  4081f6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS);
  4081f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4081fc:	2085      	movs	r0, #133	; 0x85
  4081fe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS);
  408200:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408204:	200f      	movs	r0, #15
  408206:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS);
  408208:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40820c:	2010      	movs	r0, #16
  40820e:	47a0      	blx	r4
  408210:	bd10      	pop	{r4, pc}
  408212:	bf00      	nop
  408214:	0040329d 	.word	0x0040329d

00408218 <redBlink>:
}
 /***********************************************************************/
 /*    YELLOW BLINK ATSAM
 ***********************************************************************/
 void redBlink (int numBlinks) {
  408218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40821c:	4b0f      	ldr	r3, [pc, #60]	; (40825c <redBlink+0x44>)
  40821e:	2201      	movs	r2, #1
  408220:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408222:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 int i;
	 ioport_set_pin_dir(LED_RED_GPIO, IOPORT_DIR_OUTPUT);
	 for (i=numBlinks; i>0; i--){
  408226:	1e04      	subs	r4, r0, #0
  408228:	dd10      	ble.n	40824c <redBlink+0x34>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40822a:	461e      	mov	r6, r3
  40822c:	4617      	mov	r7, r2
  40822e:	4692      	mov	sl, r2
		 ioport_set_pin_level(LED_RED_GPIO, LED_ACTIVE_LEVEL); //LED ON
		 delay_ms(20);
  408230:	f8df 9030 	ldr.w	r9, [pc, #48]	; 408264 <redBlink+0x4c>
  408234:	4d0a      	ldr	r5, [pc, #40]	; (408260 <redBlink+0x48>)
		 ioport_set_pin_level(LED_RED_GPIO, LED_INACTIVE_LEVEL); //LED OFF
		 delay_ms(50);
  408236:	f8df 8030 	ldr.w	r8, [pc, #48]	; 408268 <redBlink+0x50>
  40823a:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		 delay_ms(20);
  40823e:	4648      	mov	r0, r9
  408240:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408242:	6337      	str	r7, [r6, #48]	; 0x30
		 delay_ms(50);
  408244:	4640      	mov	r0, r8
  408246:	47a8      	blx	r5
	 for (i=numBlinks; i>0; i--){
  408248:	3c01      	subs	r4, #1
  40824a:	d1f6      	bne.n	40823a <redBlink+0x22>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40824c:	4b03      	ldr	r3, [pc, #12]	; (40825c <redBlink+0x44>)
  40824e:	2201      	movs	r2, #1
  408250:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408252:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  408256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40825a:	bf00      	nop
  40825c:	400e1400 	.word	0x400e1400
  408260:	2040008d 	.word	0x2040008d
  408264:	000f6f08 	.word	0x000f6f08
  408268:	00269593 	.word	0x00269593

0040826c <resetPinsSDRAM>:
	printf("\r\n    %d MB\r\n", (uint16_t)(sd_mmc_get_capacity(slot) / 1024));
}
/***********************************************************************
 *    RESET SDRAM PINS
 ***********************************************************************/
void resetPinsSDRAM(void){
  40826c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		base->PIO_PUDR = mask;
  408270:	4bcb      	ldr	r3, [pc, #812]	; (4085a0 <resetPinsSDRAM+0x334>)
  408272:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  408276:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408278:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40827c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40827e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408284:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408286:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  40828a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40828c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40828e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  408292:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408294:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  408296:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  40829a:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40829c:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4082a0:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4082a2:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4082a4:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4082a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4082aa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  4082ae:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4082b0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4082b2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  4082b6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4082b8:	601f      	str	r7, [r3, #0]
		base->PIO_PUDR = mask;
  4082ba:	f44f 2680 	mov.w	r6, #262144	; 0x40000
  4082be:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4082c0:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4082c4:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4082c6:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4082c8:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4082cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4082ce:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
  4082d2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4082d4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4082d6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
  4082da:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4082dc:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  4082de:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
  4082e2:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4082e4:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4082e8:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4082ea:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4082ec:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4082f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4082f2:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4082f6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4082f8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4082fa:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4082fe:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408300:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  408302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  408306:	2401      	movs	r4, #1
  408308:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40830a:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40830e:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408310:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408312:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408316:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408318:	f021 0101 	bic.w	r1, r1, #1
  40831c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40831e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408320:	f021 0101 	bic.w	r1, r1, #1
  408324:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408326:	601c      	str	r4, [r3, #0]
		base->PIO_PUDR = mask;
  408328:	2002      	movs	r0, #2
  40832a:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40832c:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408330:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408332:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408334:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408338:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40833a:	f021 0102 	bic.w	r1, r1, #2
  40833e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408340:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408342:	f021 0102 	bic.w	r1, r1, #2
  408346:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408348:	6018      	str	r0, [r3, #0]
		base->PIO_PUDR = mask;
  40834a:	2104      	movs	r1, #4
  40834c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40834e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408352:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408354:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408356:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40835a:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  40835e:	f02e 0e04 	bic.w	lr, lr, #4
  408362:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408366:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  40836a:	f02e 0e04 	bic.w	lr, lr, #4
  40836e:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408372:	6019      	str	r1, [r3, #0]
		base->PIO_PUDR = mask;
  408374:	f04f 0e08 	mov.w	lr, #8
  408378:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40837c:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408380:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408384:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408388:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40838c:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  408390:	f02c 0c08 	bic.w	ip, ip, #8
  408394:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408398:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  40839c:	f02c 0c08 	bic.w	ip, ip, #8
  4083a0:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4083a4:	f8c3 e000 	str.w	lr, [r3]
		base->PIO_PUDR = mask;
  4083a8:	f04f 0c10 	mov.w	ip, #16
  4083ac:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4083b0:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4083b4:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4083b8:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4083bc:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4083c0:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  4083c4:	f028 0810 	bic.w	r8, r8, #16
  4083c8:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4083cc:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  4083d0:	f028 0810 	bic.w	r8, r8, #16
  4083d4:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4083d8:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  4083dc:	f04f 0c20 	mov.w	ip, #32
  4083e0:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4083e4:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4083e8:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4083ec:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4083f0:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4083f4:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  4083f8:	f028 0820 	bic.w	r8, r8, #32
  4083fc:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408400:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  408404:	f028 0820 	bic.w	r8, r8, #32
  408408:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40840c:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  408410:	f04f 0c40 	mov.w	ip, #64	; 0x40
  408414:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408418:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40841c:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408420:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408424:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408428:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  40842c:	f028 0840 	bic.w	r8, r8, #64	; 0x40
  408430:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408434:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  408438:	f028 0840 	bic.w	r8, r8, #64	; 0x40
  40843c:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408440:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  408444:	f04f 0c80 	mov.w	ip, #128	; 0x80
  408448:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40844c:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408450:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408454:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408458:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40845c:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  408460:	f028 0880 	bic.w	r8, r8, #128	; 0x80
  408464:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408468:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  40846c:	f028 0880 	bic.w	r8, r8, #128	; 0x80
  408470:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408474:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  408478:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40847a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40847e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408480:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408486:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  40848a:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  40848e:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408492:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  408496:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  40849a:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40849e:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  4084a0:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4084a2:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4084a6:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4084a8:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4084aa:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4084ae:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  4084b2:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  4084b6:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4084ba:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  4084be:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  4084c2:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4084c6:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  4084c8:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4084ca:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4084ce:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4084d0:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4084d2:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4084d6:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  4084d8:	f426 1680 	bic.w	r6, r6, #1048576	; 0x100000
  4084dc:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4084de:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  4084e0:	f426 1680 	bic.w	r6, r6, #1048576	; 0x100000
  4084e4:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4084e6:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  4084e8:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
  4084ec:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4084ee:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4084f2:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4084f4:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4084f6:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4084fa:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  4084fc:	f426 1600 	bic.w	r6, r6, #2097152	; 0x200000
  408500:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408502:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  408504:	f426 1600 	bic.w	r6, r6, #2097152	; 0x200000
  408508:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40850a:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  40850c:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  408510:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408512:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408516:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408518:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40851a:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40851e:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  408520:	f426 0680 	bic.w	r6, r6, #4194304	; 0x400000
  408524:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408526:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  408528:	f426 0680 	bic.w	r6, r6, #4194304	; 0x400000
  40852c:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40852e:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  408530:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
  408534:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408536:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40853a:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40853c:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40853e:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408542:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  408544:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
  408548:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40854a:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40854c:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
  408550:	675d      	str	r5, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408552:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  408554:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  408558:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40855a:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40855e:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408560:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408562:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408566:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  40856a:	f02c 7c80 	bic.w	ip, ip, #16777216	; 0x1000000
  40856e:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408572:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  408576:	f02c 7c80 	bic.w	ip, ip, #16777216	; 0x1000000
  40857a:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40857e:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  408580:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  408584:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408586:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40858a:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40858c:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40858e:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408592:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  408596:	f02c 7c00 	bic.w	ip, ip, #33554432	; 0x2000000
  40859a:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
  40859e:	e001      	b.n	4085a4 <resetPinsSDRAM+0x338>
  4085a0:	400e0e00 	.word	0x400e0e00
		base->PIO_ABCDSR[1] &= ~mask;
  4085a4:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  4085a8:	f02c 7c00 	bic.w	ip, ip, #33554432	; 0x2000000
  4085ac:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4085b0:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  4085b2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  4085b6:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4085b8:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4085bc:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4085be:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4085c0:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4085c4:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  4085c8:	f02c 6c80 	bic.w	ip, ip, #67108864	; 0x4000000
  4085cc:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4085d0:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  4085d4:	f02c 6c80 	bic.w	ip, ip, #67108864	; 0x4000000
  4085d8:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4085dc:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  4085de:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  4085e2:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4085e4:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4085e8:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4085ea:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4085ec:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4085f0:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  4085f4:	f02c 6c00 	bic.w	ip, ip, #134217728	; 0x8000000
  4085f8:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4085fc:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  408600:	f02c 6c00 	bic.w	ip, ip, #134217728	; 0x8000000
  408604:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408608:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  40860a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40860e:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408610:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408614:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408616:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408618:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40861c:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  408620:	f02c 5c80 	bic.w	ip, ip, #268435456	; 0x10000000
  408624:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408628:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  40862c:	f02c 5c80 	bic.w	ip, ip, #268435456	; 0x10000000
  408630:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408634:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  408636:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  40863a:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40863c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408640:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408642:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408644:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408648:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  40864c:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  408650:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408654:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  408658:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  40865c:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408660:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  408662:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408666:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40866a:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40866e:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408672:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408676:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40867a:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  40867e:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
  408682:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408686:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  40868a:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
  40868e:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408692:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  408696:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40869a:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  40869e:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4086a2:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4086a6:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4086aa:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4086ae:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4086b2:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  4086b6:	f428 5800 	bic.w	r8, r8, #8192	; 0x2000
  4086ba:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4086be:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  4086c2:	f428 5800 	bic.w	r8, r8, #8192	; 0x2000
  4086c6:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4086ca:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  4086ce:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  4086d2:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4086d6:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4086da:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4086de:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4086e2:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4086e6:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  4086ea:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
  4086ee:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4086f2:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  4086f6:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
  4086fa:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4086fe:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  408702:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408704:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408708:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40870a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40870c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408710:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  408714:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  408718:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40871c:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  408720:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  408724:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408728:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  40872a:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40872c:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408730:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408732:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408734:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408738:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40873a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  40873e:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408740:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408742:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  408746:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408748:	601f      	str	r7, [r3, #0]
		base->PIO_PUDR = mask;
  40874a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40874e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408750:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408754:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408756:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40875c:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  40875e:	f427 3700 	bic.w	r7, r7, #131072	; 0x20000
  408762:	671f      	str	r7, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408764:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  408766:	f427 3700 	bic.w	r7, r7, #131072	; 0x20000
  40876a:	675f      	str	r7, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40876c:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  40876e:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408770:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408774:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408776:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408778:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40877c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40877e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  408782:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408784:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408786:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  40878a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40878c:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  40878e:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408790:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408794:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408796:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408798:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40879c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40879e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  4087a2:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4087a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4087a6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  4087aa:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4087ac:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  4087ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4087b2:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4087b4:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4087b8:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4087ba:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4087bc:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4087c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4087c2:	f022 0201 	bic.w	r2, r2, #1
  4087c6:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4087c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4087ca:	f022 0201 	bic.w	r2, r2, #1
  4087ce:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4087d0:	601c      	str	r4, [r3, #0]
		base->PIO_PUDR = mask;
  4087d2:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4087d4:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4087d8:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4087da:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4087dc:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4087e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4087e2:	f022 0202 	bic.w	r2, r2, #2
  4087e6:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4087e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4087ea:	f022 0202 	bic.w	r2, r2, #2
  4087ee:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4087f0:	6018      	str	r0, [r3, #0]
		base->PIO_PUDR = mask;
  4087f2:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4087f4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4087f8:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4087fa:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4087fc:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408800:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408802:	f022 0204 	bic.w	r2, r2, #4
  408806:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408808:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40880a:	f022 0204 	bic.w	r2, r2, #4
  40880e:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408810:	6019      	str	r1, [r3, #0]
		base->PIO_PUDR = mask;
  408812:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408816:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40881a:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40881e:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408822:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408826:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408828:	f022 0208 	bic.w	r2, r2, #8
  40882c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40882e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408830:	f022 0208 	bic.w	r2, r2, #8
  408834:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408836:	f8c3 e000 	str.w	lr, [r3]
		base->PIO_PUDR = mask;
  40883a:	2210      	movs	r2, #16
  40883c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40883e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408842:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408844:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40884a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40884c:	f021 0110 	bic.w	r1, r1, #16
  408850:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408852:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408854:	f021 0110 	bic.w	r1, r1, #16
  408858:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40885a:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  40885c:	2220      	movs	r2, #32
  40885e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408860:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408864:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408866:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40886c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40886e:	f021 0120 	bic.w	r1, r1, #32
  408872:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408874:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408876:	f021 0120 	bic.w	r1, r1, #32
  40887a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40887c:	601a      	str	r2, [r3, #0]
  40887e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408882:	bf00      	nop

00408884 <closeSDcard>:
	ioport_enable_pin(GPIO_PE5);//Enable normal SDRAM function
}
/***********************************************************************
 *    CLOSE SD CARD
 ***********************************************************************/
void closeSDcard(void){
  408884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  408886:	4c49      	ldr	r4, [pc, #292]	; (4089ac <closeSDcard+0x128>)
  408888:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
  40888c:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40888e:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  408892:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  408894:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408896:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40889a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40889c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  4088a0:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4088a2:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4088a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  4088a8:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4088aa:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  4088ae:	6625      	str	r5, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4088b0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4088b4:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4088b6:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4088b8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4088bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4088be:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  4088c2:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4088c4:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4088c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  4088ca:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4088cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4088d0:	6620      	str	r0, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4088d2:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4088d6:	6560      	str	r0, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4088d8:	6260      	str	r0, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4088da:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4088de:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4088e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  4088e4:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4088e6:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4088e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  4088ec:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4088ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4088f2:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4088f4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4088f8:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4088fa:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4088fc:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408900:	6f23      	ldr	r3, [r4, #112]	; 0x70
  408902:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  408906:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408908:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40890a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40890e:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  408910:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  408914:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408916:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40891a:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40891c:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40891e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408922:	6f23      	ldr	r3, [r4, #112]	; 0x70
  408924:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  408928:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40892a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40892c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  408930:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  408932:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  408936:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408938:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40893c:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40893e:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408940:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408944:	6f27      	ldr	r7, [r4, #112]	; 0x70
  408946:	f027 6700 	bic.w	r7, r7, #134217728	; 0x8000000
  40894a:	6727      	str	r7, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40894c:	6f67      	ldr	r7, [r4, #116]	; 0x74
  40894e:	f027 6700 	bic.w	r7, r7, #134217728	; 0x8000000
  408952:	6767      	str	r7, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408954:	6026      	str	r6, [r4, #0]
  408956:	6025      	str	r5, [r4, #0]
  408958:	6020      	str	r0, [r4, #0]
  40895a:	6021      	str	r1, [r4, #0]
  40895c:	6022      	str	r2, [r4, #0]
  40895e:	6023      	str	r3, [r4, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408960:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408962:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408966:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408968:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40896c:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40896e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408972:	6121      	str	r1, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408974:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408978:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40897a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40897e:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408980:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408984:	6366      	str	r6, [r4, #52]	; 0x34
  408986:	6365      	str	r5, [r4, #52]	; 0x34
  408988:	6360      	str	r0, [r4, #52]	; 0x34
  40898a:	6361      	str	r1, [r4, #52]	; 0x34
  40898c:	6362      	str	r2, [r4, #52]	; 0x34
  40898e:	6363      	str	r3, [r4, #52]	; 0x34
	ioport_set_pin_level(PIN_HSMCI_MCCK_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA0_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA1_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA2_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA3_GPIO,0);
	delay_ms(10);
  408990:	4e07      	ldr	r6, [pc, #28]	; (4089b0 <closeSDcard+0x12c>)
  408992:	4630      	mov	r0, r6
  408994:	4d07      	ldr	r5, [pc, #28]	; (4089b4 <closeSDcard+0x130>)
  408996:	47a8      	blx	r5
  408998:	f44f 7280 	mov.w	r2, #256	; 0x100
  40899c:	4b06      	ldr	r3, [pc, #24]	; (4089b8 <closeSDcard+0x134>)
  40899e:	635a      	str	r2, [r3, #52]	; 0x34
  4089a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4089a4:	6363      	str	r3, [r4, #52]	; 0x34
	ioport_set_pin_level(SDCARDPWRC_GPIO, 0);
	ioport_set_pin_level(CPWRC_GPIO,0);
	delay_ms(10);
  4089a6:	4630      	mov	r0, r6
  4089a8:	47a8      	blx	r5
  4089aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4089ac:	400e0e00 	.word	0x400e0e00
  4089b0:	0007b784 	.word	0x0007b784
  4089b4:	2040008d 	.word	0x2040008d
  4089b8:	400e1400 	.word	0x400e1400

004089bc <resetSD>:
}
/***********************************************************************
 *    SSD Card Hardware Reset
 ***********************************************************************/
void resetSD (int offDelay){
  4089bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4089c0:	4b97      	ldr	r3, [pc, #604]	; (408c20 <resetSD+0x264>)
  4089c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4089c6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4089c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4089cc:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4089ce:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
  4089d2:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4089d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  4089da:	f502 2261 	add.w	r2, r2, #921600	; 0xe1000
  4089de:	f44f 7e80 	mov.w	lr, #256	; 0x100
  4089e2:	f8c2 e010 	str.w	lr, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4089e6:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4089ea:	f8c2 e034 	str.w	lr, [r2, #52]	; 0x34
		base->PIO_PUDR = mask;
  4089ee:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  4089f2:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4089f4:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4089f8:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4089fa:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4089fc:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408a00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408a02:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
  408a06:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408a08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408a0a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
  408a0e:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  408a10:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  408a14:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408a16:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408a1a:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408a1c:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408a1e:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408a24:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  408a28:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408a2a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408a2c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  408a30:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  408a32:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  408a36:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408a38:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408a3c:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408a3e:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408a40:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408a44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408a46:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  408a4a:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408a4c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408a4e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  408a52:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  408a54:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  408a58:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408a5a:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408a5e:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408a60:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408a62:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408a68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  408a6c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408a6e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408a70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  408a74:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  408a76:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  408a7a:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408a7c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408a80:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408a82:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408a84:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408a88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408a8a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  408a8e:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408a90:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408a92:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  408a96:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  408a98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  408a9c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408aa2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408aa4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408aaa:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  408aae:	f02c 6c00 	bic.w	ip, ip, #134217728	; 0x8000000
  408ab2:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408ab6:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  408aba:	f02c 6c00 	bic.w	ip, ip, #134217728	; 0x8000000
  408abe:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408ac2:	601f      	str	r7, [r3, #0]
  408ac4:	601e      	str	r6, [r3, #0]
  408ac6:	601d      	str	r5, [r3, #0]
  408ac8:	601c      	str	r4, [r3, #0]
  408aca:	6019      	str	r1, [r3, #0]
  408acc:	601a      	str	r2, [r3, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408ace:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408ad0:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408ad4:	611e      	str	r6, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408ad6:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408ada:	611d      	str	r5, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408adc:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408ae0:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408ae2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408ae6:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408ae8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408aec:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408aee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408af2:	635f      	str	r7, [r3, #52]	; 0x34
  408af4:	635e      	str	r6, [r3, #52]	; 0x34
  408af6:	635d      	str	r5, [r3, #52]	; 0x34
  408af8:	635c      	str	r4, [r3, #52]	; 0x34
  408afa:	6359      	str	r1, [r3, #52]	; 0x34
  408afc:	635a      	str	r2, [r3, #52]	; 0x34
  408afe:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408b02:	f8c3 e010 	str.w	lr, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408b06:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408b0a:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
	ioport_set_pin_level(PIN_HSMCI_MCDA2_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA3_GPIO,0);
	ioport_set_pin_level(CPWRC_GPIO,0);
	ioport_set_pin_dir(SRAMPWRC_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SRAMPWRC_GPIO, SRAMPWRC_POWER_OFF);
	delay_ms(offDelay);//needs 300 to drift down to zero
  408b0e:	2800      	cmp	r0, #0
  408b10:	d172      	bne.n	408bf8 <resetSD+0x23c>
  408b12:	2033      	movs	r0, #51	; 0x33
  408b14:	4b43      	ldr	r3, [pc, #268]	; (408c24 <resetSD+0x268>)
  408b16:	4798      	blx	r3
		base->PIO_PUDR = mask;
  408b18:	4b41      	ldr	r3, [pc, #260]	; (408c20 <resetSD+0x264>)
  408b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  408b1e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408b20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408b24:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408b26:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408b2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408b2e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  408b32:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  408b34:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408b36:	4311      	orrs	r1, r2
  408b38:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  408b3a:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  408b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  408b40:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408b42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408b46:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408b48:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  408b4e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408b50:	4311      	orrs	r1, r2
  408b52:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  408b54:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408b56:	4311      	orrs	r1, r2
  408b58:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  408b5a:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  408b5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  408b60:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408b66:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408b68:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408b6e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408b70:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  408b74:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  408b76:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408b78:	4311      	orrs	r1, r2
  408b7a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  408b7c:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  408b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  408b82:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408b84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408b88:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408b8a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408b90:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408b92:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408b96:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  408b98:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408b9a:	4311      	orrs	r1, r2
  408b9c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  408b9e:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  408ba0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  408ba4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408ba6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408baa:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408bac:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408bb2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408bb4:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  408bb8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  408bba:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408bbc:	4311      	orrs	r1, r2
  408bbe:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  408bc0:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  408bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  408bc6:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408bc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408bcc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408bce:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408bd4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408bd6:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  408bda:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  408bdc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408bde:	4311      	orrs	r1, r2
  408be0:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  408be2:	605a      	str	r2, [r3, #4]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408be4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  408be8:	631a      	str	r2, [r3, #48]	; 0x30
  408bea:	f44f 7280 	mov.w	r2, #256	; 0x100
  408bee:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  408bf2:	631a      	str	r2, [r3, #48]	; 0x30
  408bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408bf8:	17c5      	asrs	r5, r0, #31
  408bfa:	4a0b      	ldr	r2, [pc, #44]	; (408c28 <resetSD+0x26c>)
  408bfc:	fba0 0102 	umull	r0, r1, r0, r2
  408c00:	fb02 1105 	mla	r1, r2, r5, r1
  408c04:	f241 722c 	movw	r2, #5932	; 0x172c
  408c08:	2300      	movs	r3, #0
  408c0a:	f241 742b 	movw	r4, #5931	; 0x172b
  408c0e:	2500      	movs	r5, #0
  408c10:	1900      	adds	r0, r0, r4
  408c12:	4169      	adcs	r1, r5
  408c14:	4c05      	ldr	r4, [pc, #20]	; (408c2c <resetSD+0x270>)
  408c16:	47a0      	blx	r4
  408c18:	4b02      	ldr	r3, [pc, #8]	; (408c24 <resetSD+0x268>)
  408c1a:	4798      	blx	r3
  408c1c:	e77c      	b.n	408b18 <resetSD+0x15c>
  408c1e:	bf00      	nop
  408c20:	400e0e00 	.word	0x400e0e00
  408c24:	2040008d 	.word	0x2040008d
  408c28:	11e1a300 	.word	0x11e1a300
  408c2c:	0040caf9 	.word	0x0040caf9

00408c30 <oneDayToSD>:
void oneDayToSD(unsigned int archiveDay,unsigned int test){
  408c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408c34:	f2ad 5d2c 	subw	sp, sp, #1324	; 0x52c
  408c38:	9004      	str	r0, [sp, #16]
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  408c3a:	f8df a390 	ldr.w	sl, [pc, #912]	; 408fcc <oneDayToSD+0x39c>
  408c3e:	4bcf      	ldr	r3, [pc, #828]	; (408f7c <oneDayToSD+0x34c>)
  408c40:	f8ca 3000 	str.w	r3, [sl]
	twi_init_RTC();
  408c44:	4bce      	ldr	r3, [pc, #824]	; (408f80 <oneDayToSD+0x350>)
  408c46:	4798      	blx	r3
	delay_ms(100);//
  408c48:	48ce      	ldr	r0, [pc, #824]	; (408f84 <oneDayToSD+0x354>)
  408c4a:	f8df 8384 	ldr.w	r8, [pc, #900]	; 408fd0 <oneDayToSD+0x3a0>
  408c4e:	47c0      	blx	r8
	rtcData[0]=0x03;//
  408c50:	2303      	movs	r3, #3
  408c52:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
	write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  408c56:	2101      	movs	r1, #1
  408c58:	ab2a      	add	r3, sp, #168	; 0xa8
  408c5a:	4618      	mov	r0, r3
  408c5c:	4bca      	ldr	r3, [pc, #808]	; (408f88 <oneDayToSD+0x358>)
  408c5e:	4798      	blx	r3
	delay_ms(1);//
  408c60:	f24c 508e 	movw	r0, #50574	; 0xc58e
  408c64:	47c0      	blx	r8
 	read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  408c66:	2107      	movs	r1, #7
  408c68:	ab2a      	add	r3, sp, #168	; 0xa8
  408c6a:	4618      	mov	r0, r3
  408c6c:	4bc7      	ldr	r3, [pc, #796]	; (408f8c <oneDayToSD+0x35c>)
  408c6e:	4798      	blx	r3
 	getSetDeviceID();
  408c70:	4bc7      	ldr	r3, [pc, #796]	; (408f90 <oneDayToSD+0x360>)
  408c72:	4798      	blx	r3
 	rtc_set_date(RTC,(unsigned int)(bcdToHex(rtcData[0])+19),bcdToHex(rtcData[5]),bcdToHex(rtcData[3]),5);//Flag to avoid bogus downloads or other interruptions from interfering with initial GPS)
  408c74:	f89d 00a8 	ldrb.w	r0, [sp, #168]	; 0xa8
  408c78:	4dc6      	ldr	r5, [pc, #792]	; (408f94 <oneDayToSD+0x364>)
  408c7a:	47a8      	blx	r5
  408c7c:	4606      	mov	r6, r0
  408c7e:	f89d 00ad 	ldrb.w	r0, [sp, #173]	; 0xad
  408c82:	47a8      	blx	r5
  408c84:	4607      	mov	r7, r0
  408c86:	f89d 00ab 	ldrb.w	r0, [sp, #171]	; 0xab
  408c8a:	47a8      	blx	r5
  408c8c:	4cc2      	ldr	r4, [pc, #776]	; (408f98 <oneDayToSD+0x368>)
  408c8e:	2305      	movs	r3, #5
  408c90:	9300      	str	r3, [sp, #0]
  408c92:	4603      	mov	r3, r0
  408c94:	463a      	mov	r2, r7
  408c96:	f106 0113 	add.w	r1, r6, #19
  408c9a:	4620      	mov	r0, r4
  408c9c:	4ebf      	ldr	r6, [pc, #764]	; (408f9c <oneDayToSD+0x36c>)
  408c9e:	47b0      	blx	r6
 	rtc_set_time(RTC,bcdToHex(rtcData[2]),bcdToHex(rtcData[1]),bcdToHex(rtcData[0]));//[RTC,hourNow,minsNow,secNow] Set these as a counter to determine if stuck in a stupid boot-up loop. )
  408ca0:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
  408ca4:	47a8      	blx	r5
  408ca6:	4606      	mov	r6, r0
  408ca8:	f89d 00a9 	ldrb.w	r0, [sp, #169]	; 0xa9
  408cac:	47a8      	blx	r5
  408cae:	4607      	mov	r7, r0
  408cb0:	f89d 00a8 	ldrb.w	r0, [sp, #168]	; 0xa8
  408cb4:	47a8      	blx	r5
  408cb6:	4603      	mov	r3, r0
  408cb8:	463a      	mov	r2, r7
  408cba:	4631      	mov	r1, r6
  408cbc:	4620      	mov	r0, r4
  408cbe:	4cb8      	ldr	r4, [pc, #736]	; (408fa0 <oneDayToSD+0x370>)
  408cc0:	47a0      	blx	r4
	const char fdtFolderName[] = {'F','D','T','_','D','A','T',0};
  408cc2:	ab28      	add	r3, sp, #160	; 0xa0
  408cc4:	4ab7      	ldr	r2, [pc, #732]	; (408fa4 <oneDayToSD+0x374>)
  408cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
  408cca:	e883 0003 	stmia.w	r3, {r0, r1}
	char csvFileName[] = {'F','D','T','_','D','A','T','/',
  408cce:	2346      	movs	r3, #70	; 0x46
  408cd0:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
  408cd4:	2244      	movs	r2, #68	; 0x44
  408cd6:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
  408cda:	2354      	movs	r3, #84	; 0x54
  408cdc:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
  408ce0:	f04f 095f 	mov.w	r9, #95	; 0x5f
  408ce4:	f88d 9077 	strb.w	r9, [sp, #119]	; 0x77
  408ce8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  408cec:	2241      	movs	r2, #65	; 0x41
  408cee:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  408cf2:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
  408cf6:	232f      	movs	r3, #47	; 0x2f
  408cf8:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	DEVICEID[0],DEVICEID[1],DEVICEID[2],DEVICEID[3],DEVICEID[4],DEVICEID[5],DEVICEID[6],DEVICEID[7],
  408cfc:	4baa      	ldr	r3, [pc, #680]	; (408fa8 <oneDayToSD+0x378>)
	char csvFileName[] = {'F','D','T','_','D','A','T','/',
  408cfe:	781a      	ldrb	r2, [r3, #0]
  408d00:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  408d04:	785a      	ldrb	r2, [r3, #1]
  408d06:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  408d0a:	789a      	ldrb	r2, [r3, #2]
  408d0c:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  408d10:	78da      	ldrb	r2, [r3, #3]
  408d12:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
  408d16:	791a      	ldrb	r2, [r3, #4]
  408d18:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
  408d1c:	795a      	ldrb	r2, [r3, #5]
  408d1e:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
  408d22:	799a      	ldrb	r2, [r3, #6]
  408d24:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
  408d28:	79da      	ldrb	r2, [r3, #7]
  408d2a:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
  408d2e:	7a1a      	ldrb	r2, [r3, #8]
  408d30:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
  408d34:	7a5a      	ldrb	r2, [r3, #9]
  408d36:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  408d3a:	7a9a      	ldrb	r2, [r3, #10]
  408d3c:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  408d40:	7ada      	ldrb	r2, [r3, #11]
  408d42:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
  408d46:	7b1a      	ldrb	r2, [r3, #12]
  408d48:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
  408d4c:	7b5a      	ldrb	r2, [r3, #13]
  408d4e:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
  408d52:	7b9a      	ldrb	r2, [r3, #14]
  408d54:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
  408d58:	7bdb      	ldrb	r3, [r3, #15]
  408d5a:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
  408d5e:	f88d 908c 	strb.w	r9, [sp, #140]	; 0x8c
	'_',(char)(hex1ToAscii((bcdToHex(rtcData[6]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[6]))%10)),
  408d62:	f89d 00ae 	ldrb.w	r0, [sp, #174]	; 0xae
  408d66:	47a8      	blx	r5
  408d68:	4683      	mov	fp, r0
  408d6a:	4c90      	ldr	r4, [pc, #576]	; (408fac <oneDayToSD+0x37c>)
  408d6c:	fba4 3700 	umull	r3, r7, r4, r0
  408d70:	08ff      	lsrs	r7, r7, #3
  408d72:	b2f8      	uxtb	r0, r7
  408d74:	4e8e      	ldr	r6, [pc, #568]	; (408fb0 <oneDayToSD+0x380>)
  408d76:	47b0      	blx	r6
  408d78:	f88d 008d 	strb.w	r0, [sp, #141]	; 0x8d
  408d7c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  408d80:	ebab 0747 	sub.w	r7, fp, r7, lsl #1
  408d84:	b2f8      	uxtb	r0, r7
  408d86:	47b0      	blx	r6
  408d88:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
	(char)(hex1ToAscii((bcdToHex(rtcData[5]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[5]))%10)),
  408d8c:	f89d 00ad 	ldrb.w	r0, [sp, #173]	; 0xad
  408d90:	47a8      	blx	r5
  408d92:	4683      	mov	fp, r0
  408d94:	fba4 3700 	umull	r3, r7, r4, r0
  408d98:	08ff      	lsrs	r7, r7, #3
  408d9a:	b2f8      	uxtb	r0, r7
  408d9c:	47b0      	blx	r6
  408d9e:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
  408da2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  408da6:	ebab 0747 	sub.w	r7, fp, r7, lsl #1
  408daa:	b2f8      	uxtb	r0, r7
  408dac:	47b0      	blx	r6
  408dae:	f88d 0090 	strb.w	r0, [sp, #144]	; 0x90
	(char)(hex1ToAscii((bcdToHex(rtcData[3]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[3]))%10)),
  408db2:	f89d 00ab 	ldrb.w	r0, [sp, #171]	; 0xab
  408db6:	47a8      	blx	r5
  408db8:	4683      	mov	fp, r0
  408dba:	fba4 3700 	umull	r3, r7, r4, r0
  408dbe:	08ff      	lsrs	r7, r7, #3
  408dc0:	b2f8      	uxtb	r0, r7
  408dc2:	47b0      	blx	r6
  408dc4:	f88d 0091 	strb.w	r0, [sp, #145]	; 0x91
  408dc8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  408dcc:	ebab 0747 	sub.w	r7, fp, r7, lsl #1
  408dd0:	b2f8      	uxtb	r0, r7
  408dd2:	47b0      	blx	r6
  408dd4:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
	(char)(hex1ToAscii((bcdToHex(rtcData[2]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[2]))%10)),
  408dd8:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
  408ddc:	47a8      	blx	r5
  408dde:	4683      	mov	fp, r0
  408de0:	fba4 3700 	umull	r3, r7, r4, r0
  408de4:	08ff      	lsrs	r7, r7, #3
  408de6:	b2f8      	uxtb	r0, r7
  408de8:	47b0      	blx	r6
  408dea:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
  408dee:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  408df2:	ebab 0747 	sub.w	r7, fp, r7, lsl #1
  408df6:	b2f8      	uxtb	r0, r7
  408df8:	47b0      	blx	r6
  408dfa:	f88d 0094 	strb.w	r0, [sp, #148]	; 0x94
	(char)(hex1ToAscii((bcdToHex(rtcData[1]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[1]))%10)),
  408dfe:	f89d 00a9 	ldrb.w	r0, [sp, #169]	; 0xa9
  408e02:	47a8      	blx	r5
  408e04:	4605      	mov	r5, r0
  408e06:	fba4 3400 	umull	r3, r4, r4, r0
  408e0a:	08e4      	lsrs	r4, r4, #3
  408e0c:	b2e0      	uxtb	r0, r4
  408e0e:	47b0      	blx	r6
  408e10:	f88d 0095 	strb.w	r0, [sp, #149]	; 0x95
  408e14:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  408e18:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
  408e1c:	b2e0      	uxtb	r0, r4
  408e1e:	47b0      	blx	r6
  408e20:	f88d 0096 	strb.w	r0, [sp, #150]	; 0x96
	char csvFileName[] = {'F','D','T','_','D','A','T','/',
  408e24:	f88d 9097 	strb.w	r9, [sp, #151]	; 0x97
  408e28:	2330      	movs	r3, #48	; 0x30
  408e2a:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
  408e2e:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
  408e32:	232e      	movs	r3, #46	; 0x2e
  408e34:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
  408e38:	2343      	movs	r3, #67	; 0x43
  408e3a:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
  408e3e:	2353      	movs	r3, #83	; 0x53
  408e40:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
  408e44:	2356      	movs	r3, #86	; 0x56
  408e46:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
  408e4a:	2300      	movs	r3, #0
  408e4c:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
	configure_console();
  408e50:	4b58      	ldr	r3, [pc, #352]	; (408fb4 <oneDayToSD+0x384>)
  408e52:	4798      	blx	r3
	delay_ms(10);
  408e54:	4858      	ldr	r0, [pc, #352]	; (408fb8 <oneDayToSD+0x388>)
  408e56:	47c0      	blx	r8
	printf("BEGIN ONE DAY APPEND TO CSV %X.\r\n",archiveDay);
  408e58:	9904      	ldr	r1, [sp, #16]
  408e5a:	4858      	ldr	r0, [pc, #352]	; (408fbc <oneDayToSD+0x38c>)
  408e5c:	4b58      	ldr	r3, [pc, #352]	; (408fc0 <oneDayToSD+0x390>)
  408e5e:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  408e60:	4b46      	ldr	r3, [pc, #280]	; (408f7c <oneDayToSD+0x34c>)
  408e62:	f8ca 3000 	str.w	r3, [sl]
	resetSD(300);
  408e66:	f44f 7096 	mov.w	r0, #300	; 0x12c
  408e6a:	4b56      	ldr	r3, [pc, #344]	; (408fc4 <oneDayToSD+0x394>)
  408e6c:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  408e6e:	4b56      	ldr	r3, [pc, #344]	; (408fc8 <oneDayToSD+0x398>)
  408e70:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  408e74:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  408e78:	f007 0007 	and.w	r0, r7, #7
  408e7c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  408e7e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  408e82:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  408e86:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  408e8a:	f3bf 8f4f 	dsb	sy
  408e8e:	f04f 34ff 	mov.w	r4, #4294967295
  408e92:	fa04 fc00 	lsl.w	ip, r4, r0
  408e96:	fa06 f000 	lsl.w	r0, r6, r0
  408e9a:	fa04 f40e 	lsl.w	r4, r4, lr
  408e9e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  408ea2:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  408ea4:	463a      	mov	r2, r7
  408ea6:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  408ea8:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  408eac:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  408eb0:	3a01      	subs	r2, #1
  408eb2:	4423      	add	r3, r4
  408eb4:	f1b2 3fff 	cmp.w	r2, #4294967295
  408eb8:	d1f6      	bne.n	408ea8 <oneDayToSD+0x278>
        } while(sets--);
  408eba:	3e01      	subs	r6, #1
  408ebc:	4460      	add	r0, ip
  408ebe:	f1b6 3fff 	cmp.w	r6, #4294967295
  408ec2:	d1ef      	bne.n	408ea4 <oneDayToSD+0x274>
  408ec4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  408ec8:	4b3f      	ldr	r3, [pc, #252]	; (408fc8 <oneDayToSD+0x398>)
  408eca:	695a      	ldr	r2, [r3, #20]
  408ecc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  408ed0:	615a      	str	r2, [r3, #20]
  408ed2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  408ed6:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  408eda:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  408ede:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  408ee2:	f007 0007 	and.w	r0, r7, #7
  408ee6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  408ee8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  408eec:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  408ef0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  408ef4:	f3bf 8f4f 	dsb	sy
  408ef8:	f04f 34ff 	mov.w	r4, #4294967295
  408efc:	fa04 fc00 	lsl.w	ip, r4, r0
  408f00:	fa06 f000 	lsl.w	r0, r6, r0
  408f04:	fa04 f40e 	lsl.w	r4, r4, lr
  408f08:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  408f0c:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  408f0e:	463a      	mov	r2, r7
  408f10:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  408f12:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  408f16:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  408f1a:	3a01      	subs	r2, #1
  408f1c:	4423      	add	r3, r4
  408f1e:	f1b2 3fff 	cmp.w	r2, #4294967295
  408f22:	d1f6      	bne.n	408f12 <oneDayToSD+0x2e2>
        } while(sets--);
  408f24:	3e01      	subs	r6, #1
  408f26:	4460      	add	r0, ip
  408f28:	f1b6 3fff 	cmp.w	r6, #4294967295
  408f2c:	d1ef      	bne.n	408f0e <oneDayToSD+0x2de>
  408f2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  408f32:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  408f36:	4b24      	ldr	r3, [pc, #144]	; (408fc8 <oneDayToSD+0x398>)
  408f38:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  408f3c:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  408f40:	f007 0007 	and.w	r0, r7, #7
  408f44:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  408f46:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  408f4a:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  408f4e:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  408f52:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  408f56:	695a      	ldr	r2, [r3, #20]
  408f58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  408f5c:	615a      	str	r2, [r3, #20]
  408f5e:	f04f 34ff 	mov.w	r4, #4294967295
  408f62:	fa04 fc00 	lsl.w	ip, r4, r0
  408f66:	fa06 f000 	lsl.w	r0, r6, r0
  408f6a:	fa04 f40e 	lsl.w	r4, r4, lr
  408f6e:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  408f72:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  408f74:	463a      	mov	r2, r7
  408f76:	4673      	mov	r3, lr
  408f78:	e02c      	b.n	408fd4 <oneDayToSD+0x3a4>
  408f7a:	bf00      	nop
  408f7c:	a5000001 	.word	0xa5000001
  408f80:	00401a79 	.word	0x00401a79
  408f84:	004d2b25 	.word	0x004d2b25
  408f88:	00401ba5 	.word	0x00401ba5
  408f8c:	00401ccd 	.word	0x00401ccd
  408f90:	00408059 	.word	0x00408059
  408f94:	00406b07 	.word	0x00406b07
  408f98:	400e1860 	.word	0x400e1860
  408f9c:	00402695 	.word	0x00402695
  408fa0:	00402591 	.word	0x00402591
  408fa4:	00410330 	.word	0x00410330
  408fa8:	204011a8 	.word	0x204011a8
  408fac:	cccccccd 	.word	0xcccccccd
  408fb0:	00406aa9 	.word	0x00406aa9
  408fb4:	0040710d 	.word	0x0040710d
  408fb8:	0007b784 	.word	0x0007b784
  408fbc:	00410a2c 	.word	0x00410a2c
  408fc0:	0040ce59 	.word	0x0040ce59
  408fc4:	004089bd 	.word	0x004089bd
  408fc8:	e000ed00 	.word	0xe000ed00
  408fcc:	400e1850 	.word	0x400e1850
  408fd0:	2040008d 	.word	0x2040008d
              sw = ((tmpways << wshift) | (sets << sshift));
  408fd4:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  408fd8:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  408fdc:	3a01      	subs	r2, #1
  408fde:	4423      	add	r3, r4
  408fe0:	f1b2 3fff 	cmp.w	r2, #4294967295
  408fe4:	d1f6      	bne.n	408fd4 <oneDayToSD+0x3a4>
        } while(sets--);
  408fe6:	3e01      	subs	r6, #1
  408fe8:	4460      	add	r0, ip
  408fea:	f1b6 3fff 	cmp.w	r6, #4294967295
  408fee:	d1c1      	bne.n	408f74 <oneDayToSD+0x344>
  408ff0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  408ff4:	f3bf 8f6f 	isb	sy
	sd_mmc_init();
  408ff8:	4b83      	ldr	r3, [pc, #524]	; (409208 <oneDayToSD+0x5d8>)
  408ffa:	4798      	blx	r3
	errorLoopCtr=50;
  408ffc:	2432      	movs	r4, #50	; 0x32
		status = sd_mmc_test_unit_ready(0);//first electronic signals
  408ffe:	2600      	movs	r6, #0
		delay_ms(100);
  409000:	4f82      	ldr	r7, [pc, #520]	; (40920c <oneDayToSD+0x5dc>)
  409002:	e00a      	b.n	40901a <oneDayToSD+0x3ea>
  409004:	4638      	mov	r0, r7
  409006:	4b82      	ldr	r3, [pc, #520]	; (409210 <oneDayToSD+0x5e0>)
  409008:	4798      	blx	r3
		errorLoopCtr--;
  40900a:	3c01      	subs	r4, #1
  40900c:	b2e4      	uxtb	r4, r4
	} while ((status != CTRL_GOOD)&&(errorLoopCtr>0));
  40900e:	2d00      	cmp	r5, #0
  409010:	f000 80c7 	beq.w	4091a2 <oneDayToSD+0x572>
  409014:	2c00      	cmp	r4, #0
  409016:	f000 80c4 	beq.w	4091a2 <oneDayToSD+0x572>
		status = sd_mmc_test_unit_ready(0);//first electronic signals
  40901a:	4630      	mov	r0, r6
  40901c:	4b7d      	ldr	r3, [pc, #500]	; (409214 <oneDayToSD+0x5e4>)
  40901e:	4798      	blx	r3
  409020:	4605      	mov	r5, r0
		printf("MMC %d %d\r\n",status, errorLoopCtr);
  409022:	9003      	str	r0, [sp, #12]
  409024:	4622      	mov	r2, r4
  409026:	4601      	mov	r1, r0
  409028:	487b      	ldr	r0, [pc, #492]	; (409218 <oneDayToSD+0x5e8>)
  40902a:	4b7c      	ldr	r3, [pc, #496]	; (40921c <oneDayToSD+0x5ec>)
  40902c:	4798      	blx	r3
		isCard = sd_mmc_check(0);
  40902e:	4630      	mov	r0, r6
  409030:	4b7b      	ldr	r3, [pc, #492]	; (409220 <oneDayToSD+0x5f0>)
  409032:	4798      	blx	r3
		if  ((status == CTRL_FAIL)&&((errorLoopCtr%4)==0)) {
  409034:	2d01      	cmp	r5, #1
  409036:	d1e5      	bne.n	409004 <oneDayToSD+0x3d4>
  409038:	f014 0f03 	tst.w	r4, #3
  40903c:	d1e2      	bne.n	409004 <oneDayToSD+0x3d4>
			printf("MMC RESET %d %d\r\n",status, errorLoopCtr);
  40903e:	4622      	mov	r2, r4
  409040:	2101      	movs	r1, #1
  409042:	4878      	ldr	r0, [pc, #480]	; (409224 <oneDayToSD+0x5f4>)
  409044:	4b75      	ldr	r3, [pc, #468]	; (40921c <oneDayToSD+0x5ec>)
  409046:	4798      	blx	r3
			if(errorLoopCtr<20)resetSD(2000);else resetSD(300);//number of msec to remain off
  409048:	2c13      	cmp	r4, #19
  40904a:	bf94      	ite	ls
  40904c:	f44f 60fa 	movls.w	r0, #2000	; 0x7d0
  409050:	f44f 7096 	movhi.w	r0, #300	; 0x12c
  409054:	4b74      	ldr	r3, [pc, #464]	; (409228 <oneDayToSD+0x5f8>)
  409056:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  409058:	4b74      	ldr	r3, [pc, #464]	; (40922c <oneDayToSD+0x5fc>)
  40905a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40905e:	f3c3 384e 	ubfx	r8, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409062:	f003 0007 	and.w	r0, r3, #7
  409066:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409068:	f3c3 09c9 	ubfx	r9, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40906c:	fab9 fa89 	clz	sl, r9
    wshift  = __CLZ(ways) & 0x1f;
  409070:	f00a 0a1f 	and.w	sl, sl, #31
  __ASM volatile ("dsb");
  409074:	f3bf 8f4f 	dsb	sy
  409078:	f04f 3eff 	mov.w	lr, #4294967295
  40907c:	fa0e fb00 	lsl.w	fp, lr, r0
  409080:	fa08 f000 	lsl.w	r0, r8, r0
  409084:	fa0e fe0a 	lsl.w	lr, lr, sl
  409088:	fa09 fa0a 	lsl.w	sl, r9, sl
              SCB->DCISW = sw;
  40908c:	f8df c19c 	ldr.w	ip, [pc, #412]	; 40922c <oneDayToSD+0x5fc>
         int32_t tmpways = ways;
  409090:	464a      	mov	r2, r9
  409092:	4653      	mov	r3, sl
              sw = ((tmpways << wshift) | (sets << sshift));
  409094:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  409098:	f8cc 1260 	str.w	r1, [ip, #608]	; 0x260
            } while(tmpways--);
  40909c:	3a01      	subs	r2, #1
  40909e:	4473      	add	r3, lr
  4090a0:	f1b2 3fff 	cmp.w	r2, #4294967295
  4090a4:	d1f6      	bne.n	409094 <oneDayToSD+0x464>
        } while(sets--);
  4090a6:	f108 38ff 	add.w	r8, r8, #4294967295
  4090aa:	4458      	add	r0, fp
  4090ac:	f1b8 3fff 	cmp.w	r8, #4294967295
  4090b0:	d1ee      	bne.n	409090 <oneDayToSD+0x460>
  4090b2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4090b6:	4b5d      	ldr	r3, [pc, #372]	; (40922c <oneDayToSD+0x5fc>)
  4090b8:	695a      	ldr	r2, [r3, #20]
  4090ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4090be:	615a      	str	r2, [r3, #20]
  4090c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4090c4:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  4090c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4090cc:	f3c3 384e 	ubfx	r8, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4090d0:	f003 0007 	and.w	r0, r3, #7
  4090d4:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4090d6:	f3c3 09c9 	ubfx	r9, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4090da:	fab9 fa89 	clz	sl, r9
    wshift  = __CLZ(ways) & 0x1f;
  4090de:	f00a 0a1f 	and.w	sl, sl, #31
  __ASM volatile ("dsb");
  4090e2:	f3bf 8f4f 	dsb	sy
  4090e6:	f04f 3eff 	mov.w	lr, #4294967295
  4090ea:	fa0e fb00 	lsl.w	fp, lr, r0
  4090ee:	fa08 f000 	lsl.w	r0, r8, r0
  4090f2:	fa0e fe0a 	lsl.w	lr, lr, sl
  4090f6:	fa09 fa0a 	lsl.w	sl, r9, sl
              SCB->DCCISW = sw;
  4090fa:	f8df c130 	ldr.w	ip, [pc, #304]	; 40922c <oneDayToSD+0x5fc>
         int32_t tmpways = ways;
  4090fe:	464a      	mov	r2, r9
  409100:	4653      	mov	r3, sl
              sw = ((tmpways << wshift) | (sets << sshift));
  409102:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  409106:	f8cc 1274 	str.w	r1, [ip, #628]	; 0x274
            } while(tmpways--);
  40910a:	3a01      	subs	r2, #1
  40910c:	4473      	add	r3, lr
  40910e:	f1b2 3fff 	cmp.w	r2, #4294967295
  409112:	d1f6      	bne.n	409102 <oneDayToSD+0x4d2>
        } while(sets--);
  409114:	f108 38ff 	add.w	r8, r8, #4294967295
  409118:	4458      	add	r0, fp
  40911a:	f1b8 3fff 	cmp.w	r8, #4294967295
  40911e:	d1ee      	bne.n	4090fe <oneDayToSD+0x4ce>
  409120:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409124:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  409128:	4b40      	ldr	r3, [pc, #256]	; (40922c <oneDayToSD+0x5fc>)
  40912a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40912e:	f3c2 384e 	ubfx	r8, r2, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409132:	f002 0007 	and.w	r0, r2, #7
  409136:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409138:	f3c2 09c9 	ubfx	r9, r2, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40913c:	fab9 fa89 	clz	sl, r9
    wshift  = __CLZ(ways) & 0x1f;
  409140:	f00a 0a1f 	and.w	sl, sl, #31
  __ASM volatile ("dsb");
  409144:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  409148:	695a      	ldr	r2, [r3, #20]
  40914a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  40914e:	615a      	str	r2, [r3, #20]
  409150:	f04f 3eff 	mov.w	lr, #4294967295
  409154:	fa0e fb00 	lsl.w	fp, lr, r0
  409158:	fa08 f000 	lsl.w	r0, r8, r0
  40915c:	fa0e fe0a 	lsl.w	lr, lr, sl
  409160:	fa09 fa0a 	lsl.w	sl, r9, sl
              SCB->DCCISW = sw;
  409164:	469c      	mov	ip, r3
         int32_t tmpways = ways;
  409166:	464a      	mov	r2, r9
  409168:	4653      	mov	r3, sl
              sw = ((tmpways << wshift) | (sets << sshift));
  40916a:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40916e:	f8cc 1274 	str.w	r1, [ip, #628]	; 0x274
            } while(tmpways--);
  409172:	3a01      	subs	r2, #1
  409174:	4473      	add	r3, lr
  409176:	f1b2 3fff 	cmp.w	r2, #4294967295
  40917a:	d1f6      	bne.n	40916a <oneDayToSD+0x53a>
        } while(sets--);
  40917c:	f108 38ff 	add.w	r8, r8, #4294967295
  409180:	4458      	add	r0, fp
  409182:	f1b8 3fff 	cmp.w	r8, #4294967295
  409186:	d1ee      	bne.n	409166 <oneDayToSD+0x536>
  409188:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40918c:	f3bf 8f6f 	isb	sy
			delay_ms(10);
  409190:	4827      	ldr	r0, [pc, #156]	; (409230 <oneDayToSD+0x600>)
  409192:	4b1f      	ldr	r3, [pc, #124]	; (409210 <oneDayToSD+0x5e0>)
  409194:	4798      	blx	r3
			sd_mmc_init();
  409196:	4b1c      	ldr	r3, [pc, #112]	; (409208 <oneDayToSD+0x5d8>)
  409198:	4798      	blx	r3
			WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40919a:	4b26      	ldr	r3, [pc, #152]	; (409234 <oneDayToSD+0x604>)
  40919c:	4a26      	ldr	r2, [pc, #152]	; (409238 <oneDayToSD+0x608>)
  40919e:	6013      	str	r3, [r2, #0]
  4091a0:	e730      	b.n	409004 <oneDayToSD+0x3d4>
	printf("MMC INIT %d\r\n",status);
  4091a2:	9903      	ldr	r1, [sp, #12]
  4091a4:	4825      	ldr	r0, [pc, #148]	; (40923c <oneDayToSD+0x60c>)
  4091a6:	4c1d      	ldr	r4, [pc, #116]	; (40921c <oneDayToSD+0x5ec>)
  4091a8:	47a0      	blx	r4
	printf("MOUNT DISK...\r\n");
  4091aa:	4825      	ldr	r0, [pc, #148]	; (409240 <oneDayToSD+0x610>)
  4091ac:	47a0      	blx	r4
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4091ae:	4a21      	ldr	r2, [pc, #132]	; (409234 <oneDayToSD+0x604>)
  4091b0:	4b21      	ldr	r3, [pc, #132]	; (409238 <oneDayToSD+0x608>)
  4091b2:	601a      	str	r2, [r3, #0]
	memset(&fs, 0, sizeof(FATFS));
  4091b4:	f44f 720c 	mov.w	r2, #560	; 0x230
  4091b8:	2100      	movs	r1, #0
  4091ba:	a8be      	add	r0, sp, #760	; 0x2f8
  4091bc:	4b21      	ldr	r3, [pc, #132]	; (409244 <oneDayToSD+0x614>)
  4091be:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  4091c0:	a9be      	add	r1, sp, #760	; 0x2f8
  4091c2:	2000      	movs	r0, #0
  4091c4:	4b20      	ldr	r3, [pc, #128]	; (409248 <oneDayToSD+0x618>)
  4091c6:	4798      	blx	r3
  4091c8:	4605      	mov	r5, r0
	printf("MOUNT DISK RESULT %d\r\n",res);
  4091ca:	4601      	mov	r1, r0
  4091cc:	481f      	ldr	r0, [pc, #124]	; (40924c <oneDayToSD+0x61c>)
  4091ce:	47a0      	blx	r4
	if (FR_INVALID_DRIVE == res) {
  4091d0:	2d0b      	cmp	r5, #11
  4091d2:	f000 8507 	beq.w	409be4 <oneDayToSD+0xfb4>
	printf("TRYING F_OPENDIR()\r\n");
  4091d6:	481e      	ldr	r0, [pc, #120]	; (409250 <oneDayToSD+0x620>)
  4091d8:	4625      	mov	r5, r4
  4091da:	47a0      	blx	r4
	res = f_opendir(&myDir,fdtFolderName);
  4091dc:	a928      	add	r1, sp, #160	; 0xa0
  4091de:	a82c      	add	r0, sp, #176	; 0xb0
  4091e0:	4b1c      	ldr	r3, [pc, #112]	; (409254 <oneDayToSD+0x624>)
  4091e2:	4798      	blx	r3
  4091e4:	4604      	mov	r4, r0
	printf("F_OPENDIR() RES = %d\r\n",res);
  4091e6:	4601      	mov	r1, r0
  4091e8:	481b      	ldr	r0, [pc, #108]	; (409258 <oneDayToSD+0x628>)
  4091ea:	47a8      	blx	r5
	switch (res){
  4091ec:	2c04      	cmp	r4, #4
  4091ee:	f000 80a4 	beq.w	40933a <oneDayToSD+0x70a>
  4091f2:	2c05      	cmp	r4, #5
  4091f4:	f000 80a8 	beq.w	409348 <oneDayToSD+0x718>
  4091f8:	b394      	cbz	r4, 409260 <oneDayToSD+0x630>
		printf("SOME OTHER DIRECTORY ERROR %X \r\n",res);
  4091fa:	4621      	mov	r1, r4
  4091fc:	4817      	ldr	r0, [pc, #92]	; (40925c <oneDayToSD+0x62c>)
  4091fe:	4b07      	ldr	r3, [pc, #28]	; (40921c <oneDayToSD+0x5ec>)
  409200:	4798      	blx	r3
	if(res==0)printf("F_MOUNT GOOD FDT\r\n");  
  409202:	bb94      	cbnz	r4, 40926a <oneDayToSD+0x63a>
  409204:	e02e      	b.n	409264 <oneDayToSD+0x634>
  409206:	bf00      	nop
  409208:	004004a1 	.word	0x004004a1
  40920c:	004d2b25 	.word	0x004d2b25
  409210:	2040008d 	.word	0x2040008d
  409214:	00401009 	.word	0x00401009
  409218:	00410a50 	.word	0x00410a50
  40921c:	0040ce59 	.word	0x0040ce59
  409220:	004004c1 	.word	0x004004c1
  409224:	00410a5c 	.word	0x00410a5c
  409228:	004089bd 	.word	0x004089bd
  40922c:	e000ed00 	.word	0xe000ed00
  409230:	0007b784 	.word	0x0007b784
  409234:	a5000001 	.word	0xa5000001
  409238:	400e1850 	.word	0x400e1850
  40923c:	00410a70 	.word	0x00410a70
  409240:	00410a80 	.word	0x00410a80
  409244:	0040cfb5 	.word	0x0040cfb5
  409248:	0040628d 	.word	0x0040628d
  40924c:	00410a90 	.word	0x00410a90
  409250:	00410aa8 	.word	0x00410aa8
  409254:	00406729 	.word	0x00406729
  409258:	00410ac0 	.word	0x00410ac0
  40925c:	00410b04 	.word	0x00410b04
		printf("FOUND FDT FOLDER\r\n");
  409260:	4877      	ldr	r0, [pc, #476]	; (409440 <oneDayToSD+0x810>)
  409262:	47a8      	blx	r5
	if(res==0)printf("F_MOUNT GOOD FDT\r\n");  
  409264:	4877      	ldr	r0, [pc, #476]	; (409444 <oneDayToSD+0x814>)
  409266:	4b78      	ldr	r3, [pc, #480]	; (409448 <oneDayToSD+0x818>)
  409268:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40926a:	4a78      	ldr	r2, [pc, #480]	; (40944c <oneDayToSD+0x81c>)
  40926c:	4b78      	ldr	r3, [pc, #480]	; (409450 <oneDayToSD+0x820>)
  40926e:	601a      	str	r2, [r3, #0]
	fakeMSec=0;res=0;
  409270:	2500      	movs	r5, #0
		res = f_open(&file_object,
  409272:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 409458 <oneDayToSD+0x828>
			f_close(&file_object);
  409276:	f8df a214 	ldr.w	sl, [pc, #532]	; 40948c <oneDayToSD+0x85c>
			csvFileName[37]=(char)(hex1ToAscii(fakeMSec/10));
  40927a:	f8df 9214 	ldr.w	r9, [pc, #532]	; 409490 <oneDayToSD+0x860>
		res = f_open(&file_object,
  40927e:	2200      	movs	r2, #0
  409280:	a91d      	add	r1, sp, #116	; 0x74
  409282:	a835      	add	r0, sp, #212	; 0xd4
  409284:	47c0      	blx	r8
  409286:	4606      	mov	r6, r0
		if(res==FR_NO_FILE)fakeMSec=101;
  409288:	2804      	cmp	r0, #4
  40928a:	d017      	beq.n	4092bc <oneDayToSD+0x68c>
			f_close(&file_object);
  40928c:	a835      	add	r0, sp, #212	; 0xd4
  40928e:	47d0      	blx	sl
			fakeMSec++;
  409290:	3501      	adds	r5, #1
  409292:	b2ed      	uxtb	r5, r5
			csvFileName[37]=(char)(hex1ToAscii(fakeMSec/10));
  409294:	fba9 3405 	umull	r3, r4, r9, r5
  409298:	08e4      	lsrs	r4, r4, #3
  40929a:	b2e0      	uxtb	r0, r4
  40929c:	4f6d      	ldr	r7, [pc, #436]	; (409454 <oneDayToSD+0x824>)
  40929e:	47b8      	blx	r7
  4092a0:	f88d 0099 	strb.w	r0, [sp, #153]	; 0x99
			csvFileName[38]=(char)(hex1ToAscii(fakeMSec%10));
  4092a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4092a8:	eba5 0044 	sub.w	r0, r5, r4, lsl #1
  4092ac:	b2c0      	uxtb	r0, r0
  4092ae:	47b8      	blx	r7
  4092b0:	f88d 009a 	strb.w	r0, [sp, #154]	; 0x9a
	while((fakeMSec<100)&&(res!=FR_NO_FILE)){
  4092b4:	2d63      	cmp	r5, #99	; 0x63
  4092b6:	d801      	bhi.n	4092bc <oneDayToSD+0x68c>
  4092b8:	2e04      	cmp	r6, #4
  4092ba:	d1e0      	bne.n	40927e <oneDayToSD+0x64e>
 	res = f_open(&file_object, (char const *)csvFileName, FA_CREATE_ALWAYS | FA_WRITE);
  4092bc:	220a      	movs	r2, #10
  4092be:	a91d      	add	r1, sp, #116	; 0x74
  4092c0:	a835      	add	r0, sp, #212	; 0xd4
  4092c2:	4b65      	ldr	r3, [pc, #404]	; (409458 <oneDayToSD+0x828>)
  4092c4:	4798      	blx	r3
	if (res != FR_OK) {
  4092c6:	4601      	mov	r1, r0
  4092c8:	2800      	cmp	r0, #0
  4092ca:	d144      	bne.n	409356 <oneDayToSD+0x726>
	printf("CREATED CSV FILE RES= %d\r\n",res);
  4092cc:	2100      	movs	r1, #0
  4092ce:	4863      	ldr	r0, [pc, #396]	; (40945c <oneDayToSD+0x82c>)
  4092d0:	4d5d      	ldr	r5, [pc, #372]	; (409448 <oneDayToSD+0x818>)
  4092d2:	47a8      	blx	r5
	printf("%s\r\n",csvFileName);
  4092d4:	a91d      	add	r1, sp, #116	; 0x74
  4092d6:	4862      	ldr	r0, [pc, #392]	; (409460 <oneDayToSD+0x830>)
  4092d8:	47a8      	blx	r5
		f_puts(oneDayHeader,&file_object);
  4092da:	a935      	add	r1, sp, #212	; 0xd4
  4092dc:	4861      	ldr	r0, [pc, #388]	; (409464 <oneDayToSD+0x834>)
  4092de:	4b62      	ldr	r3, [pc, #392]	; (409468 <oneDayToSD+0x838>)
  4092e0:	4798      	blx	r3
	archiveBuffPtr=ARCHIVEADDR + ((bcdToHex(archiveDay)-1)*46080);//0x480020;
  4092e2:	f89d 0010 	ldrb.w	r0, [sp, #16]
  4092e6:	4b61      	ldr	r3, [pc, #388]	; (40946c <oneDayToSD+0x83c>)
  4092e8:	4798      	blx	r3
  4092ea:	3801      	subs	r0, #1
  4092ec:	f44f 4434 	mov.w	r4, #46080	; 0xb400
  4092f0:	fb04 f400 	mul.w	r4, r4, r0
	printf("ARCHIVE FROM: %X\r\n",archiveBuffPtr);
  4092f4:	f504 0190 	add.w	r1, r4, #4718592	; 0x480000
  4092f8:	485d      	ldr	r0, [pc, #372]	; (409470 <oneDayToSD+0x840>)
  4092fa:	47a8      	blx	r5
  4092fc:	f8df 9194 	ldr.w	r9, [pc, #404]	; 409494 <oneDayToSD+0x864>
  409300:	44a1      	add	r9, r4
  409302:	4b5c      	ldr	r3, [pc, #368]	; (409474 <oneDayToSD+0x844>)
  409304:	18e3      	adds	r3, r4, r3
  409306:	9317      	str	r3, [sp, #92]	; 0x5c
	char magnetometer=0;
  409308:	2300      	movs	r3, #0
  40930a:	9316      	str	r3, [sp, #88]	; 0x58
	char GPSnumSats=0;
  40930c:	9315      	str	r3, [sp, #84]	; 0x54
	unsigned short GPSttff=0;
  40930e:	9307      	str	r3, [sp, #28]
	char GPSsecond=0;
  409310:	9314      	str	r3, [sp, #80]	; 0x50
	char GPSminute=0;
  409312:	9313      	str	r3, [sp, #76]	; 0x4c
	char GPShour=0;
  409314:	9312      	str	r3, [sp, #72]	; 0x48
	char GPSday=0;
  409316:	9311      	str	r3, [sp, #68]	; 0x44
	char GPSmonth=0;
  409318:	9310      	str	r3, [sp, #64]	; 0x40
	char GPSyear=0;
  40931a:	930f      	str	r3, [sp, #60]	; 0x3c
	char batt=0;
  40931c:	9308      	str	r3, [sp, #32]
	unsigned int longFrac6=0;
  40931e:	930e      	str	r3, [sp, #56]	; 0x38
	unsigned int longFrac=0;
  409320:	9319      	str	r3, [sp, #100]	; 0x64
	char longWhole=0;
  409322:	930d      	str	r3, [sp, #52]	; 0x34
	char longSign=0;
  409324:	930c      	str	r3, [sp, #48]	; 0x30
	unsigned int latFrac6=0;
  409326:	930b      	str	r3, [sp, #44]	; 0x2c
	unsigned int latFrac=0;
  409328:	9318      	str	r3, [sp, #96]	; 0x60
	char latWhole=0;
  40932a:	930a      	str	r3, [sp, #40]	; 0x28
	char latSign=0;
  40932c:	9309      	str	r3, [sp, #36]	; 0x24
	for(recordCtr=0;recordCtr<1440;recordCtr++){//should be 1440
  40932e:	469a      	mov	sl, r3
		hex2ToAscii(hexToBCD(recFormatVers),asciiChars);
  409330:	4f51      	ldr	r7, [pc, #324]	; (409478 <oneDayToSD+0x848>)
  409332:	f8df b164 	ldr.w	fp, [pc, #356]	; 409498 <oneDayToSD+0x868>
		f_putc('2',&file_object);//
  409336:	4c51      	ldr	r4, [pc, #324]	; (40947c <oneDayToSD+0x84c>)
  409338:	e1f1      	b.n	40971e <oneDayToSD+0xaee>
		printf("CREATING FDT FOLDER\r\n");
  40933a:	4851      	ldr	r0, [pc, #324]	; (409480 <oneDayToSD+0x850>)
  40933c:	4b42      	ldr	r3, [pc, #264]	; (409448 <oneDayToSD+0x818>)
  40933e:	4798      	blx	r3
		f_mkdir((char const *)fdtFolderName);
  409340:	a828      	add	r0, sp, #160	; 0xa0
  409342:	4b50      	ldr	r3, [pc, #320]	; (409484 <oneDayToSD+0x854>)
  409344:	4798      	blx	r3
		break;
  409346:	e790      	b.n	40926a <oneDayToSD+0x63a>
		printf("CREATING FDT FOLDER\r\n");
  409348:	484d      	ldr	r0, [pc, #308]	; (409480 <oneDayToSD+0x850>)
  40934a:	4b3f      	ldr	r3, [pc, #252]	; (409448 <oneDayToSD+0x818>)
  40934c:	4798      	blx	r3
		f_mkdir((char const *)fdtFolderName);
  40934e:	a828      	add	r0, sp, #160	; 0xa0
  409350:	4b4c      	ldr	r3, [pc, #304]	; (409484 <oneDayToSD+0x854>)
  409352:	4798      	blx	r3
		break;
  409354:	e789      	b.n	40926a <oneDayToSD+0x63a>
		printf("F_OPEN FAIL res %d\r\n", res);
  409356:	484c      	ldr	r0, [pc, #304]	; (409488 <oneDayToSD+0x858>)
  409358:	4b3b      	ldr	r3, [pc, #236]	; (409448 <oneDayToSD+0x818>)
  40935a:	4798      	blx	r3
		goto oneDay_end_of_test;
  40935c:	f000 bc42 	b.w	409be4 <oneDayToSD+0xfb4>
		if(rtcData[5]<18)beforeNov2=1;//(18 is BCD 12)
  409360:	2b11      	cmp	r3, #17
  409362:	bf8c      	ite	hi
  409364:	2200      	movhi	r2, #0
  409366:	2201      	movls	r2, #1
		if(rtcData[5]>3)afterMar7=1;
  409368:	2b03      	cmp	r3, #3
  40936a:	bf8c      	ite	hi
  40936c:	2301      	movhi	r3, #1
  40936e:	2300      	movls	r3, #0
		if((rtcData[5]==3)&&(thisDay<8))afterMar7=0;
  409370:	d102      	bne.n	409378 <oneDayToSD+0x748>
  409372:	2d07      	cmp	r5, #7
  409374:	f240 827b 	bls.w	40986e <oneDayToSD+0xc3e>
		if((beforeNov2)&&(afterMar7))hexLocHour++;//(18 is BCD 12)
  409378:	2a00      	cmp	r2, #0
  40937a:	f000 8278 	beq.w	40986e <oneDayToSD+0xc3e>
  40937e:	2b00      	cmp	r3, #0
  409380:	f000 8275 	beq.w	40986e <oneDayToSD+0xc3e>
  409384:	f106 0011 	add.w	r0, r6, #17
  409388:	b2c0      	uxtb	r0, r0
  40938a:	e270      	b.n	40986e <oneDayToSD+0xc3e>
			f_putc('-',&file_object);
  40938c:	a935      	add	r1, sp, #212	; 0xd4
  40938e:	202d      	movs	r0, #45	; 0x2d
  409390:	47a0      	blx	r4
			temperatureHigh=0x0700-temperatureHigh;
  409392:	9b03      	ldr	r3, [sp, #12]
  409394:	f5c3 63e0 	rsb	r3, r3, #1792	; 0x700
  409398:	9303      	str	r3, [sp, #12]
			temperatureLow=0x100 - temperatureLow;
  40939a:	f5c5 7580 	rsb	r5, r5, #256	; 0x100
  40939e:	e31e      	b.n	4099de <oneDayToSD+0xdae>
			barom-=10000;
  4093a0:	f5a5 551c 	sub.w	r5, r5, #9984	; 0x2700
  4093a4:	3d10      	subs	r5, #16
			f_putc('1',&file_object);//
  4093a6:	a935      	add	r1, sp, #212	; 0xd4
  4093a8:	2031      	movs	r0, #49	; 0x31
  4093aa:	47a0      	blx	r4
  4093ac:	e361      	b.n	409a72 <oneDayToSD+0xe42>
			if((*archiveBuffPtr)==255){f_putc('-',&file_object);}
  4093ae:	a935      	add	r1, sp, #212	; 0xd4
  4093b0:	202d      	movs	r0, #45	; 0x2d
  4093b2:	47a0      	blx	r4
			f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  4093b4:	a935      	add	r1, sp, #212	; 0xd4
  4093b6:	202c      	movs	r0, #44	; 0x2c
  4093b8:	47a0      	blx	r4
		for(paramCtr=0;paramCtr<12;paramCtr++){//should be 1440
  4093ba:	454d      	cmp	r5, r9
  4093bc:	d013      	beq.n	4093e6 <oneDayToSD+0x7b6>
			if((*archiveBuffPtr)==255){f_putc('-',&file_object);}
  4093be:	f815 0f01 	ldrb.w	r0, [r5, #1]!
  4093c2:	28ff      	cmp	r0, #255	; 0xff
  4093c4:	d0f3      	beq.n	4093ae <oneDayToSD+0x77e>
				hex2ToAscii(hexToBCD(*archiveBuffPtr),asciiChars);
  4093c6:	47b8      	blx	r7
  4093c8:	a91b      	add	r1, sp, #108	; 0x6c
  4093ca:	47d8      	blx	fp
				f_putc(asciiChars[2],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  4093cc:	a935      	add	r1, sp, #212	; 0xd4
  4093ce:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  4093d2:	47a0      	blx	r4
				f_putc(asciiChars[1],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  4093d4:	a935      	add	r1, sp, #212	; 0xd4
  4093d6:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  4093da:	47a0      	blx	r4
				f_putc(asciiChars[0],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  4093dc:	a935      	add	r1, sp, #212	; 0xd4
  4093de:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  4093e2:	47a0      	blx	r4
  4093e4:	e7e6      	b.n	4093b4 <oneDayToSD+0x784>
			hex2ToAscii(hexToBCD(*archiveBuffPtr),asciiChars);
  4093e6:	f899 0001 	ldrb.w	r0, [r9, #1]
  4093ea:	47b8      	blx	r7
  4093ec:	a91b      	add	r1, sp, #108	; 0x6c
  4093ee:	47d8      	blx	fp
			f_putc(asciiChars[2],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  4093f0:	a935      	add	r1, sp, #212	; 0xd4
  4093f2:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  4093f6:	47a0      	blx	r4
			f_putc(asciiChars[1],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  4093f8:	a935      	add	r1, sp, #212	; 0xd4
  4093fa:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  4093fe:	47a0      	blx	r4
			f_putc(asciiChars[0],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  409400:	a935      	add	r1, sp, #212	; 0xd4
  409402:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409406:	47a0      	blx	r4
		f_putc(',',&file_object);//
  409408:	a935      	add	r1, sp, #212	; 0xd4
  40940a:	202c      	movs	r0, #44	; 0x2c
  40940c:	47a0      	blx	r4
		switch (minCycle){
  40940e:	2e13      	cmp	r6, #19
  409410:	d850      	bhi.n	4094b4 <oneDayToSD+0x884>
  409412:	e8df f016 	tbh	[pc, r6, lsl #1]
  409416:	0043      	.short	0x0043
  409418:	036c0364 	.word	0x036c0364
  40941c:	037f0374 	.word	0x037f0374
  409420:	03870383 	.word	0x03870383
  409424:	0397038f 	.word	0x0397038f
  409428:	03a603a2 	.word	0x03a603a2
  40942c:	03ae03aa 	.word	0x03ae03aa
  409430:	03b603b2 	.word	0x03b603b2
  409434:	03be03ba 	.word	0x03be03ba
  409438:	03c803c3 	.word	0x03c803c3
  40943c:	03cf      	.short	0x03cf
  40943e:	bf00      	nop
  409440:	00410ad8 	.word	0x00410ad8
  409444:	00410b28 	.word	0x00410b28
  409448:	0040ce59 	.word	0x0040ce59
  40944c:	a5000001 	.word	0xa5000001
  409450:	400e1850 	.word	0x400e1850
  409454:	00406aa9 	.word	0x00406aa9
  409458:	004062b1 	.word	0x004062b1
  40945c:	00410b54 	.word	0x00410b54
  409460:	00410b70 	.word	0x00410b70
  409464:	00410924 	.word	0x00410924
  409468:	004069c1 	.word	0x004069c1
  40946c:	00406b07 	.word	0x00406b07
  409470:	00410b78 	.word	0x00410b78
  409474:	0048b41d 	.word	0x0048b41d
  409478:	00406b19 	.word	0x00406b19
  40947c:	00406995 	.word	0x00406995
  409480:	00410aec 	.word	0x00410aec
  409484:	004067a9 	.word	0x004067a9
  409488:	00410b3c 	.word	0x00410b3c
  40948c:	00406711 	.word	0x00406711
  409490:	cccccccd 	.word	0xcccccccd
  409494:	0048001d 	.word	0x0048001d
  409498:	00407721 	.word	0x00407721
				if(((*archiveBuffPtr)|0x80)==0x80)latSign='-';
  40949c:	f899 3002 	ldrb.w	r3, [r9, #2]
  4094a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
				else latSign='+';
  4094a4:	2a80      	cmp	r2, #128	; 0x80
  4094a6:	bf0c      	ite	eq
  4094a8:	222d      	moveq	r2, #45	; 0x2d
  4094aa:	222b      	movne	r2, #43	; 0x2b
  4094ac:	9209      	str	r2, [sp, #36]	; 0x24
				latWhole=(*archiveBuffPtr)&0x7F;
  4094ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4094b2:	930a      	str	r3, [sp, #40]	; 0x28
		f_putc(longSign,&file_object);//
  4094b4:	a935      	add	r1, sp, #212	; 0xd4
  4094b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4094b8:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(longWhole),asciiChars);
  4094ba:	980d      	ldr	r0, [sp, #52]	; 0x34
  4094bc:	47b8      	blx	r7
  4094be:	a91b      	add	r1, sp, #108	; 0x6c
  4094c0:	47d8      	blx	fp
		f_putc(asciiChars[2],&file_object);//
  4094c2:	a935      	add	r1, sp, #212	; 0xd4
  4094c4:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  4094c8:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  4094ca:	a935      	add	r1, sp, #212	; 0xd4
  4094cc:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  4094d0:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  4094d2:	a935      	add	r1, sp, #212	; 0xd4
  4094d4:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  4094d8:	47a0      	blx	r4
		f_putc('.',&file_object);//
  4094da:	a935      	add	r1, sp, #212	; 0xd4
  4094dc:	202e      	movs	r0, #46	; 0x2e
  4094de:	47a0      	blx	r4
		hex2ToAscii(hexToBCD((unsigned int)(longFrac6)),asciiChars);
  4094e0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4094e2:	47b8      	blx	r7
  4094e4:	a91b      	add	r1, sp, #108	; 0x6c
  4094e6:	47d8      	blx	fp
		f_putc(asciiChars[4],&file_object);
  4094e8:	a935      	add	r1, sp, #212	; 0xd4
  4094ea:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
  4094ee:	47a0      	blx	r4
		f_putc(asciiChars[3],&file_object);
  4094f0:	a935      	add	r1, sp, #212	; 0xd4
  4094f2:	f89d 006f 	ldrb.w	r0, [sp, #111]	; 0x6f
  4094f6:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);
  4094f8:	a935      	add	r1, sp, #212	; 0xd4
  4094fa:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  4094fe:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);
  409500:	a935      	add	r1, sp, #212	; 0xd4
  409502:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409506:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  409508:	a935      	add	r1, sp, #212	; 0xd4
  40950a:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  40950e:	47a0      	blx	r4
		f_putc(',',&file_object);
  409510:	a935      	add	r1, sp, #212	; 0xd4
  409512:	202c      	movs	r0, #44	; 0x2c
  409514:	47a0      	blx	r4
		f_putc(latSign,&file_object);//
  409516:	a935      	add	r1, sp, #212	; 0xd4
  409518:	9809      	ldr	r0, [sp, #36]	; 0x24
  40951a:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(latWhole),asciiChars);//
  40951c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40951e:	47b8      	blx	r7
  409520:	a91b      	add	r1, sp, #108	; 0x6c
  409522:	47d8      	blx	fp
		f_putc(asciiChars[2],&file_object);//
  409524:	a935      	add	r1, sp, #212	; 0xd4
  409526:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  40952a:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  40952c:	a935      	add	r1, sp, #212	; 0xd4
  40952e:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409532:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  409534:	a935      	add	r1, sp, #212	; 0xd4
  409536:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  40953a:	47a0      	blx	r4
		f_putc('.',&file_object);//.
  40953c:	a935      	add	r1, sp, #212	; 0xd4
  40953e:	202e      	movs	r0, #46	; 0x2e
  409540:	47a0      	blx	r4
		hex2ToAscii(hexToBCD((unsigned int)(latFrac6)),asciiChars);
  409542:	980b      	ldr	r0, [sp, #44]	; 0x2c
  409544:	47b8      	blx	r7
  409546:	a91b      	add	r1, sp, #108	; 0x6c
  409548:	47d8      	blx	fp
		f_putc(asciiChars[4],&file_object);
  40954a:	a935      	add	r1, sp, #212	; 0xd4
  40954c:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
  409550:	47a0      	blx	r4
		f_putc(asciiChars[3],&file_object);
  409552:	a935      	add	r1, sp, #212	; 0xd4
  409554:	f89d 006f 	ldrb.w	r0, [sp, #111]	; 0x6f
  409558:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);
  40955a:	a935      	add	r1, sp, #212	; 0xd4
  40955c:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  409560:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);
  409562:	a935      	add	r1, sp, #212	; 0xd4
  409564:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409568:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40956a:	a935      	add	r1, sp, #212	; 0xd4
  40956c:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409570:	47a0      	blx	r4
		f_putc(',',&file_object);
  409572:	a935      	add	r1, sp, #212	; 0xd4
  409574:	202c      	movs	r0, #44	; 0x2c
  409576:	47a0      	blx	r4
		f_putc('2',&file_object);//
  409578:	a935      	add	r1, sp, #212	; 0xd4
  40957a:	2032      	movs	r0, #50	; 0x32
  40957c:	47a0      	blx	r4
		f_putc('0',&file_object);//
  40957e:	a935      	add	r1, sp, #212	; 0xd4
  409580:	2030      	movs	r0, #48	; 0x30
  409582:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSyear),asciiChars);		
  409584:	980f      	ldr	r0, [sp, #60]	; 0x3c
  409586:	47b8      	blx	r7
  409588:	a91b      	add	r1, sp, #108	; 0x6c
  40958a:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//
  40958c:	a935      	add	r1, sp, #212	; 0xd4
  40958e:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409592:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  409594:	a935      	add	r1, sp, #212	; 0xd4
  409596:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  40959a:	47a0      	blx	r4
		f_putc('-',&file_object);//
  40959c:	a935      	add	r1, sp, #212	; 0xd4
  40959e:	202d      	movs	r0, #45	; 0x2d
  4095a0:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSmonth),asciiChars);
  4095a2:	9810      	ldr	r0, [sp, #64]	; 0x40
  4095a4:	47b8      	blx	r7
  4095a6:	a91b      	add	r1, sp, #108	; 0x6c
  4095a8:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//
  4095aa:	a935      	add	r1, sp, #212	; 0xd4
  4095ac:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  4095b0:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  4095b2:	a935      	add	r1, sp, #212	; 0xd4
  4095b4:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  4095b8:	47a0      	blx	r4
		f_putc('-',&file_object);//
  4095ba:	a935      	add	r1, sp, #212	; 0xd4
  4095bc:	202d      	movs	r0, #45	; 0x2d
  4095be:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSday),asciiChars);
  4095c0:	9811      	ldr	r0, [sp, #68]	; 0x44
  4095c2:	47b8      	blx	r7
  4095c4:	a91b      	add	r1, sp, #108	; 0x6c
  4095c6:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//
  4095c8:	a935      	add	r1, sp, #212	; 0xd4
  4095ca:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  4095ce:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  4095d0:	a935      	add	r1, sp, #212	; 0xd4
  4095d2:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  4095d6:	47a0      	blx	r4
		f_putc(',',&file_object);//
  4095d8:	a935      	add	r1, sp, #212	; 0xd4
  4095da:	202c      	movs	r0, #44	; 0x2c
  4095dc:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPShour),asciiChars);
  4095de:	9812      	ldr	r0, [sp, #72]	; 0x48
  4095e0:	47b8      	blx	r7
  4095e2:	a91b      	add	r1, sp, #108	; 0x6c
  4095e4:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//
  4095e6:	a935      	add	r1, sp, #212	; 0xd4
  4095e8:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  4095ec:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  4095ee:	a935      	add	r1, sp, #212	; 0xd4
  4095f0:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  4095f4:	47a0      	blx	r4
		f_putc(':',&file_object);//
  4095f6:	a935      	add	r1, sp, #212	; 0xd4
  4095f8:	203a      	movs	r0, #58	; 0x3a
  4095fa:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSminute),asciiChars);
  4095fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4095fe:	47b8      	blx	r7
  409600:	a91b      	add	r1, sp, #108	; 0x6c
  409602:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//
  409604:	a935      	add	r1, sp, #212	; 0xd4
  409606:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  40960a:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40960c:	a935      	add	r1, sp, #212	; 0xd4
  40960e:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409612:	47a0      	blx	r4
		f_putc(':',&file_object);//
  409614:	a935      	add	r1, sp, #212	; 0xd4
  409616:	203a      	movs	r0, #58	; 0x3a
  409618:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSsecond),asciiChars);
  40961a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40961c:	47b8      	blx	r7
  40961e:	a91b      	add	r1, sp, #108	; 0x6c
  409620:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//
  409622:	a935      	add	r1, sp, #212	; 0xd4
  409624:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409628:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40962a:	a935      	add	r1, sp, #212	; 0xd4
  40962c:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409630:	47a0      	blx	r4
		f_putc(',',&file_object);//
  409632:	a935      	add	r1, sp, #212	; 0xd4
  409634:	202c      	movs	r0, #44	; 0x2c
  409636:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(batt),asciiChars);//placeholder
  409638:	9808      	ldr	r0, [sp, #32]
  40963a:	47b8      	blx	r7
  40963c:	a91b      	add	r1, sp, #108	; 0x6c
  40963e:	47d8      	blx	fp
		f_putc(asciiChars[2],&file_object);//
  409640:	a935      	add	r1, sp, #212	; 0xd4
  409642:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  409646:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  409648:	a935      	add	r1, sp, #212	; 0xd4
  40964a:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  40964e:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  409650:	a935      	add	r1, sp, #212	; 0xd4
  409652:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409656:	47a0      	blx	r4
		f_putc(',',&file_object);//
  409658:	a935      	add	r1, sp, #212	; 0xd4
  40965a:	202c      	movs	r0, #44	; 0x2c
  40965c:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSnumSats),asciiChars);//placeholder
  40965e:	9815      	ldr	r0, [sp, #84]	; 0x54
  409660:	47b8      	blx	r7
  409662:	a91b      	add	r1, sp, #108	; 0x6c
  409664:	47d8      	blx	fp
		f_putc(asciiChars[2],&file_object);//
  409666:	a935      	add	r1, sp, #212	; 0xd4
  409668:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  40966c:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  40966e:	a935      	add	r1, sp, #212	; 0xd4
  409670:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409674:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  409676:	a935      	add	r1, sp, #212	; 0xd4
  409678:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  40967c:	47a0      	blx	r4
		f_putc(',',&file_object);//
  40967e:	a935      	add	r1, sp, #212	; 0xd4
  409680:	202c      	movs	r0, #44	; 0x2c
  409682:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSttff),asciiChars);//placeholder
  409684:	9807      	ldr	r0, [sp, #28]
  409686:	47b8      	blx	r7
  409688:	a91b      	add	r1, sp, #108	; 0x6c
  40968a:	47d8      	blx	fp
		f_putc(asciiChars[3],&file_object);//
  40968c:	a935      	add	r1, sp, #212	; 0xd4
  40968e:	f89d 006f 	ldrb.w	r0, [sp, #111]	; 0x6f
  409692:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);//
  409694:	a935      	add	r1, sp, #212	; 0xd4
  409696:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  40969a:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  40969c:	a935      	add	r1, sp, #212	; 0xd4
  40969e:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  4096a2:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  4096a4:	a935      	add	r1, sp, #212	; 0xd4
  4096a6:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  4096aa:	47a0      	blx	r4
		f_putc(',',&file_object);//
  4096ac:	a935      	add	r1, sp, #212	; 0xd4
  4096ae:	202c      	movs	r0, #44	; 0x2c
  4096b0:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(magnetometer),asciiChars);//placeholder
  4096b2:	9816      	ldr	r0, [sp, #88]	; 0x58
  4096b4:	47b8      	blx	r7
  4096b6:	a91b      	add	r1, sp, #108	; 0x6c
  4096b8:	47d8      	blx	fp
		f_putc(asciiChars[2],&file_object);//
  4096ba:	a935      	add	r1, sp, #212	; 0xd4
  4096bc:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  4096c0:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  4096c2:	a935      	add	r1, sp, #212	; 0xd4
  4096c4:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  4096c8:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  4096ca:	a935      	add	r1, sp, #212	; 0xd4
  4096cc:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  4096d0:	47a0      	blx	r4
		f_putc(0x0D,&file_object);
  4096d2:	a935      	add	r1, sp, #212	; 0xd4
  4096d4:	200d      	movs	r0, #13
  4096d6:	47a0      	blx	r4
		if((recordCtr%50)==0)printf(".");
  4096d8:	4aaf      	ldr	r2, [pc, #700]	; (409998 <oneDayToSD+0xd68>)
  4096da:	fb82 320a 	smull	r3, r2, r2, sl
  4096de:	ea4f 73ea 	mov.w	r3, sl, asr #31
  4096e2:	ebc3 1322 	rsb	r3, r3, r2, asr #4
  4096e6:	2232      	movs	r2, #50	; 0x32
  4096e8:	fb02 a313 	mls	r3, r2, r3, sl
  4096ec:	2b00      	cmp	r3, #0
  4096ee:	f000 8265 	beq.w	409bbc <oneDayToSD+0xf8c>
		if((recordCtr%200)==0)WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  4096f2:	4aa9      	ldr	r2, [pc, #676]	; (409998 <oneDayToSD+0xd68>)
  4096f4:	fb82 320a 	smull	r3, r2, r2, sl
  4096f8:	ea4f 73ea 	mov.w	r3, sl, asr #31
  4096fc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  409700:	22c8      	movs	r2, #200	; 0xc8
  409702:	fb02 a313 	mls	r3, r2, r3, sl
  409706:	b913      	cbnz	r3, 40970e <oneDayToSD+0xade>
  409708:	4aa4      	ldr	r2, [pc, #656]	; (40999c <oneDayToSD+0xd6c>)
  40970a:	4ba5      	ldr	r3, [pc, #660]	; (4099a0 <oneDayToSD+0xd70>)
  40970c:	601a      	str	r2, [r3, #0]
	for(recordCtr=0;recordCtr<1440;recordCtr++){//should be 1440
  40970e:	f10a 0a01 	add.w	sl, sl, #1
  409712:	f109 0920 	add.w	r9, r9, #32
  409716:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  409718:	454b      	cmp	r3, r9
  40971a:	f000 8253 	beq.w	409bc4 <oneDayToSD+0xf94>
		temperatureHigh=((int)((*archiveBuffPtr)&0x00E0))<<3;
  40971e:	f819 0c1d 	ldrb.w	r0, [r9, #-29]
  409722:	00c3      	lsls	r3, r0, #3
  409724:	9305      	str	r3, [sp, #20]
  409726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40972a:	9303      	str	r3, [sp, #12]
		humidityHB=((int)((*archiveBuffPtr)&0x0018))<<5;
  40972c:	0143      	lsls	r3, r0, #5
  40972e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  409732:	9306      	str	r3, [sp, #24]
		lightHB=((int)((*archiveBuffPtr)&0x0006))<<7;
  409734:	01c3      	lsls	r3, r0, #7
  409736:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40973a:	9304      	str	r3, [sp, #16]
		hex2ToAscii(hexToBCD(recFormatVers),asciiChars);
  40973c:	f000 0001 	and.w	r0, r0, #1
  409740:	47b8      	blx	r7
  409742:	a91b      	add	r1, sp, #108	; 0x6c
  409744:	47d8      	blx	fp
		temp=asciiChars[0];
  409746:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
		asciiChars[0]=asciiChars[2];
  40974a:	f89d 206e 	ldrb.w	r2, [sp, #110]	; 0x6e
  40974e:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
		asciiChars[2]=temp;
  409752:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
		asciiChars[3]=',';
  409756:	f04f 032c 	mov.w	r3, #44	; 0x2c
  40975a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
		asciiChars[4]=0;
  40975e:	2300      	movs	r3, #0
  409760:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
		f_puts((const char*)asciiChars,&file_object);
  409764:	a935      	add	r1, sp, #212	; 0xd4
  409766:	a81b      	add	r0, sp, #108	; 0x6c
  409768:	4b8e      	ldr	r3, [pc, #568]	; (4099a4 <oneDayToSD+0xd74>)
  40976a:	4798      	blx	r3
		f_putc('2',&file_object);//
  40976c:	a935      	add	r1, sp, #212	; 0xd4
  40976e:	2032      	movs	r0, #50	; 0x32
  409770:	47a0      	blx	r4
		f_putc('0',&file_object);//
  409772:	a935      	add	r1, sp, #212	; 0xd4
  409774:	2030      	movs	r0, #48	; 0x30
  409776:	47a0      	blx	r4
		f_putc((char)(hex1ToAscii((bcdToHex(rtcData[6]))/10)),&file_object);//Year HB from RTC
  409778:	f89d 00ae 	ldrb.w	r0, [sp, #174]	; 0xae
  40977c:	4e8a      	ldr	r6, [pc, #552]	; (4099a8 <oneDayToSD+0xd78>)
  40977e:	47b0      	blx	r6
  409780:	4d8a      	ldr	r5, [pc, #552]	; (4099ac <oneDayToSD+0xd7c>)
  409782:	fba5 3000 	umull	r3, r0, r5, r0
  409786:	f3c0 00c7 	ubfx	r0, r0, #3, #8
  40978a:	f8df 8224 	ldr.w	r8, [pc, #548]	; 4099b0 <oneDayToSD+0xd80>
  40978e:	47c0      	blx	r8
  409790:	a935      	add	r1, sp, #212	; 0xd4
  409792:	b2c0      	uxtb	r0, r0
  409794:	47a0      	blx	r4
		f_putc((char)(hex1ToAscii((bcdToHex(rtcData[6]))%10)),&file_object);//Year LB from RTC
  409796:	f89d 00ae 	ldrb.w	r0, [sp, #174]	; 0xae
  40979a:	47b0      	blx	r6
  40979c:	fba5 2300 	umull	r2, r3, r5, r0
  4097a0:	08db      	lsrs	r3, r3, #3
  4097a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4097a6:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
  4097aa:	b2c0      	uxtb	r0, r0
  4097ac:	47c0      	blx	r8
  4097ae:	a935      	add	r1, sp, #212	; 0xd4
  4097b0:	b2c0      	uxtb	r0, r0
  4097b2:	47a0      	blx	r4
		f_putc('-',&file_object);//
  4097b4:	a935      	add	r1, sp, #212	; 0xd4
  4097b6:	202d      	movs	r0, #45	; 0x2d
  4097b8:	47a0      	blx	r4
		f_putc((char)(hex1ToAscii((bcdToHex(rtcData[5]))/10)),&file_object);//Month HB from RTC
  4097ba:	f89d 00ad 	ldrb.w	r0, [sp, #173]	; 0xad
  4097be:	47b0      	blx	r6
  4097c0:	fba5 3000 	umull	r3, r0, r5, r0
  4097c4:	f3c0 00c7 	ubfx	r0, r0, #3, #8
  4097c8:	47c0      	blx	r8
  4097ca:	a935      	add	r1, sp, #212	; 0xd4
  4097cc:	b2c0      	uxtb	r0, r0
  4097ce:	47a0      	blx	r4
		f_putc((char)(hex1ToAscii((bcdToHex(rtcData[5]))%10)),&file_object);//Month LB from RTC
  4097d0:	f89d 00ad 	ldrb.w	r0, [sp, #173]	; 0xad
  4097d4:	47b0      	blx	r6
  4097d6:	fba5 3500 	umull	r3, r5, r5, r0
  4097da:	08ed      	lsrs	r5, r5, #3
  4097dc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4097e0:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
  4097e4:	b2c0      	uxtb	r0, r0
  4097e6:	47c0      	blx	r8
  4097e8:	a935      	add	r1, sp, #212	; 0xd4
  4097ea:	b2c0      	uxtb	r0, r0
  4097ec:	47a0      	blx	r4
		f_putc('-',&file_object);//
  4097ee:	a935      	add	r1, sp, #212	; 0xd4
  4097f0:	202d      	movs	r0, #45	; 0x2d
  4097f2:	47a0      	blx	r4
		thisDay=*archiveBuffPtr++;
  4097f4:	f819 5c1c 	ldrb.w	r5, [r9, #-28]
		hex2ToAscii(thisDay,asciiChars);//Date is already in BCD
  4097f8:	a91b      	add	r1, sp, #108	; 0x6c
  4097fa:	4628      	mov	r0, r5
  4097fc:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//Date from flash archive
  4097fe:	a935      	add	r1, sp, #212	; 0xd4
  409800:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409804:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);////Date from flash archive
  409806:	a935      	add	r1, sp, #212	; 0xd4
  409808:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  40980c:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  40980e:	a935      	add	r1, sp, #212	; 0xd4
  409810:	202c      	movs	r0, #44	; 0x2c
  409812:	47a0      	blx	r4
		hexLocHour=*archiveBuffPtr++;
  409814:	f819 8c1b 	ldrb.w	r8, [r9, #-27]
		hex2ToAscii(hexLocHour,asciiChars);//hexLocHour is still BCD at this line
  409818:	a91b      	add	r1, sp, #108	; 0x6c
  40981a:	4640      	mov	r0, r8
  40981c:	47d8      	blx	fp
		hexLocHour=bcdToHex(hexLocHour);
  40981e:	4640      	mov	r0, r8
  409820:	47b0      	blx	r6
  409822:	4606      	mov	r6, r0
		f_putc(asciiChars[1],&file_object);//Hour HB from flash archive
  409824:	a935      	add	r1, sp, #212	; 0xd4
  409826:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  40982a:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//Hour LB from flash archive
  40982c:	a935      	add	r1, sp, #212	; 0xd4
  40982e:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409832:	47a0      	blx	r4
		f_putc(':',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  409834:	a935      	add	r1, sp, #212	; 0xd4
  409836:	203a      	movs	r0, #58	; 0x3a
  409838:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr,asciiChars);//date and time is already in BCD
  40983a:	a91b      	add	r1, sp, #108	; 0x6c
  40983c:	f819 0c1a 	ldrb.w	r0, [r9, #-26]
  409840:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//Minute HB from flash archive
  409842:	a935      	add	r1, sp, #212	; 0xd4
  409844:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409848:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//Minute LB from flash archive
  40984a:	a935      	add	r1, sp, #212	; 0xd4
  40984c:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409850:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  409852:	a935      	add	r1, sp, #212	; 0xd4
  409854:	202c      	movs	r0, #44	; 0x2c
  409856:	47a0      	blx	r4
		hexLocHour=hexLocHour+24+TIMEZONE_OFFSET;
  409858:	f106 0010 	add.w	r0, r6, #16
  40985c:	b2c0      	uxtb	r0, r0
		if(rtcData[5]<18)beforeNov2=1;//(18 is BCD 12)
  40985e:	f89d 30ad 	ldrb.w	r3, [sp, #173]	; 0xad
		if((rtcData[5]==11)&&(thisDay>1))beforeNov2=0;
  409862:	2b0b      	cmp	r3, #11
  409864:	f47f ad7c 	bne.w	409360 <oneDayToSD+0x730>
  409868:	2d01      	cmp	r5, #1
  40986a:	f67f ad79 	bls.w	409360 <oneDayToSD+0x730>
		if(hexLocHour>23)hexLocHour-=24;
  40986e:	2817      	cmp	r0, #23
  409870:	d901      	bls.n	409876 <oneDayToSD+0xc46>
  409872:	3818      	subs	r0, #24
  409874:	b2c0      	uxtb	r0, r0
		hexLocHour=hexToBCD(hexLocHour);
  409876:	47b8      	blx	r7
		hex2ToAscii(hexLocHour,asciiChars);//hexLocalHour is now BCD again.
  409878:	a91b      	add	r1, sp, #108	; 0x6c
  40987a:	b2c0      	uxtb	r0, r0
  40987c:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//Hour HB from flash archive
  40987e:	a935      	add	r1, sp, #212	; 0xd4
  409880:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409884:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//Hour LB from flash archive
  409886:	a935      	add	r1, sp, #212	; 0xd4
  409888:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  40988c:	47a0      	blx	r4
		f_putc(':',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  40988e:	a935      	add	r1, sp, #212	; 0xd4
  409890:	203a      	movs	r0, #58	; 0x3a
  409892:	47a0      	blx	r4
		minCycle=(bcdToHex(*archiveBuffPtr))&0x1F;
  409894:	f819 5c1a 	ldrb.w	r5, [r9, #-26]
  409898:	4628      	mov	r0, r5
  40989a:	4b43      	ldr	r3, [pc, #268]	; (4099a8 <oneDayToSD+0xd78>)
  40989c:	4798      	blx	r3
  40989e:	f000 061f 	and.w	r6, r0, #31
		hex2ToAscii(*archiveBuffPtr++,asciiChars);//date and time is already in BCD
  4098a2:	a91b      	add	r1, sp, #108	; 0x6c
  4098a4:	4628      	mov	r0, r5
  4098a6:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//Minute HB from flash archive
  4098a8:	a935      	add	r1, sp, #212	; 0xd4
  4098aa:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  4098ae:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//Minute LB from flash archive
  4098b0:	a935      	add	r1, sp, #212	; 0xd4
  4098b2:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  4098b6:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  4098b8:	a935      	add	r1, sp, #212	; 0xd4
  4098ba:	202c      	movs	r0, #44	; 0x2c
  4098bc:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(*archiveBuffPtr++),asciiChars);
  4098be:	f819 0c19 	ldrb.w	r0, [r9, #-25]
  4098c2:	47b8      	blx	r7
  4098c4:	a91b      	add	r1, sp, #108	; 0x6c
  4098c6:	47d8      	blx	fp
		f_putc(asciiChars[2],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  4098c8:	a935      	add	r1, sp, #212	; 0xd4
  4098ca:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  4098ce:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  4098d0:	a935      	add	r1, sp, #212	; 0xd4
  4098d2:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  4098d6:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  4098d8:	a935      	add	r1, sp, #212	; 0xd4
  4098da:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  4098de:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  4098e0:	a935      	add	r1, sp, #212	; 0xd4
  4098e2:	202c      	movs	r0, #44	; 0x2c
  4098e4:	47a0      	blx	r4
		f_putc(0x27,&file_object);//apostrophe forces Excel to display as a string
  4098e6:	a935      	add	r1, sp, #212	; 0xd4
  4098e8:	2027      	movs	r0, #39	; 0x27
  4098ea:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);//Seconds 0..15
  4098ec:	a91b      	add	r1, sp, #108	; 0x6c
  4098ee:	f819 0c18 	ldrb.w	r0, [r9, #-24]
  4098f2:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  4098f4:	a935      	add	r1, sp, #212	; 0xd4
  4098f6:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  4098fa:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  4098fc:	a935      	add	r1, sp, #212	; 0xd4
  4098fe:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409902:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);
  409904:	a91b      	add	r1, sp, #108	; 0x6c
  409906:	f819 0c17 	ldrb.w	r0, [r9, #-23]
  40990a:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  40990c:	a935      	add	r1, sp, #212	; 0xd4
  40990e:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409912:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  409914:	a935      	add	r1, sp, #212	; 0xd4
  409916:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  40991a:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);
  40991c:	a91b      	add	r1, sp, #108	; 0x6c
  40991e:	f819 0c16 	ldrb.w	r0, [r9, #-22]
  409922:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  409924:	a935      	add	r1, sp, #212	; 0xd4
  409926:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  40992a:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40992c:	a935      	add	r1, sp, #212	; 0xd4
  40992e:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409932:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);
  409934:	a91b      	add	r1, sp, #108	; 0x6c
  409936:	f819 0c15 	ldrb.w	r0, [r9, #-21]
  40993a:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  40993c:	a935      	add	r1, sp, #212	; 0xd4
  40993e:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409942:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  409944:	a935      	add	r1, sp, #212	; 0xd4
  409946:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  40994a:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);
  40994c:	a91b      	add	r1, sp, #108	; 0x6c
  40994e:	f819 0c14 	ldrb.w	r0, [r9, #-20]
  409952:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  409954:	a935      	add	r1, sp, #212	; 0xd4
  409956:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  40995a:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40995c:	a935      	add	r1, sp, #212	; 0xd4
  40995e:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409962:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);
  409964:	a91b      	add	r1, sp, #108	; 0x6c
  409966:	f819 0c13 	ldrb.w	r0, [r9, #-19]
  40996a:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  40996c:	a935      	add	r1, sp, #212	; 0xd4
  40996e:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409972:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  409974:	a935      	add	r1, sp, #212	; 0xd4
  409976:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  40997a:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);
  40997c:	a91b      	add	r1, sp, #108	; 0x6c
  40997e:	f819 0c12 	ldrb.w	r0, [r9, #-18]
  409982:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  409984:	a935      	add	r1, sp, #212	; 0xd4
  409986:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  40998a:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40998c:	a935      	add	r1, sp, #212	; 0xd4
  40998e:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409992:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);//Seconds 54..59
  409994:	a91b      	add	r1, sp, #108	; 0x6c
  409996:	e00d      	b.n	4099b4 <oneDayToSD+0xd84>
  409998:	51eb851f 	.word	0x51eb851f
  40999c:	a5000001 	.word	0xa5000001
  4099a0:	400e1850 	.word	0x400e1850
  4099a4:	004069c1 	.word	0x004069c1
  4099a8:	00406b07 	.word	0x00406b07
  4099ac:	cccccccd 	.word	0xcccccccd
  4099b0:	00406aa9 	.word	0x00406aa9
  4099b4:	f819 0c11 	ldrb.w	r0, [r9, #-17]
  4099b8:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  4099ba:	a935      	add	r1, sp, #212	; 0xd4
  4099bc:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  4099c0:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  4099c2:	a935      	add	r1, sp, #212	; 0xd4
  4099c4:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  4099c8:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  4099ca:	a935      	add	r1, sp, #212	; 0xd4
  4099cc:	202c      	movs	r0, #44	; 0x2c
  4099ce:	47a0      	blx	r4
		temperatureLow=*archiveBuffPtr;
  4099d0:	f819 5c10 	ldrb.w	r5, [r9, #-16]
		if((temperatureHigh&0x0400)==0x0400){
  4099d4:	9b05      	ldr	r3, [sp, #20]
  4099d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4099da:	f47f acd7 	bne.w	40938c <oneDayToSD+0x75c>
		hex2ToAscii(hexToBCD((short)(temperatureHigh+temperatureLow)),asciiChars);
  4099de:	9b03      	ldr	r3, [sp, #12]
  4099e0:	442b      	add	r3, r5
  4099e2:	b218      	sxth	r0, r3
  4099e4:	47b8      	blx	r7
  4099e6:	a91b      	add	r1, sp, #108	; 0x6c
  4099e8:	47d8      	blx	fp
		f_putc(asciiChars[3],&file_object);//
  4099ea:	a935      	add	r1, sp, #212	; 0xd4
  4099ec:	f89d 006f 	ldrb.w	r0, [sp, #111]	; 0x6f
  4099f0:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);//
  4099f2:	a935      	add	r1, sp, #212	; 0xd4
  4099f4:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  4099f8:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  4099fa:	a935      	add	r1, sp, #212	; 0xd4
  4099fc:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409a00:	47a0      	blx	r4
		f_putc('.',&file_object);//
  409a02:	a935      	add	r1, sp, #212	; 0xd4
  409a04:	202e      	movs	r0, #46	; 0x2e
  409a06:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  409a08:	a935      	add	r1, sp, #212	; 0xd4
  409a0a:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409a0e:	47a0      	blx	r4
		f_putc(',',&file_object);//
  409a10:	a935      	add	r1, sp, #212	; 0xd4
  409a12:	202c      	movs	r0, #44	; 0x2c
  409a14:	47a0      	blx	r4
		humidityVal=(*archiveBuffPtr)+humidityHB;
  409a16:	f819 0c0f 	ldrb.w	r0, [r9, #-15]
  409a1a:	9b06      	ldr	r3, [sp, #24]
  409a1c:	4418      	add	r0, r3
		humidityVal=(humidityVal + (humidityVal>>2))-60;//from datasheet RH = (125*val)/1024 - 6.  which is about (1.25*val) - 60
  409a1e:	eb00 00a0 	add.w	r0, r0, r0, asr #2
		hex2ToAscii(hexToBCD(humidityVal),asciiChars);
  409a22:	383c      	subs	r0, #60	; 0x3c
  409a24:	47b8      	blx	r7
  409a26:	a91b      	add	r1, sp, #108	; 0x6c
  409a28:	47d8      	blx	fp
		f_putc(asciiChars[3],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  409a2a:	a935      	add	r1, sp, #212	; 0xd4
  409a2c:	f89d 006f 	ldrb.w	r0, [sp, #111]	; 0x6f
  409a30:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  409a32:	a935      	add	r1, sp, #212	; 0xd4
  409a34:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  409a38:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  409a3a:	a935      	add	r1, sp, #212	; 0xd4
  409a3c:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409a40:	47a0      	blx	r4
		f_putc('.',&file_object);
  409a42:	a935      	add	r1, sp, #212	; 0xd4
  409a44:	202e      	movs	r0, #46	; 0x2e
  409a46:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  409a48:	a935      	add	r1, sp, #212	; 0xd4
  409a4a:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409a4e:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  409a50:	a935      	add	r1, sp, #212	; 0xd4
  409a52:	202c      	movs	r0, #44	; 0x2c
  409a54:	47a0      	blx	r4
		barom=(((int)(*archiveBuffPtr))&0x000000FF)<<8;
  409a56:	f819 3c0e 	ldrb.w	r3, [r9, #-14]
		barom+=*archiveBuffPtr;
  409a5a:	f819 5c0d 	ldrb.w	r5, [r9, #-13]
  409a5e:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		barom<<=1;
  409a62:	006d      	lsls	r5, r5, #1
		barom&=0x00003FFF;
  409a64:	f3c5 050d 	ubfx	r5, r5, #0, #14
		if(barom>9999){
  409a68:	f242 730f 	movw	r3, #9999	; 0x270f
  409a6c:	429d      	cmp	r5, r3
  409a6e:	f73f ac97 	bgt.w	4093a0 <oneDayToSD+0x770>
		hex2ToAscii(hexToBCD(barom),asciiChars);
  409a72:	4628      	mov	r0, r5
  409a74:	47b8      	blx	r7
  409a76:	a91b      	add	r1, sp, #108	; 0x6c
  409a78:	47d8      	blx	fp
		f_putc(asciiChars[3],&file_object);//
  409a7a:	a935      	add	r1, sp, #212	; 0xd4
  409a7c:	f89d 006f 	ldrb.w	r0, [sp, #111]	; 0x6f
  409a80:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);//
  409a82:	a935      	add	r1, sp, #212	; 0xd4
  409a84:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  409a88:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  409a8a:	a935      	add	r1, sp, #212	; 0xd4
  409a8c:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409a90:	47a0      	blx	r4
		f_putc('.',&file_object);//
  409a92:	a935      	add	r1, sp, #212	; 0xd4
  409a94:	202e      	movs	r0, #46	; 0x2e
  409a96:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  409a98:	a935      	add	r1, sp, #212	; 0xd4
  409a9a:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409a9e:	47a0      	blx	r4
		f_putc(',',&file_object);//
  409aa0:	a935      	add	r1, sp, #212	; 0xd4
  409aa2:	202c      	movs	r0, #44	; 0x2c
  409aa4:	47a0      	blx	r4
		lightVal=(*archiveBuffPtr)+lightHB;
  409aa6:	464d      	mov	r5, r9
  409aa8:	f815 0d0c 	ldrb.w	r0, [r5, #-12]!
		hex2ToAscii(hexToBCD(lightVal),asciiChars);
  409aac:	9b04      	ldr	r3, [sp, #16]
  409aae:	4418      	add	r0, r3
  409ab0:	47b8      	blx	r7
  409ab2:	a91b      	add	r1, sp, #108	; 0x6c
  409ab4:	47d8      	blx	fp
		f_putc(asciiChars[3],&file_object);//
  409ab6:	a935      	add	r1, sp, #212	; 0xd4
  409ab8:	f89d 006f 	ldrb.w	r0, [sp, #111]	; 0x6f
  409abc:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  409abe:	a935      	add	r1, sp, #212	; 0xd4
  409ac0:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
  409ac4:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  409ac6:	a935      	add	r1, sp, #212	; 0xd4
  409ac8:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
  409acc:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  409ace:	a935      	add	r1, sp, #212	; 0xd4
  409ad0:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  409ad4:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  409ad6:	a935      	add	r1, sp, #212	; 0xd4
  409ad8:	202c      	movs	r0, #44	; 0x2c
  409ada:	47a0      	blx	r4
  409adc:	e46f      	b.n	4093be <oneDayToSD+0x78e>
				latFrac=((unsigned int)(*archiveBuffPtr))*10000;
  409ade:	f899 3002 	ldrb.w	r3, [r9, #2]
  409ae2:	f242 7210 	movw	r2, #10000	; 0x2710
  409ae6:	fb02 f303 	mul.w	r3, r2, r3
  409aea:	9318      	str	r3, [sp, #96]	; 0x60
				break;
  409aec:	e4e2      	b.n	4094b4 <oneDayToSD+0x884>
				latFrac+=((unsigned int)(*archiveBuffPtr))*100;
  409aee:	f899 3002 	ldrb.w	r3, [r9, #2]
  409af2:	2264      	movs	r2, #100	; 0x64
  409af4:	9918      	ldr	r1, [sp, #96]	; 0x60
  409af6:	fb02 1303 	mla	r3, r2, r3, r1
  409afa:	9318      	str	r3, [sp, #96]	; 0x60
				break;
  409afc:	e4da      	b.n	4094b4 <oneDayToSD+0x884>
				latFrac+=(unsigned int)(*archiveBuffPtr);
  409afe:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b02:	9a18      	ldr	r2, [sp, #96]	; 0x60
  409b04:	441a      	add	r2, r3
  409b06:	9218      	str	r2, [sp, #96]	; 0x60
				latFrac6=latFrac/6;
  409b08:	4b3b      	ldr	r3, [pc, #236]	; (409bf8 <oneDayToSD+0xfc8>)
  409b0a:	fba3 2302 	umull	r2, r3, r3, r2
  409b0e:	089b      	lsrs	r3, r3, #2
  409b10:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
  409b12:	e4cf      	b.n	4094b4 <oneDayToSD+0x884>
				longSign=*archiveBuffPtr;
  409b14:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b18:	930c      	str	r3, [sp, #48]	; 0x30
				break;
  409b1a:	e4cb      	b.n	4094b4 <oneDayToSD+0x884>
				longWhole=*archiveBuffPtr;
  409b1c:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b20:	930d      	str	r3, [sp, #52]	; 0x34
				break;
  409b22:	e4c7      	b.n	4094b4 <oneDayToSD+0x884>
				longFrac=((unsigned int)(*archiveBuffPtr))*10000;
  409b24:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b28:	f242 7210 	movw	r2, #10000	; 0x2710
  409b2c:	fb02 f303 	mul.w	r3, r2, r3
  409b30:	9319      	str	r3, [sp, #100]	; 0x64
				break;
  409b32:	e4bf      	b.n	4094b4 <oneDayToSD+0x884>
				longFrac+=((unsigned int)(*archiveBuffPtr))*100;
  409b34:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b38:	2264      	movs	r2, #100	; 0x64
  409b3a:	9919      	ldr	r1, [sp, #100]	; 0x64
  409b3c:	fb02 1303 	mla	r3, r2, r3, r1
  409b40:	9319      	str	r3, [sp, #100]	; 0x64
				break;
  409b42:	e4b7      	b.n	4094b4 <oneDayToSD+0x884>
				longFrac+=(unsigned int)(*archiveBuffPtr);
  409b44:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b48:	9a19      	ldr	r2, [sp, #100]	; 0x64
  409b4a:	441a      	add	r2, r3
  409b4c:	9219      	str	r2, [sp, #100]	; 0x64
				longFrac6=longFrac/6;
  409b4e:	4b2a      	ldr	r3, [pc, #168]	; (409bf8 <oneDayToSD+0xfc8>)
  409b50:	fba3 2302 	umull	r2, r3, r3, r2
  409b54:	089b      	lsrs	r3, r3, #2
  409b56:	930e      	str	r3, [sp, #56]	; 0x38
				break;
  409b58:	e4ac      	b.n	4094b4 <oneDayToSD+0x884>
				GPSyear=*archiveBuffPtr;
  409b5a:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b5e:	930f      	str	r3, [sp, #60]	; 0x3c
				break;
  409b60:	e4a8      	b.n	4094b4 <oneDayToSD+0x884>
				GPSmonth=*archiveBuffPtr;
  409b62:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b66:	9310      	str	r3, [sp, #64]	; 0x40
				break;
  409b68:	e4a4      	b.n	4094b4 <oneDayToSD+0x884>
				GPSday=*archiveBuffPtr;
  409b6a:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b6e:	9311      	str	r3, [sp, #68]	; 0x44
				break;
  409b70:	e4a0      	b.n	4094b4 <oneDayToSD+0x884>
				GPShour=*archiveBuffPtr;
  409b72:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b76:	9312      	str	r3, [sp, #72]	; 0x48
				break;
  409b78:	e49c      	b.n	4094b4 <oneDayToSD+0x884>
				GPSminute=*archiveBuffPtr;
  409b7a:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b7e:	9313      	str	r3, [sp, #76]	; 0x4c
				break;
  409b80:	e498      	b.n	4094b4 <oneDayToSD+0x884>
				GPSsecond=*archiveBuffPtr;
  409b82:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b86:	9314      	str	r3, [sp, #80]	; 0x50
				break;
  409b88:	e494      	b.n	4094b4 <oneDayToSD+0x884>
				batt=*archiveBuffPtr;
  409b8a:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b8e:	9308      	str	r3, [sp, #32]
				break;
  409b90:	e490      	b.n	4094b4 <oneDayToSD+0x884>
			case 16: batt=*archiveBuffPtr;
  409b92:	f899 3002 	ldrb.w	r3, [r9, #2]
  409b96:	9308      	str	r3, [sp, #32]
				GPSnumSats=*archiveBuffPtr;
  409b98:	9315      	str	r3, [sp, #84]	; 0x54
				break;
  409b9a:	e48b      	b.n	4094b4 <oneDayToSD+0x884>
				GPSttff=((unsigned short)(*archiveBuffPtr))<<8;
  409b9c:	f899 3002 	ldrb.w	r3, [r9, #2]
  409ba0:	021b      	lsls	r3, r3, #8
  409ba2:	9307      	str	r3, [sp, #28]
				break;
  409ba4:	e486      	b.n	4094b4 <oneDayToSD+0x884>
				GPSttff+=(unsigned short)(*archiveBuffPtr);
  409ba6:	f899 3002 	ldrb.w	r3, [r9, #2]
  409baa:	9a07      	ldr	r2, [sp, #28]
  409bac:	441a      	add	r2, r3
  409bae:	b293      	uxth	r3, r2
  409bb0:	9307      	str	r3, [sp, #28]
				break;
  409bb2:	e47f      	b.n	4094b4 <oneDayToSD+0x884>
				magnetometer=*archiveBuffPtr;
  409bb4:	f899 3002 	ldrb.w	r3, [r9, #2]
  409bb8:	9316      	str	r3, [sp, #88]	; 0x58
				break;
  409bba:	e47b      	b.n	4094b4 <oneDayToSD+0x884>
		if((recordCtr%50)==0)printf(".");
  409bbc:	480f      	ldr	r0, [pc, #60]	; (409bfc <oneDayToSD+0xfcc>)
  409bbe:	4b10      	ldr	r3, [pc, #64]	; (409c00 <oneDayToSD+0xfd0>)
  409bc0:	4798      	blx	r3
  409bc2:	e596      	b.n	4096f2 <oneDayToSD+0xac2>
	f_close(&file_object);
  409bc4:	a835      	add	r0, sp, #212	; 0xd4
  409bc6:	4b0f      	ldr	r3, [pc, #60]	; (409c04 <oneDayToSD+0xfd4>)
  409bc8:	4798      	blx	r3
	closeSDcard();
  409bca:	4b0f      	ldr	r3, [pc, #60]	; (409c08 <oneDayToSD+0xfd8>)
  409bcc:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  409bce:	f44f 7280 	mov.w	r2, #256	; 0x100
  409bd2:	4b0e      	ldr	r3, [pc, #56]	; (409c0c <oneDayToSD+0xfdc>)
  409bd4:	635a      	str	r2, [r3, #52]	; 0x34
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  409bd6:	4a0e      	ldr	r2, [pc, #56]	; (409c10 <oneDayToSD+0xfe0>)
  409bd8:	f503 638a 	add.w	r3, r3, #1104	; 0x450
  409bdc:	601a      	str	r2, [r3, #0]
	printf("\r\nMain Branch. GOOD. FILE CLOSED.\r\n");
  409bde:	480d      	ldr	r0, [pc, #52]	; (409c14 <oneDayToSD+0xfe4>)
  409be0:	4b07      	ldr	r3, [pc, #28]	; (409c00 <oneDayToSD+0xfd0>)
  409be2:	4798      	blx	r3
	delay_ms(10);
  409be4:	480c      	ldr	r0, [pc, #48]	; (409c18 <oneDayToSD+0xfe8>)
  409be6:	4b0d      	ldr	r3, [pc, #52]	; (409c1c <oneDayToSD+0xfec>)
  409be8:	4798      	blx	r3
	closeSDcard();
  409bea:	4b07      	ldr	r3, [pc, #28]	; (409c08 <oneDayToSD+0xfd8>)
  409bec:	4798      	blx	r3
}
  409bee:	f20d 5d2c 	addw	sp, sp, #1324	; 0x52c
  409bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409bf6:	bf00      	nop
  409bf8:	aaaaaaab 	.word	0xaaaaaaab
  409bfc:	00410b8c 	.word	0x00410b8c
  409c00:	0040ce59 	.word	0x0040ce59
  409c04:	00406711 	.word	0x00406711
  409c08:	00408885 	.word	0x00408885
  409c0c:	400e1400 	.word	0x400e1400
  409c10:	a5000001 	.word	0xa5000001
  409c14:	00410b90 	.word	0x00410b90
  409c18:	0007b784 	.word	0x0007b784
  409c1c:	2040008d 	.word	0x2040008d

00409c20 <storeImage>:
void storeImage(void){
  409c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409c24:	f5ad 5dbc 	sub.w	sp, sp, #6016	; 0x1780
  409c28:	b085      	sub	sp, #20
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  409c2a:	4bc6      	ldr	r3, [pc, #792]	; (409f44 <storeImage+0x324>)
  409c2c:	4ac6      	ldr	r2, [pc, #792]	; (409f48 <storeImage+0x328>)
  409c2e:	601a      	str	r2, [r3, #0]
	twi_init_RTC();
  409c30:	4bc6      	ldr	r3, [pc, #792]	; (409f4c <storeImage+0x32c>)
  409c32:	4798      	blx	r3
	delay_ms(100);//
  409c34:	48c6      	ldr	r0, [pc, #792]	; (409f50 <storeImage+0x330>)
  409c36:	f8df 9368 	ldr.w	r9, [pc, #872]	; 409fa0 <storeImage+0x380>
  409c3a:	47c8      	blx	r9
	rtcData[0]=0x03;//
  409c3c:	f241 3410 	movw	r4, #4880	; 0x1310
  409c40:	446c      	add	r4, sp
  409c42:	2303      	movs	r3, #3
  409c44:	7023      	strb	r3, [r4, #0]
	write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  409c46:	2101      	movs	r1, #1
  409c48:	4620      	mov	r0, r4
  409c4a:	4bc2      	ldr	r3, [pc, #776]	; (409f54 <storeImage+0x334>)
  409c4c:	4798      	blx	r3
	delay_ms(1);//
  409c4e:	f24c 508e 	movw	r0, #50574	; 0xc58e
  409c52:	47c8      	blx	r9
	read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  409c54:	2107      	movs	r1, #7
  409c56:	4620      	mov	r0, r4
  409c58:	4bbf      	ldr	r3, [pc, #764]	; (409f58 <storeImage+0x338>)
  409c5a:	4798      	blx	r3
	rtc_set_date(RTC,(unsigned int)(bcdToHex(rtcData[0])+19),bcdToHex(rtcData[5]),bcdToHex(rtcData[3]),5);//Flag to avoid bogus downloads or other interruptions from interfering with initial GPS)
  409c5c:	7820      	ldrb	r0, [r4, #0]
  409c5e:	4fbf      	ldr	r7, [pc, #764]	; (409f5c <storeImage+0x33c>)
  409c60:	47b8      	blx	r7
  409c62:	4606      	mov	r6, r0
  409c64:	7960      	ldrb	r0, [r4, #5]
  409c66:	47b8      	blx	r7
  409c68:	4680      	mov	r8, r0
  409c6a:	78e0      	ldrb	r0, [r4, #3]
  409c6c:	47b8      	blx	r7
  409c6e:	4dbc      	ldr	r5, [pc, #752]	; (409f60 <storeImage+0x340>)
  409c70:	2305      	movs	r3, #5
  409c72:	9300      	str	r3, [sp, #0]
  409c74:	4603      	mov	r3, r0
  409c76:	4642      	mov	r2, r8
  409c78:	f106 0113 	add.w	r1, r6, #19
  409c7c:	4628      	mov	r0, r5
  409c7e:	4eb9      	ldr	r6, [pc, #740]	; (409f64 <storeImage+0x344>)
  409c80:	47b0      	blx	r6
	rtc_set_time(RTC,bcdToHex(rtcData[2]),bcdToHex(rtcData[1]),bcdToHex(rtcData[0]));//[RTC,hourNow,minsNow,secNow] Set these as a counter to determine if stuck in a stupid boot-up loop. )
  409c82:	78a0      	ldrb	r0, [r4, #2]
  409c84:	47b8      	blx	r7
  409c86:	4606      	mov	r6, r0
  409c88:	7860      	ldrb	r0, [r4, #1]
  409c8a:	47b8      	blx	r7
  409c8c:	4680      	mov	r8, r0
  409c8e:	7820      	ldrb	r0, [r4, #0]
  409c90:	47b8      	blx	r7
  409c92:	4603      	mov	r3, r0
  409c94:	4642      	mov	r2, r8
  409c96:	4631      	mov	r1, r6
  409c98:	4628      	mov	r0, r5
  409c9a:	4db3      	ldr	r5, [pc, #716]	; (409f68 <storeImage+0x348>)
  409c9c:	47a8      	blx	r5
	getSetDeviceID();
  409c9e:	4bb3      	ldr	r3, [pc, #716]	; (409f6c <storeImage+0x34c>)
  409ca0:	4798      	blx	r3
	printf(" %d%d\r\n",rtcData[2],rtcData[1]);
  409ca2:	7862      	ldrb	r2, [r4, #1]
  409ca4:	78a1      	ldrb	r1, [r4, #2]
  409ca6:	48b2      	ldr	r0, [pc, #712]	; (409f70 <storeImage+0x350>)
  409ca8:	4bb2      	ldr	r3, [pc, #712]	; (409f74 <storeImage+0x354>)
  409caa:	4798      	blx	r3
	const char fdtFolderName[] = {'F','D','T','_','I','M','G',0};
  409cac:	ab12      	add	r3, sp, #72	; 0x48
  409cae:	4ab2      	ldr	r2, [pc, #712]	; (409f78 <storeImage+0x358>)
  409cb0:	e892 0003 	ldmia.w	r2, {r0, r1}
  409cb4:	e883 0003 	stmia.w	r3, {r0, r1}
	char picFileName[] = {'F','D','T','_','I','M','G','/',
  409cb8:	4bb0      	ldr	r3, [pc, #704]	; (409f7c <storeImage+0x35c>)
  409cba:	2246      	movs	r2, #70	; 0x46
  409cbc:	f241 7190 	movw	r1, #6032	; 0x1790
  409cc0:	4469      	add	r1, sp
  409cc2:	54ca      	strb	r2, [r1, r3]
  409cc4:	2344      	movs	r3, #68	; 0x44
  409cc6:	f88d 3019 	strb.w	r3, [sp, #25]
  409cca:	2354      	movs	r3, #84	; 0x54
  409ccc:	f88d 301a 	strb.w	r3, [sp, #26]
  409cd0:	f04f 0a5f 	mov.w	sl, #95	; 0x5f
  409cd4:	f88d a01b 	strb.w	sl, [sp, #27]
  409cd8:	2349      	movs	r3, #73	; 0x49
  409cda:	f88d 301c 	strb.w	r3, [sp, #28]
  409cde:	f04f 034d 	mov.w	r3, #77	; 0x4d
  409ce2:	f88d 301d 	strb.w	r3, [sp, #29]
  409ce6:	2347      	movs	r3, #71	; 0x47
  409ce8:	f88d 301e 	strb.w	r3, [sp, #30]
  409cec:	232f      	movs	r3, #47	; 0x2f
  409cee:	f88d 301f 	strb.w	r3, [sp, #31]
	DEVICEID[0],DEVICEID[1],DEVICEID[2],DEVICEID[3],DEVICEID[4],DEVICEID[5],DEVICEID[6],DEVICEID[7],
  409cf2:	4ba3      	ldr	r3, [pc, #652]	; (409f80 <storeImage+0x360>)
	char picFileName[] = {'F','D','T','_','I','M','G','/',
  409cf4:	781a      	ldrb	r2, [r3, #0]
  409cf6:	f88d 2020 	strb.w	r2, [sp, #32]
  409cfa:	785a      	ldrb	r2, [r3, #1]
  409cfc:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
  409d00:	789a      	ldrb	r2, [r3, #2]
  409d02:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
  409d06:	78da      	ldrb	r2, [r3, #3]
  409d08:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
  409d0c:	791a      	ldrb	r2, [r3, #4]
  409d0e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  409d12:	795a      	ldrb	r2, [r3, #5]
  409d14:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
  409d18:	799a      	ldrb	r2, [r3, #6]
  409d1a:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
  409d1e:	79da      	ldrb	r2, [r3, #7]
  409d20:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  409d24:	7a1a      	ldrb	r2, [r3, #8]
  409d26:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
  409d2a:	7a5a      	ldrb	r2, [r3, #9]
  409d2c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  409d30:	7a9a      	ldrb	r2, [r3, #10]
  409d32:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
  409d36:	7ada      	ldrb	r2, [r3, #11]
  409d38:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
  409d3c:	7b1a      	ldrb	r2, [r3, #12]
  409d3e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  409d42:	7b5a      	ldrb	r2, [r3, #13]
  409d44:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  409d48:	7b9a      	ldrb	r2, [r3, #14]
  409d4a:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  409d4e:	7bdb      	ldrb	r3, [r3, #15]
  409d50:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409d54:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
	'_',(char)(hex1ToAscii((bcdToHex(rtcData[6]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[6]))%10)),
  409d58:	79a0      	ldrb	r0, [r4, #6]
  409d5a:	47b8      	blx	r7
  409d5c:	4683      	mov	fp, r0
  409d5e:	4d89      	ldr	r5, [pc, #548]	; (409f84 <storeImage+0x364>)
  409d60:	fba5 3800 	umull	r3, r8, r5, r0
  409d64:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  409d68:	fa5f f088 	uxtb.w	r0, r8
  409d6c:	4e86      	ldr	r6, [pc, #536]	; (409f88 <storeImage+0x368>)
  409d6e:	47b0      	blx	r6
  409d70:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
  409d74:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  409d78:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
  409d7c:	fa5f f088 	uxtb.w	r0, r8
  409d80:	47b0      	blx	r6
  409d82:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
	(char)(hex1ToAscii((bcdToHex(rtcData[5]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[5]))%10)),
  409d86:	7960      	ldrb	r0, [r4, #5]
  409d88:	47b8      	blx	r7
  409d8a:	4683      	mov	fp, r0
  409d8c:	fba5 3800 	umull	r3, r8, r5, r0
  409d90:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  409d94:	fa5f f088 	uxtb.w	r0, r8
  409d98:	47b0      	blx	r6
  409d9a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
  409d9e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  409da2:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
  409da6:	fa5f f088 	uxtb.w	r0, r8
  409daa:	47b0      	blx	r6
  409dac:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
	(char)(hex1ToAscii((bcdToHex(rtcData[3]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[3]))%10)),
  409db0:	78e0      	ldrb	r0, [r4, #3]
  409db2:	47b8      	blx	r7
  409db4:	4683      	mov	fp, r0
  409db6:	fba5 3800 	umull	r3, r8, r5, r0
  409dba:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  409dbe:	fa5f f088 	uxtb.w	r0, r8
  409dc2:	47b0      	blx	r6
  409dc4:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
  409dc8:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  409dcc:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
  409dd0:	fa5f f088 	uxtb.w	r0, r8
  409dd4:	47b0      	blx	r6
  409dd6:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
	(char)(hex1ToAscii((bcdToHex(rtcData[2]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[2]))%10)),
  409dda:	78a0      	ldrb	r0, [r4, #2]
  409ddc:	47b8      	blx	r7
  409dde:	4683      	mov	fp, r0
  409de0:	fba5 3800 	umull	r3, r8, r5, r0
  409de4:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  409de8:	fa5f f088 	uxtb.w	r0, r8
  409dec:	47b0      	blx	r6
  409dee:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  409df2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  409df6:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
  409dfa:	fa5f f088 	uxtb.w	r0, r8
  409dfe:	47b0      	blx	r6
  409e00:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	(char)(hex1ToAscii((bcdToHex(rtcData[1]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[1]))%10)),
  409e04:	7860      	ldrb	r0, [r4, #1]
  409e06:	47b8      	blx	r7
  409e08:	4683      	mov	fp, r0
  409e0a:	fba5 3800 	umull	r3, r8, r5, r0
  409e0e:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  409e12:	fa5f f088 	uxtb.w	r0, r8
  409e16:	47b0      	blx	r6
  409e18:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
  409e1c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  409e20:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
  409e24:	fa5f f088 	uxtb.w	r0, r8
  409e28:	47b0      	blx	r6
  409e2a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	(char)(hex1ToAscii((bcdToHex(rtcData[0]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[0]))%10)),'_',0x30,0x30,'.','B','M','P',0
  409e2e:	7820      	ldrb	r0, [r4, #0]
  409e30:	47b8      	blx	r7
  409e32:	4604      	mov	r4, r0
  409e34:	fba5 3500 	umull	r3, r5, r5, r0
  409e38:	08ed      	lsrs	r5, r5, #3
  409e3a:	b2e8      	uxtb	r0, r5
  409e3c:	47b0      	blx	r6
  409e3e:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
  409e42:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  409e46:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
  409e4a:	b2e8      	uxtb	r0, r5
  409e4c:	47b0      	blx	r6
  409e4e:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
	char picFileName[] = {'F','D','T','_','I','M','G','/',
  409e52:	f88d a03d 	strb.w	sl, [sp, #61]	; 0x3d
  409e56:	2330      	movs	r3, #48	; 0x30
  409e58:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
  409e5c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
  409e60:	232e      	movs	r3, #46	; 0x2e
  409e62:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  409e66:	2342      	movs	r3, #66	; 0x42
  409e68:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
  409e6c:	f04f 034d 	mov.w	r3, #77	; 0x4d
  409e70:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
  409e74:	2350      	movs	r3, #80	; 0x50
  409e76:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
  409e7a:	2300      	movs	r3, #0
  409e7c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	configure_console();
  409e80:	4b42      	ldr	r3, [pc, #264]	; (409f8c <storeImage+0x36c>)
  409e82:	4798      	blx	r3
	delay_ms(10);
  409e84:	4842      	ldr	r0, [pc, #264]	; (409f90 <storeImage+0x370>)
  409e86:	47c8      	blx	r9
	printf("BEGIN STORE IMAGE\r\n");
  409e88:	4842      	ldr	r0, [pc, #264]	; (409f94 <storeImage+0x374>)
  409e8a:	4b3a      	ldr	r3, [pc, #232]	; (409f74 <storeImage+0x354>)
  409e8c:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  409e8e:	4b2d      	ldr	r3, [pc, #180]	; (409f44 <storeImage+0x324>)
  409e90:	4a2d      	ldr	r2, [pc, #180]	; (409f48 <storeImage+0x328>)
  409e92:	601a      	str	r2, [r3, #0]
	resetSD(300);
  409e94:	f44f 7096 	mov.w	r0, #300	; 0x12c
  409e98:	4b3f      	ldr	r3, [pc, #252]	; (409f98 <storeImage+0x378>)
  409e9a:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  409e9c:	4b3f      	ldr	r3, [pc, #252]	; (409f9c <storeImage+0x37c>)
  409e9e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  409ea2:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409ea6:	f007 0007 	and.w	r0, r7, #7
  409eaa:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409eac:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  409eb0:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  409eb4:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  409eb8:	f3bf 8f4f 	dsb	sy
  409ebc:	f04f 34ff 	mov.w	r4, #4294967295
  409ec0:	fa04 fc00 	lsl.w	ip, r4, r0
  409ec4:	fa06 f000 	lsl.w	r0, r6, r0
  409ec8:	fa04 f40e 	lsl.w	r4, r4, lr
  409ecc:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCISW = sw;
  409ed0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  409ed2:	463a      	mov	r2, r7
  409ed4:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  409ed6:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  409eda:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  409ede:	3a01      	subs	r2, #1
  409ee0:	4423      	add	r3, r4
  409ee2:	f1b2 3fff 	cmp.w	r2, #4294967295
  409ee6:	d1f6      	bne.n	409ed6 <storeImage+0x2b6>
        } while(sets--);
  409ee8:	3e01      	subs	r6, #1
  409eea:	4460      	add	r0, ip
  409eec:	f1b6 3fff 	cmp.w	r6, #4294967295
  409ef0:	d1ef      	bne.n	409ed2 <storeImage+0x2b2>
  409ef2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  409ef6:	4b29      	ldr	r3, [pc, #164]	; (409f9c <storeImage+0x37c>)
  409ef8:	695a      	ldr	r2, [r3, #20]
  409efa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  409efe:	615a      	str	r2, [r3, #20]
  409f00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409f04:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  409f08:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  409f0c:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409f10:	f007 0007 	and.w	r0, r7, #7
  409f14:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409f16:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  409f1a:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  409f1e:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  409f22:	f3bf 8f4f 	dsb	sy
  409f26:	f04f 34ff 	mov.w	r4, #4294967295
  409f2a:	fa04 fc00 	lsl.w	ip, r4, r0
  409f2e:	fa06 f000 	lsl.w	r0, r6, r0
  409f32:	fa04 f40e 	lsl.w	r4, r4, lr
  409f36:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  409f3a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  409f3c:	463a      	mov	r2, r7
  409f3e:	4673      	mov	r3, lr
  409f40:	e030      	b.n	409fa4 <storeImage+0x384>
  409f42:	bf00      	nop
  409f44:	400e1850 	.word	0x400e1850
  409f48:	a5000001 	.word	0xa5000001
  409f4c:	00401a79 	.word	0x00401a79
  409f50:	004d2b25 	.word	0x004d2b25
  409f54:	00401ba5 	.word	0x00401ba5
  409f58:	00401ccd 	.word	0x00401ccd
  409f5c:	00406b07 	.word	0x00406b07
  409f60:	400e1860 	.word	0x400e1860
  409f64:	00402695 	.word	0x00402695
  409f68:	00402591 	.word	0x00402591
  409f6c:	00408059 	.word	0x00408059
  409f70:	00410bf0 	.word	0x00410bf0
  409f74:	0040ce59 	.word	0x0040ce59
  409f78:	00410338 	.word	0x00410338
  409f7c:	ffffe888 	.word	0xffffe888
  409f80:	204011a8 	.word	0x204011a8
  409f84:	cccccccd 	.word	0xcccccccd
  409f88:	00406aa9 	.word	0x00406aa9
  409f8c:	0040710d 	.word	0x0040710d
  409f90:	0007b784 	.word	0x0007b784
  409f94:	00410bf8 	.word	0x00410bf8
  409f98:	004089bd 	.word	0x004089bd
  409f9c:	e000ed00 	.word	0xe000ed00
  409fa0:	2040008d 	.word	0x2040008d
              sw = ((tmpways << wshift) | (sets << sshift));
  409fa4:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  409fa8:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  409fac:	3a01      	subs	r2, #1
  409fae:	4423      	add	r3, r4
  409fb0:	f1b2 3fff 	cmp.w	r2, #4294967295
  409fb4:	d1f6      	bne.n	409fa4 <storeImage+0x384>
        } while(sets--);
  409fb6:	3e01      	subs	r6, #1
  409fb8:	4460      	add	r0, ip
  409fba:	f1b6 3fff 	cmp.w	r6, #4294967295
  409fbe:	d1bd      	bne.n	409f3c <storeImage+0x31c>
  409fc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409fc4:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  409fc8:	4ba1      	ldr	r3, [pc, #644]	; (40a250 <storeImage+0x630>)
  409fca:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  409fce:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409fd2:	f007 0007 	and.w	r0, r7, #7
  409fd6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409fd8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  409fdc:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  409fe0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  409fe4:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  409fe8:	695a      	ldr	r2, [r3, #20]
  409fea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  409fee:	615a      	str	r2, [r3, #20]
  409ff0:	f04f 34ff 	mov.w	r4, #4294967295
  409ff4:	fa04 fc00 	lsl.w	ip, r4, r0
  409ff8:	fa06 f000 	lsl.w	r0, r6, r0
  409ffc:	fa04 f40e 	lsl.w	r4, r4, lr
  40a000:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  40a004:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40a006:	463a      	mov	r2, r7
  40a008:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40a00a:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40a00e:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40a012:	3a01      	subs	r2, #1
  40a014:	4423      	add	r3, r4
  40a016:	f1b2 3fff 	cmp.w	r2, #4294967295
  40a01a:	d1f6      	bne.n	40a00a <storeImage+0x3ea>
        } while(sets--);
  40a01c:	3e01      	subs	r6, #1
  40a01e:	4460      	add	r0, ip
  40a020:	f1b6 3fff 	cmp.w	r6, #4294967295
  40a024:	d1ef      	bne.n	40a006 <storeImage+0x3e6>
  40a026:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40a02a:	f3bf 8f6f 	isb	sy
	sd_mmc_init();
  40a02e:	4b89      	ldr	r3, [pc, #548]	; (40a254 <storeImage+0x634>)
  40a030:	4798      	blx	r3
	errorLoopCtr=50;
  40a032:	2432      	movs	r4, #50	; 0x32
		status = sd_mmc_test_unit_ready(0);//first electronic signals
  40a034:	2600      	movs	r6, #0
			WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40a036:	4f88      	ldr	r7, [pc, #544]	; (40a258 <storeImage+0x638>)
  40a038:	e00a      	b.n	40a050 <storeImage+0x430>
		delay_ms(100);
  40a03a:	4888      	ldr	r0, [pc, #544]	; (40a25c <storeImage+0x63c>)
  40a03c:	4b88      	ldr	r3, [pc, #544]	; (40a260 <storeImage+0x640>)
  40a03e:	4798      	blx	r3
		errorLoopCtr--;
  40a040:	3c01      	subs	r4, #1
  40a042:	b2e4      	uxtb	r4, r4
	} while ((status != CTRL_GOOD)&&(errorLoopCtr>0));
  40a044:	2d00      	cmp	r5, #0
  40a046:	f000 80c6 	beq.w	40a1d6 <storeImage+0x5b6>
  40a04a:	2c00      	cmp	r4, #0
  40a04c:	f000 80c3 	beq.w	40a1d6 <storeImage+0x5b6>
		status = sd_mmc_test_unit_ready(0);//first electronic signals
  40a050:	4630      	mov	r0, r6
  40a052:	4b84      	ldr	r3, [pc, #528]	; (40a264 <storeImage+0x644>)
  40a054:	4798      	blx	r3
  40a056:	4605      	mov	r5, r0
		printf("MMC %d %d\r\n",status, errorLoopCtr);
  40a058:	9003      	str	r0, [sp, #12]
  40a05a:	4622      	mov	r2, r4
  40a05c:	4601      	mov	r1, r0
  40a05e:	4882      	ldr	r0, [pc, #520]	; (40a268 <storeImage+0x648>)
  40a060:	4b82      	ldr	r3, [pc, #520]	; (40a26c <storeImage+0x64c>)
  40a062:	4798      	blx	r3
		isCard = sd_mmc_check(0);
  40a064:	4630      	mov	r0, r6
  40a066:	4b82      	ldr	r3, [pc, #520]	; (40a270 <storeImage+0x650>)
  40a068:	4798      	blx	r3
		if  ((status == CTRL_FAIL)&&((errorLoopCtr%4)==0)) {
  40a06a:	2d01      	cmp	r5, #1
  40a06c:	d1e5      	bne.n	40a03a <storeImage+0x41a>
  40a06e:	f014 0f03 	tst.w	r4, #3
  40a072:	d1e2      	bne.n	40a03a <storeImage+0x41a>
			printf("MMC RESET %d %d\r\n",status, errorLoopCtr);
  40a074:	4622      	mov	r2, r4
  40a076:	2101      	movs	r1, #1
  40a078:	487e      	ldr	r0, [pc, #504]	; (40a274 <storeImage+0x654>)
  40a07a:	4b7c      	ldr	r3, [pc, #496]	; (40a26c <storeImage+0x64c>)
  40a07c:	4798      	blx	r3
			if(errorLoopCtr<20)resetSD(2000);else resetSD(300);//number of msec to remain off
  40a07e:	2c13      	cmp	r4, #19
  40a080:	bf94      	ite	ls
  40a082:	f44f 60fa 	movls.w	r0, #2000	; 0x7d0
  40a086:	f44f 7096 	movhi.w	r0, #300	; 0x12c
  40a08a:	4b7b      	ldr	r3, [pc, #492]	; (40a278 <storeImage+0x658>)
  40a08c:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  40a08e:	4b70      	ldr	r3, [pc, #448]	; (40a250 <storeImage+0x630>)
  40a090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40a094:	f3c3 3a4e 	ubfx	sl, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40a098:	f003 0007 	and.w	r0, r3, #7
  40a09c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40a09e:	f3c3 08c9 	ubfx	r8, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40a0a2:	fab8 f988 	clz	r9, r8
    wshift  = __CLZ(ways) & 0x1f;
  40a0a6:	f009 091f 	and.w	r9, r9, #31
  __ASM volatile ("dsb");
  40a0aa:	f3bf 8f4f 	dsb	sy
  40a0ae:	f04f 3eff 	mov.w	lr, #4294967295
  40a0b2:	fa0e fb00 	lsl.w	fp, lr, r0
  40a0b6:	fa0a f000 	lsl.w	r0, sl, r0
  40a0ba:	fa0e fe09 	lsl.w	lr, lr, r9
  40a0be:	fa08 f909 	lsl.w	r9, r8, r9
              SCB->DCISW = sw;
  40a0c2:	f8df c18c 	ldr.w	ip, [pc, #396]	; 40a250 <storeImage+0x630>
         int32_t tmpways = ways;
  40a0c6:	4642      	mov	r2, r8
  40a0c8:	464b      	mov	r3, r9
              sw = ((tmpways << wshift) | (sets << sshift));
  40a0ca:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  40a0ce:	f8cc 1260 	str.w	r1, [ip, #608]	; 0x260
            } while(tmpways--);
  40a0d2:	3a01      	subs	r2, #1
  40a0d4:	4473      	add	r3, lr
  40a0d6:	f1b2 3fff 	cmp.w	r2, #4294967295
  40a0da:	d1f6      	bne.n	40a0ca <storeImage+0x4aa>
        } while(sets--);
  40a0dc:	f10a 3aff 	add.w	sl, sl, #4294967295
  40a0e0:	4458      	add	r0, fp
  40a0e2:	f1ba 3fff 	cmp.w	sl, #4294967295
  40a0e6:	d1ee      	bne.n	40a0c6 <storeImage+0x4a6>
  40a0e8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40a0ec:	4b58      	ldr	r3, [pc, #352]	; (40a250 <storeImage+0x630>)
  40a0ee:	695a      	ldr	r2, [r3, #20]
  40a0f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40a0f4:	615a      	str	r2, [r3, #20]
  40a0f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40a0fa:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40a0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40a102:	f3c3 3a4e 	ubfx	sl, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40a106:	f003 0007 	and.w	r0, r3, #7
  40a10a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40a10c:	f3c3 08c9 	ubfx	r8, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40a110:	fab8 f988 	clz	r9, r8
    wshift  = __CLZ(ways) & 0x1f;
  40a114:	f009 091f 	and.w	r9, r9, #31
  __ASM volatile ("dsb");
  40a118:	f3bf 8f4f 	dsb	sy
  40a11c:	f04f 3eff 	mov.w	lr, #4294967295
  40a120:	fa0e fb00 	lsl.w	fp, lr, r0
  40a124:	fa0a f000 	lsl.w	r0, sl, r0
  40a128:	fa0e fe09 	lsl.w	lr, lr, r9
  40a12c:	fa08 f909 	lsl.w	r9, r8, r9
              SCB->DCCISW = sw;
  40a130:	f8df c11c 	ldr.w	ip, [pc, #284]	; 40a250 <storeImage+0x630>
         int32_t tmpways = ways;
  40a134:	4642      	mov	r2, r8
  40a136:	464b      	mov	r3, r9
              sw = ((tmpways << wshift) | (sets << sshift));
  40a138:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40a13c:	f8cc 1274 	str.w	r1, [ip, #628]	; 0x274
            } while(tmpways--);
  40a140:	3a01      	subs	r2, #1
  40a142:	4473      	add	r3, lr
  40a144:	f1b2 3fff 	cmp.w	r2, #4294967295
  40a148:	d1f6      	bne.n	40a138 <storeImage+0x518>
        } while(sets--);
  40a14a:	f10a 3aff 	add.w	sl, sl, #4294967295
  40a14e:	4458      	add	r0, fp
  40a150:	f1ba 3fff 	cmp.w	sl, #4294967295
  40a154:	d1ee      	bne.n	40a134 <storeImage+0x514>
  40a156:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40a15a:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40a15e:	4b3c      	ldr	r3, [pc, #240]	; (40a250 <storeImage+0x630>)
  40a160:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40a164:	f3c2 3a4e 	ubfx	sl, r2, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40a168:	f002 0007 	and.w	r0, r2, #7
  40a16c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40a16e:	f3c2 08c9 	ubfx	r8, r2, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40a172:	fab8 f988 	clz	r9, r8
    wshift  = __CLZ(ways) & 0x1f;
  40a176:	f009 091f 	and.w	r9, r9, #31
  __ASM volatile ("dsb");
  40a17a:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  40a17e:	695a      	ldr	r2, [r3, #20]
  40a180:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  40a184:	615a      	str	r2, [r3, #20]
  40a186:	f04f 3eff 	mov.w	lr, #4294967295
  40a18a:	fa0e fb00 	lsl.w	fp, lr, r0
  40a18e:	fa0a f000 	lsl.w	r0, sl, r0
  40a192:	fa0e fe09 	lsl.w	lr, lr, r9
  40a196:	fa08 f909 	lsl.w	r9, r8, r9
              SCB->DCCISW = sw;
  40a19a:	469c      	mov	ip, r3
         int32_t tmpways = ways;
  40a19c:	4642      	mov	r2, r8
  40a19e:	464b      	mov	r3, r9
              sw = ((tmpways << wshift) | (sets << sshift));
  40a1a0:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40a1a4:	f8cc 1274 	str.w	r1, [ip, #628]	; 0x274
            } while(tmpways--);
  40a1a8:	3a01      	subs	r2, #1
  40a1aa:	4473      	add	r3, lr
  40a1ac:	f1b2 3fff 	cmp.w	r2, #4294967295
  40a1b0:	d1f6      	bne.n	40a1a0 <storeImage+0x580>
        } while(sets--);
  40a1b2:	f10a 3aff 	add.w	sl, sl, #4294967295
  40a1b6:	4458      	add	r0, fp
  40a1b8:	f1ba 3fff 	cmp.w	sl, #4294967295
  40a1bc:	d1ee      	bne.n	40a19c <storeImage+0x57c>
  40a1be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40a1c2:	f3bf 8f6f 	isb	sy
			delay_ms(10);
  40a1c6:	482d      	ldr	r0, [pc, #180]	; (40a27c <storeImage+0x65c>)
  40a1c8:	4b25      	ldr	r3, [pc, #148]	; (40a260 <storeImage+0x640>)
  40a1ca:	4798      	blx	r3
			sd_mmc_init();
  40a1cc:	4b21      	ldr	r3, [pc, #132]	; (40a254 <storeImage+0x634>)
  40a1ce:	4798      	blx	r3
			WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40a1d0:	4b2b      	ldr	r3, [pc, #172]	; (40a280 <storeImage+0x660>)
  40a1d2:	603b      	str	r3, [r7, #0]
  40a1d4:	e731      	b.n	40a03a <storeImage+0x41a>
	printf("MMC INIT %d\r\n",status);
  40a1d6:	9903      	ldr	r1, [sp, #12]
  40a1d8:	482a      	ldr	r0, [pc, #168]	; (40a284 <storeImage+0x664>)
  40a1da:	4c24      	ldr	r4, [pc, #144]	; (40a26c <storeImage+0x64c>)
  40a1dc:	47a0      	blx	r4
	printf("MOUNT DISK...\r\n");
  40a1de:	482a      	ldr	r0, [pc, #168]	; (40a288 <storeImage+0x668>)
  40a1e0:	47a0      	blx	r4
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40a1e2:	4a27      	ldr	r2, [pc, #156]	; (40a280 <storeImage+0x660>)
  40a1e4:	4b1c      	ldr	r3, [pc, #112]	; (40a258 <storeImage+0x638>)
  40a1e6:	601a      	str	r2, [r3, #0]
	memset(&fs, 0, sizeof(FATFS));
  40a1e8:	f44f 720c 	mov.w	r2, #560	; 0x230
  40a1ec:	2100      	movs	r1, #0
  40a1ee:	f50d 50ab 	add.w	r0, sp, #5472	; 0x1560
  40a1f2:	4b26      	ldr	r3, [pc, #152]	; (40a28c <storeImage+0x66c>)
  40a1f4:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  40a1f6:	f50d 51ab 	add.w	r1, sp, #5472	; 0x1560
  40a1fa:	2000      	movs	r0, #0
  40a1fc:	4b24      	ldr	r3, [pc, #144]	; (40a290 <storeImage+0x670>)
  40a1fe:	4798      	blx	r3
  40a200:	4605      	mov	r5, r0
	printf("MOUNT DISK RESULT %d\r\n",res);
  40a202:	4601      	mov	r1, r0
  40a204:	4823      	ldr	r0, [pc, #140]	; (40a294 <storeImage+0x674>)
  40a206:	47a0      	blx	r4
	if (FR_INVALID_DRIVE == res) {
  40a208:	2d0b      	cmp	r5, #11
  40a20a:	f000 8092 	beq.w	40a332 <storeImage+0x712>
	printf("TRYING F_OPENDIR()\r\n");
  40a20e:	4822      	ldr	r0, [pc, #136]	; (40a298 <storeImage+0x678>)
  40a210:	4625      	mov	r5, r4
  40a212:	47a0      	blx	r4
	res = f_opendir(&myDir,fdtFolderName);
  40a214:	a912      	add	r1, sp, #72	; 0x48
  40a216:	f241 3018 	movw	r0, #4888	; 0x1318
  40a21a:	4468      	add	r0, sp
  40a21c:	4b1f      	ldr	r3, [pc, #124]	; (40a29c <storeImage+0x67c>)
  40a21e:	4798      	blx	r3
  40a220:	4604      	mov	r4, r0
	printf("F_OPENDIR() RES = %d\r\n",res);
  40a222:	4601      	mov	r1, r0
  40a224:	481e      	ldr	r0, [pc, #120]	; (40a2a0 <storeImage+0x680>)
  40a226:	47a8      	blx	r5
	switch (res){
  40a228:	2c04      	cmp	r4, #4
  40a22a:	d041      	beq.n	40a2b0 <storeImage+0x690>
  40a22c:	2c05      	cmp	r4, #5
  40a22e:	f000 808d 	beq.w	40a34c <storeImage+0x72c>
  40a232:	b14c      	cbz	r4, 40a248 <storeImage+0x628>
		printf("SOME OTHER DIRECTORY ERROR %X \r\n",res);
  40a234:	4621      	mov	r1, r4
  40a236:	481b      	ldr	r0, [pc, #108]	; (40a2a4 <storeImage+0x684>)
  40a238:	4b0c      	ldr	r3, [pc, #48]	; (40a26c <storeImage+0x64c>)
  40a23a:	4798      	blx	r3
	if(res==0)printf("F_MOUNT GOOD FDT\r\n");
  40a23c:	2c00      	cmp	r4, #0
  40a23e:	d13d      	bne.n	40a2bc <storeImage+0x69c>
  40a240:	4819      	ldr	r0, [pc, #100]	; (40a2a8 <storeImage+0x688>)
  40a242:	4b0a      	ldr	r3, [pc, #40]	; (40a26c <storeImage+0x64c>)
  40a244:	4798      	blx	r3
  40a246:	e039      	b.n	40a2bc <storeImage+0x69c>
		printf("FOUND FDT_IMG FOLDER\r\n");
  40a248:	4818      	ldr	r0, [pc, #96]	; (40a2ac <storeImage+0x68c>)
  40a24a:	47a8      	blx	r5
  40a24c:	e7f8      	b.n	40a240 <storeImage+0x620>
  40a24e:	bf00      	nop
  40a250:	e000ed00 	.word	0xe000ed00
  40a254:	004004a1 	.word	0x004004a1
  40a258:	400e1850 	.word	0x400e1850
  40a25c:	004d2b25 	.word	0x004d2b25
  40a260:	2040008d 	.word	0x2040008d
  40a264:	00401009 	.word	0x00401009
  40a268:	00410a50 	.word	0x00410a50
  40a26c:	0040ce59 	.word	0x0040ce59
  40a270:	004004c1 	.word	0x004004c1
  40a274:	00410a5c 	.word	0x00410a5c
  40a278:	004089bd 	.word	0x004089bd
  40a27c:	0007b784 	.word	0x0007b784
  40a280:	a5000001 	.word	0xa5000001
  40a284:	00410a70 	.word	0x00410a70
  40a288:	00410a80 	.word	0x00410a80
  40a28c:	0040cfb5 	.word	0x0040cfb5
  40a290:	0040628d 	.word	0x0040628d
  40a294:	00410a90 	.word	0x00410a90
  40a298:	00410aa8 	.word	0x00410aa8
  40a29c:	00406729 	.word	0x00406729
  40a2a0:	00410ac0 	.word	0x00410ac0
  40a2a4:	00410b04 	.word	0x00410b04
  40a2a8:	00410b28 	.word	0x00410b28
  40a2ac:	00410c0c 	.word	0x00410c0c
		printf("CREATING FDT_IMG FOLDER\r\n");
  40a2b0:	486e      	ldr	r0, [pc, #440]	; (40a46c <storeImage+0x84c>)
  40a2b2:	4b6f      	ldr	r3, [pc, #444]	; (40a470 <storeImage+0x850>)
  40a2b4:	4798      	blx	r3
		f_mkdir((char const *)fdtFolderName);
  40a2b6:	a812      	add	r0, sp, #72	; 0x48
  40a2b8:	4b6e      	ldr	r3, [pc, #440]	; (40a474 <storeImage+0x854>)
  40a2ba:	4798      	blx	r3
         int32_t tmpways = ways;
  40a2bc:	2500      	movs	r5, #0
		res = f_open(&file_object,
  40a2be:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 40a480 <storeImage+0x860>
			f_close(&file_object);
  40a2c2:	4f6d      	ldr	r7, [pc, #436]	; (40a478 <storeImage+0x858>)
		res = f_open(&file_object,
  40a2c4:	2200      	movs	r2, #0
  40a2c6:	a906      	add	r1, sp, #24
  40a2c8:	f241 303c 	movw	r0, #4924	; 0x133c
  40a2cc:	4468      	add	r0, sp
  40a2ce:	47c0      	blx	r8
  40a2d0:	4606      	mov	r6, r0
		if(res==FR_NO_FILE)fakeMSec=101;
  40a2d2:	2804      	cmp	r0, #4
  40a2d4:	d01b      	beq.n	40a30e <storeImage+0x6ee>
			f_close(&file_object);
  40a2d6:	f241 303c 	movw	r0, #4924	; 0x133c
  40a2da:	4468      	add	r0, sp
  40a2dc:	47b8      	blx	r7
			fakeMSec++;
  40a2de:	3501      	adds	r5, #1
  40a2e0:	b2ed      	uxtb	r5, r5
			picFileName[37]=(char)(hex1ToAscii(fakeMSec/10));
  40a2e2:	4c66      	ldr	r4, [pc, #408]	; (40a47c <storeImage+0x85c>)
  40a2e4:	fba4 3405 	umull	r3, r4, r4, r5
  40a2e8:	08e4      	lsrs	r4, r4, #3
  40a2ea:	b2e0      	uxtb	r0, r4
  40a2ec:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 40a4bc <storeImage+0x89c>
  40a2f0:	47c8      	blx	r9
  40a2f2:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
			picFileName[38]=(char)(hex1ToAscii(fakeMSec%10));
  40a2f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40a2fa:	eba5 0044 	sub.w	r0, r5, r4, lsl #1
  40a2fe:	b2c0      	uxtb	r0, r0
  40a300:	47c8      	blx	r9
  40a302:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
	while((fakeMSec<100)&&(res!=FR_NO_FILE)){
  40a306:	2d63      	cmp	r5, #99	; 0x63
  40a308:	d801      	bhi.n	40a30e <storeImage+0x6ee>
  40a30a:	2e04      	cmp	r6, #4
  40a30c:	d1da      	bne.n	40a2c4 <storeImage+0x6a4>
	res = f_open(&file_object, (char const *)picFileName, FA_CREATE_ALWAYS | FA_WRITE);
  40a30e:	220a      	movs	r2, #10
  40a310:	a906      	add	r1, sp, #24
  40a312:	f241 303c 	movw	r0, #4924	; 0x133c
  40a316:	4468      	add	r0, sp
  40a318:	4c59      	ldr	r4, [pc, #356]	; (40a480 <storeImage+0x860>)
  40a31a:	47a0      	blx	r4
	res = f_open(&file_object,
  40a31c:	220a      	movs	r2, #10
  40a31e:	a906      	add	r1, sp, #24
  40a320:	f241 303c 	movw	r0, #4924	; 0x133c
  40a324:	4468      	add	r0, sp
  40a326:	47a0      	blx	r4
	if (res != FR_OK) {
  40a328:	4601      	mov	r1, r0
  40a32a:	b1b0      	cbz	r0, 40a35a <storeImage+0x73a>
		printf("F_OPEN FAIL RES %d\r\n", res);
  40a32c:	4855      	ldr	r0, [pc, #340]	; (40a484 <storeImage+0x864>)
  40a32e:	4b50      	ldr	r3, [pc, #320]	; (40a470 <storeImage+0x850>)
  40a330:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40a332:	4a55      	ldr	r2, [pc, #340]	; (40a488 <storeImage+0x868>)
  40a334:	4b55      	ldr	r3, [pc, #340]	; (40a48c <storeImage+0x86c>)
  40a336:	601a      	str	r2, [r3, #0]
	delay_ms(10);
  40a338:	4855      	ldr	r0, [pc, #340]	; (40a490 <storeImage+0x870>)
  40a33a:	4b56      	ldr	r3, [pc, #344]	; (40a494 <storeImage+0x874>)
  40a33c:	4798      	blx	r3
	closeSDcard();
  40a33e:	4b56      	ldr	r3, [pc, #344]	; (40a498 <storeImage+0x878>)
  40a340:	4798      	blx	r3
	}	
  40a342:	f50d 5dbc 	add.w	sp, sp, #6016	; 0x1780
  40a346:	b005      	add	sp, #20
  40a348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("CREATING FDT_IMG FOLDER\r\n");
  40a34c:	4847      	ldr	r0, [pc, #284]	; (40a46c <storeImage+0x84c>)
  40a34e:	4b48      	ldr	r3, [pc, #288]	; (40a470 <storeImage+0x850>)
  40a350:	4798      	blx	r3
		f_mkdir((char const *)fdtFolderName);
  40a352:	a812      	add	r0, sp, #72	; 0x48
  40a354:	4b47      	ldr	r3, [pc, #284]	; (40a474 <storeImage+0x854>)
  40a356:	4798      	blx	r3
		break;
  40a358:	e7b0      	b.n	40a2bc <storeImage+0x69c>
	printf("CREATED PIC FILE %s\r\n",picFileName);
  40a35a:	a906      	add	r1, sp, #24
  40a35c:	484f      	ldr	r0, [pc, #316]	; (40a49c <storeImage+0x87c>)
  40a35e:	4b44      	ldr	r3, [pc, #272]	; (40a470 <storeImage+0x850>)
  40a360:	4798      	blx	r3
  40a362:	4d4f      	ldr	r5, [pc, #316]	; (40a4a0 <storeImage+0x880>)
  40a364:	1e6c      	subs	r4, r5, #1
  40a366:	3535      	adds	r5, #53	; 0x35
	f_putc(picHeader_2655[picBuffCtr],&file_object);
  40a368:	4e4e      	ldr	r6, [pc, #312]	; (40a4a4 <storeImage+0x884>)
  40a36a:	f241 313c 	movw	r1, #4924	; 0x133c
  40a36e:	4469      	add	r1, sp
  40a370:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40a374:	47b0      	blx	r6
	for(picBuffCtr=0;picBuffCtr<PIC_HEADER_LEN;picBuffCtr++){
  40a376:	42ac      	cmp	r4, r5
  40a378:	d1f7      	bne.n	40a36a <storeImage+0x74a>
  40a37a:	4f4b      	ldr	r7, [pc, #300]	; (40a4a8 <storeImage+0x888>)
  40a37c:	2600      	movs	r6, #0
  40a37e:	f8df a140 	ldr.w	sl, [pc, #320]	; 40a4c0 <storeImage+0x8a0>
	f_write(&file_object,oneLine,4800,&fwret);
  40a382:	f8df 8140 	ldr.w	r8, [pc, #320]	; 40a4c4 <storeImage+0x8a4>
	if((picBlockCtr%30)==0)	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40a386:	f8df b104 	ldr.w	fp, [pc, #260]	; 40a48c <storeImage+0x86c>
	for(picBlockCtr=0;picBlockCtr<600;picBlockCtr++){
  40a38a:	f8df 913c 	ldr.w	r9, [pc, #316]	; 40a4c8 <storeImage+0x8a8>
  40a38e:	e00a      	b.n	40a3a6 <storeImage+0x786>
	if((picBlockCtr%30)==0)printf(".");
  40a390:	4846      	ldr	r0, [pc, #280]	; (40a4ac <storeImage+0x88c>)
  40a392:	4b37      	ldr	r3, [pc, #220]	; (40a470 <storeImage+0x850>)
  40a394:	4798      	blx	r3
	if((picBlockCtr%30)==0)	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40a396:	4b3c      	ldr	r3, [pc, #240]	; (40a488 <storeImage+0x868>)
  40a398:	f8cb 3000 	str.w	r3, [fp]
	for(picBlockCtr=0;picBlockCtr<600;picBlockCtr++){
  40a39c:	3601      	adds	r6, #1
  40a39e:	f507 6748 	add.w	r7, r7, #3200	; 0xc80
  40a3a2:	454f      	cmp	r7, r9
  40a3a4:	d053      	beq.n	40a44e <storeImage+0x82e>
  40a3a6:	eb07 010a 	add.w	r1, r7, sl
  40a3aa:	f10d 0553 	add.w	r5, sp, #83	; 0x53
  40a3ae:	f241 3013 	movw	r0, #4883	; 0x1313
  40a3b2:	4468      	add	r0, sp
  40a3b4:	462c      	mov	r4, r5
	firstByte=*camBuffPtrA++;
  40a3b6:	f811 ec02 	ldrb.w	lr, [r1, #-2]
	greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  40a3ba:	f811 2c01 	ldrb.w	r2, [r1, #-1]
	blueByte=(firstByte&0xF8);
  40a3be:	f02e 0307 	bic.w	r3, lr, #7
	*oneLinePtr++=blueByte;
  40a3c2:	f804 3c03 	strb.w	r3, [r4, #-3]
	greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  40a3c6:	10d3      	asrs	r3, r2, #3
  40a3c8:	f003 031c 	and.w	r3, r3, #28
  40a3cc:	eb03 134e 	add.w	r3, r3, lr, lsl #5
	*oneLinePtr++=greenByte;
  40a3d0:	f804 3c02 	strb.w	r3, [r4, #-2]
	redByte=(secondByte&0x1F)<<3;
  40a3d4:	00d2      	lsls	r2, r2, #3
  40a3d6:	f804 2c01 	strb.w	r2, [r4, #-1]
  40a3da:	3102      	adds	r1, #2
  40a3dc:	3403      	adds	r4, #3
	for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  40a3de:	42a0      	cmp	r0, r4
  40a3e0:	d1e9      	bne.n	40a3b6 <storeImage+0x796>
	f_write(&file_object,oneLine,4800,&fwret);
  40a3e2:	f10d 0317 	add.w	r3, sp, #23
  40a3e6:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
  40a3ea:	a914      	add	r1, sp, #80	; 0x50
  40a3ec:	f241 303c 	movw	r0, #4924	; 0x133c
  40a3f0:	4468      	add	r0, sp
  40a3f2:	47c0      	blx	r8
  40a3f4:	4639      	mov	r1, r7
	firstByte=*camBuffPtrB++;
  40a3f6:	f811 0c02 	ldrb.w	r0, [r1, #-2]
	greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  40a3fa:	f811 2c01 	ldrb.w	r2, [r1, #-1]
	blueByte=(firstByte&0xF8);
  40a3fe:	f020 0307 	bic.w	r3, r0, #7
	*oneLinePtr++=blueByte;
  40a402:	f805 3c03 	strb.w	r3, [r5, #-3]
	greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  40a406:	10d3      	asrs	r3, r2, #3
  40a408:	f003 031c 	and.w	r3, r3, #28
  40a40c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
	*oneLinePtr++=greenByte;
  40a410:	f805 3c02 	strb.w	r3, [r5, #-2]
	redByte=(secondByte&0x1F)<<3;
  40a414:	00d2      	lsls	r2, r2, #3
  40a416:	f805 2c01 	strb.w	r2, [r5, #-1]
  40a41a:	3102      	adds	r1, #2
  40a41c:	3503      	adds	r5, #3
	for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  40a41e:	42ac      	cmp	r4, r5
  40a420:	d1e9      	bne.n	40a3f6 <storeImage+0x7d6>
	f_write(&file_object,oneLine,4800,&fwret);
  40a422:	f10d 0317 	add.w	r3, sp, #23
  40a426:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
  40a42a:	a914      	add	r1, sp, #80	; 0x50
  40a42c:	f241 303c 	movw	r0, #4924	; 0x133c
  40a430:	4468      	add	r0, sp
  40a432:	47c0      	blx	r8
	if((picBlockCtr%30)==0)printf(".");
  40a434:	4b1e      	ldr	r3, [pc, #120]	; (40a4b0 <storeImage+0x890>)
  40a436:	fb83 2306 	smull	r2, r3, r3, r6
  40a43a:	199a      	adds	r2, r3, r6
  40a43c:	17f3      	asrs	r3, r6, #31
  40a43e:	ebc3 1322 	rsb	r3, r3, r2, asr #4
  40a442:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40a446:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
  40a44a:	d1a7      	bne.n	40a39c <storeImage+0x77c>
  40a44c:	e7a0      	b.n	40a390 <storeImage+0x770>
	f_close(&file_object);
  40a44e:	f241 303c 	movw	r0, #4924	; 0x133c
  40a452:	4468      	add	r0, sp
  40a454:	4b08      	ldr	r3, [pc, #32]	; (40a478 <storeImage+0x858>)
  40a456:	4798      	blx	r3
	closeSDcard();
  40a458:	4b0f      	ldr	r3, [pc, #60]	; (40a498 <storeImage+0x878>)
  40a45a:	4798      	blx	r3
  40a45c:	f44f 7280 	mov.w	r2, #256	; 0x100
  40a460:	4b14      	ldr	r3, [pc, #80]	; (40a4b4 <storeImage+0x894>)
  40a462:	635a      	str	r2, [r3, #52]	; 0x34
	printf("\r\nCREATED PIC FILE. FILE CLOSED.\r\n");
  40a464:	4814      	ldr	r0, [pc, #80]	; (40a4b8 <storeImage+0x898>)
  40a466:	4b02      	ldr	r3, [pc, #8]	; (40a470 <storeImage+0x850>)
  40a468:	4798      	blx	r3
  40a46a:	e762      	b.n	40a332 <storeImage+0x712>
  40a46c:	00410c24 	.word	0x00410c24
  40a470:	0040ce59 	.word	0x0040ce59
  40a474:	004067a9 	.word	0x004067a9
  40a478:	00406711 	.word	0x00406711
  40a47c:	cccccccd 	.word	0xcccccccd
  40a480:	004062b1 	.word	0x004062b1
  40a484:	00410c40 	.word	0x00410c40
  40a488:	a5000001 	.word	0xa5000001
  40a48c:	400e1850 	.word	0x400e1850
  40a490:	0007b784 	.word	0x0007b784
  40a494:	2040008d 	.word	0x2040008d
  40a498:	00408885 	.word	0x00408885
  40a49c:	00410c58 	.word	0x00410c58
  40a4a0:	00410bb4 	.word	0x00410bb4
  40a4a4:	00406995 	.word	0x00406995
  40a4a8:	701d4c02 	.word	0x701d4c02
  40a4ac:	00410b8c 	.word	0x00410b8c
  40a4b0:	88888889 	.word	0x88888889
  40a4b4:	400e0e00 	.word	0x400e0e00
  40a4b8:	00410c70 	.word	0x00410c70
  40a4bc:	00406aa9 	.word	0x00406aa9
  40a4c0:	ffe2b400 	.word	0xffe2b400
  40a4c4:	00406449 	.word	0x00406449
  40a4c8:	703a9802 	.word	0x703a9802

0040a4cc <resetPinsISI>:
	ioport_set_pin_level(SDCARDPWRC_GPIO,1);
}
/***********************************************************************
 *    RESET ISI PINS
 ***********************************************************************/
void resetPinsISI(void){
  40a4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		base->PIO_PUDR = mask;
  40a4d0:	4b7c      	ldr	r3, [pc, #496]	; (40a6c4 <resetPinsISI+0x1f8>)
  40a4d2:	f44f 0a80 	mov.w	sl, #4194304	; 0x400000
  40a4d6:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a4da:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a4de:	f8c3 a054 	str.w	sl, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a4e2:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a4e6:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a4ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40a4ec:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  40a4f0:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a4f2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40a4f4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  40a4f8:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a4fa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40a4fe:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a500:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a504:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a506:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a508:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a50c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40a50e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40a512:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a514:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40a516:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40a51a:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a51c:	4c6a      	ldr	r4, [pc, #424]	; (40a6c8 <resetPinsISI+0x1fc>)
  40a51e:	f04f 0908 	mov.w	r9, #8
  40a522:	f8c4 9060 	str.w	r9, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a526:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a52a:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a52e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a532:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a536:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40a538:	f022 0208 	bic.w	r2, r2, #8
  40a53c:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a53e:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40a540:	f022 0208 	bic.w	r2, r2, #8
  40a544:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a546:	4a61      	ldr	r2, [pc, #388]	; (40a6cc <resetPinsISI+0x200>)
  40a548:	f44f 7800 	mov.w	r8, #512	; 0x200
  40a54c:	f8c2 8060 	str.w	r8, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a550:	f8c2 8090 	str.w	r8, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a554:	f8c2 8054 	str.w	r8, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a558:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a55c:	f8c2 8080 	str.w	r8, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a560:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40a562:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  40a566:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a568:	6f51      	ldr	r1, [r2, #116]	; 0x74
  40a56a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  40a56e:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a570:	f04f 0c20 	mov.w	ip, #32
  40a574:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a578:	f8c2 c090 	str.w	ip, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a57c:	f8c2 c054 	str.w	ip, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a580:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a584:	f8c2 c080 	str.w	ip, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a588:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40a58a:	f021 0120 	bic.w	r1, r1, #32
  40a58e:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a590:	6f51      	ldr	r1, [r2, #116]	; 0x74
  40a592:	f021 0120 	bic.w	r1, r1, #32
  40a596:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a598:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  40a59c:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a5a0:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a5a4:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a5a8:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a5ac:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a5b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40a5b2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40a5b6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a5b8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40a5ba:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40a5be:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a5c0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  40a5c4:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a5c6:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a5ca:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a5cc:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a5ce:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a5d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40a5d4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40a5d8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a5da:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40a5dc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40a5e0:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a5e2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  40a5e6:	6616      	str	r6, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a5e8:	f8c2 6090 	str.w	r6, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a5ec:	6556      	str	r6, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a5ee:	6256      	str	r6, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a5f0:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a5f4:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40a5f6:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40a5fa:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a5fc:	6f51      	ldr	r1, [r2, #116]	; 0x74
  40a5fe:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40a602:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a604:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  40a608:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a60a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a60e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a610:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a612:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a616:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  40a618:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
  40a61c:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a61e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40a620:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
  40a624:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a626:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  40a62a:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a62c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a630:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a632:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a634:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a638:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  40a63c:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
  40a640:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a644:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  40a648:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
  40a64c:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a650:	6610      	str	r0, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a652:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a656:	6550      	str	r0, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a658:	6250      	str	r0, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a65a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a65e:	f8d2 b070 	ldr.w	fp, [r2, #112]	; 0x70
  40a662:	f42b 1b00 	bic.w	fp, fp, #2097152	; 0x200000
  40a666:	f8c2 b070 	str.w	fp, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a66a:	f8d2 b074 	ldr.w	fp, [r2, #116]	; 0x74
  40a66e:	f42b 1b00 	bic.w	fp, fp, #2097152	; 0x200000
  40a672:	f8c2 b074 	str.w	fp, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a676:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a678:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a67c:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a67e:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a680:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a684:	f8d2 b070 	ldr.w	fp, [r2, #112]	; 0x70
  40a688:	f02b 7b80 	bic.w	fp, fp, #16777216	; 0x1000000
  40a68c:	f8c2 b070 	str.w	fp, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a690:	f8d2 b074 	ldr.w	fp, [r2, #116]	; 0x74
  40a694:	f02b 7b80 	bic.w	fp, fp, #16777216	; 0x1000000
  40a698:	f8c2 b074 	str.w	fp, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40a69c:	f8c3 a000 	str.w	sl, [r3]
  40a6a0:	6018      	str	r0, [r3, #0]
  40a6a2:	f8c4 9000 	str.w	r9, [r4]
  40a6a6:	f8c2 8000 	str.w	r8, [r2]
  40a6aa:	f8c2 c000 	str.w	ip, [r2]
  40a6ae:	f8c3 e000 	str.w	lr, [r3]
  40a6b2:	601f      	str	r7, [r3, #0]
  40a6b4:	6016      	str	r6, [r2, #0]
  40a6b6:	6019      	str	r1, [r3, #0]
  40a6b8:	601d      	str	r5, [r3, #0]
  40a6ba:	6010      	str	r0, [r2, #0]
  40a6bc:	6011      	str	r1, [r2, #0]
  40a6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a6c2:	bf00      	nop
  40a6c4:	400e1400 	.word	0x400e1400
  40a6c8:	400e1000 	.word	0x400e1000
  40a6cc:	400e0e00 	.word	0x400e0e00

0040a6d0 <takeImage>:
char takeImage(char flash, char configSource, char formatSize){
  40a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a6d4:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
  40a6d8:	468b      	mov	fp, r1
  40a6da:	9203      	str	r2, [sp, #12]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a6dc:	4b90      	ldr	r3, [pc, #576]	; (40a920 <takeImage+0x250>)
  40a6de:	2080      	movs	r0, #128	; 0x80
  40a6e0:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a6e2:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	printf("TAKE IMAGE. ConfigSource: %d. ImageSize: %d \r\n", configSource, formatSize);
  40a6e6:	488f      	ldr	r0, [pc, #572]	; (40a924 <takeImage+0x254>)
  40a6e8:	4b8f      	ldr	r3, [pc, #572]	; (40a928 <takeImage+0x258>)
  40a6ea:	4798      	blx	r3
  __ASM volatile ("dsb");
  40a6ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40a6f0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40a6f4:	4b8d      	ldr	r3, [pc, #564]	; (40a92c <takeImage+0x25c>)
  40a6f6:	2200      	movs	r2, #0
  40a6f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40a6fc:	695a      	ldr	r2, [r3, #20]
  40a6fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40a702:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  40a704:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40a708:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40a70c:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40a710:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40a714:	f007 0007 	and.w	r0, r7, #7
  40a718:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40a71a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40a71e:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40a722:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40a726:	f3bf 8f4f 	dsb	sy
  40a72a:	f04f 34ff 	mov.w	r4, #4294967295
  40a72e:	fa04 fc00 	lsl.w	ip, r4, r0
  40a732:	fa06 f000 	lsl.w	r0, r6, r0
  40a736:	fa04 f40e 	lsl.w	r4, r4, lr
  40a73a:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCISW = sw;
  40a73e:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40a740:	463a      	mov	r2, r7
  40a742:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40a744:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  40a748:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40a74c:	3a01      	subs	r2, #1
  40a74e:	4423      	add	r3, r4
  40a750:	f1b2 3fff 	cmp.w	r2, #4294967295
  40a754:	d1f6      	bne.n	40a744 <takeImage+0x74>
        } while(sets--);
  40a756:	3e01      	subs	r6, #1
  40a758:	4460      	add	r0, ip
  40a75a:	f1b6 3fff 	cmp.w	r6, #4294967295
  40a75e:	d1ef      	bne.n	40a740 <takeImage+0x70>
  40a760:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40a764:	4a71      	ldr	r2, [pc, #452]	; (40a92c <takeImage+0x25c>)
  40a766:	6953      	ldr	r3, [r2, #20]
  40a768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40a76c:	6153      	str	r3, [r2, #20]
  40a76e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40a772:	f3bf 8f6f 	isb	sy
	configPinsSDRAM();
  40a776:	4b6e      	ldr	r3, [pc, #440]	; (40a930 <takeImage+0x260>)
  40a778:	4798      	blx	r3
	pmc_enable_periph_clk(ID_SDRAMC);
  40a77a:	203e      	movs	r0, #62	; 0x3e
  40a77c:	4b6d      	ldr	r3, [pc, #436]	; (40a934 <takeImage+0x264>)
  40a77e:	4798      	blx	r3
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_INSIGNIS_16M,	sysclk_get_cpu_hz());
  40a780:	496d      	ldr	r1, [pc, #436]	; (40a938 <takeImage+0x268>)
  40a782:	486e      	ldr	r0, [pc, #440]	; (40a93c <takeImage+0x26c>)
  40a784:	4b6e      	ldr	r3, [pc, #440]	; (40a940 <takeImage+0x270>)
  40a786:	4798      	blx	r3
/**
 * \brief Unaligned access is supported.
 */
static inline void sdram_enable_unaligned_support(void)
{
	SDRAMC->SDRAMC_CFR1 |= SDRAMC_CFR1_UNAL;
  40a788:	4a6e      	ldr	r2, [pc, #440]	; (40a944 <takeImage+0x274>)
  40a78a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40a78c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40a790:	6293      	str	r3, [r2, #40]	; 0x28
	printf("SRAM COMPLETE\r\n");
  40a792:	486d      	ldr	r0, [pc, #436]	; (40a948 <takeImage+0x278>)
  40a794:	4b64      	ldr	r3, [pc, #400]	; (40a928 <takeImage+0x258>)
  40a796:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  40a798:	2210      	movs	r2, #16
  40a79a:	4b6c      	ldr	r3, [pc, #432]	; (40a94c <takeImage+0x27c>)
  40a79c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a7a0:	4c6b      	ldr	r4, [pc, #428]	; (40a950 <takeImage+0x280>)
  40a7a2:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
  40a7a6:	f8c4 a010 	str.w	sl, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a7aa:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a7ae:	4e5c      	ldr	r6, [pc, #368]	; (40a920 <takeImage+0x250>)
  40a7b0:	f44f 7780 	mov.w	r7, #256	; 0x100
  40a7b4:	6137      	str	r7, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a7b6:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a7ba:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40a7be:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a7c0:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a7c4:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a7c6:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a7ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40a7ce:	6173      	str	r3, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a7d0:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a7d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  40a7d8:	6173      	str	r3, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a7da:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a7de:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a7e0:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40a7e4:	6325      	str	r5, [r4, #48]	; 0x30
  40a7e6:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(100);
  40a7e8:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 40a99c <takeImage+0x2cc>
  40a7ec:	4648      	mov	r0, r9
  40a7ee:	f8df 8184 	ldr.w	r8, [pc, #388]	; 40a974 <takeImage+0x2a4>
  40a7f2:	47c0      	blx	r8
  40a7f4:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
  40a7f8:	6337      	str	r7, [r6, #48]	; 0x30
  40a7fa:	6327      	str	r7, [r4, #48]	; 0x30
	delay_ms(100);
  40a7fc:	4648      	mov	r0, r9
  40a7fe:	47c0      	blx	r8
	delay_ms(6);//OV2710 datasheet says minimum 5ms between applying power an allowing CPWDN to go low.
  40a800:	4854      	ldr	r0, [pc, #336]	; (40a954 <takeImage+0x284>)
  40a802:	47c0      	blx	r8
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40a804:	6365      	str	r5, [r4, #52]	; 0x34
	delay_ms(2);
  40a806:	4854      	ldr	r0, [pc, #336]	; (40a958 <takeImage+0x288>)
  40a808:	47c0      	blx	r8
	delay_ms(100);
  40a80a:	4648      	mov	r0, r9
  40a80c:	47c0      	blx	r8
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40a80e:	4a53      	ldr	r2, [pc, #332]	; (40a95c <takeImage+0x28c>)
  40a810:	4b53      	ldr	r3, [pc, #332]	; (40a960 <takeImage+0x290>)
  40a812:	601a      	str	r2, [r3, #0]
	gpio_configure_pin(ISI_MCLK_GPIO, ISI_MCLK_FLAGS);
  40a814:	4953      	ldr	r1, [pc, #332]	; (40a964 <takeImage+0x294>)
  40a816:	2015      	movs	r0, #21
  40a818:	4b53      	ldr	r3, [pc, #332]	; (40a968 <takeImage+0x298>)
  40a81a:	4798      	blx	r3
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  40a81c:	4b53      	ldr	r3, [pc, #332]	; (40a96c <takeImage+0x29c>)
  40a81e:	f44f 7281 	mov.w	r2, #258	; 0x102
  40a822:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  40a824:	f44f 7200 	mov.w	r2, #512	; 0x200
  40a828:	601a      	str	r2, [r3, #0]
	while ((!(PMC->PMC_SCSR & PMC_SCSR_PCK1))&&(iters>0)) {
  40a82a:	689b      	ldr	r3, [r3, #8]
  40a82c:	f413 7f00 	tst.w	r3, #512	; 0x200
  40a830:	d119      	bne.n	40a866 <takeImage+0x196>
  40a832:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  40a836:	494d      	ldr	r1, [pc, #308]	; (40a96c <takeImage+0x29c>)
		iters--;
  40a838:	3b01      	subs	r3, #1
	while ((!(PMC->PMC_SCSR & PMC_SCSR_PCK1))&&(iters>0)) {
  40a83a:	688a      	ldr	r2, [r1, #8]
  40a83c:	f412 7f00 	tst.w	r2, #512	; 0x200
  40a840:	d101      	bne.n	40a846 <takeImage+0x176>
  40a842:	2b00      	cmp	r3, #0
  40a844:	dcf8      	bgt.n	40a838 <takeImage+0x168>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  40a846:	b973      	cbnz	r3, 40a866 <takeImage+0x196>
  40a848:	2401      	movs	r4, #1
	resetPinsISI();
  40a84a:	4b49      	ldr	r3, [pc, #292]	; (40a970 <takeImage+0x2a0>)
  40a84c:	4798      	blx	r3
	delay_ms(1);
  40a84e:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40a852:	4b48      	ldr	r3, [pc, #288]	; (40a974 <takeImage+0x2a4>)
  40a854:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40a856:	4a41      	ldr	r2, [pc, #260]	; (40a95c <takeImage+0x28c>)
  40a858:	4b41      	ldr	r3, [pc, #260]	; (40a960 <takeImage+0x290>)
  40a85a:	601a      	str	r2, [r3, #0]
}
  40a85c:	4620      	mov	r0, r4
  40a85e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
  40a862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	printf("MCLK OKAY\r\n");//tshooooooooooooooooooooooooooooooooooooooooooooot
  40a866:	4844      	ldr	r0, [pc, #272]	; (40a978 <takeImage+0x2a8>)
  40a868:	4b2f      	ldr	r3, [pc, #188]	; (40a928 <takeImage+0x258>)
  40a86a:	4798      	blx	r3
	delay_ms(1);
  40a86c:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40a870:	4e40      	ldr	r6, [pc, #256]	; (40a974 <takeImage+0x2a4>)
  40a872:	47b0      	blx	r6
	opt.master_clk = sysclk_get_cpu_hz();
  40a874:	4b30      	ldr	r3, [pc, #192]	; (40a938 <takeImage+0x268>)
  40a876:	9391      	str	r3, [sp, #580]	; 0x244
	opt.speed      = TWIHS_CLK;
  40a878:	4b40      	ldr	r3, [pc, #256]	; (40a97c <takeImage+0x2ac>)
  40a87a:	9392      	str	r3, [sp, #584]	; 0x248
	twihs_master_init(BOARD_TWIHS, &opt);
  40a87c:	a991      	add	r1, sp, #580	; 0x244
  40a87e:	4840      	ldr	r0, [pc, #256]	; (40a980 <takeImage+0x2b0>)
  40a880:	4b40      	ldr	r3, [pc, #256]	; (40a984 <takeImage+0x2b4>)
  40a882:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40a884:	4b40      	ldr	r3, [pc, #256]	; (40a988 <takeImage+0x2b8>)
  40a886:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40a88a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40a88e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40a892:	2100      	movs	r1, #0
  40a894:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40a898:	601a      	str	r2, [r3, #0]
	pmc_enable_periph_clk(ID_BOARD_TWIHS);
  40a89a:	2013      	movs	r0, #19
  40a89c:	4b25      	ldr	r3, [pc, #148]	; (40a934 <takeImage+0x264>)
  40a89e:	4798      	blx	r3
	pio_configure_pin(ISI_D0_GPIO, ISI_D0_FLAGS);
  40a8a0:	4d3a      	ldr	r5, [pc, #232]	; (40a98c <takeImage+0x2bc>)
  40a8a2:	4629      	mov	r1, r5
  40a8a4:	2076      	movs	r0, #118	; 0x76
  40a8a6:	4c30      	ldr	r4, [pc, #192]	; (40a968 <takeImage+0x298>)
  40a8a8:	47a0      	blx	r4
	pio_configure_pin(ISI_D1_GPIO, ISI_D1_FLAGS);
  40a8aa:	4629      	mov	r1, r5
  40a8ac:	2075      	movs	r0, #117	; 0x75
  40a8ae:	47a0      	blx	r4
	pio_configure_pin(ISI_D2_GPIO, ISI_D2_FLAGS);
  40a8b0:	4629      	mov	r1, r5
  40a8b2:	2023      	movs	r0, #35	; 0x23
  40a8b4:	47a0      	blx	r4
	pio_configure_pin(ISI_D3_GPIO, ISI_D3_FLAGS);
  40a8b6:	4f2b      	ldr	r7, [pc, #172]	; (40a964 <takeImage+0x294>)
  40a8b8:	4639      	mov	r1, r7
  40a8ba:	2009      	movs	r0, #9
  40a8bc:	47a0      	blx	r4
	pio_configure_pin(ISI_D4_GPIO, ISI_D4_FLAGS);
  40a8be:	4639      	mov	r1, r7
  40a8c0:	2005      	movs	r0, #5
  40a8c2:	47a0      	blx	r4
	pio_configure_pin(ISI_D5_GPIO, ISI_D5_FLAGS);
  40a8c4:	4629      	mov	r1, r5
  40a8c6:	206b      	movs	r0, #107	; 0x6b
  40a8c8:	47a0      	blx	r4
	pio_configure_pin(ISI_D6_GPIO, ISI_D6_FLAGS);
  40a8ca:	4629      	mov	r1, r5
  40a8cc:	206c      	movs	r0, #108	; 0x6c
  40a8ce:	47a0      	blx	r4
	pio_configure_pin(ISI_D7_GPIO, ISI_D7_FLAGS);
  40a8d0:	4629      	mov	r1, r5
  40a8d2:	201b      	movs	r0, #27
  40a8d4:	47a0      	blx	r4
	pio_configure_pin(ISI_HSYNC_GPIO, ISI_HSYNC_FLAGS);
  40a8d6:	4629      	mov	r1, r5
  40a8d8:	2078      	movs	r0, #120	; 0x78
  40a8da:	47a0      	blx	r4
	pio_configure_pin(ISI_VSYNC_GPIO, ISI_VSYNC_FLAGS);
  40a8dc:	4629      	mov	r1, r5
  40a8de:	2079      	movs	r0, #121	; 0x79
  40a8e0:	47a0      	blx	r4
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
  40a8e2:	4629      	mov	r1, r5
  40a8e4:	2018      	movs	r0, #24
  40a8e6:	47a0      	blx	r4
	delay_ms(200);
  40a8e8:	4829      	ldr	r0, [pc, #164]	; (40a990 <takeImage+0x2c0>)
  40a8ea:	47b0      	blx	r6
	iters=10;
  40a8ec:	240a      	movs	r4, #10
	while ((ov_init(BOARD_TWIHS)==1)&&(iters>0)) {
  40a8ee:	4d24      	ldr	r5, [pc, #144]	; (40a980 <takeImage+0x2b0>)
		delay_ms(200);
  40a8f0:	4f27      	ldr	r7, [pc, #156]	; (40a990 <takeImage+0x2c0>)
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40a8f2:	4e1b      	ldr	r6, [pc, #108]	; (40a960 <takeImage+0x290>)
	while ((ov_init(BOARD_TWIHS)==1)&&(iters>0)) {
  40a8f4:	4628      	mov	r0, r5
  40a8f6:	4b27      	ldr	r3, [pc, #156]	; (40a994 <takeImage+0x2c4>)
  40a8f8:	4798      	blx	r3
  40a8fa:	2c00      	cmp	r4, #0
  40a8fc:	dd0b      	ble.n	40a916 <takeImage+0x246>
  40a8fe:	2801      	cmp	r0, #1
  40a900:	d109      	bne.n	40a916 <takeImage+0x246>
		delay_ms(200);
  40a902:	4638      	mov	r0, r7
  40a904:	4b1b      	ldr	r3, [pc, #108]	; (40a974 <takeImage+0x2a4>)
  40a906:	4798      	blx	r3
		printf(".");
  40a908:	4823      	ldr	r0, [pc, #140]	; (40a998 <takeImage+0x2c8>)
  40a90a:	4b07      	ldr	r3, [pc, #28]	; (40a928 <takeImage+0x258>)
  40a90c:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40a90e:	4b13      	ldr	r3, [pc, #76]	; (40a95c <takeImage+0x28c>)
  40a910:	6033      	str	r3, [r6, #0]
	iters--;	}	//WORKS for OV2655 (after changing one address byte for OV7692 to two address bytes for OV2655)
  40a912:	3c01      	subs	r4, #1
  40a914:	e7ee      	b.n	40a8f4 <takeImage+0x224>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  40a916:	2c00      	cmp	r4, #0
  40a918:	d142      	bne.n	40a9a0 <takeImage+0x2d0>
  40a91a:	2401      	movs	r4, #1
  40a91c:	e795      	b.n	40a84a <takeImage+0x17a>
  40a91e:	bf00      	nop
  40a920:	400e1400 	.word	0x400e1400
  40a924:	00410c94 	.word	0x00410c94
  40a928:	0040ce59 	.word	0x0040ce59
  40a92c:	e000ed00 	.word	0xe000ed00
  40a930:	004080d5 	.word	0x004080d5
  40a934:	004035a1 	.word	0x004035a1
  40a938:	11e1a300 	.word	0x11e1a300
  40a93c:	00410570 	.word	0x00410570
  40a940:	00402781 	.word	0x00402781
  40a944:	40084000 	.word	0x40084000
  40a948:	00410584 	.word	0x00410584
  40a94c:	40088000 	.word	0x40088000
  40a950:	400e0e00 	.word	0x400e0e00
  40a954:	0004a14f 	.word	0x0004a14f
  40a958:	00018b1b 	.word	0x00018b1b
  40a95c:	a5000001 	.word	0xa5000001
  40a960:	400e1850 	.word	0x400e1850
  40a964:	10000001 	.word	0x10000001
  40a968:	0040329d 	.word	0x0040329d
  40a96c:	400e0600 	.word	0x400e0600
  40a970:	0040a4cd 	.word	0x0040a4cd
  40a974:	2040008d 	.word	0x2040008d
  40a978:	00410cc4 	.word	0x00410cc4
  40a97c:	00061a80 	.word	0x00061a80
  40a980:	40018000 	.word	0x40018000
  40a984:	00401549 	.word	0x00401549
  40a988:	e000e100 	.word	0xe000e100
  40a98c:	20000001 	.word	0x20000001
  40a990:	009a5649 	.word	0x009a5649
  40a994:	00400259 	.word	0x00400259
  40a998:	00410b8c 	.word	0x00410b8c
  40a99c:	004d2b25 	.word	0x004d2b25
	delay_ms(100);//CRITICAL DELAY, THIS NEEDS TO BE HERE OR OV_CONFIG() HANGS when no DO_DIAGS. March 2020. 50 seemed to work at least most of the time.
  40a9a0:	486b      	ldr	r0, [pc, #428]	; (40ab50 <takeImage+0x480>)
  40a9a2:	4b6c      	ldr	r3, [pc, #432]	; (40ab54 <takeImage+0x484>)
  40a9a4:	4798      	blx	r3
	printf("CAM INIT OKAY\r\n");
  40a9a6:	486c      	ldr	r0, [pc, #432]	; (40ab58 <takeImage+0x488>)
  40a9a8:	4c6c      	ldr	r4, [pc, #432]	; (40ab5c <takeImage+0x48c>)
  40a9aa:	47a0      	blx	r4
	ov_configure(BOARD_TWIHS, 4);//OV2655 RESET=4
  40a9ac:	2104      	movs	r1, #4
  40a9ae:	486c      	ldr	r0, [pc, #432]	; (40ab60 <takeImage+0x490>)
  40a9b0:	4b6c      	ldr	r3, [pc, #432]	; (40ab64 <takeImage+0x494>)
  40a9b2:	4798      	blx	r3
	printf("CAM RESET OKAY\r\n");
  40a9b4:	486c      	ldr	r0, [pc, #432]	; (40ab68 <takeImage+0x498>)
  40a9b6:	47a0      	blx	r4
	if(configSource == 0){
  40a9b8:	f1bb 0f00 	cmp.w	fp, #0
  40a9bc:	f040 809b 	bne.w	40aaf6 <takeImage+0x426>
		ov_configure(BOARD_TWIHS, 2);//OV2655 CONFIG=2
  40a9c0:	2102      	movs	r1, #2
  40a9c2:	4867      	ldr	r0, [pc, #412]	; (40ab60 <takeImage+0x490>)
  40a9c4:	4b67      	ldr	r3, [pc, #412]	; (40ab64 <takeImage+0x494>)
  40a9c6:	4798      	blx	r3
		printf("CAM CONFIG FROM HARD CODE DEFAULT.\r\n");
  40a9c8:	4868      	ldr	r0, [pc, #416]	; (40ab6c <takeImage+0x49c>)
  40a9ca:	47a0      	blx	r4
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40a9cc:	4c68      	ldr	r4, [pc, #416]	; (40ab70 <takeImage+0x4a0>)
  40a9ce:	4d69      	ldr	r5, [pc, #420]	; (40ab74 <takeImage+0x4a4>)
  40a9d0:	6025      	str	r5, [r4, #0]
	printf("CAM CONFIG OKAY\r\n");
  40a9d2:	4869      	ldr	r0, [pc, #420]	; (40ab78 <takeImage+0x4a8>)
  40a9d4:	4b61      	ldr	r3, [pc, #388]	; (40ab5c <takeImage+0x48c>)
  40a9d6:	4798      	blx	r3
	delay_ms(2000);			// IMAGE SENSOR DELAY TO ADJUST TO LIGHT 500ms,200ms get bad.
  40a9d8:	4868      	ldr	r0, [pc, #416]	; (40ab7c <takeImage+0x4ac>)
  40a9da:	4e5e      	ldr	r6, [pc, #376]	; (40ab54 <takeImage+0x484>)
  40a9dc:	47b0      	blx	r6
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40a9de:	6025      	str	r5, [r4, #0]
	delay_ms(1000);			// IMAGE SENSOR DELAY TO ADJUST TO LIGHT 500ms,200ms get bad.
  40a9e0:	4867      	ldr	r0, [pc, #412]	; (40ab80 <takeImage+0x4b0>)
  40a9e2:	47b0      	blx	r6
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40a9e4:	6025      	str	r5, [r4, #0]
    ccsidr  = SCB->CCSIDR;
  40a9e6:	4b67      	ldr	r3, [pc, #412]	; (40ab84 <takeImage+0x4b4>)
  40a9e8:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40a9ec:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40a9f0:	f007 0007 	and.w	r0, r7, #7
  40a9f4:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40a9f6:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40a9fa:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40a9fe:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40aa02:	f3bf 8f4f 	dsb	sy
  40aa06:	f04f 34ff 	mov.w	r4, #4294967295
  40aa0a:	fa04 fc00 	lsl.w	ip, r4, r0
  40aa0e:	fa06 f000 	lsl.w	r0, r6, r0
  40aa12:	fa04 f40e 	lsl.w	r4, r4, lr
  40aa16:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  40aa1a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40aa1c:	463a      	mov	r2, r7
  40aa1e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40aa20:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40aa24:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40aa28:	3a01      	subs	r2, #1
  40aa2a:	4423      	add	r3, r4
  40aa2c:	f1b2 3fff 	cmp.w	r2, #4294967295
  40aa30:	d1f6      	bne.n	40aa20 <takeImage+0x350>
        } while(sets--);
  40aa32:	3e01      	subs	r6, #1
  40aa34:	4460      	add	r0, ip
  40aa36:	f1b6 3fff 	cmp.w	r6, #4294967295
  40aa3a:	d1ef      	bne.n	40aa1c <takeImage+0x34c>
  40aa3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40aa40:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40aa44:	4b4f      	ldr	r3, [pc, #316]	; (40ab84 <takeImage+0x4b4>)
  40aa46:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40aa4a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40aa4e:	f007 0007 	and.w	r0, r7, #7
  40aa52:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40aa54:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40aa58:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40aa5c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40aa60:	f3bf 8f4f 	dsb	sy
  40aa64:	f04f 34ff 	mov.w	r4, #4294967295
  40aa68:	fa04 fc00 	lsl.w	ip, r4, r0
  40aa6c:	fa06 f000 	lsl.w	r0, r6, r0
  40aa70:	fa04 f40e 	lsl.w	r4, r4, lr
  40aa74:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  40aa78:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40aa7a:	463a      	mov	r2, r7
  40aa7c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40aa7e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  40aa82:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40aa86:	3a01      	subs	r2, #1
  40aa88:	4423      	add	r3, r4
  40aa8a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40aa8e:	d1f6      	bne.n	40aa7e <takeImage+0x3ae>
        } while(sets--);
  40aa90:	3e01      	subs	r6, #1
  40aa92:	4460      	add	r0, ip
  40aa94:	f1b6 3fff 	cmp.w	r6, #4294967295
  40aa98:	d1ef      	bne.n	40aa7a <takeImage+0x3aa>
  40aa9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40aa9e:	f3bf 8f6f 	isb	sy
	pmc_enable_periph_clk(ID_ISI);//
  40aaa2:	203b      	movs	r0, #59	; 0x3b
  40aaa4:	4b38      	ldr	r3, [pc, #224]	; (40ab88 <takeImage+0x4b8>)
  40aaa6:	4798      	blx	r3
preBufDescList[i].Current = (uint32_t)SRAM_BASE;
  40aaa8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 40aba8 <takeImage+0x4d8>
  40aaac:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  40aab0:	f8c8 3000 	str.w	r3, [r8]
preBufDescList[i].Control = ISI_DMA_C_CTRL_C_FETCH;
  40aab4:	2301      	movs	r3, #1
  40aab6:	f8c8 3004 	str.w	r3, [r8, #4]
preBufDescList[i].Next = (uint32_t)&preBufDescList[0];
  40aaba:	f8c8 8008 	str.w	r8, [r8, #8]
	printf("ISI ALLOCATE COMPLETE\r\n");
  40aabe:	4833      	ldr	r0, [pc, #204]	; (40ab8c <takeImage+0x4bc>)
  40aac0:	4b26      	ldr	r3, [pc, #152]	; (40ab5c <takeImage+0x48c>)
  40aac2:	4798      	blx	r3
	ISI->ISI_CR = ISI_CR_ISI_SRST | ISI_CR_ISI_DIS;
  40aac4:	4b32      	ldr	r3, [pc, #200]	; (40ab90 <takeImage+0x4c0>)
  40aac6:	2206      	movs	r2, #6
  40aac8:	625a      	str	r2, [r3, #36]	; 0x24
	while (((ISI->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST)&&(iters>0)) {  //early boards stalled here
  40aaca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40aacc:	f013 0f04 	tst.w	r3, #4
  40aad0:	d11f      	bne.n	40ab12 <takeImage+0x442>
  40aad2:	f240 54dc 	movw	r4, #1500	; 0x5dc
		delay_ms(1);
  40aad6:	f24c 578e 	movw	r7, #50574	; 0xc58e
  40aada:	4e1e      	ldr	r6, [pc, #120]	; (40ab54 <takeImage+0x484>)
	while (((ISI->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST)&&(iters>0)) {  //early boards stalled here
  40aadc:	4d2c      	ldr	r5, [pc, #176]	; (40ab90 <takeImage+0x4c0>)
		delay_ms(1);
  40aade:	4638      	mov	r0, r7
  40aae0:	47b0      	blx	r6
		iters--;
  40aae2:	3c01      	subs	r4, #1
	while (((ISI->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST)&&(iters>0)) {  //early boards stalled here
  40aae4:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40aae6:	f013 0f04 	tst.w	r3, #4
  40aaea:	d101      	bne.n	40aaf0 <takeImage+0x420>
  40aaec:	2c00      	cmp	r4, #0
  40aaee:	dcf6      	bgt.n	40aade <takeImage+0x40e>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  40aaf0:	b97c      	cbnz	r4, 40ab12 <takeImage+0x442>
  40aaf2:	2401      	movs	r4, #1
  40aaf4:	e6a9      	b.n	40a84a <takeImage+0x17a>
		ov_reg ov2655FromUSB[] = {
  40aaf6:	f44f 7207 	mov.w	r2, #540	; 0x21c
  40aafa:	4926      	ldr	r1, [pc, #152]	; (40ab94 <takeImage+0x4c4>)
  40aafc:	a805      	add	r0, sp, #20
  40aafe:	4b26      	ldr	r3, [pc, #152]	; (40ab98 <takeImage+0x4c8>)
  40ab00:	4798      	blx	r3
		ov_write_regs(BOARD_TWIHS, ov2655FromUSB);
  40ab02:	a905      	add	r1, sp, #20
  40ab04:	4816      	ldr	r0, [pc, #88]	; (40ab60 <takeImage+0x490>)
  40ab06:	4b25      	ldr	r3, [pc, #148]	; (40ab9c <takeImage+0x4cc>)
  40ab08:	4798      	blx	r3
		printf("CAM CONFIG FROM HOST PC\r\n");
  40ab0a:	4825      	ldr	r0, [pc, #148]	; (40aba0 <takeImage+0x4d0>)
  40ab0c:	4b13      	ldr	r3, [pc, #76]	; (40ab5c <takeImage+0x48c>)
  40ab0e:	4798      	blx	r3
  40ab10:	e75c      	b.n	40a9cc <takeImage+0x2fc>
	ISI->ISI_CR |= ISI_CR_ISI_EN;
  40ab12:	4c1f      	ldr	r4, [pc, #124]	; (40ab90 <takeImage+0x4c0>)
  40ab14:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40ab16:	f043 0301 	orr.w	r3, r3, #1
  40ab1a:	6263      	str	r3, [r4, #36]	; 0x24
	delay_ms(10);
  40ab1c:	4821      	ldr	r0, [pc, #132]	; (40aba4 <takeImage+0x4d4>)
  40ab1e:	4b0d      	ldr	r3, [pc, #52]	; (40ab54 <takeImage+0x484>)
  40ab20:	4798      	blx	r3
	while (((ISI->ISI_SR & ISI_SR_ENABLE) != ISI_SR_ENABLE)&&(iters>0)) {  //early boards stalled here
  40ab22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40ab24:	f013 0f01 	tst.w	r3, #1
  40ab28:	d140      	bne.n	40abac <takeImage+0x4dc>
  40ab2a:	f240 54dc 	movw	r4, #1500	; 0x5dc
		delay_ms(1);
  40ab2e:	f24c 578e 	movw	r7, #50574	; 0xc58e
  40ab32:	4e08      	ldr	r6, [pc, #32]	; (40ab54 <takeImage+0x484>)
	while (((ISI->ISI_SR & ISI_SR_ENABLE) != ISI_SR_ENABLE)&&(iters>0)) {  //early boards stalled here
  40ab34:	4d16      	ldr	r5, [pc, #88]	; (40ab90 <takeImage+0x4c0>)
		delay_ms(1);
  40ab36:	4638      	mov	r0, r7
  40ab38:	47b0      	blx	r6
		iters--;
  40ab3a:	3c01      	subs	r4, #1
	while (((ISI->ISI_SR & ISI_SR_ENABLE) != ISI_SR_ENABLE)&&(iters>0)) {  //early boards stalled here
  40ab3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40ab3e:	f013 0f01 	tst.w	r3, #1
  40ab42:	d101      	bne.n	40ab48 <takeImage+0x478>
  40ab44:	2c00      	cmp	r4, #0
  40ab46:	dcf6      	bgt.n	40ab36 <takeImage+0x466>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  40ab48:	bb84      	cbnz	r4, 40abac <takeImage+0x4dc>
  40ab4a:	2401      	movs	r4, #1
  40ab4c:	e67d      	b.n	40a84a <takeImage+0x17a>
  40ab4e:	bf00      	nop
  40ab50:	004d2b25 	.word	0x004d2b25
  40ab54:	2040008d 	.word	0x2040008d
  40ab58:	00410cd0 	.word	0x00410cd0
  40ab5c:	0040ce59 	.word	0x0040ce59
  40ab60:	40018000 	.word	0x40018000
  40ab64:	00400335 	.word	0x00400335
  40ab68:	00410ce0 	.word	0x00410ce0
  40ab6c:	00410cf4 	.word	0x00410cf4
  40ab70:	400e1850 	.word	0x400e1850
  40ab74:	a5000001 	.word	0xa5000001
  40ab78:	00410d38 	.word	0x00410d38
  40ab7c:	06075ed6 	.word	0x06075ed6
  40ab80:	0303af6b 	.word	0x0303af6b
  40ab84:	e000ed00 	.word	0xe000ed00
  40ab88:	004035a1 	.word	0x004035a1
  40ab8c:	00410d4c 	.word	0x00410d4c
  40ab90:	4004c000 	.word	0x4004c000
  40ab94:	00410340 	.word	0x00410340
  40ab98:	0040ce81 	.word	0x0040ce81
  40ab9c:	004001ed 	.word	0x004001ed
  40aba0:	00410d1c 	.word	0x00410d1c
  40aba4:	0007b784 	.word	0x0007b784
  40aba8:	20401180 	.word	0x20401180
	printf("ISI ENABLED\r\n");
  40abac:	4889      	ldr	r0, [pc, #548]	; (40add4 <takeImage+0x704>)
  40abae:	4b8a      	ldr	r3, [pc, #552]	; (40add8 <takeImage+0x708>)
  40abb0:	4798      	blx	r3
	adsIsiConfig.crc_sync=0;//0=no crc on embedded sync
  40abb2:	2300      	movs	r3, #0
  40abb4:	f88d 3234 	strb.w	r3, [sp, #564]	; 0x234
	adsIsiConfig.emb_sync=0;//0=sync on vsync/hsync signals
  40abb8:	f88d 3233 	strb.w	r3, [sp, #563]	; 0x233
	adsIsiConfig.hpol=0;//0=sync active high
  40abbc:	f88d 3230 	strb.w	r3, [sp, #560]	; 0x230
	adsIsiConfig.vpol=0;//0=sync active high
  40abc0:	f88d 3231 	strb.w	r3, [sp, #561]	; 0x231
	adsIsiConfig.image_fmt=ISI_INPUT_YUV;//ISI_INPUT_GS_8BIT;//need 8-bit "grayscale" ("grayscale is deceiving term, it means raw unprocessed, it can mean color)
  40abc4:	f88d 3238 	strb.w	r3, [sp, #568]	; 0x238
	adsIsiConfig.image_hsize=1600;//OV2655 color bar ~works with 1600.
  40abc8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  40abcc:	928f      	str	r2, [sp, #572]	; 0x23c
	adsIsiConfig.image_vsize=1200;//480;//960;//480;
  40abce:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
  40abd2:	9290      	str	r2, [sp, #576]	; 0x240
	adsIsiConfig.sld=0;//h blanking
  40abd4:	f88d 3236 	strb.w	r3, [sp, #566]	; 0x236
	adsIsiConfig.sfd=0;//v blanking
  40abd8:	f88d 3237 	strb.w	r3, [sp, #567]	; 0x237
	adsIsiConfig.pck_pol=0;//0=data sampled on rising edge
  40abdc:	f88d 3232 	strb.w	r3, [sp, #562]	; 0x232
	adsIsiConfig.thmask=0;//only four beats of AHB burst allowed
  40abe0:	f88d 3235 	strb.w	r3, [sp, #565]	; 0x235
	isi_init(ISI, &adsIsiConfig);
  40abe4:	4d7d      	ldr	r5, [pc, #500]	; (40addc <takeImage+0x70c>)
  40abe6:	a98c      	add	r1, sp, #560	; 0x230
  40abe8:	4628      	mov	r0, r5
  40abea:	4b7d      	ldr	r3, [pc, #500]	; (40ade0 <takeImage+0x710>)
  40abec:	4798      	blx	r3
	isi_set_dma_codec_path(ISI,1, 1000,&preBufDescList[0], 1, SRAM_BASE);//Use codec path for capturing in "grayscale" (raw color) mode.
  40abee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  40abf2:	9301      	str	r3, [sp, #4]
  40abf4:	2101      	movs	r1, #1
  40abf6:	9100      	str	r1, [sp, #0]
  40abf8:	4643      	mov	r3, r8
  40abfa:	22e8      	movs	r2, #232	; 0xe8
  40abfc:	4628      	mov	r0, r5
  40abfe:	4c79      	ldr	r4, [pc, #484]	; (40ade4 <takeImage+0x714>)
  40ac00:	47a0      	blx	r4
	ISI->ISI_IDR = 0xFFFFFFFF;
  40ac02:	f04f 34ff 	mov.w	r4, #4294967295
  40ac06:	632c      	str	r4, [r5, #48]	; 0x30
	ISI->ISI_IER = ISI_IER_CXFR_DONE;
  40ac08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40ac0c:	62eb      	str	r3, [r5, #44]	; 0x2c
	ISI->ISI_DMA_CHDR |= ISI_DMA_CHDR_P_CH_DIS;//disable Preview Mode
  40ac0e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40ac10:	f043 0301 	orr.w	r3, r3, #1
  40ac14:	63eb      	str	r3, [r5, #60]	; 0x3c
	ISI->ISI_DMA_CHDR |= ISI_DMA_CHDR_C_CH_DIS;//disable Codec Mode
  40ac16:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40ac18:	f043 0302 	orr.w	r3, r3, #2
  40ac1c:	63eb      	str	r3, [r5, #60]	; 0x3c
    ccsidr  = SCB->CCSIDR;
  40ac1e:	4b72      	ldr	r3, [pc, #456]	; (40ade8 <takeImage+0x718>)
  40ac20:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40ac24:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40ac28:	f006 0007 	and.w	r0, r6, #7
  40ac2c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40ac2e:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40ac32:	fab6 f786 	clz	r7, r6
    wshift  = __CLZ(ways) & 0x1f;
  40ac36:	f007 071f 	and.w	r7, r7, #31
  __ASM volatile ("dsb");
  40ac3a:	f3bf 8f4f 	dsb	sy
  40ac3e:	fa04 fc00 	lsl.w	ip, r4, r0
  40ac42:	fa0e f000 	lsl.w	r0, lr, r0
  40ac46:	40bc      	lsls	r4, r7
  40ac48:	fa06 f707 	lsl.w	r7, r6, r7
              SCB->DCCSW = sw;
  40ac4c:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40ac4e:	4632      	mov	r2, r6
  40ac50:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40ac52:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCSW = sw;
  40ac56:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
            } while(tmpways--);
  40ac5a:	3a01      	subs	r2, #1
  40ac5c:	4423      	add	r3, r4
  40ac5e:	f1b2 3fff 	cmp.w	r2, #4294967295
  40ac62:	d1f6      	bne.n	40ac52 <takeImage+0x582>
        } while(sets--);
  40ac64:	f10e 3eff 	add.w	lr, lr, #4294967295
  40ac68:	4460      	add	r0, ip
  40ac6a:	f1be 3fff 	cmp.w	lr, #4294967295
  40ac6e:	d1ee      	bne.n	40ac4e <takeImage+0x57e>
  40ac70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40ac74:	f3bf 8f6f 	isb	sy
	ISI->ISI_DMA_CHER |= ISI_DMA_CHER_C_CH_EN;//enable Codec Mode. MUST USE CODEC PATH BECAUSE PREVIEW IS ONLY 640 X 480
  40ac78:	4a58      	ldr	r2, [pc, #352]	; (40addc <takeImage+0x70c>)
  40ac7a:	6b93      	ldr	r3, [r2, #56]	; 0x38
  40ac7c:	f043 0302 	orr.w	r3, r3, #2
  40ac80:	6393      	str	r3, [r2, #56]	; 0x38
	printf("ISI INIT DONE A\r\n");
  40ac82:	485a      	ldr	r0, [pc, #360]	; (40adec <takeImage+0x71c>)
  40ac84:	4b54      	ldr	r3, [pc, #336]	; (40add8 <takeImage+0x708>)
  40ac86:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ac88:	4b59      	ldr	r3, [pc, #356]	; (40adf0 <takeImage+0x720>)
  40ac8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40ac8e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ac90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40ac94:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(5);
  40ac96:	4857      	ldr	r0, [pc, #348]	; (40adf4 <takeImage+0x724>)
  40ac98:	4b57      	ldr	r3, [pc, #348]	; (40adf8 <takeImage+0x728>)
  40ac9a:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40ac9c:	4b57      	ldr	r3, [pc, #348]	; (40adfc <takeImage+0x72c>)
  40ac9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40aca2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40aca6:	21e0      	movs	r1, #224	; 0xe0
  40aca8:	f883 133b 	strb.w	r1, [r3, #827]	; 0x33b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40acac:	605a      	str	r2, [r3, #4]
 */
static inline char isi_capture(Isi *p_isi)
{
	char captureIters = 0;
	/* A new request cannot be taken into account while CDC_PND bit is active */
	while((p_isi->ISI_SR & ISI_SR_CDC_PND) == ISI_SR_CDC_PND);
  40acae:	4a4b      	ldr	r2, [pc, #300]	; (40addc <takeImage+0x70c>)
  40acb0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40acb2:	f413 7f80 	tst.w	r3, #256	; 0x100
  40acb6:	d1fb      	bne.n	40acb0 <takeImage+0x5e0>
	p_isi->ISI_CR = ISI_CR_ISI_CDC;
  40acb8:	f44f 7280 	mov.w	r2, #256	; 0x100
  40acbc:	4b47      	ldr	r3, [pc, #284]	; (40addc <takeImage+0x70c>)
  40acbe:	625a      	str	r2, [r3, #36]	; 0x24
	printf("ISI CAPTURE DONE. CapIters = %d   ",capIters);
  40acc0:	2100      	movs	r1, #0
  40acc2:	484f      	ldr	r0, [pc, #316]	; (40ae00 <takeImage+0x730>)
  40acc4:	4b44      	ldr	r3, [pc, #272]	; (40add8 <takeImage+0x708>)
  40acc6:	4798      	blx	r3
	delay_ms(1200);//100ms left first row of memory wrong. Need even longer delay if use slower PLL divide on camera.
  40acc8:	484e      	ldr	r0, [pc, #312]	; (40ae04 <takeImage+0x734>)
  40acca:	4b4b      	ldr	r3, [pc, #300]	; (40adf8 <takeImage+0x728>)
  40accc:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  40acce:	4b46      	ldr	r3, [pc, #280]	; (40ade8 <takeImage+0x718>)
  40acd0:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40acd4:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40acd8:	f006 0007 	and.w	r0, r6, #7
  40acdc:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40acde:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40ace2:	fab6 f786 	clz	r7, r6
    wshift  = __CLZ(ways) & 0x1f;
  40ace6:	f007 071f 	and.w	r7, r7, #31
  __ASM volatile ("dsb");
  40acea:	f3bf 8f4f 	dsb	sy
  40acee:	f04f 34ff 	mov.w	r4, #4294967295
  40acf2:	fa04 fc00 	lsl.w	ip, r4, r0
  40acf6:	fa0e f000 	lsl.w	r0, lr, r0
  40acfa:	40bc      	lsls	r4, r7
  40acfc:	fa06 f707 	lsl.w	r7, r6, r7
              SCB->DCCISW = sw;
  40ad00:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40ad02:	4632      	mov	r2, r6
  40ad04:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40ad06:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40ad0a:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40ad0e:	3a01      	subs	r2, #1
  40ad10:	4423      	add	r3, r4
  40ad12:	f1b2 3fff 	cmp.w	r2, #4294967295
  40ad16:	d1f6      	bne.n	40ad06 <takeImage+0x636>
        } while(sets--);
  40ad18:	f10e 3eff 	add.w	lr, lr, #4294967295
  40ad1c:	4460      	add	r0, ip
  40ad1e:	f1be 3fff 	cmp.w	lr, #4294967295
  40ad22:	d1ee      	bne.n	40ad02 <takeImage+0x632>
  40ad24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40ad28:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40ad2c:	4b2e      	ldr	r3, [pc, #184]	; (40ade8 <takeImage+0x718>)
  40ad2e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40ad32:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40ad36:	f006 0007 	and.w	r0, r6, #7
  40ad3a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40ad3c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40ad40:	fab6 f786 	clz	r7, r6
    wshift  = __CLZ(ways) & 0x1f;
  40ad44:	f007 071f 	and.w	r7, r7, #31
  __ASM volatile ("dsb");
  40ad48:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  40ad4c:	695a      	ldr	r2, [r3, #20]
  40ad4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  40ad52:	615a      	str	r2, [r3, #20]
  40ad54:	f04f 34ff 	mov.w	r4, #4294967295
  40ad58:	fa04 fc00 	lsl.w	ip, r4, r0
  40ad5c:	fa0e f000 	lsl.w	r0, lr, r0
  40ad60:	40bc      	lsls	r4, r7
  40ad62:	fa06 f707 	lsl.w	r7, r6, r7
              SCB->DCCISW = sw;
  40ad66:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40ad68:	4632      	mov	r2, r6
  40ad6a:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40ad6c:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  40ad70:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40ad74:	3a01      	subs	r2, #1
  40ad76:	4423      	add	r3, r4
  40ad78:	f1b2 3fff 	cmp.w	r2, #4294967295
  40ad7c:	d1f6      	bne.n	40ad6c <takeImage+0x69c>
        } while(sets--);
  40ad7e:	f10e 3eff 	add.w	lr, lr, #4294967295
  40ad82:	4460      	add	r0, ip
  40ad84:	f1be 3fff 	cmp.w	lr, #4294967295
  40ad88:	d1ee      	bne.n	40ad68 <takeImage+0x698>
  40ad8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40ad8e:	f3bf 8f6f 	isb	sy
	ov_configure(BOARD_TWIHS, 2);//OV2710 RESET. Required to free up ISID7_SDdat3 for SDcard to work.  OV2655 = 2 for Reset (not needed for 2655??)
  40ad92:	2102      	movs	r1, #2
  40ad94:	481c      	ldr	r0, [pc, #112]	; (40ae08 <takeImage+0x738>)
  40ad96:	4b1d      	ldr	r3, [pc, #116]	; (40ae0c <takeImage+0x73c>)
  40ad98:	4798      	blx	r3
  40ad9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40ad9e:	4b14      	ldr	r3, [pc, #80]	; (40adf0 <takeImage+0x720>)
  40ada0:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
  40ada2:	481b      	ldr	r0, [pc, #108]	; (40ae10 <takeImage+0x740>)
  40ada4:	4b14      	ldr	r3, [pc, #80]	; (40adf8 <takeImage+0x728>)
  40ada6:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40ada8:	4a1a      	ldr	r2, [pc, #104]	; (40ae14 <takeImage+0x744>)
  40adaa:	4b1b      	ldr	r3, [pc, #108]	; (40ae18 <takeImage+0x748>)
  40adac:	601a      	str	r2, [r3, #0]
	if(formatSize)RGB565toRGB888();
  40adae:	9b03      	ldr	r3, [sp, #12]
  40adb0:	b10b      	cbz	r3, 40adb6 <takeImage+0x6e6>
  40adb2:	4b1a      	ldr	r3, [pc, #104]	; (40ae1c <takeImage+0x74c>)
  40adb4:	4798      	blx	r3
  40adb6:	4c1a      	ldr	r4, [pc, #104]	; (40ae20 <takeImage+0x750>)
  40adb8:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40adbc:	6325      	str	r5, [r4, #48]	; 0x30
  40adbe:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(1);
  40adc0:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40adc4:	4b0c      	ldr	r3, [pc, #48]	; (40adf8 <takeImage+0x728>)
  40adc6:	4798      	blx	r3
  40adc8:	6325      	str	r5, [r4, #48]	; 0x30
	printf("CAM OFF\r\n");
  40adca:	4816      	ldr	r0, [pc, #88]	; (40ae24 <takeImage+0x754>)
  40adcc:	4b02      	ldr	r3, [pc, #8]	; (40add8 <takeImage+0x708>)
  40adce:	4798      	blx	r3
	char ret=0;
  40add0:	2400      	movs	r4, #0
  40add2:	e53a      	b.n	40a84a <takeImage+0x17a>
  40add4:	00410d64 	.word	0x00410d64
  40add8:	0040ce59 	.word	0x0040ce59
  40addc:	4004c000 	.word	0x4004c000
  40ade0:	00402451 	.word	0x00402451
  40ade4:	00402501 	.word	0x00402501
  40ade8:	e000ed00 	.word	0xe000ed00
  40adec:	00410d74 	.word	0x00410d74
  40adf0:	400e1200 	.word	0x400e1200
  40adf4:	0003dbc2 	.word	0x0003dbc2
  40adf8:	2040008d 	.word	0x2040008d
  40adfc:	e000e100 	.word	0xe000e100
  40ae00:	00410d88 	.word	0x00410d88
  40ae04:	039e05b4 	.word	0x039e05b4
  40ae08:	40018000 	.word	0x40018000
  40ae0c:	00400335 	.word	0x00400335
  40ae10:	0303af6b 	.word	0x0303af6b
  40ae14:	a5000001 	.word	0xa5000001
  40ae18:	400e1850 	.word	0x400e1850
  40ae1c:	004072d5 	.word	0x004072d5
  40ae20:	400e0e00 	.word	0x400e0e00
  40ae24:	00410dac 	.word	0x00410dac

0040ae28 <main_vendor_int_in_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  40ae28:	b100      	cbz	r0, 40ae2c <main_vendor_int_in_received+0x4>
  40ae2a:	4770      	bx	lr
{
  40ae2c:	b510      	push	{r4, lr}
  40ae2e:	b084      	sub	sp, #16
	udi_vendor_interrupt_out_run(
  40ae30:	4c1d      	ldr	r4, [pc, #116]	; (40aea8 <main_vendor_int_in_received+0x80>)
  40ae32:	4a1e      	ldr	r2, [pc, #120]	; (40aeac <main_vendor_int_in_received+0x84>)
  40ae34:	f44f 7100 	mov.w	r1, #512	; 0x200
  40ae38:	4620      	mov	r0, r4
  40ae3a:	4b1d      	ldr	r3, [pc, #116]	; (40aeb0 <main_vendor_int_in_received+0x88>)
  40ae3c:	4798      	blx	r3
	if((main_buf_loopback[0]=='W')&&(main_buf_loopback[1]=='D')&&(main_buf_loopback[2]=='S')){
  40ae3e:	7823      	ldrb	r3, [r4, #0]
  40ae40:	2b57      	cmp	r3, #87	; 0x57
  40ae42:	d010      	beq.n	40ae66 <main_vendor_int_in_received+0x3e>
	printf("IN: %d %d %d %d %d %d %d\r\n",main_buf_loopback[0],main_buf_loopback[1],main_buf_loopback[2],main_buf_loopback[3],main_buf_loopback[4],main_buf_loopback[5],main_buf_loopback[6]);
  40ae44:	4818      	ldr	r0, [pc, #96]	; (40aea8 <main_vendor_int_in_received+0x80>)
  40ae46:	7883      	ldrb	r3, [r0, #2]
  40ae48:	7842      	ldrb	r2, [r0, #1]
  40ae4a:	7801      	ldrb	r1, [r0, #0]
  40ae4c:	7984      	ldrb	r4, [r0, #6]
  40ae4e:	9403      	str	r4, [sp, #12]
  40ae50:	7944      	ldrb	r4, [r0, #5]
  40ae52:	9402      	str	r4, [sp, #8]
  40ae54:	7904      	ldrb	r4, [r0, #4]
  40ae56:	9401      	str	r4, [sp, #4]
  40ae58:	78c0      	ldrb	r0, [r0, #3]
  40ae5a:	9000      	str	r0, [sp, #0]
  40ae5c:	4815      	ldr	r0, [pc, #84]	; (40aeb4 <main_vendor_int_in_received+0x8c>)
  40ae5e:	4c16      	ldr	r4, [pc, #88]	; (40aeb8 <main_vendor_int_in_received+0x90>)
  40ae60:	47a0      	blx	r4
}
  40ae62:	b004      	add	sp, #16
  40ae64:	bd10      	pop	{r4, pc}
	if((main_buf_loopback[0]=='W')&&(main_buf_loopback[1]=='D')&&(main_buf_loopback[2]=='S')){
  40ae66:	7863      	ldrb	r3, [r4, #1]
  40ae68:	2b44      	cmp	r3, #68	; 0x44
  40ae6a:	d1eb      	bne.n	40ae44 <main_vendor_int_in_received+0x1c>
  40ae6c:	78a3      	ldrb	r3, [r4, #2]
  40ae6e:	2b53      	cmp	r3, #83	; 0x53
  40ae70:	d1e8      	bne.n	40ae44 <main_vendor_int_in_received+0x1c>
		switch(main_buf_loopback[5]){
  40ae72:	7963      	ldrb	r3, [r4, #5]
  40ae74:	2b02      	cmp	r3, #2
  40ae76:	d00c      	beq.n	40ae92 <main_vendor_int_in_received+0x6a>
  40ae78:	2b05      	cmp	r3, #5
  40ae7a:	d012      	beq.n	40aea2 <main_vendor_int_in_received+0x7a>
  40ae7c:	2b01      	cmp	r3, #1
  40ae7e:	d1e1      	bne.n	40ae44 <main_vendor_int_in_received+0x1c>
			g_imageSize = main_buf_loopback[17];
  40ae80:	4b09      	ldr	r3, [pc, #36]	; (40aea8 <main_vendor_int_in_received+0x80>)
  40ae82:	7c5a      	ldrb	r2, [r3, #17]
  40ae84:	490d      	ldr	r1, [pc, #52]	; (40aebc <main_vendor_int_in_received+0x94>)
  40ae86:	700a      	strb	r2, [r1, #0]
			takeImage(0, main_buf_loopback[14], main_buf_loopback[17]);			
  40ae88:	7b99      	ldrb	r1, [r3, #14]
  40ae8a:	2000      	movs	r0, #0
  40ae8c:	4b0c      	ldr	r3, [pc, #48]	; (40aec0 <main_vendor_int_in_received+0x98>)
  40ae8e:	4798      	blx	r3
			break;
  40ae90:	e7d8      	b.n	40ae44 <main_vendor_int_in_received+0x1c>
			redBlink(main_buf_loopback[17]);
  40ae92:	4b05      	ldr	r3, [pc, #20]	; (40aea8 <main_vendor_int_in_received+0x80>)
  40ae94:	7c58      	ldrb	r0, [r3, #17]
  40ae96:	4b0b      	ldr	r3, [pc, #44]	; (40aec4 <main_vendor_int_in_received+0x9c>)
  40ae98:	4798      	blx	r3
			printf("Blinked\r\n");
  40ae9a:	480b      	ldr	r0, [pc, #44]	; (40aec8 <main_vendor_int_in_received+0xa0>)
  40ae9c:	4b06      	ldr	r3, [pc, #24]	; (40aeb8 <main_vendor_int_in_received+0x90>)
  40ae9e:	4798      	blx	r3
			break;
  40aea0:	e7d0      	b.n	40ae44 <main_vendor_int_in_received+0x1c>
			receiveUSBcamConfig();
  40aea2:	4b0a      	ldr	r3, [pc, #40]	; (40aecc <main_vendor_int_in_received+0xa4>)
  40aea4:	4798      	blx	r3
			break;
  40aea6:	e7cd      	b.n	40ae44 <main_vendor_int_in_received+0x1c>
  40aea8:	20400ed4 	.word	0x20400ed4
  40aeac:	00406f5d 	.word	0x00406f5d
  40aeb0:	00402a7d 	.word	0x00402a7d
  40aeb4:	004108ec 	.word	0x004108ec
  40aeb8:	0040ce59 	.word	0x0040ce59
  40aebc:	20400ecc 	.word	0x20400ecc
  40aec0:	0040a6d1 	.word	0x0040a6d1
  40aec4:	00408219 	.word	0x00408219
  40aec8:	004108e0 	.word	0x004108e0
  40aecc:	004072ad 	.word	0x004072ad

0040aed0 <main_vendor_enable>:
{
  40aed0:	b510      	push	{r4, lr}
	main_b_vendor_enable = true;
  40aed2:	2401      	movs	r4, #1
  40aed4:	4b0b      	ldr	r3, [pc, #44]	; (40af04 <main_vendor_enable+0x34>)
  40aed6:	701c      	strb	r4, [r3, #0]
	main_vendor_int_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  40aed8:	2200      	movs	r2, #0
  40aeda:	4611      	mov	r1, r2
  40aedc:	4610      	mov	r0, r2
  40aede:	4b0a      	ldr	r3, [pc, #40]	; (40af08 <main_vendor_enable+0x38>)
  40aee0:	4798      	blx	r3
	g_usbFlagC=3;
  40aee2:	2203      	movs	r2, #3
  40aee4:	4b09      	ldr	r3, [pc, #36]	; (40af0c <main_vendor_enable+0x3c>)
  40aee6:	701a      	strb	r2, [r3, #0]
	main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  40aee8:	2200      	movs	r2, #0
  40aeea:	4611      	mov	r1, r2
  40aeec:	4610      	mov	r0, r2
  40aeee:	4b08      	ldr	r3, [pc, #32]	; (40af10 <main_vendor_enable+0x40>)
  40aef0:	4798      	blx	r3
	main_buf_iso_sel=0;
  40aef2:	2000      	movs	r0, #0
  40aef4:	4b07      	ldr	r3, [pc, #28]	; (40af14 <main_vendor_enable+0x44>)
  40aef6:	7018      	strb	r0, [r3, #0]
	main_vendor_iso_out_received(UDD_EP_TRANSFER_OK, 0, 0);
  40aef8:	4602      	mov	r2, r0
  40aefa:	4601      	mov	r1, r0
  40aefc:	4b06      	ldr	r3, [pc, #24]	; (40af18 <main_vendor_enable+0x48>)
  40aefe:	4798      	blx	r3
}
  40af00:	4620      	mov	r0, r4
  40af02:	bd10      	pop	{r4, pc}
  40af04:	20400ed0 	.word	0x20400ed0
  40af08:	0040ae29 	.word	0x0040ae29
  40af0c:	20400ecf 	.word	0x20400ecf
  40af10:	00406fa5 	.word	0x00406fa5
  40af14:	20400ed1 	.word	0x20400ed1
  40af18:	0040709d 	.word	0x0040709d

0040af1c <sleepPins>:
void sleepPins(void){
  40af1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pmc_enable_periph_clk(ID_PIOA);
  40af20:	200a      	movs	r0, #10
  40af22:	4ce1      	ldr	r4, [pc, #900]	; (40b2a8 <sleepPins+0x38c>)
  40af24:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  40af26:	200b      	movs	r0, #11
  40af28:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOC);
  40af2a:	200c      	movs	r0, #12
  40af2c:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  40af2e:	2010      	movs	r0, #16
  40af30:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOE);
  40af32:	2011      	movs	r0, #17
  40af34:	47a0      	blx	r4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40af36:	4bdd      	ldr	r3, [pc, #884]	; (40b2ac <sleepPins+0x390>)
  40af38:	2701      	movs	r7, #1
  40af3a:	615f      	str	r7, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40af3c:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40af40:	2602      	movs	r6, #2
  40af42:	615e      	str	r6, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40af44:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40af48:	2504      	movs	r5, #4
  40af4a:	615d      	str	r5, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40af4c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40af50:	2440      	movs	r4, #64	; 0x40
  40af52:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40af54:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40af58:	f04f 0a80 	mov.w	sl, #128	; 0x80
  40af5c:	f8c3 a014 	str.w	sl, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40af60:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40af64:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40af68:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40af6a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40af6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40af72:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40af74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40af78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40af7c:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40af7e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40af82:	f44f 4980 	mov.w	r9, #16384	; 0x4000
  40af86:	f8c3 9014 	str.w	r9, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40af8a:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40af8e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  40af92:	f8c3 8014 	str.w	r8, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40af96:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40af9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40af9e:	f8c3 c014 	str.w	ip, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40afa2:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40afa6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  40afaa:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40afac:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40afb0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  40afb4:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40afb6:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40afba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  40afbe:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40afc0:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40afc4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  40afc8:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40afca:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40afce:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  40afd2:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40afd4:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40afd8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  40afdc:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40afde:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40afe2:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
  40afe6:	f8c3 e010 	str.w	lr, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40afea:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40afee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  40aff2:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40aff4:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40aff8:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40affa:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40affe:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b000:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b002:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b006:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  40b00a:	f02b 0b01 	bic.w	fp, fp, #1
  40b00e:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b012:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  40b016:	f02b 0b01 	bic.w	fp, fp, #1
  40b01a:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b01e:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b020:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDER = mask;
  40b024:	651e      	str	r6, [r3, #80]	; 0x50
		base->PIO_IFER = mask;
  40b026:	621e      	str	r6, [r3, #32]
		base->PIO_IFSCDR = mask;
  40b028:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b02c:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  40b030:	f02b 0b02 	bic.w	fp, fp, #2
  40b034:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b038:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  40b03c:	f02b 0b02 	bic.w	fp, fp, #2
  40b040:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b044:	665d      	str	r5, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b046:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b04a:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b04c:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b04e:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b052:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  40b056:	f02b 0b04 	bic.w	fp, fp, #4
  40b05a:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b05e:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  40b062:	f02b 0b04 	bic.w	fp, fp, #4
  40b066:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b06a:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b06c:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDER = mask;
  40b070:	651c      	str	r4, [r3, #80]	; 0x50
		base->PIO_IFDR = mask;
  40b072:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b074:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b078:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  40b07c:	f02b 0b40 	bic.w	fp, fp, #64	; 0x40
  40b080:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b084:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  40b088:	f02b 0b40 	bic.w	fp, fp, #64	; 0x40
  40b08c:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b090:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b094:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDER = mask;
  40b098:	f8c3 a050 	str.w	sl, [r3, #80]	; 0x50
		base->PIO_IFDR = mask;
  40b09c:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b0a0:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b0a4:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  40b0a8:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
  40b0ac:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b0b0:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40b0b4:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
  40b0b8:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b0bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40b0c0:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b0c2:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b0c6:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b0c8:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b0ca:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b0ce:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  40b0d2:	f42a 6a00 	bic.w	sl, sl, #2048	; 0x800
  40b0d6:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b0da:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40b0de:	f42a 6a00 	bic.w	sl, sl, #2048	; 0x800
  40b0e2:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b0e6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b0e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b0ec:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b0ee:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b0f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b0f4:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  40b0f8:	f42a 5a80 	bic.w	sl, sl, #4096	; 0x1000
  40b0fc:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b100:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40b104:	f42a 5a80 	bic.w	sl, sl, #4096	; 0x1000
  40b108:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b10c:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b10e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b112:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b114:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b116:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b11a:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  40b11e:	f42a 5a00 	bic.w	sl, sl, #8192	; 0x2000
  40b122:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b126:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40b12a:	f42a 5a00 	bic.w	sl, sl, #8192	; 0x2000
  40b12e:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b132:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b136:	f8c3 9090 	str.w	r9, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b13a:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b13e:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b142:	f8c3 9080 	str.w	r9, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b146:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b14a:	f429 4980 	bic.w	r9, r9, #16384	; 0x4000
  40b14e:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b152:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b156:	f429 4980 	bic.w	r9, r9, #16384	; 0x4000
  40b15a:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b15e:	f8c3 8064 	str.w	r8, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b162:	f8c3 8090 	str.w	r8, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b166:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b16a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b16e:	f8c3 8080 	str.w	r8, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b172:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b176:	f429 3900 	bic.w	r9, r9, #131072	; 0x20000
  40b17a:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b17e:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b182:	f429 3900 	bic.w	r9, r9, #131072	; 0x20000
  40b186:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b18a:	f8c3 c064 	str.w	ip, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b18e:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b192:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b196:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b19a:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b19e:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b1a2:	f429 2900 	bic.w	r9, r9, #524288	; 0x80000
  40b1a6:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b1aa:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b1ae:	f429 2900 	bic.w	r9, r9, #524288	; 0x80000
  40b1b2:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b1b6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  40b1ba:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b1bc:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b1c0:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b1c2:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b1c4:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b1c8:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b1cc:	f429 0980 	bic.w	r9, r9, #4194304	; 0x400000
  40b1d0:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b1d4:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b1d8:	f429 0980 	bic.w	r9, r9, #4194304	; 0x400000
  40b1dc:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b1e0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  40b1e4:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b1e6:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b1ea:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b1ec:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b1ee:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b1f2:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b1f6:	f029 7900 	bic.w	r9, r9, #33554432	; 0x2000000
  40b1fa:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b1fe:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b202:	f029 7900 	bic.w	r9, r9, #33554432	; 0x2000000
  40b206:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b20a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  40b20e:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b210:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b214:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b216:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b218:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b21c:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b220:	f029 6980 	bic.w	r9, r9, #67108864	; 0x4000000
  40b224:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b228:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b22c:	f029 6980 	bic.w	r9, r9, #67108864	; 0x4000000
  40b230:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b234:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  40b238:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b23a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b23e:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b240:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b242:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b246:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b24a:	f029 6900 	bic.w	r9, r9, #134217728	; 0x8000000
  40b24e:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b252:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b256:	f029 6900 	bic.w	r9, r9, #134217728	; 0x8000000
  40b25a:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b25e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  40b262:	6358      	str	r0, [r3, #52]	; 0x34
		base->PIO_PUER = mask;
  40b264:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  40b268:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b26a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b26e:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b270:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b272:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b276:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b27a:	f029 5900 	bic.w	r9, r9, #536870912	; 0x20000000
  40b27e:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b282:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b286:	f029 5900 	bic.w	r9, r9, #536870912	; 0x20000000
  40b28a:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b28e:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b292:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b296:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b29a:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b29e:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b2a2:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b2a6:	e003      	b.n	40b2b0 <sleepPins+0x394>
  40b2a8:	004035a1 	.word	0x004035a1
  40b2ac:	400e0e00 	.word	0x400e0e00
  40b2b0:	f029 4980 	bic.w	r9, r9, #1073741824	; 0x40000000
  40b2b4:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b2b8:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b2bc:	f029 4980 	bic.w	r9, r9, #1073741824	; 0x40000000
  40b2c0:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b2c4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  40b2c8:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b2ca:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b2ce:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b2d0:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b2d2:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b2d6:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b2da:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
  40b2de:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b2e2:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b2e6:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
  40b2ea:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b2ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b2f2:	615f      	str	r7, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b2f4:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b2f8:	615e      	str	r6, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b2fa:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b2fe:	615d      	str	r5, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b300:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b304:	f04f 0b10 	mov.w	fp, #16
  40b308:	f8c3 b014 	str.w	fp, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b30c:	f8c3 b0a0 	str.w	fp, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b310:	f04f 0a20 	mov.w	sl, #32
  40b314:	f8c3 a014 	str.w	sl, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b318:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b31c:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b31e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b322:	f44f 7900 	mov.w	r9, #512	; 0x200
  40b326:	f8c3 9014 	str.w	r9, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b32a:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b32e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b330:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b334:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b336:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40b33a:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b33c:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b340:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b342:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b344:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b348:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  40b34a:	f027 0701 	bic.w	r7, r7, #1
  40b34e:	671f      	str	r7, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b350:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  40b352:	f027 0701 	bic.w	r7, r7, #1
  40b356:	675f      	str	r7, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b358:	665e      	str	r6, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b35a:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b35e:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b360:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b362:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b366:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  40b368:	f026 0602 	bic.w	r6, r6, #2
  40b36c:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b36e:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40b370:	f026 0602 	bic.w	r6, r6, #2
  40b374:	675e      	str	r6, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b376:	665d      	str	r5, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b378:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b37c:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b37e:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b380:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b384:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  40b386:	f025 0504 	bic.w	r5, r5, #4
  40b38a:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b38c:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40b38e:	f025 0504 	bic.w	r5, r5, #4
  40b392:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b394:	f8c3 b064 	str.w	fp, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b398:	f8c3 b090 	str.w	fp, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b39c:	f8c3 b054 	str.w	fp, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b3a0:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b3a4:	f8c3 b080 	str.w	fp, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b3a8:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  40b3aa:	f025 0510 	bic.w	r5, r5, #16
  40b3ae:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b3b0:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40b3b2:	f025 0510 	bic.w	r5, r5, #16
  40b3b6:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b3b8:	f8c3 a064 	str.w	sl, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b3bc:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b3c0:	f8c3 a054 	str.w	sl, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b3c4:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b3c8:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b3cc:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  40b3ce:	f025 0520 	bic.w	r5, r5, #32
  40b3d2:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b3d4:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40b3d6:	f025 0520 	bic.w	r5, r5, #32
  40b3da:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b3dc:	665c      	str	r4, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b3de:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b3e2:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b3e4:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b3e6:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b3ea:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40b3ec:	f024 0440 	bic.w	r4, r4, #64	; 0x40
  40b3f0:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b3f2:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40b3f4:	f024 0440 	bic.w	r4, r4, #64	; 0x40
  40b3f8:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b3fa:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b3fe:	f8c3 9090 	str.w	r9, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b402:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b406:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b40a:	f8c3 9080 	str.w	r9, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b40e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40b410:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  40b414:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b416:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40b418:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  40b41c:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b41e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  40b420:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  40b424:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b426:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b42c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40b42e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  40b432:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b434:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40b436:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  40b43a:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b43c:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b43e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b442:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b444:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b446:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b44a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40b44c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  40b450:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b452:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40b454:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  40b458:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b45a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b45e:	f44f 7580 	mov.w	r5, #256	; 0x100
  40b462:	611d      	str	r5, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b464:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b468:	f8c3 9010 	str.w	r9, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b46c:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b470:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40b474:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b476:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b47a:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40b47e:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b480:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b484:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b486:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b48a:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b48c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b490:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40b494:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b496:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b49a:	f8c3 8014 	str.w	r8, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b49e:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b4a2:	f8c3 c014 	str.w	ip, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b4a6:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b4aa:	f8c3 e014 	str.w	lr, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b4ae:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b4b2:	635d      	str	r5, [r3, #52]	; 0x34
  40b4b4:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
		base->PIO_PUDR = mask;
  40b4b8:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b4ba:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b4be:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b4c0:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b4c2:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b4c6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40b4c8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  40b4cc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b4ce:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40b4d0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  40b4d4:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b4d6:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b4d8:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b4dc:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b4de:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b4e0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b4e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40b4e6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40b4ea:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b4ec:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40b4ee:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40b4f2:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b4f4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b4f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b4fa:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b4fc:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b4fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b502:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40b504:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40b508:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b50a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40b50c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40b510:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b512:	461d      	mov	r5, r3
  40b514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40b518:	662b      	str	r3, [r5, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b51a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b51e:	656b      	str	r3, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b520:	626b      	str	r3, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b522:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b526:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40b528:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40b52c:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b52e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40b530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40b534:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40b536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40b53a:	666b      	str	r3, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b53c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b540:	656b      	str	r3, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b542:	626b      	str	r3, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b544:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b548:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40b54a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40b54e:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b550:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40b552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40b556:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40b558:	f8c5 8064 	str.w	r8, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b55c:	f8c5 8090 	str.w	r8, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b560:	f8c5 8054 	str.w	r8, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b564:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b568:	f8c5 8080 	str.w	r8, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b56c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40b56e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  40b572:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b574:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40b576:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  40b57a:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40b57c:	4662      	mov	r2, ip
  40b57e:	f8c5 c064 	str.w	ip, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b582:	f8c5 c090 	str.w	ip, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b586:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b58a:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b58e:	f8c5 c080 	str.w	ip, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b592:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40b594:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  40b598:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b59a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40b59c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  40b5a0:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40b5a2:	4673      	mov	r3, lr
  40b5a4:	f8c5 e064 	str.w	lr, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b5a8:	f8c5 e090 	str.w	lr, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b5ac:	f8c5 e054 	str.w	lr, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b5b0:	f8c5 e024 	str.w	lr, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b5b4:	f8c5 e080 	str.w	lr, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b5b8:	6f29      	ldr	r1, [r5, #112]	; 0x70
  40b5ba:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  40b5be:	6729      	str	r1, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b5c0:	6f69      	ldr	r1, [r5, #116]	; 0x74
  40b5c2:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  40b5c6:	6769      	str	r1, [r5, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b5c8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
  40b5cc:	f504 2461 	add.w	r4, r4, #921600	; 0xe1000
  40b5d0:	2101      	movs	r1, #1
  40b5d2:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b5d4:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b5d8:	2102      	movs	r1, #2
  40b5da:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b5dc:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b5e0:	2104      	movs	r1, #4
  40b5e2:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b5e4:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b5e8:	2708      	movs	r7, #8
  40b5ea:	6167      	str	r7, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b5ec:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b5f0:	46d8      	mov	r8, fp
  40b5f2:	f8c4 b014 	str.w	fp, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b5f6:	f8c4 b0a0 	str.w	fp, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b5fa:	46d1      	mov	r9, sl
  40b5fc:	f8c4 a014 	str.w	sl, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b600:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b604:	2140      	movs	r1, #64	; 0x40
  40b606:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b608:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b60c:	2180      	movs	r1, #128	; 0x80
  40b60e:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b610:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b614:	f44f 7180 	mov.w	r1, #256	; 0x100
  40b618:	6121      	str	r1, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b61a:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b61e:	f44f 7b00 	mov.w	fp, #512	; 0x200
  40b622:	f8c4 b014 	str.w	fp, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b626:	f8c4 b0a0 	str.w	fp, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b62a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  40b62e:	f8c4 a014 	str.w	sl, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b632:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b636:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40b63a:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b63c:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b640:	f8c4 c014 	str.w	ip, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b644:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b648:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40b64c:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b64e:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b652:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
  40b656:	f8c4 e014 	str.w	lr, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b65a:	f8c4 e0a0 	str.w	lr, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b65e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  40b662:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b664:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b668:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  40b66c:	6160      	str	r0, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b66e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b672:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b674:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b678:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40b67c:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b67e:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  40b682:	2101      	movs	r1, #1
  40b684:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b686:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b68a:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b68c:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b68e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b692:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40b696:	f02c 0c01 	bic.w	ip, ip, #1
  40b69a:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b69e:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40b6a2:	f02c 0c01 	bic.w	ip, ip, #1
  40b6a6:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b6aa:	2102      	movs	r1, #2
  40b6ac:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b6ae:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b6b2:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b6b4:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b6b6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b6ba:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40b6be:	f02c 0c02 	bic.w	ip, ip, #2
  40b6c2:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b6c6:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40b6ca:	f02c 0c02 	bic.w	ip, ip, #2
  40b6ce:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b6d2:	2104      	movs	r1, #4
  40b6d4:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b6d6:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b6da:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b6dc:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b6de:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b6e2:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40b6e6:	f02c 0c04 	bic.w	ip, ip, #4
  40b6ea:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b6ee:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40b6f2:	f02c 0c04 	bic.w	ip, ip, #4
  40b6f6:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b6fa:	6667      	str	r7, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b6fc:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b700:	6567      	str	r7, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b702:	6267      	str	r7, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b704:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b708:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40b70c:	f02c 0c08 	bic.w	ip, ip, #8
  40b710:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b714:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40b718:	f02c 0c08 	bic.w	ip, ip, #8
  40b71c:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b720:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b724:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b728:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b72c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b730:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b734:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40b738:	f02c 0c10 	bic.w	ip, ip, #16
  40b73c:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b740:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40b744:	f02c 0c10 	bic.w	ip, ip, #16
  40b748:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b74c:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b750:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b754:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b758:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b75c:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b760:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40b764:	f02c 0c20 	bic.w	ip, ip, #32
  40b768:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b76c:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40b770:	f02c 0c20 	bic.w	ip, ip, #32
  40b774:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b778:	2140      	movs	r1, #64	; 0x40
  40b77a:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b77c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b780:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b782:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b784:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b788:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40b78c:	f02c 0c40 	bic.w	ip, ip, #64	; 0x40
  40b790:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b794:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40b798:	f02c 0c40 	bic.w	ip, ip, #64	; 0x40
  40b79c:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b7a0:	2180      	movs	r1, #128	; 0x80
  40b7a2:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b7a4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b7a8:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b7aa:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b7ac:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b7b0:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40b7b4:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40b7b8:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b7bc:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40b7c0:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40b7c4:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b7c8:	f44f 7180 	mov.w	r1, #256	; 0x100
  40b7cc:	6361      	str	r1, [r4, #52]	; 0x34
		base->PIO_PUER = mask;
  40b7ce:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b7d2:	f8c4 b090 	str.w	fp, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b7d6:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b7da:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b7de:	f8c4 b080 	str.w	fp, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b7e2:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40b7e6:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  40b7ea:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b7ee:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40b7f2:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  40b7f6:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b7fa:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b7fe:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b802:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b806:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b80a:	f8c4 a080 	str.w	sl, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b80e:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40b812:	f42c 6c80 	bic.w	ip, ip, #1024	; 0x400
  40b816:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b81a:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40b81e:	f42c 6c80 	bic.w	ip, ip, #1024	; 0x400
  40b822:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b826:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40b82a:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b82c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b830:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b832:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b834:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b838:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40b83c:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  40b840:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b844:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40b848:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  40b84c:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b850:	6662      	str	r2, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b852:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b856:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b858:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b85a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b85e:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40b860:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  40b864:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b866:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40b868:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  40b86c:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b86e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40b872:	6662      	str	r2, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b874:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b878:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b87a:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b87c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b880:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40b882:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40b886:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b888:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40b88a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40b88e:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b890:	f8c4 e064 	str.w	lr, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b894:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b898:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b89c:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b8a0:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b8a4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40b8a6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  40b8aa:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b8ac:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40b8ae:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  40b8b2:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b8b4:	6666      	str	r6, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b8b6:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b8ba:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b8bc:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b8be:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b8c2:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40b8c4:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  40b8c8:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b8ca:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40b8cc:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  40b8d0:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b8d2:	6660      	str	r0, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b8d4:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b8d8:	6560      	str	r0, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b8da:	6260      	str	r0, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b8dc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b8e0:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40b8e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
  40b8e6:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b8e8:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40b8ea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
  40b8ee:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b8f0:	6663      	str	r3, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b8f2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b8f6:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b8f8:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b8fa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b8fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40b900:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  40b904:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b906:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40b908:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  40b90c:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b90e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  40b912:	6663      	str	r3, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b914:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b918:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b91a:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b91c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b920:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40b922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40b926:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b928:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40b92a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40b92e:	6763      	str	r3, [r4, #116]	; 0x74
 	resetPinsISI();
  40b930:	4bcc      	ldr	r3, [pc, #816]	; (40bc64 <sleepPins+0xd48>)
  40b932:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b934:	4ecc      	ldr	r6, [pc, #816]	; (40bc68 <sleepPins+0xd4c>)
  40b936:	6177      	str	r7, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b938:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b93c:	f8c6 8014 	str.w	r8, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b940:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b944:	f8c6 9010 	str.w	r9, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b948:	f8c6 90a0 	str.w	r9, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b94c:	f8c6 b010 	str.w	fp, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b950:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b954:	f8c6 a010 	str.w	sl, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b958:	f8c6 a0a0 	str.w	sl, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b95c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  40b960:	6131      	str	r1, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b962:	f8c6 10a0 	str.w	r1, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b966:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40b96a:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b96c:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_PUDR = mask;
  40b970:	6637      	str	r7, [r6, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b972:	f8c6 7090 	str.w	r7, [r6, #144]	; 0x90
		base->PIO_MDER = mask;
  40b976:	6537      	str	r7, [r6, #80]	; 0x50
		base->PIO_IFDR = mask;
  40b978:	6277      	str	r7, [r6, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b97a:	f8c6 7080 	str.w	r7, [r6, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b97e:	6f33      	ldr	r3, [r6, #112]	; 0x70
  40b980:	f023 0308 	bic.w	r3, r3, #8
  40b984:	6733      	str	r3, [r6, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b986:	6f73      	ldr	r3, [r6, #116]	; 0x74
  40b988:	f023 0308 	bic.w	r3, r3, #8
  40b98c:	6773      	str	r3, [r6, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b98e:	f8c6 8060 	str.w	r8, [r6, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b992:	f8c6 8090 	str.w	r8, [r6, #144]	; 0x90
		base->PIO_MDER = mask;
  40b996:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
		base->PIO_IFDR = mask;
  40b99a:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b99e:	f8c6 8080 	str.w	r8, [r6, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b9a2:	6f33      	ldr	r3, [r6, #112]	; 0x70
  40b9a4:	f023 0310 	bic.w	r3, r3, #16
  40b9a8:	6733      	str	r3, [r6, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b9aa:	6f73      	ldr	r3, [r6, #116]	; 0x74
  40b9ac:	f023 0310 	bic.w	r3, r3, #16
  40b9b0:	6773      	str	r3, [r6, #116]	; 0x74
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b9b2:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
  40b9b6:	f8c6 b034 	str.w	fp, [r6, #52]	; 0x34
  40b9ba:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
  40b9be:	6371      	str	r1, [r6, #52]	; 0x34
  40b9c0:	6372      	str	r2, [r6, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b9c2:	4baa      	ldr	r3, [pc, #680]	; (40bc6c <sleepPins+0xd50>)
  40b9c4:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b9c6:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b9ca:	635f      	str	r7, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b9cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40b9d0:	616b      	str	r3, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b9d2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		base->PIO_PUDR = mask;
  40b9d6:	662b      	str	r3, [r5, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b9d8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
		base->PIO_MDER = mask;
  40b9dc:	652b      	str	r3, [r5, #80]	; 0x50
		base->PIO_IFDR = mask;
  40b9de:	626b      	str	r3, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b9e0:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b9e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40b9e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  40b9ea:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b9ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40b9ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  40b9f2:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b9f4:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  40b9f8:	f8c4 c010 	str.w	ip, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b9fc:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ba00:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  40ba04:	f8c4 e010 	str.w	lr, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ba08:	f8c4 e0a0 	str.w	lr, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ba0c:	6121      	str	r1, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ba0e:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ba12:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  40ba16:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ba18:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ba1c:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ba1e:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ba22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  40ba26:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ba28:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40ba2c:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
  40ba30:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  40ba34:	6361      	str	r1, [r4, #52]	; 0x34
  40ba36:	6360      	str	r0, [r4, #52]	; 0x34
  40ba38:	6362      	str	r2, [r4, #52]	; 0x34
  40ba3a:	6363      	str	r3, [r4, #52]	; 0x34
	resetPinsSDRAM();
  40ba3c:	4b8c      	ldr	r3, [pc, #560]	; (40bc70 <sleepPins+0xd54>)
  40ba3e:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ba40:	f44f 7380 	mov.w	r3, #256	; 0x100
  40ba44:	6133      	str	r3, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ba46:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ba4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40ba4e:	6133      	str	r3, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ba50:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ba54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40ba58:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ba5a:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ba5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40ba62:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ba64:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ba68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40ba6c:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ba6e:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ba72:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40ba76:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ba78:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40ba7c:	f44f 7180 	mov.w	r1, #256	; 0x100
  40ba80:	6371      	str	r1, [r6, #52]	; 0x34
  40ba82:	6373      	str	r3, [r6, #52]	; 0x34
  40ba84:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40ba88:	6371      	str	r1, [r6, #52]	; 0x34
  40ba8a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40ba8e:	6371      	str	r1, [r6, #52]	; 0x34
  40ba90:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40ba94:	6371      	str	r1, [r6, #52]	; 0x34
  40ba96:	6372      	str	r2, [r6, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ba98:	2201      	movs	r2, #1
  40ba9a:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ba9c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40baa0:	2202      	movs	r2, #2
  40baa2:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40baa4:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40baa8:	2204      	movs	r2, #4
  40baaa:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40baac:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bab0:	612f      	str	r7, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bab2:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bab6:	f8c5 8010 	str.w	r8, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40baba:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40babe:	f8c5 9010 	str.w	r9, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bac2:	f8c5 90a0 	str.w	r9, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bac6:	2240      	movs	r2, #64	; 0x40
  40bac8:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40baca:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bace:	2280      	movs	r2, #128	; 0x80
  40bad0:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bad2:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bad6:	612b      	str	r3, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bad8:	462b      	mov	r3, r5
  40bada:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  40bade:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bae2:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  40bae6:	f8c5 a010 	str.w	sl, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40baea:	f8c5 a0a0 	str.w	sl, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40baee:	4689      	mov	r9, r1
  40baf0:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40baf2:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40baf6:	f44f 1800 	mov.w	r8, #2097152	; 0x200000
  40bafa:	f8c5 8010 	str.w	r8, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bafe:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bb02:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40bb06:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bb08:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bb0c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  40bb10:	6128      	str	r0, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bb12:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bb16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40bb1a:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bb1c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bb20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40bb24:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bb26:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bb2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40bb2e:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bb30:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bb34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40bb38:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bb3a:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bb3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40bb42:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bb44:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bb48:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40bb4c:	6129      	str	r1, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bb4e:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bb52:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
  40bb56:	f8c5 b010 	str.w	fp, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bb5a:	f8c5 b0a0 	str.w	fp, [r5, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bb5e:	2201      	movs	r2, #1
  40bb60:	636a      	str	r2, [r5, #52]	; 0x34
  40bb62:	f04f 0c02 	mov.w	ip, #2
  40bb66:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
  40bb6a:	f04f 0e04 	mov.w	lr, #4
  40bb6e:	f8c5 e034 	str.w	lr, [r5, #52]	; 0x34
  40bb72:	636f      	str	r7, [r5, #52]	; 0x34
  40bb74:	2610      	movs	r6, #16
  40bb76:	636e      	str	r6, [r5, #52]	; 0x34
  40bb78:	2520      	movs	r5, #32
  40bb7a:	635d      	str	r5, [r3, #52]	; 0x34
  40bb7c:	2540      	movs	r5, #64	; 0x40
  40bb7e:	635d      	str	r5, [r3, #52]	; 0x34
  40bb80:	2580      	movs	r5, #128	; 0x80
  40bb82:	635d      	str	r5, [r3, #52]	; 0x34
  40bb84:	635c      	str	r4, [r3, #52]	; 0x34
  40bb86:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
  40bb8a:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  40bb8e:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  40bb92:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  40bb96:	635d      	str	r5, [r3, #52]	; 0x34
  40bb98:	6358      	str	r0, [r3, #52]	; 0x34
  40bb9a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  40bb9e:	635d      	str	r5, [r3, #52]	; 0x34
  40bba0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  40bba4:	635d      	str	r5, [r3, #52]	; 0x34
  40bba6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  40bbaa:	635d      	str	r5, [r3, #52]	; 0x34
  40bbac:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  40bbb0:	635d      	str	r5, [r3, #52]	; 0x34
  40bbb2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40bbb6:	635d      	str	r5, [r3, #52]	; 0x34
  40bbb8:	6359      	str	r1, [r3, #52]	; 0x34
  40bbba:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bbbe:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40bbc2:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  40bbc6:	f8c3 b010 	str.w	fp, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bbca:	f8c3 b0a0 	str.w	fp, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bbce:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
  40bbd2:	f8c3 a010 	str.w	sl, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bbd6:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bbda:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bbdc:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bbe0:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  40bbe4:	f8c3 9010 	str.w	r9, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bbe8:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bbec:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  40bbf0:	f8c3 8010 	str.w	r8, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bbf4:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bbf8:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bbfa:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bbfe:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bc00:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bc04:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
  40bc08:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
  40bc0c:	635c      	str	r4, [r3, #52]	; 0x34
  40bc0e:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  40bc12:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  40bc16:	6358      	str	r0, [r3, #52]	; 0x34
  40bc18:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_PUDR = mask;
  40bc1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40bc1e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40bc20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bc24:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bc26:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bc28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bc2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40bc2e:	f021 0101 	bic.w	r1, r1, #1
  40bc32:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bc34:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40bc36:	f021 0101 	bic.w	r1, r1, #1
  40bc3a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40bc3c:	601a      	str	r2, [r3, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bc3e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bc40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bc44:	f8c3 c010 	str.w	ip, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bc48:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bc4c:	f8c3 e010 	str.w	lr, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bc50:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bc54:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bc56:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bc5a:	611e      	str	r6, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bc5c:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  40bc60:	e008      	b.n	40bc74 <sleepPins+0xd58>
  40bc62:	bf00      	nop
  40bc64:	0040a4cd 	.word	0x0040a4cd
  40bc68:	400e0e00 	.word	0x400e0e00
  40bc6c:	400e1000 	.word	0x400e1000
  40bc70:	0040826d 	.word	0x0040826d
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bc74:	2120      	movs	r1, #32
  40bc76:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bc78:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bc7c:	635a      	str	r2, [r3, #52]	; 0x34
  40bc7e:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
  40bc82:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
  40bc86:	635f      	str	r7, [r3, #52]	; 0x34
  40bc88:	635e      	str	r6, [r3, #52]	; 0x34
  40bc8a:	6359      	str	r1, [r3, #52]	; 0x34
  40bc8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040bc90 <floatCamForSDCard>:
}
/***********************************************************************
 *    FLOAT ISI PINS
 ***********************************************************************/
//NOT YET SURE WHAT CAM PINS MIGHT SOMETIMES MESS UP SD CARD !!!!!!!!!!!!!!!
void floatCamForSDCard(void){
  40bc90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	resetPinsISI();
  40bc94:	4b89      	ldr	r3, [pc, #548]	; (40bebc <floatCamForSDCard+0x22c>)
  40bc96:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bc98:	4b89      	ldr	r3, [pc, #548]	; (40bec0 <floatCamForSDCard+0x230>)
  40bc9a:	f44f 0a80 	mov.w	sl, #4194304	; 0x400000
  40bc9e:	f8c3 a014 	str.w	sl, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bca2:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bca6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40bcaa:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bcac:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bcb0:	4c84      	ldr	r4, [pc, #528]	; (40bec4 <floatCamForSDCard+0x234>)
  40bcb2:	f04f 0908 	mov.w	r9, #8
  40bcb6:	f8c4 9014 	str.w	r9, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bcba:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bcbe:	4a82      	ldr	r2, [pc, #520]	; (40bec8 <floatCamForSDCard+0x238>)
  40bcc0:	f44f 7800 	mov.w	r8, #512	; 0x200
  40bcc4:	f8c2 8014 	str.w	r8, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bcc8:	f8c2 80a0 	str.w	r8, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bccc:	f04f 0c20 	mov.w	ip, #32
  40bcd0:	f8c2 c014 	str.w	ip, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bcd4:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bcd8:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  40bcdc:	f8c3 e014 	str.w	lr, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bce0:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bce4:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  40bce8:	615f      	str	r7, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bcea:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bcee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  40bcf2:	6156      	str	r6, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bcf4:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bcf8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  40bcfc:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bcfe:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bd02:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  40bd06:	615d      	str	r5, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bd08:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bd0c:	6150      	str	r0, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bd0e:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bd12:	6151      	str	r1, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bd14:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  40bd18:	f8c3 a064 	str.w	sl, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bd1c:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bd20:	f8c3 a054 	str.w	sl, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bd24:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bd28:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bd2c:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  40bd30:	f42a 0a80 	bic.w	sl, sl, #4194304	; 0x400000
  40bd34:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bd38:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40bd3c:	f42a 0a80 	bic.w	sl, sl, #4194304	; 0x400000
  40bd40:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40bd44:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bd46:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bd4a:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bd4c:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bd4e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bd52:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  40bd56:	f42a 1a00 	bic.w	sl, sl, #2097152	; 0x200000
  40bd5a:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bd5e:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40bd62:	f42a 1a00 	bic.w	sl, sl, #2097152	; 0x200000
  40bd66:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40bd6a:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bd6e:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bd72:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bd76:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bd7a:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bd7e:	f8d4 9070 	ldr.w	r9, [r4, #112]	; 0x70
  40bd82:	f029 0908 	bic.w	r9, r9, #8
  40bd86:	f8c4 9070 	str.w	r9, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bd8a:	f8d4 9074 	ldr.w	r9, [r4, #116]	; 0x74
  40bd8e:	f029 0908 	bic.w	r9, r9, #8
  40bd92:	f8c4 9074 	str.w	r9, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40bd96:	f8c2 8064 	str.w	r8, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bd9a:	f8c2 8090 	str.w	r8, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bd9e:	f8c2 8054 	str.w	r8, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bda2:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bda6:	f8c2 8080 	str.w	r8, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bdaa:	6f14      	ldr	r4, [r2, #112]	; 0x70
  40bdac:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  40bdb0:	6714      	str	r4, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bdb2:	6f54      	ldr	r4, [r2, #116]	; 0x74
  40bdb4:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  40bdb8:	6754      	str	r4, [r2, #116]	; 0x74
		base->PIO_PUER = mask;
  40bdba:	f8c2 c064 	str.w	ip, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bdbe:	f8c2 c090 	str.w	ip, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bdc2:	f8c2 c054 	str.w	ip, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bdc6:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bdca:	f8c2 c080 	str.w	ip, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bdce:	6f14      	ldr	r4, [r2, #112]	; 0x70
  40bdd0:	f024 0420 	bic.w	r4, r4, #32
  40bdd4:	6714      	str	r4, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bdd6:	6f54      	ldr	r4, [r2, #116]	; 0x74
  40bdd8:	f024 0420 	bic.w	r4, r4, #32
  40bddc:	6754      	str	r4, [r2, #116]	; 0x74
		base->PIO_PUER = mask;
  40bdde:	f8c3 e064 	str.w	lr, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bde2:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bde6:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bdea:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bdee:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bdf2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40bdf4:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  40bdf8:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bdfa:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40bdfc:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  40be00:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40be02:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40be04:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40be08:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40be0a:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40be0c:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40be10:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40be12:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  40be16:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40be18:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40be1a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  40be1e:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40be20:	6656      	str	r6, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40be22:	f8c2 6090 	str.w	r6, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40be26:	6556      	str	r6, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40be28:	6256      	str	r6, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40be2a:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40be2e:	6f14      	ldr	r4, [r2, #112]	; 0x70
  40be30:	f024 6400 	bic.w	r4, r4, #134217728	; 0x8000000
  40be34:	6714      	str	r4, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40be36:	6f54      	ldr	r4, [r2, #116]	; 0x74
  40be38:	f024 6400 	bic.w	r4, r4, #134217728	; 0x8000000
  40be3c:	6754      	str	r4, [r2, #116]	; 0x74
		base->PIO_PUER = mask;
  40be3e:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40be40:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40be44:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40be46:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40be48:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40be4c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40be4e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
  40be52:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40be54:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40be56:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
  40be5a:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40be5c:	665d      	str	r5, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40be5e:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40be62:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40be64:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40be66:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40be6a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40be6c:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
  40be70:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40be72:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40be74:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
  40be78:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40be7a:	6650      	str	r0, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40be7c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40be80:	6550      	str	r0, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40be82:	6250      	str	r0, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40be84:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40be88:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40be8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40be8e:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40be90:	6f53      	ldr	r3, [r2, #116]	; 0x74
  40be92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40be96:	6753      	str	r3, [r2, #116]	; 0x74
		base->PIO_PUER = mask;
  40be98:	6651      	str	r1, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40be9a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40be9e:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bea0:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bea2:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bea6:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40bea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40beac:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40beae:	6f53      	ldr	r3, [r2, #116]	; 0x74
  40beb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40beb4:	6753      	str	r3, [r2, #116]	; 0x74
  40beb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40beba:	bf00      	nop
  40bebc:	0040a4cd 	.word	0x0040a4cd
  40bec0:	400e1400 	.word	0x400e1400
  40bec4:	400e1000 	.word	0x400e1000
  40bec8:	400e0e00 	.word	0x400e0e00

0040becc <logMotionRecord32byte>:
char logMotionRecord32byte(char* rcvd, char ifFake, unsigned int fakeDate[8]){
  40becc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bed0:	b08f      	sub	sp, #60	; 0x3c
  40bed2:	4604      	mov	r4, r0
  40bed4:	460e      	mov	r6, r1
  40bed6:	4617      	mov	r7, r2
unsigned int params[]={0,0,0,0,0,0,0,0};
  40bed8:	2220      	movs	r2, #32
  40beda:	2100      	movs	r1, #0
  40bedc:	a806      	add	r0, sp, #24
  40bede:	4b92      	ldr	r3, [pc, #584]	; (40c128 <logMotionRecord32byte+0x25c>)
  40bee0:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40bee2:	4a92      	ldr	r2, [pc, #584]	; (40c12c <logMotionRecord32byte+0x260>)
  40bee4:	4b92      	ldr	r3, [pc, #584]	; (40c130 <logMotionRecord32byte+0x264>)
  40bee6:	601a      	str	r2, [r3, #0]
if(ifFake){
  40bee8:	2e00      	cmp	r6, #0
  40beea:	f000 80b6 	beq.w	40c05a <logMotionRecord32byte+0x18e>
	nnYear=fakeDate[0]>>28;
  40beee:	f8d7 8000 	ldr.w	r8, [r7]
	archMon=hexToBCD((fakeDate[0]>>24)&0x0000000F);
  40bef2:	f3c8 6003 	ubfx	r0, r8, #24, #4
  40bef6:	4e8f      	ldr	r6, [pc, #572]	; (40c134 <logMotionRecord32byte+0x268>)
  40bef8:	47b0      	blx	r6
  40befa:	9002      	str	r0, [sp, #8]
	archDay=hexToBCD((fakeDate[0]>>19)&0x0000001F);
  40befc:	f3c8 40c4 	ubfx	r0, r8, #19, #5
  40bf00:	47b0      	blx	r6
  40bf02:	4607      	mov	r7, r0
	archHour=hexToBCD((fakeDate[0]>>14)&0x0000001F);
  40bf04:	f3c8 3084 	ubfx	r0, r8, #14, #5
  40bf08:	47b0      	blx	r6
  40bf0a:	4681      	mov	r9, r0
	archMin=hexToBCD((fakeDate[0]>>8)&0x0000003F);
  40bf0c:	f3c8 2005 	ubfx	r0, r8, #8, #6
  40bf10:	47b0      	blx	r6
  40bf12:	4680      	mov	r8, r0
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40bf14:	4a85      	ldr	r2, [pc, #532]	; (40c12c <logMotionRecord32byte+0x260>)
  40bf16:	4b86      	ldr	r3, [pc, #536]	; (40c130 <logMotionRecord32byte+0x264>)
  40bf18:	601a      	str	r2, [r3, #0]
	addrToUse = ARCHIVEADDR + ((bcdToHex(archDay)-1)*46080) + ((bcdToHex(archHour))*1920) + ((bcdToHex(archMin))*32);
  40bf1a:	b2f8      	uxtb	r0, r7
  40bf1c:	f8df a26c 	ldr.w	sl, [pc, #620]	; 40c18c <logMotionRecord32byte+0x2c0>
  40bf20:	47d0      	blx	sl
  40bf22:	4606      	mov	r6, r0
  40bf24:	fa5f f089 	uxtb.w	r0, r9
  40bf28:	47d0      	blx	sl
  40bf2a:	1e73      	subs	r3, r6, #1
  40bf2c:	f44f 4634 	mov.w	r6, #46080	; 0xb400
  40bf30:	fb06 f603 	mul.w	r6, r6, r3
  40bf34:	f506 0690 	add.w	r6, r6, #4718592	; 0x480000
  40bf38:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  40bf3c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
  40bf40:	fa5f f088 	uxtb.w	r0, r8
  40bf44:	47d0      	blx	sl
  40bf46:	ea4f 1b40 	mov.w	fp, r0, lsl #5
  40bf4a:	eb0b 0a06 	add.w	sl, fp, r6
	params[0]=(rcvd[0]&0x06) + RECORD_FORMAT_VERSION + temperatureHB + humidityHB + (archDay<<8) + (archHour<<16) + (archMin<<24);
  40bf4e:	7823      	ldrb	r3, [r4, #0]
  40bf50:	f003 0306 	and.w	r3, r3, #6
  40bf54:	3301      	adds	r3, #1
	temperatureHB=(gotAltitudeTemperature&0x07000000)>>19;
  40bf56:	0cea      	lsrs	r2, r5, #19
  40bf58:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
	params[0]=(rcvd[0]&0x06) + RECORD_FORMAT_VERSION + temperatureHB + humidityHB + (archDay<<8) + (archHour<<16) + (archMin<<24);
  40bf5c:	4413      	add	r3, r2
	humidityHB=(gotHumidity&0x0300)>>5;
  40bf5e:	9903      	ldr	r1, [sp, #12]
  40bf60:	094a      	lsrs	r2, r1, #5
  40bf62:	f002 0218 	and.w	r2, r2, #24
	params[0]=(rcvd[0]&0x06) + RECORD_FORMAT_VERSION + temperatureHB + humidityHB + (archDay<<8) + (archHour<<16) + (archMin<<24);
  40bf66:	4413      	add	r3, r2
  40bf68:	ea4f 4209 	mov.w	r2, r9, lsl #16
  40bf6c:	eb02 2207 	add.w	r2, r2, r7, lsl #8
  40bf70:	eb02 6208 	add.w	r2, r2, r8, lsl #24
  40bf74:	4413      	add	r3, r2
  40bf76:	9306      	str	r3, [sp, #24]
	params[1]=rcvd[9] + (rcvd[1]<<8) + (rcvd[2]<<16) + (rcvd[3]<<24);
  40bf78:	7862      	ldrb	r2, [r4, #1]
  40bf7a:	7a63      	ldrb	r3, [r4, #9]
  40bf7c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40bf80:	78a2      	ldrb	r2, [r4, #2]
  40bf82:	eb03 4302 	add.w	r3, r3, r2, lsl #16
  40bf86:	78e2      	ldrb	r2, [r4, #3]
  40bf88:	eb03 6302 	add.w	r3, r3, r2, lsl #24
  40bf8c:	9307      	str	r3, [sp, #28]
	params[2]=rcvd[4]	+ (rcvd[5]<<8) + (rcvd[6]<<16) + (rcvd[7]<<24);
  40bf8e:	7962      	ldrb	r2, [r4, #5]
  40bf90:	7923      	ldrb	r3, [r4, #4]
  40bf92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40bf96:	79a2      	ldrb	r2, [r4, #6]
  40bf98:	eb03 4302 	add.w	r3, r3, r2, lsl #16
  40bf9c:	79e2      	ldrb	r2, [r4, #7]
  40bf9e:	eb03 6302 	add.w	r3, r3, r2, lsl #24
  40bfa2:	9308      	str	r3, [sp, #32]
	temperatureLB=(gotAltitudeTemperature&0x00FF0000)>>8;
  40bfa4:	0a2b      	lsrs	r3, r5, #8
  40bfa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
	params[3]=rcvd[8] +	temperatureLB + humidityLB + maskedAltitudeHB;
  40bfaa:	7a22      	ldrb	r2, [r4, #8]
  40bfac:	4413      	add	r3, r2
	humidityLB=(gotHumidity&0x00FF)<<16;
  40bfae:	040a      	lsls	r2, r1, #16
  40bfb0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
	params[3]=rcvd[8] +	temperatureLB + humidityLB + maskedAltitudeHB;
  40bfb4:	4413      	add	r3, r2
	maskedAltitudeHB=(gotAltitudeTemperature&0x00001F00)<<16;
  40bfb6:	042a      	lsls	r2, r5, #16
  40bfb8:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
	params[3]=rcvd[8] +	temperatureLB + humidityLB + maskedAltitudeHB;
  40bfbc:	4413      	add	r3, r2
  40bfbe:	9309      	str	r3, [sp, #36]	; 0x24
	params[4]=(maskedAltitudeLB + (rcvd[23]<<8) + (rcvd[10]<<16) + (rcvd[11]<<24));
  40bfc0:	7de3      	ldrb	r3, [r4, #23]
	maskedAltitudeLB=(gotAltitudeTemperature&0x0000000FF);
  40bfc2:	b2ed      	uxtb	r5, r5
	params[4]=(maskedAltitudeLB + (rcvd[23]<<8) + (rcvd[10]<<16) + (rcvd[11]<<24));
  40bfc4:	eb05 2503 	add.w	r5, r5, r3, lsl #8
  40bfc8:	7aa3      	ldrb	r3, [r4, #10]
  40bfca:	eb05 4503 	add.w	r5, r5, r3, lsl #16
  40bfce:	7ae3      	ldrb	r3, [r4, #11]
  40bfd0:	eb05 6503 	add.w	r5, r5, r3, lsl #24
  40bfd4:	950a      	str	r5, [sp, #40]	; 0x28
	params[5]=rcvd[12]	+ (rcvd[13]<<8) + (rcvd[14]<<16) + (rcvd[15]<<24);
  40bfd6:	7b62      	ldrb	r2, [r4, #13]
  40bfd8:	7b23      	ldrb	r3, [r4, #12]
  40bfda:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40bfde:	7ba2      	ldrb	r2, [r4, #14]
  40bfe0:	eb03 4302 	add.w	r3, r3, r2, lsl #16
  40bfe4:	7be2      	ldrb	r2, [r4, #15]
  40bfe6:	eb03 6302 	add.w	r3, r3, r2, lsl #24
  40bfea:	930b      	str	r3, [sp, #44]	; 0x2c
	params[6]=rcvd[16]	+ (rcvd[17]<<8) + (rcvd[18]<<16) + (rcvd[19]<<24);
  40bfec:	7c62      	ldrb	r2, [r4, #17]
  40bfee:	7c23      	ldrb	r3, [r4, #16]
  40bff0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40bff4:	7ca2      	ldrb	r2, [r4, #18]
  40bff6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
  40bffa:	7ce2      	ldrb	r2, [r4, #19]
  40bffc:	eb03 6302 	add.w	r3, r3, r2, lsl #24
  40c000:	930c      	str	r3, [sp, #48]	; 0x30
	params[7]=rcvd[20]	+ (rcvd[21]<<8) + (rcvd[22]<<16) + (rcvd[24]<<24);
  40c002:	7d62      	ldrb	r2, [r4, #21]
  40c004:	7d23      	ldrb	r3, [r4, #20]
  40c006:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40c00a:	7da2      	ldrb	r2, [r4, #22]
  40c00c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
  40c010:	7e22      	ldrb	r2, [r4, #24]
  40c012:	eb03 6302 	add.w	r3, r3, r2, lsl #24
  40c016:	930d      	str	r3, [sp, #52]	; 0x34
 	printf("%X %X %X %X %X\r\n",addrToUse,*((int*)addrToUse),archMon,archDay,archHour);
  40c018:	f85b 2006 	ldr.w	r2, [fp, r6]
  40c01c:	f8cd 9004 	str.w	r9, [sp, #4]
  40c020:	9700      	str	r7, [sp, #0]
  40c022:	9b02      	ldr	r3, [sp, #8]
  40c024:	4651      	mov	r1, sl
  40c026:	4844      	ldr	r0, [pc, #272]	; (40c138 <logMotionRecord32byte+0x26c>)
  40c028:	4c44      	ldr	r4, [pc, #272]	; (40c13c <logMotionRecord32byte+0x270>)
  40c02a:	47a0      	blx	r4
	if((*((int*)testForBlank))==0xFFFFFFFF){
  40c02c:	f85b 3006 	ldr.w	r3, [fp, r6]
  40c030:	f1b3 3fff 	cmp.w	r3, #4294967295
  40c034:	d05e      	beq.n	40c0f4 <logMotionRecord32byte+0x228>
	if((addrToUse&0xFFFE0000)==addrToUse){//if beginning of a new sector
  40c036:	4b42      	ldr	r3, [pc, #264]	; (40c140 <logMotionRecord32byte+0x274>)
  40c038:	ea0a 0303 	and.w	r3, sl, r3
  40c03c:	459a      	cmp	sl, r3
  40c03e:	d05f      	beq.n	40c100 <logMotionRecord32byte+0x234>
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c040:	4a3a      	ldr	r2, [pc, #232]	; (40c12c <logMotionRecord32byte+0x260>)
  40c042:	4b3b      	ldr	r3, [pc, #236]	; (40c130 <logMotionRecord32byte+0x264>)
  40c044:	601a      	str	r2, [r3, #0]
 	printf("PGM FINISHED\r\n");
  40c046:	483f      	ldr	r0, [pc, #252]	; (40c144 <logMotionRecord32byte+0x278>)
  40c048:	4b3c      	ldr	r3, [pc, #240]	; (40c13c <logMotionRecord32byte+0x270>)
  40c04a:	4798      	blx	r3
	if(archMin==0x59){
  40c04c:	f1b8 0f59 	cmp.w	r8, #89	; 0x59
  40c050:	d062      	beq.n	40c118 <logMotionRecord32byte+0x24c>
}
  40c052:	2000      	movs	r0, #0
  40c054:	b00f      	add	sp, #60	; 0x3c
  40c056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	twi_init_RTC();
  40c05a:	4b3b      	ldr	r3, [pc, #236]	; (40c148 <logMotionRecord32byte+0x27c>)
  40c05c:	4798      	blx	r3
	delay_ms(100);//
  40c05e:	483b      	ldr	r0, [pc, #236]	; (40c14c <logMotionRecord32byte+0x280>)
  40c060:	4d3b      	ldr	r5, [pc, #236]	; (40c150 <logMotionRecord32byte+0x284>)
  40c062:	47a8      	blx	r5
	rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40c064:	2701      	movs	r7, #1
  40c066:	f88d 7010 	strb.w	r7, [sp, #16]
	rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  40c06a:	2330      	movs	r3, #48	; 0x30
  40c06c:	f88d 3011 	strb.w	r3, [sp, #17]
	write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c070:	2102      	movs	r1, #2
  40c072:	a804      	add	r0, sp, #16
  40c074:	4e37      	ldr	r6, [pc, #220]	; (40c154 <logMotionRecord32byte+0x288>)
  40c076:	47b0      	blx	r6
	rtcData[0]=0x03;//
  40c078:	2303      	movs	r3, #3
  40c07a:	f88d 3010 	strb.w	r3, [sp, #16]
	write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c07e:	4639      	mov	r1, r7
  40c080:	a804      	add	r0, sp, #16
  40c082:	47b0      	blx	r6
	delay_ms(1);//
  40c084:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c088:	47a8      	blx	r5
	read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  40c08a:	2107      	movs	r1, #7
  40c08c:	a804      	add	r0, sp, #16
  40c08e:	4b32      	ldr	r3, [pc, #200]	; (40c158 <logMotionRecord32byte+0x28c>)
  40c090:	4798      	blx	r3
	archHour=rtcData[2];//new RTC
  40c092:	f89d 9012 	ldrb.w	r9, [sp, #18]
	archMin=rtcData[1];//new RTC
  40c096:	f89d 8011 	ldrb.w	r8, [sp, #17]
	nnYear=rtcData[6];//new RTC
  40c09a:	f89d 6016 	ldrb.w	r6, [sp, #22]
	archMon=rtcData[5];//new RTC
  40c09e:	f89d 3015 	ldrb.w	r3, [sp, #21]
  40c0a2:	9302      	str	r3, [sp, #8]
	archDay=rtcData[3];//new RTC
  40c0a4:	f89d 7013 	ldrb.w	r7, [sp, #19]
	dayMin = (hourNow*60) + minsNow;
  40c0a8:	4b2c      	ldr	r3, [pc, #176]	; (40c15c <logMotionRecord32byte+0x290>)
  40c0aa:	681b      	ldr	r3, [r3, #0]
  40c0ac:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40c0b0:	4a2b      	ldr	r2, [pc, #172]	; (40c160 <logMotionRecord32byte+0x294>)
  40c0b2:	6812      	ldr	r2, [r2, #0]
  40c0b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40c0b8:	4a2a      	ldr	r2, [pc, #168]	; (40c164 <logMotionRecord32byte+0x298>)
  40c0ba:	6013      	str	r3, [r2, #0]
	gotAltitudeTemperature=getAltimeterTemperatureTE(0xEE);
  40c0bc:	20ee      	movs	r0, #238	; 0xee
  40c0be:	4b2a      	ldr	r3, [pc, #168]	; (40c168 <logMotionRecord32byte+0x29c>)
  40c0c0:	4798      	blx	r3
  40c0c2:	4605      	mov	r5, r0
	gotHumidity=getHumidity(0x80);
  40c0c4:	2080      	movs	r0, #128	; 0x80
  40c0c6:	4b29      	ldr	r3, [pc, #164]	; (40c16c <logMotionRecord32byte+0x2a0>)
  40c0c8:	4798      	blx	r3
  40c0ca:	4682      	mov	sl, r0
  40c0cc:	9003      	str	r0, [sp, #12]
	gotLight=getALSfromVEML(0x20);
  40c0ce:	2020      	movs	r0, #32
  40c0d0:	4b27      	ldr	r3, [pc, #156]	; (40c170 <logMotionRecord32byte+0x2a4>)
  40c0d2:	4798      	blx	r3
	printf("LOG MOTION  %X-%X-20%X  %X:%X\r\n",archMon,archDay,nnYear,archHour,archMin);
  40c0d4:	f8cd 8004 	str.w	r8, [sp, #4]
  40c0d8:	f8cd 9000 	str.w	r9, [sp]
  40c0dc:	4633      	mov	r3, r6
  40c0de:	463a      	mov	r2, r7
  40c0e0:	9902      	ldr	r1, [sp, #8]
  40c0e2:	4824      	ldr	r0, [pc, #144]	; (40c174 <logMotionRecord32byte+0x2a8>)
  40c0e4:	4e15      	ldr	r6, [pc, #84]	; (40c13c <logMotionRecord32byte+0x270>)
  40c0e6:	47b0      	blx	r6
	printf("TEMP %X BAROM %X HUMIDITY %X\r\n",(gotAltitudeTemperature>>16),(gotAltitudeTemperature&0x0000FFFF),gotHumidity);
  40c0e8:	4653      	mov	r3, sl
  40c0ea:	b2aa      	uxth	r2, r5
  40c0ec:	0c29      	lsrs	r1, r5, #16
  40c0ee:	4822      	ldr	r0, [pc, #136]	; (40c178 <logMotionRecord32byte+0x2ac>)
  40c0f0:	47b0      	blx	r6
  40c0f2:	e70f      	b.n	40bf14 <logMotionRecord32byte+0x48>
	writeRecToFlash(addrToUse, params, ARCHRECORDLEN);
  40c0f4:	2220      	movs	r2, #32
  40c0f6:	a906      	add	r1, sp, #24
  40c0f8:	4650      	mov	r0, sl
  40c0fa:	4b20      	ldr	r3, [pc, #128]	; (40c17c <logMotionRecord32byte+0x2b0>)
  40c0fc:	4798      	blx	r3
  40c0fe:	e79f      	b.n	40c040 <logMotionRecord32byte+0x174>
	eraseSector(addrToUse);
  40c100:	4650      	mov	r0, sl
  40c102:	4b1f      	ldr	r3, [pc, #124]	; (40c180 <logMotionRecord32byte+0x2b4>)
  40c104:	4798      	blx	r3
	writeRecToFlash(addrToUse, params, ARCHRECORDLEN);
  40c106:	2220      	movs	r2, #32
  40c108:	a906      	add	r1, sp, #24
  40c10a:	4650      	mov	r0, sl
  40c10c:	4b1b      	ldr	r3, [pc, #108]	; (40c17c <logMotionRecord32byte+0x2b0>)
  40c10e:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c110:	4a06      	ldr	r2, [pc, #24]	; (40c12c <logMotionRecord32byte+0x260>)
  40c112:	4b07      	ldr	r3, [pc, #28]	; (40c130 <logMotionRecord32byte+0x264>)
  40c114:	601a      	str	r2, [r3, #0]
  40c116:	e793      	b.n	40c040 <logMotionRecord32byte+0x174>
		floatCamForSDCard();//Needs this after sleep pins.
  40c118:	4b1a      	ldr	r3, [pc, #104]	; (40c184 <logMotionRecord32byte+0x2b8>)
  40c11a:	4798      	blx	r3
		oneDayToSD(archDay,0);
  40c11c:	2100      	movs	r1, #0
  40c11e:	4638      	mov	r0, r7
  40c120:	4b19      	ldr	r3, [pc, #100]	; (40c188 <logMotionRecord32byte+0x2bc>)
  40c122:	4798      	blx	r3
  40c124:	e795      	b.n	40c052 <logMotionRecord32byte+0x186>
  40c126:	bf00      	nop
  40c128:	0040cfb5 	.word	0x0040cfb5
  40c12c:	a5000001 	.word	0xa5000001
  40c130:	400e1850 	.word	0x400e1850
  40c134:	00406b19 	.word	0x00406b19
  40c138:	00410658 	.word	0x00410658
  40c13c:	0040ce59 	.word	0x0040ce59
  40c140:	fffe0000 	.word	0xfffe0000
  40c144:	0041066c 	.word	0x0041066c
  40c148:	00401a79 	.word	0x00401a79
  40c14c:	004d2b25 	.word	0x004d2b25
  40c150:	2040008d 	.word	0x2040008d
  40c154:	00401ba5 	.word	0x00401ba5
  40c158:	00401ccd 	.word	0x00401ccd
  40c15c:	204011bc 	.word	0x204011bc
  40c160:	20401190 	.word	0x20401190
  40c164:	20400ec8 	.word	0x20400ec8
  40c168:	00407c19 	.word	0x00407c19
  40c16c:	00407a21 	.word	0x00407a21
  40c170:	00407ae5 	.word	0x00407ae5
  40c174:	00410618 	.word	0x00410618
  40c178:	00410638 	.word	0x00410638
  40c17c:	004073e1 	.word	0x004073e1
  40c180:	004073b5 	.word	0x004073b5
  40c184:	0040bc91 	.word	0x0040bc91
  40c188:	00408c31 	.word	0x00408c31
  40c18c:	00406b07 	.word	0x00406b07

0040c190 <wdt_init>:
/***********************************************************************
 *    WATCHDOG INIT
 ***********************************************************************/
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
uint16_t us_delta)
{
  40c190:	b410      	push	{r4}
	p_wdt->WDT_MR = ul_mode |
	WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
  40c192:	4c05      	ldr	r4, [pc, #20]	; (40c1a8 <wdt_init+0x18>)
  40c194:	ea04 4303 	and.w	r3, r4, r3, lsl #16
  40c198:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40c19c:	4313      	orrs	r3, r2
  40c19e:	430b      	orrs	r3, r1
	p_wdt->WDT_MR = ul_mode |
  40c1a0:	6043      	str	r3, [r0, #4]
}
  40c1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  40c1a6:	4770      	bx	lr
  40c1a8:	0fff0000 	.word	0x0fff0000

0040c1ac <main>:
{
  40c1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c1b0:	b0a5      	sub	sp, #148	; 0x94
	unsigned int bootSource = (RSTC->RSTC_SR & RSTC_SR_RSTTYP_Msk);;
  40c1b2:	4b4a      	ldr	r3, [pc, #296]	; (40c2dc <main+0x130>)
  40c1b4:	685c      	ldr	r4, [r3, #4]
  40c1b6:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
	cpu_irq_enable();//
  40c1ba:	f04f 0801 	mov.w	r8, #1
  40c1be:	4b48      	ldr	r3, [pc, #288]	; (40c2e0 <main+0x134>)
  40c1c0:	f883 8000 	strb.w	r8, [r3]
  __ASM volatile ("dmb");
  40c1c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40c1c8:	b662      	cpsie	i
	sysclk_init();
  40c1ca:	4f46      	ldr	r7, [pc, #280]	; (40c2e4 <main+0x138>)
  40c1cc:	47b8      	blx	r7
	board_init();
  40c1ce:	4e46      	ldr	r6, [pc, #280]	; (40c2e8 <main+0x13c>)
  40c1d0:	47b0      	blx	r6
		sleepmgr_locks[i] = 0;
  40c1d2:	4b46      	ldr	r3, [pc, #280]	; (40c2ec <main+0x140>)
  40c1d4:	2500      	movs	r5, #0
  40c1d6:	701d      	strb	r5, [r3, #0]
  40c1d8:	705d      	strb	r5, [r3, #1]
  40c1da:	709d      	strb	r5, [r3, #2]
  40c1dc:	70dd      	strb	r5, [r3, #3]
  40c1de:	711d      	strb	r5, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  40c1e0:	f883 8005 	strb.w	r8, [r3, #5]
	sysclk_init();
  40c1e4:	47b8      	blx	r7
	board_init();
  40c1e6:	47b0      	blx	r6
	wdt_init(WDT, wdt_mode, timeout_value, timeout_value);
  40c1e8:	4f41      	ldr	r7, [pc, #260]	; (40c2f0 <main+0x144>)
  40c1ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40c1ee:	461a      	mov	r2, r3
  40c1f0:	4940      	ldr	r1, [pc, #256]	; (40c2f4 <main+0x148>)
  40c1f2:	4638      	mov	r0, r7
  40c1f4:	4e40      	ldr	r6, [pc, #256]	; (40c2f8 <main+0x14c>)
  40c1f6:	47b0      	blx	r6
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40c1f8:	4b40      	ldr	r3, [pc, #256]	; (40c2fc <main+0x150>)
  40c1fa:	2610      	movs	r6, #16
  40c1fc:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40c200:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40c204:	f883 5304 	strb.w	r5, [r3, #772]	; 0x304
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40c208:	601e      	str	r6, [r3, #0]
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c20a:	4b3d      	ldr	r3, [pc, #244]	; (40c300 <main+0x154>)
  40c20c:	603b      	str	r3, [r7, #0]
  40c20e:	200a      	movs	r0, #10
  40c210:	4d3c      	ldr	r5, [pc, #240]	; (40c304 <main+0x158>)
  40c212:	47a8      	blx	r5
  40c214:	200b      	movs	r0, #11
  40c216:	47a8      	blx	r5
  40c218:	200c      	movs	r0, #12
  40c21a:	47a8      	blx	r5
  40c21c:	4630      	mov	r0, r6
  40c21e:	47a8      	blx	r5
	configure_console();  //pmc_enable_pllack messes up the console speed
  40c220:	4d39      	ldr	r5, [pc, #228]	; (40c308 <main+0x15c>)
  40c222:	47a8      	blx	r5
	configure_console();  //pmc_enable_pllack messes up the console speed
  40c224:	47a8      	blx	r5
	printf("\r\nBOOT %X ",bootSource);
  40c226:	4621      	mov	r1, r4
  40c228:	4838      	ldr	r0, [pc, #224]	; (40c30c <main+0x160>)
  40c22a:	4b39      	ldr	r3, [pc, #228]	; (40c310 <main+0x164>)
  40c22c:	4798      	blx	r3
	switch(bootSource){
  40c22e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  40c232:	f000 8223 	beq.w	40c67c <main+0x4d0>
  40c236:	d87f      	bhi.n	40c338 <main+0x18c>
  40c238:	2c00      	cmp	r4, #0
  40c23a:	f000 8085 	beq.w	40c348 <main+0x19c>
	char takePicFlag=0;
  40c23e:	2400      	movs	r4, #0
	printf("ALL\r\n");
  40c240:	4834      	ldr	r0, [pc, #208]	; (40c314 <main+0x168>)
  40c242:	4b33      	ldr	r3, [pc, #204]	; (40c310 <main+0x164>)
  40c244:	4798      	blx	r3
	delay_ms(100);
  40c246:	4834      	ldr	r0, [pc, #208]	; (40c318 <main+0x16c>)
  40c248:	4b34      	ldr	r3, [pc, #208]	; (40c31c <main+0x170>)
  40c24a:	4798      	blx	r3
	if(takePicFlag==1){
  40c24c:	2c01      	cmp	r4, #1
  40c24e:	f000 842e 	beq.w	40caae <main+0x902>
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c252:	4a2b      	ldr	r2, [pc, #172]	; (40c300 <main+0x154>)
  40c254:	4b26      	ldr	r3, [pc, #152]	; (40c2f0 <main+0x144>)
  40c256:	601a      	str	r2, [r3, #0]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40c258:	4b28      	ldr	r3, [pc, #160]	; (40c2fc <main+0x150>)
  40c25a:	2204      	movs	r2, #4
  40c25c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40c260:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	supc_set_wakeup_inputs(SUPC,SUPC_WUIR_WKUPEN1_ENABLE|SUPC_WUIR_WKUPEN2_ENABLE,SUPC_WUIR_WKUPT1_LOW|SUPC_WUIR_WKUPT2_LOW);//A1=1 from TINY.
  40c264:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 40c330 <main+0x184>
  40c268:	2200      	movs	r2, #0
  40c26a:	2106      	movs	r1, #6
  40c26c:	4650      	mov	r0, sl
  40c26e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 40c334 <main+0x188>
  40c272:	47c8      	blx	r9
		sleepmgr_locks[i] = 0;
  40c274:	4d1d      	ldr	r5, [pc, #116]	; (40c2ec <main+0x140>)
  40c276:	2400      	movs	r4, #0
  40c278:	702c      	strb	r4, [r5, #0]
  40c27a:	706c      	strb	r4, [r5, #1]
  40c27c:	70ac      	strb	r4, [r5, #2]
  40c27e:	70ec      	strb	r4, [r5, #3]
  40c280:	712c      	strb	r4, [r5, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  40c282:	f04f 0801 	mov.w	r8, #1
  40c286:	f885 8005 	strb.w	r8, [r5, #5]
	sleepmgr_lock_mode(SLEEPMGR_BACKUP);
  40c28a:	2005      	movs	r0, #5
  40c28c:	4f24      	ldr	r7, [pc, #144]	; (40c320 <main+0x174>)
  40c28e:	47b8      	blx	r7
	pmc_enable_periph_clk(ID_PIOA);
  40c290:	200a      	movs	r0, #10
  40c292:	4e1c      	ldr	r6, [pc, #112]	; (40c304 <main+0x158>)
  40c294:	47b0      	blx	r6
	pmc_enable_periph_clk(ID_PIOB);
  40c296:	200b      	movs	r0, #11
  40c298:	47b0      	blx	r6
	pmc_enable_periph_clk(ID_PIOD);
  40c29a:	2010      	movs	r0, #16
  40c29c:	47b0      	blx	r6
	supc_set_wakeup_inputs(SUPC,SUPC_WUIR_WKUPEN1_ENABLE|SUPC_WUIR_WKUPEN2_ENABLE,SUPC_WUIR_WKUPT1_LOW|SUPC_WUIR_WKUPT2_LOW);//A1=1 from TINY.
  40c29e:	4622      	mov	r2, r4
  40c2a0:	2106      	movs	r1, #6
  40c2a2:	4650      	mov	r0, sl
  40c2a4:	47c8      	blx	r9
		sleepmgr_locks[i] = 0;
  40c2a6:	702c      	strb	r4, [r5, #0]
  40c2a8:	706c      	strb	r4, [r5, #1]
  40c2aa:	70ac      	strb	r4, [r5, #2]
  40c2ac:	70ec      	strb	r4, [r5, #3]
  40c2ae:	712c      	strb	r4, [r5, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  40c2b0:	f885 8005 	strb.w	r8, [r5, #5]
	sleepmgr_lock_mode(SLEEPMGR_BACKUP);
  40c2b4:	2005      	movs	r0, #5
  40c2b6:	47b8      	blx	r7
	configure_console();  //pmc_enable_pllack messes up the console speed
  40c2b8:	4b13      	ldr	r3, [pc, #76]	; (40c308 <main+0x15c>)
  40c2ba:	4798      	blx	r3
	printf("SLEEP\r\n");
  40c2bc:	4819      	ldr	r0, [pc, #100]	; (40c324 <main+0x178>)
  40c2be:	4b14      	ldr	r3, [pc, #80]	; (40c310 <main+0x164>)
  40c2c0:	4798      	blx	r3
	delay_ms(100);
  40c2c2:	4815      	ldr	r0, [pc, #84]	; (40c318 <main+0x16c>)
  40c2c4:	4b15      	ldr	r3, [pc, #84]	; (40c31c <main+0x170>)
  40c2c6:	4798      	blx	r3
	sleepPins();//2019 eNest: writing once gets 100uA, twice gets 44 uA (after 3.6VReg).
  40c2c8:	4d17      	ldr	r5, [pc, #92]	; (40c328 <main+0x17c>)
  40c2ca:	47a8      	blx	r5
	sleepPins();//2019 eNest: writing once gets 100uA, twice gets 44 uA (after 3.6VReg).
  40c2cc:	47a8      	blx	r5
	sleepmgr_enter_sleep();
  40c2ce:	4b17      	ldr	r3, [pc, #92]	; (40c32c <main+0x180>)
  40c2d0:	4798      	blx	r3
}
  40c2d2:	4620      	mov	r0, r4
  40c2d4:	b025      	add	sp, #148	; 0x94
  40c2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c2da:	bf00      	nop
  40c2dc:	400e1800 	.word	0x400e1800
  40c2e0:	20400177 	.word	0x20400177
  40c2e4:	00402945 	.word	0x00402945
  40c2e8:	004011c1 	.word	0x004011c1
  40c2ec:	20401114 	.word	0x20401114
  40c2f0:	400e1850 	.word	0x400e1850
  40c2f4:	30002000 	.word	0x30002000
  40c2f8:	0040c191 	.word	0x0040c191
  40c2fc:	e000e100 	.word	0xe000e100
  40c300:	a5000001 	.word	0xa5000001
  40c304:	004035a1 	.word	0x004035a1
  40c308:	0040710d 	.word	0x0040710d
  40c30c:	0041067c 	.word	0x0041067c
  40c310:	0040ce59 	.word	0x0040ce59
  40c314:	00410844 	.word	0x00410844
  40c318:	004d2b25 	.word	0x004d2b25
  40c31c:	2040008d 	.word	0x2040008d
  40c320:	00406a61 	.word	0x00406a61
  40c324:	004106b4 	.word	0x004106b4
  40c328:	0040af1d 	.word	0x0040af1d
  40c32c:	00406f09 	.word	0x00406f09
  40c330:	400e1810 	.word	0x400e1810
  40c334:	0040274d 	.word	0x0040274d
	switch(bootSource){
  40c338:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  40c33c:	f000 819e 	beq.w	40c67c <main+0x4d0>
  40c340:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  40c344:	f47f af7b 	bne.w	40c23e <main+0x92>
		pmc_enable_periph_clk(ID_PIOC);
  40c348:	200c      	movs	r0, #12
  40c34a:	4bb0      	ldr	r3, [pc, #704]	; (40c60c <main+0x460>)
  40c34c:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c34e:	4bb0      	ldr	r3, [pc, #704]	; (40c610 <main+0x464>)
  40c350:	2204      	movs	r2, #4
  40c352:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c354:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40c358:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c35a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c35e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c360:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c366:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40c368:	f022 0204 	bic.w	r2, r2, #4
  40c36c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c36e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40c370:	f022 0204 	bic.w	r2, r2, #4
  40c374:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40c376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40c37a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40c37e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c380:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40c384:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40c388:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c38a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		delay_ms(200);//looked fine even at only 1ms (when repeated every 500ms);
  40c38e:	48a1      	ldr	r0, [pc, #644]	; (40c614 <main+0x468>)
  40c390:	4ba1      	ldr	r3, [pc, #644]	; (40c618 <main+0x46c>)
  40c392:	4798      	blx	r3
		twi_init_RTC();
  40c394:	4ba1      	ldr	r3, [pc, #644]	; (40c61c <main+0x470>)
  40c396:	4798      	blx	r3
		if(bootSource==0)printf("PWR\r\n");else printf("RST\r\n");
  40c398:	2c00      	cmp	r4, #0
  40c39a:	f040 8133 	bne.w	40c604 <main+0x458>
  40c39e:	48a0      	ldr	r0, [pc, #640]	; (40c620 <main+0x474>)
  40c3a0:	4ba0      	ldr	r3, [pc, #640]	; (40c624 <main+0x478>)
  40c3a2:	4798      	blx	r3
		delay_ms(500);//
  40c3a4:	48a0      	ldr	r0, [pc, #640]	; (40c628 <main+0x47c>)
  40c3a6:	4d9c      	ldr	r5, [pc, #624]	; (40c618 <main+0x46c>)
  40c3a8:	47a8      	blx	r5
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c3aa:	4ba0      	ldr	r3, [pc, #640]	; (40c62c <main+0x480>)
  40c3ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40c3b0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c3b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40c3b6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c3b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c3bc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c3be:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c3c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c3c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40c3c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  40c3ca:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c3cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40c3ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  40c3d2:	675a      	str	r2, [r3, #116]	; 0x74
		rtcData[0]=0x00;//write to Address 0x00  SET ALL
  40c3d4:	2400      	movs	r4, #0
  40c3d6:	f88d 4074 	strb.w	r4, [sp, #116]	; 0x74
		rtcData[1]=0x02;//contents of Addr 0x00 CTL1
  40c3da:	f04f 0902 	mov.w	r9, #2
  40c3de:	f88d 9075 	strb.w	r9, [sp, #117]	; 0x75
		rtcData[2]=0x00;//contents of Addr 0x01 CTL2
  40c3e2:	f88d 4076 	strb.w	r4, [sp, #118]	; 0x76
		rtcData[3]=0x00;//contents of Addr 0x02 CTL3
  40c3e6:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
		rtcData[4]=SET_SECOND;//contents of Addr 0x03 SECONDS works
  40c3ea:	2335      	movs	r3, #53	; 0x35
  40c3ec:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
		rtcData[5]=SET_MINUTE;//contents of Addr 0x04 MINUTES works
  40c3f0:	2606      	movs	r6, #6
  40c3f2:	f88d 6079 	strb.w	r6, [sp, #121]	; 0x79
		rtcData[6]=SET_HOUR;//contents of Addr 0x05 HOURS works
  40c3f6:	f88d 607a 	strb.w	r6, [sp, #122]	; 0x7a
		rtcData[7]=SET_DAY;//contents of Addr 0x06 DAYS
  40c3fa:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
		rtcData[8]=0x02;//contents of Addr 0x07 WEEKDAY
  40c3fe:	f88d 907c 	strb.w	r9, [sp, #124]	; 0x7c
		rtcData[9]=SET_MONTH;//contents of Addr 0x08 MONTH
  40c402:	f88d 607d 	strb.w	r6, [sp, #125]	; 0x7d
		rtcData[0x0A]=SET_YEAR;//contents of Addr 0x09 YEAR
  40c406:	2366      	movs	r3, #102	; 0x66
  40c408:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
		rtcData[0x0B]=0x80;//contents of Addr 0x0A  0x80 = second alarm disabled
  40c40c:	2380      	movs	r3, #128	; 0x80
  40c40e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
		rtcData[0x0C]=0x80;//contents of Addr 0x0B  0x80 = minute alarm disabled
  40c412:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
		rtcData[0x0D]=0x80;//contents of Addr 0x0C  0x80 = Hour alarm disabled
  40c416:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
		rtcData[0x0E]=0x80;//contents of Addr 0x0D  0x80 = day alarm disabled
  40c41a:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
		rtcData[0x0F]=0x80;//contents of Addr 0x0E  0x80 = weekday alarm disabled
  40c41e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
		rtcData[0x10]=0x00;//contents of Addr 0x0F  0x00 = temperature clockout period 4 minutes
  40c422:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
		rtcData[0x11]=0x00;//contents of Addr 0x10  20=PULSED INTERRUPT
  40c426:	f88d 4085 	strb.w	r4, [sp, #133]	; 0x85
		writeRet = write_data_RTC(rtcData,18);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c42a:	2112      	movs	r1, #18
  40c42c:	a81d      	add	r0, sp, #116	; 0x74
  40c42e:	f8df 8230 	ldr.w	r8, [pc, #560]	; 40c660 <main+0x4b4>
  40c432:	47c0      	blx	r8
		delay_ms(200);//
  40c434:	4877      	ldr	r0, [pc, #476]	; (40c614 <main+0x468>)
  40c436:	47a8      	blx	r5
		rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40c438:	f04f 0301 	mov.w	r3, #1
  40c43c:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
		rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  40c440:	f04f 0330 	mov.w	r3, #48	; 0x30
  40c444:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
		write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c448:	4649      	mov	r1, r9
  40c44a:	a81d      	add	r0, sp, #116	; 0x74
  40c44c:	47c0      	blx	r8
		delay_ms(1000);
  40c44e:	4878      	ldr	r0, [pc, #480]	; (40c630 <main+0x484>)
  40c450:	47a8      	blx	r5
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c452:	f8df a210 	ldr.w	sl, [pc, #528]	; 40c664 <main+0x4b8>
  40c456:	f8df b210 	ldr.w	fp, [pc, #528]	; 40c668 <main+0x4bc>
  40c45a:	f8ca b000 	str.w	fp, [sl]
		rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40c45e:	f04f 0301 	mov.w	r3, #1
  40c462:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
		rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  40c466:	f04f 0330 	mov.w	r3, #48	; 0x30
  40c46a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
		write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c46e:	4649      	mov	r1, r9
  40c470:	a81d      	add	r0, sp, #116	; 0x74
  40c472:	47c0      	blx	r8
		rtcData[0]=0x03;//
  40c474:	2303      	movs	r3, #3
  40c476:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
		write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c47a:	2101      	movs	r1, #1
  40c47c:	a81d      	add	r0, sp, #116	; 0x74
  40c47e:	47c0      	blx	r8
		delay_ms(1);//
  40c480:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c484:	47a8      	blx	r5
		read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  40c486:	2107      	movs	r1, #7
  40c488:	a81d      	add	r0, sp, #116	; 0x74
  40c48a:	4b6a      	ldr	r3, [pc, #424]	; (40c634 <main+0x488>)
  40c48c:	4798      	blx	r3
		delay_ms(1000);
  40c48e:	4868      	ldr	r0, [pc, #416]	; (40c630 <main+0x484>)
  40c490:	47a8      	blx	r5
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c492:	f8ca b000 	str.w	fp, [sl]
		printf("%X-%X-%X  %X:%X:%X %X \r\n",rtcData[5],rtcData[3],rtcData[6],rtcData[2],rtcData[1],rtcData[0],rtcData[7]);
  40c496:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
  40c49a:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
  40c49e:	f89d 1079 	ldrb.w	r1, [sp, #121]	; 0x79
  40c4a2:	f89d 007b 	ldrb.w	r0, [sp, #123]	; 0x7b
  40c4a6:	9003      	str	r0, [sp, #12]
  40c4a8:	f89d 0074 	ldrb.w	r0, [sp, #116]	; 0x74
  40c4ac:	9002      	str	r0, [sp, #8]
  40c4ae:	f89d 0075 	ldrb.w	r0, [sp, #117]	; 0x75
  40c4b2:	9001      	str	r0, [sp, #4]
  40c4b4:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
  40c4b8:	9000      	str	r0, [sp, #0]
  40c4ba:	485f      	ldr	r0, [pc, #380]	; (40c638 <main+0x48c>)
  40c4bc:	4f59      	ldr	r7, [pc, #356]	; (40c624 <main+0x478>)
  40c4be:	47b8      	blx	r7
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c4c0:	f8ca b000 	str.w	fp, [sl]
		redBlink(5);
  40c4c4:	2005      	movs	r0, #5
  40c4c6:	4b5d      	ldr	r3, [pc, #372]	; (40c63c <main+0x490>)
  40c4c8:	4798      	blx	r3
		delay_ms(2000);
  40c4ca:	485d      	ldr	r0, [pc, #372]	; (40c640 <main+0x494>)
  40c4cc:	47a8      	blx	r5
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40c4ce:	4b5d      	ldr	r3, [pc, #372]	; (40c644 <main+0x498>)
  40c4d0:	2204      	movs	r2, #4
  40c4d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40c4d6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		supc_set_wakeup_inputs(SUPC,SUPC_WUIR_WKUPEN1_ENABLE|SUPC_WUIR_WKUPEN2_ENABLE,SUPC_WUIR_WKUPT1_LOW|SUPC_WUIR_WKUPT2_LOW);//A1=1 from TINY.
  40c4da:	4622      	mov	r2, r4
  40c4dc:	4631      	mov	r1, r6
  40c4de:	485a      	ldr	r0, [pc, #360]	; (40c648 <main+0x49c>)
  40c4e0:	f8df b18c 	ldr.w	fp, [pc, #396]	; 40c670 <main+0x4c4>
  40c4e4:	47d8      	blx	fp
		sleepmgr_locks[i] = 0;
  40c4e6:	f8df 818c 	ldr.w	r8, [pc, #396]	; 40c674 <main+0x4c8>
  40c4ea:	f888 4000 	strb.w	r4, [r8]
  40c4ee:	f888 4001 	strb.w	r4, [r8, #1]
  40c4f2:	f888 4002 	strb.w	r4, [r8, #2]
  40c4f6:	f888 4003 	strb.w	r4, [r8, #3]
  40c4fa:	f888 4004 	strb.w	r4, [r8, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  40c4fe:	f04f 0301 	mov.w	r3, #1
  40c502:	f888 3005 	strb.w	r3, [r8, #5]
		sleepmgr_lock_mode(SLEEPMGR_BACKUP);
  40c506:	2005      	movs	r0, #5
  40c508:	f8df a16c 	ldr.w	sl, [pc, #364]	; 40c678 <main+0x4cc>
  40c50c:	47d0      	blx	sl
		pmc_enable_periph_clk(ID_PIOA);
  40c50e:	200a      	movs	r0, #10
  40c510:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 40c60c <main+0x460>
  40c514:	47c8      	blx	r9
		pmc_enable_periph_clk(ID_PIOB);
  40c516:	200b      	movs	r0, #11
  40c518:	47c8      	blx	r9
		pmc_enable_periph_clk(ID_PIOD);
  40c51a:	2010      	movs	r0, #16
  40c51c:	47c8      	blx	r9
		supc_set_wakeup_inputs(SUPC,SUPC_WUIR_WKUPEN1_ENABLE|SUPC_WUIR_WKUPEN2_ENABLE,SUPC_WUIR_WKUPT1_LOW|SUPC_WUIR_WKUPT2_LOW);//A1=1 from TINY.
  40c51e:	4622      	mov	r2, r4
  40c520:	4631      	mov	r1, r6
  40c522:	4849      	ldr	r0, [pc, #292]	; (40c648 <main+0x49c>)
  40c524:	47d8      	blx	fp
		sleepmgr_locks[i] = 0;
  40c526:	f888 4000 	strb.w	r4, [r8]
  40c52a:	f888 4001 	strb.w	r4, [r8, #1]
  40c52e:	f888 4002 	strb.w	r4, [r8, #2]
  40c532:	f888 4003 	strb.w	r4, [r8, #3]
  40c536:	f888 4004 	strb.w	r4, [r8, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  40c53a:	f04f 0301 	mov.w	r3, #1
  40c53e:	f888 3005 	strb.w	r3, [r8, #5]
		sleepmgr_lock_mode(SLEEPMGR_BACKUP);
  40c542:	2005      	movs	r0, #5
  40c544:	47d0      	blx	sl
		configure_console();  //pmc_enable_pllack messes up the console speed
  40c546:	4b41      	ldr	r3, [pc, #260]	; (40c64c <main+0x4a0>)
  40c548:	4798      	blx	r3
		printf("SLEEP\r\n");
  40c54a:	4841      	ldr	r0, [pc, #260]	; (40c650 <main+0x4a4>)
  40c54c:	47b8      	blx	r7
		delay_ms(100);
  40c54e:	4841      	ldr	r0, [pc, #260]	; (40c654 <main+0x4a8>)
  40c550:	47a8      	blx	r5
		sleepPins();//2019 eNest: writing once gets 100uA, twice gets 44 uA (after 3.6VReg).
  40c552:	4c41      	ldr	r4, [pc, #260]	; (40c658 <main+0x4ac>)
  40c554:	47a0      	blx	r4
		sleepPins();//2019 eNest: writing once gets 100uA, twice gets 44 uA (after 3.6VReg).
  40c556:	47a0      	blx	r4
		sleepmgr_enter_sleep();
  40c558:	4b40      	ldr	r3, [pc, #256]	; (40c65c <main+0x4b0>)
  40c55a:	4798      	blx	r3
  40c55c:	f10d 0373 	add.w	r3, sp, #115	; 0x73
  40c560:	f10d 0187 	add.w	r1, sp, #135	; 0x87
		for(iters=0;iters<20;iters++)rtcData[iters]=0;
  40c564:	2200      	movs	r2, #0
  40c566:	f803 2f01 	strb.w	r2, [r3, #1]!
  40c56a:	428b      	cmp	r3, r1
  40c56c:	d1fb      	bne.n	40c566 <main+0x3ba>
		rtcData[0]=0x00;//
  40c56e:	ac24      	add	r4, sp, #144	; 0x90
  40c570:	2300      	movs	r3, #0
  40c572:	f804 3d1c 	strb.w	r3, [r4, #-28]!
		writeRet = write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c576:	2101      	movs	r1, #1
  40c578:	4620      	mov	r0, r4
  40c57a:	4d39      	ldr	r5, [pc, #228]	; (40c660 <main+0x4b4>)
  40c57c:	47a8      	blx	r5
		delay_ms(1);//
  40c57e:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c582:	4e25      	ldr	r6, [pc, #148]	; (40c618 <main+0x46c>)
  40c584:	47b0      	blx	r6
		readRet = read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  40c586:	2107      	movs	r1, #7
  40c588:	4620      	mov	r0, r4
  40c58a:	4b2a      	ldr	r3, [pc, #168]	; (40c634 <main+0x488>)
  40c58c:	4798      	blx	r3
		delay_ms(1);
  40c58e:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c592:	47b0      	blx	r6
		write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c594:	2102      	movs	r1, #2
  40c596:	4620      	mov	r0, r4
  40c598:	47a8      	blx	r5
		if((rtcData[1]&0x80)==0x80){
  40c59a:	f99d 3075 	ldrsb.w	r3, [sp, #117]	; 0x75
  40c59e:	2b00      	cmp	r3, #0
  40c5a0:	da1f      	bge.n	40c5e2 <main+0x436>
		rtcData[0]=0x01;//write to Address 0x00
  40c5a2:	2301      	movs	r3, #1
  40c5a4:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
		rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  40c5a8:	2330      	movs	r3, #48	; 0x30
  40c5aa:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
		writeRet = write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c5ae:	2102      	movs	r1, #2
  40c5b0:	a81d      	add	r0, sp, #116	; 0x74
  40c5b2:	47a8      	blx	r5
		printf("%X-%X-%X  %X:%X:%X %X \r\n",rtcData[8],rtcData[6],rtcData[9],rtcData[5],rtcData[4],rtcData[3],rtcData[7]);
  40c5b4:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
  40c5b8:	f89d 207a 	ldrb.w	r2, [sp, #122]	; 0x7a
  40c5bc:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
  40c5c0:	f89d 007b 	ldrb.w	r0, [sp, #123]	; 0x7b
  40c5c4:	9003      	str	r0, [sp, #12]
  40c5c6:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
  40c5ca:	9002      	str	r0, [sp, #8]
  40c5cc:	f89d 0078 	ldrb.w	r0, [sp, #120]	; 0x78
  40c5d0:	9001      	str	r0, [sp, #4]
  40c5d2:	f89d 0079 	ldrb.w	r0, [sp, #121]	; 0x79
  40c5d6:	9000      	str	r0, [sp, #0]
  40c5d8:	4817      	ldr	r0, [pc, #92]	; (40c638 <main+0x48c>)
  40c5da:	4c12      	ldr	r4, [pc, #72]	; (40c624 <main+0x478>)
  40c5dc:	47a0      	blx	r4
		delay_ms(1000);
  40c5de:	4814      	ldr	r0, [pc, #80]	; (40c630 <main+0x484>)
  40c5e0:	47b0      	blx	r6
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c5e2:	4d20      	ldr	r5, [pc, #128]	; (40c664 <main+0x4b8>)
  40c5e4:	4e20      	ldr	r6, [pc, #128]	; (40c668 <main+0x4bc>)
  40c5e6:	602e      	str	r6, [r5, #0]
		delay_s(2);
  40c5e8:	4815      	ldr	r0, [pc, #84]	; (40c640 <main+0x494>)
  40c5ea:	4c0b      	ldr	r4, [pc, #44]	; (40c618 <main+0x46c>)
  40c5ec:	47a0      	blx	r4
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c5ee:	602e      	str	r6, [r5, #0]
		delay_s(1);
  40c5f0:	480f      	ldr	r0, [pc, #60]	; (40c630 <main+0x484>)
  40c5f2:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40c5f4:	4b0d      	ldr	r3, [pc, #52]	; (40c62c <main+0x480>)
  40c5f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40c5fa:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c5fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	char takePicFlag=0;
  40c600:	2400      	movs	r4, #0
  40c602:	e61d      	b.n	40c240 <main+0x94>
		if(bootSource==0)printf("PWR\r\n");else printf("RST\r\n");
  40c604:	4819      	ldr	r0, [pc, #100]	; (40c66c <main+0x4c0>)
  40c606:	4b07      	ldr	r3, [pc, #28]	; (40c624 <main+0x478>)
  40c608:	4798      	blx	r3
  40c60a:	e6cb      	b.n	40c3a4 <main+0x1f8>
  40c60c:	004035a1 	.word	0x004035a1
  40c610:	400e0e00 	.word	0x400e0e00
  40c614:	009a5649 	.word	0x009a5649
  40c618:	2040008d 	.word	0x2040008d
  40c61c:	00401a79 	.word	0x00401a79
  40c620:	00410688 	.word	0x00410688
  40c624:	0040ce59 	.word	0x0040ce59
  40c628:	0181d7b6 	.word	0x0181d7b6
  40c62c:	400e1200 	.word	0x400e1200
  40c630:	0303af6b 	.word	0x0303af6b
  40c634:	00401ccd 	.word	0x00401ccd
  40c638:	00410698 	.word	0x00410698
  40c63c:	00408219 	.word	0x00408219
  40c640:	06075ed6 	.word	0x06075ed6
  40c644:	e000e100 	.word	0xe000e100
  40c648:	400e1810 	.word	0x400e1810
  40c64c:	0040710d 	.word	0x0040710d
  40c650:	004106b4 	.word	0x004106b4
  40c654:	004d2b25 	.word	0x004d2b25
  40c658:	0040af1d 	.word	0x0040af1d
  40c65c:	00406f09 	.word	0x00406f09
  40c660:	00401ba5 	.word	0x00401ba5
  40c664:	400e1850 	.word	0x400e1850
  40c668:	a5000001 	.word	0xa5000001
  40c66c:	00410690 	.word	0x00410690
  40c670:	0040274d 	.word	0x0040274d
  40c674:	20401114 	.word	0x20401114
  40c678:	00406a61 	.word	0x00406a61
		pmc_enable_periph_clk(ID_PIOB);
  40c67c:	200b      	movs	r0, #11
  40c67e:	4da7      	ldr	r5, [pc, #668]	; (40c91c <main+0x770>)
  40c680:	47a8      	blx	r5
		pmc_enable_periph_clk(ID_PIOD);
  40c682:	2010      	movs	r0, #16
  40c684:	47a8      	blx	r5
		pmc_enable_periph_clk(ID_PIOA);//for RTC INT pin
  40c686:	200a      	movs	r0, #10
  40c688:	47a8      	blx	r5
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c68a:	4da5      	ldr	r5, [pc, #660]	; (40c920 <main+0x774>)
  40c68c:	2302      	movs	r3, #2
  40c68e:	616b      	str	r3, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c690:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		delay_us(1);
  40c694:	2033      	movs	r0, #51	; 0x33
  40c696:	4ba3      	ldr	r3, [pc, #652]	; (40c924 <main+0x778>)
  40c698:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40c69a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		if(ioport_get_pin_level(ToBigWU)==0){//IF THIS WAKEUP IS FROM TINY WITH A GPS DATE/TIME
  40c69c:	f013 0f02 	tst.w	r3, #2
  40c6a0:	d10f      	bne.n	40c6c2 <main+0x516>
			getGPSdateTimeFrmTiny();	//RUN TINY STUFF
  40c6a2:	4ba1      	ldr	r3, [pc, #644]	; (40c928 <main+0x77c>)
  40c6a4:	4798      	blx	r3
			WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c6a6:	4aa1      	ldr	r2, [pc, #644]	; (40c92c <main+0x780>)
  40c6a8:	4ba1      	ldr	r3, [pc, #644]	; (40c930 <main+0x784>)
  40c6aa:	601a      	str	r2, [r3, #0]
			configure_console();
  40c6ac:	4ba1      	ldr	r3, [pc, #644]	; (40c934 <main+0x788>)
  40c6ae:	4798      	blx	r3
			delay_ms(1);
  40c6b0:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c6b4:	4b9b      	ldr	r3, [pc, #620]	; (40c924 <main+0x778>)
  40c6b6:	4798      	blx	r3
			printf("TINY\r\n");
  40c6b8:	489f      	ldr	r0, [pc, #636]	; (40c938 <main+0x78c>)
  40c6ba:	4ba0      	ldr	r3, [pc, #640]	; (40c93c <main+0x790>)
  40c6bc:	4798      	blx	r3
		takePicFlag=0;
  40c6be:	2400      	movs	r4, #0
  40c6c0:	e5be      	b.n	40c240 <main+0x94>
  40c6c2:	4b97      	ldr	r3, [pc, #604]	; (40c920 <main+0x774>)
  40c6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		}else if (ioport_get_pin_level(RTC_INT)==0)	{
  40c6c6:	f013 0f04 	tst.w	r3, #4
  40c6ca:	f040 81ea 	bne.w	40caa2 <main+0x8f6>
			pmc_enable_periph_clk(ID_PIOC);
  40c6ce:	200c      	movs	r0, #12
  40c6d0:	4b92      	ldr	r3, [pc, #584]	; (40c91c <main+0x770>)
  40c6d2:	4798      	blx	r3
			if(bootSource==0x100)printf("RTC\r\n");
  40c6d4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  40c6d8:	bf0c      	ite	eq
  40c6da:	4899      	ldreq	r0, [pc, #612]	; (40c940 <main+0x794>)
			else printf("WATCHDOG\r\n");
  40c6dc:	4899      	ldrne	r0, [pc, #612]	; (40c944 <main+0x798>)
  40c6de:	4b97      	ldr	r3, [pc, #604]	; (40c93c <main+0x790>)
  40c6e0:	4798      	blx	r3
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c6e2:	4a92      	ldr	r2, [pc, #584]	; (40c92c <main+0x780>)
  40c6e4:	4b92      	ldr	r3, [pc, #584]	; (40c930 <main+0x784>)
  40c6e6:	601a      	str	r2, [r3, #0]
		pmc_enable_periph_clk(ID_PIOA);
  40c6e8:	200a      	movs	r0, #10
  40c6ea:	4c8c      	ldr	r4, [pc, #560]	; (40c91c <main+0x770>)
  40c6ec:	47a0      	blx	r4
		pmc_enable_periph_clk(ID_PIOB);
  40c6ee:	200b      	movs	r0, #11
  40c6f0:	47a0      	blx	r4
		pmc_enable_periph_clk(ID_PIOD);
  40c6f2:	2010      	movs	r0, #16
  40c6f4:	47a0      	blx	r4
		rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40c6f6:	2501      	movs	r5, #1
  40c6f8:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
		rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  40c6fc:	2330      	movs	r3, #48	; 0x30
  40c6fe:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c702:	2102      	movs	r1, #2
  40c704:	a816      	add	r0, sp, #88	; 0x58
  40c706:	4c90      	ldr	r4, [pc, #576]	; (40c948 <main+0x79c>)
  40c708:	47a0      	blx	r4
		rtcData[0]=0x03;//
  40c70a:	2303      	movs	r3, #3
  40c70c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c710:	4629      	mov	r1, r5
  40c712:	a816      	add	r0, sp, #88	; 0x58
  40c714:	47a0      	blx	r4
		delay_ms(1);//
  40c716:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c71a:	4b82      	ldr	r3, [pc, #520]	; (40c924 <main+0x778>)
  40c71c:	4798      	blx	r3
		read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  40c71e:	2107      	movs	r1, #7
  40c720:	a816      	add	r0, sp, #88	; 0x58
  40c722:	4b8a      	ldr	r3, [pc, #552]	; (40c94c <main+0x7a0>)
  40c724:	4798      	blx	r3
		printf("%X-%X-%X %X:%X:%X\r\n",rtcData[5],rtcData[3],rtcData[6],rtcData[2],rtcData[1],secNow);//tshooooooooooooooooooooooooooooooooooot
  40c726:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
  40c72a:	f89d 205b 	ldrb.w	r2, [sp, #91]	; 0x5b
  40c72e:	f89d 105d 	ldrb.w	r1, [sp, #93]	; 0x5d
  40c732:	f8df 8260 	ldr.w	r8, [pc, #608]	; 40c994 <main+0x7e8>
  40c736:	f8d8 0000 	ldr.w	r0, [r8]
  40c73a:	9002      	str	r0, [sp, #8]
  40c73c:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
  40c740:	9001      	str	r0, [sp, #4]
  40c742:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
  40c746:	9000      	str	r0, [sp, #0]
  40c748:	4881      	ldr	r0, [pc, #516]	; (40c950 <main+0x7a4>)
  40c74a:	4c7c      	ldr	r4, [pc, #496]	; (40c93c <main+0x790>)
  40c74c:	47a0      	blx	r4
		yearNow=rtcData[6];
  40c74e:	f89d 705e 	ldrb.w	r7, [sp, #94]	; 0x5e
  40c752:	4b80      	ldr	r3, [pc, #512]	; (40c954 <main+0x7a8>)
  40c754:	601f      	str	r7, [r3, #0]
		hexMonthNow=bcdToHex(rtcData[5]);
  40c756:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
  40c75a:	4c7f      	ldr	r4, [pc, #508]	; (40c958 <main+0x7ac>)
  40c75c:	47a0      	blx	r4
  40c75e:	4606      	mov	r6, r0
		hexDayNow=bcdToHex(rtcData[3]);
  40c760:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
  40c764:	47a0      	blx	r4
  40c766:	4605      	mov	r5, r0
		hexHourNow=bcdToHex(rtcData[2]);
  40c768:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
  40c76c:	47a0      	blx	r4
  40c76e:	4681      	mov	r9, r0
		hexMinNow=bcdToHex(rtcData[1]);
  40c770:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
  40c774:	47a0      	blx	r4
  40c776:	4604      	mov	r4, r0
		secNow=rtcData[0];
  40c778:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  40c77c:	f8c8 3000 	str.w	r3, [r8]
		hexHourNow=hexHourNow+24+TIMEZONE_OFFSET;
  40c780:	f109 0310 	add.w	r3, r9, #16
  40c784:	b2db      	uxtb	r3, r3
		if(hexMonthNow<11)beforeNov2=1;
  40c786:	2e0a      	cmp	r6, #10
  40c788:	bf8c      	ite	hi
  40c78a:	2100      	movhi	r1, #0
  40c78c:	2101      	movls	r1, #1
		if((hexMonthNow==11)&&(hexDayNow>1))beforeNov2=0;
  40c78e:	2e0b      	cmp	r6, #11
  40c790:	d101      	bne.n	40c796 <main+0x5ea>
  40c792:	2d01      	cmp	r5, #1
  40c794:	d80b      	bhi.n	40c7ae <main+0x602>
		if(hexMonthNow>3)afterMar7=1;
  40c796:	2e03      	cmp	r6, #3
  40c798:	bf8c      	ite	hi
  40c79a:	2201      	movhi	r2, #1
  40c79c:	2200      	movls	r2, #0
		if((hexMonthNow==3)&&(hexDayNow<8))afterMar7=0;
  40c79e:	d101      	bne.n	40c7a4 <main+0x5f8>
  40c7a0:	2d07      	cmp	r5, #7
  40c7a2:	d904      	bls.n	40c7ae <main+0x602>
		if((beforeNov2)&&(afterMar7))hexHourNow++;//(18 is BCD 12)
  40c7a4:	b119      	cbz	r1, 40c7ae <main+0x602>
  40c7a6:	b112      	cbz	r2, 40c7ae <main+0x602>
  40c7a8:	f109 0311 	add.w	r3, r9, #17
  40c7ac:	b2db      	uxtb	r3, r3
		if(hexHourNow>23)hexHourNow-=24;
  40c7ae:	2b17      	cmp	r3, #23
  40c7b0:	d901      	bls.n	40c7b6 <main+0x60a>
  40c7b2:	3b18      	subs	r3, #24
  40c7b4:	b2db      	uxtb	r3, r3
		if((bigBootSoNeedGPS||((yearNow==99)&&((hexHourNow%3)==0)&&(hexMinNow==0)))
  40c7b6:	2f63      	cmp	r7, #99	; 0x63
  40c7b8:	d109      	bne.n	40c7ce <main+0x622>
  40c7ba:	2203      	movs	r2, #3
  40c7bc:	fbb3 f2f2 	udiv	r2, r3, r2
  40c7c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40c7c4:	1a9a      	subs	r2, r3, r2
  40c7c6:	f012 0fff 	tst.w	r2, #255	; 0xff
  40c7ca:	d100      	bne.n	40c7ce <main+0x622>
  40c7cc:	b13c      	cbz	r4, 40c7de <main+0x632>
			||(((hexDayNow>>2)==(hexHourNow))&&(hexMinNow==21))){//Always 21 minutes after an hour.
  40c7ce:	f3c5 0587 	ubfx	r5, r5, #2, #8
  40c7d2:	429d      	cmp	r5, r3
  40c7d4:	f040 8092 	bne.w	40c8fc <main+0x750>
  40c7d8:	2c15      	cmp	r4, #21
  40c7da:	f040 808f 	bne.w	40c8fc <main+0x750>
			minPacketForTiny[0]=0x10; //set flag to take GPS
  40c7de:	2210      	movs	r2, #16
  40c7e0:	4b5e      	ldr	r3, [pc, #376]	; (40c95c <main+0x7b0>)
  40c7e2:	701a      	strb	r2, [r3, #0]
			)takePicFlag=1;else takePicFlag=0;
  40c7e4:	2400      	movs	r4, #0
		gotAltitudeTemperature=getAltimeterTemperatureTE(0xEE);
  40c7e6:	20ee      	movs	r0, #238	; 0xee
  40c7e8:	4b5d      	ldr	r3, [pc, #372]	; (40c960 <main+0x7b4>)
  40c7ea:	4798      	blx	r3
  40c7ec:	4605      	mov	r5, r0
		gotHumidity=getHumidity(0x80);
  40c7ee:	2080      	movs	r0, #128	; 0x80
  40c7f0:	4b5c      	ldr	r3, [pc, #368]	; (40c964 <main+0x7b8>)
  40c7f2:	4798      	blx	r3
  40c7f4:	4606      	mov	r6, r0
		gotLight=getALSfromVEML(0x20);
  40c7f6:	2020      	movs	r0, #32
  40c7f8:	4b5b      	ldr	r3, [pc, #364]	; (40c968 <main+0x7bc>)
  40c7fa:	4798      	blx	r3
		printf("TEMP %X BAROM %X HUMIDITY %X LIGHT %X MOTION %X\r\n",(gotAltitudeTemperature>>16),(gotAltitudeTemperature&0x0000FFFF),gotHumidity,gotLight,1);
  40c7fc:	2301      	movs	r3, #1
  40c7fe:	9301      	str	r3, [sp, #4]
  40c800:	9000      	str	r0, [sp, #0]
  40c802:	4633      	mov	r3, r6
  40c804:	b2aa      	uxth	r2, r5
  40c806:	0c29      	lsrs	r1, r5, #16
  40c808:	4858      	ldr	r0, [pc, #352]	; (40c96c <main+0x7c0>)
  40c80a:	4d4c      	ldr	r5, [pc, #304]	; (40c93c <main+0x790>)
  40c80c:	47a8      	blx	r5
  40c80e:	f04f 0b00 	mov.w	fp, #0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40c812:	f8df a184 	ldr.w	sl, [pc, #388]	; 40c998 <main+0x7ec>
			WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c816:	4b46      	ldr	r3, [pc, #280]	; (40c930 <main+0x784>)
  40c818:	4a44      	ldr	r2, [pc, #272]	; (40c92c <main+0x780>)
  40c81a:	601a      	str	r2, [r3, #0]
			sendPacketToTiny32(bcdToHex(rtcData[1])&0x1F);//send minute bits to tell Tiny which portion of Loc to send as partial param.
  40c81c:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
  40c820:	4b4d      	ldr	r3, [pc, #308]	; (40c958 <main+0x7ac>)
  40c822:	4798      	blx	r3
  40c824:	f000 001f 	and.w	r0, r0, #31
  40c828:	4b51      	ldr	r3, [pc, #324]	; (40c970 <main+0x7c4>)
  40c82a:	4798      	blx	r3
  40c82c:	2508      	movs	r5, #8
  40c82e:	f8ca 5010 	str.w	r5, [sl, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c832:	f8ca 50a0 	str.w	r5, [sl, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40c836:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
			delay_ms(5);//needs to wait for Tiny to calc CRC for 56 bytes. Making longer than 5 didn't help.
  40c83a:	484e      	ldr	r0, [pc, #312]	; (40c974 <main+0x7c8>)
  40c83c:	4b39      	ldr	r3, [pc, #228]	; (40c924 <main+0x778>)
  40c83e:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40c840:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
  40c844:	f10d 0573 	add.w	r5, sp, #115	; 0x73
  40c848:	f10d 078f 	add.w	r7, sp, #143	; 0x8f
				rcvFromTinyS[iters]=getByteFromTiny();
  40c84c:	4e4a      	ldr	r6, [pc, #296]	; (40c978 <main+0x7cc>)
  40c84e:	47b0      	blx	r6
  40c850:	f805 0f01 	strb.w	r0, [r5, #1]!
			for(iters=0;iters<28;iters++){
  40c854:	42af      	cmp	r7, r5
  40c856:	d1fa      	bne.n	40c84e <main+0x6a2>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40c858:	2308      	movs	r3, #8
  40c85a:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40c85e:	4b47      	ldr	r3, [pc, #284]	; (40c97c <main+0x7d0>)
  40c860:	2201      	movs	r2, #1
  40c862:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c864:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40c868:	631a      	str	r2, [r3, #48]	; 0x30
			crcrc=calcCRC(rcvFromTinyS,26);
  40c86a:	211a      	movs	r1, #26
  40c86c:	a81d      	add	r0, sp, #116	; 0x74
  40c86e:	4b44      	ldr	r3, [pc, #272]	; (40c980 <main+0x7d4>)
  40c870:	4798      	blx	r3
  40c872:	4680      	mov	r8, r0
			if(((crcrc>>8)==rcvFromTinyS[26])&&((crcrc&0x00FF)==rcvFromTinyS[27])){
  40c874:	f89d 208e 	ldrb.w	r2, [sp, #142]	; 0x8e
  40c878:	f3c0 230f 	ubfx	r3, r0, #8, #16
  40c87c:	429a      	cmp	r2, r3
  40c87e:	f000 808f 	beq.w	40c9a0 <main+0x7f4>
  40c882:	2601      	movs	r6, #1
  40c884:	4b3d      	ldr	r3, [pc, #244]	; (40c97c <main+0x7d0>)
  40c886:	631e      	str	r6, [r3, #48]	; 0x30
				configure_console();
  40c888:	4b2a      	ldr	r3, [pc, #168]	; (40c934 <main+0x788>)
  40c88a:	4798      	blx	r3
				delay_ms(1);
  40c88c:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c890:	4f24      	ldr	r7, [pc, #144]	; (40c924 <main+0x778>)
  40c892:	47b8      	blx	r7
				printf("BIGTINY CRC ERROR %d %X %X%X\r\n",didGoodXfrCtr,crcrc,rcvFromTinyS[26],rcvFromTinyS[27]);
  40c894:	f89d 308e 	ldrb.w	r3, [sp, #142]	; 0x8e
  40c898:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
  40c89c:	9200      	str	r2, [sp, #0]
  40c89e:	4642      	mov	r2, r8
  40c8a0:	4659      	mov	r1, fp
  40c8a2:	4838      	ldr	r0, [pc, #224]	; (40c984 <main+0x7d8>)
  40c8a4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 40c93c <main+0x790>
  40c8a8:	47c0      	blx	r8
				delay_ms(10);
  40c8aa:	4837      	ldr	r0, [pc, #220]	; (40c988 <main+0x7dc>)
  40c8ac:	47b8      	blx	r7
				delay_ms(400+(didGoodXfrCtr>>5));//needs adjusting
  40c8ae:	ea4f 115b 	mov.w	r1, fp, lsr #5
  40c8b2:	f501 71c8 	add.w	r1, r1, #400	; 0x190
  40c8b6:	17cb      	asrs	r3, r1, #31
  40c8b8:	4834      	ldr	r0, [pc, #208]	; (40c98c <main+0x7e0>)
  40c8ba:	fba1 0100 	umull	r0, r1, r1, r0
  40c8be:	4d33      	ldr	r5, [pc, #204]	; (40c98c <main+0x7e0>)
  40c8c0:	fb05 1103 	mla	r1, r5, r3, r1
  40c8c4:	f241 722c 	movw	r2, #5932	; 0x172c
  40c8c8:	2300      	movs	r3, #0
  40c8ca:	f241 782b 	movw	r8, #5931	; 0x172b
  40c8ce:	f04f 0900 	mov.w	r9, #0
  40c8d2:	eb18 0800 	adds.w	r8, r8, r0
  40c8d6:	eb49 0901 	adc.w	r9, r9, r1
  40c8da:	4640      	mov	r0, r8
  40c8dc:	4649      	mov	r1, r9
  40c8de:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 40c99c <main+0x7f0>
  40c8e2:	47c0      	blx	r8
  40c8e4:	47b8      	blx	r7
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c8e6:	4b25      	ldr	r3, [pc, #148]	; (40c97c <main+0x7d0>)
  40c8e8:	615e      	str	r6, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c8ea:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
			didGoodXfrCtr++;
  40c8ee:	44b3      	add	fp, r6
  40c8f0:	fa5f fb8b 	uxtb.w	fp, fp
		while((didGoodXfr==0)&&(didGoodXfrCtr<22)){
  40c8f4:	f1bb 0f15 	cmp.w	fp, #21
  40c8f8:	d98d      	bls.n	40c816 <main+0x66a>
  40c8fa:	e4a1      	b.n	40c240 <main+0x94>
		}else minPacketForTiny[0]=0;
  40c8fc:	2100      	movs	r1, #0
  40c8fe:	4a17      	ldr	r2, [pc, #92]	; (40c95c <main+0x7b0>)
  40c900:	7011      	strb	r1, [r2, #0]
			if((minPacketForTiny[0]==0)&&(((hexMinNow==0)))&&(
  40c902:	b944      	cbnz	r4, 40c916 <main+0x76a>
			||(hexHourNow==PIC_TIME_LOCAL_H)
  40c904:	2b12      	cmp	r3, #18
  40c906:	f63f af6e 	bhi.w	40c7e6 <main+0x63a>
  40c90a:	4c21      	ldr	r4, [pc, #132]	; (40c990 <main+0x7e4>)
  40c90c:	fa24 f303 	lsr.w	r3, r4, r3
			)takePicFlag=1;else takePicFlag=0;
  40c910:	f003 0401 	and.w	r4, r3, #1
  40c914:	e767      	b.n	40c7e6 <main+0x63a>
  40c916:	2400      	movs	r4, #0
  40c918:	e765      	b.n	40c7e6 <main+0x63a>
  40c91a:	bf00      	nop
  40c91c:	004035a1 	.word	0x004035a1
  40c920:	400e0e00 	.word	0x400e0e00
  40c924:	2040008d 	.word	0x2040008d
  40c928:	00407751 	.word	0x00407751
  40c92c:	a5000001 	.word	0xa5000001
  40c930:	400e1850 	.word	0x400e1850
  40c934:	0040710d 	.word	0x0040710d
  40c938:	004106bc 	.word	0x004106bc
  40c93c:	0040ce59 	.word	0x0040ce59
  40c940:	004106c4 	.word	0x004106c4
  40c944:	004106cc 	.word	0x004106cc
  40c948:	00401ba5 	.word	0x00401ba5
  40c94c:	00401ccd 	.word	0x00401ccd
  40c950:	004106d8 	.word	0x004106d8
  40c954:	20401178 	.word	0x20401178
  40c958:	00406b07 	.word	0x00406b07
  40c95c:	204011ec 	.word	0x204011ec
  40c960:	00407c19 	.word	0x00407c19
  40c964:	00407a21 	.word	0x00407a21
  40c968:	00407ae5 	.word	0x00407ae5
  40c96c:	004106ec 	.word	0x004106ec
  40c970:	00407f9d 	.word	0x00407f9d
  40c974:	0003dbc2 	.word	0x0003dbc2
  40c978:	00407571 	.word	0x00407571
  40c97c:	400e1000 	.word	0x400e1000
  40c980:	004076a1 	.word	0x004076a1
  40c984:	00410808 	.word	0x00410808
  40c988:	0007b784 	.word	0x0007b784
  40c98c:	11e1a300 	.word	0x11e1a300
  40c990:	00055541 	.word	0x00055541
  40c994:	20401170 	.word	0x20401170
  40c998:	400e1400 	.word	0x400e1400
  40c99c:	0040caf9 	.word	0x0040caf9
			if(((crcrc>>8)==rcvFromTinyS[26])&&((crcrc&0x00FF)==rcvFromTinyS[27])){
  40c9a0:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
  40c9a4:	b2c3      	uxtb	r3, r0
  40c9a6:	429a      	cmp	r2, r3
  40c9a8:	f47f af6b 	bne.w	40c882 <main+0x6d6>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40c9ac:	4f46      	ldr	r7, [pc, #280]	; (40cac8 <main+0x91c>)
  40c9ae:	f04f 0901 	mov.w	r9, #1
  40c9b2:	f8c7 9034 	str.w	r9, [r7, #52]	; 0x34
				configure_console();
  40c9b6:	f8df a13c 	ldr.w	sl, [pc, #316]	; 40caf4 <main+0x948>
  40c9ba:	47d0      	blx	sl
				delay_ms(1);
  40c9bc:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c9c0:	4d42      	ldr	r5, [pc, #264]	; (40cacc <main+0x920>)
  40c9c2:	47a8      	blx	r5
				printf("LOG MOTION FUNCTION THAT CAUSES WATCHDOG FAILURE\r\n");
  40c9c4:	4842      	ldr	r0, [pc, #264]	; (40cad0 <main+0x924>)
  40c9c6:	4e43      	ldr	r6, [pc, #268]	; (40cad4 <main+0x928>)
  40c9c8:	47b0      	blx	r6
 				logMotionRecord32byte(rcvFromTinyS,0,NULL);//
  40c9ca:	2200      	movs	r2, #0
  40c9cc:	4611      	mov	r1, r2
  40c9ce:	a81d      	add	r0, sp, #116	; 0x74
  40c9d0:	4b41      	ldr	r3, [pc, #260]	; (40cad8 <main+0x92c>)
  40c9d2:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c9d4:	f8c7 9014 	str.w	r9, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c9d8:	f8c7 90a0 	str.w	r9, [r7, #160]	; 0xa0
				configure_console();
  40c9dc:	47d0      	blx	sl
				delay_ms(1);
  40c9de:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c9e2:	47a8      	blx	r5
				printf("BIGTINY CRC GOOD %d %X %X%X\r\n",didGoodXfrCtr,crcrc,rcvFromTinyS[26],rcvFromTinyS[27]);
  40c9e4:	f89d 308e 	ldrb.w	r3, [sp, #142]	; 0x8e
  40c9e8:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
  40c9ec:	9200      	str	r2, [sp, #0]
  40c9ee:	4642      	mov	r2, r8
  40c9f0:	4659      	mov	r1, fp
  40c9f2:	483a      	ldr	r0, [pc, #232]	; (40cadc <main+0x930>)
  40c9f4:	47b0      	blx	r6
				printf("MOTION: %X %X %X %X %X %X %X %X  MIN_TOTAL: %X  PROX: %X %X %X %X %X %X %X %X %X %X %X %X BASELINE PROX: %X\r\n RTC_MIN: %X LIGHT: %X LOC BYTE: %X\r\n",
  40c9f6:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  40c9fa:	f89d 2076 	ldrb.w	r2, [sp, #118]	; 0x76
  40c9fe:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
  40ca02:	f89d 008c 	ldrb.w	r0, [sp, #140]	; 0x8c
  40ca06:	9015      	str	r0, [sp, #84]	; 0x54
				rcvFromTinyS[1],rcvFromTinyS[2],rcvFromTinyS[3],rcvFromTinyS[4],rcvFromTinyS[5],rcvFromTinyS[6],rcvFromTinyS[7],rcvFromTinyS[8],  rcvFromTinyS[9], rcvFromTinyS[10],rcvFromTinyS[11],rcvFromTinyS[12],rcvFromTinyS[13],rcvFromTinyS[14],rcvFromTinyS[15],rcvFromTinyS[16],rcvFromTinyS[17],rcvFromTinyS[18],rcvFromTinyS[19],rcvFromTinyS[20],rcvFromTinyS[21],rcvFromTinyS[22],rtcData[1]&0x0F,(((short)(rcvFromTinyS[0])&0x06)<<7)+rcvFromTinyS[23],rcvFromTinyS[24]);
  40ca08:	f89d 0074 	ldrb.w	r0, [sp, #116]	; 0x74
  40ca0c:	01c0      	lsls	r0, r0, #7
  40ca0e:	f400 7040 	and.w	r0, r0, #768	; 0x300
  40ca12:	f89d 708b 	ldrb.w	r7, [sp, #139]	; 0x8b
				printf("MOTION: %X %X %X %X %X %X %X %X  MIN_TOTAL: %X  PROX: %X %X %X %X %X %X %X %X %X %X %X %X BASELINE PROX: %X\r\n RTC_MIN: %X LIGHT: %X LOC BYTE: %X\r\n",
  40ca16:	4438      	add	r0, r7
  40ca18:	9014      	str	r0, [sp, #80]	; 0x50
  40ca1a:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
  40ca1e:	f000 000f 	and.w	r0, r0, #15
  40ca22:	9013      	str	r0, [sp, #76]	; 0x4c
  40ca24:	f89d 008a 	ldrb.w	r0, [sp, #138]	; 0x8a
  40ca28:	9012      	str	r0, [sp, #72]	; 0x48
  40ca2a:	f89d 0089 	ldrb.w	r0, [sp, #137]	; 0x89
  40ca2e:	9011      	str	r0, [sp, #68]	; 0x44
  40ca30:	f89d 0088 	ldrb.w	r0, [sp, #136]	; 0x88
  40ca34:	9010      	str	r0, [sp, #64]	; 0x40
  40ca36:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
  40ca3a:	900f      	str	r0, [sp, #60]	; 0x3c
  40ca3c:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
  40ca40:	900e      	str	r0, [sp, #56]	; 0x38
  40ca42:	f89d 0085 	ldrb.w	r0, [sp, #133]	; 0x85
  40ca46:	900d      	str	r0, [sp, #52]	; 0x34
  40ca48:	f89d 0084 	ldrb.w	r0, [sp, #132]	; 0x84
  40ca4c:	900c      	str	r0, [sp, #48]	; 0x30
  40ca4e:	f89d 0083 	ldrb.w	r0, [sp, #131]	; 0x83
  40ca52:	900b      	str	r0, [sp, #44]	; 0x2c
  40ca54:	f89d 0082 	ldrb.w	r0, [sp, #130]	; 0x82
  40ca58:	900a      	str	r0, [sp, #40]	; 0x28
  40ca5a:	f89d 0081 	ldrb.w	r0, [sp, #129]	; 0x81
  40ca5e:	9009      	str	r0, [sp, #36]	; 0x24
  40ca60:	f89d 0080 	ldrb.w	r0, [sp, #128]	; 0x80
  40ca64:	9008      	str	r0, [sp, #32]
  40ca66:	f89d 007f 	ldrb.w	r0, [sp, #127]	; 0x7f
  40ca6a:	9007      	str	r0, [sp, #28]
  40ca6c:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
  40ca70:	9006      	str	r0, [sp, #24]
  40ca72:	f89d 007d 	ldrb.w	r0, [sp, #125]	; 0x7d
  40ca76:	9005      	str	r0, [sp, #20]
  40ca78:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
  40ca7c:	9004      	str	r0, [sp, #16]
  40ca7e:	f89d 007b 	ldrb.w	r0, [sp, #123]	; 0x7b
  40ca82:	9003      	str	r0, [sp, #12]
  40ca84:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
  40ca88:	9002      	str	r0, [sp, #8]
  40ca8a:	f89d 0079 	ldrb.w	r0, [sp, #121]	; 0x79
  40ca8e:	9001      	str	r0, [sp, #4]
  40ca90:	f89d 0078 	ldrb.w	r0, [sp, #120]	; 0x78
  40ca94:	9000      	str	r0, [sp, #0]
  40ca96:	4812      	ldr	r0, [pc, #72]	; (40cae0 <main+0x934>)
  40ca98:	47b0      	blx	r6
				delay_ms(10);
  40ca9a:	4812      	ldr	r0, [pc, #72]	; (40cae4 <main+0x938>)
  40ca9c:	47a8      	blx	r5
  40ca9e:	f7ff bbcf 	b.w	40c240 <main+0x94>
		}else printf("DIDN'T DETECT RTC PULSE\r\n");//END OF RTC WAKEUPS
  40caa2:	4811      	ldr	r0, [pc, #68]	; (40cae8 <main+0x93c>)
  40caa4:	4b0b      	ldr	r3, [pc, #44]	; (40cad4 <main+0x928>)
  40caa6:	4798      	blx	r3
		takePicFlag=0;
  40caa8:	2400      	movs	r4, #0
  40caaa:	f7ff bbc9 	b.w	40c240 <main+0x94>
		if(takeImage(0,0,1)==0)storeImage();
  40caae:	2201      	movs	r2, #1
  40cab0:	2100      	movs	r1, #0
  40cab2:	4608      	mov	r0, r1
  40cab4:	4b0d      	ldr	r3, [pc, #52]	; (40caec <main+0x940>)
  40cab6:	4798      	blx	r3
  40cab8:	2800      	cmp	r0, #0
  40caba:	f47f abca 	bne.w	40c252 <main+0xa6>
  40cabe:	4b0c      	ldr	r3, [pc, #48]	; (40caf0 <main+0x944>)
  40cac0:	4798      	blx	r3
  40cac2:	f7ff bbc6 	b.w	40c252 <main+0xa6>
  40cac6:	bf00      	nop
  40cac8:	400e1000 	.word	0x400e1000
  40cacc:	2040008d 	.word	0x2040008d
  40cad0:	00410720 	.word	0x00410720
  40cad4:	0040ce59 	.word	0x0040ce59
  40cad8:	0040becd 	.word	0x0040becd
  40cadc:	00410754 	.word	0x00410754
  40cae0:	00410774 	.word	0x00410774
  40cae4:	0007b784 	.word	0x0007b784
  40cae8:	00410828 	.word	0x00410828
  40caec:	0040a6d1 	.word	0x0040a6d1
  40caf0:	00409c21 	.word	0x00409c21
  40caf4:	0040710d 	.word	0x0040710d

0040caf8 <__aeabi_uldivmod>:
  40caf8:	b953      	cbnz	r3, 40cb10 <__aeabi_uldivmod+0x18>
  40cafa:	b94a      	cbnz	r2, 40cb10 <__aeabi_uldivmod+0x18>
  40cafc:	2900      	cmp	r1, #0
  40cafe:	bf08      	it	eq
  40cb00:	2800      	cmpeq	r0, #0
  40cb02:	bf1c      	itt	ne
  40cb04:	f04f 31ff 	movne.w	r1, #4294967295
  40cb08:	f04f 30ff 	movne.w	r0, #4294967295
  40cb0c:	f000 b97a 	b.w	40ce04 <__aeabi_idiv0>
  40cb10:	f1ad 0c08 	sub.w	ip, sp, #8
  40cb14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40cb18:	f000 f806 	bl	40cb28 <__udivmoddi4>
  40cb1c:	f8dd e004 	ldr.w	lr, [sp, #4]
  40cb20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40cb24:	b004      	add	sp, #16
  40cb26:	4770      	bx	lr

0040cb28 <__udivmoddi4>:
  40cb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40cb2c:	468c      	mov	ip, r1
  40cb2e:	460d      	mov	r5, r1
  40cb30:	4604      	mov	r4, r0
  40cb32:	9e08      	ldr	r6, [sp, #32]
  40cb34:	2b00      	cmp	r3, #0
  40cb36:	d151      	bne.n	40cbdc <__udivmoddi4+0xb4>
  40cb38:	428a      	cmp	r2, r1
  40cb3a:	4617      	mov	r7, r2
  40cb3c:	d96d      	bls.n	40cc1a <__udivmoddi4+0xf2>
  40cb3e:	fab2 fe82 	clz	lr, r2
  40cb42:	f1be 0f00 	cmp.w	lr, #0
  40cb46:	d00b      	beq.n	40cb60 <__udivmoddi4+0x38>
  40cb48:	f1ce 0c20 	rsb	ip, lr, #32
  40cb4c:	fa01 f50e 	lsl.w	r5, r1, lr
  40cb50:	fa20 fc0c 	lsr.w	ip, r0, ip
  40cb54:	fa02 f70e 	lsl.w	r7, r2, lr
  40cb58:	ea4c 0c05 	orr.w	ip, ip, r5
  40cb5c:	fa00 f40e 	lsl.w	r4, r0, lr
  40cb60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40cb64:	0c25      	lsrs	r5, r4, #16
  40cb66:	fbbc f8fa 	udiv	r8, ip, sl
  40cb6a:	fa1f f987 	uxth.w	r9, r7
  40cb6e:	fb0a cc18 	mls	ip, sl, r8, ip
  40cb72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40cb76:	fb08 f309 	mul.w	r3, r8, r9
  40cb7a:	42ab      	cmp	r3, r5
  40cb7c:	d90a      	bls.n	40cb94 <__udivmoddi4+0x6c>
  40cb7e:	19ed      	adds	r5, r5, r7
  40cb80:	f108 32ff 	add.w	r2, r8, #4294967295
  40cb84:	f080 8123 	bcs.w	40cdce <__udivmoddi4+0x2a6>
  40cb88:	42ab      	cmp	r3, r5
  40cb8a:	f240 8120 	bls.w	40cdce <__udivmoddi4+0x2a6>
  40cb8e:	f1a8 0802 	sub.w	r8, r8, #2
  40cb92:	443d      	add	r5, r7
  40cb94:	1aed      	subs	r5, r5, r3
  40cb96:	b2a4      	uxth	r4, r4
  40cb98:	fbb5 f0fa 	udiv	r0, r5, sl
  40cb9c:	fb0a 5510 	mls	r5, sl, r0, r5
  40cba0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40cba4:	fb00 f909 	mul.w	r9, r0, r9
  40cba8:	45a1      	cmp	r9, r4
  40cbaa:	d909      	bls.n	40cbc0 <__udivmoddi4+0x98>
  40cbac:	19e4      	adds	r4, r4, r7
  40cbae:	f100 33ff 	add.w	r3, r0, #4294967295
  40cbb2:	f080 810a 	bcs.w	40cdca <__udivmoddi4+0x2a2>
  40cbb6:	45a1      	cmp	r9, r4
  40cbb8:	f240 8107 	bls.w	40cdca <__udivmoddi4+0x2a2>
  40cbbc:	3802      	subs	r0, #2
  40cbbe:	443c      	add	r4, r7
  40cbc0:	eba4 0409 	sub.w	r4, r4, r9
  40cbc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40cbc8:	2100      	movs	r1, #0
  40cbca:	2e00      	cmp	r6, #0
  40cbcc:	d061      	beq.n	40cc92 <__udivmoddi4+0x16a>
  40cbce:	fa24 f40e 	lsr.w	r4, r4, lr
  40cbd2:	2300      	movs	r3, #0
  40cbd4:	6034      	str	r4, [r6, #0]
  40cbd6:	6073      	str	r3, [r6, #4]
  40cbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cbdc:	428b      	cmp	r3, r1
  40cbde:	d907      	bls.n	40cbf0 <__udivmoddi4+0xc8>
  40cbe0:	2e00      	cmp	r6, #0
  40cbe2:	d054      	beq.n	40cc8e <__udivmoddi4+0x166>
  40cbe4:	2100      	movs	r1, #0
  40cbe6:	e886 0021 	stmia.w	r6, {r0, r5}
  40cbea:	4608      	mov	r0, r1
  40cbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cbf0:	fab3 f183 	clz	r1, r3
  40cbf4:	2900      	cmp	r1, #0
  40cbf6:	f040 808e 	bne.w	40cd16 <__udivmoddi4+0x1ee>
  40cbfa:	42ab      	cmp	r3, r5
  40cbfc:	d302      	bcc.n	40cc04 <__udivmoddi4+0xdc>
  40cbfe:	4282      	cmp	r2, r0
  40cc00:	f200 80fa 	bhi.w	40cdf8 <__udivmoddi4+0x2d0>
  40cc04:	1a84      	subs	r4, r0, r2
  40cc06:	eb65 0503 	sbc.w	r5, r5, r3
  40cc0a:	2001      	movs	r0, #1
  40cc0c:	46ac      	mov	ip, r5
  40cc0e:	2e00      	cmp	r6, #0
  40cc10:	d03f      	beq.n	40cc92 <__udivmoddi4+0x16a>
  40cc12:	e886 1010 	stmia.w	r6, {r4, ip}
  40cc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cc1a:	b912      	cbnz	r2, 40cc22 <__udivmoddi4+0xfa>
  40cc1c:	2701      	movs	r7, #1
  40cc1e:	fbb7 f7f2 	udiv	r7, r7, r2
  40cc22:	fab7 fe87 	clz	lr, r7
  40cc26:	f1be 0f00 	cmp.w	lr, #0
  40cc2a:	d134      	bne.n	40cc96 <__udivmoddi4+0x16e>
  40cc2c:	1beb      	subs	r3, r5, r7
  40cc2e:	0c3a      	lsrs	r2, r7, #16
  40cc30:	fa1f fc87 	uxth.w	ip, r7
  40cc34:	2101      	movs	r1, #1
  40cc36:	fbb3 f8f2 	udiv	r8, r3, r2
  40cc3a:	0c25      	lsrs	r5, r4, #16
  40cc3c:	fb02 3318 	mls	r3, r2, r8, r3
  40cc40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40cc44:	fb0c f308 	mul.w	r3, ip, r8
  40cc48:	42ab      	cmp	r3, r5
  40cc4a:	d907      	bls.n	40cc5c <__udivmoddi4+0x134>
  40cc4c:	19ed      	adds	r5, r5, r7
  40cc4e:	f108 30ff 	add.w	r0, r8, #4294967295
  40cc52:	d202      	bcs.n	40cc5a <__udivmoddi4+0x132>
  40cc54:	42ab      	cmp	r3, r5
  40cc56:	f200 80d1 	bhi.w	40cdfc <__udivmoddi4+0x2d4>
  40cc5a:	4680      	mov	r8, r0
  40cc5c:	1aed      	subs	r5, r5, r3
  40cc5e:	b2a3      	uxth	r3, r4
  40cc60:	fbb5 f0f2 	udiv	r0, r5, r2
  40cc64:	fb02 5510 	mls	r5, r2, r0, r5
  40cc68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40cc6c:	fb0c fc00 	mul.w	ip, ip, r0
  40cc70:	45a4      	cmp	ip, r4
  40cc72:	d907      	bls.n	40cc84 <__udivmoddi4+0x15c>
  40cc74:	19e4      	adds	r4, r4, r7
  40cc76:	f100 33ff 	add.w	r3, r0, #4294967295
  40cc7a:	d202      	bcs.n	40cc82 <__udivmoddi4+0x15a>
  40cc7c:	45a4      	cmp	ip, r4
  40cc7e:	f200 80b8 	bhi.w	40cdf2 <__udivmoddi4+0x2ca>
  40cc82:	4618      	mov	r0, r3
  40cc84:	eba4 040c 	sub.w	r4, r4, ip
  40cc88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40cc8c:	e79d      	b.n	40cbca <__udivmoddi4+0xa2>
  40cc8e:	4631      	mov	r1, r6
  40cc90:	4630      	mov	r0, r6
  40cc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cc96:	f1ce 0420 	rsb	r4, lr, #32
  40cc9a:	fa05 f30e 	lsl.w	r3, r5, lr
  40cc9e:	fa07 f70e 	lsl.w	r7, r7, lr
  40cca2:	fa20 f804 	lsr.w	r8, r0, r4
  40cca6:	0c3a      	lsrs	r2, r7, #16
  40cca8:	fa25 f404 	lsr.w	r4, r5, r4
  40ccac:	ea48 0803 	orr.w	r8, r8, r3
  40ccb0:	fbb4 f1f2 	udiv	r1, r4, r2
  40ccb4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40ccb8:	fb02 4411 	mls	r4, r2, r1, r4
  40ccbc:	fa1f fc87 	uxth.w	ip, r7
  40ccc0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40ccc4:	fb01 f30c 	mul.w	r3, r1, ip
  40ccc8:	42ab      	cmp	r3, r5
  40ccca:	fa00 f40e 	lsl.w	r4, r0, lr
  40ccce:	d909      	bls.n	40cce4 <__udivmoddi4+0x1bc>
  40ccd0:	19ed      	adds	r5, r5, r7
  40ccd2:	f101 30ff 	add.w	r0, r1, #4294967295
  40ccd6:	f080 808a 	bcs.w	40cdee <__udivmoddi4+0x2c6>
  40ccda:	42ab      	cmp	r3, r5
  40ccdc:	f240 8087 	bls.w	40cdee <__udivmoddi4+0x2c6>
  40cce0:	3902      	subs	r1, #2
  40cce2:	443d      	add	r5, r7
  40cce4:	1aeb      	subs	r3, r5, r3
  40cce6:	fa1f f588 	uxth.w	r5, r8
  40ccea:	fbb3 f0f2 	udiv	r0, r3, r2
  40ccee:	fb02 3310 	mls	r3, r2, r0, r3
  40ccf2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40ccf6:	fb00 f30c 	mul.w	r3, r0, ip
  40ccfa:	42ab      	cmp	r3, r5
  40ccfc:	d907      	bls.n	40cd0e <__udivmoddi4+0x1e6>
  40ccfe:	19ed      	adds	r5, r5, r7
  40cd00:	f100 38ff 	add.w	r8, r0, #4294967295
  40cd04:	d26f      	bcs.n	40cde6 <__udivmoddi4+0x2be>
  40cd06:	42ab      	cmp	r3, r5
  40cd08:	d96d      	bls.n	40cde6 <__udivmoddi4+0x2be>
  40cd0a:	3802      	subs	r0, #2
  40cd0c:	443d      	add	r5, r7
  40cd0e:	1aeb      	subs	r3, r5, r3
  40cd10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40cd14:	e78f      	b.n	40cc36 <__udivmoddi4+0x10e>
  40cd16:	f1c1 0720 	rsb	r7, r1, #32
  40cd1a:	fa22 f807 	lsr.w	r8, r2, r7
  40cd1e:	408b      	lsls	r3, r1
  40cd20:	fa05 f401 	lsl.w	r4, r5, r1
  40cd24:	ea48 0303 	orr.w	r3, r8, r3
  40cd28:	fa20 fe07 	lsr.w	lr, r0, r7
  40cd2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40cd30:	40fd      	lsrs	r5, r7
  40cd32:	ea4e 0e04 	orr.w	lr, lr, r4
  40cd36:	fbb5 f9fc 	udiv	r9, r5, ip
  40cd3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40cd3e:	fb0c 5519 	mls	r5, ip, r9, r5
  40cd42:	fa1f f883 	uxth.w	r8, r3
  40cd46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40cd4a:	fb09 f408 	mul.w	r4, r9, r8
  40cd4e:	42ac      	cmp	r4, r5
  40cd50:	fa02 f201 	lsl.w	r2, r2, r1
  40cd54:	fa00 fa01 	lsl.w	sl, r0, r1
  40cd58:	d908      	bls.n	40cd6c <__udivmoddi4+0x244>
  40cd5a:	18ed      	adds	r5, r5, r3
  40cd5c:	f109 30ff 	add.w	r0, r9, #4294967295
  40cd60:	d243      	bcs.n	40cdea <__udivmoddi4+0x2c2>
  40cd62:	42ac      	cmp	r4, r5
  40cd64:	d941      	bls.n	40cdea <__udivmoddi4+0x2c2>
  40cd66:	f1a9 0902 	sub.w	r9, r9, #2
  40cd6a:	441d      	add	r5, r3
  40cd6c:	1b2d      	subs	r5, r5, r4
  40cd6e:	fa1f fe8e 	uxth.w	lr, lr
  40cd72:	fbb5 f0fc 	udiv	r0, r5, ip
  40cd76:	fb0c 5510 	mls	r5, ip, r0, r5
  40cd7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40cd7e:	fb00 f808 	mul.w	r8, r0, r8
  40cd82:	45a0      	cmp	r8, r4
  40cd84:	d907      	bls.n	40cd96 <__udivmoddi4+0x26e>
  40cd86:	18e4      	adds	r4, r4, r3
  40cd88:	f100 35ff 	add.w	r5, r0, #4294967295
  40cd8c:	d229      	bcs.n	40cde2 <__udivmoddi4+0x2ba>
  40cd8e:	45a0      	cmp	r8, r4
  40cd90:	d927      	bls.n	40cde2 <__udivmoddi4+0x2ba>
  40cd92:	3802      	subs	r0, #2
  40cd94:	441c      	add	r4, r3
  40cd96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40cd9a:	eba4 0408 	sub.w	r4, r4, r8
  40cd9e:	fba0 8902 	umull	r8, r9, r0, r2
  40cda2:	454c      	cmp	r4, r9
  40cda4:	46c6      	mov	lr, r8
  40cda6:	464d      	mov	r5, r9
  40cda8:	d315      	bcc.n	40cdd6 <__udivmoddi4+0x2ae>
  40cdaa:	d012      	beq.n	40cdd2 <__udivmoddi4+0x2aa>
  40cdac:	b156      	cbz	r6, 40cdc4 <__udivmoddi4+0x29c>
  40cdae:	ebba 030e 	subs.w	r3, sl, lr
  40cdb2:	eb64 0405 	sbc.w	r4, r4, r5
  40cdb6:	fa04 f707 	lsl.w	r7, r4, r7
  40cdba:	40cb      	lsrs	r3, r1
  40cdbc:	431f      	orrs	r7, r3
  40cdbe:	40cc      	lsrs	r4, r1
  40cdc0:	6037      	str	r7, [r6, #0]
  40cdc2:	6074      	str	r4, [r6, #4]
  40cdc4:	2100      	movs	r1, #0
  40cdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cdca:	4618      	mov	r0, r3
  40cdcc:	e6f8      	b.n	40cbc0 <__udivmoddi4+0x98>
  40cdce:	4690      	mov	r8, r2
  40cdd0:	e6e0      	b.n	40cb94 <__udivmoddi4+0x6c>
  40cdd2:	45c2      	cmp	sl, r8
  40cdd4:	d2ea      	bcs.n	40cdac <__udivmoddi4+0x284>
  40cdd6:	ebb8 0e02 	subs.w	lr, r8, r2
  40cdda:	eb69 0503 	sbc.w	r5, r9, r3
  40cdde:	3801      	subs	r0, #1
  40cde0:	e7e4      	b.n	40cdac <__udivmoddi4+0x284>
  40cde2:	4628      	mov	r0, r5
  40cde4:	e7d7      	b.n	40cd96 <__udivmoddi4+0x26e>
  40cde6:	4640      	mov	r0, r8
  40cde8:	e791      	b.n	40cd0e <__udivmoddi4+0x1e6>
  40cdea:	4681      	mov	r9, r0
  40cdec:	e7be      	b.n	40cd6c <__udivmoddi4+0x244>
  40cdee:	4601      	mov	r1, r0
  40cdf0:	e778      	b.n	40cce4 <__udivmoddi4+0x1bc>
  40cdf2:	3802      	subs	r0, #2
  40cdf4:	443c      	add	r4, r7
  40cdf6:	e745      	b.n	40cc84 <__udivmoddi4+0x15c>
  40cdf8:	4608      	mov	r0, r1
  40cdfa:	e708      	b.n	40cc0e <__udivmoddi4+0xe6>
  40cdfc:	f1a8 0802 	sub.w	r8, r8, #2
  40ce00:	443d      	add	r5, r7
  40ce02:	e72b      	b.n	40cc5c <__udivmoddi4+0x134>

0040ce04 <__aeabi_idiv0>:
  40ce04:	4770      	bx	lr
  40ce06:	bf00      	nop

0040ce08 <__libc_init_array>:
  40ce08:	b570      	push	{r4, r5, r6, lr}
  40ce0a:	4e0f      	ldr	r6, [pc, #60]	; (40ce48 <__libc_init_array+0x40>)
  40ce0c:	4d0f      	ldr	r5, [pc, #60]	; (40ce4c <__libc_init_array+0x44>)
  40ce0e:	1b76      	subs	r6, r6, r5
  40ce10:	10b6      	asrs	r6, r6, #2
  40ce12:	bf18      	it	ne
  40ce14:	2400      	movne	r4, #0
  40ce16:	d005      	beq.n	40ce24 <__libc_init_array+0x1c>
  40ce18:	3401      	adds	r4, #1
  40ce1a:	f855 3b04 	ldr.w	r3, [r5], #4
  40ce1e:	4798      	blx	r3
  40ce20:	42a6      	cmp	r6, r4
  40ce22:	d1f9      	bne.n	40ce18 <__libc_init_array+0x10>
  40ce24:	4e0a      	ldr	r6, [pc, #40]	; (40ce50 <__libc_init_array+0x48>)
  40ce26:	4d0b      	ldr	r5, [pc, #44]	; (40ce54 <__libc_init_array+0x4c>)
  40ce28:	1b76      	subs	r6, r6, r5
  40ce2a:	f004 f883 	bl	410f34 <_init>
  40ce2e:	10b6      	asrs	r6, r6, #2
  40ce30:	bf18      	it	ne
  40ce32:	2400      	movne	r4, #0
  40ce34:	d006      	beq.n	40ce44 <__libc_init_array+0x3c>
  40ce36:	3401      	adds	r4, #1
  40ce38:	f855 3b04 	ldr.w	r3, [r5], #4
  40ce3c:	4798      	blx	r3
  40ce3e:	42a6      	cmp	r6, r4
  40ce40:	d1f9      	bne.n	40ce36 <__libc_init_array+0x2e>
  40ce42:	bd70      	pop	{r4, r5, r6, pc}
  40ce44:	bd70      	pop	{r4, r5, r6, pc}
  40ce46:	bf00      	nop
  40ce48:	00410f40 	.word	0x00410f40
  40ce4c:	00410f40 	.word	0x00410f40
  40ce50:	00410f48 	.word	0x00410f48
  40ce54:	00410f40 	.word	0x00410f40

0040ce58 <iprintf>:
  40ce58:	b40f      	push	{r0, r1, r2, r3}
  40ce5a:	b500      	push	{lr}
  40ce5c:	4907      	ldr	r1, [pc, #28]	; (40ce7c <iprintf+0x24>)
  40ce5e:	b083      	sub	sp, #12
  40ce60:	ab04      	add	r3, sp, #16
  40ce62:	6808      	ldr	r0, [r1, #0]
  40ce64:	f853 2b04 	ldr.w	r2, [r3], #4
  40ce68:	6881      	ldr	r1, [r0, #8]
  40ce6a:	9301      	str	r3, [sp, #4]
  40ce6c:	f000 fa00 	bl	40d270 <_vfiprintf_r>
  40ce70:	b003      	add	sp, #12
  40ce72:	f85d eb04 	ldr.w	lr, [sp], #4
  40ce76:	b004      	add	sp, #16
  40ce78:	4770      	bx	lr
  40ce7a:	bf00      	nop
  40ce7c:	20400184 	.word	0x20400184

0040ce80 <memcpy>:
  40ce80:	4684      	mov	ip, r0
  40ce82:	ea41 0300 	orr.w	r3, r1, r0
  40ce86:	f013 0303 	ands.w	r3, r3, #3
  40ce8a:	d16d      	bne.n	40cf68 <memcpy+0xe8>
  40ce8c:	3a40      	subs	r2, #64	; 0x40
  40ce8e:	d341      	bcc.n	40cf14 <memcpy+0x94>
  40ce90:	f851 3b04 	ldr.w	r3, [r1], #4
  40ce94:	f840 3b04 	str.w	r3, [r0], #4
  40ce98:	f851 3b04 	ldr.w	r3, [r1], #4
  40ce9c:	f840 3b04 	str.w	r3, [r0], #4
  40cea0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cea4:	f840 3b04 	str.w	r3, [r0], #4
  40cea8:	f851 3b04 	ldr.w	r3, [r1], #4
  40ceac:	f840 3b04 	str.w	r3, [r0], #4
  40ceb0:	f851 3b04 	ldr.w	r3, [r1], #4
  40ceb4:	f840 3b04 	str.w	r3, [r0], #4
  40ceb8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cebc:	f840 3b04 	str.w	r3, [r0], #4
  40cec0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cec4:	f840 3b04 	str.w	r3, [r0], #4
  40cec8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cecc:	f840 3b04 	str.w	r3, [r0], #4
  40ced0:	f851 3b04 	ldr.w	r3, [r1], #4
  40ced4:	f840 3b04 	str.w	r3, [r0], #4
  40ced8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cedc:	f840 3b04 	str.w	r3, [r0], #4
  40cee0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cee4:	f840 3b04 	str.w	r3, [r0], #4
  40cee8:	f851 3b04 	ldr.w	r3, [r1], #4
  40ceec:	f840 3b04 	str.w	r3, [r0], #4
  40cef0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cef4:	f840 3b04 	str.w	r3, [r0], #4
  40cef8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cefc:	f840 3b04 	str.w	r3, [r0], #4
  40cf00:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf04:	f840 3b04 	str.w	r3, [r0], #4
  40cf08:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf0c:	f840 3b04 	str.w	r3, [r0], #4
  40cf10:	3a40      	subs	r2, #64	; 0x40
  40cf12:	d2bd      	bcs.n	40ce90 <memcpy+0x10>
  40cf14:	3230      	adds	r2, #48	; 0x30
  40cf16:	d311      	bcc.n	40cf3c <memcpy+0xbc>
  40cf18:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf1c:	f840 3b04 	str.w	r3, [r0], #4
  40cf20:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf24:	f840 3b04 	str.w	r3, [r0], #4
  40cf28:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf2c:	f840 3b04 	str.w	r3, [r0], #4
  40cf30:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf34:	f840 3b04 	str.w	r3, [r0], #4
  40cf38:	3a10      	subs	r2, #16
  40cf3a:	d2ed      	bcs.n	40cf18 <memcpy+0x98>
  40cf3c:	320c      	adds	r2, #12
  40cf3e:	d305      	bcc.n	40cf4c <memcpy+0xcc>
  40cf40:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf44:	f840 3b04 	str.w	r3, [r0], #4
  40cf48:	3a04      	subs	r2, #4
  40cf4a:	d2f9      	bcs.n	40cf40 <memcpy+0xc0>
  40cf4c:	3204      	adds	r2, #4
  40cf4e:	d008      	beq.n	40cf62 <memcpy+0xe2>
  40cf50:	07d2      	lsls	r2, r2, #31
  40cf52:	bf1c      	itt	ne
  40cf54:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40cf58:	f800 3b01 	strbne.w	r3, [r0], #1
  40cf5c:	d301      	bcc.n	40cf62 <memcpy+0xe2>
  40cf5e:	880b      	ldrh	r3, [r1, #0]
  40cf60:	8003      	strh	r3, [r0, #0]
  40cf62:	4660      	mov	r0, ip
  40cf64:	4770      	bx	lr
  40cf66:	bf00      	nop
  40cf68:	2a08      	cmp	r2, #8
  40cf6a:	d313      	bcc.n	40cf94 <memcpy+0x114>
  40cf6c:	078b      	lsls	r3, r1, #30
  40cf6e:	d08d      	beq.n	40ce8c <memcpy+0xc>
  40cf70:	f010 0303 	ands.w	r3, r0, #3
  40cf74:	d08a      	beq.n	40ce8c <memcpy+0xc>
  40cf76:	f1c3 0304 	rsb	r3, r3, #4
  40cf7a:	1ad2      	subs	r2, r2, r3
  40cf7c:	07db      	lsls	r3, r3, #31
  40cf7e:	bf1c      	itt	ne
  40cf80:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40cf84:	f800 3b01 	strbne.w	r3, [r0], #1
  40cf88:	d380      	bcc.n	40ce8c <memcpy+0xc>
  40cf8a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40cf8e:	f820 3b02 	strh.w	r3, [r0], #2
  40cf92:	e77b      	b.n	40ce8c <memcpy+0xc>
  40cf94:	3a04      	subs	r2, #4
  40cf96:	d3d9      	bcc.n	40cf4c <memcpy+0xcc>
  40cf98:	3a01      	subs	r2, #1
  40cf9a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40cf9e:	f800 3b01 	strb.w	r3, [r0], #1
  40cfa2:	d2f9      	bcs.n	40cf98 <memcpy+0x118>
  40cfa4:	780b      	ldrb	r3, [r1, #0]
  40cfa6:	7003      	strb	r3, [r0, #0]
  40cfa8:	784b      	ldrb	r3, [r1, #1]
  40cfaa:	7043      	strb	r3, [r0, #1]
  40cfac:	788b      	ldrb	r3, [r1, #2]
  40cfae:	7083      	strb	r3, [r0, #2]
  40cfb0:	4660      	mov	r0, ip
  40cfb2:	4770      	bx	lr

0040cfb4 <memset>:
  40cfb4:	b470      	push	{r4, r5, r6}
  40cfb6:	0786      	lsls	r6, r0, #30
  40cfb8:	d046      	beq.n	40d048 <memset+0x94>
  40cfba:	1e54      	subs	r4, r2, #1
  40cfbc:	2a00      	cmp	r2, #0
  40cfbe:	d041      	beq.n	40d044 <memset+0x90>
  40cfc0:	b2ca      	uxtb	r2, r1
  40cfc2:	4603      	mov	r3, r0
  40cfc4:	e002      	b.n	40cfcc <memset+0x18>
  40cfc6:	f114 34ff 	adds.w	r4, r4, #4294967295
  40cfca:	d33b      	bcc.n	40d044 <memset+0x90>
  40cfcc:	f803 2b01 	strb.w	r2, [r3], #1
  40cfd0:	079d      	lsls	r5, r3, #30
  40cfd2:	d1f8      	bne.n	40cfc6 <memset+0x12>
  40cfd4:	2c03      	cmp	r4, #3
  40cfd6:	d92e      	bls.n	40d036 <memset+0x82>
  40cfd8:	b2cd      	uxtb	r5, r1
  40cfda:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40cfde:	2c0f      	cmp	r4, #15
  40cfe0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40cfe4:	d919      	bls.n	40d01a <memset+0x66>
  40cfe6:	f103 0210 	add.w	r2, r3, #16
  40cfea:	4626      	mov	r6, r4
  40cfec:	3e10      	subs	r6, #16
  40cfee:	2e0f      	cmp	r6, #15
  40cff0:	f842 5c10 	str.w	r5, [r2, #-16]
  40cff4:	f842 5c0c 	str.w	r5, [r2, #-12]
  40cff8:	f842 5c08 	str.w	r5, [r2, #-8]
  40cffc:	f842 5c04 	str.w	r5, [r2, #-4]
  40d000:	f102 0210 	add.w	r2, r2, #16
  40d004:	d8f2      	bhi.n	40cfec <memset+0x38>
  40d006:	f1a4 0210 	sub.w	r2, r4, #16
  40d00a:	f022 020f 	bic.w	r2, r2, #15
  40d00e:	f004 040f 	and.w	r4, r4, #15
  40d012:	3210      	adds	r2, #16
  40d014:	2c03      	cmp	r4, #3
  40d016:	4413      	add	r3, r2
  40d018:	d90d      	bls.n	40d036 <memset+0x82>
  40d01a:	461e      	mov	r6, r3
  40d01c:	4622      	mov	r2, r4
  40d01e:	3a04      	subs	r2, #4
  40d020:	2a03      	cmp	r2, #3
  40d022:	f846 5b04 	str.w	r5, [r6], #4
  40d026:	d8fa      	bhi.n	40d01e <memset+0x6a>
  40d028:	1f22      	subs	r2, r4, #4
  40d02a:	f022 0203 	bic.w	r2, r2, #3
  40d02e:	3204      	adds	r2, #4
  40d030:	4413      	add	r3, r2
  40d032:	f004 0403 	and.w	r4, r4, #3
  40d036:	b12c      	cbz	r4, 40d044 <memset+0x90>
  40d038:	b2c9      	uxtb	r1, r1
  40d03a:	441c      	add	r4, r3
  40d03c:	f803 1b01 	strb.w	r1, [r3], #1
  40d040:	429c      	cmp	r4, r3
  40d042:	d1fb      	bne.n	40d03c <memset+0x88>
  40d044:	bc70      	pop	{r4, r5, r6}
  40d046:	4770      	bx	lr
  40d048:	4614      	mov	r4, r2
  40d04a:	4603      	mov	r3, r0
  40d04c:	e7c2      	b.n	40cfd4 <memset+0x20>
  40d04e:	bf00      	nop

0040d050 <setbuf>:
  40d050:	2900      	cmp	r1, #0
  40d052:	bf0c      	ite	eq
  40d054:	2202      	moveq	r2, #2
  40d056:	2200      	movne	r2, #0
  40d058:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40d05c:	f000 b800 	b.w	40d060 <setvbuf>

0040d060 <setvbuf>:
  40d060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40d064:	4c61      	ldr	r4, [pc, #388]	; (40d1ec <setvbuf+0x18c>)
  40d066:	6825      	ldr	r5, [r4, #0]
  40d068:	b083      	sub	sp, #12
  40d06a:	4604      	mov	r4, r0
  40d06c:	460f      	mov	r7, r1
  40d06e:	4690      	mov	r8, r2
  40d070:	461e      	mov	r6, r3
  40d072:	b115      	cbz	r5, 40d07a <setvbuf+0x1a>
  40d074:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40d076:	2b00      	cmp	r3, #0
  40d078:	d064      	beq.n	40d144 <setvbuf+0xe4>
  40d07a:	f1b8 0f02 	cmp.w	r8, #2
  40d07e:	d006      	beq.n	40d08e <setvbuf+0x2e>
  40d080:	f1b8 0f01 	cmp.w	r8, #1
  40d084:	f200 809f 	bhi.w	40d1c6 <setvbuf+0x166>
  40d088:	2e00      	cmp	r6, #0
  40d08a:	f2c0 809c 	blt.w	40d1c6 <setvbuf+0x166>
  40d08e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40d090:	07d8      	lsls	r0, r3, #31
  40d092:	d534      	bpl.n	40d0fe <setvbuf+0x9e>
  40d094:	4621      	mov	r1, r4
  40d096:	4628      	mov	r0, r5
  40d098:	f001 f888 	bl	40e1ac <_fflush_r>
  40d09c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40d09e:	b141      	cbz	r1, 40d0b2 <setvbuf+0x52>
  40d0a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40d0a4:	4299      	cmp	r1, r3
  40d0a6:	d002      	beq.n	40d0ae <setvbuf+0x4e>
  40d0a8:	4628      	mov	r0, r5
  40d0aa:	f001 f9fd 	bl	40e4a8 <_free_r>
  40d0ae:	2300      	movs	r3, #0
  40d0b0:	6323      	str	r3, [r4, #48]	; 0x30
  40d0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d0b6:	2200      	movs	r2, #0
  40d0b8:	61a2      	str	r2, [r4, #24]
  40d0ba:	6062      	str	r2, [r4, #4]
  40d0bc:	061a      	lsls	r2, r3, #24
  40d0be:	d43a      	bmi.n	40d136 <setvbuf+0xd6>
  40d0c0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40d0c4:	f023 0303 	bic.w	r3, r3, #3
  40d0c8:	f1b8 0f02 	cmp.w	r8, #2
  40d0cc:	81a3      	strh	r3, [r4, #12]
  40d0ce:	d01d      	beq.n	40d10c <setvbuf+0xac>
  40d0d0:	ab01      	add	r3, sp, #4
  40d0d2:	466a      	mov	r2, sp
  40d0d4:	4621      	mov	r1, r4
  40d0d6:	4628      	mov	r0, r5
  40d0d8:	f001 fc84 	bl	40e9e4 <__swhatbuf_r>
  40d0dc:	89a3      	ldrh	r3, [r4, #12]
  40d0de:	4318      	orrs	r0, r3
  40d0e0:	81a0      	strh	r0, [r4, #12]
  40d0e2:	2e00      	cmp	r6, #0
  40d0e4:	d132      	bne.n	40d14c <setvbuf+0xec>
  40d0e6:	9e00      	ldr	r6, [sp, #0]
  40d0e8:	4630      	mov	r0, r6
  40d0ea:	f001 fcf3 	bl	40ead4 <malloc>
  40d0ee:	4607      	mov	r7, r0
  40d0f0:	2800      	cmp	r0, #0
  40d0f2:	d06b      	beq.n	40d1cc <setvbuf+0x16c>
  40d0f4:	89a3      	ldrh	r3, [r4, #12]
  40d0f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40d0fa:	81a3      	strh	r3, [r4, #12]
  40d0fc:	e028      	b.n	40d150 <setvbuf+0xf0>
  40d0fe:	89a3      	ldrh	r3, [r4, #12]
  40d100:	0599      	lsls	r1, r3, #22
  40d102:	d4c7      	bmi.n	40d094 <setvbuf+0x34>
  40d104:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40d106:	f001 fc69 	bl	40e9dc <__retarget_lock_acquire_recursive>
  40d10a:	e7c3      	b.n	40d094 <setvbuf+0x34>
  40d10c:	2500      	movs	r5, #0
  40d10e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40d110:	2600      	movs	r6, #0
  40d112:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40d116:	f043 0302 	orr.w	r3, r3, #2
  40d11a:	2001      	movs	r0, #1
  40d11c:	60a6      	str	r6, [r4, #8]
  40d11e:	07ce      	lsls	r6, r1, #31
  40d120:	81a3      	strh	r3, [r4, #12]
  40d122:	6022      	str	r2, [r4, #0]
  40d124:	6122      	str	r2, [r4, #16]
  40d126:	6160      	str	r0, [r4, #20]
  40d128:	d401      	bmi.n	40d12e <setvbuf+0xce>
  40d12a:	0598      	lsls	r0, r3, #22
  40d12c:	d53e      	bpl.n	40d1ac <setvbuf+0x14c>
  40d12e:	4628      	mov	r0, r5
  40d130:	b003      	add	sp, #12
  40d132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d136:	6921      	ldr	r1, [r4, #16]
  40d138:	4628      	mov	r0, r5
  40d13a:	f001 f9b5 	bl	40e4a8 <_free_r>
  40d13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d142:	e7bd      	b.n	40d0c0 <setvbuf+0x60>
  40d144:	4628      	mov	r0, r5
  40d146:	f001 f889 	bl	40e25c <__sinit>
  40d14a:	e796      	b.n	40d07a <setvbuf+0x1a>
  40d14c:	2f00      	cmp	r7, #0
  40d14e:	d0cb      	beq.n	40d0e8 <setvbuf+0x88>
  40d150:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40d152:	2b00      	cmp	r3, #0
  40d154:	d033      	beq.n	40d1be <setvbuf+0x15e>
  40d156:	9b00      	ldr	r3, [sp, #0]
  40d158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d15c:	6027      	str	r7, [r4, #0]
  40d15e:	429e      	cmp	r6, r3
  40d160:	bf1c      	itt	ne
  40d162:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40d166:	81a2      	strhne	r2, [r4, #12]
  40d168:	f1b8 0f01 	cmp.w	r8, #1
  40d16c:	bf04      	itt	eq
  40d16e:	f042 0201 	orreq.w	r2, r2, #1
  40d172:	81a2      	strheq	r2, [r4, #12]
  40d174:	b292      	uxth	r2, r2
  40d176:	f012 0308 	ands.w	r3, r2, #8
  40d17a:	6127      	str	r7, [r4, #16]
  40d17c:	6166      	str	r6, [r4, #20]
  40d17e:	d00e      	beq.n	40d19e <setvbuf+0x13e>
  40d180:	07d1      	lsls	r1, r2, #31
  40d182:	d51a      	bpl.n	40d1ba <setvbuf+0x15a>
  40d184:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40d186:	4276      	negs	r6, r6
  40d188:	2300      	movs	r3, #0
  40d18a:	f015 0501 	ands.w	r5, r5, #1
  40d18e:	61a6      	str	r6, [r4, #24]
  40d190:	60a3      	str	r3, [r4, #8]
  40d192:	d009      	beq.n	40d1a8 <setvbuf+0x148>
  40d194:	2500      	movs	r5, #0
  40d196:	4628      	mov	r0, r5
  40d198:	b003      	add	sp, #12
  40d19a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d19e:	60a3      	str	r3, [r4, #8]
  40d1a0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40d1a2:	f015 0501 	ands.w	r5, r5, #1
  40d1a6:	d1f5      	bne.n	40d194 <setvbuf+0x134>
  40d1a8:	0593      	lsls	r3, r2, #22
  40d1aa:	d4c0      	bmi.n	40d12e <setvbuf+0xce>
  40d1ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40d1ae:	f001 fc17 	bl	40e9e0 <__retarget_lock_release_recursive>
  40d1b2:	4628      	mov	r0, r5
  40d1b4:	b003      	add	sp, #12
  40d1b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d1ba:	60a6      	str	r6, [r4, #8]
  40d1bc:	e7f0      	b.n	40d1a0 <setvbuf+0x140>
  40d1be:	4628      	mov	r0, r5
  40d1c0:	f001 f84c 	bl	40e25c <__sinit>
  40d1c4:	e7c7      	b.n	40d156 <setvbuf+0xf6>
  40d1c6:	f04f 35ff 	mov.w	r5, #4294967295
  40d1ca:	e7b0      	b.n	40d12e <setvbuf+0xce>
  40d1cc:	f8dd 9000 	ldr.w	r9, [sp]
  40d1d0:	45b1      	cmp	r9, r6
  40d1d2:	d004      	beq.n	40d1de <setvbuf+0x17e>
  40d1d4:	4648      	mov	r0, r9
  40d1d6:	f001 fc7d 	bl	40ead4 <malloc>
  40d1da:	4607      	mov	r7, r0
  40d1dc:	b920      	cbnz	r0, 40d1e8 <setvbuf+0x188>
  40d1de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d1e2:	f04f 35ff 	mov.w	r5, #4294967295
  40d1e6:	e792      	b.n	40d10e <setvbuf+0xae>
  40d1e8:	464e      	mov	r6, r9
  40d1ea:	e783      	b.n	40d0f4 <setvbuf+0x94>
  40d1ec:	20400184 	.word	0x20400184

0040d1f0 <__sprint_r.part.0>:
  40d1f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d1f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40d1f6:	049c      	lsls	r4, r3, #18
  40d1f8:	4693      	mov	fp, r2
  40d1fa:	d52f      	bpl.n	40d25c <__sprint_r.part.0+0x6c>
  40d1fc:	6893      	ldr	r3, [r2, #8]
  40d1fe:	6812      	ldr	r2, [r2, #0]
  40d200:	b353      	cbz	r3, 40d258 <__sprint_r.part.0+0x68>
  40d202:	460e      	mov	r6, r1
  40d204:	4607      	mov	r7, r0
  40d206:	f102 0908 	add.w	r9, r2, #8
  40d20a:	e919 0420 	ldmdb	r9, {r5, sl}
  40d20e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40d212:	d017      	beq.n	40d244 <__sprint_r.part.0+0x54>
  40d214:	3d04      	subs	r5, #4
  40d216:	2400      	movs	r4, #0
  40d218:	e001      	b.n	40d21e <__sprint_r.part.0+0x2e>
  40d21a:	45a0      	cmp	r8, r4
  40d21c:	d010      	beq.n	40d240 <__sprint_r.part.0+0x50>
  40d21e:	4632      	mov	r2, r6
  40d220:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40d224:	4638      	mov	r0, r7
  40d226:	f001 f8bb 	bl	40e3a0 <_fputwc_r>
  40d22a:	1c43      	adds	r3, r0, #1
  40d22c:	f104 0401 	add.w	r4, r4, #1
  40d230:	d1f3      	bne.n	40d21a <__sprint_r.part.0+0x2a>
  40d232:	2300      	movs	r3, #0
  40d234:	f8cb 3008 	str.w	r3, [fp, #8]
  40d238:	f8cb 3004 	str.w	r3, [fp, #4]
  40d23c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d240:	f8db 3008 	ldr.w	r3, [fp, #8]
  40d244:	f02a 0a03 	bic.w	sl, sl, #3
  40d248:	eba3 030a 	sub.w	r3, r3, sl
  40d24c:	f8cb 3008 	str.w	r3, [fp, #8]
  40d250:	f109 0908 	add.w	r9, r9, #8
  40d254:	2b00      	cmp	r3, #0
  40d256:	d1d8      	bne.n	40d20a <__sprint_r.part.0+0x1a>
  40d258:	2000      	movs	r0, #0
  40d25a:	e7ea      	b.n	40d232 <__sprint_r.part.0+0x42>
  40d25c:	f001 fa0a 	bl	40e674 <__sfvwrite_r>
  40d260:	2300      	movs	r3, #0
  40d262:	f8cb 3008 	str.w	r3, [fp, #8]
  40d266:	f8cb 3004 	str.w	r3, [fp, #4]
  40d26a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d26e:	bf00      	nop

0040d270 <_vfiprintf_r>:
  40d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d274:	b0ad      	sub	sp, #180	; 0xb4
  40d276:	461d      	mov	r5, r3
  40d278:	468b      	mov	fp, r1
  40d27a:	4690      	mov	r8, r2
  40d27c:	9307      	str	r3, [sp, #28]
  40d27e:	9006      	str	r0, [sp, #24]
  40d280:	b118      	cbz	r0, 40d28a <_vfiprintf_r+0x1a>
  40d282:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d284:	2b00      	cmp	r3, #0
  40d286:	f000 80f3 	beq.w	40d470 <_vfiprintf_r+0x200>
  40d28a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40d28e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40d292:	07df      	lsls	r7, r3, #31
  40d294:	b281      	uxth	r1, r0
  40d296:	d402      	bmi.n	40d29e <_vfiprintf_r+0x2e>
  40d298:	058e      	lsls	r6, r1, #22
  40d29a:	f140 80fc 	bpl.w	40d496 <_vfiprintf_r+0x226>
  40d29e:	048c      	lsls	r4, r1, #18
  40d2a0:	d40a      	bmi.n	40d2b8 <_vfiprintf_r+0x48>
  40d2a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40d2a6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40d2aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40d2ae:	f8ab 100c 	strh.w	r1, [fp, #12]
  40d2b2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40d2b6:	b289      	uxth	r1, r1
  40d2b8:	0708      	lsls	r0, r1, #28
  40d2ba:	f140 80b3 	bpl.w	40d424 <_vfiprintf_r+0x1b4>
  40d2be:	f8db 3010 	ldr.w	r3, [fp, #16]
  40d2c2:	2b00      	cmp	r3, #0
  40d2c4:	f000 80ae 	beq.w	40d424 <_vfiprintf_r+0x1b4>
  40d2c8:	f001 031a 	and.w	r3, r1, #26
  40d2cc:	2b0a      	cmp	r3, #10
  40d2ce:	f000 80b5 	beq.w	40d43c <_vfiprintf_r+0x1cc>
  40d2d2:	2300      	movs	r3, #0
  40d2d4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  40d2d8:	930b      	str	r3, [sp, #44]	; 0x2c
  40d2da:	9311      	str	r3, [sp, #68]	; 0x44
  40d2dc:	9310      	str	r3, [sp, #64]	; 0x40
  40d2de:	9303      	str	r3, [sp, #12]
  40d2e0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40d2e4:	46ca      	mov	sl, r9
  40d2e6:	f8cd b010 	str.w	fp, [sp, #16]
  40d2ea:	f898 3000 	ldrb.w	r3, [r8]
  40d2ee:	4644      	mov	r4, r8
  40d2f0:	b1fb      	cbz	r3, 40d332 <_vfiprintf_r+0xc2>
  40d2f2:	2b25      	cmp	r3, #37	; 0x25
  40d2f4:	d102      	bne.n	40d2fc <_vfiprintf_r+0x8c>
  40d2f6:	e01c      	b.n	40d332 <_vfiprintf_r+0xc2>
  40d2f8:	2b25      	cmp	r3, #37	; 0x25
  40d2fa:	d003      	beq.n	40d304 <_vfiprintf_r+0x94>
  40d2fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40d300:	2b00      	cmp	r3, #0
  40d302:	d1f9      	bne.n	40d2f8 <_vfiprintf_r+0x88>
  40d304:	eba4 0508 	sub.w	r5, r4, r8
  40d308:	b19d      	cbz	r5, 40d332 <_vfiprintf_r+0xc2>
  40d30a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d30c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d30e:	f8ca 8000 	str.w	r8, [sl]
  40d312:	3301      	adds	r3, #1
  40d314:	442a      	add	r2, r5
  40d316:	2b07      	cmp	r3, #7
  40d318:	f8ca 5004 	str.w	r5, [sl, #4]
  40d31c:	9211      	str	r2, [sp, #68]	; 0x44
  40d31e:	9310      	str	r3, [sp, #64]	; 0x40
  40d320:	dd7a      	ble.n	40d418 <_vfiprintf_r+0x1a8>
  40d322:	2a00      	cmp	r2, #0
  40d324:	f040 84b0 	bne.w	40dc88 <_vfiprintf_r+0xa18>
  40d328:	9b03      	ldr	r3, [sp, #12]
  40d32a:	9210      	str	r2, [sp, #64]	; 0x40
  40d32c:	442b      	add	r3, r5
  40d32e:	46ca      	mov	sl, r9
  40d330:	9303      	str	r3, [sp, #12]
  40d332:	7823      	ldrb	r3, [r4, #0]
  40d334:	2b00      	cmp	r3, #0
  40d336:	f000 83e0 	beq.w	40dafa <_vfiprintf_r+0x88a>
  40d33a:	2000      	movs	r0, #0
  40d33c:	f04f 0300 	mov.w	r3, #0
  40d340:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40d344:	f104 0801 	add.w	r8, r4, #1
  40d348:	7862      	ldrb	r2, [r4, #1]
  40d34a:	4605      	mov	r5, r0
  40d34c:	4606      	mov	r6, r0
  40d34e:	4603      	mov	r3, r0
  40d350:	f04f 34ff 	mov.w	r4, #4294967295
  40d354:	f108 0801 	add.w	r8, r8, #1
  40d358:	f1a2 0120 	sub.w	r1, r2, #32
  40d35c:	2958      	cmp	r1, #88	; 0x58
  40d35e:	f200 82de 	bhi.w	40d91e <_vfiprintf_r+0x6ae>
  40d362:	e8df f011 	tbh	[pc, r1, lsl #1]
  40d366:	0221      	.short	0x0221
  40d368:	02dc02dc 	.word	0x02dc02dc
  40d36c:	02dc0229 	.word	0x02dc0229
  40d370:	02dc02dc 	.word	0x02dc02dc
  40d374:	02dc02dc 	.word	0x02dc02dc
  40d378:	028902dc 	.word	0x028902dc
  40d37c:	02dc0295 	.word	0x02dc0295
  40d380:	02bd00a2 	.word	0x02bd00a2
  40d384:	019f02dc 	.word	0x019f02dc
  40d388:	01a401a4 	.word	0x01a401a4
  40d38c:	01a401a4 	.word	0x01a401a4
  40d390:	01a401a4 	.word	0x01a401a4
  40d394:	01a401a4 	.word	0x01a401a4
  40d398:	02dc01a4 	.word	0x02dc01a4
  40d39c:	02dc02dc 	.word	0x02dc02dc
  40d3a0:	02dc02dc 	.word	0x02dc02dc
  40d3a4:	02dc02dc 	.word	0x02dc02dc
  40d3a8:	02dc02dc 	.word	0x02dc02dc
  40d3ac:	01b202dc 	.word	0x01b202dc
  40d3b0:	02dc02dc 	.word	0x02dc02dc
  40d3b4:	02dc02dc 	.word	0x02dc02dc
  40d3b8:	02dc02dc 	.word	0x02dc02dc
  40d3bc:	02dc02dc 	.word	0x02dc02dc
  40d3c0:	02dc02dc 	.word	0x02dc02dc
  40d3c4:	02dc0197 	.word	0x02dc0197
  40d3c8:	02dc02dc 	.word	0x02dc02dc
  40d3cc:	02dc02dc 	.word	0x02dc02dc
  40d3d0:	02dc019b 	.word	0x02dc019b
  40d3d4:	025302dc 	.word	0x025302dc
  40d3d8:	02dc02dc 	.word	0x02dc02dc
  40d3dc:	02dc02dc 	.word	0x02dc02dc
  40d3e0:	02dc02dc 	.word	0x02dc02dc
  40d3e4:	02dc02dc 	.word	0x02dc02dc
  40d3e8:	02dc02dc 	.word	0x02dc02dc
  40d3ec:	021b025a 	.word	0x021b025a
  40d3f0:	02dc02dc 	.word	0x02dc02dc
  40d3f4:	026e02dc 	.word	0x026e02dc
  40d3f8:	02dc021b 	.word	0x02dc021b
  40d3fc:	027302dc 	.word	0x027302dc
  40d400:	01f502dc 	.word	0x01f502dc
  40d404:	02090182 	.word	0x02090182
  40d408:	02dc02d7 	.word	0x02dc02d7
  40d40c:	02dc029a 	.word	0x02dc029a
  40d410:	02dc00a7 	.word	0x02dc00a7
  40d414:	022e02dc 	.word	0x022e02dc
  40d418:	f10a 0a08 	add.w	sl, sl, #8
  40d41c:	9b03      	ldr	r3, [sp, #12]
  40d41e:	442b      	add	r3, r5
  40d420:	9303      	str	r3, [sp, #12]
  40d422:	e786      	b.n	40d332 <_vfiprintf_r+0xc2>
  40d424:	4659      	mov	r1, fp
  40d426:	9806      	ldr	r0, [sp, #24]
  40d428:	f000 fdac 	bl	40df84 <__swsetup_r>
  40d42c:	bb18      	cbnz	r0, 40d476 <_vfiprintf_r+0x206>
  40d42e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40d432:	f001 031a 	and.w	r3, r1, #26
  40d436:	2b0a      	cmp	r3, #10
  40d438:	f47f af4b 	bne.w	40d2d2 <_vfiprintf_r+0x62>
  40d43c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40d440:	2b00      	cmp	r3, #0
  40d442:	f6ff af46 	blt.w	40d2d2 <_vfiprintf_r+0x62>
  40d446:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40d44a:	07db      	lsls	r3, r3, #31
  40d44c:	d405      	bmi.n	40d45a <_vfiprintf_r+0x1ea>
  40d44e:	058f      	lsls	r7, r1, #22
  40d450:	d403      	bmi.n	40d45a <_vfiprintf_r+0x1ea>
  40d452:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40d456:	f001 fac3 	bl	40e9e0 <__retarget_lock_release_recursive>
  40d45a:	462b      	mov	r3, r5
  40d45c:	4642      	mov	r2, r8
  40d45e:	4659      	mov	r1, fp
  40d460:	9806      	ldr	r0, [sp, #24]
  40d462:	f000 fd4d 	bl	40df00 <__sbprintf>
  40d466:	9003      	str	r0, [sp, #12]
  40d468:	9803      	ldr	r0, [sp, #12]
  40d46a:	b02d      	add	sp, #180	; 0xb4
  40d46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d470:	f000 fef4 	bl	40e25c <__sinit>
  40d474:	e709      	b.n	40d28a <_vfiprintf_r+0x1a>
  40d476:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40d47a:	07d9      	lsls	r1, r3, #31
  40d47c:	d404      	bmi.n	40d488 <_vfiprintf_r+0x218>
  40d47e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40d482:	059a      	lsls	r2, r3, #22
  40d484:	f140 84aa 	bpl.w	40dddc <_vfiprintf_r+0xb6c>
  40d488:	f04f 33ff 	mov.w	r3, #4294967295
  40d48c:	9303      	str	r3, [sp, #12]
  40d48e:	9803      	ldr	r0, [sp, #12]
  40d490:	b02d      	add	sp, #180	; 0xb4
  40d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d496:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40d49a:	f001 fa9f 	bl	40e9dc <__retarget_lock_acquire_recursive>
  40d49e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40d4a2:	b281      	uxth	r1, r0
  40d4a4:	e6fb      	b.n	40d29e <_vfiprintf_r+0x2e>
  40d4a6:	4276      	negs	r6, r6
  40d4a8:	9207      	str	r2, [sp, #28]
  40d4aa:	f043 0304 	orr.w	r3, r3, #4
  40d4ae:	f898 2000 	ldrb.w	r2, [r8]
  40d4b2:	e74f      	b.n	40d354 <_vfiprintf_r+0xe4>
  40d4b4:	9608      	str	r6, [sp, #32]
  40d4b6:	069e      	lsls	r6, r3, #26
  40d4b8:	f100 8450 	bmi.w	40dd5c <_vfiprintf_r+0xaec>
  40d4bc:	9907      	ldr	r1, [sp, #28]
  40d4be:	06dd      	lsls	r5, r3, #27
  40d4c0:	460a      	mov	r2, r1
  40d4c2:	f100 83ef 	bmi.w	40dca4 <_vfiprintf_r+0xa34>
  40d4c6:	0658      	lsls	r0, r3, #25
  40d4c8:	f140 83ec 	bpl.w	40dca4 <_vfiprintf_r+0xa34>
  40d4cc:	880e      	ldrh	r6, [r1, #0]
  40d4ce:	3104      	adds	r1, #4
  40d4d0:	2700      	movs	r7, #0
  40d4d2:	2201      	movs	r2, #1
  40d4d4:	9107      	str	r1, [sp, #28]
  40d4d6:	f04f 0100 	mov.w	r1, #0
  40d4da:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40d4de:	2500      	movs	r5, #0
  40d4e0:	1c61      	adds	r1, r4, #1
  40d4e2:	f000 8116 	beq.w	40d712 <_vfiprintf_r+0x4a2>
  40d4e6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40d4ea:	9102      	str	r1, [sp, #8]
  40d4ec:	ea56 0107 	orrs.w	r1, r6, r7
  40d4f0:	f040 8114 	bne.w	40d71c <_vfiprintf_r+0x4ac>
  40d4f4:	2c00      	cmp	r4, #0
  40d4f6:	f040 835c 	bne.w	40dbb2 <_vfiprintf_r+0x942>
  40d4fa:	2a00      	cmp	r2, #0
  40d4fc:	f040 83b7 	bne.w	40dc6e <_vfiprintf_r+0x9fe>
  40d500:	f013 0301 	ands.w	r3, r3, #1
  40d504:	9305      	str	r3, [sp, #20]
  40d506:	f000 8457 	beq.w	40ddb8 <_vfiprintf_r+0xb48>
  40d50a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40d50e:	2330      	movs	r3, #48	; 0x30
  40d510:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40d514:	9b05      	ldr	r3, [sp, #20]
  40d516:	42a3      	cmp	r3, r4
  40d518:	bfb8      	it	lt
  40d51a:	4623      	movlt	r3, r4
  40d51c:	9301      	str	r3, [sp, #4]
  40d51e:	b10d      	cbz	r5, 40d524 <_vfiprintf_r+0x2b4>
  40d520:	3301      	adds	r3, #1
  40d522:	9301      	str	r3, [sp, #4]
  40d524:	9b02      	ldr	r3, [sp, #8]
  40d526:	f013 0302 	ands.w	r3, r3, #2
  40d52a:	9309      	str	r3, [sp, #36]	; 0x24
  40d52c:	d002      	beq.n	40d534 <_vfiprintf_r+0x2c4>
  40d52e:	9b01      	ldr	r3, [sp, #4]
  40d530:	3302      	adds	r3, #2
  40d532:	9301      	str	r3, [sp, #4]
  40d534:	9b02      	ldr	r3, [sp, #8]
  40d536:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40d53a:	930a      	str	r3, [sp, #40]	; 0x28
  40d53c:	f040 8217 	bne.w	40d96e <_vfiprintf_r+0x6fe>
  40d540:	9b08      	ldr	r3, [sp, #32]
  40d542:	9a01      	ldr	r2, [sp, #4]
  40d544:	1a9d      	subs	r5, r3, r2
  40d546:	2d00      	cmp	r5, #0
  40d548:	f340 8211 	ble.w	40d96e <_vfiprintf_r+0x6fe>
  40d54c:	2d10      	cmp	r5, #16
  40d54e:	f340 8490 	ble.w	40de72 <_vfiprintf_r+0xc02>
  40d552:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d554:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d556:	4ec4      	ldr	r6, [pc, #784]	; (40d868 <_vfiprintf_r+0x5f8>)
  40d558:	46d6      	mov	lr, sl
  40d55a:	2710      	movs	r7, #16
  40d55c:	46a2      	mov	sl, r4
  40d55e:	4619      	mov	r1, r3
  40d560:	9c06      	ldr	r4, [sp, #24]
  40d562:	e007      	b.n	40d574 <_vfiprintf_r+0x304>
  40d564:	f101 0c02 	add.w	ip, r1, #2
  40d568:	f10e 0e08 	add.w	lr, lr, #8
  40d56c:	4601      	mov	r1, r0
  40d56e:	3d10      	subs	r5, #16
  40d570:	2d10      	cmp	r5, #16
  40d572:	dd11      	ble.n	40d598 <_vfiprintf_r+0x328>
  40d574:	1c48      	adds	r0, r1, #1
  40d576:	3210      	adds	r2, #16
  40d578:	2807      	cmp	r0, #7
  40d57a:	9211      	str	r2, [sp, #68]	; 0x44
  40d57c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40d580:	9010      	str	r0, [sp, #64]	; 0x40
  40d582:	ddef      	ble.n	40d564 <_vfiprintf_r+0x2f4>
  40d584:	2a00      	cmp	r2, #0
  40d586:	f040 81e4 	bne.w	40d952 <_vfiprintf_r+0x6e2>
  40d58a:	3d10      	subs	r5, #16
  40d58c:	2d10      	cmp	r5, #16
  40d58e:	4611      	mov	r1, r2
  40d590:	f04f 0c01 	mov.w	ip, #1
  40d594:	46ce      	mov	lr, r9
  40d596:	dced      	bgt.n	40d574 <_vfiprintf_r+0x304>
  40d598:	4654      	mov	r4, sl
  40d59a:	4661      	mov	r1, ip
  40d59c:	46f2      	mov	sl, lr
  40d59e:	442a      	add	r2, r5
  40d5a0:	2907      	cmp	r1, #7
  40d5a2:	9211      	str	r2, [sp, #68]	; 0x44
  40d5a4:	f8ca 6000 	str.w	r6, [sl]
  40d5a8:	f8ca 5004 	str.w	r5, [sl, #4]
  40d5ac:	9110      	str	r1, [sp, #64]	; 0x40
  40d5ae:	f300 82ec 	bgt.w	40db8a <_vfiprintf_r+0x91a>
  40d5b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d5b6:	f10a 0a08 	add.w	sl, sl, #8
  40d5ba:	1c48      	adds	r0, r1, #1
  40d5bc:	2d00      	cmp	r5, #0
  40d5be:	f040 81de 	bne.w	40d97e <_vfiprintf_r+0x70e>
  40d5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d5c4:	2b00      	cmp	r3, #0
  40d5c6:	f000 81f8 	beq.w	40d9ba <_vfiprintf_r+0x74a>
  40d5ca:	3202      	adds	r2, #2
  40d5cc:	a90e      	add	r1, sp, #56	; 0x38
  40d5ce:	2302      	movs	r3, #2
  40d5d0:	2807      	cmp	r0, #7
  40d5d2:	9211      	str	r2, [sp, #68]	; 0x44
  40d5d4:	9010      	str	r0, [sp, #64]	; 0x40
  40d5d6:	e88a 000a 	stmia.w	sl, {r1, r3}
  40d5da:	f340 81ea 	ble.w	40d9b2 <_vfiprintf_r+0x742>
  40d5de:	2a00      	cmp	r2, #0
  40d5e0:	f040 838c 	bne.w	40dcfc <_vfiprintf_r+0xa8c>
  40d5e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d5e6:	2b80      	cmp	r3, #128	; 0x80
  40d5e8:	f04f 0001 	mov.w	r0, #1
  40d5ec:	4611      	mov	r1, r2
  40d5ee:	46ca      	mov	sl, r9
  40d5f0:	f040 81e7 	bne.w	40d9c2 <_vfiprintf_r+0x752>
  40d5f4:	9b08      	ldr	r3, [sp, #32]
  40d5f6:	9d01      	ldr	r5, [sp, #4]
  40d5f8:	1b5e      	subs	r6, r3, r5
  40d5fa:	2e00      	cmp	r6, #0
  40d5fc:	f340 81e1 	ble.w	40d9c2 <_vfiprintf_r+0x752>
  40d600:	2e10      	cmp	r6, #16
  40d602:	4d9a      	ldr	r5, [pc, #616]	; (40d86c <_vfiprintf_r+0x5fc>)
  40d604:	f340 8450 	ble.w	40dea8 <_vfiprintf_r+0xc38>
  40d608:	46d4      	mov	ip, sl
  40d60a:	2710      	movs	r7, #16
  40d60c:	46a2      	mov	sl, r4
  40d60e:	9c06      	ldr	r4, [sp, #24]
  40d610:	e007      	b.n	40d622 <_vfiprintf_r+0x3b2>
  40d612:	f101 0e02 	add.w	lr, r1, #2
  40d616:	f10c 0c08 	add.w	ip, ip, #8
  40d61a:	4601      	mov	r1, r0
  40d61c:	3e10      	subs	r6, #16
  40d61e:	2e10      	cmp	r6, #16
  40d620:	dd11      	ble.n	40d646 <_vfiprintf_r+0x3d6>
  40d622:	1c48      	adds	r0, r1, #1
  40d624:	3210      	adds	r2, #16
  40d626:	2807      	cmp	r0, #7
  40d628:	9211      	str	r2, [sp, #68]	; 0x44
  40d62a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40d62e:	9010      	str	r0, [sp, #64]	; 0x40
  40d630:	ddef      	ble.n	40d612 <_vfiprintf_r+0x3a2>
  40d632:	2a00      	cmp	r2, #0
  40d634:	f040 829d 	bne.w	40db72 <_vfiprintf_r+0x902>
  40d638:	3e10      	subs	r6, #16
  40d63a:	2e10      	cmp	r6, #16
  40d63c:	f04f 0e01 	mov.w	lr, #1
  40d640:	4611      	mov	r1, r2
  40d642:	46cc      	mov	ip, r9
  40d644:	dced      	bgt.n	40d622 <_vfiprintf_r+0x3b2>
  40d646:	4654      	mov	r4, sl
  40d648:	46e2      	mov	sl, ip
  40d64a:	4432      	add	r2, r6
  40d64c:	f1be 0f07 	cmp.w	lr, #7
  40d650:	9211      	str	r2, [sp, #68]	; 0x44
  40d652:	e88a 0060 	stmia.w	sl, {r5, r6}
  40d656:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40d65a:	f300 8369 	bgt.w	40dd30 <_vfiprintf_r+0xac0>
  40d65e:	f10a 0a08 	add.w	sl, sl, #8
  40d662:	f10e 0001 	add.w	r0, lr, #1
  40d666:	4671      	mov	r1, lr
  40d668:	e1ab      	b.n	40d9c2 <_vfiprintf_r+0x752>
  40d66a:	9608      	str	r6, [sp, #32]
  40d66c:	f013 0220 	ands.w	r2, r3, #32
  40d670:	f040 838c 	bne.w	40dd8c <_vfiprintf_r+0xb1c>
  40d674:	f013 0110 	ands.w	r1, r3, #16
  40d678:	f040 831a 	bne.w	40dcb0 <_vfiprintf_r+0xa40>
  40d67c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40d680:	f000 8316 	beq.w	40dcb0 <_vfiprintf_r+0xa40>
  40d684:	9807      	ldr	r0, [sp, #28]
  40d686:	460a      	mov	r2, r1
  40d688:	4601      	mov	r1, r0
  40d68a:	3104      	adds	r1, #4
  40d68c:	8806      	ldrh	r6, [r0, #0]
  40d68e:	9107      	str	r1, [sp, #28]
  40d690:	2700      	movs	r7, #0
  40d692:	e720      	b.n	40d4d6 <_vfiprintf_r+0x266>
  40d694:	9608      	str	r6, [sp, #32]
  40d696:	f043 0310 	orr.w	r3, r3, #16
  40d69a:	e7e7      	b.n	40d66c <_vfiprintf_r+0x3fc>
  40d69c:	9608      	str	r6, [sp, #32]
  40d69e:	f043 0310 	orr.w	r3, r3, #16
  40d6a2:	e708      	b.n	40d4b6 <_vfiprintf_r+0x246>
  40d6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40d6a8:	f898 2000 	ldrb.w	r2, [r8]
  40d6ac:	e652      	b.n	40d354 <_vfiprintf_r+0xe4>
  40d6ae:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40d6b2:	2600      	movs	r6, #0
  40d6b4:	f818 2b01 	ldrb.w	r2, [r8], #1
  40d6b8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40d6bc:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40d6c0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40d6c4:	2909      	cmp	r1, #9
  40d6c6:	d9f5      	bls.n	40d6b4 <_vfiprintf_r+0x444>
  40d6c8:	e646      	b.n	40d358 <_vfiprintf_r+0xe8>
  40d6ca:	9608      	str	r6, [sp, #32]
  40d6cc:	2800      	cmp	r0, #0
  40d6ce:	f040 8408 	bne.w	40dee2 <_vfiprintf_r+0xc72>
  40d6d2:	f043 0310 	orr.w	r3, r3, #16
  40d6d6:	069e      	lsls	r6, r3, #26
  40d6d8:	f100 834c 	bmi.w	40dd74 <_vfiprintf_r+0xb04>
  40d6dc:	06dd      	lsls	r5, r3, #27
  40d6de:	f100 82f3 	bmi.w	40dcc8 <_vfiprintf_r+0xa58>
  40d6e2:	0658      	lsls	r0, r3, #25
  40d6e4:	f140 82f0 	bpl.w	40dcc8 <_vfiprintf_r+0xa58>
  40d6e8:	9d07      	ldr	r5, [sp, #28]
  40d6ea:	f9b5 6000 	ldrsh.w	r6, [r5]
  40d6ee:	462a      	mov	r2, r5
  40d6f0:	17f7      	asrs	r7, r6, #31
  40d6f2:	3204      	adds	r2, #4
  40d6f4:	4630      	mov	r0, r6
  40d6f6:	4639      	mov	r1, r7
  40d6f8:	9207      	str	r2, [sp, #28]
  40d6fa:	2800      	cmp	r0, #0
  40d6fc:	f171 0200 	sbcs.w	r2, r1, #0
  40d700:	f2c0 835d 	blt.w	40ddbe <_vfiprintf_r+0xb4e>
  40d704:	1c61      	adds	r1, r4, #1
  40d706:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d70a:	f04f 0201 	mov.w	r2, #1
  40d70e:	f47f aeea 	bne.w	40d4e6 <_vfiprintf_r+0x276>
  40d712:	ea56 0107 	orrs.w	r1, r6, r7
  40d716:	f000 824d 	beq.w	40dbb4 <_vfiprintf_r+0x944>
  40d71a:	9302      	str	r3, [sp, #8]
  40d71c:	2a01      	cmp	r2, #1
  40d71e:	f000 828c 	beq.w	40dc3a <_vfiprintf_r+0x9ca>
  40d722:	2a02      	cmp	r2, #2
  40d724:	f040 825c 	bne.w	40dbe0 <_vfiprintf_r+0x970>
  40d728:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d72a:	46cb      	mov	fp, r9
  40d72c:	0933      	lsrs	r3, r6, #4
  40d72e:	f006 010f 	and.w	r1, r6, #15
  40d732:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40d736:	093a      	lsrs	r2, r7, #4
  40d738:	461e      	mov	r6, r3
  40d73a:	4617      	mov	r7, r2
  40d73c:	5c43      	ldrb	r3, [r0, r1]
  40d73e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40d742:	ea56 0307 	orrs.w	r3, r6, r7
  40d746:	d1f1      	bne.n	40d72c <_vfiprintf_r+0x4bc>
  40d748:	eba9 030b 	sub.w	r3, r9, fp
  40d74c:	9305      	str	r3, [sp, #20]
  40d74e:	e6e1      	b.n	40d514 <_vfiprintf_r+0x2a4>
  40d750:	2800      	cmp	r0, #0
  40d752:	f040 83c0 	bne.w	40ded6 <_vfiprintf_r+0xc66>
  40d756:	0699      	lsls	r1, r3, #26
  40d758:	f100 8367 	bmi.w	40de2a <_vfiprintf_r+0xbba>
  40d75c:	06da      	lsls	r2, r3, #27
  40d75e:	f100 80f1 	bmi.w	40d944 <_vfiprintf_r+0x6d4>
  40d762:	065b      	lsls	r3, r3, #25
  40d764:	f140 80ee 	bpl.w	40d944 <_vfiprintf_r+0x6d4>
  40d768:	9a07      	ldr	r2, [sp, #28]
  40d76a:	6813      	ldr	r3, [r2, #0]
  40d76c:	3204      	adds	r2, #4
  40d76e:	9207      	str	r2, [sp, #28]
  40d770:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40d774:	801a      	strh	r2, [r3, #0]
  40d776:	e5b8      	b.n	40d2ea <_vfiprintf_r+0x7a>
  40d778:	9807      	ldr	r0, [sp, #28]
  40d77a:	4a3d      	ldr	r2, [pc, #244]	; (40d870 <_vfiprintf_r+0x600>)
  40d77c:	9608      	str	r6, [sp, #32]
  40d77e:	920b      	str	r2, [sp, #44]	; 0x2c
  40d780:	6806      	ldr	r6, [r0, #0]
  40d782:	2278      	movs	r2, #120	; 0x78
  40d784:	2130      	movs	r1, #48	; 0x30
  40d786:	3004      	adds	r0, #4
  40d788:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40d78c:	f043 0302 	orr.w	r3, r3, #2
  40d790:	9007      	str	r0, [sp, #28]
  40d792:	2700      	movs	r7, #0
  40d794:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40d798:	2202      	movs	r2, #2
  40d79a:	e69c      	b.n	40d4d6 <_vfiprintf_r+0x266>
  40d79c:	9608      	str	r6, [sp, #32]
  40d79e:	2800      	cmp	r0, #0
  40d7a0:	d099      	beq.n	40d6d6 <_vfiprintf_r+0x466>
  40d7a2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40d7a6:	e796      	b.n	40d6d6 <_vfiprintf_r+0x466>
  40d7a8:	f898 2000 	ldrb.w	r2, [r8]
  40d7ac:	2d00      	cmp	r5, #0
  40d7ae:	f47f add1 	bne.w	40d354 <_vfiprintf_r+0xe4>
  40d7b2:	2001      	movs	r0, #1
  40d7b4:	2520      	movs	r5, #32
  40d7b6:	e5cd      	b.n	40d354 <_vfiprintf_r+0xe4>
  40d7b8:	f043 0301 	orr.w	r3, r3, #1
  40d7bc:	f898 2000 	ldrb.w	r2, [r8]
  40d7c0:	e5c8      	b.n	40d354 <_vfiprintf_r+0xe4>
  40d7c2:	9608      	str	r6, [sp, #32]
  40d7c4:	2800      	cmp	r0, #0
  40d7c6:	f040 8393 	bne.w	40def0 <_vfiprintf_r+0xc80>
  40d7ca:	4929      	ldr	r1, [pc, #164]	; (40d870 <_vfiprintf_r+0x600>)
  40d7cc:	910b      	str	r1, [sp, #44]	; 0x2c
  40d7ce:	069f      	lsls	r7, r3, #26
  40d7d0:	f100 82e8 	bmi.w	40dda4 <_vfiprintf_r+0xb34>
  40d7d4:	9807      	ldr	r0, [sp, #28]
  40d7d6:	06de      	lsls	r6, r3, #27
  40d7d8:	4601      	mov	r1, r0
  40d7da:	f100 8270 	bmi.w	40dcbe <_vfiprintf_r+0xa4e>
  40d7de:	065d      	lsls	r5, r3, #25
  40d7e0:	f140 826d 	bpl.w	40dcbe <_vfiprintf_r+0xa4e>
  40d7e4:	3104      	adds	r1, #4
  40d7e6:	8806      	ldrh	r6, [r0, #0]
  40d7e8:	9107      	str	r1, [sp, #28]
  40d7ea:	2700      	movs	r7, #0
  40d7ec:	07d8      	lsls	r0, r3, #31
  40d7ee:	f140 8222 	bpl.w	40dc36 <_vfiprintf_r+0x9c6>
  40d7f2:	ea56 0107 	orrs.w	r1, r6, r7
  40d7f6:	f000 821e 	beq.w	40dc36 <_vfiprintf_r+0x9c6>
  40d7fa:	2130      	movs	r1, #48	; 0x30
  40d7fc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40d800:	f043 0302 	orr.w	r3, r3, #2
  40d804:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40d808:	2202      	movs	r2, #2
  40d80a:	e664      	b.n	40d4d6 <_vfiprintf_r+0x266>
  40d80c:	9608      	str	r6, [sp, #32]
  40d80e:	2800      	cmp	r0, #0
  40d810:	f040 836b 	bne.w	40deea <_vfiprintf_r+0xc7a>
  40d814:	4917      	ldr	r1, [pc, #92]	; (40d874 <_vfiprintf_r+0x604>)
  40d816:	910b      	str	r1, [sp, #44]	; 0x2c
  40d818:	e7d9      	b.n	40d7ce <_vfiprintf_r+0x55e>
  40d81a:	9907      	ldr	r1, [sp, #28]
  40d81c:	9608      	str	r6, [sp, #32]
  40d81e:	680a      	ldr	r2, [r1, #0]
  40d820:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40d824:	f04f 0000 	mov.w	r0, #0
  40d828:	460a      	mov	r2, r1
  40d82a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40d82e:	3204      	adds	r2, #4
  40d830:	2001      	movs	r0, #1
  40d832:	9001      	str	r0, [sp, #4]
  40d834:	9207      	str	r2, [sp, #28]
  40d836:	9005      	str	r0, [sp, #20]
  40d838:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40d83c:	9302      	str	r3, [sp, #8]
  40d83e:	2400      	movs	r4, #0
  40d840:	e670      	b.n	40d524 <_vfiprintf_r+0x2b4>
  40d842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d846:	f898 2000 	ldrb.w	r2, [r8]
  40d84a:	e583      	b.n	40d354 <_vfiprintf_r+0xe4>
  40d84c:	f898 2000 	ldrb.w	r2, [r8]
  40d850:	2a6c      	cmp	r2, #108	; 0x6c
  40d852:	bf03      	ittte	eq
  40d854:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  40d858:	f043 0320 	orreq.w	r3, r3, #32
  40d85c:	f108 0801 	addeq.w	r8, r8, #1
  40d860:	f043 0310 	orrne.w	r3, r3, #16
  40d864:	e576      	b.n	40d354 <_vfiprintf_r+0xe4>
  40d866:	bf00      	nop
  40d868:	00410e04 	.word	0x00410e04
  40d86c:	00410e14 	.word	0x00410e14
  40d870:	00410de8 	.word	0x00410de8
  40d874:	00410dd4 	.word	0x00410dd4
  40d878:	9907      	ldr	r1, [sp, #28]
  40d87a:	680e      	ldr	r6, [r1, #0]
  40d87c:	460a      	mov	r2, r1
  40d87e:	2e00      	cmp	r6, #0
  40d880:	f102 0204 	add.w	r2, r2, #4
  40d884:	f6ff ae0f 	blt.w	40d4a6 <_vfiprintf_r+0x236>
  40d888:	9207      	str	r2, [sp, #28]
  40d88a:	f898 2000 	ldrb.w	r2, [r8]
  40d88e:	e561      	b.n	40d354 <_vfiprintf_r+0xe4>
  40d890:	f898 2000 	ldrb.w	r2, [r8]
  40d894:	2001      	movs	r0, #1
  40d896:	252b      	movs	r5, #43	; 0x2b
  40d898:	e55c      	b.n	40d354 <_vfiprintf_r+0xe4>
  40d89a:	9907      	ldr	r1, [sp, #28]
  40d89c:	9608      	str	r6, [sp, #32]
  40d89e:	f8d1 b000 	ldr.w	fp, [r1]
  40d8a2:	f04f 0200 	mov.w	r2, #0
  40d8a6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40d8aa:	1d0e      	adds	r6, r1, #4
  40d8ac:	f1bb 0f00 	cmp.w	fp, #0
  40d8b0:	f000 82e5 	beq.w	40de7e <_vfiprintf_r+0xc0e>
  40d8b4:	1c67      	adds	r7, r4, #1
  40d8b6:	f000 82c4 	beq.w	40de42 <_vfiprintf_r+0xbd2>
  40d8ba:	4622      	mov	r2, r4
  40d8bc:	2100      	movs	r1, #0
  40d8be:	4658      	mov	r0, fp
  40d8c0:	9301      	str	r3, [sp, #4]
  40d8c2:	f001 fbd5 	bl	40f070 <memchr>
  40d8c6:	9b01      	ldr	r3, [sp, #4]
  40d8c8:	2800      	cmp	r0, #0
  40d8ca:	f000 82e5 	beq.w	40de98 <_vfiprintf_r+0xc28>
  40d8ce:	eba0 020b 	sub.w	r2, r0, fp
  40d8d2:	9205      	str	r2, [sp, #20]
  40d8d4:	9607      	str	r6, [sp, #28]
  40d8d6:	9302      	str	r3, [sp, #8]
  40d8d8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d8dc:	2400      	movs	r4, #0
  40d8de:	e619      	b.n	40d514 <_vfiprintf_r+0x2a4>
  40d8e0:	f898 2000 	ldrb.w	r2, [r8]
  40d8e4:	2a2a      	cmp	r2, #42	; 0x2a
  40d8e6:	f108 0701 	add.w	r7, r8, #1
  40d8ea:	f000 82e9 	beq.w	40dec0 <_vfiprintf_r+0xc50>
  40d8ee:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40d8f2:	2909      	cmp	r1, #9
  40d8f4:	46b8      	mov	r8, r7
  40d8f6:	f04f 0400 	mov.w	r4, #0
  40d8fa:	f63f ad2d 	bhi.w	40d358 <_vfiprintf_r+0xe8>
  40d8fe:	f818 2b01 	ldrb.w	r2, [r8], #1
  40d902:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40d906:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40d90a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40d90e:	2909      	cmp	r1, #9
  40d910:	d9f5      	bls.n	40d8fe <_vfiprintf_r+0x68e>
  40d912:	e521      	b.n	40d358 <_vfiprintf_r+0xe8>
  40d914:	f043 0320 	orr.w	r3, r3, #32
  40d918:	f898 2000 	ldrb.w	r2, [r8]
  40d91c:	e51a      	b.n	40d354 <_vfiprintf_r+0xe4>
  40d91e:	9608      	str	r6, [sp, #32]
  40d920:	2800      	cmp	r0, #0
  40d922:	f040 82db 	bne.w	40dedc <_vfiprintf_r+0xc6c>
  40d926:	2a00      	cmp	r2, #0
  40d928:	f000 80e7 	beq.w	40dafa <_vfiprintf_r+0x88a>
  40d92c:	2101      	movs	r1, #1
  40d92e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40d932:	f04f 0200 	mov.w	r2, #0
  40d936:	9101      	str	r1, [sp, #4]
  40d938:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40d93c:	9105      	str	r1, [sp, #20]
  40d93e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40d942:	e77b      	b.n	40d83c <_vfiprintf_r+0x5cc>
  40d944:	9a07      	ldr	r2, [sp, #28]
  40d946:	6813      	ldr	r3, [r2, #0]
  40d948:	3204      	adds	r2, #4
  40d94a:	9207      	str	r2, [sp, #28]
  40d94c:	9a03      	ldr	r2, [sp, #12]
  40d94e:	601a      	str	r2, [r3, #0]
  40d950:	e4cb      	b.n	40d2ea <_vfiprintf_r+0x7a>
  40d952:	aa0f      	add	r2, sp, #60	; 0x3c
  40d954:	9904      	ldr	r1, [sp, #16]
  40d956:	4620      	mov	r0, r4
  40d958:	f7ff fc4a 	bl	40d1f0 <__sprint_r.part.0>
  40d95c:	2800      	cmp	r0, #0
  40d95e:	f040 8139 	bne.w	40dbd4 <_vfiprintf_r+0x964>
  40d962:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d964:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d966:	f101 0c01 	add.w	ip, r1, #1
  40d96a:	46ce      	mov	lr, r9
  40d96c:	e5ff      	b.n	40d56e <_vfiprintf_r+0x2fe>
  40d96e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d970:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d972:	1c48      	adds	r0, r1, #1
  40d974:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d978:	2d00      	cmp	r5, #0
  40d97a:	f43f ae22 	beq.w	40d5c2 <_vfiprintf_r+0x352>
  40d97e:	3201      	adds	r2, #1
  40d980:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40d984:	2101      	movs	r1, #1
  40d986:	2807      	cmp	r0, #7
  40d988:	9211      	str	r2, [sp, #68]	; 0x44
  40d98a:	9010      	str	r0, [sp, #64]	; 0x40
  40d98c:	f8ca 5000 	str.w	r5, [sl]
  40d990:	f8ca 1004 	str.w	r1, [sl, #4]
  40d994:	f340 8108 	ble.w	40dba8 <_vfiprintf_r+0x938>
  40d998:	2a00      	cmp	r2, #0
  40d99a:	f040 81bc 	bne.w	40dd16 <_vfiprintf_r+0xaa6>
  40d99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d9a0:	2b00      	cmp	r3, #0
  40d9a2:	f43f ae1f 	beq.w	40d5e4 <_vfiprintf_r+0x374>
  40d9a6:	ab0e      	add	r3, sp, #56	; 0x38
  40d9a8:	2202      	movs	r2, #2
  40d9aa:	4608      	mov	r0, r1
  40d9ac:	931c      	str	r3, [sp, #112]	; 0x70
  40d9ae:	921d      	str	r2, [sp, #116]	; 0x74
  40d9b0:	46ca      	mov	sl, r9
  40d9b2:	4601      	mov	r1, r0
  40d9b4:	f10a 0a08 	add.w	sl, sl, #8
  40d9b8:	3001      	adds	r0, #1
  40d9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d9bc:	2b80      	cmp	r3, #128	; 0x80
  40d9be:	f43f ae19 	beq.w	40d5f4 <_vfiprintf_r+0x384>
  40d9c2:	9b05      	ldr	r3, [sp, #20]
  40d9c4:	1ae4      	subs	r4, r4, r3
  40d9c6:	2c00      	cmp	r4, #0
  40d9c8:	dd2e      	ble.n	40da28 <_vfiprintf_r+0x7b8>
  40d9ca:	2c10      	cmp	r4, #16
  40d9cc:	4db3      	ldr	r5, [pc, #716]	; (40dc9c <_vfiprintf_r+0xa2c>)
  40d9ce:	dd1e      	ble.n	40da0e <_vfiprintf_r+0x79e>
  40d9d0:	46d6      	mov	lr, sl
  40d9d2:	2610      	movs	r6, #16
  40d9d4:	9f06      	ldr	r7, [sp, #24]
  40d9d6:	f8dd a010 	ldr.w	sl, [sp, #16]
  40d9da:	e006      	b.n	40d9ea <_vfiprintf_r+0x77a>
  40d9dc:	1c88      	adds	r0, r1, #2
  40d9de:	f10e 0e08 	add.w	lr, lr, #8
  40d9e2:	4619      	mov	r1, r3
  40d9e4:	3c10      	subs	r4, #16
  40d9e6:	2c10      	cmp	r4, #16
  40d9e8:	dd10      	ble.n	40da0c <_vfiprintf_r+0x79c>
  40d9ea:	1c4b      	adds	r3, r1, #1
  40d9ec:	3210      	adds	r2, #16
  40d9ee:	2b07      	cmp	r3, #7
  40d9f0:	9211      	str	r2, [sp, #68]	; 0x44
  40d9f2:	e88e 0060 	stmia.w	lr, {r5, r6}
  40d9f6:	9310      	str	r3, [sp, #64]	; 0x40
  40d9f8:	ddf0      	ble.n	40d9dc <_vfiprintf_r+0x76c>
  40d9fa:	2a00      	cmp	r2, #0
  40d9fc:	d165      	bne.n	40daca <_vfiprintf_r+0x85a>
  40d9fe:	3c10      	subs	r4, #16
  40da00:	2c10      	cmp	r4, #16
  40da02:	f04f 0001 	mov.w	r0, #1
  40da06:	4611      	mov	r1, r2
  40da08:	46ce      	mov	lr, r9
  40da0a:	dcee      	bgt.n	40d9ea <_vfiprintf_r+0x77a>
  40da0c:	46f2      	mov	sl, lr
  40da0e:	4422      	add	r2, r4
  40da10:	2807      	cmp	r0, #7
  40da12:	9211      	str	r2, [sp, #68]	; 0x44
  40da14:	f8ca 5000 	str.w	r5, [sl]
  40da18:	f8ca 4004 	str.w	r4, [sl, #4]
  40da1c:	9010      	str	r0, [sp, #64]	; 0x40
  40da1e:	f300 8085 	bgt.w	40db2c <_vfiprintf_r+0x8bc>
  40da22:	f10a 0a08 	add.w	sl, sl, #8
  40da26:	3001      	adds	r0, #1
  40da28:	9905      	ldr	r1, [sp, #20]
  40da2a:	f8ca b000 	str.w	fp, [sl]
  40da2e:	440a      	add	r2, r1
  40da30:	2807      	cmp	r0, #7
  40da32:	9211      	str	r2, [sp, #68]	; 0x44
  40da34:	f8ca 1004 	str.w	r1, [sl, #4]
  40da38:	9010      	str	r0, [sp, #64]	; 0x40
  40da3a:	f340 8082 	ble.w	40db42 <_vfiprintf_r+0x8d2>
  40da3e:	2a00      	cmp	r2, #0
  40da40:	f040 8118 	bne.w	40dc74 <_vfiprintf_r+0xa04>
  40da44:	9b02      	ldr	r3, [sp, #8]
  40da46:	9210      	str	r2, [sp, #64]	; 0x40
  40da48:	0758      	lsls	r0, r3, #29
  40da4a:	d535      	bpl.n	40dab8 <_vfiprintf_r+0x848>
  40da4c:	9b08      	ldr	r3, [sp, #32]
  40da4e:	9901      	ldr	r1, [sp, #4]
  40da50:	1a5c      	subs	r4, r3, r1
  40da52:	2c00      	cmp	r4, #0
  40da54:	f340 80e7 	ble.w	40dc26 <_vfiprintf_r+0x9b6>
  40da58:	46ca      	mov	sl, r9
  40da5a:	2c10      	cmp	r4, #16
  40da5c:	f340 8218 	ble.w	40de90 <_vfiprintf_r+0xc20>
  40da60:	9910      	ldr	r1, [sp, #64]	; 0x40
  40da62:	4e8f      	ldr	r6, [pc, #572]	; (40dca0 <_vfiprintf_r+0xa30>)
  40da64:	9f06      	ldr	r7, [sp, #24]
  40da66:	f8dd b010 	ldr.w	fp, [sp, #16]
  40da6a:	2510      	movs	r5, #16
  40da6c:	e006      	b.n	40da7c <_vfiprintf_r+0x80c>
  40da6e:	1c88      	adds	r0, r1, #2
  40da70:	f10a 0a08 	add.w	sl, sl, #8
  40da74:	4619      	mov	r1, r3
  40da76:	3c10      	subs	r4, #16
  40da78:	2c10      	cmp	r4, #16
  40da7a:	dd11      	ble.n	40daa0 <_vfiprintf_r+0x830>
  40da7c:	1c4b      	adds	r3, r1, #1
  40da7e:	3210      	adds	r2, #16
  40da80:	2b07      	cmp	r3, #7
  40da82:	9211      	str	r2, [sp, #68]	; 0x44
  40da84:	f8ca 6000 	str.w	r6, [sl]
  40da88:	f8ca 5004 	str.w	r5, [sl, #4]
  40da8c:	9310      	str	r3, [sp, #64]	; 0x40
  40da8e:	ddee      	ble.n	40da6e <_vfiprintf_r+0x7fe>
  40da90:	bb42      	cbnz	r2, 40dae4 <_vfiprintf_r+0x874>
  40da92:	3c10      	subs	r4, #16
  40da94:	2c10      	cmp	r4, #16
  40da96:	f04f 0001 	mov.w	r0, #1
  40da9a:	4611      	mov	r1, r2
  40da9c:	46ca      	mov	sl, r9
  40da9e:	dced      	bgt.n	40da7c <_vfiprintf_r+0x80c>
  40daa0:	4422      	add	r2, r4
  40daa2:	2807      	cmp	r0, #7
  40daa4:	9211      	str	r2, [sp, #68]	; 0x44
  40daa6:	f8ca 6000 	str.w	r6, [sl]
  40daaa:	f8ca 4004 	str.w	r4, [sl, #4]
  40daae:	9010      	str	r0, [sp, #64]	; 0x40
  40dab0:	dd51      	ble.n	40db56 <_vfiprintf_r+0x8e6>
  40dab2:	2a00      	cmp	r2, #0
  40dab4:	f040 819b 	bne.w	40ddee <_vfiprintf_r+0xb7e>
  40dab8:	9b03      	ldr	r3, [sp, #12]
  40daba:	9a08      	ldr	r2, [sp, #32]
  40dabc:	9901      	ldr	r1, [sp, #4]
  40dabe:	428a      	cmp	r2, r1
  40dac0:	bfac      	ite	ge
  40dac2:	189b      	addge	r3, r3, r2
  40dac4:	185b      	addlt	r3, r3, r1
  40dac6:	9303      	str	r3, [sp, #12]
  40dac8:	e04e      	b.n	40db68 <_vfiprintf_r+0x8f8>
  40daca:	aa0f      	add	r2, sp, #60	; 0x3c
  40dacc:	4651      	mov	r1, sl
  40dace:	4638      	mov	r0, r7
  40dad0:	f7ff fb8e 	bl	40d1f0 <__sprint_r.part.0>
  40dad4:	2800      	cmp	r0, #0
  40dad6:	f040 813f 	bne.w	40dd58 <_vfiprintf_r+0xae8>
  40dada:	9910      	ldr	r1, [sp, #64]	; 0x40
  40dadc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40dade:	1c48      	adds	r0, r1, #1
  40dae0:	46ce      	mov	lr, r9
  40dae2:	e77f      	b.n	40d9e4 <_vfiprintf_r+0x774>
  40dae4:	aa0f      	add	r2, sp, #60	; 0x3c
  40dae6:	4659      	mov	r1, fp
  40dae8:	4638      	mov	r0, r7
  40daea:	f7ff fb81 	bl	40d1f0 <__sprint_r.part.0>
  40daee:	b960      	cbnz	r0, 40db0a <_vfiprintf_r+0x89a>
  40daf0:	9910      	ldr	r1, [sp, #64]	; 0x40
  40daf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40daf4:	1c48      	adds	r0, r1, #1
  40daf6:	46ca      	mov	sl, r9
  40daf8:	e7bd      	b.n	40da76 <_vfiprintf_r+0x806>
  40dafa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40dafc:	f8dd b010 	ldr.w	fp, [sp, #16]
  40db00:	2b00      	cmp	r3, #0
  40db02:	f040 81d4 	bne.w	40deae <_vfiprintf_r+0xc3e>
  40db06:	2300      	movs	r3, #0
  40db08:	9310      	str	r3, [sp, #64]	; 0x40
  40db0a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40db0e:	f013 0f01 	tst.w	r3, #1
  40db12:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40db16:	d102      	bne.n	40db1e <_vfiprintf_r+0x8ae>
  40db18:	059a      	lsls	r2, r3, #22
  40db1a:	f140 80de 	bpl.w	40dcda <_vfiprintf_r+0xa6a>
  40db1e:	065b      	lsls	r3, r3, #25
  40db20:	f53f acb2 	bmi.w	40d488 <_vfiprintf_r+0x218>
  40db24:	9803      	ldr	r0, [sp, #12]
  40db26:	b02d      	add	sp, #180	; 0xb4
  40db28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40db2c:	2a00      	cmp	r2, #0
  40db2e:	f040 8106 	bne.w	40dd3e <_vfiprintf_r+0xace>
  40db32:	9a05      	ldr	r2, [sp, #20]
  40db34:	921d      	str	r2, [sp, #116]	; 0x74
  40db36:	2301      	movs	r3, #1
  40db38:	9211      	str	r2, [sp, #68]	; 0x44
  40db3a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40db3e:	9310      	str	r3, [sp, #64]	; 0x40
  40db40:	46ca      	mov	sl, r9
  40db42:	f10a 0a08 	add.w	sl, sl, #8
  40db46:	9b02      	ldr	r3, [sp, #8]
  40db48:	0759      	lsls	r1, r3, #29
  40db4a:	d504      	bpl.n	40db56 <_vfiprintf_r+0x8e6>
  40db4c:	9b08      	ldr	r3, [sp, #32]
  40db4e:	9901      	ldr	r1, [sp, #4]
  40db50:	1a5c      	subs	r4, r3, r1
  40db52:	2c00      	cmp	r4, #0
  40db54:	dc81      	bgt.n	40da5a <_vfiprintf_r+0x7ea>
  40db56:	9b03      	ldr	r3, [sp, #12]
  40db58:	9908      	ldr	r1, [sp, #32]
  40db5a:	9801      	ldr	r0, [sp, #4]
  40db5c:	4281      	cmp	r1, r0
  40db5e:	bfac      	ite	ge
  40db60:	185b      	addge	r3, r3, r1
  40db62:	181b      	addlt	r3, r3, r0
  40db64:	9303      	str	r3, [sp, #12]
  40db66:	bb72      	cbnz	r2, 40dbc6 <_vfiprintf_r+0x956>
  40db68:	2300      	movs	r3, #0
  40db6a:	9310      	str	r3, [sp, #64]	; 0x40
  40db6c:	46ca      	mov	sl, r9
  40db6e:	f7ff bbbc 	b.w	40d2ea <_vfiprintf_r+0x7a>
  40db72:	aa0f      	add	r2, sp, #60	; 0x3c
  40db74:	9904      	ldr	r1, [sp, #16]
  40db76:	4620      	mov	r0, r4
  40db78:	f7ff fb3a 	bl	40d1f0 <__sprint_r.part.0>
  40db7c:	bb50      	cbnz	r0, 40dbd4 <_vfiprintf_r+0x964>
  40db7e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40db80:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40db82:	f101 0e01 	add.w	lr, r1, #1
  40db86:	46cc      	mov	ip, r9
  40db88:	e548      	b.n	40d61c <_vfiprintf_r+0x3ac>
  40db8a:	2a00      	cmp	r2, #0
  40db8c:	f040 8140 	bne.w	40de10 <_vfiprintf_r+0xba0>
  40db90:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40db94:	2900      	cmp	r1, #0
  40db96:	f000 811b 	beq.w	40ddd0 <_vfiprintf_r+0xb60>
  40db9a:	2201      	movs	r2, #1
  40db9c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40dba0:	4610      	mov	r0, r2
  40dba2:	921d      	str	r2, [sp, #116]	; 0x74
  40dba4:	911c      	str	r1, [sp, #112]	; 0x70
  40dba6:	46ca      	mov	sl, r9
  40dba8:	4601      	mov	r1, r0
  40dbaa:	f10a 0a08 	add.w	sl, sl, #8
  40dbae:	3001      	adds	r0, #1
  40dbb0:	e507      	b.n	40d5c2 <_vfiprintf_r+0x352>
  40dbb2:	9b02      	ldr	r3, [sp, #8]
  40dbb4:	2a01      	cmp	r2, #1
  40dbb6:	f000 8098 	beq.w	40dcea <_vfiprintf_r+0xa7a>
  40dbba:	2a02      	cmp	r2, #2
  40dbbc:	d10d      	bne.n	40dbda <_vfiprintf_r+0x96a>
  40dbbe:	9302      	str	r3, [sp, #8]
  40dbc0:	2600      	movs	r6, #0
  40dbc2:	2700      	movs	r7, #0
  40dbc4:	e5b0      	b.n	40d728 <_vfiprintf_r+0x4b8>
  40dbc6:	aa0f      	add	r2, sp, #60	; 0x3c
  40dbc8:	9904      	ldr	r1, [sp, #16]
  40dbca:	9806      	ldr	r0, [sp, #24]
  40dbcc:	f7ff fb10 	bl	40d1f0 <__sprint_r.part.0>
  40dbd0:	2800      	cmp	r0, #0
  40dbd2:	d0c9      	beq.n	40db68 <_vfiprintf_r+0x8f8>
  40dbd4:	f8dd b010 	ldr.w	fp, [sp, #16]
  40dbd8:	e797      	b.n	40db0a <_vfiprintf_r+0x89a>
  40dbda:	9302      	str	r3, [sp, #8]
  40dbdc:	2600      	movs	r6, #0
  40dbde:	2700      	movs	r7, #0
  40dbe0:	4649      	mov	r1, r9
  40dbe2:	e000      	b.n	40dbe6 <_vfiprintf_r+0x976>
  40dbe4:	4659      	mov	r1, fp
  40dbe6:	08f2      	lsrs	r2, r6, #3
  40dbe8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40dbec:	08f8      	lsrs	r0, r7, #3
  40dbee:	f006 0307 	and.w	r3, r6, #7
  40dbf2:	4607      	mov	r7, r0
  40dbf4:	4616      	mov	r6, r2
  40dbf6:	3330      	adds	r3, #48	; 0x30
  40dbf8:	ea56 0207 	orrs.w	r2, r6, r7
  40dbfc:	f801 3c01 	strb.w	r3, [r1, #-1]
  40dc00:	f101 3bff 	add.w	fp, r1, #4294967295
  40dc04:	d1ee      	bne.n	40dbe4 <_vfiprintf_r+0x974>
  40dc06:	9a02      	ldr	r2, [sp, #8]
  40dc08:	07d6      	lsls	r6, r2, #31
  40dc0a:	f57f ad9d 	bpl.w	40d748 <_vfiprintf_r+0x4d8>
  40dc0e:	2b30      	cmp	r3, #48	; 0x30
  40dc10:	f43f ad9a 	beq.w	40d748 <_vfiprintf_r+0x4d8>
  40dc14:	3902      	subs	r1, #2
  40dc16:	2330      	movs	r3, #48	; 0x30
  40dc18:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40dc1c:	eba9 0301 	sub.w	r3, r9, r1
  40dc20:	9305      	str	r3, [sp, #20]
  40dc22:	468b      	mov	fp, r1
  40dc24:	e476      	b.n	40d514 <_vfiprintf_r+0x2a4>
  40dc26:	9b03      	ldr	r3, [sp, #12]
  40dc28:	9a08      	ldr	r2, [sp, #32]
  40dc2a:	428a      	cmp	r2, r1
  40dc2c:	bfac      	ite	ge
  40dc2e:	189b      	addge	r3, r3, r2
  40dc30:	185b      	addlt	r3, r3, r1
  40dc32:	9303      	str	r3, [sp, #12]
  40dc34:	e798      	b.n	40db68 <_vfiprintf_r+0x8f8>
  40dc36:	2202      	movs	r2, #2
  40dc38:	e44d      	b.n	40d4d6 <_vfiprintf_r+0x266>
  40dc3a:	2f00      	cmp	r7, #0
  40dc3c:	bf08      	it	eq
  40dc3e:	2e0a      	cmpeq	r6, #10
  40dc40:	d352      	bcc.n	40dce8 <_vfiprintf_r+0xa78>
  40dc42:	46cb      	mov	fp, r9
  40dc44:	4630      	mov	r0, r6
  40dc46:	4639      	mov	r1, r7
  40dc48:	220a      	movs	r2, #10
  40dc4a:	2300      	movs	r3, #0
  40dc4c:	f7fe ff54 	bl	40caf8 <__aeabi_uldivmod>
  40dc50:	3230      	adds	r2, #48	; 0x30
  40dc52:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40dc56:	4630      	mov	r0, r6
  40dc58:	4639      	mov	r1, r7
  40dc5a:	2300      	movs	r3, #0
  40dc5c:	220a      	movs	r2, #10
  40dc5e:	f7fe ff4b 	bl	40caf8 <__aeabi_uldivmod>
  40dc62:	4606      	mov	r6, r0
  40dc64:	460f      	mov	r7, r1
  40dc66:	ea56 0307 	orrs.w	r3, r6, r7
  40dc6a:	d1eb      	bne.n	40dc44 <_vfiprintf_r+0x9d4>
  40dc6c:	e56c      	b.n	40d748 <_vfiprintf_r+0x4d8>
  40dc6e:	9405      	str	r4, [sp, #20]
  40dc70:	46cb      	mov	fp, r9
  40dc72:	e44f      	b.n	40d514 <_vfiprintf_r+0x2a4>
  40dc74:	aa0f      	add	r2, sp, #60	; 0x3c
  40dc76:	9904      	ldr	r1, [sp, #16]
  40dc78:	9806      	ldr	r0, [sp, #24]
  40dc7a:	f7ff fab9 	bl	40d1f0 <__sprint_r.part.0>
  40dc7e:	2800      	cmp	r0, #0
  40dc80:	d1a8      	bne.n	40dbd4 <_vfiprintf_r+0x964>
  40dc82:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40dc84:	46ca      	mov	sl, r9
  40dc86:	e75e      	b.n	40db46 <_vfiprintf_r+0x8d6>
  40dc88:	aa0f      	add	r2, sp, #60	; 0x3c
  40dc8a:	9904      	ldr	r1, [sp, #16]
  40dc8c:	9806      	ldr	r0, [sp, #24]
  40dc8e:	f7ff faaf 	bl	40d1f0 <__sprint_r.part.0>
  40dc92:	2800      	cmp	r0, #0
  40dc94:	d19e      	bne.n	40dbd4 <_vfiprintf_r+0x964>
  40dc96:	46ca      	mov	sl, r9
  40dc98:	f7ff bbc0 	b.w	40d41c <_vfiprintf_r+0x1ac>
  40dc9c:	00410e14 	.word	0x00410e14
  40dca0:	00410e04 	.word	0x00410e04
  40dca4:	3104      	adds	r1, #4
  40dca6:	6816      	ldr	r6, [r2, #0]
  40dca8:	9107      	str	r1, [sp, #28]
  40dcaa:	2201      	movs	r2, #1
  40dcac:	2700      	movs	r7, #0
  40dcae:	e412      	b.n	40d4d6 <_vfiprintf_r+0x266>
  40dcb0:	9807      	ldr	r0, [sp, #28]
  40dcb2:	4601      	mov	r1, r0
  40dcb4:	3104      	adds	r1, #4
  40dcb6:	6806      	ldr	r6, [r0, #0]
  40dcb8:	9107      	str	r1, [sp, #28]
  40dcba:	2700      	movs	r7, #0
  40dcbc:	e40b      	b.n	40d4d6 <_vfiprintf_r+0x266>
  40dcbe:	680e      	ldr	r6, [r1, #0]
  40dcc0:	3104      	adds	r1, #4
  40dcc2:	9107      	str	r1, [sp, #28]
  40dcc4:	2700      	movs	r7, #0
  40dcc6:	e591      	b.n	40d7ec <_vfiprintf_r+0x57c>
  40dcc8:	9907      	ldr	r1, [sp, #28]
  40dcca:	680e      	ldr	r6, [r1, #0]
  40dccc:	460a      	mov	r2, r1
  40dcce:	17f7      	asrs	r7, r6, #31
  40dcd0:	3204      	adds	r2, #4
  40dcd2:	9207      	str	r2, [sp, #28]
  40dcd4:	4630      	mov	r0, r6
  40dcd6:	4639      	mov	r1, r7
  40dcd8:	e50f      	b.n	40d6fa <_vfiprintf_r+0x48a>
  40dcda:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40dcde:	f000 fe7f 	bl	40e9e0 <__retarget_lock_release_recursive>
  40dce2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40dce6:	e71a      	b.n	40db1e <_vfiprintf_r+0x8ae>
  40dce8:	9b02      	ldr	r3, [sp, #8]
  40dcea:	9302      	str	r3, [sp, #8]
  40dcec:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40dcf0:	3630      	adds	r6, #48	; 0x30
  40dcf2:	2301      	movs	r3, #1
  40dcf4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40dcf8:	9305      	str	r3, [sp, #20]
  40dcfa:	e40b      	b.n	40d514 <_vfiprintf_r+0x2a4>
  40dcfc:	aa0f      	add	r2, sp, #60	; 0x3c
  40dcfe:	9904      	ldr	r1, [sp, #16]
  40dd00:	9806      	ldr	r0, [sp, #24]
  40dd02:	f7ff fa75 	bl	40d1f0 <__sprint_r.part.0>
  40dd06:	2800      	cmp	r0, #0
  40dd08:	f47f af64 	bne.w	40dbd4 <_vfiprintf_r+0x964>
  40dd0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40dd0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40dd10:	1c48      	adds	r0, r1, #1
  40dd12:	46ca      	mov	sl, r9
  40dd14:	e651      	b.n	40d9ba <_vfiprintf_r+0x74a>
  40dd16:	aa0f      	add	r2, sp, #60	; 0x3c
  40dd18:	9904      	ldr	r1, [sp, #16]
  40dd1a:	9806      	ldr	r0, [sp, #24]
  40dd1c:	f7ff fa68 	bl	40d1f0 <__sprint_r.part.0>
  40dd20:	2800      	cmp	r0, #0
  40dd22:	f47f af57 	bne.w	40dbd4 <_vfiprintf_r+0x964>
  40dd26:	9910      	ldr	r1, [sp, #64]	; 0x40
  40dd28:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40dd2a:	1c48      	adds	r0, r1, #1
  40dd2c:	46ca      	mov	sl, r9
  40dd2e:	e448      	b.n	40d5c2 <_vfiprintf_r+0x352>
  40dd30:	2a00      	cmp	r2, #0
  40dd32:	f040 8091 	bne.w	40de58 <_vfiprintf_r+0xbe8>
  40dd36:	2001      	movs	r0, #1
  40dd38:	4611      	mov	r1, r2
  40dd3a:	46ca      	mov	sl, r9
  40dd3c:	e641      	b.n	40d9c2 <_vfiprintf_r+0x752>
  40dd3e:	aa0f      	add	r2, sp, #60	; 0x3c
  40dd40:	9904      	ldr	r1, [sp, #16]
  40dd42:	9806      	ldr	r0, [sp, #24]
  40dd44:	f7ff fa54 	bl	40d1f0 <__sprint_r.part.0>
  40dd48:	2800      	cmp	r0, #0
  40dd4a:	f47f af43 	bne.w	40dbd4 <_vfiprintf_r+0x964>
  40dd4e:	9810      	ldr	r0, [sp, #64]	; 0x40
  40dd50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40dd52:	3001      	adds	r0, #1
  40dd54:	46ca      	mov	sl, r9
  40dd56:	e667      	b.n	40da28 <_vfiprintf_r+0x7b8>
  40dd58:	46d3      	mov	fp, sl
  40dd5a:	e6d6      	b.n	40db0a <_vfiprintf_r+0x89a>
  40dd5c:	9e07      	ldr	r6, [sp, #28]
  40dd5e:	3607      	adds	r6, #7
  40dd60:	f026 0207 	bic.w	r2, r6, #7
  40dd64:	f102 0108 	add.w	r1, r2, #8
  40dd68:	e9d2 6700 	ldrd	r6, r7, [r2]
  40dd6c:	9107      	str	r1, [sp, #28]
  40dd6e:	2201      	movs	r2, #1
  40dd70:	f7ff bbb1 	b.w	40d4d6 <_vfiprintf_r+0x266>
  40dd74:	9e07      	ldr	r6, [sp, #28]
  40dd76:	3607      	adds	r6, #7
  40dd78:	f026 0607 	bic.w	r6, r6, #7
  40dd7c:	e9d6 0100 	ldrd	r0, r1, [r6]
  40dd80:	f106 0208 	add.w	r2, r6, #8
  40dd84:	9207      	str	r2, [sp, #28]
  40dd86:	4606      	mov	r6, r0
  40dd88:	460f      	mov	r7, r1
  40dd8a:	e4b6      	b.n	40d6fa <_vfiprintf_r+0x48a>
  40dd8c:	9e07      	ldr	r6, [sp, #28]
  40dd8e:	3607      	adds	r6, #7
  40dd90:	f026 0207 	bic.w	r2, r6, #7
  40dd94:	f102 0108 	add.w	r1, r2, #8
  40dd98:	e9d2 6700 	ldrd	r6, r7, [r2]
  40dd9c:	9107      	str	r1, [sp, #28]
  40dd9e:	2200      	movs	r2, #0
  40dda0:	f7ff bb99 	b.w	40d4d6 <_vfiprintf_r+0x266>
  40dda4:	9e07      	ldr	r6, [sp, #28]
  40dda6:	3607      	adds	r6, #7
  40dda8:	f026 0107 	bic.w	r1, r6, #7
  40ddac:	f101 0008 	add.w	r0, r1, #8
  40ddb0:	9007      	str	r0, [sp, #28]
  40ddb2:	e9d1 6700 	ldrd	r6, r7, [r1]
  40ddb6:	e519      	b.n	40d7ec <_vfiprintf_r+0x57c>
  40ddb8:	46cb      	mov	fp, r9
  40ddba:	f7ff bbab 	b.w	40d514 <_vfiprintf_r+0x2a4>
  40ddbe:	252d      	movs	r5, #45	; 0x2d
  40ddc0:	4276      	negs	r6, r6
  40ddc2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40ddc6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40ddca:	2201      	movs	r2, #1
  40ddcc:	f7ff bb88 	b.w	40d4e0 <_vfiprintf_r+0x270>
  40ddd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ddd2:	b9b3      	cbnz	r3, 40de02 <_vfiprintf_r+0xb92>
  40ddd4:	4611      	mov	r1, r2
  40ddd6:	2001      	movs	r0, #1
  40ddd8:	46ca      	mov	sl, r9
  40ddda:	e5f2      	b.n	40d9c2 <_vfiprintf_r+0x752>
  40dddc:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40dde0:	f000 fdfe 	bl	40e9e0 <__retarget_lock_release_recursive>
  40dde4:	f04f 33ff 	mov.w	r3, #4294967295
  40dde8:	9303      	str	r3, [sp, #12]
  40ddea:	f7ff bb50 	b.w	40d48e <_vfiprintf_r+0x21e>
  40ddee:	aa0f      	add	r2, sp, #60	; 0x3c
  40ddf0:	9904      	ldr	r1, [sp, #16]
  40ddf2:	9806      	ldr	r0, [sp, #24]
  40ddf4:	f7ff f9fc 	bl	40d1f0 <__sprint_r.part.0>
  40ddf8:	2800      	cmp	r0, #0
  40ddfa:	f47f aeeb 	bne.w	40dbd4 <_vfiprintf_r+0x964>
  40ddfe:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40de00:	e6a9      	b.n	40db56 <_vfiprintf_r+0x8e6>
  40de02:	ab0e      	add	r3, sp, #56	; 0x38
  40de04:	2202      	movs	r2, #2
  40de06:	931c      	str	r3, [sp, #112]	; 0x70
  40de08:	921d      	str	r2, [sp, #116]	; 0x74
  40de0a:	2001      	movs	r0, #1
  40de0c:	46ca      	mov	sl, r9
  40de0e:	e5d0      	b.n	40d9b2 <_vfiprintf_r+0x742>
  40de10:	aa0f      	add	r2, sp, #60	; 0x3c
  40de12:	9904      	ldr	r1, [sp, #16]
  40de14:	9806      	ldr	r0, [sp, #24]
  40de16:	f7ff f9eb 	bl	40d1f0 <__sprint_r.part.0>
  40de1a:	2800      	cmp	r0, #0
  40de1c:	f47f aeda 	bne.w	40dbd4 <_vfiprintf_r+0x964>
  40de20:	9910      	ldr	r1, [sp, #64]	; 0x40
  40de22:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40de24:	1c48      	adds	r0, r1, #1
  40de26:	46ca      	mov	sl, r9
  40de28:	e5a4      	b.n	40d974 <_vfiprintf_r+0x704>
  40de2a:	9a07      	ldr	r2, [sp, #28]
  40de2c:	9903      	ldr	r1, [sp, #12]
  40de2e:	6813      	ldr	r3, [r2, #0]
  40de30:	17cd      	asrs	r5, r1, #31
  40de32:	4608      	mov	r0, r1
  40de34:	3204      	adds	r2, #4
  40de36:	4629      	mov	r1, r5
  40de38:	9207      	str	r2, [sp, #28]
  40de3a:	e9c3 0100 	strd	r0, r1, [r3]
  40de3e:	f7ff ba54 	b.w	40d2ea <_vfiprintf_r+0x7a>
  40de42:	4658      	mov	r0, fp
  40de44:	9607      	str	r6, [sp, #28]
  40de46:	9302      	str	r3, [sp, #8]
  40de48:	f001 fbda 	bl	40f600 <strlen>
  40de4c:	2400      	movs	r4, #0
  40de4e:	9005      	str	r0, [sp, #20]
  40de50:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40de54:	f7ff bb5e 	b.w	40d514 <_vfiprintf_r+0x2a4>
  40de58:	aa0f      	add	r2, sp, #60	; 0x3c
  40de5a:	9904      	ldr	r1, [sp, #16]
  40de5c:	9806      	ldr	r0, [sp, #24]
  40de5e:	f7ff f9c7 	bl	40d1f0 <__sprint_r.part.0>
  40de62:	2800      	cmp	r0, #0
  40de64:	f47f aeb6 	bne.w	40dbd4 <_vfiprintf_r+0x964>
  40de68:	9910      	ldr	r1, [sp, #64]	; 0x40
  40de6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40de6c:	1c48      	adds	r0, r1, #1
  40de6e:	46ca      	mov	sl, r9
  40de70:	e5a7      	b.n	40d9c2 <_vfiprintf_r+0x752>
  40de72:	9910      	ldr	r1, [sp, #64]	; 0x40
  40de74:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40de76:	4e20      	ldr	r6, [pc, #128]	; (40def8 <_vfiprintf_r+0xc88>)
  40de78:	3101      	adds	r1, #1
  40de7a:	f7ff bb90 	b.w	40d59e <_vfiprintf_r+0x32e>
  40de7e:	2c06      	cmp	r4, #6
  40de80:	bf28      	it	cs
  40de82:	2406      	movcs	r4, #6
  40de84:	9405      	str	r4, [sp, #20]
  40de86:	9607      	str	r6, [sp, #28]
  40de88:	9401      	str	r4, [sp, #4]
  40de8a:	f8df b070 	ldr.w	fp, [pc, #112]	; 40defc <_vfiprintf_r+0xc8c>
  40de8e:	e4d5      	b.n	40d83c <_vfiprintf_r+0x5cc>
  40de90:	9810      	ldr	r0, [sp, #64]	; 0x40
  40de92:	4e19      	ldr	r6, [pc, #100]	; (40def8 <_vfiprintf_r+0xc88>)
  40de94:	3001      	adds	r0, #1
  40de96:	e603      	b.n	40daa0 <_vfiprintf_r+0x830>
  40de98:	9405      	str	r4, [sp, #20]
  40de9a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40de9e:	9607      	str	r6, [sp, #28]
  40dea0:	9302      	str	r3, [sp, #8]
  40dea2:	4604      	mov	r4, r0
  40dea4:	f7ff bb36 	b.w	40d514 <_vfiprintf_r+0x2a4>
  40dea8:	4686      	mov	lr, r0
  40deaa:	f7ff bbce 	b.w	40d64a <_vfiprintf_r+0x3da>
  40deae:	9806      	ldr	r0, [sp, #24]
  40deb0:	aa0f      	add	r2, sp, #60	; 0x3c
  40deb2:	4659      	mov	r1, fp
  40deb4:	f7ff f99c 	bl	40d1f0 <__sprint_r.part.0>
  40deb8:	2800      	cmp	r0, #0
  40deba:	f43f ae24 	beq.w	40db06 <_vfiprintf_r+0x896>
  40debe:	e624      	b.n	40db0a <_vfiprintf_r+0x89a>
  40dec0:	9907      	ldr	r1, [sp, #28]
  40dec2:	f898 2001 	ldrb.w	r2, [r8, #1]
  40dec6:	680c      	ldr	r4, [r1, #0]
  40dec8:	3104      	adds	r1, #4
  40deca:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40dece:	46b8      	mov	r8, r7
  40ded0:	9107      	str	r1, [sp, #28]
  40ded2:	f7ff ba3f 	b.w	40d354 <_vfiprintf_r+0xe4>
  40ded6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40deda:	e43c      	b.n	40d756 <_vfiprintf_r+0x4e6>
  40dedc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40dee0:	e521      	b.n	40d926 <_vfiprintf_r+0x6b6>
  40dee2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40dee6:	f7ff bbf4 	b.w	40d6d2 <_vfiprintf_r+0x462>
  40deea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40deee:	e491      	b.n	40d814 <_vfiprintf_r+0x5a4>
  40def0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40def4:	e469      	b.n	40d7ca <_vfiprintf_r+0x55a>
  40def6:	bf00      	nop
  40def8:	00410e04 	.word	0x00410e04
  40defc:	00410dfc 	.word	0x00410dfc

0040df00 <__sbprintf>:
  40df00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40df04:	460c      	mov	r4, r1
  40df06:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40df0a:	8989      	ldrh	r1, [r1, #12]
  40df0c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40df0e:	89e5      	ldrh	r5, [r4, #14]
  40df10:	9619      	str	r6, [sp, #100]	; 0x64
  40df12:	f021 0102 	bic.w	r1, r1, #2
  40df16:	4606      	mov	r6, r0
  40df18:	69e0      	ldr	r0, [r4, #28]
  40df1a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40df1e:	4617      	mov	r7, r2
  40df20:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40df24:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40df26:	f8ad 500e 	strh.w	r5, [sp, #14]
  40df2a:	4698      	mov	r8, r3
  40df2c:	ad1a      	add	r5, sp, #104	; 0x68
  40df2e:	2300      	movs	r3, #0
  40df30:	9007      	str	r0, [sp, #28]
  40df32:	a816      	add	r0, sp, #88	; 0x58
  40df34:	9209      	str	r2, [sp, #36]	; 0x24
  40df36:	9306      	str	r3, [sp, #24]
  40df38:	9500      	str	r5, [sp, #0]
  40df3a:	9504      	str	r5, [sp, #16]
  40df3c:	9102      	str	r1, [sp, #8]
  40df3e:	9105      	str	r1, [sp, #20]
  40df40:	f000 fd48 	bl	40e9d4 <__retarget_lock_init_recursive>
  40df44:	4643      	mov	r3, r8
  40df46:	463a      	mov	r2, r7
  40df48:	4669      	mov	r1, sp
  40df4a:	4630      	mov	r0, r6
  40df4c:	f7ff f990 	bl	40d270 <_vfiprintf_r>
  40df50:	1e05      	subs	r5, r0, #0
  40df52:	db07      	blt.n	40df64 <__sbprintf+0x64>
  40df54:	4630      	mov	r0, r6
  40df56:	4669      	mov	r1, sp
  40df58:	f000 f928 	bl	40e1ac <_fflush_r>
  40df5c:	2800      	cmp	r0, #0
  40df5e:	bf18      	it	ne
  40df60:	f04f 35ff 	movne.w	r5, #4294967295
  40df64:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40df68:	065b      	lsls	r3, r3, #25
  40df6a:	d503      	bpl.n	40df74 <__sbprintf+0x74>
  40df6c:	89a3      	ldrh	r3, [r4, #12]
  40df6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40df72:	81a3      	strh	r3, [r4, #12]
  40df74:	9816      	ldr	r0, [sp, #88]	; 0x58
  40df76:	f000 fd2f 	bl	40e9d8 <__retarget_lock_close_recursive>
  40df7a:	4628      	mov	r0, r5
  40df7c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40df80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040df84 <__swsetup_r>:
  40df84:	b538      	push	{r3, r4, r5, lr}
  40df86:	4b30      	ldr	r3, [pc, #192]	; (40e048 <__swsetup_r+0xc4>)
  40df88:	681b      	ldr	r3, [r3, #0]
  40df8a:	4605      	mov	r5, r0
  40df8c:	460c      	mov	r4, r1
  40df8e:	b113      	cbz	r3, 40df96 <__swsetup_r+0x12>
  40df90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40df92:	2a00      	cmp	r2, #0
  40df94:	d038      	beq.n	40e008 <__swsetup_r+0x84>
  40df96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40df9a:	b293      	uxth	r3, r2
  40df9c:	0718      	lsls	r0, r3, #28
  40df9e:	d50c      	bpl.n	40dfba <__swsetup_r+0x36>
  40dfa0:	6920      	ldr	r0, [r4, #16]
  40dfa2:	b1a8      	cbz	r0, 40dfd0 <__swsetup_r+0x4c>
  40dfa4:	f013 0201 	ands.w	r2, r3, #1
  40dfa8:	d01e      	beq.n	40dfe8 <__swsetup_r+0x64>
  40dfaa:	6963      	ldr	r3, [r4, #20]
  40dfac:	2200      	movs	r2, #0
  40dfae:	425b      	negs	r3, r3
  40dfb0:	61a3      	str	r3, [r4, #24]
  40dfb2:	60a2      	str	r2, [r4, #8]
  40dfb4:	b1f0      	cbz	r0, 40dff4 <__swsetup_r+0x70>
  40dfb6:	2000      	movs	r0, #0
  40dfb8:	bd38      	pop	{r3, r4, r5, pc}
  40dfba:	06d9      	lsls	r1, r3, #27
  40dfbc:	d53c      	bpl.n	40e038 <__swsetup_r+0xb4>
  40dfbe:	0758      	lsls	r0, r3, #29
  40dfc0:	d426      	bmi.n	40e010 <__swsetup_r+0x8c>
  40dfc2:	6920      	ldr	r0, [r4, #16]
  40dfc4:	f042 0308 	orr.w	r3, r2, #8
  40dfc8:	81a3      	strh	r3, [r4, #12]
  40dfca:	b29b      	uxth	r3, r3
  40dfcc:	2800      	cmp	r0, #0
  40dfce:	d1e9      	bne.n	40dfa4 <__swsetup_r+0x20>
  40dfd0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40dfd4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40dfd8:	d0e4      	beq.n	40dfa4 <__swsetup_r+0x20>
  40dfda:	4628      	mov	r0, r5
  40dfdc:	4621      	mov	r1, r4
  40dfde:	f000 fd2f 	bl	40ea40 <__smakebuf_r>
  40dfe2:	89a3      	ldrh	r3, [r4, #12]
  40dfe4:	6920      	ldr	r0, [r4, #16]
  40dfe6:	e7dd      	b.n	40dfa4 <__swsetup_r+0x20>
  40dfe8:	0799      	lsls	r1, r3, #30
  40dfea:	bf58      	it	pl
  40dfec:	6962      	ldrpl	r2, [r4, #20]
  40dfee:	60a2      	str	r2, [r4, #8]
  40dff0:	2800      	cmp	r0, #0
  40dff2:	d1e0      	bne.n	40dfb6 <__swsetup_r+0x32>
  40dff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40dff8:	061a      	lsls	r2, r3, #24
  40dffa:	d5dd      	bpl.n	40dfb8 <__swsetup_r+0x34>
  40dffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e000:	81a3      	strh	r3, [r4, #12]
  40e002:	f04f 30ff 	mov.w	r0, #4294967295
  40e006:	bd38      	pop	{r3, r4, r5, pc}
  40e008:	4618      	mov	r0, r3
  40e00a:	f000 f927 	bl	40e25c <__sinit>
  40e00e:	e7c2      	b.n	40df96 <__swsetup_r+0x12>
  40e010:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40e012:	b151      	cbz	r1, 40e02a <__swsetup_r+0xa6>
  40e014:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40e018:	4299      	cmp	r1, r3
  40e01a:	d004      	beq.n	40e026 <__swsetup_r+0xa2>
  40e01c:	4628      	mov	r0, r5
  40e01e:	f000 fa43 	bl	40e4a8 <_free_r>
  40e022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40e026:	2300      	movs	r3, #0
  40e028:	6323      	str	r3, [r4, #48]	; 0x30
  40e02a:	2300      	movs	r3, #0
  40e02c:	6920      	ldr	r0, [r4, #16]
  40e02e:	6063      	str	r3, [r4, #4]
  40e030:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40e034:	6020      	str	r0, [r4, #0]
  40e036:	e7c5      	b.n	40dfc4 <__swsetup_r+0x40>
  40e038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40e03c:	2309      	movs	r3, #9
  40e03e:	602b      	str	r3, [r5, #0]
  40e040:	f04f 30ff 	mov.w	r0, #4294967295
  40e044:	81a2      	strh	r2, [r4, #12]
  40e046:	bd38      	pop	{r3, r4, r5, pc}
  40e048:	20400184 	.word	0x20400184

0040e04c <register_fini>:
  40e04c:	4b02      	ldr	r3, [pc, #8]	; (40e058 <register_fini+0xc>)
  40e04e:	b113      	cbz	r3, 40e056 <register_fini+0xa>
  40e050:	4802      	ldr	r0, [pc, #8]	; (40e05c <register_fini+0x10>)
  40e052:	f000 b805 	b.w	40e060 <atexit>
  40e056:	4770      	bx	lr
  40e058:	00000000 	.word	0x00000000
  40e05c:	0040e2cd 	.word	0x0040e2cd

0040e060 <atexit>:
  40e060:	2300      	movs	r3, #0
  40e062:	4601      	mov	r1, r0
  40e064:	461a      	mov	r2, r3
  40e066:	4618      	mov	r0, r3
  40e068:	f001 bbde 	b.w	40f828 <__register_exitproc>

0040e06c <__sflush_r>:
  40e06c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40e070:	b29a      	uxth	r2, r3
  40e072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e076:	460d      	mov	r5, r1
  40e078:	0711      	lsls	r1, r2, #28
  40e07a:	4680      	mov	r8, r0
  40e07c:	d43a      	bmi.n	40e0f4 <__sflush_r+0x88>
  40e07e:	686a      	ldr	r2, [r5, #4]
  40e080:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40e084:	2a00      	cmp	r2, #0
  40e086:	81ab      	strh	r3, [r5, #12]
  40e088:	dd6f      	ble.n	40e16a <__sflush_r+0xfe>
  40e08a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40e08c:	2c00      	cmp	r4, #0
  40e08e:	d049      	beq.n	40e124 <__sflush_r+0xb8>
  40e090:	2200      	movs	r2, #0
  40e092:	b29b      	uxth	r3, r3
  40e094:	f8d8 6000 	ldr.w	r6, [r8]
  40e098:	f8c8 2000 	str.w	r2, [r8]
  40e09c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40e0a0:	d067      	beq.n	40e172 <__sflush_r+0x106>
  40e0a2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40e0a4:	075f      	lsls	r7, r3, #29
  40e0a6:	d505      	bpl.n	40e0b4 <__sflush_r+0x48>
  40e0a8:	6869      	ldr	r1, [r5, #4]
  40e0aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40e0ac:	1a52      	subs	r2, r2, r1
  40e0ae:	b10b      	cbz	r3, 40e0b4 <__sflush_r+0x48>
  40e0b0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40e0b2:	1ad2      	subs	r2, r2, r3
  40e0b4:	2300      	movs	r3, #0
  40e0b6:	69e9      	ldr	r1, [r5, #28]
  40e0b8:	4640      	mov	r0, r8
  40e0ba:	47a0      	blx	r4
  40e0bc:	1c44      	adds	r4, r0, #1
  40e0be:	d03c      	beq.n	40e13a <__sflush_r+0xce>
  40e0c0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40e0c4:	692a      	ldr	r2, [r5, #16]
  40e0c6:	602a      	str	r2, [r5, #0]
  40e0c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40e0cc:	2200      	movs	r2, #0
  40e0ce:	81ab      	strh	r3, [r5, #12]
  40e0d0:	04db      	lsls	r3, r3, #19
  40e0d2:	606a      	str	r2, [r5, #4]
  40e0d4:	d447      	bmi.n	40e166 <__sflush_r+0xfa>
  40e0d6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40e0d8:	f8c8 6000 	str.w	r6, [r8]
  40e0dc:	b311      	cbz	r1, 40e124 <__sflush_r+0xb8>
  40e0de:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40e0e2:	4299      	cmp	r1, r3
  40e0e4:	d002      	beq.n	40e0ec <__sflush_r+0x80>
  40e0e6:	4640      	mov	r0, r8
  40e0e8:	f000 f9de 	bl	40e4a8 <_free_r>
  40e0ec:	2000      	movs	r0, #0
  40e0ee:	6328      	str	r0, [r5, #48]	; 0x30
  40e0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e0f4:	692e      	ldr	r6, [r5, #16]
  40e0f6:	b1ae      	cbz	r6, 40e124 <__sflush_r+0xb8>
  40e0f8:	682c      	ldr	r4, [r5, #0]
  40e0fa:	602e      	str	r6, [r5, #0]
  40e0fc:	0791      	lsls	r1, r2, #30
  40e0fe:	bf0c      	ite	eq
  40e100:	696b      	ldreq	r3, [r5, #20]
  40e102:	2300      	movne	r3, #0
  40e104:	1ba4      	subs	r4, r4, r6
  40e106:	60ab      	str	r3, [r5, #8]
  40e108:	e00a      	b.n	40e120 <__sflush_r+0xb4>
  40e10a:	4623      	mov	r3, r4
  40e10c:	4632      	mov	r2, r6
  40e10e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40e110:	69e9      	ldr	r1, [r5, #28]
  40e112:	4640      	mov	r0, r8
  40e114:	47b8      	blx	r7
  40e116:	2800      	cmp	r0, #0
  40e118:	eba4 0400 	sub.w	r4, r4, r0
  40e11c:	4406      	add	r6, r0
  40e11e:	dd04      	ble.n	40e12a <__sflush_r+0xbe>
  40e120:	2c00      	cmp	r4, #0
  40e122:	dcf2      	bgt.n	40e10a <__sflush_r+0x9e>
  40e124:	2000      	movs	r0, #0
  40e126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e12a:	89ab      	ldrh	r3, [r5, #12]
  40e12c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e130:	81ab      	strh	r3, [r5, #12]
  40e132:	f04f 30ff 	mov.w	r0, #4294967295
  40e136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e13a:	f8d8 4000 	ldr.w	r4, [r8]
  40e13e:	2c1d      	cmp	r4, #29
  40e140:	d8f3      	bhi.n	40e12a <__sflush_r+0xbe>
  40e142:	4b19      	ldr	r3, [pc, #100]	; (40e1a8 <__sflush_r+0x13c>)
  40e144:	40e3      	lsrs	r3, r4
  40e146:	43db      	mvns	r3, r3
  40e148:	f013 0301 	ands.w	r3, r3, #1
  40e14c:	d1ed      	bne.n	40e12a <__sflush_r+0xbe>
  40e14e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40e152:	606b      	str	r3, [r5, #4]
  40e154:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40e158:	6929      	ldr	r1, [r5, #16]
  40e15a:	81ab      	strh	r3, [r5, #12]
  40e15c:	04da      	lsls	r2, r3, #19
  40e15e:	6029      	str	r1, [r5, #0]
  40e160:	d5b9      	bpl.n	40e0d6 <__sflush_r+0x6a>
  40e162:	2c00      	cmp	r4, #0
  40e164:	d1b7      	bne.n	40e0d6 <__sflush_r+0x6a>
  40e166:	6528      	str	r0, [r5, #80]	; 0x50
  40e168:	e7b5      	b.n	40e0d6 <__sflush_r+0x6a>
  40e16a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40e16c:	2a00      	cmp	r2, #0
  40e16e:	dc8c      	bgt.n	40e08a <__sflush_r+0x1e>
  40e170:	e7d8      	b.n	40e124 <__sflush_r+0xb8>
  40e172:	2301      	movs	r3, #1
  40e174:	69e9      	ldr	r1, [r5, #28]
  40e176:	4640      	mov	r0, r8
  40e178:	47a0      	blx	r4
  40e17a:	1c43      	adds	r3, r0, #1
  40e17c:	4602      	mov	r2, r0
  40e17e:	d002      	beq.n	40e186 <__sflush_r+0x11a>
  40e180:	89ab      	ldrh	r3, [r5, #12]
  40e182:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40e184:	e78e      	b.n	40e0a4 <__sflush_r+0x38>
  40e186:	f8d8 3000 	ldr.w	r3, [r8]
  40e18a:	2b00      	cmp	r3, #0
  40e18c:	d0f8      	beq.n	40e180 <__sflush_r+0x114>
  40e18e:	2b1d      	cmp	r3, #29
  40e190:	d001      	beq.n	40e196 <__sflush_r+0x12a>
  40e192:	2b16      	cmp	r3, #22
  40e194:	d102      	bne.n	40e19c <__sflush_r+0x130>
  40e196:	f8c8 6000 	str.w	r6, [r8]
  40e19a:	e7c3      	b.n	40e124 <__sflush_r+0xb8>
  40e19c:	89ab      	ldrh	r3, [r5, #12]
  40e19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e1a2:	81ab      	strh	r3, [r5, #12]
  40e1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e1a8:	20400001 	.word	0x20400001

0040e1ac <_fflush_r>:
  40e1ac:	b538      	push	{r3, r4, r5, lr}
  40e1ae:	460d      	mov	r5, r1
  40e1b0:	4604      	mov	r4, r0
  40e1b2:	b108      	cbz	r0, 40e1b8 <_fflush_r+0xc>
  40e1b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e1b6:	b1bb      	cbz	r3, 40e1e8 <_fflush_r+0x3c>
  40e1b8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40e1bc:	b188      	cbz	r0, 40e1e2 <_fflush_r+0x36>
  40e1be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40e1c0:	07db      	lsls	r3, r3, #31
  40e1c2:	d401      	bmi.n	40e1c8 <_fflush_r+0x1c>
  40e1c4:	0581      	lsls	r1, r0, #22
  40e1c6:	d517      	bpl.n	40e1f8 <_fflush_r+0x4c>
  40e1c8:	4620      	mov	r0, r4
  40e1ca:	4629      	mov	r1, r5
  40e1cc:	f7ff ff4e 	bl	40e06c <__sflush_r>
  40e1d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40e1d2:	07da      	lsls	r2, r3, #31
  40e1d4:	4604      	mov	r4, r0
  40e1d6:	d402      	bmi.n	40e1de <_fflush_r+0x32>
  40e1d8:	89ab      	ldrh	r3, [r5, #12]
  40e1da:	059b      	lsls	r3, r3, #22
  40e1dc:	d507      	bpl.n	40e1ee <_fflush_r+0x42>
  40e1de:	4620      	mov	r0, r4
  40e1e0:	bd38      	pop	{r3, r4, r5, pc}
  40e1e2:	4604      	mov	r4, r0
  40e1e4:	4620      	mov	r0, r4
  40e1e6:	bd38      	pop	{r3, r4, r5, pc}
  40e1e8:	f000 f838 	bl	40e25c <__sinit>
  40e1ec:	e7e4      	b.n	40e1b8 <_fflush_r+0xc>
  40e1ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40e1f0:	f000 fbf6 	bl	40e9e0 <__retarget_lock_release_recursive>
  40e1f4:	4620      	mov	r0, r4
  40e1f6:	bd38      	pop	{r3, r4, r5, pc}
  40e1f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40e1fa:	f000 fbef 	bl	40e9dc <__retarget_lock_acquire_recursive>
  40e1fe:	e7e3      	b.n	40e1c8 <_fflush_r+0x1c>

0040e200 <_cleanup_r>:
  40e200:	4901      	ldr	r1, [pc, #4]	; (40e208 <_cleanup_r+0x8>)
  40e202:	f000 bbaf 	b.w	40e964 <_fwalk_reent>
  40e206:	bf00      	nop
  40e208:	0040f911 	.word	0x0040f911

0040e20c <std.isra.0>:
  40e20c:	b510      	push	{r4, lr}
  40e20e:	2300      	movs	r3, #0
  40e210:	4604      	mov	r4, r0
  40e212:	8181      	strh	r1, [r0, #12]
  40e214:	81c2      	strh	r2, [r0, #14]
  40e216:	6003      	str	r3, [r0, #0]
  40e218:	6043      	str	r3, [r0, #4]
  40e21a:	6083      	str	r3, [r0, #8]
  40e21c:	6643      	str	r3, [r0, #100]	; 0x64
  40e21e:	6103      	str	r3, [r0, #16]
  40e220:	6143      	str	r3, [r0, #20]
  40e222:	6183      	str	r3, [r0, #24]
  40e224:	4619      	mov	r1, r3
  40e226:	2208      	movs	r2, #8
  40e228:	305c      	adds	r0, #92	; 0x5c
  40e22a:	f7fe fec3 	bl	40cfb4 <memset>
  40e22e:	4807      	ldr	r0, [pc, #28]	; (40e24c <std.isra.0+0x40>)
  40e230:	4907      	ldr	r1, [pc, #28]	; (40e250 <std.isra.0+0x44>)
  40e232:	4a08      	ldr	r2, [pc, #32]	; (40e254 <std.isra.0+0x48>)
  40e234:	4b08      	ldr	r3, [pc, #32]	; (40e258 <std.isra.0+0x4c>)
  40e236:	6220      	str	r0, [r4, #32]
  40e238:	61e4      	str	r4, [r4, #28]
  40e23a:	6261      	str	r1, [r4, #36]	; 0x24
  40e23c:	62a2      	str	r2, [r4, #40]	; 0x28
  40e23e:	62e3      	str	r3, [r4, #44]	; 0x2c
  40e240:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40e244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40e248:	f000 bbc4 	b.w	40e9d4 <__retarget_lock_init_recursive>
  40e24c:	0040f561 	.word	0x0040f561
  40e250:	0040f585 	.word	0x0040f585
  40e254:	0040f5c1 	.word	0x0040f5c1
  40e258:	0040f5e1 	.word	0x0040f5e1

0040e25c <__sinit>:
  40e25c:	b510      	push	{r4, lr}
  40e25e:	4604      	mov	r4, r0
  40e260:	4812      	ldr	r0, [pc, #72]	; (40e2ac <__sinit+0x50>)
  40e262:	f000 fbbb 	bl	40e9dc <__retarget_lock_acquire_recursive>
  40e266:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40e268:	b9d2      	cbnz	r2, 40e2a0 <__sinit+0x44>
  40e26a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40e26e:	4810      	ldr	r0, [pc, #64]	; (40e2b0 <__sinit+0x54>)
  40e270:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40e274:	2103      	movs	r1, #3
  40e276:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40e27a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40e27c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40e280:	6860      	ldr	r0, [r4, #4]
  40e282:	2104      	movs	r1, #4
  40e284:	f7ff ffc2 	bl	40e20c <std.isra.0>
  40e288:	2201      	movs	r2, #1
  40e28a:	2109      	movs	r1, #9
  40e28c:	68a0      	ldr	r0, [r4, #8]
  40e28e:	f7ff ffbd 	bl	40e20c <std.isra.0>
  40e292:	2202      	movs	r2, #2
  40e294:	2112      	movs	r1, #18
  40e296:	68e0      	ldr	r0, [r4, #12]
  40e298:	f7ff ffb8 	bl	40e20c <std.isra.0>
  40e29c:	2301      	movs	r3, #1
  40e29e:	63a3      	str	r3, [r4, #56]	; 0x38
  40e2a0:	4802      	ldr	r0, [pc, #8]	; (40e2ac <__sinit+0x50>)
  40e2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40e2a6:	f000 bb9b 	b.w	40e9e0 <__retarget_lock_release_recursive>
  40e2aa:	bf00      	nop
  40e2ac:	20401208 	.word	0x20401208
  40e2b0:	0040e201 	.word	0x0040e201

0040e2b4 <__sfp_lock_acquire>:
  40e2b4:	4801      	ldr	r0, [pc, #4]	; (40e2bc <__sfp_lock_acquire+0x8>)
  40e2b6:	f000 bb91 	b.w	40e9dc <__retarget_lock_acquire_recursive>
  40e2ba:	bf00      	nop
  40e2bc:	2040121c 	.word	0x2040121c

0040e2c0 <__sfp_lock_release>:
  40e2c0:	4801      	ldr	r0, [pc, #4]	; (40e2c8 <__sfp_lock_release+0x8>)
  40e2c2:	f000 bb8d 	b.w	40e9e0 <__retarget_lock_release_recursive>
  40e2c6:	bf00      	nop
  40e2c8:	2040121c 	.word	0x2040121c

0040e2cc <__libc_fini_array>:
  40e2cc:	b538      	push	{r3, r4, r5, lr}
  40e2ce:	4c0a      	ldr	r4, [pc, #40]	; (40e2f8 <__libc_fini_array+0x2c>)
  40e2d0:	4d0a      	ldr	r5, [pc, #40]	; (40e2fc <__libc_fini_array+0x30>)
  40e2d2:	1b64      	subs	r4, r4, r5
  40e2d4:	10a4      	asrs	r4, r4, #2
  40e2d6:	d00a      	beq.n	40e2ee <__libc_fini_array+0x22>
  40e2d8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40e2dc:	3b01      	subs	r3, #1
  40e2de:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40e2e2:	3c01      	subs	r4, #1
  40e2e4:	f855 3904 	ldr.w	r3, [r5], #-4
  40e2e8:	4798      	blx	r3
  40e2ea:	2c00      	cmp	r4, #0
  40e2ec:	d1f9      	bne.n	40e2e2 <__libc_fini_array+0x16>
  40e2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40e2f2:	f002 be29 	b.w	410f48 <_fini>
  40e2f6:	bf00      	nop
  40e2f8:	00410f58 	.word	0x00410f58
  40e2fc:	00410f54 	.word	0x00410f54

0040e300 <__fputwc>:
  40e300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e304:	b082      	sub	sp, #8
  40e306:	4680      	mov	r8, r0
  40e308:	4689      	mov	r9, r1
  40e30a:	4614      	mov	r4, r2
  40e30c:	f000 fb54 	bl	40e9b8 <__locale_mb_cur_max>
  40e310:	2801      	cmp	r0, #1
  40e312:	d036      	beq.n	40e382 <__fputwc+0x82>
  40e314:	464a      	mov	r2, r9
  40e316:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40e31a:	a901      	add	r1, sp, #4
  40e31c:	4640      	mov	r0, r8
  40e31e:	f001 fa35 	bl	40f78c <_wcrtomb_r>
  40e322:	1c42      	adds	r2, r0, #1
  40e324:	4606      	mov	r6, r0
  40e326:	d025      	beq.n	40e374 <__fputwc+0x74>
  40e328:	b3a8      	cbz	r0, 40e396 <__fputwc+0x96>
  40e32a:	f89d e004 	ldrb.w	lr, [sp, #4]
  40e32e:	2500      	movs	r5, #0
  40e330:	f10d 0a04 	add.w	sl, sp, #4
  40e334:	e009      	b.n	40e34a <__fputwc+0x4a>
  40e336:	6823      	ldr	r3, [r4, #0]
  40e338:	1c5a      	adds	r2, r3, #1
  40e33a:	6022      	str	r2, [r4, #0]
  40e33c:	f883 e000 	strb.w	lr, [r3]
  40e340:	3501      	adds	r5, #1
  40e342:	42b5      	cmp	r5, r6
  40e344:	d227      	bcs.n	40e396 <__fputwc+0x96>
  40e346:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40e34a:	68a3      	ldr	r3, [r4, #8]
  40e34c:	3b01      	subs	r3, #1
  40e34e:	2b00      	cmp	r3, #0
  40e350:	60a3      	str	r3, [r4, #8]
  40e352:	daf0      	bge.n	40e336 <__fputwc+0x36>
  40e354:	69a7      	ldr	r7, [r4, #24]
  40e356:	42bb      	cmp	r3, r7
  40e358:	4671      	mov	r1, lr
  40e35a:	4622      	mov	r2, r4
  40e35c:	4640      	mov	r0, r8
  40e35e:	db02      	blt.n	40e366 <__fputwc+0x66>
  40e360:	f1be 0f0a 	cmp.w	lr, #10
  40e364:	d1e7      	bne.n	40e336 <__fputwc+0x36>
  40e366:	f001 f9b9 	bl	40f6dc <__swbuf_r>
  40e36a:	1c43      	adds	r3, r0, #1
  40e36c:	d1e8      	bne.n	40e340 <__fputwc+0x40>
  40e36e:	b002      	add	sp, #8
  40e370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e374:	89a3      	ldrh	r3, [r4, #12]
  40e376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e37a:	81a3      	strh	r3, [r4, #12]
  40e37c:	b002      	add	sp, #8
  40e37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e382:	f109 33ff 	add.w	r3, r9, #4294967295
  40e386:	2bfe      	cmp	r3, #254	; 0xfe
  40e388:	d8c4      	bhi.n	40e314 <__fputwc+0x14>
  40e38a:	fa5f fe89 	uxtb.w	lr, r9
  40e38e:	4606      	mov	r6, r0
  40e390:	f88d e004 	strb.w	lr, [sp, #4]
  40e394:	e7cb      	b.n	40e32e <__fputwc+0x2e>
  40e396:	4648      	mov	r0, r9
  40e398:	b002      	add	sp, #8
  40e39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e39e:	bf00      	nop

0040e3a0 <_fputwc_r>:
  40e3a0:	b530      	push	{r4, r5, lr}
  40e3a2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40e3a4:	f013 0f01 	tst.w	r3, #1
  40e3a8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40e3ac:	4614      	mov	r4, r2
  40e3ae:	b083      	sub	sp, #12
  40e3b0:	4605      	mov	r5, r0
  40e3b2:	b29a      	uxth	r2, r3
  40e3b4:	d101      	bne.n	40e3ba <_fputwc_r+0x1a>
  40e3b6:	0590      	lsls	r0, r2, #22
  40e3b8:	d51c      	bpl.n	40e3f4 <_fputwc_r+0x54>
  40e3ba:	0490      	lsls	r0, r2, #18
  40e3bc:	d406      	bmi.n	40e3cc <_fputwc_r+0x2c>
  40e3be:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40e3c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40e3c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40e3c8:	81a3      	strh	r3, [r4, #12]
  40e3ca:	6662      	str	r2, [r4, #100]	; 0x64
  40e3cc:	4628      	mov	r0, r5
  40e3ce:	4622      	mov	r2, r4
  40e3d0:	f7ff ff96 	bl	40e300 <__fputwc>
  40e3d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40e3d6:	07da      	lsls	r2, r3, #31
  40e3d8:	4605      	mov	r5, r0
  40e3da:	d402      	bmi.n	40e3e2 <_fputwc_r+0x42>
  40e3dc:	89a3      	ldrh	r3, [r4, #12]
  40e3de:	059b      	lsls	r3, r3, #22
  40e3e0:	d502      	bpl.n	40e3e8 <_fputwc_r+0x48>
  40e3e2:	4628      	mov	r0, r5
  40e3e4:	b003      	add	sp, #12
  40e3e6:	bd30      	pop	{r4, r5, pc}
  40e3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e3ea:	f000 faf9 	bl	40e9e0 <__retarget_lock_release_recursive>
  40e3ee:	4628      	mov	r0, r5
  40e3f0:	b003      	add	sp, #12
  40e3f2:	bd30      	pop	{r4, r5, pc}
  40e3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e3f6:	9101      	str	r1, [sp, #4]
  40e3f8:	f000 faf0 	bl	40e9dc <__retarget_lock_acquire_recursive>
  40e3fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e400:	9901      	ldr	r1, [sp, #4]
  40e402:	b29a      	uxth	r2, r3
  40e404:	e7d9      	b.n	40e3ba <_fputwc_r+0x1a>
  40e406:	bf00      	nop

0040e408 <_malloc_trim_r>:
  40e408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e40a:	4f24      	ldr	r7, [pc, #144]	; (40e49c <_malloc_trim_r+0x94>)
  40e40c:	460c      	mov	r4, r1
  40e40e:	4606      	mov	r6, r0
  40e410:	f000 fee2 	bl	40f1d8 <__malloc_lock>
  40e414:	68bb      	ldr	r3, [r7, #8]
  40e416:	685d      	ldr	r5, [r3, #4]
  40e418:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40e41c:	310f      	adds	r1, #15
  40e41e:	f025 0503 	bic.w	r5, r5, #3
  40e422:	4429      	add	r1, r5
  40e424:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40e428:	f021 010f 	bic.w	r1, r1, #15
  40e42c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40e430:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40e434:	db07      	blt.n	40e446 <_malloc_trim_r+0x3e>
  40e436:	2100      	movs	r1, #0
  40e438:	4630      	mov	r0, r6
  40e43a:	f001 f87f 	bl	40f53c <_sbrk_r>
  40e43e:	68bb      	ldr	r3, [r7, #8]
  40e440:	442b      	add	r3, r5
  40e442:	4298      	cmp	r0, r3
  40e444:	d004      	beq.n	40e450 <_malloc_trim_r+0x48>
  40e446:	4630      	mov	r0, r6
  40e448:	f000 fecc 	bl	40f1e4 <__malloc_unlock>
  40e44c:	2000      	movs	r0, #0
  40e44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40e450:	4261      	negs	r1, r4
  40e452:	4630      	mov	r0, r6
  40e454:	f001 f872 	bl	40f53c <_sbrk_r>
  40e458:	3001      	adds	r0, #1
  40e45a:	d00d      	beq.n	40e478 <_malloc_trim_r+0x70>
  40e45c:	4b10      	ldr	r3, [pc, #64]	; (40e4a0 <_malloc_trim_r+0x98>)
  40e45e:	68ba      	ldr	r2, [r7, #8]
  40e460:	6819      	ldr	r1, [r3, #0]
  40e462:	1b2d      	subs	r5, r5, r4
  40e464:	f045 0501 	orr.w	r5, r5, #1
  40e468:	4630      	mov	r0, r6
  40e46a:	1b09      	subs	r1, r1, r4
  40e46c:	6055      	str	r5, [r2, #4]
  40e46e:	6019      	str	r1, [r3, #0]
  40e470:	f000 feb8 	bl	40f1e4 <__malloc_unlock>
  40e474:	2001      	movs	r0, #1
  40e476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40e478:	2100      	movs	r1, #0
  40e47a:	4630      	mov	r0, r6
  40e47c:	f001 f85e 	bl	40f53c <_sbrk_r>
  40e480:	68ba      	ldr	r2, [r7, #8]
  40e482:	1a83      	subs	r3, r0, r2
  40e484:	2b0f      	cmp	r3, #15
  40e486:	ddde      	ble.n	40e446 <_malloc_trim_r+0x3e>
  40e488:	4c06      	ldr	r4, [pc, #24]	; (40e4a4 <_malloc_trim_r+0x9c>)
  40e48a:	4905      	ldr	r1, [pc, #20]	; (40e4a0 <_malloc_trim_r+0x98>)
  40e48c:	6824      	ldr	r4, [r4, #0]
  40e48e:	f043 0301 	orr.w	r3, r3, #1
  40e492:	1b00      	subs	r0, r0, r4
  40e494:	6053      	str	r3, [r2, #4]
  40e496:	6008      	str	r0, [r1, #0]
  40e498:	e7d5      	b.n	40e446 <_malloc_trim_r+0x3e>
  40e49a:	bf00      	nop
  40e49c:	20400720 	.word	0x20400720
  40e4a0:	204010d4 	.word	0x204010d4
  40e4a4:	20400b28 	.word	0x20400b28

0040e4a8 <_free_r>:
  40e4a8:	2900      	cmp	r1, #0
  40e4aa:	d044      	beq.n	40e536 <_free_r+0x8e>
  40e4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e4b0:	460d      	mov	r5, r1
  40e4b2:	4680      	mov	r8, r0
  40e4b4:	f000 fe90 	bl	40f1d8 <__malloc_lock>
  40e4b8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40e4bc:	4969      	ldr	r1, [pc, #420]	; (40e664 <_free_r+0x1bc>)
  40e4be:	f027 0301 	bic.w	r3, r7, #1
  40e4c2:	f1a5 0408 	sub.w	r4, r5, #8
  40e4c6:	18e2      	adds	r2, r4, r3
  40e4c8:	688e      	ldr	r6, [r1, #8]
  40e4ca:	6850      	ldr	r0, [r2, #4]
  40e4cc:	42b2      	cmp	r2, r6
  40e4ce:	f020 0003 	bic.w	r0, r0, #3
  40e4d2:	d05e      	beq.n	40e592 <_free_r+0xea>
  40e4d4:	07fe      	lsls	r6, r7, #31
  40e4d6:	6050      	str	r0, [r2, #4]
  40e4d8:	d40b      	bmi.n	40e4f2 <_free_r+0x4a>
  40e4da:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40e4de:	1be4      	subs	r4, r4, r7
  40e4e0:	f101 0e08 	add.w	lr, r1, #8
  40e4e4:	68a5      	ldr	r5, [r4, #8]
  40e4e6:	4575      	cmp	r5, lr
  40e4e8:	443b      	add	r3, r7
  40e4ea:	d06d      	beq.n	40e5c8 <_free_r+0x120>
  40e4ec:	68e7      	ldr	r7, [r4, #12]
  40e4ee:	60ef      	str	r7, [r5, #12]
  40e4f0:	60bd      	str	r5, [r7, #8]
  40e4f2:	1815      	adds	r5, r2, r0
  40e4f4:	686d      	ldr	r5, [r5, #4]
  40e4f6:	07ed      	lsls	r5, r5, #31
  40e4f8:	d53e      	bpl.n	40e578 <_free_r+0xd0>
  40e4fa:	f043 0201 	orr.w	r2, r3, #1
  40e4fe:	6062      	str	r2, [r4, #4]
  40e500:	50e3      	str	r3, [r4, r3]
  40e502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40e506:	d217      	bcs.n	40e538 <_free_r+0x90>
  40e508:	08db      	lsrs	r3, r3, #3
  40e50a:	1c58      	adds	r0, r3, #1
  40e50c:	109a      	asrs	r2, r3, #2
  40e50e:	684d      	ldr	r5, [r1, #4]
  40e510:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40e514:	60a7      	str	r7, [r4, #8]
  40e516:	2301      	movs	r3, #1
  40e518:	4093      	lsls	r3, r2
  40e51a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40e51e:	432b      	orrs	r3, r5
  40e520:	3a08      	subs	r2, #8
  40e522:	60e2      	str	r2, [r4, #12]
  40e524:	604b      	str	r3, [r1, #4]
  40e526:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40e52a:	60fc      	str	r4, [r7, #12]
  40e52c:	4640      	mov	r0, r8
  40e52e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40e532:	f000 be57 	b.w	40f1e4 <__malloc_unlock>
  40e536:	4770      	bx	lr
  40e538:	0a5a      	lsrs	r2, r3, #9
  40e53a:	2a04      	cmp	r2, #4
  40e53c:	d852      	bhi.n	40e5e4 <_free_r+0x13c>
  40e53e:	099a      	lsrs	r2, r3, #6
  40e540:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40e544:	00ff      	lsls	r7, r7, #3
  40e546:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40e54a:	19c8      	adds	r0, r1, r7
  40e54c:	59ca      	ldr	r2, [r1, r7]
  40e54e:	3808      	subs	r0, #8
  40e550:	4290      	cmp	r0, r2
  40e552:	d04f      	beq.n	40e5f4 <_free_r+0x14c>
  40e554:	6851      	ldr	r1, [r2, #4]
  40e556:	f021 0103 	bic.w	r1, r1, #3
  40e55a:	428b      	cmp	r3, r1
  40e55c:	d232      	bcs.n	40e5c4 <_free_r+0x11c>
  40e55e:	6892      	ldr	r2, [r2, #8]
  40e560:	4290      	cmp	r0, r2
  40e562:	d1f7      	bne.n	40e554 <_free_r+0xac>
  40e564:	68c3      	ldr	r3, [r0, #12]
  40e566:	60a0      	str	r0, [r4, #8]
  40e568:	60e3      	str	r3, [r4, #12]
  40e56a:	609c      	str	r4, [r3, #8]
  40e56c:	60c4      	str	r4, [r0, #12]
  40e56e:	4640      	mov	r0, r8
  40e570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40e574:	f000 be36 	b.w	40f1e4 <__malloc_unlock>
  40e578:	6895      	ldr	r5, [r2, #8]
  40e57a:	4f3b      	ldr	r7, [pc, #236]	; (40e668 <_free_r+0x1c0>)
  40e57c:	42bd      	cmp	r5, r7
  40e57e:	4403      	add	r3, r0
  40e580:	d040      	beq.n	40e604 <_free_r+0x15c>
  40e582:	68d0      	ldr	r0, [r2, #12]
  40e584:	60e8      	str	r0, [r5, #12]
  40e586:	f043 0201 	orr.w	r2, r3, #1
  40e58a:	6085      	str	r5, [r0, #8]
  40e58c:	6062      	str	r2, [r4, #4]
  40e58e:	50e3      	str	r3, [r4, r3]
  40e590:	e7b7      	b.n	40e502 <_free_r+0x5a>
  40e592:	07ff      	lsls	r7, r7, #31
  40e594:	4403      	add	r3, r0
  40e596:	d407      	bmi.n	40e5a8 <_free_r+0x100>
  40e598:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40e59c:	1aa4      	subs	r4, r4, r2
  40e59e:	4413      	add	r3, r2
  40e5a0:	68a0      	ldr	r0, [r4, #8]
  40e5a2:	68e2      	ldr	r2, [r4, #12]
  40e5a4:	60c2      	str	r2, [r0, #12]
  40e5a6:	6090      	str	r0, [r2, #8]
  40e5a8:	4a30      	ldr	r2, [pc, #192]	; (40e66c <_free_r+0x1c4>)
  40e5aa:	6812      	ldr	r2, [r2, #0]
  40e5ac:	f043 0001 	orr.w	r0, r3, #1
  40e5b0:	4293      	cmp	r3, r2
  40e5b2:	6060      	str	r0, [r4, #4]
  40e5b4:	608c      	str	r4, [r1, #8]
  40e5b6:	d3b9      	bcc.n	40e52c <_free_r+0x84>
  40e5b8:	4b2d      	ldr	r3, [pc, #180]	; (40e670 <_free_r+0x1c8>)
  40e5ba:	4640      	mov	r0, r8
  40e5bc:	6819      	ldr	r1, [r3, #0]
  40e5be:	f7ff ff23 	bl	40e408 <_malloc_trim_r>
  40e5c2:	e7b3      	b.n	40e52c <_free_r+0x84>
  40e5c4:	4610      	mov	r0, r2
  40e5c6:	e7cd      	b.n	40e564 <_free_r+0xbc>
  40e5c8:	1811      	adds	r1, r2, r0
  40e5ca:	6849      	ldr	r1, [r1, #4]
  40e5cc:	07c9      	lsls	r1, r1, #31
  40e5ce:	d444      	bmi.n	40e65a <_free_r+0x1b2>
  40e5d0:	6891      	ldr	r1, [r2, #8]
  40e5d2:	68d2      	ldr	r2, [r2, #12]
  40e5d4:	60ca      	str	r2, [r1, #12]
  40e5d6:	4403      	add	r3, r0
  40e5d8:	f043 0001 	orr.w	r0, r3, #1
  40e5dc:	6091      	str	r1, [r2, #8]
  40e5de:	6060      	str	r0, [r4, #4]
  40e5e0:	50e3      	str	r3, [r4, r3]
  40e5e2:	e7a3      	b.n	40e52c <_free_r+0x84>
  40e5e4:	2a14      	cmp	r2, #20
  40e5e6:	d816      	bhi.n	40e616 <_free_r+0x16e>
  40e5e8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40e5ec:	00ff      	lsls	r7, r7, #3
  40e5ee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40e5f2:	e7aa      	b.n	40e54a <_free_r+0xa2>
  40e5f4:	10aa      	asrs	r2, r5, #2
  40e5f6:	2301      	movs	r3, #1
  40e5f8:	684d      	ldr	r5, [r1, #4]
  40e5fa:	4093      	lsls	r3, r2
  40e5fc:	432b      	orrs	r3, r5
  40e5fe:	604b      	str	r3, [r1, #4]
  40e600:	4603      	mov	r3, r0
  40e602:	e7b0      	b.n	40e566 <_free_r+0xbe>
  40e604:	f043 0201 	orr.w	r2, r3, #1
  40e608:	614c      	str	r4, [r1, #20]
  40e60a:	610c      	str	r4, [r1, #16]
  40e60c:	60e5      	str	r5, [r4, #12]
  40e60e:	60a5      	str	r5, [r4, #8]
  40e610:	6062      	str	r2, [r4, #4]
  40e612:	50e3      	str	r3, [r4, r3]
  40e614:	e78a      	b.n	40e52c <_free_r+0x84>
  40e616:	2a54      	cmp	r2, #84	; 0x54
  40e618:	d806      	bhi.n	40e628 <_free_r+0x180>
  40e61a:	0b1a      	lsrs	r2, r3, #12
  40e61c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40e620:	00ff      	lsls	r7, r7, #3
  40e622:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40e626:	e790      	b.n	40e54a <_free_r+0xa2>
  40e628:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40e62c:	d806      	bhi.n	40e63c <_free_r+0x194>
  40e62e:	0bda      	lsrs	r2, r3, #15
  40e630:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40e634:	00ff      	lsls	r7, r7, #3
  40e636:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40e63a:	e786      	b.n	40e54a <_free_r+0xa2>
  40e63c:	f240 5054 	movw	r0, #1364	; 0x554
  40e640:	4282      	cmp	r2, r0
  40e642:	d806      	bhi.n	40e652 <_free_r+0x1aa>
  40e644:	0c9a      	lsrs	r2, r3, #18
  40e646:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40e64a:	00ff      	lsls	r7, r7, #3
  40e64c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40e650:	e77b      	b.n	40e54a <_free_r+0xa2>
  40e652:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40e656:	257e      	movs	r5, #126	; 0x7e
  40e658:	e777      	b.n	40e54a <_free_r+0xa2>
  40e65a:	f043 0101 	orr.w	r1, r3, #1
  40e65e:	6061      	str	r1, [r4, #4]
  40e660:	6013      	str	r3, [r2, #0]
  40e662:	e763      	b.n	40e52c <_free_r+0x84>
  40e664:	20400720 	.word	0x20400720
  40e668:	20400728 	.word	0x20400728
  40e66c:	20400b2c 	.word	0x20400b2c
  40e670:	20401104 	.word	0x20401104

0040e674 <__sfvwrite_r>:
  40e674:	6893      	ldr	r3, [r2, #8]
  40e676:	2b00      	cmp	r3, #0
  40e678:	d073      	beq.n	40e762 <__sfvwrite_r+0xee>
  40e67a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e67e:	898b      	ldrh	r3, [r1, #12]
  40e680:	b083      	sub	sp, #12
  40e682:	460c      	mov	r4, r1
  40e684:	0719      	lsls	r1, r3, #28
  40e686:	9000      	str	r0, [sp, #0]
  40e688:	4616      	mov	r6, r2
  40e68a:	d526      	bpl.n	40e6da <__sfvwrite_r+0x66>
  40e68c:	6922      	ldr	r2, [r4, #16]
  40e68e:	b322      	cbz	r2, 40e6da <__sfvwrite_r+0x66>
  40e690:	f013 0002 	ands.w	r0, r3, #2
  40e694:	6835      	ldr	r5, [r6, #0]
  40e696:	d02c      	beq.n	40e6f2 <__sfvwrite_r+0x7e>
  40e698:	f04f 0900 	mov.w	r9, #0
  40e69c:	4fb0      	ldr	r7, [pc, #704]	; (40e960 <__sfvwrite_r+0x2ec>)
  40e69e:	46c8      	mov	r8, r9
  40e6a0:	46b2      	mov	sl, r6
  40e6a2:	45b8      	cmp	r8, r7
  40e6a4:	4643      	mov	r3, r8
  40e6a6:	464a      	mov	r2, r9
  40e6a8:	bf28      	it	cs
  40e6aa:	463b      	movcs	r3, r7
  40e6ac:	9800      	ldr	r0, [sp, #0]
  40e6ae:	f1b8 0f00 	cmp.w	r8, #0
  40e6b2:	d050      	beq.n	40e756 <__sfvwrite_r+0xe2>
  40e6b4:	69e1      	ldr	r1, [r4, #28]
  40e6b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40e6b8:	47b0      	blx	r6
  40e6ba:	2800      	cmp	r0, #0
  40e6bc:	dd58      	ble.n	40e770 <__sfvwrite_r+0xfc>
  40e6be:	f8da 3008 	ldr.w	r3, [sl, #8]
  40e6c2:	1a1b      	subs	r3, r3, r0
  40e6c4:	4481      	add	r9, r0
  40e6c6:	eba8 0800 	sub.w	r8, r8, r0
  40e6ca:	f8ca 3008 	str.w	r3, [sl, #8]
  40e6ce:	2b00      	cmp	r3, #0
  40e6d0:	d1e7      	bne.n	40e6a2 <__sfvwrite_r+0x2e>
  40e6d2:	2000      	movs	r0, #0
  40e6d4:	b003      	add	sp, #12
  40e6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e6da:	4621      	mov	r1, r4
  40e6dc:	9800      	ldr	r0, [sp, #0]
  40e6de:	f7ff fc51 	bl	40df84 <__swsetup_r>
  40e6e2:	2800      	cmp	r0, #0
  40e6e4:	f040 8133 	bne.w	40e94e <__sfvwrite_r+0x2da>
  40e6e8:	89a3      	ldrh	r3, [r4, #12]
  40e6ea:	6835      	ldr	r5, [r6, #0]
  40e6ec:	f013 0002 	ands.w	r0, r3, #2
  40e6f0:	d1d2      	bne.n	40e698 <__sfvwrite_r+0x24>
  40e6f2:	f013 0901 	ands.w	r9, r3, #1
  40e6f6:	d145      	bne.n	40e784 <__sfvwrite_r+0x110>
  40e6f8:	464f      	mov	r7, r9
  40e6fa:	9601      	str	r6, [sp, #4]
  40e6fc:	b337      	cbz	r7, 40e74c <__sfvwrite_r+0xd8>
  40e6fe:	059a      	lsls	r2, r3, #22
  40e700:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40e704:	f140 8083 	bpl.w	40e80e <__sfvwrite_r+0x19a>
  40e708:	4547      	cmp	r7, r8
  40e70a:	46c3      	mov	fp, r8
  40e70c:	f0c0 80ab 	bcc.w	40e866 <__sfvwrite_r+0x1f2>
  40e710:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40e714:	f040 80ac 	bne.w	40e870 <__sfvwrite_r+0x1fc>
  40e718:	6820      	ldr	r0, [r4, #0]
  40e71a:	46ba      	mov	sl, r7
  40e71c:	465a      	mov	r2, fp
  40e71e:	4649      	mov	r1, r9
  40e720:	f000 fcf6 	bl	40f110 <memmove>
  40e724:	68a2      	ldr	r2, [r4, #8]
  40e726:	6823      	ldr	r3, [r4, #0]
  40e728:	eba2 0208 	sub.w	r2, r2, r8
  40e72c:	445b      	add	r3, fp
  40e72e:	60a2      	str	r2, [r4, #8]
  40e730:	6023      	str	r3, [r4, #0]
  40e732:	9a01      	ldr	r2, [sp, #4]
  40e734:	6893      	ldr	r3, [r2, #8]
  40e736:	eba3 030a 	sub.w	r3, r3, sl
  40e73a:	44d1      	add	r9, sl
  40e73c:	eba7 070a 	sub.w	r7, r7, sl
  40e740:	6093      	str	r3, [r2, #8]
  40e742:	2b00      	cmp	r3, #0
  40e744:	d0c5      	beq.n	40e6d2 <__sfvwrite_r+0x5e>
  40e746:	89a3      	ldrh	r3, [r4, #12]
  40e748:	2f00      	cmp	r7, #0
  40e74a:	d1d8      	bne.n	40e6fe <__sfvwrite_r+0x8a>
  40e74c:	f8d5 9000 	ldr.w	r9, [r5]
  40e750:	686f      	ldr	r7, [r5, #4]
  40e752:	3508      	adds	r5, #8
  40e754:	e7d2      	b.n	40e6fc <__sfvwrite_r+0x88>
  40e756:	f8d5 9000 	ldr.w	r9, [r5]
  40e75a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40e75e:	3508      	adds	r5, #8
  40e760:	e79f      	b.n	40e6a2 <__sfvwrite_r+0x2e>
  40e762:	2000      	movs	r0, #0
  40e764:	4770      	bx	lr
  40e766:	4621      	mov	r1, r4
  40e768:	9800      	ldr	r0, [sp, #0]
  40e76a:	f7ff fd1f 	bl	40e1ac <_fflush_r>
  40e76e:	b370      	cbz	r0, 40e7ce <__sfvwrite_r+0x15a>
  40e770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e778:	f04f 30ff 	mov.w	r0, #4294967295
  40e77c:	81a3      	strh	r3, [r4, #12]
  40e77e:	b003      	add	sp, #12
  40e780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e784:	4681      	mov	r9, r0
  40e786:	4633      	mov	r3, r6
  40e788:	464e      	mov	r6, r9
  40e78a:	46a8      	mov	r8, r5
  40e78c:	469a      	mov	sl, r3
  40e78e:	464d      	mov	r5, r9
  40e790:	b34e      	cbz	r6, 40e7e6 <__sfvwrite_r+0x172>
  40e792:	b380      	cbz	r0, 40e7f6 <__sfvwrite_r+0x182>
  40e794:	6820      	ldr	r0, [r4, #0]
  40e796:	6923      	ldr	r3, [r4, #16]
  40e798:	6962      	ldr	r2, [r4, #20]
  40e79a:	45b1      	cmp	r9, r6
  40e79c:	46cb      	mov	fp, r9
  40e79e:	bf28      	it	cs
  40e7a0:	46b3      	movcs	fp, r6
  40e7a2:	4298      	cmp	r0, r3
  40e7a4:	465f      	mov	r7, fp
  40e7a6:	d904      	bls.n	40e7b2 <__sfvwrite_r+0x13e>
  40e7a8:	68a3      	ldr	r3, [r4, #8]
  40e7aa:	4413      	add	r3, r2
  40e7ac:	459b      	cmp	fp, r3
  40e7ae:	f300 80a6 	bgt.w	40e8fe <__sfvwrite_r+0x28a>
  40e7b2:	4593      	cmp	fp, r2
  40e7b4:	db4b      	blt.n	40e84e <__sfvwrite_r+0x1da>
  40e7b6:	4613      	mov	r3, r2
  40e7b8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40e7ba:	69e1      	ldr	r1, [r4, #28]
  40e7bc:	9800      	ldr	r0, [sp, #0]
  40e7be:	462a      	mov	r2, r5
  40e7c0:	47b8      	blx	r7
  40e7c2:	1e07      	subs	r7, r0, #0
  40e7c4:	ddd4      	ble.n	40e770 <__sfvwrite_r+0xfc>
  40e7c6:	ebb9 0907 	subs.w	r9, r9, r7
  40e7ca:	d0cc      	beq.n	40e766 <__sfvwrite_r+0xf2>
  40e7cc:	2001      	movs	r0, #1
  40e7ce:	f8da 3008 	ldr.w	r3, [sl, #8]
  40e7d2:	1bdb      	subs	r3, r3, r7
  40e7d4:	443d      	add	r5, r7
  40e7d6:	1bf6      	subs	r6, r6, r7
  40e7d8:	f8ca 3008 	str.w	r3, [sl, #8]
  40e7dc:	2b00      	cmp	r3, #0
  40e7de:	f43f af78 	beq.w	40e6d2 <__sfvwrite_r+0x5e>
  40e7e2:	2e00      	cmp	r6, #0
  40e7e4:	d1d5      	bne.n	40e792 <__sfvwrite_r+0x11e>
  40e7e6:	f108 0308 	add.w	r3, r8, #8
  40e7ea:	e913 0060 	ldmdb	r3, {r5, r6}
  40e7ee:	4698      	mov	r8, r3
  40e7f0:	3308      	adds	r3, #8
  40e7f2:	2e00      	cmp	r6, #0
  40e7f4:	d0f9      	beq.n	40e7ea <__sfvwrite_r+0x176>
  40e7f6:	4632      	mov	r2, r6
  40e7f8:	210a      	movs	r1, #10
  40e7fa:	4628      	mov	r0, r5
  40e7fc:	f000 fc38 	bl	40f070 <memchr>
  40e800:	2800      	cmp	r0, #0
  40e802:	f000 80a1 	beq.w	40e948 <__sfvwrite_r+0x2d4>
  40e806:	3001      	adds	r0, #1
  40e808:	eba0 0905 	sub.w	r9, r0, r5
  40e80c:	e7c2      	b.n	40e794 <__sfvwrite_r+0x120>
  40e80e:	6820      	ldr	r0, [r4, #0]
  40e810:	6923      	ldr	r3, [r4, #16]
  40e812:	4298      	cmp	r0, r3
  40e814:	d802      	bhi.n	40e81c <__sfvwrite_r+0x1a8>
  40e816:	6963      	ldr	r3, [r4, #20]
  40e818:	429f      	cmp	r7, r3
  40e81a:	d25d      	bcs.n	40e8d8 <__sfvwrite_r+0x264>
  40e81c:	45b8      	cmp	r8, r7
  40e81e:	bf28      	it	cs
  40e820:	46b8      	movcs	r8, r7
  40e822:	4642      	mov	r2, r8
  40e824:	4649      	mov	r1, r9
  40e826:	f000 fc73 	bl	40f110 <memmove>
  40e82a:	68a3      	ldr	r3, [r4, #8]
  40e82c:	6822      	ldr	r2, [r4, #0]
  40e82e:	eba3 0308 	sub.w	r3, r3, r8
  40e832:	4442      	add	r2, r8
  40e834:	60a3      	str	r3, [r4, #8]
  40e836:	6022      	str	r2, [r4, #0]
  40e838:	b10b      	cbz	r3, 40e83e <__sfvwrite_r+0x1ca>
  40e83a:	46c2      	mov	sl, r8
  40e83c:	e779      	b.n	40e732 <__sfvwrite_r+0xbe>
  40e83e:	4621      	mov	r1, r4
  40e840:	9800      	ldr	r0, [sp, #0]
  40e842:	f7ff fcb3 	bl	40e1ac <_fflush_r>
  40e846:	2800      	cmp	r0, #0
  40e848:	d192      	bne.n	40e770 <__sfvwrite_r+0xfc>
  40e84a:	46c2      	mov	sl, r8
  40e84c:	e771      	b.n	40e732 <__sfvwrite_r+0xbe>
  40e84e:	465a      	mov	r2, fp
  40e850:	4629      	mov	r1, r5
  40e852:	f000 fc5d 	bl	40f110 <memmove>
  40e856:	68a2      	ldr	r2, [r4, #8]
  40e858:	6823      	ldr	r3, [r4, #0]
  40e85a:	eba2 020b 	sub.w	r2, r2, fp
  40e85e:	445b      	add	r3, fp
  40e860:	60a2      	str	r2, [r4, #8]
  40e862:	6023      	str	r3, [r4, #0]
  40e864:	e7af      	b.n	40e7c6 <__sfvwrite_r+0x152>
  40e866:	6820      	ldr	r0, [r4, #0]
  40e868:	46b8      	mov	r8, r7
  40e86a:	46ba      	mov	sl, r7
  40e86c:	46bb      	mov	fp, r7
  40e86e:	e755      	b.n	40e71c <__sfvwrite_r+0xa8>
  40e870:	6962      	ldr	r2, [r4, #20]
  40e872:	6820      	ldr	r0, [r4, #0]
  40e874:	6921      	ldr	r1, [r4, #16]
  40e876:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40e87a:	eba0 0a01 	sub.w	sl, r0, r1
  40e87e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40e882:	f10a 0001 	add.w	r0, sl, #1
  40e886:	ea4f 0868 	mov.w	r8, r8, asr #1
  40e88a:	4438      	add	r0, r7
  40e88c:	4540      	cmp	r0, r8
  40e88e:	4642      	mov	r2, r8
  40e890:	bf84      	itt	hi
  40e892:	4680      	movhi	r8, r0
  40e894:	4642      	movhi	r2, r8
  40e896:	055b      	lsls	r3, r3, #21
  40e898:	d544      	bpl.n	40e924 <__sfvwrite_r+0x2b0>
  40e89a:	4611      	mov	r1, r2
  40e89c:	9800      	ldr	r0, [sp, #0]
  40e89e:	f000 f921 	bl	40eae4 <_malloc_r>
  40e8a2:	4683      	mov	fp, r0
  40e8a4:	2800      	cmp	r0, #0
  40e8a6:	d055      	beq.n	40e954 <__sfvwrite_r+0x2e0>
  40e8a8:	4652      	mov	r2, sl
  40e8aa:	6921      	ldr	r1, [r4, #16]
  40e8ac:	f7fe fae8 	bl	40ce80 <memcpy>
  40e8b0:	89a3      	ldrh	r3, [r4, #12]
  40e8b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40e8b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40e8ba:	81a3      	strh	r3, [r4, #12]
  40e8bc:	eb0b 000a 	add.w	r0, fp, sl
  40e8c0:	eba8 030a 	sub.w	r3, r8, sl
  40e8c4:	f8c4 b010 	str.w	fp, [r4, #16]
  40e8c8:	f8c4 8014 	str.w	r8, [r4, #20]
  40e8cc:	6020      	str	r0, [r4, #0]
  40e8ce:	60a3      	str	r3, [r4, #8]
  40e8d0:	46b8      	mov	r8, r7
  40e8d2:	46ba      	mov	sl, r7
  40e8d4:	46bb      	mov	fp, r7
  40e8d6:	e721      	b.n	40e71c <__sfvwrite_r+0xa8>
  40e8d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40e8dc:	42b9      	cmp	r1, r7
  40e8de:	bf28      	it	cs
  40e8e0:	4639      	movcs	r1, r7
  40e8e2:	464a      	mov	r2, r9
  40e8e4:	fb91 f1f3 	sdiv	r1, r1, r3
  40e8e8:	9800      	ldr	r0, [sp, #0]
  40e8ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40e8ec:	fb03 f301 	mul.w	r3, r3, r1
  40e8f0:	69e1      	ldr	r1, [r4, #28]
  40e8f2:	47b0      	blx	r6
  40e8f4:	f1b0 0a00 	subs.w	sl, r0, #0
  40e8f8:	f73f af1b 	bgt.w	40e732 <__sfvwrite_r+0xbe>
  40e8fc:	e738      	b.n	40e770 <__sfvwrite_r+0xfc>
  40e8fe:	461a      	mov	r2, r3
  40e900:	4629      	mov	r1, r5
  40e902:	9301      	str	r3, [sp, #4]
  40e904:	f000 fc04 	bl	40f110 <memmove>
  40e908:	6822      	ldr	r2, [r4, #0]
  40e90a:	9b01      	ldr	r3, [sp, #4]
  40e90c:	9800      	ldr	r0, [sp, #0]
  40e90e:	441a      	add	r2, r3
  40e910:	6022      	str	r2, [r4, #0]
  40e912:	4621      	mov	r1, r4
  40e914:	f7ff fc4a 	bl	40e1ac <_fflush_r>
  40e918:	9b01      	ldr	r3, [sp, #4]
  40e91a:	2800      	cmp	r0, #0
  40e91c:	f47f af28 	bne.w	40e770 <__sfvwrite_r+0xfc>
  40e920:	461f      	mov	r7, r3
  40e922:	e750      	b.n	40e7c6 <__sfvwrite_r+0x152>
  40e924:	9800      	ldr	r0, [sp, #0]
  40e926:	f000 fc63 	bl	40f1f0 <_realloc_r>
  40e92a:	4683      	mov	fp, r0
  40e92c:	2800      	cmp	r0, #0
  40e92e:	d1c5      	bne.n	40e8bc <__sfvwrite_r+0x248>
  40e930:	9d00      	ldr	r5, [sp, #0]
  40e932:	6921      	ldr	r1, [r4, #16]
  40e934:	4628      	mov	r0, r5
  40e936:	f7ff fdb7 	bl	40e4a8 <_free_r>
  40e93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e93e:	220c      	movs	r2, #12
  40e940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40e944:	602a      	str	r2, [r5, #0]
  40e946:	e715      	b.n	40e774 <__sfvwrite_r+0x100>
  40e948:	f106 0901 	add.w	r9, r6, #1
  40e94c:	e722      	b.n	40e794 <__sfvwrite_r+0x120>
  40e94e:	f04f 30ff 	mov.w	r0, #4294967295
  40e952:	e6bf      	b.n	40e6d4 <__sfvwrite_r+0x60>
  40e954:	9a00      	ldr	r2, [sp, #0]
  40e956:	230c      	movs	r3, #12
  40e958:	6013      	str	r3, [r2, #0]
  40e95a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e95e:	e709      	b.n	40e774 <__sfvwrite_r+0x100>
  40e960:	7ffffc00 	.word	0x7ffffc00

0040e964 <_fwalk_reent>:
  40e964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40e968:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40e96c:	d01f      	beq.n	40e9ae <_fwalk_reent+0x4a>
  40e96e:	4688      	mov	r8, r1
  40e970:	4606      	mov	r6, r0
  40e972:	f04f 0900 	mov.w	r9, #0
  40e976:	687d      	ldr	r5, [r7, #4]
  40e978:	68bc      	ldr	r4, [r7, #8]
  40e97a:	3d01      	subs	r5, #1
  40e97c:	d411      	bmi.n	40e9a2 <_fwalk_reent+0x3e>
  40e97e:	89a3      	ldrh	r3, [r4, #12]
  40e980:	2b01      	cmp	r3, #1
  40e982:	f105 35ff 	add.w	r5, r5, #4294967295
  40e986:	d908      	bls.n	40e99a <_fwalk_reent+0x36>
  40e988:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40e98c:	3301      	adds	r3, #1
  40e98e:	4621      	mov	r1, r4
  40e990:	4630      	mov	r0, r6
  40e992:	d002      	beq.n	40e99a <_fwalk_reent+0x36>
  40e994:	47c0      	blx	r8
  40e996:	ea49 0900 	orr.w	r9, r9, r0
  40e99a:	1c6b      	adds	r3, r5, #1
  40e99c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40e9a0:	d1ed      	bne.n	40e97e <_fwalk_reent+0x1a>
  40e9a2:	683f      	ldr	r7, [r7, #0]
  40e9a4:	2f00      	cmp	r7, #0
  40e9a6:	d1e6      	bne.n	40e976 <_fwalk_reent+0x12>
  40e9a8:	4648      	mov	r0, r9
  40e9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40e9ae:	46b9      	mov	r9, r7
  40e9b0:	4648      	mov	r0, r9
  40e9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40e9b6:	bf00      	nop

0040e9b8 <__locale_mb_cur_max>:
  40e9b8:	4b04      	ldr	r3, [pc, #16]	; (40e9cc <__locale_mb_cur_max+0x14>)
  40e9ba:	4a05      	ldr	r2, [pc, #20]	; (40e9d0 <__locale_mb_cur_max+0x18>)
  40e9bc:	681b      	ldr	r3, [r3, #0]
  40e9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40e9c0:	2b00      	cmp	r3, #0
  40e9c2:	bf08      	it	eq
  40e9c4:	4613      	moveq	r3, r2
  40e9c6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40e9ca:	4770      	bx	lr
  40e9cc:	20400184 	.word	0x20400184
  40e9d0:	204005b4 	.word	0x204005b4

0040e9d4 <__retarget_lock_init_recursive>:
  40e9d4:	4770      	bx	lr
  40e9d6:	bf00      	nop

0040e9d8 <__retarget_lock_close_recursive>:
  40e9d8:	4770      	bx	lr
  40e9da:	bf00      	nop

0040e9dc <__retarget_lock_acquire_recursive>:
  40e9dc:	4770      	bx	lr
  40e9de:	bf00      	nop

0040e9e0 <__retarget_lock_release_recursive>:
  40e9e0:	4770      	bx	lr
  40e9e2:	bf00      	nop

0040e9e4 <__swhatbuf_r>:
  40e9e4:	b570      	push	{r4, r5, r6, lr}
  40e9e6:	460c      	mov	r4, r1
  40e9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40e9ec:	2900      	cmp	r1, #0
  40e9ee:	b090      	sub	sp, #64	; 0x40
  40e9f0:	4615      	mov	r5, r2
  40e9f2:	461e      	mov	r6, r3
  40e9f4:	db14      	blt.n	40ea20 <__swhatbuf_r+0x3c>
  40e9f6:	aa01      	add	r2, sp, #4
  40e9f8:	f000 ffec 	bl	40f9d4 <_fstat_r>
  40e9fc:	2800      	cmp	r0, #0
  40e9fe:	db0f      	blt.n	40ea20 <__swhatbuf_r+0x3c>
  40ea00:	9a02      	ldr	r2, [sp, #8]
  40ea02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40ea06:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40ea0a:	fab2 f282 	clz	r2, r2
  40ea0e:	0952      	lsrs	r2, r2, #5
  40ea10:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40ea14:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40ea18:	6032      	str	r2, [r6, #0]
  40ea1a:	602b      	str	r3, [r5, #0]
  40ea1c:	b010      	add	sp, #64	; 0x40
  40ea1e:	bd70      	pop	{r4, r5, r6, pc}
  40ea20:	89a2      	ldrh	r2, [r4, #12]
  40ea22:	2300      	movs	r3, #0
  40ea24:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40ea28:	6033      	str	r3, [r6, #0]
  40ea2a:	d004      	beq.n	40ea36 <__swhatbuf_r+0x52>
  40ea2c:	2240      	movs	r2, #64	; 0x40
  40ea2e:	4618      	mov	r0, r3
  40ea30:	602a      	str	r2, [r5, #0]
  40ea32:	b010      	add	sp, #64	; 0x40
  40ea34:	bd70      	pop	{r4, r5, r6, pc}
  40ea36:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40ea3a:	602b      	str	r3, [r5, #0]
  40ea3c:	b010      	add	sp, #64	; 0x40
  40ea3e:	bd70      	pop	{r4, r5, r6, pc}

0040ea40 <__smakebuf_r>:
  40ea40:	898a      	ldrh	r2, [r1, #12]
  40ea42:	0792      	lsls	r2, r2, #30
  40ea44:	460b      	mov	r3, r1
  40ea46:	d506      	bpl.n	40ea56 <__smakebuf_r+0x16>
  40ea48:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40ea4c:	2101      	movs	r1, #1
  40ea4e:	601a      	str	r2, [r3, #0]
  40ea50:	611a      	str	r2, [r3, #16]
  40ea52:	6159      	str	r1, [r3, #20]
  40ea54:	4770      	bx	lr
  40ea56:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ea58:	b083      	sub	sp, #12
  40ea5a:	ab01      	add	r3, sp, #4
  40ea5c:	466a      	mov	r2, sp
  40ea5e:	460c      	mov	r4, r1
  40ea60:	4606      	mov	r6, r0
  40ea62:	f7ff ffbf 	bl	40e9e4 <__swhatbuf_r>
  40ea66:	9900      	ldr	r1, [sp, #0]
  40ea68:	4605      	mov	r5, r0
  40ea6a:	4630      	mov	r0, r6
  40ea6c:	f000 f83a 	bl	40eae4 <_malloc_r>
  40ea70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ea74:	b1d8      	cbz	r0, 40eaae <__smakebuf_r+0x6e>
  40ea76:	9a01      	ldr	r2, [sp, #4]
  40ea78:	4f15      	ldr	r7, [pc, #84]	; (40ead0 <__smakebuf_r+0x90>)
  40ea7a:	9900      	ldr	r1, [sp, #0]
  40ea7c:	63f7      	str	r7, [r6, #60]	; 0x3c
  40ea7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40ea82:	81a3      	strh	r3, [r4, #12]
  40ea84:	6020      	str	r0, [r4, #0]
  40ea86:	6120      	str	r0, [r4, #16]
  40ea88:	6161      	str	r1, [r4, #20]
  40ea8a:	b91a      	cbnz	r2, 40ea94 <__smakebuf_r+0x54>
  40ea8c:	432b      	orrs	r3, r5
  40ea8e:	81a3      	strh	r3, [r4, #12]
  40ea90:	b003      	add	sp, #12
  40ea92:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ea94:	4630      	mov	r0, r6
  40ea96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40ea9a:	f000 ffaf 	bl	40f9fc <_isatty_r>
  40ea9e:	b1a0      	cbz	r0, 40eaca <__smakebuf_r+0x8a>
  40eaa0:	89a3      	ldrh	r3, [r4, #12]
  40eaa2:	f023 0303 	bic.w	r3, r3, #3
  40eaa6:	f043 0301 	orr.w	r3, r3, #1
  40eaaa:	b21b      	sxth	r3, r3
  40eaac:	e7ee      	b.n	40ea8c <__smakebuf_r+0x4c>
  40eaae:	059a      	lsls	r2, r3, #22
  40eab0:	d4ee      	bmi.n	40ea90 <__smakebuf_r+0x50>
  40eab2:	f023 0303 	bic.w	r3, r3, #3
  40eab6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40eaba:	f043 0302 	orr.w	r3, r3, #2
  40eabe:	2101      	movs	r1, #1
  40eac0:	81a3      	strh	r3, [r4, #12]
  40eac2:	6022      	str	r2, [r4, #0]
  40eac4:	6122      	str	r2, [r4, #16]
  40eac6:	6161      	str	r1, [r4, #20]
  40eac8:	e7e2      	b.n	40ea90 <__smakebuf_r+0x50>
  40eaca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40eace:	e7dd      	b.n	40ea8c <__smakebuf_r+0x4c>
  40ead0:	0040e201 	.word	0x0040e201

0040ead4 <malloc>:
  40ead4:	4b02      	ldr	r3, [pc, #8]	; (40eae0 <malloc+0xc>)
  40ead6:	4601      	mov	r1, r0
  40ead8:	6818      	ldr	r0, [r3, #0]
  40eada:	f000 b803 	b.w	40eae4 <_malloc_r>
  40eade:	bf00      	nop
  40eae0:	20400184 	.word	0x20400184

0040eae4 <_malloc_r>:
  40eae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40eae8:	f101 060b 	add.w	r6, r1, #11
  40eaec:	2e16      	cmp	r6, #22
  40eaee:	b083      	sub	sp, #12
  40eaf0:	4605      	mov	r5, r0
  40eaf2:	f240 809e 	bls.w	40ec32 <_malloc_r+0x14e>
  40eaf6:	f036 0607 	bics.w	r6, r6, #7
  40eafa:	f100 80bd 	bmi.w	40ec78 <_malloc_r+0x194>
  40eafe:	42b1      	cmp	r1, r6
  40eb00:	f200 80ba 	bhi.w	40ec78 <_malloc_r+0x194>
  40eb04:	f000 fb68 	bl	40f1d8 <__malloc_lock>
  40eb08:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40eb0c:	f0c0 8293 	bcc.w	40f036 <_malloc_r+0x552>
  40eb10:	0a73      	lsrs	r3, r6, #9
  40eb12:	f000 80b8 	beq.w	40ec86 <_malloc_r+0x1a2>
  40eb16:	2b04      	cmp	r3, #4
  40eb18:	f200 8179 	bhi.w	40ee0e <_malloc_r+0x32a>
  40eb1c:	09b3      	lsrs	r3, r6, #6
  40eb1e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40eb22:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40eb26:	00c3      	lsls	r3, r0, #3
  40eb28:	4fbf      	ldr	r7, [pc, #764]	; (40ee28 <_malloc_r+0x344>)
  40eb2a:	443b      	add	r3, r7
  40eb2c:	f1a3 0108 	sub.w	r1, r3, #8
  40eb30:	685c      	ldr	r4, [r3, #4]
  40eb32:	42a1      	cmp	r1, r4
  40eb34:	d106      	bne.n	40eb44 <_malloc_r+0x60>
  40eb36:	e00c      	b.n	40eb52 <_malloc_r+0x6e>
  40eb38:	2a00      	cmp	r2, #0
  40eb3a:	f280 80aa 	bge.w	40ec92 <_malloc_r+0x1ae>
  40eb3e:	68e4      	ldr	r4, [r4, #12]
  40eb40:	42a1      	cmp	r1, r4
  40eb42:	d006      	beq.n	40eb52 <_malloc_r+0x6e>
  40eb44:	6863      	ldr	r3, [r4, #4]
  40eb46:	f023 0303 	bic.w	r3, r3, #3
  40eb4a:	1b9a      	subs	r2, r3, r6
  40eb4c:	2a0f      	cmp	r2, #15
  40eb4e:	ddf3      	ble.n	40eb38 <_malloc_r+0x54>
  40eb50:	4670      	mov	r0, lr
  40eb52:	693c      	ldr	r4, [r7, #16]
  40eb54:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40ee3c <_malloc_r+0x358>
  40eb58:	4574      	cmp	r4, lr
  40eb5a:	f000 81ab 	beq.w	40eeb4 <_malloc_r+0x3d0>
  40eb5e:	6863      	ldr	r3, [r4, #4]
  40eb60:	f023 0303 	bic.w	r3, r3, #3
  40eb64:	1b9a      	subs	r2, r3, r6
  40eb66:	2a0f      	cmp	r2, #15
  40eb68:	f300 8190 	bgt.w	40ee8c <_malloc_r+0x3a8>
  40eb6c:	2a00      	cmp	r2, #0
  40eb6e:	f8c7 e014 	str.w	lr, [r7, #20]
  40eb72:	f8c7 e010 	str.w	lr, [r7, #16]
  40eb76:	f280 809d 	bge.w	40ecb4 <_malloc_r+0x1d0>
  40eb7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40eb7e:	f080 8161 	bcs.w	40ee44 <_malloc_r+0x360>
  40eb82:	08db      	lsrs	r3, r3, #3
  40eb84:	f103 0c01 	add.w	ip, r3, #1
  40eb88:	1099      	asrs	r1, r3, #2
  40eb8a:	687a      	ldr	r2, [r7, #4]
  40eb8c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40eb90:	f8c4 8008 	str.w	r8, [r4, #8]
  40eb94:	2301      	movs	r3, #1
  40eb96:	408b      	lsls	r3, r1
  40eb98:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40eb9c:	4313      	orrs	r3, r2
  40eb9e:	3908      	subs	r1, #8
  40eba0:	60e1      	str	r1, [r4, #12]
  40eba2:	607b      	str	r3, [r7, #4]
  40eba4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40eba8:	f8c8 400c 	str.w	r4, [r8, #12]
  40ebac:	1082      	asrs	r2, r0, #2
  40ebae:	2401      	movs	r4, #1
  40ebb0:	4094      	lsls	r4, r2
  40ebb2:	429c      	cmp	r4, r3
  40ebb4:	f200 808b 	bhi.w	40ecce <_malloc_r+0x1ea>
  40ebb8:	421c      	tst	r4, r3
  40ebba:	d106      	bne.n	40ebca <_malloc_r+0xe6>
  40ebbc:	f020 0003 	bic.w	r0, r0, #3
  40ebc0:	0064      	lsls	r4, r4, #1
  40ebc2:	421c      	tst	r4, r3
  40ebc4:	f100 0004 	add.w	r0, r0, #4
  40ebc8:	d0fa      	beq.n	40ebc0 <_malloc_r+0xdc>
  40ebca:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40ebce:	46cc      	mov	ip, r9
  40ebd0:	4680      	mov	r8, r0
  40ebd2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40ebd6:	459c      	cmp	ip, r3
  40ebd8:	d107      	bne.n	40ebea <_malloc_r+0x106>
  40ebda:	e16d      	b.n	40eeb8 <_malloc_r+0x3d4>
  40ebdc:	2a00      	cmp	r2, #0
  40ebde:	f280 817b 	bge.w	40eed8 <_malloc_r+0x3f4>
  40ebe2:	68db      	ldr	r3, [r3, #12]
  40ebe4:	459c      	cmp	ip, r3
  40ebe6:	f000 8167 	beq.w	40eeb8 <_malloc_r+0x3d4>
  40ebea:	6859      	ldr	r1, [r3, #4]
  40ebec:	f021 0103 	bic.w	r1, r1, #3
  40ebf0:	1b8a      	subs	r2, r1, r6
  40ebf2:	2a0f      	cmp	r2, #15
  40ebf4:	ddf2      	ble.n	40ebdc <_malloc_r+0xf8>
  40ebf6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40ebfa:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40ebfe:	9300      	str	r3, [sp, #0]
  40ec00:	199c      	adds	r4, r3, r6
  40ec02:	4628      	mov	r0, r5
  40ec04:	f046 0601 	orr.w	r6, r6, #1
  40ec08:	f042 0501 	orr.w	r5, r2, #1
  40ec0c:	605e      	str	r6, [r3, #4]
  40ec0e:	f8c8 c00c 	str.w	ip, [r8, #12]
  40ec12:	f8cc 8008 	str.w	r8, [ip, #8]
  40ec16:	617c      	str	r4, [r7, #20]
  40ec18:	613c      	str	r4, [r7, #16]
  40ec1a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40ec1e:	f8c4 e008 	str.w	lr, [r4, #8]
  40ec22:	6065      	str	r5, [r4, #4]
  40ec24:	505a      	str	r2, [r3, r1]
  40ec26:	f000 fadd 	bl	40f1e4 <__malloc_unlock>
  40ec2a:	9b00      	ldr	r3, [sp, #0]
  40ec2c:	f103 0408 	add.w	r4, r3, #8
  40ec30:	e01e      	b.n	40ec70 <_malloc_r+0x18c>
  40ec32:	2910      	cmp	r1, #16
  40ec34:	d820      	bhi.n	40ec78 <_malloc_r+0x194>
  40ec36:	f000 facf 	bl	40f1d8 <__malloc_lock>
  40ec3a:	2610      	movs	r6, #16
  40ec3c:	2318      	movs	r3, #24
  40ec3e:	2002      	movs	r0, #2
  40ec40:	4f79      	ldr	r7, [pc, #484]	; (40ee28 <_malloc_r+0x344>)
  40ec42:	443b      	add	r3, r7
  40ec44:	f1a3 0208 	sub.w	r2, r3, #8
  40ec48:	685c      	ldr	r4, [r3, #4]
  40ec4a:	4294      	cmp	r4, r2
  40ec4c:	f000 813d 	beq.w	40eeca <_malloc_r+0x3e6>
  40ec50:	6863      	ldr	r3, [r4, #4]
  40ec52:	68e1      	ldr	r1, [r4, #12]
  40ec54:	68a6      	ldr	r6, [r4, #8]
  40ec56:	f023 0303 	bic.w	r3, r3, #3
  40ec5a:	4423      	add	r3, r4
  40ec5c:	4628      	mov	r0, r5
  40ec5e:	685a      	ldr	r2, [r3, #4]
  40ec60:	60f1      	str	r1, [r6, #12]
  40ec62:	f042 0201 	orr.w	r2, r2, #1
  40ec66:	608e      	str	r6, [r1, #8]
  40ec68:	605a      	str	r2, [r3, #4]
  40ec6a:	f000 fabb 	bl	40f1e4 <__malloc_unlock>
  40ec6e:	3408      	adds	r4, #8
  40ec70:	4620      	mov	r0, r4
  40ec72:	b003      	add	sp, #12
  40ec74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ec78:	2400      	movs	r4, #0
  40ec7a:	230c      	movs	r3, #12
  40ec7c:	4620      	mov	r0, r4
  40ec7e:	602b      	str	r3, [r5, #0]
  40ec80:	b003      	add	sp, #12
  40ec82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ec86:	2040      	movs	r0, #64	; 0x40
  40ec88:	f44f 7300 	mov.w	r3, #512	; 0x200
  40ec8c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40ec90:	e74a      	b.n	40eb28 <_malloc_r+0x44>
  40ec92:	4423      	add	r3, r4
  40ec94:	68e1      	ldr	r1, [r4, #12]
  40ec96:	685a      	ldr	r2, [r3, #4]
  40ec98:	68a6      	ldr	r6, [r4, #8]
  40ec9a:	f042 0201 	orr.w	r2, r2, #1
  40ec9e:	60f1      	str	r1, [r6, #12]
  40eca0:	4628      	mov	r0, r5
  40eca2:	608e      	str	r6, [r1, #8]
  40eca4:	605a      	str	r2, [r3, #4]
  40eca6:	f000 fa9d 	bl	40f1e4 <__malloc_unlock>
  40ecaa:	3408      	adds	r4, #8
  40ecac:	4620      	mov	r0, r4
  40ecae:	b003      	add	sp, #12
  40ecb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ecb4:	4423      	add	r3, r4
  40ecb6:	4628      	mov	r0, r5
  40ecb8:	685a      	ldr	r2, [r3, #4]
  40ecba:	f042 0201 	orr.w	r2, r2, #1
  40ecbe:	605a      	str	r2, [r3, #4]
  40ecc0:	f000 fa90 	bl	40f1e4 <__malloc_unlock>
  40ecc4:	3408      	adds	r4, #8
  40ecc6:	4620      	mov	r0, r4
  40ecc8:	b003      	add	sp, #12
  40ecca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ecce:	68bc      	ldr	r4, [r7, #8]
  40ecd0:	6863      	ldr	r3, [r4, #4]
  40ecd2:	f023 0803 	bic.w	r8, r3, #3
  40ecd6:	45b0      	cmp	r8, r6
  40ecd8:	d304      	bcc.n	40ece4 <_malloc_r+0x200>
  40ecda:	eba8 0306 	sub.w	r3, r8, r6
  40ecde:	2b0f      	cmp	r3, #15
  40ece0:	f300 8085 	bgt.w	40edee <_malloc_r+0x30a>
  40ece4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40ee40 <_malloc_r+0x35c>
  40ece8:	4b50      	ldr	r3, [pc, #320]	; (40ee2c <_malloc_r+0x348>)
  40ecea:	f8d9 2000 	ldr.w	r2, [r9]
  40ecee:	681b      	ldr	r3, [r3, #0]
  40ecf0:	3201      	adds	r2, #1
  40ecf2:	4433      	add	r3, r6
  40ecf4:	eb04 0a08 	add.w	sl, r4, r8
  40ecf8:	f000 8155 	beq.w	40efa6 <_malloc_r+0x4c2>
  40ecfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40ed00:	330f      	adds	r3, #15
  40ed02:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40ed06:	f02b 0b0f 	bic.w	fp, fp, #15
  40ed0a:	4659      	mov	r1, fp
  40ed0c:	4628      	mov	r0, r5
  40ed0e:	f000 fc15 	bl	40f53c <_sbrk_r>
  40ed12:	1c41      	adds	r1, r0, #1
  40ed14:	4602      	mov	r2, r0
  40ed16:	f000 80fc 	beq.w	40ef12 <_malloc_r+0x42e>
  40ed1a:	4582      	cmp	sl, r0
  40ed1c:	f200 80f7 	bhi.w	40ef0e <_malloc_r+0x42a>
  40ed20:	4b43      	ldr	r3, [pc, #268]	; (40ee30 <_malloc_r+0x34c>)
  40ed22:	6819      	ldr	r1, [r3, #0]
  40ed24:	4459      	add	r1, fp
  40ed26:	6019      	str	r1, [r3, #0]
  40ed28:	f000 814d 	beq.w	40efc6 <_malloc_r+0x4e2>
  40ed2c:	f8d9 0000 	ldr.w	r0, [r9]
  40ed30:	3001      	adds	r0, #1
  40ed32:	bf1b      	ittet	ne
  40ed34:	eba2 0a0a 	subne.w	sl, r2, sl
  40ed38:	4451      	addne	r1, sl
  40ed3a:	f8c9 2000 	streq.w	r2, [r9]
  40ed3e:	6019      	strne	r1, [r3, #0]
  40ed40:	f012 0107 	ands.w	r1, r2, #7
  40ed44:	f000 8115 	beq.w	40ef72 <_malloc_r+0x48e>
  40ed48:	f1c1 0008 	rsb	r0, r1, #8
  40ed4c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40ed50:	4402      	add	r2, r0
  40ed52:	3108      	adds	r1, #8
  40ed54:	eb02 090b 	add.w	r9, r2, fp
  40ed58:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40ed5c:	eba1 0909 	sub.w	r9, r1, r9
  40ed60:	4649      	mov	r1, r9
  40ed62:	4628      	mov	r0, r5
  40ed64:	9301      	str	r3, [sp, #4]
  40ed66:	9200      	str	r2, [sp, #0]
  40ed68:	f000 fbe8 	bl	40f53c <_sbrk_r>
  40ed6c:	1c43      	adds	r3, r0, #1
  40ed6e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ed72:	f000 8143 	beq.w	40effc <_malloc_r+0x518>
  40ed76:	1a80      	subs	r0, r0, r2
  40ed78:	4448      	add	r0, r9
  40ed7a:	f040 0001 	orr.w	r0, r0, #1
  40ed7e:	6819      	ldr	r1, [r3, #0]
  40ed80:	60ba      	str	r2, [r7, #8]
  40ed82:	4449      	add	r1, r9
  40ed84:	42bc      	cmp	r4, r7
  40ed86:	6050      	str	r0, [r2, #4]
  40ed88:	6019      	str	r1, [r3, #0]
  40ed8a:	d017      	beq.n	40edbc <_malloc_r+0x2d8>
  40ed8c:	f1b8 0f0f 	cmp.w	r8, #15
  40ed90:	f240 80fb 	bls.w	40ef8a <_malloc_r+0x4a6>
  40ed94:	6860      	ldr	r0, [r4, #4]
  40ed96:	f1a8 020c 	sub.w	r2, r8, #12
  40ed9a:	f022 0207 	bic.w	r2, r2, #7
  40ed9e:	eb04 0e02 	add.w	lr, r4, r2
  40eda2:	f000 0001 	and.w	r0, r0, #1
  40eda6:	f04f 0c05 	mov.w	ip, #5
  40edaa:	4310      	orrs	r0, r2
  40edac:	2a0f      	cmp	r2, #15
  40edae:	6060      	str	r0, [r4, #4]
  40edb0:	f8ce c004 	str.w	ip, [lr, #4]
  40edb4:	f8ce c008 	str.w	ip, [lr, #8]
  40edb8:	f200 8117 	bhi.w	40efea <_malloc_r+0x506>
  40edbc:	4b1d      	ldr	r3, [pc, #116]	; (40ee34 <_malloc_r+0x350>)
  40edbe:	68bc      	ldr	r4, [r7, #8]
  40edc0:	681a      	ldr	r2, [r3, #0]
  40edc2:	4291      	cmp	r1, r2
  40edc4:	bf88      	it	hi
  40edc6:	6019      	strhi	r1, [r3, #0]
  40edc8:	4b1b      	ldr	r3, [pc, #108]	; (40ee38 <_malloc_r+0x354>)
  40edca:	681a      	ldr	r2, [r3, #0]
  40edcc:	4291      	cmp	r1, r2
  40edce:	6862      	ldr	r2, [r4, #4]
  40edd0:	bf88      	it	hi
  40edd2:	6019      	strhi	r1, [r3, #0]
  40edd4:	f022 0203 	bic.w	r2, r2, #3
  40edd8:	4296      	cmp	r6, r2
  40edda:	eba2 0306 	sub.w	r3, r2, r6
  40edde:	d801      	bhi.n	40ede4 <_malloc_r+0x300>
  40ede0:	2b0f      	cmp	r3, #15
  40ede2:	dc04      	bgt.n	40edee <_malloc_r+0x30a>
  40ede4:	4628      	mov	r0, r5
  40ede6:	f000 f9fd 	bl	40f1e4 <__malloc_unlock>
  40edea:	2400      	movs	r4, #0
  40edec:	e740      	b.n	40ec70 <_malloc_r+0x18c>
  40edee:	19a2      	adds	r2, r4, r6
  40edf0:	f043 0301 	orr.w	r3, r3, #1
  40edf4:	f046 0601 	orr.w	r6, r6, #1
  40edf8:	6066      	str	r6, [r4, #4]
  40edfa:	4628      	mov	r0, r5
  40edfc:	60ba      	str	r2, [r7, #8]
  40edfe:	6053      	str	r3, [r2, #4]
  40ee00:	f000 f9f0 	bl	40f1e4 <__malloc_unlock>
  40ee04:	3408      	adds	r4, #8
  40ee06:	4620      	mov	r0, r4
  40ee08:	b003      	add	sp, #12
  40ee0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ee0e:	2b14      	cmp	r3, #20
  40ee10:	d971      	bls.n	40eef6 <_malloc_r+0x412>
  40ee12:	2b54      	cmp	r3, #84	; 0x54
  40ee14:	f200 80a3 	bhi.w	40ef5e <_malloc_r+0x47a>
  40ee18:	0b33      	lsrs	r3, r6, #12
  40ee1a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40ee1e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40ee22:	00c3      	lsls	r3, r0, #3
  40ee24:	e680      	b.n	40eb28 <_malloc_r+0x44>
  40ee26:	bf00      	nop
  40ee28:	20400720 	.word	0x20400720
  40ee2c:	20401104 	.word	0x20401104
  40ee30:	204010d4 	.word	0x204010d4
  40ee34:	204010fc 	.word	0x204010fc
  40ee38:	20401100 	.word	0x20401100
  40ee3c:	20400728 	.word	0x20400728
  40ee40:	20400b28 	.word	0x20400b28
  40ee44:	0a5a      	lsrs	r2, r3, #9
  40ee46:	2a04      	cmp	r2, #4
  40ee48:	d95b      	bls.n	40ef02 <_malloc_r+0x41e>
  40ee4a:	2a14      	cmp	r2, #20
  40ee4c:	f200 80ae 	bhi.w	40efac <_malloc_r+0x4c8>
  40ee50:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40ee54:	00c9      	lsls	r1, r1, #3
  40ee56:	325b      	adds	r2, #91	; 0x5b
  40ee58:	eb07 0c01 	add.w	ip, r7, r1
  40ee5c:	5879      	ldr	r1, [r7, r1]
  40ee5e:	f1ac 0c08 	sub.w	ip, ip, #8
  40ee62:	458c      	cmp	ip, r1
  40ee64:	f000 8088 	beq.w	40ef78 <_malloc_r+0x494>
  40ee68:	684a      	ldr	r2, [r1, #4]
  40ee6a:	f022 0203 	bic.w	r2, r2, #3
  40ee6e:	4293      	cmp	r3, r2
  40ee70:	d273      	bcs.n	40ef5a <_malloc_r+0x476>
  40ee72:	6889      	ldr	r1, [r1, #8]
  40ee74:	458c      	cmp	ip, r1
  40ee76:	d1f7      	bne.n	40ee68 <_malloc_r+0x384>
  40ee78:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40ee7c:	687b      	ldr	r3, [r7, #4]
  40ee7e:	60e2      	str	r2, [r4, #12]
  40ee80:	f8c4 c008 	str.w	ip, [r4, #8]
  40ee84:	6094      	str	r4, [r2, #8]
  40ee86:	f8cc 400c 	str.w	r4, [ip, #12]
  40ee8a:	e68f      	b.n	40ebac <_malloc_r+0xc8>
  40ee8c:	19a1      	adds	r1, r4, r6
  40ee8e:	f046 0c01 	orr.w	ip, r6, #1
  40ee92:	f042 0601 	orr.w	r6, r2, #1
  40ee96:	f8c4 c004 	str.w	ip, [r4, #4]
  40ee9a:	4628      	mov	r0, r5
  40ee9c:	6179      	str	r1, [r7, #20]
  40ee9e:	6139      	str	r1, [r7, #16]
  40eea0:	f8c1 e00c 	str.w	lr, [r1, #12]
  40eea4:	f8c1 e008 	str.w	lr, [r1, #8]
  40eea8:	604e      	str	r6, [r1, #4]
  40eeaa:	50e2      	str	r2, [r4, r3]
  40eeac:	f000 f99a 	bl	40f1e4 <__malloc_unlock>
  40eeb0:	3408      	adds	r4, #8
  40eeb2:	e6dd      	b.n	40ec70 <_malloc_r+0x18c>
  40eeb4:	687b      	ldr	r3, [r7, #4]
  40eeb6:	e679      	b.n	40ebac <_malloc_r+0xc8>
  40eeb8:	f108 0801 	add.w	r8, r8, #1
  40eebc:	f018 0f03 	tst.w	r8, #3
  40eec0:	f10c 0c08 	add.w	ip, ip, #8
  40eec4:	f47f ae85 	bne.w	40ebd2 <_malloc_r+0xee>
  40eec8:	e02d      	b.n	40ef26 <_malloc_r+0x442>
  40eeca:	68dc      	ldr	r4, [r3, #12]
  40eecc:	42a3      	cmp	r3, r4
  40eece:	bf08      	it	eq
  40eed0:	3002      	addeq	r0, #2
  40eed2:	f43f ae3e 	beq.w	40eb52 <_malloc_r+0x6e>
  40eed6:	e6bb      	b.n	40ec50 <_malloc_r+0x16c>
  40eed8:	4419      	add	r1, r3
  40eeda:	461c      	mov	r4, r3
  40eedc:	684a      	ldr	r2, [r1, #4]
  40eede:	68db      	ldr	r3, [r3, #12]
  40eee0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40eee4:	f042 0201 	orr.w	r2, r2, #1
  40eee8:	604a      	str	r2, [r1, #4]
  40eeea:	4628      	mov	r0, r5
  40eeec:	60f3      	str	r3, [r6, #12]
  40eeee:	609e      	str	r6, [r3, #8]
  40eef0:	f000 f978 	bl	40f1e4 <__malloc_unlock>
  40eef4:	e6bc      	b.n	40ec70 <_malloc_r+0x18c>
  40eef6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40eefa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40eefe:	00c3      	lsls	r3, r0, #3
  40ef00:	e612      	b.n	40eb28 <_malloc_r+0x44>
  40ef02:	099a      	lsrs	r2, r3, #6
  40ef04:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40ef08:	00c9      	lsls	r1, r1, #3
  40ef0a:	3238      	adds	r2, #56	; 0x38
  40ef0c:	e7a4      	b.n	40ee58 <_malloc_r+0x374>
  40ef0e:	42bc      	cmp	r4, r7
  40ef10:	d054      	beq.n	40efbc <_malloc_r+0x4d8>
  40ef12:	68bc      	ldr	r4, [r7, #8]
  40ef14:	6862      	ldr	r2, [r4, #4]
  40ef16:	f022 0203 	bic.w	r2, r2, #3
  40ef1a:	e75d      	b.n	40edd8 <_malloc_r+0x2f4>
  40ef1c:	f859 3908 	ldr.w	r3, [r9], #-8
  40ef20:	4599      	cmp	r9, r3
  40ef22:	f040 8086 	bne.w	40f032 <_malloc_r+0x54e>
  40ef26:	f010 0f03 	tst.w	r0, #3
  40ef2a:	f100 30ff 	add.w	r0, r0, #4294967295
  40ef2e:	d1f5      	bne.n	40ef1c <_malloc_r+0x438>
  40ef30:	687b      	ldr	r3, [r7, #4]
  40ef32:	ea23 0304 	bic.w	r3, r3, r4
  40ef36:	607b      	str	r3, [r7, #4]
  40ef38:	0064      	lsls	r4, r4, #1
  40ef3a:	429c      	cmp	r4, r3
  40ef3c:	f63f aec7 	bhi.w	40ecce <_malloc_r+0x1ea>
  40ef40:	2c00      	cmp	r4, #0
  40ef42:	f43f aec4 	beq.w	40ecce <_malloc_r+0x1ea>
  40ef46:	421c      	tst	r4, r3
  40ef48:	4640      	mov	r0, r8
  40ef4a:	f47f ae3e 	bne.w	40ebca <_malloc_r+0xe6>
  40ef4e:	0064      	lsls	r4, r4, #1
  40ef50:	421c      	tst	r4, r3
  40ef52:	f100 0004 	add.w	r0, r0, #4
  40ef56:	d0fa      	beq.n	40ef4e <_malloc_r+0x46a>
  40ef58:	e637      	b.n	40ebca <_malloc_r+0xe6>
  40ef5a:	468c      	mov	ip, r1
  40ef5c:	e78c      	b.n	40ee78 <_malloc_r+0x394>
  40ef5e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40ef62:	d815      	bhi.n	40ef90 <_malloc_r+0x4ac>
  40ef64:	0bf3      	lsrs	r3, r6, #15
  40ef66:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40ef6a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40ef6e:	00c3      	lsls	r3, r0, #3
  40ef70:	e5da      	b.n	40eb28 <_malloc_r+0x44>
  40ef72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40ef76:	e6ed      	b.n	40ed54 <_malloc_r+0x270>
  40ef78:	687b      	ldr	r3, [r7, #4]
  40ef7a:	1092      	asrs	r2, r2, #2
  40ef7c:	2101      	movs	r1, #1
  40ef7e:	fa01 f202 	lsl.w	r2, r1, r2
  40ef82:	4313      	orrs	r3, r2
  40ef84:	607b      	str	r3, [r7, #4]
  40ef86:	4662      	mov	r2, ip
  40ef88:	e779      	b.n	40ee7e <_malloc_r+0x39a>
  40ef8a:	2301      	movs	r3, #1
  40ef8c:	6053      	str	r3, [r2, #4]
  40ef8e:	e729      	b.n	40ede4 <_malloc_r+0x300>
  40ef90:	f240 5254 	movw	r2, #1364	; 0x554
  40ef94:	4293      	cmp	r3, r2
  40ef96:	d822      	bhi.n	40efde <_malloc_r+0x4fa>
  40ef98:	0cb3      	lsrs	r3, r6, #18
  40ef9a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40ef9e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40efa2:	00c3      	lsls	r3, r0, #3
  40efa4:	e5c0      	b.n	40eb28 <_malloc_r+0x44>
  40efa6:	f103 0b10 	add.w	fp, r3, #16
  40efaa:	e6ae      	b.n	40ed0a <_malloc_r+0x226>
  40efac:	2a54      	cmp	r2, #84	; 0x54
  40efae:	d829      	bhi.n	40f004 <_malloc_r+0x520>
  40efb0:	0b1a      	lsrs	r2, r3, #12
  40efb2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40efb6:	00c9      	lsls	r1, r1, #3
  40efb8:	326e      	adds	r2, #110	; 0x6e
  40efba:	e74d      	b.n	40ee58 <_malloc_r+0x374>
  40efbc:	4b20      	ldr	r3, [pc, #128]	; (40f040 <_malloc_r+0x55c>)
  40efbe:	6819      	ldr	r1, [r3, #0]
  40efc0:	4459      	add	r1, fp
  40efc2:	6019      	str	r1, [r3, #0]
  40efc4:	e6b2      	b.n	40ed2c <_malloc_r+0x248>
  40efc6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40efca:	2800      	cmp	r0, #0
  40efcc:	f47f aeae 	bne.w	40ed2c <_malloc_r+0x248>
  40efd0:	eb08 030b 	add.w	r3, r8, fp
  40efd4:	68ba      	ldr	r2, [r7, #8]
  40efd6:	f043 0301 	orr.w	r3, r3, #1
  40efda:	6053      	str	r3, [r2, #4]
  40efdc:	e6ee      	b.n	40edbc <_malloc_r+0x2d8>
  40efde:	207f      	movs	r0, #127	; 0x7f
  40efe0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40efe4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40efe8:	e59e      	b.n	40eb28 <_malloc_r+0x44>
  40efea:	f104 0108 	add.w	r1, r4, #8
  40efee:	4628      	mov	r0, r5
  40eff0:	9300      	str	r3, [sp, #0]
  40eff2:	f7ff fa59 	bl	40e4a8 <_free_r>
  40eff6:	9b00      	ldr	r3, [sp, #0]
  40eff8:	6819      	ldr	r1, [r3, #0]
  40effa:	e6df      	b.n	40edbc <_malloc_r+0x2d8>
  40effc:	2001      	movs	r0, #1
  40effe:	f04f 0900 	mov.w	r9, #0
  40f002:	e6bc      	b.n	40ed7e <_malloc_r+0x29a>
  40f004:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40f008:	d805      	bhi.n	40f016 <_malloc_r+0x532>
  40f00a:	0bda      	lsrs	r2, r3, #15
  40f00c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40f010:	00c9      	lsls	r1, r1, #3
  40f012:	3277      	adds	r2, #119	; 0x77
  40f014:	e720      	b.n	40ee58 <_malloc_r+0x374>
  40f016:	f240 5154 	movw	r1, #1364	; 0x554
  40f01a:	428a      	cmp	r2, r1
  40f01c:	d805      	bhi.n	40f02a <_malloc_r+0x546>
  40f01e:	0c9a      	lsrs	r2, r3, #18
  40f020:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40f024:	00c9      	lsls	r1, r1, #3
  40f026:	327c      	adds	r2, #124	; 0x7c
  40f028:	e716      	b.n	40ee58 <_malloc_r+0x374>
  40f02a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40f02e:	227e      	movs	r2, #126	; 0x7e
  40f030:	e712      	b.n	40ee58 <_malloc_r+0x374>
  40f032:	687b      	ldr	r3, [r7, #4]
  40f034:	e780      	b.n	40ef38 <_malloc_r+0x454>
  40f036:	08f0      	lsrs	r0, r6, #3
  40f038:	f106 0308 	add.w	r3, r6, #8
  40f03c:	e600      	b.n	40ec40 <_malloc_r+0x15c>
  40f03e:	bf00      	nop
  40f040:	204010d4 	.word	0x204010d4

0040f044 <__ascii_mbtowc>:
  40f044:	b082      	sub	sp, #8
  40f046:	b149      	cbz	r1, 40f05c <__ascii_mbtowc+0x18>
  40f048:	b15a      	cbz	r2, 40f062 <__ascii_mbtowc+0x1e>
  40f04a:	b16b      	cbz	r3, 40f068 <__ascii_mbtowc+0x24>
  40f04c:	7813      	ldrb	r3, [r2, #0]
  40f04e:	600b      	str	r3, [r1, #0]
  40f050:	7812      	ldrb	r2, [r2, #0]
  40f052:	1c10      	adds	r0, r2, #0
  40f054:	bf18      	it	ne
  40f056:	2001      	movne	r0, #1
  40f058:	b002      	add	sp, #8
  40f05a:	4770      	bx	lr
  40f05c:	a901      	add	r1, sp, #4
  40f05e:	2a00      	cmp	r2, #0
  40f060:	d1f3      	bne.n	40f04a <__ascii_mbtowc+0x6>
  40f062:	4610      	mov	r0, r2
  40f064:	b002      	add	sp, #8
  40f066:	4770      	bx	lr
  40f068:	f06f 0001 	mvn.w	r0, #1
  40f06c:	e7f4      	b.n	40f058 <__ascii_mbtowc+0x14>
  40f06e:	bf00      	nop

0040f070 <memchr>:
  40f070:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40f074:	2a10      	cmp	r2, #16
  40f076:	db2b      	blt.n	40f0d0 <memchr+0x60>
  40f078:	f010 0f07 	tst.w	r0, #7
  40f07c:	d008      	beq.n	40f090 <memchr+0x20>
  40f07e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40f082:	3a01      	subs	r2, #1
  40f084:	428b      	cmp	r3, r1
  40f086:	d02d      	beq.n	40f0e4 <memchr+0x74>
  40f088:	f010 0f07 	tst.w	r0, #7
  40f08c:	b342      	cbz	r2, 40f0e0 <memchr+0x70>
  40f08e:	d1f6      	bne.n	40f07e <memchr+0xe>
  40f090:	b4f0      	push	{r4, r5, r6, r7}
  40f092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40f096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40f09a:	f022 0407 	bic.w	r4, r2, #7
  40f09e:	f07f 0700 	mvns.w	r7, #0
  40f0a2:	2300      	movs	r3, #0
  40f0a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40f0a8:	3c08      	subs	r4, #8
  40f0aa:	ea85 0501 	eor.w	r5, r5, r1
  40f0ae:	ea86 0601 	eor.w	r6, r6, r1
  40f0b2:	fa85 f547 	uadd8	r5, r5, r7
  40f0b6:	faa3 f587 	sel	r5, r3, r7
  40f0ba:	fa86 f647 	uadd8	r6, r6, r7
  40f0be:	faa5 f687 	sel	r6, r5, r7
  40f0c2:	b98e      	cbnz	r6, 40f0e8 <memchr+0x78>
  40f0c4:	d1ee      	bne.n	40f0a4 <memchr+0x34>
  40f0c6:	bcf0      	pop	{r4, r5, r6, r7}
  40f0c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40f0cc:	f002 0207 	and.w	r2, r2, #7
  40f0d0:	b132      	cbz	r2, 40f0e0 <memchr+0x70>
  40f0d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  40f0d6:	3a01      	subs	r2, #1
  40f0d8:	ea83 0301 	eor.w	r3, r3, r1
  40f0dc:	b113      	cbz	r3, 40f0e4 <memchr+0x74>
  40f0de:	d1f8      	bne.n	40f0d2 <memchr+0x62>
  40f0e0:	2000      	movs	r0, #0
  40f0e2:	4770      	bx	lr
  40f0e4:	3801      	subs	r0, #1
  40f0e6:	4770      	bx	lr
  40f0e8:	2d00      	cmp	r5, #0
  40f0ea:	bf06      	itte	eq
  40f0ec:	4635      	moveq	r5, r6
  40f0ee:	3803      	subeq	r0, #3
  40f0f0:	3807      	subne	r0, #7
  40f0f2:	f015 0f01 	tst.w	r5, #1
  40f0f6:	d107      	bne.n	40f108 <memchr+0x98>
  40f0f8:	3001      	adds	r0, #1
  40f0fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  40f0fe:	bf02      	ittt	eq
  40f100:	3001      	addeq	r0, #1
  40f102:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40f106:	3001      	addeq	r0, #1
  40f108:	bcf0      	pop	{r4, r5, r6, r7}
  40f10a:	3801      	subs	r0, #1
  40f10c:	4770      	bx	lr
  40f10e:	bf00      	nop

0040f110 <memmove>:
  40f110:	4288      	cmp	r0, r1
  40f112:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f114:	d90d      	bls.n	40f132 <memmove+0x22>
  40f116:	188b      	adds	r3, r1, r2
  40f118:	4298      	cmp	r0, r3
  40f11a:	d20a      	bcs.n	40f132 <memmove+0x22>
  40f11c:	1884      	adds	r4, r0, r2
  40f11e:	2a00      	cmp	r2, #0
  40f120:	d051      	beq.n	40f1c6 <memmove+0xb6>
  40f122:	4622      	mov	r2, r4
  40f124:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40f128:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40f12c:	4299      	cmp	r1, r3
  40f12e:	d1f9      	bne.n	40f124 <memmove+0x14>
  40f130:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f132:	2a0f      	cmp	r2, #15
  40f134:	d948      	bls.n	40f1c8 <memmove+0xb8>
  40f136:	ea41 0300 	orr.w	r3, r1, r0
  40f13a:	079b      	lsls	r3, r3, #30
  40f13c:	d146      	bne.n	40f1cc <memmove+0xbc>
  40f13e:	f100 0410 	add.w	r4, r0, #16
  40f142:	f101 0310 	add.w	r3, r1, #16
  40f146:	4615      	mov	r5, r2
  40f148:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40f14c:	f844 6c10 	str.w	r6, [r4, #-16]
  40f150:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40f154:	f844 6c0c 	str.w	r6, [r4, #-12]
  40f158:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40f15c:	f844 6c08 	str.w	r6, [r4, #-8]
  40f160:	3d10      	subs	r5, #16
  40f162:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40f166:	f844 6c04 	str.w	r6, [r4, #-4]
  40f16a:	2d0f      	cmp	r5, #15
  40f16c:	f103 0310 	add.w	r3, r3, #16
  40f170:	f104 0410 	add.w	r4, r4, #16
  40f174:	d8e8      	bhi.n	40f148 <memmove+0x38>
  40f176:	f1a2 0310 	sub.w	r3, r2, #16
  40f17a:	f023 030f 	bic.w	r3, r3, #15
  40f17e:	f002 0e0f 	and.w	lr, r2, #15
  40f182:	3310      	adds	r3, #16
  40f184:	f1be 0f03 	cmp.w	lr, #3
  40f188:	4419      	add	r1, r3
  40f18a:	4403      	add	r3, r0
  40f18c:	d921      	bls.n	40f1d2 <memmove+0xc2>
  40f18e:	1f1e      	subs	r6, r3, #4
  40f190:	460d      	mov	r5, r1
  40f192:	4674      	mov	r4, lr
  40f194:	3c04      	subs	r4, #4
  40f196:	f855 7b04 	ldr.w	r7, [r5], #4
  40f19a:	f846 7f04 	str.w	r7, [r6, #4]!
  40f19e:	2c03      	cmp	r4, #3
  40f1a0:	d8f8      	bhi.n	40f194 <memmove+0x84>
  40f1a2:	f1ae 0404 	sub.w	r4, lr, #4
  40f1a6:	f024 0403 	bic.w	r4, r4, #3
  40f1aa:	3404      	adds	r4, #4
  40f1ac:	4421      	add	r1, r4
  40f1ae:	4423      	add	r3, r4
  40f1b0:	f002 0203 	and.w	r2, r2, #3
  40f1b4:	b162      	cbz	r2, 40f1d0 <memmove+0xc0>
  40f1b6:	3b01      	subs	r3, #1
  40f1b8:	440a      	add	r2, r1
  40f1ba:	f811 4b01 	ldrb.w	r4, [r1], #1
  40f1be:	f803 4f01 	strb.w	r4, [r3, #1]!
  40f1c2:	428a      	cmp	r2, r1
  40f1c4:	d1f9      	bne.n	40f1ba <memmove+0xaa>
  40f1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f1c8:	4603      	mov	r3, r0
  40f1ca:	e7f3      	b.n	40f1b4 <memmove+0xa4>
  40f1cc:	4603      	mov	r3, r0
  40f1ce:	e7f2      	b.n	40f1b6 <memmove+0xa6>
  40f1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f1d2:	4672      	mov	r2, lr
  40f1d4:	e7ee      	b.n	40f1b4 <memmove+0xa4>
  40f1d6:	bf00      	nop

0040f1d8 <__malloc_lock>:
  40f1d8:	4801      	ldr	r0, [pc, #4]	; (40f1e0 <__malloc_lock+0x8>)
  40f1da:	f7ff bbff 	b.w	40e9dc <__retarget_lock_acquire_recursive>
  40f1de:	bf00      	nop
  40f1e0:	2040120c 	.word	0x2040120c

0040f1e4 <__malloc_unlock>:
  40f1e4:	4801      	ldr	r0, [pc, #4]	; (40f1ec <__malloc_unlock+0x8>)
  40f1e6:	f7ff bbfb 	b.w	40e9e0 <__retarget_lock_release_recursive>
  40f1ea:	bf00      	nop
  40f1ec:	2040120c 	.word	0x2040120c

0040f1f0 <_realloc_r>:
  40f1f0:	2900      	cmp	r1, #0
  40f1f2:	f000 8095 	beq.w	40f320 <_realloc_r+0x130>
  40f1f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f1fa:	460d      	mov	r5, r1
  40f1fc:	4616      	mov	r6, r2
  40f1fe:	b083      	sub	sp, #12
  40f200:	4680      	mov	r8, r0
  40f202:	f106 070b 	add.w	r7, r6, #11
  40f206:	f7ff ffe7 	bl	40f1d8 <__malloc_lock>
  40f20a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40f20e:	2f16      	cmp	r7, #22
  40f210:	f02e 0403 	bic.w	r4, lr, #3
  40f214:	f1a5 0908 	sub.w	r9, r5, #8
  40f218:	d83c      	bhi.n	40f294 <_realloc_r+0xa4>
  40f21a:	2210      	movs	r2, #16
  40f21c:	4617      	mov	r7, r2
  40f21e:	42be      	cmp	r6, r7
  40f220:	d83d      	bhi.n	40f29e <_realloc_r+0xae>
  40f222:	4294      	cmp	r4, r2
  40f224:	da43      	bge.n	40f2ae <_realloc_r+0xbe>
  40f226:	4bc4      	ldr	r3, [pc, #784]	; (40f538 <_realloc_r+0x348>)
  40f228:	6899      	ldr	r1, [r3, #8]
  40f22a:	eb09 0004 	add.w	r0, r9, r4
  40f22e:	4288      	cmp	r0, r1
  40f230:	f000 80b4 	beq.w	40f39c <_realloc_r+0x1ac>
  40f234:	6843      	ldr	r3, [r0, #4]
  40f236:	f023 0101 	bic.w	r1, r3, #1
  40f23a:	4401      	add	r1, r0
  40f23c:	6849      	ldr	r1, [r1, #4]
  40f23e:	07c9      	lsls	r1, r1, #31
  40f240:	d54c      	bpl.n	40f2dc <_realloc_r+0xec>
  40f242:	f01e 0f01 	tst.w	lr, #1
  40f246:	f000 809b 	beq.w	40f380 <_realloc_r+0x190>
  40f24a:	4631      	mov	r1, r6
  40f24c:	4640      	mov	r0, r8
  40f24e:	f7ff fc49 	bl	40eae4 <_malloc_r>
  40f252:	4606      	mov	r6, r0
  40f254:	2800      	cmp	r0, #0
  40f256:	d03a      	beq.n	40f2ce <_realloc_r+0xde>
  40f258:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40f25c:	f023 0301 	bic.w	r3, r3, #1
  40f260:	444b      	add	r3, r9
  40f262:	f1a0 0208 	sub.w	r2, r0, #8
  40f266:	429a      	cmp	r2, r3
  40f268:	f000 8121 	beq.w	40f4ae <_realloc_r+0x2be>
  40f26c:	1f22      	subs	r2, r4, #4
  40f26e:	2a24      	cmp	r2, #36	; 0x24
  40f270:	f200 8107 	bhi.w	40f482 <_realloc_r+0x292>
  40f274:	2a13      	cmp	r2, #19
  40f276:	f200 80db 	bhi.w	40f430 <_realloc_r+0x240>
  40f27a:	4603      	mov	r3, r0
  40f27c:	462a      	mov	r2, r5
  40f27e:	6811      	ldr	r1, [r2, #0]
  40f280:	6019      	str	r1, [r3, #0]
  40f282:	6851      	ldr	r1, [r2, #4]
  40f284:	6059      	str	r1, [r3, #4]
  40f286:	6892      	ldr	r2, [r2, #8]
  40f288:	609a      	str	r2, [r3, #8]
  40f28a:	4629      	mov	r1, r5
  40f28c:	4640      	mov	r0, r8
  40f28e:	f7ff f90b 	bl	40e4a8 <_free_r>
  40f292:	e01c      	b.n	40f2ce <_realloc_r+0xde>
  40f294:	f027 0707 	bic.w	r7, r7, #7
  40f298:	2f00      	cmp	r7, #0
  40f29a:	463a      	mov	r2, r7
  40f29c:	dabf      	bge.n	40f21e <_realloc_r+0x2e>
  40f29e:	2600      	movs	r6, #0
  40f2a0:	230c      	movs	r3, #12
  40f2a2:	4630      	mov	r0, r6
  40f2a4:	f8c8 3000 	str.w	r3, [r8]
  40f2a8:	b003      	add	sp, #12
  40f2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f2ae:	462e      	mov	r6, r5
  40f2b0:	1be3      	subs	r3, r4, r7
  40f2b2:	2b0f      	cmp	r3, #15
  40f2b4:	d81e      	bhi.n	40f2f4 <_realloc_r+0x104>
  40f2b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40f2ba:	f003 0301 	and.w	r3, r3, #1
  40f2be:	4323      	orrs	r3, r4
  40f2c0:	444c      	add	r4, r9
  40f2c2:	f8c9 3004 	str.w	r3, [r9, #4]
  40f2c6:	6863      	ldr	r3, [r4, #4]
  40f2c8:	f043 0301 	orr.w	r3, r3, #1
  40f2cc:	6063      	str	r3, [r4, #4]
  40f2ce:	4640      	mov	r0, r8
  40f2d0:	f7ff ff88 	bl	40f1e4 <__malloc_unlock>
  40f2d4:	4630      	mov	r0, r6
  40f2d6:	b003      	add	sp, #12
  40f2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f2dc:	f023 0303 	bic.w	r3, r3, #3
  40f2e0:	18e1      	adds	r1, r4, r3
  40f2e2:	4291      	cmp	r1, r2
  40f2e4:	db1f      	blt.n	40f326 <_realloc_r+0x136>
  40f2e6:	68c3      	ldr	r3, [r0, #12]
  40f2e8:	6882      	ldr	r2, [r0, #8]
  40f2ea:	462e      	mov	r6, r5
  40f2ec:	60d3      	str	r3, [r2, #12]
  40f2ee:	460c      	mov	r4, r1
  40f2f0:	609a      	str	r2, [r3, #8]
  40f2f2:	e7dd      	b.n	40f2b0 <_realloc_r+0xc0>
  40f2f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40f2f8:	eb09 0107 	add.w	r1, r9, r7
  40f2fc:	f002 0201 	and.w	r2, r2, #1
  40f300:	444c      	add	r4, r9
  40f302:	f043 0301 	orr.w	r3, r3, #1
  40f306:	4317      	orrs	r7, r2
  40f308:	f8c9 7004 	str.w	r7, [r9, #4]
  40f30c:	604b      	str	r3, [r1, #4]
  40f30e:	6863      	ldr	r3, [r4, #4]
  40f310:	f043 0301 	orr.w	r3, r3, #1
  40f314:	3108      	adds	r1, #8
  40f316:	6063      	str	r3, [r4, #4]
  40f318:	4640      	mov	r0, r8
  40f31a:	f7ff f8c5 	bl	40e4a8 <_free_r>
  40f31e:	e7d6      	b.n	40f2ce <_realloc_r+0xde>
  40f320:	4611      	mov	r1, r2
  40f322:	f7ff bbdf 	b.w	40eae4 <_malloc_r>
  40f326:	f01e 0f01 	tst.w	lr, #1
  40f32a:	d18e      	bne.n	40f24a <_realloc_r+0x5a>
  40f32c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40f330:	eba9 0a01 	sub.w	sl, r9, r1
  40f334:	f8da 1004 	ldr.w	r1, [sl, #4]
  40f338:	f021 0103 	bic.w	r1, r1, #3
  40f33c:	440b      	add	r3, r1
  40f33e:	4423      	add	r3, r4
  40f340:	4293      	cmp	r3, r2
  40f342:	db25      	blt.n	40f390 <_realloc_r+0x1a0>
  40f344:	68c2      	ldr	r2, [r0, #12]
  40f346:	6881      	ldr	r1, [r0, #8]
  40f348:	4656      	mov	r6, sl
  40f34a:	60ca      	str	r2, [r1, #12]
  40f34c:	6091      	str	r1, [r2, #8]
  40f34e:	f8da 100c 	ldr.w	r1, [sl, #12]
  40f352:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40f356:	1f22      	subs	r2, r4, #4
  40f358:	2a24      	cmp	r2, #36	; 0x24
  40f35a:	60c1      	str	r1, [r0, #12]
  40f35c:	6088      	str	r0, [r1, #8]
  40f35e:	f200 8094 	bhi.w	40f48a <_realloc_r+0x29a>
  40f362:	2a13      	cmp	r2, #19
  40f364:	d96f      	bls.n	40f446 <_realloc_r+0x256>
  40f366:	6829      	ldr	r1, [r5, #0]
  40f368:	f8ca 1008 	str.w	r1, [sl, #8]
  40f36c:	6869      	ldr	r1, [r5, #4]
  40f36e:	f8ca 100c 	str.w	r1, [sl, #12]
  40f372:	2a1b      	cmp	r2, #27
  40f374:	f200 80a2 	bhi.w	40f4bc <_realloc_r+0x2cc>
  40f378:	3508      	adds	r5, #8
  40f37a:	f10a 0210 	add.w	r2, sl, #16
  40f37e:	e063      	b.n	40f448 <_realloc_r+0x258>
  40f380:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40f384:	eba9 0a03 	sub.w	sl, r9, r3
  40f388:	f8da 1004 	ldr.w	r1, [sl, #4]
  40f38c:	f021 0103 	bic.w	r1, r1, #3
  40f390:	1863      	adds	r3, r4, r1
  40f392:	4293      	cmp	r3, r2
  40f394:	f6ff af59 	blt.w	40f24a <_realloc_r+0x5a>
  40f398:	4656      	mov	r6, sl
  40f39a:	e7d8      	b.n	40f34e <_realloc_r+0x15e>
  40f39c:	6841      	ldr	r1, [r0, #4]
  40f39e:	f021 0b03 	bic.w	fp, r1, #3
  40f3a2:	44a3      	add	fp, r4
  40f3a4:	f107 0010 	add.w	r0, r7, #16
  40f3a8:	4583      	cmp	fp, r0
  40f3aa:	da56      	bge.n	40f45a <_realloc_r+0x26a>
  40f3ac:	f01e 0f01 	tst.w	lr, #1
  40f3b0:	f47f af4b 	bne.w	40f24a <_realloc_r+0x5a>
  40f3b4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40f3b8:	eba9 0a01 	sub.w	sl, r9, r1
  40f3bc:	f8da 1004 	ldr.w	r1, [sl, #4]
  40f3c0:	f021 0103 	bic.w	r1, r1, #3
  40f3c4:	448b      	add	fp, r1
  40f3c6:	4558      	cmp	r0, fp
  40f3c8:	dce2      	bgt.n	40f390 <_realloc_r+0x1a0>
  40f3ca:	4656      	mov	r6, sl
  40f3cc:	f8da 100c 	ldr.w	r1, [sl, #12]
  40f3d0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40f3d4:	1f22      	subs	r2, r4, #4
  40f3d6:	2a24      	cmp	r2, #36	; 0x24
  40f3d8:	60c1      	str	r1, [r0, #12]
  40f3da:	6088      	str	r0, [r1, #8]
  40f3dc:	f200 808f 	bhi.w	40f4fe <_realloc_r+0x30e>
  40f3e0:	2a13      	cmp	r2, #19
  40f3e2:	f240 808a 	bls.w	40f4fa <_realloc_r+0x30a>
  40f3e6:	6829      	ldr	r1, [r5, #0]
  40f3e8:	f8ca 1008 	str.w	r1, [sl, #8]
  40f3ec:	6869      	ldr	r1, [r5, #4]
  40f3ee:	f8ca 100c 	str.w	r1, [sl, #12]
  40f3f2:	2a1b      	cmp	r2, #27
  40f3f4:	f200 808a 	bhi.w	40f50c <_realloc_r+0x31c>
  40f3f8:	3508      	adds	r5, #8
  40f3fa:	f10a 0210 	add.w	r2, sl, #16
  40f3fe:	6829      	ldr	r1, [r5, #0]
  40f400:	6011      	str	r1, [r2, #0]
  40f402:	6869      	ldr	r1, [r5, #4]
  40f404:	6051      	str	r1, [r2, #4]
  40f406:	68a9      	ldr	r1, [r5, #8]
  40f408:	6091      	str	r1, [r2, #8]
  40f40a:	eb0a 0107 	add.w	r1, sl, r7
  40f40e:	ebab 0207 	sub.w	r2, fp, r7
  40f412:	f042 0201 	orr.w	r2, r2, #1
  40f416:	6099      	str	r1, [r3, #8]
  40f418:	604a      	str	r2, [r1, #4]
  40f41a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40f41e:	f003 0301 	and.w	r3, r3, #1
  40f422:	431f      	orrs	r7, r3
  40f424:	4640      	mov	r0, r8
  40f426:	f8ca 7004 	str.w	r7, [sl, #4]
  40f42a:	f7ff fedb 	bl	40f1e4 <__malloc_unlock>
  40f42e:	e751      	b.n	40f2d4 <_realloc_r+0xe4>
  40f430:	682b      	ldr	r3, [r5, #0]
  40f432:	6003      	str	r3, [r0, #0]
  40f434:	686b      	ldr	r3, [r5, #4]
  40f436:	6043      	str	r3, [r0, #4]
  40f438:	2a1b      	cmp	r2, #27
  40f43a:	d82d      	bhi.n	40f498 <_realloc_r+0x2a8>
  40f43c:	f100 0308 	add.w	r3, r0, #8
  40f440:	f105 0208 	add.w	r2, r5, #8
  40f444:	e71b      	b.n	40f27e <_realloc_r+0x8e>
  40f446:	4632      	mov	r2, r6
  40f448:	6829      	ldr	r1, [r5, #0]
  40f44a:	6011      	str	r1, [r2, #0]
  40f44c:	6869      	ldr	r1, [r5, #4]
  40f44e:	6051      	str	r1, [r2, #4]
  40f450:	68a9      	ldr	r1, [r5, #8]
  40f452:	6091      	str	r1, [r2, #8]
  40f454:	461c      	mov	r4, r3
  40f456:	46d1      	mov	r9, sl
  40f458:	e72a      	b.n	40f2b0 <_realloc_r+0xc0>
  40f45a:	eb09 0107 	add.w	r1, r9, r7
  40f45e:	ebab 0b07 	sub.w	fp, fp, r7
  40f462:	f04b 0201 	orr.w	r2, fp, #1
  40f466:	6099      	str	r1, [r3, #8]
  40f468:	604a      	str	r2, [r1, #4]
  40f46a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40f46e:	f003 0301 	and.w	r3, r3, #1
  40f472:	431f      	orrs	r7, r3
  40f474:	4640      	mov	r0, r8
  40f476:	f845 7c04 	str.w	r7, [r5, #-4]
  40f47a:	f7ff feb3 	bl	40f1e4 <__malloc_unlock>
  40f47e:	462e      	mov	r6, r5
  40f480:	e728      	b.n	40f2d4 <_realloc_r+0xe4>
  40f482:	4629      	mov	r1, r5
  40f484:	f7ff fe44 	bl	40f110 <memmove>
  40f488:	e6ff      	b.n	40f28a <_realloc_r+0x9a>
  40f48a:	4629      	mov	r1, r5
  40f48c:	4630      	mov	r0, r6
  40f48e:	461c      	mov	r4, r3
  40f490:	46d1      	mov	r9, sl
  40f492:	f7ff fe3d 	bl	40f110 <memmove>
  40f496:	e70b      	b.n	40f2b0 <_realloc_r+0xc0>
  40f498:	68ab      	ldr	r3, [r5, #8]
  40f49a:	6083      	str	r3, [r0, #8]
  40f49c:	68eb      	ldr	r3, [r5, #12]
  40f49e:	60c3      	str	r3, [r0, #12]
  40f4a0:	2a24      	cmp	r2, #36	; 0x24
  40f4a2:	d017      	beq.n	40f4d4 <_realloc_r+0x2e4>
  40f4a4:	f100 0310 	add.w	r3, r0, #16
  40f4a8:	f105 0210 	add.w	r2, r5, #16
  40f4ac:	e6e7      	b.n	40f27e <_realloc_r+0x8e>
  40f4ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40f4b2:	f023 0303 	bic.w	r3, r3, #3
  40f4b6:	441c      	add	r4, r3
  40f4b8:	462e      	mov	r6, r5
  40f4ba:	e6f9      	b.n	40f2b0 <_realloc_r+0xc0>
  40f4bc:	68a9      	ldr	r1, [r5, #8]
  40f4be:	f8ca 1010 	str.w	r1, [sl, #16]
  40f4c2:	68e9      	ldr	r1, [r5, #12]
  40f4c4:	f8ca 1014 	str.w	r1, [sl, #20]
  40f4c8:	2a24      	cmp	r2, #36	; 0x24
  40f4ca:	d00c      	beq.n	40f4e6 <_realloc_r+0x2f6>
  40f4cc:	3510      	adds	r5, #16
  40f4ce:	f10a 0218 	add.w	r2, sl, #24
  40f4d2:	e7b9      	b.n	40f448 <_realloc_r+0x258>
  40f4d4:	692b      	ldr	r3, [r5, #16]
  40f4d6:	6103      	str	r3, [r0, #16]
  40f4d8:	696b      	ldr	r3, [r5, #20]
  40f4da:	6143      	str	r3, [r0, #20]
  40f4dc:	f105 0218 	add.w	r2, r5, #24
  40f4e0:	f100 0318 	add.w	r3, r0, #24
  40f4e4:	e6cb      	b.n	40f27e <_realloc_r+0x8e>
  40f4e6:	692a      	ldr	r2, [r5, #16]
  40f4e8:	f8ca 2018 	str.w	r2, [sl, #24]
  40f4ec:	696a      	ldr	r2, [r5, #20]
  40f4ee:	f8ca 201c 	str.w	r2, [sl, #28]
  40f4f2:	3518      	adds	r5, #24
  40f4f4:	f10a 0220 	add.w	r2, sl, #32
  40f4f8:	e7a6      	b.n	40f448 <_realloc_r+0x258>
  40f4fa:	4632      	mov	r2, r6
  40f4fc:	e77f      	b.n	40f3fe <_realloc_r+0x20e>
  40f4fe:	4629      	mov	r1, r5
  40f500:	4630      	mov	r0, r6
  40f502:	9301      	str	r3, [sp, #4]
  40f504:	f7ff fe04 	bl	40f110 <memmove>
  40f508:	9b01      	ldr	r3, [sp, #4]
  40f50a:	e77e      	b.n	40f40a <_realloc_r+0x21a>
  40f50c:	68a9      	ldr	r1, [r5, #8]
  40f50e:	f8ca 1010 	str.w	r1, [sl, #16]
  40f512:	68e9      	ldr	r1, [r5, #12]
  40f514:	f8ca 1014 	str.w	r1, [sl, #20]
  40f518:	2a24      	cmp	r2, #36	; 0x24
  40f51a:	d003      	beq.n	40f524 <_realloc_r+0x334>
  40f51c:	3510      	adds	r5, #16
  40f51e:	f10a 0218 	add.w	r2, sl, #24
  40f522:	e76c      	b.n	40f3fe <_realloc_r+0x20e>
  40f524:	692a      	ldr	r2, [r5, #16]
  40f526:	f8ca 2018 	str.w	r2, [sl, #24]
  40f52a:	696a      	ldr	r2, [r5, #20]
  40f52c:	f8ca 201c 	str.w	r2, [sl, #28]
  40f530:	3518      	adds	r5, #24
  40f532:	f10a 0220 	add.w	r2, sl, #32
  40f536:	e762      	b.n	40f3fe <_realloc_r+0x20e>
  40f538:	20400720 	.word	0x20400720

0040f53c <_sbrk_r>:
  40f53c:	b538      	push	{r3, r4, r5, lr}
  40f53e:	4c07      	ldr	r4, [pc, #28]	; (40f55c <_sbrk_r+0x20>)
  40f540:	2300      	movs	r3, #0
  40f542:	4605      	mov	r5, r0
  40f544:	4608      	mov	r0, r1
  40f546:	6023      	str	r3, [r4, #0]
  40f548:	f7f5 fc1e 	bl	404d88 <_sbrk>
  40f54c:	1c43      	adds	r3, r0, #1
  40f54e:	d000      	beq.n	40f552 <_sbrk_r+0x16>
  40f550:	bd38      	pop	{r3, r4, r5, pc}
  40f552:	6823      	ldr	r3, [r4, #0]
  40f554:	2b00      	cmp	r3, #0
  40f556:	d0fb      	beq.n	40f550 <_sbrk_r+0x14>
  40f558:	602b      	str	r3, [r5, #0]
  40f55a:	bd38      	pop	{r3, r4, r5, pc}
  40f55c:	20401220 	.word	0x20401220

0040f560 <__sread>:
  40f560:	b510      	push	{r4, lr}
  40f562:	460c      	mov	r4, r1
  40f564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f568:	f000 fa70 	bl	40fa4c <_read_r>
  40f56c:	2800      	cmp	r0, #0
  40f56e:	db03      	blt.n	40f578 <__sread+0x18>
  40f570:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40f572:	4403      	add	r3, r0
  40f574:	6523      	str	r3, [r4, #80]	; 0x50
  40f576:	bd10      	pop	{r4, pc}
  40f578:	89a3      	ldrh	r3, [r4, #12]
  40f57a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40f57e:	81a3      	strh	r3, [r4, #12]
  40f580:	bd10      	pop	{r4, pc}
  40f582:	bf00      	nop

0040f584 <__swrite>:
  40f584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f588:	4616      	mov	r6, r2
  40f58a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40f58e:	461f      	mov	r7, r3
  40f590:	05d3      	lsls	r3, r2, #23
  40f592:	460c      	mov	r4, r1
  40f594:	4605      	mov	r5, r0
  40f596:	d507      	bpl.n	40f5a8 <__swrite+0x24>
  40f598:	2200      	movs	r2, #0
  40f59a:	2302      	movs	r3, #2
  40f59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f5a0:	f000 fa3e 	bl	40fa20 <_lseek_r>
  40f5a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f5a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40f5ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40f5b0:	81a2      	strh	r2, [r4, #12]
  40f5b2:	463b      	mov	r3, r7
  40f5b4:	4632      	mov	r2, r6
  40f5b6:	4628      	mov	r0, r5
  40f5b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40f5bc:	f000 b91e 	b.w	40f7fc <_write_r>

0040f5c0 <__sseek>:
  40f5c0:	b510      	push	{r4, lr}
  40f5c2:	460c      	mov	r4, r1
  40f5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f5c8:	f000 fa2a 	bl	40fa20 <_lseek_r>
  40f5cc:	89a3      	ldrh	r3, [r4, #12]
  40f5ce:	1c42      	adds	r2, r0, #1
  40f5d0:	bf0e      	itee	eq
  40f5d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40f5d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40f5da:	6520      	strne	r0, [r4, #80]	; 0x50
  40f5dc:	81a3      	strh	r3, [r4, #12]
  40f5de:	bd10      	pop	{r4, pc}

0040f5e0 <__sclose>:
  40f5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f5e4:	f000 b982 	b.w	40f8ec <_close_r>
	...

0040f600 <strlen>:
  40f600:	f890 f000 	pld	[r0]
  40f604:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40f608:	f020 0107 	bic.w	r1, r0, #7
  40f60c:	f06f 0c00 	mvn.w	ip, #0
  40f610:	f010 0407 	ands.w	r4, r0, #7
  40f614:	f891 f020 	pld	[r1, #32]
  40f618:	f040 8049 	bne.w	40f6ae <strlen+0xae>
  40f61c:	f04f 0400 	mov.w	r4, #0
  40f620:	f06f 0007 	mvn.w	r0, #7
  40f624:	e9d1 2300 	ldrd	r2, r3, [r1]
  40f628:	f891 f040 	pld	[r1, #64]	; 0x40
  40f62c:	f100 0008 	add.w	r0, r0, #8
  40f630:	fa82 f24c 	uadd8	r2, r2, ip
  40f634:	faa4 f28c 	sel	r2, r4, ip
  40f638:	fa83 f34c 	uadd8	r3, r3, ip
  40f63c:	faa2 f38c 	sel	r3, r2, ip
  40f640:	bb4b      	cbnz	r3, 40f696 <strlen+0x96>
  40f642:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40f646:	fa82 f24c 	uadd8	r2, r2, ip
  40f64a:	f100 0008 	add.w	r0, r0, #8
  40f64e:	faa4 f28c 	sel	r2, r4, ip
  40f652:	fa83 f34c 	uadd8	r3, r3, ip
  40f656:	faa2 f38c 	sel	r3, r2, ip
  40f65a:	b9e3      	cbnz	r3, 40f696 <strlen+0x96>
  40f65c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40f660:	fa82 f24c 	uadd8	r2, r2, ip
  40f664:	f100 0008 	add.w	r0, r0, #8
  40f668:	faa4 f28c 	sel	r2, r4, ip
  40f66c:	fa83 f34c 	uadd8	r3, r3, ip
  40f670:	faa2 f38c 	sel	r3, r2, ip
  40f674:	b97b      	cbnz	r3, 40f696 <strlen+0x96>
  40f676:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40f67a:	f101 0120 	add.w	r1, r1, #32
  40f67e:	fa82 f24c 	uadd8	r2, r2, ip
  40f682:	f100 0008 	add.w	r0, r0, #8
  40f686:	faa4 f28c 	sel	r2, r4, ip
  40f68a:	fa83 f34c 	uadd8	r3, r3, ip
  40f68e:	faa2 f38c 	sel	r3, r2, ip
  40f692:	2b00      	cmp	r3, #0
  40f694:	d0c6      	beq.n	40f624 <strlen+0x24>
  40f696:	2a00      	cmp	r2, #0
  40f698:	bf04      	itt	eq
  40f69a:	3004      	addeq	r0, #4
  40f69c:	461a      	moveq	r2, r3
  40f69e:	ba12      	rev	r2, r2
  40f6a0:	fab2 f282 	clz	r2, r2
  40f6a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40f6a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40f6ac:	4770      	bx	lr
  40f6ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  40f6b2:	f004 0503 	and.w	r5, r4, #3
  40f6b6:	f1c4 0000 	rsb	r0, r4, #0
  40f6ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40f6be:	f014 0f04 	tst.w	r4, #4
  40f6c2:	f891 f040 	pld	[r1, #64]	; 0x40
  40f6c6:	fa0c f505 	lsl.w	r5, ip, r5
  40f6ca:	ea62 0205 	orn	r2, r2, r5
  40f6ce:	bf1c      	itt	ne
  40f6d0:	ea63 0305 	ornne	r3, r3, r5
  40f6d4:	4662      	movne	r2, ip
  40f6d6:	f04f 0400 	mov.w	r4, #0
  40f6da:	e7a9      	b.n	40f630 <strlen+0x30>

0040f6dc <__swbuf_r>:
  40f6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f6de:	460d      	mov	r5, r1
  40f6e0:	4614      	mov	r4, r2
  40f6e2:	4606      	mov	r6, r0
  40f6e4:	b110      	cbz	r0, 40f6ec <__swbuf_r+0x10>
  40f6e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f6e8:	2b00      	cmp	r3, #0
  40f6ea:	d04b      	beq.n	40f784 <__swbuf_r+0xa8>
  40f6ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f6f0:	69a3      	ldr	r3, [r4, #24]
  40f6f2:	60a3      	str	r3, [r4, #8]
  40f6f4:	b291      	uxth	r1, r2
  40f6f6:	0708      	lsls	r0, r1, #28
  40f6f8:	d539      	bpl.n	40f76e <__swbuf_r+0x92>
  40f6fa:	6923      	ldr	r3, [r4, #16]
  40f6fc:	2b00      	cmp	r3, #0
  40f6fe:	d036      	beq.n	40f76e <__swbuf_r+0x92>
  40f700:	b2ed      	uxtb	r5, r5
  40f702:	0489      	lsls	r1, r1, #18
  40f704:	462f      	mov	r7, r5
  40f706:	d515      	bpl.n	40f734 <__swbuf_r+0x58>
  40f708:	6822      	ldr	r2, [r4, #0]
  40f70a:	6961      	ldr	r1, [r4, #20]
  40f70c:	1ad3      	subs	r3, r2, r3
  40f70e:	428b      	cmp	r3, r1
  40f710:	da1c      	bge.n	40f74c <__swbuf_r+0x70>
  40f712:	3301      	adds	r3, #1
  40f714:	68a1      	ldr	r1, [r4, #8]
  40f716:	1c50      	adds	r0, r2, #1
  40f718:	3901      	subs	r1, #1
  40f71a:	60a1      	str	r1, [r4, #8]
  40f71c:	6020      	str	r0, [r4, #0]
  40f71e:	7015      	strb	r5, [r2, #0]
  40f720:	6962      	ldr	r2, [r4, #20]
  40f722:	429a      	cmp	r2, r3
  40f724:	d01a      	beq.n	40f75c <__swbuf_r+0x80>
  40f726:	89a3      	ldrh	r3, [r4, #12]
  40f728:	07db      	lsls	r3, r3, #31
  40f72a:	d501      	bpl.n	40f730 <__swbuf_r+0x54>
  40f72c:	2d0a      	cmp	r5, #10
  40f72e:	d015      	beq.n	40f75c <__swbuf_r+0x80>
  40f730:	4638      	mov	r0, r7
  40f732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f734:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40f736:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40f73a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40f73e:	81a2      	strh	r2, [r4, #12]
  40f740:	6822      	ldr	r2, [r4, #0]
  40f742:	6661      	str	r1, [r4, #100]	; 0x64
  40f744:	6961      	ldr	r1, [r4, #20]
  40f746:	1ad3      	subs	r3, r2, r3
  40f748:	428b      	cmp	r3, r1
  40f74a:	dbe2      	blt.n	40f712 <__swbuf_r+0x36>
  40f74c:	4621      	mov	r1, r4
  40f74e:	4630      	mov	r0, r6
  40f750:	f7fe fd2c 	bl	40e1ac <_fflush_r>
  40f754:	b940      	cbnz	r0, 40f768 <__swbuf_r+0x8c>
  40f756:	6822      	ldr	r2, [r4, #0]
  40f758:	2301      	movs	r3, #1
  40f75a:	e7db      	b.n	40f714 <__swbuf_r+0x38>
  40f75c:	4621      	mov	r1, r4
  40f75e:	4630      	mov	r0, r6
  40f760:	f7fe fd24 	bl	40e1ac <_fflush_r>
  40f764:	2800      	cmp	r0, #0
  40f766:	d0e3      	beq.n	40f730 <__swbuf_r+0x54>
  40f768:	f04f 37ff 	mov.w	r7, #4294967295
  40f76c:	e7e0      	b.n	40f730 <__swbuf_r+0x54>
  40f76e:	4621      	mov	r1, r4
  40f770:	4630      	mov	r0, r6
  40f772:	f7fe fc07 	bl	40df84 <__swsetup_r>
  40f776:	2800      	cmp	r0, #0
  40f778:	d1f6      	bne.n	40f768 <__swbuf_r+0x8c>
  40f77a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f77e:	6923      	ldr	r3, [r4, #16]
  40f780:	b291      	uxth	r1, r2
  40f782:	e7bd      	b.n	40f700 <__swbuf_r+0x24>
  40f784:	f7fe fd6a 	bl	40e25c <__sinit>
  40f788:	e7b0      	b.n	40f6ec <__swbuf_r+0x10>
  40f78a:	bf00      	nop

0040f78c <_wcrtomb_r>:
  40f78c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f78e:	4606      	mov	r6, r0
  40f790:	b085      	sub	sp, #20
  40f792:	461f      	mov	r7, r3
  40f794:	b189      	cbz	r1, 40f7ba <_wcrtomb_r+0x2e>
  40f796:	4c10      	ldr	r4, [pc, #64]	; (40f7d8 <_wcrtomb_r+0x4c>)
  40f798:	4d10      	ldr	r5, [pc, #64]	; (40f7dc <_wcrtomb_r+0x50>)
  40f79a:	6824      	ldr	r4, [r4, #0]
  40f79c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40f79e:	2c00      	cmp	r4, #0
  40f7a0:	bf08      	it	eq
  40f7a2:	462c      	moveq	r4, r5
  40f7a4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40f7a8:	47a0      	blx	r4
  40f7aa:	1c43      	adds	r3, r0, #1
  40f7ac:	d103      	bne.n	40f7b6 <_wcrtomb_r+0x2a>
  40f7ae:	2200      	movs	r2, #0
  40f7b0:	238a      	movs	r3, #138	; 0x8a
  40f7b2:	603a      	str	r2, [r7, #0]
  40f7b4:	6033      	str	r3, [r6, #0]
  40f7b6:	b005      	add	sp, #20
  40f7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f7ba:	460c      	mov	r4, r1
  40f7bc:	4906      	ldr	r1, [pc, #24]	; (40f7d8 <_wcrtomb_r+0x4c>)
  40f7be:	4a07      	ldr	r2, [pc, #28]	; (40f7dc <_wcrtomb_r+0x50>)
  40f7c0:	6809      	ldr	r1, [r1, #0]
  40f7c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40f7c4:	2900      	cmp	r1, #0
  40f7c6:	bf08      	it	eq
  40f7c8:	4611      	moveq	r1, r2
  40f7ca:	4622      	mov	r2, r4
  40f7cc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40f7d0:	a901      	add	r1, sp, #4
  40f7d2:	47a0      	blx	r4
  40f7d4:	e7e9      	b.n	40f7aa <_wcrtomb_r+0x1e>
  40f7d6:	bf00      	nop
  40f7d8:	20400184 	.word	0x20400184
  40f7dc:	204005b4 	.word	0x204005b4

0040f7e0 <__ascii_wctomb>:
  40f7e0:	b121      	cbz	r1, 40f7ec <__ascii_wctomb+0xc>
  40f7e2:	2aff      	cmp	r2, #255	; 0xff
  40f7e4:	d804      	bhi.n	40f7f0 <__ascii_wctomb+0x10>
  40f7e6:	700a      	strb	r2, [r1, #0]
  40f7e8:	2001      	movs	r0, #1
  40f7ea:	4770      	bx	lr
  40f7ec:	4608      	mov	r0, r1
  40f7ee:	4770      	bx	lr
  40f7f0:	238a      	movs	r3, #138	; 0x8a
  40f7f2:	6003      	str	r3, [r0, #0]
  40f7f4:	f04f 30ff 	mov.w	r0, #4294967295
  40f7f8:	4770      	bx	lr
  40f7fa:	bf00      	nop

0040f7fc <_write_r>:
  40f7fc:	b570      	push	{r4, r5, r6, lr}
  40f7fe:	460d      	mov	r5, r1
  40f800:	4c08      	ldr	r4, [pc, #32]	; (40f824 <_write_r+0x28>)
  40f802:	4611      	mov	r1, r2
  40f804:	4606      	mov	r6, r0
  40f806:	461a      	mov	r2, r3
  40f808:	4628      	mov	r0, r5
  40f80a:	2300      	movs	r3, #0
  40f80c:	6023      	str	r3, [r4, #0]
  40f80e:	f7f2 fb11 	bl	401e34 <_write>
  40f812:	1c43      	adds	r3, r0, #1
  40f814:	d000      	beq.n	40f818 <_write_r+0x1c>
  40f816:	bd70      	pop	{r4, r5, r6, pc}
  40f818:	6823      	ldr	r3, [r4, #0]
  40f81a:	2b00      	cmp	r3, #0
  40f81c:	d0fb      	beq.n	40f816 <_write_r+0x1a>
  40f81e:	6033      	str	r3, [r6, #0]
  40f820:	bd70      	pop	{r4, r5, r6, pc}
  40f822:	bf00      	nop
  40f824:	20401220 	.word	0x20401220

0040f828 <__register_exitproc>:
  40f828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40f82c:	4d2c      	ldr	r5, [pc, #176]	; (40f8e0 <__register_exitproc+0xb8>)
  40f82e:	4606      	mov	r6, r0
  40f830:	6828      	ldr	r0, [r5, #0]
  40f832:	4698      	mov	r8, r3
  40f834:	460f      	mov	r7, r1
  40f836:	4691      	mov	r9, r2
  40f838:	f7ff f8d0 	bl	40e9dc <__retarget_lock_acquire_recursive>
  40f83c:	4b29      	ldr	r3, [pc, #164]	; (40f8e4 <__register_exitproc+0xbc>)
  40f83e:	681c      	ldr	r4, [r3, #0]
  40f840:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40f844:	2b00      	cmp	r3, #0
  40f846:	d03e      	beq.n	40f8c6 <__register_exitproc+0x9e>
  40f848:	685a      	ldr	r2, [r3, #4]
  40f84a:	2a1f      	cmp	r2, #31
  40f84c:	dc1c      	bgt.n	40f888 <__register_exitproc+0x60>
  40f84e:	f102 0e01 	add.w	lr, r2, #1
  40f852:	b176      	cbz	r6, 40f872 <__register_exitproc+0x4a>
  40f854:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40f858:	2401      	movs	r4, #1
  40f85a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40f85e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40f862:	4094      	lsls	r4, r2
  40f864:	4320      	orrs	r0, r4
  40f866:	2e02      	cmp	r6, #2
  40f868:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40f86c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40f870:	d023      	beq.n	40f8ba <__register_exitproc+0x92>
  40f872:	3202      	adds	r2, #2
  40f874:	f8c3 e004 	str.w	lr, [r3, #4]
  40f878:	6828      	ldr	r0, [r5, #0]
  40f87a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40f87e:	f7ff f8af 	bl	40e9e0 <__retarget_lock_release_recursive>
  40f882:	2000      	movs	r0, #0
  40f884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40f888:	4b17      	ldr	r3, [pc, #92]	; (40f8e8 <__register_exitproc+0xc0>)
  40f88a:	b30b      	cbz	r3, 40f8d0 <__register_exitproc+0xa8>
  40f88c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40f890:	f7ff f920 	bl	40ead4 <malloc>
  40f894:	4603      	mov	r3, r0
  40f896:	b1d8      	cbz	r0, 40f8d0 <__register_exitproc+0xa8>
  40f898:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40f89c:	6002      	str	r2, [r0, #0]
  40f89e:	2100      	movs	r1, #0
  40f8a0:	6041      	str	r1, [r0, #4]
  40f8a2:	460a      	mov	r2, r1
  40f8a4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40f8a8:	f04f 0e01 	mov.w	lr, #1
  40f8ac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40f8b0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40f8b4:	2e00      	cmp	r6, #0
  40f8b6:	d0dc      	beq.n	40f872 <__register_exitproc+0x4a>
  40f8b8:	e7cc      	b.n	40f854 <__register_exitproc+0x2c>
  40f8ba:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40f8be:	430c      	orrs	r4, r1
  40f8c0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40f8c4:	e7d5      	b.n	40f872 <__register_exitproc+0x4a>
  40f8c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40f8ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40f8ce:	e7bb      	b.n	40f848 <__register_exitproc+0x20>
  40f8d0:	6828      	ldr	r0, [r5, #0]
  40f8d2:	f7ff f885 	bl	40e9e0 <__retarget_lock_release_recursive>
  40f8d6:	f04f 30ff 	mov.w	r0, #4294967295
  40f8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40f8de:	bf00      	nop
  40f8e0:	204005b0 	.word	0x204005b0
  40f8e4:	00410dd0 	.word	0x00410dd0
  40f8e8:	0040ead5 	.word	0x0040ead5

0040f8ec <_close_r>:
  40f8ec:	b538      	push	{r3, r4, r5, lr}
  40f8ee:	4c07      	ldr	r4, [pc, #28]	; (40f90c <_close_r+0x20>)
  40f8f0:	2300      	movs	r3, #0
  40f8f2:	4605      	mov	r5, r0
  40f8f4:	4608      	mov	r0, r1
  40f8f6:	6023      	str	r3, [r4, #0]
  40f8f8:	f7f5 fa62 	bl	404dc0 <_close>
  40f8fc:	1c43      	adds	r3, r0, #1
  40f8fe:	d000      	beq.n	40f902 <_close_r+0x16>
  40f900:	bd38      	pop	{r3, r4, r5, pc}
  40f902:	6823      	ldr	r3, [r4, #0]
  40f904:	2b00      	cmp	r3, #0
  40f906:	d0fb      	beq.n	40f900 <_close_r+0x14>
  40f908:	602b      	str	r3, [r5, #0]
  40f90a:	bd38      	pop	{r3, r4, r5, pc}
  40f90c:	20401220 	.word	0x20401220

0040f910 <_fclose_r>:
  40f910:	b570      	push	{r4, r5, r6, lr}
  40f912:	b159      	cbz	r1, 40f92c <_fclose_r+0x1c>
  40f914:	4605      	mov	r5, r0
  40f916:	460c      	mov	r4, r1
  40f918:	b110      	cbz	r0, 40f920 <_fclose_r+0x10>
  40f91a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f91c:	2b00      	cmp	r3, #0
  40f91e:	d03c      	beq.n	40f99a <_fclose_r+0x8a>
  40f920:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40f922:	07d8      	lsls	r0, r3, #31
  40f924:	d505      	bpl.n	40f932 <_fclose_r+0x22>
  40f926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f92a:	b92b      	cbnz	r3, 40f938 <_fclose_r+0x28>
  40f92c:	2600      	movs	r6, #0
  40f92e:	4630      	mov	r0, r6
  40f930:	bd70      	pop	{r4, r5, r6, pc}
  40f932:	89a3      	ldrh	r3, [r4, #12]
  40f934:	0599      	lsls	r1, r3, #22
  40f936:	d53c      	bpl.n	40f9b2 <_fclose_r+0xa2>
  40f938:	4621      	mov	r1, r4
  40f93a:	4628      	mov	r0, r5
  40f93c:	f7fe fb96 	bl	40e06c <__sflush_r>
  40f940:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40f942:	4606      	mov	r6, r0
  40f944:	b133      	cbz	r3, 40f954 <_fclose_r+0x44>
  40f946:	69e1      	ldr	r1, [r4, #28]
  40f948:	4628      	mov	r0, r5
  40f94a:	4798      	blx	r3
  40f94c:	2800      	cmp	r0, #0
  40f94e:	bfb8      	it	lt
  40f950:	f04f 36ff 	movlt.w	r6, #4294967295
  40f954:	89a3      	ldrh	r3, [r4, #12]
  40f956:	061a      	lsls	r2, r3, #24
  40f958:	d422      	bmi.n	40f9a0 <_fclose_r+0x90>
  40f95a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40f95c:	b141      	cbz	r1, 40f970 <_fclose_r+0x60>
  40f95e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40f962:	4299      	cmp	r1, r3
  40f964:	d002      	beq.n	40f96c <_fclose_r+0x5c>
  40f966:	4628      	mov	r0, r5
  40f968:	f7fe fd9e 	bl	40e4a8 <_free_r>
  40f96c:	2300      	movs	r3, #0
  40f96e:	6323      	str	r3, [r4, #48]	; 0x30
  40f970:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40f972:	b121      	cbz	r1, 40f97e <_fclose_r+0x6e>
  40f974:	4628      	mov	r0, r5
  40f976:	f7fe fd97 	bl	40e4a8 <_free_r>
  40f97a:	2300      	movs	r3, #0
  40f97c:	6463      	str	r3, [r4, #68]	; 0x44
  40f97e:	f7fe fc99 	bl	40e2b4 <__sfp_lock_acquire>
  40f982:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40f984:	2200      	movs	r2, #0
  40f986:	07db      	lsls	r3, r3, #31
  40f988:	81a2      	strh	r2, [r4, #12]
  40f98a:	d50e      	bpl.n	40f9aa <_fclose_r+0x9a>
  40f98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f98e:	f7ff f823 	bl	40e9d8 <__retarget_lock_close_recursive>
  40f992:	f7fe fc95 	bl	40e2c0 <__sfp_lock_release>
  40f996:	4630      	mov	r0, r6
  40f998:	bd70      	pop	{r4, r5, r6, pc}
  40f99a:	f7fe fc5f 	bl	40e25c <__sinit>
  40f99e:	e7bf      	b.n	40f920 <_fclose_r+0x10>
  40f9a0:	6921      	ldr	r1, [r4, #16]
  40f9a2:	4628      	mov	r0, r5
  40f9a4:	f7fe fd80 	bl	40e4a8 <_free_r>
  40f9a8:	e7d7      	b.n	40f95a <_fclose_r+0x4a>
  40f9aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f9ac:	f7ff f818 	bl	40e9e0 <__retarget_lock_release_recursive>
  40f9b0:	e7ec      	b.n	40f98c <_fclose_r+0x7c>
  40f9b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f9b4:	f7ff f812 	bl	40e9dc <__retarget_lock_acquire_recursive>
  40f9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f9bc:	2b00      	cmp	r3, #0
  40f9be:	d1bb      	bne.n	40f938 <_fclose_r+0x28>
  40f9c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40f9c2:	f016 0601 	ands.w	r6, r6, #1
  40f9c6:	d1b1      	bne.n	40f92c <_fclose_r+0x1c>
  40f9c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f9ca:	f7ff f809 	bl	40e9e0 <__retarget_lock_release_recursive>
  40f9ce:	4630      	mov	r0, r6
  40f9d0:	bd70      	pop	{r4, r5, r6, pc}
  40f9d2:	bf00      	nop

0040f9d4 <_fstat_r>:
  40f9d4:	b538      	push	{r3, r4, r5, lr}
  40f9d6:	460b      	mov	r3, r1
  40f9d8:	4c07      	ldr	r4, [pc, #28]	; (40f9f8 <_fstat_r+0x24>)
  40f9da:	4605      	mov	r5, r0
  40f9dc:	4611      	mov	r1, r2
  40f9de:	4618      	mov	r0, r3
  40f9e0:	2300      	movs	r3, #0
  40f9e2:	6023      	str	r3, [r4, #0]
  40f9e4:	f7f5 f9ef 	bl	404dc6 <_fstat>
  40f9e8:	1c43      	adds	r3, r0, #1
  40f9ea:	d000      	beq.n	40f9ee <_fstat_r+0x1a>
  40f9ec:	bd38      	pop	{r3, r4, r5, pc}
  40f9ee:	6823      	ldr	r3, [r4, #0]
  40f9f0:	2b00      	cmp	r3, #0
  40f9f2:	d0fb      	beq.n	40f9ec <_fstat_r+0x18>
  40f9f4:	602b      	str	r3, [r5, #0]
  40f9f6:	bd38      	pop	{r3, r4, r5, pc}
  40f9f8:	20401220 	.word	0x20401220

0040f9fc <_isatty_r>:
  40f9fc:	b538      	push	{r3, r4, r5, lr}
  40f9fe:	4c07      	ldr	r4, [pc, #28]	; (40fa1c <_isatty_r+0x20>)
  40fa00:	2300      	movs	r3, #0
  40fa02:	4605      	mov	r5, r0
  40fa04:	4608      	mov	r0, r1
  40fa06:	6023      	str	r3, [r4, #0]
  40fa08:	f7f5 f9e2 	bl	404dd0 <_isatty>
  40fa0c:	1c43      	adds	r3, r0, #1
  40fa0e:	d000      	beq.n	40fa12 <_isatty_r+0x16>
  40fa10:	bd38      	pop	{r3, r4, r5, pc}
  40fa12:	6823      	ldr	r3, [r4, #0]
  40fa14:	2b00      	cmp	r3, #0
  40fa16:	d0fb      	beq.n	40fa10 <_isatty_r+0x14>
  40fa18:	602b      	str	r3, [r5, #0]
  40fa1a:	bd38      	pop	{r3, r4, r5, pc}
  40fa1c:	20401220 	.word	0x20401220

0040fa20 <_lseek_r>:
  40fa20:	b570      	push	{r4, r5, r6, lr}
  40fa22:	460d      	mov	r5, r1
  40fa24:	4c08      	ldr	r4, [pc, #32]	; (40fa48 <_lseek_r+0x28>)
  40fa26:	4611      	mov	r1, r2
  40fa28:	4606      	mov	r6, r0
  40fa2a:	461a      	mov	r2, r3
  40fa2c:	4628      	mov	r0, r5
  40fa2e:	2300      	movs	r3, #0
  40fa30:	6023      	str	r3, [r4, #0]
  40fa32:	f7f5 f9cf 	bl	404dd4 <_lseek>
  40fa36:	1c43      	adds	r3, r0, #1
  40fa38:	d000      	beq.n	40fa3c <_lseek_r+0x1c>
  40fa3a:	bd70      	pop	{r4, r5, r6, pc}
  40fa3c:	6823      	ldr	r3, [r4, #0]
  40fa3e:	2b00      	cmp	r3, #0
  40fa40:	d0fb      	beq.n	40fa3a <_lseek_r+0x1a>
  40fa42:	6033      	str	r3, [r6, #0]
  40fa44:	bd70      	pop	{r4, r5, r6, pc}
  40fa46:	bf00      	nop
  40fa48:	20401220 	.word	0x20401220

0040fa4c <_read_r>:
  40fa4c:	b570      	push	{r4, r5, r6, lr}
  40fa4e:	460d      	mov	r5, r1
  40fa50:	4c08      	ldr	r4, [pc, #32]	; (40fa74 <_read_r+0x28>)
  40fa52:	4611      	mov	r1, r2
  40fa54:	4606      	mov	r6, r0
  40fa56:	461a      	mov	r2, r3
  40fa58:	4628      	mov	r0, r5
  40fa5a:	2300      	movs	r3, #0
  40fa5c:	6023      	str	r3, [r4, #0]
  40fa5e:	f7f2 f9cb 	bl	401df8 <_read>
  40fa62:	1c43      	adds	r3, r0, #1
  40fa64:	d000      	beq.n	40fa68 <_read_r+0x1c>
  40fa66:	bd70      	pop	{r4, r5, r6, pc}
  40fa68:	6823      	ldr	r3, [r4, #0]
  40fa6a:	2b00      	cmp	r3, #0
  40fa6c:	d0fb      	beq.n	40fa66 <_read_r+0x1a>
  40fa6e:	6033      	str	r3, [r6, #0]
  40fa70:	bd70      	pop	{r4, r5, r6, pc}
  40fa72:	bf00      	nop
  40fa74:	20401220 	.word	0x20401220

0040fa78 <MY_OV2655_BASIC_CONFIG>:
  40fa78:	0080308c 0010308d 0000360b 00fc30b0     .0...0...6...0..
  40fa88:	002f30b1 002430b2 00003601 00003308     .0/..0$..6...3..
  40fa98:	00103012 00023011 00003093 00f73013     .0...0...0...0..
  40faa8:	008c3014 00883018 00703019 00d4301a     .0...0...0p..0..
  40fab8:	00013020 00183021 00003022 000a3023      0..!0.."0..#0..
  40fac8:	00063024 00403025 00023026 00583027     $0..%0@.&0..'0X.
  40fad8:	00073028 00933029 0004302a 00d4302b     (0..)0..*0..+0..
  40fae8:	00063088 00403089 0002308a 0058308b     .0...0@..0...0X.
  40faf8:	00643316 00253317 00803318 00083319     .3d..3%..3...3..
  40fb08:	0064331a 004b331b 0000331c 0038331d     .3d..3K..3...38.
  40fb18:	00fa3320 00113321 00923322 00013323      3..!3.."3..#3..
  40fb28:	00973324 00023325 00ff3326 000c3327     $3..%3..&3..'3..
  40fb38:	00103328 00103329 0058332a 0056332b     (3..)3..*3X.+3V.
  40fb48:	00be332c 00e1332d 003a332e 0036332f     ,3..-3...3:./36.
  40fb58:	004d3330 00443331 00f83332 000a3333     03M.13D.23..33..
  40fb68:	00f03334 00f03335 00f03336 00403337     43..53..63..73@.
  40fb78:	00403338 00403339 0000333a 0000333b     83@.93@.:3..;3..
  40fb88:	00283380 00483381 00103382 00183383     .3(..3H..3...3..
  40fb98:	00283384 00403385 00403386 00343387     .3(..3@..3@..34.
  40fba8:	000c3388 00983389 0001338a 00043340     .3...3...3..@3..
  40fbb8:	00073341 00193342 00343343 004a3344     A3..B3..C34.D3J.
  40fbc8:	005a3345 006a3346 00713347 007c3348     E3Z.F3j.G3q.H3|.
  40fbd8:	008c3349 009b334a 00a9334b 00c0334c     I3..J3..K3..L3..
  40fbe8:	00d5334d 00e8334e 0020334f 00413090     M3..N3..O3 ..0A.
  40fbf8:	00b03300 00ff3301 0011338b 0010338c     .3...3...3...3..
  40fc08:	0040338d 00ff3370 00003371 00173372     .3@.p3..q3..r3..
  40fc18:	00203373 00003374 00103375 00103376     s3 .t3..u3..v3..
  40fc28:	00003377 00103378 00803379 00863069     w3..x3..y3..i0..
  40fc38:	00023087 0010307c 0000307a 00023100     .0..|0..z0...1..
  40fc48:	00403400 00003601 008330f3 0088304e     .4@..6...0..N0..
  40fc58:	00023015 0000302d 0000302e 00003306     .0..-0...0...3..
  40fc68:	0001363b 00f2363c 004130a1 008030a3     ;6..<6...0A..0..
  40fc78:	005630a8 007230aa 001030af 002c30b2     .0V..0r..0...0,.
  40fc88:	008c30d9 00003000 00ffffff              .0...0......

0040fc94 <MY_OV2655_BASIC_FALLBACK>:
  40fc94:	00ffffff                                ....

0040fc98 <MY_OV2655_BASIC_RESET>:
  40fc98:	00803012 00ffffff                       .0......

0040fca0 <MY_OV2710_BASIC_CONFIG>:
  40fca0:	00ffffff                                ....

0040fca4 <MY_OV2710_BASIC_RESET>:
  40fca4:	00823008 00003017 00003018 00ffffff     .0...0...0......

0040fcb4 <OV7740_TEST_PATTERN>:
  40fcb4:	0000000e 00ff00ff                       ........

0040fcbc <OV7740_VGA_YUV422_20FPS>:
  40fcbc:	00ff00ff                                ....

0040fcc0 <mmc_trans_multipliers>:
  40fcc0:	00000000 0000000a 0000000c 0000000d     ................
  40fcd0:	0000000f 00000014 0000001a 0000001e     ................
  40fce0:	00000023 00000028 0000002d 00000034     #...(...-...4...
  40fcf0:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040fd00 <sd_mmc_trans_units>:
  40fd00:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0040fd1c <sd_trans_multipliers>:
  40fd1c:	00000000 0000000a 0000000c 0000000d     ................
  40fd2c:	0000000f 00000014 00000019 0000001e     ................
  40fd3c:	00000023 00000028 0000002d 00000032     #...(...-...2...
  40fd4c:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040fd5c <lun_desc>:
  40fd5c:	00401059 00401099 004010b9 004010d1     Y.@...@...@...@.
  40fd6c:	004010f1 00401135 00401199 0040fd9c     ..@.5.@...@...@.
  40fd7c:	00401069 004010a9 004010c5 004010e1     i.@...@...@...@.
  40fd8c:	004010f5 00401149 004011ad 0040fdb4     ..@.I.@...@...@.
  40fd9c:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
  40fdac:	22302074 00000000 2f445322 20434d4d     t 0"...."SD/MMC 
  40fdbc:	64726143 6f6c5320 22312074 00000000     Card Slot 1"....

0040fdcc <LfnOfs>:
  40fdcc:	07050301 12100e09 1c181614 0000001e     ................

0040fddc <excvt.5682>:
  40fddc:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
  40fdec:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
  40fdfc:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
  40fe0c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  40fe1c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
  40fe2c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  40fe3c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
  40fe4c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
  40fe5c:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  40fe6c:	00005d5b                                []..

0040fe70 <Tbl>:
  40fe70:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  40fe80:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  40fe90:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  40fea0:	00d600ff 00f800dc 00d800a3 019200d7     ................
  40feb0:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  40fec0:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
  40fed0:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
  40fee0:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
  40fef0:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
  40ff00:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
  40ff10:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
  40ff20:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
  40ff30:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
  40ff40:	00da00de 00d900db 00dd00fd 00b400af     ................
  40ff50:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
  40ff60:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0040ff70 <tbl_lower.5432>:
  40ff70:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
  40ff80:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
  40ff90:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
  40ffa0:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
  40ffb0:	00e100e0 00e300e2 00e500e4 00e700e6     ................
  40ffc0:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
  40ffd0:	00f100f0 00f300f2 00f500f4 00f800f6     ................
  40ffe0:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
  40fff0:	01050103 01090107 010d010b 0111010f     ................
  410000:	01150113 01190117 011d011b 0121011f     ..............!.
  410010:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
  410020:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
  410030:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
  410040:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
  410050:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
  410060:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
  410070:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
  410080:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
  410090:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
  4100a0:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
  4100b0:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
  4100c0:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
  4100d0:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
  4100e0:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
  4100f0:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
  410100:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
  410110:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
  410120:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
  410130:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
  410140:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00410150 <tbl_upper.5433>:
  410150:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
  410160:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
  410170:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
  410180:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
  410190:	00c100c0 00c300c2 00c500c4 00c700c6     ................
  4101a0:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
  4101b0:	00d100d0 00d300d2 00d500d4 00d800d6     ................
  4101c0:	00da00d9 00dc00db 00de00dd 01000178     ............x...
  4101d0:	01040102 01080106 010c010a 0110010e     ................
  4101e0:	01140112 01180116 011c011a 0120011e     .............. .
  4101f0:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
  410200:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
  410210:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
  410220:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
  410230:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
  410240:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
  410250:	03940393 03960395 03980397 039a0399     ................
  410260:	039c039b 039e039d 03a0039f 03a303a1     ................
  410270:	03a503a4 03a703a6 03a903a8 041003aa     ................
  410280:	04120411 04140413 04160415 04180417     ................
  410290:	041a0419 041c041b 041e041d 0420041f     .............. .
  4102a0:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
  4102b0:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
  4102c0:	04030402 04050404 04070406 04090408     ................
  4102d0:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
  4102e0:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
  4102f0:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
  410300:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
  410310:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
  410320:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
  410330:	5f544446 00544144 5f544446 00474d49     FDT_DAT.FDT_IMG.
  410340:	0080308c 0010308d 0000360b 00fc30b0     .0...0...6...0..
  410350:	002f30b1 002430b2 00003601 00013308     .0/..0$..6...3..
  410360:	00103012 00023011 00003093 00f73013     .0...0...0...0..
  410370:	008c3014 00883018 00703019 00d4301a     .0...0...0p..0..
  410380:	00013020 00183021 00003022 000a3023      0..!0.."0..#0..
  410390:	00063024 00403025 00023026 00583027     $0..%0@.&0..'0X.
  4103a0:	00073028 00933029 0004302a 00d4302b     (0..)0..*0..+0..
  4103b0:	00063088 00403089 0002308a 0058308b     .0...0@..0...0X.
  4103c0:	00643316 00253317 00803318 00083319     .3d..3%..3...3..
  4103d0:	0064331a 004b331b 0000331c 0038331d     .3d..3K..3...38.
  4103e0:	00fa3320 00113321 00923322 00013323      3..!3.."3..#3..
  4103f0:	00973324 00023325 00ff3326 000c3327     $3..%3..&3..'3..
  410400:	00103328 00103329 0058332a 0056332b     (3..)3..*3X.+3V.
  410410:	00be332c 00e1332d 003a332e 0036332f     ,3..-3...3:./36.
  410420:	004d3330 00443331 00f83332 000a3333     03M.13D.23..33..
  410430:	00f03334 00f03335 00f03336 00403337     43..53..63..73@.
  410440:	00403338 00403339 0000333a 0000333b     83@.93@.:3..;3..
  410450:	00283380 00483381 00103382 00183383     .3(..3H..3...3..
  410460:	00283384 00403385 00403386 00343387     .3(..3@..3@..34.
  410470:	000c3388 00983389 0001338a 00043340     .3...3...3..@3..
  410480:	00073341 00193342 00343343 004a3344     A3..B3..C34.D3J.
  410490:	005a3345 006a3346 00713347 007c3348     E3Z.F3j.G3q.H3|.
  4104a0:	008c3349 009b334a 00a9334b 00c0334c     I3..J3..K3..L3..
  4104b0:	00d5334d 00e8334e 0020334f 00413090     M3..N3..O3 ..0A.
  4104c0:	00b03300 00ff3301 0011338b 0010338c     .3...3...3...3..
  4104d0:	0040338d 00ff3370 00003371 00173372     .3@.p3..q3..r3..
  4104e0:	00203373 00003374 00103375 00103376     s3 .t3..u3..v3..
  4104f0:	00003377 00103378 00803379 00863069     w3..x3..y3..i0..
  410500:	00023087 0010307c 0000307a 00023100     .0..|0..z0...1..
  410510:	00403400 00003601 008330f3 0088304e     .4@..6...0..N0..
  410520:	00023015 0000302d 0000302e 00003306     .0..-0...0...3..
  410530:	0001363b 00f2363c 004130a1 008030a3     ;6..<6...0A..0..
  410540:	005630a8 007230aa 001030af 002c30b2     .0V..0r..0...0,.
  410550:	008c30d9 00003000 00ffffff 63256325     .0...0......%c%c
  410560:	63256325 63256325 63256325 00000000     %c%c%c%c%c%c....

00410570 <SDRAM_INSIGNIS_16M>:
  410570:	00000016 00000030 f955d5f9 4d415253     ....0.....U.SRAM
  410580:	00000a0d 4d415253 4d4f4320 54454c50     ....SRAM COMPLET
  410590:	000a0d45 25205825 000a0d58 202d462d     E...%X %X...-F- 
  4105a0:	73616c46 72702068 6172676f 6e696d6d     Flash programmin
  4105b0:	72652067 20726f72 0a756c25 0000000d     g error %lu.....
  4105c0:	41460a0d 43204c49 54204352 4954204f     ..FAIL CRC TO TI
  4105d0:	0a0d594e 00000000 4f470a0d 4420444f     NY........GOOD D
  4105e0:	20415441 44564352 4f524620 4954204d     ATA RCVD FROM TI
  4105f0:	203a594e 252d6425 64252d64 3a642520     NY: %d-%d-%d %d:
  410600:	0d206425 0000000a 71696e55 44496575     %d .....UniqueID
  410610:	72726520 0000726f 20474f4c 49544f4d      error..LOG MOTI
  410620:	20204e4f 252d5825 30322d58 20205825     ON  %X-%X-20%X  
  410630:	253a5825 000a0d58 504d4554 20582520     %X:%X...TEMP %X 
  410640:	4f524142 5825204d 4d554820 54494449     BAROM %X HUMIDIT
  410650:	58252059 00000a0d 25205825 58252058     Y %X....%X %X %X
  410660:	20582520 0a0d5825 00000000 204d4750      %X %X......PGM 
  410670:	494e4946 44454853 00000a0d 4f420a0d     FINISHED......BO
  410680:	2520544f 00002058 0d525750 0000000a     OT %X ..PWR.....
  410690:	0d545352 0000000a 252d5825 58252d58     RST.....%X-%X-%X
  4106a0:	58252020 3a58253a 25205825 0a0d2058       %X:%X:%X %X ..
  4106b0:	00000000 45454c53 000a0d50 594e4954     ....SLEEP...TINY
  4106c0:	00000a0d 0d435452 0000000a 43544157     ....RTC.....WATC
  4106d0:	474f4448 00000a0d 252d5825 58252d58     HDOG....%X-%X-%X
  4106e0:	3a582520 253a5825 000a0d58 504d4554      %X:%X:%X...TEMP
  4106f0:	20582520 4f524142 5825204d 4d554820      %X BAROM %X HUM
  410700:	54494449 58252059 47494c20 25205448     IDITY %X LIGHT %
  410710:	4f4d2058 4e4f4954 0d582520 0000000a     X MOTION %X.....
  410720:	20474f4c 49544f4d 46204e4f 54434e55     LOG MOTION FUNCT
  410730:	204e4f49 54414854 55414320 20534553     ION THAT CAUSES 
  410740:	43544157 474f4448 49414620 4552554c     WATCHDOG FAILURE
  410750:	00000a0d 54474942 20594e49 20435243     ....BIGTINY CRC 
  410760:	444f4f47 20642520 25205825 0d582558     GOOD %d %X %X%X.
  410770:	0000000a 49544f4d 203a4e4f 25205825     ....MOTION: %X %
  410780:	58252058 20582520 25205825 58252058     X %X %X %X %X %X
  410790:	20582520 4e494d20 544f545f 203a4c41      %X  MIN_TOTAL: 
  4107a0:	20205825 584f5250 5825203a 20582520     %X  PROX: %X %X 
  4107b0:	25205825 58252058 20582520 25205825     %X %X %X %X %X %
  4107c0:	58252058 20582520 25205825 41422058     X %X %X %X %X BA
  4107d0:	494c4553 5020454e 3a584f52 0d582520     SELINE PROX: %X.
  4107e0:	5452200a 494d5f43 25203a4e 494c2058     . RTC_MIN: %X LI
  4107f0:	3a544847 20582520 20434f4c 45545942     GHT: %X LOC BYTE
  410800:	5825203a 00000a0d 54474942 20594e49     : %X....BIGTINY 
  410810:	20435243 4f525245 64252052 20582520     CRC ERROR %d %X 
  410820:	58255825 00000a0d 4e444944 44205427     %X%X....DIDN'T D
  410830:	43455445 54522054 55502043 0d45534c     ETECT RTC PULSE.
  410840:	0000000a 0d4c4c41 0000000a 4b4c5542     ....ALL.....BULK
  410850:	54554f20 56435220 25203a44 78252078      OUT RCVD: %x %x
  410860:	20782520 25207825 78252078 20782520      %x %x %x %x %x 
  410870:	0a0d7825 00000000 4b4c5542 204e4920     %x......BULK IN 
  410880:	41544144 4e455320 36352054 25203a35     DATA SENT 565: %
  410890:	78252078 20782520 25207825 78252078     x %x %x %x %x %x
  4108a0:	20782520 0a0d7825 00000000 4b4c5542      %x %x......BULK
  4108b0:	204e4920 41544144 4e455320 38382054      IN DATA SENT 88
  4108c0:	25203a38 78252078 20782520 25207825     8: %x %x %x %x %
  4108d0:	78252078 20782520 0a0d7825 00000000     x %x %x %x......
  4108e0:	6e696c42 0d64656b 0000000a 203a4e49     Blinked.....IN: 
  4108f0:	25206425 64252064 20642520 25206425     %d %d %d %d %d %
  410900:	64252064 00000a0d 3a54554f 20642520     d %d....OUT: %d 
  410910:	25206425 64252064 20642520 25206425     %d %d %d %d %d %
  410920:	000a0d64                                d...

00410924 <oneDayHeader>:
  410924:	73726556 2c6e6f69 65746144 544d4728     Version,Date(GMT
  410934:	69542c29 4728656d 2c29544d 656d6954     ),Time(GMT),Time
  410944:	636f4c28 6f4d2c29 6e6f6974 4d726550     (Loc),MotionPerM
  410954:	74756e69 6f4d2c65 6e6f6974 2c716553     inute,MotionSeq,
  410964:	706d6554 74617265 2c657275 696d7548     Temperature,Humi
  410974:	79746964 7269412c 73657250 65727573     dity,AirPressure
  410984:	67694c2c 442c7468 2c317275 32727544     ,Light,Dur1,Dur2
  410994:	7275442c 75442c33 442c3472 2c357275     ,Dur3,Dur4,Dur5,
  4109a4:	36727544 7275442c 75442c37 442c3872     Dur6,Dur7,Dur8,D
  4109b4:	2c397275 31727544 75442c30 2c313172     ur9,Dur10,Dur11,
  4109c4:	31727544 754e2c32 6972546d 4c2c7370     Dur12,NumTrips,L
  4109d4:	69676e6f 65647574 74614c2c 64757469     ongitude,Latitud
  4109e4:	614c2c65 50477473 74616453 614c2c65     e,LastGPSdate,La
  4109f4:	50477473 6d697453 61422c65 72657474     stGPStime,Batter
  410a04:	50472c79 6d754e53 73746153 5350472c     y,GPSNumSats,GPS
  410a14:	46465454 67614d2c 6f74656e 6574656d     TTFF,Magnetomete
  410a24:	000a0d72 00000000 49474542 4e4f204e     r.......BEGIN ON
  410a34:	41442045 50412059 444e4550 204f5420     E DAY APPEND TO 
  410a44:	20565343 0d2e5825 0000000a 20434d4d     CSV %X......MMC 
  410a54:	25206425 000a0d64 20434d4d 45534552     %d %d...MMC RESE
  410a64:	64252054 0d642520 0000000a 20434d4d     T %d %d.....MMC 
  410a74:	54494e49 0d642520 0000000a 4e554f4d     INIT %d.....MOUN
  410a84:	49442054 2e2e4b53 000a0d2e 4e554f4d     T DISK......MOUN
  410a94:	49442054 52204b53 4c555345 64252054     T DISK RESULT %d
  410aa4:	00000a0d 49595254 4620474e 45504f5f     ....TRYING F_OPE
  410ab4:	5249444e 0a0d2928 00000000 504f5f46     NDIR()......F_OP
  410ac4:	49444e45 20292852 20534552 6425203d     ENDIR() RES = %d
  410ad4:	00000a0d 4e554f46 44462044 4f462054     ....FOUND FDT FO
  410ae4:	5245444c 00000a0d 41455243 474e4954     LDER....CREATING
  410af4:	54444620 4c4f4620 0d524544 0000000a      FDT FOLDER.....
  410b04:	454d4f53 48544f20 44205245 43455249     SOME OTHER DIREC
  410b14:	59524f54 52524520 2520524f 0a0d2058     TORY ERROR %X ..
  410b24:	00000000 4f4d5f46 20544e55 444f4f47     ....F_MOUNT GOOD
  410b34:	54444620 00000a0d 504f5f46 46204e45      FDT....F_OPEN F
  410b44:	204c4941 20736572 0a0d6425 00000000     AIL res %d......
  410b54:	41455243 20444554 20565343 454c4946     CREATED CSV FILE
  410b64:	53455220 6425203d 00000a0d 0a0d7325      RES= %d....%s..
  410b74:	00000000 48435241 20455649 4d4f5246     ....ARCHIVE FROM
  410b84:	5825203a 00000a0d 0000002e 614d0a0d     : %X..........Ma
  410b94:	42206e69 636e6172 47202e68 2e444f4f     in Branch. GOOD.
  410ba4:	4c494620 4c432045 4445534f 000a0d2e      FILE CLOSED....

00410bb4 <picHeader_2655>:
  410bb4:	e4364d42 00000057 00360000 00280000     BM6.W.....6...(.
  410bc4:	06400000 04b00000 00010000 00000018     ..@.............
  410bd4:	e4000000 00000057 00000000 00000000     ....W...........
	...
  410bec:	00007825 25642520 000a0d64 49474542     %x.. %d%d...BEGI
  410bfc:	5453204e 2045524f 47414d49 000a0d45     N STORE IMAGE...
  410c0c:	4e554f46 44462044 4d495f54 4f462047     FOUND FDT_IMG FO
  410c1c:	5245444c 00000a0d 41455243 474e4954     LDER....CREATING
  410c2c:	54444620 474d495f 4c4f4620 0d524544      FDT_IMG FOLDER.
  410c3c:	0000000a 504f5f46 46204e45 204c4941     ....F_OPEN FAIL 
  410c4c:	20534552 0a0d6425 00000000 41455243     RES %d......CREA
  410c5c:	20444554 20434950 454c4946 0d732520     TED PIC FILE %s.
  410c6c:	0000000a 52430a0d 45544145 49502044     ......CREATED PI
  410c7c:	49462043 202e454c 454c4946 4f4c4320     C FILE. FILE CLO
  410c8c:	2e444553 00000a0d 454b4154 414d4920     SED.....TAKE IMA
  410c9c:	202e4547 666e6f43 6f536769 65637275     GE. ConfigSource
  410cac:	6425203a 6d49202e 53656761 3a657a69     : %d. ImageSize:
  410cbc:	20642520 00000a0d 4b4c434d 414b4f20      %d ....MCLK OKA
  410ccc:	000a0d59 204d4143 54494e49 414b4f20     Y...CAM INIT OKA
  410cdc:	000a0d59 204d4143 45534552 4b4f2054     Y...CAM RESET OK
  410cec:	0a0d5941 00000000 204d4143 464e4f43     AY......CAM CONF
  410cfc:	46204749 204d4f52 44524148 444f4320     IG FROM HARD COD
  410d0c:	45442045 4c554146 0a0d2e54 00000000     E DEFAULT.......
  410d1c:	204d4143 464e4f43 46204749 204d4f52     CAM CONFIG FROM 
  410d2c:	54534f48 0d435020 0000000a 204d4143     HOST PC.....CAM 
  410d3c:	464e4f43 4f204749 0d59414b 0000000a     CONFIG OKAY.....
  410d4c:	20495349 4f4c4c41 45544143 4d4f4320     ISI ALLOCATE COM
  410d5c:	54454c50 000a0d45 20495349 42414e45     PLETE...ISI ENAB
  410d6c:	0d44454c 0000000a 20495349 54494e49     LED.....ISI INIT
  410d7c:	4e4f4420 0d412045 0000000a 20495349      DONE A.....ISI 
  410d8c:	54504143 20455255 454e4f44 6143202e     CAPTURE DONE. Ca
  410d9c:	65744970 3d207372 20642520 00002020     pIters = %d   ..
  410dac:	204d4143 0d46464f 0000000a 4f525245     CAM OFF.....ERRO
  410dbc:	6c462052 20687361 206d6770 0a756c25     R Flash pgm %lu.
  410dcc:	0000000d                                ....

00410dd0 <_global_impure_ptr>:
  410dd0:	20400188 33323130 37363534 42413938     ..@ 0123456789AB
  410de0:	46454443 00000000 33323130 37363534     CDEF....01234567
  410df0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  410e00:	0000296c                                l)..

00410e04 <blanks.7217>:
  410e04:	20202020 20202020 20202020 20202020                     

00410e14 <zeroes.7218>:
  410e14:	30303030 30303030 30303030 30303030     0000000000000000
  410e24:	00000043 49534f50 00000058              C...POSIX...

00410e30 <_ctype_>:
  410e30:	20202000 20202020 28282020 20282828     .         ((((( 
  410e40:	20202020 20202020 20202020 20202020                     
  410e50:	10108820 10101010 10101010 10101010      ...............
  410e60:	04040410 04040404 10040404 10101010     ................
  410e70:	41411010 41414141 01010101 01010101     ..AAAAAA........
  410e80:	01010101 01010101 01010101 10101010     ................
  410e90:	42421010 42424242 02020202 02020202     ..BBBBBB........
  410ea0:	02020202 02020202 02020202 10101010     ................
  410eb0:	00000020 00000000 00000000 00000000      ...............
	...

00410f34 <_init>:
  410f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  410f36:	bf00      	nop
  410f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
  410f3a:	bc08      	pop	{r3}
  410f3c:	469e      	mov	lr, r3
  410f3e:	4770      	bx	lr

00410f40 <__init_array_start>:
  410f40:	0040e04d 	.word	0x0040e04d

00410f44 <__frame_dummy_init_array_entry>:
  410f44:	0040018d                                ..@.

00410f48 <_fini>:
  410f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  410f4a:	bf00      	nop
  410f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  410f4e:	bc08      	pop	{r3}
  410f50:	469e      	mov	lr, r3
  410f52:	4770      	bx	lr

00410f54 <__fini_array_start>:
  410f54:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20400000:	b430      	push	{r4, r5}
20400002:	b082      	sub	sp, #8
20400004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20400006:	b35b      	cbz	r3, 20400060 <efc_perform_read_sequence+0x60>
20400008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2040000a:	6803      	ldr	r3, [r0, #0]
2040000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20400010:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20400012:	b2c9      	uxtb	r1, r1
20400014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20400018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2040001a:	6883      	ldr	r3, [r0, #8]
2040001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2040001e:	9b01      	ldr	r3, [sp, #4]
20400020:	f013 0f01 	tst.w	r3, #1
20400024:	d1f9      	bne.n	2040001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20400026:	b14d      	cbz	r5, 2040003c <efc_perform_read_sequence+0x3c>
20400028:	4621      	mov	r1, r4
2040002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2040002e:	4c0d      	ldr	r4, [pc, #52]	; (20400064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20400030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20400034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20400038:	4299      	cmp	r1, r3
2040003a:	d1f9      	bne.n	20400030 <efc_perform_read_sequence+0x30>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2040003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2040003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20400042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20400044:	6883      	ldr	r3, [r0, #8]
20400046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20400048:	9b01      	ldr	r3, [sp, #4]
2040004a:	f013 0f01 	tst.w	r3, #1
2040004e:	d0f9      	beq.n	20400044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20400050:	6803      	ldr	r3, [r0, #0]
20400052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20400056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20400058:	2000      	movs	r0, #0
}
2040005a:	b002      	add	sp, #8
2040005c:	bc30      	pop	{r4, r5}
2040005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20400060:	2002      	movs	r0, #2
20400062:	e7fa      	b.n	2040005a <efc_perform_read_sequence+0x5a>
20400064:	003ffffc 	.word	0x003ffffc

20400068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20400068:	6001      	str	r1, [r0, #0]
2040006a:	4770      	bx	lr

2040006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2040006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2040006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20400070:	6883      	ldr	r3, [r0, #8]
20400072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20400074:	9b01      	ldr	r3, [sp, #4]
20400076:	f013 0f01 	tst.w	r3, #1
2040007a:	d0f9      	beq.n	20400070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2040007c:	9b01      	ldr	r3, [sp, #4]
}
2040007e:	4802      	ldr	r0, [pc, #8]	; (20400088 <efc_perform_fcr+0x1c>)
20400080:	4018      	ands	r0, r3
20400082:	b002      	add	sp, #8
20400084:	4770      	bx	lr
20400086:	bf00      	nop
20400088:	000f000e 	.word	0x000f000e

2040008c <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
2040008c:	f3bf 8f5f 	dmb	sy
20400090:	3801      	subs	r0, #1
20400092:	d1fb      	bne.n	2040008c <portable_delay_cycles>
20400094:	4770      	bx	lr
	...

20400098 <udi_api_vendor>:
20400098:	29c1 0040 29e9 0040 2a05 0040 29b5 0040     .)@..)@..*@..)@.
204000a8:	0000 0000                                   ....

204000ac <udc_config>:
204000ac:	0108 2040 00b8 2040 0000 0000               ..@ ..@ ....

204000b8 <udc_config_lsfs>:
204000b8:	00c0 2040 011c 2040                         ..@ ..@ 

204000c0 <udc_desc_fs>:
204000c0:	0209 0045 0101 c000 0932 0004 0000 ffff     ..E.....2.......
204000d0:	00ff 0409 0100 ff06 ffff 0700 8105 4003     ...............@
204000e0:	0100 0507 0302 0040 0701 8305 4002 0000     ......@......@..
204000f0:	0507 0204 0040 0700 8505 0001 0101 0507     ....@...........
20400100:	0106 0100 0001 0000                         ........

20400108 <udc_device_desc>:
20400108:	0112 0200 0000 4000 03eb 2423 0100 0201     .......@..#$....
20400118:	0100 0000                                   ....

2040011c <udi_apis>:
2040011c:	0098 2040                                   ..@ 

20400120 <udc_string_desc>:
20400120:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20400150 <udc_string_desc_languageid>:
20400150:	0304 0409                                   ....

20400154 <udc_string_manufacturer_name>:
20400154:	6946 6c65 2064 6144 6174 5420 6365 6e68     Field Data Techn
20400164:	6c6f 676f 6569 0073                         ologies.

2040016c <udc_string_product_name>:
2040016c:	4446 2054 6544 6976 6563 0100                    FDT Device.

20400177 <g_interrupt_enabled>:
20400177:	0001                                             .

20400178 <SystemCoreClock>:
20400178:	0900 003d                                   ..=.

2040017c <picBuff>:
2040017c:	0000 7000                                   ...p

20400180 <picBuff_2>:
20400180:	9800 703a                                   ..:p

20400184 <_impure_ptr>:
20400184:	0188 2040                                   ..@ 

20400188 <impure_data>:
20400188:	0000 0000 0474 2040 04dc 2040 0544 2040     ....t.@ ..@ D.@ 
	...
20400230:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400240:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204005b0 <__atexit_recursive_mutex>:
204005b0:	11fc 2040                                   ..@ 

204005b4 <__global_locale>:
204005b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400614:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400634:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400654:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400674:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400694:	f7e1 0040 f045 0040 0000 0000 0e30 0041     ..@.E.@.....0.A.
204006a4:	0b8c 0041 0b24 0041 0b24 0041 0b24 0041     ..A.$.A.$.A.$.A.
204006b4:	0b24 0041 0b24 0041 0b24 0041 0b24 0041     $.A.$.A.$.A.$.A.
204006c4:	0b24 0041 0b24 0041 ffff ffff ffff ffff     $.A.$.A.........
204006d4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204006fc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20400720 <__malloc_av_>:
	...
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 
204009c8:	09c0 2040 09c0 2040 09c8 2040 09c8 2040     ..@ ..@ ..@ ..@ 
204009d8:	09d0 2040 09d0 2040 09d8 2040 09d8 2040     ..@ ..@ ..@ ..@ 
204009e8:	09e0 2040 09e0 2040 09e8 2040 09e8 2040     ..@ ..@ ..@ ..@ 
204009f8:	09f0 2040 09f0 2040 09f8 2040 09f8 2040     ..@ ..@ ..@ ..@ 
20400a08:	0a00 2040 0a00 2040 0a08 2040 0a08 2040     ..@ ..@ ..@ ..@ 
20400a18:	0a10 2040 0a10 2040 0a18 2040 0a18 2040     ..@ ..@ ..@ ..@ 
20400a28:	0a20 2040 0a20 2040 0a28 2040 0a28 2040      .@  .@ (.@ (.@ 
20400a38:	0a30 2040 0a30 2040 0a38 2040 0a38 2040     0.@ 0.@ 8.@ 8.@ 
20400a48:	0a40 2040 0a40 2040 0a48 2040 0a48 2040     @.@ @.@ H.@ H.@ 
20400a58:	0a50 2040 0a50 2040 0a58 2040 0a58 2040     P.@ P.@ X.@ X.@ 
20400a68:	0a60 2040 0a60 2040 0a68 2040 0a68 2040     `.@ `.@ h.@ h.@ 
20400a78:	0a70 2040 0a70 2040 0a78 2040 0a78 2040     p.@ p.@ x.@ x.@ 
20400a88:	0a80 2040 0a80 2040 0a88 2040 0a88 2040     ..@ ..@ ..@ ..@ 
20400a98:	0a90 2040 0a90 2040 0a98 2040 0a98 2040     ..@ ..@ ..@ ..@ 
20400aa8:	0aa0 2040 0aa0 2040 0aa8 2040 0aa8 2040     ..@ ..@ ..@ ..@ 
20400ab8:	0ab0 2040 0ab0 2040 0ab8 2040 0ab8 2040     ..@ ..@ ..@ ..@ 
20400ac8:	0ac0 2040 0ac0 2040 0ac8 2040 0ac8 2040     ..@ ..@ ..@ ..@ 
20400ad8:	0ad0 2040 0ad0 2040 0ad8 2040 0ad8 2040     ..@ ..@ ..@ ..@ 
20400ae8:	0ae0 2040 0ae0 2040 0ae8 2040 0ae8 2040     ..@ ..@ ..@ ..@ 
20400af8:	0af0 2040 0af0 2040 0af8 2040 0af8 2040     ..@ ..@ ..@ ..@ 
20400b08:	0b00 2040 0b00 2040 0b08 2040 0b08 2040     ..@ ..@ ..@ ..@ 
20400b18:	0b10 2040 0b10 2040 0b18 2040 0b18 2040     ..@ ..@ ..@ ..@ 

20400b28 <__malloc_sbrk_base>:
20400b28:	ffff ffff                                   ....

20400b2c <__malloc_trim_threshold>:
20400b2c:	0000 0002                                   ....
