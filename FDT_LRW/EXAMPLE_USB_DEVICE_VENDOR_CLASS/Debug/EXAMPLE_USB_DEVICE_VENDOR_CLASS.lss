
EXAMPLE_USB_DEVICE_VENDOR_CLASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006fc8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406fc8  00406fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000aa0  20400000  00406fd0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000005f0  20400aa0  00407a70  00020aa0  2**2
                  ALLOC
  4 .stack        00002000  20401090  00408060  00020aa0  2**0
                  ALLOC
  5 .heap         00000200  20403090  0040a060  00020aa0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020aa0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020ace  2**0
                  CONTENTS, READONLY
  8 .debug_info   00021f5d  00000000  00000000  00020b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000043df  00000000  00000000  00042a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000072c5  00000000  00000000  00046e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ce8  00000000  00000000  0004e128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e00  00000000  00000000  0004ee10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002385d  00000000  00000000  0004fc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012364  00000000  00000000  0007346d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009c4e5  00000000  00000000  000857d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000029c4  00000000  00000000  00121cb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	90 30 40 20 b1 29 40 00 ad 29 40 00 ad 29 40 00     .0@ .)@..)@..)@.
  400010:	ad 29 40 00 ad 29 40 00 ad 29 40 00 00 00 00 00     .)@..)@..)@.....
	...
  40002c:	ad 29 40 00 ad 29 40 00 00 00 00 00 ad 29 40 00     .)@..)@......)@.
  40003c:	ad 29 40 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .)@..)@..)@..)@.
  40004c:	ad 29 40 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .)@..)@..)@..)@.
  40005c:	ad 29 40 00 ad 29 40 00 00 00 00 00 0d 12 40 00     .)@..)@.......@.
  40006c:	21 12 40 00 35 12 40 00 ad 29 40 00 ad 29 40 00     !.@.5.@..)@..)@.
  40007c:	ad 29 40 00 49 12 40 00 5d 12 40 00 ad 29 40 00     .)@.I.@.].@..)@.
  40008c:	ad 29 40 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .)@..)@..)@..)@.
  40009c:	ad 29 40 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .)@..)@..)@..)@.
  4000ac:	ad 29 40 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .)@..)@..)@..)@.
  4000bc:	ad 29 40 00 ad 29 40 00 ad 29 40 00 b5 1b 40 00     .)@..)@..)@...@.
  4000cc:	ad 29 40 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .)@..)@..)@..)@.
  4000dc:	ad 29 40 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .)@..)@..)@..)@.
  4000ec:	ad 29 40 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .)@..)@..)@..)@.
  4000fc:	ad 29 40 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .)@..)@..)@..)@.
  40010c:	ad 29 40 00 ad 29 40 00 ad 29 40 00 00 00 00 00     .)@..)@..)@.....
  40011c:	00 00 00 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .....)@..)@..)@.
  40012c:	ad 29 40 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .)@..)@..)@..)@.
  40013c:	ad 29 40 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .)@..)@..)@..)@.
  40014c:	ad 29 40 00 ad 29 40 00 ad 29 40 00 ad 29 40 00     .)@..)@..)@..)@.
  40015c:	ad 29 40 00 ad 29 40 00 ad 29 40 00                 .)@..)@..)@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400aa0 	.word	0x20400aa0
  400184:	00000000 	.word	0x00000000
  400188:	00406fd0 	.word	0x00406fd0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406fd0 	.word	0x00406fd0
  4001c8:	20400aa4 	.word	0x20400aa4
  4001cc:	00406fd0 	.word	0x00406fd0
  4001d0:	00000000 	.word	0x00000000

004001d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001d8:	b980      	cbnz	r0, 4001fc <_read+0x28>
  4001da:	460c      	mov	r4, r1
  4001dc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001de:	2a00      	cmp	r2, #0
  4001e0:	dd0f      	ble.n	400202 <_read+0x2e>
  4001e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001e4:	4e08      	ldr	r6, [pc, #32]	; (400208 <_read+0x34>)
  4001e6:	4d09      	ldr	r5, [pc, #36]	; (40020c <_read+0x38>)
  4001e8:	6830      	ldr	r0, [r6, #0]
  4001ea:	4621      	mov	r1, r4
  4001ec:	682b      	ldr	r3, [r5, #0]
  4001ee:	4798      	blx	r3
		ptr++;
  4001f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001f2:	42bc      	cmp	r4, r7
  4001f4:	d1f8      	bne.n	4001e8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001f6:	4640      	mov	r0, r8
  4001f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001fc:	f04f 38ff 	mov.w	r8, #4294967295
  400200:	e7f9      	b.n	4001f6 <_read+0x22>
	for (; len > 0; --len) {
  400202:	4680      	mov	r8, r0
  400204:	e7f7      	b.n	4001f6 <_read+0x22>
  400206:	bf00      	nop
  400208:	20401030 	.word	0x20401030
  40020c:	20401028 	.word	0x20401028

00400210 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400210:	3801      	subs	r0, #1
  400212:	2802      	cmp	r0, #2
  400214:	d815      	bhi.n	400242 <_write+0x32>
{
  400216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40021a:	460e      	mov	r6, r1
  40021c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40021e:	b19a      	cbz	r2, 400248 <_write+0x38>
  400220:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400222:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40025c <_write+0x4c>
  400226:	4f0c      	ldr	r7, [pc, #48]	; (400258 <_write+0x48>)
  400228:	f8d8 0000 	ldr.w	r0, [r8]
  40022c:	f815 1b01 	ldrb.w	r1, [r5], #1
  400230:	683b      	ldr	r3, [r7, #0]
  400232:	4798      	blx	r3
  400234:	2800      	cmp	r0, #0
  400236:	db0a      	blt.n	40024e <_write+0x3e>
  400238:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40023a:	3c01      	subs	r4, #1
  40023c:	d1f4      	bne.n	400228 <_write+0x18>
  40023e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400242:	f04f 30ff 	mov.w	r0, #4294967295
  400246:	4770      	bx	lr
	for (; len != 0; --len) {
  400248:	4610      	mov	r0, r2
  40024a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40024e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400256:	bf00      	nop
  400258:	2040102c 	.word	0x2040102c
  40025c:	20401030 	.word	0x20401030

00400260 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400260:	6943      	ldr	r3, [r0, #20]
  400262:	f013 0f02 	tst.w	r3, #2
  400266:	d004      	beq.n	400272 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400268:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40026c:	61c1      	str	r1, [r0, #28]
	return 0;
  40026e:	2000      	movs	r0, #0
  400270:	4770      	bx	lr
		return 1;
  400272:	2001      	movs	r0, #1
}
  400274:	4770      	bx	lr

00400276 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400276:	6943      	ldr	r3, [r0, #20]
  400278:	f013 0f01 	tst.w	r3, #1
  40027c:	d005      	beq.n	40028a <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40027e:	6983      	ldr	r3, [r0, #24]
  400280:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400284:	600b      	str	r3, [r1, #0]

	return 0;
  400286:	2000      	movs	r0, #0
  400288:	4770      	bx	lr
		return 1;
  40028a:	2001      	movs	r0, #1
}
  40028c:	4770      	bx	lr
	...

00400290 <sdramc_init>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400290:	4b51      	ldr	r3, [pc, #324]	; (4003d8 <sdramc_init+0x148>)
  400292:	781b      	ldrb	r3, [r3, #0]
  400294:	2bff      	cmp	r3, #255	; 0xff
  400296:	f000 809d 	beq.w	4003d4 <sdramc_init+0x144>
 *
 * \param p_sdram  Pointer to the sdram memory structure.
 * \param ul_clk  SDRAM clock frequency.
 */
void sdramc_init(sdramc_memory_dev_t *p_sdram, uint32_t ul_clk)
{
  40029a:	b4f0      	push	{r4, r5, r6, r7}
  40029c:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40029e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4002a2:	fab3 f383 	clz	r3, r3
  4002a6:	095b      	lsrs	r3, r3, #5
  4002a8:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4002aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4002ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4002b0:	2200      	movs	r2, #0
  4002b2:	4b4a      	ldr	r3, [pc, #296]	; (4003dc <sdramc_init+0x14c>)
  4002b4:	701a      	strb	r2, [r3, #0]
	return flags;
  4002b6:	9c00      	ldr	r4, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4002b8:	4a47      	ldr	r2, [pc, #284]	; (4003d8 <sdramc_init+0x148>)
  4002ba:	7813      	ldrb	r3, [r2, #0]
  4002bc:	3301      	adds	r3, #1
  4002be:	7013      	strb	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4002c0:	b12c      	cbz	r4, 4002ce <sdramc_init+0x3e>
		cpu_irq_enable();
  4002c2:	2201      	movs	r2, #1
  4002c4:	4b45      	ldr	r3, [pc, #276]	; (4003dc <sdramc_init+0x14c>)
  4002c6:	701a      	strb	r2, [r3, #0]
  4002c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4002cc:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);

	/* SDRAM device configuration */
	/* Step 1. */
	/* Set the features of SDRAM device into the Configuration Register */
	SDRAMC->SDRAMC_CR = p_sdram->cr.ul_cfg;
  4002ce:	6883      	ldr	r3, [r0, #8]
  4002d0:	4a43      	ldr	r2, [pc, #268]	; (4003e0 <sdramc_init+0x150>)
  4002d2:	6093      	str	r3, [r2, #8]
	/* Step 2. */

	/* For low-power SDRAM, Temperature-Compensated Self Refresh (TCSR),
	   Drive Strength (DS) and Partial Array Self Refresh (PASR) must be set
	   in the Low-power Register. */
	SDRAMC->SDRAMC_LPR = 0;
  4002d4:	2300      	movs	r3, #0
  4002d6:	6113      	str	r3, [r2, #16]

	/* Step 3. */
	/* Program the memory device type into the Memory Device Register */
	SDRAMC->SDRAMC_MDR = SDRAMC_MDR_MD_SDRAM;
  4002d8:	6253      	str	r3, [r2, #36]	; 0x24

	/* Step 4. */

	/* A minimum pause of 200 µs is provided to precede any signal toggle.
	   (6 core cycles per iteration) */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  4002da:	9301      	str	r3, [sp, #4]
  4002dc:	4b41      	ldr	r3, [pc, #260]	; (4003e4 <sdramc_init+0x154>)
  4002de:	fba3 2301 	umull	r2, r3, r3, r1
  4002e2:	0c9a      	lsrs	r2, r3, #18
  4002e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4002e8:	fb03 f302 	mul.w	r3, r3, r2
  4002ec:	4a3e      	ldr	r2, [pc, #248]	; (4003e8 <sdramc_init+0x158>)
  4002ee:	fba2 2303 	umull	r2, r3, r2, r3
  4002f2:	089b      	lsrs	r3, r3, #2
  4002f4:	9a01      	ldr	r2, [sp, #4]
  4002f6:	4293      	cmp	r3, r2
  4002f8:	d905      	bls.n	400306 <sdramc_init+0x76>
  4002fa:	9a01      	ldr	r2, [sp, #4]
  4002fc:	3201      	adds	r2, #1
  4002fe:	9201      	str	r2, [sp, #4]
  400300:	9a01      	ldr	r2, [sp, #4]
  400302:	429a      	cmp	r2, r3
  400304:	d3f9      	bcc.n	4002fa <sdramc_init+0x6a>
	/* A NOP command is issued to the SDR-SDRAM. Program NOP command into
	   Mode Register, and the application must set Mode to 1 in the Mode
	   Register. Perform a write access to any SDR-SDRAM address to
	   acknowledge this command. Now the clock which drives SDR-SDRAM
	   device is enabled. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NOP;
  400306:	4d36      	ldr	r5, [pc, #216]	; (4003e0 <sdramc_init+0x150>)
  400308:	2201      	movs	r2, #1
  40030a:	602a      	str	r2, [r5, #0]
	*pSdram = 0x0;
  40030c:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  400310:	2200      	movs	r2, #0
  400312:	8022      	strh	r2, [r4, #0]

	/* An all banks precharge command is issued to the SDR-SDRAM. Program
	   all banks precharge command into Mode Register, and the application
	   must set Mode to 2 in the Mode Register. Perform a write access to
	   any SDRSDRAM address to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_ALLBANKS_PRECHARGE;
  400314:	2602      	movs	r6, #2
  400316:	602e      	str	r6, [r5, #0]
	*pSdram = 0x0;
  400318:	8022      	strh	r2, [r4, #0]

	/* Add some delays after precharge */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  40031a:	9201      	str	r2, [sp, #4]
  40031c:	9a01      	ldr	r2, [sp, #4]
  40031e:	429a      	cmp	r2, r3
  400320:	d205      	bcs.n	40032e <sdramc_init+0x9e>
  400322:	9a01      	ldr	r2, [sp, #4]
  400324:	3201      	adds	r2, #1
  400326:	9201      	str	r2, [sp, #4]
  400328:	9a01      	ldr	r2, [sp, #4]
  40032a:	429a      	cmp	r2, r3
  40032c:	d3f9      	bcc.n	400322 <sdramc_init+0x92>
	/* Step 7. */
	/* Eight auto-refresh (CBR) cycles are provided. Program the auto
	   refresh command (CBR) into Mode Register, and the application
	   must set Mode to 4 in the Mode Register. Once in the idle state,
	   eight AUTO REFRESH cycles must be performed. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40032e:	4a2c      	ldr	r2, [pc, #176]	; (4003e0 <sdramc_init+0x150>)
  400330:	2404      	movs	r4, #4
  400332:	6014      	str	r4, [r2, #0]
	*pSdram = 0x1;
  400334:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
  400338:	2601      	movs	r6, #1
  40033a:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40033c:	6014      	str	r4, [r2, #0]
	*pSdram = 0x2;
  40033e:	2602      	movs	r6, #2
  400340:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400342:	6014      	str	r4, [r2, #0]
	*pSdram = 0x3;
  400344:	2603      	movs	r6, #3
  400346:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400348:	6014      	str	r4, [r2, #0]
	*pSdram = 0x4;
  40034a:	802c      	strh	r4, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40034c:	6014      	str	r4, [r2, #0]
	*pSdram = 0x5;
  40034e:	2705      	movs	r7, #5
  400350:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400352:	6014      	str	r4, [r2, #0]
	*pSdram = 0x6;
  400354:	2706      	movs	r7, #6
  400356:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400358:	6014      	str	r4, [r2, #0]
	*pSdram = 0x7;
  40035a:	2707      	movs	r7, #7
  40035c:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40035e:	6014      	str	r4, [r2, #0]
	*pSdram = 0x8;
  400360:	2408      	movs	r4, #8
  400362:	802c      	strh	r4, [r5, #0]

	/* Step 8. */
	/* A Mode Register Set (MRS) cycle is issued to program the parameters
	   of the SDRAM devices, in particular CAS latency and burst length. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_LOAD_MODEREG;
  400364:	6016      	str	r6, [r2, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  400366:	6842      	ldr	r2, [r0, #4]
  400368:	0052      	lsls	r2, r2, #1
  40036a:	442a      	add	r2, r5
  40036c:	f64c 24fe 	movw	r4, #51966	; 0xcafe
  400370:	8014      	strh	r4, [r2, #0]
    
	/* Add some delays */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  400372:	2200      	movs	r2, #0
  400374:	9201      	str	r2, [sp, #4]
  400376:	9a01      	ldr	r2, [sp, #4]
  400378:	429a      	cmp	r2, r3
  40037a:	d205      	bcs.n	400388 <sdramc_init+0xf8>
  40037c:	9a01      	ldr	r2, [sp, #4]
  40037e:	3201      	adds	r2, #1
  400380:	9201      	str	r2, [sp, #4]
  400382:	9a01      	ldr	r2, [sp, #4]
  400384:	429a      	cmp	r2, r3
  400386:	d3f9      	bcc.n	40037c <sdramc_init+0xec>

	/* For low-power SDR-SDRAM initialization, an Extended Mode Register Set
	   (EMRS) cycle is issued to program the SDR-SDRAM parameters (TCSR,
	   PASR, DS). The write address must be chosen so that BA[1] is set to
	   1 and BA[0] is set to 0. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_EXT_LOAD_MODEREG;
  400388:	4a15      	ldr	r2, [pc, #84]	; (4003e0 <sdramc_init+0x150>)
  40038a:	2305      	movs	r3, #5
  40038c:	6013      	str	r3, [r2, #0]
	*((uint16_t *)(pSdram + (1 << p_sdram->ul_bk1))) = 0x0;
  40038e:	6800      	ldr	r0, [r0, #0]
  400390:	2302      	movs	r3, #2
  400392:	4083      	lsls	r3, r0
  400394:	f103 43e0 	add.w	r3, r3, #1879048192	; 0x70000000
  400398:	2000      	movs	r0, #0
  40039a:	8018      	strh	r0, [r3, #0]

	/* Step 10. */
	/* The application must go into Normal Mode, setting Mode to 0 in the
	   Mode Register and perform a write access at any location in the\
	   SDRAM to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NORMAL;
  40039c:	6010      	str	r0, [r2, #0]
	*pSdram = 0x0;
  40039e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  4003a2:	8018      	strh	r0, [r3, #0]

	/* Step 11. */

	/* Write the refresh rate into the count field in the SDRAMC Refresh
	   Timer register. Set Refresh timer to 15.625 us. */
	i = ul_clk / 1000u;
  4003a4:	4b11      	ldr	r3, [pc, #68]	; (4003ec <sdramc_init+0x15c>)
  4003a6:	fba3 1301 	umull	r1, r3, r3, r1
  4003aa:	099b      	lsrs	r3, r3, #6
  4003ac:	9301      	str	r3, [sp, #4]
	i *= 15625u;
  4003ae:	9901      	ldr	r1, [sp, #4]
  4003b0:	f643 5309 	movw	r3, #15625	; 0x3d09
  4003b4:	fb03 f301 	mul.w	r3, r3, r1
  4003b8:	9301      	str	r3, [sp, #4]
	i /= 1000000u;
  4003ba:	9b01      	ldr	r3, [sp, #4]
  4003bc:	4909      	ldr	r1, [pc, #36]	; (4003e4 <sdramc_init+0x154>)
  4003be:	fba1 1303 	umull	r1, r3, r1, r3
  4003c2:	0c9b      	lsrs	r3, r3, #18
  4003c4:	9301      	str	r3, [sp, #4]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  4003c6:	9b01      	ldr	r3, [sp, #4]
  4003c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4003cc:	6053      	str	r3, [r2, #4]
}
  4003ce:	b002      	add	sp, #8
  4003d0:	bcf0      	pop	{r4, r5, r6, r7}
  4003d2:	4770      	bx	lr
  4003d4:	e7fe      	b.n	4003d4 <sdramc_init+0x144>
  4003d6:	bf00      	nop
  4003d8:	20401034 	.word	0x20401034
  4003dc:	204000e7 	.word	0x204000e7
  4003e0:	40084000 	.word	0x40084000
  4003e4:	431bde83 	.word	0x431bde83
  4003e8:	aaaaaaab 	.word	0xaaaaaaab
  4003ec:	10624dd3 	.word	0x10624dd3

004003f0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4003f0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4003f2:	23ac      	movs	r3, #172	; 0xac
  4003f4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4003f6:	680b      	ldr	r3, [r1, #0]
  4003f8:	684a      	ldr	r2, [r1, #4]
  4003fa:	fbb3 f3f2 	udiv	r3, r3, r2
  4003fe:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400400:	1e5c      	subs	r4, r3, #1
  400402:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400406:	4294      	cmp	r4, r2
  400408:	d808      	bhi.n	40041c <uart_init+0x2c>
		return 1;

	p_uart->UART_BRGR = cd;
  40040a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40040c:	688b      	ldr	r3, [r1, #8]
  40040e:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400410:	2350      	movs	r3, #80	; 0x50
  400412:	6003      	str	r3, [r0, #0]

	return 0;
  400414:	2000      	movs	r0, #0
}
  400416:	f85d 4b04 	ldr.w	r4, [sp], #4
  40041a:	4770      	bx	lr
		return 1;
  40041c:	2001      	movs	r0, #1
  40041e:	e7fa      	b.n	400416 <uart_init+0x26>

00400420 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  400420:	2340      	movs	r3, #64	; 0x40
  400422:	6003      	str	r3, [r0, #0]
  400424:	4770      	bx	lr

00400426 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400426:	6943      	ldr	r3, [r0, #20]
  400428:	f013 0f02 	tst.w	r3, #2
  40042c:	d002      	beq.n	400434 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40042e:	61c1      	str	r1, [r0, #28]
	return 0;
  400430:	2000      	movs	r0, #0
  400432:	4770      	bx	lr
		return 1;
  400434:	2001      	movs	r0, #1
}
  400436:	4770      	bx	lr

00400438 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400438:	6943      	ldr	r3, [r0, #20]
  40043a:	f013 0f01 	tst.w	r3, #1
  40043e:	d003      	beq.n	400448 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400440:	6983      	ldr	r3, [r0, #24]
  400442:	700b      	strb	r3, [r1, #0]
	return 0;
  400444:	2000      	movs	r0, #0
  400446:	4770      	bx	lr
		return 1;
  400448:	2001      	movs	r0, #1
}
  40044a:	4770      	bx	lr

0040044c <ui_powerdown>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40044c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400450:	4b03      	ldr	r3, [pc, #12]	; (400460 <ui_powerdown+0x14>)
  400452:	631a      	str	r2, [r3, #48]	; 0x30
  400454:	f44f 7200 	mov.w	r2, #512	; 0x200
  400458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40045c:	631a      	str	r2, [r3, #48]	; 0x30
  40045e:	4770      	bx	lr
  400460:	400e0e00 	.word	0x400e0e00

00400464 <ui_wakeup>:
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400464:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400468:	4b01      	ldr	r3, [pc, #4]	; (400470 <ui_wakeup+0xc>)
  40046a:	635a      	str	r2, [r3, #52]	; 0x34
  40046c:	4770      	bx	lr
  40046e:	bf00      	nop
  400470:	400e0e00 	.word	0x400e0e00

00400474 <ui_loop_back_state>:
	LED_On(LED0);
}

void ui_loop_back_state(bool b_started)
{
	if (b_started) {
  400474:	b920      	cbnz	r0, 400480 <ui_loop_back_state+0xc>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400476:	f44f 7200 	mov.w	r2, #512	; 0x200
  40047a:	4b04      	ldr	r3, [pc, #16]	; (40048c <ui_loop_back_state+0x18>)
  40047c:	631a      	str	r2, [r3, #48]	; 0x30
  40047e:	4770      	bx	lr
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400480:	f44f 7200 	mov.w	r2, #512	; 0x200
  400484:	4b01      	ldr	r3, [pc, #4]	; (40048c <ui_loop_back_state+0x18>)
  400486:	635a      	str	r2, [r3, #52]	; 0x34
  400488:	4770      	bx	lr
  40048a:	bf00      	nop
  40048c:	400e1200 	.word	0x400e1200

00400490 <ui_process>:
	}
}

void ui_process(uint16_t framenumber)
{
	if ((framenumber % 1000) == 0) {
  400490:	4b0b      	ldr	r3, [pc, #44]	; (4004c0 <ui_process+0x30>)
  400492:	fba3 2300 	umull	r2, r3, r3, r0
  400496:	099b      	lsrs	r3, r3, #6
  400498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40049c:	fb02 0013 	mls	r0, r2, r3, r0
  4004a0:	b280      	uxth	r0, r0
  4004a2:	b920      	cbnz	r0, 4004ae <ui_process+0x1e>
  4004a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4004a8:	4b06      	ldr	r3, [pc, #24]	; (4004c4 <ui_process+0x34>)
  4004aa:	635a      	str	r2, [r3, #52]	; 0x34
  4004ac:	4770      	bx	lr
		LED_On(LED0);
	}
	if ((framenumber % 1000) == 500) {
  4004ae:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  4004b2:	d103      	bne.n	4004bc <ui_process+0x2c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4004b8:	4b02      	ldr	r3, [pc, #8]	; (4004c4 <ui_process+0x34>)
  4004ba:	631a      	str	r2, [r3, #48]	; 0x30
  4004bc:	4770      	bx	lr
  4004be:	bf00      	nop
  4004c0:	10624dd3 	.word	0x10624dd3
  4004c4:	400e0e00 	.word	0x400e0e00

004004c8 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  4004c8:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
  4004ca:	4b04      	ldr	r3, [pc, #16]	; (4004dc <sysclk_enable_usb+0x14>)
  4004cc:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
  4004ce:	2000      	movs	r0, #0
  4004d0:	4b03      	ldr	r3, [pc, #12]	; (4004e0 <sysclk_enable_usb+0x18>)
  4004d2:	4798      	blx	r3
		pmc_enable_udpck();
  4004d4:	4b03      	ldr	r3, [pc, #12]	; (4004e4 <sysclk_enable_usb+0x1c>)
  4004d6:	4798      	blx	r3
  4004d8:	bd08      	pop	{r3, pc}
  4004da:	bf00      	nop
  4004dc:	00401391 	.word	0x00401391
  4004e0:	004013c9 	.word	0x004013c9
  4004e4:	004013dd 	.word	0x004013dd

004004e8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004e8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4004ea:	4810      	ldr	r0, [pc, #64]	; (40052c <sysclk_init+0x44>)
  4004ec:	4b10      	ldr	r3, [pc, #64]	; (400530 <sysclk_init+0x48>)
  4004ee:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4004f0:	213e      	movs	r1, #62	; 0x3e
  4004f2:	2000      	movs	r0, #0
  4004f4:	4b0f      	ldr	r3, [pc, #60]	; (400534 <sysclk_init+0x4c>)
  4004f6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4004f8:	4c0f      	ldr	r4, [pc, #60]	; (400538 <sysclk_init+0x50>)
  4004fa:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4004fc:	2800      	cmp	r0, #0
  4004fe:	d0fc      	beq.n	4004fa <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400500:	4b0e      	ldr	r3, [pc, #56]	; (40053c <sysclk_init+0x54>)
  400502:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400504:	4a0e      	ldr	r2, [pc, #56]	; (400540 <sysclk_init+0x58>)
  400506:	4b0f      	ldr	r3, [pc, #60]	; (400544 <sysclk_init+0x5c>)
  400508:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40050a:	4c0f      	ldr	r4, [pc, #60]	; (400548 <sysclk_init+0x60>)
  40050c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40050e:	2800      	cmp	r0, #0
  400510:	d0fc      	beq.n	40050c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400512:	2002      	movs	r0, #2
  400514:	4b0d      	ldr	r3, [pc, #52]	; (40054c <sysclk_init+0x64>)
  400516:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400518:	2000      	movs	r0, #0
  40051a:	4b0d      	ldr	r3, [pc, #52]	; (400550 <sysclk_init+0x68>)
  40051c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40051e:	4b0d      	ldr	r3, [pc, #52]	; (400554 <sysclk_init+0x6c>)
  400520:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400522:	4802      	ldr	r0, [pc, #8]	; (40052c <sysclk_init+0x44>)
  400524:	4b02      	ldr	r3, [pc, #8]	; (400530 <sysclk_init+0x48>)
  400526:	4798      	blx	r3
  400528:	bd10      	pop	{r4, pc}
  40052a:	bf00      	nop
  40052c:	08f0d180 	.word	0x08f0d180
  400530:	00402b85 	.word	0x00402b85
  400534:	0040130d 	.word	0x0040130d
  400538:	00401361 	.word	0x00401361
  40053c:	00401371 	.word	0x00401371
  400540:	20183f01 	.word	0x20183f01
  400544:	400e0600 	.word	0x400e0600
  400548:	00401381 	.word	0x00401381
  40054c:	00401271 	.word	0x00401271
  400550:	004012a9 	.word	0x004012a9
  400554:	00402a79 	.word	0x00402a79

00400558 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
  400558:	4b01      	ldr	r3, [pc, #4]	; (400560 <udi_vendor_getsetting+0x8>)
  40055a:	7818      	ldrb	r0, [r3, #0]
  40055c:	4770      	bx	lr
  40055e:	bf00      	nop
  400560:	20400abc 	.word	0x20400abc

00400564 <udi_vendor_enable>:
{
  400564:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
  400566:	4b06      	ldr	r3, [pc, #24]	; (400580 <udi_vendor_enable+0x1c>)
  400568:	4798      	blx	r3
  40056a:	78c3      	ldrb	r3, [r0, #3]
  40056c:	4a05      	ldr	r2, [pc, #20]	; (400584 <udi_vendor_enable+0x20>)
  40056e:	7013      	strb	r3, [r2, #0]
	if (1 == udi_vendor_alternate_setting) {
  400570:	2b01      	cmp	r3, #1
  400572:	d001      	beq.n	400578 <udi_vendor_enable+0x14>
	return true;
  400574:	2001      	movs	r0, #1
}
  400576:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
  400578:	4b03      	ldr	r3, [pc, #12]	; (400588 <udi_vendor_enable+0x24>)
  40057a:	4798      	blx	r3
  40057c:	bd08      	pop	{r3, pc}
  40057e:	bf00      	nop
  400580:	00400849 	.word	0x00400849
  400584:	20400abc 	.word	0x20400abc
  400588:	00403d35 	.word	0x00403d35

0040058c <udi_vendor_disable>:
{
  40058c:	b508      	push	{r3, lr}
	if (1 == udi_vendor_alternate_setting) {
  40058e:	4b04      	ldr	r3, [pc, #16]	; (4005a0 <udi_vendor_disable+0x14>)
  400590:	781b      	ldrb	r3, [r3, #0]
  400592:	2b01      	cmp	r3, #1
  400594:	d000      	beq.n	400598 <udi_vendor_disable+0xc>
  400596:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
  400598:	4b02      	ldr	r3, [pc, #8]	; (4005a4 <udi_vendor_disable+0x18>)
  40059a:	4798      	blx	r3
}
  40059c:	e7fb      	b.n	400596 <udi_vendor_disable+0xa>
  40059e:	bf00      	nop
  4005a0:	20400abc 	.word	0x20400abc
  4005a4:	00403175 	.word	0x00403175

004005a8 <udi_vendor_setup>:
{
  4005a8:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
  4005aa:	4b13      	ldr	r3, [pc, #76]	; (4005f8 <udi_vendor_setup+0x50>)
  4005ac:	781b      	ldrb	r3, [r3, #0]
  4005ae:	f013 0f80 	tst.w	r3, #128	; 0x80
  4005b2:	d105      	bne.n	4005c0 <udi_vendor_setup+0x18>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
  4005b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4005b8:	2b40      	cmp	r3, #64	; 0x40
  4005ba:	d00f      	beq.n	4005dc <udi_vendor_setup+0x34>
	return false; // Not supported request
  4005bc:	2000      	movs	r0, #0
  4005be:	bd08      	pop	{r3, pc}
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
  4005c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4005c4:	2b40      	cmp	r3, #64	; 0x40
  4005c6:	d001      	beq.n	4005cc <udi_vendor_setup+0x24>
	return false; // Not supported request
  4005c8:	2000      	movs	r0, #0
  4005ca:	bd08      	pop	{r3, pc}
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
  4005cc:	4b0a      	ldr	r3, [pc, #40]	; (4005f8 <udi_vendor_setup+0x50>)
  4005ce:	785b      	ldrb	r3, [r3, #1]
  4005d0:	b10b      	cbz	r3, 4005d6 <udi_vendor_setup+0x2e>
	return false; // Not supported request
  4005d2:	2000      	movs	r0, #0
  4005d4:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_IN_RECEIVED();
  4005d6:	4b09      	ldr	r3, [pc, #36]	; (4005fc <udi_vendor_setup+0x54>)
  4005d8:	4798      	blx	r3
  4005da:	bd08      	pop	{r3, pc}
				&& (udd_g_ctrlreq.req.bRequest == 0)
  4005dc:	4b06      	ldr	r3, [pc, #24]	; (4005f8 <udi_vendor_setup+0x50>)
  4005de:	785b      	ldrb	r3, [r3, #1]
  4005e0:	b93b      	cbnz	r3, 4005f2 <udi_vendor_setup+0x4a>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
  4005e2:	4b05      	ldr	r3, [pc, #20]	; (4005f8 <udi_vendor_setup+0x50>)
  4005e4:	88db      	ldrh	r3, [r3, #6]
  4005e6:	b90b      	cbnz	r3, 4005ec <udi_vendor_setup+0x44>
	return false; // Not supported request
  4005e8:	2000      	movs	r0, #0
}
  4005ea:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
  4005ec:	4b04      	ldr	r3, [pc, #16]	; (400600 <udi_vendor_setup+0x58>)
  4005ee:	4798      	blx	r3
  4005f0:	bd08      	pop	{r3, pc}
	return false; // Not supported request
  4005f2:	2000      	movs	r0, #0
  4005f4:	bd08      	pop	{r3, pc}
  4005f6:	bf00      	nop
  4005f8:	2040103c 	.word	0x2040103c
  4005fc:	004031a1 	.word	0x004031a1
  400600:	00403181 	.word	0x00403181

00400604 <udi_vendor_interrupt_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  400604:	b510      	push	{r4, lr}
  400606:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_IN,
  400608:	9200      	str	r2, [sp, #0]
  40060a:	460b      	mov	r3, r1
  40060c:	4602      	mov	r2, r0
  40060e:	2100      	movs	r1, #0
  400610:	2081      	movs	r0, #129	; 0x81
  400612:	4c02      	ldr	r4, [pc, #8]	; (40061c <udi_vendor_interrupt_in_run+0x18>)
  400614:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  400616:	b002      	add	sp, #8
  400618:	bd10      	pop	{r4, pc}
  40061a:	bf00      	nop
  40061c:	00402621 	.word	0x00402621

00400620 <udi_vendor_interrupt_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  400620:	b510      	push	{r4, lr}
  400622:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_OUT,
  400624:	9200      	str	r2, [sp, #0]
  400626:	460b      	mov	r3, r1
  400628:	4602      	mov	r2, r0
  40062a:	2100      	movs	r1, #0
  40062c:	2002      	movs	r0, #2
  40062e:	4c02      	ldr	r4, [pc, #8]	; (400638 <udi_vendor_interrupt_out_run+0x18>)
  400630:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  400632:	b002      	add	sp, #8
  400634:	bd10      	pop	{r4, pc}
  400636:	bf00      	nop
  400638:	00402621 	.word	0x00402621

0040063c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  40063c:	b510      	push	{r4, lr}
  40063e:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
  400640:	9200      	str	r2, [sp, #0]
  400642:	460b      	mov	r3, r1
  400644:	4602      	mov	r2, r0
  400646:	2100      	movs	r1, #0
  400648:	2083      	movs	r0, #131	; 0x83
  40064a:	4c02      	ldr	r4, [pc, #8]	; (400654 <udi_vendor_bulk_in_run+0x18>)
  40064c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  40064e:	b002      	add	sp, #8
  400650:	bd10      	pop	{r4, pc}
  400652:	bf00      	nop
  400654:	00402621 	.word	0x00402621

00400658 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  400658:	b510      	push	{r4, lr}
  40065a:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
  40065c:	9200      	str	r2, [sp, #0]
  40065e:	460b      	mov	r3, r1
  400660:	4602      	mov	r2, r0
  400662:	2100      	movs	r1, #0
  400664:	2004      	movs	r0, #4
  400666:	4c02      	ldr	r4, [pc, #8]	; (400670 <udi_vendor_bulk_out_run+0x18>)
  400668:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  40066a:	b002      	add	sp, #8
  40066c:	bd10      	pop	{r4, pc}
  40066e:	bf00      	nop
  400670:	00402621 	.word	0x00402621

00400674 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  400674:	b510      	push	{r4, lr}
  400676:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
  400678:	9200      	str	r2, [sp, #0]
  40067a:	460b      	mov	r3, r1
  40067c:	4602      	mov	r2, r0
  40067e:	2100      	movs	r1, #0
  400680:	2085      	movs	r0, #133	; 0x85
  400682:	4c02      	ldr	r4, [pc, #8]	; (40068c <udi_vendor_iso_in_run+0x18>)
  400684:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  400686:	b002      	add	sp, #8
  400688:	bd10      	pop	{r4, pc}
  40068a:	bf00      	nop
  40068c:	00402621 	.word	0x00402621

00400690 <udi_vendor_iso_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  400690:	b510      	push	{r4, lr}
  400692:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_ISO_OUT,
  400694:	9200      	str	r2, [sp, #0]
  400696:	460b      	mov	r3, r1
  400698:	4602      	mov	r2, r0
  40069a:	2100      	movs	r1, #0
  40069c:	2006      	movs	r0, #6
  40069e:	4c02      	ldr	r4, [pc, #8]	; (4006a8 <udi_vendor_iso_out_run+0x18>)
  4006a0:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  4006a2:	b002      	add	sp, #8
  4006a4:	bd10      	pop	{r4, pc}
  4006a6:	bf00      	nop
  4006a8:	00402621 	.word	0x00402621

004006ac <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  4006ac:	4b10      	ldr	r3, [pc, #64]	; (4006f0 <udc_next_desc_in_iface+0x44>)
  4006ae:	681b      	ldr	r3, [r3, #0]
  4006b0:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  4006b2:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  4006b4:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  4006b6:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4006b8:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  4006ba:	4290      	cmp	r0, r2
  4006bc:	d211      	bcs.n	4006e2 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  4006be:	7843      	ldrb	r3, [r0, #1]
  4006c0:	2b04      	cmp	r3, #4
  4006c2:	d010      	beq.n	4006e6 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  4006c4:	428b      	cmp	r3, r1
  4006c6:	d009      	beq.n	4006dc <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  4006c8:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4006ca:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  4006cc:	4290      	cmp	r0, r2
  4006ce:	d206      	bcs.n	4006de <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  4006d0:	7843      	ldrb	r3, [r0, #1]
  4006d2:	2b04      	cmp	r3, #4
  4006d4:	d009      	beq.n	4006ea <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  4006d6:	428b      	cmp	r3, r1
  4006d8:	d1f6      	bne.n	4006c8 <udc_next_desc_in_iface+0x1c>
  4006da:	e007      	b.n	4006ec <udc_next_desc_in_iface+0x40>
  4006dc:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  4006de:	2000      	movs	r0, #0
  4006e0:	4770      	bx	lr
  4006e2:	2000      	movs	r0, #0
  4006e4:	4770      	bx	lr
  4006e6:	2000      	movs	r0, #0
  4006e8:	4770      	bx	lr
  4006ea:	2000      	movs	r0, #0
}
  4006ec:	4770      	bx	lr
  4006ee:	bf00      	nop
  4006f0:	20400acc 	.word	0x20400acc

004006f4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  4006f4:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  4006f6:	4b03      	ldr	r3, [pc, #12]	; (400704 <udc_valid_address+0x10>)
  4006f8:	7898      	ldrb	r0, [r3, #2]
  4006fa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4006fe:	4b02      	ldr	r3, [pc, #8]	; (400708 <udc_valid_address+0x14>)
  400700:	4798      	blx	r3
  400702:	bd08      	pop	{r3, pc}
  400704:	2040103c 	.word	0x2040103c
  400708:	0040237d 	.word	0x0040237d

0040070c <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  40070c:	4b19      	ldr	r3, [pc, #100]	; (400774 <udc_update_iface_desc+0x68>)
  40070e:	781b      	ldrb	r3, [r3, #0]
  400710:	b34b      	cbz	r3, 400766 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400712:	4b19      	ldr	r3, [pc, #100]	; (400778 <udc_update_iface_desc+0x6c>)
  400714:	681b      	ldr	r3, [r3, #0]
  400716:	681b      	ldr	r3, [r3, #0]
  400718:	791a      	ldrb	r2, [r3, #4]
  40071a:	4282      	cmp	r2, r0
  40071c:	d925      	bls.n	40076a <udc_update_iface_desc+0x5e>
{
  40071e:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400720:	4a16      	ldr	r2, [pc, #88]	; (40077c <udc_update_iface_desc+0x70>)
  400722:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400724:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400726:	441c      	add	r4, r3
	while (ptr_end_desc >
  400728:	42a3      	cmp	r3, r4
  40072a:	d220      	bcs.n	40076e <udc_update_iface_desc+0x62>
  40072c:	2500      	movs	r5, #0
  40072e:	2601      	movs	r6, #1
  400730:	e007      	b.n	400742 <udc_update_iface_desc+0x36>
  400732:	4a12      	ldr	r2, [pc, #72]	; (40077c <udc_update_iface_desc+0x70>)
  400734:	6013      	str	r3, [r2, #0]
  400736:	e00f      	b.n	400758 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  400738:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  40073a:	4413      	add	r3, r2
  40073c:	4635      	mov	r5, r6
	while (ptr_end_desc >
  40073e:	42a3      	cmp	r3, r4
  400740:	d20c      	bcs.n	40075c <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400742:	785a      	ldrb	r2, [r3, #1]
  400744:	2a04      	cmp	r2, #4
  400746:	d1f7      	bne.n	400738 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400748:	789a      	ldrb	r2, [r3, #2]
  40074a:	4282      	cmp	r2, r0
  40074c:	d1f4      	bne.n	400738 <udc_update_iface_desc+0x2c>
  40074e:	78da      	ldrb	r2, [r3, #3]
  400750:	428a      	cmp	r2, r1
  400752:	d1f1      	bne.n	400738 <udc_update_iface_desc+0x2c>
  400754:	2d00      	cmp	r5, #0
  400756:	d1ec      	bne.n	400732 <udc_update_iface_desc+0x26>
				return true; // Interface found
  400758:	2001      	movs	r0, #1
  40075a:	e002      	b.n	400762 <udc_update_iface_desc+0x56>
  40075c:	4a07      	ldr	r2, [pc, #28]	; (40077c <udc_update_iface_desc+0x70>)
  40075e:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  400760:	2000      	movs	r0, #0
}
  400762:	bc70      	pop	{r4, r5, r6}
  400764:	4770      	bx	lr
		return false;
  400766:	2000      	movs	r0, #0
  400768:	4770      	bx	lr
		return false;
  40076a:	2000      	movs	r0, #0
  40076c:	4770      	bx	lr
	return false; // Interface not found
  40076e:	2000      	movs	r0, #0
  400770:	e7f7      	b.n	400762 <udc_update_iface_desc+0x56>
  400772:	bf00      	nop
  400774:	20400ac8 	.word	0x20400ac8
  400778:	20400acc 	.word	0x20400acc
  40077c:	20400ad0 	.word	0x20400ad0

00400780 <udc_iface_disable>:
{
  400780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400784:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  400786:	2100      	movs	r1, #0
  400788:	4b13      	ldr	r3, [pc, #76]	; (4007d8 <udc_iface_disable+0x58>)
  40078a:	4798      	blx	r3
  40078c:	4680      	mov	r8, r0
  40078e:	b910      	cbnz	r0, 400796 <udc_iface_disable+0x16>
}
  400790:	4640      	mov	r0, r8
  400792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400796:	4b11      	ldr	r3, [pc, #68]	; (4007dc <udc_iface_disable+0x5c>)
  400798:	681b      	ldr	r3, [r3, #0]
  40079a:	685b      	ldr	r3, [r3, #4]
  40079c:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4007a0:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4007a4:	4798      	blx	r3
  4007a6:	4601      	mov	r1, r0
  4007a8:	4620      	mov	r0, r4
  4007aa:	4b0b      	ldr	r3, [pc, #44]	; (4007d8 <udc_iface_disable+0x58>)
  4007ac:	4798      	blx	r3
  4007ae:	4680      	mov	r8, r0
  4007b0:	2800      	cmp	r0, #0
  4007b2:	d0ed      	beq.n	400790 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4007b4:	4b0a      	ldr	r3, [pc, #40]	; (4007e0 <udc_iface_disable+0x60>)
  4007b6:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4007b8:	2605      	movs	r6, #5
  4007ba:	4d0a      	ldr	r5, [pc, #40]	; (4007e4 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  4007bc:	4f0a      	ldr	r7, [pc, #40]	; (4007e8 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4007be:	4631      	mov	r1, r6
  4007c0:	4620      	mov	r0, r4
  4007c2:	47a8      	blx	r5
			if (NULL == ep_desc) {
  4007c4:	4604      	mov	r4, r0
  4007c6:	b110      	cbz	r0, 4007ce <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  4007c8:	7880      	ldrb	r0, [r0, #2]
  4007ca:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4007cc:	e7f7      	b.n	4007be <udc_iface_disable+0x3e>
	udi_api->disable();
  4007ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4007d2:	4798      	blx	r3
	return true;
  4007d4:	e7dc      	b.n	400790 <udc_iface_disable+0x10>
  4007d6:	bf00      	nop
  4007d8:	0040070d 	.word	0x0040070d
  4007dc:	20400acc 	.word	0x20400acc
  4007e0:	20400ad0 	.word	0x20400ad0
  4007e4:	004006ad 	.word	0x004006ad
  4007e8:	004023d1 	.word	0x004023d1

004007ec <udc_iface_enable>:
{
  4007ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007f0:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4007f2:	4b10      	ldr	r3, [pc, #64]	; (400834 <udc_iface_enable+0x48>)
  4007f4:	4798      	blx	r3
  4007f6:	4603      	mov	r3, r0
  4007f8:	b1c8      	cbz	r0, 40082e <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4007fa:	4b0f      	ldr	r3, [pc, #60]	; (400838 <udc_iface_enable+0x4c>)
  4007fc:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4007fe:	2605      	movs	r6, #5
  400800:	4d0e      	ldr	r5, [pc, #56]	; (40083c <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400802:	4f0f      	ldr	r7, [pc, #60]	; (400840 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400804:	4631      	mov	r1, r6
  400806:	4620      	mov	r0, r4
  400808:	47a8      	blx	r5
		if (NULL == ep_desc)
  40080a:	4604      	mov	r4, r0
  40080c:	b138      	cbz	r0, 40081e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40080e:	8882      	ldrh	r2, [r0, #4]
  400810:	78c1      	ldrb	r1, [r0, #3]
  400812:	7880      	ldrb	r0, [r0, #2]
  400814:	47b8      	blx	r7
  400816:	4603      	mov	r3, r0
  400818:	2800      	cmp	r0, #0
  40081a:	d1f3      	bne.n	400804 <udc_iface_enable+0x18>
  40081c:	e007      	b.n	40082e <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40081e:	4b09      	ldr	r3, [pc, #36]	; (400844 <udc_iface_enable+0x58>)
  400820:	681b      	ldr	r3, [r3, #0]
  400822:	685b      	ldr	r3, [r3, #4]
  400824:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  400828:	681b      	ldr	r3, [r3, #0]
  40082a:	4798      	blx	r3
  40082c:	4603      	mov	r3, r0
}
  40082e:	4618      	mov	r0, r3
  400830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400834:	0040070d 	.word	0x0040070d
  400838:	20400ad0 	.word	0x20400ad0
  40083c:	004006ad 	.word	0x004006ad
  400840:	0040272d 	.word	0x0040272d
  400844:	20400acc 	.word	0x20400acc

00400848 <udc_get_interface_desc>:
}
  400848:	4b01      	ldr	r3, [pc, #4]	; (400850 <udc_get_interface_desc+0x8>)
  40084a:	6818      	ldr	r0, [r3, #0]
  40084c:	4770      	bx	lr
  40084e:	bf00      	nop
  400850:	20400ad0 	.word	0x20400ad0

00400854 <udc_start>:
{
  400854:	b508      	push	{r3, lr}
	udd_enable();
  400856:	4b01      	ldr	r3, [pc, #4]	; (40085c <udc_start+0x8>)
  400858:	4798      	blx	r3
  40085a:	bd08      	pop	{r3, pc}
  40085c:	00402231 	.word	0x00402231

00400860 <udc_reset>:
{
  400860:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  400862:	4b0d      	ldr	r3, [pc, #52]	; (400898 <udc_reset+0x38>)
  400864:	781b      	ldrb	r3, [r3, #0]
  400866:	b183      	cbz	r3, 40088a <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400868:	4b0c      	ldr	r3, [pc, #48]	; (40089c <udc_reset+0x3c>)
  40086a:	681b      	ldr	r3, [r3, #0]
  40086c:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  40086e:	791b      	ldrb	r3, [r3, #4]
  400870:	b15b      	cbz	r3, 40088a <udc_reset+0x2a>
  400872:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  400874:	4e0a      	ldr	r6, [pc, #40]	; (4008a0 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400876:	4d09      	ldr	r5, [pc, #36]	; (40089c <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  400878:	4620      	mov	r0, r4
  40087a:	47b0      	blx	r6
				iface_num++) {
  40087c:	3401      	adds	r4, #1
  40087e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400880:	682b      	ldr	r3, [r5, #0]
  400882:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  400884:	791b      	ldrb	r3, [r3, #4]
  400886:	42a3      	cmp	r3, r4
  400888:	d8f6      	bhi.n	400878 <udc_reset+0x18>
	udc_num_configuration = 0;
  40088a:	2200      	movs	r2, #0
  40088c:	4b02      	ldr	r3, [pc, #8]	; (400898 <udc_reset+0x38>)
  40088e:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  400890:	2201      	movs	r2, #1
  400892:	4b04      	ldr	r3, [pc, #16]	; (4008a4 <udc_reset+0x44>)
  400894:	801a      	strh	r2, [r3, #0]
  400896:	bd70      	pop	{r4, r5, r6, pc}
  400898:	20400ac8 	.word	0x20400ac8
  40089c:	20400acc 	.word	0x20400acc
  4008a0:	00400781 	.word	0x00400781
  4008a4:	20400abe 	.word	0x20400abe

004008a8 <udc_sof_notify>:
{
  4008a8:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  4008aa:	4b0d      	ldr	r3, [pc, #52]	; (4008e0 <udc_sof_notify+0x38>)
  4008ac:	781b      	ldrb	r3, [r3, #0]
  4008ae:	b1b3      	cbz	r3, 4008de <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4008b0:	4b0c      	ldr	r3, [pc, #48]	; (4008e4 <udc_sof_notify+0x3c>)
  4008b2:	681b      	ldr	r3, [r3, #0]
  4008b4:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4008b6:	7912      	ldrb	r2, [r2, #4]
  4008b8:	b18a      	cbz	r2, 4008de <udc_sof_notify+0x36>
  4008ba:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4008bc:	4d09      	ldr	r5, [pc, #36]	; (4008e4 <udc_sof_notify+0x3c>)
  4008be:	e006      	b.n	4008ce <udc_sof_notify+0x26>
				iface_num++) {
  4008c0:	3401      	adds	r4, #1
  4008c2:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4008c4:	682b      	ldr	r3, [r5, #0]
  4008c6:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4008c8:	7912      	ldrb	r2, [r2, #4]
  4008ca:	42a2      	cmp	r2, r4
  4008cc:	d907      	bls.n	4008de <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  4008ce:	685b      	ldr	r3, [r3, #4]
  4008d0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4008d4:	691b      	ldr	r3, [r3, #16]
  4008d6:	2b00      	cmp	r3, #0
  4008d8:	d0f2      	beq.n	4008c0 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  4008da:	4798      	blx	r3
  4008dc:	e7f0      	b.n	4008c0 <udc_sof_notify+0x18>
  4008de:	bd38      	pop	{r3, r4, r5, pc}
  4008e0:	20400ac8 	.word	0x20400ac8
  4008e4:	20400acc 	.word	0x20400acc

004008e8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  4008e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  4008ea:	4b88      	ldr	r3, [pc, #544]	; (400b0c <udc_process_setup+0x224>)
  4008ec:	2200      	movs	r2, #0
  4008ee:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  4008f0:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4008f2:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  4008f4:	781b      	ldrb	r3, [r3, #0]
  4008f6:	f013 0f80 	tst.w	r3, #128	; 0x80
  4008fa:	d114      	bne.n	400926 <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  4008fc:	f013 0f60 	tst.w	r3, #96	; 0x60
  400900:	f000 80d5 	beq.w	400aae <udc_process_setup+0x1c6>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  400904:	4b81      	ldr	r3, [pc, #516]	; (400b0c <udc_process_setup+0x224>)
  400906:	781b      	ldrb	r3, [r3, #0]
  400908:	f003 031f 	and.w	r3, r3, #31
  40090c:	2b01      	cmp	r3, #1
  40090e:	f000 816c 	beq.w	400bea <udc_process_setup+0x302>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400912:	4b7e      	ldr	r3, [pc, #504]	; (400b0c <udc_process_setup+0x224>)
  400914:	781b      	ldrb	r3, [r3, #0]
  400916:	f003 031f 	and.w	r3, r3, #31
  40091a:	2b02      	cmp	r3, #2
  40091c:	f000 81c7 	beq.w	400cae <udc_process_setup+0x3c6>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400920:	2300      	movs	r3, #0
#endif
}
  400922:	4618      	mov	r0, r3
  400924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  400926:	4a79      	ldr	r2, [pc, #484]	; (400b0c <udc_process_setup+0x224>)
  400928:	88d2      	ldrh	r2, [r2, #6]
  40092a:	2a00      	cmp	r2, #0
  40092c:	f000 81e8 	beq.w	400d00 <udc_process_setup+0x418>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400930:	f013 0f60 	tst.w	r3, #96	; 0x60
  400934:	d1e6      	bne.n	400904 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400936:	f013 031f 	ands.w	r3, r3, #31
  40093a:	d106      	bne.n	40094a <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  40093c:	4973      	ldr	r1, [pc, #460]	; (400b0c <udc_process_setup+0x224>)
  40093e:	7849      	ldrb	r1, [r1, #1]
  400940:	2906      	cmp	r1, #6
  400942:	d014      	beq.n	40096e <udc_process_setup+0x86>
  400944:	2908      	cmp	r1, #8
  400946:	d074      	beq.n	400a32 <udc_process_setup+0x14a>
  400948:	b151      	cbz	r1, 400960 <udc_process_setup+0x78>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40094a:	2b01      	cmp	r3, #1
  40094c:	d079      	beq.n	400a42 <udc_process_setup+0x15a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  40094e:	2b02      	cmp	r3, #2
  400950:	d1d8      	bne.n	400904 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400952:	4b6e      	ldr	r3, [pc, #440]	; (400b0c <udc_process_setup+0x224>)
  400954:	785b      	ldrb	r3, [r3, #1]
  400956:	2b00      	cmp	r3, #0
  400958:	f000 809b 	beq.w	400a92 <udc_process_setup+0x1aa>
	return false;
  40095c:	2300      	movs	r3, #0
  40095e:	e188      	b.n	400c72 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400960:	2a02      	cmp	r2, #2
  400962:	d1d6      	bne.n	400912 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400964:	2102      	movs	r1, #2
  400966:	486a      	ldr	r0, [pc, #424]	; (400b10 <udc_process_setup+0x228>)
  400968:	4b6a      	ldr	r3, [pc, #424]	; (400b14 <udc_process_setup+0x22c>)
  40096a:	4798      	blx	r3
  40096c:	e0bb      	b.n	400ae6 <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  40096e:	4b67      	ldr	r3, [pc, #412]	; (400b0c <udc_process_setup+0x224>)
  400970:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400972:	0a13      	lsrs	r3, r2, #8
  400974:	3b01      	subs	r3, #1
  400976:	2b0e      	cmp	r3, #14
  400978:	f200 8178 	bhi.w	400c6c <udc_process_setup+0x384>
  40097c:	e8df f013 	tbh	[pc, r3, lsl #1]
  400980:	001d000f 	.word	0x001d000f
  400984:	01760037 	.word	0x01760037
  400988:	01760176 	.word	0x01760176
  40098c:	01760176 	.word	0x01760176
  400990:	01760176 	.word	0x01760176
  400994:	01760176 	.word	0x01760176
  400998:	01760176 	.word	0x01760176
  40099c:	002f      	.short	0x002f
				(uint8_t *) udc_config.confdev_lsfs,
  40099e:	4b5e      	ldr	r3, [pc, #376]	; (400b18 <udc_process_setup+0x230>)
  4009a0:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  4009a2:	7801      	ldrb	r1, [r0, #0]
  4009a4:	4b5b      	ldr	r3, [pc, #364]	; (400b14 <udc_process_setup+0x22c>)
  4009a6:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  4009a8:	4b58      	ldr	r3, [pc, #352]	; (400b0c <udc_process_setup+0x224>)
  4009aa:	88da      	ldrh	r2, [r3, #6]
  4009ac:	899b      	ldrh	r3, [r3, #12]
  4009ae:	4293      	cmp	r3, r2
  4009b0:	f240 8099 	bls.w	400ae6 <udc_process_setup+0x1fe>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  4009b4:	4b55      	ldr	r3, [pc, #340]	; (400b0c <udc_process_setup+0x224>)
  4009b6:	819a      	strh	r2, [r3, #12]
  4009b8:	e095      	b.n	400ae6 <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4009ba:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  4009bc:	4b56      	ldr	r3, [pc, #344]	; (400b18 <udc_process_setup+0x230>)
  4009be:	681b      	ldr	r3, [r3, #0]
  4009c0:	7c5b      	ldrb	r3, [r3, #17]
  4009c2:	4293      	cmp	r3, r2
  4009c4:	d9a5      	bls.n	400912 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  4009c6:	4b54      	ldr	r3, [pc, #336]	; (400b18 <udc_process_setup+0x230>)
  4009c8:	685b      	ldr	r3, [r3, #4]
  4009ca:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  4009ce:	8841      	ldrh	r1, [r0, #2]
  4009d0:	4b50      	ldr	r3, [pc, #320]	; (400b14 <udc_process_setup+0x22c>)
  4009d2:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  4009d4:	4b4d      	ldr	r3, [pc, #308]	; (400b0c <udc_process_setup+0x224>)
  4009d6:	689b      	ldr	r3, [r3, #8]
  4009d8:	2202      	movs	r2, #2
  4009da:	705a      	strb	r2, [r3, #1]
  4009dc:	e7e4      	b.n	4009a8 <udc_process_setup+0xc0>
		if (udc_config.conf_bos == NULL) {
  4009de:	4b4e      	ldr	r3, [pc, #312]	; (400b18 <udc_process_setup+0x230>)
  4009e0:	6898      	ldr	r0, [r3, #8]
  4009e2:	2800      	cmp	r0, #0
  4009e4:	d095      	beq.n	400912 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  4009e6:	8841      	ldrh	r1, [r0, #2]
  4009e8:	4b4a      	ldr	r3, [pc, #296]	; (400b14 <udc_process_setup+0x22c>)
  4009ea:	4798      	blx	r3
  4009ec:	e7dc      	b.n	4009a8 <udc_process_setup+0xc0>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  4009ee:	b2d2      	uxtb	r2, r2
  4009f0:	2a01      	cmp	r2, #1
  4009f2:	d01b      	beq.n	400a2c <udc_process_setup+0x144>
  4009f4:	b1aa      	cbz	r2, 400a22 <udc_process_setup+0x13a>
  4009f6:	2a02      	cmp	r2, #2
  4009f8:	d184      	bne.n	400904 <udc_process_setup+0x1c>
		str = udc_string_product_name;
  4009fa:	4a48      	ldr	r2, [pc, #288]	; (400b1c <udc_process_setup+0x234>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  4009fc:	240a      	movs	r4, #10
  4009fe:	3a01      	subs	r2, #1
  400a00:	4947      	ldr	r1, [pc, #284]	; (400b20 <udc_process_setup+0x238>)
  400a02:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  400a04:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  400a08:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
  400a0c:	3301      	adds	r3, #1
  400a0e:	b2db      	uxtb	r3, r3
  400a10:	42a3      	cmp	r3, r4
  400a12:	d3f7      	bcc.n	400a04 <udc_process_setup+0x11c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  400a14:	0061      	lsls	r1, r4, #1
  400a16:	3102      	adds	r1, #2
  400a18:	4841      	ldr	r0, [pc, #260]	; (400b20 <udc_process_setup+0x238>)
  400a1a:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  400a1c:	4b3d      	ldr	r3, [pc, #244]	; (400b14 <udc_process_setup+0x22c>)
  400a1e:	4798      	blx	r3
  400a20:	e7c2      	b.n	4009a8 <udc_process_setup+0xc0>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400a22:	2104      	movs	r1, #4
  400a24:	483f      	ldr	r0, [pc, #252]	; (400b24 <udc_process_setup+0x23c>)
  400a26:	4b3b      	ldr	r3, [pc, #236]	; (400b14 <udc_process_setup+0x22c>)
  400a28:	4798      	blx	r3
  400a2a:	e7bd      	b.n	4009a8 <udc_process_setup+0xc0>
		str = udc_string_manufacturer_name;
  400a2c:	4a3e      	ldr	r2, [pc, #248]	; (400b28 <udc_process_setup+0x240>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  400a2e:	2415      	movs	r4, #21
  400a30:	e7e5      	b.n	4009fe <udc_process_setup+0x116>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400a32:	2a01      	cmp	r2, #1
  400a34:	f47f af6d 	bne.w	400912 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
  400a38:	2101      	movs	r1, #1
  400a3a:	483c      	ldr	r0, [pc, #240]	; (400b2c <udc_process_setup+0x244>)
  400a3c:	4b35      	ldr	r3, [pc, #212]	; (400b14 <udc_process_setup+0x22c>)
  400a3e:	4798      	blx	r3
  400a40:	e051      	b.n	400ae6 <udc_process_setup+0x1fe>
			switch (udd_g_ctrlreq.req.bRequest) {
  400a42:	4932      	ldr	r1, [pc, #200]	; (400b0c <udc_process_setup+0x224>)
  400a44:	7849      	ldrb	r1, [r1, #1]
  400a46:	290a      	cmp	r1, #10
  400a48:	d181      	bne.n	40094e <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400a4a:	2a01      	cmp	r2, #1
  400a4c:	f040 80cd 	bne.w	400bea <udc_process_setup+0x302>
	if (!udc_num_configuration) {
  400a50:	4b36      	ldr	r3, [pc, #216]	; (400b2c <udc_process_setup+0x244>)
  400a52:	781b      	ldrb	r3, [r3, #0]
  400a54:	2b00      	cmp	r3, #0
  400a56:	f000 80c8 	beq.w	400bea <udc_process_setup+0x302>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400a5a:	4b2c      	ldr	r3, [pc, #176]	; (400b0c <udc_process_setup+0x224>)
  400a5c:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400a5e:	4b34      	ldr	r3, [pc, #208]	; (400b30 <udc_process_setup+0x248>)
  400a60:	681d      	ldr	r5, [r3, #0]
  400a62:	682b      	ldr	r3, [r5, #0]
  400a64:	791b      	ldrb	r3, [r3, #4]
  400a66:	42a3      	cmp	r3, r4
  400a68:	f240 80bf 	bls.w	400bea <udc_process_setup+0x302>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400a6c:	2100      	movs	r1, #0
  400a6e:	4620      	mov	r0, r4
  400a70:	4b30      	ldr	r3, [pc, #192]	; (400b34 <udc_process_setup+0x24c>)
  400a72:	4798      	blx	r3
  400a74:	2800      	cmp	r0, #0
  400a76:	f43f af45 	beq.w	400904 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400a7a:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  400a7c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400a80:	68db      	ldr	r3, [r3, #12]
  400a82:	4798      	blx	r3
  400a84:	4b2c      	ldr	r3, [pc, #176]	; (400b38 <udc_process_setup+0x250>)
  400a86:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  400a88:	2101      	movs	r1, #1
  400a8a:	4618      	mov	r0, r3
  400a8c:	4b21      	ldr	r3, [pc, #132]	; (400b14 <udc_process_setup+0x22c>)
  400a8e:	4798      	blx	r3
  400a90:	e029      	b.n	400ae6 <udc_process_setup+0x1fe>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400a92:	2a02      	cmp	r2, #2
  400a94:	f47f af3d 	bne.w	400912 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400a98:	4b1c      	ldr	r3, [pc, #112]	; (400b0c <udc_process_setup+0x224>)
  400a9a:	7918      	ldrb	r0, [r3, #4]
  400a9c:	4b27      	ldr	r3, [pc, #156]	; (400b3c <udc_process_setup+0x254>)
  400a9e:	4798      	blx	r3
  400aa0:	4b27      	ldr	r3, [pc, #156]	; (400b40 <udc_process_setup+0x258>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  400aa2:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400aa4:	2102      	movs	r1, #2
  400aa6:	4618      	mov	r0, r3
  400aa8:	4b1a      	ldr	r3, [pc, #104]	; (400b14 <udc_process_setup+0x22c>)
  400aaa:	4798      	blx	r3
  400aac:	e01b      	b.n	400ae6 <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400aae:	f013 031f 	ands.w	r3, r3, #31
  400ab2:	f040 8083 	bne.w	400bbc <udc_process_setup+0x2d4>
			switch (udd_g_ctrlreq.req.bRequest) {
  400ab6:	4a15      	ldr	r2, [pc, #84]	; (400b0c <udc_process_setup+0x224>)
  400ab8:	7852      	ldrb	r2, [r2, #1]
  400aba:	3a01      	subs	r2, #1
  400abc:	2a08      	cmp	r2, #8
  400abe:	d87d      	bhi.n	400bbc <udc_process_setup+0x2d4>
  400ac0:	e8df f012 	tbh	[pc, r2, lsl #1]
  400ac4:	007c0013 	.word	0x007c0013
  400ac8:	007c00d6 	.word	0x007c00d6
  400acc:	007c0009 	.word	0x007c0009
  400ad0:	007c007c 	.word	0x007c007c
  400ad4:	0042      	.short	0x0042
	if (udd_g_ctrlreq.req.wLength) {
  400ad6:	4b0d      	ldr	r3, [pc, #52]	; (400b0c <udc_process_setup+0x224>)
  400ad8:	88db      	ldrh	r3, [r3, #6]
  400ada:	2b00      	cmp	r3, #0
  400adc:	f47f af19 	bne.w	400912 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
  400ae0:	4a18      	ldr	r2, [pc, #96]	; (400b44 <udc_process_setup+0x25c>)
  400ae2:	4b0a      	ldr	r3, [pc, #40]	; (400b0c <udc_process_setup+0x224>)
  400ae4:	611a      	str	r2, [r3, #16]
			return true;
  400ae6:	2301      	movs	r3, #1
  400ae8:	e71b      	b.n	400922 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  400aea:	4b08      	ldr	r3, [pc, #32]	; (400b0c <udc_process_setup+0x224>)
  400aec:	88db      	ldrh	r3, [r3, #6]
  400aee:	2b00      	cmp	r3, #0
  400af0:	f47f af0f 	bne.w	400912 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400af4:	4b05      	ldr	r3, [pc, #20]	; (400b0c <udc_process_setup+0x224>)
  400af6:	885b      	ldrh	r3, [r3, #2]
  400af8:	2b01      	cmp	r3, #1
  400afa:	f47f af0a 	bne.w	400912 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400afe:	4a04      	ldr	r2, [pc, #16]	; (400b10 <udc_process_setup+0x228>)
  400b00:	8813      	ldrh	r3, [r2, #0]
  400b02:	f023 0302 	bic.w	r3, r3, #2
  400b06:	8013      	strh	r3, [r2, #0]
  400b08:	e7ed      	b.n	400ae6 <udc_process_setup+0x1fe>
  400b0a:	bf00      	nop
  400b0c:	2040103c 	.word	0x2040103c
  400b10:	20400abe 	.word	0x20400abe
  400b14:	004023c5 	.word	0x004023c5
  400b18:	20400020 	.word	0x20400020
  400b1c:	204000dc 	.word	0x204000dc
  400b20:	20400094 	.word	0x20400094
  400b24:	204000c0 	.word	0x204000c0
  400b28:	204000c4 	.word	0x204000c4
  400b2c:	20400ac8 	.word	0x20400ac8
  400b30:	20400acc 	.word	0x20400acc
  400b34:	0040070d 	.word	0x0040070d
  400b38:	20400ac4 	.word	0x20400ac4
  400b3c:	0040242d 	.word	0x0040242d
  400b40:	20400ac0 	.word	0x20400ac0
  400b44:	004006f5 	.word	0x004006f5
	if (udd_g_ctrlreq.req.wLength) {
  400b48:	4b6f      	ldr	r3, [pc, #444]	; (400d08 <udc_process_setup+0x420>)
  400b4a:	88db      	ldrh	r3, [r3, #6]
  400b4c:	2b00      	cmp	r3, #0
  400b4e:	f47f aee0 	bne.w	400912 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
  400b52:	4b6e      	ldr	r3, [pc, #440]	; (400d0c <udc_process_setup+0x424>)
  400b54:	4798      	blx	r3
  400b56:	2800      	cmp	r0, #0
  400b58:	f43f aed4 	beq.w	400904 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400b5c:	4b6a      	ldr	r3, [pc, #424]	; (400d08 <udc_process_setup+0x420>)
  400b5e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400b60:	4b6b      	ldr	r3, [pc, #428]	; (400d10 <udc_process_setup+0x428>)
  400b62:	681b      	ldr	r3, [r3, #0]
  400b64:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400b66:	429a      	cmp	r2, r3
  400b68:	f73f aecc 	bgt.w	400904 <udc_process_setup+0x1c>
	udc_reset();
  400b6c:	4b69      	ldr	r3, [pc, #420]	; (400d14 <udc_process_setup+0x42c>)
  400b6e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400b70:	4b65      	ldr	r3, [pc, #404]	; (400d08 <udc_process_setup+0x420>)
  400b72:	789a      	ldrb	r2, [r3, #2]
  400b74:	4b68      	ldr	r3, [pc, #416]	; (400d18 <udc_process_setup+0x430>)
  400b76:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  400b78:	2a00      	cmp	r2, #0
  400b7a:	d0b4      	beq.n	400ae6 <udc_process_setup+0x1fe>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400b7c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  400b80:	4413      	add	r3, r2
  400b82:	4a63      	ldr	r2, [pc, #396]	; (400d10 <udc_process_setup+0x428>)
  400b84:	6852      	ldr	r2, [r2, #4]
  400b86:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400b8a:	4964      	ldr	r1, [pc, #400]	; (400d1c <udc_process_setup+0x434>)
  400b8c:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400b8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400b92:	791b      	ldrb	r3, [r3, #4]
  400b94:	2b00      	cmp	r3, #0
  400b96:	d0a6      	beq.n	400ae6 <udc_process_setup+0x1fe>
  400b98:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  400b9a:	4626      	mov	r6, r4
  400b9c:	4d60      	ldr	r5, [pc, #384]	; (400d20 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400b9e:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  400ba0:	4631      	mov	r1, r6
  400ba2:	4620      	mov	r0, r4
  400ba4:	47a8      	blx	r5
  400ba6:	2800      	cmp	r0, #0
  400ba8:	f43f aeac 	beq.w	400904 <udc_process_setup+0x1c>
			iface_num++) {
  400bac:	3401      	adds	r4, #1
  400bae:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400bb0:	683b      	ldr	r3, [r7, #0]
  400bb2:	681b      	ldr	r3, [r3, #0]
  400bb4:	791b      	ldrb	r3, [r3, #4]
  400bb6:	42a3      	cmp	r3, r4
  400bb8:	d8f2      	bhi.n	400ba0 <udc_process_setup+0x2b8>
  400bba:	e794      	b.n	400ae6 <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400bbc:	2b01      	cmp	r3, #1
  400bbe:	d00a      	beq.n	400bd6 <udc_process_setup+0x2ee>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400bc0:	2b02      	cmp	r3, #2
  400bc2:	f47f ae9f 	bne.w	400904 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400bc6:	4b50      	ldr	r3, [pc, #320]	; (400d08 <udc_process_setup+0x420>)
  400bc8:	785b      	ldrb	r3, [r3, #1]
  400bca:	2b01      	cmp	r3, #1
  400bcc:	d02b      	beq.n	400c26 <udc_process_setup+0x33e>
  400bce:	2b03      	cmp	r3, #3
  400bd0:	d039      	beq.n	400c46 <udc_process_setup+0x35e>
	return false;
  400bd2:	2300      	movs	r3, #0
  400bd4:	e04d      	b.n	400c72 <udc_process_setup+0x38a>
			switch (udd_g_ctrlreq.req.bRequest) {
  400bd6:	4a4c      	ldr	r2, [pc, #304]	; (400d08 <udc_process_setup+0x420>)
  400bd8:	7852      	ldrb	r2, [r2, #1]
  400bda:	2a0b      	cmp	r2, #11
  400bdc:	d1f0      	bne.n	400bc0 <udc_process_setup+0x2d8>
	if (udd_g_ctrlreq.req.wLength) {
  400bde:	4b4a      	ldr	r3, [pc, #296]	; (400d08 <udc_process_setup+0x420>)
  400be0:	88db      	ldrh	r3, [r3, #6]
  400be2:	b913      	cbnz	r3, 400bea <udc_process_setup+0x302>
	if (!udc_num_configuration) {
  400be4:	4b4c      	ldr	r3, [pc, #304]	; (400d18 <udc_process_setup+0x430>)
  400be6:	781b      	ldrb	r3, [r3, #0]
  400be8:	b973      	cbnz	r3, 400c08 <udc_process_setup+0x320>
	if (0 == udc_num_configuration) {
  400bea:	4b4b      	ldr	r3, [pc, #300]	; (400d18 <udc_process_setup+0x430>)
  400bec:	781b      	ldrb	r3, [r3, #0]
  400bee:	2b00      	cmp	r3, #0
  400bf0:	f000 8088 	beq.w	400d04 <udc_process_setup+0x41c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400bf4:	4b44      	ldr	r3, [pc, #272]	; (400d08 <udc_process_setup+0x420>)
  400bf6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400bf8:	4b48      	ldr	r3, [pc, #288]	; (400d1c <udc_process_setup+0x434>)
  400bfa:	681d      	ldr	r5, [r3, #0]
  400bfc:	682b      	ldr	r3, [r5, #0]
  400bfe:	791b      	ldrb	r3, [r3, #4]
  400c00:	42a3      	cmp	r3, r4
  400c02:	d83a      	bhi.n	400c7a <udc_process_setup+0x392>
	return false;
  400c04:	2300      	movs	r3, #0
  400c06:	e68c      	b.n	400922 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400c08:	4b3f      	ldr	r3, [pc, #252]	; (400d08 <udc_process_setup+0x420>)
  400c0a:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400c0c:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  400c0e:	4620      	mov	r0, r4
  400c10:	4b44      	ldr	r3, [pc, #272]	; (400d24 <udc_process_setup+0x43c>)
  400c12:	4798      	blx	r3
  400c14:	2800      	cmp	r0, #0
  400c16:	f43f ae75 	beq.w	400904 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  400c1a:	b2e9      	uxtb	r1, r5
  400c1c:	4620      	mov	r0, r4
  400c1e:	4b40      	ldr	r3, [pc, #256]	; (400d20 <udc_process_setup+0x438>)
  400c20:	4798      	blx	r3
  400c22:	4603      	mov	r3, r0
  400c24:	e025      	b.n	400c72 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength) {
  400c26:	4b38      	ldr	r3, [pc, #224]	; (400d08 <udc_process_setup+0x420>)
  400c28:	88db      	ldrh	r3, [r3, #6]
  400c2a:	2b00      	cmp	r3, #0
  400c2c:	f47f ae71 	bne.w	400912 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400c30:	4b35      	ldr	r3, [pc, #212]	; (400d08 <udc_process_setup+0x420>)
  400c32:	885b      	ldrh	r3, [r3, #2]
  400c34:	2b00      	cmp	r3, #0
  400c36:	f47f ae6c 	bne.w	400912 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400c3a:	4b33      	ldr	r3, [pc, #204]	; (400d08 <udc_process_setup+0x420>)
  400c3c:	7918      	ldrb	r0, [r3, #4]
  400c3e:	4b3a      	ldr	r3, [pc, #232]	; (400d28 <udc_process_setup+0x440>)
  400c40:	4798      	blx	r3
  400c42:	4603      	mov	r3, r0
  400c44:	e015      	b.n	400c72 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength) {
  400c46:	4b30      	ldr	r3, [pc, #192]	; (400d08 <udc_process_setup+0x420>)
  400c48:	88db      	ldrh	r3, [r3, #6]
  400c4a:	2b00      	cmp	r3, #0
  400c4c:	f47f ae61 	bne.w	400912 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400c50:	4b2d      	ldr	r3, [pc, #180]	; (400d08 <udc_process_setup+0x420>)
  400c52:	885b      	ldrh	r3, [r3, #2]
  400c54:	2b00      	cmp	r3, #0
  400c56:	f47f ae5c 	bne.w	400912 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400c5a:	4c2b      	ldr	r4, [pc, #172]	; (400d08 <udc_process_setup+0x420>)
  400c5c:	7920      	ldrb	r0, [r4, #4]
  400c5e:	4b33      	ldr	r3, [pc, #204]	; (400d2c <udc_process_setup+0x444>)
  400c60:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400c62:	7920      	ldrb	r0, [r4, #4]
  400c64:	4b32      	ldr	r3, [pc, #200]	; (400d30 <udc_process_setup+0x448>)
  400c66:	4798      	blx	r3
  400c68:	4603      	mov	r3, r0
  400c6a:	e002      	b.n	400c72 <udc_process_setup+0x38a>
		return false;
  400c6c:	2300      	movs	r3, #0
  400c6e:	e000      	b.n	400c72 <udc_process_setup+0x38a>
				return udc_req_std_dev_set_feature();
  400c70:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  400c72:	2b00      	cmp	r3, #0
  400c74:	f47f ae55 	bne.w	400922 <udc_process_setup+0x3a>
  400c78:	e644      	b.n	400904 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400c7a:	2100      	movs	r1, #0
  400c7c:	4620      	mov	r0, r4
  400c7e:	4b2d      	ldr	r3, [pc, #180]	; (400d34 <udc_process_setup+0x44c>)
  400c80:	4798      	blx	r3
  400c82:	2800      	cmp	r0, #0
  400c84:	f43f ae45 	beq.w	400912 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400c88:	686b      	ldr	r3, [r5, #4]
  400c8a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400c8e:	68eb      	ldr	r3, [r5, #12]
  400c90:	4798      	blx	r3
  400c92:	4601      	mov	r1, r0
  400c94:	4620      	mov	r0, r4
  400c96:	4b27      	ldr	r3, [pc, #156]	; (400d34 <udc_process_setup+0x44c>)
  400c98:	4798      	blx	r3
  400c9a:	2800      	cmp	r0, #0
  400c9c:	f43f ae39 	beq.w	400912 <udc_process_setup+0x2a>
	return udi_api->setup();
  400ca0:	68ab      	ldr	r3, [r5, #8]
  400ca2:	4798      	blx	r3
		if (udc_req_iface()) {
  400ca4:	4603      	mov	r3, r0
  400ca6:	2800      	cmp	r0, #0
  400ca8:	f47f ae3b 	bne.w	400922 <udc_process_setup+0x3a>
  400cac:	e631      	b.n	400912 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  400cae:	4b1a      	ldr	r3, [pc, #104]	; (400d18 <udc_process_setup+0x430>)
  400cb0:	781b      	ldrb	r3, [r3, #0]
  400cb2:	b30b      	cbz	r3, 400cf8 <udc_process_setup+0x410>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cb4:	4b19      	ldr	r3, [pc, #100]	; (400d1c <udc_process_setup+0x434>)
  400cb6:	681a      	ldr	r2, [r3, #0]
  400cb8:	6813      	ldr	r3, [r2, #0]
  400cba:	791b      	ldrb	r3, [r3, #4]
  400cbc:	b1f3      	cbz	r3, 400cfc <udc_process_setup+0x414>
  400cbe:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400cc0:	4e1c      	ldr	r6, [pc, #112]	; (400d34 <udc_process_setup+0x44c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cc2:	4f16      	ldr	r7, [pc, #88]	; (400d1c <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400cc4:	6853      	ldr	r3, [r2, #4]
  400cc6:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400cca:	68eb      	ldr	r3, [r5, #12]
  400ccc:	4798      	blx	r3
  400cce:	4601      	mov	r1, r0
  400cd0:	4620      	mov	r0, r4
  400cd2:	47b0      	blx	r6
  400cd4:	4603      	mov	r3, r0
  400cd6:	2800      	cmp	r0, #0
  400cd8:	f43f ae23 	beq.w	400922 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  400cdc:	68ab      	ldr	r3, [r5, #8]
  400cde:	4798      	blx	r3
  400ce0:	4603      	mov	r3, r0
  400ce2:	2800      	cmp	r0, #0
  400ce4:	f47f ae1d 	bne.w	400922 <udc_process_setup+0x3a>
			iface_num++) {
  400ce8:	3401      	adds	r4, #1
  400cea:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cec:	683a      	ldr	r2, [r7, #0]
  400cee:	6811      	ldr	r1, [r2, #0]
  400cf0:	7909      	ldrb	r1, [r1, #4]
  400cf2:	42a1      	cmp	r1, r4
  400cf4:	d8e6      	bhi.n	400cc4 <udc_process_setup+0x3dc>
  400cf6:	e614      	b.n	400922 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  400cf8:	2300      	movs	r3, #0
  400cfa:	e612      	b.n	400922 <udc_process_setup+0x3a>
	return false;
  400cfc:	2300      	movs	r3, #0
  400cfe:	e610      	b.n	400922 <udc_process_setup+0x3a>
			return false; // Error from USB host
  400d00:	2300      	movs	r3, #0
  400d02:	e60e      	b.n	400922 <udc_process_setup+0x3a>
	return false;
  400d04:	2300      	movs	r3, #0
  400d06:	e60c      	b.n	400922 <udc_process_setup+0x3a>
  400d08:	2040103c 	.word	0x2040103c
  400d0c:	004023a5 	.word	0x004023a5
  400d10:	20400020 	.word	0x20400020
  400d14:	00400861 	.word	0x00400861
  400d18:	20400ac8 	.word	0x20400ac8
  400d1c:	20400acc 	.word	0x20400acc
  400d20:	004007ed 	.word	0x004007ed
  400d24:	00400781 	.word	0x00400781
  400d28:	00402545 	.word	0x00402545
  400d2c:	00402925 	.word	0x00402925
  400d30:	00402441 	.word	0x00402441
  400d34:	0040070d 	.word	0x0040070d

00400d38 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400d38:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400d3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d3e:	4b8c      	ldr	r3, [pc, #560]	; (400f70 <board_init+0x238>)
  400d40:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d42:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  400d46:	4a8b      	ldr	r2, [pc, #556]	; (400f74 <board_init+0x23c>)
  400d48:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400d4a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  400d4e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  400d50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d54:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400d58:	4b87      	ldr	r3, [pc, #540]	; (400f78 <board_init+0x240>)
  400d5a:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400d5e:	f022 0201 	bic.w	r2, r2, #1
  400d62:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400d66:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400d6a:	f022 0201 	bic.w	r2, r2, #1
  400d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400d72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d76:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400d7a:	200a      	movs	r0, #10
  400d7c:	4c7f      	ldr	r4, [pc, #508]	; (400f7c <board_init+0x244>)
  400d7e:	47a0      	blx	r4
  400d80:	200b      	movs	r0, #11
  400d82:	47a0      	blx	r4
  400d84:	200c      	movs	r0, #12
  400d86:	47a0      	blx	r4
  400d88:	2010      	movs	r0, #16
  400d8a:	47a0      	blx	r4
  400d8c:	2011      	movs	r0, #17
  400d8e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d90:	4b7b      	ldr	r3, [pc, #492]	; (400f80 <board_init+0x248>)
  400d92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400d96:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d9c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d9e:	4979      	ldr	r1, [pc, #484]	; (400f84 <board_init+0x24c>)
  400da0:	f44f 7200 	mov.w	r2, #512	; 0x200
  400da4:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400da6:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400daa:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400dac:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400dae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400db2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400db4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400db8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400dba:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400dc0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400dc2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  400dc6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400dc8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400dca:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  400dce:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400dd0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400dd4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400dd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400ddc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400de0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400de2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400de6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400de8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400dee:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400df0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400df4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400df6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400df8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400dfc:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400dfe:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400e00:	4e61      	ldr	r6, [pc, #388]	; (400f88 <board_init+0x250>)
  400e02:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
  400e06:	f043 0310 	orr.w	r3, r3, #16
  400e0a:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
		base->PIO_PUDR = mask;
  400e0e:	4b5f      	ldr	r3, [pc, #380]	; (400f8c <board_init+0x254>)
  400e10:	2510      	movs	r5, #16
  400e12:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e14:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e18:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e1a:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e1c:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400e20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e22:	432a      	orrs	r2, r5
  400e24:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400e26:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e28:	432a      	orrs	r2, r5
  400e2a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e2c:	605d      	str	r5, [r3, #4]
	ioport_set_pin_dir(USB_ID_PIN, IOPORT_DIR_INPUT);
# endif
#endif

#ifdef CONF_BOARD_SDRAMC
	pio_configure_pin(SDRAM_A0_PIO, SDRAM_A_FLAGS);	//V71 A2
  400e2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e32:	2054      	movs	r0, #84	; 0x54
  400e34:	4c56      	ldr	r4, [pc, #344]	; (400f90 <board_init+0x258>)
  400e36:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A1_PIO, SDRAM_A_FLAGS);	//V71 A3
  400e38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e3c:	2055      	movs	r0, #85	; 0x55
  400e3e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);	//V71 A4
  400e40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e44:	2056      	movs	r0, #86	; 0x56
  400e46:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  //V71 A5
  400e48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e4c:	2057      	movs	r0, #87	; 0x57
  400e4e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  //V71 A6
  400e50:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e54:	2058      	movs	r0, #88	; 0x58
  400e56:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  //V71 A7
  400e58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e5c:	2059      	movs	r0, #89	; 0x59
  400e5e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  //V71 A8
  400e60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e64:	205a      	movs	r0, #90	; 0x5a
  400e66:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  //V71 A9
  400e68:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e6c:	205b      	movs	r0, #91	; 0x5b
  400e6e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);	 //V71 A10
  400e70:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e74:	205c      	movs	r0, #92	; 0x5c
  400e76:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  //V71 A11
  400e78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e7c:	205d      	movs	r0, #93	; 0x5d
  400e7e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS); //V71 SDA10
  400e80:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400e84:	206d      	movs	r0, #109	; 0x6d
  400e86:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A13_FLAGS); //V71 A13
  400e88:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e8c:	205f      	movs	r0, #95	; 0x5f
  400e8e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A12_PIO, SDRAM_A14_FLAGS); //V71 A14
  400e90:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400e94:	2012      	movs	r0, #18
  400e96:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  400e98:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400e9c:	2014      	movs	r0, #20
  400e9e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA1_PIO, SDRAM_BA1_FLAGS);
  400ea0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400ea4:	2000      	movs	r0, #0
  400ea6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  400ea8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400eac:	2077      	movs	r0, #119	; 0x77
  400eae:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  400eb0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400eb4:	206e      	movs	r0, #110	; 0x6e
  400eb6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  400eb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ebc:	204f      	movs	r0, #79	; 0x4f
  400ebe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  400ec0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400ec4:	2070      	movs	r0, #112	; 0x70
  400ec6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  400ec8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400ecc:	2071      	movs	r0, #113	; 0x71
  400ece:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  400ed0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400ed4:	207d      	movs	r0, #125	; 0x7d
  400ed6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  400ed8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400edc:	2052      	movs	r0, #82	; 0x52
  400ede:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  400ee0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400ee4:	206f      	movs	r0, #111	; 0x6f
  400ee6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);
  400ee8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400eec:	2040      	movs	r0, #64	; 0x40
  400eee:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);
  400ef0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ef4:	2041      	movs	r0, #65	; 0x41
  400ef6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);
  400ef8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400efc:	2042      	movs	r0, #66	; 0x42
  400efe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);
  400f00:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f04:	2043      	movs	r0, #67	; 0x43
  400f06:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);
  400f08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f0c:	2044      	movs	r0, #68	; 0x44
  400f0e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);
  400f10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f14:	2045      	movs	r0, #69	; 0x45
  400f16:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);
  400f18:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f1c:	2046      	movs	r0, #70	; 0x46
  400f1e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);
  400f20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f24:	2047      	movs	r0, #71	; 0x47
  400f26:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);
  400f28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f2c:	2080      	movs	r0, #128	; 0x80
  400f2e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);
  400f30:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f34:	2081      	movs	r0, #129	; 0x81
  400f36:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS);
  400f38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f3c:	2082      	movs	r0, #130	; 0x82
  400f3e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS);
  400f40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f44:	2083      	movs	r0, #131	; 0x83
  400f46:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS);
  400f48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f4c:	2084      	movs	r0, #132	; 0x84
  400f4e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS);
  400f50:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f54:	2085      	movs	r0, #133	; 0x85
  400f56:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS);
  400f58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f5c:	200f      	movs	r0, #15
  400f5e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS);
  400f60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f64:	4628      	mov	r0, r5
  400f66:	47a0      	blx	r4
	
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  400f68:	f8c6 5124 	str.w	r5, [r6, #292]	; 0x124
  400f6c:	bd70      	pop	{r4, r5, r6, pc}
  400f6e:	bf00      	nop
  400f70:	400e1850 	.word	0x400e1850
  400f74:	5a00080c 	.word	0x5a00080c
  400f78:	e000ed00 	.word	0xe000ed00
  400f7c:	004013a9 	.word	0x004013a9
  400f80:	400e0e00 	.word	0x400e0e00
  400f84:	400e1200 	.word	0x400e1200
  400f88:	40088000 	.word	0x40088000
  400f8c:	400e1000 	.word	0x400e1000
  400f90:	0040108d 	.word	0x0040108d

00400f94 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400f94:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400f96:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400f9a:	d03a      	beq.n	401012 <pio_set_peripheral+0x7e>
  400f9c:	d813      	bhi.n	400fc6 <pio_set_peripheral+0x32>
  400f9e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400fa2:	d025      	beq.n	400ff0 <pio_set_peripheral+0x5c>
  400fa4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400fa8:	d10a      	bne.n	400fc0 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400faa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400fac:	4313      	orrs	r3, r2
  400fae:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400fb0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400fb2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400fb4:	400b      	ands	r3, r1
  400fb6:	ea23 0302 	bic.w	r3, r3, r2
  400fba:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400fbc:	6042      	str	r2, [r0, #4]
  400fbe:	4770      	bx	lr
	switch (ul_type) {
  400fc0:	2900      	cmp	r1, #0
  400fc2:	d1fb      	bne.n	400fbc <pio_set_peripheral+0x28>
  400fc4:	4770      	bx	lr
  400fc6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400fca:	d021      	beq.n	401010 <pio_set_peripheral+0x7c>
  400fcc:	d809      	bhi.n	400fe2 <pio_set_peripheral+0x4e>
  400fce:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400fd2:	d1f3      	bne.n	400fbc <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400fd4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400fd6:	4313      	orrs	r3, r2
  400fd8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400fda:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400fdc:	4313      	orrs	r3, r2
  400fde:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400fe0:	e7ec      	b.n	400fbc <pio_set_peripheral+0x28>
	switch (ul_type) {
  400fe2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400fe6:	d013      	beq.n	401010 <pio_set_peripheral+0x7c>
  400fe8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400fec:	d010      	beq.n	401010 <pio_set_peripheral+0x7c>
  400fee:	e7e5      	b.n	400fbc <pio_set_peripheral+0x28>
{
  400ff0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ff2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ff4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400ff6:	43d3      	mvns	r3, r2
  400ff8:	4021      	ands	r1, r4
  400ffa:	461c      	mov	r4, r3
  400ffc:	4019      	ands	r1, r3
  400ffe:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401000:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401002:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401004:	400b      	ands	r3, r1
  401006:	4023      	ands	r3, r4
  401008:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40100a:	6042      	str	r2, [r0, #4]
}
  40100c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401010:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401012:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401014:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401016:	400b      	ands	r3, r1
  401018:	ea23 0302 	bic.w	r3, r3, r2
  40101c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40101e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401020:	4313      	orrs	r3, r2
  401022:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401024:	e7ca      	b.n	400fbc <pio_set_peripheral+0x28>

00401026 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401026:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401028:	f012 0f01 	tst.w	r2, #1
  40102c:	d10d      	bne.n	40104a <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  40102e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401030:	f012 0f0a 	tst.w	r2, #10
  401034:	d00b      	beq.n	40104e <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401036:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401038:	f012 0f02 	tst.w	r2, #2
  40103c:	d109      	bne.n	401052 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40103e:	f012 0f08 	tst.w	r2, #8
  401042:	d008      	beq.n	401056 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401044:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401048:	e005      	b.n	401056 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40104a:	6641      	str	r1, [r0, #100]	; 0x64
  40104c:	e7f0      	b.n	401030 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40104e:	6241      	str	r1, [r0, #36]	; 0x24
  401050:	e7f2      	b.n	401038 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401052:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401056:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401058:	6001      	str	r1, [r0, #0]
  40105a:	4770      	bx	lr

0040105c <pio_set_output>:
{
  40105c:	b410      	push	{r4}
  40105e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401060:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401062:	b94c      	cbnz	r4, 401078 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401064:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401066:	b14b      	cbz	r3, 40107c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401068:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40106a:	b94a      	cbnz	r2, 401080 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40106c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40106e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401070:	6001      	str	r1, [r0, #0]
}
  401072:	f85d 4b04 	ldr.w	r4, [sp], #4
  401076:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401078:	6641      	str	r1, [r0, #100]	; 0x64
  40107a:	e7f4      	b.n	401066 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40107c:	6541      	str	r1, [r0, #84]	; 0x54
  40107e:	e7f4      	b.n	40106a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401080:	6301      	str	r1, [r0, #48]	; 0x30
  401082:	e7f4      	b.n	40106e <pio_set_output+0x12>

00401084 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401084:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401086:	4770      	bx	lr

00401088 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401088:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40108a:	4770      	bx	lr

0040108c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40108c:	b570      	push	{r4, r5, r6, lr}
  40108e:	b082      	sub	sp, #8
  401090:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401092:	4c46      	ldr	r4, [pc, #280]	; (4011ac <pio_configure_pin+0x120>)
  401094:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  401098:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40109a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40109e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4010a2:	d059      	beq.n	401158 <pio_configure_pin+0xcc>
  4010a4:	d80a      	bhi.n	4010bc <pio_configure_pin+0x30>
  4010a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4010aa:	d02f      	beq.n	40110c <pio_configure_pin+0x80>
  4010ac:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4010b0:	d03f      	beq.n	401132 <pio_configure_pin+0xa6>
  4010b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4010b6:	d016      	beq.n	4010e6 <pio_configure_pin+0x5a>
		return 0;
  4010b8:	2000      	movs	r0, #0
  4010ba:	e012      	b.n	4010e2 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  4010bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4010c0:	d05d      	beq.n	40117e <pio_configure_pin+0xf2>
  4010c2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4010c6:	d05a      	beq.n	40117e <pio_configure_pin+0xf2>
  4010c8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4010cc:	d1f4      	bne.n	4010b8 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4010ce:	f000 011f 	and.w	r1, r0, #31
  4010d2:	2601      	movs	r6, #1
  4010d4:	462a      	mov	r2, r5
  4010d6:	fa06 f101 	lsl.w	r1, r6, r1
  4010da:	4620      	mov	r0, r4
  4010dc:	4b34      	ldr	r3, [pc, #208]	; (4011b0 <pio_configure_pin+0x124>)
  4010de:	4798      	blx	r3
	return 1;
  4010e0:	4630      	mov	r0, r6
}
  4010e2:	b002      	add	sp, #8
  4010e4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4010e6:	f000 001f 	and.w	r0, r0, #31
  4010ea:	2601      	movs	r6, #1
  4010ec:	4086      	lsls	r6, r0
  4010ee:	4632      	mov	r2, r6
  4010f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4010f4:	4620      	mov	r0, r4
  4010f6:	4b2f      	ldr	r3, [pc, #188]	; (4011b4 <pio_configure_pin+0x128>)
  4010f8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4010fa:	f015 0f01 	tst.w	r5, #1
  4010fe:	d102      	bne.n	401106 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  401100:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401102:	2001      	movs	r0, #1
  401104:	e7ed      	b.n	4010e2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401106:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401108:	2001      	movs	r0, #1
  40110a:	e7ea      	b.n	4010e2 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40110c:	f000 001f 	and.w	r0, r0, #31
  401110:	2601      	movs	r6, #1
  401112:	4086      	lsls	r6, r0
  401114:	4632      	mov	r2, r6
  401116:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40111a:	4620      	mov	r0, r4
  40111c:	4b25      	ldr	r3, [pc, #148]	; (4011b4 <pio_configure_pin+0x128>)
  40111e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401120:	f015 0f01 	tst.w	r5, #1
  401124:	d102      	bne.n	40112c <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  401126:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401128:	2001      	movs	r0, #1
  40112a:	e7da      	b.n	4010e2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40112c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40112e:	2001      	movs	r0, #1
  401130:	e7d7      	b.n	4010e2 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401132:	f000 001f 	and.w	r0, r0, #31
  401136:	2601      	movs	r6, #1
  401138:	4086      	lsls	r6, r0
  40113a:	4632      	mov	r2, r6
  40113c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401140:	4620      	mov	r0, r4
  401142:	4b1c      	ldr	r3, [pc, #112]	; (4011b4 <pio_configure_pin+0x128>)
  401144:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401146:	f015 0f01 	tst.w	r5, #1
  40114a:	d102      	bne.n	401152 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  40114c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40114e:	2001      	movs	r0, #1
  401150:	e7c7      	b.n	4010e2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401152:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401154:	2001      	movs	r0, #1
  401156:	e7c4      	b.n	4010e2 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401158:	f000 001f 	and.w	r0, r0, #31
  40115c:	2601      	movs	r6, #1
  40115e:	4086      	lsls	r6, r0
  401160:	4632      	mov	r2, r6
  401162:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401166:	4620      	mov	r0, r4
  401168:	4b12      	ldr	r3, [pc, #72]	; (4011b4 <pio_configure_pin+0x128>)
  40116a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40116c:	f015 0f01 	tst.w	r5, #1
  401170:	d102      	bne.n	401178 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  401172:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401174:	2001      	movs	r0, #1
  401176:	e7b4      	b.n	4010e2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401178:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40117a:	2001      	movs	r0, #1
  40117c:	e7b1      	b.n	4010e2 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40117e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401182:	f000 011f 	and.w	r1, r0, #31
  401186:	2601      	movs	r6, #1
  401188:	ea05 0306 	and.w	r3, r5, r6
  40118c:	9300      	str	r3, [sp, #0]
  40118e:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401192:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401196:	bf14      	ite	ne
  401198:	2200      	movne	r2, #0
  40119a:	2201      	moveq	r2, #1
  40119c:	fa06 f101 	lsl.w	r1, r6, r1
  4011a0:	4620      	mov	r0, r4
  4011a2:	4c05      	ldr	r4, [pc, #20]	; (4011b8 <pio_configure_pin+0x12c>)
  4011a4:	47a0      	blx	r4
	return 1;
  4011a6:	4630      	mov	r0, r6
		break;
  4011a8:	e79b      	b.n	4010e2 <pio_configure_pin+0x56>
  4011aa:	bf00      	nop
  4011ac:	00200707 	.word	0x00200707
  4011b0:	00401027 	.word	0x00401027
  4011b4:	00400f95 	.word	0x00400f95
  4011b8:	0040105d 	.word	0x0040105d

004011bc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4011bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011c0:	4604      	mov	r4, r0
  4011c2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4011c4:	4b0e      	ldr	r3, [pc, #56]	; (401200 <pio_handler_process+0x44>)
  4011c6:	4798      	blx	r3
  4011c8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4011ca:	4620      	mov	r0, r4
  4011cc:	4b0d      	ldr	r3, [pc, #52]	; (401204 <pio_handler_process+0x48>)
  4011ce:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4011d0:	4005      	ands	r5, r0
  4011d2:	d013      	beq.n	4011fc <pio_handler_process+0x40>
  4011d4:	4c0c      	ldr	r4, [pc, #48]	; (401208 <pio_handler_process+0x4c>)
  4011d6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4011da:	e003      	b.n	4011e4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4011dc:	42b4      	cmp	r4, r6
  4011de:	d00d      	beq.n	4011fc <pio_handler_process+0x40>
  4011e0:	3410      	adds	r4, #16
		while (status != 0) {
  4011e2:	b15d      	cbz	r5, 4011fc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4011e4:	6820      	ldr	r0, [r4, #0]
  4011e6:	4540      	cmp	r0, r8
  4011e8:	d1f8      	bne.n	4011dc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4011ea:	6861      	ldr	r1, [r4, #4]
  4011ec:	4229      	tst	r1, r5
  4011ee:	d0f5      	beq.n	4011dc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4011f0:	68e3      	ldr	r3, [r4, #12]
  4011f2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4011f4:	6863      	ldr	r3, [r4, #4]
  4011f6:	ea25 0503 	bic.w	r5, r5, r3
  4011fa:	e7ef      	b.n	4011dc <pio_handler_process+0x20>
  4011fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401200:	00401085 	.word	0x00401085
  401204:	00401089 	.word	0x00401089
  401208:	20400ad4 	.word	0x20400ad4

0040120c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40120c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40120e:	210a      	movs	r1, #10
  401210:	4801      	ldr	r0, [pc, #4]	; (401218 <PIOA_Handler+0xc>)
  401212:	4b02      	ldr	r3, [pc, #8]	; (40121c <PIOA_Handler+0x10>)
  401214:	4798      	blx	r3
  401216:	bd08      	pop	{r3, pc}
  401218:	400e0e00 	.word	0x400e0e00
  40121c:	004011bd 	.word	0x004011bd

00401220 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401220:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401222:	210b      	movs	r1, #11
  401224:	4801      	ldr	r0, [pc, #4]	; (40122c <PIOB_Handler+0xc>)
  401226:	4b02      	ldr	r3, [pc, #8]	; (401230 <PIOB_Handler+0x10>)
  401228:	4798      	blx	r3
  40122a:	bd08      	pop	{r3, pc}
  40122c:	400e1000 	.word	0x400e1000
  401230:	004011bd 	.word	0x004011bd

00401234 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401234:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401236:	210c      	movs	r1, #12
  401238:	4801      	ldr	r0, [pc, #4]	; (401240 <PIOC_Handler+0xc>)
  40123a:	4b02      	ldr	r3, [pc, #8]	; (401244 <PIOC_Handler+0x10>)
  40123c:	4798      	blx	r3
  40123e:	bd08      	pop	{r3, pc}
  401240:	400e1200 	.word	0x400e1200
  401244:	004011bd 	.word	0x004011bd

00401248 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401248:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40124a:	2110      	movs	r1, #16
  40124c:	4801      	ldr	r0, [pc, #4]	; (401254 <PIOD_Handler+0xc>)
  40124e:	4b02      	ldr	r3, [pc, #8]	; (401258 <PIOD_Handler+0x10>)
  401250:	4798      	blx	r3
  401252:	bd08      	pop	{r3, pc}
  401254:	400e1400 	.word	0x400e1400
  401258:	004011bd 	.word	0x004011bd

0040125c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40125c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40125e:	2111      	movs	r1, #17
  401260:	4801      	ldr	r0, [pc, #4]	; (401268 <PIOE_Handler+0xc>)
  401262:	4b02      	ldr	r3, [pc, #8]	; (40126c <PIOE_Handler+0x10>)
  401264:	4798      	blx	r3
  401266:	bd08      	pop	{r3, pc}
  401268:	400e1600 	.word	0x400e1600
  40126c:	004011bd 	.word	0x004011bd

00401270 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401270:	2803      	cmp	r0, #3
  401272:	d011      	beq.n	401298 <pmc_mck_set_division+0x28>
  401274:	2804      	cmp	r0, #4
  401276:	d012      	beq.n	40129e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401278:	2802      	cmp	r0, #2
  40127a:	bf0c      	ite	eq
  40127c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401280:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401282:	4a08      	ldr	r2, [pc, #32]	; (4012a4 <pmc_mck_set_division+0x34>)
  401284:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40128a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40128c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40128e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401290:	f013 0f08 	tst.w	r3, #8
  401294:	d0fb      	beq.n	40128e <pmc_mck_set_division+0x1e>
}
  401296:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401298:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40129c:	e7f1      	b.n	401282 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40129e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4012a2:	e7ee      	b.n	401282 <pmc_mck_set_division+0x12>
  4012a4:	400e0600 	.word	0x400e0600

004012a8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4012a8:	4a17      	ldr	r2, [pc, #92]	; (401308 <pmc_switch_mck_to_pllack+0x60>)
  4012aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4012b0:	4318      	orrs	r0, r3
  4012b2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4012b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012b6:	f013 0f08 	tst.w	r3, #8
  4012ba:	d10a      	bne.n	4012d2 <pmc_switch_mck_to_pllack+0x2a>
  4012bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4012c0:	4911      	ldr	r1, [pc, #68]	; (401308 <pmc_switch_mck_to_pllack+0x60>)
  4012c2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4012c4:	f012 0f08 	tst.w	r2, #8
  4012c8:	d103      	bne.n	4012d2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4012ca:	3b01      	subs	r3, #1
  4012cc:	d1f9      	bne.n	4012c2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4012ce:	2001      	movs	r0, #1
  4012d0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4012d2:	4a0d      	ldr	r2, [pc, #52]	; (401308 <pmc_switch_mck_to_pllack+0x60>)
  4012d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012d6:	f023 0303 	bic.w	r3, r3, #3
  4012da:	f043 0302 	orr.w	r3, r3, #2
  4012de:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4012e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012e2:	f013 0f08 	tst.w	r3, #8
  4012e6:	d10a      	bne.n	4012fe <pmc_switch_mck_to_pllack+0x56>
  4012e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4012ec:	4906      	ldr	r1, [pc, #24]	; (401308 <pmc_switch_mck_to_pllack+0x60>)
  4012ee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4012f0:	f012 0f08 	tst.w	r2, #8
  4012f4:	d105      	bne.n	401302 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4012f6:	3b01      	subs	r3, #1
  4012f8:	d1f9      	bne.n	4012ee <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4012fa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4012fc:	4770      	bx	lr
	return 0;
  4012fe:	2000      	movs	r0, #0
  401300:	4770      	bx	lr
  401302:	2000      	movs	r0, #0
  401304:	4770      	bx	lr
  401306:	bf00      	nop
  401308:	400e0600 	.word	0x400e0600

0040130c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40130c:	b9a0      	cbnz	r0, 401338 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40130e:	480e      	ldr	r0, [pc, #56]	; (401348 <pmc_switch_mainck_to_xtal+0x3c>)
  401310:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401312:	0209      	lsls	r1, r1, #8
  401314:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401316:	4a0d      	ldr	r2, [pc, #52]	; (40134c <pmc_switch_mainck_to_xtal+0x40>)
  401318:	401a      	ands	r2, r3
  40131a:	4b0d      	ldr	r3, [pc, #52]	; (401350 <pmc_switch_mainck_to_xtal+0x44>)
  40131c:	4313      	orrs	r3, r2
  40131e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401320:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401322:	4602      	mov	r2, r0
  401324:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401326:	f013 0f01 	tst.w	r3, #1
  40132a:	d0fb      	beq.n	401324 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40132c:	4a06      	ldr	r2, [pc, #24]	; (401348 <pmc_switch_mainck_to_xtal+0x3c>)
  40132e:	6a11      	ldr	r1, [r2, #32]
  401330:	4b08      	ldr	r3, [pc, #32]	; (401354 <pmc_switch_mainck_to_xtal+0x48>)
  401332:	430b      	orrs	r3, r1
  401334:	6213      	str	r3, [r2, #32]
  401336:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401338:	4903      	ldr	r1, [pc, #12]	; (401348 <pmc_switch_mainck_to_xtal+0x3c>)
  40133a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40133c:	4a06      	ldr	r2, [pc, #24]	; (401358 <pmc_switch_mainck_to_xtal+0x4c>)
  40133e:	401a      	ands	r2, r3
  401340:	4b06      	ldr	r3, [pc, #24]	; (40135c <pmc_switch_mainck_to_xtal+0x50>)
  401342:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401344:	620b      	str	r3, [r1, #32]
  401346:	4770      	bx	lr
  401348:	400e0600 	.word	0x400e0600
  40134c:	ffc8fffc 	.word	0xffc8fffc
  401350:	00370001 	.word	0x00370001
  401354:	01370000 	.word	0x01370000
  401358:	fec8fffc 	.word	0xfec8fffc
  40135c:	01370002 	.word	0x01370002

00401360 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401360:	4b02      	ldr	r3, [pc, #8]	; (40136c <pmc_osc_is_ready_mainck+0xc>)
  401362:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401364:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401368:	4770      	bx	lr
  40136a:	bf00      	nop
  40136c:	400e0600 	.word	0x400e0600

00401370 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401370:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401374:	4b01      	ldr	r3, [pc, #4]	; (40137c <pmc_disable_pllack+0xc>)
  401376:	629a      	str	r2, [r3, #40]	; 0x28
  401378:	4770      	bx	lr
  40137a:	bf00      	nop
  40137c:	400e0600 	.word	0x400e0600

00401380 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401380:	4b02      	ldr	r3, [pc, #8]	; (40138c <pmc_is_locked_pllack+0xc>)
  401382:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401384:	f000 0002 	and.w	r0, r0, #2
  401388:	4770      	bx	lr
  40138a:	bf00      	nop
  40138c:	400e0600 	.word	0x400e0600

00401390 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
  401390:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
  401394:	4b03      	ldr	r3, [pc, #12]	; (4013a4 <pmc_enable_upll_clock+0x14>)
  401396:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
  401398:	461a      	mov	r2, r3
  40139a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40139c:	f013 0f40 	tst.w	r3, #64	; 0x40
  4013a0:	d0fb      	beq.n	40139a <pmc_enable_upll_clock+0xa>
}
  4013a2:	4770      	bx	lr
  4013a4:	400e0600 	.word	0x400e0600

004013a8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4013a8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4013ac:	4b05      	ldr	r3, [pc, #20]	; (4013c4 <pmc_enable_periph_clk+0x1c>)
  4013ae:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4013b2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4013b6:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4013ba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4013be:	2000      	movs	r0, #0
  4013c0:	4770      	bx	lr
  4013c2:	bf00      	nop
  4013c4:	400e0600 	.word	0x400e0600

004013c8 <pmc_switch_udpck_to_upllck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
  4013c8:	0200      	lsls	r0, r0, #8
  4013ca:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  4013ce:	f040 0001 	orr.w	r0, r0, #1
  4013d2:	4b01      	ldr	r3, [pc, #4]	; (4013d8 <pmc_switch_udpck_to_upllck+0x10>)
  4013d4:	6398      	str	r0, [r3, #56]	; 0x38
  4013d6:	4770      	bx	lr
  4013d8:	400e0600 	.word	0x400e0600

004013dc <pmc_enable_udpck>:
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
  4013dc:	2220      	movs	r2, #32
  4013de:	4b01      	ldr	r3, [pc, #4]	; (4013e4 <pmc_enable_udpck+0x8>)
  4013e0:	601a      	str	r2, [r3, #0]
  4013e2:	4770      	bx	lr
  4013e4:	400e0600 	.word	0x400e0600

004013e8 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4013e8:	4b03      	ldr	r3, [pc, #12]	; (4013f8 <pmc_set_fast_startup_input+0x10>)
  4013ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4013ec:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4013f0:	4310      	orrs	r0, r2
  4013f2:	6718      	str	r0, [r3, #112]	; 0x70
  4013f4:	4770      	bx	lr
  4013f6:	bf00      	nop
  4013f8:	400e0600 	.word	0x400e0600

004013fc <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4013fc:	4770      	bx	lr
	...

00401400 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  401400:	4a10      	ldr	r2, [pc, #64]	; (401444 <pmc_enable_waitmode+0x44>)
  401402:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401404:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  401408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  40140c:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  40140e:	6a11      	ldr	r1, [r2, #32]
  401410:	4b0d      	ldr	r3, [pc, #52]	; (401448 <pmc_enable_waitmode+0x48>)
  401412:	430b      	orrs	r3, r1
  401414:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401416:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401418:	f013 0f08 	tst.w	r3, #8
  40141c:	d0fb      	beq.n	401416 <pmc_enable_waitmode+0x16>
  40141e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  401422:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  401424:	3b01      	subs	r3, #1
  401426:	d1fc      	bne.n	401422 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  401428:	4a06      	ldr	r2, [pc, #24]	; (401444 <pmc_enable_waitmode+0x44>)
  40142a:	6a13      	ldr	r3, [r2, #32]
  40142c:	f013 0f08 	tst.w	r3, #8
  401430:	d0fb      	beq.n	40142a <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  401432:	4a04      	ldr	r2, [pc, #16]	; (401444 <pmc_enable_waitmode+0x44>)
  401434:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401436:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40143a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  40143e:	6713      	str	r3, [r2, #112]	; 0x70
  401440:	4770      	bx	lr
  401442:	bf00      	nop
  401444:	400e0600 	.word	0x400e0600
  401448:	00370004 	.word	0x00370004

0040144c <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  40144c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  401450:	1e43      	subs	r3, r0, #1
  401452:	2b04      	cmp	r3, #4
  401454:	f200 8107 	bhi.w	401666 <pmc_sleep+0x21a>
  401458:	e8df f013 	tbh	[pc, r3, lsl #1]
  40145c:	00050005 	.word	0x00050005
  401460:	00150015 	.word	0x00150015
  401464:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  401466:	4a81      	ldr	r2, [pc, #516]	; (40166c <pmc_sleep+0x220>)
  401468:	6913      	ldr	r3, [r2, #16]
  40146a:	f023 0304 	bic.w	r3, r3, #4
  40146e:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  401470:	2201      	movs	r2, #1
  401472:	4b7f      	ldr	r3, [pc, #508]	; (401670 <pmc_sleep+0x224>)
  401474:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401476:	f3bf 8f5f 	dmb	sy
  40147a:	b662      	cpsie	i
  __ASM volatile ("dsb");
  40147c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  401480:	bf30      	wfi
  401482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401486:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  401488:	2803      	cmp	r0, #3
  40148a:	bf0c      	ite	eq
  40148c:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40148e:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  401492:	4b78      	ldr	r3, [pc, #480]	; (401674 <pmc_sleep+0x228>)
  401494:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401496:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401498:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40149c:	2200      	movs	r2, #0
  40149e:	4b74      	ldr	r3, [pc, #464]	; (401670 <pmc_sleep+0x224>)
  4014a0:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  4014a2:	2201      	movs	r2, #1
  4014a4:	4b74      	ldr	r3, [pc, #464]	; (401678 <pmc_sleep+0x22c>)
  4014a6:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  4014a8:	4b74      	ldr	r3, [pc, #464]	; (40167c <pmc_sleep+0x230>)
  4014aa:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  4014ac:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  4014ae:	4a74      	ldr	r2, [pc, #464]	; (401680 <pmc_sleep+0x234>)
  4014b0:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  4014b4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  4014b6:	4a73      	ldr	r2, [pc, #460]	; (401684 <pmc_sleep+0x238>)
  4014b8:	433a      	orrs	r2, r7
  4014ba:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  4014bc:	f005 0903 	and.w	r9, r5, #3
  4014c0:	f1b9 0f01 	cmp.w	r9, #1
  4014c4:	f240 8089 	bls.w	4015da <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  4014c8:	f025 0103 	bic.w	r1, r5, #3
  4014cc:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  4014d0:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4014d2:	461a      	mov	r2, r3
  4014d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014d6:	f013 0f08 	tst.w	r3, #8
  4014da:	d0fb      	beq.n	4014d4 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  4014dc:	f011 0f70 	tst.w	r1, #112	; 0x70
  4014e0:	d008      	beq.n	4014f4 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  4014e2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  4014e6:	4b65      	ldr	r3, [pc, #404]	; (40167c <pmc_sleep+0x230>)
  4014e8:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4014ea:	461a      	mov	r2, r3
  4014ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014ee:	f013 0f08 	tst.w	r3, #8
  4014f2:	d0fb      	beq.n	4014ec <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4014f4:	4b64      	ldr	r3, [pc, #400]	; (401688 <pmc_sleep+0x23c>)
  4014f6:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4014f8:	4a60      	ldr	r2, [pc, #384]	; (40167c <pmc_sleep+0x230>)
  4014fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401500:	d0fb      	beq.n	4014fa <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401502:	4a5e      	ldr	r2, [pc, #376]	; (40167c <pmc_sleep+0x230>)
  401504:	6a11      	ldr	r1, [r2, #32]
  401506:	4b61      	ldr	r3, [pc, #388]	; (40168c <pmc_sleep+0x240>)
  401508:	400b      	ands	r3, r1
  40150a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40150e:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401510:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401512:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401516:	d0fb      	beq.n	401510 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  401518:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  40151c:	4a58      	ldr	r2, [pc, #352]	; (401680 <pmc_sleep+0x234>)
  40151e:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  401520:	2c04      	cmp	r4, #4
  401522:	d05c      	beq.n	4015de <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  401524:	4c52      	ldr	r4, [pc, #328]	; (401670 <pmc_sleep+0x224>)
  401526:	2301      	movs	r3, #1
  401528:	7023      	strb	r3, [r4, #0]
  40152a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40152e:	b662      	cpsie	i

		pmc_enable_waitmode();
  401530:	4b57      	ldr	r3, [pc, #348]	; (401690 <pmc_sleep+0x244>)
  401532:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401534:	b672      	cpsid	i
  401536:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  40153a:	2300      	movs	r3, #0
  40153c:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  40153e:	f017 0f02 	tst.w	r7, #2
  401542:	d055      	beq.n	4015f0 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401544:	4a4d      	ldr	r2, [pc, #308]	; (40167c <pmc_sleep+0x230>)
  401546:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401548:	4952      	ldr	r1, [pc, #328]	; (401694 <pmc_sleep+0x248>)
  40154a:	4019      	ands	r1, r3
  40154c:	4b52      	ldr	r3, [pc, #328]	; (401698 <pmc_sleep+0x24c>)
  40154e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401550:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401552:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  401554:	4b51      	ldr	r3, [pc, #324]	; (40169c <pmc_sleep+0x250>)
  401556:	400b      	ands	r3, r1
  401558:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40155c:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40155e:	4b50      	ldr	r3, [pc, #320]	; (4016a0 <pmc_sleep+0x254>)
  401560:	4033      	ands	r3, r6
  401562:	2b00      	cmp	r3, #0
  401564:	d06e      	beq.n	401644 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  401566:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40156a:	4b44      	ldr	r3, [pc, #272]	; (40167c <pmc_sleep+0x230>)
  40156c:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40156e:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  401570:	f1b9 0f02 	cmp.w	r9, #2
  401574:	d104      	bne.n	401580 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  401576:	4a41      	ldr	r2, [pc, #260]	; (40167c <pmc_sleep+0x230>)
  401578:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40157a:	f013 0f02 	tst.w	r3, #2
  40157e:	d0fb      	beq.n	401578 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  401580:	4a3e      	ldr	r2, [pc, #248]	; (40167c <pmc_sleep+0x230>)
  401582:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  401588:	f005 0070 	and.w	r0, r5, #112	; 0x70
  40158c:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40158e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401590:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401592:	f013 0f08 	tst.w	r3, #8
  401596:	d0fb      	beq.n	401590 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  401598:	4b39      	ldr	r3, [pc, #228]	; (401680 <pmc_sleep+0x234>)
  40159a:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40159e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4015a2:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4015a4:	461a      	mov	r2, r3
  4015a6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015a8:	f013 0f08 	tst.w	r3, #8
  4015ac:	d0fb      	beq.n	4015a6 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  4015ae:	4a33      	ldr	r2, [pc, #204]	; (40167c <pmc_sleep+0x230>)
  4015b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015b2:	420b      	tst	r3, r1
  4015b4:	d0fc      	beq.n	4015b0 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  4015b6:	2200      	movs	r2, #0
  4015b8:	4b2f      	ldr	r3, [pc, #188]	; (401678 <pmc_sleep+0x22c>)
  4015ba:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  4015bc:	4b39      	ldr	r3, [pc, #228]	; (4016a4 <pmc_sleep+0x258>)
  4015be:	681b      	ldr	r3, [r3, #0]
  4015c0:	b11b      	cbz	r3, 4015ca <pmc_sleep+0x17e>
			callback_clocks_restored();
  4015c2:	4798      	blx	r3
			callback_clocks_restored = NULL;
  4015c4:	2200      	movs	r2, #0
  4015c6:	4b37      	ldr	r3, [pc, #220]	; (4016a4 <pmc_sleep+0x258>)
  4015c8:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  4015ca:	2201      	movs	r2, #1
  4015cc:	4b28      	ldr	r3, [pc, #160]	; (401670 <pmc_sleep+0x224>)
  4015ce:	701a      	strb	r2, [r3, #0]
  4015d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4015d4:	b662      	cpsie	i
  4015d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  4015da:	4629      	mov	r1, r5
  4015dc:	e77e      	b.n	4014dc <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015de:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4015e2:	6a11      	ldr	r1, [r2, #32]
  4015e4:	4b30      	ldr	r3, [pc, #192]	; (4016a8 <pmc_sleep+0x25c>)
  4015e6:	400b      	ands	r3, r1
  4015e8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4015ec:	6213      	str	r3, [r2, #32]
  4015ee:	e799      	b.n	401524 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4015f0:	f017 0f01 	tst.w	r7, #1
  4015f4:	d0b3      	beq.n	40155e <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4015f6:	4b21      	ldr	r3, [pc, #132]	; (40167c <pmc_sleep+0x230>)
  4015f8:	6a1b      	ldr	r3, [r3, #32]
  4015fa:	f013 0f01 	tst.w	r3, #1
  4015fe:	d10b      	bne.n	401618 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401600:	491e      	ldr	r1, [pc, #120]	; (40167c <pmc_sleep+0x230>)
  401602:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  401604:	4a29      	ldr	r2, [pc, #164]	; (4016ac <pmc_sleep+0x260>)
  401606:	401a      	ands	r2, r3
  401608:	4b29      	ldr	r3, [pc, #164]	; (4016b0 <pmc_sleep+0x264>)
  40160a:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40160c:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40160e:	460a      	mov	r2, r1
  401610:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401612:	f013 0f01 	tst.w	r3, #1
  401616:	d0fb      	beq.n	401610 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  401618:	4b18      	ldr	r3, [pc, #96]	; (40167c <pmc_sleep+0x230>)
  40161a:	6a1b      	ldr	r3, [r3, #32]
  40161c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401620:	d108      	bne.n	401634 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401622:	4a16      	ldr	r2, [pc, #88]	; (40167c <pmc_sleep+0x230>)
  401624:	6a11      	ldr	r1, [r2, #32]
  401626:	4b23      	ldr	r3, [pc, #140]	; (4016b4 <pmc_sleep+0x268>)
  401628:	430b      	orrs	r3, r1
  40162a:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40162c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40162e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401632:	d0fb      	beq.n	40162c <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401634:	4a11      	ldr	r2, [pc, #68]	; (40167c <pmc_sleep+0x230>)
  401636:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  401638:	4b18      	ldr	r3, [pc, #96]	; (40169c <pmc_sleep+0x250>)
  40163a:	400b      	ands	r3, r1
  40163c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401640:	6213      	str	r3, [r2, #32]
  401642:	e78c      	b.n	40155e <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  401644:	2100      	movs	r1, #0
  401646:	e793      	b.n	401570 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  401648:	4a08      	ldr	r2, [pc, #32]	; (40166c <pmc_sleep+0x220>)
  40164a:	6913      	ldr	r3, [r2, #16]
  40164c:	f043 0304 	orr.w	r3, r3, #4
  401650:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  401652:	4a19      	ldr	r2, [pc, #100]	; (4016b8 <pmc_sleep+0x26c>)
  401654:	4b19      	ldr	r3, [pc, #100]	; (4016bc <pmc_sleep+0x270>)
  401656:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  401658:	2201      	movs	r2, #1
  40165a:	4b05      	ldr	r3, [pc, #20]	; (401670 <pmc_sleep+0x224>)
  40165c:	701a      	strb	r2, [r3, #0]
  40165e:	f3bf 8f5f 	dmb	sy
  401662:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401664:	bf30      	wfi
  401666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40166a:	bf00      	nop
  40166c:	e000ed00 	.word	0xe000ed00
  401670:	204000e7 	.word	0x204000e7
  401674:	004013fd 	.word	0x004013fd
  401678:	20400b44 	.word	0x20400b44
  40167c:	400e0600 	.word	0x400e0600
  401680:	400e0c00 	.word	0x400e0c00
  401684:	00370008 	.word	0x00370008
  401688:	00401371 	.word	0x00401371
  40168c:	fec8ffff 	.word	0xfec8ffff
  401690:	00401401 	.word	0x00401401
  401694:	fec8fffc 	.word	0xfec8fffc
  401698:	01370002 	.word	0x01370002
  40169c:	ffc8ff87 	.word	0xffc8ff87
  4016a0:	07ff0000 	.word	0x07ff0000
  4016a4:	20400b48 	.word	0x20400b48
  4016a8:	ffc8fffe 	.word	0xffc8fffe
  4016ac:	ffc8fffc 	.word	0xffc8fffc
  4016b0:	00370001 	.word	0x00370001
  4016b4:	01370000 	.word	0x01370000
  4016b8:	a5000004 	.word	0xa5000004
  4016bc:	400e1810 	.word	0x400e1810

004016c0 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  4016c0:	4b02      	ldr	r3, [pc, #8]	; (4016cc <pmc_is_wakeup_clocks_restored+0xc>)
  4016c2:	7818      	ldrb	r0, [r3, #0]
}
  4016c4:	f080 0001 	eor.w	r0, r0, #1
  4016c8:	4770      	bx	lr
  4016ca:	bf00      	nop
  4016cc:	20400b44 	.word	0x20400b44

004016d0 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_idle true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  4016d0:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  4016d2:	4601      	mov	r1, r0
  4016d4:	bb28      	cbnz	r0, 401722 <udd_sleep_mode+0x52>
  4016d6:	4b24      	ldr	r3, [pc, #144]	; (401768 <udd_sleep_mode+0x98>)
  4016d8:	781b      	ldrb	r3, [r3, #0]
  4016da:	b91b      	cbnz	r3, 4016e4 <udd_sleep_mode+0x14>
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(USBHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  4016dc:	4b22      	ldr	r3, [pc, #136]	; (401768 <udd_sleep_mode+0x98>)
  4016de:	7019      	strb	r1, [r3, #0]
}
  4016e0:	b002      	add	sp, #8
  4016e2:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  4016e4:	4b21      	ldr	r3, [pc, #132]	; (40176c <udd_sleep_mode+0x9c>)
  4016e6:	789b      	ldrb	r3, [r3, #2]
  4016e8:	b903      	cbnz	r3, 4016ec <udd_sleep_mode+0x1c>
  4016ea:	e7fe      	b.n	4016ea <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4016ec:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4016f0:	fab3 f383 	clz	r3, r3
  4016f4:	095b      	lsrs	r3, r3, #5
  4016f6:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4016f8:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4016fa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4016fe:	2200      	movs	r2, #0
  401700:	4b1b      	ldr	r3, [pc, #108]	; (401770 <udd_sleep_mode+0xa0>)
  401702:	701a      	strb	r2, [r3, #0]
	return flags;
  401704:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  401706:	4a19      	ldr	r2, [pc, #100]	; (40176c <udd_sleep_mode+0x9c>)
  401708:	7893      	ldrb	r3, [r2, #2]
  40170a:	3b01      	subs	r3, #1
  40170c:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  40170e:	2800      	cmp	r0, #0
  401710:	d0e4      	beq.n	4016dc <udd_sleep_mode+0xc>
		cpu_irq_enable();
  401712:	2201      	movs	r2, #1
  401714:	4b16      	ldr	r3, [pc, #88]	; (401770 <udd_sleep_mode+0xa0>)
  401716:	701a      	strb	r2, [r3, #0]
  401718:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40171c:	b662      	cpsie	i
  40171e:	e7dd      	b.n	4016dc <udd_sleep_mode+0xc>
  401720:	e7fe      	b.n	401720 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  401722:	4b11      	ldr	r3, [pc, #68]	; (401768 <udd_sleep_mode+0x98>)
  401724:	781b      	ldrb	r3, [r3, #0]
  401726:	2b00      	cmp	r3, #0
  401728:	d1d8      	bne.n	4016dc <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  40172a:	4b10      	ldr	r3, [pc, #64]	; (40176c <udd_sleep_mode+0x9c>)
  40172c:	789b      	ldrb	r3, [r3, #2]
  40172e:	2bff      	cmp	r3, #255	; 0xff
  401730:	d0f6      	beq.n	401720 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401732:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401736:	fab3 f383 	clz	r3, r3
  40173a:	095b      	lsrs	r3, r3, #5
  40173c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40173e:	b672      	cpsid	i
  401740:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401744:	2200      	movs	r2, #0
  401746:	4b0a      	ldr	r3, [pc, #40]	; (401770 <udd_sleep_mode+0xa0>)
  401748:	701a      	strb	r2, [r3, #0]
	return flags;
  40174a:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  40174c:	4a07      	ldr	r2, [pc, #28]	; (40176c <udd_sleep_mode+0x9c>)
  40174e:	7893      	ldrb	r3, [r2, #2]
  401750:	3301      	adds	r3, #1
  401752:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  401754:	2800      	cmp	r0, #0
  401756:	d0c1      	beq.n	4016dc <udd_sleep_mode+0xc>
		cpu_irq_enable();
  401758:	2201      	movs	r2, #1
  40175a:	4b05      	ldr	r3, [pc, #20]	; (401770 <udd_sleep_mode+0xa0>)
  40175c:	701a      	strb	r2, [r3, #0]
  40175e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401762:	b662      	cpsie	i
  401764:	e7ba      	b.n	4016dc <udd_sleep_mode+0xc>
  401766:	bf00      	nop
  401768:	20400b4d 	.word	0x20400b4d
  40176c:	20401034 	.word	0x20401034
  401770:	204000e7 	.word	0x204000e7

00401774 <udd_ctrl_init>:
	udd_enable_endpoint_interrupt(0);
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
  401774:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401776:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40177a:	fab3 f383 	clz	r3, r3
  40177e:	095b      	lsrs	r3, r3, #5
  401780:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401782:	b672      	cpsid	i
  401784:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401788:	2200      	movs	r2, #0
  40178a:	4b0c      	ldr	r3, [pc, #48]	; (4017bc <udd_ctrl_init+0x48>)
  40178c:	701a      	strb	r2, [r3, #0]
	return flags;
  40178e:	9b01      	ldr	r3, [sp, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
  401790:	2101      	movs	r1, #1
  401792:	4a0b      	ldr	r2, [pc, #44]	; (4017c0 <udd_ctrl_init+0x4c>)
  401794:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  401796:	b123      	cbz	r3, 4017a2 <udd_ctrl_init+0x2e>
		cpu_irq_enable();
  401798:	4b08      	ldr	r3, [pc, #32]	; (4017bc <udd_ctrl_init+0x48>)
  40179a:	7019      	strb	r1, [r3, #0]
  40179c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4017a0:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
  4017a2:	2202      	movs	r2, #2
  4017a4:	4b07      	ldr	r3, [pc, #28]	; (4017c4 <udd_ctrl_init+0x50>)
  4017a6:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
  4017a8:	4a07      	ldr	r2, [pc, #28]	; (4017c8 <udd_ctrl_init+0x54>)
  4017aa:	2300      	movs	r3, #0
  4017ac:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4017ae:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  4017b0:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  4017b2:	4a06      	ldr	r2, [pc, #24]	; (4017cc <udd_ctrl_init+0x58>)
  4017b4:	7013      	strb	r3, [r2, #0]
}
  4017b6:	b002      	add	sp, #8
  4017b8:	4770      	bx	lr
  4017ba:	bf00      	nop
  4017bc:	204000e7 	.word	0x204000e7
  4017c0:	40038220 	.word	0x40038220
  4017c4:	40038160 	.word	0x40038160
  4017c8:	2040103c 	.word	0x2040103c
  4017cc:	20400b54 	.word	0x20400b54

004017d0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4017d0:	2205      	movs	r2, #5
  4017d2:	4b03      	ldr	r3, [pc, #12]	; (4017e0 <udd_ctrl_stall_data+0x10>)
  4017d4:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  4017d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4017da:	4b02      	ldr	r3, [pc, #8]	; (4017e4 <udd_ctrl_stall_data+0x14>)
  4017dc:	601a      	str	r2, [r3, #0]
  4017de:	4770      	bx	lr
  4017e0:	20400b54 	.word	0x20400b54
  4017e4:	400381f0 	.word	0x400381f0

004017e8 <udd_ctrl_send_zlp_in>:
}


static void udd_ctrl_send_zlp_in(void)
{
  4017e8:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  4017ea:	2203      	movs	r2, #3
  4017ec:	4b0f      	ldr	r3, [pc, #60]	; (40182c <udd_ctrl_send_zlp_in+0x44>)
  4017ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4017f0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4017f4:	fab3 f383 	clz	r3, r3
  4017f8:	095b      	lsrs	r3, r3, #5
  4017fa:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4017fc:	b672      	cpsid	i
  4017fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401802:	2200      	movs	r2, #0
  401804:	4b0a      	ldr	r3, [pc, #40]	; (401830 <udd_ctrl_send_zlp_in+0x48>)
  401806:	701a      	strb	r2, [r3, #0]
	return flags;
  401808:	9801      	ldr	r0, [sp, #4]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
  40180a:	490a      	ldr	r1, [pc, #40]	; (401834 <udd_ctrl_send_zlp_in+0x4c>)
  40180c:	2201      	movs	r2, #1
  40180e:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
  401810:	4b09      	ldr	r3, [pc, #36]	; (401838 <udd_ctrl_send_zlp_in+0x50>)
  401812:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
  401814:	2208      	movs	r2, #8
  401816:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
  401818:	601a      	str	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
  40181a:	b128      	cbz	r0, 401828 <udd_ctrl_send_zlp_in+0x40>
		cpu_irq_enable();
  40181c:	2201      	movs	r2, #1
  40181e:	4b04      	ldr	r3, [pc, #16]	; (401830 <udd_ctrl_send_zlp_in+0x48>)
  401820:	701a      	strb	r2, [r3, #0]
  401822:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401826:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
  401828:	b002      	add	sp, #8
  40182a:	4770      	bx	lr
  40182c:	20400b54 	.word	0x20400b54
  401830:	204000e7 	.word	0x204000e7
  401834:	40038160 	.word	0x40038160
  401838:	400381f0 	.word	0x400381f0

0040183c <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
  40183c:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  40183e:	4b02      	ldr	r3, [pc, #8]	; (401848 <udd_ctrl_endofrequest+0xc>)
  401840:	691b      	ldr	r3, [r3, #16]
  401842:	b103      	cbz	r3, 401846 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  401844:	4798      	blx	r3
  401846:	bd08      	pop	{r3, pc}
  401848:	2040103c 	.word	0x2040103c

0040184c <udd_ctrl_in_sent>:
{
  40184c:	b530      	push	{r4, r5, lr}
  40184e:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401850:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401854:	fab3 f383 	clz	r3, r3
  401858:	095b      	lsrs	r3, r3, #5
  40185a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40185c:	b672      	cpsid	i
  40185e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401862:	2200      	movs	r2, #0
  401864:	4b4f      	ldr	r3, [pc, #316]	; (4019a4 <udd_ctrl_in_sent+0x158>)
  401866:	701a      	strb	r2, [r3, #0]
	return flags;
  401868:	9b01      	ldr	r3, [sp, #4]
	udd_disable_in_send_interrupt(0);
  40186a:	2101      	movs	r1, #1
  40186c:	4a4e      	ldr	r2, [pc, #312]	; (4019a8 <udd_ctrl_in_sent+0x15c>)
  40186e:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  401870:	b123      	cbz	r3, 40187c <udd_ctrl_in_sent+0x30>
		cpu_irq_enable();
  401872:	4b4c      	ldr	r3, [pc, #304]	; (4019a4 <udd_ctrl_in_sent+0x158>)
  401874:	7019      	strb	r1, [r3, #0]
  401876:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40187a:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  40187c:	4b4b      	ldr	r3, [pc, #300]	; (4019ac <udd_ctrl_in_sent+0x160>)
  40187e:	781b      	ldrb	r3, [r3, #0]
  401880:	2b03      	cmp	r3, #3
  401882:	d05d      	beq.n	401940 <udd_ctrl_in_sent+0xf4>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
  401884:	4b4a      	ldr	r3, [pc, #296]	; (4019b0 <udd_ctrl_in_sent+0x164>)
  401886:	881b      	ldrh	r3, [r3, #0]
  401888:	4a4a      	ldr	r2, [pc, #296]	; (4019b4 <udd_ctrl_in_sent+0x168>)
  40188a:	8994      	ldrh	r4, [r2, #12]
  40188c:	1ae4      	subs	r4, r4, r3
  40188e:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  401890:	b9c4      	cbnz	r4, 4018c4 <udd_ctrl_in_sent+0x78>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
  401892:	4a49      	ldr	r2, [pc, #292]	; (4019b8 <udd_ctrl_in_sent+0x16c>)
  401894:	8811      	ldrh	r1, [r2, #0]
  401896:	440b      	add	r3, r1
  401898:	b29b      	uxth	r3, r3
  40189a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
  40189c:	4a45      	ldr	r2, [pc, #276]	; (4019b4 <udd_ctrl_in_sent+0x168>)
  40189e:	88d2      	ldrh	r2, [r2, #6]
  4018a0:	429a      	cmp	r2, r3
  4018a2:	d052      	beq.n	40194a <udd_ctrl_in_sent+0xfe>
					|| b_shortpacket) {
  4018a4:	4b45      	ldr	r3, [pc, #276]	; (4019bc <udd_ctrl_in_sent+0x170>)
  4018a6:	781b      	ldrb	r3, [r3, #0]
  4018a8:	2b00      	cmp	r3, #0
  4018aa:	d14e      	bne.n	40194a <udd_ctrl_in_sent+0xfe>
		if ((!udd_g_ctrlreq.over_under_run)
  4018ac:	4b41      	ldr	r3, [pc, #260]	; (4019b4 <udd_ctrl_in_sent+0x168>)
  4018ae:	695b      	ldr	r3, [r3, #20]
  4018b0:	2b00      	cmp	r3, #0
  4018b2:	d067      	beq.n	401984 <udd_ctrl_in_sent+0x138>
				|| (!udd_g_ctrlreq.over_under_run())) {
  4018b4:	4798      	blx	r3
  4018b6:	2800      	cmp	r0, #0
  4018b8:	d064      	beq.n	401984 <udd_ctrl_in_sent+0x138>
			udd_ctrl_payload_buf_cnt = 0;
  4018ba:	2200      	movs	r2, #0
  4018bc:	4b3c      	ldr	r3, [pc, #240]	; (4019b0 <udd_ctrl_in_sent+0x164>)
  4018be:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  4018c0:	4b3c      	ldr	r3, [pc, #240]	; (4019b4 <udd_ctrl_in_sent+0x168>)
  4018c2:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  4018c4:	2c3f      	cmp	r4, #63	; 0x3f
  4018c6:	d95d      	bls.n	401984 <udd_ctrl_in_sent+0x138>
		b_shortpacket = false;
  4018c8:	2200      	movs	r2, #0
  4018ca:	4b3c      	ldr	r3, [pc, #240]	; (4019bc <udd_ctrl_in_sent+0x170>)
  4018cc:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  4018ce:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  4018d0:	4b38      	ldr	r3, [pc, #224]	; (4019b4 <udd_ctrl_in_sent+0x168>)
  4018d2:	6899      	ldr	r1, [r3, #8]
  4018d4:	4b36      	ldr	r3, [pc, #216]	; (4019b0 <udd_ctrl_in_sent+0x164>)
  4018d6:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4018d8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4018dc:	fab3 f383 	clz	r3, r3
  4018e0:	095b      	lsrs	r3, r3, #5
  4018e2:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  4018e4:	b672      	cpsid	i
  4018e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4018ea:	2200      	movs	r2, #0
  4018ec:	4b2d      	ldr	r3, [pc, #180]	; (4019a4 <udd_ctrl_in_sent+0x158>)
  4018ee:	701a      	strb	r2, [r3, #0]
	return flags;
  4018f0:	9d02      	ldr	r5, [sp, #8]
	if (Is_udd_out_received(0)) {
  4018f2:	4b33      	ldr	r3, [pc, #204]	; (4019c0 <udd_ctrl_in_sent+0x174>)
  4018f4:	681b      	ldr	r3, [r3, #0]
  4018f6:	f013 0f02 	tst.w	r3, #2
  4018fa:	d147      	bne.n	40198c <udd_ctrl_in_sent+0x140>
	for (i = 0; i < nb_remain; i++) {
  4018fc:	b154      	cbz	r4, 401914 <udd_ctrl_in_sent+0xc8>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  4018fe:	4401      	add	r1, r0
  401900:	4830      	ldr	r0, [pc, #192]	; (4019c4 <udd_ctrl_in_sent+0x178>)
		*ptr_dest++ = *ptr_src++;
  401902:	1c43      	adds	r3, r0, #1
  401904:	780a      	ldrb	r2, [r1, #0]
  401906:	b2d2      	uxtb	r2, r2
  401908:	7002      	strb	r2, [r0, #0]
  40190a:	4618      	mov	r0, r3
  40190c:	3101      	adds	r1, #1
	for (i = 0; i < nb_remain; i++) {
  40190e:	b2db      	uxtb	r3, r3
  401910:	42a3      	cmp	r3, r4
  401912:	d3f6      	bcc.n	401902 <udd_ctrl_in_sent+0xb6>
	udd_ctrl_payload_buf_cnt += nb_remain;
  401914:	4b26      	ldr	r3, [pc, #152]	; (4019b0 <udd_ctrl_in_sent+0x164>)
  401916:	881a      	ldrh	r2, [r3, #0]
  401918:	4414      	add	r4, r2
  40191a:	801c      	strh	r4, [r3, #0]
  __ASM volatile ("dsb");
  40191c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401920:	f3bf 8f6f 	isb	sy
	udd_ack_in_send(0);
  401924:	2301      	movs	r3, #1
  401926:	4a28      	ldr	r2, [pc, #160]	; (4019c8 <udd_ctrl_in_sent+0x17c>)
  401928:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
  40192a:	3290      	adds	r2, #144	; 0x90
  40192c:	6013      	str	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  40192e:	2d00      	cmp	r5, #0
  401930:	d036      	beq.n	4019a0 <udd_ctrl_in_sent+0x154>
		cpu_irq_enable();
  401932:	461a      	mov	r2, r3
  401934:	4b1b      	ldr	r3, [pc, #108]	; (4019a4 <udd_ctrl_in_sent+0x158>)
  401936:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401938:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40193c:	b662      	cpsie	i
  40193e:	e02f      	b.n	4019a0 <udd_ctrl_in_sent+0x154>
		udd_ctrl_endofrequest();
  401940:	4b22      	ldr	r3, [pc, #136]	; (4019cc <udd_ctrl_in_sent+0x180>)
  401942:	4798      	blx	r3
		udd_ctrl_init();
  401944:	4b22      	ldr	r3, [pc, #136]	; (4019d0 <udd_ctrl_in_sent+0x184>)
  401946:	4798      	blx	r3
		return;
  401948:	e02a      	b.n	4019a0 <udd_ctrl_in_sent+0x154>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  40194a:	2204      	movs	r2, #4
  40194c:	4b17      	ldr	r3, [pc, #92]	; (4019ac <udd_ctrl_in_sent+0x160>)
  40194e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401950:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401954:	fab3 f383 	clz	r3, r3
  401958:	095b      	lsrs	r3, r3, #5
  40195a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  40195c:	b672      	cpsid	i
  40195e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401962:	2200      	movs	r2, #0
  401964:	4b0f      	ldr	r3, [pc, #60]	; (4019a4 <udd_ctrl_in_sent+0x158>)
  401966:	701a      	strb	r2, [r3, #0]
	return flags;
  401968:	9a03      	ldr	r2, [sp, #12]
	udd_ack_nak_in(0);
  40196a:	2310      	movs	r3, #16
  40196c:	4916      	ldr	r1, [pc, #88]	; (4019c8 <udd_ctrl_in_sent+0x17c>)
  40196e:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
  401970:	3190      	adds	r1, #144	; 0x90
  401972:	600b      	str	r3, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  401974:	b1a2      	cbz	r2, 4019a0 <udd_ctrl_in_sent+0x154>
		cpu_irq_enable();
  401976:	2201      	movs	r2, #1
  401978:	4b0a      	ldr	r3, [pc, #40]	; (4019a4 <udd_ctrl_in_sent+0x158>)
  40197a:	701a      	strb	r2, [r3, #0]
  40197c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401980:	b662      	cpsie	i
  401982:	e00d      	b.n	4019a0 <udd_ctrl_in_sent+0x154>
		b_shortpacket = true;
  401984:	2201      	movs	r2, #1
  401986:	4b0d      	ldr	r3, [pc, #52]	; (4019bc <udd_ctrl_in_sent+0x170>)
  401988:	701a      	strb	r2, [r3, #0]
  40198a:	e7a1      	b.n	4018d0 <udd_ctrl_in_sent+0x84>
	if (cpu_irq_is_enabled_flags(flags))
  40198c:	b12d      	cbz	r5, 40199a <udd_ctrl_in_sent+0x14e>
		cpu_irq_enable();
  40198e:	2201      	movs	r2, #1
  401990:	4b04      	ldr	r3, [pc, #16]	; (4019a4 <udd_ctrl_in_sent+0x158>)
  401992:	701a      	strb	r2, [r3, #0]
  401994:	f3bf 8f5f 	dmb	sy
  401998:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  40199a:	2204      	movs	r2, #4
  40199c:	4b03      	ldr	r3, [pc, #12]	; (4019ac <udd_ctrl_in_sent+0x160>)
  40199e:	701a      	strb	r2, [r3, #0]
}
  4019a0:	b005      	add	sp, #20
  4019a2:	bd30      	pop	{r4, r5, pc}
  4019a4:	204000e7 	.word	0x204000e7
  4019a8:	40038220 	.word	0x40038220
  4019ac:	20400b54 	.word	0x20400b54
  4019b0:	20400b50 	.word	0x20400b50
  4019b4:	2040103c 	.word	0x2040103c
  4019b8:	20400b52 	.word	0x20400b52
  4019bc:	20400b4c 	.word	0x20400b4c
  4019c0:	40038130 	.word	0x40038130
  4019c4:	a0100000 	.word	0xa0100000
  4019c8:	40038160 	.word	0x40038160
  4019cc:	0040183d 	.word	0x0040183d
  4019d0:	00401775 	.word	0x00401775

004019d4 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
  4019d4:	7d03      	ldrb	r3, [r0, #20]
  4019d6:	f013 0f01 	tst.w	r3, #1
  4019da:	d013      	beq.n	401a04 <udd_ep_finish_job+0x30>
{
  4019dc:	b510      	push	{r4, lr}
  4019de:	460c      	mov	r4, r1
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
  4019e0:	7d03      	ldrb	r3, [r0, #20]
  4019e2:	f36f 0300 	bfc	r3, #0, #1
  4019e6:	7503      	strb	r3, [r0, #20]
	if (NULL == ptr_job->call_trans) {
  4019e8:	6803      	ldr	r3, [r0, #0]
  4019ea:	b153      	cbz	r3, 401a02 <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
  4019ec:	4906      	ldr	r1, [pc, #24]	; (401a08 <udd_ep_finish_job+0x34>)
  4019ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  4019f2:	f411 7f80 	tst.w	r1, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
  4019f6:	bf18      	it	ne
  4019f8:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
  4019fc:	6881      	ldr	r1, [r0, #8]
  4019fe:	4620      	mov	r0, r4
  401a00:	4798      	blx	r3
  401a02:	bd10      	pop	{r4, pc}
  401a04:	4770      	bx	lr
  401a06:	bf00      	nop
  401a08:	40038100 	.word	0x40038100

00401a0c <udd_ep_trans_done>:
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
  401a0c:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
  401a0e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401a12:	4a5f      	ldr	r2, [pc, #380]	; (401b90 <udd_ep_trans_done+0x184>)
  401a14:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  401a18:	7d12      	ldrb	r2, [r2, #20]
  401a1a:	f012 0f01 	tst.w	r2, #1
  401a1e:	f000 80b6 	beq.w	401b8e <udd_ep_trans_done+0x182>
{
  401a22:	b5f0      	push	{r4, r5, r6, r7, lr}
  401a24:	b083      	sub	sp, #12
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
  401a26:	460a      	mov	r2, r1
  401a28:	4959      	ldr	r1, [pc, #356]	; (401b90 <udd_ep_trans_done+0x184>)
  401a2a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401a2e:	68d1      	ldr	r1, [r2, #12]
  401a30:	6892      	ldr	r2, [r2, #8]
  401a32:	4291      	cmp	r1, r2
  401a34:	d078      	beq.n	401b28 <udd_ep_trans_done+0x11c>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
  401a36:	1a52      	subs	r2, r2, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
  401a38:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  401a3c:	d81b      	bhi.n	401a76 <udd_ep_trans_done+0x6a>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
  401a3e:	0417      	lsls	r7, r2, #16
		}
		if (Is_udd_endpoint_in(ep)) {
  401a40:	4c54      	ldr	r4, [pc, #336]	; (401b94 <udd_ep_trans_done+0x188>)
  401a42:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  401a46:	f415 7f80 	tst.w	r5, #256	; 0x100
  401a4a:	d018      	beq.n	401a7e <udd_ep_trans_done+0x72>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
  401a4c:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  401a50:	f3c5 1502 	ubfx	r5, r5, #4, #3
  401a54:	2408      	movs	r4, #8
  401a56:	40ac      	lsls	r4, r5
  401a58:	3c01      	subs	r4, #1
  401a5a:	4214      	tst	r4, r2
  401a5c:	d017      	beq.n	401a8e <udd_ep_trans_done+0x82>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  401a5e:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
  401a62:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  401a66:	4d4a      	ldr	r5, [pc, #296]	; (401b90 <udd_ep_trans_done+0x184>)
  401a68:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
  401a6c:	7d25      	ldrb	r5, [r4, #20]
  401a6e:	f36f 0541 	bfc	r5, #1, #1
  401a72:	7525      	strb	r5, [r4, #20]
  401a74:	e00b      	b.n	401a8e <udd_ep_trans_done+0x82>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
  401a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  401a7a:	2700      	movs	r7, #0
  401a7c:	e7e0      	b.n	401a40 <udd_ep_trans_done+0x34>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
  401a7e:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  401a82:	f3c5 25c1 	ubfx	r5, r5, #11, #2
  401a86:	2d01      	cmp	r5, #1
  401a88:	d037      	beq.n	401afa <udd_ep_trans_done+0xee>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT
  401a8a:	f047 0714 	orr.w	r7, r7, #20
						| USBHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
  401a8e:	4c42      	ldr	r4, [pc, #264]	; (401b98 <udd_ep_trans_done+0x18c>)
  401a90:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  401a94:	eb03 0543 	add.w	r5, r3, r3, lsl #1
  401a98:	4e3d      	ldr	r6, [pc, #244]	; (401b90 <udd_ep_trans_done+0x184>)
  401a9a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  401a9e:	686d      	ldr	r5, [r5, #4]
  401aa0:	4429      	add	r1, r5
  401aa2:	6061      	str	r1, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401aa4:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401aa8:	fab1 f181 	clz	r1, r1
  401aac:	0949      	lsrs	r1, r1, #5
  401aae:	9101      	str	r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401ab0:	b672      	cpsid	i
  401ab2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ab6:	2500      	movs	r5, #0
  401ab8:	4938      	ldr	r1, [pc, #224]	; (401b9c <udd_ep_trans_done+0x190>)
  401aba:	700d      	strb	r5, [r1, #0]
	return flags;
  401abc:	9d01      	ldr	r5, [sp, #4]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
  401abe:	68e1      	ldr	r1, [r4, #12]
  401ac0:	f011 0f10 	tst.w	r1, #16
  401ac4:	d122      	bne.n	401b0c <udd_ep_trans_done+0x100>
		udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT |
  401ac6:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& USBHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
  401aca:	60a7      	str	r7, [r4, #8]
			ptr_job->buf_cnt += next_trans;
  401acc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  401ad0:	eb06 01c0 	add.w	r1, r6, r0, lsl #3
  401ad4:	68c8      	ldr	r0, [r1, #12]
  401ad6:	4410      	add	r0, r2
  401ad8:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
  401ada:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
  401adc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  401ae0:	fa00 f303 	lsl.w	r3, r0, r3
  401ae4:	4a2e      	ldr	r2, [pc, #184]	; (401ba0 <udd_ep_trans_done+0x194>)
  401ae6:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
  401ae8:	2d00      	cmp	r5, #0
  401aea:	d04e      	beq.n	401b8a <udd_ep_trans_done+0x17e>
		cpu_irq_enable();
  401aec:	2201      	movs	r2, #1
  401aee:	4b2b      	ldr	r3, [pc, #172]	; (401b9c <udd_ep_trans_done+0x190>)
  401af0:	701a      	strb	r2, [r3, #0]
  401af2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401af6:	b662      	cpsie	i
  401af8:	e047      	b.n	401b8a <udd_ep_trans_done+0x17e>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
  401afa:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  401afe:	f3c5 1502 	ubfx	r5, r5, #4, #3
  401b02:	2408      	movs	r4, #8
  401b04:	40ac      	lsls	r4, r5
  401b06:	42a2      	cmp	r2, r4
  401b08:	d8c1      	bhi.n	401a8e <udd_ep_trans_done+0x82>
  401b0a:	e7be      	b.n	401a8a <udd_ep_trans_done+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
  401b0c:	b12d      	cbz	r5, 401b1a <udd_ep_trans_done+0x10e>
		cpu_irq_enable();
  401b0e:	2101      	movs	r1, #1
  401b10:	4a22      	ldr	r2, [pc, #136]	; (401b9c <udd_ep_trans_done+0x190>)
  401b12:	7011      	strb	r1, [r2, #0]
  401b14:	f3bf 8f5f 	dmb	sy
  401b18:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
  401b1a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  401b1e:	491c      	ldr	r1, [pc, #112]	; (401b90 <udd_ep_trans_done+0x184>)
  401b20:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401b24:	68d1      	ldr	r1, [r2, #12]
  401b26:	6091      	str	r1, [r2, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
  401b28:	4a1a      	ldr	r2, [pc, #104]	; (401b94 <udd_ep_trans_done+0x188>)
  401b2a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  401b2e:	f412 7f80 	tst.w	r2, #256	; 0x100
  401b32:	d021      	beq.n	401b78 <udd_ep_trans_done+0x16c>
		if (ptr_job->b_shortpacket) {
  401b34:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  401b38:	4915      	ldr	r1, [pc, #84]	; (401b90 <udd_ep_trans_done+0x184>)
  401b3a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401b3e:	7d12      	ldrb	r2, [r2, #20]
  401b40:	f012 0f02 	tst.w	r2, #2
  401b44:	d018      	beq.n	401b78 <udd_ep_trans_done+0x16c>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
  401b46:	2201      	movs	r2, #1
  401b48:	4b16      	ldr	r3, [pc, #88]	; (401ba4 <udd_ep_trans_done+0x198>)
  401b4a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (Is_udd_write_enabled(ep)) {
  401b4e:	3b30      	subs	r3, #48	; 0x30
  401b50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  401b54:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401b58:	d002      	beq.n	401b60 <udd_ep_trans_done+0x154>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
  401b5a:	4b13      	ldr	r3, [pc, #76]	; (401ba8 <udd_ep_trans_done+0x19c>)
  401b5c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
  401b60:	2201      	movs	r2, #1
  401b62:	4b12      	ldr	r3, [pc, #72]	; (401bac <udd_ep_trans_done+0x1a0>)
  401b64:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_enable_endpoint_interrupt(ep);
  401b68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401b6c:	fa02 f000 	lsl.w	r0, r2, r0
  401b70:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
  401b74:	6198      	str	r0, [r3, #24]
			return;
  401b76:	e008      	b.n	401b8a <udd_ep_trans_done+0x17e>
  401b78:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
  401b7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	} else {
		_dcache_invalidate(ptr_job->buf, ptr_job->buf_size);
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
  401b7e:	2100      	movs	r1, #0
  401b80:	4803      	ldr	r0, [pc, #12]	; (401b90 <udd_ep_trans_done+0x184>)
  401b82:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
  401b86:	4b0a      	ldr	r3, [pc, #40]	; (401bb0 <udd_ep_trans_done+0x1a4>)
  401b88:	4798      	blx	r3
}
  401b8a:	b003      	add	sp, #12
  401b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401b8e:	4770      	bx	lr
  401b90:	20400b58 	.word	0x20400b58
  401b94:	40038100 	.word	0x40038100
  401b98:	40038300 	.word	0x40038300
  401b9c:	204000e7 	.word	0x204000e7
  401ba0:	40038000 	.word	0x40038000
  401ba4:	40038160 	.word	0x40038160
  401ba8:	40038190 	.word	0x40038190
  401bac:	400381f0 	.word	0x400381f0
  401bb0:	004019d5 	.word	0x004019d5

00401bb4 <USBHS_Handler>:
{
  401bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401bb8:	b085      	sub	sp, #20
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401bba:	4b87      	ldr	r3, [pc, #540]	; (401dd8 <USBHS_Handler+0x224>)
  401bbc:	4798      	blx	r3
  401bbe:	b920      	cbnz	r0, 401bca <USBHS_Handler+0x16>
  401bc0:	4b86      	ldr	r3, [pc, #536]	; (401ddc <USBHS_Handler+0x228>)
  401bc2:	685b      	ldr	r3, [r3, #4]
  401bc4:	f013 0f01 	tst.w	r3, #1
  401bc8:	d011      	beq.n	401bee <USBHS_Handler+0x3a>
	if (Is_udd_sof()) {
  401bca:	4b84      	ldr	r3, [pc, #528]	; (401ddc <USBHS_Handler+0x228>)
  401bcc:	685b      	ldr	r3, [r3, #4]
  401bce:	f013 0f04 	tst.w	r3, #4
  401bd2:	d016      	beq.n	401c02 <USBHS_Handler+0x4e>
		udd_ack_sof();
  401bd4:	4b81      	ldr	r3, [pc, #516]	; (401ddc <USBHS_Handler+0x228>)
  401bd6:	2204      	movs	r2, #4
  401bd8:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
  401bda:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
  401bde:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  401be2:	d00b      	beq.n	401bfc <USBHS_Handler+0x48>
		UDC_SOF_EVENT();
  401be4:	4b7e      	ldr	r3, [pc, #504]	; (401de0 <USBHS_Handler+0x22c>)
  401be6:	4798      	blx	r3
}
  401be8:	b005      	add	sp, #20
  401bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("cpsid i" : : : "memory");
  401bee:	b672      	cpsid	i
  401bf0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401bf4:	2200      	movs	r2, #0
  401bf6:	4b7b      	ldr	r3, [pc, #492]	; (401de4 <USBHS_Handler+0x230>)
  401bf8:	701a      	strb	r2, [r3, #0]
		return;
  401bfa:	e7f5      	b.n	401be8 <USBHS_Handler+0x34>
			udc_sof_notify();
  401bfc:	4b7a      	ldr	r3, [pc, #488]	; (401de8 <USBHS_Handler+0x234>)
  401bfe:	4798      	blx	r3
  401c00:	e7f0      	b.n	401be4 <USBHS_Handler+0x30>
	if (Is_udd_msof()) {
  401c02:	4b76      	ldr	r3, [pc, #472]	; (401ddc <USBHS_Handler+0x228>)
  401c04:	685b      	ldr	r3, [r3, #4]
  401c06:	f013 0f02 	tst.w	r3, #2
  401c0a:	d133      	bne.n	401c74 <USBHS_Handler+0xc0>
	if (!Is_udd_endpoint_interrupt(0)) {
  401c0c:	4b73      	ldr	r3, [pc, #460]	; (401ddc <USBHS_Handler+0x228>)
  401c0e:	685b      	ldr	r3, [r3, #4]
  401c10:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401c14:	d026      	beq.n	401c64 <USBHS_Handler+0xb0>
	udd_disable_nak_in_interrupt(0);
  401c16:	4b75      	ldr	r3, [pc, #468]	; (401dec <USBHS_Handler+0x238>)
  401c18:	2210      	movs	r2, #16
  401c1a:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
  401c1c:	2208      	movs	r2, #8
  401c1e:	601a      	str	r2, [r3, #0]
	if (Is_udd_setup_received(0)) {
  401c20:	3bf0      	subs	r3, #240	; 0xf0
  401c22:	681b      	ldr	r3, [r3, #0]
  401c24:	f013 0f04 	tst.w	r3, #4
  401c28:	d12a      	bne.n	401c80 <USBHS_Handler+0xcc>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
  401c2a:	4b71      	ldr	r3, [pc, #452]	; (401df0 <USBHS_Handler+0x23c>)
  401c2c:	681b      	ldr	r3, [r3, #0]
  401c2e:	f013 0f01 	tst.w	r3, #1
  401c32:	d005      	beq.n	401c40 <USBHS_Handler+0x8c>
  401c34:	4b6f      	ldr	r3, [pc, #444]	; (401df4 <USBHS_Handler+0x240>)
  401c36:	681b      	ldr	r3, [r3, #0]
  401c38:	f013 0f01 	tst.w	r3, #1
  401c3c:	f040 808b 	bne.w	401d56 <USBHS_Handler+0x1a2>
	if (Is_udd_out_received(0)) {
  401c40:	4b6b      	ldr	r3, [pc, #428]	; (401df0 <USBHS_Handler+0x23c>)
  401c42:	681b      	ldr	r3, [r3, #0]
  401c44:	f013 0f02 	tst.w	r3, #2
  401c48:	f040 8088 	bne.w	401d5c <USBHS_Handler+0x1a8>
	if (Is_udd_nak_out(0)) {
  401c4c:	4b68      	ldr	r3, [pc, #416]	; (401df0 <USBHS_Handler+0x23c>)
  401c4e:	681b      	ldr	r3, [r3, #0]
  401c50:	f013 0f08 	tst.w	r3, #8
  401c54:	f040 8135 	bne.w	401ec2 <USBHS_Handler+0x30e>
	if (Is_udd_nak_in(0)) {
  401c58:	4b65      	ldr	r3, [pc, #404]	; (401df0 <USBHS_Handler+0x23c>)
  401c5a:	681b      	ldr	r3, [r3, #0]
  401c5c:	f013 0f10 	tst.w	r3, #16
  401c60:	f040 8142 	bne.w	401ee8 <USBHS_Handler+0x334>
	for (i = 0; i < nb_data; i++) {
  401c64:	4e64      	ldr	r6, [pc, #400]	; (401df8 <USBHS_Handler+0x244>)
  401c66:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  401c68:	4a5c      	ldr	r2, [pc, #368]	; (401ddc <USBHS_Handler+0x228>)
  401c6a:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  401c6e:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  401c72:	e184      	b.n	401f7e <USBHS_Handler+0x3ca>
		udd_ack_msof();
  401c74:	2202      	movs	r2, #2
  401c76:	4b59      	ldr	r3, [pc, #356]	; (401ddc <USBHS_Handler+0x228>)
  401c78:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
  401c7a:	4b5b      	ldr	r3, [pc, #364]	; (401de8 <USBHS_Handler+0x234>)
  401c7c:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  401c7e:	e7b3      	b.n	401be8 <USBHS_Handler+0x34>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401c80:	4b5e      	ldr	r3, [pc, #376]	; (401dfc <USBHS_Handler+0x248>)
  401c82:	781b      	ldrb	r3, [r3, #0]
  401c84:	2b00      	cmp	r3, #0
  401c86:	d147      	bne.n	401d18 <USBHS_Handler+0x164>
	if (8 != udd_byte_count(0)) {
  401c88:	4b59      	ldr	r3, [pc, #356]	; (401df0 <USBHS_Handler+0x23c>)
  401c8a:	681b      	ldr	r3, [r3, #0]
  401c8c:	f3c3 530a 	ubfx	r3, r3, #20, #11
  401c90:	2b08      	cmp	r3, #8
  401c92:	d146      	bne.n	401d22 <USBHS_Handler+0x16e>
	uint16_t nb_data = udd_byte_count(0);
  401c94:	4b56      	ldr	r3, [pc, #344]	; (401df0 <USBHS_Handler+0x23c>)
  401c96:	6818      	ldr	r0, [r3, #0]
  401c98:	f3c0 500a 	ubfx	r0, r0, #20, #11
	for (i = 0; i < nb_data; i++) {
  401c9c:	b148      	cbz	r0, 401cb2 <USBHS_Handler+0xfe>
  401c9e:	4b58      	ldr	r3, [pc, #352]	; (401e00 <USBHS_Handler+0x24c>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
  401ca0:	4c58      	ldr	r4, [pc, #352]	; (401e04 <USBHS_Handler+0x250>)
  401ca2:	1c5a      	adds	r2, r3, #1
  401ca4:	7819      	ldrb	r1, [r3, #0]
  401ca6:	b2db      	uxtb	r3, r3
  401ca8:	5519      	strb	r1, [r3, r4]
  401caa:	4613      	mov	r3, r2
	for (i = 0; i < nb_data; i++) {
  401cac:	b2d2      	uxtb	r2, r2
  401cae:	4282      	cmp	r2, r0
  401cb0:	d3f7      	bcc.n	401ca2 <USBHS_Handler+0xee>
	if (udc_process_setup() == false) {
  401cb2:	4b55      	ldr	r3, [pc, #340]	; (401e08 <USBHS_Handler+0x254>)
  401cb4:	4798      	blx	r3
  401cb6:	2800      	cmp	r0, #0
  401cb8:	d039      	beq.n	401d2e <USBHS_Handler+0x17a>
	udd_ack_setup_received(0);
  401cba:	2204      	movs	r2, #4
  401cbc:	4b53      	ldr	r3, [pc, #332]	; (401e0c <USBHS_Handler+0x258>)
  401cbe:	601a      	str	r2, [r3, #0]
	if (Udd_setup_is_in()) {
  401cc0:	4b50      	ldr	r3, [pc, #320]	; (401e04 <USBHS_Handler+0x250>)
  401cc2:	f993 3000 	ldrsb.w	r3, [r3]
  401cc6:	2b00      	cmp	r3, #0
  401cc8:	db37      	blt.n	401d3a <USBHS_Handler+0x186>
		if (0 == udd_g_ctrlreq.req.wLength) {
  401cca:	4b4e      	ldr	r3, [pc, #312]	; (401e04 <USBHS_Handler+0x250>)
  401ccc:	88db      	ldrh	r3, [r3, #6]
  401cce:	2b00      	cmp	r3, #0
  401cd0:	d03e      	beq.n	401d50 <USBHS_Handler+0x19c>
		udd_ctrl_prev_payload_buf_cnt = 0;
  401cd2:	2200      	movs	r2, #0
  401cd4:	4b4e      	ldr	r3, [pc, #312]	; (401e10 <USBHS_Handler+0x25c>)
  401cd6:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
  401cd8:	4b4e      	ldr	r3, [pc, #312]	; (401e14 <USBHS_Handler+0x260>)
  401cda:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401cdc:	2101      	movs	r1, #1
  401cde:	4b47      	ldr	r3, [pc, #284]	; (401dfc <USBHS_Handler+0x248>)
  401ce0:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
  401ce2:	2110      	movs	r1, #16
  401ce4:	4b49      	ldr	r3, [pc, #292]	; (401e0c <USBHS_Handler+0x258>)
  401ce6:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401ce8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401cec:	fab3 f383 	clz	r3, r3
  401cf0:	095b      	lsrs	r3, r3, #5
  401cf2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401cf4:	b672      	cpsid	i
  401cf6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401cfa:	4b3a      	ldr	r3, [pc, #232]	; (401de4 <USBHS_Handler+0x230>)
  401cfc:	701a      	strb	r2, [r3, #0]
	return flags;
  401cfe:	9b01      	ldr	r3, [sp, #4]
		udd_enable_nak_in_interrupt(0);
  401d00:	4a45      	ldr	r2, [pc, #276]	; (401e18 <USBHS_Handler+0x264>)
  401d02:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  401d04:	2b00      	cmp	r3, #0
  401d06:	f43f af6f 	beq.w	401be8 <USBHS_Handler+0x34>
		cpu_irq_enable();
  401d0a:	2201      	movs	r2, #1
  401d0c:	4b35      	ldr	r3, [pc, #212]	; (401de4 <USBHS_Handler+0x230>)
  401d0e:	701a      	strb	r2, [r3, #0]
  401d10:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401d14:	b662      	cpsie	i
  401d16:	e767      	b.n	401be8 <USBHS_Handler+0x34>
		udd_ctrl_endofrequest();
  401d18:	4b40      	ldr	r3, [pc, #256]	; (401e1c <USBHS_Handler+0x268>)
  401d1a:	4798      	blx	r3
		udd_ctrl_init();
  401d1c:	4b40      	ldr	r3, [pc, #256]	; (401e20 <USBHS_Handler+0x26c>)
  401d1e:	4798      	blx	r3
  401d20:	e7b2      	b.n	401c88 <USBHS_Handler+0xd4>
		udd_ctrl_stall_data();
  401d22:	4b40      	ldr	r3, [pc, #256]	; (401e24 <USBHS_Handler+0x270>)
  401d24:	4798      	blx	r3
		udd_ack_setup_received(0);
  401d26:	2204      	movs	r2, #4
  401d28:	4b38      	ldr	r3, [pc, #224]	; (401e0c <USBHS_Handler+0x258>)
  401d2a:	601a      	str	r2, [r3, #0]
  401d2c:	e75c      	b.n	401be8 <USBHS_Handler+0x34>
		udd_ctrl_stall_data();
  401d2e:	4b3d      	ldr	r3, [pc, #244]	; (401e24 <USBHS_Handler+0x270>)
  401d30:	4798      	blx	r3
		udd_ack_setup_received(0);
  401d32:	2204      	movs	r2, #4
  401d34:	4b35      	ldr	r3, [pc, #212]	; (401e0c <USBHS_Handler+0x258>)
  401d36:	601a      	str	r2, [r3, #0]
  401d38:	e756      	b.n	401be8 <USBHS_Handler+0x34>
		udd_ctrl_prev_payload_buf_cnt = 0;
  401d3a:	2300      	movs	r3, #0
  401d3c:	4a34      	ldr	r2, [pc, #208]	; (401e10 <USBHS_Handler+0x25c>)
  401d3e:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
  401d40:	4a34      	ldr	r2, [pc, #208]	; (401e14 <USBHS_Handler+0x260>)
  401d42:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  401d44:	2202      	movs	r2, #2
  401d46:	4b2d      	ldr	r3, [pc, #180]	; (401dfc <USBHS_Handler+0x248>)
  401d48:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401d4a:	4b37      	ldr	r3, [pc, #220]	; (401e28 <USBHS_Handler+0x274>)
  401d4c:	4798      	blx	r3
  401d4e:	e74b      	b.n	401be8 <USBHS_Handler+0x34>
			udd_ctrl_send_zlp_in();
  401d50:	4b36      	ldr	r3, [pc, #216]	; (401e2c <USBHS_Handler+0x278>)
  401d52:	4798      	blx	r3
  401d54:	e748      	b.n	401be8 <USBHS_Handler+0x34>
		udd_ctrl_in_sent();
  401d56:	4b34      	ldr	r3, [pc, #208]	; (401e28 <USBHS_Handler+0x274>)
  401d58:	4798      	blx	r3
  401d5a:	e745      	b.n	401be8 <USBHS_Handler+0x34>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  401d5c:	4b27      	ldr	r3, [pc, #156]	; (401dfc <USBHS_Handler+0x248>)
  401d5e:	781b      	ldrb	r3, [r3, #0]
  401d60:	2b01      	cmp	r3, #1
  401d62:	d00b      	beq.n	401d7c <USBHS_Handler+0x1c8>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401d64:	2b02      	cmp	r3, #2
  401d66:	d004      	beq.n	401d72 <USBHS_Handler+0x1be>
  401d68:	2b04      	cmp	r3, #4
  401d6a:	d002      	beq.n	401d72 <USBHS_Handler+0x1be>
			udd_ctrl_stall_data();
  401d6c:	4b2d      	ldr	r3, [pc, #180]	; (401e24 <USBHS_Handler+0x270>)
  401d6e:	4798      	blx	r3
  401d70:	e001      	b.n	401d76 <USBHS_Handler+0x1c2>
			udd_ctrl_endofrequest();
  401d72:	4b2a      	ldr	r3, [pc, #168]	; (401e1c <USBHS_Handler+0x268>)
  401d74:	4798      	blx	r3
		udd_ctrl_init();
  401d76:	4b2a      	ldr	r3, [pc, #168]	; (401e20 <USBHS_Handler+0x26c>)
  401d78:	4798      	blx	r3
  401d7a:	e735      	b.n	401be8 <USBHS_Handler+0x34>
	nb_data = udd_byte_count(0);
  401d7c:	4b1c      	ldr	r3, [pc, #112]	; (401df0 <USBHS_Handler+0x23c>)
  401d7e:	6818      	ldr	r0, [r3, #0]
  401d80:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
  401d84:	4b1f      	ldr	r3, [pc, #124]	; (401e04 <USBHS_Handler+0x250>)
  401d86:	899b      	ldrh	r3, [r3, #12]
  401d88:	4a22      	ldr	r2, [pc, #136]	; (401e14 <USBHS_Handler+0x260>)
  401d8a:	8814      	ldrh	r4, [r2, #0]
  401d8c:	1822      	adds	r2, r4, r0
  401d8e:	4293      	cmp	r3, r2
  401d90:	da01      	bge.n	401d96 <USBHS_Handler+0x1e2>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
  401d92:	1b1b      	subs	r3, r3, r4
  401d94:	b298      	uxth	r0, r3
	volatile uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  401d96:	4b1b      	ldr	r3, [pc, #108]	; (401e04 <USBHS_Handler+0x250>)
  401d98:	6899      	ldr	r1, [r3, #8]
  401d9a:	4421      	add	r1, r4
	for (i = 0; i < nb_data; i++) {
  401d9c:	b178      	cbz	r0, 401dbe <USBHS_Handler+0x20a>
  401d9e:	4a18      	ldr	r2, [pc, #96]	; (401e00 <USBHS_Handler+0x24c>)
		*ptr_dest++ = *ptr_src++;
  401da0:	1c53      	adds	r3, r2, #1
  401da2:	7812      	ldrb	r2, [r2, #0]
  401da4:	b2d2      	uxtb	r2, r2
  401da6:	700a      	strb	r2, [r1, #0]
  401da8:	3101      	adds	r1, #1
  401daa:	461a      	mov	r2, r3
	for (i = 0; i < nb_data; i++) {
  401dac:	b2db      	uxtb	r3, r3
  401dae:	4283      	cmp	r3, r0
  401db0:	d3f6      	bcc.n	401da0 <USBHS_Handler+0x1ec>
	udd_ctrl_payload_buf_cnt += nb_data;
  401db2:	4404      	add	r4, r0
  401db4:	b2a4      	uxth	r4, r4
  401db6:	4b17      	ldr	r3, [pc, #92]	; (401e14 <USBHS_Handler+0x260>)
  401db8:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401dba:	2840      	cmp	r0, #64	; 0x40
  401dbc:	d038      	beq.n	401e30 <USBHS_Handler+0x27c>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
  401dbe:	4b11      	ldr	r3, [pc, #68]	; (401e04 <USBHS_Handler+0x250>)
  401dc0:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401dc2:	695b      	ldr	r3, [r3, #20]
  401dc4:	b113      	cbz	r3, 401dcc <USBHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
  401dc6:	4798      	blx	r3
  401dc8:	2800      	cmp	r0, #0
  401dca:	d05a      	beq.n	401e82 <USBHS_Handler+0x2ce>
		udd_ack_out_received(0);
  401dcc:	2202      	movs	r2, #2
  401dce:	4b0f      	ldr	r3, [pc, #60]	; (401e0c <USBHS_Handler+0x258>)
  401dd0:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
  401dd2:	4b16      	ldr	r3, [pc, #88]	; (401e2c <USBHS_Handler+0x278>)
  401dd4:	4798      	blx	r3
  401dd6:	e707      	b.n	401be8 <USBHS_Handler+0x34>
  401dd8:	004016c1 	.word	0x004016c1
  401ddc:	40038000 	.word	0x40038000
  401de0:	00403155 	.word	0x00403155
  401de4:	204000e7 	.word	0x204000e7
  401de8:	004008a9 	.word	0x004008a9
  401dec:	40038220 	.word	0x40038220
  401df0:	40038130 	.word	0x40038130
  401df4:	400381c0 	.word	0x400381c0
  401df8:	40038134 	.word	0x40038134
  401dfc:	20400b54 	.word	0x20400b54
  401e00:	a0100000 	.word	0xa0100000
  401e04:	2040103c 	.word	0x2040103c
  401e08:	004008e9 	.word	0x004008e9
  401e0c:	40038160 	.word	0x40038160
  401e10:	20400b52 	.word	0x20400b52
  401e14:	20400b50 	.word	0x20400b50
  401e18:	400381f0 	.word	0x400381f0
  401e1c:	0040183d 	.word	0x0040183d
  401e20:	00401775 	.word	0x00401775
  401e24:	004017d1 	.word	0x004017d1
  401e28:	0040184d 	.word	0x0040184d
  401e2c:	004017e9 	.word	0x004017e9
			|| (udd_g_ctrlreq.req.wLength <=
  401e30:	4ba8      	ldr	r3, [pc, #672]	; (4020d4 <USBHS_Handler+0x520>)
  401e32:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
  401e34:	4ba8      	ldr	r3, [pc, #672]	; (4020d8 <USBHS_Handler+0x524>)
  401e36:	881b      	ldrh	r3, [r3, #0]
  401e38:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
  401e3a:	429a      	cmp	r2, r3
  401e3c:	ddbf      	ble.n	401dbe <USBHS_Handler+0x20a>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
  401e3e:	4ba5      	ldr	r3, [pc, #660]	; (4020d4 <USBHS_Handler+0x520>)
  401e40:	899b      	ldrh	r3, [r3, #12]
  401e42:	42a3      	cmp	r3, r4
  401e44:	d023      	beq.n	401e8e <USBHS_Handler+0x2da>
	udd_ack_out_received(0);
  401e46:	4ba5      	ldr	r3, [pc, #660]	; (4020dc <USBHS_Handler+0x528>)
  401e48:	2202      	movs	r2, #2
  401e4a:	601a      	str	r2, [r3, #0]
	udd_ack_nak_in(0);
  401e4c:	2210      	movs	r2, #16
  401e4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401e50:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401e54:	fab3 f383 	clz	r3, r3
  401e58:	095b      	lsrs	r3, r3, #5
  401e5a:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  401e5c:	b672      	cpsid	i
  401e5e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401e62:	2100      	movs	r1, #0
  401e64:	4b9e      	ldr	r3, [pc, #632]	; (4020e0 <USBHS_Handler+0x52c>)
  401e66:	7019      	strb	r1, [r3, #0]
	return flags;
  401e68:	9b02      	ldr	r3, [sp, #8]
	udd_enable_nak_in_interrupt(0);
  401e6a:	499e      	ldr	r1, [pc, #632]	; (4020e4 <USBHS_Handler+0x530>)
  401e6c:	600a      	str	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  401e6e:	2b00      	cmp	r3, #0
  401e70:	f43f aeba 	beq.w	401be8 <USBHS_Handler+0x34>
		cpu_irq_enable();
  401e74:	2201      	movs	r2, #1
  401e76:	4b9a      	ldr	r3, [pc, #616]	; (4020e0 <USBHS_Handler+0x52c>)
  401e78:	701a      	strb	r2, [r3, #0]
  401e7a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401e7e:	b662      	cpsie	i
  401e80:	e6b2      	b.n	401be8 <USBHS_Handler+0x34>
				udd_ctrl_stall_data();
  401e82:	4b99      	ldr	r3, [pc, #612]	; (4020e8 <USBHS_Handler+0x534>)
  401e84:	4798      	blx	r3
				udd_ack_out_received(0);
  401e86:	2202      	movs	r2, #2
  401e88:	4b94      	ldr	r3, [pc, #592]	; (4020dc <USBHS_Handler+0x528>)
  401e8a:	601a      	str	r2, [r3, #0]
  401e8c:	e6ac      	b.n	401be8 <USBHS_Handler+0x34>
		if (!udd_g_ctrlreq.over_under_run) {
  401e8e:	4b91      	ldr	r3, [pc, #580]	; (4020d4 <USBHS_Handler+0x520>)
  401e90:	695b      	ldr	r3, [r3, #20]
  401e92:	b153      	cbz	r3, 401eaa <USBHS_Handler+0x2f6>
		if (!udd_g_ctrlreq.over_under_run()) {
  401e94:	4798      	blx	r3
  401e96:	b170      	cbz	r0, 401eb6 <USBHS_Handler+0x302>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
  401e98:	498f      	ldr	r1, [pc, #572]	; (4020d8 <USBHS_Handler+0x524>)
  401e9a:	4a94      	ldr	r2, [pc, #592]	; (4020ec <USBHS_Handler+0x538>)
  401e9c:	880b      	ldrh	r3, [r1, #0]
  401e9e:	8810      	ldrh	r0, [r2, #0]
  401ea0:	4403      	add	r3, r0
  401ea2:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
  401ea4:	2300      	movs	r3, #0
  401ea6:	8013      	strh	r3, [r2, #0]
  401ea8:	e7cd      	b.n	401e46 <USBHS_Handler+0x292>
			udd_ctrl_stall_data();
  401eaa:	4b8f      	ldr	r3, [pc, #572]	; (4020e8 <USBHS_Handler+0x534>)
  401eac:	4798      	blx	r3
			udd_ack_out_received(0);
  401eae:	2202      	movs	r2, #2
  401eb0:	4b8a      	ldr	r3, [pc, #552]	; (4020dc <USBHS_Handler+0x528>)
  401eb2:	601a      	str	r2, [r3, #0]
  401eb4:	e698      	b.n	401be8 <USBHS_Handler+0x34>
			udd_ctrl_stall_data();
  401eb6:	4b8c      	ldr	r3, [pc, #560]	; (4020e8 <USBHS_Handler+0x534>)
  401eb8:	4798      	blx	r3
			udd_ack_out_received(0);
  401eba:	2202      	movs	r2, #2
  401ebc:	4b87      	ldr	r3, [pc, #540]	; (4020dc <USBHS_Handler+0x528>)
  401ebe:	601a      	str	r2, [r3, #0]
  401ec0:	e692      	b.n	401be8 <USBHS_Handler+0x34>
		udd_ack_nak_out(0);
  401ec2:	2208      	movs	r2, #8
  401ec4:	4b85      	ldr	r3, [pc, #532]	; (4020dc <USBHS_Handler+0x528>)
  401ec6:	601a      	str	r2, [r3, #0]
	if (Is_udd_in_send(0))
  401ec8:	3b30      	subs	r3, #48	; 0x30
  401eca:	681b      	ldr	r3, [r3, #0]
  401ecc:	f013 0f01 	tst.w	r3, #1
  401ed0:	f47f ae8a 	bne.w	401be8 <USBHS_Handler+0x34>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401ed4:	4b86      	ldr	r3, [pc, #536]	; (4020f0 <USBHS_Handler+0x53c>)
  401ed6:	781b      	ldrb	r3, [r3, #0]
  401ed8:	2b03      	cmp	r3, #3
  401eda:	f47f ae85 	bne.w	401be8 <USBHS_Handler+0x34>
		udd_enable_stall_handshake(0);
  401ede:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401ee2:	4b80      	ldr	r3, [pc, #512]	; (4020e4 <USBHS_Handler+0x530>)
  401ee4:	601a      	str	r2, [r3, #0]
  401ee6:	e67f      	b.n	401be8 <USBHS_Handler+0x34>
		udd_ack_nak_in(0);
  401ee8:	2210      	movs	r2, #16
  401eea:	4b7c      	ldr	r3, [pc, #496]	; (4020dc <USBHS_Handler+0x528>)
  401eec:	601a      	str	r2, [r3, #0]
	if (Is_udd_out_received(0))
  401eee:	3b30      	subs	r3, #48	; 0x30
  401ef0:	681b      	ldr	r3, [r3, #0]
  401ef2:	f013 0f02 	tst.w	r3, #2
  401ef6:	f47f ae77 	bne.w	401be8 <USBHS_Handler+0x34>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
  401efa:	4b7d      	ldr	r3, [pc, #500]	; (4020f0 <USBHS_Handler+0x53c>)
  401efc:	781b      	ldrb	r3, [r3, #0]
  401efe:	2b01      	cmp	r3, #1
  401f00:	d007      	beq.n	401f12 <USBHS_Handler+0x35e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
  401f02:	2b04      	cmp	r3, #4
  401f04:	f47f ae70 	bne.w	401be8 <USBHS_Handler+0x34>
		udd_enable_stall_handshake(0);
  401f08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401f0c:	4b75      	ldr	r3, [pc, #468]	; (4020e4 <USBHS_Handler+0x530>)
  401f0e:	601a      	str	r2, [r3, #0]
  401f10:	e66a      	b.n	401be8 <USBHS_Handler+0x34>
		udd_ctrl_send_zlp_in();
  401f12:	4b78      	ldr	r3, [pc, #480]	; (4020f4 <USBHS_Handler+0x540>)
  401f14:	4798      	blx	r3
  401f16:	e667      	b.n	401be8 <USBHS_Handler+0x34>
			if (udd_endpoint_dma_get_status(ep)
  401f18:	4b77      	ldr	r3, [pc, #476]	; (4020f8 <USBHS_Handler+0x544>)
  401f1a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  401f1e:	68da      	ldr	r2, [r3, #12]
  401f20:	f012 0f01 	tst.w	r2, #1
  401f24:	f47f ae60 	bne.w	401be8 <USBHS_Handler+0x34>
			udd_disable_endpoint_dma_interrupt(ep);
  401f28:	4a74      	ldr	r2, [pc, #464]	; (4020fc <USBHS_Handler+0x548>)
  401f2a:	6151      	str	r1, [r2, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
  401f2c:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
  401f2e:	0c1b      	lsrs	r3, r3, #16
  401f30:	d008      	beq.n	401f44 <USBHS_Handler+0x390>
				ptr_job->buf_cnt -= nb_remaining;
  401f32:	4a73      	ldr	r2, [pc, #460]	; (402100 <USBHS_Handler+0x54c>)
  401f34:	007c      	lsls	r4, r7, #1
  401f36:	19e5      	adds	r5, r4, r7
  401f38:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
  401f3c:	68e9      	ldr	r1, [r5, #12]
  401f3e:	1acb      	subs	r3, r1, r3
  401f40:	60eb      	str	r3, [r5, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
  401f42:	60ab      	str	r3, [r5, #8]
			udd_ep_trans_done(ep);
  401f44:	4b6f      	ldr	r3, [pc, #444]	; (402104 <USBHS_Handler+0x550>)
  401f46:	4798      	blx	r3
  401f48:	e64e      	b.n	401be8 <USBHS_Handler+0x34>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
  401f4a:	4b6f      	ldr	r3, [pc, #444]	; (402108 <USBHS_Handler+0x554>)
  401f4c:	2201      	movs	r2, #1
  401f4e:	f849 2003 	str.w	r2, [r9, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
  401f52:	4962      	ldr	r1, [pc, #392]	; (4020dc <USBHS_Handler+0x528>)
  401f54:	f849 2001 	str.w	r2, [r9, r1]
				udd_ack_fifocon(ep);
  401f58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401f5c:	f849 2003 	str.w	r2, [r9, r3]
		ptr_job = &udd_ep_job[ep - 1];
  401f60:	eb07 0747 	add.w	r7, r7, r7, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
  401f64:	4602      	mov	r2, r0
  401f66:	2100      	movs	r1, #0
  401f68:	4865      	ldr	r0, [pc, #404]	; (402100 <USBHS_Handler+0x54c>)
  401f6a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
  401f6e:	4b67      	ldr	r3, [pc, #412]	; (40210c <USBHS_Handler+0x558>)
  401f70:	4798      	blx	r3
  401f72:	e639      	b.n	401be8 <USBHS_Handler+0x34>
  401f74:	3301      	adds	r3, #1
  401f76:	3604      	adds	r6, #4
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  401f78:	2b07      	cmp	r3, #7
  401f7a:	f000 80d5 	beq.w	402128 <USBHS_Handler+0x574>
  401f7e:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
  401f80:	461d      	mov	r5, r3
  401f82:	1e5f      	subs	r7, r3, #1
  401f84:	46b8      	mov	r8, r7
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  401f86:	6914      	ldr	r4, [r2, #16]
  401f88:	fa0e f107 	lsl.w	r1, lr, r7
  401f8c:	420c      	tst	r4, r1
  401f8e:	d002      	beq.n	401f96 <USBHS_Handler+0x3e2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
  401f90:	6854      	ldr	r4, [r2, #4]
  401f92:	4221      	tst	r1, r4
  401f94:	d1c0      	bne.n	401f18 <USBHS_Handler+0x364>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  401f96:	6911      	ldr	r1, [r2, #16]
  401f98:	fa0c f505 	lsl.w	r5, ip, r5
  401f9c:	4229      	tst	r1, r5
  401f9e:	d0e9      	beq.n	401f74 <USBHS_Handler+0x3c0>
  401fa0:	ea4f 0983 	mov.w	r9, r3, lsl #2
  401fa4:	f106 0490 	add.w	r4, r6, #144	; 0x90
			if (Is_udd_in_send_interrupt_enabled(ep)
  401fa8:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
  401fac:	f011 0f01 	tst.w	r1, #1
  401fb0:	d003      	beq.n	401fba <USBHS_Handler+0x406>
					&& Is_udd_in_send(ep)) {
  401fb2:	6831      	ldr	r1, [r6, #0]
  401fb4:	f011 0f01 	tst.w	r1, #1
  401fb8:	d1c7      	bne.n	401f4a <USBHS_Handler+0x396>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
  401fba:	6821      	ldr	r1, [r4, #0]
  401fbc:	f411 5f80 	tst.w	r1, #4096	; 0x1000
  401fc0:	d0d8      	beq.n	401f74 <USBHS_Handler+0x3c0>
					&& (0 == udd_nb_busy_bank(ep))) {
  401fc2:	6831      	ldr	r1, [r6, #0]
  401fc4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
  401fc8:	d1d4      	bne.n	401f74 <USBHS_Handler+0x3c0>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
  401fca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401fce:	4b4e      	ldr	r3, [pc, #312]	; (402108 <USBHS_Handler+0x554>)
  401fd0:	f849 2003 	str.w	r2, [r9, r3]
				udd_disable_endpoint_interrupt(ep);
  401fd4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
  401fd8:	615d      	str	r5, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
  401fda:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  401fde:	4b48      	ldr	r3, [pc, #288]	; (402100 <USBHS_Handler+0x54c>)
  401fe0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
  401fe4:	f898 2014 	ldrb.w	r2, [r8, #20]
  401fe8:	f36f 0282 	bfc	r2, #2, #1
  401fec:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
  401ff0:	4a47      	ldr	r2, [pc, #284]	; (402110 <USBHS_Handler+0x55c>)
  401ff2:	f859 3002 	ldr.w	r3, [r9, r2]
  401ff6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  401ffa:	f849 3002 	str.w	r3, [r9, r2]
				udd_enable_stall_handshake(ep);
  401ffe:	4b39      	ldr	r3, [pc, #228]	; (4020e4 <USBHS_Handler+0x530>)
  402000:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402004:	f849 2003 	str.w	r2, [r9, r3]
				udd_reset_data_toggle(ep);
  402008:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40200c:	f849 2003 	str.w	r2, [r9, r3]
  402010:	e5ea      	b.n	401be8 <USBHS_Handler+0x34>
		udd_ack_reset();
  402012:	2208      	movs	r2, #8
  402014:	4b39      	ldr	r3, [pc, #228]	; (4020fc <USBHS_Handler+0x548>)
  402016:	609a      	str	r2, [r3, #8]
  402018:	4d39      	ldr	r5, [pc, #228]	; (402100 <USBHS_Handler+0x54c>)
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40201a:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
  40201c:	2701      	movs	r7, #1
  40201e:	4e3b      	ldr	r6, [pc, #236]	; (40210c <USBHS_Handler+0x558>)
  402020:	3401      	adds	r4, #1
  402022:	b2e4      	uxtb	r4, r4
  402024:	4622      	mov	r2, r4
  402026:	4639      	mov	r1, r7
  402028:	4628      	mov	r0, r5
  40202a:	47b0      	blx	r6
  40202c:	3518      	adds	r5, #24
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40202e:	2c06      	cmp	r4, #6
  402030:	d1f6      	bne.n	402020 <USBHS_Handler+0x46c>
		udc_reset();
  402032:	4b38      	ldr	r3, [pc, #224]	; (402114 <USBHS_Handler+0x560>)
  402034:	4798      	blx	r3
	udd_configure_address(0);
  402036:	4b31      	ldr	r3, [pc, #196]	; (4020fc <USBHS_Handler+0x548>)
  402038:	681a      	ldr	r2, [r3, #0]
  40203a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  40203e:	601a      	str	r2, [r3, #0]
	udd_enable_address();
  402040:	681a      	ldr	r2, [r3, #0]
  402042:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  402046:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
  402048:	4931      	ldr	r1, [pc, #196]	; (402110 <USBHS_Handler+0x55c>)
  40204a:	6808      	ldr	r0, [r1, #0]
  40204c:	4a32      	ldr	r2, [pc, #200]	; (402118 <USBHS_Handler+0x564>)
  40204e:	4002      	ands	r2, r0
  402050:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  402054:	600a      	str	r2, [r1, #0]
	udd_allocate_memory(0);
  402056:	680a      	ldr	r2, [r1, #0]
  402058:	f042 0202 	orr.w	r2, r2, #2
  40205c:	600a      	str	r2, [r1, #0]
	udd_enable_endpoint(0);
  40205e:	69da      	ldr	r2, [r3, #28]
  402060:	f042 0201 	orr.w	r2, r2, #1
  402064:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402066:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40206a:	fab2 f282 	clz	r2, r2
  40206e:	0952      	lsrs	r2, r2, #5
  402070:	9203      	str	r2, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  402072:	b672      	cpsid	i
  402074:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402078:	2100      	movs	r1, #0
  40207a:	4a19      	ldr	r2, [pc, #100]	; (4020e0 <USBHS_Handler+0x52c>)
  40207c:	7011      	strb	r1, [r2, #0]
	return flags;
  40207e:	9903      	ldr	r1, [sp, #12]
	udd_enable_setup_received_interrupt(0);
  402080:	4a18      	ldr	r2, [pc, #96]	; (4020e4 <USBHS_Handler+0x530>)
  402082:	2004      	movs	r0, #4
  402084:	6010      	str	r0, [r2, #0]
	udd_enable_out_received_interrupt(0);
  402086:	2002      	movs	r0, #2
  402088:	6010      	str	r0, [r2, #0]
	udd_enable_endpoint_interrupt(0);
  40208a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40208e:	619a      	str	r2, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
  402090:	b129      	cbz	r1, 40209e <USBHS_Handler+0x4ea>
		cpu_irq_enable();
  402092:	2201      	movs	r2, #1
  402094:	4b12      	ldr	r3, [pc, #72]	; (4020e0 <USBHS_Handler+0x52c>)
  402096:	701a      	strb	r2, [r3, #0]
  402098:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40209c:	b662      	cpsie	i
		udd_ctrl_init();
  40209e:	4b1f      	ldr	r3, [pc, #124]	; (40211c <USBHS_Handler+0x568>)
  4020a0:	4798      	blx	r3
		goto udd_interrupt_end;
  4020a2:	e5a1      	b.n	401be8 <USBHS_Handler+0x34>
		otg_unfreeze_clock();
  4020a4:	4b15      	ldr	r3, [pc, #84]	; (4020fc <USBHS_Handler+0x548>)
  4020a6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  4020aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  4020ae:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_disable_suspend_interrupt();
  4020b2:	2201      	movs	r2, #1
  4020b4:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  4020b6:	2210      	movs	r2, #16
  4020b8:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
  4020ba:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  4020be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4020c2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
  4020c6:	2000      	movs	r0, #0
  4020c8:	4b15      	ldr	r3, [pc, #84]	; (402120 <USBHS_Handler+0x56c>)
  4020ca:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
  4020cc:	4b15      	ldr	r3, [pc, #84]	; (402124 <USBHS_Handler+0x570>)
  4020ce:	4798      	blx	r3
		goto udd_interrupt_end;
  4020d0:	e58a      	b.n	401be8 <USBHS_Handler+0x34>
  4020d2:	bf00      	nop
  4020d4:	2040103c 	.word	0x2040103c
  4020d8:	20400b52 	.word	0x20400b52
  4020dc:	40038160 	.word	0x40038160
  4020e0:	204000e7 	.word	0x204000e7
  4020e4:	400381f0 	.word	0x400381f0
  4020e8:	004017d1 	.word	0x004017d1
  4020ec:	20400b50 	.word	0x20400b50
  4020f0:	20400b54 	.word	0x20400b54
  4020f4:	004017e9 	.word	0x004017e9
  4020f8:	40038300 	.word	0x40038300
  4020fc:	40038000 	.word	0x40038000
  402100:	20400b58 	.word	0x20400b58
  402104:	00401a0d 	.word	0x00401a0d
  402108:	40038220 	.word	0x40038220
  40210c:	004019d5 	.word	0x004019d5
  402110:	40038100 	.word	0x40038100
  402114:	00400861 	.word	0x00400861
  402118:	ffffe683 	.word	0xffffe683
  40211c:	00401775 	.word	0x00401775
  402120:	004016d1 	.word	0x004016d1
  402124:	00403125 	.word	0x00403125
	if (Is_udd_reset()) {
  402128:	4b1b      	ldr	r3, [pc, #108]	; (402198 <USBHS_Handler+0x5e4>)
  40212a:	685b      	ldr	r3, [r3, #4]
  40212c:	f013 0f08 	tst.w	r3, #8
  402130:	f47f af6f 	bne.w	402012 <USBHS_Handler+0x45e>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  402134:	4b18      	ldr	r3, [pc, #96]	; (402198 <USBHS_Handler+0x5e4>)
  402136:	691b      	ldr	r3, [r3, #16]
  402138:	f013 0f01 	tst.w	r3, #1
  40213c:	d004      	beq.n	402148 <USBHS_Handler+0x594>
  40213e:	4b16      	ldr	r3, [pc, #88]	; (402198 <USBHS_Handler+0x5e4>)
  402140:	685b      	ldr	r3, [r3, #4]
  402142:	f013 0f01 	tst.w	r3, #1
  402146:	d1ad      	bne.n	4020a4 <USBHS_Handler+0x4f0>
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
  402148:	4b13      	ldr	r3, [pc, #76]	; (402198 <USBHS_Handler+0x5e4>)
  40214a:	691b      	ldr	r3, [r3, #16]
  40214c:	f013 0f10 	tst.w	r3, #16
  402150:	f43f ad4a 	beq.w	401be8 <USBHS_Handler+0x34>
  402154:	4b10      	ldr	r3, [pc, #64]	; (402198 <USBHS_Handler+0x5e4>)
  402156:	685b      	ldr	r3, [r3, #4]
  402158:	f013 0f10 	tst.w	r3, #16
  40215c:	f43f ad44 	beq.w	401be8 <USBHS_Handler+0x34>
		otg_unfreeze_clock();
  402160:	4a0d      	ldr	r2, [pc, #52]	; (402198 <USBHS_Handler+0x5e4>)
  402162:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  402166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  40216a:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
  40216e:	4613      	mov	r3, r2
  402170:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
  402174:	f412 4f80 	tst.w	r2, #16384	; 0x4000
  402178:	d103      	bne.n	402182 <USBHS_Handler+0x5ce>
			if (Is_udd_suspend()) {
  40217a:	685a      	ldr	r2, [r3, #4]
  40217c:	f012 0f01 	tst.w	r2, #1
  402180:	d0f6      	beq.n	402170 <USBHS_Handler+0x5bc>
		udd_disable_wake_up_interrupt();
  402182:	4b05      	ldr	r3, [pc, #20]	; (402198 <USBHS_Handler+0x5e4>)
  402184:	2210      	movs	r2, #16
  402186:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
  402188:	2001      	movs	r0, #1
  40218a:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
  40218c:	4b03      	ldr	r3, [pc, #12]	; (40219c <USBHS_Handler+0x5e8>)
  40218e:	4798      	blx	r3
		UDC_RESUME_EVENT();
  402190:	4b03      	ldr	r3, [pc, #12]	; (4021a0 <USBHS_Handler+0x5ec>)
  402192:	4798      	blx	r3
		goto udd_interrupt_end;
  402194:	e528      	b.n	401be8 <USBHS_Handler+0x34>
  402196:	bf00      	nop
  402198:	40038000 	.word	0x40038000
  40219c:	004016d1 	.word	0x004016d1
  4021a0:	0040313d 	.word	0x0040313d

004021a4 <udd_attach>:
{
  4021a4:	b530      	push	{r4, r5, lr}
  4021a6:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4021a8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4021ac:	fab3 f383 	clz	r3, r3
  4021b0:	095b      	lsrs	r3, r3, #5
  4021b2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4021b4:	b672      	cpsid	i
  4021b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4021ba:	2200      	movs	r2, #0
  4021bc:	4b19      	ldr	r3, [pc, #100]	; (402224 <udd_attach+0x80>)
  4021be:	701a      	strb	r2, [r3, #0]
	return flags;
  4021c0:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  4021c2:	2001      	movs	r0, #1
  4021c4:	4b18      	ldr	r3, [pc, #96]	; (402228 <udd_attach+0x84>)
  4021c6:	4798      	blx	r3
	otg_unfreeze_clock();
  4021c8:	4a18      	ldr	r2, [pc, #96]	; (40222c <udd_attach+0x88>)
  4021ca:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  4021ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  4021d2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	while (!Is_otg_clock_usable());
  4021d6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
  4021da:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4021de:	d0fa      	beq.n	4021d6 <udd_attach+0x32>
	udd_attach_device();
  4021e0:	4b12      	ldr	r3, [pc, #72]	; (40222c <udd_attach+0x88>)
  4021e2:	681a      	ldr	r2, [r3, #0]
  4021e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4021e8:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
  4021ea:	2508      	movs	r5, #8
  4021ec:	619d      	str	r5, [r3, #24]
	udd_enable_suspend_interrupt();
  4021ee:	2101      	movs	r1, #1
  4021f0:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
  4021f2:	2210      	movs	r2, #16
  4021f4:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
  4021f6:	2004      	movs	r0, #4
  4021f8:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
  4021fa:	609d      	str	r5, [r3, #8]
	udd_ack_sof();
  4021fc:	6098      	str	r0, [r3, #8]
	udd_ack_msof();
  4021fe:	2002      	movs	r0, #2
  402200:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
  402202:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
  402204:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
  402206:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  40220a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40220e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
  402212:	b124      	cbz	r4, 40221e <udd_attach+0x7a>
		cpu_irq_enable();
  402214:	4b03      	ldr	r3, [pc, #12]	; (402224 <udd_attach+0x80>)
  402216:	7019      	strb	r1, [r3, #0]
  402218:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40221c:	b662      	cpsie	i
}
  40221e:	b003      	add	sp, #12
  402220:	bd30      	pop	{r4, r5, pc}
  402222:	bf00      	nop
  402224:	204000e7 	.word	0x204000e7
  402228:	004016d1 	.word	0x004016d1
  40222c:	40038000 	.word	0x40038000

00402230 <udd_enable>:
{
  402230:	b510      	push	{r4, lr}
  402232:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402234:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402238:	fab3 f383 	clz	r3, r3
  40223c:	095b      	lsrs	r3, r3, #5
  40223e:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402240:	b672      	cpsid	i
  402242:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402246:	2200      	movs	r2, #0
  402248:	4b3f      	ldr	r3, [pc, #252]	; (402348 <udd_enable+0x118>)
  40224a:	701a      	strb	r2, [r3, #0]
	return flags;
  40224c:	9c00      	ldr	r4, [sp, #0]
	pmc_enable_periph_clk(ID_USBHS);
  40224e:	2022      	movs	r0, #34	; 0x22
  402250:	4b3e      	ldr	r3, [pc, #248]	; (40234c <udd_enable+0x11c>)
  402252:	4798      	blx	r3
	sysclk_enable_usb();
  402254:	4b3e      	ldr	r3, [pc, #248]	; (402350 <udd_enable+0x120>)
  402256:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402258:	4b3e      	ldr	r3, [pc, #248]	; (402354 <udd_enable+0x124>)
  40225a:	22a0      	movs	r2, #160	; 0xa0
  40225c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402260:	2204      	movs	r2, #4
  402262:	605a      	str	r2, [r3, #4]
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  402264:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  402268:	4b3b      	ldr	r3, [pc, #236]	; (402358 <udd_enable+0x128>)
  40226a:	4798      	blx	r3
	USBHS->USBHS_CTRL = USBHS_CTRL_UIMOD_DEVICE;
  40226c:	4b3b      	ldr	r3, [pc, #236]	; (40235c <udd_enable+0x12c>)
  40226e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402272:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
  402276:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  40227a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  40227e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_low_speed_disable();
  402282:	681a      	ldr	r2, [r3, #0]
  402284:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402288:	601a      	str	r2, [r3, #0]
	udd_high_speed_disable();
  40228a:	681a      	ldr	r2, [r3, #0]
  40228c:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
  402290:	601a      	str	r2, [r3, #0]
	otg_unfreeze_clock();
  402292:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  402296:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  40229a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
  40229e:	461a      	mov	r2, r3
  4022a0:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
  4022a4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4022a8:	d0fa      	beq.n	4022a0 <udd_enable+0x70>
  4022aa:	2200      	movs	r2, #0
		udd_ep_job[i].busy = false;
  4022ac:	482c      	ldr	r0, [pc, #176]	; (402360 <udd_enable+0x130>)
  4022ae:	0053      	lsls	r3, r2, #1
  4022b0:	1899      	adds	r1, r3, r2
  4022b2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  4022b6:	7d09      	ldrb	r1, [r1, #20]
		udd_ep_job[i].stall_requested = false;
  4022b8:	4413      	add	r3, r2
  4022ba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  4022be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  4022c2:	f36f 0182 	bfc	r1, #2, #1
  4022c6:	7519      	strb	r1, [r3, #20]
  4022c8:	3201      	adds	r2, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4022ca:	2a06      	cmp	r2, #6
  4022cc:	d1ef      	bne.n	4022ae <udd_enable+0x7e>
	otg_freeze_clock();
  4022ce:	4a23      	ldr	r2, [pc, #140]	; (40235c <udd_enable+0x12c>)
  4022d0:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  4022d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4022d8:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	if (!udd_b_sleep_initialized) {
  4022dc:	4b21      	ldr	r3, [pc, #132]	; (402364 <udd_enable+0x134>)
  4022de:	781b      	ldrb	r3, [r3, #0]
  4022e0:	bb1b      	cbnz	r3, 40232a <udd_enable+0xfa>
		udd_b_sleep_initialized = true;
  4022e2:	2201      	movs	r2, #1
  4022e4:	4b1f      	ldr	r3, [pc, #124]	; (402364 <udd_enable+0x134>)
  4022e6:	701a      	strb	r2, [r3, #0]
		udd_b_idle = false;
  4022e8:	2200      	movs	r2, #0
  4022ea:	4b1f      	ldr	r3, [pc, #124]	; (402368 <udd_enable+0x138>)
  4022ec:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  4022ee:	4b1f      	ldr	r3, [pc, #124]	; (40236c <udd_enable+0x13c>)
  4022f0:	78db      	ldrb	r3, [r3, #3]
  4022f2:	2bff      	cmp	r3, #255	; 0xff
  4022f4:	d018      	beq.n	402328 <udd_enable+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4022f6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4022fa:	fab3 f383 	clz	r3, r3
  4022fe:	095b      	lsrs	r3, r3, #5
  402300:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402302:	b672      	cpsid	i
  402304:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402308:	2200      	movs	r2, #0
  40230a:	4b0f      	ldr	r3, [pc, #60]	; (402348 <udd_enable+0x118>)
  40230c:	701a      	strb	r2, [r3, #0]
	return flags;
  40230e:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  402310:	4a16      	ldr	r2, [pc, #88]	; (40236c <udd_enable+0x13c>)
  402312:	78d3      	ldrb	r3, [r2, #3]
  402314:	3301      	adds	r3, #1
  402316:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
  402318:	b151      	cbz	r1, 402330 <udd_enable+0x100>
		cpu_irq_enable();
  40231a:	2201      	movs	r2, #1
  40231c:	4b0a      	ldr	r3, [pc, #40]	; (402348 <udd_enable+0x118>)
  40231e:	701a      	strb	r2, [r3, #0]
  402320:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402324:	b662      	cpsie	i
  402326:	e003      	b.n	402330 <udd_enable+0x100>
  402328:	e7fe      	b.n	402328 <udd_enable+0xf8>
		udd_sleep_mode(false); // Enter idle mode
  40232a:	2000      	movs	r0, #0
  40232c:	4b10      	ldr	r3, [pc, #64]	; (402370 <udd_enable+0x140>)
  40232e:	4798      	blx	r3
	udd_attach();
  402330:	4b10      	ldr	r3, [pc, #64]	; (402374 <udd_enable+0x144>)
  402332:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  402334:	b12c      	cbz	r4, 402342 <udd_enable+0x112>
		cpu_irq_enable();
  402336:	2201      	movs	r2, #1
  402338:	4b03      	ldr	r3, [pc, #12]	; (402348 <udd_enable+0x118>)
  40233a:	701a      	strb	r2, [r3, #0]
  40233c:	f3bf 8f5f 	dmb	sy
  402340:	b662      	cpsie	i
}
  402342:	b002      	add	sp, #8
  402344:	bd10      	pop	{r4, pc}
  402346:	bf00      	nop
  402348:	204000e7 	.word	0x204000e7
  40234c:	004013a9 	.word	0x004013a9
  402350:	004004c9 	.word	0x004004c9
  402354:	e000e100 	.word	0xe000e100
  402358:	004013e9 	.word	0x004013e9
  40235c:	40038000 	.word	0x40038000
  402360:	20400b58 	.word	0x20400b58
  402364:	20400b4e 	.word	0x20400b4e
  402368:	20400b4d 	.word	0x20400b4d
  40236c:	20401034 	.word	0x20401034
  402370:	004016d1 	.word	0x004016d1
  402374:	004021a5 	.word	0x004021a5

00402378 <udd_is_high_speed>:
}
  402378:	2000      	movs	r0, #0
  40237a:	4770      	bx	lr

0040237c <udd_set_address>:
	udd_disable_address();
  40237c:	4b08      	ldr	r3, [pc, #32]	; (4023a0 <udd_set_address+0x24>)
  40237e:	681a      	ldr	r2, [r3, #0]
  402380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402384:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
  402386:	681a      	ldr	r2, [r3, #0]
  402388:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  40238c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  402390:	4302      	orrs	r2, r0
  402392:	601a      	str	r2, [r3, #0]
	udd_enable_address();
  402394:	681a      	ldr	r2, [r3, #0]
  402396:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40239a:	601a      	str	r2, [r3, #0]
  40239c:	4770      	bx	lr
  40239e:	bf00      	nop
  4023a0:	40038000 	.word	0x40038000

004023a4 <udd_getaddress>:
	return udd_get_configured_address();
  4023a4:	4b02      	ldr	r3, [pc, #8]	; (4023b0 <udd_getaddress+0xc>)
  4023a6:	6818      	ldr	r0, [r3, #0]
}
  4023a8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4023ac:	4770      	bx	lr
  4023ae:	bf00      	nop
  4023b0:	40038000 	.word	0x40038000

004023b4 <udd_get_frame_number>:
	return udd_frame_number();
  4023b4:	4b02      	ldr	r3, [pc, #8]	; (4023c0 <udd_get_frame_number+0xc>)
  4023b6:	6a18      	ldr	r0, [r3, #32]
}
  4023b8:	f3c0 00ca 	ubfx	r0, r0, #3, #11
  4023bc:	4770      	bx	lr
  4023be:	bf00      	nop
  4023c0:	40038000 	.word	0x40038000

004023c4 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  4023c4:	4b01      	ldr	r3, [pc, #4]	; (4023cc <udd_set_setup_payload+0x8>)
  4023c6:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  4023c8:	8199      	strh	r1, [r3, #12]
  4023ca:	4770      	bx	lr
  4023cc:	2040103c 	.word	0x2040103c

004023d0 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4023d0:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4023d4:	2a06      	cmp	r2, #6
  4023d6:	d900      	bls.n	4023da <udd_ep_free+0xa>
  4023d8:	4770      	bx	lr
{
  4023da:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
  4023dc:	4810      	ldr	r0, [pc, #64]	; (402420 <udd_ep_free+0x50>)
  4023de:	69c3      	ldr	r3, [r0, #28]
  4023e0:	2101      	movs	r1, #1
  4023e2:	fa01 f402 	lsl.w	r4, r1, r2
  4023e6:	ea23 0304 	bic.w	r3, r3, r4
  4023ea:	61c3      	str	r3, [r0, #28]
	udd_unallocate_memory(ep_index);
  4023ec:	f500 7080 	add.w	r0, r0, #256	; 0x100
  4023f0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
  4023f4:	f023 0302 	bic.w	r3, r3, #2
  4023f8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
  4023fc:	1e56      	subs	r6, r2, #1
  4023fe:	4c09      	ldr	r4, [pc, #36]	; (402424 <udd_ep_free+0x54>)
  402400:	fa06 f501 	lsl.w	r5, r6, r1
  402404:	19a8      	adds	r0, r5, r6
  402406:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  40240a:	4b07      	ldr	r3, [pc, #28]	; (402428 <udd_ep_free+0x58>)
  40240c:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
  40240e:	4435      	add	r5, r6
  402410:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  402414:	7d23      	ldrb	r3, [r4, #20]
  402416:	f36f 0382 	bfc	r3, #2, #1
  40241a:	7523      	strb	r3, [r4, #20]
  40241c:	bd70      	pop	{r4, r5, r6, pc}
  40241e:	bf00      	nop
  402420:	40038000 	.word	0x40038000
  402424:	20400b58 	.word	0x20400b58
  402428:	004019d5 	.word	0x004019d5

0040242c <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
  40242c:	f000 000f 	and.w	r0, r0, #15
  402430:	4b02      	ldr	r3, [pc, #8]	; (40243c <udd_ep_is_halted+0x10>)
  402432:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
  402436:	f3c0 40c0 	ubfx	r0, r0, #19, #1
  40243a:	4770      	bx	lr
  40243c:	400381c0 	.word	0x400381c0

00402440 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402440:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402444:	2b06      	cmp	r3, #6
  402446:	d85d      	bhi.n	402504 <udd_ep_set_halt+0xc4>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
  402448:	4a36      	ldr	r2, [pc, #216]	; (402524 <udd_ep_set_halt+0xe4>)
  40244a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40244e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
  402452:	d159      	bne.n	402508 <udd_ep_set_halt+0xc8>
{
  402454:	b410      	push	{r4}
  402456:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402458:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
  40245a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
  40245e:	4a32      	ldr	r2, [pc, #200]	; (402528 <udd_ep_set_halt+0xe8>)
  402460:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  402464:	7d12      	ldrb	r2, [r2, #20]
  402466:	f012 0f04 	tst.w	r2, #4
  40246a:	d14f      	bne.n	40250c <udd_ep_set_halt+0xcc>
	if (ptr_job->busy == true) {
  40246c:	f012 0f01 	tst.w	r2, #1
  402470:	d151      	bne.n	402516 <udd_ep_set_halt+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402472:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402476:	fab2 f282 	clz	r2, r2
  40247a:	0952      	lsrs	r2, r2, #5
  40247c:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40247e:	b672      	cpsid	i
  402480:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402484:	2400      	movs	r4, #0
  402486:	4a29      	ldr	r2, [pc, #164]	; (40252c <udd_ep_set_halt+0xec>)
  402488:	7014      	strb	r4, [r2, #0]
	return flags;
  40248a:	9c01      	ldr	r4, [sp, #4]
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
  40248c:	f010 0f80 	tst.w	r0, #128	; 0x80
  402490:	d118      	bne.n	4024c4 <udd_ep_set_halt+0x84>
	udd_disable_endpoint_bank_autoswitch(ep_index);
  402492:	4927      	ldr	r1, [pc, #156]	; (402530 <udd_ep_set_halt+0xf0>)
  402494:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
  402498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  40249c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_ack_stall(ep_index);
  4024a0:	2140      	movs	r1, #64	; 0x40
  4024a2:	4a24      	ldr	r2, [pc, #144]	; (402534 <udd_ep_set_halt+0xf4>)
  4024a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
  4024a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4024ac:	3290      	adds	r2, #144	; 0x90
  4024ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
  4024b2:	2c00      	cmp	r4, #0
  4024b4:	d033      	beq.n	40251e <udd_ep_set_halt+0xde>
		cpu_irq_enable();
  4024b6:	2001      	movs	r0, #1
  4024b8:	4b1c      	ldr	r3, [pc, #112]	; (40252c <udd_ep_set_halt+0xec>)
  4024ba:	7018      	strb	r0, [r3, #0]
  4024bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4024c0:	b662      	cpsie	i
  4024c2:	e024      	b.n	40250e <udd_ep_set_halt+0xce>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
  4024c4:	4a1c      	ldr	r2, [pc, #112]	; (402538 <udd_ep_set_halt+0xf8>)
  4024c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4024ca:	f412 5f40 	tst.w	r2, #12288	; 0x3000
  4024ce:	d0e0      	beq.n	402492 <udd_ep_set_halt+0x52>
		ptr_job->stall_requested = true;
  4024d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4024d4:	4a14      	ldr	r2, [pc, #80]	; (402528 <udd_ep_set_halt+0xe8>)
  4024d6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
  4024da:	7d0a      	ldrb	r2, [r1, #20]
  4024dc:	f042 0204 	orr.w	r2, r2, #4
  4024e0:	750a      	strb	r2, [r1, #20]
		udd_enable_bank_interrupt(ep_index);
  4024e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4024e6:	4915      	ldr	r1, [pc, #84]	; (40253c <udd_ep_set_halt+0xfc>)
  4024e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
  4024ec:	fa02 f303 	lsl.w	r3, r2, r3
  4024f0:	4a13      	ldr	r2, [pc, #76]	; (402540 <udd_ep_set_halt+0x100>)
  4024f2:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
  4024f4:	b18c      	cbz	r4, 40251a <udd_ep_set_halt+0xda>
		cpu_irq_enable();
  4024f6:	2001      	movs	r0, #1
  4024f8:	4b0c      	ldr	r3, [pc, #48]	; (40252c <udd_ep_set_halt+0xec>)
  4024fa:	7018      	strb	r0, [r3, #0]
  4024fc:	f3bf 8f5f 	dmb	sy
  402500:	b662      	cpsie	i
  402502:	e004      	b.n	40250e <udd_ep_set_halt+0xce>
		return false;
  402504:	2000      	movs	r0, #0
  402506:	4770      	bx	lr
		return true; // Already STALL
  402508:	2001      	movs	r0, #1
  40250a:	4770      	bx	lr
  40250c:	2001      	movs	r0, #1
}
  40250e:	b003      	add	sp, #12
  402510:	f85d 4b04 	ldr.w	r4, [sp], #4
  402514:	4770      	bx	lr
		return false; // Job on going, stall impossible
  402516:	2000      	movs	r0, #0
  402518:	e7f9      	b.n	40250e <udd_ep_set_halt+0xce>
		return true;
  40251a:	2001      	movs	r0, #1
  40251c:	e7f7      	b.n	40250e <udd_ep_set_halt+0xce>
	return true;
  40251e:	2001      	movs	r0, #1
  402520:	e7f5      	b.n	40250e <udd_ep_set_halt+0xce>
  402522:	bf00      	nop
  402524:	400381c0 	.word	0x400381c0
  402528:	20400b58 	.word	0x20400b58
  40252c:	204000e7 	.word	0x204000e7
  402530:	40038100 	.word	0x40038100
  402534:	40038160 	.word	0x40038160
  402538:	40038130 	.word	0x40038130
  40253c:	400381f0 	.word	0x400381f0
  402540:	40038000 	.word	0x40038000

00402544 <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402544:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
  402548:	2806      	cmp	r0, #6
  40254a:	d851      	bhi.n	4025f0 <udd_ep_clear_halt+0xac>
{
  40254c:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40254e:	1e43      	subs	r3, r0, #1
	if (ptr_job->stall_requested) {
  402550:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402554:	4a2c      	ldr	r2, [pc, #176]	; (402608 <udd_ep_clear_halt+0xc4>)
  402556:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40255a:	7d12      	ldrb	r2, [r2, #20]
  40255c:	f012 0f04 	tst.w	r2, #4
  402560:	d048      	beq.n	4025f4 <udd_ep_clear_halt+0xb0>
		ptr_job->stall_requested = false;
  402562:	460a      	mov	r2, r1
  402564:	4928      	ldr	r1, [pc, #160]	; (402608 <udd_ep_clear_halt+0xc4>)
  402566:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40256a:	7d11      	ldrb	r1, [r2, #20]
  40256c:	f36f 0182 	bfc	r1, #2, #1
  402570:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
  402572:	0082      	lsls	r2, r0, #2
  402574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402578:	4c24      	ldr	r4, [pc, #144]	; (40260c <udd_ep_clear_halt+0xc8>)
  40257a:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
  40257e:	4081      	lsls	r1, r0
  402580:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
  402584:	6161      	str	r1, [r4, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
  402586:	4922      	ldr	r1, [pc, #136]	; (402610 <udd_ep_clear_halt+0xcc>)
  402588:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40258c:	f411 2f00 	tst.w	r1, #524288	; 0x80000
  402590:	d014      	beq.n	4025bc <udd_ep_clear_halt+0x78>
		if (Is_udd_stall(ep_index)) {
  402592:	4920      	ldr	r1, [pc, #128]	; (402614 <udd_ep_clear_halt+0xd0>)
  402594:	5851      	ldr	r1, [r2, r1]
  402596:	f011 0f40 	tst.w	r1, #64	; 0x40
  40259a:	d006      	beq.n	4025aa <udd_ep_clear_halt+0x66>
			udd_ack_stall(ep_index);
  40259c:	2040      	movs	r0, #64	; 0x40
  40259e:	491e      	ldr	r1, [pc, #120]	; (402618 <udd_ep_clear_halt+0xd4>)
  4025a0:	5050      	str	r0, [r2, r1]
			udd_reset_data_toggle(ep_index);
  4025a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4025a6:	3190      	adds	r1, #144	; 0x90
  4025a8:	5050      	str	r0, [r2, r1]
		udd_disable_stall_handshake(ep_index);
  4025aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  4025ae:	4917      	ldr	r1, [pc, #92]	; (40260c <udd_ep_clear_halt+0xc8>)
  4025b0:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
  4025b2:	481a      	ldr	r0, [pc, #104]	; (40261c <udd_ep_clear_halt+0xd8>)
  4025b4:	5811      	ldr	r1, [r2, r0]
  4025b6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  4025ba:	5011      	str	r1, [r2, r0]
		if (ptr_job->busy == true) {
  4025bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  4025c0:	4911      	ldr	r1, [pc, #68]	; (402608 <udd_ep_clear_halt+0xc4>)
  4025c2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4025c6:	7d12      	ldrb	r2, [r2, #20]
  4025c8:	f012 0f01 	tst.w	r2, #1
  4025cc:	d101      	bne.n	4025d2 <udd_ep_clear_halt+0x8e>
	return true;
  4025ce:	2001      	movs	r0, #1
  4025d0:	bd10      	pop	{r4, pc}
			ptr_job->busy = false;
  4025d2:	4608      	mov	r0, r1
  4025d4:	0059      	lsls	r1, r3, #1
  4025d6:	18ca      	adds	r2, r1, r3
  4025d8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  4025dc:	7d14      	ldrb	r4, [r2, #20]
  4025de:	f36f 0400 	bfc	r4, #0, #1
  4025e2:	7514      	strb	r4, [r2, #20]
			ptr_job->call_nohalt();
  4025e4:	440b      	add	r3, r1
  4025e6:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
  4025ea:	4798      	blx	r3
	return true;
  4025ec:	2001      	movs	r0, #1
  4025ee:	bd10      	pop	{r4, pc}
		return false;
  4025f0:	2000      	movs	r0, #0
  4025f2:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep_index)) {
  4025f4:	0082      	lsls	r2, r0, #2
  4025f6:	4906      	ldr	r1, [pc, #24]	; (402610 <udd_ep_clear_halt+0xcc>)
  4025f8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4025fc:	f411 2f00 	tst.w	r1, #524288	; 0x80000
  402600:	d1c7      	bne.n	402592 <udd_ep_clear_halt+0x4e>
	return true;
  402602:	2001      	movs	r0, #1
}
  402604:	bd10      	pop	{r4, pc}
  402606:	bf00      	nop
  402608:	20400b58 	.word	0x20400b58
  40260c:	40038220 	.word	0x40038220
  402610:	400381c0 	.word	0x400381c0
  402614:	40038130 	.word	0x40038130
  402618:	40038160 	.word	0x40038160
  40261c:	40038100 	.word	0x40038100

00402620 <udd_ep_run>:
{
  402620:	b5f0      	push	{r4, r5, r6, r7, lr}
  402622:	b083      	sub	sp, #12
  402624:	f000 000f 	and.w	r0, r0, #15
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
  402628:	4c3a      	ldr	r4, [pc, #232]	; (402714 <udd_ep_run+0xf4>)
  40262a:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
	if (USB_DEVICE_MAX_EP < ep) {
  40262e:	2806      	cmp	r0, #6
  402630:	d864      	bhi.n	4026fc <udd_ep_run+0xdc>
	if ((!Is_udd_endpoint_enabled(ep))
  402632:	4c39      	ldr	r4, [pc, #228]	; (402718 <udd_ep_run+0xf8>)
  402634:	69e5      	ldr	r5, [r4, #28]
  402636:	2401      	movs	r4, #1
  402638:	4084      	lsls	r4, r0
  40263a:	422c      	tst	r4, r5
  40263c:	d061      	beq.n	402702 <udd_ep_run+0xe2>
			|| Is_udd_endpoint_stall_requested(ep)
  40263e:	4c37      	ldr	r4, [pc, #220]	; (40271c <udd_ep_run+0xfc>)
  402640:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
  402644:	f414 2f00 	tst.w	r4, #524288	; 0x80000
  402648:	d15d      	bne.n	402706 <udd_ep_run+0xe6>
	ptr_job = &udd_ep_job[ep - 1];
  40264a:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
  40264c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
  402650:	4d33      	ldr	r5, [pc, #204]	; (402720 <udd_ep_run+0x100>)
  402652:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
  402656:	7d2d      	ldrb	r5, [r5, #20]
  402658:	f015 0f04 	tst.w	r5, #4
  40265c:	d155      	bne.n	40270a <udd_ep_run+0xea>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40265e:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402662:	fab5 f585 	clz	r5, r5
  402666:	096d      	lsrs	r5, r5, #5
  402668:	9501      	str	r5, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40266a:	b672      	cpsid	i
  40266c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402670:	2600      	movs	r6, #0
  402672:	4d2c      	ldr	r5, [pc, #176]	; (402724 <udd_ep_run+0x104>)
  402674:	702e      	strb	r6, [r5, #0]
	return flags;
  402676:	9f01      	ldr	r7, [sp, #4]
	if (ptr_job->busy == true) {
  402678:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  40267c:	4e28      	ldr	r6, [pc, #160]	; (402720 <udd_ep_run+0x100>)
  40267e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  402682:	7d2d      	ldrb	r5, [r5, #20]
  402684:	f015 0f01 	tst.w	r5, #1
  402688:	d009      	beq.n	40269e <udd_ep_run+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
  40268a:	2f00      	cmp	r7, #0
  40268c:	d03f      	beq.n	40270e <udd_ep_run+0xee>
		cpu_irq_enable();
  40268e:	2201      	movs	r2, #1
  402690:	4b24      	ldr	r3, [pc, #144]	; (402724 <udd_ep_run+0x104>)
  402692:	701a      	strb	r2, [r3, #0]
  402694:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402698:	b662      	cpsie	i
		return false; // Job already on going
  40269a:	2000      	movs	r0, #0
  40269c:	e02f      	b.n	4026fe <udd_ep_run+0xde>
	ptr_job->busy = true;
  40269e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  4026a2:	4e1f      	ldr	r6, [pc, #124]	; (402720 <udd_ep_run+0x100>)
  4026a4:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  4026a8:	7d2e      	ldrb	r6, [r5, #20]
  4026aa:	f046 0601 	orr.w	r6, r6, #1
  4026ae:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
  4026b0:	b12f      	cbz	r7, 4026be <udd_ep_run+0x9e>
		cpu_irq_enable();
  4026b2:	2601      	movs	r6, #1
  4026b4:	4d1b      	ldr	r5, [pc, #108]	; (402724 <udd_ep_run+0x104>)
  4026b6:	702e      	strb	r6, [r5, #0]
  4026b8:	f3bf 8f5f 	dmb	sy
  4026bc:	b662      	cpsie	i
	ptr_job->buf = buf;
  4026be:	4d18      	ldr	r5, [pc, #96]	; (402720 <udd_ep_run+0x100>)
  4026c0:	0066      	lsls	r6, r4, #1
  4026c2:	1937      	adds	r7, r6, r4
  4026c4:	00ff      	lsls	r7, r7, #3
  4026c6:	eb05 0e07 	add.w	lr, r5, r7
  4026ca:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  4026ce:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  4026d2:	2200      	movs	r2, #0
  4026d4:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->buf_load = 0;
  4026d8:	f8ce 2010 	str.w	r2, [lr, #16]
	ptr_job->call_trans = callback;
  4026dc:	9a08      	ldr	r2, [sp, #32]
  4026de:	51ea      	str	r2, [r5, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4026e0:	2b00      	cmp	r3, #0
  4026e2:	bf08      	it	eq
  4026e4:	f041 0101 	orreq.w	r1, r1, #1
  4026e8:	f89e 3014 	ldrb.w	r3, [lr, #20]
  4026ec:	f361 0341 	bfi	r3, r1, #1, #1
  4026f0:	f88e 3014 	strb.w	r3, [lr, #20]
	udd_ep_trans_done(ep);
  4026f4:	4b0c      	ldr	r3, [pc, #48]	; (402728 <udd_ep_run+0x108>)
  4026f6:	4798      	blx	r3
	return true;
  4026f8:	2001      	movs	r0, #1
  4026fa:	e000      	b.n	4026fe <udd_ep_run+0xde>
		return false;
  4026fc:	2000      	movs	r0, #0
}
  4026fe:	b003      	add	sp, #12
  402700:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  402702:	2000      	movs	r0, #0
  402704:	e7fb      	b.n	4026fe <udd_ep_run+0xde>
  402706:	2000      	movs	r0, #0
  402708:	e7f9      	b.n	4026fe <udd_ep_run+0xde>
  40270a:	2000      	movs	r0, #0
  40270c:	e7f7      	b.n	4026fe <udd_ep_run+0xde>
		return false; // Job already on going
  40270e:	2000      	movs	r0, #0
  402710:	e7f5      	b.n	4026fe <udd_ep_run+0xde>
  402712:	bf00      	nop
  402714:	40038100 	.word	0x40038100
  402718:	40038000 	.word	0x40038000
  40271c:	400381c0 	.word	0x400381c0
  402720:	20400b58 	.word	0x20400b58
  402724:	204000e7 	.word	0x204000e7
  402728:	00401a0d 	.word	0x00401a0d

0040272c <udd_ep_alloc>:
{
  40272c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402730:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  402732:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  402736:	2c06      	cmp	r4, #6
  402738:	f200 80df 	bhi.w	4028fa <udd_ep_alloc+0x1ce>
	if (Is_udd_endpoint_enabled(ep)) {
  40273c:	4b73      	ldr	r3, [pc, #460]	; (40290c <udd_ep_alloc+0x1e0>)
  40273e:	69dd      	ldr	r5, [r3, #28]
  402740:	2301      	movs	r3, #1
  402742:	40a3      	lsls	r3, r4
  402744:	402b      	ands	r3, r5
  402746:	f040 80dd 	bne.w	402904 <udd_ep_alloc+0x1d8>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
  40274a:	f001 0503 	and.w	r5, r1, #3
  40274e:	2d02      	cmp	r5, #2
  402750:	d005      	beq.n	40275e <udd_ep_alloc+0x32>
  402752:	2d03      	cmp	r5, #3
  402754:	d020      	beq.n	402798 <udd_ep_alloc+0x6c>
  402756:	2d01      	cmp	r5, #1
  402758:	d01e      	beq.n	402798 <udd_ep_alloc+0x6c>
		return false;
  40275a:	2300      	movs	r3, #0
  40275c:	e0ce      	b.n	4028fc <udd_ep_alloc+0x1d0>
		bank = USBHS_DEVEPTCFG_EPBK_2_BANK >>
  40275e:	f04f 0e01 	mov.w	lr, #1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  402762:	4e6b      	ldr	r6, [pc, #428]	; (402910 <udd_ep_alloc+0x1e4>)
  402764:	eb06 0584 	add.w	r5, r6, r4, lsl #2
  402768:	f856 c024 	ldr.w	ip, [r6, r4, lsl #2]
  40276c:	4f69      	ldr	r7, [pc, #420]	; (402914 <udd_ep_alloc+0x1e8>)
  40276e:	ea0c 0707 	and.w	r7, ip, r7
  402772:	02c9      	lsls	r1, r1, #11
  402774:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
  402778:	b240      	sxtb	r0, r0
  40277a:	2800      	cmp	r0, #0
  40277c:	bfb8      	it	lt
  40277e:	f44f 7380 	movlt.w	r3, #256	; 0x100
  402782:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
  402786:	b280      	uxth	r0, r0
  402788:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
  40278c:	d307      	bcc.n	40279e <udd_ep_alloc+0x72>
  40278e:	2a08      	cmp	r2, #8
  402790:	d924      	bls.n	4027dc <udd_ep_alloc+0xb0>
  402792:	0052      	lsls	r2, r2, #1
  402794:	3a01      	subs	r2, #1
  402796:	e004      	b.n	4027a2 <udd_ep_alloc+0x76>
		bank = USBHS_DEVEPTCFG_EPBK_1_BANK >>
  402798:	f04f 0e00 	mov.w	lr, #0
  40279c:	e7e1      	b.n	402762 <udd_ep_alloc+0x36>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  40279e:	f240 72ff 	movw	r2, #2047	; 0x7ff
  4027a2:	fab2 f282 	clz	r2, r2
  4027a6:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
  4027aa:	430b      	orrs	r3, r1
  4027ac:	f1c2 021c 	rsb	r2, r2, #28
  4027b0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  4027b4:	f423 63d0 	bic.w	r3, r3, #1664	; 0x680
  4027b8:	f023 0303 	bic.w	r3, r3, #3
  4027bc:	04db      	lsls	r3, r3, #19
  4027be:	0cdb      	lsrs	r3, r3, #19
  4027c0:	433b      	orrs	r3, r7
  4027c2:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	ep_allocated = 1 << ep;
  4027c6:	2701      	movs	r7, #1
  4027c8:	40a7      	lsls	r7, r4
  4027ca:	b2bf      	uxth	r7, r7
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
  4027cc:	2c05      	cmp	r4, #5
  4027ce:	d81c      	bhi.n	40280a <udd_ep_alloc+0xde>
  4027d0:	4a51      	ldr	r2, [pc, #324]	; (402918 <udd_ep_alloc+0x1ec>)
  4027d2:	2306      	movs	r3, #6
		if (Is_udd_endpoint_enabled(i)) {
  4027d4:	484d      	ldr	r0, [pc, #308]	; (40290c <udd_ep_alloc+0x1e0>)
  4027d6:	f04f 0e01 	mov.w	lr, #1
  4027da:	e006      	b.n	4027ea <udd_ep_alloc+0xbe>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  4027dc:	220f      	movs	r2, #15
  4027de:	e7e0      	b.n	4027a2 <udd_ep_alloc+0x76>
  4027e0:	3b01      	subs	r3, #1
  4027e2:	3a04      	subs	r2, #4
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
  4027e4:	b2d9      	uxtb	r1, r3
  4027e6:	428c      	cmp	r4, r1
  4027e8:	d20f      	bcs.n	40280a <udd_ep_alloc+0xde>
		if (Is_udd_endpoint_enabled(i)) {
  4027ea:	69c6      	ldr	r6, [r0, #28]
  4027ec:	fa0e f103 	lsl.w	r1, lr, r3
  4027f0:	420e      	tst	r6, r1
  4027f2:	d0f5      	beq.n	4027e0 <udd_ep_alloc+0xb4>
			ep_allocated |= 1 << i;
  4027f4:	430f      	orrs	r7, r1
  4027f6:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
  4027f8:	69c6      	ldr	r6, [r0, #28]
  4027fa:	ea26 0101 	bic.w	r1, r6, r1
  4027fe:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
  402800:	6811      	ldr	r1, [r2, #0]
  402802:	f021 0102 	bic.w	r1, r1, #2
  402806:	6011      	str	r1, [r2, #0]
  402808:	e7ea      	b.n	4027e0 <udd_ep_alloc+0xb4>
  40280a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  40280e:	4e43      	ldr	r6, [pc, #268]	; (40291c <udd_ep_alloc+0x1f0>)
  402810:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
			bool b_restart = ptr_job->busy;
  402814:	f8df 9104 	ldr.w	r9, [pc, #260]	; 40291c <udd_ep_alloc+0x1f0>
			udd_enable_endpoint(i);
  402818:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 40290c <udd_ep_alloc+0x1e0>
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  40281c:	f8df a100 	ldr.w	sl, [pc, #256]	; 402920 <udd_ep_alloc+0x1f4>
  402820:	e01d      	b.n	40285e <udd_ep_alloc+0x132>
				if (NULL == ptr_job->call_trans) {
  402822:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  402826:	4a3d      	ldr	r2, [pc, #244]	; (40291c <udd_ep_alloc+0x1f0>)
  402828:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
  40282c:	2c00      	cmp	r4, #0
  40282e:	d06b      	beq.n	402908 <udd_ep_alloc+0x1dc>
				if (Is_udd_endpoint_in(i)) {
  402830:	682b      	ldr	r3, [r5, #0]
  402832:	f413 7f80 	tst.w	r3, #256	; 0x100
					i |= USB_EP_DIR_IN;
  402836:	bf18      	it	ne
  402838:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
  40283c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  402840:	4b36      	ldr	r3, [pc, #216]	; (40291c <udd_ep_alloc+0x1f0>)
  402842:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  402846:	4602      	mov	r2, r0
  402848:	68c9      	ldr	r1, [r1, #12]
  40284a:	2001      	movs	r0, #1
  40284c:	47a0      	blx	r4
				return false;
  40284e:	2300      	movs	r3, #0
  402850:	e054      	b.n	4028fc <udd_ep_alloc+0x1d0>
  402852:	3401      	adds	r4, #1
  402854:	3504      	adds	r5, #4
  402856:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
  402858:	b2e3      	uxtb	r3, r4
  40285a:	2b06      	cmp	r3, #6
  40285c:	d84b      	bhi.n	4028f6 <udd_ep_alloc+0x1ca>
  40285e:	b2e0      	uxtb	r0, r4
		if (ep_allocated & (1 << i)) {
  402860:	fa47 f304 	asr.w	r3, r7, r4
  402864:	f013 0f01 	tst.w	r3, #1
  402868:	d0f3      	beq.n	402852 <udd_ep_alloc+0x126>
  40286a:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
  40286c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  402870:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
  402874:	f893 e014 	ldrb.w	lr, [r3, #20]
  402878:	f00e 0201 	and.w	r2, lr, #1
			ptr_job->busy = false;
  40287c:	f36f 0e00 	bfc	lr, #0, #1
  402880:	f883 e014 	strb.w	lr, [r3, #20]
			udd_allocate_memory(i);
  402884:	682b      	ldr	r3, [r5, #0]
  402886:	f043 0302 	orr.w	r3, r3, #2
  40288a:	602b      	str	r3, [r5, #0]
			udd_enable_endpoint(i);
  40288c:	f8d8 e01c 	ldr.w	lr, [r8, #28]
  402890:	2301      	movs	r3, #1
  402892:	40a3      	lsls	r3, r4
  402894:	ea43 030e 	orr.w	r3, r3, lr
  402898:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
  40289c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40289e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  4028a2:	d0be      	beq.n	402822 <udd_ep_alloc+0xf6>
			udd_enable_endpoint_bank_autoswitch(i);
  4028a4:	682b      	ldr	r3, [r5, #0]
  4028a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4028aa:	602b      	str	r3, [r5, #0]
			if (b_restart) {
  4028ac:	2a00      	cmp	r2, #0
  4028ae:	d0d0      	beq.n	402852 <udd_ep_alloc+0x126>
				ptr_job->buf_cnt -= ptr_job->buf_load;
  4028b0:	f856 3c0c 	ldr.w	r3, [r6, #-12]
  4028b4:	f856 2c08 	ldr.w	r2, [r6, #-8]
  4028b8:	1a9a      	subs	r2, r3, r2
  4028ba:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  4028be:	682b      	ldr	r3, [r5, #0]
  4028c0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4028c4:	bf18      	it	ne
  4028c6:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
  4028ca:	f856 bc10 	ldr.w	fp, [r6, #-16]
  4028ce:	f856 cc14 	ldr.w	ip, [r6, #-20]
						ptr_job->b_shortpacket,
  4028d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4028d6:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
  4028da:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  4028dc:	f856 3c18 	ldr.w	r3, [r6, #-24]
  4028e0:	9300      	str	r3, [sp, #0]
  4028e2:	ebab 0302 	sub.w	r3, fp, r2
  4028e6:	4462      	add	r2, ip
  4028e8:	f3c1 0140 	ubfx	r1, r1, #1, #1
  4028ec:	47d0      	blx	sl
				if (!b_restart) {
  4028ee:	4603      	mov	r3, r0
  4028f0:	2800      	cmp	r0, #0
  4028f2:	d1ae      	bne.n	402852 <udd_ep_alloc+0x126>
  4028f4:	e002      	b.n	4028fc <udd_ep_alloc+0x1d0>
	return true;
  4028f6:	2301      	movs	r3, #1
  4028f8:	e000      	b.n	4028fc <udd_ep_alloc+0x1d0>
		return false;
  4028fa:	2300      	movs	r3, #0
}
  4028fc:	4618      	mov	r0, r3
  4028fe:	b003      	add	sp, #12
  402900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
  402904:	2300      	movs	r3, #0
  402906:	e7f9      	b.n	4028fc <udd_ep_alloc+0x1d0>
					return false;
  402908:	2300      	movs	r3, #0
  40290a:	e7f7      	b.n	4028fc <udd_ep_alloc+0x1d0>
  40290c:	40038000 	.word	0x40038000
  402910:	40038100 	.word	0x40038100
  402914:	ffffe683 	.word	0xffffe683
  402918:	40038118 	.word	0x40038118
  40291c:	20400b58 	.word	0x20400b58
  402920:	00402621 	.word	0x00402621

00402924 <udd_ep_abort>:
{
  402924:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402926:	f000 020f 	and.w	r2, r0, #15
		udd_disable_endpoint_dma_interrupt(ep_index);
  40292a:	1e54      	subs	r4, r2, #1
  40292c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  402930:	40a3      	lsls	r3, r4
  402932:	4918      	ldr	r1, [pc, #96]	; (402994 <udd_ep_abort+0x70>)
  402934:	614b      	str	r3, [r1, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
  402936:	4b18      	ldr	r3, [pc, #96]	; (402998 <udd_ep_abort+0x74>)
  402938:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  40293c:	2500      	movs	r5, #0
  40293e:	609d      	str	r5, [r3, #8]
	udd_disable_endpoint_interrupt(ep_index);
  402940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402944:	4093      	lsls	r3, r2
  402946:	614b      	str	r3, [r1, #20]
  __ASM volatile ("dsb");
  402948:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40294c:	f3bf 8f6f 	isb	sy
	if (ep & USB_EP_DIR_IN) {
  402950:	f010 0f80 	tst.w	r0, #128	; 0x80
  402954:	d108      	bne.n	402968 <udd_ep_abort+0x44>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
  402956:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  40295a:	2101      	movs	r1, #1
  40295c:	480f      	ldr	r0, [pc, #60]	; (40299c <udd_ep_abort+0x78>)
  40295e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  402962:	4b0f      	ldr	r3, [pc, #60]	; (4029a0 <udd_ep_abort+0x7c>)
  402964:	4798      	blx	r3
  402966:	bd70      	pop	{r4, r5, r6, pc}
		while(udd_nb_busy_bank(ep_index)) {
  402968:	0093      	lsls	r3, r2, #2
  40296a:	480e      	ldr	r0, [pc, #56]	; (4029a4 <udd_ep_abort+0x80>)
  40296c:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
  40296e:	4d0e      	ldr	r5, [pc, #56]	; (4029a8 <udd_ep_abort+0x84>)
  402970:	441d      	add	r5, r3
  402972:	f44f 5600 	mov.w	r6, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
  402976:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
  40297a:	4419      	add	r1, r3
  40297c:	e004      	b.n	402988 <udd_ep_abort+0x64>
			udd_kill_last_in_bank(ep_index);
  40297e:	602e      	str	r6, [r5, #0]
			while(Is_udd_kill_last(ep_index));
  402980:	680b      	ldr	r3, [r1, #0]
  402982:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402986:	d1fb      	bne.n	402980 <udd_ep_abort+0x5c>
		while(udd_nb_busy_bank(ep_index)) {
  402988:	6803      	ldr	r3, [r0, #0]
  40298a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  40298e:	d1f6      	bne.n	40297e <udd_ep_abort+0x5a>
  402990:	e7e1      	b.n	402956 <udd_ep_abort+0x32>
  402992:	bf00      	nop
  402994:	40038000 	.word	0x40038000
  402998:	40038300 	.word	0x40038300
  40299c:	20400b58 	.word	0x20400b58
  4029a0:	004019d5 	.word	0x004019d5
  4029a4:	40038130 	.word	0x40038130
  4029a8:	400381f0 	.word	0x400381f0

004029ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4029ac:	e7fe      	b.n	4029ac <Dummy_Handler>
	...

004029b0 <Reset_Handler>:
{
  4029b0:	b500      	push	{lr}
  4029b2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4029b4:	4b25      	ldr	r3, [pc, #148]	; (402a4c <Reset_Handler+0x9c>)
  4029b6:	4a26      	ldr	r2, [pc, #152]	; (402a50 <Reset_Handler+0xa0>)
  4029b8:	429a      	cmp	r2, r3
  4029ba:	d010      	beq.n	4029de <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4029bc:	4b25      	ldr	r3, [pc, #148]	; (402a54 <Reset_Handler+0xa4>)
  4029be:	4a23      	ldr	r2, [pc, #140]	; (402a4c <Reset_Handler+0x9c>)
  4029c0:	429a      	cmp	r2, r3
  4029c2:	d20c      	bcs.n	4029de <Reset_Handler+0x2e>
  4029c4:	3b01      	subs	r3, #1
  4029c6:	1a9b      	subs	r3, r3, r2
  4029c8:	f023 0303 	bic.w	r3, r3, #3
  4029cc:	3304      	adds	r3, #4
  4029ce:	4413      	add	r3, r2
  4029d0:	491f      	ldr	r1, [pc, #124]	; (402a50 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4029d2:	f851 0b04 	ldr.w	r0, [r1], #4
  4029d6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4029da:	429a      	cmp	r2, r3
  4029dc:	d1f9      	bne.n	4029d2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4029de:	4b1e      	ldr	r3, [pc, #120]	; (402a58 <Reset_Handler+0xa8>)
  4029e0:	4a1e      	ldr	r2, [pc, #120]	; (402a5c <Reset_Handler+0xac>)
  4029e2:	429a      	cmp	r2, r3
  4029e4:	d20a      	bcs.n	4029fc <Reset_Handler+0x4c>
  4029e6:	3b01      	subs	r3, #1
  4029e8:	1a9b      	subs	r3, r3, r2
  4029ea:	f023 0303 	bic.w	r3, r3, #3
  4029ee:	3304      	adds	r3, #4
  4029f0:	4413      	add	r3, r2
                *pDest++ = 0;
  4029f2:	2100      	movs	r1, #0
  4029f4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4029f8:	4293      	cmp	r3, r2
  4029fa:	d1fb      	bne.n	4029f4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4029fc:	4a18      	ldr	r2, [pc, #96]	; (402a60 <Reset_Handler+0xb0>)
  4029fe:	4b19      	ldr	r3, [pc, #100]	; (402a64 <Reset_Handler+0xb4>)
  402a00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402a04:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402a06:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402a0a:	fab3 f383 	clz	r3, r3
  402a0e:	095b      	lsrs	r3, r3, #5
  402a10:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402a12:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402a14:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402a18:	2200      	movs	r2, #0
  402a1a:	4b13      	ldr	r3, [pc, #76]	; (402a68 <Reset_Handler+0xb8>)
  402a1c:	701a      	strb	r2, [r3, #0]
	return flags;
  402a1e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402a20:	4a12      	ldr	r2, [pc, #72]	; (402a6c <Reset_Handler+0xbc>)
  402a22:	6813      	ldr	r3, [r2, #0]
  402a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402a28:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402a2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402a2e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  402a32:	b129      	cbz	r1, 402a40 <Reset_Handler+0x90>
		cpu_irq_enable();
  402a34:	2201      	movs	r2, #1
  402a36:	4b0c      	ldr	r3, [pc, #48]	; (402a68 <Reset_Handler+0xb8>)
  402a38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402a3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402a3e:	b662      	cpsie	i
        __libc_init_array();
  402a40:	4b0b      	ldr	r3, [pc, #44]	; (402a70 <Reset_Handler+0xc0>)
  402a42:	4798      	blx	r3
        main();
  402a44:	4b0b      	ldr	r3, [pc, #44]	; (402a74 <Reset_Handler+0xc4>)
  402a46:	4798      	blx	r3
  402a48:	e7fe      	b.n	402a48 <Reset_Handler+0x98>
  402a4a:	bf00      	nop
  402a4c:	20400000 	.word	0x20400000
  402a50:	00406fd0 	.word	0x00406fd0
  402a54:	20400aa0 	.word	0x20400aa0
  402a58:	20401090 	.word	0x20401090
  402a5c:	20400aa0 	.word	0x20400aa0
  402a60:	e000ed00 	.word	0xe000ed00
  402a64:	00400000 	.word	0x00400000
  402a68:	204000e7 	.word	0x204000e7
  402a6c:	e000ed88 	.word	0xe000ed88
  402a70:	00403d8d 	.word	0x00403d8d
  402a74:	00403b01 	.word	0x00403b01

00402a78 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402a78:	4b3b      	ldr	r3, [pc, #236]	; (402b68 <SystemCoreClockUpdate+0xf0>)
  402a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a7c:	f003 0303 	and.w	r3, r3, #3
  402a80:	2b01      	cmp	r3, #1
  402a82:	d01d      	beq.n	402ac0 <SystemCoreClockUpdate+0x48>
  402a84:	b183      	cbz	r3, 402aa8 <SystemCoreClockUpdate+0x30>
  402a86:	2b02      	cmp	r3, #2
  402a88:	d036      	beq.n	402af8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402a8a:	4b37      	ldr	r3, [pc, #220]	; (402b68 <SystemCoreClockUpdate+0xf0>)
  402a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402a92:	2b70      	cmp	r3, #112	; 0x70
  402a94:	d05f      	beq.n	402b56 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402a96:	4b34      	ldr	r3, [pc, #208]	; (402b68 <SystemCoreClockUpdate+0xf0>)
  402a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402a9a:	4934      	ldr	r1, [pc, #208]	; (402b6c <SystemCoreClockUpdate+0xf4>)
  402a9c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402aa0:	680b      	ldr	r3, [r1, #0]
  402aa2:	40d3      	lsrs	r3, r2
  402aa4:	600b      	str	r3, [r1, #0]
  402aa6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402aa8:	4b31      	ldr	r3, [pc, #196]	; (402b70 <SystemCoreClockUpdate+0xf8>)
  402aaa:	695b      	ldr	r3, [r3, #20]
  402aac:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402ab0:	bf14      	ite	ne
  402ab2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402ab6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402aba:	4b2c      	ldr	r3, [pc, #176]	; (402b6c <SystemCoreClockUpdate+0xf4>)
  402abc:	601a      	str	r2, [r3, #0]
  402abe:	e7e4      	b.n	402a8a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402ac0:	4b29      	ldr	r3, [pc, #164]	; (402b68 <SystemCoreClockUpdate+0xf0>)
  402ac2:	6a1b      	ldr	r3, [r3, #32]
  402ac4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402ac8:	d003      	beq.n	402ad2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402aca:	4a2a      	ldr	r2, [pc, #168]	; (402b74 <SystemCoreClockUpdate+0xfc>)
  402acc:	4b27      	ldr	r3, [pc, #156]	; (402b6c <SystemCoreClockUpdate+0xf4>)
  402ace:	601a      	str	r2, [r3, #0]
  402ad0:	e7db      	b.n	402a8a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402ad2:	4a29      	ldr	r2, [pc, #164]	; (402b78 <SystemCoreClockUpdate+0x100>)
  402ad4:	4b25      	ldr	r3, [pc, #148]	; (402b6c <SystemCoreClockUpdate+0xf4>)
  402ad6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402ad8:	4b23      	ldr	r3, [pc, #140]	; (402b68 <SystemCoreClockUpdate+0xf0>)
  402ada:	6a1b      	ldr	r3, [r3, #32]
  402adc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402ae0:	2b10      	cmp	r3, #16
  402ae2:	d005      	beq.n	402af0 <SystemCoreClockUpdate+0x78>
  402ae4:	2b20      	cmp	r3, #32
  402ae6:	d1d0      	bne.n	402a8a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  402ae8:	4a22      	ldr	r2, [pc, #136]	; (402b74 <SystemCoreClockUpdate+0xfc>)
  402aea:	4b20      	ldr	r3, [pc, #128]	; (402b6c <SystemCoreClockUpdate+0xf4>)
  402aec:	601a      	str	r2, [r3, #0]
          break;
  402aee:	e7cc      	b.n	402a8a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  402af0:	4a22      	ldr	r2, [pc, #136]	; (402b7c <SystemCoreClockUpdate+0x104>)
  402af2:	4b1e      	ldr	r3, [pc, #120]	; (402b6c <SystemCoreClockUpdate+0xf4>)
  402af4:	601a      	str	r2, [r3, #0]
          break;
  402af6:	e7c8      	b.n	402a8a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402af8:	4b1b      	ldr	r3, [pc, #108]	; (402b68 <SystemCoreClockUpdate+0xf0>)
  402afa:	6a1b      	ldr	r3, [r3, #32]
  402afc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402b00:	d016      	beq.n	402b30 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402b02:	4a1c      	ldr	r2, [pc, #112]	; (402b74 <SystemCoreClockUpdate+0xfc>)
  402b04:	4b19      	ldr	r3, [pc, #100]	; (402b6c <SystemCoreClockUpdate+0xf4>)
  402b06:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402b08:	4b17      	ldr	r3, [pc, #92]	; (402b68 <SystemCoreClockUpdate+0xf0>)
  402b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b0c:	f003 0303 	and.w	r3, r3, #3
  402b10:	2b02      	cmp	r3, #2
  402b12:	d1ba      	bne.n	402a8a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402b14:	4a14      	ldr	r2, [pc, #80]	; (402b68 <SystemCoreClockUpdate+0xf0>)
  402b16:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402b18:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402b1a:	4814      	ldr	r0, [pc, #80]	; (402b6c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402b1c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402b20:	6803      	ldr	r3, [r0, #0]
  402b22:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402b26:	b2d2      	uxtb	r2, r2
  402b28:	fbb3 f3f2 	udiv	r3, r3, r2
  402b2c:	6003      	str	r3, [r0, #0]
  402b2e:	e7ac      	b.n	402a8a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402b30:	4a11      	ldr	r2, [pc, #68]	; (402b78 <SystemCoreClockUpdate+0x100>)
  402b32:	4b0e      	ldr	r3, [pc, #56]	; (402b6c <SystemCoreClockUpdate+0xf4>)
  402b34:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402b36:	4b0c      	ldr	r3, [pc, #48]	; (402b68 <SystemCoreClockUpdate+0xf0>)
  402b38:	6a1b      	ldr	r3, [r3, #32]
  402b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402b3e:	2b10      	cmp	r3, #16
  402b40:	d005      	beq.n	402b4e <SystemCoreClockUpdate+0xd6>
  402b42:	2b20      	cmp	r3, #32
  402b44:	d1e0      	bne.n	402b08 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  402b46:	4a0b      	ldr	r2, [pc, #44]	; (402b74 <SystemCoreClockUpdate+0xfc>)
  402b48:	4b08      	ldr	r3, [pc, #32]	; (402b6c <SystemCoreClockUpdate+0xf4>)
  402b4a:	601a      	str	r2, [r3, #0]
          break;
  402b4c:	e7dc      	b.n	402b08 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  402b4e:	4a0b      	ldr	r2, [pc, #44]	; (402b7c <SystemCoreClockUpdate+0x104>)
  402b50:	4b06      	ldr	r3, [pc, #24]	; (402b6c <SystemCoreClockUpdate+0xf4>)
  402b52:	601a      	str	r2, [r3, #0]
          break;
  402b54:	e7d8      	b.n	402b08 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  402b56:	4a05      	ldr	r2, [pc, #20]	; (402b6c <SystemCoreClockUpdate+0xf4>)
  402b58:	6813      	ldr	r3, [r2, #0]
  402b5a:	4909      	ldr	r1, [pc, #36]	; (402b80 <SystemCoreClockUpdate+0x108>)
  402b5c:	fba1 1303 	umull	r1, r3, r1, r3
  402b60:	085b      	lsrs	r3, r3, #1
  402b62:	6013      	str	r3, [r2, #0]
  402b64:	4770      	bx	lr
  402b66:	bf00      	nop
  402b68:	400e0600 	.word	0x400e0600
  402b6c:	204000e8 	.word	0x204000e8
  402b70:	400e1810 	.word	0x400e1810
  402b74:	00b71b00 	.word	0x00b71b00
  402b78:	003d0900 	.word	0x003d0900
  402b7c:	007a1200 	.word	0x007a1200
  402b80:	aaaaaaab 	.word	0xaaaaaaab

00402b84 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402b84:	4b16      	ldr	r3, [pc, #88]	; (402be0 <system_init_flash+0x5c>)
  402b86:	4298      	cmp	r0, r3
  402b88:	d913      	bls.n	402bb2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402b8a:	4b16      	ldr	r3, [pc, #88]	; (402be4 <system_init_flash+0x60>)
  402b8c:	4298      	cmp	r0, r3
  402b8e:	d915      	bls.n	402bbc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402b90:	4b15      	ldr	r3, [pc, #84]	; (402be8 <system_init_flash+0x64>)
  402b92:	4298      	cmp	r0, r3
  402b94:	d916      	bls.n	402bc4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402b96:	4b15      	ldr	r3, [pc, #84]	; (402bec <system_init_flash+0x68>)
  402b98:	4298      	cmp	r0, r3
  402b9a:	d917      	bls.n	402bcc <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402b9c:	4b14      	ldr	r3, [pc, #80]	; (402bf0 <system_init_flash+0x6c>)
  402b9e:	4298      	cmp	r0, r3
  402ba0:	d918      	bls.n	402bd4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402ba2:	4b14      	ldr	r3, [pc, #80]	; (402bf4 <system_init_flash+0x70>)
  402ba4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402ba6:	bf94      	ite	ls
  402ba8:	4a13      	ldrls	r2, [pc, #76]	; (402bf8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402baa:	4a14      	ldrhi	r2, [pc, #80]	; (402bfc <system_init_flash+0x78>)
  402bac:	4b14      	ldr	r3, [pc, #80]	; (402c00 <system_init_flash+0x7c>)
  402bae:	601a      	str	r2, [r3, #0]
  402bb0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402bb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402bb6:	4b12      	ldr	r3, [pc, #72]	; (402c00 <system_init_flash+0x7c>)
  402bb8:	601a      	str	r2, [r3, #0]
  402bba:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402bbc:	4a11      	ldr	r2, [pc, #68]	; (402c04 <system_init_flash+0x80>)
  402bbe:	4b10      	ldr	r3, [pc, #64]	; (402c00 <system_init_flash+0x7c>)
  402bc0:	601a      	str	r2, [r3, #0]
  402bc2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402bc4:	4a10      	ldr	r2, [pc, #64]	; (402c08 <system_init_flash+0x84>)
  402bc6:	4b0e      	ldr	r3, [pc, #56]	; (402c00 <system_init_flash+0x7c>)
  402bc8:	601a      	str	r2, [r3, #0]
  402bca:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402bcc:	4a0f      	ldr	r2, [pc, #60]	; (402c0c <system_init_flash+0x88>)
  402bce:	4b0c      	ldr	r3, [pc, #48]	; (402c00 <system_init_flash+0x7c>)
  402bd0:	601a      	str	r2, [r3, #0]
  402bd2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402bd4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402bd8:	4b09      	ldr	r3, [pc, #36]	; (402c00 <system_init_flash+0x7c>)
  402bda:	601a      	str	r2, [r3, #0]
  402bdc:	4770      	bx	lr
  402bde:	bf00      	nop
  402be0:	015ef3bf 	.word	0x015ef3bf
  402be4:	02bde77f 	.word	0x02bde77f
  402be8:	041cdb3f 	.word	0x041cdb3f
  402bec:	057bceff 	.word	0x057bceff
  402bf0:	06dac2bf 	.word	0x06dac2bf
  402bf4:	0839b67f 	.word	0x0839b67f
  402bf8:	04000500 	.word	0x04000500
  402bfc:	04000600 	.word	0x04000600
  402c00:	400e0c00 	.word	0x400e0c00
  402c04:	04000100 	.word	0x04000100
  402c08:	04000200 	.word	0x04000200
  402c0c:	04000300 	.word	0x04000300

00402c10 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402c10:	4b0a      	ldr	r3, [pc, #40]	; (402c3c <_sbrk+0x2c>)
  402c12:	681b      	ldr	r3, [r3, #0]
  402c14:	b153      	cbz	r3, 402c2c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  402c16:	4b09      	ldr	r3, [pc, #36]	; (402c3c <_sbrk+0x2c>)
  402c18:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402c1a:	181a      	adds	r2, r3, r0
  402c1c:	4908      	ldr	r1, [pc, #32]	; (402c40 <_sbrk+0x30>)
  402c1e:	4291      	cmp	r1, r2
  402c20:	db08      	blt.n	402c34 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  402c22:	4610      	mov	r0, r2
  402c24:	4a05      	ldr	r2, [pc, #20]	; (402c3c <_sbrk+0x2c>)
  402c26:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402c28:	4618      	mov	r0, r3
  402c2a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402c2c:	4a05      	ldr	r2, [pc, #20]	; (402c44 <_sbrk+0x34>)
  402c2e:	4b03      	ldr	r3, [pc, #12]	; (402c3c <_sbrk+0x2c>)
  402c30:	601a      	str	r2, [r3, #0]
  402c32:	e7f0      	b.n	402c16 <_sbrk+0x6>
		return (caddr_t) -1;	
  402c34:	f04f 30ff 	mov.w	r0, #4294967295
}
  402c38:	4770      	bx	lr
  402c3a:	bf00      	nop
  402c3c:	20400be8 	.word	0x20400be8
  402c40:	2045fffc 	.word	0x2045fffc
  402c44:	20403290 	.word	0x20403290

00402c48 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402c48:	f04f 30ff 	mov.w	r0, #4294967295
  402c4c:	4770      	bx	lr

00402c4e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  402c4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402c52:	604b      	str	r3, [r1, #4]

	return 0;
}
  402c54:	2000      	movs	r0, #0
  402c56:	4770      	bx	lr

00402c58 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402c58:	2001      	movs	r0, #1
  402c5a:	4770      	bx	lr

00402c5c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402c5c:	2000      	movs	r0, #0
  402c5e:	4770      	bx	lr

00402c60 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  402c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  402c62:	4b1b      	ldr	r3, [pc, #108]	; (402cd0 <SCB_EnableDCache+0x70>)
  402c64:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  402c68:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  402c6c:	f007 0007 	and.w	r0, r7, #7
  402c70:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  402c72:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  402c76:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  402c7a:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  402c7e:	f3bf 8f4f 	dsb	sy
  402c82:	f04f 34ff 	mov.w	r4, #4294967295
  402c86:	fa04 fc00 	lsl.w	ip, r4, r0
  402c8a:	fa06 f000 	lsl.w	r0, r6, r0
  402c8e:	fa04 f40e 	lsl.w	r4, r4, lr
  402c92:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  402c96:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  402c98:	463a      	mov	r2, r7
  402c9a:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  402c9c:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  402ca0:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  402ca4:	3a01      	subs	r2, #1
  402ca6:	4423      	add	r3, r4
  402ca8:	f1b2 3fff 	cmp.w	r2, #4294967295
  402cac:	d1f6      	bne.n	402c9c <SCB_EnableDCache+0x3c>
        } while(sets--);
  402cae:	3e01      	subs	r6, #1
  402cb0:	4460      	add	r0, ip
  402cb2:	f1b6 3fff 	cmp.w	r6, #4294967295
  402cb6:	d1ef      	bne.n	402c98 <SCB_EnableDCache+0x38>
  402cb8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  402cbc:	4a04      	ldr	r2, [pc, #16]	; (402cd0 <SCB_EnableDCache+0x70>)
  402cbe:	6953      	ldr	r3, [r2, #20]
  402cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402cc4:	6153      	str	r3, [r2, #20]
  402cc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402cca:	f3bf 8f6f 	isb	sy
  402cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402cd0:	e000ed00 	.word	0xe000ed00

00402cd4 <SCB_CleanInvalidateDCache>:
/** \brief Clean & Invalidate D-Cache

    The function cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache(void)
{
  402cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  402cd6:	4b18      	ldr	r3, [pc, #96]	; (402d38 <SCB_CleanInvalidateDCache+0x64>)
  402cd8:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  402cdc:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  402ce0:	f007 0007 	and.w	r0, r7, #7
  402ce4:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  402ce6:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  402cea:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  402cee:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  402cf2:	f3bf 8f4f 	dsb	sy
  402cf6:	f04f 34ff 	mov.w	r4, #4294967295
  402cfa:	fa04 fc00 	lsl.w	ip, r4, r0
  402cfe:	fa06 f000 	lsl.w	r0, r6, r0
  402d02:	fa04 f40e 	lsl.w	r4, r4, lr
  402d06:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  402d0a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  402d0c:	463a      	mov	r2, r7
  402d0e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  402d10:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  402d14:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  402d18:	3a01      	subs	r2, #1
  402d1a:	4423      	add	r3, r4
  402d1c:	f1b2 3fff 	cmp.w	r2, #4294967295
  402d20:	d1f6      	bne.n	402d10 <SCB_CleanInvalidateDCache+0x3c>
        } while(sets--);
  402d22:	3e01      	subs	r6, #1
  402d24:	4460      	add	r0, ip
  402d26:	f1b6 3fff 	cmp.w	r6, #4294967295
  402d2a:	d1ef      	bne.n	402d0c <SCB_CleanInvalidateDCache+0x38>
  402d2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402d30:	f3bf 8f6f 	isb	sy
  402d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402d36:	bf00      	nop
  402d38:	e000ed00 	.word	0xe000ed00

00402d3c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  402d3e:	b083      	sub	sp, #12
  402d40:	4605      	mov	r5, r0
  402d42:	460c      	mov	r4, r1
	uint32_t val = 0;
  402d44:	2300      	movs	r3, #0
  402d46:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402d48:	4b2a      	ldr	r3, [pc, #168]	; (402df4 <usart_serial_getchar+0xb8>)
  402d4a:	4298      	cmp	r0, r3
  402d4c:	d013      	beq.n	402d76 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402d4e:	4b2a      	ldr	r3, [pc, #168]	; (402df8 <usart_serial_getchar+0xbc>)
  402d50:	4298      	cmp	r0, r3
  402d52:	d018      	beq.n	402d86 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402d54:	4b29      	ldr	r3, [pc, #164]	; (402dfc <usart_serial_getchar+0xc0>)
  402d56:	4298      	cmp	r0, r3
  402d58:	d01d      	beq.n	402d96 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402d5a:	4b29      	ldr	r3, [pc, #164]	; (402e00 <usart_serial_getchar+0xc4>)
  402d5c:	429d      	cmp	r5, r3
  402d5e:	d022      	beq.n	402da6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402d60:	4b28      	ldr	r3, [pc, #160]	; (402e04 <usart_serial_getchar+0xc8>)
  402d62:	429d      	cmp	r5, r3
  402d64:	d027      	beq.n	402db6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402d66:	4b28      	ldr	r3, [pc, #160]	; (402e08 <usart_serial_getchar+0xcc>)
  402d68:	429d      	cmp	r5, r3
  402d6a:	d02e      	beq.n	402dca <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402d6c:	4b27      	ldr	r3, [pc, #156]	; (402e0c <usart_serial_getchar+0xd0>)
  402d6e:	429d      	cmp	r5, r3
  402d70:	d035      	beq.n	402dde <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402d72:	b003      	add	sp, #12
  402d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402d76:	461f      	mov	r7, r3
  402d78:	4e25      	ldr	r6, [pc, #148]	; (402e10 <usart_serial_getchar+0xd4>)
  402d7a:	4621      	mov	r1, r4
  402d7c:	4638      	mov	r0, r7
  402d7e:	47b0      	blx	r6
  402d80:	2800      	cmp	r0, #0
  402d82:	d1fa      	bne.n	402d7a <usart_serial_getchar+0x3e>
  402d84:	e7e9      	b.n	402d5a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402d86:	461f      	mov	r7, r3
  402d88:	4e21      	ldr	r6, [pc, #132]	; (402e10 <usart_serial_getchar+0xd4>)
  402d8a:	4621      	mov	r1, r4
  402d8c:	4638      	mov	r0, r7
  402d8e:	47b0      	blx	r6
  402d90:	2800      	cmp	r0, #0
  402d92:	d1fa      	bne.n	402d8a <usart_serial_getchar+0x4e>
  402d94:	e7e4      	b.n	402d60 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402d96:	461f      	mov	r7, r3
  402d98:	4e1d      	ldr	r6, [pc, #116]	; (402e10 <usart_serial_getchar+0xd4>)
  402d9a:	4621      	mov	r1, r4
  402d9c:	4638      	mov	r0, r7
  402d9e:	47b0      	blx	r6
  402da0:	2800      	cmp	r0, #0
  402da2:	d1fa      	bne.n	402d9a <usart_serial_getchar+0x5e>
  402da4:	e7df      	b.n	402d66 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402da6:	461f      	mov	r7, r3
  402da8:	4e19      	ldr	r6, [pc, #100]	; (402e10 <usart_serial_getchar+0xd4>)
  402daa:	4621      	mov	r1, r4
  402dac:	4638      	mov	r0, r7
  402dae:	47b0      	blx	r6
  402db0:	2800      	cmp	r0, #0
  402db2:	d1fa      	bne.n	402daa <usart_serial_getchar+0x6e>
  402db4:	e7da      	b.n	402d6c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402db6:	461e      	mov	r6, r3
  402db8:	4d16      	ldr	r5, [pc, #88]	; (402e14 <usart_serial_getchar+0xd8>)
  402dba:	a901      	add	r1, sp, #4
  402dbc:	4630      	mov	r0, r6
  402dbe:	47a8      	blx	r5
  402dc0:	2800      	cmp	r0, #0
  402dc2:	d1fa      	bne.n	402dba <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402dc4:	9b01      	ldr	r3, [sp, #4]
  402dc6:	7023      	strb	r3, [r4, #0]
  402dc8:	e7d3      	b.n	402d72 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402dca:	461e      	mov	r6, r3
  402dcc:	4d11      	ldr	r5, [pc, #68]	; (402e14 <usart_serial_getchar+0xd8>)
  402dce:	a901      	add	r1, sp, #4
  402dd0:	4630      	mov	r0, r6
  402dd2:	47a8      	blx	r5
  402dd4:	2800      	cmp	r0, #0
  402dd6:	d1fa      	bne.n	402dce <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402dd8:	9b01      	ldr	r3, [sp, #4]
  402dda:	7023      	strb	r3, [r4, #0]
  402ddc:	e7c9      	b.n	402d72 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402dde:	461e      	mov	r6, r3
  402de0:	4d0c      	ldr	r5, [pc, #48]	; (402e14 <usart_serial_getchar+0xd8>)
  402de2:	a901      	add	r1, sp, #4
  402de4:	4630      	mov	r0, r6
  402de6:	47a8      	blx	r5
  402de8:	2800      	cmp	r0, #0
  402dea:	d1fa      	bne.n	402de2 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402dec:	9b01      	ldr	r3, [sp, #4]
  402dee:	7023      	strb	r3, [r4, #0]
}
  402df0:	e7bf      	b.n	402d72 <usart_serial_getchar+0x36>
  402df2:	bf00      	nop
  402df4:	400e0800 	.word	0x400e0800
  402df8:	400e0a00 	.word	0x400e0a00
  402dfc:	400e1a00 	.word	0x400e1a00
  402e00:	400e1c00 	.word	0x400e1c00
  402e04:	40024000 	.word	0x40024000
  402e08:	40028000 	.word	0x40028000
  402e0c:	4002c000 	.word	0x4002c000
  402e10:	00400439 	.word	0x00400439
  402e14:	00400277 	.word	0x00400277

00402e18 <usart_serial_putchar>:
{
  402e18:	b570      	push	{r4, r5, r6, lr}
  402e1a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402e1c:	4b2a      	ldr	r3, [pc, #168]	; (402ec8 <usart_serial_putchar+0xb0>)
  402e1e:	4298      	cmp	r0, r3
  402e20:	d013      	beq.n	402e4a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402e22:	4b2a      	ldr	r3, [pc, #168]	; (402ecc <usart_serial_putchar+0xb4>)
  402e24:	4298      	cmp	r0, r3
  402e26:	d019      	beq.n	402e5c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402e28:	4b29      	ldr	r3, [pc, #164]	; (402ed0 <usart_serial_putchar+0xb8>)
  402e2a:	4298      	cmp	r0, r3
  402e2c:	d01f      	beq.n	402e6e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402e2e:	4b29      	ldr	r3, [pc, #164]	; (402ed4 <usart_serial_putchar+0xbc>)
  402e30:	4298      	cmp	r0, r3
  402e32:	d025      	beq.n	402e80 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402e34:	4b28      	ldr	r3, [pc, #160]	; (402ed8 <usart_serial_putchar+0xc0>)
  402e36:	4298      	cmp	r0, r3
  402e38:	d02b      	beq.n	402e92 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402e3a:	4b28      	ldr	r3, [pc, #160]	; (402edc <usart_serial_putchar+0xc4>)
  402e3c:	4298      	cmp	r0, r3
  402e3e:	d031      	beq.n	402ea4 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402e40:	4b27      	ldr	r3, [pc, #156]	; (402ee0 <usart_serial_putchar+0xc8>)
  402e42:	4298      	cmp	r0, r3
  402e44:	d037      	beq.n	402eb6 <usart_serial_putchar+0x9e>
	return 0;
  402e46:	2000      	movs	r0, #0
}
  402e48:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402e4a:	461e      	mov	r6, r3
  402e4c:	4d25      	ldr	r5, [pc, #148]	; (402ee4 <usart_serial_putchar+0xcc>)
  402e4e:	4621      	mov	r1, r4
  402e50:	4630      	mov	r0, r6
  402e52:	47a8      	blx	r5
  402e54:	2800      	cmp	r0, #0
  402e56:	d1fa      	bne.n	402e4e <usart_serial_putchar+0x36>
		return 1;
  402e58:	2001      	movs	r0, #1
  402e5a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402e5c:	461e      	mov	r6, r3
  402e5e:	4d21      	ldr	r5, [pc, #132]	; (402ee4 <usart_serial_putchar+0xcc>)
  402e60:	4621      	mov	r1, r4
  402e62:	4630      	mov	r0, r6
  402e64:	47a8      	blx	r5
  402e66:	2800      	cmp	r0, #0
  402e68:	d1fa      	bne.n	402e60 <usart_serial_putchar+0x48>
		return 1;
  402e6a:	2001      	movs	r0, #1
  402e6c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402e6e:	461e      	mov	r6, r3
  402e70:	4d1c      	ldr	r5, [pc, #112]	; (402ee4 <usart_serial_putchar+0xcc>)
  402e72:	4621      	mov	r1, r4
  402e74:	4630      	mov	r0, r6
  402e76:	47a8      	blx	r5
  402e78:	2800      	cmp	r0, #0
  402e7a:	d1fa      	bne.n	402e72 <usart_serial_putchar+0x5a>
		return 1;
  402e7c:	2001      	movs	r0, #1
  402e7e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402e80:	461e      	mov	r6, r3
  402e82:	4d18      	ldr	r5, [pc, #96]	; (402ee4 <usart_serial_putchar+0xcc>)
  402e84:	4621      	mov	r1, r4
  402e86:	4630      	mov	r0, r6
  402e88:	47a8      	blx	r5
  402e8a:	2800      	cmp	r0, #0
  402e8c:	d1fa      	bne.n	402e84 <usart_serial_putchar+0x6c>
		return 1;
  402e8e:	2001      	movs	r0, #1
  402e90:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402e92:	461e      	mov	r6, r3
  402e94:	4d14      	ldr	r5, [pc, #80]	; (402ee8 <usart_serial_putchar+0xd0>)
  402e96:	4621      	mov	r1, r4
  402e98:	4630      	mov	r0, r6
  402e9a:	47a8      	blx	r5
  402e9c:	2800      	cmp	r0, #0
  402e9e:	d1fa      	bne.n	402e96 <usart_serial_putchar+0x7e>
		return 1;
  402ea0:	2001      	movs	r0, #1
  402ea2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402ea4:	461e      	mov	r6, r3
  402ea6:	4d10      	ldr	r5, [pc, #64]	; (402ee8 <usart_serial_putchar+0xd0>)
  402ea8:	4621      	mov	r1, r4
  402eaa:	4630      	mov	r0, r6
  402eac:	47a8      	blx	r5
  402eae:	2800      	cmp	r0, #0
  402eb0:	d1fa      	bne.n	402ea8 <usart_serial_putchar+0x90>
		return 1;
  402eb2:	2001      	movs	r0, #1
  402eb4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402eb6:	461e      	mov	r6, r3
  402eb8:	4d0b      	ldr	r5, [pc, #44]	; (402ee8 <usart_serial_putchar+0xd0>)
  402eba:	4621      	mov	r1, r4
  402ebc:	4630      	mov	r0, r6
  402ebe:	47a8      	blx	r5
  402ec0:	2800      	cmp	r0, #0
  402ec2:	d1fa      	bne.n	402eba <usart_serial_putchar+0xa2>
		return 1;
  402ec4:	2001      	movs	r0, #1
  402ec6:	bd70      	pop	{r4, r5, r6, pc}
  402ec8:	400e0800 	.word	0x400e0800
  402ecc:	400e0a00 	.word	0x400e0a00
  402ed0:	400e1a00 	.word	0x400e1a00
  402ed4:	400e1c00 	.word	0x400e1c00
  402ed8:	40024000 	.word	0x40024000
  402edc:	40028000 	.word	0x40028000
  402ee0:	4002c000 	.word	0x4002c000
  402ee4:	00400427 	.word	0x00400427
  402ee8:	00400261 	.word	0x00400261

00402eec <main_vendor_int_out_received>:

void main_vendor_int_out_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
  402eec:	b100      	cbz	r0, 402ef0 <main_vendor_int_out_received+0x4>
  402eee:	4770      	bx	lr
{
  402ef0:	b510      	push	{r4, lr}
  402ef2:	b084      	sub	sp, #16
		return; // Transfer aborted, then stop loopback
	}
	// Send on IN endpoint the data received on endpoint OUT
	udi_vendor_interrupt_in_run(
  402ef4:	4c0a      	ldr	r4, [pc, #40]	; (402f20 <main_vendor_int_out_received+0x34>)
  402ef6:	4a0b      	ldr	r2, [pc, #44]	; (402f24 <main_vendor_int_out_received+0x38>)
  402ef8:	4620      	mov	r0, r4
  402efa:	4b0b      	ldr	r3, [pc, #44]	; (402f28 <main_vendor_int_out_received+0x3c>)
  402efc:	4798      	blx	r3
			main_buf_loopback,
			nb_transfered,
			main_vendor_int_in_received);
//	g_usbFlagG=7;
	printf("INT OUT: %d %d %d %d %d %d %d\r\n",main_buf_loopback[0],main_buf_loopback[1],main_buf_loopback[2],main_buf_loopback[3],main_buf_loopback[4],main_buf_loopback[5],main_buf_loopback[6]);
  402efe:	78a3      	ldrb	r3, [r4, #2]
  402f00:	7862      	ldrb	r2, [r4, #1]
  402f02:	7821      	ldrb	r1, [r4, #0]
  402f04:	79a0      	ldrb	r0, [r4, #6]
  402f06:	9003      	str	r0, [sp, #12]
  402f08:	7960      	ldrb	r0, [r4, #5]
  402f0a:	9002      	str	r0, [sp, #8]
  402f0c:	7920      	ldrb	r0, [r4, #4]
  402f0e:	9001      	str	r0, [sp, #4]
  402f10:	78e0      	ldrb	r0, [r4, #3]
  402f12:	9000      	str	r0, [sp, #0]
  402f14:	4805      	ldr	r0, [pc, #20]	; (402f2c <main_vendor_int_out_received+0x40>)
  402f16:	4c06      	ldr	r4, [pc, #24]	; (402f30 <main_vendor_int_out_received+0x44>)
  402f18:	47a0      	blx	r4
			
}
  402f1a:	b004      	add	sp, #16
  402f1c:	bd10      	pop	{r4, pc}
  402f1e:	bf00      	nop
  402f20:	20400bf4 	.word	0x20400bf4
  402f24:	00403cad 	.word	0x00403cad
  402f28:	00400605 	.word	0x00400605
  402f2c:	00406e10 	.word	0x00406e10
  402f30:	00403ddd 	.word	0x00403ddd

00402f34 <main_vendor_bulk_in_received>:
void main_vendor_bulk_in_received(udd_ep_status_t status,	//BULK IN: This one hits first
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
	UNUSED(nb_transfered);
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
  402f34:	b100      	cbz	r0, 402f38 <main_vendor_bulk_in_received+0x4>
  402f36:	4770      	bx	lr
{
  402f38:	b510      	push	{r4, lr}
  402f3a:	b086      	sub	sp, #24
		return; // Transfer aborted, then stop loopback
	}
	// Wait a full buffer
	udi_vendor_bulk_out_run(
  402f3c:	4c0b      	ldr	r4, [pc, #44]	; (402f6c <main_vendor_bulk_in_received+0x38>)
  402f3e:	4a0c      	ldr	r2, [pc, #48]	; (402f70 <main_vendor_bulk_in_received+0x3c>)
  402f40:	2114      	movs	r1, #20
  402f42:	4620      	mov	r0, r4
  402f44:	4b0b      	ldr	r3, [pc, #44]	; (402f74 <main_vendor_bulk_in_received+0x40>)
  402f46:	4798      	blx	r3
			crapBuf,//Buffer on Internal RAM to send or fill. It must be align, then use COMPILER_WORD_ALIGNED.
			20,//
			main_vendor_bulk_out_received);//param callback: NULL or function to call at the end of transfer
	 printf("BULK OUT RCVD: %x %x %x %x %x %x %x %x\r\n",crapBuf[0],crapBuf[1],crapBuf[2],crapBuf[3],crapBuf[4],crapBuf[5],crapBuf[6],crapBuf[7]);
  402f48:	78a3      	ldrb	r3, [r4, #2]
  402f4a:	7862      	ldrb	r2, [r4, #1]
  402f4c:	7821      	ldrb	r1, [r4, #0]
  402f4e:	79e0      	ldrb	r0, [r4, #7]
  402f50:	9004      	str	r0, [sp, #16]
  402f52:	79a0      	ldrb	r0, [r4, #6]
  402f54:	9003      	str	r0, [sp, #12]
  402f56:	7960      	ldrb	r0, [r4, #5]
  402f58:	9002      	str	r0, [sp, #8]
  402f5a:	7920      	ldrb	r0, [r4, #4]
  402f5c:	9001      	str	r0, [sp, #4]
  402f5e:	78e0      	ldrb	r0, [r4, #3]
  402f60:	9000      	str	r0, [sp, #0]
  402f62:	4805      	ldr	r0, [pc, #20]	; (402f78 <main_vendor_bulk_in_received+0x44>)
  402f64:	4c05      	ldr	r4, [pc, #20]	; (402f7c <main_vendor_bulk_in_received+0x48>)
  402f66:	47a0      	blx	r4
}
  402f68:	b006      	add	sp, #24
  402f6a:	bd10      	pop	{r4, pc}
  402f6c:	20401054 	.word	0x20401054
  402f70:	00402f81 	.word	0x00402f81
  402f74:	00400659 	.word	0x00400659
  402f78:	00406d88 	.word	0x00406d88
  402f7c:	00403ddd 	.word	0x00403ddd

00402f80 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,		//BULK OUT: This one hits second. TO DEVICE, but DATA from device
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
  402f80:	b100      	cbz	r0, 402f84 <main_vendor_bulk_out_received+0x4>
  402f82:	4770      	bx	lr
{
  402f84:	b510      	push	{r4, lr}
  402f86:	b086      	sub	sp, #24
		return; // Transfer aborted, then stop loopback
	}
	// Send on IN endpoint 
	udi_vendor_bulk_in_run(
  402f88:	4c0c      	ldr	r4, [pc, #48]	; (402fbc <main_vendor_bulk_out_received+0x3c>)
  402f8a:	4a0d      	ldr	r2, [pc, #52]	; (402fc0 <main_vendor_bulk_out_received+0x40>)
  402f8c:	490d      	ldr	r1, [pc, #52]	; (402fc4 <main_vendor_bulk_out_received+0x44>)
  402f8e:	6820      	ldr	r0, [r4, #0]
  402f90:	4b0d      	ldr	r3, [pc, #52]	; (402fc8 <main_vendor_bulk_out_received+0x48>)
  402f92:	4798      	blx	r3
			picBuff,//picBuff,//main_buf_loopback,  //Buffer on Internal RAM to send or fill. It must be align, then use COMPILER_WORD_ALIGNED.
			PIC_SEND_SIZE,//num bytes transferred from device to host during
			main_vendor_bulk_in_received);//param callback: NULL or function to call at the end of transfer
 	 printf("BULK IN DATA SENT: %x %x %x %x %x %x %x %x\r\n",picBuff[0],picBuff[1],picBuff[2],picBuff[3],picBuff[4],picBuff[5],picBuff[6],picBuff[7]);
  402f94:	6820      	ldr	r0, [r4, #0]
  402f96:	7883      	ldrb	r3, [r0, #2]
  402f98:	7842      	ldrb	r2, [r0, #1]
  402f9a:	7801      	ldrb	r1, [r0, #0]
  402f9c:	79c4      	ldrb	r4, [r0, #7]
  402f9e:	9404      	str	r4, [sp, #16]
  402fa0:	7984      	ldrb	r4, [r0, #6]
  402fa2:	9403      	str	r4, [sp, #12]
  402fa4:	7944      	ldrb	r4, [r0, #5]
  402fa6:	9402      	str	r4, [sp, #8]
  402fa8:	7904      	ldrb	r4, [r0, #4]
  402faa:	9401      	str	r4, [sp, #4]
  402fac:	78c0      	ldrb	r0, [r0, #3]
  402fae:	9000      	str	r0, [sp, #0]
  402fb0:	4806      	ldr	r0, [pc, #24]	; (402fcc <main_vendor_bulk_out_received+0x4c>)
  402fb2:	4c07      	ldr	r4, [pc, #28]	; (402fd0 <main_vendor_bulk_out_received+0x50>)
  402fb4:	47a0      	blx	r4
}
  402fb6:	b006      	add	sp, #24
  402fb8:	bd10      	pop	{r4, pc}
  402fba:	bf00      	nop
  402fbc:	204000ec 	.word	0x204000ec
  402fc0:	00402f35 	.word	0x00402f35
  402fc4:	003a9800 	.word	0x003a9800
  402fc8:	0040063d 	.word	0x0040063d
  402fcc:	00406db4 	.word	0x00406db4
  402fd0:	00403ddd 	.word	0x00403ddd

00402fd4 <main_vendor_iso_in_received>:
#endif

#if UDI_VENDOR_EPS_SIZE_ISO_FS
void main_vendor_iso_in_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
  402fd4:	b508      	push	{r3, lr}
	UNUSED(status);
	UNUSED(nb_transfered);
	UNUSED(ep);
	ui_loop_back_state(false);
  402fd6:	2000      	movs	r0, #0
  402fd8:	4b01      	ldr	r3, [pc, #4]	; (402fe0 <main_vendor_iso_in_received+0xc>)
  402fda:	4798      	blx	r3
  402fdc:	bd08      	pop	{r3, pc}
  402fde:	bf00      	nop
  402fe0:	00400475 	.word	0x00400475

00402fe4 <main_vendor_iso_out_received>:
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
	uint8_t *buf_ptr;
	UNUSED(ep);

	if (UDD_EP_TRANSFER_OK != status) {
  402fe4:	bb20      	cbnz	r0, 403030 <main_vendor_iso_out_received+0x4c>
{
  402fe6:	b510      	push	{r4, lr}
  402fe8:	460c      	mov	r4, r1
		return; // Transfer aborted, then stop loopback
	}

	if (nb_transfered) {
  402fea:	b9a1      	cbnz	r1, 403016 <main_vendor_iso_out_received+0x32>
				nb_transfered,
				main_vendor_iso_in_received);
	}

	// Switch of buffer
	main_buf_iso_sel = main_buf_iso_sel? 0:1;
  402fec:	4a11      	ldr	r2, [pc, #68]	; (403034 <main_vendor_iso_out_received+0x50>)
  402fee:	7813      	ldrb	r3, [r2, #0]
  402ff0:	fab3 f383 	clz	r3, r3
  402ff4:	095b      	lsrs	r3, r3, #5
  402ff6:	7013      	strb	r3, [r2, #0]
	//
	// When using buffer size larger than endpoint size,
	// the requested transfer is stopped when the buffer is = full*.
	// *on USBC and XMEGA USB driver, the buffer is full
	// when "number of data transfered" > "buffer size" - "endpoint size".
	buf_ptr = &main_buf_loopback[ main_buf_iso_sel
  402ff8:	4c0f      	ldr	r4, [pc, #60]	; (403038 <main_vendor_iso_out_received+0x54>)
  402ffa:	eb04 2443 	add.w	r4, r4, r3, lsl #9
			*(sizeof(main_buf_loopback)/2) ];

	// Send on IN endpoint the data received on endpoint OUT
	udi_vendor_iso_out_run(
			buf_ptr,
			udd_is_high_speed()?
  402ffe:	4b0f      	ldr	r3, [pc, #60]	; (40303c <main_vendor_iso_out_received+0x58>)
  403000:	4798      	blx	r3
	udi_vendor_iso_out_run(
  403002:	2800      	cmp	r0, #0
  403004:	4a0e      	ldr	r2, [pc, #56]	; (403040 <main_vendor_iso_out_received+0x5c>)
  403006:	bf14      	ite	ne
  403008:	2140      	movne	r1, #64	; 0x40
  40300a:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40300e:	4620      	mov	r0, r4
  403010:	4b0c      	ldr	r3, [pc, #48]	; (403044 <main_vendor_iso_out_received+0x60>)
  403012:	4798      	blx	r3
  403014:	bd10      	pop	{r4, pc}
		ui_loop_back_state(true);
  403016:	2001      	movs	r0, #1
  403018:	4b0b      	ldr	r3, [pc, #44]	; (403048 <main_vendor_iso_out_received+0x64>)
  40301a:	4798      	blx	r3
				*(sizeof(main_buf_loopback)/2) ];
  40301c:	4b05      	ldr	r3, [pc, #20]	; (403034 <main_vendor_iso_out_received+0x50>)
  40301e:	7818      	ldrb	r0, [r3, #0]
		udi_vendor_iso_in_run(
  403020:	4a0a      	ldr	r2, [pc, #40]	; (40304c <main_vendor_iso_out_received+0x68>)
  403022:	4621      	mov	r1, r4
  403024:	4b04      	ldr	r3, [pc, #16]	; (403038 <main_vendor_iso_out_received+0x54>)
  403026:	eb03 2040 	add.w	r0, r3, r0, lsl #9
  40302a:	4b09      	ldr	r3, [pc, #36]	; (403050 <main_vendor_iso_out_received+0x6c>)
  40302c:	4798      	blx	r3
  40302e:	e7dd      	b.n	402fec <main_vendor_iso_out_received+0x8>
  403030:	4770      	bx	lr
  403032:	bf00      	nop
  403034:	20400bf1 	.word	0x20400bf1
  403038:	20400bf4 	.word	0x20400bf4
  40303c:	00402379 	.word	0x00402379
  403040:	00402fe5 	.word	0x00402fe5
  403044:	00400691 	.word	0x00400691
  403048:	00400475 	.word	0x00400475
  40304c:	00402fd5 	.word	0x00402fd5
  403050:	00400675 	.word	0x00400675

00403054 <configure_console>:

/**************************************************************************
 *  Configure UART console.
 **************************************************************************/
static void configure_console(void)
{
  403054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403058:	b086      	sub	sp, #24
		base->PIO_PUDR = mask;
  40305a:	4b25      	ldr	r3, [pc, #148]	; (4030f0 <configure_console+0x9c>)
  40305c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403060:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  403062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  403066:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  403068:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40306a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40306e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  403070:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  403074:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  403076:	6f59      	ldr	r1, [r3, #116]	; 0x74
  403078:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  40307c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40307e:	605a      	str	r2, [r3, #4]
  403080:	202d      	movs	r0, #45	; 0x2d
  403082:	4d1c      	ldr	r5, [pc, #112]	; (4030f4 <configure_console+0xa0>)
  403084:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403086:	4c1c      	ldr	r4, [pc, #112]	; (4030f8 <configure_console+0xa4>)
  403088:	4b1c      	ldr	r3, [pc, #112]	; (4030fc <configure_console+0xa8>)
  40308a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40308c:	4a1c      	ldr	r2, [pc, #112]	; (403100 <configure_console+0xac>)
  40308e:	4b1d      	ldr	r3, [pc, #116]	; (403104 <configure_console+0xb0>)
  403090:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403092:	4a1d      	ldr	r2, [pc, #116]	; (403108 <configure_console+0xb4>)
  403094:	4b1d      	ldr	r3, [pc, #116]	; (40310c <configure_console+0xb8>)
  403096:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  403098:	f8df 807c 	ldr.w	r8, [pc, #124]	; 403118 <configure_console+0xc4>
  40309c:	f8cd 8000 	str.w	r8, [sp]
	uart_settings.ul_baudrate = opt->baudrate;
  4030a0:	f44f 5716 	mov.w	r7, #9600	; 0x2580
  4030a4:	9701      	str	r7, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  4030a6:	f44f 6600 	mov.w	r6, #2048	; 0x800
  4030aa:	9602      	str	r6, [sp, #8]
  4030ac:	202d      	movs	r0, #45	; 0x2d
  4030ae:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  4030b0:	4669      	mov	r1, sp
  4030b2:	4620      	mov	r0, r4
  4030b4:	4d16      	ldr	r5, [pc, #88]	; (403110 <configure_console+0xbc>)
  4030b6:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4030b8:	f8df a060 	ldr.w	sl, [pc, #96]	; 40311c <configure_console+0xc8>
  4030bc:	f8da 3000 	ldr.w	r3, [sl]
  4030c0:	2100      	movs	r1, #0
  4030c2:	6898      	ldr	r0, [r3, #8]
  4030c4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 403120 <configure_console+0xcc>
  4030c8:	47c8      	blx	r9
	setbuf(stdin, NULL);
  4030ca:	f8da 3000 	ldr.w	r3, [sl]
  4030ce:	2100      	movs	r1, #0
  4030d0:	6858      	ldr	r0, [r3, #4]
  4030d2:	47c8      	blx	r9
	};

   ioport_set_pin_peripheral_mode(UART3_TXD_GPIO, UART3_TXD_FLAGS);
   sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
   stdio_serial_init(CONF_UART, &uart_serial_options);
   uart_enable_tx(CONF_UART);
  4030d4:	4620      	mov	r0, r4
  4030d6:	4b0f      	ldr	r3, [pc, #60]	; (403114 <configure_console+0xc0>)
  4030d8:	4798      	blx	r3
   sam_uart_opt_t uart_settings;
   uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4030da:	f8cd 800c 	str.w	r8, [sp, #12]
   uart_settings.ul_baudrate = CONF_UART_BAUDRATE;
  4030de:	9704      	str	r7, [sp, #16]
   uart_settings.ul_mode = CONF_UART_PARITY;
  4030e0:	9605      	str	r6, [sp, #20]
   uart_init(CONF_UART, &uart_settings);
  4030e2:	a903      	add	r1, sp, #12
  4030e4:	4620      	mov	r0, r4
  4030e6:	47a8      	blx	r5
}
  4030e8:	b006      	add	sp, #24
  4030ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4030ee:	bf00      	nop
  4030f0:	400e1400 	.word	0x400e1400
  4030f4:	004013a9 	.word	0x004013a9
  4030f8:	400e1c00 	.word	0x400e1c00
  4030fc:	20401030 	.word	0x20401030
  403100:	00402e19 	.word	0x00402e19
  403104:	2040102c 	.word	0x2040102c
  403108:	00402d3d 	.word	0x00402d3d
  40310c:	20401028 	.word	0x20401028
  403110:	004003f1 	.word	0x004003f1
  403114:	00400421 	.word	0x00400421
  403118:	08f0d180 	.word	0x08f0d180
  40311c:	204000f0 	.word	0x204000f0
  403120:	00403ea1 	.word	0x00403ea1

00403124 <main_suspend_action>:
{
  403124:	b508      	push	{r3, lr}
	ui_powerdown();
  403126:	4b03      	ldr	r3, [pc, #12]	; (403134 <main_suspend_action+0x10>)
  403128:	4798      	blx	r3
	g_usbFlagA=1;
  40312a:	2201      	movs	r2, #1
  40312c:	4b02      	ldr	r3, [pc, #8]	; (403138 <main_suspend_action+0x14>)
  40312e:	701a      	strb	r2, [r3, #0]
  403130:	bd08      	pop	{r3, pc}
  403132:	bf00      	nop
  403134:	0040044d 	.word	0x0040044d
  403138:	20400bec 	.word	0x20400bec

0040313c <main_resume_action>:
{
  40313c:	b508      	push	{r3, lr}
	ui_wakeup();
  40313e:	4b03      	ldr	r3, [pc, #12]	; (40314c <main_resume_action+0x10>)
  403140:	4798      	blx	r3
	g_usbFlagB=2;
  403142:	2202      	movs	r2, #2
  403144:	4b02      	ldr	r3, [pc, #8]	; (403150 <main_resume_action+0x14>)
  403146:	701a      	strb	r2, [r3, #0]
  403148:	bd08      	pop	{r3, pc}
  40314a:	bf00      	nop
  40314c:	00400465 	.word	0x00400465
  403150:	20400bed 	.word	0x20400bed

00403154 <main_sof_action>:
{
  403154:	b508      	push	{r3, lr}
	if (!main_b_vendor_enable)
  403156:	4b04      	ldr	r3, [pc, #16]	; (403168 <main_sof_action+0x14>)
  403158:	781b      	ldrb	r3, [r3, #0]
  40315a:	b903      	cbnz	r3, 40315e <main_sof_action+0xa>
  40315c:	bd08      	pop	{r3, pc}
	ui_process(udd_get_frame_number());
  40315e:	4b03      	ldr	r3, [pc, #12]	; (40316c <main_sof_action+0x18>)
  403160:	4798      	blx	r3
  403162:	4b03      	ldr	r3, [pc, #12]	; (403170 <main_sof_action+0x1c>)
  403164:	4798      	blx	r3
  403166:	e7f9      	b.n	40315c <main_sof_action+0x8>
  403168:	20400bf0 	.word	0x20400bf0
  40316c:	004023b5 	.word	0x004023b5
  403170:	00400491 	.word	0x00400491

00403174 <main_vendor_disable>:
	main_b_vendor_enable = false;
  403174:	2200      	movs	r2, #0
  403176:	4b01      	ldr	r3, [pc, #4]	; (40317c <main_vendor_disable+0x8>)
  403178:	701a      	strb	r2, [r3, #0]
  40317a:	4770      	bx	lr
  40317c:	20400bf0 	.word	0x20400bf0

00403180 <main_setup_out_received>:
	udd_g_ctrlreq.payload = main_buf_loopback;
  403180:	4b05      	ldr	r3, [pc, #20]	; (403198 <main_setup_out_received+0x18>)
  403182:	4a06      	ldr	r2, [pc, #24]	; (40319c <main_setup_out_received+0x1c>)
  403184:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = min(
  403186:	88da      	ldrh	r2, [r3, #6]
  403188:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
  40318c:	bf28      	it	cs
  40318e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
  403192:	819a      	strh	r2, [r3, #12]
}
  403194:	2001      	movs	r0, #1
  403196:	4770      	bx	lr
  403198:	2040103c 	.word	0x2040103c
  40319c:	20400bf4 	.word	0x20400bf4

004031a0 <main_setup_in_received>:
	udd_g_ctrlreq.payload = main_buf_loopback;
  4031a0:	4b05      	ldr	r3, [pc, #20]	; (4031b8 <main_setup_in_received+0x18>)
  4031a2:	4a06      	ldr	r2, [pc, #24]	; (4031bc <main_setup_in_received+0x1c>)
  4031a4:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size =
  4031a6:	88da      	ldrh	r2, [r3, #6]
  4031a8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
  4031ac:	bf28      	it	cs
  4031ae:	f44f 6280 	movcs.w	r2, #1024	; 0x400
  4031b2:	819a      	strh	r2, [r3, #12]
}
  4031b4:	2001      	movs	r0, #1
  4031b6:	4770      	bx	lr
  4031b8:	2040103c 	.word	0x2040103c
  4031bc:	20400bf4 	.word	0x20400bf4

004031c0 <configPinsSDRAM>:
//	resetPinsSDRAM();
}
/***********************************************************************
 *    CONFIGURE SDRAM PINS
 ***********************************************************************/
void configPinsSDRAM(void){
  4031c0:	b510      	push	{r4, lr}
	pio_configure_pin(SDRAM_A0_PIO, SDRAM_A_FLAGS);	//V71 A2
  4031c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4031c6:	2054      	movs	r0, #84	; 0x54
  4031c8:	4c4d      	ldr	r4, [pc, #308]	; (403300 <configPinsSDRAM+0x140>)
  4031ca:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A1_PIO, SDRAM_A_FLAGS);	//V71 A3
  4031cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4031d0:	2055      	movs	r0, #85	; 0x55
  4031d2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);	//V71 A4
  4031d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4031d8:	2056      	movs	r0, #86	; 0x56
  4031da:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  //V71 A5
  4031dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4031e0:	2057      	movs	r0, #87	; 0x57
  4031e2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  //V71 A6
  4031e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4031e8:	2058      	movs	r0, #88	; 0x58
  4031ea:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  //V71 A7
  4031ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4031f0:	2059      	movs	r0, #89	; 0x59
  4031f2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  //V71 A8
  4031f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4031f8:	205a      	movs	r0, #90	; 0x5a
  4031fa:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  //V71 A9
  4031fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403200:	205b      	movs	r0, #91	; 0x5b
  403202:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);	 //V71 A10
  403204:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403208:	205c      	movs	r0, #92	; 0x5c
  40320a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  //V71 A11
  40320c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403210:	205d      	movs	r0, #93	; 0x5d
  403212:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS); //V71 SDA10
  403214:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403218:	206d      	movs	r0, #109	; 0x6d
  40321a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A13_FLAGS); //V71 A13
  40321c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403220:	205f      	movs	r0, #95	; 0x5f
  403222:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A12_PIO, SDRAM_A14_FLAGS); //V71 A14
  403224:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403228:	2012      	movs	r0, #18
  40322a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  40322c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403230:	2014      	movs	r0, #20
  403232:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA1_PIO, SDRAM_BA1_FLAGS);
  403234:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403238:	2000      	movs	r0, #0
  40323a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  40323c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403240:	2077      	movs	r0, #119	; 0x77
  403242:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  403244:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403248:	206e      	movs	r0, #110	; 0x6e
  40324a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  40324c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403250:	204f      	movs	r0, #79	; 0x4f
  403252:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  403254:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403258:	2070      	movs	r0, #112	; 0x70
  40325a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  40325c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403260:	2071      	movs	r0, #113	; 0x71
  403262:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  403264:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403268:	207d      	movs	r0, #125	; 0x7d
  40326a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  40326c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403270:	2052      	movs	r0, #82	; 0x52
  403272:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  403274:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403278:	206f      	movs	r0, #111	; 0x6f
  40327a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);
  40327c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403280:	2040      	movs	r0, #64	; 0x40
  403282:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);
  403284:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403288:	2041      	movs	r0, #65	; 0x41
  40328a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);
  40328c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403290:	2042      	movs	r0, #66	; 0x42
  403292:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);
  403294:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403298:	2043      	movs	r0, #67	; 0x43
  40329a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);
  40329c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032a0:	2044      	movs	r0, #68	; 0x44
  4032a2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);
  4032a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032a8:	2045      	movs	r0, #69	; 0x45
  4032aa:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);
  4032ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032b0:	2046      	movs	r0, #70	; 0x46
  4032b2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);
  4032b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032b8:	2047      	movs	r0, #71	; 0x47
  4032ba:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);
  4032bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032c0:	2080      	movs	r0, #128	; 0x80
  4032c2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);
  4032c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032c8:	2081      	movs	r0, #129	; 0x81
  4032ca:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS);
  4032cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032d0:	2082      	movs	r0, #130	; 0x82
  4032d2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS);
  4032d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032d8:	2083      	movs	r0, #131	; 0x83
  4032da:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS);
  4032dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032e0:	2084      	movs	r0, #132	; 0x84
  4032e2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS);
  4032e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032e8:	2085      	movs	r0, #133	; 0x85
  4032ea:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS);
  4032ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032f0:	200f      	movs	r0, #15
  4032f2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS);
  4032f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032f8:	2010      	movs	r0, #16
  4032fa:	47a0      	blx	r4
  4032fc:	bd10      	pop	{r4, pc}
  4032fe:	bf00      	nop
  403300:	0040108d 	.word	0x0040108d

00403304 <SDRAMtest>:
void SDRAMtest (void){
  403304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403308:	b095      	sub	sp, #84	; 0x54
    ccsidr  = SCB->CCSIDR;
  40330a:	4bc3      	ldr	r3, [pc, #780]	; (403618 <SDRAMtest+0x314>)
  40330c:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  403310:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  403314:	f006 0007 	and.w	r0, r6, #7
  403318:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40331a:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40331e:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  403322:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  403326:	f3bf 8f4f 	dsb	sy
  40332a:	f04f 34ff 	mov.w	r4, #4294967295
  40332e:	fa04 fc00 	lsl.w	ip, r4, r0
  403332:	fa0e f000 	lsl.w	r0, lr, r0
  403336:	409c      	lsls	r4, r3
  403338:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCISW = sw;
  40333c:	4db6      	ldr	r5, [pc, #728]	; (403618 <SDRAMtest+0x314>)
         int32_t tmpways = ways;
  40333e:	4632      	mov	r2, r6
  403340:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  403342:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  403346:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40334a:	3a01      	subs	r2, #1
  40334c:	4423      	add	r3, r4
  40334e:	f1b2 3fff 	cmp.w	r2, #4294967295
  403352:	d1f6      	bne.n	403342 <SDRAMtest+0x3e>
        } while(sets--);
  403354:	f10e 3eff 	add.w	lr, lr, #4294967295
  403358:	4460      	add	r0, ip
  40335a:	f1be 3fff 	cmp.w	lr, #4294967295
  40335e:	d1ee      	bne.n	40333e <SDRAMtest+0x3a>
  403360:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  403364:	4bac      	ldr	r3, [pc, #688]	; (403618 <SDRAMtest+0x314>)
  403366:	695a      	ldr	r2, [r3, #20]
  403368:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40336c:	615a      	str	r2, [r3, #20]
  40336e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403372:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  403376:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40337a:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40337e:	f006 0007 	and.w	r0, r6, #7
  403382:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403384:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403388:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  40338c:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  403390:	f3bf 8f4f 	dsb	sy
  403394:	f04f 34ff 	mov.w	r4, #4294967295
  403398:	fa04 fc00 	lsl.w	ip, r4, r0
  40339c:	fa0e f000 	lsl.w	r0, lr, r0
  4033a0:	409c      	lsls	r4, r3
  4033a2:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCCISW = sw;
  4033a6:	4d9c      	ldr	r5, [pc, #624]	; (403618 <SDRAMtest+0x314>)
         int32_t tmpways = ways;
  4033a8:	4632      	mov	r2, r6
  4033aa:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  4033ac:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  4033b0:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  4033b4:	3a01      	subs	r2, #1
  4033b6:	4423      	add	r3, r4
  4033b8:	f1b2 3fff 	cmp.w	r2, #4294967295
  4033bc:	d1f6      	bne.n	4033ac <SDRAMtest+0xa8>
        } while(sets--);
  4033be:	f10e 3eff 	add.w	lr, lr, #4294967295
  4033c2:	4460      	add	r0, ip
  4033c4:	f1be 3fff 	cmp.w	lr, #4294967295
  4033c8:	d1ee      	bne.n	4033a8 <SDRAMtest+0xa4>
  4033ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4033ce:	f3bf 8f6f 	isb	sy
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4033d2:	4c92      	ldr	r4, [pc, #584]	; (40361c <SDRAMtest+0x318>)
  4033d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4033d8:	6323      	str	r3, [r4, #48]	; 0x30
	pmc_enable_periph_clk(ID_SDRAMC);
  4033da:	203e      	movs	r0, #62	; 0x3e
  4033dc:	4b90      	ldr	r3, [pc, #576]	; (403620 <SDRAMtest+0x31c>)
  4033de:	4798      	blx	r3
	configPinsSDRAM();
  4033e0:	4b90      	ldr	r3, [pc, #576]	; (403624 <SDRAMtest+0x320>)
  4033e2:	4798      	blx	r3
	printf("SRAM\r\n");
  4033e4:	4890      	ldr	r0, [pc, #576]	; (403628 <SDRAMtest+0x324>)
  4033e6:	4d91      	ldr	r5, [pc, #580]	; (40362c <SDRAMtest+0x328>)
  4033e8:	47a8      	blx	r5
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4033ea:	f44f 7380 	mov.w	r3, #256	; 0x100
  4033ee:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4033f0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4033f4:	6323      	str	r3, [r4, #48]	; 0x30
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_INSIGNIS_16M,	sysclk_get_cpu_hz());
  4033f6:	498e      	ldr	r1, [pc, #568]	; (403630 <SDRAMtest+0x32c>)
  4033f8:	488e      	ldr	r0, [pc, #568]	; (403634 <SDRAMtest+0x330>)
  4033fa:	4b8f      	ldr	r3, [pc, #572]	; (403638 <SDRAMtest+0x334>)
  4033fc:	4798      	blx	r3
/**
 * \brief Unaligned access is supported.
 */
static inline void sdram_enable_unaligned_support(void)
{
	SDRAMC->SDRAMC_CFR1 |= SDRAMC_CFR1_UNAL;
  4033fe:	4a8f      	ldr	r2, [pc, #572]	; (40363c <SDRAMtest+0x338>)
  403400:	6a93      	ldr	r3, [r2, #40]	; 0x28
  403402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  403406:	6293      	str	r3, [r2, #40]	; 0x28
	printf("SRAM COMPLETE\r\n");
  403408:	488d      	ldr	r0, [pc, #564]	; (403640 <SDRAMtest+0x33c>)
  40340a:	47a8      	blx	r5
	delay_ms(200);
  40340c:	488d      	ldr	r0, [pc, #564]	; (403644 <SDRAMtest+0x340>)
  40340e:	4b8e      	ldr	r3, [pc, #568]	; (403648 <SDRAMtest+0x344>)
  403410:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  403412:	4b81      	ldr	r3, [pc, #516]	; (403618 <SDRAMtest+0x314>)
  403414:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  403418:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40341c:	f006 0007 	and.w	r0, r6, #7
  403420:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403422:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403426:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  40342a:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  40342e:	f3bf 8f4f 	dsb	sy
  403432:	f04f 34ff 	mov.w	r4, #4294967295
  403436:	fa04 fc00 	lsl.w	ip, r4, r0
  40343a:	fa0e f000 	lsl.w	r0, lr, r0
  40343e:	409c      	lsls	r4, r3
  403440:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCCISW = sw;
  403444:	4d74      	ldr	r5, [pc, #464]	; (403618 <SDRAMtest+0x314>)
         int32_t tmpways = ways;
  403446:	4632      	mov	r2, r6
  403448:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40344a:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40344e:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  403452:	3a01      	subs	r2, #1
  403454:	4423      	add	r3, r4
  403456:	f1b2 3fff 	cmp.w	r2, #4294967295
  40345a:	d1f6      	bne.n	40344a <SDRAMtest+0x146>
        } while(sets--);
  40345c:	f10e 3eff 	add.w	lr, lr, #4294967295
  403460:	4460      	add	r0, ip
  403462:	f1be 3fff 	cmp.w	lr, #4294967295
  403466:	d1ee      	bne.n	403446 <SDRAMtest+0x142>
  403468:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40346c:	f3bf 8f6f 	isb	sy
  403470:	f8df a238 	ldr.w	sl, [pc, #568]	; 4036ac <SDRAMtest+0x3a8>
  403474:	f8df 9238 	ldr.w	r9, [pc, #568]	; 4036b0 <SDRAMtest+0x3ac>
  403478:	f8df 8238 	ldr.w	r8, [pc, #568]	; 4036b4 <SDRAMtest+0x3b0>
  40347c:	f8df c238 	ldr.w	ip, [pc, #568]	; 4036b8 <SDRAMtest+0x3b4>
  403480:	f8df e238 	ldr.w	lr, [pc, #568]	; 4036bc <SDRAMtest+0x3b8>
  403484:	f8df b238 	ldr.w	fp, [pc, #568]	; 4036c0 <SDRAMtest+0x3bc>
  403488:	4f70      	ldr	r7, [pc, #448]	; (40364c <SDRAMtest+0x348>)
		*camBuffPtr++=0xFF;//WHITE
  40348a:	21ff      	movs	r1, #255	; 0xff
		*camBuffPtr++=0x07;//YEL
  40348c:	2607      	movs	r6, #7
		*camBuffPtr++=0xE0;
  40348e:	25e0      	movs	r5, #224	; 0xe0
		*camBuffPtr++=0xF8;//MAGENTA
  403490:	24f8      	movs	r4, #248	; 0xf8
		*camBuffPtr++=0x1F;
  403492:	201f      	movs	r0, #31
		*camBuffPtr++=0x00;//RED
  403494:	2200      	movs	r2, #0
  403496:	f5a7 632f 	sub.w	r3, r7, #2800	; 0xaf0
		*camBuffPtr++=0xFF;//WHITE
  40349a:	f803 1c02 	strb.w	r1, [r3, #-2]
		*camBuffPtr++=0xFF;
  40349e:	f803 1c01 	strb.w	r1, [r3, #-1]
  4034a2:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  4034a4:	4553      	cmp	r3, sl
  4034a6:	d1f8      	bne.n	40349a <SDRAMtest+0x196>
		*camBuffPtr++=0x07;//YEL
  4034a8:	f803 6c02 	strb.w	r6, [r3, #-2]
		*camBuffPtr++=0xFF;
  4034ac:	f803 1c01 	strb.w	r1, [r3, #-1]
  4034b0:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  4034b2:	454b      	cmp	r3, r9
  4034b4:	d1f8      	bne.n	4034a8 <SDRAMtest+0x1a4>
		*camBuffPtr++=0xFF;//CYAN
  4034b6:	f803 1c02 	strb.w	r1, [r3, #-2]
		*camBuffPtr++=0xE0;
  4034ba:	f803 5c01 	strb.w	r5, [r3, #-1]
  4034be:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  4034c0:	4543      	cmp	r3, r8
  4034c2:	d1f8      	bne.n	4034b6 <SDRAMtest+0x1b2>
		*camBuffPtr++=0x07;//GREEN
  4034c4:	f803 6c02 	strb.w	r6, [r3, #-2]
		*camBuffPtr++=0xE0;
  4034c8:	f803 5c01 	strb.w	r5, [r3, #-1]
  4034cc:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  4034ce:	4563      	cmp	r3, ip
  4034d0:	d1f8      	bne.n	4034c4 <SDRAMtest+0x1c0>
		*camBuffPtr++=0xF8;//MAGENTA
  4034d2:	f803 4c02 	strb.w	r4, [r3, #-2]
		*camBuffPtr++=0x1F;
  4034d6:	f803 0c01 	strb.w	r0, [r3, #-1]
  4034da:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  4034dc:	4573      	cmp	r3, lr
  4034de:	d1f8      	bne.n	4034d2 <SDRAMtest+0x1ce>
		*camBuffPtr++=0x00;//RED
  4034e0:	f803 2c02 	strb.w	r2, [r3, #-2]
		*camBuffPtr++=0x1F;
  4034e4:	f803 0c01 	strb.w	r0, [r3, #-1]
  4034e8:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  4034ea:	455b      	cmp	r3, fp
  4034ec:	d1f8      	bne.n	4034e0 <SDRAMtest+0x1dc>
		*camBuffPtr++=0xF8;//BLUE
  4034ee:	f803 4c02 	strb.w	r4, [r3, #-2]
		*camBuffPtr++=0x00;
  4034f2:	f803 2c01 	strb.w	r2, [r3, #-1]
  4034f6:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  4034f8:	42bb      	cmp	r3, r7
  4034fa:	d1f8      	bne.n	4034ee <SDRAMtest+0x1ea>
  4034fc:	9312      	str	r3, [sp, #72]	; 0x48
  4034fe:	f507 73c8 	add.w	r3, r7, #400	; 0x190
  403502:	9313      	str	r3, [sp, #76]	; 0x4c
  403504:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403506:	9712      	str	r7, [sp, #72]	; 0x48
  403508:	9f13      	ldr	r7, [sp, #76]	; 0x4c
		*camBuffPtr++=0x00;//BLACK
  40350a:	f803 2c02 	strb.w	r2, [r3, #-2]
		*camBuffPtr++=0x00;
  40350e:	f803 2c01 	strb.w	r2, [r3, #-1]
  403512:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  403514:	42bb      	cmp	r3, r7
  403516:	d1f8      	bne.n	40350a <SDRAMtest+0x206>
  403518:	9f12      	ldr	r7, [sp, #72]	; 0x48
  40351a:	f507 6748 	add.w	r7, r7, #3200	; 0xc80
  40351e:	f50b 6b48 	add.w	fp, fp, #3200	; 0xc80
  403522:	f50e 6e48 	add.w	lr, lr, #3200	; 0xc80
  403526:	f50c 6c48 	add.w	ip, ip, #3200	; 0xc80
  40352a:	f508 6848 	add.w	r8, r8, #3200	; 0xc80
  40352e:	f509 6948 	add.w	r9, r9, #3200	; 0xc80
  403532:	f50a 6a48 	add.w	sl, sl, #3200	; 0xc80
 	for(rowCtr=0;rowCtr<1200;rowCtr++){
  403536:	4b46      	ldr	r3, [pc, #280]	; (403650 <SDRAMtest+0x34c>)
  403538:	429f      	cmp	r7, r3
  40353a:	d1ac      	bne.n	403496 <SDRAMtest+0x192>
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40353c:	4a45      	ldr	r2, [pc, #276]	; (403654 <SDRAMtest+0x350>)
  40353e:	4b46      	ldr	r3, [pc, #280]	; (403658 <SDRAMtest+0x354>)
  403540:	601a      	str	r2, [r3, #0]
    ccsidr  = SCB->CCSIDR;
  403542:	4b35      	ldr	r3, [pc, #212]	; (403618 <SDRAMtest+0x314>)
  403544:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  403548:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40354c:	f006 0007 	and.w	r0, r6, #7
  403550:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403552:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403556:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  40355a:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  40355e:	f3bf 8f4f 	dsb	sy
  403562:	f04f 34ff 	mov.w	r4, #4294967295
  403566:	fa04 fc00 	lsl.w	ip, r4, r0
  40356a:	fa0e f000 	lsl.w	r0, lr, r0
  40356e:	409c      	lsls	r4, r3
  403570:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCCISW = sw;
  403574:	4d28      	ldr	r5, [pc, #160]	; (403618 <SDRAMtest+0x314>)
         int32_t tmpways = ways;
  403576:	4632      	mov	r2, r6
  403578:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40357a:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40357e:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  403582:	3a01      	subs	r2, #1
  403584:	4423      	add	r3, r4
  403586:	f1b2 3fff 	cmp.w	r2, #4294967295
  40358a:	d1f6      	bne.n	40357a <SDRAMtest+0x276>
        } while(sets--);
  40358c:	f10e 3eff 	add.w	lr, lr, #4294967295
  403590:	4460      	add	r0, ip
  403592:	f1be 3fff 	cmp.w	lr, #4294967295
  403596:	d1ee      	bne.n	403576 <SDRAMtest+0x272>
  403598:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40359c:	f3bf 8f6f 	isb	sy
	printf("%X %X\r\n",camBuffPtr,*camBuffPtr++);
  4035a0:	4d2e      	ldr	r5, [pc, #184]	; (40365c <SDRAMtest+0x358>)
  4035a2:	4e2f      	ldr	r6, [pc, #188]	; (403660 <SDRAMtest+0x35c>)
  4035a4:	782a      	ldrb	r2, [r5, #0]
  4035a6:	4631      	mov	r1, r6
  4035a8:	482e      	ldr	r0, [pc, #184]	; (403664 <SDRAMtest+0x360>)
  4035aa:	4c20      	ldr	r4, [pc, #128]	; (40362c <SDRAMtest+0x328>)
  4035ac:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  4035ae:	7833      	ldrb	r3, [r6, #0]
  4035b0:	782a      	ldrb	r2, [r5, #0]
  4035b2:	4d2d      	ldr	r5, [pc, #180]	; (403668 <SDRAMtest+0x364>)
  4035b4:	492d      	ldr	r1, [pc, #180]	; (40366c <SDRAMtest+0x368>)
  4035b6:	7809      	ldrb	r1, [r1, #0]
  4035b8:	9111      	str	r1, [sp, #68]	; 0x44
  4035ba:	492d      	ldr	r1, [pc, #180]	; (403670 <SDRAMtest+0x36c>)
  4035bc:	7809      	ldrb	r1, [r1, #0]
  4035be:	9110      	str	r1, [sp, #64]	; 0x40
  4035c0:	492c      	ldr	r1, [pc, #176]	; (403674 <SDRAMtest+0x370>)
  4035c2:	7809      	ldrb	r1, [r1, #0]
  4035c4:	910f      	str	r1, [sp, #60]	; 0x3c
  4035c6:	492c      	ldr	r1, [pc, #176]	; (403678 <SDRAMtest+0x374>)
  4035c8:	7809      	ldrb	r1, [r1, #0]
  4035ca:	910e      	str	r1, [sp, #56]	; 0x38
  4035cc:	492b      	ldr	r1, [pc, #172]	; (40367c <SDRAMtest+0x378>)
  4035ce:	7809      	ldrb	r1, [r1, #0]
  4035d0:	910d      	str	r1, [sp, #52]	; 0x34
  4035d2:	492b      	ldr	r1, [pc, #172]	; (403680 <SDRAMtest+0x37c>)
  4035d4:	7809      	ldrb	r1, [r1, #0]
  4035d6:	910c      	str	r1, [sp, #48]	; 0x30
  4035d8:	492a      	ldr	r1, [pc, #168]	; (403684 <SDRAMtest+0x380>)
  4035da:	7809      	ldrb	r1, [r1, #0]
  4035dc:	910b      	str	r1, [sp, #44]	; 0x2c
  4035de:	492a      	ldr	r1, [pc, #168]	; (403688 <SDRAMtest+0x384>)
  4035e0:	7809      	ldrb	r1, [r1, #0]
  4035e2:	910a      	str	r1, [sp, #40]	; 0x28
  4035e4:	4929      	ldr	r1, [pc, #164]	; (40368c <SDRAMtest+0x388>)
  4035e6:	7809      	ldrb	r1, [r1, #0]
  4035e8:	9109      	str	r1, [sp, #36]	; 0x24
  4035ea:	4929      	ldr	r1, [pc, #164]	; (403690 <SDRAMtest+0x38c>)
  4035ec:	7809      	ldrb	r1, [r1, #0]
  4035ee:	9108      	str	r1, [sp, #32]
  4035f0:	4928      	ldr	r1, [pc, #160]	; (403694 <SDRAMtest+0x390>)
  4035f2:	7809      	ldrb	r1, [r1, #0]
  4035f4:	9107      	str	r1, [sp, #28]
  4035f6:	4928      	ldr	r1, [pc, #160]	; (403698 <SDRAMtest+0x394>)
  4035f8:	7809      	ldrb	r1, [r1, #0]
  4035fa:	9106      	str	r1, [sp, #24]
  4035fc:	4927      	ldr	r1, [pc, #156]	; (40369c <SDRAMtest+0x398>)
  4035fe:	7809      	ldrb	r1, [r1, #0]
  403600:	9105      	str	r1, [sp, #20]
  403602:	4927      	ldr	r1, [pc, #156]	; (4036a0 <SDRAMtest+0x39c>)
  403604:	7809      	ldrb	r1, [r1, #0]
  403606:	9104      	str	r1, [sp, #16]
  403608:	4926      	ldr	r1, [pc, #152]	; (4036a4 <SDRAMtest+0x3a0>)
  40360a:	7809      	ldrb	r1, [r1, #0]
  40360c:	9103      	str	r1, [sp, #12]
  40360e:	4926      	ldr	r1, [pc, #152]	; (4036a8 <SDRAMtest+0x3a4>)
  403610:	7809      	ldrb	r1, [r1, #0]
  403612:	9102      	str	r1, [sp, #8]
  403614:	e056      	b.n	4036c4 <SDRAMtest+0x3c0>
  403616:	bf00      	nop
  403618:	e000ed00 	.word	0xe000ed00
  40361c:	400e0e00 	.word	0x400e0e00
  403620:	004013a9 	.word	0x004013a9
  403624:	004031c1 	.word	0x004031c1
  403628:	00406d14 	.word	0x00406d14
  40362c:	00403ddd 	.word	0x00403ddd
  403630:	11e1a300 	.word	0x11e1a300
  403634:	00406d08 	.word	0x00406d08
  403638:	00400291 	.word	0x00400291
  40363c:	40084000 	.word	0x40084000
  403640:	00406d1c 	.word	0x00406d1c
  403644:	009a5649 	.word	0x009a5649
  403648:	20400001 	.word	0x20400001
  40364c:	71000af2 	.word	0x71000af2
  403650:	713aa2f2 	.word	0x713aa2f2
  403654:	a5000001 	.word	0xa5000001
  403658:	400e1850 	.word	0x400e1850
  40365c:	710000ee 	.word	0x710000ee
  403660:	710000ef 	.word	0x710000ef
  403664:	00406d2c 	.word	0x00406d2c
  403668:	00406d34 	.word	0x00406d34
  40366c:	71000101 	.word	0x71000101
  403670:	71000100 	.word	0x71000100
  403674:	710000ff 	.word	0x710000ff
  403678:	710000fe 	.word	0x710000fe
  40367c:	710000fd 	.word	0x710000fd
  403680:	710000fc 	.word	0x710000fc
  403684:	710000fb 	.word	0x710000fb
  403688:	710000fa 	.word	0x710000fa
  40368c:	710000f9 	.word	0x710000f9
  403690:	710000f8 	.word	0x710000f8
  403694:	710000f7 	.word	0x710000f7
  403698:	710000f6 	.word	0x710000f6
  40369c:	710000f5 	.word	0x710000f5
  4036a0:	710000f4 	.word	0x710000f4
  4036a4:	710000f3 	.word	0x710000f3
  4036a8:	710000f2 	.word	0x710000f2
  4036ac:	71000192 	.word	0x71000192
  4036b0:	71000322 	.word	0x71000322
  4036b4:	710004b2 	.word	0x710004b2
  4036b8:	71000642 	.word	0x71000642
  4036bc:	710007d2 	.word	0x710007d2
  4036c0:	71000962 	.word	0x71000962
  4036c4:	4980      	ldr	r1, [pc, #512]	; (4038c8 <SDRAMtest+0x5c4>)
  4036c6:	7809      	ldrb	r1, [r1, #0]
  4036c8:	9101      	str	r1, [sp, #4]
  4036ca:	4980      	ldr	r1, [pc, #512]	; (4038cc <SDRAMtest+0x5c8>)
  4036cc:	7809      	ldrb	r1, [r1, #0]
  4036ce:	9100      	str	r1, [sp, #0]
  4036d0:	497f      	ldr	r1, [pc, #508]	; (4038d0 <SDRAMtest+0x5cc>)
  4036d2:	4628      	mov	r0, r5
  4036d4:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  4036d6:	4b7f      	ldr	r3, [pc, #508]	; (4038d4 <SDRAMtest+0x5d0>)
  4036d8:	781b      	ldrb	r3, [r3, #0]
  4036da:	4a7f      	ldr	r2, [pc, #508]	; (4038d8 <SDRAMtest+0x5d4>)
  4036dc:	7812      	ldrb	r2, [r2, #0]
  4036de:	497f      	ldr	r1, [pc, #508]	; (4038dc <SDRAMtest+0x5d8>)
  4036e0:	7809      	ldrb	r1, [r1, #0]
  4036e2:	9111      	str	r1, [sp, #68]	; 0x44
  4036e4:	497e      	ldr	r1, [pc, #504]	; (4038e0 <SDRAMtest+0x5dc>)
  4036e6:	7809      	ldrb	r1, [r1, #0]
  4036e8:	9110      	str	r1, [sp, #64]	; 0x40
  4036ea:	497e      	ldr	r1, [pc, #504]	; (4038e4 <SDRAMtest+0x5e0>)
  4036ec:	7809      	ldrb	r1, [r1, #0]
  4036ee:	910f      	str	r1, [sp, #60]	; 0x3c
  4036f0:	497d      	ldr	r1, [pc, #500]	; (4038e8 <SDRAMtest+0x5e4>)
  4036f2:	7809      	ldrb	r1, [r1, #0]
  4036f4:	910e      	str	r1, [sp, #56]	; 0x38
  4036f6:	497d      	ldr	r1, [pc, #500]	; (4038ec <SDRAMtest+0x5e8>)
  4036f8:	7809      	ldrb	r1, [r1, #0]
  4036fa:	910d      	str	r1, [sp, #52]	; 0x34
  4036fc:	497c      	ldr	r1, [pc, #496]	; (4038f0 <SDRAMtest+0x5ec>)
  4036fe:	7809      	ldrb	r1, [r1, #0]
  403700:	910c      	str	r1, [sp, #48]	; 0x30
  403702:	497c      	ldr	r1, [pc, #496]	; (4038f4 <SDRAMtest+0x5f0>)
  403704:	7809      	ldrb	r1, [r1, #0]
  403706:	910b      	str	r1, [sp, #44]	; 0x2c
  403708:	497b      	ldr	r1, [pc, #492]	; (4038f8 <SDRAMtest+0x5f4>)
  40370a:	7809      	ldrb	r1, [r1, #0]
  40370c:	910a      	str	r1, [sp, #40]	; 0x28
  40370e:	497b      	ldr	r1, [pc, #492]	; (4038fc <SDRAMtest+0x5f8>)
  403710:	7809      	ldrb	r1, [r1, #0]
  403712:	9109      	str	r1, [sp, #36]	; 0x24
  403714:	497a      	ldr	r1, [pc, #488]	; (403900 <SDRAMtest+0x5fc>)
  403716:	7809      	ldrb	r1, [r1, #0]
  403718:	9108      	str	r1, [sp, #32]
  40371a:	497a      	ldr	r1, [pc, #488]	; (403904 <SDRAMtest+0x600>)
  40371c:	7809      	ldrb	r1, [r1, #0]
  40371e:	9107      	str	r1, [sp, #28]
  403720:	4979      	ldr	r1, [pc, #484]	; (403908 <SDRAMtest+0x604>)
  403722:	7809      	ldrb	r1, [r1, #0]
  403724:	9106      	str	r1, [sp, #24]
  403726:	4979      	ldr	r1, [pc, #484]	; (40390c <SDRAMtest+0x608>)
  403728:	7809      	ldrb	r1, [r1, #0]
  40372a:	9105      	str	r1, [sp, #20]
  40372c:	4978      	ldr	r1, [pc, #480]	; (403910 <SDRAMtest+0x60c>)
  40372e:	7809      	ldrb	r1, [r1, #0]
  403730:	9104      	str	r1, [sp, #16]
  403732:	4978      	ldr	r1, [pc, #480]	; (403914 <SDRAMtest+0x610>)
  403734:	7809      	ldrb	r1, [r1, #0]
  403736:	9103      	str	r1, [sp, #12]
  403738:	4977      	ldr	r1, [pc, #476]	; (403918 <SDRAMtest+0x614>)
  40373a:	7809      	ldrb	r1, [r1, #0]
  40373c:	9102      	str	r1, [sp, #8]
  40373e:	4977      	ldr	r1, [pc, #476]	; (40391c <SDRAMtest+0x618>)
  403740:	7809      	ldrb	r1, [r1, #0]
  403742:	9101      	str	r1, [sp, #4]
  403744:	4976      	ldr	r1, [pc, #472]	; (403920 <SDRAMtest+0x61c>)
  403746:	7809      	ldrb	r1, [r1, #0]
  403748:	9100      	str	r1, [sp, #0]
  40374a:	4976      	ldr	r1, [pc, #472]	; (403924 <SDRAMtest+0x620>)
  40374c:	4628      	mov	r0, r5
  40374e:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  403750:	4b75      	ldr	r3, [pc, #468]	; (403928 <SDRAMtest+0x624>)
  403752:	781b      	ldrb	r3, [r3, #0]
  403754:	4a75      	ldr	r2, [pc, #468]	; (40392c <SDRAMtest+0x628>)
  403756:	7812      	ldrb	r2, [r2, #0]
  403758:	4975      	ldr	r1, [pc, #468]	; (403930 <SDRAMtest+0x62c>)
  40375a:	7809      	ldrb	r1, [r1, #0]
  40375c:	9111      	str	r1, [sp, #68]	; 0x44
  40375e:	4975      	ldr	r1, [pc, #468]	; (403934 <SDRAMtest+0x630>)
  403760:	7809      	ldrb	r1, [r1, #0]
  403762:	9110      	str	r1, [sp, #64]	; 0x40
  403764:	4974      	ldr	r1, [pc, #464]	; (403938 <SDRAMtest+0x634>)
  403766:	7809      	ldrb	r1, [r1, #0]
  403768:	910f      	str	r1, [sp, #60]	; 0x3c
  40376a:	4974      	ldr	r1, [pc, #464]	; (40393c <SDRAMtest+0x638>)
  40376c:	7809      	ldrb	r1, [r1, #0]
  40376e:	910e      	str	r1, [sp, #56]	; 0x38
  403770:	4973      	ldr	r1, [pc, #460]	; (403940 <SDRAMtest+0x63c>)
  403772:	7809      	ldrb	r1, [r1, #0]
  403774:	910d      	str	r1, [sp, #52]	; 0x34
  403776:	4973      	ldr	r1, [pc, #460]	; (403944 <SDRAMtest+0x640>)
  403778:	7809      	ldrb	r1, [r1, #0]
  40377a:	910c      	str	r1, [sp, #48]	; 0x30
  40377c:	4972      	ldr	r1, [pc, #456]	; (403948 <SDRAMtest+0x644>)
  40377e:	7809      	ldrb	r1, [r1, #0]
  403780:	910b      	str	r1, [sp, #44]	; 0x2c
  403782:	4972      	ldr	r1, [pc, #456]	; (40394c <SDRAMtest+0x648>)
  403784:	7809      	ldrb	r1, [r1, #0]
  403786:	910a      	str	r1, [sp, #40]	; 0x28
  403788:	4971      	ldr	r1, [pc, #452]	; (403950 <SDRAMtest+0x64c>)
  40378a:	7809      	ldrb	r1, [r1, #0]
  40378c:	9109      	str	r1, [sp, #36]	; 0x24
  40378e:	4971      	ldr	r1, [pc, #452]	; (403954 <SDRAMtest+0x650>)
  403790:	7809      	ldrb	r1, [r1, #0]
  403792:	9108      	str	r1, [sp, #32]
  403794:	4970      	ldr	r1, [pc, #448]	; (403958 <SDRAMtest+0x654>)
  403796:	7809      	ldrb	r1, [r1, #0]
  403798:	9107      	str	r1, [sp, #28]
  40379a:	4970      	ldr	r1, [pc, #448]	; (40395c <SDRAMtest+0x658>)
  40379c:	7809      	ldrb	r1, [r1, #0]
  40379e:	9106      	str	r1, [sp, #24]
  4037a0:	496f      	ldr	r1, [pc, #444]	; (403960 <SDRAMtest+0x65c>)
  4037a2:	7809      	ldrb	r1, [r1, #0]
  4037a4:	9105      	str	r1, [sp, #20]
  4037a6:	496f      	ldr	r1, [pc, #444]	; (403964 <SDRAMtest+0x660>)
  4037a8:	7809      	ldrb	r1, [r1, #0]
  4037aa:	9104      	str	r1, [sp, #16]
  4037ac:	496e      	ldr	r1, [pc, #440]	; (403968 <SDRAMtest+0x664>)
  4037ae:	7809      	ldrb	r1, [r1, #0]
  4037b0:	9103      	str	r1, [sp, #12]
  4037b2:	496e      	ldr	r1, [pc, #440]	; (40396c <SDRAMtest+0x668>)
  4037b4:	7809      	ldrb	r1, [r1, #0]
  4037b6:	9102      	str	r1, [sp, #8]
  4037b8:	496d      	ldr	r1, [pc, #436]	; (403970 <SDRAMtest+0x66c>)
  4037ba:	7809      	ldrb	r1, [r1, #0]
  4037bc:	9101      	str	r1, [sp, #4]
  4037be:	496d      	ldr	r1, [pc, #436]	; (403974 <SDRAMtest+0x670>)
  4037c0:	7809      	ldrb	r1, [r1, #0]
  4037c2:	9100      	str	r1, [sp, #0]
  4037c4:	496c      	ldr	r1, [pc, #432]	; (403978 <SDRAMtest+0x674>)
  4037c6:	4628      	mov	r0, r5
  4037c8:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  4037ca:	4b6c      	ldr	r3, [pc, #432]	; (40397c <SDRAMtest+0x678>)
  4037cc:	781b      	ldrb	r3, [r3, #0]
  4037ce:	4a6c      	ldr	r2, [pc, #432]	; (403980 <SDRAMtest+0x67c>)
  4037d0:	7812      	ldrb	r2, [r2, #0]
  4037d2:	496c      	ldr	r1, [pc, #432]	; (403984 <SDRAMtest+0x680>)
  4037d4:	7809      	ldrb	r1, [r1, #0]
  4037d6:	9111      	str	r1, [sp, #68]	; 0x44
  4037d8:	496b      	ldr	r1, [pc, #428]	; (403988 <SDRAMtest+0x684>)
  4037da:	7809      	ldrb	r1, [r1, #0]
  4037dc:	9110      	str	r1, [sp, #64]	; 0x40
  4037de:	496b      	ldr	r1, [pc, #428]	; (40398c <SDRAMtest+0x688>)
  4037e0:	7809      	ldrb	r1, [r1, #0]
  4037e2:	910f      	str	r1, [sp, #60]	; 0x3c
  4037e4:	496a      	ldr	r1, [pc, #424]	; (403990 <SDRAMtest+0x68c>)
  4037e6:	7809      	ldrb	r1, [r1, #0]
  4037e8:	910e      	str	r1, [sp, #56]	; 0x38
  4037ea:	496a      	ldr	r1, [pc, #424]	; (403994 <SDRAMtest+0x690>)
  4037ec:	7809      	ldrb	r1, [r1, #0]
  4037ee:	910d      	str	r1, [sp, #52]	; 0x34
  4037f0:	4969      	ldr	r1, [pc, #420]	; (403998 <SDRAMtest+0x694>)
  4037f2:	7809      	ldrb	r1, [r1, #0]
  4037f4:	910c      	str	r1, [sp, #48]	; 0x30
  4037f6:	4969      	ldr	r1, [pc, #420]	; (40399c <SDRAMtest+0x698>)
  4037f8:	7809      	ldrb	r1, [r1, #0]
  4037fa:	910b      	str	r1, [sp, #44]	; 0x2c
  4037fc:	4968      	ldr	r1, [pc, #416]	; (4039a0 <SDRAMtest+0x69c>)
  4037fe:	7809      	ldrb	r1, [r1, #0]
  403800:	910a      	str	r1, [sp, #40]	; 0x28
  403802:	4968      	ldr	r1, [pc, #416]	; (4039a4 <SDRAMtest+0x6a0>)
  403804:	7809      	ldrb	r1, [r1, #0]
  403806:	9109      	str	r1, [sp, #36]	; 0x24
  403808:	4967      	ldr	r1, [pc, #412]	; (4039a8 <SDRAMtest+0x6a4>)
  40380a:	7809      	ldrb	r1, [r1, #0]
  40380c:	9108      	str	r1, [sp, #32]
  40380e:	4967      	ldr	r1, [pc, #412]	; (4039ac <SDRAMtest+0x6a8>)
  403810:	7809      	ldrb	r1, [r1, #0]
  403812:	9107      	str	r1, [sp, #28]
  403814:	4966      	ldr	r1, [pc, #408]	; (4039b0 <SDRAMtest+0x6ac>)
  403816:	7809      	ldrb	r1, [r1, #0]
  403818:	9106      	str	r1, [sp, #24]
  40381a:	4966      	ldr	r1, [pc, #408]	; (4039b4 <SDRAMtest+0x6b0>)
  40381c:	7809      	ldrb	r1, [r1, #0]
  40381e:	9105      	str	r1, [sp, #20]
  403820:	4965      	ldr	r1, [pc, #404]	; (4039b8 <SDRAMtest+0x6b4>)
  403822:	7809      	ldrb	r1, [r1, #0]
  403824:	9104      	str	r1, [sp, #16]
  403826:	4965      	ldr	r1, [pc, #404]	; (4039bc <SDRAMtest+0x6b8>)
  403828:	7809      	ldrb	r1, [r1, #0]
  40382a:	9103      	str	r1, [sp, #12]
  40382c:	4964      	ldr	r1, [pc, #400]	; (4039c0 <SDRAMtest+0x6bc>)
  40382e:	7809      	ldrb	r1, [r1, #0]
  403830:	9102      	str	r1, [sp, #8]
  403832:	4964      	ldr	r1, [pc, #400]	; (4039c4 <SDRAMtest+0x6c0>)
  403834:	7809      	ldrb	r1, [r1, #0]
  403836:	9101      	str	r1, [sp, #4]
  403838:	4963      	ldr	r1, [pc, #396]	; (4039c8 <SDRAMtest+0x6c4>)
  40383a:	7809      	ldrb	r1, [r1, #0]
  40383c:	9100      	str	r1, [sp, #0]
  40383e:	4963      	ldr	r1, [pc, #396]	; (4039cc <SDRAMtest+0x6c8>)
  403840:	4628      	mov	r0, r5
  403842:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  403844:	4b62      	ldr	r3, [pc, #392]	; (4039d0 <SDRAMtest+0x6cc>)
  403846:	781b      	ldrb	r3, [r3, #0]
  403848:	4a62      	ldr	r2, [pc, #392]	; (4039d4 <SDRAMtest+0x6d0>)
  40384a:	7812      	ldrb	r2, [r2, #0]
  40384c:	4962      	ldr	r1, [pc, #392]	; (4039d8 <SDRAMtest+0x6d4>)
  40384e:	7809      	ldrb	r1, [r1, #0]
  403850:	9111      	str	r1, [sp, #68]	; 0x44
  403852:	4962      	ldr	r1, [pc, #392]	; (4039dc <SDRAMtest+0x6d8>)
  403854:	7809      	ldrb	r1, [r1, #0]
  403856:	9110      	str	r1, [sp, #64]	; 0x40
  403858:	4961      	ldr	r1, [pc, #388]	; (4039e0 <SDRAMtest+0x6dc>)
  40385a:	7809      	ldrb	r1, [r1, #0]
  40385c:	910f      	str	r1, [sp, #60]	; 0x3c
  40385e:	4961      	ldr	r1, [pc, #388]	; (4039e4 <SDRAMtest+0x6e0>)
  403860:	7809      	ldrb	r1, [r1, #0]
  403862:	910e      	str	r1, [sp, #56]	; 0x38
  403864:	4960      	ldr	r1, [pc, #384]	; (4039e8 <SDRAMtest+0x6e4>)
  403866:	7809      	ldrb	r1, [r1, #0]
  403868:	910d      	str	r1, [sp, #52]	; 0x34
  40386a:	4960      	ldr	r1, [pc, #384]	; (4039ec <SDRAMtest+0x6e8>)
  40386c:	7809      	ldrb	r1, [r1, #0]
  40386e:	910c      	str	r1, [sp, #48]	; 0x30
  403870:	495f      	ldr	r1, [pc, #380]	; (4039f0 <SDRAMtest+0x6ec>)
  403872:	7809      	ldrb	r1, [r1, #0]
  403874:	910b      	str	r1, [sp, #44]	; 0x2c
  403876:	495f      	ldr	r1, [pc, #380]	; (4039f4 <SDRAMtest+0x6f0>)
  403878:	7809      	ldrb	r1, [r1, #0]
  40387a:	910a      	str	r1, [sp, #40]	; 0x28
  40387c:	495e      	ldr	r1, [pc, #376]	; (4039f8 <SDRAMtest+0x6f4>)
  40387e:	7809      	ldrb	r1, [r1, #0]
  403880:	9109      	str	r1, [sp, #36]	; 0x24
  403882:	495e      	ldr	r1, [pc, #376]	; (4039fc <SDRAMtest+0x6f8>)
  403884:	7809      	ldrb	r1, [r1, #0]
  403886:	9108      	str	r1, [sp, #32]
  403888:	495d      	ldr	r1, [pc, #372]	; (403a00 <SDRAMtest+0x6fc>)
  40388a:	7809      	ldrb	r1, [r1, #0]
  40388c:	9107      	str	r1, [sp, #28]
  40388e:	495d      	ldr	r1, [pc, #372]	; (403a04 <SDRAMtest+0x700>)
  403890:	7809      	ldrb	r1, [r1, #0]
  403892:	9106      	str	r1, [sp, #24]
  403894:	495c      	ldr	r1, [pc, #368]	; (403a08 <SDRAMtest+0x704>)
  403896:	7809      	ldrb	r1, [r1, #0]
  403898:	9105      	str	r1, [sp, #20]
  40389a:	495c      	ldr	r1, [pc, #368]	; (403a0c <SDRAMtest+0x708>)
  40389c:	7809      	ldrb	r1, [r1, #0]
  40389e:	9104      	str	r1, [sp, #16]
  4038a0:	495b      	ldr	r1, [pc, #364]	; (403a10 <SDRAMtest+0x70c>)
  4038a2:	7809      	ldrb	r1, [r1, #0]
  4038a4:	9103      	str	r1, [sp, #12]
  4038a6:	495b      	ldr	r1, [pc, #364]	; (403a14 <SDRAMtest+0x710>)
  4038a8:	7809      	ldrb	r1, [r1, #0]
  4038aa:	9102      	str	r1, [sp, #8]
  4038ac:	495a      	ldr	r1, [pc, #360]	; (403a18 <SDRAMtest+0x714>)
  4038ae:	7809      	ldrb	r1, [r1, #0]
  4038b0:	9101      	str	r1, [sp, #4]
  4038b2:	495a      	ldr	r1, [pc, #360]	; (403a1c <SDRAMtest+0x718>)
  4038b4:	7809      	ldrb	r1, [r1, #0]
  4038b6:	9100      	str	r1, [sp, #0]
  4038b8:	4959      	ldr	r1, [pc, #356]	; (403a20 <SDRAMtest+0x71c>)
  4038ba:	4628      	mov	r0, r5
  4038bc:	47a0      	blx	r4
	delay_ms(100);//
  4038be:	4859      	ldr	r0, [pc, #356]	; (403a24 <SDRAMtest+0x720>)
  4038c0:	4b59      	ldr	r3, [pc, #356]	; (403a28 <SDRAMtest+0x724>)
  4038c2:	4798      	blx	r3
  4038c4:	e0b2      	b.n	403a2c <SDRAMtest+0x728>
  4038c6:	bf00      	nop
  4038c8:	710000f1 	.word	0x710000f1
  4038cc:	710000f0 	.word	0x710000f0
  4038d0:	71000102 	.word	0x71000102
  4038d4:	711000ef 	.word	0x711000ef
  4038d8:	711000ee 	.word	0x711000ee
  4038dc:	71100101 	.word	0x71100101
  4038e0:	71100100 	.word	0x71100100
  4038e4:	711000ff 	.word	0x711000ff
  4038e8:	711000fe 	.word	0x711000fe
  4038ec:	711000fd 	.word	0x711000fd
  4038f0:	711000fc 	.word	0x711000fc
  4038f4:	711000fb 	.word	0x711000fb
  4038f8:	711000fa 	.word	0x711000fa
  4038fc:	711000f9 	.word	0x711000f9
  403900:	711000f8 	.word	0x711000f8
  403904:	711000f7 	.word	0x711000f7
  403908:	711000f6 	.word	0x711000f6
  40390c:	711000f5 	.word	0x711000f5
  403910:	711000f4 	.word	0x711000f4
  403914:	711000f3 	.word	0x711000f3
  403918:	711000f2 	.word	0x711000f2
  40391c:	711000f1 	.word	0x711000f1
  403920:	711000f0 	.word	0x711000f0
  403924:	71100102 	.word	0x71100102
  403928:	712000ef 	.word	0x712000ef
  40392c:	712000ee 	.word	0x712000ee
  403930:	71200101 	.word	0x71200101
  403934:	71200100 	.word	0x71200100
  403938:	712000ff 	.word	0x712000ff
  40393c:	712000fe 	.word	0x712000fe
  403940:	712000fd 	.word	0x712000fd
  403944:	712000fc 	.word	0x712000fc
  403948:	712000fb 	.word	0x712000fb
  40394c:	712000fa 	.word	0x712000fa
  403950:	712000f9 	.word	0x712000f9
  403954:	712000f8 	.word	0x712000f8
  403958:	712000f7 	.word	0x712000f7
  40395c:	712000f6 	.word	0x712000f6
  403960:	712000f5 	.word	0x712000f5
  403964:	712000f4 	.word	0x712000f4
  403968:	712000f3 	.word	0x712000f3
  40396c:	712000f2 	.word	0x712000f2
  403970:	712000f1 	.word	0x712000f1
  403974:	712000f0 	.word	0x712000f0
  403978:	71200102 	.word	0x71200102
  40397c:	713000ef 	.word	0x713000ef
  403980:	713000ee 	.word	0x713000ee
  403984:	71300101 	.word	0x71300101
  403988:	71300100 	.word	0x71300100
  40398c:	713000ff 	.word	0x713000ff
  403990:	713000fe 	.word	0x713000fe
  403994:	713000fd 	.word	0x713000fd
  403998:	713000fc 	.word	0x713000fc
  40399c:	713000fb 	.word	0x713000fb
  4039a0:	713000fa 	.word	0x713000fa
  4039a4:	713000f9 	.word	0x713000f9
  4039a8:	713000f8 	.word	0x713000f8
  4039ac:	713000f7 	.word	0x713000f7
  4039b0:	713000f6 	.word	0x713000f6
  4039b4:	713000f5 	.word	0x713000f5
  4039b8:	713000f4 	.word	0x713000f4
  4039bc:	713000f3 	.word	0x713000f3
  4039c0:	713000f2 	.word	0x713000f2
  4039c4:	713000f1 	.word	0x713000f1
  4039c8:	713000f0 	.word	0x713000f0
  4039cc:	71300102 	.word	0x71300102
  4039d0:	714000ef 	.word	0x714000ef
  4039d4:	714000ee 	.word	0x714000ee
  4039d8:	71400101 	.word	0x71400101
  4039dc:	71400100 	.word	0x71400100
  4039e0:	714000ff 	.word	0x714000ff
  4039e4:	714000fe 	.word	0x714000fe
  4039e8:	714000fd 	.word	0x714000fd
  4039ec:	714000fc 	.word	0x714000fc
  4039f0:	714000fb 	.word	0x714000fb
  4039f4:	714000fa 	.word	0x714000fa
  4039f8:	714000f9 	.word	0x714000f9
  4039fc:	714000f8 	.word	0x714000f8
  403a00:	714000f7 	.word	0x714000f7
  403a04:	714000f6 	.word	0x714000f6
  403a08:	714000f5 	.word	0x714000f5
  403a0c:	714000f4 	.word	0x714000f4
  403a10:	714000f3 	.word	0x714000f3
  403a14:	714000f2 	.word	0x714000f2
  403a18:	714000f1 	.word	0x714000f1
  403a1c:	714000f0 	.word	0x714000f0
  403a20:	71400102 	.word	0x71400102
  403a24:	004d2b25 	.word	0x004d2b25
  403a28:	20400001 	.word	0x20400001
    ccsidr  = SCB->CCSIDR;
  403a2c:	4a1c      	ldr	r2, [pc, #112]	; (403aa0 <SDRAMtest+0x79c>)
  403a2e:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  403a32:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  403a36:	f006 0007 	and.w	r0, r6, #7
  403a3a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403a3c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403a40:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  403a44:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  403a48:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  403a4c:	6951      	ldr	r1, [r2, #20]
  403a4e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  403a52:	6151      	str	r1, [r2, #20]
  403a54:	f04f 34ff 	mov.w	r4, #4294967295
  403a58:	fa04 fc00 	lsl.w	ip, r4, r0
  403a5c:	fa0e f000 	lsl.w	r0, lr, r0
  403a60:	409c      	lsls	r4, r3
  403a62:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCCISW = sw;
  403a66:	4615      	mov	r5, r2
         int32_t tmpways = ways;
  403a68:	4632      	mov	r2, r6
  403a6a:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  403a6c:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  403a70:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  403a74:	3a01      	subs	r2, #1
  403a76:	4423      	add	r3, r4
  403a78:	f1b2 3fff 	cmp.w	r2, #4294967295
  403a7c:	d1f6      	bne.n	403a6c <SDRAMtest+0x768>
        } while(sets--);
  403a7e:	f10e 3eff 	add.w	lr, lr, #4294967295
  403a82:	4460      	add	r0, ip
  403a84:	f1be 3fff 	cmp.w	lr, #4294967295
  403a88:	d1ee      	bne.n	403a68 <SDRAMtest+0x764>
  403a8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403a8e:	f3bf 8f6f 	isb	sy
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  403a92:	4a04      	ldr	r2, [pc, #16]	; (403aa4 <SDRAMtest+0x7a0>)
  403a94:	4b04      	ldr	r3, [pc, #16]	; (403aa8 <SDRAMtest+0x7a4>)
  403a96:	601a      	str	r2, [r3, #0]
}
  403a98:	b015      	add	sp, #84	; 0x54
  403a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a9e:	bf00      	nop
  403aa0:	e000ed00 	.word	0xe000ed00
  403aa4:	a5000001 	.word	0xa5000001
  403aa8:	400e1850 	.word	0x400e1850

00403aac <redBlink>:
}
 /***********************************************************************/
 /*    YELLOW BLINK ATSAM
 ***********************************************************************/
 void redBlink (int numBlinks) {
  403aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403ab0:	4b0f      	ldr	r3, [pc, #60]	; (403af0 <redBlink+0x44>)
  403ab2:	2201      	movs	r2, #1
  403ab4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403ab6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 int i;
	 ioport_set_pin_dir(LED_RED_GPIO, IOPORT_DIR_OUTPUT);
	 for (i=numBlinks; i>0; i--){
  403aba:	1e04      	subs	r4, r0, #0
  403abc:	dd10      	ble.n	403ae0 <redBlink+0x34>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403abe:	461e      	mov	r6, r3
  403ac0:	4617      	mov	r7, r2
  403ac2:	4692      	mov	sl, r2
		 ioport_set_pin_level(LED_RED_GPIO, LED_ACTIVE_LEVEL); //LED ON
		 delay_ms(20);
  403ac4:	f8df 9030 	ldr.w	r9, [pc, #48]	; 403af8 <redBlink+0x4c>
  403ac8:	4d0a      	ldr	r5, [pc, #40]	; (403af4 <redBlink+0x48>)
		 ioport_set_pin_level(LED_RED_GPIO, LED_INACTIVE_LEVEL); //LED OFF
		 delay_ms(50);
  403aca:	f8df 8030 	ldr.w	r8, [pc, #48]	; 403afc <redBlink+0x50>
  403ace:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		 delay_ms(20);
  403ad2:	4648      	mov	r0, r9
  403ad4:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403ad6:	6337      	str	r7, [r6, #48]	; 0x30
		 delay_ms(50);
  403ad8:	4640      	mov	r0, r8
  403ada:	47a8      	blx	r5
	 for (i=numBlinks; i>0; i--){
  403adc:	3c01      	subs	r4, #1
  403ade:	d1f6      	bne.n	403ace <redBlink+0x22>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403ae0:	4b03      	ldr	r3, [pc, #12]	; (403af0 <redBlink+0x44>)
  403ae2:	2201      	movs	r2, #1
  403ae4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403ae6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  403aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403aee:	bf00      	nop
  403af0:	400e1400 	.word	0x400e1400
  403af4:	20400001 	.word	0x20400001
  403af8:	000f6f08 	.word	0x000f6f08
  403afc:	00269593 	.word	0x00269593

00403b00 <main>:
{
  403b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		sleepmgr_locks[i] = 0;
  403b04:	4b51      	ldr	r3, [pc, #324]	; (403c4c <main+0x14c>)
  403b06:	2200      	movs	r2, #0
  403b08:	701a      	strb	r2, [r3, #0]
  403b0a:	705a      	strb	r2, [r3, #1]
  403b0c:	709a      	strb	r2, [r3, #2]
  403b0e:	70da      	strb	r2, [r3, #3]
  403b10:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  403b12:	2201      	movs	r2, #1
  403b14:	715a      	strb	r2, [r3, #5]
	sysclk_init();
  403b16:	4b4e      	ldr	r3, [pc, #312]	; (403c50 <main+0x150>)
  403b18:	4798      	blx	r3
	board_init();
  403b1a:	4b4e      	ldr	r3, [pc, #312]	; (403c54 <main+0x154>)
  403b1c:	4798      	blx	r3
	redBlink(2);
  403b1e:	2002      	movs	r0, #2
  403b20:	4e4d      	ldr	r6, [pc, #308]	; (403c58 <main+0x158>)
  403b22:	47b0      	blx	r6
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403b24:	4c4d      	ldr	r4, [pc, #308]	; (403c5c <main+0x15c>)
  403b26:	f44f 7580 	mov.w	r5, #256	; 0x100
  403b2a:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403b2c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403b30:	6365      	str	r5, [r4, #52]	; 0x34
	configure_console();  //pmc_enable_pllack messes up the console speed
  403b32:	4f4b      	ldr	r7, [pc, #300]	; (403c60 <main+0x160>)
  403b34:	47b8      	blx	r7
	configure_console();  //pmc_enable_pllack messes up the console speed
  403b36:	47b8      	blx	r7
	printf("\r\nBOOT GOOD\r\n");
  403b38:	484a      	ldr	r0, [pc, #296]	; (403c64 <main+0x164>)
  403b3a:	4b4b      	ldr	r3, [pc, #300]	; (403c68 <main+0x168>)
  403b3c:	4798      	blx	r3
	SDRAMtest();
  403b3e:	4b4b      	ldr	r3, [pc, #300]	; (403c6c <main+0x16c>)
  403b40:	4798      	blx	r3
	redBlink(20);
  403b42:	2014      	movs	r0, #20
  403b44:	47b0      	blx	r6
	SCB_EnableDCache();//for SD to work twice in a row, have to enable DCache before cleanInvalidate,disable.
  403b46:	4b4a      	ldr	r3, [pc, #296]	; (403c70 <main+0x170>)
  403b48:	4798      	blx	r3
	SCB_CleanInvalidateDCache();
  403b4a:	4b4a      	ldr	r3, [pc, #296]	; (403c74 <main+0x174>)
  403b4c:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403b4e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  403b52:	6323      	str	r3, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403b54:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403b56:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403b5a:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(1);
  403b5c:	f24c 508e 	movw	r0, #50574	; 0xc58e
  403b60:	4b45      	ldr	r3, [pc, #276]	; (403c78 <main+0x178>)
  403b62:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  403b64:	4845      	ldr	r0, [pc, #276]	; (403c7c <main+0x17c>)
  403b66:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  403b6a:	f3c2 354e 	ubfx	r5, r2, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  403b6e:	f002 0307 	and.w	r3, r2, #7
  403b72:	3304      	adds	r3, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403b74:	f3c2 02c9 	ubfx	r2, r2, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403b78:	fab2 f182 	clz	r1, r2
    wshift  = __CLZ(ways) & 0x1f;
  403b7c:	f001 011f 	and.w	r1, r1, #31
  __ASM volatile ("dsb");
  403b80:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  403b84:	6944      	ldr	r4, [r0, #20]
  403b86:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  403b8a:	6144      	str	r4, [r0, #20]
  403b8c:	f04f 30ff 	mov.w	r0, #4294967295
  403b90:	fa00 fe03 	lsl.w	lr, r0, r3
  403b94:	fa05 f303 	lsl.w	r3, r5, r3
  403b98:	4088      	lsls	r0, r1
  403b9a:	fa02 f101 	lsl.w	r1, r2, r1
              SCB->DCCISW = sw;
  403b9e:	4f37      	ldr	r7, [pc, #220]	; (403c7c <main+0x17c>)
         int32_t tmpways = ways;
  403ba0:	4616      	mov	r6, r2
  403ba2:	460c      	mov	r4, r1
              sw = ((tmpways << wshift) | (sets << sshift));
  403ba4:	ea43 0c04 	orr.w	ip, r3, r4
              SCB->DCCISW = sw;
  403ba8:	f8c7 c274 	str.w	ip, [r7, #628]	; 0x274
            } while(tmpways--);
  403bac:	3e01      	subs	r6, #1
  403bae:	4404      	add	r4, r0
  403bb0:	f1b6 3fff 	cmp.w	r6, #4294967295
  403bb4:	d1f6      	bne.n	403ba4 <main+0xa4>
        } while(sets--);
  403bb6:	3d01      	subs	r5, #1
  403bb8:	4473      	add	r3, lr
  403bba:	f1b5 3fff 	cmp.w	r5, #4294967295
  403bbe:	d1ef      	bne.n	403ba0 <main+0xa0>
  403bc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403bc4:	f3bf 8f6f 	isb	sy
	cpu_irq_enable();
  403bc8:	2201      	movs	r2, #1
  403bca:	4b2d      	ldr	r3, [pc, #180]	; (403c80 <main+0x180>)
  403bcc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  403bce:	f3bf 8f5f 	dmb	sy
  403bd2:	b662      	cpsie	i
	udc_start();
  403bd4:	4b2b      	ldr	r3, [pc, #172]	; (403c84 <main+0x184>)
  403bd6:	4798      	blx	r3
 	delay_ms(1000);
  403bd8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 403c90 <main+0x190>
  403bdc:	4640      	mov	r0, r8
  403bde:	4f26      	ldr	r7, [pc, #152]	; (403c78 <main+0x178>)
  403be0:	47b8      	blx	r7
 	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  403be2:	4d29      	ldr	r5, [pc, #164]	; (403c88 <main+0x188>)
  403be4:	4e29      	ldr	r6, [pc, #164]	; (403c8c <main+0x18c>)
  403be6:	602e      	str	r6, [r5, #0]
 	SDRAMtest();
  403be8:	4c20      	ldr	r4, [pc, #128]	; (403c6c <main+0x16c>)
  403bea:	47a0      	blx	r4
 	delay_ms(1000);
  403bec:	4640      	mov	r0, r8
  403bee:	47b8      	blx	r7
 	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  403bf0:	602e      	str	r6, [r5, #0]
 	SDRAMtest();
  403bf2:	47a0      	blx	r4
 	delay_ms(1000);
  403bf4:	4640      	mov	r0, r8
  403bf6:	47b8      	blx	r7
 	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  403bf8:	602e      	str	r6, [r5, #0]
 	SDRAMtest();
  403bfa:	47a0      	blx	r4
	SCB_EnableDCache();//for SD to work twice in a row, have to enable DCache before cleanInvalidate,disable.
  403bfc:	4b1c      	ldr	r3, [pc, #112]	; (403c70 <main+0x170>)
  403bfe:	4798      	blx	r3
	SCB_CleanInvalidateDCache();
  403c00:	4b1c      	ldr	r3, [pc, #112]	; (403c74 <main+0x174>)
  403c02:	4798      	blx	r3
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
  403c04:	4c1e      	ldr	r4, [pc, #120]	; (403c80 <main+0x180>)
  403c06:	2500      	movs	r5, #0
  403c08:	462f      	mov	r7, r5
	while (!(*lock_ptr)) {
  403c0a:	4e10      	ldr	r6, [pc, #64]	; (403c4c <main+0x14c>)
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
  403c0c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 403c94 <main+0x194>
  403c10:	e004      	b.n	403c1c <main+0x11c>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
  403c12:	2301      	movs	r3, #1
  403c14:	7023      	strb	r3, [r4, #0]
  403c16:	f3bf 8f5f 	dmb	sy
  403c1a:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
  403c1c:	b672      	cpsid	i
  403c1e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403c22:	7027      	strb	r7, [r4, #0]
	while (!(*lock_ptr)) {
  403c24:	7833      	ldrb	r3, [r6, #0]
  403c26:	2b00      	cmp	r3, #0
  403c28:	d1f3      	bne.n	403c12 <main+0x112>
  403c2a:	4b08      	ldr	r3, [pc, #32]	; (403c4c <main+0x14c>)
  403c2c:	4628      	mov	r0, r5
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
  403c2e:	3001      	adds	r0, #1
  403c30:	b2c0      	uxtb	r0, r0
	while (!(*lock_ptr)) {
  403c32:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  403c36:	2a00      	cmp	r2, #0
  403c38:	d0f9      	beq.n	403c2e <main+0x12e>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
  403c3a:	2800      	cmp	r0, #0
  403c3c:	d0e9      	beq.n	403c12 <main+0x112>
  403c3e:	b672      	cpsid	i
  403c40:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403c44:	7025      	strb	r5, [r4, #0]
	pmc_sleep(sleep_mode);
  403c46:	47c0      	blx	r8
  403c48:	e7e8      	b.n	403c1c <main+0x11c>
  403c4a:	bf00      	nop
  403c4c:	20401034 	.word	0x20401034
  403c50:	004004e9 	.word	0x004004e9
  403c54:	00400d39 	.word	0x00400d39
  403c58:	00403aad 	.word	0x00403aad
  403c5c:	400e0e00 	.word	0x400e0e00
  403c60:	00403055 	.word	0x00403055
  403c64:	00406d78 	.word	0x00406d78
  403c68:	00403ddd 	.word	0x00403ddd
  403c6c:	00403305 	.word	0x00403305
  403c70:	00402c61 	.word	0x00402c61
  403c74:	00402cd5 	.word	0x00402cd5
  403c78:	20400001 	.word	0x20400001
  403c7c:	e000ed00 	.word	0xe000ed00
  403c80:	204000e7 	.word	0x204000e7
  403c84:	00400855 	.word	0x00400855
  403c88:	400e1850 	.word	0x400e1850
  403c8c:	a5000001 	.word	0xa5000001
  403c90:	0303af6b 	.word	0x0303af6b
  403c94:	0040144d 	.word	0x0040144d

00403c98 <sendPic>:
	 ioport_set_pin_dir(LED_RED_GPIO, IOPORT_DIR_INPUT);
 }
 /***********************************************************************/
 /*    SEND IMAGE TO HOST PC
 ***********************************************************************/
void sendPic(void){
  403c98:	b508      	push	{r3, lr}
	printf("SENT PIC\r\n");
  403c9a:	4802      	ldr	r0, [pc, #8]	; (403ca4 <sendPic+0xc>)
  403c9c:	4b02      	ldr	r3, [pc, #8]	; (403ca8 <sendPic+0x10>)
  403c9e:	4798      	blx	r3
  403ca0:	bd08      	pop	{r3, pc}
  403ca2:	bf00      	nop
  403ca4:	00406e30 	.word	0x00406e30
  403ca8:	00403ddd 	.word	0x00403ddd

00403cac <main_vendor_int_in_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  403cac:	b100      	cbz	r0, 403cb0 <main_vendor_int_in_received+0x4>
  403cae:	4770      	bx	lr
{
  403cb0:	b510      	push	{r4, lr}
  403cb2:	b084      	sub	sp, #16
	udi_vendor_interrupt_out_run(
  403cb4:	4c17      	ldr	r4, [pc, #92]	; (403d14 <main_vendor_int_in_received+0x68>)
  403cb6:	4a18      	ldr	r2, [pc, #96]	; (403d18 <main_vendor_int_in_received+0x6c>)
  403cb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403cbc:	4620      	mov	r0, r4
  403cbe:	4b17      	ldr	r3, [pc, #92]	; (403d1c <main_vendor_int_in_received+0x70>)
  403cc0:	4798      	blx	r3
 	if((main_buf_loopback[0]=='W')&&(main_buf_loopback[1]=='D')&&(main_buf_loopback[2]=='S')){
  403cc2:	7823      	ldrb	r3, [r4, #0]
  403cc4:	2b57      	cmp	r3, #87	; 0x57
  403cc6:	d010      	beq.n	403cea <main_vendor_int_in_received+0x3e>
 	printf("INT IN: %d %d %d %d %d %d %d\r\n",main_buf_loopback[0],main_buf_loopback[1],main_buf_loopback[2],main_buf_loopback[3],main_buf_loopback[4],main_buf_loopback[5],main_buf_loopback[6]);
  403cc8:	4812      	ldr	r0, [pc, #72]	; (403d14 <main_vendor_int_in_received+0x68>)
  403cca:	7883      	ldrb	r3, [r0, #2]
  403ccc:	7842      	ldrb	r2, [r0, #1]
  403cce:	7801      	ldrb	r1, [r0, #0]
  403cd0:	7984      	ldrb	r4, [r0, #6]
  403cd2:	9403      	str	r4, [sp, #12]
  403cd4:	7944      	ldrb	r4, [r0, #5]
  403cd6:	9402      	str	r4, [sp, #8]
  403cd8:	7904      	ldrb	r4, [r0, #4]
  403cda:	9401      	str	r4, [sp, #4]
  403cdc:	78c0      	ldrb	r0, [r0, #3]
  403cde:	9000      	str	r0, [sp, #0]
  403ce0:	480f      	ldr	r0, [pc, #60]	; (403d20 <main_vendor_int_in_received+0x74>)
  403ce2:	4c10      	ldr	r4, [pc, #64]	; (403d24 <main_vendor_int_in_received+0x78>)
  403ce4:	47a0      	blx	r4
}
  403ce6:	b004      	add	sp, #16
  403ce8:	bd10      	pop	{r4, pc}
 	if((main_buf_loopback[0]=='W')&&(main_buf_loopback[1]=='D')&&(main_buf_loopback[2]=='S')){
  403cea:	7863      	ldrb	r3, [r4, #1]
  403cec:	2b44      	cmp	r3, #68	; 0x44
  403cee:	d1eb      	bne.n	403cc8 <main_vendor_int_in_received+0x1c>
  403cf0:	78a3      	ldrb	r3, [r4, #2]
  403cf2:	2b53      	cmp	r3, #83	; 0x53
  403cf4:	d1e8      	bne.n	403cc8 <main_vendor_int_in_received+0x1c>
		 switch(main_buf_loopback[5]){
  403cf6:	7963      	ldrb	r3, [r4, #5]
  403cf8:	2b01      	cmp	r3, #1
  403cfa:	d008      	beq.n	403d0e <main_vendor_int_in_received+0x62>
  403cfc:	2b02      	cmp	r3, #2
  403cfe:	d1e3      	bne.n	403cc8 <main_vendor_int_in_received+0x1c>
				redBlink(main_buf_loopback[13]);
  403d00:	7b60      	ldrb	r0, [r4, #13]
  403d02:	4b09      	ldr	r3, [pc, #36]	; (403d28 <main_vendor_int_in_received+0x7c>)
  403d04:	4798      	blx	r3
				printf("Blinked\r\n");
  403d06:	4809      	ldr	r0, [pc, #36]	; (403d2c <main_vendor_int_in_received+0x80>)
  403d08:	4b06      	ldr	r3, [pc, #24]	; (403d24 <main_vendor_int_in_received+0x78>)
  403d0a:	4798      	blx	r3
				break;
  403d0c:	e7dc      	b.n	403cc8 <main_vendor_int_in_received+0x1c>
				sendPic(); 
  403d0e:	4b08      	ldr	r3, [pc, #32]	; (403d30 <main_vendor_int_in_received+0x84>)
  403d10:	4798      	blx	r3
				break;
  403d12:	e7d9      	b.n	403cc8 <main_vendor_int_in_received+0x1c>
  403d14:	20400bf4 	.word	0x20400bf4
  403d18:	00402eed 	.word	0x00402eed
  403d1c:	00400621 	.word	0x00400621
  403d20:	00406df0 	.word	0x00406df0
  403d24:	00403ddd 	.word	0x00403ddd
  403d28:	00403aad 	.word	0x00403aad
  403d2c:	00406de4 	.word	0x00406de4
  403d30:	00403c99 	.word	0x00403c99

00403d34 <main_vendor_enable>:
{
  403d34:	b510      	push	{r4, lr}
	main_b_vendor_enable = true;
  403d36:	2401      	movs	r4, #1
  403d38:	4b0d      	ldr	r3, [pc, #52]	; (403d70 <main_vendor_enable+0x3c>)
  403d3a:	701c      	strb	r4, [r3, #0]
	main_vendor_int_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  403d3c:	2200      	movs	r2, #0
  403d3e:	4611      	mov	r1, r2
  403d40:	4610      	mov	r0, r2
  403d42:	4b0c      	ldr	r3, [pc, #48]	; (403d74 <main_vendor_enable+0x40>)
  403d44:	4798      	blx	r3
	g_usbFlagC=3;
  403d46:	2203      	movs	r2, #3
  403d48:	4b0b      	ldr	r3, [pc, #44]	; (403d78 <main_vendor_enable+0x44>)
  403d4a:	701a      	strb	r2, [r3, #0]
	main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  403d4c:	2200      	movs	r2, #0
  403d4e:	4611      	mov	r1, r2
  403d50:	4610      	mov	r0, r2
  403d52:	4b0a      	ldr	r3, [pc, #40]	; (403d7c <main_vendor_enable+0x48>)
  403d54:	4798      	blx	r3
	g_usbFlagD=4;
  403d56:	2204      	movs	r2, #4
  403d58:	4b09      	ldr	r3, [pc, #36]	; (403d80 <main_vendor_enable+0x4c>)
  403d5a:	701a      	strb	r2, [r3, #0]
	main_buf_iso_sel=0;
  403d5c:	2000      	movs	r0, #0
  403d5e:	4b09      	ldr	r3, [pc, #36]	; (403d84 <main_vendor_enable+0x50>)
  403d60:	7018      	strb	r0, [r3, #0]
	main_vendor_iso_out_received(UDD_EP_TRANSFER_OK, 0, 0);
  403d62:	4602      	mov	r2, r0
  403d64:	4601      	mov	r1, r0
  403d66:	4b08      	ldr	r3, [pc, #32]	; (403d88 <main_vendor_enable+0x54>)
  403d68:	4798      	blx	r3
}
  403d6a:	4620      	mov	r0, r4
  403d6c:	bd10      	pop	{r4, pc}
  403d6e:	bf00      	nop
  403d70:	20400bf0 	.word	0x20400bf0
  403d74:	00403cad 	.word	0x00403cad
  403d78:	20400bee 	.word	0x20400bee
  403d7c:	00402f35 	.word	0x00402f35
  403d80:	20400bef 	.word	0x20400bef
  403d84:	20400bf1 	.word	0x20400bf1
  403d88:	00402fe5 	.word	0x00402fe5

00403d8c <__libc_init_array>:
  403d8c:	b570      	push	{r4, r5, r6, lr}
  403d8e:	4e0f      	ldr	r6, [pc, #60]	; (403dcc <__libc_init_array+0x40>)
  403d90:	4d0f      	ldr	r5, [pc, #60]	; (403dd0 <__libc_init_array+0x44>)
  403d92:	1b76      	subs	r6, r6, r5
  403d94:	10b6      	asrs	r6, r6, #2
  403d96:	bf18      	it	ne
  403d98:	2400      	movne	r4, #0
  403d9a:	d005      	beq.n	403da8 <__libc_init_array+0x1c>
  403d9c:	3401      	adds	r4, #1
  403d9e:	f855 3b04 	ldr.w	r3, [r5], #4
  403da2:	4798      	blx	r3
  403da4:	42a6      	cmp	r6, r4
  403da6:	d1f9      	bne.n	403d9c <__libc_init_array+0x10>
  403da8:	4e0a      	ldr	r6, [pc, #40]	; (403dd4 <__libc_init_array+0x48>)
  403daa:	4d0b      	ldr	r5, [pc, #44]	; (403dd8 <__libc_init_array+0x4c>)
  403dac:	1b76      	subs	r6, r6, r5
  403dae:	f003 f8f9 	bl	406fa4 <_init>
  403db2:	10b6      	asrs	r6, r6, #2
  403db4:	bf18      	it	ne
  403db6:	2400      	movne	r4, #0
  403db8:	d006      	beq.n	403dc8 <__libc_init_array+0x3c>
  403dba:	3401      	adds	r4, #1
  403dbc:	f855 3b04 	ldr.w	r3, [r5], #4
  403dc0:	4798      	blx	r3
  403dc2:	42a6      	cmp	r6, r4
  403dc4:	d1f9      	bne.n	403dba <__libc_init_array+0x2e>
  403dc6:	bd70      	pop	{r4, r5, r6, pc}
  403dc8:	bd70      	pop	{r4, r5, r6, pc}
  403dca:	bf00      	nop
  403dcc:	00406fb0 	.word	0x00406fb0
  403dd0:	00406fb0 	.word	0x00406fb0
  403dd4:	00406fb8 	.word	0x00406fb8
  403dd8:	00406fb0 	.word	0x00406fb0

00403ddc <iprintf>:
  403ddc:	b40f      	push	{r0, r1, r2, r3}
  403dde:	b500      	push	{lr}
  403de0:	4907      	ldr	r1, [pc, #28]	; (403e00 <iprintf+0x24>)
  403de2:	b083      	sub	sp, #12
  403de4:	ab04      	add	r3, sp, #16
  403de6:	6808      	ldr	r0, [r1, #0]
  403de8:	f853 2b04 	ldr.w	r2, [r3], #4
  403dec:	6881      	ldr	r1, [r0, #8]
  403dee:	9301      	str	r3, [sp, #4]
  403df0:	f000 f966 	bl	4040c0 <_vfiprintf_r>
  403df4:	b003      	add	sp, #12
  403df6:	f85d eb04 	ldr.w	lr, [sp], #4
  403dfa:	b004      	add	sp, #16
  403dfc:	4770      	bx	lr
  403dfe:	bf00      	nop
  403e00:	204000f0 	.word	0x204000f0

00403e04 <memset>:
  403e04:	b470      	push	{r4, r5, r6}
  403e06:	0786      	lsls	r6, r0, #30
  403e08:	d046      	beq.n	403e98 <memset+0x94>
  403e0a:	1e54      	subs	r4, r2, #1
  403e0c:	2a00      	cmp	r2, #0
  403e0e:	d041      	beq.n	403e94 <memset+0x90>
  403e10:	b2ca      	uxtb	r2, r1
  403e12:	4603      	mov	r3, r0
  403e14:	e002      	b.n	403e1c <memset+0x18>
  403e16:	f114 34ff 	adds.w	r4, r4, #4294967295
  403e1a:	d33b      	bcc.n	403e94 <memset+0x90>
  403e1c:	f803 2b01 	strb.w	r2, [r3], #1
  403e20:	079d      	lsls	r5, r3, #30
  403e22:	d1f8      	bne.n	403e16 <memset+0x12>
  403e24:	2c03      	cmp	r4, #3
  403e26:	d92e      	bls.n	403e86 <memset+0x82>
  403e28:	b2cd      	uxtb	r5, r1
  403e2a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403e2e:	2c0f      	cmp	r4, #15
  403e30:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403e34:	d919      	bls.n	403e6a <memset+0x66>
  403e36:	f103 0210 	add.w	r2, r3, #16
  403e3a:	4626      	mov	r6, r4
  403e3c:	3e10      	subs	r6, #16
  403e3e:	2e0f      	cmp	r6, #15
  403e40:	f842 5c10 	str.w	r5, [r2, #-16]
  403e44:	f842 5c0c 	str.w	r5, [r2, #-12]
  403e48:	f842 5c08 	str.w	r5, [r2, #-8]
  403e4c:	f842 5c04 	str.w	r5, [r2, #-4]
  403e50:	f102 0210 	add.w	r2, r2, #16
  403e54:	d8f2      	bhi.n	403e3c <memset+0x38>
  403e56:	f1a4 0210 	sub.w	r2, r4, #16
  403e5a:	f022 020f 	bic.w	r2, r2, #15
  403e5e:	f004 040f 	and.w	r4, r4, #15
  403e62:	3210      	adds	r2, #16
  403e64:	2c03      	cmp	r4, #3
  403e66:	4413      	add	r3, r2
  403e68:	d90d      	bls.n	403e86 <memset+0x82>
  403e6a:	461e      	mov	r6, r3
  403e6c:	4622      	mov	r2, r4
  403e6e:	3a04      	subs	r2, #4
  403e70:	2a03      	cmp	r2, #3
  403e72:	f846 5b04 	str.w	r5, [r6], #4
  403e76:	d8fa      	bhi.n	403e6e <memset+0x6a>
  403e78:	1f22      	subs	r2, r4, #4
  403e7a:	f022 0203 	bic.w	r2, r2, #3
  403e7e:	3204      	adds	r2, #4
  403e80:	4413      	add	r3, r2
  403e82:	f004 0403 	and.w	r4, r4, #3
  403e86:	b12c      	cbz	r4, 403e94 <memset+0x90>
  403e88:	b2c9      	uxtb	r1, r1
  403e8a:	441c      	add	r4, r3
  403e8c:	f803 1b01 	strb.w	r1, [r3], #1
  403e90:	429c      	cmp	r4, r3
  403e92:	d1fb      	bne.n	403e8c <memset+0x88>
  403e94:	bc70      	pop	{r4, r5, r6}
  403e96:	4770      	bx	lr
  403e98:	4614      	mov	r4, r2
  403e9a:	4603      	mov	r3, r0
  403e9c:	e7c2      	b.n	403e24 <memset+0x20>
  403e9e:	bf00      	nop

00403ea0 <setbuf>:
  403ea0:	2900      	cmp	r1, #0
  403ea2:	bf0c      	ite	eq
  403ea4:	2202      	moveq	r2, #2
  403ea6:	2200      	movne	r2, #0
  403ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403eac:	f000 b800 	b.w	403eb0 <setvbuf>

00403eb0 <setvbuf>:
  403eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403eb4:	4c61      	ldr	r4, [pc, #388]	; (40403c <setvbuf+0x18c>)
  403eb6:	6825      	ldr	r5, [r4, #0]
  403eb8:	b083      	sub	sp, #12
  403eba:	4604      	mov	r4, r0
  403ebc:	460f      	mov	r7, r1
  403ebe:	4690      	mov	r8, r2
  403ec0:	461e      	mov	r6, r3
  403ec2:	b115      	cbz	r5, 403eca <setvbuf+0x1a>
  403ec4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403ec6:	2b00      	cmp	r3, #0
  403ec8:	d064      	beq.n	403f94 <setvbuf+0xe4>
  403eca:	f1b8 0f02 	cmp.w	r8, #2
  403ece:	d006      	beq.n	403ede <setvbuf+0x2e>
  403ed0:	f1b8 0f01 	cmp.w	r8, #1
  403ed4:	f200 809f 	bhi.w	404016 <setvbuf+0x166>
  403ed8:	2e00      	cmp	r6, #0
  403eda:	f2c0 809c 	blt.w	404016 <setvbuf+0x166>
  403ede:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403ee0:	07d8      	lsls	r0, r3, #31
  403ee2:	d534      	bpl.n	403f4e <setvbuf+0x9e>
  403ee4:	4621      	mov	r1, r4
  403ee6:	4628      	mov	r0, r5
  403ee8:	f001 f888 	bl	404ffc <_fflush_r>
  403eec:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403eee:	b141      	cbz	r1, 403f02 <setvbuf+0x52>
  403ef0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403ef4:	4299      	cmp	r1, r3
  403ef6:	d002      	beq.n	403efe <setvbuf+0x4e>
  403ef8:	4628      	mov	r0, r5
  403efa:	f001 f9fd 	bl	4052f8 <_free_r>
  403efe:	2300      	movs	r3, #0
  403f00:	6323      	str	r3, [r4, #48]	; 0x30
  403f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f06:	2200      	movs	r2, #0
  403f08:	61a2      	str	r2, [r4, #24]
  403f0a:	6062      	str	r2, [r4, #4]
  403f0c:	061a      	lsls	r2, r3, #24
  403f0e:	d43a      	bmi.n	403f86 <setvbuf+0xd6>
  403f10:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403f14:	f023 0303 	bic.w	r3, r3, #3
  403f18:	f1b8 0f02 	cmp.w	r8, #2
  403f1c:	81a3      	strh	r3, [r4, #12]
  403f1e:	d01d      	beq.n	403f5c <setvbuf+0xac>
  403f20:	ab01      	add	r3, sp, #4
  403f22:	466a      	mov	r2, sp
  403f24:	4621      	mov	r1, r4
  403f26:	4628      	mov	r0, r5
  403f28:	f001 fc84 	bl	405834 <__swhatbuf_r>
  403f2c:	89a3      	ldrh	r3, [r4, #12]
  403f2e:	4318      	orrs	r0, r3
  403f30:	81a0      	strh	r0, [r4, #12]
  403f32:	2e00      	cmp	r6, #0
  403f34:	d132      	bne.n	403f9c <setvbuf+0xec>
  403f36:	9e00      	ldr	r6, [sp, #0]
  403f38:	4630      	mov	r0, r6
  403f3a:	f001 fcf3 	bl	405924 <malloc>
  403f3e:	4607      	mov	r7, r0
  403f40:	2800      	cmp	r0, #0
  403f42:	d06b      	beq.n	40401c <setvbuf+0x16c>
  403f44:	89a3      	ldrh	r3, [r4, #12]
  403f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403f4a:	81a3      	strh	r3, [r4, #12]
  403f4c:	e028      	b.n	403fa0 <setvbuf+0xf0>
  403f4e:	89a3      	ldrh	r3, [r4, #12]
  403f50:	0599      	lsls	r1, r3, #22
  403f52:	d4c7      	bmi.n	403ee4 <setvbuf+0x34>
  403f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403f56:	f001 fc69 	bl	40582c <__retarget_lock_acquire_recursive>
  403f5a:	e7c3      	b.n	403ee4 <setvbuf+0x34>
  403f5c:	2500      	movs	r5, #0
  403f5e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403f60:	2600      	movs	r6, #0
  403f62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403f66:	f043 0302 	orr.w	r3, r3, #2
  403f6a:	2001      	movs	r0, #1
  403f6c:	60a6      	str	r6, [r4, #8]
  403f6e:	07ce      	lsls	r6, r1, #31
  403f70:	81a3      	strh	r3, [r4, #12]
  403f72:	6022      	str	r2, [r4, #0]
  403f74:	6122      	str	r2, [r4, #16]
  403f76:	6160      	str	r0, [r4, #20]
  403f78:	d401      	bmi.n	403f7e <setvbuf+0xce>
  403f7a:	0598      	lsls	r0, r3, #22
  403f7c:	d53e      	bpl.n	403ffc <setvbuf+0x14c>
  403f7e:	4628      	mov	r0, r5
  403f80:	b003      	add	sp, #12
  403f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403f86:	6921      	ldr	r1, [r4, #16]
  403f88:	4628      	mov	r0, r5
  403f8a:	f001 f9b5 	bl	4052f8 <_free_r>
  403f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f92:	e7bd      	b.n	403f10 <setvbuf+0x60>
  403f94:	4628      	mov	r0, r5
  403f96:	f001 f889 	bl	4050ac <__sinit>
  403f9a:	e796      	b.n	403eca <setvbuf+0x1a>
  403f9c:	2f00      	cmp	r7, #0
  403f9e:	d0cb      	beq.n	403f38 <setvbuf+0x88>
  403fa0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403fa2:	2b00      	cmp	r3, #0
  403fa4:	d033      	beq.n	40400e <setvbuf+0x15e>
  403fa6:	9b00      	ldr	r3, [sp, #0]
  403fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403fac:	6027      	str	r7, [r4, #0]
  403fae:	429e      	cmp	r6, r3
  403fb0:	bf1c      	itt	ne
  403fb2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  403fb6:	81a2      	strhne	r2, [r4, #12]
  403fb8:	f1b8 0f01 	cmp.w	r8, #1
  403fbc:	bf04      	itt	eq
  403fbe:	f042 0201 	orreq.w	r2, r2, #1
  403fc2:	81a2      	strheq	r2, [r4, #12]
  403fc4:	b292      	uxth	r2, r2
  403fc6:	f012 0308 	ands.w	r3, r2, #8
  403fca:	6127      	str	r7, [r4, #16]
  403fcc:	6166      	str	r6, [r4, #20]
  403fce:	d00e      	beq.n	403fee <setvbuf+0x13e>
  403fd0:	07d1      	lsls	r1, r2, #31
  403fd2:	d51a      	bpl.n	40400a <setvbuf+0x15a>
  403fd4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403fd6:	4276      	negs	r6, r6
  403fd8:	2300      	movs	r3, #0
  403fda:	f015 0501 	ands.w	r5, r5, #1
  403fde:	61a6      	str	r6, [r4, #24]
  403fe0:	60a3      	str	r3, [r4, #8]
  403fe2:	d009      	beq.n	403ff8 <setvbuf+0x148>
  403fe4:	2500      	movs	r5, #0
  403fe6:	4628      	mov	r0, r5
  403fe8:	b003      	add	sp, #12
  403fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403fee:	60a3      	str	r3, [r4, #8]
  403ff0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403ff2:	f015 0501 	ands.w	r5, r5, #1
  403ff6:	d1f5      	bne.n	403fe4 <setvbuf+0x134>
  403ff8:	0593      	lsls	r3, r2, #22
  403ffa:	d4c0      	bmi.n	403f7e <setvbuf+0xce>
  403ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403ffe:	f001 fc17 	bl	405830 <__retarget_lock_release_recursive>
  404002:	4628      	mov	r0, r5
  404004:	b003      	add	sp, #12
  404006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40400a:	60a6      	str	r6, [r4, #8]
  40400c:	e7f0      	b.n	403ff0 <setvbuf+0x140>
  40400e:	4628      	mov	r0, r5
  404010:	f001 f84c 	bl	4050ac <__sinit>
  404014:	e7c7      	b.n	403fa6 <setvbuf+0xf6>
  404016:	f04f 35ff 	mov.w	r5, #4294967295
  40401a:	e7b0      	b.n	403f7e <setvbuf+0xce>
  40401c:	f8dd 9000 	ldr.w	r9, [sp]
  404020:	45b1      	cmp	r9, r6
  404022:	d004      	beq.n	40402e <setvbuf+0x17e>
  404024:	4648      	mov	r0, r9
  404026:	f001 fc7d 	bl	405924 <malloc>
  40402a:	4607      	mov	r7, r0
  40402c:	b920      	cbnz	r0, 404038 <setvbuf+0x188>
  40402e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404032:	f04f 35ff 	mov.w	r5, #4294967295
  404036:	e792      	b.n	403f5e <setvbuf+0xae>
  404038:	464e      	mov	r6, r9
  40403a:	e783      	b.n	403f44 <setvbuf+0x94>
  40403c:	204000f0 	.word	0x204000f0

00404040 <__sprint_r.part.0>:
  404040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404044:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404046:	049c      	lsls	r4, r3, #18
  404048:	4693      	mov	fp, r2
  40404a:	d52f      	bpl.n	4040ac <__sprint_r.part.0+0x6c>
  40404c:	6893      	ldr	r3, [r2, #8]
  40404e:	6812      	ldr	r2, [r2, #0]
  404050:	b353      	cbz	r3, 4040a8 <__sprint_r.part.0+0x68>
  404052:	460e      	mov	r6, r1
  404054:	4607      	mov	r7, r0
  404056:	f102 0908 	add.w	r9, r2, #8
  40405a:	e919 0420 	ldmdb	r9, {r5, sl}
  40405e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404062:	d017      	beq.n	404094 <__sprint_r.part.0+0x54>
  404064:	3d04      	subs	r5, #4
  404066:	2400      	movs	r4, #0
  404068:	e001      	b.n	40406e <__sprint_r.part.0+0x2e>
  40406a:	45a0      	cmp	r8, r4
  40406c:	d010      	beq.n	404090 <__sprint_r.part.0+0x50>
  40406e:	4632      	mov	r2, r6
  404070:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404074:	4638      	mov	r0, r7
  404076:	f001 f8bb 	bl	4051f0 <_fputwc_r>
  40407a:	1c43      	adds	r3, r0, #1
  40407c:	f104 0401 	add.w	r4, r4, #1
  404080:	d1f3      	bne.n	40406a <__sprint_r.part.0+0x2a>
  404082:	2300      	movs	r3, #0
  404084:	f8cb 3008 	str.w	r3, [fp, #8]
  404088:	f8cb 3004 	str.w	r3, [fp, #4]
  40408c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404090:	f8db 3008 	ldr.w	r3, [fp, #8]
  404094:	f02a 0a03 	bic.w	sl, sl, #3
  404098:	eba3 030a 	sub.w	r3, r3, sl
  40409c:	f8cb 3008 	str.w	r3, [fp, #8]
  4040a0:	f109 0908 	add.w	r9, r9, #8
  4040a4:	2b00      	cmp	r3, #0
  4040a6:	d1d8      	bne.n	40405a <__sprint_r.part.0+0x1a>
  4040a8:	2000      	movs	r0, #0
  4040aa:	e7ea      	b.n	404082 <__sprint_r.part.0+0x42>
  4040ac:	f001 fa0a 	bl	4054c4 <__sfvwrite_r>
  4040b0:	2300      	movs	r3, #0
  4040b2:	f8cb 3008 	str.w	r3, [fp, #8]
  4040b6:	f8cb 3004 	str.w	r3, [fp, #4]
  4040ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040be:	bf00      	nop

004040c0 <_vfiprintf_r>:
  4040c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4040c4:	b0ad      	sub	sp, #180	; 0xb4
  4040c6:	461d      	mov	r5, r3
  4040c8:	468b      	mov	fp, r1
  4040ca:	4690      	mov	r8, r2
  4040cc:	9307      	str	r3, [sp, #28]
  4040ce:	9006      	str	r0, [sp, #24]
  4040d0:	b118      	cbz	r0, 4040da <_vfiprintf_r+0x1a>
  4040d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4040d4:	2b00      	cmp	r3, #0
  4040d6:	f000 80f3 	beq.w	4042c0 <_vfiprintf_r+0x200>
  4040da:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4040de:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4040e2:	07df      	lsls	r7, r3, #31
  4040e4:	b281      	uxth	r1, r0
  4040e6:	d402      	bmi.n	4040ee <_vfiprintf_r+0x2e>
  4040e8:	058e      	lsls	r6, r1, #22
  4040ea:	f140 80fc 	bpl.w	4042e6 <_vfiprintf_r+0x226>
  4040ee:	048c      	lsls	r4, r1, #18
  4040f0:	d40a      	bmi.n	404108 <_vfiprintf_r+0x48>
  4040f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4040f6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4040fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4040fe:	f8ab 100c 	strh.w	r1, [fp, #12]
  404102:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404106:	b289      	uxth	r1, r1
  404108:	0708      	lsls	r0, r1, #28
  40410a:	f140 80b3 	bpl.w	404274 <_vfiprintf_r+0x1b4>
  40410e:	f8db 3010 	ldr.w	r3, [fp, #16]
  404112:	2b00      	cmp	r3, #0
  404114:	f000 80ae 	beq.w	404274 <_vfiprintf_r+0x1b4>
  404118:	f001 031a 	and.w	r3, r1, #26
  40411c:	2b0a      	cmp	r3, #10
  40411e:	f000 80b5 	beq.w	40428c <_vfiprintf_r+0x1cc>
  404122:	2300      	movs	r3, #0
  404124:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404128:	930b      	str	r3, [sp, #44]	; 0x2c
  40412a:	9311      	str	r3, [sp, #68]	; 0x44
  40412c:	9310      	str	r3, [sp, #64]	; 0x40
  40412e:	9303      	str	r3, [sp, #12]
  404130:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404134:	46ca      	mov	sl, r9
  404136:	f8cd b010 	str.w	fp, [sp, #16]
  40413a:	f898 3000 	ldrb.w	r3, [r8]
  40413e:	4644      	mov	r4, r8
  404140:	b1fb      	cbz	r3, 404182 <_vfiprintf_r+0xc2>
  404142:	2b25      	cmp	r3, #37	; 0x25
  404144:	d102      	bne.n	40414c <_vfiprintf_r+0x8c>
  404146:	e01c      	b.n	404182 <_vfiprintf_r+0xc2>
  404148:	2b25      	cmp	r3, #37	; 0x25
  40414a:	d003      	beq.n	404154 <_vfiprintf_r+0x94>
  40414c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404150:	2b00      	cmp	r3, #0
  404152:	d1f9      	bne.n	404148 <_vfiprintf_r+0x88>
  404154:	eba4 0508 	sub.w	r5, r4, r8
  404158:	b19d      	cbz	r5, 404182 <_vfiprintf_r+0xc2>
  40415a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40415c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40415e:	f8ca 8000 	str.w	r8, [sl]
  404162:	3301      	adds	r3, #1
  404164:	442a      	add	r2, r5
  404166:	2b07      	cmp	r3, #7
  404168:	f8ca 5004 	str.w	r5, [sl, #4]
  40416c:	9211      	str	r2, [sp, #68]	; 0x44
  40416e:	9310      	str	r3, [sp, #64]	; 0x40
  404170:	dd7a      	ble.n	404268 <_vfiprintf_r+0x1a8>
  404172:	2a00      	cmp	r2, #0
  404174:	f040 84b0 	bne.w	404ad8 <_vfiprintf_r+0xa18>
  404178:	9b03      	ldr	r3, [sp, #12]
  40417a:	9210      	str	r2, [sp, #64]	; 0x40
  40417c:	442b      	add	r3, r5
  40417e:	46ca      	mov	sl, r9
  404180:	9303      	str	r3, [sp, #12]
  404182:	7823      	ldrb	r3, [r4, #0]
  404184:	2b00      	cmp	r3, #0
  404186:	f000 83e0 	beq.w	40494a <_vfiprintf_r+0x88a>
  40418a:	2000      	movs	r0, #0
  40418c:	f04f 0300 	mov.w	r3, #0
  404190:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404194:	f104 0801 	add.w	r8, r4, #1
  404198:	7862      	ldrb	r2, [r4, #1]
  40419a:	4605      	mov	r5, r0
  40419c:	4606      	mov	r6, r0
  40419e:	4603      	mov	r3, r0
  4041a0:	f04f 34ff 	mov.w	r4, #4294967295
  4041a4:	f108 0801 	add.w	r8, r8, #1
  4041a8:	f1a2 0120 	sub.w	r1, r2, #32
  4041ac:	2958      	cmp	r1, #88	; 0x58
  4041ae:	f200 82de 	bhi.w	40476e <_vfiprintf_r+0x6ae>
  4041b2:	e8df f011 	tbh	[pc, r1, lsl #1]
  4041b6:	0221      	.short	0x0221
  4041b8:	02dc02dc 	.word	0x02dc02dc
  4041bc:	02dc0229 	.word	0x02dc0229
  4041c0:	02dc02dc 	.word	0x02dc02dc
  4041c4:	02dc02dc 	.word	0x02dc02dc
  4041c8:	028902dc 	.word	0x028902dc
  4041cc:	02dc0295 	.word	0x02dc0295
  4041d0:	02bd00a2 	.word	0x02bd00a2
  4041d4:	019f02dc 	.word	0x019f02dc
  4041d8:	01a401a4 	.word	0x01a401a4
  4041dc:	01a401a4 	.word	0x01a401a4
  4041e0:	01a401a4 	.word	0x01a401a4
  4041e4:	01a401a4 	.word	0x01a401a4
  4041e8:	02dc01a4 	.word	0x02dc01a4
  4041ec:	02dc02dc 	.word	0x02dc02dc
  4041f0:	02dc02dc 	.word	0x02dc02dc
  4041f4:	02dc02dc 	.word	0x02dc02dc
  4041f8:	02dc02dc 	.word	0x02dc02dc
  4041fc:	01b202dc 	.word	0x01b202dc
  404200:	02dc02dc 	.word	0x02dc02dc
  404204:	02dc02dc 	.word	0x02dc02dc
  404208:	02dc02dc 	.word	0x02dc02dc
  40420c:	02dc02dc 	.word	0x02dc02dc
  404210:	02dc02dc 	.word	0x02dc02dc
  404214:	02dc0197 	.word	0x02dc0197
  404218:	02dc02dc 	.word	0x02dc02dc
  40421c:	02dc02dc 	.word	0x02dc02dc
  404220:	02dc019b 	.word	0x02dc019b
  404224:	025302dc 	.word	0x025302dc
  404228:	02dc02dc 	.word	0x02dc02dc
  40422c:	02dc02dc 	.word	0x02dc02dc
  404230:	02dc02dc 	.word	0x02dc02dc
  404234:	02dc02dc 	.word	0x02dc02dc
  404238:	02dc02dc 	.word	0x02dc02dc
  40423c:	021b025a 	.word	0x021b025a
  404240:	02dc02dc 	.word	0x02dc02dc
  404244:	026e02dc 	.word	0x026e02dc
  404248:	02dc021b 	.word	0x02dc021b
  40424c:	027302dc 	.word	0x027302dc
  404250:	01f502dc 	.word	0x01f502dc
  404254:	02090182 	.word	0x02090182
  404258:	02dc02d7 	.word	0x02dc02d7
  40425c:	02dc029a 	.word	0x02dc029a
  404260:	02dc00a7 	.word	0x02dc00a7
  404264:	022e02dc 	.word	0x022e02dc
  404268:	f10a 0a08 	add.w	sl, sl, #8
  40426c:	9b03      	ldr	r3, [sp, #12]
  40426e:	442b      	add	r3, r5
  404270:	9303      	str	r3, [sp, #12]
  404272:	e786      	b.n	404182 <_vfiprintf_r+0xc2>
  404274:	4659      	mov	r1, fp
  404276:	9806      	ldr	r0, [sp, #24]
  404278:	f000 fdac 	bl	404dd4 <__swsetup_r>
  40427c:	bb18      	cbnz	r0, 4042c6 <_vfiprintf_r+0x206>
  40427e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404282:	f001 031a 	and.w	r3, r1, #26
  404286:	2b0a      	cmp	r3, #10
  404288:	f47f af4b 	bne.w	404122 <_vfiprintf_r+0x62>
  40428c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404290:	2b00      	cmp	r3, #0
  404292:	f6ff af46 	blt.w	404122 <_vfiprintf_r+0x62>
  404296:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40429a:	07db      	lsls	r3, r3, #31
  40429c:	d405      	bmi.n	4042aa <_vfiprintf_r+0x1ea>
  40429e:	058f      	lsls	r7, r1, #22
  4042a0:	d403      	bmi.n	4042aa <_vfiprintf_r+0x1ea>
  4042a2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4042a6:	f001 fac3 	bl	405830 <__retarget_lock_release_recursive>
  4042aa:	462b      	mov	r3, r5
  4042ac:	4642      	mov	r2, r8
  4042ae:	4659      	mov	r1, fp
  4042b0:	9806      	ldr	r0, [sp, #24]
  4042b2:	f000 fd4d 	bl	404d50 <__sbprintf>
  4042b6:	9003      	str	r0, [sp, #12]
  4042b8:	9803      	ldr	r0, [sp, #12]
  4042ba:	b02d      	add	sp, #180	; 0xb4
  4042bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042c0:	f000 fef4 	bl	4050ac <__sinit>
  4042c4:	e709      	b.n	4040da <_vfiprintf_r+0x1a>
  4042c6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4042ca:	07d9      	lsls	r1, r3, #31
  4042cc:	d404      	bmi.n	4042d8 <_vfiprintf_r+0x218>
  4042ce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4042d2:	059a      	lsls	r2, r3, #22
  4042d4:	f140 84aa 	bpl.w	404c2c <_vfiprintf_r+0xb6c>
  4042d8:	f04f 33ff 	mov.w	r3, #4294967295
  4042dc:	9303      	str	r3, [sp, #12]
  4042de:	9803      	ldr	r0, [sp, #12]
  4042e0:	b02d      	add	sp, #180	; 0xb4
  4042e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042e6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4042ea:	f001 fa9f 	bl	40582c <__retarget_lock_acquire_recursive>
  4042ee:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4042f2:	b281      	uxth	r1, r0
  4042f4:	e6fb      	b.n	4040ee <_vfiprintf_r+0x2e>
  4042f6:	4276      	negs	r6, r6
  4042f8:	9207      	str	r2, [sp, #28]
  4042fa:	f043 0304 	orr.w	r3, r3, #4
  4042fe:	f898 2000 	ldrb.w	r2, [r8]
  404302:	e74f      	b.n	4041a4 <_vfiprintf_r+0xe4>
  404304:	9608      	str	r6, [sp, #32]
  404306:	069e      	lsls	r6, r3, #26
  404308:	f100 8450 	bmi.w	404bac <_vfiprintf_r+0xaec>
  40430c:	9907      	ldr	r1, [sp, #28]
  40430e:	06dd      	lsls	r5, r3, #27
  404310:	460a      	mov	r2, r1
  404312:	f100 83ef 	bmi.w	404af4 <_vfiprintf_r+0xa34>
  404316:	0658      	lsls	r0, r3, #25
  404318:	f140 83ec 	bpl.w	404af4 <_vfiprintf_r+0xa34>
  40431c:	880e      	ldrh	r6, [r1, #0]
  40431e:	3104      	adds	r1, #4
  404320:	2700      	movs	r7, #0
  404322:	2201      	movs	r2, #1
  404324:	9107      	str	r1, [sp, #28]
  404326:	f04f 0100 	mov.w	r1, #0
  40432a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40432e:	2500      	movs	r5, #0
  404330:	1c61      	adds	r1, r4, #1
  404332:	f000 8116 	beq.w	404562 <_vfiprintf_r+0x4a2>
  404336:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40433a:	9102      	str	r1, [sp, #8]
  40433c:	ea56 0107 	orrs.w	r1, r6, r7
  404340:	f040 8114 	bne.w	40456c <_vfiprintf_r+0x4ac>
  404344:	2c00      	cmp	r4, #0
  404346:	f040 835c 	bne.w	404a02 <_vfiprintf_r+0x942>
  40434a:	2a00      	cmp	r2, #0
  40434c:	f040 83b7 	bne.w	404abe <_vfiprintf_r+0x9fe>
  404350:	f013 0301 	ands.w	r3, r3, #1
  404354:	9305      	str	r3, [sp, #20]
  404356:	f000 8457 	beq.w	404c08 <_vfiprintf_r+0xb48>
  40435a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40435e:	2330      	movs	r3, #48	; 0x30
  404360:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404364:	9b05      	ldr	r3, [sp, #20]
  404366:	42a3      	cmp	r3, r4
  404368:	bfb8      	it	lt
  40436a:	4623      	movlt	r3, r4
  40436c:	9301      	str	r3, [sp, #4]
  40436e:	b10d      	cbz	r5, 404374 <_vfiprintf_r+0x2b4>
  404370:	3301      	adds	r3, #1
  404372:	9301      	str	r3, [sp, #4]
  404374:	9b02      	ldr	r3, [sp, #8]
  404376:	f013 0302 	ands.w	r3, r3, #2
  40437a:	9309      	str	r3, [sp, #36]	; 0x24
  40437c:	d002      	beq.n	404384 <_vfiprintf_r+0x2c4>
  40437e:	9b01      	ldr	r3, [sp, #4]
  404380:	3302      	adds	r3, #2
  404382:	9301      	str	r3, [sp, #4]
  404384:	9b02      	ldr	r3, [sp, #8]
  404386:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40438a:	930a      	str	r3, [sp, #40]	; 0x28
  40438c:	f040 8217 	bne.w	4047be <_vfiprintf_r+0x6fe>
  404390:	9b08      	ldr	r3, [sp, #32]
  404392:	9a01      	ldr	r2, [sp, #4]
  404394:	1a9d      	subs	r5, r3, r2
  404396:	2d00      	cmp	r5, #0
  404398:	f340 8211 	ble.w	4047be <_vfiprintf_r+0x6fe>
  40439c:	2d10      	cmp	r5, #16
  40439e:	f340 8490 	ble.w	404cc2 <_vfiprintf_r+0xc02>
  4043a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4043a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4043a6:	4ec4      	ldr	r6, [pc, #784]	; (4046b8 <_vfiprintf_r+0x5f8>)
  4043a8:	46d6      	mov	lr, sl
  4043aa:	2710      	movs	r7, #16
  4043ac:	46a2      	mov	sl, r4
  4043ae:	4619      	mov	r1, r3
  4043b0:	9c06      	ldr	r4, [sp, #24]
  4043b2:	e007      	b.n	4043c4 <_vfiprintf_r+0x304>
  4043b4:	f101 0c02 	add.w	ip, r1, #2
  4043b8:	f10e 0e08 	add.w	lr, lr, #8
  4043bc:	4601      	mov	r1, r0
  4043be:	3d10      	subs	r5, #16
  4043c0:	2d10      	cmp	r5, #16
  4043c2:	dd11      	ble.n	4043e8 <_vfiprintf_r+0x328>
  4043c4:	1c48      	adds	r0, r1, #1
  4043c6:	3210      	adds	r2, #16
  4043c8:	2807      	cmp	r0, #7
  4043ca:	9211      	str	r2, [sp, #68]	; 0x44
  4043cc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4043d0:	9010      	str	r0, [sp, #64]	; 0x40
  4043d2:	ddef      	ble.n	4043b4 <_vfiprintf_r+0x2f4>
  4043d4:	2a00      	cmp	r2, #0
  4043d6:	f040 81e4 	bne.w	4047a2 <_vfiprintf_r+0x6e2>
  4043da:	3d10      	subs	r5, #16
  4043dc:	2d10      	cmp	r5, #16
  4043de:	4611      	mov	r1, r2
  4043e0:	f04f 0c01 	mov.w	ip, #1
  4043e4:	46ce      	mov	lr, r9
  4043e6:	dced      	bgt.n	4043c4 <_vfiprintf_r+0x304>
  4043e8:	4654      	mov	r4, sl
  4043ea:	4661      	mov	r1, ip
  4043ec:	46f2      	mov	sl, lr
  4043ee:	442a      	add	r2, r5
  4043f0:	2907      	cmp	r1, #7
  4043f2:	9211      	str	r2, [sp, #68]	; 0x44
  4043f4:	f8ca 6000 	str.w	r6, [sl]
  4043f8:	f8ca 5004 	str.w	r5, [sl, #4]
  4043fc:	9110      	str	r1, [sp, #64]	; 0x40
  4043fe:	f300 82ec 	bgt.w	4049da <_vfiprintf_r+0x91a>
  404402:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404406:	f10a 0a08 	add.w	sl, sl, #8
  40440a:	1c48      	adds	r0, r1, #1
  40440c:	2d00      	cmp	r5, #0
  40440e:	f040 81de 	bne.w	4047ce <_vfiprintf_r+0x70e>
  404412:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404414:	2b00      	cmp	r3, #0
  404416:	f000 81f8 	beq.w	40480a <_vfiprintf_r+0x74a>
  40441a:	3202      	adds	r2, #2
  40441c:	a90e      	add	r1, sp, #56	; 0x38
  40441e:	2302      	movs	r3, #2
  404420:	2807      	cmp	r0, #7
  404422:	9211      	str	r2, [sp, #68]	; 0x44
  404424:	9010      	str	r0, [sp, #64]	; 0x40
  404426:	e88a 000a 	stmia.w	sl, {r1, r3}
  40442a:	f340 81ea 	ble.w	404802 <_vfiprintf_r+0x742>
  40442e:	2a00      	cmp	r2, #0
  404430:	f040 838c 	bne.w	404b4c <_vfiprintf_r+0xa8c>
  404434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404436:	2b80      	cmp	r3, #128	; 0x80
  404438:	f04f 0001 	mov.w	r0, #1
  40443c:	4611      	mov	r1, r2
  40443e:	46ca      	mov	sl, r9
  404440:	f040 81e7 	bne.w	404812 <_vfiprintf_r+0x752>
  404444:	9b08      	ldr	r3, [sp, #32]
  404446:	9d01      	ldr	r5, [sp, #4]
  404448:	1b5e      	subs	r6, r3, r5
  40444a:	2e00      	cmp	r6, #0
  40444c:	f340 81e1 	ble.w	404812 <_vfiprintf_r+0x752>
  404450:	2e10      	cmp	r6, #16
  404452:	4d9a      	ldr	r5, [pc, #616]	; (4046bc <_vfiprintf_r+0x5fc>)
  404454:	f340 8450 	ble.w	404cf8 <_vfiprintf_r+0xc38>
  404458:	46d4      	mov	ip, sl
  40445a:	2710      	movs	r7, #16
  40445c:	46a2      	mov	sl, r4
  40445e:	9c06      	ldr	r4, [sp, #24]
  404460:	e007      	b.n	404472 <_vfiprintf_r+0x3b2>
  404462:	f101 0e02 	add.w	lr, r1, #2
  404466:	f10c 0c08 	add.w	ip, ip, #8
  40446a:	4601      	mov	r1, r0
  40446c:	3e10      	subs	r6, #16
  40446e:	2e10      	cmp	r6, #16
  404470:	dd11      	ble.n	404496 <_vfiprintf_r+0x3d6>
  404472:	1c48      	adds	r0, r1, #1
  404474:	3210      	adds	r2, #16
  404476:	2807      	cmp	r0, #7
  404478:	9211      	str	r2, [sp, #68]	; 0x44
  40447a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40447e:	9010      	str	r0, [sp, #64]	; 0x40
  404480:	ddef      	ble.n	404462 <_vfiprintf_r+0x3a2>
  404482:	2a00      	cmp	r2, #0
  404484:	f040 829d 	bne.w	4049c2 <_vfiprintf_r+0x902>
  404488:	3e10      	subs	r6, #16
  40448a:	2e10      	cmp	r6, #16
  40448c:	f04f 0e01 	mov.w	lr, #1
  404490:	4611      	mov	r1, r2
  404492:	46cc      	mov	ip, r9
  404494:	dced      	bgt.n	404472 <_vfiprintf_r+0x3b2>
  404496:	4654      	mov	r4, sl
  404498:	46e2      	mov	sl, ip
  40449a:	4432      	add	r2, r6
  40449c:	f1be 0f07 	cmp.w	lr, #7
  4044a0:	9211      	str	r2, [sp, #68]	; 0x44
  4044a2:	e88a 0060 	stmia.w	sl, {r5, r6}
  4044a6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4044aa:	f300 8369 	bgt.w	404b80 <_vfiprintf_r+0xac0>
  4044ae:	f10a 0a08 	add.w	sl, sl, #8
  4044b2:	f10e 0001 	add.w	r0, lr, #1
  4044b6:	4671      	mov	r1, lr
  4044b8:	e1ab      	b.n	404812 <_vfiprintf_r+0x752>
  4044ba:	9608      	str	r6, [sp, #32]
  4044bc:	f013 0220 	ands.w	r2, r3, #32
  4044c0:	f040 838c 	bne.w	404bdc <_vfiprintf_r+0xb1c>
  4044c4:	f013 0110 	ands.w	r1, r3, #16
  4044c8:	f040 831a 	bne.w	404b00 <_vfiprintf_r+0xa40>
  4044cc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4044d0:	f000 8316 	beq.w	404b00 <_vfiprintf_r+0xa40>
  4044d4:	9807      	ldr	r0, [sp, #28]
  4044d6:	460a      	mov	r2, r1
  4044d8:	4601      	mov	r1, r0
  4044da:	3104      	adds	r1, #4
  4044dc:	8806      	ldrh	r6, [r0, #0]
  4044de:	9107      	str	r1, [sp, #28]
  4044e0:	2700      	movs	r7, #0
  4044e2:	e720      	b.n	404326 <_vfiprintf_r+0x266>
  4044e4:	9608      	str	r6, [sp, #32]
  4044e6:	f043 0310 	orr.w	r3, r3, #16
  4044ea:	e7e7      	b.n	4044bc <_vfiprintf_r+0x3fc>
  4044ec:	9608      	str	r6, [sp, #32]
  4044ee:	f043 0310 	orr.w	r3, r3, #16
  4044f2:	e708      	b.n	404306 <_vfiprintf_r+0x246>
  4044f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4044f8:	f898 2000 	ldrb.w	r2, [r8]
  4044fc:	e652      	b.n	4041a4 <_vfiprintf_r+0xe4>
  4044fe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404502:	2600      	movs	r6, #0
  404504:	f818 2b01 	ldrb.w	r2, [r8], #1
  404508:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40450c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404510:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404514:	2909      	cmp	r1, #9
  404516:	d9f5      	bls.n	404504 <_vfiprintf_r+0x444>
  404518:	e646      	b.n	4041a8 <_vfiprintf_r+0xe8>
  40451a:	9608      	str	r6, [sp, #32]
  40451c:	2800      	cmp	r0, #0
  40451e:	f040 8408 	bne.w	404d32 <_vfiprintf_r+0xc72>
  404522:	f043 0310 	orr.w	r3, r3, #16
  404526:	069e      	lsls	r6, r3, #26
  404528:	f100 834c 	bmi.w	404bc4 <_vfiprintf_r+0xb04>
  40452c:	06dd      	lsls	r5, r3, #27
  40452e:	f100 82f3 	bmi.w	404b18 <_vfiprintf_r+0xa58>
  404532:	0658      	lsls	r0, r3, #25
  404534:	f140 82f0 	bpl.w	404b18 <_vfiprintf_r+0xa58>
  404538:	9d07      	ldr	r5, [sp, #28]
  40453a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40453e:	462a      	mov	r2, r5
  404540:	17f7      	asrs	r7, r6, #31
  404542:	3204      	adds	r2, #4
  404544:	4630      	mov	r0, r6
  404546:	4639      	mov	r1, r7
  404548:	9207      	str	r2, [sp, #28]
  40454a:	2800      	cmp	r0, #0
  40454c:	f171 0200 	sbcs.w	r2, r1, #0
  404550:	f2c0 835d 	blt.w	404c0e <_vfiprintf_r+0xb4e>
  404554:	1c61      	adds	r1, r4, #1
  404556:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40455a:	f04f 0201 	mov.w	r2, #1
  40455e:	f47f aeea 	bne.w	404336 <_vfiprintf_r+0x276>
  404562:	ea56 0107 	orrs.w	r1, r6, r7
  404566:	f000 824d 	beq.w	404a04 <_vfiprintf_r+0x944>
  40456a:	9302      	str	r3, [sp, #8]
  40456c:	2a01      	cmp	r2, #1
  40456e:	f000 828c 	beq.w	404a8a <_vfiprintf_r+0x9ca>
  404572:	2a02      	cmp	r2, #2
  404574:	f040 825c 	bne.w	404a30 <_vfiprintf_r+0x970>
  404578:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40457a:	46cb      	mov	fp, r9
  40457c:	0933      	lsrs	r3, r6, #4
  40457e:	f006 010f 	and.w	r1, r6, #15
  404582:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404586:	093a      	lsrs	r2, r7, #4
  404588:	461e      	mov	r6, r3
  40458a:	4617      	mov	r7, r2
  40458c:	5c43      	ldrb	r3, [r0, r1]
  40458e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  404592:	ea56 0307 	orrs.w	r3, r6, r7
  404596:	d1f1      	bne.n	40457c <_vfiprintf_r+0x4bc>
  404598:	eba9 030b 	sub.w	r3, r9, fp
  40459c:	9305      	str	r3, [sp, #20]
  40459e:	e6e1      	b.n	404364 <_vfiprintf_r+0x2a4>
  4045a0:	2800      	cmp	r0, #0
  4045a2:	f040 83c0 	bne.w	404d26 <_vfiprintf_r+0xc66>
  4045a6:	0699      	lsls	r1, r3, #26
  4045a8:	f100 8367 	bmi.w	404c7a <_vfiprintf_r+0xbba>
  4045ac:	06da      	lsls	r2, r3, #27
  4045ae:	f100 80f1 	bmi.w	404794 <_vfiprintf_r+0x6d4>
  4045b2:	065b      	lsls	r3, r3, #25
  4045b4:	f140 80ee 	bpl.w	404794 <_vfiprintf_r+0x6d4>
  4045b8:	9a07      	ldr	r2, [sp, #28]
  4045ba:	6813      	ldr	r3, [r2, #0]
  4045bc:	3204      	adds	r2, #4
  4045be:	9207      	str	r2, [sp, #28]
  4045c0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4045c4:	801a      	strh	r2, [r3, #0]
  4045c6:	e5b8      	b.n	40413a <_vfiprintf_r+0x7a>
  4045c8:	9807      	ldr	r0, [sp, #28]
  4045ca:	4a3d      	ldr	r2, [pc, #244]	; (4046c0 <_vfiprintf_r+0x600>)
  4045cc:	9608      	str	r6, [sp, #32]
  4045ce:	920b      	str	r2, [sp, #44]	; 0x2c
  4045d0:	6806      	ldr	r6, [r0, #0]
  4045d2:	2278      	movs	r2, #120	; 0x78
  4045d4:	2130      	movs	r1, #48	; 0x30
  4045d6:	3004      	adds	r0, #4
  4045d8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4045dc:	f043 0302 	orr.w	r3, r3, #2
  4045e0:	9007      	str	r0, [sp, #28]
  4045e2:	2700      	movs	r7, #0
  4045e4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4045e8:	2202      	movs	r2, #2
  4045ea:	e69c      	b.n	404326 <_vfiprintf_r+0x266>
  4045ec:	9608      	str	r6, [sp, #32]
  4045ee:	2800      	cmp	r0, #0
  4045f0:	d099      	beq.n	404526 <_vfiprintf_r+0x466>
  4045f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4045f6:	e796      	b.n	404526 <_vfiprintf_r+0x466>
  4045f8:	f898 2000 	ldrb.w	r2, [r8]
  4045fc:	2d00      	cmp	r5, #0
  4045fe:	f47f add1 	bne.w	4041a4 <_vfiprintf_r+0xe4>
  404602:	2001      	movs	r0, #1
  404604:	2520      	movs	r5, #32
  404606:	e5cd      	b.n	4041a4 <_vfiprintf_r+0xe4>
  404608:	f043 0301 	orr.w	r3, r3, #1
  40460c:	f898 2000 	ldrb.w	r2, [r8]
  404610:	e5c8      	b.n	4041a4 <_vfiprintf_r+0xe4>
  404612:	9608      	str	r6, [sp, #32]
  404614:	2800      	cmp	r0, #0
  404616:	f040 8393 	bne.w	404d40 <_vfiprintf_r+0xc80>
  40461a:	4929      	ldr	r1, [pc, #164]	; (4046c0 <_vfiprintf_r+0x600>)
  40461c:	910b      	str	r1, [sp, #44]	; 0x2c
  40461e:	069f      	lsls	r7, r3, #26
  404620:	f100 82e8 	bmi.w	404bf4 <_vfiprintf_r+0xb34>
  404624:	9807      	ldr	r0, [sp, #28]
  404626:	06de      	lsls	r6, r3, #27
  404628:	4601      	mov	r1, r0
  40462a:	f100 8270 	bmi.w	404b0e <_vfiprintf_r+0xa4e>
  40462e:	065d      	lsls	r5, r3, #25
  404630:	f140 826d 	bpl.w	404b0e <_vfiprintf_r+0xa4e>
  404634:	3104      	adds	r1, #4
  404636:	8806      	ldrh	r6, [r0, #0]
  404638:	9107      	str	r1, [sp, #28]
  40463a:	2700      	movs	r7, #0
  40463c:	07d8      	lsls	r0, r3, #31
  40463e:	f140 8222 	bpl.w	404a86 <_vfiprintf_r+0x9c6>
  404642:	ea56 0107 	orrs.w	r1, r6, r7
  404646:	f000 821e 	beq.w	404a86 <_vfiprintf_r+0x9c6>
  40464a:	2130      	movs	r1, #48	; 0x30
  40464c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404650:	f043 0302 	orr.w	r3, r3, #2
  404654:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404658:	2202      	movs	r2, #2
  40465a:	e664      	b.n	404326 <_vfiprintf_r+0x266>
  40465c:	9608      	str	r6, [sp, #32]
  40465e:	2800      	cmp	r0, #0
  404660:	f040 836b 	bne.w	404d3a <_vfiprintf_r+0xc7a>
  404664:	4917      	ldr	r1, [pc, #92]	; (4046c4 <_vfiprintf_r+0x604>)
  404666:	910b      	str	r1, [sp, #44]	; 0x2c
  404668:	e7d9      	b.n	40461e <_vfiprintf_r+0x55e>
  40466a:	9907      	ldr	r1, [sp, #28]
  40466c:	9608      	str	r6, [sp, #32]
  40466e:	680a      	ldr	r2, [r1, #0]
  404670:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404674:	f04f 0000 	mov.w	r0, #0
  404678:	460a      	mov	r2, r1
  40467a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40467e:	3204      	adds	r2, #4
  404680:	2001      	movs	r0, #1
  404682:	9001      	str	r0, [sp, #4]
  404684:	9207      	str	r2, [sp, #28]
  404686:	9005      	str	r0, [sp, #20]
  404688:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40468c:	9302      	str	r3, [sp, #8]
  40468e:	2400      	movs	r4, #0
  404690:	e670      	b.n	404374 <_vfiprintf_r+0x2b4>
  404692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404696:	f898 2000 	ldrb.w	r2, [r8]
  40469a:	e583      	b.n	4041a4 <_vfiprintf_r+0xe4>
  40469c:	f898 2000 	ldrb.w	r2, [r8]
  4046a0:	2a6c      	cmp	r2, #108	; 0x6c
  4046a2:	bf03      	ittte	eq
  4046a4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4046a8:	f043 0320 	orreq.w	r3, r3, #32
  4046ac:	f108 0801 	addeq.w	r8, r8, #1
  4046b0:	f043 0310 	orrne.w	r3, r3, #16
  4046b4:	e576      	b.n	4041a4 <_vfiprintf_r+0xe4>
  4046b6:	bf00      	nop
  4046b8:	00406e70 	.word	0x00406e70
  4046bc:	00406e80 	.word	0x00406e80
  4046c0:	00406e54 	.word	0x00406e54
  4046c4:	00406e40 	.word	0x00406e40
  4046c8:	9907      	ldr	r1, [sp, #28]
  4046ca:	680e      	ldr	r6, [r1, #0]
  4046cc:	460a      	mov	r2, r1
  4046ce:	2e00      	cmp	r6, #0
  4046d0:	f102 0204 	add.w	r2, r2, #4
  4046d4:	f6ff ae0f 	blt.w	4042f6 <_vfiprintf_r+0x236>
  4046d8:	9207      	str	r2, [sp, #28]
  4046da:	f898 2000 	ldrb.w	r2, [r8]
  4046de:	e561      	b.n	4041a4 <_vfiprintf_r+0xe4>
  4046e0:	f898 2000 	ldrb.w	r2, [r8]
  4046e4:	2001      	movs	r0, #1
  4046e6:	252b      	movs	r5, #43	; 0x2b
  4046e8:	e55c      	b.n	4041a4 <_vfiprintf_r+0xe4>
  4046ea:	9907      	ldr	r1, [sp, #28]
  4046ec:	9608      	str	r6, [sp, #32]
  4046ee:	f8d1 b000 	ldr.w	fp, [r1]
  4046f2:	f04f 0200 	mov.w	r2, #0
  4046f6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4046fa:	1d0e      	adds	r6, r1, #4
  4046fc:	f1bb 0f00 	cmp.w	fp, #0
  404700:	f000 82e5 	beq.w	404cce <_vfiprintf_r+0xc0e>
  404704:	1c67      	adds	r7, r4, #1
  404706:	f000 82c4 	beq.w	404c92 <_vfiprintf_r+0xbd2>
  40470a:	4622      	mov	r2, r4
  40470c:	2100      	movs	r1, #0
  40470e:	4658      	mov	r0, fp
  404710:	9301      	str	r3, [sp, #4]
  404712:	f001 fbd5 	bl	405ec0 <memchr>
  404716:	9b01      	ldr	r3, [sp, #4]
  404718:	2800      	cmp	r0, #0
  40471a:	f000 82e5 	beq.w	404ce8 <_vfiprintf_r+0xc28>
  40471e:	eba0 020b 	sub.w	r2, r0, fp
  404722:	9205      	str	r2, [sp, #20]
  404724:	9607      	str	r6, [sp, #28]
  404726:	9302      	str	r3, [sp, #8]
  404728:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40472c:	2400      	movs	r4, #0
  40472e:	e619      	b.n	404364 <_vfiprintf_r+0x2a4>
  404730:	f898 2000 	ldrb.w	r2, [r8]
  404734:	2a2a      	cmp	r2, #42	; 0x2a
  404736:	f108 0701 	add.w	r7, r8, #1
  40473a:	f000 82e9 	beq.w	404d10 <_vfiprintf_r+0xc50>
  40473e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404742:	2909      	cmp	r1, #9
  404744:	46b8      	mov	r8, r7
  404746:	f04f 0400 	mov.w	r4, #0
  40474a:	f63f ad2d 	bhi.w	4041a8 <_vfiprintf_r+0xe8>
  40474e:	f818 2b01 	ldrb.w	r2, [r8], #1
  404752:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404756:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40475a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40475e:	2909      	cmp	r1, #9
  404760:	d9f5      	bls.n	40474e <_vfiprintf_r+0x68e>
  404762:	e521      	b.n	4041a8 <_vfiprintf_r+0xe8>
  404764:	f043 0320 	orr.w	r3, r3, #32
  404768:	f898 2000 	ldrb.w	r2, [r8]
  40476c:	e51a      	b.n	4041a4 <_vfiprintf_r+0xe4>
  40476e:	9608      	str	r6, [sp, #32]
  404770:	2800      	cmp	r0, #0
  404772:	f040 82db 	bne.w	404d2c <_vfiprintf_r+0xc6c>
  404776:	2a00      	cmp	r2, #0
  404778:	f000 80e7 	beq.w	40494a <_vfiprintf_r+0x88a>
  40477c:	2101      	movs	r1, #1
  40477e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404782:	f04f 0200 	mov.w	r2, #0
  404786:	9101      	str	r1, [sp, #4]
  404788:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40478c:	9105      	str	r1, [sp, #20]
  40478e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404792:	e77b      	b.n	40468c <_vfiprintf_r+0x5cc>
  404794:	9a07      	ldr	r2, [sp, #28]
  404796:	6813      	ldr	r3, [r2, #0]
  404798:	3204      	adds	r2, #4
  40479a:	9207      	str	r2, [sp, #28]
  40479c:	9a03      	ldr	r2, [sp, #12]
  40479e:	601a      	str	r2, [r3, #0]
  4047a0:	e4cb      	b.n	40413a <_vfiprintf_r+0x7a>
  4047a2:	aa0f      	add	r2, sp, #60	; 0x3c
  4047a4:	9904      	ldr	r1, [sp, #16]
  4047a6:	4620      	mov	r0, r4
  4047a8:	f7ff fc4a 	bl	404040 <__sprint_r.part.0>
  4047ac:	2800      	cmp	r0, #0
  4047ae:	f040 8139 	bne.w	404a24 <_vfiprintf_r+0x964>
  4047b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4047b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4047b6:	f101 0c01 	add.w	ip, r1, #1
  4047ba:	46ce      	mov	lr, r9
  4047bc:	e5ff      	b.n	4043be <_vfiprintf_r+0x2fe>
  4047be:	9910      	ldr	r1, [sp, #64]	; 0x40
  4047c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4047c2:	1c48      	adds	r0, r1, #1
  4047c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4047c8:	2d00      	cmp	r5, #0
  4047ca:	f43f ae22 	beq.w	404412 <_vfiprintf_r+0x352>
  4047ce:	3201      	adds	r2, #1
  4047d0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4047d4:	2101      	movs	r1, #1
  4047d6:	2807      	cmp	r0, #7
  4047d8:	9211      	str	r2, [sp, #68]	; 0x44
  4047da:	9010      	str	r0, [sp, #64]	; 0x40
  4047dc:	f8ca 5000 	str.w	r5, [sl]
  4047e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4047e4:	f340 8108 	ble.w	4049f8 <_vfiprintf_r+0x938>
  4047e8:	2a00      	cmp	r2, #0
  4047ea:	f040 81bc 	bne.w	404b66 <_vfiprintf_r+0xaa6>
  4047ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4047f0:	2b00      	cmp	r3, #0
  4047f2:	f43f ae1f 	beq.w	404434 <_vfiprintf_r+0x374>
  4047f6:	ab0e      	add	r3, sp, #56	; 0x38
  4047f8:	2202      	movs	r2, #2
  4047fa:	4608      	mov	r0, r1
  4047fc:	931c      	str	r3, [sp, #112]	; 0x70
  4047fe:	921d      	str	r2, [sp, #116]	; 0x74
  404800:	46ca      	mov	sl, r9
  404802:	4601      	mov	r1, r0
  404804:	f10a 0a08 	add.w	sl, sl, #8
  404808:	3001      	adds	r0, #1
  40480a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40480c:	2b80      	cmp	r3, #128	; 0x80
  40480e:	f43f ae19 	beq.w	404444 <_vfiprintf_r+0x384>
  404812:	9b05      	ldr	r3, [sp, #20]
  404814:	1ae4      	subs	r4, r4, r3
  404816:	2c00      	cmp	r4, #0
  404818:	dd2e      	ble.n	404878 <_vfiprintf_r+0x7b8>
  40481a:	2c10      	cmp	r4, #16
  40481c:	4db3      	ldr	r5, [pc, #716]	; (404aec <_vfiprintf_r+0xa2c>)
  40481e:	dd1e      	ble.n	40485e <_vfiprintf_r+0x79e>
  404820:	46d6      	mov	lr, sl
  404822:	2610      	movs	r6, #16
  404824:	9f06      	ldr	r7, [sp, #24]
  404826:	f8dd a010 	ldr.w	sl, [sp, #16]
  40482a:	e006      	b.n	40483a <_vfiprintf_r+0x77a>
  40482c:	1c88      	adds	r0, r1, #2
  40482e:	f10e 0e08 	add.w	lr, lr, #8
  404832:	4619      	mov	r1, r3
  404834:	3c10      	subs	r4, #16
  404836:	2c10      	cmp	r4, #16
  404838:	dd10      	ble.n	40485c <_vfiprintf_r+0x79c>
  40483a:	1c4b      	adds	r3, r1, #1
  40483c:	3210      	adds	r2, #16
  40483e:	2b07      	cmp	r3, #7
  404840:	9211      	str	r2, [sp, #68]	; 0x44
  404842:	e88e 0060 	stmia.w	lr, {r5, r6}
  404846:	9310      	str	r3, [sp, #64]	; 0x40
  404848:	ddf0      	ble.n	40482c <_vfiprintf_r+0x76c>
  40484a:	2a00      	cmp	r2, #0
  40484c:	d165      	bne.n	40491a <_vfiprintf_r+0x85a>
  40484e:	3c10      	subs	r4, #16
  404850:	2c10      	cmp	r4, #16
  404852:	f04f 0001 	mov.w	r0, #1
  404856:	4611      	mov	r1, r2
  404858:	46ce      	mov	lr, r9
  40485a:	dcee      	bgt.n	40483a <_vfiprintf_r+0x77a>
  40485c:	46f2      	mov	sl, lr
  40485e:	4422      	add	r2, r4
  404860:	2807      	cmp	r0, #7
  404862:	9211      	str	r2, [sp, #68]	; 0x44
  404864:	f8ca 5000 	str.w	r5, [sl]
  404868:	f8ca 4004 	str.w	r4, [sl, #4]
  40486c:	9010      	str	r0, [sp, #64]	; 0x40
  40486e:	f300 8085 	bgt.w	40497c <_vfiprintf_r+0x8bc>
  404872:	f10a 0a08 	add.w	sl, sl, #8
  404876:	3001      	adds	r0, #1
  404878:	9905      	ldr	r1, [sp, #20]
  40487a:	f8ca b000 	str.w	fp, [sl]
  40487e:	440a      	add	r2, r1
  404880:	2807      	cmp	r0, #7
  404882:	9211      	str	r2, [sp, #68]	; 0x44
  404884:	f8ca 1004 	str.w	r1, [sl, #4]
  404888:	9010      	str	r0, [sp, #64]	; 0x40
  40488a:	f340 8082 	ble.w	404992 <_vfiprintf_r+0x8d2>
  40488e:	2a00      	cmp	r2, #0
  404890:	f040 8118 	bne.w	404ac4 <_vfiprintf_r+0xa04>
  404894:	9b02      	ldr	r3, [sp, #8]
  404896:	9210      	str	r2, [sp, #64]	; 0x40
  404898:	0758      	lsls	r0, r3, #29
  40489a:	d535      	bpl.n	404908 <_vfiprintf_r+0x848>
  40489c:	9b08      	ldr	r3, [sp, #32]
  40489e:	9901      	ldr	r1, [sp, #4]
  4048a0:	1a5c      	subs	r4, r3, r1
  4048a2:	2c00      	cmp	r4, #0
  4048a4:	f340 80e7 	ble.w	404a76 <_vfiprintf_r+0x9b6>
  4048a8:	46ca      	mov	sl, r9
  4048aa:	2c10      	cmp	r4, #16
  4048ac:	f340 8218 	ble.w	404ce0 <_vfiprintf_r+0xc20>
  4048b0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4048b2:	4e8f      	ldr	r6, [pc, #572]	; (404af0 <_vfiprintf_r+0xa30>)
  4048b4:	9f06      	ldr	r7, [sp, #24]
  4048b6:	f8dd b010 	ldr.w	fp, [sp, #16]
  4048ba:	2510      	movs	r5, #16
  4048bc:	e006      	b.n	4048cc <_vfiprintf_r+0x80c>
  4048be:	1c88      	adds	r0, r1, #2
  4048c0:	f10a 0a08 	add.w	sl, sl, #8
  4048c4:	4619      	mov	r1, r3
  4048c6:	3c10      	subs	r4, #16
  4048c8:	2c10      	cmp	r4, #16
  4048ca:	dd11      	ble.n	4048f0 <_vfiprintf_r+0x830>
  4048cc:	1c4b      	adds	r3, r1, #1
  4048ce:	3210      	adds	r2, #16
  4048d0:	2b07      	cmp	r3, #7
  4048d2:	9211      	str	r2, [sp, #68]	; 0x44
  4048d4:	f8ca 6000 	str.w	r6, [sl]
  4048d8:	f8ca 5004 	str.w	r5, [sl, #4]
  4048dc:	9310      	str	r3, [sp, #64]	; 0x40
  4048de:	ddee      	ble.n	4048be <_vfiprintf_r+0x7fe>
  4048e0:	bb42      	cbnz	r2, 404934 <_vfiprintf_r+0x874>
  4048e2:	3c10      	subs	r4, #16
  4048e4:	2c10      	cmp	r4, #16
  4048e6:	f04f 0001 	mov.w	r0, #1
  4048ea:	4611      	mov	r1, r2
  4048ec:	46ca      	mov	sl, r9
  4048ee:	dced      	bgt.n	4048cc <_vfiprintf_r+0x80c>
  4048f0:	4422      	add	r2, r4
  4048f2:	2807      	cmp	r0, #7
  4048f4:	9211      	str	r2, [sp, #68]	; 0x44
  4048f6:	f8ca 6000 	str.w	r6, [sl]
  4048fa:	f8ca 4004 	str.w	r4, [sl, #4]
  4048fe:	9010      	str	r0, [sp, #64]	; 0x40
  404900:	dd51      	ble.n	4049a6 <_vfiprintf_r+0x8e6>
  404902:	2a00      	cmp	r2, #0
  404904:	f040 819b 	bne.w	404c3e <_vfiprintf_r+0xb7e>
  404908:	9b03      	ldr	r3, [sp, #12]
  40490a:	9a08      	ldr	r2, [sp, #32]
  40490c:	9901      	ldr	r1, [sp, #4]
  40490e:	428a      	cmp	r2, r1
  404910:	bfac      	ite	ge
  404912:	189b      	addge	r3, r3, r2
  404914:	185b      	addlt	r3, r3, r1
  404916:	9303      	str	r3, [sp, #12]
  404918:	e04e      	b.n	4049b8 <_vfiprintf_r+0x8f8>
  40491a:	aa0f      	add	r2, sp, #60	; 0x3c
  40491c:	4651      	mov	r1, sl
  40491e:	4638      	mov	r0, r7
  404920:	f7ff fb8e 	bl	404040 <__sprint_r.part.0>
  404924:	2800      	cmp	r0, #0
  404926:	f040 813f 	bne.w	404ba8 <_vfiprintf_r+0xae8>
  40492a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40492c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40492e:	1c48      	adds	r0, r1, #1
  404930:	46ce      	mov	lr, r9
  404932:	e77f      	b.n	404834 <_vfiprintf_r+0x774>
  404934:	aa0f      	add	r2, sp, #60	; 0x3c
  404936:	4659      	mov	r1, fp
  404938:	4638      	mov	r0, r7
  40493a:	f7ff fb81 	bl	404040 <__sprint_r.part.0>
  40493e:	b960      	cbnz	r0, 40495a <_vfiprintf_r+0x89a>
  404940:	9910      	ldr	r1, [sp, #64]	; 0x40
  404942:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404944:	1c48      	adds	r0, r1, #1
  404946:	46ca      	mov	sl, r9
  404948:	e7bd      	b.n	4048c6 <_vfiprintf_r+0x806>
  40494a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40494c:	f8dd b010 	ldr.w	fp, [sp, #16]
  404950:	2b00      	cmp	r3, #0
  404952:	f040 81d4 	bne.w	404cfe <_vfiprintf_r+0xc3e>
  404956:	2300      	movs	r3, #0
  404958:	9310      	str	r3, [sp, #64]	; 0x40
  40495a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40495e:	f013 0f01 	tst.w	r3, #1
  404962:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404966:	d102      	bne.n	40496e <_vfiprintf_r+0x8ae>
  404968:	059a      	lsls	r2, r3, #22
  40496a:	f140 80de 	bpl.w	404b2a <_vfiprintf_r+0xa6a>
  40496e:	065b      	lsls	r3, r3, #25
  404970:	f53f acb2 	bmi.w	4042d8 <_vfiprintf_r+0x218>
  404974:	9803      	ldr	r0, [sp, #12]
  404976:	b02d      	add	sp, #180	; 0xb4
  404978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40497c:	2a00      	cmp	r2, #0
  40497e:	f040 8106 	bne.w	404b8e <_vfiprintf_r+0xace>
  404982:	9a05      	ldr	r2, [sp, #20]
  404984:	921d      	str	r2, [sp, #116]	; 0x74
  404986:	2301      	movs	r3, #1
  404988:	9211      	str	r2, [sp, #68]	; 0x44
  40498a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40498e:	9310      	str	r3, [sp, #64]	; 0x40
  404990:	46ca      	mov	sl, r9
  404992:	f10a 0a08 	add.w	sl, sl, #8
  404996:	9b02      	ldr	r3, [sp, #8]
  404998:	0759      	lsls	r1, r3, #29
  40499a:	d504      	bpl.n	4049a6 <_vfiprintf_r+0x8e6>
  40499c:	9b08      	ldr	r3, [sp, #32]
  40499e:	9901      	ldr	r1, [sp, #4]
  4049a0:	1a5c      	subs	r4, r3, r1
  4049a2:	2c00      	cmp	r4, #0
  4049a4:	dc81      	bgt.n	4048aa <_vfiprintf_r+0x7ea>
  4049a6:	9b03      	ldr	r3, [sp, #12]
  4049a8:	9908      	ldr	r1, [sp, #32]
  4049aa:	9801      	ldr	r0, [sp, #4]
  4049ac:	4281      	cmp	r1, r0
  4049ae:	bfac      	ite	ge
  4049b0:	185b      	addge	r3, r3, r1
  4049b2:	181b      	addlt	r3, r3, r0
  4049b4:	9303      	str	r3, [sp, #12]
  4049b6:	bb72      	cbnz	r2, 404a16 <_vfiprintf_r+0x956>
  4049b8:	2300      	movs	r3, #0
  4049ba:	9310      	str	r3, [sp, #64]	; 0x40
  4049bc:	46ca      	mov	sl, r9
  4049be:	f7ff bbbc 	b.w	40413a <_vfiprintf_r+0x7a>
  4049c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4049c4:	9904      	ldr	r1, [sp, #16]
  4049c6:	4620      	mov	r0, r4
  4049c8:	f7ff fb3a 	bl	404040 <__sprint_r.part.0>
  4049cc:	bb50      	cbnz	r0, 404a24 <_vfiprintf_r+0x964>
  4049ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4049d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4049d2:	f101 0e01 	add.w	lr, r1, #1
  4049d6:	46cc      	mov	ip, r9
  4049d8:	e548      	b.n	40446c <_vfiprintf_r+0x3ac>
  4049da:	2a00      	cmp	r2, #0
  4049dc:	f040 8140 	bne.w	404c60 <_vfiprintf_r+0xba0>
  4049e0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4049e4:	2900      	cmp	r1, #0
  4049e6:	f000 811b 	beq.w	404c20 <_vfiprintf_r+0xb60>
  4049ea:	2201      	movs	r2, #1
  4049ec:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4049f0:	4610      	mov	r0, r2
  4049f2:	921d      	str	r2, [sp, #116]	; 0x74
  4049f4:	911c      	str	r1, [sp, #112]	; 0x70
  4049f6:	46ca      	mov	sl, r9
  4049f8:	4601      	mov	r1, r0
  4049fa:	f10a 0a08 	add.w	sl, sl, #8
  4049fe:	3001      	adds	r0, #1
  404a00:	e507      	b.n	404412 <_vfiprintf_r+0x352>
  404a02:	9b02      	ldr	r3, [sp, #8]
  404a04:	2a01      	cmp	r2, #1
  404a06:	f000 8098 	beq.w	404b3a <_vfiprintf_r+0xa7a>
  404a0a:	2a02      	cmp	r2, #2
  404a0c:	d10d      	bne.n	404a2a <_vfiprintf_r+0x96a>
  404a0e:	9302      	str	r3, [sp, #8]
  404a10:	2600      	movs	r6, #0
  404a12:	2700      	movs	r7, #0
  404a14:	e5b0      	b.n	404578 <_vfiprintf_r+0x4b8>
  404a16:	aa0f      	add	r2, sp, #60	; 0x3c
  404a18:	9904      	ldr	r1, [sp, #16]
  404a1a:	9806      	ldr	r0, [sp, #24]
  404a1c:	f7ff fb10 	bl	404040 <__sprint_r.part.0>
  404a20:	2800      	cmp	r0, #0
  404a22:	d0c9      	beq.n	4049b8 <_vfiprintf_r+0x8f8>
  404a24:	f8dd b010 	ldr.w	fp, [sp, #16]
  404a28:	e797      	b.n	40495a <_vfiprintf_r+0x89a>
  404a2a:	9302      	str	r3, [sp, #8]
  404a2c:	2600      	movs	r6, #0
  404a2e:	2700      	movs	r7, #0
  404a30:	4649      	mov	r1, r9
  404a32:	e000      	b.n	404a36 <_vfiprintf_r+0x976>
  404a34:	4659      	mov	r1, fp
  404a36:	08f2      	lsrs	r2, r6, #3
  404a38:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404a3c:	08f8      	lsrs	r0, r7, #3
  404a3e:	f006 0307 	and.w	r3, r6, #7
  404a42:	4607      	mov	r7, r0
  404a44:	4616      	mov	r6, r2
  404a46:	3330      	adds	r3, #48	; 0x30
  404a48:	ea56 0207 	orrs.w	r2, r6, r7
  404a4c:	f801 3c01 	strb.w	r3, [r1, #-1]
  404a50:	f101 3bff 	add.w	fp, r1, #4294967295
  404a54:	d1ee      	bne.n	404a34 <_vfiprintf_r+0x974>
  404a56:	9a02      	ldr	r2, [sp, #8]
  404a58:	07d6      	lsls	r6, r2, #31
  404a5a:	f57f ad9d 	bpl.w	404598 <_vfiprintf_r+0x4d8>
  404a5e:	2b30      	cmp	r3, #48	; 0x30
  404a60:	f43f ad9a 	beq.w	404598 <_vfiprintf_r+0x4d8>
  404a64:	3902      	subs	r1, #2
  404a66:	2330      	movs	r3, #48	; 0x30
  404a68:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404a6c:	eba9 0301 	sub.w	r3, r9, r1
  404a70:	9305      	str	r3, [sp, #20]
  404a72:	468b      	mov	fp, r1
  404a74:	e476      	b.n	404364 <_vfiprintf_r+0x2a4>
  404a76:	9b03      	ldr	r3, [sp, #12]
  404a78:	9a08      	ldr	r2, [sp, #32]
  404a7a:	428a      	cmp	r2, r1
  404a7c:	bfac      	ite	ge
  404a7e:	189b      	addge	r3, r3, r2
  404a80:	185b      	addlt	r3, r3, r1
  404a82:	9303      	str	r3, [sp, #12]
  404a84:	e798      	b.n	4049b8 <_vfiprintf_r+0x8f8>
  404a86:	2202      	movs	r2, #2
  404a88:	e44d      	b.n	404326 <_vfiprintf_r+0x266>
  404a8a:	2f00      	cmp	r7, #0
  404a8c:	bf08      	it	eq
  404a8e:	2e0a      	cmpeq	r6, #10
  404a90:	d352      	bcc.n	404b38 <_vfiprintf_r+0xa78>
  404a92:	46cb      	mov	fp, r9
  404a94:	4630      	mov	r0, r6
  404a96:	4639      	mov	r1, r7
  404a98:	220a      	movs	r2, #10
  404a9a:	2300      	movs	r3, #0
  404a9c:	f001 ffac 	bl	4069f8 <__aeabi_uldivmod>
  404aa0:	3230      	adds	r2, #48	; 0x30
  404aa2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404aa6:	4630      	mov	r0, r6
  404aa8:	4639      	mov	r1, r7
  404aaa:	2300      	movs	r3, #0
  404aac:	220a      	movs	r2, #10
  404aae:	f001 ffa3 	bl	4069f8 <__aeabi_uldivmod>
  404ab2:	4606      	mov	r6, r0
  404ab4:	460f      	mov	r7, r1
  404ab6:	ea56 0307 	orrs.w	r3, r6, r7
  404aba:	d1eb      	bne.n	404a94 <_vfiprintf_r+0x9d4>
  404abc:	e56c      	b.n	404598 <_vfiprintf_r+0x4d8>
  404abe:	9405      	str	r4, [sp, #20]
  404ac0:	46cb      	mov	fp, r9
  404ac2:	e44f      	b.n	404364 <_vfiprintf_r+0x2a4>
  404ac4:	aa0f      	add	r2, sp, #60	; 0x3c
  404ac6:	9904      	ldr	r1, [sp, #16]
  404ac8:	9806      	ldr	r0, [sp, #24]
  404aca:	f7ff fab9 	bl	404040 <__sprint_r.part.0>
  404ace:	2800      	cmp	r0, #0
  404ad0:	d1a8      	bne.n	404a24 <_vfiprintf_r+0x964>
  404ad2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ad4:	46ca      	mov	sl, r9
  404ad6:	e75e      	b.n	404996 <_vfiprintf_r+0x8d6>
  404ad8:	aa0f      	add	r2, sp, #60	; 0x3c
  404ada:	9904      	ldr	r1, [sp, #16]
  404adc:	9806      	ldr	r0, [sp, #24]
  404ade:	f7ff faaf 	bl	404040 <__sprint_r.part.0>
  404ae2:	2800      	cmp	r0, #0
  404ae4:	d19e      	bne.n	404a24 <_vfiprintf_r+0x964>
  404ae6:	46ca      	mov	sl, r9
  404ae8:	f7ff bbc0 	b.w	40426c <_vfiprintf_r+0x1ac>
  404aec:	00406e80 	.word	0x00406e80
  404af0:	00406e70 	.word	0x00406e70
  404af4:	3104      	adds	r1, #4
  404af6:	6816      	ldr	r6, [r2, #0]
  404af8:	9107      	str	r1, [sp, #28]
  404afa:	2201      	movs	r2, #1
  404afc:	2700      	movs	r7, #0
  404afe:	e412      	b.n	404326 <_vfiprintf_r+0x266>
  404b00:	9807      	ldr	r0, [sp, #28]
  404b02:	4601      	mov	r1, r0
  404b04:	3104      	adds	r1, #4
  404b06:	6806      	ldr	r6, [r0, #0]
  404b08:	9107      	str	r1, [sp, #28]
  404b0a:	2700      	movs	r7, #0
  404b0c:	e40b      	b.n	404326 <_vfiprintf_r+0x266>
  404b0e:	680e      	ldr	r6, [r1, #0]
  404b10:	3104      	adds	r1, #4
  404b12:	9107      	str	r1, [sp, #28]
  404b14:	2700      	movs	r7, #0
  404b16:	e591      	b.n	40463c <_vfiprintf_r+0x57c>
  404b18:	9907      	ldr	r1, [sp, #28]
  404b1a:	680e      	ldr	r6, [r1, #0]
  404b1c:	460a      	mov	r2, r1
  404b1e:	17f7      	asrs	r7, r6, #31
  404b20:	3204      	adds	r2, #4
  404b22:	9207      	str	r2, [sp, #28]
  404b24:	4630      	mov	r0, r6
  404b26:	4639      	mov	r1, r7
  404b28:	e50f      	b.n	40454a <_vfiprintf_r+0x48a>
  404b2a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404b2e:	f000 fe7f 	bl	405830 <__retarget_lock_release_recursive>
  404b32:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404b36:	e71a      	b.n	40496e <_vfiprintf_r+0x8ae>
  404b38:	9b02      	ldr	r3, [sp, #8]
  404b3a:	9302      	str	r3, [sp, #8]
  404b3c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404b40:	3630      	adds	r6, #48	; 0x30
  404b42:	2301      	movs	r3, #1
  404b44:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404b48:	9305      	str	r3, [sp, #20]
  404b4a:	e40b      	b.n	404364 <_vfiprintf_r+0x2a4>
  404b4c:	aa0f      	add	r2, sp, #60	; 0x3c
  404b4e:	9904      	ldr	r1, [sp, #16]
  404b50:	9806      	ldr	r0, [sp, #24]
  404b52:	f7ff fa75 	bl	404040 <__sprint_r.part.0>
  404b56:	2800      	cmp	r0, #0
  404b58:	f47f af64 	bne.w	404a24 <_vfiprintf_r+0x964>
  404b5c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b60:	1c48      	adds	r0, r1, #1
  404b62:	46ca      	mov	sl, r9
  404b64:	e651      	b.n	40480a <_vfiprintf_r+0x74a>
  404b66:	aa0f      	add	r2, sp, #60	; 0x3c
  404b68:	9904      	ldr	r1, [sp, #16]
  404b6a:	9806      	ldr	r0, [sp, #24]
  404b6c:	f7ff fa68 	bl	404040 <__sprint_r.part.0>
  404b70:	2800      	cmp	r0, #0
  404b72:	f47f af57 	bne.w	404a24 <_vfiprintf_r+0x964>
  404b76:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b7a:	1c48      	adds	r0, r1, #1
  404b7c:	46ca      	mov	sl, r9
  404b7e:	e448      	b.n	404412 <_vfiprintf_r+0x352>
  404b80:	2a00      	cmp	r2, #0
  404b82:	f040 8091 	bne.w	404ca8 <_vfiprintf_r+0xbe8>
  404b86:	2001      	movs	r0, #1
  404b88:	4611      	mov	r1, r2
  404b8a:	46ca      	mov	sl, r9
  404b8c:	e641      	b.n	404812 <_vfiprintf_r+0x752>
  404b8e:	aa0f      	add	r2, sp, #60	; 0x3c
  404b90:	9904      	ldr	r1, [sp, #16]
  404b92:	9806      	ldr	r0, [sp, #24]
  404b94:	f7ff fa54 	bl	404040 <__sprint_r.part.0>
  404b98:	2800      	cmp	r0, #0
  404b9a:	f47f af43 	bne.w	404a24 <_vfiprintf_r+0x964>
  404b9e:	9810      	ldr	r0, [sp, #64]	; 0x40
  404ba0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ba2:	3001      	adds	r0, #1
  404ba4:	46ca      	mov	sl, r9
  404ba6:	e667      	b.n	404878 <_vfiprintf_r+0x7b8>
  404ba8:	46d3      	mov	fp, sl
  404baa:	e6d6      	b.n	40495a <_vfiprintf_r+0x89a>
  404bac:	9e07      	ldr	r6, [sp, #28]
  404bae:	3607      	adds	r6, #7
  404bb0:	f026 0207 	bic.w	r2, r6, #7
  404bb4:	f102 0108 	add.w	r1, r2, #8
  404bb8:	e9d2 6700 	ldrd	r6, r7, [r2]
  404bbc:	9107      	str	r1, [sp, #28]
  404bbe:	2201      	movs	r2, #1
  404bc0:	f7ff bbb1 	b.w	404326 <_vfiprintf_r+0x266>
  404bc4:	9e07      	ldr	r6, [sp, #28]
  404bc6:	3607      	adds	r6, #7
  404bc8:	f026 0607 	bic.w	r6, r6, #7
  404bcc:	e9d6 0100 	ldrd	r0, r1, [r6]
  404bd0:	f106 0208 	add.w	r2, r6, #8
  404bd4:	9207      	str	r2, [sp, #28]
  404bd6:	4606      	mov	r6, r0
  404bd8:	460f      	mov	r7, r1
  404bda:	e4b6      	b.n	40454a <_vfiprintf_r+0x48a>
  404bdc:	9e07      	ldr	r6, [sp, #28]
  404bde:	3607      	adds	r6, #7
  404be0:	f026 0207 	bic.w	r2, r6, #7
  404be4:	f102 0108 	add.w	r1, r2, #8
  404be8:	e9d2 6700 	ldrd	r6, r7, [r2]
  404bec:	9107      	str	r1, [sp, #28]
  404bee:	2200      	movs	r2, #0
  404bf0:	f7ff bb99 	b.w	404326 <_vfiprintf_r+0x266>
  404bf4:	9e07      	ldr	r6, [sp, #28]
  404bf6:	3607      	adds	r6, #7
  404bf8:	f026 0107 	bic.w	r1, r6, #7
  404bfc:	f101 0008 	add.w	r0, r1, #8
  404c00:	9007      	str	r0, [sp, #28]
  404c02:	e9d1 6700 	ldrd	r6, r7, [r1]
  404c06:	e519      	b.n	40463c <_vfiprintf_r+0x57c>
  404c08:	46cb      	mov	fp, r9
  404c0a:	f7ff bbab 	b.w	404364 <_vfiprintf_r+0x2a4>
  404c0e:	252d      	movs	r5, #45	; 0x2d
  404c10:	4276      	negs	r6, r6
  404c12:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404c16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404c1a:	2201      	movs	r2, #1
  404c1c:	f7ff bb88 	b.w	404330 <_vfiprintf_r+0x270>
  404c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404c22:	b9b3      	cbnz	r3, 404c52 <_vfiprintf_r+0xb92>
  404c24:	4611      	mov	r1, r2
  404c26:	2001      	movs	r0, #1
  404c28:	46ca      	mov	sl, r9
  404c2a:	e5f2      	b.n	404812 <_vfiprintf_r+0x752>
  404c2c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404c30:	f000 fdfe 	bl	405830 <__retarget_lock_release_recursive>
  404c34:	f04f 33ff 	mov.w	r3, #4294967295
  404c38:	9303      	str	r3, [sp, #12]
  404c3a:	f7ff bb50 	b.w	4042de <_vfiprintf_r+0x21e>
  404c3e:	aa0f      	add	r2, sp, #60	; 0x3c
  404c40:	9904      	ldr	r1, [sp, #16]
  404c42:	9806      	ldr	r0, [sp, #24]
  404c44:	f7ff f9fc 	bl	404040 <__sprint_r.part.0>
  404c48:	2800      	cmp	r0, #0
  404c4a:	f47f aeeb 	bne.w	404a24 <_vfiprintf_r+0x964>
  404c4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c50:	e6a9      	b.n	4049a6 <_vfiprintf_r+0x8e6>
  404c52:	ab0e      	add	r3, sp, #56	; 0x38
  404c54:	2202      	movs	r2, #2
  404c56:	931c      	str	r3, [sp, #112]	; 0x70
  404c58:	921d      	str	r2, [sp, #116]	; 0x74
  404c5a:	2001      	movs	r0, #1
  404c5c:	46ca      	mov	sl, r9
  404c5e:	e5d0      	b.n	404802 <_vfiprintf_r+0x742>
  404c60:	aa0f      	add	r2, sp, #60	; 0x3c
  404c62:	9904      	ldr	r1, [sp, #16]
  404c64:	9806      	ldr	r0, [sp, #24]
  404c66:	f7ff f9eb 	bl	404040 <__sprint_r.part.0>
  404c6a:	2800      	cmp	r0, #0
  404c6c:	f47f aeda 	bne.w	404a24 <_vfiprintf_r+0x964>
  404c70:	9910      	ldr	r1, [sp, #64]	; 0x40
  404c72:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c74:	1c48      	adds	r0, r1, #1
  404c76:	46ca      	mov	sl, r9
  404c78:	e5a4      	b.n	4047c4 <_vfiprintf_r+0x704>
  404c7a:	9a07      	ldr	r2, [sp, #28]
  404c7c:	9903      	ldr	r1, [sp, #12]
  404c7e:	6813      	ldr	r3, [r2, #0]
  404c80:	17cd      	asrs	r5, r1, #31
  404c82:	4608      	mov	r0, r1
  404c84:	3204      	adds	r2, #4
  404c86:	4629      	mov	r1, r5
  404c88:	9207      	str	r2, [sp, #28]
  404c8a:	e9c3 0100 	strd	r0, r1, [r3]
  404c8e:	f7ff ba54 	b.w	40413a <_vfiprintf_r+0x7a>
  404c92:	4658      	mov	r0, fp
  404c94:	9607      	str	r6, [sp, #28]
  404c96:	9302      	str	r3, [sp, #8]
  404c98:	f001 fc72 	bl	406580 <strlen>
  404c9c:	2400      	movs	r4, #0
  404c9e:	9005      	str	r0, [sp, #20]
  404ca0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404ca4:	f7ff bb5e 	b.w	404364 <_vfiprintf_r+0x2a4>
  404ca8:	aa0f      	add	r2, sp, #60	; 0x3c
  404caa:	9904      	ldr	r1, [sp, #16]
  404cac:	9806      	ldr	r0, [sp, #24]
  404cae:	f7ff f9c7 	bl	404040 <__sprint_r.part.0>
  404cb2:	2800      	cmp	r0, #0
  404cb4:	f47f aeb6 	bne.w	404a24 <_vfiprintf_r+0x964>
  404cb8:	9910      	ldr	r1, [sp, #64]	; 0x40
  404cba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cbc:	1c48      	adds	r0, r1, #1
  404cbe:	46ca      	mov	sl, r9
  404cc0:	e5a7      	b.n	404812 <_vfiprintf_r+0x752>
  404cc2:	9910      	ldr	r1, [sp, #64]	; 0x40
  404cc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cc6:	4e20      	ldr	r6, [pc, #128]	; (404d48 <_vfiprintf_r+0xc88>)
  404cc8:	3101      	adds	r1, #1
  404cca:	f7ff bb90 	b.w	4043ee <_vfiprintf_r+0x32e>
  404cce:	2c06      	cmp	r4, #6
  404cd0:	bf28      	it	cs
  404cd2:	2406      	movcs	r4, #6
  404cd4:	9405      	str	r4, [sp, #20]
  404cd6:	9607      	str	r6, [sp, #28]
  404cd8:	9401      	str	r4, [sp, #4]
  404cda:	f8df b070 	ldr.w	fp, [pc, #112]	; 404d4c <_vfiprintf_r+0xc8c>
  404cde:	e4d5      	b.n	40468c <_vfiprintf_r+0x5cc>
  404ce0:	9810      	ldr	r0, [sp, #64]	; 0x40
  404ce2:	4e19      	ldr	r6, [pc, #100]	; (404d48 <_vfiprintf_r+0xc88>)
  404ce4:	3001      	adds	r0, #1
  404ce6:	e603      	b.n	4048f0 <_vfiprintf_r+0x830>
  404ce8:	9405      	str	r4, [sp, #20]
  404cea:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404cee:	9607      	str	r6, [sp, #28]
  404cf0:	9302      	str	r3, [sp, #8]
  404cf2:	4604      	mov	r4, r0
  404cf4:	f7ff bb36 	b.w	404364 <_vfiprintf_r+0x2a4>
  404cf8:	4686      	mov	lr, r0
  404cfa:	f7ff bbce 	b.w	40449a <_vfiprintf_r+0x3da>
  404cfe:	9806      	ldr	r0, [sp, #24]
  404d00:	aa0f      	add	r2, sp, #60	; 0x3c
  404d02:	4659      	mov	r1, fp
  404d04:	f7ff f99c 	bl	404040 <__sprint_r.part.0>
  404d08:	2800      	cmp	r0, #0
  404d0a:	f43f ae24 	beq.w	404956 <_vfiprintf_r+0x896>
  404d0e:	e624      	b.n	40495a <_vfiprintf_r+0x89a>
  404d10:	9907      	ldr	r1, [sp, #28]
  404d12:	f898 2001 	ldrb.w	r2, [r8, #1]
  404d16:	680c      	ldr	r4, [r1, #0]
  404d18:	3104      	adds	r1, #4
  404d1a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  404d1e:	46b8      	mov	r8, r7
  404d20:	9107      	str	r1, [sp, #28]
  404d22:	f7ff ba3f 	b.w	4041a4 <_vfiprintf_r+0xe4>
  404d26:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404d2a:	e43c      	b.n	4045a6 <_vfiprintf_r+0x4e6>
  404d2c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404d30:	e521      	b.n	404776 <_vfiprintf_r+0x6b6>
  404d32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404d36:	f7ff bbf4 	b.w	404522 <_vfiprintf_r+0x462>
  404d3a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404d3e:	e491      	b.n	404664 <_vfiprintf_r+0x5a4>
  404d40:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404d44:	e469      	b.n	40461a <_vfiprintf_r+0x55a>
  404d46:	bf00      	nop
  404d48:	00406e70 	.word	0x00406e70
  404d4c:	00406e68 	.word	0x00406e68

00404d50 <__sbprintf>:
  404d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d54:	460c      	mov	r4, r1
  404d56:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  404d5a:	8989      	ldrh	r1, [r1, #12]
  404d5c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404d5e:	89e5      	ldrh	r5, [r4, #14]
  404d60:	9619      	str	r6, [sp, #100]	; 0x64
  404d62:	f021 0102 	bic.w	r1, r1, #2
  404d66:	4606      	mov	r6, r0
  404d68:	69e0      	ldr	r0, [r4, #28]
  404d6a:	f8ad 100c 	strh.w	r1, [sp, #12]
  404d6e:	4617      	mov	r7, r2
  404d70:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404d74:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404d76:	f8ad 500e 	strh.w	r5, [sp, #14]
  404d7a:	4698      	mov	r8, r3
  404d7c:	ad1a      	add	r5, sp, #104	; 0x68
  404d7e:	2300      	movs	r3, #0
  404d80:	9007      	str	r0, [sp, #28]
  404d82:	a816      	add	r0, sp, #88	; 0x58
  404d84:	9209      	str	r2, [sp, #36]	; 0x24
  404d86:	9306      	str	r3, [sp, #24]
  404d88:	9500      	str	r5, [sp, #0]
  404d8a:	9504      	str	r5, [sp, #16]
  404d8c:	9102      	str	r1, [sp, #8]
  404d8e:	9105      	str	r1, [sp, #20]
  404d90:	f000 fd48 	bl	405824 <__retarget_lock_init_recursive>
  404d94:	4643      	mov	r3, r8
  404d96:	463a      	mov	r2, r7
  404d98:	4669      	mov	r1, sp
  404d9a:	4630      	mov	r0, r6
  404d9c:	f7ff f990 	bl	4040c0 <_vfiprintf_r>
  404da0:	1e05      	subs	r5, r0, #0
  404da2:	db07      	blt.n	404db4 <__sbprintf+0x64>
  404da4:	4630      	mov	r0, r6
  404da6:	4669      	mov	r1, sp
  404da8:	f000 f928 	bl	404ffc <_fflush_r>
  404dac:	2800      	cmp	r0, #0
  404dae:	bf18      	it	ne
  404db0:	f04f 35ff 	movne.w	r5, #4294967295
  404db4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404db8:	065b      	lsls	r3, r3, #25
  404dba:	d503      	bpl.n	404dc4 <__sbprintf+0x74>
  404dbc:	89a3      	ldrh	r3, [r4, #12]
  404dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404dc2:	81a3      	strh	r3, [r4, #12]
  404dc4:	9816      	ldr	r0, [sp, #88]	; 0x58
  404dc6:	f000 fd2f 	bl	405828 <__retarget_lock_close_recursive>
  404dca:	4628      	mov	r0, r5
  404dcc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  404dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404dd4 <__swsetup_r>:
  404dd4:	b538      	push	{r3, r4, r5, lr}
  404dd6:	4b30      	ldr	r3, [pc, #192]	; (404e98 <__swsetup_r+0xc4>)
  404dd8:	681b      	ldr	r3, [r3, #0]
  404dda:	4605      	mov	r5, r0
  404ddc:	460c      	mov	r4, r1
  404dde:	b113      	cbz	r3, 404de6 <__swsetup_r+0x12>
  404de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  404de2:	2a00      	cmp	r2, #0
  404de4:	d038      	beq.n	404e58 <__swsetup_r+0x84>
  404de6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404dea:	b293      	uxth	r3, r2
  404dec:	0718      	lsls	r0, r3, #28
  404dee:	d50c      	bpl.n	404e0a <__swsetup_r+0x36>
  404df0:	6920      	ldr	r0, [r4, #16]
  404df2:	b1a8      	cbz	r0, 404e20 <__swsetup_r+0x4c>
  404df4:	f013 0201 	ands.w	r2, r3, #1
  404df8:	d01e      	beq.n	404e38 <__swsetup_r+0x64>
  404dfa:	6963      	ldr	r3, [r4, #20]
  404dfc:	2200      	movs	r2, #0
  404dfe:	425b      	negs	r3, r3
  404e00:	61a3      	str	r3, [r4, #24]
  404e02:	60a2      	str	r2, [r4, #8]
  404e04:	b1f0      	cbz	r0, 404e44 <__swsetup_r+0x70>
  404e06:	2000      	movs	r0, #0
  404e08:	bd38      	pop	{r3, r4, r5, pc}
  404e0a:	06d9      	lsls	r1, r3, #27
  404e0c:	d53c      	bpl.n	404e88 <__swsetup_r+0xb4>
  404e0e:	0758      	lsls	r0, r3, #29
  404e10:	d426      	bmi.n	404e60 <__swsetup_r+0x8c>
  404e12:	6920      	ldr	r0, [r4, #16]
  404e14:	f042 0308 	orr.w	r3, r2, #8
  404e18:	81a3      	strh	r3, [r4, #12]
  404e1a:	b29b      	uxth	r3, r3
  404e1c:	2800      	cmp	r0, #0
  404e1e:	d1e9      	bne.n	404df4 <__swsetup_r+0x20>
  404e20:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404e24:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404e28:	d0e4      	beq.n	404df4 <__swsetup_r+0x20>
  404e2a:	4628      	mov	r0, r5
  404e2c:	4621      	mov	r1, r4
  404e2e:	f000 fd2f 	bl	405890 <__smakebuf_r>
  404e32:	89a3      	ldrh	r3, [r4, #12]
  404e34:	6920      	ldr	r0, [r4, #16]
  404e36:	e7dd      	b.n	404df4 <__swsetup_r+0x20>
  404e38:	0799      	lsls	r1, r3, #30
  404e3a:	bf58      	it	pl
  404e3c:	6962      	ldrpl	r2, [r4, #20]
  404e3e:	60a2      	str	r2, [r4, #8]
  404e40:	2800      	cmp	r0, #0
  404e42:	d1e0      	bne.n	404e06 <__swsetup_r+0x32>
  404e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e48:	061a      	lsls	r2, r3, #24
  404e4a:	d5dd      	bpl.n	404e08 <__swsetup_r+0x34>
  404e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404e50:	81a3      	strh	r3, [r4, #12]
  404e52:	f04f 30ff 	mov.w	r0, #4294967295
  404e56:	bd38      	pop	{r3, r4, r5, pc}
  404e58:	4618      	mov	r0, r3
  404e5a:	f000 f927 	bl	4050ac <__sinit>
  404e5e:	e7c2      	b.n	404de6 <__swsetup_r+0x12>
  404e60:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404e62:	b151      	cbz	r1, 404e7a <__swsetup_r+0xa6>
  404e64:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404e68:	4299      	cmp	r1, r3
  404e6a:	d004      	beq.n	404e76 <__swsetup_r+0xa2>
  404e6c:	4628      	mov	r0, r5
  404e6e:	f000 fa43 	bl	4052f8 <_free_r>
  404e72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404e76:	2300      	movs	r3, #0
  404e78:	6323      	str	r3, [r4, #48]	; 0x30
  404e7a:	2300      	movs	r3, #0
  404e7c:	6920      	ldr	r0, [r4, #16]
  404e7e:	6063      	str	r3, [r4, #4]
  404e80:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404e84:	6020      	str	r0, [r4, #0]
  404e86:	e7c5      	b.n	404e14 <__swsetup_r+0x40>
  404e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404e8c:	2309      	movs	r3, #9
  404e8e:	602b      	str	r3, [r5, #0]
  404e90:	f04f 30ff 	mov.w	r0, #4294967295
  404e94:	81a2      	strh	r2, [r4, #12]
  404e96:	bd38      	pop	{r3, r4, r5, pc}
  404e98:	204000f0 	.word	0x204000f0

00404e9c <register_fini>:
  404e9c:	4b02      	ldr	r3, [pc, #8]	; (404ea8 <register_fini+0xc>)
  404e9e:	b113      	cbz	r3, 404ea6 <register_fini+0xa>
  404ea0:	4802      	ldr	r0, [pc, #8]	; (404eac <register_fini+0x10>)
  404ea2:	f000 b805 	b.w	404eb0 <atexit>
  404ea6:	4770      	bx	lr
  404ea8:	00000000 	.word	0x00000000
  404eac:	0040511d 	.word	0x0040511d

00404eb0 <atexit>:
  404eb0:	2300      	movs	r3, #0
  404eb2:	4601      	mov	r1, r0
  404eb4:	461a      	mov	r2, r3
  404eb6:	4618      	mov	r0, r3
  404eb8:	f001 bc76 	b.w	4067a8 <__register_exitproc>

00404ebc <__sflush_r>:
  404ebc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  404ec0:	b29a      	uxth	r2, r3
  404ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ec6:	460d      	mov	r5, r1
  404ec8:	0711      	lsls	r1, r2, #28
  404eca:	4680      	mov	r8, r0
  404ecc:	d43a      	bmi.n	404f44 <__sflush_r+0x88>
  404ece:	686a      	ldr	r2, [r5, #4]
  404ed0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404ed4:	2a00      	cmp	r2, #0
  404ed6:	81ab      	strh	r3, [r5, #12]
  404ed8:	dd6f      	ble.n	404fba <__sflush_r+0xfe>
  404eda:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404edc:	2c00      	cmp	r4, #0
  404ede:	d049      	beq.n	404f74 <__sflush_r+0xb8>
  404ee0:	2200      	movs	r2, #0
  404ee2:	b29b      	uxth	r3, r3
  404ee4:	f8d8 6000 	ldr.w	r6, [r8]
  404ee8:	f8c8 2000 	str.w	r2, [r8]
  404eec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  404ef0:	d067      	beq.n	404fc2 <__sflush_r+0x106>
  404ef2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404ef4:	075f      	lsls	r7, r3, #29
  404ef6:	d505      	bpl.n	404f04 <__sflush_r+0x48>
  404ef8:	6869      	ldr	r1, [r5, #4]
  404efa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404efc:	1a52      	subs	r2, r2, r1
  404efe:	b10b      	cbz	r3, 404f04 <__sflush_r+0x48>
  404f00:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404f02:	1ad2      	subs	r2, r2, r3
  404f04:	2300      	movs	r3, #0
  404f06:	69e9      	ldr	r1, [r5, #28]
  404f08:	4640      	mov	r0, r8
  404f0a:	47a0      	blx	r4
  404f0c:	1c44      	adds	r4, r0, #1
  404f0e:	d03c      	beq.n	404f8a <__sflush_r+0xce>
  404f10:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404f14:	692a      	ldr	r2, [r5, #16]
  404f16:	602a      	str	r2, [r5, #0]
  404f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404f1c:	2200      	movs	r2, #0
  404f1e:	81ab      	strh	r3, [r5, #12]
  404f20:	04db      	lsls	r3, r3, #19
  404f22:	606a      	str	r2, [r5, #4]
  404f24:	d447      	bmi.n	404fb6 <__sflush_r+0xfa>
  404f26:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404f28:	f8c8 6000 	str.w	r6, [r8]
  404f2c:	b311      	cbz	r1, 404f74 <__sflush_r+0xb8>
  404f2e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404f32:	4299      	cmp	r1, r3
  404f34:	d002      	beq.n	404f3c <__sflush_r+0x80>
  404f36:	4640      	mov	r0, r8
  404f38:	f000 f9de 	bl	4052f8 <_free_r>
  404f3c:	2000      	movs	r0, #0
  404f3e:	6328      	str	r0, [r5, #48]	; 0x30
  404f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404f44:	692e      	ldr	r6, [r5, #16]
  404f46:	b1ae      	cbz	r6, 404f74 <__sflush_r+0xb8>
  404f48:	682c      	ldr	r4, [r5, #0]
  404f4a:	602e      	str	r6, [r5, #0]
  404f4c:	0791      	lsls	r1, r2, #30
  404f4e:	bf0c      	ite	eq
  404f50:	696b      	ldreq	r3, [r5, #20]
  404f52:	2300      	movne	r3, #0
  404f54:	1ba4      	subs	r4, r4, r6
  404f56:	60ab      	str	r3, [r5, #8]
  404f58:	e00a      	b.n	404f70 <__sflush_r+0xb4>
  404f5a:	4623      	mov	r3, r4
  404f5c:	4632      	mov	r2, r6
  404f5e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  404f60:	69e9      	ldr	r1, [r5, #28]
  404f62:	4640      	mov	r0, r8
  404f64:	47b8      	blx	r7
  404f66:	2800      	cmp	r0, #0
  404f68:	eba4 0400 	sub.w	r4, r4, r0
  404f6c:	4406      	add	r6, r0
  404f6e:	dd04      	ble.n	404f7a <__sflush_r+0xbe>
  404f70:	2c00      	cmp	r4, #0
  404f72:	dcf2      	bgt.n	404f5a <__sflush_r+0x9e>
  404f74:	2000      	movs	r0, #0
  404f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404f7a:	89ab      	ldrh	r3, [r5, #12]
  404f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404f80:	81ab      	strh	r3, [r5, #12]
  404f82:	f04f 30ff 	mov.w	r0, #4294967295
  404f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404f8a:	f8d8 4000 	ldr.w	r4, [r8]
  404f8e:	2c1d      	cmp	r4, #29
  404f90:	d8f3      	bhi.n	404f7a <__sflush_r+0xbe>
  404f92:	4b19      	ldr	r3, [pc, #100]	; (404ff8 <__sflush_r+0x13c>)
  404f94:	40e3      	lsrs	r3, r4
  404f96:	43db      	mvns	r3, r3
  404f98:	f013 0301 	ands.w	r3, r3, #1
  404f9c:	d1ed      	bne.n	404f7a <__sflush_r+0xbe>
  404f9e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  404fa2:	606b      	str	r3, [r5, #4]
  404fa4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404fa8:	6929      	ldr	r1, [r5, #16]
  404faa:	81ab      	strh	r3, [r5, #12]
  404fac:	04da      	lsls	r2, r3, #19
  404fae:	6029      	str	r1, [r5, #0]
  404fb0:	d5b9      	bpl.n	404f26 <__sflush_r+0x6a>
  404fb2:	2c00      	cmp	r4, #0
  404fb4:	d1b7      	bne.n	404f26 <__sflush_r+0x6a>
  404fb6:	6528      	str	r0, [r5, #80]	; 0x50
  404fb8:	e7b5      	b.n	404f26 <__sflush_r+0x6a>
  404fba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404fbc:	2a00      	cmp	r2, #0
  404fbe:	dc8c      	bgt.n	404eda <__sflush_r+0x1e>
  404fc0:	e7d8      	b.n	404f74 <__sflush_r+0xb8>
  404fc2:	2301      	movs	r3, #1
  404fc4:	69e9      	ldr	r1, [r5, #28]
  404fc6:	4640      	mov	r0, r8
  404fc8:	47a0      	blx	r4
  404fca:	1c43      	adds	r3, r0, #1
  404fcc:	4602      	mov	r2, r0
  404fce:	d002      	beq.n	404fd6 <__sflush_r+0x11a>
  404fd0:	89ab      	ldrh	r3, [r5, #12]
  404fd2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404fd4:	e78e      	b.n	404ef4 <__sflush_r+0x38>
  404fd6:	f8d8 3000 	ldr.w	r3, [r8]
  404fda:	2b00      	cmp	r3, #0
  404fdc:	d0f8      	beq.n	404fd0 <__sflush_r+0x114>
  404fde:	2b1d      	cmp	r3, #29
  404fe0:	d001      	beq.n	404fe6 <__sflush_r+0x12a>
  404fe2:	2b16      	cmp	r3, #22
  404fe4:	d102      	bne.n	404fec <__sflush_r+0x130>
  404fe6:	f8c8 6000 	str.w	r6, [r8]
  404fea:	e7c3      	b.n	404f74 <__sflush_r+0xb8>
  404fec:	89ab      	ldrh	r3, [r5, #12]
  404fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404ff2:	81ab      	strh	r3, [r5, #12]
  404ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404ff8:	20400001 	.word	0x20400001

00404ffc <_fflush_r>:
  404ffc:	b538      	push	{r3, r4, r5, lr}
  404ffe:	460d      	mov	r5, r1
  405000:	4604      	mov	r4, r0
  405002:	b108      	cbz	r0, 405008 <_fflush_r+0xc>
  405004:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405006:	b1bb      	cbz	r3, 405038 <_fflush_r+0x3c>
  405008:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40500c:	b188      	cbz	r0, 405032 <_fflush_r+0x36>
  40500e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405010:	07db      	lsls	r3, r3, #31
  405012:	d401      	bmi.n	405018 <_fflush_r+0x1c>
  405014:	0581      	lsls	r1, r0, #22
  405016:	d517      	bpl.n	405048 <_fflush_r+0x4c>
  405018:	4620      	mov	r0, r4
  40501a:	4629      	mov	r1, r5
  40501c:	f7ff ff4e 	bl	404ebc <__sflush_r>
  405020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405022:	07da      	lsls	r2, r3, #31
  405024:	4604      	mov	r4, r0
  405026:	d402      	bmi.n	40502e <_fflush_r+0x32>
  405028:	89ab      	ldrh	r3, [r5, #12]
  40502a:	059b      	lsls	r3, r3, #22
  40502c:	d507      	bpl.n	40503e <_fflush_r+0x42>
  40502e:	4620      	mov	r0, r4
  405030:	bd38      	pop	{r3, r4, r5, pc}
  405032:	4604      	mov	r4, r0
  405034:	4620      	mov	r0, r4
  405036:	bd38      	pop	{r3, r4, r5, pc}
  405038:	f000 f838 	bl	4050ac <__sinit>
  40503c:	e7e4      	b.n	405008 <_fflush_r+0xc>
  40503e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405040:	f000 fbf6 	bl	405830 <__retarget_lock_release_recursive>
  405044:	4620      	mov	r0, r4
  405046:	bd38      	pop	{r3, r4, r5, pc}
  405048:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40504a:	f000 fbef 	bl	40582c <__retarget_lock_acquire_recursive>
  40504e:	e7e3      	b.n	405018 <_fflush_r+0x1c>

00405050 <_cleanup_r>:
  405050:	4901      	ldr	r1, [pc, #4]	; (405058 <_cleanup_r+0x8>)
  405052:	f000 bbaf 	b.w	4057b4 <_fwalk_reent>
  405056:	bf00      	nop
  405058:	00406891 	.word	0x00406891

0040505c <std.isra.0>:
  40505c:	b510      	push	{r4, lr}
  40505e:	2300      	movs	r3, #0
  405060:	4604      	mov	r4, r0
  405062:	8181      	strh	r1, [r0, #12]
  405064:	81c2      	strh	r2, [r0, #14]
  405066:	6003      	str	r3, [r0, #0]
  405068:	6043      	str	r3, [r0, #4]
  40506a:	6083      	str	r3, [r0, #8]
  40506c:	6643      	str	r3, [r0, #100]	; 0x64
  40506e:	6103      	str	r3, [r0, #16]
  405070:	6143      	str	r3, [r0, #20]
  405072:	6183      	str	r3, [r0, #24]
  405074:	4619      	mov	r1, r3
  405076:	2208      	movs	r2, #8
  405078:	305c      	adds	r0, #92	; 0x5c
  40507a:	f7fe fec3 	bl	403e04 <memset>
  40507e:	4807      	ldr	r0, [pc, #28]	; (40509c <std.isra.0+0x40>)
  405080:	4907      	ldr	r1, [pc, #28]	; (4050a0 <std.isra.0+0x44>)
  405082:	4a08      	ldr	r2, [pc, #32]	; (4050a4 <std.isra.0+0x48>)
  405084:	4b08      	ldr	r3, [pc, #32]	; (4050a8 <std.isra.0+0x4c>)
  405086:	6220      	str	r0, [r4, #32]
  405088:	61e4      	str	r4, [r4, #28]
  40508a:	6261      	str	r1, [r4, #36]	; 0x24
  40508c:	62a2      	str	r2, [r4, #40]	; 0x28
  40508e:	62e3      	str	r3, [r4, #44]	; 0x2c
  405090:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405098:	f000 bbc4 	b.w	405824 <__retarget_lock_init_recursive>
  40509c:	004064e5 	.word	0x004064e5
  4050a0:	00406509 	.word	0x00406509
  4050a4:	00406545 	.word	0x00406545
  4050a8:	00406565 	.word	0x00406565

004050ac <__sinit>:
  4050ac:	b510      	push	{r4, lr}
  4050ae:	4604      	mov	r4, r0
  4050b0:	4812      	ldr	r0, [pc, #72]	; (4050fc <__sinit+0x50>)
  4050b2:	f000 fbbb 	bl	40582c <__retarget_lock_acquire_recursive>
  4050b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4050b8:	b9d2      	cbnz	r2, 4050f0 <__sinit+0x44>
  4050ba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4050be:	4810      	ldr	r0, [pc, #64]	; (405100 <__sinit+0x54>)
  4050c0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4050c4:	2103      	movs	r1, #3
  4050c6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4050ca:	63e0      	str	r0, [r4, #60]	; 0x3c
  4050cc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4050d0:	6860      	ldr	r0, [r4, #4]
  4050d2:	2104      	movs	r1, #4
  4050d4:	f7ff ffc2 	bl	40505c <std.isra.0>
  4050d8:	2201      	movs	r2, #1
  4050da:	2109      	movs	r1, #9
  4050dc:	68a0      	ldr	r0, [r4, #8]
  4050de:	f7ff ffbd 	bl	40505c <std.isra.0>
  4050e2:	2202      	movs	r2, #2
  4050e4:	2112      	movs	r1, #18
  4050e6:	68e0      	ldr	r0, [r4, #12]
  4050e8:	f7ff ffb8 	bl	40505c <std.isra.0>
  4050ec:	2301      	movs	r3, #1
  4050ee:	63a3      	str	r3, [r4, #56]	; 0x38
  4050f0:	4802      	ldr	r0, [pc, #8]	; (4050fc <__sinit+0x50>)
  4050f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4050f6:	f000 bb9b 	b.w	405830 <__retarget_lock_release_recursive>
  4050fa:	bf00      	nop
  4050fc:	20401074 	.word	0x20401074
  405100:	00405051 	.word	0x00405051

00405104 <__sfp_lock_acquire>:
  405104:	4801      	ldr	r0, [pc, #4]	; (40510c <__sfp_lock_acquire+0x8>)
  405106:	f000 bb91 	b.w	40582c <__retarget_lock_acquire_recursive>
  40510a:	bf00      	nop
  40510c:	20401088 	.word	0x20401088

00405110 <__sfp_lock_release>:
  405110:	4801      	ldr	r0, [pc, #4]	; (405118 <__sfp_lock_release+0x8>)
  405112:	f000 bb8d 	b.w	405830 <__retarget_lock_release_recursive>
  405116:	bf00      	nop
  405118:	20401088 	.word	0x20401088

0040511c <__libc_fini_array>:
  40511c:	b538      	push	{r3, r4, r5, lr}
  40511e:	4c0a      	ldr	r4, [pc, #40]	; (405148 <__libc_fini_array+0x2c>)
  405120:	4d0a      	ldr	r5, [pc, #40]	; (40514c <__libc_fini_array+0x30>)
  405122:	1b64      	subs	r4, r4, r5
  405124:	10a4      	asrs	r4, r4, #2
  405126:	d00a      	beq.n	40513e <__libc_fini_array+0x22>
  405128:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40512c:	3b01      	subs	r3, #1
  40512e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405132:	3c01      	subs	r4, #1
  405134:	f855 3904 	ldr.w	r3, [r5], #-4
  405138:	4798      	blx	r3
  40513a:	2c00      	cmp	r4, #0
  40513c:	d1f9      	bne.n	405132 <__libc_fini_array+0x16>
  40513e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405142:	f001 bf39 	b.w	406fb8 <_fini>
  405146:	bf00      	nop
  405148:	00406fc8 	.word	0x00406fc8
  40514c:	00406fc4 	.word	0x00406fc4

00405150 <__fputwc>:
  405150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405154:	b082      	sub	sp, #8
  405156:	4680      	mov	r8, r0
  405158:	4689      	mov	r9, r1
  40515a:	4614      	mov	r4, r2
  40515c:	f000 fb54 	bl	405808 <__locale_mb_cur_max>
  405160:	2801      	cmp	r0, #1
  405162:	d036      	beq.n	4051d2 <__fputwc+0x82>
  405164:	464a      	mov	r2, r9
  405166:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40516a:	a901      	add	r1, sp, #4
  40516c:	4640      	mov	r0, r8
  40516e:	f001 facd 	bl	40670c <_wcrtomb_r>
  405172:	1c42      	adds	r2, r0, #1
  405174:	4606      	mov	r6, r0
  405176:	d025      	beq.n	4051c4 <__fputwc+0x74>
  405178:	b3a8      	cbz	r0, 4051e6 <__fputwc+0x96>
  40517a:	f89d e004 	ldrb.w	lr, [sp, #4]
  40517e:	2500      	movs	r5, #0
  405180:	f10d 0a04 	add.w	sl, sp, #4
  405184:	e009      	b.n	40519a <__fputwc+0x4a>
  405186:	6823      	ldr	r3, [r4, #0]
  405188:	1c5a      	adds	r2, r3, #1
  40518a:	6022      	str	r2, [r4, #0]
  40518c:	f883 e000 	strb.w	lr, [r3]
  405190:	3501      	adds	r5, #1
  405192:	42b5      	cmp	r5, r6
  405194:	d227      	bcs.n	4051e6 <__fputwc+0x96>
  405196:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40519a:	68a3      	ldr	r3, [r4, #8]
  40519c:	3b01      	subs	r3, #1
  40519e:	2b00      	cmp	r3, #0
  4051a0:	60a3      	str	r3, [r4, #8]
  4051a2:	daf0      	bge.n	405186 <__fputwc+0x36>
  4051a4:	69a7      	ldr	r7, [r4, #24]
  4051a6:	42bb      	cmp	r3, r7
  4051a8:	4671      	mov	r1, lr
  4051aa:	4622      	mov	r2, r4
  4051ac:	4640      	mov	r0, r8
  4051ae:	db02      	blt.n	4051b6 <__fputwc+0x66>
  4051b0:	f1be 0f0a 	cmp.w	lr, #10
  4051b4:	d1e7      	bne.n	405186 <__fputwc+0x36>
  4051b6:	f001 fa51 	bl	40665c <__swbuf_r>
  4051ba:	1c43      	adds	r3, r0, #1
  4051bc:	d1e8      	bne.n	405190 <__fputwc+0x40>
  4051be:	b002      	add	sp, #8
  4051c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4051c4:	89a3      	ldrh	r3, [r4, #12]
  4051c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051ca:	81a3      	strh	r3, [r4, #12]
  4051cc:	b002      	add	sp, #8
  4051ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4051d2:	f109 33ff 	add.w	r3, r9, #4294967295
  4051d6:	2bfe      	cmp	r3, #254	; 0xfe
  4051d8:	d8c4      	bhi.n	405164 <__fputwc+0x14>
  4051da:	fa5f fe89 	uxtb.w	lr, r9
  4051de:	4606      	mov	r6, r0
  4051e0:	f88d e004 	strb.w	lr, [sp, #4]
  4051e4:	e7cb      	b.n	40517e <__fputwc+0x2e>
  4051e6:	4648      	mov	r0, r9
  4051e8:	b002      	add	sp, #8
  4051ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4051ee:	bf00      	nop

004051f0 <_fputwc_r>:
  4051f0:	b530      	push	{r4, r5, lr}
  4051f2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4051f4:	f013 0f01 	tst.w	r3, #1
  4051f8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4051fc:	4614      	mov	r4, r2
  4051fe:	b083      	sub	sp, #12
  405200:	4605      	mov	r5, r0
  405202:	b29a      	uxth	r2, r3
  405204:	d101      	bne.n	40520a <_fputwc_r+0x1a>
  405206:	0590      	lsls	r0, r2, #22
  405208:	d51c      	bpl.n	405244 <_fputwc_r+0x54>
  40520a:	0490      	lsls	r0, r2, #18
  40520c:	d406      	bmi.n	40521c <_fputwc_r+0x2c>
  40520e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405218:	81a3      	strh	r3, [r4, #12]
  40521a:	6662      	str	r2, [r4, #100]	; 0x64
  40521c:	4628      	mov	r0, r5
  40521e:	4622      	mov	r2, r4
  405220:	f7ff ff96 	bl	405150 <__fputwc>
  405224:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405226:	07da      	lsls	r2, r3, #31
  405228:	4605      	mov	r5, r0
  40522a:	d402      	bmi.n	405232 <_fputwc_r+0x42>
  40522c:	89a3      	ldrh	r3, [r4, #12]
  40522e:	059b      	lsls	r3, r3, #22
  405230:	d502      	bpl.n	405238 <_fputwc_r+0x48>
  405232:	4628      	mov	r0, r5
  405234:	b003      	add	sp, #12
  405236:	bd30      	pop	{r4, r5, pc}
  405238:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40523a:	f000 faf9 	bl	405830 <__retarget_lock_release_recursive>
  40523e:	4628      	mov	r0, r5
  405240:	b003      	add	sp, #12
  405242:	bd30      	pop	{r4, r5, pc}
  405244:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405246:	9101      	str	r1, [sp, #4]
  405248:	f000 faf0 	bl	40582c <__retarget_lock_acquire_recursive>
  40524c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405250:	9901      	ldr	r1, [sp, #4]
  405252:	b29a      	uxth	r2, r3
  405254:	e7d9      	b.n	40520a <_fputwc_r+0x1a>
  405256:	bf00      	nop

00405258 <_malloc_trim_r>:
  405258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40525a:	4f24      	ldr	r7, [pc, #144]	; (4052ec <_malloc_trim_r+0x94>)
  40525c:	460c      	mov	r4, r1
  40525e:	4606      	mov	r6, r0
  405260:	f000 ff7c 	bl	40615c <__malloc_lock>
  405264:	68bb      	ldr	r3, [r7, #8]
  405266:	685d      	ldr	r5, [r3, #4]
  405268:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40526c:	310f      	adds	r1, #15
  40526e:	f025 0503 	bic.w	r5, r5, #3
  405272:	4429      	add	r1, r5
  405274:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405278:	f021 010f 	bic.w	r1, r1, #15
  40527c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405280:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405284:	db07      	blt.n	405296 <_malloc_trim_r+0x3e>
  405286:	2100      	movs	r1, #0
  405288:	4630      	mov	r0, r6
  40528a:	f001 f919 	bl	4064c0 <_sbrk_r>
  40528e:	68bb      	ldr	r3, [r7, #8]
  405290:	442b      	add	r3, r5
  405292:	4298      	cmp	r0, r3
  405294:	d004      	beq.n	4052a0 <_malloc_trim_r+0x48>
  405296:	4630      	mov	r0, r6
  405298:	f000 ff66 	bl	406168 <__malloc_unlock>
  40529c:	2000      	movs	r0, #0
  40529e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052a0:	4261      	negs	r1, r4
  4052a2:	4630      	mov	r0, r6
  4052a4:	f001 f90c 	bl	4064c0 <_sbrk_r>
  4052a8:	3001      	adds	r0, #1
  4052aa:	d00d      	beq.n	4052c8 <_malloc_trim_r+0x70>
  4052ac:	4b10      	ldr	r3, [pc, #64]	; (4052f0 <_malloc_trim_r+0x98>)
  4052ae:	68ba      	ldr	r2, [r7, #8]
  4052b0:	6819      	ldr	r1, [r3, #0]
  4052b2:	1b2d      	subs	r5, r5, r4
  4052b4:	f045 0501 	orr.w	r5, r5, #1
  4052b8:	4630      	mov	r0, r6
  4052ba:	1b09      	subs	r1, r1, r4
  4052bc:	6055      	str	r5, [r2, #4]
  4052be:	6019      	str	r1, [r3, #0]
  4052c0:	f000 ff52 	bl	406168 <__malloc_unlock>
  4052c4:	2001      	movs	r0, #1
  4052c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052c8:	2100      	movs	r1, #0
  4052ca:	4630      	mov	r0, r6
  4052cc:	f001 f8f8 	bl	4064c0 <_sbrk_r>
  4052d0:	68ba      	ldr	r2, [r7, #8]
  4052d2:	1a83      	subs	r3, r0, r2
  4052d4:	2b0f      	cmp	r3, #15
  4052d6:	ddde      	ble.n	405296 <_malloc_trim_r+0x3e>
  4052d8:	4c06      	ldr	r4, [pc, #24]	; (4052f4 <_malloc_trim_r+0x9c>)
  4052da:	4905      	ldr	r1, [pc, #20]	; (4052f0 <_malloc_trim_r+0x98>)
  4052dc:	6824      	ldr	r4, [r4, #0]
  4052de:	f043 0301 	orr.w	r3, r3, #1
  4052e2:	1b00      	subs	r0, r0, r4
  4052e4:	6053      	str	r3, [r2, #4]
  4052e6:	6008      	str	r0, [r1, #0]
  4052e8:	e7d5      	b.n	405296 <_malloc_trim_r+0x3e>
  4052ea:	bf00      	nop
  4052ec:	20400690 	.word	0x20400690
  4052f0:	20400ff4 	.word	0x20400ff4
  4052f4:	20400a98 	.word	0x20400a98

004052f8 <_free_r>:
  4052f8:	2900      	cmp	r1, #0
  4052fa:	d044      	beq.n	405386 <_free_r+0x8e>
  4052fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405300:	460d      	mov	r5, r1
  405302:	4680      	mov	r8, r0
  405304:	f000 ff2a 	bl	40615c <__malloc_lock>
  405308:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40530c:	4969      	ldr	r1, [pc, #420]	; (4054b4 <_free_r+0x1bc>)
  40530e:	f027 0301 	bic.w	r3, r7, #1
  405312:	f1a5 0408 	sub.w	r4, r5, #8
  405316:	18e2      	adds	r2, r4, r3
  405318:	688e      	ldr	r6, [r1, #8]
  40531a:	6850      	ldr	r0, [r2, #4]
  40531c:	42b2      	cmp	r2, r6
  40531e:	f020 0003 	bic.w	r0, r0, #3
  405322:	d05e      	beq.n	4053e2 <_free_r+0xea>
  405324:	07fe      	lsls	r6, r7, #31
  405326:	6050      	str	r0, [r2, #4]
  405328:	d40b      	bmi.n	405342 <_free_r+0x4a>
  40532a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40532e:	1be4      	subs	r4, r4, r7
  405330:	f101 0e08 	add.w	lr, r1, #8
  405334:	68a5      	ldr	r5, [r4, #8]
  405336:	4575      	cmp	r5, lr
  405338:	443b      	add	r3, r7
  40533a:	d06d      	beq.n	405418 <_free_r+0x120>
  40533c:	68e7      	ldr	r7, [r4, #12]
  40533e:	60ef      	str	r7, [r5, #12]
  405340:	60bd      	str	r5, [r7, #8]
  405342:	1815      	adds	r5, r2, r0
  405344:	686d      	ldr	r5, [r5, #4]
  405346:	07ed      	lsls	r5, r5, #31
  405348:	d53e      	bpl.n	4053c8 <_free_r+0xd0>
  40534a:	f043 0201 	orr.w	r2, r3, #1
  40534e:	6062      	str	r2, [r4, #4]
  405350:	50e3      	str	r3, [r4, r3]
  405352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405356:	d217      	bcs.n	405388 <_free_r+0x90>
  405358:	08db      	lsrs	r3, r3, #3
  40535a:	1c58      	adds	r0, r3, #1
  40535c:	109a      	asrs	r2, r3, #2
  40535e:	684d      	ldr	r5, [r1, #4]
  405360:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405364:	60a7      	str	r7, [r4, #8]
  405366:	2301      	movs	r3, #1
  405368:	4093      	lsls	r3, r2
  40536a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40536e:	432b      	orrs	r3, r5
  405370:	3a08      	subs	r2, #8
  405372:	60e2      	str	r2, [r4, #12]
  405374:	604b      	str	r3, [r1, #4]
  405376:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40537a:	60fc      	str	r4, [r7, #12]
  40537c:	4640      	mov	r0, r8
  40537e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405382:	f000 bef1 	b.w	406168 <__malloc_unlock>
  405386:	4770      	bx	lr
  405388:	0a5a      	lsrs	r2, r3, #9
  40538a:	2a04      	cmp	r2, #4
  40538c:	d852      	bhi.n	405434 <_free_r+0x13c>
  40538e:	099a      	lsrs	r2, r3, #6
  405390:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405394:	00ff      	lsls	r7, r7, #3
  405396:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40539a:	19c8      	adds	r0, r1, r7
  40539c:	59ca      	ldr	r2, [r1, r7]
  40539e:	3808      	subs	r0, #8
  4053a0:	4290      	cmp	r0, r2
  4053a2:	d04f      	beq.n	405444 <_free_r+0x14c>
  4053a4:	6851      	ldr	r1, [r2, #4]
  4053a6:	f021 0103 	bic.w	r1, r1, #3
  4053aa:	428b      	cmp	r3, r1
  4053ac:	d232      	bcs.n	405414 <_free_r+0x11c>
  4053ae:	6892      	ldr	r2, [r2, #8]
  4053b0:	4290      	cmp	r0, r2
  4053b2:	d1f7      	bne.n	4053a4 <_free_r+0xac>
  4053b4:	68c3      	ldr	r3, [r0, #12]
  4053b6:	60a0      	str	r0, [r4, #8]
  4053b8:	60e3      	str	r3, [r4, #12]
  4053ba:	609c      	str	r4, [r3, #8]
  4053bc:	60c4      	str	r4, [r0, #12]
  4053be:	4640      	mov	r0, r8
  4053c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4053c4:	f000 bed0 	b.w	406168 <__malloc_unlock>
  4053c8:	6895      	ldr	r5, [r2, #8]
  4053ca:	4f3b      	ldr	r7, [pc, #236]	; (4054b8 <_free_r+0x1c0>)
  4053cc:	42bd      	cmp	r5, r7
  4053ce:	4403      	add	r3, r0
  4053d0:	d040      	beq.n	405454 <_free_r+0x15c>
  4053d2:	68d0      	ldr	r0, [r2, #12]
  4053d4:	60e8      	str	r0, [r5, #12]
  4053d6:	f043 0201 	orr.w	r2, r3, #1
  4053da:	6085      	str	r5, [r0, #8]
  4053dc:	6062      	str	r2, [r4, #4]
  4053de:	50e3      	str	r3, [r4, r3]
  4053e0:	e7b7      	b.n	405352 <_free_r+0x5a>
  4053e2:	07ff      	lsls	r7, r7, #31
  4053e4:	4403      	add	r3, r0
  4053e6:	d407      	bmi.n	4053f8 <_free_r+0x100>
  4053e8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4053ec:	1aa4      	subs	r4, r4, r2
  4053ee:	4413      	add	r3, r2
  4053f0:	68a0      	ldr	r0, [r4, #8]
  4053f2:	68e2      	ldr	r2, [r4, #12]
  4053f4:	60c2      	str	r2, [r0, #12]
  4053f6:	6090      	str	r0, [r2, #8]
  4053f8:	4a30      	ldr	r2, [pc, #192]	; (4054bc <_free_r+0x1c4>)
  4053fa:	6812      	ldr	r2, [r2, #0]
  4053fc:	f043 0001 	orr.w	r0, r3, #1
  405400:	4293      	cmp	r3, r2
  405402:	6060      	str	r0, [r4, #4]
  405404:	608c      	str	r4, [r1, #8]
  405406:	d3b9      	bcc.n	40537c <_free_r+0x84>
  405408:	4b2d      	ldr	r3, [pc, #180]	; (4054c0 <_free_r+0x1c8>)
  40540a:	4640      	mov	r0, r8
  40540c:	6819      	ldr	r1, [r3, #0]
  40540e:	f7ff ff23 	bl	405258 <_malloc_trim_r>
  405412:	e7b3      	b.n	40537c <_free_r+0x84>
  405414:	4610      	mov	r0, r2
  405416:	e7cd      	b.n	4053b4 <_free_r+0xbc>
  405418:	1811      	adds	r1, r2, r0
  40541a:	6849      	ldr	r1, [r1, #4]
  40541c:	07c9      	lsls	r1, r1, #31
  40541e:	d444      	bmi.n	4054aa <_free_r+0x1b2>
  405420:	6891      	ldr	r1, [r2, #8]
  405422:	68d2      	ldr	r2, [r2, #12]
  405424:	60ca      	str	r2, [r1, #12]
  405426:	4403      	add	r3, r0
  405428:	f043 0001 	orr.w	r0, r3, #1
  40542c:	6091      	str	r1, [r2, #8]
  40542e:	6060      	str	r0, [r4, #4]
  405430:	50e3      	str	r3, [r4, r3]
  405432:	e7a3      	b.n	40537c <_free_r+0x84>
  405434:	2a14      	cmp	r2, #20
  405436:	d816      	bhi.n	405466 <_free_r+0x16e>
  405438:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40543c:	00ff      	lsls	r7, r7, #3
  40543e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405442:	e7aa      	b.n	40539a <_free_r+0xa2>
  405444:	10aa      	asrs	r2, r5, #2
  405446:	2301      	movs	r3, #1
  405448:	684d      	ldr	r5, [r1, #4]
  40544a:	4093      	lsls	r3, r2
  40544c:	432b      	orrs	r3, r5
  40544e:	604b      	str	r3, [r1, #4]
  405450:	4603      	mov	r3, r0
  405452:	e7b0      	b.n	4053b6 <_free_r+0xbe>
  405454:	f043 0201 	orr.w	r2, r3, #1
  405458:	614c      	str	r4, [r1, #20]
  40545a:	610c      	str	r4, [r1, #16]
  40545c:	60e5      	str	r5, [r4, #12]
  40545e:	60a5      	str	r5, [r4, #8]
  405460:	6062      	str	r2, [r4, #4]
  405462:	50e3      	str	r3, [r4, r3]
  405464:	e78a      	b.n	40537c <_free_r+0x84>
  405466:	2a54      	cmp	r2, #84	; 0x54
  405468:	d806      	bhi.n	405478 <_free_r+0x180>
  40546a:	0b1a      	lsrs	r2, r3, #12
  40546c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405470:	00ff      	lsls	r7, r7, #3
  405472:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405476:	e790      	b.n	40539a <_free_r+0xa2>
  405478:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40547c:	d806      	bhi.n	40548c <_free_r+0x194>
  40547e:	0bda      	lsrs	r2, r3, #15
  405480:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405484:	00ff      	lsls	r7, r7, #3
  405486:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40548a:	e786      	b.n	40539a <_free_r+0xa2>
  40548c:	f240 5054 	movw	r0, #1364	; 0x554
  405490:	4282      	cmp	r2, r0
  405492:	d806      	bhi.n	4054a2 <_free_r+0x1aa>
  405494:	0c9a      	lsrs	r2, r3, #18
  405496:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40549a:	00ff      	lsls	r7, r7, #3
  40549c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4054a0:	e77b      	b.n	40539a <_free_r+0xa2>
  4054a2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4054a6:	257e      	movs	r5, #126	; 0x7e
  4054a8:	e777      	b.n	40539a <_free_r+0xa2>
  4054aa:	f043 0101 	orr.w	r1, r3, #1
  4054ae:	6061      	str	r1, [r4, #4]
  4054b0:	6013      	str	r3, [r2, #0]
  4054b2:	e763      	b.n	40537c <_free_r+0x84>
  4054b4:	20400690 	.word	0x20400690
  4054b8:	20400698 	.word	0x20400698
  4054bc:	20400a9c 	.word	0x20400a9c
  4054c0:	20401024 	.word	0x20401024

004054c4 <__sfvwrite_r>:
  4054c4:	6893      	ldr	r3, [r2, #8]
  4054c6:	2b00      	cmp	r3, #0
  4054c8:	d073      	beq.n	4055b2 <__sfvwrite_r+0xee>
  4054ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054ce:	898b      	ldrh	r3, [r1, #12]
  4054d0:	b083      	sub	sp, #12
  4054d2:	460c      	mov	r4, r1
  4054d4:	0719      	lsls	r1, r3, #28
  4054d6:	9000      	str	r0, [sp, #0]
  4054d8:	4616      	mov	r6, r2
  4054da:	d526      	bpl.n	40552a <__sfvwrite_r+0x66>
  4054dc:	6922      	ldr	r2, [r4, #16]
  4054de:	b322      	cbz	r2, 40552a <__sfvwrite_r+0x66>
  4054e0:	f013 0002 	ands.w	r0, r3, #2
  4054e4:	6835      	ldr	r5, [r6, #0]
  4054e6:	d02c      	beq.n	405542 <__sfvwrite_r+0x7e>
  4054e8:	f04f 0900 	mov.w	r9, #0
  4054ec:	4fb0      	ldr	r7, [pc, #704]	; (4057b0 <__sfvwrite_r+0x2ec>)
  4054ee:	46c8      	mov	r8, r9
  4054f0:	46b2      	mov	sl, r6
  4054f2:	45b8      	cmp	r8, r7
  4054f4:	4643      	mov	r3, r8
  4054f6:	464a      	mov	r2, r9
  4054f8:	bf28      	it	cs
  4054fa:	463b      	movcs	r3, r7
  4054fc:	9800      	ldr	r0, [sp, #0]
  4054fe:	f1b8 0f00 	cmp.w	r8, #0
  405502:	d050      	beq.n	4055a6 <__sfvwrite_r+0xe2>
  405504:	69e1      	ldr	r1, [r4, #28]
  405506:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405508:	47b0      	blx	r6
  40550a:	2800      	cmp	r0, #0
  40550c:	dd58      	ble.n	4055c0 <__sfvwrite_r+0xfc>
  40550e:	f8da 3008 	ldr.w	r3, [sl, #8]
  405512:	1a1b      	subs	r3, r3, r0
  405514:	4481      	add	r9, r0
  405516:	eba8 0800 	sub.w	r8, r8, r0
  40551a:	f8ca 3008 	str.w	r3, [sl, #8]
  40551e:	2b00      	cmp	r3, #0
  405520:	d1e7      	bne.n	4054f2 <__sfvwrite_r+0x2e>
  405522:	2000      	movs	r0, #0
  405524:	b003      	add	sp, #12
  405526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40552a:	4621      	mov	r1, r4
  40552c:	9800      	ldr	r0, [sp, #0]
  40552e:	f7ff fc51 	bl	404dd4 <__swsetup_r>
  405532:	2800      	cmp	r0, #0
  405534:	f040 8133 	bne.w	40579e <__sfvwrite_r+0x2da>
  405538:	89a3      	ldrh	r3, [r4, #12]
  40553a:	6835      	ldr	r5, [r6, #0]
  40553c:	f013 0002 	ands.w	r0, r3, #2
  405540:	d1d2      	bne.n	4054e8 <__sfvwrite_r+0x24>
  405542:	f013 0901 	ands.w	r9, r3, #1
  405546:	d145      	bne.n	4055d4 <__sfvwrite_r+0x110>
  405548:	464f      	mov	r7, r9
  40554a:	9601      	str	r6, [sp, #4]
  40554c:	b337      	cbz	r7, 40559c <__sfvwrite_r+0xd8>
  40554e:	059a      	lsls	r2, r3, #22
  405550:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405554:	f140 8083 	bpl.w	40565e <__sfvwrite_r+0x19a>
  405558:	4547      	cmp	r7, r8
  40555a:	46c3      	mov	fp, r8
  40555c:	f0c0 80ab 	bcc.w	4056b6 <__sfvwrite_r+0x1f2>
  405560:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405564:	f040 80ac 	bne.w	4056c0 <__sfvwrite_r+0x1fc>
  405568:	6820      	ldr	r0, [r4, #0]
  40556a:	46ba      	mov	sl, r7
  40556c:	465a      	mov	r2, fp
  40556e:	4649      	mov	r1, r9
  405570:	f000 fd90 	bl	406094 <memmove>
  405574:	68a2      	ldr	r2, [r4, #8]
  405576:	6823      	ldr	r3, [r4, #0]
  405578:	eba2 0208 	sub.w	r2, r2, r8
  40557c:	445b      	add	r3, fp
  40557e:	60a2      	str	r2, [r4, #8]
  405580:	6023      	str	r3, [r4, #0]
  405582:	9a01      	ldr	r2, [sp, #4]
  405584:	6893      	ldr	r3, [r2, #8]
  405586:	eba3 030a 	sub.w	r3, r3, sl
  40558a:	44d1      	add	r9, sl
  40558c:	eba7 070a 	sub.w	r7, r7, sl
  405590:	6093      	str	r3, [r2, #8]
  405592:	2b00      	cmp	r3, #0
  405594:	d0c5      	beq.n	405522 <__sfvwrite_r+0x5e>
  405596:	89a3      	ldrh	r3, [r4, #12]
  405598:	2f00      	cmp	r7, #0
  40559a:	d1d8      	bne.n	40554e <__sfvwrite_r+0x8a>
  40559c:	f8d5 9000 	ldr.w	r9, [r5]
  4055a0:	686f      	ldr	r7, [r5, #4]
  4055a2:	3508      	adds	r5, #8
  4055a4:	e7d2      	b.n	40554c <__sfvwrite_r+0x88>
  4055a6:	f8d5 9000 	ldr.w	r9, [r5]
  4055aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4055ae:	3508      	adds	r5, #8
  4055b0:	e79f      	b.n	4054f2 <__sfvwrite_r+0x2e>
  4055b2:	2000      	movs	r0, #0
  4055b4:	4770      	bx	lr
  4055b6:	4621      	mov	r1, r4
  4055b8:	9800      	ldr	r0, [sp, #0]
  4055ba:	f7ff fd1f 	bl	404ffc <_fflush_r>
  4055be:	b370      	cbz	r0, 40561e <__sfvwrite_r+0x15a>
  4055c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4055c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4055c8:	f04f 30ff 	mov.w	r0, #4294967295
  4055cc:	81a3      	strh	r3, [r4, #12]
  4055ce:	b003      	add	sp, #12
  4055d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055d4:	4681      	mov	r9, r0
  4055d6:	4633      	mov	r3, r6
  4055d8:	464e      	mov	r6, r9
  4055da:	46a8      	mov	r8, r5
  4055dc:	469a      	mov	sl, r3
  4055de:	464d      	mov	r5, r9
  4055e0:	b34e      	cbz	r6, 405636 <__sfvwrite_r+0x172>
  4055e2:	b380      	cbz	r0, 405646 <__sfvwrite_r+0x182>
  4055e4:	6820      	ldr	r0, [r4, #0]
  4055e6:	6923      	ldr	r3, [r4, #16]
  4055e8:	6962      	ldr	r2, [r4, #20]
  4055ea:	45b1      	cmp	r9, r6
  4055ec:	46cb      	mov	fp, r9
  4055ee:	bf28      	it	cs
  4055f0:	46b3      	movcs	fp, r6
  4055f2:	4298      	cmp	r0, r3
  4055f4:	465f      	mov	r7, fp
  4055f6:	d904      	bls.n	405602 <__sfvwrite_r+0x13e>
  4055f8:	68a3      	ldr	r3, [r4, #8]
  4055fa:	4413      	add	r3, r2
  4055fc:	459b      	cmp	fp, r3
  4055fe:	f300 80a6 	bgt.w	40574e <__sfvwrite_r+0x28a>
  405602:	4593      	cmp	fp, r2
  405604:	db4b      	blt.n	40569e <__sfvwrite_r+0x1da>
  405606:	4613      	mov	r3, r2
  405608:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40560a:	69e1      	ldr	r1, [r4, #28]
  40560c:	9800      	ldr	r0, [sp, #0]
  40560e:	462a      	mov	r2, r5
  405610:	47b8      	blx	r7
  405612:	1e07      	subs	r7, r0, #0
  405614:	ddd4      	ble.n	4055c0 <__sfvwrite_r+0xfc>
  405616:	ebb9 0907 	subs.w	r9, r9, r7
  40561a:	d0cc      	beq.n	4055b6 <__sfvwrite_r+0xf2>
  40561c:	2001      	movs	r0, #1
  40561e:	f8da 3008 	ldr.w	r3, [sl, #8]
  405622:	1bdb      	subs	r3, r3, r7
  405624:	443d      	add	r5, r7
  405626:	1bf6      	subs	r6, r6, r7
  405628:	f8ca 3008 	str.w	r3, [sl, #8]
  40562c:	2b00      	cmp	r3, #0
  40562e:	f43f af78 	beq.w	405522 <__sfvwrite_r+0x5e>
  405632:	2e00      	cmp	r6, #0
  405634:	d1d5      	bne.n	4055e2 <__sfvwrite_r+0x11e>
  405636:	f108 0308 	add.w	r3, r8, #8
  40563a:	e913 0060 	ldmdb	r3, {r5, r6}
  40563e:	4698      	mov	r8, r3
  405640:	3308      	adds	r3, #8
  405642:	2e00      	cmp	r6, #0
  405644:	d0f9      	beq.n	40563a <__sfvwrite_r+0x176>
  405646:	4632      	mov	r2, r6
  405648:	210a      	movs	r1, #10
  40564a:	4628      	mov	r0, r5
  40564c:	f000 fc38 	bl	405ec0 <memchr>
  405650:	2800      	cmp	r0, #0
  405652:	f000 80a1 	beq.w	405798 <__sfvwrite_r+0x2d4>
  405656:	3001      	adds	r0, #1
  405658:	eba0 0905 	sub.w	r9, r0, r5
  40565c:	e7c2      	b.n	4055e4 <__sfvwrite_r+0x120>
  40565e:	6820      	ldr	r0, [r4, #0]
  405660:	6923      	ldr	r3, [r4, #16]
  405662:	4298      	cmp	r0, r3
  405664:	d802      	bhi.n	40566c <__sfvwrite_r+0x1a8>
  405666:	6963      	ldr	r3, [r4, #20]
  405668:	429f      	cmp	r7, r3
  40566a:	d25d      	bcs.n	405728 <__sfvwrite_r+0x264>
  40566c:	45b8      	cmp	r8, r7
  40566e:	bf28      	it	cs
  405670:	46b8      	movcs	r8, r7
  405672:	4642      	mov	r2, r8
  405674:	4649      	mov	r1, r9
  405676:	f000 fd0d 	bl	406094 <memmove>
  40567a:	68a3      	ldr	r3, [r4, #8]
  40567c:	6822      	ldr	r2, [r4, #0]
  40567e:	eba3 0308 	sub.w	r3, r3, r8
  405682:	4442      	add	r2, r8
  405684:	60a3      	str	r3, [r4, #8]
  405686:	6022      	str	r2, [r4, #0]
  405688:	b10b      	cbz	r3, 40568e <__sfvwrite_r+0x1ca>
  40568a:	46c2      	mov	sl, r8
  40568c:	e779      	b.n	405582 <__sfvwrite_r+0xbe>
  40568e:	4621      	mov	r1, r4
  405690:	9800      	ldr	r0, [sp, #0]
  405692:	f7ff fcb3 	bl	404ffc <_fflush_r>
  405696:	2800      	cmp	r0, #0
  405698:	d192      	bne.n	4055c0 <__sfvwrite_r+0xfc>
  40569a:	46c2      	mov	sl, r8
  40569c:	e771      	b.n	405582 <__sfvwrite_r+0xbe>
  40569e:	465a      	mov	r2, fp
  4056a0:	4629      	mov	r1, r5
  4056a2:	f000 fcf7 	bl	406094 <memmove>
  4056a6:	68a2      	ldr	r2, [r4, #8]
  4056a8:	6823      	ldr	r3, [r4, #0]
  4056aa:	eba2 020b 	sub.w	r2, r2, fp
  4056ae:	445b      	add	r3, fp
  4056b0:	60a2      	str	r2, [r4, #8]
  4056b2:	6023      	str	r3, [r4, #0]
  4056b4:	e7af      	b.n	405616 <__sfvwrite_r+0x152>
  4056b6:	6820      	ldr	r0, [r4, #0]
  4056b8:	46b8      	mov	r8, r7
  4056ba:	46ba      	mov	sl, r7
  4056bc:	46bb      	mov	fp, r7
  4056be:	e755      	b.n	40556c <__sfvwrite_r+0xa8>
  4056c0:	6962      	ldr	r2, [r4, #20]
  4056c2:	6820      	ldr	r0, [r4, #0]
  4056c4:	6921      	ldr	r1, [r4, #16]
  4056c6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4056ca:	eba0 0a01 	sub.w	sl, r0, r1
  4056ce:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4056d2:	f10a 0001 	add.w	r0, sl, #1
  4056d6:	ea4f 0868 	mov.w	r8, r8, asr #1
  4056da:	4438      	add	r0, r7
  4056dc:	4540      	cmp	r0, r8
  4056de:	4642      	mov	r2, r8
  4056e0:	bf84      	itt	hi
  4056e2:	4680      	movhi	r8, r0
  4056e4:	4642      	movhi	r2, r8
  4056e6:	055b      	lsls	r3, r3, #21
  4056e8:	d544      	bpl.n	405774 <__sfvwrite_r+0x2b0>
  4056ea:	4611      	mov	r1, r2
  4056ec:	9800      	ldr	r0, [sp, #0]
  4056ee:	f000 f921 	bl	405934 <_malloc_r>
  4056f2:	4683      	mov	fp, r0
  4056f4:	2800      	cmp	r0, #0
  4056f6:	d055      	beq.n	4057a4 <__sfvwrite_r+0x2e0>
  4056f8:	4652      	mov	r2, sl
  4056fa:	6921      	ldr	r1, [r4, #16]
  4056fc:	f000 fc30 	bl	405f60 <memcpy>
  405700:	89a3      	ldrh	r3, [r4, #12]
  405702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40570a:	81a3      	strh	r3, [r4, #12]
  40570c:	eb0b 000a 	add.w	r0, fp, sl
  405710:	eba8 030a 	sub.w	r3, r8, sl
  405714:	f8c4 b010 	str.w	fp, [r4, #16]
  405718:	f8c4 8014 	str.w	r8, [r4, #20]
  40571c:	6020      	str	r0, [r4, #0]
  40571e:	60a3      	str	r3, [r4, #8]
  405720:	46b8      	mov	r8, r7
  405722:	46ba      	mov	sl, r7
  405724:	46bb      	mov	fp, r7
  405726:	e721      	b.n	40556c <__sfvwrite_r+0xa8>
  405728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40572c:	42b9      	cmp	r1, r7
  40572e:	bf28      	it	cs
  405730:	4639      	movcs	r1, r7
  405732:	464a      	mov	r2, r9
  405734:	fb91 f1f3 	sdiv	r1, r1, r3
  405738:	9800      	ldr	r0, [sp, #0]
  40573a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40573c:	fb03 f301 	mul.w	r3, r3, r1
  405740:	69e1      	ldr	r1, [r4, #28]
  405742:	47b0      	blx	r6
  405744:	f1b0 0a00 	subs.w	sl, r0, #0
  405748:	f73f af1b 	bgt.w	405582 <__sfvwrite_r+0xbe>
  40574c:	e738      	b.n	4055c0 <__sfvwrite_r+0xfc>
  40574e:	461a      	mov	r2, r3
  405750:	4629      	mov	r1, r5
  405752:	9301      	str	r3, [sp, #4]
  405754:	f000 fc9e 	bl	406094 <memmove>
  405758:	6822      	ldr	r2, [r4, #0]
  40575a:	9b01      	ldr	r3, [sp, #4]
  40575c:	9800      	ldr	r0, [sp, #0]
  40575e:	441a      	add	r2, r3
  405760:	6022      	str	r2, [r4, #0]
  405762:	4621      	mov	r1, r4
  405764:	f7ff fc4a 	bl	404ffc <_fflush_r>
  405768:	9b01      	ldr	r3, [sp, #4]
  40576a:	2800      	cmp	r0, #0
  40576c:	f47f af28 	bne.w	4055c0 <__sfvwrite_r+0xfc>
  405770:	461f      	mov	r7, r3
  405772:	e750      	b.n	405616 <__sfvwrite_r+0x152>
  405774:	9800      	ldr	r0, [sp, #0]
  405776:	f000 fcfd 	bl	406174 <_realloc_r>
  40577a:	4683      	mov	fp, r0
  40577c:	2800      	cmp	r0, #0
  40577e:	d1c5      	bne.n	40570c <__sfvwrite_r+0x248>
  405780:	9d00      	ldr	r5, [sp, #0]
  405782:	6921      	ldr	r1, [r4, #16]
  405784:	4628      	mov	r0, r5
  405786:	f7ff fdb7 	bl	4052f8 <_free_r>
  40578a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40578e:	220c      	movs	r2, #12
  405790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405794:	602a      	str	r2, [r5, #0]
  405796:	e715      	b.n	4055c4 <__sfvwrite_r+0x100>
  405798:	f106 0901 	add.w	r9, r6, #1
  40579c:	e722      	b.n	4055e4 <__sfvwrite_r+0x120>
  40579e:	f04f 30ff 	mov.w	r0, #4294967295
  4057a2:	e6bf      	b.n	405524 <__sfvwrite_r+0x60>
  4057a4:	9a00      	ldr	r2, [sp, #0]
  4057a6:	230c      	movs	r3, #12
  4057a8:	6013      	str	r3, [r2, #0]
  4057aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4057ae:	e709      	b.n	4055c4 <__sfvwrite_r+0x100>
  4057b0:	7ffffc00 	.word	0x7ffffc00

004057b4 <_fwalk_reent>:
  4057b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4057b8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4057bc:	d01f      	beq.n	4057fe <_fwalk_reent+0x4a>
  4057be:	4688      	mov	r8, r1
  4057c0:	4606      	mov	r6, r0
  4057c2:	f04f 0900 	mov.w	r9, #0
  4057c6:	687d      	ldr	r5, [r7, #4]
  4057c8:	68bc      	ldr	r4, [r7, #8]
  4057ca:	3d01      	subs	r5, #1
  4057cc:	d411      	bmi.n	4057f2 <_fwalk_reent+0x3e>
  4057ce:	89a3      	ldrh	r3, [r4, #12]
  4057d0:	2b01      	cmp	r3, #1
  4057d2:	f105 35ff 	add.w	r5, r5, #4294967295
  4057d6:	d908      	bls.n	4057ea <_fwalk_reent+0x36>
  4057d8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4057dc:	3301      	adds	r3, #1
  4057de:	4621      	mov	r1, r4
  4057e0:	4630      	mov	r0, r6
  4057e2:	d002      	beq.n	4057ea <_fwalk_reent+0x36>
  4057e4:	47c0      	blx	r8
  4057e6:	ea49 0900 	orr.w	r9, r9, r0
  4057ea:	1c6b      	adds	r3, r5, #1
  4057ec:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4057f0:	d1ed      	bne.n	4057ce <_fwalk_reent+0x1a>
  4057f2:	683f      	ldr	r7, [r7, #0]
  4057f4:	2f00      	cmp	r7, #0
  4057f6:	d1e6      	bne.n	4057c6 <_fwalk_reent+0x12>
  4057f8:	4648      	mov	r0, r9
  4057fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4057fe:	46b9      	mov	r9, r7
  405800:	4648      	mov	r0, r9
  405802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405806:	bf00      	nop

00405808 <__locale_mb_cur_max>:
  405808:	4b04      	ldr	r3, [pc, #16]	; (40581c <__locale_mb_cur_max+0x14>)
  40580a:	4a05      	ldr	r2, [pc, #20]	; (405820 <__locale_mb_cur_max+0x18>)
  40580c:	681b      	ldr	r3, [r3, #0]
  40580e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405810:	2b00      	cmp	r3, #0
  405812:	bf08      	it	eq
  405814:	4613      	moveq	r3, r2
  405816:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40581a:	4770      	bx	lr
  40581c:	204000f0 	.word	0x204000f0
  405820:	20400524 	.word	0x20400524

00405824 <__retarget_lock_init_recursive>:
  405824:	4770      	bx	lr
  405826:	bf00      	nop

00405828 <__retarget_lock_close_recursive>:
  405828:	4770      	bx	lr
  40582a:	bf00      	nop

0040582c <__retarget_lock_acquire_recursive>:
  40582c:	4770      	bx	lr
  40582e:	bf00      	nop

00405830 <__retarget_lock_release_recursive>:
  405830:	4770      	bx	lr
  405832:	bf00      	nop

00405834 <__swhatbuf_r>:
  405834:	b570      	push	{r4, r5, r6, lr}
  405836:	460c      	mov	r4, r1
  405838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40583c:	2900      	cmp	r1, #0
  40583e:	b090      	sub	sp, #64	; 0x40
  405840:	4615      	mov	r5, r2
  405842:	461e      	mov	r6, r3
  405844:	db14      	blt.n	405870 <__swhatbuf_r+0x3c>
  405846:	aa01      	add	r2, sp, #4
  405848:	f001 f884 	bl	406954 <_fstat_r>
  40584c:	2800      	cmp	r0, #0
  40584e:	db0f      	blt.n	405870 <__swhatbuf_r+0x3c>
  405850:	9a02      	ldr	r2, [sp, #8]
  405852:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405856:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40585a:	fab2 f282 	clz	r2, r2
  40585e:	0952      	lsrs	r2, r2, #5
  405860:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405864:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405868:	6032      	str	r2, [r6, #0]
  40586a:	602b      	str	r3, [r5, #0]
  40586c:	b010      	add	sp, #64	; 0x40
  40586e:	bd70      	pop	{r4, r5, r6, pc}
  405870:	89a2      	ldrh	r2, [r4, #12]
  405872:	2300      	movs	r3, #0
  405874:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405878:	6033      	str	r3, [r6, #0]
  40587a:	d004      	beq.n	405886 <__swhatbuf_r+0x52>
  40587c:	2240      	movs	r2, #64	; 0x40
  40587e:	4618      	mov	r0, r3
  405880:	602a      	str	r2, [r5, #0]
  405882:	b010      	add	sp, #64	; 0x40
  405884:	bd70      	pop	{r4, r5, r6, pc}
  405886:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40588a:	602b      	str	r3, [r5, #0]
  40588c:	b010      	add	sp, #64	; 0x40
  40588e:	bd70      	pop	{r4, r5, r6, pc}

00405890 <__smakebuf_r>:
  405890:	898a      	ldrh	r2, [r1, #12]
  405892:	0792      	lsls	r2, r2, #30
  405894:	460b      	mov	r3, r1
  405896:	d506      	bpl.n	4058a6 <__smakebuf_r+0x16>
  405898:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40589c:	2101      	movs	r1, #1
  40589e:	601a      	str	r2, [r3, #0]
  4058a0:	611a      	str	r2, [r3, #16]
  4058a2:	6159      	str	r1, [r3, #20]
  4058a4:	4770      	bx	lr
  4058a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4058a8:	b083      	sub	sp, #12
  4058aa:	ab01      	add	r3, sp, #4
  4058ac:	466a      	mov	r2, sp
  4058ae:	460c      	mov	r4, r1
  4058b0:	4606      	mov	r6, r0
  4058b2:	f7ff ffbf 	bl	405834 <__swhatbuf_r>
  4058b6:	9900      	ldr	r1, [sp, #0]
  4058b8:	4605      	mov	r5, r0
  4058ba:	4630      	mov	r0, r6
  4058bc:	f000 f83a 	bl	405934 <_malloc_r>
  4058c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4058c4:	b1d8      	cbz	r0, 4058fe <__smakebuf_r+0x6e>
  4058c6:	9a01      	ldr	r2, [sp, #4]
  4058c8:	4f15      	ldr	r7, [pc, #84]	; (405920 <__smakebuf_r+0x90>)
  4058ca:	9900      	ldr	r1, [sp, #0]
  4058cc:	63f7      	str	r7, [r6, #60]	; 0x3c
  4058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4058d2:	81a3      	strh	r3, [r4, #12]
  4058d4:	6020      	str	r0, [r4, #0]
  4058d6:	6120      	str	r0, [r4, #16]
  4058d8:	6161      	str	r1, [r4, #20]
  4058da:	b91a      	cbnz	r2, 4058e4 <__smakebuf_r+0x54>
  4058dc:	432b      	orrs	r3, r5
  4058de:	81a3      	strh	r3, [r4, #12]
  4058e0:	b003      	add	sp, #12
  4058e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4058e4:	4630      	mov	r0, r6
  4058e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4058ea:	f001 f847 	bl	40697c <_isatty_r>
  4058ee:	b1a0      	cbz	r0, 40591a <__smakebuf_r+0x8a>
  4058f0:	89a3      	ldrh	r3, [r4, #12]
  4058f2:	f023 0303 	bic.w	r3, r3, #3
  4058f6:	f043 0301 	orr.w	r3, r3, #1
  4058fa:	b21b      	sxth	r3, r3
  4058fc:	e7ee      	b.n	4058dc <__smakebuf_r+0x4c>
  4058fe:	059a      	lsls	r2, r3, #22
  405900:	d4ee      	bmi.n	4058e0 <__smakebuf_r+0x50>
  405902:	f023 0303 	bic.w	r3, r3, #3
  405906:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40590a:	f043 0302 	orr.w	r3, r3, #2
  40590e:	2101      	movs	r1, #1
  405910:	81a3      	strh	r3, [r4, #12]
  405912:	6022      	str	r2, [r4, #0]
  405914:	6122      	str	r2, [r4, #16]
  405916:	6161      	str	r1, [r4, #20]
  405918:	e7e2      	b.n	4058e0 <__smakebuf_r+0x50>
  40591a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40591e:	e7dd      	b.n	4058dc <__smakebuf_r+0x4c>
  405920:	00405051 	.word	0x00405051

00405924 <malloc>:
  405924:	4b02      	ldr	r3, [pc, #8]	; (405930 <malloc+0xc>)
  405926:	4601      	mov	r1, r0
  405928:	6818      	ldr	r0, [r3, #0]
  40592a:	f000 b803 	b.w	405934 <_malloc_r>
  40592e:	bf00      	nop
  405930:	204000f0 	.word	0x204000f0

00405934 <_malloc_r>:
  405934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405938:	f101 060b 	add.w	r6, r1, #11
  40593c:	2e16      	cmp	r6, #22
  40593e:	b083      	sub	sp, #12
  405940:	4605      	mov	r5, r0
  405942:	f240 809e 	bls.w	405a82 <_malloc_r+0x14e>
  405946:	f036 0607 	bics.w	r6, r6, #7
  40594a:	f100 80bd 	bmi.w	405ac8 <_malloc_r+0x194>
  40594e:	42b1      	cmp	r1, r6
  405950:	f200 80ba 	bhi.w	405ac8 <_malloc_r+0x194>
  405954:	f000 fc02 	bl	40615c <__malloc_lock>
  405958:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40595c:	f0c0 8293 	bcc.w	405e86 <_malloc_r+0x552>
  405960:	0a73      	lsrs	r3, r6, #9
  405962:	f000 80b8 	beq.w	405ad6 <_malloc_r+0x1a2>
  405966:	2b04      	cmp	r3, #4
  405968:	f200 8179 	bhi.w	405c5e <_malloc_r+0x32a>
  40596c:	09b3      	lsrs	r3, r6, #6
  40596e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405972:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405976:	00c3      	lsls	r3, r0, #3
  405978:	4fbf      	ldr	r7, [pc, #764]	; (405c78 <_malloc_r+0x344>)
  40597a:	443b      	add	r3, r7
  40597c:	f1a3 0108 	sub.w	r1, r3, #8
  405980:	685c      	ldr	r4, [r3, #4]
  405982:	42a1      	cmp	r1, r4
  405984:	d106      	bne.n	405994 <_malloc_r+0x60>
  405986:	e00c      	b.n	4059a2 <_malloc_r+0x6e>
  405988:	2a00      	cmp	r2, #0
  40598a:	f280 80aa 	bge.w	405ae2 <_malloc_r+0x1ae>
  40598e:	68e4      	ldr	r4, [r4, #12]
  405990:	42a1      	cmp	r1, r4
  405992:	d006      	beq.n	4059a2 <_malloc_r+0x6e>
  405994:	6863      	ldr	r3, [r4, #4]
  405996:	f023 0303 	bic.w	r3, r3, #3
  40599a:	1b9a      	subs	r2, r3, r6
  40599c:	2a0f      	cmp	r2, #15
  40599e:	ddf3      	ble.n	405988 <_malloc_r+0x54>
  4059a0:	4670      	mov	r0, lr
  4059a2:	693c      	ldr	r4, [r7, #16]
  4059a4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405c8c <_malloc_r+0x358>
  4059a8:	4574      	cmp	r4, lr
  4059aa:	f000 81ab 	beq.w	405d04 <_malloc_r+0x3d0>
  4059ae:	6863      	ldr	r3, [r4, #4]
  4059b0:	f023 0303 	bic.w	r3, r3, #3
  4059b4:	1b9a      	subs	r2, r3, r6
  4059b6:	2a0f      	cmp	r2, #15
  4059b8:	f300 8190 	bgt.w	405cdc <_malloc_r+0x3a8>
  4059bc:	2a00      	cmp	r2, #0
  4059be:	f8c7 e014 	str.w	lr, [r7, #20]
  4059c2:	f8c7 e010 	str.w	lr, [r7, #16]
  4059c6:	f280 809d 	bge.w	405b04 <_malloc_r+0x1d0>
  4059ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4059ce:	f080 8161 	bcs.w	405c94 <_malloc_r+0x360>
  4059d2:	08db      	lsrs	r3, r3, #3
  4059d4:	f103 0c01 	add.w	ip, r3, #1
  4059d8:	1099      	asrs	r1, r3, #2
  4059da:	687a      	ldr	r2, [r7, #4]
  4059dc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4059e0:	f8c4 8008 	str.w	r8, [r4, #8]
  4059e4:	2301      	movs	r3, #1
  4059e6:	408b      	lsls	r3, r1
  4059e8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4059ec:	4313      	orrs	r3, r2
  4059ee:	3908      	subs	r1, #8
  4059f0:	60e1      	str	r1, [r4, #12]
  4059f2:	607b      	str	r3, [r7, #4]
  4059f4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4059f8:	f8c8 400c 	str.w	r4, [r8, #12]
  4059fc:	1082      	asrs	r2, r0, #2
  4059fe:	2401      	movs	r4, #1
  405a00:	4094      	lsls	r4, r2
  405a02:	429c      	cmp	r4, r3
  405a04:	f200 808b 	bhi.w	405b1e <_malloc_r+0x1ea>
  405a08:	421c      	tst	r4, r3
  405a0a:	d106      	bne.n	405a1a <_malloc_r+0xe6>
  405a0c:	f020 0003 	bic.w	r0, r0, #3
  405a10:	0064      	lsls	r4, r4, #1
  405a12:	421c      	tst	r4, r3
  405a14:	f100 0004 	add.w	r0, r0, #4
  405a18:	d0fa      	beq.n	405a10 <_malloc_r+0xdc>
  405a1a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405a1e:	46cc      	mov	ip, r9
  405a20:	4680      	mov	r8, r0
  405a22:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405a26:	459c      	cmp	ip, r3
  405a28:	d107      	bne.n	405a3a <_malloc_r+0x106>
  405a2a:	e16d      	b.n	405d08 <_malloc_r+0x3d4>
  405a2c:	2a00      	cmp	r2, #0
  405a2e:	f280 817b 	bge.w	405d28 <_malloc_r+0x3f4>
  405a32:	68db      	ldr	r3, [r3, #12]
  405a34:	459c      	cmp	ip, r3
  405a36:	f000 8167 	beq.w	405d08 <_malloc_r+0x3d4>
  405a3a:	6859      	ldr	r1, [r3, #4]
  405a3c:	f021 0103 	bic.w	r1, r1, #3
  405a40:	1b8a      	subs	r2, r1, r6
  405a42:	2a0f      	cmp	r2, #15
  405a44:	ddf2      	ble.n	405a2c <_malloc_r+0xf8>
  405a46:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405a4a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405a4e:	9300      	str	r3, [sp, #0]
  405a50:	199c      	adds	r4, r3, r6
  405a52:	4628      	mov	r0, r5
  405a54:	f046 0601 	orr.w	r6, r6, #1
  405a58:	f042 0501 	orr.w	r5, r2, #1
  405a5c:	605e      	str	r6, [r3, #4]
  405a5e:	f8c8 c00c 	str.w	ip, [r8, #12]
  405a62:	f8cc 8008 	str.w	r8, [ip, #8]
  405a66:	617c      	str	r4, [r7, #20]
  405a68:	613c      	str	r4, [r7, #16]
  405a6a:	f8c4 e00c 	str.w	lr, [r4, #12]
  405a6e:	f8c4 e008 	str.w	lr, [r4, #8]
  405a72:	6065      	str	r5, [r4, #4]
  405a74:	505a      	str	r2, [r3, r1]
  405a76:	f000 fb77 	bl	406168 <__malloc_unlock>
  405a7a:	9b00      	ldr	r3, [sp, #0]
  405a7c:	f103 0408 	add.w	r4, r3, #8
  405a80:	e01e      	b.n	405ac0 <_malloc_r+0x18c>
  405a82:	2910      	cmp	r1, #16
  405a84:	d820      	bhi.n	405ac8 <_malloc_r+0x194>
  405a86:	f000 fb69 	bl	40615c <__malloc_lock>
  405a8a:	2610      	movs	r6, #16
  405a8c:	2318      	movs	r3, #24
  405a8e:	2002      	movs	r0, #2
  405a90:	4f79      	ldr	r7, [pc, #484]	; (405c78 <_malloc_r+0x344>)
  405a92:	443b      	add	r3, r7
  405a94:	f1a3 0208 	sub.w	r2, r3, #8
  405a98:	685c      	ldr	r4, [r3, #4]
  405a9a:	4294      	cmp	r4, r2
  405a9c:	f000 813d 	beq.w	405d1a <_malloc_r+0x3e6>
  405aa0:	6863      	ldr	r3, [r4, #4]
  405aa2:	68e1      	ldr	r1, [r4, #12]
  405aa4:	68a6      	ldr	r6, [r4, #8]
  405aa6:	f023 0303 	bic.w	r3, r3, #3
  405aaa:	4423      	add	r3, r4
  405aac:	4628      	mov	r0, r5
  405aae:	685a      	ldr	r2, [r3, #4]
  405ab0:	60f1      	str	r1, [r6, #12]
  405ab2:	f042 0201 	orr.w	r2, r2, #1
  405ab6:	608e      	str	r6, [r1, #8]
  405ab8:	605a      	str	r2, [r3, #4]
  405aba:	f000 fb55 	bl	406168 <__malloc_unlock>
  405abe:	3408      	adds	r4, #8
  405ac0:	4620      	mov	r0, r4
  405ac2:	b003      	add	sp, #12
  405ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ac8:	2400      	movs	r4, #0
  405aca:	230c      	movs	r3, #12
  405acc:	4620      	mov	r0, r4
  405ace:	602b      	str	r3, [r5, #0]
  405ad0:	b003      	add	sp, #12
  405ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ad6:	2040      	movs	r0, #64	; 0x40
  405ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
  405adc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405ae0:	e74a      	b.n	405978 <_malloc_r+0x44>
  405ae2:	4423      	add	r3, r4
  405ae4:	68e1      	ldr	r1, [r4, #12]
  405ae6:	685a      	ldr	r2, [r3, #4]
  405ae8:	68a6      	ldr	r6, [r4, #8]
  405aea:	f042 0201 	orr.w	r2, r2, #1
  405aee:	60f1      	str	r1, [r6, #12]
  405af0:	4628      	mov	r0, r5
  405af2:	608e      	str	r6, [r1, #8]
  405af4:	605a      	str	r2, [r3, #4]
  405af6:	f000 fb37 	bl	406168 <__malloc_unlock>
  405afa:	3408      	adds	r4, #8
  405afc:	4620      	mov	r0, r4
  405afe:	b003      	add	sp, #12
  405b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b04:	4423      	add	r3, r4
  405b06:	4628      	mov	r0, r5
  405b08:	685a      	ldr	r2, [r3, #4]
  405b0a:	f042 0201 	orr.w	r2, r2, #1
  405b0e:	605a      	str	r2, [r3, #4]
  405b10:	f000 fb2a 	bl	406168 <__malloc_unlock>
  405b14:	3408      	adds	r4, #8
  405b16:	4620      	mov	r0, r4
  405b18:	b003      	add	sp, #12
  405b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b1e:	68bc      	ldr	r4, [r7, #8]
  405b20:	6863      	ldr	r3, [r4, #4]
  405b22:	f023 0803 	bic.w	r8, r3, #3
  405b26:	45b0      	cmp	r8, r6
  405b28:	d304      	bcc.n	405b34 <_malloc_r+0x200>
  405b2a:	eba8 0306 	sub.w	r3, r8, r6
  405b2e:	2b0f      	cmp	r3, #15
  405b30:	f300 8085 	bgt.w	405c3e <_malloc_r+0x30a>
  405b34:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405c90 <_malloc_r+0x35c>
  405b38:	4b50      	ldr	r3, [pc, #320]	; (405c7c <_malloc_r+0x348>)
  405b3a:	f8d9 2000 	ldr.w	r2, [r9]
  405b3e:	681b      	ldr	r3, [r3, #0]
  405b40:	3201      	adds	r2, #1
  405b42:	4433      	add	r3, r6
  405b44:	eb04 0a08 	add.w	sl, r4, r8
  405b48:	f000 8155 	beq.w	405df6 <_malloc_r+0x4c2>
  405b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405b50:	330f      	adds	r3, #15
  405b52:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405b56:	f02b 0b0f 	bic.w	fp, fp, #15
  405b5a:	4659      	mov	r1, fp
  405b5c:	4628      	mov	r0, r5
  405b5e:	f000 fcaf 	bl	4064c0 <_sbrk_r>
  405b62:	1c41      	adds	r1, r0, #1
  405b64:	4602      	mov	r2, r0
  405b66:	f000 80fc 	beq.w	405d62 <_malloc_r+0x42e>
  405b6a:	4582      	cmp	sl, r0
  405b6c:	f200 80f7 	bhi.w	405d5e <_malloc_r+0x42a>
  405b70:	4b43      	ldr	r3, [pc, #268]	; (405c80 <_malloc_r+0x34c>)
  405b72:	6819      	ldr	r1, [r3, #0]
  405b74:	4459      	add	r1, fp
  405b76:	6019      	str	r1, [r3, #0]
  405b78:	f000 814d 	beq.w	405e16 <_malloc_r+0x4e2>
  405b7c:	f8d9 0000 	ldr.w	r0, [r9]
  405b80:	3001      	adds	r0, #1
  405b82:	bf1b      	ittet	ne
  405b84:	eba2 0a0a 	subne.w	sl, r2, sl
  405b88:	4451      	addne	r1, sl
  405b8a:	f8c9 2000 	streq.w	r2, [r9]
  405b8e:	6019      	strne	r1, [r3, #0]
  405b90:	f012 0107 	ands.w	r1, r2, #7
  405b94:	f000 8115 	beq.w	405dc2 <_malloc_r+0x48e>
  405b98:	f1c1 0008 	rsb	r0, r1, #8
  405b9c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405ba0:	4402      	add	r2, r0
  405ba2:	3108      	adds	r1, #8
  405ba4:	eb02 090b 	add.w	r9, r2, fp
  405ba8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405bac:	eba1 0909 	sub.w	r9, r1, r9
  405bb0:	4649      	mov	r1, r9
  405bb2:	4628      	mov	r0, r5
  405bb4:	9301      	str	r3, [sp, #4]
  405bb6:	9200      	str	r2, [sp, #0]
  405bb8:	f000 fc82 	bl	4064c0 <_sbrk_r>
  405bbc:	1c43      	adds	r3, r0, #1
  405bbe:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405bc2:	f000 8143 	beq.w	405e4c <_malloc_r+0x518>
  405bc6:	1a80      	subs	r0, r0, r2
  405bc8:	4448      	add	r0, r9
  405bca:	f040 0001 	orr.w	r0, r0, #1
  405bce:	6819      	ldr	r1, [r3, #0]
  405bd0:	60ba      	str	r2, [r7, #8]
  405bd2:	4449      	add	r1, r9
  405bd4:	42bc      	cmp	r4, r7
  405bd6:	6050      	str	r0, [r2, #4]
  405bd8:	6019      	str	r1, [r3, #0]
  405bda:	d017      	beq.n	405c0c <_malloc_r+0x2d8>
  405bdc:	f1b8 0f0f 	cmp.w	r8, #15
  405be0:	f240 80fb 	bls.w	405dda <_malloc_r+0x4a6>
  405be4:	6860      	ldr	r0, [r4, #4]
  405be6:	f1a8 020c 	sub.w	r2, r8, #12
  405bea:	f022 0207 	bic.w	r2, r2, #7
  405bee:	eb04 0e02 	add.w	lr, r4, r2
  405bf2:	f000 0001 	and.w	r0, r0, #1
  405bf6:	f04f 0c05 	mov.w	ip, #5
  405bfa:	4310      	orrs	r0, r2
  405bfc:	2a0f      	cmp	r2, #15
  405bfe:	6060      	str	r0, [r4, #4]
  405c00:	f8ce c004 	str.w	ip, [lr, #4]
  405c04:	f8ce c008 	str.w	ip, [lr, #8]
  405c08:	f200 8117 	bhi.w	405e3a <_malloc_r+0x506>
  405c0c:	4b1d      	ldr	r3, [pc, #116]	; (405c84 <_malloc_r+0x350>)
  405c0e:	68bc      	ldr	r4, [r7, #8]
  405c10:	681a      	ldr	r2, [r3, #0]
  405c12:	4291      	cmp	r1, r2
  405c14:	bf88      	it	hi
  405c16:	6019      	strhi	r1, [r3, #0]
  405c18:	4b1b      	ldr	r3, [pc, #108]	; (405c88 <_malloc_r+0x354>)
  405c1a:	681a      	ldr	r2, [r3, #0]
  405c1c:	4291      	cmp	r1, r2
  405c1e:	6862      	ldr	r2, [r4, #4]
  405c20:	bf88      	it	hi
  405c22:	6019      	strhi	r1, [r3, #0]
  405c24:	f022 0203 	bic.w	r2, r2, #3
  405c28:	4296      	cmp	r6, r2
  405c2a:	eba2 0306 	sub.w	r3, r2, r6
  405c2e:	d801      	bhi.n	405c34 <_malloc_r+0x300>
  405c30:	2b0f      	cmp	r3, #15
  405c32:	dc04      	bgt.n	405c3e <_malloc_r+0x30a>
  405c34:	4628      	mov	r0, r5
  405c36:	f000 fa97 	bl	406168 <__malloc_unlock>
  405c3a:	2400      	movs	r4, #0
  405c3c:	e740      	b.n	405ac0 <_malloc_r+0x18c>
  405c3e:	19a2      	adds	r2, r4, r6
  405c40:	f043 0301 	orr.w	r3, r3, #1
  405c44:	f046 0601 	orr.w	r6, r6, #1
  405c48:	6066      	str	r6, [r4, #4]
  405c4a:	4628      	mov	r0, r5
  405c4c:	60ba      	str	r2, [r7, #8]
  405c4e:	6053      	str	r3, [r2, #4]
  405c50:	f000 fa8a 	bl	406168 <__malloc_unlock>
  405c54:	3408      	adds	r4, #8
  405c56:	4620      	mov	r0, r4
  405c58:	b003      	add	sp, #12
  405c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c5e:	2b14      	cmp	r3, #20
  405c60:	d971      	bls.n	405d46 <_malloc_r+0x412>
  405c62:	2b54      	cmp	r3, #84	; 0x54
  405c64:	f200 80a3 	bhi.w	405dae <_malloc_r+0x47a>
  405c68:	0b33      	lsrs	r3, r6, #12
  405c6a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405c6e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  405c72:	00c3      	lsls	r3, r0, #3
  405c74:	e680      	b.n	405978 <_malloc_r+0x44>
  405c76:	bf00      	nop
  405c78:	20400690 	.word	0x20400690
  405c7c:	20401024 	.word	0x20401024
  405c80:	20400ff4 	.word	0x20400ff4
  405c84:	2040101c 	.word	0x2040101c
  405c88:	20401020 	.word	0x20401020
  405c8c:	20400698 	.word	0x20400698
  405c90:	20400a98 	.word	0x20400a98
  405c94:	0a5a      	lsrs	r2, r3, #9
  405c96:	2a04      	cmp	r2, #4
  405c98:	d95b      	bls.n	405d52 <_malloc_r+0x41e>
  405c9a:	2a14      	cmp	r2, #20
  405c9c:	f200 80ae 	bhi.w	405dfc <_malloc_r+0x4c8>
  405ca0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405ca4:	00c9      	lsls	r1, r1, #3
  405ca6:	325b      	adds	r2, #91	; 0x5b
  405ca8:	eb07 0c01 	add.w	ip, r7, r1
  405cac:	5879      	ldr	r1, [r7, r1]
  405cae:	f1ac 0c08 	sub.w	ip, ip, #8
  405cb2:	458c      	cmp	ip, r1
  405cb4:	f000 8088 	beq.w	405dc8 <_malloc_r+0x494>
  405cb8:	684a      	ldr	r2, [r1, #4]
  405cba:	f022 0203 	bic.w	r2, r2, #3
  405cbe:	4293      	cmp	r3, r2
  405cc0:	d273      	bcs.n	405daa <_malloc_r+0x476>
  405cc2:	6889      	ldr	r1, [r1, #8]
  405cc4:	458c      	cmp	ip, r1
  405cc6:	d1f7      	bne.n	405cb8 <_malloc_r+0x384>
  405cc8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405ccc:	687b      	ldr	r3, [r7, #4]
  405cce:	60e2      	str	r2, [r4, #12]
  405cd0:	f8c4 c008 	str.w	ip, [r4, #8]
  405cd4:	6094      	str	r4, [r2, #8]
  405cd6:	f8cc 400c 	str.w	r4, [ip, #12]
  405cda:	e68f      	b.n	4059fc <_malloc_r+0xc8>
  405cdc:	19a1      	adds	r1, r4, r6
  405cde:	f046 0c01 	orr.w	ip, r6, #1
  405ce2:	f042 0601 	orr.w	r6, r2, #1
  405ce6:	f8c4 c004 	str.w	ip, [r4, #4]
  405cea:	4628      	mov	r0, r5
  405cec:	6179      	str	r1, [r7, #20]
  405cee:	6139      	str	r1, [r7, #16]
  405cf0:	f8c1 e00c 	str.w	lr, [r1, #12]
  405cf4:	f8c1 e008 	str.w	lr, [r1, #8]
  405cf8:	604e      	str	r6, [r1, #4]
  405cfa:	50e2      	str	r2, [r4, r3]
  405cfc:	f000 fa34 	bl	406168 <__malloc_unlock>
  405d00:	3408      	adds	r4, #8
  405d02:	e6dd      	b.n	405ac0 <_malloc_r+0x18c>
  405d04:	687b      	ldr	r3, [r7, #4]
  405d06:	e679      	b.n	4059fc <_malloc_r+0xc8>
  405d08:	f108 0801 	add.w	r8, r8, #1
  405d0c:	f018 0f03 	tst.w	r8, #3
  405d10:	f10c 0c08 	add.w	ip, ip, #8
  405d14:	f47f ae85 	bne.w	405a22 <_malloc_r+0xee>
  405d18:	e02d      	b.n	405d76 <_malloc_r+0x442>
  405d1a:	68dc      	ldr	r4, [r3, #12]
  405d1c:	42a3      	cmp	r3, r4
  405d1e:	bf08      	it	eq
  405d20:	3002      	addeq	r0, #2
  405d22:	f43f ae3e 	beq.w	4059a2 <_malloc_r+0x6e>
  405d26:	e6bb      	b.n	405aa0 <_malloc_r+0x16c>
  405d28:	4419      	add	r1, r3
  405d2a:	461c      	mov	r4, r3
  405d2c:	684a      	ldr	r2, [r1, #4]
  405d2e:	68db      	ldr	r3, [r3, #12]
  405d30:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405d34:	f042 0201 	orr.w	r2, r2, #1
  405d38:	604a      	str	r2, [r1, #4]
  405d3a:	4628      	mov	r0, r5
  405d3c:	60f3      	str	r3, [r6, #12]
  405d3e:	609e      	str	r6, [r3, #8]
  405d40:	f000 fa12 	bl	406168 <__malloc_unlock>
  405d44:	e6bc      	b.n	405ac0 <_malloc_r+0x18c>
  405d46:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405d4a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405d4e:	00c3      	lsls	r3, r0, #3
  405d50:	e612      	b.n	405978 <_malloc_r+0x44>
  405d52:	099a      	lsrs	r2, r3, #6
  405d54:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405d58:	00c9      	lsls	r1, r1, #3
  405d5a:	3238      	adds	r2, #56	; 0x38
  405d5c:	e7a4      	b.n	405ca8 <_malloc_r+0x374>
  405d5e:	42bc      	cmp	r4, r7
  405d60:	d054      	beq.n	405e0c <_malloc_r+0x4d8>
  405d62:	68bc      	ldr	r4, [r7, #8]
  405d64:	6862      	ldr	r2, [r4, #4]
  405d66:	f022 0203 	bic.w	r2, r2, #3
  405d6a:	e75d      	b.n	405c28 <_malloc_r+0x2f4>
  405d6c:	f859 3908 	ldr.w	r3, [r9], #-8
  405d70:	4599      	cmp	r9, r3
  405d72:	f040 8086 	bne.w	405e82 <_malloc_r+0x54e>
  405d76:	f010 0f03 	tst.w	r0, #3
  405d7a:	f100 30ff 	add.w	r0, r0, #4294967295
  405d7e:	d1f5      	bne.n	405d6c <_malloc_r+0x438>
  405d80:	687b      	ldr	r3, [r7, #4]
  405d82:	ea23 0304 	bic.w	r3, r3, r4
  405d86:	607b      	str	r3, [r7, #4]
  405d88:	0064      	lsls	r4, r4, #1
  405d8a:	429c      	cmp	r4, r3
  405d8c:	f63f aec7 	bhi.w	405b1e <_malloc_r+0x1ea>
  405d90:	2c00      	cmp	r4, #0
  405d92:	f43f aec4 	beq.w	405b1e <_malloc_r+0x1ea>
  405d96:	421c      	tst	r4, r3
  405d98:	4640      	mov	r0, r8
  405d9a:	f47f ae3e 	bne.w	405a1a <_malloc_r+0xe6>
  405d9e:	0064      	lsls	r4, r4, #1
  405da0:	421c      	tst	r4, r3
  405da2:	f100 0004 	add.w	r0, r0, #4
  405da6:	d0fa      	beq.n	405d9e <_malloc_r+0x46a>
  405da8:	e637      	b.n	405a1a <_malloc_r+0xe6>
  405daa:	468c      	mov	ip, r1
  405dac:	e78c      	b.n	405cc8 <_malloc_r+0x394>
  405dae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405db2:	d815      	bhi.n	405de0 <_malloc_r+0x4ac>
  405db4:	0bf3      	lsrs	r3, r6, #15
  405db6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405dba:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405dbe:	00c3      	lsls	r3, r0, #3
  405dc0:	e5da      	b.n	405978 <_malloc_r+0x44>
  405dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405dc6:	e6ed      	b.n	405ba4 <_malloc_r+0x270>
  405dc8:	687b      	ldr	r3, [r7, #4]
  405dca:	1092      	asrs	r2, r2, #2
  405dcc:	2101      	movs	r1, #1
  405dce:	fa01 f202 	lsl.w	r2, r1, r2
  405dd2:	4313      	orrs	r3, r2
  405dd4:	607b      	str	r3, [r7, #4]
  405dd6:	4662      	mov	r2, ip
  405dd8:	e779      	b.n	405cce <_malloc_r+0x39a>
  405dda:	2301      	movs	r3, #1
  405ddc:	6053      	str	r3, [r2, #4]
  405dde:	e729      	b.n	405c34 <_malloc_r+0x300>
  405de0:	f240 5254 	movw	r2, #1364	; 0x554
  405de4:	4293      	cmp	r3, r2
  405de6:	d822      	bhi.n	405e2e <_malloc_r+0x4fa>
  405de8:	0cb3      	lsrs	r3, r6, #18
  405dea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  405dee:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  405df2:	00c3      	lsls	r3, r0, #3
  405df4:	e5c0      	b.n	405978 <_malloc_r+0x44>
  405df6:	f103 0b10 	add.w	fp, r3, #16
  405dfa:	e6ae      	b.n	405b5a <_malloc_r+0x226>
  405dfc:	2a54      	cmp	r2, #84	; 0x54
  405dfe:	d829      	bhi.n	405e54 <_malloc_r+0x520>
  405e00:	0b1a      	lsrs	r2, r3, #12
  405e02:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405e06:	00c9      	lsls	r1, r1, #3
  405e08:	326e      	adds	r2, #110	; 0x6e
  405e0a:	e74d      	b.n	405ca8 <_malloc_r+0x374>
  405e0c:	4b20      	ldr	r3, [pc, #128]	; (405e90 <_malloc_r+0x55c>)
  405e0e:	6819      	ldr	r1, [r3, #0]
  405e10:	4459      	add	r1, fp
  405e12:	6019      	str	r1, [r3, #0]
  405e14:	e6b2      	b.n	405b7c <_malloc_r+0x248>
  405e16:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405e1a:	2800      	cmp	r0, #0
  405e1c:	f47f aeae 	bne.w	405b7c <_malloc_r+0x248>
  405e20:	eb08 030b 	add.w	r3, r8, fp
  405e24:	68ba      	ldr	r2, [r7, #8]
  405e26:	f043 0301 	orr.w	r3, r3, #1
  405e2a:	6053      	str	r3, [r2, #4]
  405e2c:	e6ee      	b.n	405c0c <_malloc_r+0x2d8>
  405e2e:	207f      	movs	r0, #127	; 0x7f
  405e30:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405e34:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405e38:	e59e      	b.n	405978 <_malloc_r+0x44>
  405e3a:	f104 0108 	add.w	r1, r4, #8
  405e3e:	4628      	mov	r0, r5
  405e40:	9300      	str	r3, [sp, #0]
  405e42:	f7ff fa59 	bl	4052f8 <_free_r>
  405e46:	9b00      	ldr	r3, [sp, #0]
  405e48:	6819      	ldr	r1, [r3, #0]
  405e4a:	e6df      	b.n	405c0c <_malloc_r+0x2d8>
  405e4c:	2001      	movs	r0, #1
  405e4e:	f04f 0900 	mov.w	r9, #0
  405e52:	e6bc      	b.n	405bce <_malloc_r+0x29a>
  405e54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405e58:	d805      	bhi.n	405e66 <_malloc_r+0x532>
  405e5a:	0bda      	lsrs	r2, r3, #15
  405e5c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405e60:	00c9      	lsls	r1, r1, #3
  405e62:	3277      	adds	r2, #119	; 0x77
  405e64:	e720      	b.n	405ca8 <_malloc_r+0x374>
  405e66:	f240 5154 	movw	r1, #1364	; 0x554
  405e6a:	428a      	cmp	r2, r1
  405e6c:	d805      	bhi.n	405e7a <_malloc_r+0x546>
  405e6e:	0c9a      	lsrs	r2, r3, #18
  405e70:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405e74:	00c9      	lsls	r1, r1, #3
  405e76:	327c      	adds	r2, #124	; 0x7c
  405e78:	e716      	b.n	405ca8 <_malloc_r+0x374>
  405e7a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405e7e:	227e      	movs	r2, #126	; 0x7e
  405e80:	e712      	b.n	405ca8 <_malloc_r+0x374>
  405e82:	687b      	ldr	r3, [r7, #4]
  405e84:	e780      	b.n	405d88 <_malloc_r+0x454>
  405e86:	08f0      	lsrs	r0, r6, #3
  405e88:	f106 0308 	add.w	r3, r6, #8
  405e8c:	e600      	b.n	405a90 <_malloc_r+0x15c>
  405e8e:	bf00      	nop
  405e90:	20400ff4 	.word	0x20400ff4

00405e94 <__ascii_mbtowc>:
  405e94:	b082      	sub	sp, #8
  405e96:	b149      	cbz	r1, 405eac <__ascii_mbtowc+0x18>
  405e98:	b15a      	cbz	r2, 405eb2 <__ascii_mbtowc+0x1e>
  405e9a:	b16b      	cbz	r3, 405eb8 <__ascii_mbtowc+0x24>
  405e9c:	7813      	ldrb	r3, [r2, #0]
  405e9e:	600b      	str	r3, [r1, #0]
  405ea0:	7812      	ldrb	r2, [r2, #0]
  405ea2:	1c10      	adds	r0, r2, #0
  405ea4:	bf18      	it	ne
  405ea6:	2001      	movne	r0, #1
  405ea8:	b002      	add	sp, #8
  405eaa:	4770      	bx	lr
  405eac:	a901      	add	r1, sp, #4
  405eae:	2a00      	cmp	r2, #0
  405eb0:	d1f3      	bne.n	405e9a <__ascii_mbtowc+0x6>
  405eb2:	4610      	mov	r0, r2
  405eb4:	b002      	add	sp, #8
  405eb6:	4770      	bx	lr
  405eb8:	f06f 0001 	mvn.w	r0, #1
  405ebc:	e7f4      	b.n	405ea8 <__ascii_mbtowc+0x14>
  405ebe:	bf00      	nop

00405ec0 <memchr>:
  405ec0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405ec4:	2a10      	cmp	r2, #16
  405ec6:	db2b      	blt.n	405f20 <memchr+0x60>
  405ec8:	f010 0f07 	tst.w	r0, #7
  405ecc:	d008      	beq.n	405ee0 <memchr+0x20>
  405ece:	f810 3b01 	ldrb.w	r3, [r0], #1
  405ed2:	3a01      	subs	r2, #1
  405ed4:	428b      	cmp	r3, r1
  405ed6:	d02d      	beq.n	405f34 <memchr+0x74>
  405ed8:	f010 0f07 	tst.w	r0, #7
  405edc:	b342      	cbz	r2, 405f30 <memchr+0x70>
  405ede:	d1f6      	bne.n	405ece <memchr+0xe>
  405ee0:	b4f0      	push	{r4, r5, r6, r7}
  405ee2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405ee6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405eea:	f022 0407 	bic.w	r4, r2, #7
  405eee:	f07f 0700 	mvns.w	r7, #0
  405ef2:	2300      	movs	r3, #0
  405ef4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405ef8:	3c08      	subs	r4, #8
  405efa:	ea85 0501 	eor.w	r5, r5, r1
  405efe:	ea86 0601 	eor.w	r6, r6, r1
  405f02:	fa85 f547 	uadd8	r5, r5, r7
  405f06:	faa3 f587 	sel	r5, r3, r7
  405f0a:	fa86 f647 	uadd8	r6, r6, r7
  405f0e:	faa5 f687 	sel	r6, r5, r7
  405f12:	b98e      	cbnz	r6, 405f38 <memchr+0x78>
  405f14:	d1ee      	bne.n	405ef4 <memchr+0x34>
  405f16:	bcf0      	pop	{r4, r5, r6, r7}
  405f18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f1c:	f002 0207 	and.w	r2, r2, #7
  405f20:	b132      	cbz	r2, 405f30 <memchr+0x70>
  405f22:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f26:	3a01      	subs	r2, #1
  405f28:	ea83 0301 	eor.w	r3, r3, r1
  405f2c:	b113      	cbz	r3, 405f34 <memchr+0x74>
  405f2e:	d1f8      	bne.n	405f22 <memchr+0x62>
  405f30:	2000      	movs	r0, #0
  405f32:	4770      	bx	lr
  405f34:	3801      	subs	r0, #1
  405f36:	4770      	bx	lr
  405f38:	2d00      	cmp	r5, #0
  405f3a:	bf06      	itte	eq
  405f3c:	4635      	moveq	r5, r6
  405f3e:	3803      	subeq	r0, #3
  405f40:	3807      	subne	r0, #7
  405f42:	f015 0f01 	tst.w	r5, #1
  405f46:	d107      	bne.n	405f58 <memchr+0x98>
  405f48:	3001      	adds	r0, #1
  405f4a:	f415 7f80 	tst.w	r5, #256	; 0x100
  405f4e:	bf02      	ittt	eq
  405f50:	3001      	addeq	r0, #1
  405f52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405f56:	3001      	addeq	r0, #1
  405f58:	bcf0      	pop	{r4, r5, r6, r7}
  405f5a:	3801      	subs	r0, #1
  405f5c:	4770      	bx	lr
  405f5e:	bf00      	nop

00405f60 <memcpy>:
  405f60:	4684      	mov	ip, r0
  405f62:	ea41 0300 	orr.w	r3, r1, r0
  405f66:	f013 0303 	ands.w	r3, r3, #3
  405f6a:	d16d      	bne.n	406048 <memcpy+0xe8>
  405f6c:	3a40      	subs	r2, #64	; 0x40
  405f6e:	d341      	bcc.n	405ff4 <memcpy+0x94>
  405f70:	f851 3b04 	ldr.w	r3, [r1], #4
  405f74:	f840 3b04 	str.w	r3, [r0], #4
  405f78:	f851 3b04 	ldr.w	r3, [r1], #4
  405f7c:	f840 3b04 	str.w	r3, [r0], #4
  405f80:	f851 3b04 	ldr.w	r3, [r1], #4
  405f84:	f840 3b04 	str.w	r3, [r0], #4
  405f88:	f851 3b04 	ldr.w	r3, [r1], #4
  405f8c:	f840 3b04 	str.w	r3, [r0], #4
  405f90:	f851 3b04 	ldr.w	r3, [r1], #4
  405f94:	f840 3b04 	str.w	r3, [r0], #4
  405f98:	f851 3b04 	ldr.w	r3, [r1], #4
  405f9c:	f840 3b04 	str.w	r3, [r0], #4
  405fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  405fa4:	f840 3b04 	str.w	r3, [r0], #4
  405fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  405fac:	f840 3b04 	str.w	r3, [r0], #4
  405fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  405fb4:	f840 3b04 	str.w	r3, [r0], #4
  405fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  405fbc:	f840 3b04 	str.w	r3, [r0], #4
  405fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  405fc4:	f840 3b04 	str.w	r3, [r0], #4
  405fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  405fcc:	f840 3b04 	str.w	r3, [r0], #4
  405fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  405fd4:	f840 3b04 	str.w	r3, [r0], #4
  405fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  405fdc:	f840 3b04 	str.w	r3, [r0], #4
  405fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  405fe4:	f840 3b04 	str.w	r3, [r0], #4
  405fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  405fec:	f840 3b04 	str.w	r3, [r0], #4
  405ff0:	3a40      	subs	r2, #64	; 0x40
  405ff2:	d2bd      	bcs.n	405f70 <memcpy+0x10>
  405ff4:	3230      	adds	r2, #48	; 0x30
  405ff6:	d311      	bcc.n	40601c <memcpy+0xbc>
  405ff8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ffc:	f840 3b04 	str.w	r3, [r0], #4
  406000:	f851 3b04 	ldr.w	r3, [r1], #4
  406004:	f840 3b04 	str.w	r3, [r0], #4
  406008:	f851 3b04 	ldr.w	r3, [r1], #4
  40600c:	f840 3b04 	str.w	r3, [r0], #4
  406010:	f851 3b04 	ldr.w	r3, [r1], #4
  406014:	f840 3b04 	str.w	r3, [r0], #4
  406018:	3a10      	subs	r2, #16
  40601a:	d2ed      	bcs.n	405ff8 <memcpy+0x98>
  40601c:	320c      	adds	r2, #12
  40601e:	d305      	bcc.n	40602c <memcpy+0xcc>
  406020:	f851 3b04 	ldr.w	r3, [r1], #4
  406024:	f840 3b04 	str.w	r3, [r0], #4
  406028:	3a04      	subs	r2, #4
  40602a:	d2f9      	bcs.n	406020 <memcpy+0xc0>
  40602c:	3204      	adds	r2, #4
  40602e:	d008      	beq.n	406042 <memcpy+0xe2>
  406030:	07d2      	lsls	r2, r2, #31
  406032:	bf1c      	itt	ne
  406034:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406038:	f800 3b01 	strbne.w	r3, [r0], #1
  40603c:	d301      	bcc.n	406042 <memcpy+0xe2>
  40603e:	880b      	ldrh	r3, [r1, #0]
  406040:	8003      	strh	r3, [r0, #0]
  406042:	4660      	mov	r0, ip
  406044:	4770      	bx	lr
  406046:	bf00      	nop
  406048:	2a08      	cmp	r2, #8
  40604a:	d313      	bcc.n	406074 <memcpy+0x114>
  40604c:	078b      	lsls	r3, r1, #30
  40604e:	d08d      	beq.n	405f6c <memcpy+0xc>
  406050:	f010 0303 	ands.w	r3, r0, #3
  406054:	d08a      	beq.n	405f6c <memcpy+0xc>
  406056:	f1c3 0304 	rsb	r3, r3, #4
  40605a:	1ad2      	subs	r2, r2, r3
  40605c:	07db      	lsls	r3, r3, #31
  40605e:	bf1c      	itt	ne
  406060:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406064:	f800 3b01 	strbne.w	r3, [r0], #1
  406068:	d380      	bcc.n	405f6c <memcpy+0xc>
  40606a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40606e:	f820 3b02 	strh.w	r3, [r0], #2
  406072:	e77b      	b.n	405f6c <memcpy+0xc>
  406074:	3a04      	subs	r2, #4
  406076:	d3d9      	bcc.n	40602c <memcpy+0xcc>
  406078:	3a01      	subs	r2, #1
  40607a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40607e:	f800 3b01 	strb.w	r3, [r0], #1
  406082:	d2f9      	bcs.n	406078 <memcpy+0x118>
  406084:	780b      	ldrb	r3, [r1, #0]
  406086:	7003      	strb	r3, [r0, #0]
  406088:	784b      	ldrb	r3, [r1, #1]
  40608a:	7043      	strb	r3, [r0, #1]
  40608c:	788b      	ldrb	r3, [r1, #2]
  40608e:	7083      	strb	r3, [r0, #2]
  406090:	4660      	mov	r0, ip
  406092:	4770      	bx	lr

00406094 <memmove>:
  406094:	4288      	cmp	r0, r1
  406096:	b5f0      	push	{r4, r5, r6, r7, lr}
  406098:	d90d      	bls.n	4060b6 <memmove+0x22>
  40609a:	188b      	adds	r3, r1, r2
  40609c:	4298      	cmp	r0, r3
  40609e:	d20a      	bcs.n	4060b6 <memmove+0x22>
  4060a0:	1884      	adds	r4, r0, r2
  4060a2:	2a00      	cmp	r2, #0
  4060a4:	d051      	beq.n	40614a <memmove+0xb6>
  4060a6:	4622      	mov	r2, r4
  4060a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4060ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4060b0:	4299      	cmp	r1, r3
  4060b2:	d1f9      	bne.n	4060a8 <memmove+0x14>
  4060b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4060b6:	2a0f      	cmp	r2, #15
  4060b8:	d948      	bls.n	40614c <memmove+0xb8>
  4060ba:	ea41 0300 	orr.w	r3, r1, r0
  4060be:	079b      	lsls	r3, r3, #30
  4060c0:	d146      	bne.n	406150 <memmove+0xbc>
  4060c2:	f100 0410 	add.w	r4, r0, #16
  4060c6:	f101 0310 	add.w	r3, r1, #16
  4060ca:	4615      	mov	r5, r2
  4060cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4060d0:	f844 6c10 	str.w	r6, [r4, #-16]
  4060d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4060d8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4060dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4060e0:	f844 6c08 	str.w	r6, [r4, #-8]
  4060e4:	3d10      	subs	r5, #16
  4060e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4060ea:	f844 6c04 	str.w	r6, [r4, #-4]
  4060ee:	2d0f      	cmp	r5, #15
  4060f0:	f103 0310 	add.w	r3, r3, #16
  4060f4:	f104 0410 	add.w	r4, r4, #16
  4060f8:	d8e8      	bhi.n	4060cc <memmove+0x38>
  4060fa:	f1a2 0310 	sub.w	r3, r2, #16
  4060fe:	f023 030f 	bic.w	r3, r3, #15
  406102:	f002 0e0f 	and.w	lr, r2, #15
  406106:	3310      	adds	r3, #16
  406108:	f1be 0f03 	cmp.w	lr, #3
  40610c:	4419      	add	r1, r3
  40610e:	4403      	add	r3, r0
  406110:	d921      	bls.n	406156 <memmove+0xc2>
  406112:	1f1e      	subs	r6, r3, #4
  406114:	460d      	mov	r5, r1
  406116:	4674      	mov	r4, lr
  406118:	3c04      	subs	r4, #4
  40611a:	f855 7b04 	ldr.w	r7, [r5], #4
  40611e:	f846 7f04 	str.w	r7, [r6, #4]!
  406122:	2c03      	cmp	r4, #3
  406124:	d8f8      	bhi.n	406118 <memmove+0x84>
  406126:	f1ae 0404 	sub.w	r4, lr, #4
  40612a:	f024 0403 	bic.w	r4, r4, #3
  40612e:	3404      	adds	r4, #4
  406130:	4421      	add	r1, r4
  406132:	4423      	add	r3, r4
  406134:	f002 0203 	and.w	r2, r2, #3
  406138:	b162      	cbz	r2, 406154 <memmove+0xc0>
  40613a:	3b01      	subs	r3, #1
  40613c:	440a      	add	r2, r1
  40613e:	f811 4b01 	ldrb.w	r4, [r1], #1
  406142:	f803 4f01 	strb.w	r4, [r3, #1]!
  406146:	428a      	cmp	r2, r1
  406148:	d1f9      	bne.n	40613e <memmove+0xaa>
  40614a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40614c:	4603      	mov	r3, r0
  40614e:	e7f3      	b.n	406138 <memmove+0xa4>
  406150:	4603      	mov	r3, r0
  406152:	e7f2      	b.n	40613a <memmove+0xa6>
  406154:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406156:	4672      	mov	r2, lr
  406158:	e7ee      	b.n	406138 <memmove+0xa4>
  40615a:	bf00      	nop

0040615c <__malloc_lock>:
  40615c:	4801      	ldr	r0, [pc, #4]	; (406164 <__malloc_lock+0x8>)
  40615e:	f7ff bb65 	b.w	40582c <__retarget_lock_acquire_recursive>
  406162:	bf00      	nop
  406164:	20401078 	.word	0x20401078

00406168 <__malloc_unlock>:
  406168:	4801      	ldr	r0, [pc, #4]	; (406170 <__malloc_unlock+0x8>)
  40616a:	f7ff bb61 	b.w	405830 <__retarget_lock_release_recursive>
  40616e:	bf00      	nop
  406170:	20401078 	.word	0x20401078

00406174 <_realloc_r>:
  406174:	2900      	cmp	r1, #0
  406176:	f000 8095 	beq.w	4062a4 <_realloc_r+0x130>
  40617a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40617e:	460d      	mov	r5, r1
  406180:	4616      	mov	r6, r2
  406182:	b083      	sub	sp, #12
  406184:	4680      	mov	r8, r0
  406186:	f106 070b 	add.w	r7, r6, #11
  40618a:	f7ff ffe7 	bl	40615c <__malloc_lock>
  40618e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406192:	2f16      	cmp	r7, #22
  406194:	f02e 0403 	bic.w	r4, lr, #3
  406198:	f1a5 0908 	sub.w	r9, r5, #8
  40619c:	d83c      	bhi.n	406218 <_realloc_r+0xa4>
  40619e:	2210      	movs	r2, #16
  4061a0:	4617      	mov	r7, r2
  4061a2:	42be      	cmp	r6, r7
  4061a4:	d83d      	bhi.n	406222 <_realloc_r+0xae>
  4061a6:	4294      	cmp	r4, r2
  4061a8:	da43      	bge.n	406232 <_realloc_r+0xbe>
  4061aa:	4bc4      	ldr	r3, [pc, #784]	; (4064bc <_realloc_r+0x348>)
  4061ac:	6899      	ldr	r1, [r3, #8]
  4061ae:	eb09 0004 	add.w	r0, r9, r4
  4061b2:	4288      	cmp	r0, r1
  4061b4:	f000 80b4 	beq.w	406320 <_realloc_r+0x1ac>
  4061b8:	6843      	ldr	r3, [r0, #4]
  4061ba:	f023 0101 	bic.w	r1, r3, #1
  4061be:	4401      	add	r1, r0
  4061c0:	6849      	ldr	r1, [r1, #4]
  4061c2:	07c9      	lsls	r1, r1, #31
  4061c4:	d54c      	bpl.n	406260 <_realloc_r+0xec>
  4061c6:	f01e 0f01 	tst.w	lr, #1
  4061ca:	f000 809b 	beq.w	406304 <_realloc_r+0x190>
  4061ce:	4631      	mov	r1, r6
  4061d0:	4640      	mov	r0, r8
  4061d2:	f7ff fbaf 	bl	405934 <_malloc_r>
  4061d6:	4606      	mov	r6, r0
  4061d8:	2800      	cmp	r0, #0
  4061da:	d03a      	beq.n	406252 <_realloc_r+0xde>
  4061dc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4061e0:	f023 0301 	bic.w	r3, r3, #1
  4061e4:	444b      	add	r3, r9
  4061e6:	f1a0 0208 	sub.w	r2, r0, #8
  4061ea:	429a      	cmp	r2, r3
  4061ec:	f000 8121 	beq.w	406432 <_realloc_r+0x2be>
  4061f0:	1f22      	subs	r2, r4, #4
  4061f2:	2a24      	cmp	r2, #36	; 0x24
  4061f4:	f200 8107 	bhi.w	406406 <_realloc_r+0x292>
  4061f8:	2a13      	cmp	r2, #19
  4061fa:	f200 80db 	bhi.w	4063b4 <_realloc_r+0x240>
  4061fe:	4603      	mov	r3, r0
  406200:	462a      	mov	r2, r5
  406202:	6811      	ldr	r1, [r2, #0]
  406204:	6019      	str	r1, [r3, #0]
  406206:	6851      	ldr	r1, [r2, #4]
  406208:	6059      	str	r1, [r3, #4]
  40620a:	6892      	ldr	r2, [r2, #8]
  40620c:	609a      	str	r2, [r3, #8]
  40620e:	4629      	mov	r1, r5
  406210:	4640      	mov	r0, r8
  406212:	f7ff f871 	bl	4052f8 <_free_r>
  406216:	e01c      	b.n	406252 <_realloc_r+0xde>
  406218:	f027 0707 	bic.w	r7, r7, #7
  40621c:	2f00      	cmp	r7, #0
  40621e:	463a      	mov	r2, r7
  406220:	dabf      	bge.n	4061a2 <_realloc_r+0x2e>
  406222:	2600      	movs	r6, #0
  406224:	230c      	movs	r3, #12
  406226:	4630      	mov	r0, r6
  406228:	f8c8 3000 	str.w	r3, [r8]
  40622c:	b003      	add	sp, #12
  40622e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406232:	462e      	mov	r6, r5
  406234:	1be3      	subs	r3, r4, r7
  406236:	2b0f      	cmp	r3, #15
  406238:	d81e      	bhi.n	406278 <_realloc_r+0x104>
  40623a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40623e:	f003 0301 	and.w	r3, r3, #1
  406242:	4323      	orrs	r3, r4
  406244:	444c      	add	r4, r9
  406246:	f8c9 3004 	str.w	r3, [r9, #4]
  40624a:	6863      	ldr	r3, [r4, #4]
  40624c:	f043 0301 	orr.w	r3, r3, #1
  406250:	6063      	str	r3, [r4, #4]
  406252:	4640      	mov	r0, r8
  406254:	f7ff ff88 	bl	406168 <__malloc_unlock>
  406258:	4630      	mov	r0, r6
  40625a:	b003      	add	sp, #12
  40625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406260:	f023 0303 	bic.w	r3, r3, #3
  406264:	18e1      	adds	r1, r4, r3
  406266:	4291      	cmp	r1, r2
  406268:	db1f      	blt.n	4062aa <_realloc_r+0x136>
  40626a:	68c3      	ldr	r3, [r0, #12]
  40626c:	6882      	ldr	r2, [r0, #8]
  40626e:	462e      	mov	r6, r5
  406270:	60d3      	str	r3, [r2, #12]
  406272:	460c      	mov	r4, r1
  406274:	609a      	str	r2, [r3, #8]
  406276:	e7dd      	b.n	406234 <_realloc_r+0xc0>
  406278:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40627c:	eb09 0107 	add.w	r1, r9, r7
  406280:	f002 0201 	and.w	r2, r2, #1
  406284:	444c      	add	r4, r9
  406286:	f043 0301 	orr.w	r3, r3, #1
  40628a:	4317      	orrs	r7, r2
  40628c:	f8c9 7004 	str.w	r7, [r9, #4]
  406290:	604b      	str	r3, [r1, #4]
  406292:	6863      	ldr	r3, [r4, #4]
  406294:	f043 0301 	orr.w	r3, r3, #1
  406298:	3108      	adds	r1, #8
  40629a:	6063      	str	r3, [r4, #4]
  40629c:	4640      	mov	r0, r8
  40629e:	f7ff f82b 	bl	4052f8 <_free_r>
  4062a2:	e7d6      	b.n	406252 <_realloc_r+0xde>
  4062a4:	4611      	mov	r1, r2
  4062a6:	f7ff bb45 	b.w	405934 <_malloc_r>
  4062aa:	f01e 0f01 	tst.w	lr, #1
  4062ae:	d18e      	bne.n	4061ce <_realloc_r+0x5a>
  4062b0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4062b4:	eba9 0a01 	sub.w	sl, r9, r1
  4062b8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4062bc:	f021 0103 	bic.w	r1, r1, #3
  4062c0:	440b      	add	r3, r1
  4062c2:	4423      	add	r3, r4
  4062c4:	4293      	cmp	r3, r2
  4062c6:	db25      	blt.n	406314 <_realloc_r+0x1a0>
  4062c8:	68c2      	ldr	r2, [r0, #12]
  4062ca:	6881      	ldr	r1, [r0, #8]
  4062cc:	4656      	mov	r6, sl
  4062ce:	60ca      	str	r2, [r1, #12]
  4062d0:	6091      	str	r1, [r2, #8]
  4062d2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4062d6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4062da:	1f22      	subs	r2, r4, #4
  4062dc:	2a24      	cmp	r2, #36	; 0x24
  4062de:	60c1      	str	r1, [r0, #12]
  4062e0:	6088      	str	r0, [r1, #8]
  4062e2:	f200 8094 	bhi.w	40640e <_realloc_r+0x29a>
  4062e6:	2a13      	cmp	r2, #19
  4062e8:	d96f      	bls.n	4063ca <_realloc_r+0x256>
  4062ea:	6829      	ldr	r1, [r5, #0]
  4062ec:	f8ca 1008 	str.w	r1, [sl, #8]
  4062f0:	6869      	ldr	r1, [r5, #4]
  4062f2:	f8ca 100c 	str.w	r1, [sl, #12]
  4062f6:	2a1b      	cmp	r2, #27
  4062f8:	f200 80a2 	bhi.w	406440 <_realloc_r+0x2cc>
  4062fc:	3508      	adds	r5, #8
  4062fe:	f10a 0210 	add.w	r2, sl, #16
  406302:	e063      	b.n	4063cc <_realloc_r+0x258>
  406304:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406308:	eba9 0a03 	sub.w	sl, r9, r3
  40630c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406310:	f021 0103 	bic.w	r1, r1, #3
  406314:	1863      	adds	r3, r4, r1
  406316:	4293      	cmp	r3, r2
  406318:	f6ff af59 	blt.w	4061ce <_realloc_r+0x5a>
  40631c:	4656      	mov	r6, sl
  40631e:	e7d8      	b.n	4062d2 <_realloc_r+0x15e>
  406320:	6841      	ldr	r1, [r0, #4]
  406322:	f021 0b03 	bic.w	fp, r1, #3
  406326:	44a3      	add	fp, r4
  406328:	f107 0010 	add.w	r0, r7, #16
  40632c:	4583      	cmp	fp, r0
  40632e:	da56      	bge.n	4063de <_realloc_r+0x26a>
  406330:	f01e 0f01 	tst.w	lr, #1
  406334:	f47f af4b 	bne.w	4061ce <_realloc_r+0x5a>
  406338:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40633c:	eba9 0a01 	sub.w	sl, r9, r1
  406340:	f8da 1004 	ldr.w	r1, [sl, #4]
  406344:	f021 0103 	bic.w	r1, r1, #3
  406348:	448b      	add	fp, r1
  40634a:	4558      	cmp	r0, fp
  40634c:	dce2      	bgt.n	406314 <_realloc_r+0x1a0>
  40634e:	4656      	mov	r6, sl
  406350:	f8da 100c 	ldr.w	r1, [sl, #12]
  406354:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406358:	1f22      	subs	r2, r4, #4
  40635a:	2a24      	cmp	r2, #36	; 0x24
  40635c:	60c1      	str	r1, [r0, #12]
  40635e:	6088      	str	r0, [r1, #8]
  406360:	f200 808f 	bhi.w	406482 <_realloc_r+0x30e>
  406364:	2a13      	cmp	r2, #19
  406366:	f240 808a 	bls.w	40647e <_realloc_r+0x30a>
  40636a:	6829      	ldr	r1, [r5, #0]
  40636c:	f8ca 1008 	str.w	r1, [sl, #8]
  406370:	6869      	ldr	r1, [r5, #4]
  406372:	f8ca 100c 	str.w	r1, [sl, #12]
  406376:	2a1b      	cmp	r2, #27
  406378:	f200 808a 	bhi.w	406490 <_realloc_r+0x31c>
  40637c:	3508      	adds	r5, #8
  40637e:	f10a 0210 	add.w	r2, sl, #16
  406382:	6829      	ldr	r1, [r5, #0]
  406384:	6011      	str	r1, [r2, #0]
  406386:	6869      	ldr	r1, [r5, #4]
  406388:	6051      	str	r1, [r2, #4]
  40638a:	68a9      	ldr	r1, [r5, #8]
  40638c:	6091      	str	r1, [r2, #8]
  40638e:	eb0a 0107 	add.w	r1, sl, r7
  406392:	ebab 0207 	sub.w	r2, fp, r7
  406396:	f042 0201 	orr.w	r2, r2, #1
  40639a:	6099      	str	r1, [r3, #8]
  40639c:	604a      	str	r2, [r1, #4]
  40639e:	f8da 3004 	ldr.w	r3, [sl, #4]
  4063a2:	f003 0301 	and.w	r3, r3, #1
  4063a6:	431f      	orrs	r7, r3
  4063a8:	4640      	mov	r0, r8
  4063aa:	f8ca 7004 	str.w	r7, [sl, #4]
  4063ae:	f7ff fedb 	bl	406168 <__malloc_unlock>
  4063b2:	e751      	b.n	406258 <_realloc_r+0xe4>
  4063b4:	682b      	ldr	r3, [r5, #0]
  4063b6:	6003      	str	r3, [r0, #0]
  4063b8:	686b      	ldr	r3, [r5, #4]
  4063ba:	6043      	str	r3, [r0, #4]
  4063bc:	2a1b      	cmp	r2, #27
  4063be:	d82d      	bhi.n	40641c <_realloc_r+0x2a8>
  4063c0:	f100 0308 	add.w	r3, r0, #8
  4063c4:	f105 0208 	add.w	r2, r5, #8
  4063c8:	e71b      	b.n	406202 <_realloc_r+0x8e>
  4063ca:	4632      	mov	r2, r6
  4063cc:	6829      	ldr	r1, [r5, #0]
  4063ce:	6011      	str	r1, [r2, #0]
  4063d0:	6869      	ldr	r1, [r5, #4]
  4063d2:	6051      	str	r1, [r2, #4]
  4063d4:	68a9      	ldr	r1, [r5, #8]
  4063d6:	6091      	str	r1, [r2, #8]
  4063d8:	461c      	mov	r4, r3
  4063da:	46d1      	mov	r9, sl
  4063dc:	e72a      	b.n	406234 <_realloc_r+0xc0>
  4063de:	eb09 0107 	add.w	r1, r9, r7
  4063e2:	ebab 0b07 	sub.w	fp, fp, r7
  4063e6:	f04b 0201 	orr.w	r2, fp, #1
  4063ea:	6099      	str	r1, [r3, #8]
  4063ec:	604a      	str	r2, [r1, #4]
  4063ee:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4063f2:	f003 0301 	and.w	r3, r3, #1
  4063f6:	431f      	orrs	r7, r3
  4063f8:	4640      	mov	r0, r8
  4063fa:	f845 7c04 	str.w	r7, [r5, #-4]
  4063fe:	f7ff feb3 	bl	406168 <__malloc_unlock>
  406402:	462e      	mov	r6, r5
  406404:	e728      	b.n	406258 <_realloc_r+0xe4>
  406406:	4629      	mov	r1, r5
  406408:	f7ff fe44 	bl	406094 <memmove>
  40640c:	e6ff      	b.n	40620e <_realloc_r+0x9a>
  40640e:	4629      	mov	r1, r5
  406410:	4630      	mov	r0, r6
  406412:	461c      	mov	r4, r3
  406414:	46d1      	mov	r9, sl
  406416:	f7ff fe3d 	bl	406094 <memmove>
  40641a:	e70b      	b.n	406234 <_realloc_r+0xc0>
  40641c:	68ab      	ldr	r3, [r5, #8]
  40641e:	6083      	str	r3, [r0, #8]
  406420:	68eb      	ldr	r3, [r5, #12]
  406422:	60c3      	str	r3, [r0, #12]
  406424:	2a24      	cmp	r2, #36	; 0x24
  406426:	d017      	beq.n	406458 <_realloc_r+0x2e4>
  406428:	f100 0310 	add.w	r3, r0, #16
  40642c:	f105 0210 	add.w	r2, r5, #16
  406430:	e6e7      	b.n	406202 <_realloc_r+0x8e>
  406432:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406436:	f023 0303 	bic.w	r3, r3, #3
  40643a:	441c      	add	r4, r3
  40643c:	462e      	mov	r6, r5
  40643e:	e6f9      	b.n	406234 <_realloc_r+0xc0>
  406440:	68a9      	ldr	r1, [r5, #8]
  406442:	f8ca 1010 	str.w	r1, [sl, #16]
  406446:	68e9      	ldr	r1, [r5, #12]
  406448:	f8ca 1014 	str.w	r1, [sl, #20]
  40644c:	2a24      	cmp	r2, #36	; 0x24
  40644e:	d00c      	beq.n	40646a <_realloc_r+0x2f6>
  406450:	3510      	adds	r5, #16
  406452:	f10a 0218 	add.w	r2, sl, #24
  406456:	e7b9      	b.n	4063cc <_realloc_r+0x258>
  406458:	692b      	ldr	r3, [r5, #16]
  40645a:	6103      	str	r3, [r0, #16]
  40645c:	696b      	ldr	r3, [r5, #20]
  40645e:	6143      	str	r3, [r0, #20]
  406460:	f105 0218 	add.w	r2, r5, #24
  406464:	f100 0318 	add.w	r3, r0, #24
  406468:	e6cb      	b.n	406202 <_realloc_r+0x8e>
  40646a:	692a      	ldr	r2, [r5, #16]
  40646c:	f8ca 2018 	str.w	r2, [sl, #24]
  406470:	696a      	ldr	r2, [r5, #20]
  406472:	f8ca 201c 	str.w	r2, [sl, #28]
  406476:	3518      	adds	r5, #24
  406478:	f10a 0220 	add.w	r2, sl, #32
  40647c:	e7a6      	b.n	4063cc <_realloc_r+0x258>
  40647e:	4632      	mov	r2, r6
  406480:	e77f      	b.n	406382 <_realloc_r+0x20e>
  406482:	4629      	mov	r1, r5
  406484:	4630      	mov	r0, r6
  406486:	9301      	str	r3, [sp, #4]
  406488:	f7ff fe04 	bl	406094 <memmove>
  40648c:	9b01      	ldr	r3, [sp, #4]
  40648e:	e77e      	b.n	40638e <_realloc_r+0x21a>
  406490:	68a9      	ldr	r1, [r5, #8]
  406492:	f8ca 1010 	str.w	r1, [sl, #16]
  406496:	68e9      	ldr	r1, [r5, #12]
  406498:	f8ca 1014 	str.w	r1, [sl, #20]
  40649c:	2a24      	cmp	r2, #36	; 0x24
  40649e:	d003      	beq.n	4064a8 <_realloc_r+0x334>
  4064a0:	3510      	adds	r5, #16
  4064a2:	f10a 0218 	add.w	r2, sl, #24
  4064a6:	e76c      	b.n	406382 <_realloc_r+0x20e>
  4064a8:	692a      	ldr	r2, [r5, #16]
  4064aa:	f8ca 2018 	str.w	r2, [sl, #24]
  4064ae:	696a      	ldr	r2, [r5, #20]
  4064b0:	f8ca 201c 	str.w	r2, [sl, #28]
  4064b4:	3518      	adds	r5, #24
  4064b6:	f10a 0220 	add.w	r2, sl, #32
  4064ba:	e762      	b.n	406382 <_realloc_r+0x20e>
  4064bc:	20400690 	.word	0x20400690

004064c0 <_sbrk_r>:
  4064c0:	b538      	push	{r3, r4, r5, lr}
  4064c2:	4c07      	ldr	r4, [pc, #28]	; (4064e0 <_sbrk_r+0x20>)
  4064c4:	2300      	movs	r3, #0
  4064c6:	4605      	mov	r5, r0
  4064c8:	4608      	mov	r0, r1
  4064ca:	6023      	str	r3, [r4, #0]
  4064cc:	f7fc fba0 	bl	402c10 <_sbrk>
  4064d0:	1c43      	adds	r3, r0, #1
  4064d2:	d000      	beq.n	4064d6 <_sbrk_r+0x16>
  4064d4:	bd38      	pop	{r3, r4, r5, pc}
  4064d6:	6823      	ldr	r3, [r4, #0]
  4064d8:	2b00      	cmp	r3, #0
  4064da:	d0fb      	beq.n	4064d4 <_sbrk_r+0x14>
  4064dc:	602b      	str	r3, [r5, #0]
  4064de:	bd38      	pop	{r3, r4, r5, pc}
  4064e0:	2040108c 	.word	0x2040108c

004064e4 <__sread>:
  4064e4:	b510      	push	{r4, lr}
  4064e6:	460c      	mov	r4, r1
  4064e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4064ec:	f000 fa6e 	bl	4069cc <_read_r>
  4064f0:	2800      	cmp	r0, #0
  4064f2:	db03      	blt.n	4064fc <__sread+0x18>
  4064f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4064f6:	4403      	add	r3, r0
  4064f8:	6523      	str	r3, [r4, #80]	; 0x50
  4064fa:	bd10      	pop	{r4, pc}
  4064fc:	89a3      	ldrh	r3, [r4, #12]
  4064fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406502:	81a3      	strh	r3, [r4, #12]
  406504:	bd10      	pop	{r4, pc}
  406506:	bf00      	nop

00406508 <__swrite>:
  406508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40650c:	4616      	mov	r6, r2
  40650e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406512:	461f      	mov	r7, r3
  406514:	05d3      	lsls	r3, r2, #23
  406516:	460c      	mov	r4, r1
  406518:	4605      	mov	r5, r0
  40651a:	d507      	bpl.n	40652c <__swrite+0x24>
  40651c:	2200      	movs	r2, #0
  40651e:	2302      	movs	r3, #2
  406520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406524:	f000 fa3c 	bl	4069a0 <_lseek_r>
  406528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40652c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406530:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406534:	81a2      	strh	r2, [r4, #12]
  406536:	463b      	mov	r3, r7
  406538:	4632      	mov	r2, r6
  40653a:	4628      	mov	r0, r5
  40653c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406540:	f000 b91c 	b.w	40677c <_write_r>

00406544 <__sseek>:
  406544:	b510      	push	{r4, lr}
  406546:	460c      	mov	r4, r1
  406548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40654c:	f000 fa28 	bl	4069a0 <_lseek_r>
  406550:	89a3      	ldrh	r3, [r4, #12]
  406552:	1c42      	adds	r2, r0, #1
  406554:	bf0e      	itee	eq
  406556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40655a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40655e:	6520      	strne	r0, [r4, #80]	; 0x50
  406560:	81a3      	strh	r3, [r4, #12]
  406562:	bd10      	pop	{r4, pc}

00406564 <__sclose>:
  406564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406568:	f000 b980 	b.w	40686c <_close_r>
	...

00406580 <strlen>:
  406580:	f890 f000 	pld	[r0]
  406584:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406588:	f020 0107 	bic.w	r1, r0, #7
  40658c:	f06f 0c00 	mvn.w	ip, #0
  406590:	f010 0407 	ands.w	r4, r0, #7
  406594:	f891 f020 	pld	[r1, #32]
  406598:	f040 8049 	bne.w	40662e <strlen+0xae>
  40659c:	f04f 0400 	mov.w	r4, #0
  4065a0:	f06f 0007 	mvn.w	r0, #7
  4065a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4065a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4065ac:	f100 0008 	add.w	r0, r0, #8
  4065b0:	fa82 f24c 	uadd8	r2, r2, ip
  4065b4:	faa4 f28c 	sel	r2, r4, ip
  4065b8:	fa83 f34c 	uadd8	r3, r3, ip
  4065bc:	faa2 f38c 	sel	r3, r2, ip
  4065c0:	bb4b      	cbnz	r3, 406616 <strlen+0x96>
  4065c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4065c6:	fa82 f24c 	uadd8	r2, r2, ip
  4065ca:	f100 0008 	add.w	r0, r0, #8
  4065ce:	faa4 f28c 	sel	r2, r4, ip
  4065d2:	fa83 f34c 	uadd8	r3, r3, ip
  4065d6:	faa2 f38c 	sel	r3, r2, ip
  4065da:	b9e3      	cbnz	r3, 406616 <strlen+0x96>
  4065dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4065e0:	fa82 f24c 	uadd8	r2, r2, ip
  4065e4:	f100 0008 	add.w	r0, r0, #8
  4065e8:	faa4 f28c 	sel	r2, r4, ip
  4065ec:	fa83 f34c 	uadd8	r3, r3, ip
  4065f0:	faa2 f38c 	sel	r3, r2, ip
  4065f4:	b97b      	cbnz	r3, 406616 <strlen+0x96>
  4065f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4065fa:	f101 0120 	add.w	r1, r1, #32
  4065fe:	fa82 f24c 	uadd8	r2, r2, ip
  406602:	f100 0008 	add.w	r0, r0, #8
  406606:	faa4 f28c 	sel	r2, r4, ip
  40660a:	fa83 f34c 	uadd8	r3, r3, ip
  40660e:	faa2 f38c 	sel	r3, r2, ip
  406612:	2b00      	cmp	r3, #0
  406614:	d0c6      	beq.n	4065a4 <strlen+0x24>
  406616:	2a00      	cmp	r2, #0
  406618:	bf04      	itt	eq
  40661a:	3004      	addeq	r0, #4
  40661c:	461a      	moveq	r2, r3
  40661e:	ba12      	rev	r2, r2
  406620:	fab2 f282 	clz	r2, r2
  406624:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406628:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40662c:	4770      	bx	lr
  40662e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406632:	f004 0503 	and.w	r5, r4, #3
  406636:	f1c4 0000 	rsb	r0, r4, #0
  40663a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40663e:	f014 0f04 	tst.w	r4, #4
  406642:	f891 f040 	pld	[r1, #64]	; 0x40
  406646:	fa0c f505 	lsl.w	r5, ip, r5
  40664a:	ea62 0205 	orn	r2, r2, r5
  40664e:	bf1c      	itt	ne
  406650:	ea63 0305 	ornne	r3, r3, r5
  406654:	4662      	movne	r2, ip
  406656:	f04f 0400 	mov.w	r4, #0
  40665a:	e7a9      	b.n	4065b0 <strlen+0x30>

0040665c <__swbuf_r>:
  40665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40665e:	460d      	mov	r5, r1
  406660:	4614      	mov	r4, r2
  406662:	4606      	mov	r6, r0
  406664:	b110      	cbz	r0, 40666c <__swbuf_r+0x10>
  406666:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406668:	2b00      	cmp	r3, #0
  40666a:	d04b      	beq.n	406704 <__swbuf_r+0xa8>
  40666c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406670:	69a3      	ldr	r3, [r4, #24]
  406672:	60a3      	str	r3, [r4, #8]
  406674:	b291      	uxth	r1, r2
  406676:	0708      	lsls	r0, r1, #28
  406678:	d539      	bpl.n	4066ee <__swbuf_r+0x92>
  40667a:	6923      	ldr	r3, [r4, #16]
  40667c:	2b00      	cmp	r3, #0
  40667e:	d036      	beq.n	4066ee <__swbuf_r+0x92>
  406680:	b2ed      	uxtb	r5, r5
  406682:	0489      	lsls	r1, r1, #18
  406684:	462f      	mov	r7, r5
  406686:	d515      	bpl.n	4066b4 <__swbuf_r+0x58>
  406688:	6822      	ldr	r2, [r4, #0]
  40668a:	6961      	ldr	r1, [r4, #20]
  40668c:	1ad3      	subs	r3, r2, r3
  40668e:	428b      	cmp	r3, r1
  406690:	da1c      	bge.n	4066cc <__swbuf_r+0x70>
  406692:	3301      	adds	r3, #1
  406694:	68a1      	ldr	r1, [r4, #8]
  406696:	1c50      	adds	r0, r2, #1
  406698:	3901      	subs	r1, #1
  40669a:	60a1      	str	r1, [r4, #8]
  40669c:	6020      	str	r0, [r4, #0]
  40669e:	7015      	strb	r5, [r2, #0]
  4066a0:	6962      	ldr	r2, [r4, #20]
  4066a2:	429a      	cmp	r2, r3
  4066a4:	d01a      	beq.n	4066dc <__swbuf_r+0x80>
  4066a6:	89a3      	ldrh	r3, [r4, #12]
  4066a8:	07db      	lsls	r3, r3, #31
  4066aa:	d501      	bpl.n	4066b0 <__swbuf_r+0x54>
  4066ac:	2d0a      	cmp	r5, #10
  4066ae:	d015      	beq.n	4066dc <__swbuf_r+0x80>
  4066b0:	4638      	mov	r0, r7
  4066b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4066b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4066b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4066ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4066be:	81a2      	strh	r2, [r4, #12]
  4066c0:	6822      	ldr	r2, [r4, #0]
  4066c2:	6661      	str	r1, [r4, #100]	; 0x64
  4066c4:	6961      	ldr	r1, [r4, #20]
  4066c6:	1ad3      	subs	r3, r2, r3
  4066c8:	428b      	cmp	r3, r1
  4066ca:	dbe2      	blt.n	406692 <__swbuf_r+0x36>
  4066cc:	4621      	mov	r1, r4
  4066ce:	4630      	mov	r0, r6
  4066d0:	f7fe fc94 	bl	404ffc <_fflush_r>
  4066d4:	b940      	cbnz	r0, 4066e8 <__swbuf_r+0x8c>
  4066d6:	6822      	ldr	r2, [r4, #0]
  4066d8:	2301      	movs	r3, #1
  4066da:	e7db      	b.n	406694 <__swbuf_r+0x38>
  4066dc:	4621      	mov	r1, r4
  4066de:	4630      	mov	r0, r6
  4066e0:	f7fe fc8c 	bl	404ffc <_fflush_r>
  4066e4:	2800      	cmp	r0, #0
  4066e6:	d0e3      	beq.n	4066b0 <__swbuf_r+0x54>
  4066e8:	f04f 37ff 	mov.w	r7, #4294967295
  4066ec:	e7e0      	b.n	4066b0 <__swbuf_r+0x54>
  4066ee:	4621      	mov	r1, r4
  4066f0:	4630      	mov	r0, r6
  4066f2:	f7fe fb6f 	bl	404dd4 <__swsetup_r>
  4066f6:	2800      	cmp	r0, #0
  4066f8:	d1f6      	bne.n	4066e8 <__swbuf_r+0x8c>
  4066fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4066fe:	6923      	ldr	r3, [r4, #16]
  406700:	b291      	uxth	r1, r2
  406702:	e7bd      	b.n	406680 <__swbuf_r+0x24>
  406704:	f7fe fcd2 	bl	4050ac <__sinit>
  406708:	e7b0      	b.n	40666c <__swbuf_r+0x10>
  40670a:	bf00      	nop

0040670c <_wcrtomb_r>:
  40670c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40670e:	4606      	mov	r6, r0
  406710:	b085      	sub	sp, #20
  406712:	461f      	mov	r7, r3
  406714:	b189      	cbz	r1, 40673a <_wcrtomb_r+0x2e>
  406716:	4c10      	ldr	r4, [pc, #64]	; (406758 <_wcrtomb_r+0x4c>)
  406718:	4d10      	ldr	r5, [pc, #64]	; (40675c <_wcrtomb_r+0x50>)
  40671a:	6824      	ldr	r4, [r4, #0]
  40671c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40671e:	2c00      	cmp	r4, #0
  406720:	bf08      	it	eq
  406722:	462c      	moveq	r4, r5
  406724:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406728:	47a0      	blx	r4
  40672a:	1c43      	adds	r3, r0, #1
  40672c:	d103      	bne.n	406736 <_wcrtomb_r+0x2a>
  40672e:	2200      	movs	r2, #0
  406730:	238a      	movs	r3, #138	; 0x8a
  406732:	603a      	str	r2, [r7, #0]
  406734:	6033      	str	r3, [r6, #0]
  406736:	b005      	add	sp, #20
  406738:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40673a:	460c      	mov	r4, r1
  40673c:	4906      	ldr	r1, [pc, #24]	; (406758 <_wcrtomb_r+0x4c>)
  40673e:	4a07      	ldr	r2, [pc, #28]	; (40675c <_wcrtomb_r+0x50>)
  406740:	6809      	ldr	r1, [r1, #0]
  406742:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406744:	2900      	cmp	r1, #0
  406746:	bf08      	it	eq
  406748:	4611      	moveq	r1, r2
  40674a:	4622      	mov	r2, r4
  40674c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406750:	a901      	add	r1, sp, #4
  406752:	47a0      	blx	r4
  406754:	e7e9      	b.n	40672a <_wcrtomb_r+0x1e>
  406756:	bf00      	nop
  406758:	204000f0 	.word	0x204000f0
  40675c:	20400524 	.word	0x20400524

00406760 <__ascii_wctomb>:
  406760:	b121      	cbz	r1, 40676c <__ascii_wctomb+0xc>
  406762:	2aff      	cmp	r2, #255	; 0xff
  406764:	d804      	bhi.n	406770 <__ascii_wctomb+0x10>
  406766:	700a      	strb	r2, [r1, #0]
  406768:	2001      	movs	r0, #1
  40676a:	4770      	bx	lr
  40676c:	4608      	mov	r0, r1
  40676e:	4770      	bx	lr
  406770:	238a      	movs	r3, #138	; 0x8a
  406772:	6003      	str	r3, [r0, #0]
  406774:	f04f 30ff 	mov.w	r0, #4294967295
  406778:	4770      	bx	lr
  40677a:	bf00      	nop

0040677c <_write_r>:
  40677c:	b570      	push	{r4, r5, r6, lr}
  40677e:	460d      	mov	r5, r1
  406780:	4c08      	ldr	r4, [pc, #32]	; (4067a4 <_write_r+0x28>)
  406782:	4611      	mov	r1, r2
  406784:	4606      	mov	r6, r0
  406786:	461a      	mov	r2, r3
  406788:	4628      	mov	r0, r5
  40678a:	2300      	movs	r3, #0
  40678c:	6023      	str	r3, [r4, #0]
  40678e:	f7f9 fd3f 	bl	400210 <_write>
  406792:	1c43      	adds	r3, r0, #1
  406794:	d000      	beq.n	406798 <_write_r+0x1c>
  406796:	bd70      	pop	{r4, r5, r6, pc}
  406798:	6823      	ldr	r3, [r4, #0]
  40679a:	2b00      	cmp	r3, #0
  40679c:	d0fb      	beq.n	406796 <_write_r+0x1a>
  40679e:	6033      	str	r3, [r6, #0]
  4067a0:	bd70      	pop	{r4, r5, r6, pc}
  4067a2:	bf00      	nop
  4067a4:	2040108c 	.word	0x2040108c

004067a8 <__register_exitproc>:
  4067a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4067ac:	4d2c      	ldr	r5, [pc, #176]	; (406860 <__register_exitproc+0xb8>)
  4067ae:	4606      	mov	r6, r0
  4067b0:	6828      	ldr	r0, [r5, #0]
  4067b2:	4698      	mov	r8, r3
  4067b4:	460f      	mov	r7, r1
  4067b6:	4691      	mov	r9, r2
  4067b8:	f7ff f838 	bl	40582c <__retarget_lock_acquire_recursive>
  4067bc:	4b29      	ldr	r3, [pc, #164]	; (406864 <__register_exitproc+0xbc>)
  4067be:	681c      	ldr	r4, [r3, #0]
  4067c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4067c4:	2b00      	cmp	r3, #0
  4067c6:	d03e      	beq.n	406846 <__register_exitproc+0x9e>
  4067c8:	685a      	ldr	r2, [r3, #4]
  4067ca:	2a1f      	cmp	r2, #31
  4067cc:	dc1c      	bgt.n	406808 <__register_exitproc+0x60>
  4067ce:	f102 0e01 	add.w	lr, r2, #1
  4067d2:	b176      	cbz	r6, 4067f2 <__register_exitproc+0x4a>
  4067d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4067d8:	2401      	movs	r4, #1
  4067da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4067de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4067e2:	4094      	lsls	r4, r2
  4067e4:	4320      	orrs	r0, r4
  4067e6:	2e02      	cmp	r6, #2
  4067e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4067ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4067f0:	d023      	beq.n	40683a <__register_exitproc+0x92>
  4067f2:	3202      	adds	r2, #2
  4067f4:	f8c3 e004 	str.w	lr, [r3, #4]
  4067f8:	6828      	ldr	r0, [r5, #0]
  4067fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4067fe:	f7ff f817 	bl	405830 <__retarget_lock_release_recursive>
  406802:	2000      	movs	r0, #0
  406804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406808:	4b17      	ldr	r3, [pc, #92]	; (406868 <__register_exitproc+0xc0>)
  40680a:	b30b      	cbz	r3, 406850 <__register_exitproc+0xa8>
  40680c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406810:	f7ff f888 	bl	405924 <malloc>
  406814:	4603      	mov	r3, r0
  406816:	b1d8      	cbz	r0, 406850 <__register_exitproc+0xa8>
  406818:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40681c:	6002      	str	r2, [r0, #0]
  40681e:	2100      	movs	r1, #0
  406820:	6041      	str	r1, [r0, #4]
  406822:	460a      	mov	r2, r1
  406824:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406828:	f04f 0e01 	mov.w	lr, #1
  40682c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406830:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406834:	2e00      	cmp	r6, #0
  406836:	d0dc      	beq.n	4067f2 <__register_exitproc+0x4a>
  406838:	e7cc      	b.n	4067d4 <__register_exitproc+0x2c>
  40683a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40683e:	430c      	orrs	r4, r1
  406840:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406844:	e7d5      	b.n	4067f2 <__register_exitproc+0x4a>
  406846:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40684a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40684e:	e7bb      	b.n	4067c8 <__register_exitproc+0x20>
  406850:	6828      	ldr	r0, [r5, #0]
  406852:	f7fe ffed 	bl	405830 <__retarget_lock_release_recursive>
  406856:	f04f 30ff 	mov.w	r0, #4294967295
  40685a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40685e:	bf00      	nop
  406860:	20400520 	.word	0x20400520
  406864:	00406e3c 	.word	0x00406e3c
  406868:	00405925 	.word	0x00405925

0040686c <_close_r>:
  40686c:	b538      	push	{r3, r4, r5, lr}
  40686e:	4c07      	ldr	r4, [pc, #28]	; (40688c <_close_r+0x20>)
  406870:	2300      	movs	r3, #0
  406872:	4605      	mov	r5, r0
  406874:	4608      	mov	r0, r1
  406876:	6023      	str	r3, [r4, #0]
  406878:	f7fc f9e6 	bl	402c48 <_close>
  40687c:	1c43      	adds	r3, r0, #1
  40687e:	d000      	beq.n	406882 <_close_r+0x16>
  406880:	bd38      	pop	{r3, r4, r5, pc}
  406882:	6823      	ldr	r3, [r4, #0]
  406884:	2b00      	cmp	r3, #0
  406886:	d0fb      	beq.n	406880 <_close_r+0x14>
  406888:	602b      	str	r3, [r5, #0]
  40688a:	bd38      	pop	{r3, r4, r5, pc}
  40688c:	2040108c 	.word	0x2040108c

00406890 <_fclose_r>:
  406890:	b570      	push	{r4, r5, r6, lr}
  406892:	b159      	cbz	r1, 4068ac <_fclose_r+0x1c>
  406894:	4605      	mov	r5, r0
  406896:	460c      	mov	r4, r1
  406898:	b110      	cbz	r0, 4068a0 <_fclose_r+0x10>
  40689a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40689c:	2b00      	cmp	r3, #0
  40689e:	d03c      	beq.n	40691a <_fclose_r+0x8a>
  4068a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4068a2:	07d8      	lsls	r0, r3, #31
  4068a4:	d505      	bpl.n	4068b2 <_fclose_r+0x22>
  4068a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4068aa:	b92b      	cbnz	r3, 4068b8 <_fclose_r+0x28>
  4068ac:	2600      	movs	r6, #0
  4068ae:	4630      	mov	r0, r6
  4068b0:	bd70      	pop	{r4, r5, r6, pc}
  4068b2:	89a3      	ldrh	r3, [r4, #12]
  4068b4:	0599      	lsls	r1, r3, #22
  4068b6:	d53c      	bpl.n	406932 <_fclose_r+0xa2>
  4068b8:	4621      	mov	r1, r4
  4068ba:	4628      	mov	r0, r5
  4068bc:	f7fe fafe 	bl	404ebc <__sflush_r>
  4068c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4068c2:	4606      	mov	r6, r0
  4068c4:	b133      	cbz	r3, 4068d4 <_fclose_r+0x44>
  4068c6:	69e1      	ldr	r1, [r4, #28]
  4068c8:	4628      	mov	r0, r5
  4068ca:	4798      	blx	r3
  4068cc:	2800      	cmp	r0, #0
  4068ce:	bfb8      	it	lt
  4068d0:	f04f 36ff 	movlt.w	r6, #4294967295
  4068d4:	89a3      	ldrh	r3, [r4, #12]
  4068d6:	061a      	lsls	r2, r3, #24
  4068d8:	d422      	bmi.n	406920 <_fclose_r+0x90>
  4068da:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4068dc:	b141      	cbz	r1, 4068f0 <_fclose_r+0x60>
  4068de:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4068e2:	4299      	cmp	r1, r3
  4068e4:	d002      	beq.n	4068ec <_fclose_r+0x5c>
  4068e6:	4628      	mov	r0, r5
  4068e8:	f7fe fd06 	bl	4052f8 <_free_r>
  4068ec:	2300      	movs	r3, #0
  4068ee:	6323      	str	r3, [r4, #48]	; 0x30
  4068f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4068f2:	b121      	cbz	r1, 4068fe <_fclose_r+0x6e>
  4068f4:	4628      	mov	r0, r5
  4068f6:	f7fe fcff 	bl	4052f8 <_free_r>
  4068fa:	2300      	movs	r3, #0
  4068fc:	6463      	str	r3, [r4, #68]	; 0x44
  4068fe:	f7fe fc01 	bl	405104 <__sfp_lock_acquire>
  406902:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406904:	2200      	movs	r2, #0
  406906:	07db      	lsls	r3, r3, #31
  406908:	81a2      	strh	r2, [r4, #12]
  40690a:	d50e      	bpl.n	40692a <_fclose_r+0x9a>
  40690c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40690e:	f7fe ff8b 	bl	405828 <__retarget_lock_close_recursive>
  406912:	f7fe fbfd 	bl	405110 <__sfp_lock_release>
  406916:	4630      	mov	r0, r6
  406918:	bd70      	pop	{r4, r5, r6, pc}
  40691a:	f7fe fbc7 	bl	4050ac <__sinit>
  40691e:	e7bf      	b.n	4068a0 <_fclose_r+0x10>
  406920:	6921      	ldr	r1, [r4, #16]
  406922:	4628      	mov	r0, r5
  406924:	f7fe fce8 	bl	4052f8 <_free_r>
  406928:	e7d7      	b.n	4068da <_fclose_r+0x4a>
  40692a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40692c:	f7fe ff80 	bl	405830 <__retarget_lock_release_recursive>
  406930:	e7ec      	b.n	40690c <_fclose_r+0x7c>
  406932:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406934:	f7fe ff7a 	bl	40582c <__retarget_lock_acquire_recursive>
  406938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40693c:	2b00      	cmp	r3, #0
  40693e:	d1bb      	bne.n	4068b8 <_fclose_r+0x28>
  406940:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406942:	f016 0601 	ands.w	r6, r6, #1
  406946:	d1b1      	bne.n	4068ac <_fclose_r+0x1c>
  406948:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40694a:	f7fe ff71 	bl	405830 <__retarget_lock_release_recursive>
  40694e:	4630      	mov	r0, r6
  406950:	bd70      	pop	{r4, r5, r6, pc}
  406952:	bf00      	nop

00406954 <_fstat_r>:
  406954:	b538      	push	{r3, r4, r5, lr}
  406956:	460b      	mov	r3, r1
  406958:	4c07      	ldr	r4, [pc, #28]	; (406978 <_fstat_r+0x24>)
  40695a:	4605      	mov	r5, r0
  40695c:	4611      	mov	r1, r2
  40695e:	4618      	mov	r0, r3
  406960:	2300      	movs	r3, #0
  406962:	6023      	str	r3, [r4, #0]
  406964:	f7fc f973 	bl	402c4e <_fstat>
  406968:	1c43      	adds	r3, r0, #1
  40696a:	d000      	beq.n	40696e <_fstat_r+0x1a>
  40696c:	bd38      	pop	{r3, r4, r5, pc}
  40696e:	6823      	ldr	r3, [r4, #0]
  406970:	2b00      	cmp	r3, #0
  406972:	d0fb      	beq.n	40696c <_fstat_r+0x18>
  406974:	602b      	str	r3, [r5, #0]
  406976:	bd38      	pop	{r3, r4, r5, pc}
  406978:	2040108c 	.word	0x2040108c

0040697c <_isatty_r>:
  40697c:	b538      	push	{r3, r4, r5, lr}
  40697e:	4c07      	ldr	r4, [pc, #28]	; (40699c <_isatty_r+0x20>)
  406980:	2300      	movs	r3, #0
  406982:	4605      	mov	r5, r0
  406984:	4608      	mov	r0, r1
  406986:	6023      	str	r3, [r4, #0]
  406988:	f7fc f966 	bl	402c58 <_isatty>
  40698c:	1c43      	adds	r3, r0, #1
  40698e:	d000      	beq.n	406992 <_isatty_r+0x16>
  406990:	bd38      	pop	{r3, r4, r5, pc}
  406992:	6823      	ldr	r3, [r4, #0]
  406994:	2b00      	cmp	r3, #0
  406996:	d0fb      	beq.n	406990 <_isatty_r+0x14>
  406998:	602b      	str	r3, [r5, #0]
  40699a:	bd38      	pop	{r3, r4, r5, pc}
  40699c:	2040108c 	.word	0x2040108c

004069a0 <_lseek_r>:
  4069a0:	b570      	push	{r4, r5, r6, lr}
  4069a2:	460d      	mov	r5, r1
  4069a4:	4c08      	ldr	r4, [pc, #32]	; (4069c8 <_lseek_r+0x28>)
  4069a6:	4611      	mov	r1, r2
  4069a8:	4606      	mov	r6, r0
  4069aa:	461a      	mov	r2, r3
  4069ac:	4628      	mov	r0, r5
  4069ae:	2300      	movs	r3, #0
  4069b0:	6023      	str	r3, [r4, #0]
  4069b2:	f7fc f953 	bl	402c5c <_lseek>
  4069b6:	1c43      	adds	r3, r0, #1
  4069b8:	d000      	beq.n	4069bc <_lseek_r+0x1c>
  4069ba:	bd70      	pop	{r4, r5, r6, pc}
  4069bc:	6823      	ldr	r3, [r4, #0]
  4069be:	2b00      	cmp	r3, #0
  4069c0:	d0fb      	beq.n	4069ba <_lseek_r+0x1a>
  4069c2:	6033      	str	r3, [r6, #0]
  4069c4:	bd70      	pop	{r4, r5, r6, pc}
  4069c6:	bf00      	nop
  4069c8:	2040108c 	.word	0x2040108c

004069cc <_read_r>:
  4069cc:	b570      	push	{r4, r5, r6, lr}
  4069ce:	460d      	mov	r5, r1
  4069d0:	4c08      	ldr	r4, [pc, #32]	; (4069f4 <_read_r+0x28>)
  4069d2:	4611      	mov	r1, r2
  4069d4:	4606      	mov	r6, r0
  4069d6:	461a      	mov	r2, r3
  4069d8:	4628      	mov	r0, r5
  4069da:	2300      	movs	r3, #0
  4069dc:	6023      	str	r3, [r4, #0]
  4069de:	f7f9 fbf9 	bl	4001d4 <_read>
  4069e2:	1c43      	adds	r3, r0, #1
  4069e4:	d000      	beq.n	4069e8 <_read_r+0x1c>
  4069e6:	bd70      	pop	{r4, r5, r6, pc}
  4069e8:	6823      	ldr	r3, [r4, #0]
  4069ea:	2b00      	cmp	r3, #0
  4069ec:	d0fb      	beq.n	4069e6 <_read_r+0x1a>
  4069ee:	6033      	str	r3, [r6, #0]
  4069f0:	bd70      	pop	{r4, r5, r6, pc}
  4069f2:	bf00      	nop
  4069f4:	2040108c 	.word	0x2040108c

004069f8 <__aeabi_uldivmod>:
  4069f8:	b953      	cbnz	r3, 406a10 <__aeabi_uldivmod+0x18>
  4069fa:	b94a      	cbnz	r2, 406a10 <__aeabi_uldivmod+0x18>
  4069fc:	2900      	cmp	r1, #0
  4069fe:	bf08      	it	eq
  406a00:	2800      	cmpeq	r0, #0
  406a02:	bf1c      	itt	ne
  406a04:	f04f 31ff 	movne.w	r1, #4294967295
  406a08:	f04f 30ff 	movne.w	r0, #4294967295
  406a0c:	f000 b97a 	b.w	406d04 <__aeabi_idiv0>
  406a10:	f1ad 0c08 	sub.w	ip, sp, #8
  406a14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406a18:	f000 f806 	bl	406a28 <__udivmoddi4>
  406a1c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406a20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406a24:	b004      	add	sp, #16
  406a26:	4770      	bx	lr

00406a28 <__udivmoddi4>:
  406a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406a2c:	468c      	mov	ip, r1
  406a2e:	460d      	mov	r5, r1
  406a30:	4604      	mov	r4, r0
  406a32:	9e08      	ldr	r6, [sp, #32]
  406a34:	2b00      	cmp	r3, #0
  406a36:	d151      	bne.n	406adc <__udivmoddi4+0xb4>
  406a38:	428a      	cmp	r2, r1
  406a3a:	4617      	mov	r7, r2
  406a3c:	d96d      	bls.n	406b1a <__udivmoddi4+0xf2>
  406a3e:	fab2 fe82 	clz	lr, r2
  406a42:	f1be 0f00 	cmp.w	lr, #0
  406a46:	d00b      	beq.n	406a60 <__udivmoddi4+0x38>
  406a48:	f1ce 0c20 	rsb	ip, lr, #32
  406a4c:	fa01 f50e 	lsl.w	r5, r1, lr
  406a50:	fa20 fc0c 	lsr.w	ip, r0, ip
  406a54:	fa02 f70e 	lsl.w	r7, r2, lr
  406a58:	ea4c 0c05 	orr.w	ip, ip, r5
  406a5c:	fa00 f40e 	lsl.w	r4, r0, lr
  406a60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406a64:	0c25      	lsrs	r5, r4, #16
  406a66:	fbbc f8fa 	udiv	r8, ip, sl
  406a6a:	fa1f f987 	uxth.w	r9, r7
  406a6e:	fb0a cc18 	mls	ip, sl, r8, ip
  406a72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406a76:	fb08 f309 	mul.w	r3, r8, r9
  406a7a:	42ab      	cmp	r3, r5
  406a7c:	d90a      	bls.n	406a94 <__udivmoddi4+0x6c>
  406a7e:	19ed      	adds	r5, r5, r7
  406a80:	f108 32ff 	add.w	r2, r8, #4294967295
  406a84:	f080 8123 	bcs.w	406cce <__udivmoddi4+0x2a6>
  406a88:	42ab      	cmp	r3, r5
  406a8a:	f240 8120 	bls.w	406cce <__udivmoddi4+0x2a6>
  406a8e:	f1a8 0802 	sub.w	r8, r8, #2
  406a92:	443d      	add	r5, r7
  406a94:	1aed      	subs	r5, r5, r3
  406a96:	b2a4      	uxth	r4, r4
  406a98:	fbb5 f0fa 	udiv	r0, r5, sl
  406a9c:	fb0a 5510 	mls	r5, sl, r0, r5
  406aa0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406aa4:	fb00 f909 	mul.w	r9, r0, r9
  406aa8:	45a1      	cmp	r9, r4
  406aaa:	d909      	bls.n	406ac0 <__udivmoddi4+0x98>
  406aac:	19e4      	adds	r4, r4, r7
  406aae:	f100 33ff 	add.w	r3, r0, #4294967295
  406ab2:	f080 810a 	bcs.w	406cca <__udivmoddi4+0x2a2>
  406ab6:	45a1      	cmp	r9, r4
  406ab8:	f240 8107 	bls.w	406cca <__udivmoddi4+0x2a2>
  406abc:	3802      	subs	r0, #2
  406abe:	443c      	add	r4, r7
  406ac0:	eba4 0409 	sub.w	r4, r4, r9
  406ac4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406ac8:	2100      	movs	r1, #0
  406aca:	2e00      	cmp	r6, #0
  406acc:	d061      	beq.n	406b92 <__udivmoddi4+0x16a>
  406ace:	fa24 f40e 	lsr.w	r4, r4, lr
  406ad2:	2300      	movs	r3, #0
  406ad4:	6034      	str	r4, [r6, #0]
  406ad6:	6073      	str	r3, [r6, #4]
  406ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406adc:	428b      	cmp	r3, r1
  406ade:	d907      	bls.n	406af0 <__udivmoddi4+0xc8>
  406ae0:	2e00      	cmp	r6, #0
  406ae2:	d054      	beq.n	406b8e <__udivmoddi4+0x166>
  406ae4:	2100      	movs	r1, #0
  406ae6:	e886 0021 	stmia.w	r6, {r0, r5}
  406aea:	4608      	mov	r0, r1
  406aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406af0:	fab3 f183 	clz	r1, r3
  406af4:	2900      	cmp	r1, #0
  406af6:	f040 808e 	bne.w	406c16 <__udivmoddi4+0x1ee>
  406afa:	42ab      	cmp	r3, r5
  406afc:	d302      	bcc.n	406b04 <__udivmoddi4+0xdc>
  406afe:	4282      	cmp	r2, r0
  406b00:	f200 80fa 	bhi.w	406cf8 <__udivmoddi4+0x2d0>
  406b04:	1a84      	subs	r4, r0, r2
  406b06:	eb65 0503 	sbc.w	r5, r5, r3
  406b0a:	2001      	movs	r0, #1
  406b0c:	46ac      	mov	ip, r5
  406b0e:	2e00      	cmp	r6, #0
  406b10:	d03f      	beq.n	406b92 <__udivmoddi4+0x16a>
  406b12:	e886 1010 	stmia.w	r6, {r4, ip}
  406b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406b1a:	b912      	cbnz	r2, 406b22 <__udivmoddi4+0xfa>
  406b1c:	2701      	movs	r7, #1
  406b1e:	fbb7 f7f2 	udiv	r7, r7, r2
  406b22:	fab7 fe87 	clz	lr, r7
  406b26:	f1be 0f00 	cmp.w	lr, #0
  406b2a:	d134      	bne.n	406b96 <__udivmoddi4+0x16e>
  406b2c:	1beb      	subs	r3, r5, r7
  406b2e:	0c3a      	lsrs	r2, r7, #16
  406b30:	fa1f fc87 	uxth.w	ip, r7
  406b34:	2101      	movs	r1, #1
  406b36:	fbb3 f8f2 	udiv	r8, r3, r2
  406b3a:	0c25      	lsrs	r5, r4, #16
  406b3c:	fb02 3318 	mls	r3, r2, r8, r3
  406b40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406b44:	fb0c f308 	mul.w	r3, ip, r8
  406b48:	42ab      	cmp	r3, r5
  406b4a:	d907      	bls.n	406b5c <__udivmoddi4+0x134>
  406b4c:	19ed      	adds	r5, r5, r7
  406b4e:	f108 30ff 	add.w	r0, r8, #4294967295
  406b52:	d202      	bcs.n	406b5a <__udivmoddi4+0x132>
  406b54:	42ab      	cmp	r3, r5
  406b56:	f200 80d1 	bhi.w	406cfc <__udivmoddi4+0x2d4>
  406b5a:	4680      	mov	r8, r0
  406b5c:	1aed      	subs	r5, r5, r3
  406b5e:	b2a3      	uxth	r3, r4
  406b60:	fbb5 f0f2 	udiv	r0, r5, r2
  406b64:	fb02 5510 	mls	r5, r2, r0, r5
  406b68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406b6c:	fb0c fc00 	mul.w	ip, ip, r0
  406b70:	45a4      	cmp	ip, r4
  406b72:	d907      	bls.n	406b84 <__udivmoddi4+0x15c>
  406b74:	19e4      	adds	r4, r4, r7
  406b76:	f100 33ff 	add.w	r3, r0, #4294967295
  406b7a:	d202      	bcs.n	406b82 <__udivmoddi4+0x15a>
  406b7c:	45a4      	cmp	ip, r4
  406b7e:	f200 80b8 	bhi.w	406cf2 <__udivmoddi4+0x2ca>
  406b82:	4618      	mov	r0, r3
  406b84:	eba4 040c 	sub.w	r4, r4, ip
  406b88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406b8c:	e79d      	b.n	406aca <__udivmoddi4+0xa2>
  406b8e:	4631      	mov	r1, r6
  406b90:	4630      	mov	r0, r6
  406b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406b96:	f1ce 0420 	rsb	r4, lr, #32
  406b9a:	fa05 f30e 	lsl.w	r3, r5, lr
  406b9e:	fa07 f70e 	lsl.w	r7, r7, lr
  406ba2:	fa20 f804 	lsr.w	r8, r0, r4
  406ba6:	0c3a      	lsrs	r2, r7, #16
  406ba8:	fa25 f404 	lsr.w	r4, r5, r4
  406bac:	ea48 0803 	orr.w	r8, r8, r3
  406bb0:	fbb4 f1f2 	udiv	r1, r4, r2
  406bb4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406bb8:	fb02 4411 	mls	r4, r2, r1, r4
  406bbc:	fa1f fc87 	uxth.w	ip, r7
  406bc0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406bc4:	fb01 f30c 	mul.w	r3, r1, ip
  406bc8:	42ab      	cmp	r3, r5
  406bca:	fa00 f40e 	lsl.w	r4, r0, lr
  406bce:	d909      	bls.n	406be4 <__udivmoddi4+0x1bc>
  406bd0:	19ed      	adds	r5, r5, r7
  406bd2:	f101 30ff 	add.w	r0, r1, #4294967295
  406bd6:	f080 808a 	bcs.w	406cee <__udivmoddi4+0x2c6>
  406bda:	42ab      	cmp	r3, r5
  406bdc:	f240 8087 	bls.w	406cee <__udivmoddi4+0x2c6>
  406be0:	3902      	subs	r1, #2
  406be2:	443d      	add	r5, r7
  406be4:	1aeb      	subs	r3, r5, r3
  406be6:	fa1f f588 	uxth.w	r5, r8
  406bea:	fbb3 f0f2 	udiv	r0, r3, r2
  406bee:	fb02 3310 	mls	r3, r2, r0, r3
  406bf2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406bf6:	fb00 f30c 	mul.w	r3, r0, ip
  406bfa:	42ab      	cmp	r3, r5
  406bfc:	d907      	bls.n	406c0e <__udivmoddi4+0x1e6>
  406bfe:	19ed      	adds	r5, r5, r7
  406c00:	f100 38ff 	add.w	r8, r0, #4294967295
  406c04:	d26f      	bcs.n	406ce6 <__udivmoddi4+0x2be>
  406c06:	42ab      	cmp	r3, r5
  406c08:	d96d      	bls.n	406ce6 <__udivmoddi4+0x2be>
  406c0a:	3802      	subs	r0, #2
  406c0c:	443d      	add	r5, r7
  406c0e:	1aeb      	subs	r3, r5, r3
  406c10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406c14:	e78f      	b.n	406b36 <__udivmoddi4+0x10e>
  406c16:	f1c1 0720 	rsb	r7, r1, #32
  406c1a:	fa22 f807 	lsr.w	r8, r2, r7
  406c1e:	408b      	lsls	r3, r1
  406c20:	fa05 f401 	lsl.w	r4, r5, r1
  406c24:	ea48 0303 	orr.w	r3, r8, r3
  406c28:	fa20 fe07 	lsr.w	lr, r0, r7
  406c2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406c30:	40fd      	lsrs	r5, r7
  406c32:	ea4e 0e04 	orr.w	lr, lr, r4
  406c36:	fbb5 f9fc 	udiv	r9, r5, ip
  406c3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406c3e:	fb0c 5519 	mls	r5, ip, r9, r5
  406c42:	fa1f f883 	uxth.w	r8, r3
  406c46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406c4a:	fb09 f408 	mul.w	r4, r9, r8
  406c4e:	42ac      	cmp	r4, r5
  406c50:	fa02 f201 	lsl.w	r2, r2, r1
  406c54:	fa00 fa01 	lsl.w	sl, r0, r1
  406c58:	d908      	bls.n	406c6c <__udivmoddi4+0x244>
  406c5a:	18ed      	adds	r5, r5, r3
  406c5c:	f109 30ff 	add.w	r0, r9, #4294967295
  406c60:	d243      	bcs.n	406cea <__udivmoddi4+0x2c2>
  406c62:	42ac      	cmp	r4, r5
  406c64:	d941      	bls.n	406cea <__udivmoddi4+0x2c2>
  406c66:	f1a9 0902 	sub.w	r9, r9, #2
  406c6a:	441d      	add	r5, r3
  406c6c:	1b2d      	subs	r5, r5, r4
  406c6e:	fa1f fe8e 	uxth.w	lr, lr
  406c72:	fbb5 f0fc 	udiv	r0, r5, ip
  406c76:	fb0c 5510 	mls	r5, ip, r0, r5
  406c7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406c7e:	fb00 f808 	mul.w	r8, r0, r8
  406c82:	45a0      	cmp	r8, r4
  406c84:	d907      	bls.n	406c96 <__udivmoddi4+0x26e>
  406c86:	18e4      	adds	r4, r4, r3
  406c88:	f100 35ff 	add.w	r5, r0, #4294967295
  406c8c:	d229      	bcs.n	406ce2 <__udivmoddi4+0x2ba>
  406c8e:	45a0      	cmp	r8, r4
  406c90:	d927      	bls.n	406ce2 <__udivmoddi4+0x2ba>
  406c92:	3802      	subs	r0, #2
  406c94:	441c      	add	r4, r3
  406c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406c9a:	eba4 0408 	sub.w	r4, r4, r8
  406c9e:	fba0 8902 	umull	r8, r9, r0, r2
  406ca2:	454c      	cmp	r4, r9
  406ca4:	46c6      	mov	lr, r8
  406ca6:	464d      	mov	r5, r9
  406ca8:	d315      	bcc.n	406cd6 <__udivmoddi4+0x2ae>
  406caa:	d012      	beq.n	406cd2 <__udivmoddi4+0x2aa>
  406cac:	b156      	cbz	r6, 406cc4 <__udivmoddi4+0x29c>
  406cae:	ebba 030e 	subs.w	r3, sl, lr
  406cb2:	eb64 0405 	sbc.w	r4, r4, r5
  406cb6:	fa04 f707 	lsl.w	r7, r4, r7
  406cba:	40cb      	lsrs	r3, r1
  406cbc:	431f      	orrs	r7, r3
  406cbe:	40cc      	lsrs	r4, r1
  406cc0:	6037      	str	r7, [r6, #0]
  406cc2:	6074      	str	r4, [r6, #4]
  406cc4:	2100      	movs	r1, #0
  406cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406cca:	4618      	mov	r0, r3
  406ccc:	e6f8      	b.n	406ac0 <__udivmoddi4+0x98>
  406cce:	4690      	mov	r8, r2
  406cd0:	e6e0      	b.n	406a94 <__udivmoddi4+0x6c>
  406cd2:	45c2      	cmp	sl, r8
  406cd4:	d2ea      	bcs.n	406cac <__udivmoddi4+0x284>
  406cd6:	ebb8 0e02 	subs.w	lr, r8, r2
  406cda:	eb69 0503 	sbc.w	r5, r9, r3
  406cde:	3801      	subs	r0, #1
  406ce0:	e7e4      	b.n	406cac <__udivmoddi4+0x284>
  406ce2:	4628      	mov	r0, r5
  406ce4:	e7d7      	b.n	406c96 <__udivmoddi4+0x26e>
  406ce6:	4640      	mov	r0, r8
  406ce8:	e791      	b.n	406c0e <__udivmoddi4+0x1e6>
  406cea:	4681      	mov	r9, r0
  406cec:	e7be      	b.n	406c6c <__udivmoddi4+0x244>
  406cee:	4601      	mov	r1, r0
  406cf0:	e778      	b.n	406be4 <__udivmoddi4+0x1bc>
  406cf2:	3802      	subs	r0, #2
  406cf4:	443c      	add	r4, r7
  406cf6:	e745      	b.n	406b84 <__udivmoddi4+0x15c>
  406cf8:	4608      	mov	r0, r1
  406cfa:	e708      	b.n	406b0e <__udivmoddi4+0xe6>
  406cfc:	f1a8 0802 	sub.w	r8, r8, #2
  406d00:	443d      	add	r5, r7
  406d02:	e72b      	b.n	406b5c <__udivmoddi4+0x134>

00406d04 <__aeabi_idiv0>:
  406d04:	4770      	bx	lr
  406d06:	bf00      	nop

00406d08 <SDRAM_INSIGNIS_16M>:
  406d08:	0016 0000 0030 0000 d5f9 f955 5253 4d41     ....0.....U.SRAM
  406d18:	0a0d 0000 5253 4d41 4320 4d4f 4c50 5445     ....SRAM COMPLET
  406d28:	0d45 000a 5825 2520 0d58 000a 5825 2520     E...%X %X...%X %
  406d38:	2058 5825 2520 2058 5825 2520 2058 5825     X %X %X %X %X %X
  406d48:	2520 2058 5825 2520 2058 5825 2520 2058      %X %X %X %X %X 
  406d58:	5825 2520 2058 5825 2520 2058 5825 2520     %X %X %X %X %X %
  406d68:	2058 5825 2520 2058 5825 0a0d 0000 0000     X %X %X %X......
  406d78:	0a0d 4f42 544f 4720 4f4f 0d44 000a 0000     ..BOOT GOOD.....
  406d88:	5542 4b4c 4f20 5455 5220 5643 3a44 2520     BULK OUT RCVD: %
  406d98:	2078 7825 2520 2078 7825 2520 2078 7825     x %x %x %x %x %x
  406da8:	2520 2078 7825 0a0d 0000 0000 5542 4b4c      %x %x......BULK
  406db8:	4920 204e 4144 4154 5320 4e45 3a54 2520      IN DATA SENT: %
  406dc8:	2078 7825 2520 2078 7825 2520 2078 7825     x %x %x %x %x %x
  406dd8:	2520 2078 7825 0a0d 0000 0000 6c42 6e69      %x %x......Blin
  406de8:	656b 0d64 000a 0000 4e49 2054 4e49 203a     ked.....INT IN: 
  406df8:	6425 2520 2064 6425 2520 2064 6425 2520     %d %d %d %d %d %
  406e08:	2064 6425 0a0d 0000 4e49 2054 554f 3a54     d %d....INT OUT:
  406e18:	2520 2064 6425 2520 2064 6425 2520 2064      %d %d %d %d %d 
  406e28:	6425 2520 0d64 000a 4553 544e 5020 4349     %d %d...SENT PIC
  406e38:	0a0d 0000                                   ....

00406e3c <_global_impure_ptr>:
  406e3c:	00f8 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  406e4c:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  406e5c:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  406e6c:	296c 0000                                   l)..

00406e70 <blanks.7217>:
  406e70:	2020 2020 2020 2020 2020 2020 2020 2020                     

00406e80 <zeroes.7218>:
  406e80:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  406e90:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00406ea0 <_ctype_>:
  406ea0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  406eb0:	2020 2020 2020 2020 2020 2020 2020 2020                     
  406ec0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  406ed0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  406ee0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  406ef0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  406f00:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  406f10:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  406f20:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00406fa4 <_init>:
  406fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406fa6:	bf00      	nop
  406fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406faa:	bc08      	pop	{r3}
  406fac:	469e      	mov	lr, r3
  406fae:	4770      	bx	lr

00406fb0 <__init_array_start>:
  406fb0:	00404e9d 	.word	0x00404e9d

00406fb4 <__frame_dummy_init_array_entry>:
  406fb4:	0040018d                                ..@.

00406fb8 <_fini>:
  406fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406fba:	bf00      	nop
  406fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406fbe:	bc08      	pop	{r3}
  406fc0:	469e      	mov	lr, r3
  406fc2:	4770      	bx	lr

00406fc4 <__fini_array_start>:
  406fc4:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <udi_api_vendor>:
2040000c:	0565 0040 058d 0040 05a9 0040 0559 0040     e.@...@...@.Y.@.
2040001c:	0000 0000                                   ....

20400020 <udc_config>:
20400020:	007c 2040 002c 2040 0000 0000               |.@ ,.@ ....

2040002c <udc_config_lsfs>:
2040002c:	0034 2040 0090 2040                         4.@ ..@ 

20400034 <udc_desc_fs>:
20400034:	0209 0045 0101 c000 0932 0004 0000 ffff     ..E.....2.......
20400044:	00ff 0409 0100 ff06 ffff 0700 8105 4003     ...............@
20400054:	0100 0507 0302 0040 0701 8305 4002 0000     ......@......@..
20400064:	0507 0204 0040 0700 8505 0001 0101 0507     ....@...........
20400074:	0106 0100 0001 0000                         ........

2040007c <udc_device_desc>:
2040007c:	0112 0200 0000 4000 03eb 2423 0100 0201     .......@..#$....
2040008c:	0100 0000                                   ....

20400090 <udi_apis>:
20400090:	000c 2040                                   ..@ 

20400094 <udc_string_desc>:
20400094:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

204000c0 <udc_string_desc_languageid>:
204000c0:	0304 0409                                   ....

204000c4 <udc_string_manufacturer_name>:
204000c4:	6957 646c 696c 6566 4420 7461 2061 6353     Wildlife Data Sc
204000d4:	6569 636e 0065 0000                         ience...

204000dc <udc_string_product_name>:
204000dc:	4457 2053 6544 6976 6563 0100                    WDS Device.

204000e7 <g_interrupt_enabled>:
204000e7:	0001                                             .

204000e8 <SystemCoreClock>:
204000e8:	0900 003d                                   ..=.

204000ec <picBuff>:
204000ec:	0000 7100                                   ...q

204000f0 <_impure_ptr>:
204000f0:	00f8 2040 0000 0000                         ..@ ....

204000f8 <impure_data>:
204000f8:	0000 0000 03e4 2040 044c 2040 04b4 2040     ......@ L.@ ..@ 
	...
204001a0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204001b0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400520 <__atexit_recursive_mutex>:
20400520:	1068 2040                                   h.@ 

20400524 <__global_locale>:
20400524:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400544:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400564:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400584:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400604:	6761 0040 5e95 0040 0000 0000 6ea0 0040     ag@..^@......n@.
20400614:	6e9c 0040 6d74 0040 6d74 0040 6d74 0040     .n@.tm@.tm@.tm@.
20400624:	6d74 0040 6d74 0040 6d74 0040 6d74 0040     tm@.tm@.tm@.tm@.
20400634:	6d74 0040 6d74 0040 ffff ffff ffff ffff     tm@.tm@.........
20400644:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040066c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20400690 <__malloc_av_>:
	...
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 
204009c8:	09c0 2040 09c0 2040 09c8 2040 09c8 2040     ..@ ..@ ..@ ..@ 
204009d8:	09d0 2040 09d0 2040 09d8 2040 09d8 2040     ..@ ..@ ..@ ..@ 
204009e8:	09e0 2040 09e0 2040 09e8 2040 09e8 2040     ..@ ..@ ..@ ..@ 
204009f8:	09f0 2040 09f0 2040 09f8 2040 09f8 2040     ..@ ..@ ..@ ..@ 
20400a08:	0a00 2040 0a00 2040 0a08 2040 0a08 2040     ..@ ..@ ..@ ..@ 
20400a18:	0a10 2040 0a10 2040 0a18 2040 0a18 2040     ..@ ..@ ..@ ..@ 
20400a28:	0a20 2040 0a20 2040 0a28 2040 0a28 2040      .@  .@ (.@ (.@ 
20400a38:	0a30 2040 0a30 2040 0a38 2040 0a38 2040     0.@ 0.@ 8.@ 8.@ 
20400a48:	0a40 2040 0a40 2040 0a48 2040 0a48 2040     @.@ @.@ H.@ H.@ 
20400a58:	0a50 2040 0a50 2040 0a58 2040 0a58 2040     P.@ P.@ X.@ X.@ 
20400a68:	0a60 2040 0a60 2040 0a68 2040 0a68 2040     `.@ `.@ h.@ h.@ 
20400a78:	0a70 2040 0a70 2040 0a78 2040 0a78 2040     p.@ p.@ x.@ x.@ 
20400a88:	0a80 2040 0a80 2040 0a88 2040 0a88 2040     ..@ ..@ ..@ ..@ 

20400a98 <__malloc_sbrk_base>:
20400a98:	ffff ffff                                   ....

20400a9c <__malloc_trim_threshold>:
20400a9c:	0000 0002                                   ....
