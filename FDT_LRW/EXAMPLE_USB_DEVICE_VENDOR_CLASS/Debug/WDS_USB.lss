
WDS_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010a98  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00410a98  00410a98  00020a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b30  20400000  00410aa0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004e4  20400b40  004115e0  00030b30  2**5
                  ALLOC
  4 .stack        00008004  20401024  00411ac4  00030b30  2**0
                  ALLOC
  5 .heap         00000200  20409028  00419ac8  00030b30  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00030b30  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00030b5e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00051a8f  00000000  00000000  00030bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007ef6  00000000  00000000  00082646  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f61c  00000000  00000000  0008a53c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001888  00000000  00000000  000a9b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001c10  00000000  00000000  000ab3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002f7a9  00000000  00000000  000acff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023b68  00000000  00000000  000dc799  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a8bc1  00000000  00000000  00100301  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004ce0  00000000  00000000  001a8ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	28 90 40 20 ad 4e 40 00 a9 4e 40 00 a9 4e 40 00     (.@ .N@..N@..N@.
  400010:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 00 00 00 00     .N@..N@..N@.....
	...
  40002c:	a9 4e 40 00 a9 4e 40 00 00 00 00 00 a9 4e 40 00     .N@..N@......N@.
  40003c:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .N@..N@..N@..N@.
  40004c:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .N@..N@..N@..N@.
  40005c:	a9 4e 40 00 a9 4e 40 00 00 00 00 00 7d 36 40 00     .N@..N@.....}6@.
  40006c:	91 36 40 00 a5 36 40 00 a9 4e 40 00 a9 4e 40 00     .6@..6@..N@..N@.
  40007c:	a9 4e 40 00 b9 36 40 00 cd 36 40 00 a9 4e 40 00     .N@..6@..6@..N@.
  40008c:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .N@..N@..N@..N@.
  40009c:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .N@..N@..N@..N@.
  4000ac:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .N@..N@..N@..N@.
  4000bc:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 25 40 40 00     .N@..N@..N@.%@@.
  4000cc:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .N@..N@..N@..N@.
  4000dc:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .N@..N@..N@..N@.
  4000ec:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .N@..N@..N@..N@.
  4000fc:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .N@..N@..N@..N@.
  40010c:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 00 00 00 00     .N@..N@..N@.....
  40011c:	00 00 00 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .....N@..N@..N@.
  40012c:	e5 78 40 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .x@..N@..N@..N@.
  40013c:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .N@..N@..N@..N@.
  40014c:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00 a9 4e 40 00     .N@..N@..N@..N@.
  40015c:	a9 4e 40 00 a9 4e 40 00 a9 4e 40 00                 .N@..N@..N@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400b40 	.word	0x20400b40
  400184:	00000000 	.word	0x00000000
  400188:	00410aa0 	.word	0x00410aa0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00410aa0 	.word	0x00410aa0
  4001c8:	20400b44 	.word	0x20400b44
  4001cc:	00410aa0 	.word	0x00410aa0
  4001d0:	00000000 	.word	0x00000000

004001d4 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twihs* const p_twi, twihs_packet_t* const p_packet)
{
  4001d4:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twihs_master_read(p_twi, p_packet);
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <ov_read_reg+0x8>)
  4001d8:	4798      	blx	r3

	return ul_status;
}
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	0040157d 	.word	0x0040157d

004001e0 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twihs* const p_twi, twihs_packet_t* const p_packet)
{
  4001e0:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twihs_master_write(p_twi, p_packet);
  4001e2:	4b01      	ldr	r3, [pc, #4]	; (4001e8 <ov_write_reg+0x8>)
  4001e4:	4798      	blx	r3

	return ul_status;
}
  4001e6:	bd08      	pop	{r3, pc}
  4001e8:	00401629 	.word	0x00401629

004001ec <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twihs* const p_twi, const ov_reg *p_reg_list)
{
  4001ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001f0:	b086      	sub	sp, #24
  4001f2:	4606      	mov	r6, r0
  4001f4:	1c8c      	adds	r4, r1, #2
			twi_packet_regs.addr_length = 2;
			twi_packet_regs.chip = OV_I2C_2655_ADDRESS;
			twi_packet_regs.length = 1;
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  4001f6:	4d15      	ldr	r5, [pc, #84]	; (40024c <ov_write_regs+0x60>)
			delay_ms(5);
  4001f8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400254 <ov_write_regs+0x68>
  4001fc:	4f14      	ldr	r7, [pc, #80]	; (400250 <ov_write_regs+0x64>)
	while (!((p_next->reg == OV_REG_TERM) &&
  4001fe:	e015      	b.n	40022c <ov_write_regs+0x40>
  400200:	7822      	ldrb	r2, [r4, #0]
  400202:	2aff      	cmp	r2, #255	; 0xff
  400204:	d01e      	beq.n	400244 <ov_write_regs+0x58>
			twi_packet_regs.addr[0] = (p_next->reg)>>8;
  400206:	0a1a      	lsrs	r2, r3, #8
  400208:	f88d 2004 	strb.w	r2, [sp, #4]
			twi_packet_regs.addr[1] = (p_next->reg)&0x00FF;
  40020c:	f88d 3005 	strb.w	r3, [sp, #5]
			twi_packet_regs.addr_length = 2;
  400210:	2302      	movs	r3, #2
  400212:	9302      	str	r3, [sp, #8]
			twi_packet_regs.chip = OV_I2C_2655_ADDRESS;
  400214:	2330      	movs	r3, #48	; 0x30
  400216:	f88d 3014 	strb.w	r3, [sp, #20]
			twi_packet_regs.length = 1;
  40021a:	2301      	movs	r3, #1
  40021c:	9304      	str	r3, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  40021e:	9103      	str	r1, [sp, #12]
			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400220:	a901      	add	r1, sp, #4
  400222:	4630      	mov	r0, r6
  400224:	47a8      	blx	r5
			ul_size++;

			if (ul_err == TWIHS_BUSY) {
  400226:	2808      	cmp	r0, #8
  400228:	d00d      	beq.n	400246 <ov_write_regs+0x5a>
  40022a:	3404      	adds	r4, #4
  40022c:	4621      	mov	r1, r4
	while (!((p_next->reg == OV_REG_TERM) &&
  40022e:	f834 3c02 	ldrh.w	r3, [r4, #-2]
  400232:	f64f 72ff 	movw	r2, #65535	; 0xffff
  400236:	4293      	cmp	r3, r2
  400238:	d0e2      	beq.n	400200 <ov_write_regs+0x14>
		if (p_next->reg == 0xFE) {
  40023a:	2bfe      	cmp	r3, #254	; 0xfe
  40023c:	d1e3      	bne.n	400206 <ov_write_regs+0x1a>
			delay_ms(5);
  40023e:	4640      	mov	r0, r8
  400240:	47b8      	blx	r7
  400242:	e7f2      	b.n	40022a <ov_write_regs+0x3e>
			}
		}

		p_next++;
	}
	return 0;
  400244:	2000      	movs	r0, #0
			ov_read_reg(p_twi, &twi_packet_regs);
			printf("%c%c%c%c%c%c%c%c",0xFE,0x46,0xFE,0x48,0xFE,0x4C,0xFE,0x51);//clear display, cursor home
			delay_ms(10);
			printf("%x:%x ",twi_packet_regs.addr[0],ul_value);
			delay_ms(2000);*/
}
  400246:	b006      	add	sp, #24
  400248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40024c:	004001e1 	.word	0x004001e1
  400250:	2040008d 	.word	0x2040008d
  400254:	0003dbc2 	.word	0x0003dbc2

00400258 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twihs* const p_twi)
{
  400258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40025c:	b08c      	sub	sp, #48	; 0x30
  40025e:	4680      	mov	r8, r0
	uint32_t ul_id = 0;
  400260:	2300      	movs	r3, #0
  400262:	9300      	str	r3, [sp, #0]
	uint32_t ul_ver = 0;
  400264:	9301      	str	r3, [sp, #4]
	packet_pid.chip = OV_I2C_2655_ADDRESS;  //BC WORKS!! (0x78>>1) OV7692was 0x78 for CamCube.  0x60 for OV2655
  400266:	2430      	movs	r4, #48	; 0x30
  400268:	f88d 4018 	strb.w	r4, [sp, #24]
	packet_pid.addr[0] = 0x30;
  40026c:	f88d 4008 	strb.w	r4, [sp, #8]
	packet_pid.addr[1] = OV2655_PIDH;
  400270:	230a      	movs	r3, #10
  400272:	f88d 3009 	strb.w	r3, [sp, #9]
	packet_pid.addr_length = 2;
  400276:	2702      	movs	r7, #2
  400278:	9703      	str	r7, [sp, #12]
	packet_pid.buffer = &ul_id;
  40027a:	f8cd d010 	str.w	sp, [sp, #16]
	packet_pid.length = 1;
  40027e:	2601      	movs	r6, #1
  400280:	9605      	str	r6, [sp, #20]
	ov_read_reg(p_twi, &packet_pid);
  400282:	a902      	add	r1, sp, #8
  400284:	4d29      	ldr	r5, [pc, #164]	; (40032c <ov_init+0xd4>)
  400286:	47a8      	blx	r5
	packet_ver.chip = OV_I2C_2655_ADDRESS;//was 0x78 for CamCube.  0x60 for OV2655
  400288:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	packet_ver.addr[0] = 0x30;
  40028c:	f88d 401c 	strb.w	r4, [sp, #28]
	packet_ver.addr[1] = OV2655_PIDL;
  400290:	230b      	movs	r3, #11
  400292:	f88d 301d 	strb.w	r3, [sp, #29]
	packet_ver.addr_length = 2;
  400296:	9708      	str	r7, [sp, #32]
	packet_ver.buffer = &ul_ver;
  400298:	ab01      	add	r3, sp, #4
  40029a:	9309      	str	r3, [sp, #36]	; 0x24
	packet_ver.length = 1;
  40029c:	960a      	str	r6, [sp, #40]	; 0x28
	ov_read_reg(p_twi, &packet_ver);
  40029e:	a907      	add	r1, sp, #28
  4002a0:	4640      	mov	r0, r8
  4002a2:	47a8      	blx	r5
	return ((uint32_t)(ul_id << 8) | ul_ver);
  4002a4:	9b01      	ldr	r3, [sp, #4]
  4002a6:	9a00      	ldr	r2, [sp, #0]
  4002a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	uint32_t ul_id = 0;

	ul_id = ov_id(p_twi);

//	if (((ul_id >> 8) & 0xff)  == OV2710_PIDH_DEFAULT) {
	if (((ul_id >> 8) & 0xff)  == OV2655_PIDH_DEFAULT) {
  4002ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4002b0:	2b26      	cmp	r3, #38	; 0x26
  4002b2:	d003      	beq.n	4002bc <ov_init+0x64>
				return 0;
			}
//		}
	}

	return 1;
  4002b4:	2001      	movs	r0, #1
}
  4002b6:	b00c      	add	sp, #48	; 0x30
  4002b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t ul_value = 0;
  4002bc:	2300      	movs	r3, #0
  4002be:	9300      	str	r3, [sp, #0]
	uint32_t ul_oldvalue = 0;
  4002c0:	9301      	str	r3, [sp, #4]
	uint32_t ul_entervalue = 0;
  4002c2:	9302      	str	r3, [sp, #8]
	twi_packet.addr[0] = 0x30;
  4002c4:	f88d 401c 	strb.w	r4, [sp, #28]
	twi_packet.addr[1] = 0x04;
  4002c8:	2204      	movs	r2, #4
  4002ca:	f88d 201d 	strb.w	r2, [sp, #29]
	twi_packet.addr_length = 2;
  4002ce:	9708      	str	r7, [sp, #32]
	twi_packet.chip = OV_I2C_2655_ADDRESS;
  4002d0:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	twi_packet.length = 1;
  4002d4:	960a      	str	r6, [sp, #40]	; 0x28
	twi_packet.buffer = &ul_oldvalue;
  4002d6:	ab01      	add	r3, sp, #4
  4002d8:	9309      	str	r3, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4002da:	a907      	add	r1, sp, #28
  4002dc:	4640      	mov	r0, r8
  4002de:	47a8      	blx	r5
	ul_entervalue = 0x11;
  4002e0:	ab0c      	add	r3, sp, #48	; 0x30
  4002e2:	2211      	movs	r2, #17
  4002e4:	f843 2d28 	str.w	r2, [r3, #-40]!
	twi_packet.buffer = &ul_entervalue;
  4002e8:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  4002ea:	a907      	add	r1, sp, #28
  4002ec:	4640      	mov	r0, r8
  4002ee:	4b10      	ldr	r3, [pc, #64]	; (400330 <ov_init+0xd8>)
  4002f0:	4798      	blx	r3
	twi_packet.buffer = &ul_value;
  4002f2:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4002f6:	a907      	add	r1, sp, #28
  4002f8:	4640      	mov	r0, r8
  4002fa:	47a8      	blx	r5
	if (ul_value != ul_entervalue) {
  4002fc:	9b02      	ldr	r3, [sp, #8]
  4002fe:	9a00      	ldr	r2, [sp, #0]
  400300:	429a      	cmp	r2, r3
  400302:	d001      	beq.n	400308 <ov_init+0xb0>
		return 1;
  400304:	2001      	movs	r0, #1
  400306:	e7d6      	b.n	4002b6 <ov_init+0x5e>
	twi_packet.buffer = &ul_oldvalue;
  400308:	ab01      	add	r3, sp, #4
  40030a:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  40030c:	a907      	add	r1, sp, #28
  40030e:	4640      	mov	r0, r8
  400310:	4b07      	ldr	r3, [pc, #28]	; (400330 <ov_init+0xd8>)
  400312:	4798      	blx	r3
	twi_packet.buffer = &ul_value;
  400314:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400318:	a907      	add	r1, sp, #28
  40031a:	4640      	mov	r0, r8
  40031c:	47a8      	blx	r5
	if (ul_value != ul_oldvalue) {
  40031e:	9b01      	ldr	r3, [sp, #4]
  400320:	9800      	ldr	r0, [sp, #0]
  400322:	1ac0      	subs	r0, r0, r3
  400324:	bf18      	it	ne
  400326:	2001      	movne	r0, #1
  400328:	e7c5      	b.n	4002b6 <ov_init+0x5e>
  40032a:	bf00      	nop
  40032c:	004001d5 	.word	0x004001d5
  400330:	004001e1 	.word	0x004001e1

00400334 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twihs* const p_twi, const e_ov7740_format format)
{
  400334:	b508      	push	{r3, lr}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
  400336:	2908      	cmp	r1, #8
  400338:	d814      	bhi.n	400364 <ov_configure+0x30>
  40033a:	e8df f001 	tbb	[pc, r1]
  40033e:	0515      	.short	0x0515
  400340:	0b090717 	.word	0x0b090717
  400344:	0f0d      	.short	0x0f0d
  400346:	11          	.byte	0x11
  400347:	00          	.byte	0x00
	case MY_OV2710_RESET:
		p_regs_conf = MY_OV2710_BASIC_RESET;
		break;

	case MY_OV2710_CONFIG:
		p_regs_conf = MY_OV2710_BASIC_CONFIG;
  400348:	490b      	ldr	r1, [pc, #44]	; (400378 <ov_configure+0x44>)
  40034a:	e010      	b.n	40036e <ov_configure+0x3a>
	case MY_OV2655_CONFIG:
		p_regs_conf = MY_OV2655_BASIC_CONFIG;
		break;

	case MY_OV2655_FALLBACK:
		p_regs_conf = MY_OV2655_BASIC_FALLBACK;
  40034c:	490b      	ldr	r1, [pc, #44]	; (40037c <ov_configure+0x48>)
		break;
  40034e:	e00e      	b.n	40036e <ov_configure+0x3a>

	case MY_OV2655_RESET:
		p_regs_conf = MY_OV2655_BASIC_RESET;
  400350:	490b      	ldr	r1, [pc, #44]	; (400380 <ov_configure+0x4c>)
		break;
  400352:	e00c      	b.n	40036e <ov_configure+0x3a>

	case MY_OV2655_FromUSB:
		p_regs_conf = MY_OV2655_BASIC_RESET;
  400354:	490a      	ldr	r1, [pc, #40]	; (400380 <ov_configure+0x4c>)
		break;
  400356:	e00a      	b.n	40036e <ov_configure+0x3a>

	case MY_OV2655_36:
		p_regs_conf = MY_OV2655_BASIC_FALLBACK;
  400358:	4908      	ldr	r1, [pc, #32]	; (40037c <ov_configure+0x48>)
		break;
  40035a:	e008      	b.n	40036e <ov_configure+0x3a>

	case TEST_PATTERN:
		p_regs_conf = OV7740_TEST_PATTERN;
  40035c:	4909      	ldr	r1, [pc, #36]	; (400384 <ov_configure+0x50>)
		break;
  40035e:	e006      	b.n	40036e <ov_configure+0x3a>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV7740_VGA_YUV422_20FPS;
  400360:	4909      	ldr	r1, [pc, #36]	; (400388 <ov_configure+0x54>)
		break;
  400362:	e004      	b.n	40036e <ov_configure+0x3a>
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf);
		return 0;
	}

	return 1;
  400364:	2001      	movs	r0, #1
  400366:	bd08      	pop	{r3, pc}
		p_regs_conf = MY_OV2710_BASIC_RESET;
  400368:	4908      	ldr	r1, [pc, #32]	; (40038c <ov_configure+0x58>)
  40036a:	e000      	b.n	40036e <ov_configure+0x3a>
		p_regs_conf = MY_OV2655_BASIC_CONFIG;
  40036c:	4908      	ldr	r1, [pc, #32]	; (400390 <ov_configure+0x5c>)
		ov_write_regs( p_twi, p_regs_conf);
  40036e:	4b09      	ldr	r3, [pc, #36]	; (400394 <ov_configure+0x60>)
  400370:	4798      	blx	r3
		return 0;
  400372:	2000      	movs	r0, #0
}
  400374:	bd08      	pop	{r3, pc}
  400376:	bf00      	nop
  400378:	0040f9f0 	.word	0x0040f9f0
  40037c:	0040f9e4 	.word	0x0040f9e4
  400380:	0040f9e8 	.word	0x0040f9e8
  400384:	0040fa04 	.word	0x0040fa04
  400388:	0040fa0c 	.word	0x0040fa0c
  40038c:	0040f9f4 	.word	0x0040f9f4
  400390:	0040f7c8 	.word	0x0040f7c8
  400394:	004001ed 	.word	0x004001ed

00400398 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  400398:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40039a:	4b06      	ldr	r3, [pc, #24]	; (4003b4 <sd_mmc_configure_slot+0x1c>)
  40039c:	6819      	ldr	r1, [r3, #0]
  40039e:	7f8b      	ldrb	r3, [r1, #30]
  4003a0:	3300      	adds	r3, #0
  4003a2:	bf18      	it	ne
  4003a4:	2301      	movne	r3, #1
  4003a6:	7b4a      	ldrb	r2, [r1, #13]
  4003a8:	6809      	ldr	r1, [r1, #0]
  4003aa:	4803      	ldr	r0, [pc, #12]	; (4003b8 <sd_mmc_configure_slot+0x20>)
  4003ac:	7800      	ldrb	r0, [r0, #0]
  4003ae:	4c03      	ldr	r4, [pc, #12]	; (4003bc <sd_mmc_configure_slot+0x24>)
  4003b0:	47a0      	blx	r4
  4003b2:	bd10      	pop	{r4, pc}
  4003b4:	20400b5c 	.word	0x20400b5c
  4003b8:	20400b84 	.word	0x20400b84
  4003bc:	00402205 	.word	0x00402205

004003c0 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4003c0:	b108      	cbz	r0, 4003c6 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4003c2:	2004      	movs	r0, #4
  4003c4:	4770      	bx	lr
{
  4003c6:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4003c8:	4b0e      	ldr	r3, [pc, #56]	; (400404 <sd_mmc_select_slot+0x44>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  4003ca:	7a9b      	ldrb	r3, [r3, #10]
  4003cc:	3b03      	subs	r3, #3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4003ce:	b2db      	uxtb	r3, r3
  4003d0:	2b01      	cmp	r3, #1
  4003d2:	d90d      	bls.n	4003f0 <sd_mmc_select_slot+0x30>
	sd_mmc_slot_sel = slot;
  4003d4:	2200      	movs	r2, #0
  4003d6:	4b0c      	ldr	r3, [pc, #48]	; (400408 <sd_mmc_select_slot+0x48>)
  4003d8:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  4003da:	4c0a      	ldr	r4, [pc, #40]	; (400404 <sd_mmc_select_slot+0x44>)
  4003dc:	4b0b      	ldr	r3, [pc, #44]	; (40040c <sd_mmc_select_slot+0x4c>)
  4003de:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  4003e0:	4b0b      	ldr	r3, [pc, #44]	; (400410 <sd_mmc_select_slot+0x50>)
  4003e2:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  4003e4:	7aa0      	ldrb	r0, [r4, #10]
  4003e6:	2802      	cmp	r0, #2
  4003e8:	bf14      	ite	ne
  4003ea:	2000      	movne	r0, #0
  4003ec:	2001      	moveq	r0, #1
  4003ee:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  4003f0:	4b04      	ldr	r3, [pc, #16]	; (400404 <sd_mmc_select_slot+0x44>)
  4003f2:	2202      	movs	r2, #2
  4003f4:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  4003f6:	4a07      	ldr	r2, [pc, #28]	; (400414 <sd_mmc_select_slot+0x54>)
  4003f8:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  4003fa:	2201      	movs	r2, #1
  4003fc:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  4003fe:	2200      	movs	r2, #0
  400400:	779a      	strb	r2, [r3, #30]
  400402:	e7e7      	b.n	4003d4 <sd_mmc_select_slot+0x14>
  400404:	20400b60 	.word	0x20400b60
  400408:	20400b84 	.word	0x20400b84
  40040c:	20400b5c 	.word	0x20400b5c
  400410:	00400399 	.word	0x00400399
  400414:	00061a80 	.word	0x00061a80

00400418 <sdio_cmd52>:
{
  400418:	b538      	push	{r3, r4, r5, lr}
  40041a:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  40041c:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  40041e:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  400422:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  400426:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  40042a:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  40042c:	4311      	orrs	r1, r2
  40042e:	f241 3034 	movw	r0, #4916	; 0x1334
  400432:	4b05      	ldr	r3, [pc, #20]	; (400448 <sdio_cmd52+0x30>)
  400434:	4798      	blx	r3
  400436:	4605      	mov	r5, r0
  400438:	b908      	cbnz	r0, 40043e <sdio_cmd52+0x26>
}
  40043a:	4628      	mov	r0, r5
  40043c:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  40043e:	4b03      	ldr	r3, [pc, #12]	; (40044c <sdio_cmd52+0x34>)
  400440:	4798      	blx	r3
  400442:	7020      	strb	r0, [r4, #0]
	return true;
  400444:	e7f9      	b.n	40043a <sdio_cmd52+0x22>
  400446:	bf00      	nop
  400448:	004022ed 	.word	0x004022ed
  40044c:	00402311 	.word	0x00402311

00400450 <sd_mmc_cmd9_mci>:
{
  400450:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  400452:	4b09      	ldr	r3, [pc, #36]	; (400478 <sd_mmc_cmd9_mci+0x28>)
  400454:	681b      	ldr	r3, [r3, #0]
  400456:	8919      	ldrh	r1, [r3, #8]
  400458:	0409      	lsls	r1, r1, #16
  40045a:	f641 3009 	movw	r0, #6921	; 0x1b09
  40045e:	4b07      	ldr	r3, [pc, #28]	; (40047c <sd_mmc_cmd9_mci+0x2c>)
  400460:	4798      	blx	r3
  400462:	4604      	mov	r4, r0
  400464:	b908      	cbnz	r0, 40046a <sd_mmc_cmd9_mci+0x1a>
}
  400466:	4620      	mov	r0, r4
  400468:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  40046a:	4b03      	ldr	r3, [pc, #12]	; (400478 <sd_mmc_cmd9_mci+0x28>)
  40046c:	6818      	ldr	r0, [r3, #0]
  40046e:	300e      	adds	r0, #14
  400470:	4b03      	ldr	r3, [pc, #12]	; (400480 <sd_mmc_cmd9_mci+0x30>)
  400472:	4798      	blx	r3
	return true;
  400474:	e7f7      	b.n	400466 <sd_mmc_cmd9_mci+0x16>
  400476:	bf00      	nop
  400478:	20400b5c 	.word	0x20400b5c
  40047c:	004022ed 	.word	0x004022ed
  400480:	00402319 	.word	0x00402319

00400484 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400484:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400486:	4b04      	ldr	r3, [pc, #16]	; (400498 <sd_mmc_deselect_slot+0x14>)
  400488:	781b      	ldrb	r3, [r3, #0]
  40048a:	b103      	cbz	r3, 40048e <sd_mmc_deselect_slot+0xa>
  40048c:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40048e:	2000      	movs	r0, #0
  400490:	4b02      	ldr	r3, [pc, #8]	; (40049c <sd_mmc_deselect_slot+0x18>)
  400492:	4798      	blx	r3
	}
}
  400494:	e7fa      	b.n	40048c <sd_mmc_deselect_slot+0x8>
  400496:	bf00      	nop
  400498:	20400b84 	.word	0x20400b84
  40049c:	004022c9 	.word	0x004022c9

004004a0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  4004a0:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4004a2:	2204      	movs	r2, #4
  4004a4:	4b03      	ldr	r3, [pc, #12]	; (4004b4 <sd_mmc_init+0x14>)
  4004a6:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4004a8:	22ff      	movs	r2, #255	; 0xff
  4004aa:	4b03      	ldr	r3, [pc, #12]	; (4004b8 <sd_mmc_init+0x18>)
  4004ac:	701a      	strb	r2, [r3, #0]
	driver_init();
  4004ae:	4b03      	ldr	r3, [pc, #12]	; (4004bc <sd_mmc_init+0x1c>)
  4004b0:	4798      	blx	r3
  4004b2:	bd08      	pop	{r3, pc}
  4004b4:	20400b60 	.word	0x20400b60
  4004b8:	20400b84 	.word	0x20400b84
  4004bc:	004021c9 	.word	0x004021c9

004004c0 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  4004c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4004c4:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4004c6:	4ba7      	ldr	r3, [pc, #668]	; (400764 <sd_mmc_check+0x2a4>)
  4004c8:	4798      	blx	r3
  4004ca:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4004cc:	2801      	cmp	r0, #1
  4004ce:	d005      	beq.n	4004dc <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  4004d0:	4ba5      	ldr	r3, [pc, #660]	; (400768 <sd_mmc_check+0x2a8>)
  4004d2:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  4004d4:	4620      	mov	r0, r4
  4004d6:	b015      	add	sp, #84	; 0x54
  4004d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  4004dc:	ae14      	add	r6, sp, #80	; 0x50
  4004de:	2308      	movs	r3, #8
  4004e0:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  4004e4:	4ba1      	ldr	r3, [pc, #644]	; (40076c <sd_mmc_check+0x2ac>)
  4004e6:	681b      	ldr	r3, [r3, #0]
  4004e8:	2701      	movs	r7, #1
  4004ea:	72df      	strb	r7, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4004ec:	2500      	movs	r5, #0
  4004ee:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
  4004f0:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
  4004f2:	4b9f      	ldr	r3, [pc, #636]	; (400770 <sd_mmc_check+0x2b0>)
  4004f4:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4004f6:	9600      	str	r6, [sp, #0]
  4004f8:	462b      	mov	r3, r5
  4004fa:	2206      	movs	r2, #6
  4004fc:	4629      	mov	r1, r5
  4004fe:	4638      	mov	r0, r7
  400500:	4e9c      	ldr	r6, [pc, #624]	; (400774 <sd_mmc_check+0x2b4>)
  400502:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400504:	4629      	mov	r1, r5
  400506:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40050a:	4b9b      	ldr	r3, [pc, #620]	; (400778 <sd_mmc_check+0x2b8>)
  40050c:	4798      	blx	r3
  40050e:	b930      	cbnz	r0, 40051e <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  400510:	4b96      	ldr	r3, [pc, #600]	; (40076c <sd_mmc_check+0x2ac>)
  400512:	681b      	ldr	r3, [r3, #0]
  400514:	2403      	movs	r4, #3
  400516:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  400518:	4b93      	ldr	r3, [pc, #588]	; (400768 <sd_mmc_check+0x2a8>)
  40051a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  40051c:	e7da      	b.n	4004d4 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  40051e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  400522:	f245 5008 	movw	r0, #21768	; 0x5508
  400526:	4b94      	ldr	r3, [pc, #592]	; (400778 <sd_mmc_check+0x2b8>)
  400528:	4798      	blx	r3
  40052a:	2800      	cmp	r0, #0
  40052c:	f040 8093 	bne.w	400656 <sd_mmc_check+0x196>
	*v2 = 0;
  400530:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  400534:	2100      	movs	r1, #0
  400536:	f244 5005 	movw	r0, #17669	; 0x4505
  40053a:	4b8f      	ldr	r3, [pc, #572]	; (400778 <sd_mmc_check+0x2b8>)
  40053c:	4798      	blx	r3
  40053e:	2800      	cmp	r0, #0
  400540:	f040 8097 	bne.w	400672 <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400544:	4b89      	ldr	r3, [pc, #548]	; (40076c <sd_mmc_check+0x2ac>)
  400546:	681b      	ldr	r3, [r3, #0]
  400548:	7adb      	ldrb	r3, [r3, #11]
  40054a:	f013 0f01 	tst.w	r3, #1
  40054e:	f040 80b5 	bne.w	4006bc <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400552:	2100      	movs	r1, #0
  400554:	f245 1003 	movw	r0, #20739	; 0x5103
  400558:	4b87      	ldr	r3, [pc, #540]	; (400778 <sd_mmc_check+0x2b8>)
  40055a:	4798      	blx	r3
  40055c:	2800      	cmp	r0, #0
  40055e:	d0d7      	beq.n	400510 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400560:	4d82      	ldr	r5, [pc, #520]	; (40076c <sd_mmc_check+0x2ac>)
  400562:	682e      	ldr	r6, [r5, #0]
  400564:	4b85      	ldr	r3, [pc, #532]	; (40077c <sd_mmc_check+0x2bc>)
  400566:	4798      	blx	r3
  400568:	0c00      	lsrs	r0, r0, #16
  40056a:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40056c:	682b      	ldr	r3, [r5, #0]
  40056e:	7adb      	ldrb	r3, [r3, #11]
  400570:	f013 0f01 	tst.w	r3, #1
  400574:	d034      	beq.n	4005e0 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  400576:	4b82      	ldr	r3, [pc, #520]	; (400780 <sd_mmc_check+0x2c0>)
  400578:	4798      	blx	r3
  40057a:	2800      	cmp	r0, #0
  40057c:	d0c8      	beq.n	400510 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  40057e:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400580:	7c5a      	ldrb	r2, [r3, #17]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400582:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400586:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40058a:	497e      	ldr	r1, [pc, #504]	; (400784 <sd_mmc_check+0x2c4>)
  40058c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400594:	fb02 f201 	mul.w	r2, r2, r1
  400598:	497b      	ldr	r1, [pc, #492]	; (400788 <sd_mmc_check+0x2c8>)
  40059a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40059e:	fb02 f201 	mul.w	r2, r2, r1
  4005a2:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  4005a4:	7b9a      	ldrb	r2, [r3, #14]
  4005a6:	0992      	lsrs	r2, r2, #6
  4005a8:	f040 820b 	bne.w	4009c2 <sd_mmc_check+0x502>
  4005ac:	7d99      	ldrb	r1, [r3, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005ae:	7d58      	ldrb	r0, [r3, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005b0:	7d1a      	ldrb	r2, [r3, #20]
  4005b2:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005b4:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  4005b8:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005bc:	7e18      	ldrb	r0, [r3, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005be:	7dd9      	ldrb	r1, [r3, #23]
  4005c0:	0049      	lsls	r1, r1, #1
  4005c2:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  4005c6:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4005ca:	3201      	adds	r2, #1
  4005cc:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  4005d0:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4005d2:	408a      	lsls	r2, r1
  4005d4:	7cd9      	ldrb	r1, [r3, #19]
  4005d6:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4005da:	408a      	lsls	r2, r1
				/ 1024;
  4005dc:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4005de:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4005e0:	4b62      	ldr	r3, [pc, #392]	; (40076c <sd_mmc_check+0x2ac>)
  4005e2:	681b      	ldr	r3, [r3, #0]
  4005e4:	8919      	ldrh	r1, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4005e6:	0409      	lsls	r1, r1, #16
  4005e8:	f243 1007 	movw	r0, #12551	; 0x3107
  4005ec:	4b62      	ldr	r3, [pc, #392]	; (400778 <sd_mmc_check+0x2b8>)
  4005ee:	4798      	blx	r3
  4005f0:	2800      	cmp	r0, #0
  4005f2:	d08d      	beq.n	400510 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4005f4:	4b5d      	ldr	r3, [pc, #372]	; (40076c <sd_mmc_check+0x2ac>)
  4005f6:	681b      	ldr	r3, [r3, #0]
  4005f8:	7ada      	ldrb	r2, [r3, #11]
  4005fa:	f012 0f01 	tst.w	r2, #1
  4005fe:	f040 81ed 	bne.w	4009dc <sd_mmc_check+0x51c>
	if (IS_SDIO()) {
  400602:	4b5a      	ldr	r3, [pc, #360]	; (40076c <sd_mmc_check+0x2ac>)
  400604:	681b      	ldr	r3, [r3, #0]
  400606:	7adb      	ldrb	r3, [r3, #11]
  400608:	f013 0f04 	tst.w	r3, #4
  40060c:	f000 829c 	beq.w	400b48 <sd_mmc_check+0x688>
  400610:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  400612:	2700      	movs	r7, #0
  400614:	4e57      	ldr	r6, [pc, #348]	; (400774 <sd_mmc_check+0x2b4>)
  400616:	f1a5 0309 	sub.w	r3, r5, #9
  40061a:	aa03      	add	r2, sp, #12
  40061c:	4413      	add	r3, r2
  40061e:	9300      	str	r3, [sp, #0]
  400620:	463b      	mov	r3, r7
  400622:	462a      	mov	r2, r5
  400624:	4639      	mov	r1, r7
  400626:	4638      	mov	r0, r7
  400628:	47b0      	blx	r6
		addr_old++;
  40062a:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  40062c:	2d0d      	cmp	r5, #13
  40062e:	d1f2      	bne.n	400616 <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400630:	f89d 300d 	ldrb.w	r3, [sp, #13]
  400634:	f89d 900c 	ldrb.w	r9, [sp, #12]
  400638:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40063c:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400640:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400644:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400648:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  40064c:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40064e:	f04f 0800 	mov.w	r8, #0
  400652:	4f48      	ldr	r7, [pc, #288]	; (400774 <sd_mmc_check+0x2b4>)
  400654:	e239      	b.n	400aca <sd_mmc_check+0x60a>
	resp = driver_get_response();
  400656:	4b49      	ldr	r3, [pc, #292]	; (40077c <sd_mmc_check+0x2bc>)
  400658:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  40065a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40065e:	f000 8347 	beq.w	400cf0 <sd_mmc_check+0x830>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400662:	f3c0 000b 	ubfx	r0, r0, #0, #12
  400666:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40066a:	f47f af51 	bne.w	400510 <sd_mmc_check+0x50>
	*v2 = 1;
  40066e:	46b9      	mov	r9, r7
  400670:	e760      	b.n	400534 <sd_mmc_check+0x74>
	resp = driver_get_response();
  400672:	4b42      	ldr	r3, [pc, #264]	; (40077c <sd_mmc_check+0x2bc>)
  400674:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  400676:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  40067a:	f43f af63 	beq.w	400544 <sd_mmc_check+0x84>
  40067e:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400682:	f244 5805 	movw	r8, #17669	; 0x4505
  400686:	4e3c      	ldr	r6, [pc, #240]	; (400778 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400688:	4f3c      	ldr	r7, [pc, #240]	; (40077c <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40068a:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  40068e:	4640      	mov	r0, r8
  400690:	47b0      	blx	r6
  400692:	2800      	cmp	r0, #0
  400694:	f43f af3c 	beq.w	400510 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400698:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  40069a:	2800      	cmp	r0, #0
  40069c:	db02      	blt.n	4006a4 <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  40069e:	3d01      	subs	r5, #1
  4006a0:	d1f3      	bne.n	40068a <sd_mmc_check+0x1ca>
  4006a2:	e735      	b.n	400510 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  4006a4:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  4006a8:	d104      	bne.n	4006b4 <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  4006aa:	4b30      	ldr	r3, [pc, #192]	; (40076c <sd_mmc_check+0x2ac>)
  4006ac:	681b      	ldr	r3, [r3, #0]
  4006ae:	2204      	movs	r2, #4
  4006b0:	72da      	strb	r2, [r3, #11]
  4006b2:	e74e      	b.n	400552 <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  4006b4:	4b2d      	ldr	r3, [pc, #180]	; (40076c <sd_mmc_check+0x2ac>)
  4006b6:	681b      	ldr	r3, [r3, #0]
  4006b8:	2205      	movs	r2, #5
  4006ba:	72da      	strb	r2, [r3, #11]
  4006bc:	f1b9 0f00 	cmp.w	r9, #0
  4006c0:	4f32      	ldr	r7, [pc, #200]	; (40078c <sd_mmc_check+0x2cc>)
  4006c2:	bf14      	ite	ne
  4006c4:	46b9      	movne	r9, r7
  4006c6:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  4006ca:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4006ce:	f04f 0800 	mov.w	r8, #0
  4006d2:	4e29      	ldr	r6, [pc, #164]	; (400778 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4006d4:	4f29      	ldr	r7, [pc, #164]	; (40077c <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4006d6:	4641      	mov	r1, r8
  4006d8:	f241 1037 	movw	r0, #4407	; 0x1137
  4006dc:	47b0      	blx	r6
  4006de:	b148      	cbz	r0, 4006f4 <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4006e0:	4649      	mov	r1, r9
  4006e2:	f244 5029 	movw	r0, #17705	; 0x4529
  4006e6:	47b0      	blx	r6
  4006e8:	b120      	cbz	r0, 4006f4 <sd_mmc_check+0x234>
		resp = driver_get_response();
  4006ea:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4006ec:	2800      	cmp	r0, #0
  4006ee:	db20      	blt.n	400732 <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4006f0:	3d01      	subs	r5, #1
  4006f2:	d1f0      	bne.n	4006d6 <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4006f4:	4b1d      	ldr	r3, [pc, #116]	; (40076c <sd_mmc_check+0x2ac>)
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	2202      	movs	r2, #2
  4006fa:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4006fc:	2100      	movs	r1, #0
  4006fe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400702:	4b1d      	ldr	r3, [pc, #116]	; (400778 <sd_mmc_check+0x2b8>)
  400704:	4798      	blx	r3
  400706:	2800      	cmp	r0, #0
  400708:	f43f af02 	beq.w	400510 <sd_mmc_check+0x50>
  40070c:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400710:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40078c <sd_mmc_check+0x2cc>
  400714:	4e18      	ldr	r6, [pc, #96]	; (400778 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400716:	4f19      	ldr	r7, [pc, #100]	; (40077c <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400718:	4641      	mov	r1, r8
  40071a:	f244 5001 	movw	r0, #17665	; 0x4501
  40071e:	47b0      	blx	r6
  400720:	2800      	cmp	r0, #0
  400722:	f43f aef5 	beq.w	400510 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400726:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  400728:	2800      	cmp	r0, #0
  40072a:	db31      	blt.n	400790 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  40072c:	3d01      	subs	r5, #1
  40072e:	d1f3      	bne.n	400718 <sd_mmc_check+0x258>
  400730:	e6ee      	b.n	400510 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  400732:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400736:	d005      	beq.n	400744 <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400738:	4b0c      	ldr	r3, [pc, #48]	; (40076c <sd_mmc_check+0x2ac>)
  40073a:	681a      	ldr	r2, [r3, #0]
  40073c:	7ad3      	ldrb	r3, [r2, #11]
  40073e:	f043 0308 	orr.w	r3, r3, #8
  400742:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400744:	4b09      	ldr	r3, [pc, #36]	; (40076c <sd_mmc_check+0x2ac>)
  400746:	681b      	ldr	r3, [r3, #0]
  400748:	7adb      	ldrb	r3, [r3, #11]
  40074a:	f013 0f01 	tst.w	r3, #1
  40074e:	f43f af00 	beq.w	400552 <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400752:	2100      	movs	r1, #0
  400754:	f645 3002 	movw	r0, #23298	; 0x5b02
  400758:	4b07      	ldr	r3, [pc, #28]	; (400778 <sd_mmc_check+0x2b8>)
  40075a:	4798      	blx	r3
  40075c:	2800      	cmp	r0, #0
  40075e:	f47f aef8 	bne.w	400552 <sd_mmc_check+0x92>
  400762:	e6d5      	b.n	400510 <sd_mmc_check+0x50>
  400764:	004003c1 	.word	0x004003c1
  400768:	00400485 	.word	0x00400485
  40076c:	20400b5c 	.word	0x20400b5c
  400770:	004022cb 	.word	0x004022cb
  400774:	00400419 	.word	0x00400419
  400778:	004022ed 	.word	0x004022ed
  40077c:	00402311 	.word	0x00402311
  400780:	00400451 	.word	0x00400451
  400784:	0040fa50 	.word	0x0040fa50
  400788:	0040fa6c 	.word	0x0040fa6c
  40078c:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  400790:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  400794:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400798:	d027      	beq.n	4007ea <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40079a:	2100      	movs	r1, #0
  40079c:	f645 3002 	movw	r0, #23298	; 0x5b02
  4007a0:	4ba7      	ldr	r3, [pc, #668]	; (400a40 <sd_mmc_check+0x580>)
  4007a2:	4798      	blx	r3
  4007a4:	2800      	cmp	r0, #0
  4007a6:	f43f aeb3 	beq.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  4007aa:	4ba6      	ldr	r3, [pc, #664]	; (400a44 <sd_mmc_check+0x584>)
  4007ac:	681b      	ldr	r3, [r3, #0]
  4007ae:	2201      	movs	r2, #1
  4007b0:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4007b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4007b6:	f241 1003 	movw	r0, #4355	; 0x1103
  4007ba:	4ba1      	ldr	r3, [pc, #644]	; (400a40 <sd_mmc_check+0x580>)
  4007bc:	4798      	blx	r3
  4007be:	2800      	cmp	r0, #0
  4007c0:	f43f aea6 	beq.w	400510 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  4007c4:	4ba0      	ldr	r3, [pc, #640]	; (400a48 <sd_mmc_check+0x588>)
  4007c6:	4798      	blx	r3
  4007c8:	2800      	cmp	r0, #0
  4007ca:	f43f aea1 	beq.w	400510 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4007ce:	4b9d      	ldr	r3, [pc, #628]	; (400a44 <sd_mmc_check+0x584>)
  4007d0:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4007d2:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
  4007d4:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4007d8:	3b01      	subs	r3, #1
  4007da:	2b03      	cmp	r3, #3
  4007dc:	d80c      	bhi.n	4007f8 <sd_mmc_check+0x338>
  4007de:	e8df f013 	tbh	[pc, r3, lsl #1]
  4007e2:	00cc      	.short	0x00cc
  4007e4:	00d200cf 	.word	0x00d200cf
  4007e8:	00d5      	.short	0x00d5
				sd_mmc_card->type |= CARD_TYPE_HC;
  4007ea:	4b96      	ldr	r3, [pc, #600]	; (400a44 <sd_mmc_check+0x584>)
  4007ec:	681a      	ldr	r2, [r3, #0]
  4007ee:	7ad3      	ldrb	r3, [r2, #11]
  4007f0:	f043 0308 	orr.w	r3, r3, #8
  4007f4:	72d3      	strb	r3, [r2, #11]
  4007f6:	e7d0      	b.n	40079a <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4007f8:	2312      	movs	r3, #18
  4007fa:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4007fc:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4007fe:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400802:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400806:	4991      	ldr	r1, [pc, #580]	; (400a4c <sd_mmc_check+0x58c>)
  400808:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  40080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400810:	fb03 f301 	mul.w	r3, r3, r1
  400814:	498e      	ldr	r1, [pc, #568]	; (400a50 <sd_mmc_check+0x590>)
  400816:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40081a:	fb03 f301 	mul.w	r3, r3, r1
  40081e:	6013      	str	r3, [r2, #0]
  400820:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400822:	7d50      	ldrb	r0, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400824:	7d13      	ldrb	r3, [r2, #20]
  400826:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400828:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  40082c:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400830:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  400834:	f640 71ff 	movw	r1, #4095	; 0xfff
  400838:	428b      	cmp	r3, r1
  40083a:	d00f      	beq.n	40085c <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40083c:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40083e:	7dd1      	ldrb	r1, [r2, #23]
  400840:	0049      	lsls	r1, r1, #1
  400842:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400846:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400848:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  40084c:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40084e:	408b      	lsls	r3, r1
  400850:	7cd1      	ldrb	r1, [r2, #19]
  400852:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  400856:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400858:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  40085a:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  40085c:	8911      	ldrh	r1, [r2, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40085e:	0409      	lsls	r1, r1, #16
  400860:	f243 1007 	movw	r0, #12551	; 0x3107
  400864:	4b76      	ldr	r3, [pc, #472]	; (400a40 <sd_mmc_check+0x580>)
  400866:	4798      	blx	r3
  400868:	2800      	cmp	r0, #0
  40086a:	f43f ae51 	beq.w	400510 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  40086e:	4b75      	ldr	r3, [pc, #468]	; (400a44 <sd_mmc_check+0x584>)
  400870:	681b      	ldr	r3, [r3, #0]
  400872:	7b1b      	ldrb	r3, [r3, #12]
  400874:	2b3f      	cmp	r3, #63	; 0x3f
  400876:	f240 8096 	bls.w	4009a6 <sd_mmc_check+0x4e6>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  40087a:	2100      	movs	r1, #0
  40087c:	9100      	str	r1, [sp, #0]
  40087e:	2301      	movs	r3, #1
  400880:	f44f 7200 	mov.w	r2, #512	; 0x200
  400884:	4873      	ldr	r0, [pc, #460]	; (400a54 <sd_mmc_check+0x594>)
  400886:	4d74      	ldr	r5, [pc, #464]	; (400a58 <sd_mmc_check+0x598>)
  400888:	47a8      	blx	r5
  40088a:	2800      	cmp	r0, #0
  40088c:	f43f ae40 	beq.w	400510 <sd_mmc_check+0x50>
  400890:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  400892:	4e72      	ldr	r6, [pc, #456]	; (400a5c <sd_mmc_check+0x59c>)
  400894:	a803      	add	r0, sp, #12
  400896:	47b0      	blx	r6
  400898:	2800      	cmp	r0, #0
  40089a:	f43f ae39 	beq.w	400510 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  40089e:	3501      	adds	r5, #1
  4008a0:	b2ad      	uxth	r5, r5
  4008a2:	2d32      	cmp	r5, #50	; 0x32
  4008a4:	d1f6      	bne.n	400894 <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  4008a6:	9e03      	ldr	r6, [sp, #12]
  4008a8:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4008ac:	4b65      	ldr	r3, [pc, #404]	; (400a44 <sd_mmc_check+0x584>)
  4008ae:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4008b0:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4008b2:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008b4:	7d1b      	ldrb	r3, [r3, #20]
  4008b6:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008b8:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  4008bc:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4008c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4008c4:	f640 72ff 	movw	r2, #4095	; 0xfff
  4008c8:	4293      	cmp	r3, r2
  4008ca:	d10e      	bne.n	4008ea <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  4008cc:	4f63      	ldr	r7, [pc, #396]	; (400a5c <sd_mmc_check+0x59c>)
  4008ce:	a804      	add	r0, sp, #16
  4008d0:	47b8      	blx	r7
  4008d2:	2800      	cmp	r0, #0
  4008d4:	f43f ae1c 	beq.w	400510 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4008d8:	3501      	adds	r5, #1
  4008da:	b2ad      	uxth	r5, r5
  4008dc:	2d35      	cmp	r5, #53	; 0x35
  4008de:	d9f6      	bls.n	4008ce <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  4008e0:	4b58      	ldr	r3, [pc, #352]	; (400a44 <sd_mmc_check+0x584>)
  4008e2:	681a      	ldr	r2, [r3, #0]
  4008e4:	9b04      	ldr	r3, [sp, #16]
  4008e6:	085b      	lsrs	r3, r3, #1
  4008e8:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4008ea:	4f5c      	ldr	r7, [pc, #368]	; (400a5c <sd_mmc_check+0x59c>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4008ec:	2d7f      	cmp	r5, #127	; 0x7f
  4008ee:	d950      	bls.n	400992 <sd_mmc_check+0x4d2>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4008f0:	4b5b      	ldr	r3, [pc, #364]	; (400a60 <sd_mmc_check+0x5a0>)
  4008f2:	7818      	ldrb	r0, [r3, #0]
  4008f4:	4b5b      	ldr	r3, [pc, #364]	; (400a64 <sd_mmc_check+0x5a4>)
  4008f6:	4798      	blx	r3
  4008f8:	2803      	cmp	r0, #3
  4008fa:	d91d      	bls.n	400938 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4008fc:	4b58      	ldr	r3, [pc, #352]	; (400a60 <sd_mmc_check+0x5a0>)
  4008fe:	7818      	ldrb	r0, [r3, #0]
  400900:	4b58      	ldr	r3, [pc, #352]	; (400a64 <sd_mmc_check+0x5a4>)
  400902:	4798      	blx	r3
  400904:	4605      	mov	r5, r0
	switch (bus_width) {
  400906:	2804      	cmp	r0, #4
  400908:	d04b      	beq.n	4009a2 <sd_mmc_check+0x4e2>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40090a:	4b57      	ldr	r3, [pc, #348]	; (400a68 <sd_mmc_check+0x5a8>)
  40090c:	4957      	ldr	r1, [pc, #348]	; (400a6c <sd_mmc_check+0x5ac>)
  40090e:	2808      	cmp	r0, #8
  400910:	bf18      	it	ne
  400912:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  400914:	f243 1006 	movw	r0, #12550	; 0x3106
  400918:	4b49      	ldr	r3, [pc, #292]	; (400a40 <sd_mmc_check+0x580>)
  40091a:	4798      	blx	r3
  40091c:	2800      	cmp	r0, #0
  40091e:	f43f adf7 	beq.w	400510 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400922:	4b53      	ldr	r3, [pc, #332]	; (400a70 <sd_mmc_check+0x5b0>)
  400924:	4798      	blx	r3
  400926:	f010 0f80 	tst.w	r0, #128	; 0x80
  40092a:	f47f adf1 	bne.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  40092e:	4b45      	ldr	r3, [pc, #276]	; (400a44 <sd_mmc_check+0x584>)
  400930:	681b      	ldr	r3, [r3, #0]
  400932:	735d      	strb	r5, [r3, #13]
			sd_mmc_configure_slot();
  400934:	4b4f      	ldr	r3, [pc, #316]	; (400a74 <sd_mmc_check+0x5b4>)
  400936:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400938:	4b4f      	ldr	r3, [pc, #316]	; (400a78 <sd_mmc_check+0x5b8>)
  40093a:	4798      	blx	r3
  40093c:	b1b6      	cbz	r6, 40096c <sd_mmc_check+0x4ac>
  40093e:	b1a8      	cbz	r0, 40096c <sd_mmc_check+0x4ac>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400940:	494e      	ldr	r1, [pc, #312]	; (400a7c <sd_mmc_check+0x5bc>)
  400942:	f243 1006 	movw	r0, #12550	; 0x3106
  400946:	4b3e      	ldr	r3, [pc, #248]	; (400a40 <sd_mmc_check+0x580>)
  400948:	4798      	blx	r3
  40094a:	2800      	cmp	r0, #0
  40094c:	f43f ade0 	beq.w	400510 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400950:	4b47      	ldr	r3, [pc, #284]	; (400a70 <sd_mmc_check+0x5b0>)
  400952:	4798      	blx	r3
  400954:	f010 0f80 	tst.w	r0, #128	; 0x80
  400958:	f47f adda 	bne.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  40095c:	4b39      	ldr	r3, [pc, #228]	; (400a44 <sd_mmc_check+0x584>)
  40095e:	681b      	ldr	r3, [r3, #0]
  400960:	2201      	movs	r2, #1
  400962:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  400964:	4a46      	ldr	r2, [pc, #280]	; (400a80 <sd_mmc_check+0x5c0>)
  400966:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400968:	4b42      	ldr	r3, [pc, #264]	; (400a74 <sd_mmc_check+0x5b4>)
  40096a:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  40096c:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40096e:	f44f 7800 	mov.w	r8, #512	; 0x200
  400972:	f241 1710 	movw	r7, #4368	; 0x1110
  400976:	4e32      	ldr	r6, [pc, #200]	; (400a40 <sd_mmc_check+0x580>)
  400978:	e01d      	b.n	4009b6 <sd_mmc_check+0x4f6>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  40097a:	2314      	movs	r3, #20
  40097c:	7313      	strb	r3, [r2, #12]
  40097e:	e73d      	b.n	4007fc <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  400980:	2322      	movs	r3, #34	; 0x22
  400982:	7313      	strb	r3, [r2, #12]
  400984:	e73a      	b.n	4007fc <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  400986:	2330      	movs	r3, #48	; 0x30
  400988:	7313      	strb	r3, [r2, #12]
  40098a:	e737      	b.n	4007fc <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  40098c:	2340      	movs	r3, #64	; 0x40
  40098e:	7313      	strb	r3, [r2, #12]
  400990:	e734      	b.n	4007fc <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  400992:	a804      	add	r0, sp, #16
  400994:	47b8      	blx	r7
  400996:	2800      	cmp	r0, #0
  400998:	f43f adba 	beq.w	400510 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  40099c:	3501      	adds	r5, #1
  40099e:	b2ad      	uxth	r5, r5
  4009a0:	e7a4      	b.n	4008ec <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4009a2:	4938      	ldr	r1, [pc, #224]	; (400a84 <sd_mmc_check+0x5c4>)
  4009a4:	e7b6      	b.n	400914 <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  4009a6:	4b33      	ldr	r3, [pc, #204]	; (400a74 <sd_mmc_check+0x5b4>)
  4009a8:	4798      	blx	r3
  4009aa:	e7df      	b.n	40096c <sd_mmc_check+0x4ac>
  4009ac:	3d01      	subs	r5, #1
	while (retry--) {
  4009ae:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  4009b2:	f43f adad 	beq.w	400510 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4009b6:	4641      	mov	r1, r8
  4009b8:	4638      	mov	r0, r7
  4009ba:	47b0      	blx	r6
  4009bc:	2800      	cmp	r0, #0
  4009be:	d0f5      	beq.n	4009ac <sd_mmc_check+0x4ec>
  4009c0:	e10e      	b.n	400be0 <sd_mmc_check+0x720>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4009c2:	7dd9      	ldrb	r1, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4009c4:	7d98      	ldrb	r0, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4009c6:	7d5a      	ldrb	r2, [r3, #21]
  4009c8:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4009ca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  4009ce:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  4009d0:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  4009d4:	3201      	adds	r2, #1
  4009d6:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4009d8:	605a      	str	r2, [r3, #4]
  4009da:	e601      	b.n	4005e0 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4009dc:	8919      	ldrh	r1, [r3, #8]
  4009de:	0409      	lsls	r1, r1, #16
  4009e0:	f241 1037 	movw	r0, #4407	; 0x1137
  4009e4:	4b16      	ldr	r3, [pc, #88]	; (400a40 <sd_mmc_check+0x580>)
  4009e6:	4798      	blx	r3
  4009e8:	2800      	cmp	r0, #0
  4009ea:	f43f ad91 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4009ee:	2301      	movs	r3, #1
  4009f0:	9300      	str	r3, [sp, #0]
  4009f2:	2208      	movs	r2, #8
  4009f4:	2100      	movs	r1, #0
  4009f6:	4824      	ldr	r0, [pc, #144]	; (400a88 <sd_mmc_check+0x5c8>)
  4009f8:	4d17      	ldr	r5, [pc, #92]	; (400a58 <sd_mmc_check+0x598>)
  4009fa:	47a8      	blx	r5
  4009fc:	2800      	cmp	r0, #0
  4009fe:	f43f ad87 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  400a02:	2101      	movs	r1, #1
  400a04:	a804      	add	r0, sp, #16
  400a06:	4b21      	ldr	r3, [pc, #132]	; (400a8c <sd_mmc_check+0x5cc>)
  400a08:	4798      	blx	r3
  400a0a:	2800      	cmp	r0, #0
  400a0c:	f43f ad80 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400a10:	4b1f      	ldr	r3, [pc, #124]	; (400a90 <sd_mmc_check+0x5d0>)
  400a12:	4798      	blx	r3
  400a14:	2800      	cmp	r0, #0
  400a16:	f43f ad7b 	beq.w	400510 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  400a1a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a1e:	f003 030f 	and.w	r3, r3, #15
  400a22:	2b01      	cmp	r3, #1
  400a24:	d036      	beq.n	400a94 <sd_mmc_check+0x5d4>
  400a26:	b133      	cbz	r3, 400a36 <sd_mmc_check+0x576>
  400a28:	2b02      	cmp	r3, #2
  400a2a:	d038      	beq.n	400a9e <sd_mmc_check+0x5de>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400a2c:	4b05      	ldr	r3, [pc, #20]	; (400a44 <sd_mmc_check+0x584>)
  400a2e:	681b      	ldr	r3, [r3, #0]
  400a30:	2210      	movs	r2, #16
  400a32:	731a      	strb	r2, [r3, #12]
  400a34:	e5e5      	b.n	400602 <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400a36:	4b03      	ldr	r3, [pc, #12]	; (400a44 <sd_mmc_check+0x584>)
  400a38:	681b      	ldr	r3, [r3, #0]
  400a3a:	2210      	movs	r2, #16
  400a3c:	731a      	strb	r2, [r3, #12]
  400a3e:	e5e0      	b.n	400602 <sd_mmc_check+0x142>
  400a40:	004022ed 	.word	0x004022ed
  400a44:	20400b5c 	.word	0x20400b5c
  400a48:	00400451 	.word	0x00400451
  400a4c:	0040fa50 	.word	0x0040fa50
  400a50:	0040fa10 	.word	0x0040fa10
  400a54:	00081108 	.word	0x00081108
  400a58:	00402349 	.word	0x00402349
  400a5c:	00402411 	.word	0x00402411
  400a60:	20400b84 	.word	0x20400b84
  400a64:	004021f5 	.word	0x004021f5
  400a68:	01b70000 	.word	0x01b70000
  400a6c:	01b70200 	.word	0x01b70200
  400a70:	00402311 	.word	0x00402311
  400a74:	00400399 	.word	0x00400399
  400a78:	004021ff 	.word	0x004021ff
  400a7c:	03b90100 	.word	0x03b90100
  400a80:	03197500 	.word	0x03197500
  400a84:	01b70100 	.word	0x01b70100
  400a88:	00081133 	.word	0x00081133
  400a8c:	00402485 	.word	0x00402485
  400a90:	00402515 	.word	0x00402515
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400a94:	4b98      	ldr	r3, [pc, #608]	; (400cf8 <sd_mmc_check+0x838>)
  400a96:	681b      	ldr	r3, [r3, #0]
  400a98:	221a      	movs	r2, #26
  400a9a:	731a      	strb	r2, [r3, #12]
  400a9c:	e5b1      	b.n	400602 <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400a9e:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400aa2:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400aa4:	4b94      	ldr	r3, [pc, #592]	; (400cf8 <sd_mmc_check+0x838>)
  400aa6:	681b      	ldr	r3, [r3, #0]
  400aa8:	bf14      	ite	ne
  400aaa:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400aac:	2220      	moveq	r2, #32
  400aae:	731a      	strb	r2, [r3, #12]
  400ab0:	e5a7      	b.n	400602 <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  400ab2:	f89d 3011 	ldrb.w	r3, [sp, #17]
  400ab6:	2b00      	cmp	r3, #0
  400ab8:	f43f ad2a 	beq.w	400510 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400abc:	3302      	adds	r3, #2
  400abe:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  400ac0:	f509 7380 	add.w	r3, r9, #256	; 0x100
  400ac4:	429e      	cmp	r6, r3
  400ac6:	f63f ad23 	bhi.w	400510 <sd_mmc_check+0x50>
	addr_new = addr_old;
  400aca:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400acc:	ab04      	add	r3, sp, #16
  400ace:	442b      	add	r3, r5
  400ad0:	9300      	str	r3, [sp, #0]
  400ad2:	4643      	mov	r3, r8
  400ad4:	1972      	adds	r2, r6, r5
  400ad6:	4641      	mov	r1, r8
  400ad8:	4640      	mov	r0, r8
  400ada:	47b8      	blx	r7
  400adc:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  400ade:	2d03      	cmp	r5, #3
  400ae0:	d1f4      	bne.n	400acc <sd_mmc_check+0x60c>
		if (buf[0] == SDIO_CISTPL_END) {
  400ae2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400ae6:	2bff      	cmp	r3, #255	; 0xff
  400ae8:	f43f ad12 	beq.w	400510 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  400aec:	2b22      	cmp	r3, #34	; 0x22
  400aee:	d1e0      	bne.n	400ab2 <sd_mmc_check+0x5f2>
  400af0:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400af4:	2b00      	cmp	r3, #0
  400af6:	d1dc      	bne.n	400ab2 <sd_mmc_check+0x5f2>
  400af8:	ad04      	add	r5, sp, #16
  400afa:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400afe:	f04f 0800 	mov.w	r8, #0
  400b02:	4f7e      	ldr	r7, [pc, #504]	; (400cfc <sd_mmc_check+0x83c>)
  400b04:	9500      	str	r5, [sp, #0]
  400b06:	4643      	mov	r3, r8
  400b08:	4632      	mov	r2, r6
  400b0a:	4641      	mov	r1, r8
  400b0c:	4640      	mov	r0, r8
  400b0e:	47b8      	blx	r7
		addr_new++;
  400b10:	3601      	adds	r6, #1
  400b12:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  400b14:	454e      	cmp	r6, r9
  400b16:	d1f5      	bne.n	400b04 <sd_mmc_check+0x644>
	tplfe_max_tran_speed = buf[5];
  400b18:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400b1c:	2b32      	cmp	r3, #50	; 0x32
  400b1e:	bf28      	it	cs
  400b20:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  400b22:	4a75      	ldr	r2, [pc, #468]	; (400cf8 <sd_mmc_check+0x838>)
  400b24:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  400b26:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  400b2a:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400b2e:	4974      	ldr	r1, [pc, #464]	; (400d00 <sd_mmc_check+0x840>)
  400b30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  400b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400b38:	fb03 f301 	mul.w	r3, r3, r1
  400b3c:	4971      	ldr	r1, [pc, #452]	; (400d04 <sd_mmc_check+0x844>)
  400b3e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400b42:	fb03 f301 	mul.w	r3, r3, r1
  400b46:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400b48:	4b6f      	ldr	r3, [pc, #444]	; (400d08 <sd_mmc_check+0x848>)
  400b4a:	7818      	ldrb	r0, [r3, #0]
  400b4c:	4b6f      	ldr	r3, [pc, #444]	; (400d0c <sd_mmc_check+0x84c>)
  400b4e:	4798      	blx	r3
  400b50:	2803      	cmp	r0, #3
  400b52:	d922      	bls.n	400b9a <sd_mmc_check+0x6da>
		if (IS_SDIO()) {
  400b54:	4b68      	ldr	r3, [pc, #416]	; (400cf8 <sd_mmc_check+0x838>)
  400b56:	681b      	ldr	r3, [r3, #0]
  400b58:	7adb      	ldrb	r3, [r3, #11]
  400b5a:	f013 0f04 	tst.w	r3, #4
  400b5e:	d146      	bne.n	400bee <sd_mmc_check+0x72e>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b60:	4b65      	ldr	r3, [pc, #404]	; (400cf8 <sd_mmc_check+0x838>)
  400b62:	681b      	ldr	r3, [r3, #0]
  400b64:	7ada      	ldrb	r2, [r3, #11]
  400b66:	f012 0f01 	tst.w	r2, #1
  400b6a:	d014      	beq.n	400b96 <sd_mmc_check+0x6d6>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400b6c:	8919      	ldrh	r1, [r3, #8]
  400b6e:	0409      	lsls	r1, r1, #16
  400b70:	f241 1037 	movw	r0, #4407	; 0x1137
  400b74:	4b66      	ldr	r3, [pc, #408]	; (400d10 <sd_mmc_check+0x850>)
  400b76:	4798      	blx	r3
  400b78:	2800      	cmp	r0, #0
  400b7a:	f43f acc9 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400b7e:	2102      	movs	r1, #2
  400b80:	f241 1006 	movw	r0, #4358	; 0x1106
  400b84:	4b62      	ldr	r3, [pc, #392]	; (400d10 <sd_mmc_check+0x850>)
  400b86:	4798      	blx	r3
  400b88:	2800      	cmp	r0, #0
  400b8a:	f43f acc1 	beq.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400b8e:	4b5a      	ldr	r3, [pc, #360]	; (400cf8 <sd_mmc_check+0x838>)
  400b90:	681b      	ldr	r3, [r3, #0]
  400b92:	2204      	movs	r2, #4
  400b94:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
  400b96:	4b5f      	ldr	r3, [pc, #380]	; (400d14 <sd_mmc_check+0x854>)
  400b98:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400b9a:	4b5f      	ldr	r3, [pc, #380]	; (400d18 <sd_mmc_check+0x858>)
  400b9c:	4798      	blx	r3
  400b9e:	b180      	cbz	r0, 400bc2 <sd_mmc_check+0x702>
		if (IS_SDIO()) {
  400ba0:	4b55      	ldr	r3, [pc, #340]	; (400cf8 <sd_mmc_check+0x838>)
  400ba2:	681b      	ldr	r3, [r3, #0]
  400ba4:	7adb      	ldrb	r3, [r3, #11]
  400ba6:	f013 0f04 	tst.w	r3, #4
  400baa:	d141      	bne.n	400c30 <sd_mmc_check+0x770>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400bac:	4b52      	ldr	r3, [pc, #328]	; (400cf8 <sd_mmc_check+0x838>)
  400bae:	681b      	ldr	r3, [r3, #0]
  400bb0:	7ada      	ldrb	r2, [r3, #11]
  400bb2:	f012 0f01 	tst.w	r2, #1
  400bb6:	d002      	beq.n	400bbe <sd_mmc_check+0x6fe>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400bb8:	7b1b      	ldrb	r3, [r3, #12]
  400bba:	2b10      	cmp	r3, #16
  400bbc:	d85d      	bhi.n	400c7a <sd_mmc_check+0x7ba>
		sd_mmc_configure_slot();
  400bbe:	4b55      	ldr	r3, [pc, #340]	; (400d14 <sd_mmc_check+0x854>)
  400bc0:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400bc2:	4b4d      	ldr	r3, [pc, #308]	; (400cf8 <sd_mmc_check+0x838>)
  400bc4:	681b      	ldr	r3, [r3, #0]
  400bc6:	7adb      	ldrb	r3, [r3, #11]
  400bc8:	f013 0f01 	tst.w	r3, #1
  400bcc:	d008      	beq.n	400be0 <sd_mmc_check+0x720>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400bce:	f44f 7100 	mov.w	r1, #512	; 0x200
  400bd2:	f241 1010 	movw	r0, #4368	; 0x1110
  400bd6:	4b4e      	ldr	r3, [pc, #312]	; (400d10 <sd_mmc_check+0x850>)
  400bd8:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400bda:	2800      	cmp	r0, #0
  400bdc:	f43f ac98 	beq.w	400510 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400be0:	4b45      	ldr	r3, [pc, #276]	; (400cf8 <sd_mmc_check+0x838>)
  400be2:	681b      	ldr	r3, [r3, #0]
  400be4:	2200      	movs	r2, #0
  400be6:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  400be8:	4b4c      	ldr	r3, [pc, #304]	; (400d1c <sd_mmc_check+0x85c>)
  400bea:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400bec:	e472      	b.n	4004d4 <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400bee:	ab04      	add	r3, sp, #16
  400bf0:	9300      	str	r3, [sp, #0]
  400bf2:	2300      	movs	r3, #0
  400bf4:	2208      	movs	r2, #8
  400bf6:	4619      	mov	r1, r3
  400bf8:	4618      	mov	r0, r3
  400bfa:	4d40      	ldr	r5, [pc, #256]	; (400cfc <sd_mmc_check+0x83c>)
  400bfc:	47a8      	blx	r5
  400bfe:	2800      	cmp	r0, #0
  400c00:	f43f ac86 	beq.w	400510 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400c04:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400c08:	2b00      	cmp	r3, #0
  400c0a:	daa9      	bge.n	400b60 <sd_mmc_check+0x6a0>
	u8_value = SDIO_BUSWIDTH_4B;
  400c0c:	ab14      	add	r3, sp, #80	; 0x50
  400c0e:	2202      	movs	r2, #2
  400c10:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400c14:	9300      	str	r3, [sp, #0]
  400c16:	2301      	movs	r3, #1
  400c18:	2207      	movs	r2, #7
  400c1a:	2100      	movs	r1, #0
  400c1c:	4618      	mov	r0, r3
  400c1e:	47a8      	blx	r5
  400c20:	2800      	cmp	r0, #0
  400c22:	f43f ac75 	beq.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400c26:	4b34      	ldr	r3, [pc, #208]	; (400cf8 <sd_mmc_check+0x838>)
  400c28:	681b      	ldr	r3, [r3, #0]
  400c2a:	2204      	movs	r2, #4
  400c2c:	735a      	strb	r2, [r3, #13]
  400c2e:	e797      	b.n	400b60 <sd_mmc_check+0x6a0>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400c30:	ab04      	add	r3, sp, #16
  400c32:	9300      	str	r3, [sp, #0]
  400c34:	2300      	movs	r3, #0
  400c36:	2213      	movs	r2, #19
  400c38:	4619      	mov	r1, r3
  400c3a:	4618      	mov	r0, r3
  400c3c:	4d2f      	ldr	r5, [pc, #188]	; (400cfc <sd_mmc_check+0x83c>)
  400c3e:	47a8      	blx	r5
  400c40:	2800      	cmp	r0, #0
  400c42:	f43f ac65 	beq.w	400510 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400c46:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400c4a:	f013 0f01 	tst.w	r3, #1
  400c4e:	d0ad      	beq.n	400bac <sd_mmc_check+0x6ec>
	u8_value = SDIO_EHS;
  400c50:	ab14      	add	r3, sp, #80	; 0x50
  400c52:	2202      	movs	r2, #2
  400c54:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400c58:	9300      	str	r3, [sp, #0]
  400c5a:	2301      	movs	r3, #1
  400c5c:	2213      	movs	r2, #19
  400c5e:	2100      	movs	r1, #0
  400c60:	4618      	mov	r0, r3
  400c62:	47a8      	blx	r5
  400c64:	2800      	cmp	r0, #0
  400c66:	f43f ac53 	beq.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400c6a:	4b23      	ldr	r3, [pc, #140]	; (400cf8 <sd_mmc_check+0x838>)
  400c6c:	681b      	ldr	r3, [r3, #0]
  400c6e:	2201      	movs	r2, #1
  400c70:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400c72:	681a      	ldr	r2, [r3, #0]
  400c74:	0052      	lsls	r2, r2, #1
  400c76:	601a      	str	r2, [r3, #0]
  400c78:	e798      	b.n	400bac <sd_mmc_check+0x6ec>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400c7a:	2540      	movs	r5, #64	; 0x40
  400c7c:	462a      	mov	r2, r5
  400c7e:	2100      	movs	r1, #0
  400c80:	a804      	add	r0, sp, #16
  400c82:	4b27      	ldr	r3, [pc, #156]	; (400d20 <sd_mmc_check+0x860>)
  400c84:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400c86:	2301      	movs	r3, #1
  400c88:	9300      	str	r3, [sp, #0]
  400c8a:	462a      	mov	r2, r5
  400c8c:	4925      	ldr	r1, [pc, #148]	; (400d24 <sd_mmc_check+0x864>)
  400c8e:	4826      	ldr	r0, [pc, #152]	; (400d28 <sd_mmc_check+0x868>)
  400c90:	4d26      	ldr	r5, [pc, #152]	; (400d2c <sd_mmc_check+0x86c>)
  400c92:	47a8      	blx	r5
  400c94:	2800      	cmp	r0, #0
  400c96:	f43f ac3b 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400c9a:	2101      	movs	r1, #1
  400c9c:	a804      	add	r0, sp, #16
  400c9e:	4b24      	ldr	r3, [pc, #144]	; (400d30 <sd_mmc_check+0x870>)
  400ca0:	4798      	blx	r3
  400ca2:	2800      	cmp	r0, #0
  400ca4:	f43f ac34 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400ca8:	4b22      	ldr	r3, [pc, #136]	; (400d34 <sd_mmc_check+0x874>)
  400caa:	4798      	blx	r3
  400cac:	2800      	cmp	r0, #0
  400cae:	f43f ac2f 	beq.w	400510 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400cb2:	4b21      	ldr	r3, [pc, #132]	; (400d38 <sd_mmc_check+0x878>)
  400cb4:	4798      	blx	r3
  400cb6:	f010 0f80 	tst.w	r0, #128	; 0x80
  400cba:	f47f ac29 	bne.w	400510 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400cbe:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400cc2:	f003 030f 	and.w	r3, r3, #15
  400cc6:	2b0f      	cmp	r3, #15
  400cc8:	f43f af79 	beq.w	400bbe <sd_mmc_check+0x6fe>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400ccc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400cd0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400cd4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400cd8:	f47f ac1a 	bne.w	400510 <sd_mmc_check+0x50>
	driver_send_clock();
  400cdc:	4b17      	ldr	r3, [pc, #92]	; (400d3c <sd_mmc_check+0x87c>)
  400cde:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400ce0:	4b05      	ldr	r3, [pc, #20]	; (400cf8 <sd_mmc_check+0x838>)
  400ce2:	681b      	ldr	r3, [r3, #0]
  400ce4:	2201      	movs	r2, #1
  400ce6:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400ce8:	681a      	ldr	r2, [r3, #0]
  400cea:	0052      	lsls	r2, r2, #1
  400cec:	601a      	str	r2, [r3, #0]
  400cee:	e766      	b.n	400bbe <sd_mmc_check+0x6fe>
	*v2 = 0;
  400cf0:	f04f 0900 	mov.w	r9, #0
  400cf4:	e41e      	b.n	400534 <sd_mmc_check+0x74>
  400cf6:	bf00      	nop
  400cf8:	20400b5c 	.word	0x20400b5c
  400cfc:	00400419 	.word	0x00400419
  400d00:	0040fa50 	.word	0x0040fa50
  400d04:	0040fa6c 	.word	0x0040fa6c
  400d08:	20400b84 	.word	0x20400b84
  400d0c:	004021f5 	.word	0x004021f5
  400d10:	004022ed 	.word	0x004022ed
  400d14:	00400399 	.word	0x00400399
  400d18:	004021ff 	.word	0x004021ff
  400d1c:	00400485 	.word	0x00400485
  400d20:	0040c9f1 	.word	0x0040c9f1
  400d24:	80ffff01 	.word	0x80ffff01
  400d28:	00081106 	.word	0x00081106
  400d2c:	00402349 	.word	0x00402349
  400d30:	00402485 	.word	0x00402485
  400d34:	00402515 	.word	0x00402515
  400d38:	00402311 	.word	0x00402311
  400d3c:	004022cb 	.word	0x004022cb

00400d40 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400d40:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400d42:	4b05      	ldr	r3, [pc, #20]	; (400d58 <sd_mmc_get_type+0x18>)
  400d44:	4798      	blx	r3
  400d46:	b108      	cbz	r0, 400d4c <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400d48:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400d4a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400d4c:	4b03      	ldr	r3, [pc, #12]	; (400d5c <sd_mmc_get_type+0x1c>)
  400d4e:	4798      	blx	r3
	return sd_mmc_card->type;
  400d50:	4b03      	ldr	r3, [pc, #12]	; (400d60 <sd_mmc_get_type+0x20>)
  400d52:	681b      	ldr	r3, [r3, #0]
  400d54:	7ad8      	ldrb	r0, [r3, #11]
  400d56:	bd08      	pop	{r3, pc}
  400d58:	004003c1 	.word	0x004003c1
  400d5c:	00400485 	.word	0x00400485
  400d60:	20400b5c 	.word	0x20400b5c

00400d64 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400d64:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400d66:	4b05      	ldr	r3, [pc, #20]	; (400d7c <sd_mmc_get_capacity+0x18>)
  400d68:	4798      	blx	r3
  400d6a:	b108      	cbz	r0, 400d70 <sd_mmc_get_capacity+0xc>
		return 0;
  400d6c:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400d6e:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400d70:	4b03      	ldr	r3, [pc, #12]	; (400d80 <sd_mmc_get_capacity+0x1c>)
  400d72:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400d74:	4b03      	ldr	r3, [pc, #12]	; (400d84 <sd_mmc_get_capacity+0x20>)
  400d76:	681b      	ldr	r3, [r3, #0]
  400d78:	6858      	ldr	r0, [r3, #4]
  400d7a:	bd08      	pop	{r3, pc}
  400d7c:	004003c1 	.word	0x004003c1
  400d80:	00400485 	.word	0x00400485
  400d84:	20400b5c 	.word	0x20400b5c

00400d88 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400d88:	2000      	movs	r0, #0
  400d8a:	4770      	bx	lr

00400d8c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400d90:	b082      	sub	sp, #8
  400d92:	468a      	mov	sl, r1
  400d94:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400d96:	4b26      	ldr	r3, [pc, #152]	; (400e30 <sd_mmc_init_read_blocks+0xa4>)
  400d98:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400d9a:	4680      	mov	r8, r0
  400d9c:	b118      	cbz	r0, 400da6 <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400d9e:	4640      	mov	r0, r8
  400da0:	b002      	add	sp, #8
  400da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400da6:	4c23      	ldr	r4, [pc, #140]	; (400e34 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400da8:	4e23      	ldr	r6, [pc, #140]	; (400e38 <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400daa:	4d24      	ldr	r5, [pc, #144]	; (400e3c <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400dac:	4f24      	ldr	r7, [pc, #144]	; (400e40 <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400dae:	6833      	ldr	r3, [r6, #0]
  400db0:	8919      	ldrh	r1, [r3, #8]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400db2:	0409      	lsls	r1, r1, #16
  400db4:	f241 100d 	movw	r0, #4365	; 0x110d
  400db8:	47a8      	blx	r5
  400dba:	b128      	cbz	r0, 400dc8 <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400dbc:	47b8      	blx	r7
  400dbe:	f410 7f80 	tst.w	r0, #256	; 0x100
  400dc2:	d117      	bne.n	400df4 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400dc4:	3c01      	subs	r4, #1
  400dc6:	d1f2      	bne.n	400dae <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  400dc8:	4b1e      	ldr	r3, [pc, #120]	; (400e44 <sd_mmc_init_read_blocks+0xb8>)
  400dca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400dcc:	f04f 0805 	mov.w	r8, #5
  400dd0:	e7e5      	b.n	400d9e <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400dd2:	4b1b      	ldr	r3, [pc, #108]	; (400e40 <sd_mmc_init_read_blocks+0xb4>)
  400dd4:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400dd6:	4b1c      	ldr	r3, [pc, #112]	; (400e48 <sd_mmc_init_read_blocks+0xbc>)
  400dd8:	4003      	ands	r3, r0
  400dda:	b933      	cbnz	r3, 400dea <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400ddc:	4b1b      	ldr	r3, [pc, #108]	; (400e4c <sd_mmc_init_read_blocks+0xc0>)
  400dde:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400de2:	4b1b      	ldr	r3, [pc, #108]	; (400e50 <sd_mmc_init_read_blocks+0xc4>)
  400de4:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400de8:	e7d9      	b.n	400d9e <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  400dea:	4b16      	ldr	r3, [pc, #88]	; (400e44 <sd_mmc_init_read_blocks+0xb8>)
  400dec:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400dee:	f04f 0805 	mov.w	r8, #5
  400df2:	e7d4      	b.n	400d9e <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400df4:	4b17      	ldr	r3, [pc, #92]	; (400e54 <sd_mmc_init_read_blocks+0xc8>)
  400df6:	4818      	ldr	r0, [pc, #96]	; (400e58 <sd_mmc_init_read_blocks+0xcc>)
  400df8:	f1b9 0f01 	cmp.w	r9, #1
  400dfc:	bf98      	it	ls
  400dfe:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400e00:	4b0d      	ldr	r3, [pc, #52]	; (400e38 <sd_mmc_init_read_blocks+0xac>)
  400e02:	681b      	ldr	r3, [r3, #0]
  400e04:	7adb      	ldrb	r3, [r3, #11]
  400e06:	f013 0f08 	tst.w	r3, #8
  400e0a:	d101      	bne.n	400e10 <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400e0c:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400e10:	2301      	movs	r3, #1
  400e12:	9300      	str	r3, [sp, #0]
  400e14:	464b      	mov	r3, r9
  400e16:	f44f 7200 	mov.w	r2, #512	; 0x200
  400e1a:	4651      	mov	r1, sl
  400e1c:	4c0f      	ldr	r4, [pc, #60]	; (400e5c <sd_mmc_init_read_blocks+0xd0>)
  400e1e:	47a0      	blx	r4
  400e20:	2800      	cmp	r0, #0
  400e22:	d1d6      	bne.n	400dd2 <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  400e24:	4b07      	ldr	r3, [pc, #28]	; (400e44 <sd_mmc_init_read_blocks+0xb8>)
  400e26:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400e28:	f04f 0805 	mov.w	r8, #5
  400e2c:	e7b7      	b.n	400d9e <sd_mmc_init_read_blocks+0x12>
  400e2e:	bf00      	nop
  400e30:	004003c1 	.word	0x004003c1
  400e34:	00030d41 	.word	0x00030d41
  400e38:	20400b5c 	.word	0x20400b5c
  400e3c:	004022ed 	.word	0x004022ed
  400e40:	00402311 	.word	0x00402311
  400e44:	00400485 	.word	0x00400485
  400e48:	e4580000 	.word	0xe4580000
  400e4c:	20400b80 	.word	0x20400b80
  400e50:	20400b82 	.word	0x20400b82
  400e54:	00081111 	.word	0x00081111
  400e58:	00101112 	.word	0x00101112
  400e5c:	00402349 	.word	0x00402349

00400e60 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400e60:	b510      	push	{r4, lr}
  400e62:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400e64:	4b06      	ldr	r3, [pc, #24]	; (400e80 <sd_mmc_start_read_blocks+0x20>)
  400e66:	4798      	blx	r3
  400e68:	b920      	cbnz	r0, 400e74 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e6a:	2200      	movs	r2, #0
  400e6c:	4b05      	ldr	r3, [pc, #20]	; (400e84 <sd_mmc_start_read_blocks+0x24>)
  400e6e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e70:	2005      	movs	r0, #5
  400e72:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e74:	4a03      	ldr	r2, [pc, #12]	; (400e84 <sd_mmc_start_read_blocks+0x24>)
  400e76:	8813      	ldrh	r3, [r2, #0]
  400e78:	1b1c      	subs	r4, r3, r4
  400e7a:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e7c:	2000      	movs	r0, #0
}
  400e7e:	bd10      	pop	{r4, pc}
  400e80:	00402485 	.word	0x00402485
  400e84:	20400b80 	.word	0x20400b80

00400e88 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400e88:	b510      	push	{r4, lr}
  400e8a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400e8c:	4b13      	ldr	r3, [pc, #76]	; (400edc <sd_mmc_wait_end_of_read_blocks+0x54>)
  400e8e:	4798      	blx	r3
  400e90:	b908      	cbnz	r0, 400e96 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400e92:	2005      	movs	r0, #5
  400e94:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400e96:	b184      	cbz	r4, 400eba <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400e98:	2200      	movs	r2, #0
  400e9a:	4b11      	ldr	r3, [pc, #68]	; (400ee0 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400e9c:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e9e:	4b11      	ldr	r3, [pc, #68]	; (400ee4 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400ea0:	881b      	ldrh	r3, [r3, #0]
  400ea2:	2b01      	cmp	r3, #1
  400ea4:	d00f      	beq.n	400ec6 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400ea6:	2100      	movs	r1, #0
  400ea8:	f243 100c 	movw	r0, #12556	; 0x310c
  400eac:	4b0e      	ldr	r3, [pc, #56]	; (400ee8 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400eae:	4798      	blx	r3
  400eb0:	b168      	cbz	r0, 400ece <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400eb2:	4b0e      	ldr	r3, [pc, #56]	; (400eec <sd_mmc_wait_end_of_read_blocks+0x64>)
  400eb4:	4798      	blx	r3
	return SD_MMC_OK;
  400eb6:	2000      	movs	r0, #0
  400eb8:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400eba:	4b09      	ldr	r3, [pc, #36]	; (400ee0 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400ebc:	881b      	ldrh	r3, [r3, #0]
  400ebe:	2b00      	cmp	r3, #0
  400ec0:	d0ed      	beq.n	400e9e <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400ec2:	2000      	movs	r0, #0
}
  400ec4:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400ec6:	4b09      	ldr	r3, [pc, #36]	; (400eec <sd_mmc_wait_end_of_read_blocks+0x64>)
  400ec8:	4798      	blx	r3
		return SD_MMC_OK;
  400eca:	2000      	movs	r0, #0
  400ecc:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400ece:	2100      	movs	r1, #0
  400ed0:	f243 100c 	movw	r0, #12556	; 0x310c
  400ed4:	4b04      	ldr	r3, [pc, #16]	; (400ee8 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400ed6:	4798      	blx	r3
  400ed8:	e7eb      	b.n	400eb2 <sd_mmc_wait_end_of_read_blocks+0x2a>
  400eda:	bf00      	nop
  400edc:	00402515 	.word	0x00402515
  400ee0:	20400b80 	.word	0x20400b80
  400ee4:	20400b82 	.word	0x20400b82
  400ee8:	004022ed 	.word	0x004022ed
  400eec:	00400485 	.word	0x00400485

00400ef0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400ef0:	b570      	push	{r4, r5, r6, lr}
  400ef2:	b082      	sub	sp, #8
  400ef4:	460e      	mov	r6, r1
  400ef6:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400ef8:	4b16      	ldr	r3, [pc, #88]	; (400f54 <sd_mmc_init_write_blocks+0x64>)
  400efa:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400efc:	4604      	mov	r4, r0
  400efe:	b9b8      	cbnz	r0, 400f30 <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400f00:	4b15      	ldr	r3, [pc, #84]	; (400f58 <sd_mmc_init_write_blocks+0x68>)
  400f02:	4816      	ldr	r0, [pc, #88]	; (400f5c <sd_mmc_init_write_blocks+0x6c>)
  400f04:	2d01      	cmp	r5, #1
  400f06:	bf98      	it	ls
  400f08:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400f0a:	4b15      	ldr	r3, [pc, #84]	; (400f60 <sd_mmc_init_write_blocks+0x70>)
  400f0c:	681b      	ldr	r3, [r3, #0]
  400f0e:	7adb      	ldrb	r3, [r3, #11]
  400f10:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400f14:	bf08      	it	eq
  400f16:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400f18:	2301      	movs	r3, #1
  400f1a:	9300      	str	r3, [sp, #0]
  400f1c:	462b      	mov	r3, r5
  400f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400f22:	4631      	mov	r1, r6
  400f24:	4e0f      	ldr	r6, [pc, #60]	; (400f64 <sd_mmc_init_write_blocks+0x74>)
  400f26:	47b0      	blx	r6
  400f28:	b928      	cbnz	r0, 400f36 <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400f2a:	4b0f      	ldr	r3, [pc, #60]	; (400f68 <sd_mmc_init_write_blocks+0x78>)
  400f2c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400f2e:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400f30:	4620      	mov	r0, r4
  400f32:	b002      	add	sp, #8
  400f34:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400f36:	4b0d      	ldr	r3, [pc, #52]	; (400f6c <sd_mmc_init_write_blocks+0x7c>)
  400f38:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400f3a:	4b0d      	ldr	r3, [pc, #52]	; (400f70 <sd_mmc_init_write_blocks+0x80>)
  400f3c:	4003      	ands	r3, r0
  400f3e:	b923      	cbnz	r3, 400f4a <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400f40:	4b0c      	ldr	r3, [pc, #48]	; (400f74 <sd_mmc_init_write_blocks+0x84>)
  400f42:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400f44:	4b0c      	ldr	r3, [pc, #48]	; (400f78 <sd_mmc_init_write_blocks+0x88>)
  400f46:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400f48:	e7f2      	b.n	400f30 <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400f4a:	4b07      	ldr	r3, [pc, #28]	; (400f68 <sd_mmc_init_write_blocks+0x78>)
  400f4c:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400f4e:	2405      	movs	r4, #5
  400f50:	e7ee      	b.n	400f30 <sd_mmc_init_write_blocks+0x40>
  400f52:	bf00      	nop
  400f54:	004003c1 	.word	0x004003c1
  400f58:	00089118 	.word	0x00089118
  400f5c:	00109119 	.word	0x00109119
  400f60:	20400b5c 	.word	0x20400b5c
  400f64:	00402349 	.word	0x00402349
  400f68:	00400485 	.word	0x00400485
  400f6c:	00402311 	.word	0x00402311
  400f70:	e4580000 	.word	0xe4580000
  400f74:	20400b80 	.word	0x20400b80
  400f78:	20400b82 	.word	0x20400b82

00400f7c <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400f7c:	b510      	push	{r4, lr}
  400f7e:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400f80:	4b06      	ldr	r3, [pc, #24]	; (400f9c <sd_mmc_start_write_blocks+0x20>)
  400f82:	4798      	blx	r3
  400f84:	b920      	cbnz	r0, 400f90 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400f86:	2200      	movs	r2, #0
  400f88:	4b05      	ldr	r3, [pc, #20]	; (400fa0 <sd_mmc_start_write_blocks+0x24>)
  400f8a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400f8c:	2005      	movs	r0, #5
  400f8e:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400f90:	4a03      	ldr	r2, [pc, #12]	; (400fa0 <sd_mmc_start_write_blocks+0x24>)
  400f92:	8813      	ldrh	r3, [r2, #0]
  400f94:	1b1c      	subs	r4, r3, r4
  400f96:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400f98:	2000      	movs	r0, #0
}
  400f9a:	bd10      	pop	{r4, pc}
  400f9c:	00402579 	.word	0x00402579
  400fa0:	20400b80 	.word	0x20400b80

00400fa4 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400fa4:	b510      	push	{r4, lr}
  400fa6:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400fa8:	4b12      	ldr	r3, [pc, #72]	; (400ff4 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400faa:	4798      	blx	r3
  400fac:	b908      	cbnz	r0, 400fb2 <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400fae:	2005      	movs	r0, #5
  400fb0:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400fb2:	b184      	cbz	r4, 400fd6 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400fb4:	2200      	movs	r2, #0
  400fb6:	4b10      	ldr	r3, [pc, #64]	; (400ff8 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400fb8:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400fba:	4b10      	ldr	r3, [pc, #64]	; (400ffc <sd_mmc_wait_end_of_write_blocks+0x58>)
  400fbc:	881b      	ldrh	r3, [r3, #0]
  400fbe:	2b01      	cmp	r3, #1
  400fc0:	d00f      	beq.n	400fe2 <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400fc2:	2100      	movs	r1, #0
  400fc4:	f243 100c 	movw	r0, #12556	; 0x310c
  400fc8:	4b0d      	ldr	r3, [pc, #52]	; (401000 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400fca:	4798      	blx	r3
  400fcc:	b968      	cbnz	r0, 400fea <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400fce:	4b0d      	ldr	r3, [pc, #52]	; (401004 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400fd0:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400fd2:	2005      	movs	r0, #5
  400fd4:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400fd6:	4b08      	ldr	r3, [pc, #32]	; (400ff8 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400fd8:	881b      	ldrh	r3, [r3, #0]
  400fda:	2b00      	cmp	r3, #0
  400fdc:	d0ed      	beq.n	400fba <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400fde:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400fe0:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400fe2:	4b08      	ldr	r3, [pc, #32]	; (401004 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400fe4:	4798      	blx	r3
		return SD_MMC_OK;
  400fe6:	2000      	movs	r0, #0
  400fe8:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400fea:	4b06      	ldr	r3, [pc, #24]	; (401004 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400fec:	4798      	blx	r3
	return SD_MMC_OK;
  400fee:	2000      	movs	r0, #0
  400ff0:	bd10      	pop	{r4, pc}
  400ff2:	bf00      	nop
  400ff4:	00402609 	.word	0x00402609
  400ff8:	20400b80 	.word	0x20400b80
  400ffc:	20400b82 	.word	0x20400b82
  401000:	004022ed 	.word	0x004022ed
  401004:	00400485 	.word	0x00400485

00401008 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  401008:	b510      	push	{r4, lr}
  40100a:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  40100c:	4b0f      	ldr	r3, [pc, #60]	; (40104c <sd_mmc_test_unit_ready+0x44>)
  40100e:	4798      	blx	r3
  401010:	2801      	cmp	r0, #1
  401012:	d018      	beq.n	401046 <sd_mmc_test_unit_ready+0x3e>
  401014:	b118      	cbz	r0, 40101e <sd_mmc_test_unit_ready+0x16>
  401016:	2802      	cmp	r0, #2
  401018:	d010      	beq.n	40103c <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  40101a:	2001      	movs	r0, #1
  40101c:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  40101e:	4b0c      	ldr	r3, [pc, #48]	; (401050 <sd_mmc_test_unit_ready+0x48>)
  401020:	5d1b      	ldrb	r3, [r3, r4]
  401022:	b10b      	cbz	r3, 401028 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  401024:	2002      	movs	r0, #2
	}
}
  401026:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  401028:	4620      	mov	r0, r4
  40102a:	4b0a      	ldr	r3, [pc, #40]	; (401054 <sd_mmc_test_unit_ready+0x4c>)
  40102c:	4798      	blx	r3
  40102e:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  401032:	2800      	cmp	r0, #0
  401034:	bf14      	ite	ne
  401036:	2000      	movne	r0, #0
  401038:	2002      	moveq	r0, #2
  40103a:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  40103c:	2200      	movs	r2, #0
  40103e:	4b04      	ldr	r3, [pc, #16]	; (401050 <sd_mmc_test_unit_ready+0x48>)
  401040:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  401042:	2002      	movs	r0, #2
  401044:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  401046:	2003      	movs	r0, #3
  401048:	bd10      	pop	{r4, pc}
  40104a:	bf00      	nop
  40104c:	004004c1 	.word	0x004004c1
  401050:	20400b88 	.word	0x20400b88
  401054:	00400d41 	.word	0x00400d41

00401058 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  401058:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  40105a:	2000      	movs	r0, #0
  40105c:	4b01      	ldr	r3, [pc, #4]	; (401064 <sd_mmc_test_unit_ready_0+0xc>)
  40105e:	4798      	blx	r3
}
  401060:	bd08      	pop	{r3, pc}
  401062:	bf00      	nop
  401064:	00401009 	.word	0x00401009

00401068 <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
  401068:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(1);
  40106a:	2001      	movs	r0, #1
  40106c:	4b01      	ldr	r3, [pc, #4]	; (401074 <sd_mmc_test_unit_ready_1+0xc>)
  40106e:	4798      	blx	r3
}
  401070:	bd08      	pop	{r3, pc}
  401072:	bf00      	nop
  401074:	00401009 	.word	0x00401009

00401078 <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  401078:	b538      	push	{r3, r4, r5, lr}
  40107a:	4604      	mov	r4, r0
  40107c:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  40107e:	4b04      	ldr	r3, [pc, #16]	; (401090 <sd_mmc_read_capacity+0x18>)
  401080:	4798      	blx	r3
  401082:	0040      	lsls	r0, r0, #1
  401084:	3801      	subs	r0, #1
  401086:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  401088:	4620      	mov	r0, r4
  40108a:	4b02      	ldr	r3, [pc, #8]	; (401094 <sd_mmc_read_capacity+0x1c>)
  40108c:	4798      	blx	r3
}
  40108e:	bd38      	pop	{r3, r4, r5, pc}
  401090:	00400d65 	.word	0x00400d65
  401094:	00401009 	.word	0x00401009

00401098 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  401098:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  40109a:	4601      	mov	r1, r0
  40109c:	2000      	movs	r0, #0
  40109e:	4b01      	ldr	r3, [pc, #4]	; (4010a4 <sd_mmc_read_capacity_0+0xc>)
  4010a0:	4798      	blx	r3
}
  4010a2:	bd08      	pop	{r3, pc}
  4010a4:	00401079 	.word	0x00401079

004010a8 <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
  4010a8:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(1, nb_sector);
  4010aa:	4601      	mov	r1, r0
  4010ac:	2001      	movs	r0, #1
  4010ae:	4b01      	ldr	r3, [pc, #4]	; (4010b4 <sd_mmc_read_capacity_1+0xc>)
  4010b0:	4798      	blx	r3
}
  4010b2:	bd08      	pop	{r3, pc}
  4010b4:	00401079 	.word	0x00401079

004010b8 <sd_mmc_unload_0>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
  4010b8:	4b01      	ldr	r3, [pc, #4]	; (4010c0 <sd_mmc_unload_0+0x8>)
  4010ba:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
  4010bc:	2001      	movs	r0, #1
  4010be:	4770      	bx	lr
  4010c0:	20400b88 	.word	0x20400b88

004010c4 <sd_mmc_unload_1>:
	sd_mmc_ejected[slot] = unload;
  4010c4:	4b01      	ldr	r3, [pc, #4]	; (4010cc <sd_mmc_unload_1+0x8>)
  4010c6:	7058      	strb	r0, [r3, #1]

bool sd_mmc_unload_1(bool unload)
{
	return sd_mmc_unload(1, unload);
}
  4010c8:	2001      	movs	r0, #1
  4010ca:	4770      	bx	lr
  4010cc:	20400b88 	.word	0x20400b88

004010d0 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  4010d0:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  4010d2:	2000      	movs	r0, #0
  4010d4:	4b01      	ldr	r3, [pc, #4]	; (4010dc <sd_mmc_wr_protect_0+0xc>)
  4010d6:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  4010d8:	bd08      	pop	{r3, pc}
  4010da:	bf00      	nop
  4010dc:	00400d89 	.word	0x00400d89

004010e0 <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
  4010e0:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  4010e2:	2001      	movs	r0, #1
  4010e4:	4b01      	ldr	r3, [pc, #4]	; (4010ec <sd_mmc_wr_protect_1+0xc>)
  4010e6:	4798      	blx	r3
	return sd_mmc_wr_protect(1);
}
  4010e8:	bd08      	pop	{r3, pc}
  4010ea:	bf00      	nop
  4010ec:	00400d89 	.word	0x00400d89

004010f0 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
  4010f0:	2001      	movs	r0, #1
  4010f2:	4770      	bx	lr

004010f4 <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
	return sd_mmc_removal(1);
}
  4010f4:	2001      	movs	r0, #1
  4010f6:	4770      	bx	lr

004010f8 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  4010f8:	b510      	push	{r4, lr}
  4010fa:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  4010fc:	2201      	movs	r2, #1
  4010fe:	4b0a      	ldr	r3, [pc, #40]	; (401128 <sd_mmc_mem_2_ram+0x30>)
  401100:	4798      	blx	r3
  401102:	b120      	cbz	r0, 40110e <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  401104:	2802      	cmp	r0, #2
  401106:	bf0c      	ite	eq
  401108:	2002      	moveq	r0, #2
  40110a:	2001      	movne	r0, #1
  40110c:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  40110e:	2101      	movs	r1, #1
  401110:	4620      	mov	r0, r4
  401112:	4b06      	ldr	r3, [pc, #24]	; (40112c <sd_mmc_mem_2_ram+0x34>)
  401114:	4798      	blx	r3
  401116:	b108      	cbz	r0, 40111c <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  401118:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  40111a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  40111c:	4b04      	ldr	r3, [pc, #16]	; (401130 <sd_mmc_mem_2_ram+0x38>)
  40111e:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  401120:	3000      	adds	r0, #0
  401122:	bf18      	it	ne
  401124:	2001      	movne	r0, #1
  401126:	bd10      	pop	{r4, pc}
  401128:	00400d8d 	.word	0x00400d8d
  40112c:	00400e61 	.word	0x00400e61
  401130:	00400e89 	.word	0x00400e89

00401134 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  401134:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  401136:	460a      	mov	r2, r1
  401138:	4601      	mov	r1, r0
  40113a:	2000      	movs	r0, #0
  40113c:	4b01      	ldr	r3, [pc, #4]	; (401144 <sd_mmc_mem_2_ram_0+0x10>)
  40113e:	4798      	blx	r3
}
  401140:	bd08      	pop	{r3, pc}
  401142:	bf00      	nop
  401144:	004010f9 	.word	0x004010f9

00401148 <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
  401148:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(1, addr, ram);
  40114a:	460a      	mov	r2, r1
  40114c:	4601      	mov	r1, r0
  40114e:	2001      	movs	r0, #1
  401150:	4b01      	ldr	r3, [pc, #4]	; (401158 <sd_mmc_mem_2_ram_1+0x10>)
  401152:	4798      	blx	r3
}
  401154:	bd08      	pop	{r3, pc}
  401156:	bf00      	nop
  401158:	004010f9 	.word	0x004010f9

0040115c <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  40115c:	b510      	push	{r4, lr}
  40115e:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  401160:	2201      	movs	r2, #1
  401162:	4b0a      	ldr	r3, [pc, #40]	; (40118c <sd_mmc_ram_2_mem+0x30>)
  401164:	4798      	blx	r3
  401166:	b120      	cbz	r0, 401172 <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  401168:	2802      	cmp	r0, #2
  40116a:	bf0c      	ite	eq
  40116c:	2002      	moveq	r0, #2
  40116e:	2001      	movne	r0, #1
  401170:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  401172:	2101      	movs	r1, #1
  401174:	4620      	mov	r0, r4
  401176:	4b06      	ldr	r3, [pc, #24]	; (401190 <sd_mmc_ram_2_mem+0x34>)
  401178:	4798      	blx	r3
  40117a:	b108      	cbz	r0, 401180 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  40117c:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  40117e:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  401180:	4b04      	ldr	r3, [pc, #16]	; (401194 <sd_mmc_ram_2_mem+0x38>)
  401182:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  401184:	3000      	adds	r0, #0
  401186:	bf18      	it	ne
  401188:	2001      	movne	r0, #1
  40118a:	bd10      	pop	{r4, pc}
  40118c:	00400ef1 	.word	0x00400ef1
  401190:	00400f7d 	.word	0x00400f7d
  401194:	00400fa5 	.word	0x00400fa5

00401198 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  401198:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  40119a:	460a      	mov	r2, r1
  40119c:	4601      	mov	r1, r0
  40119e:	2000      	movs	r0, #0
  4011a0:	4b01      	ldr	r3, [pc, #4]	; (4011a8 <sd_mmc_ram_2_mem_0+0x10>)
  4011a2:	4798      	blx	r3
}
  4011a4:	bd08      	pop	{r3, pc}
  4011a6:	bf00      	nop
  4011a8:	0040115d 	.word	0x0040115d

004011ac <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
  4011ac:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(1, addr, ram);
  4011ae:	460a      	mov	r2, r1
  4011b0:	4601      	mov	r1, r0
  4011b2:	2001      	movs	r0, #1
  4011b4:	4b01      	ldr	r3, [pc, #4]	; (4011bc <sd_mmc_ram_2_mem_1+0x10>)
  4011b6:	4798      	blx	r3
}
  4011b8:	bd08      	pop	{r3, pc}
  4011ba:	bf00      	nop
  4011bc:	0040115d 	.word	0x0040115d

004011c0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4011c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4011c4:	4baa      	ldr	r3, [pc, #680]	; (401470 <board_init+0x2b0>)
  4011c6:	4aab      	ldr	r2, [pc, #684]	; (401474 <board_init+0x2b4>)
  4011c8:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4011ca:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  4011ce:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4011d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4011d4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4011d8:	4ba7      	ldr	r3, [pc, #668]	; (401478 <board_init+0x2b8>)
  4011da:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4011de:	f022 0201 	bic.w	r2, r2, #1
  4011e2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4011e6:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4011ea:	f022 0201 	bic.w	r2, r2, #1
  4011ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4011f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4011f6:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4011fa:	200a      	movs	r0, #10
  4011fc:	f8df 8294 	ldr.w	r8, [pc, #660]	; 401494 <board_init+0x2d4>
  401200:	47c0      	blx	r8
  401202:	200b      	movs	r0, #11
  401204:	47c0      	blx	r8
  401206:	200c      	movs	r0, #12
  401208:	47c0      	blx	r8
  40120a:	2010      	movs	r0, #16
  40120c:	47c0      	blx	r8
  40120e:	2011      	movs	r0, #17
  401210:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401212:	4b9a      	ldr	r3, [pc, #616]	; (40147c <board_init+0x2bc>)
  401214:	f04f 0e01 	mov.w	lr, #1
  401218:	f8c3 e010 	str.w	lr, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40121c:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401220:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401224:	4c96      	ldr	r4, [pc, #600]	; (401480 <board_init+0x2c0>)
  401226:	2204      	movs	r2, #4
  401228:	6162      	str	r2, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40122a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  40122e:	6662      	str	r2, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401230:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401234:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401236:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401238:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40123c:	6f21      	ldr	r1, [r4, #112]	; 0x70
  40123e:	f021 0104 	bic.w	r1, r1, #4
  401242:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401244:	6f61      	ldr	r1, [r4, #116]	; 0x74
  401246:	f021 0104 	bic.w	r1, r1, #4
  40124a:	6761      	str	r1, [r4, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40124c:	498d      	ldr	r1, [pc, #564]	; (401484 <board_init+0x2c4>)
  40124e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401252:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401254:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401258:	6308      	str	r0, [r1, #48]	; 0x30
#define UART3_TXD_GPIO   PIO_PD30_IDX
   
#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
//	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40125a:	4f8b      	ldr	r7, [pc, #556]	; (401488 <board_init+0x2c8>)
  40125c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
  401260:	f041 0110 	orr.w	r1, r1, #16
  401264:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
		base->PIO_PUDR = mask;
  401268:	2108      	movs	r1, #8
  40126a:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40126c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401270:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401272:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401274:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401278:	6f20      	ldr	r0, [r4, #112]	; 0x70
  40127a:	f020 0008 	bic.w	r0, r0, #8
  40127e:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401280:	6f60      	ldr	r0, [r4, #116]	; 0x74
  401282:	f020 0008 	bic.w	r0, r0, #8
  401286:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401288:	6061      	str	r1, [r4, #4]
		base->PIO_PUDR = mask;
  40128a:	2510      	movs	r5, #16
  40128c:	6625      	str	r5, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40128e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401292:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401294:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401296:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40129a:	6f20      	ldr	r0, [r4, #112]	; 0x70
  40129c:	f020 0010 	bic.w	r0, r0, #16
  4012a0:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4012a2:	6f60      	ldr	r0, [r4, #116]	; 0x74
  4012a4:	f020 0010 	bic.w	r0, r0, #16
  4012a8:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4012aa:	6065      	str	r5, [r4, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012ac:	2680      	movs	r6, #128	; 0x80
  4012ae:	611e      	str	r6, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012b0:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012b4:	631e      	str	r6, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012b6:	f44f 7080 	mov.w	r0, #256	; 0x100
  4012ba:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012bc:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4012c0:	6360      	str	r0, [r4, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012c2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  4012c6:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012c8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4012cc:	6360      	str	r0, [r4, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4012d2:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012d4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012d8:	6320      	str	r0, [r4, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4012da:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  4012de:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012e0:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4012e4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  4012e8:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012ea:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012ee:	4867      	ldr	r0, [pc, #412]	; (40148c <board_init+0x2cc>)
  4012f0:	6102      	str	r2, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012f2:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012f6:	6302      	str	r2, [r0, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012f8:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012fa:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012fe:	6319      	str	r1, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401300:	f8c0 e010 	str.w	lr, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401304:	f8c0 e0a0 	str.w	lr, [r0, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401308:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
	ioport_set_pin_level(BigTiny_CLK, HIGH);
	/* DAT to Tiny.*/
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(BigTiny_DAT, HIGH);
	/* WU Tiny to Big. */
	pmc_enable_periph_clk(ID_PIOA);
  40130c:	200a      	movs	r0, #10
  40130e:	47c0      	blx	r8
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401310:	2302      	movs	r3, #2
  401312:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401314:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40131c:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40131e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401322:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  401326:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401328:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	ioport_set_pin_dir(USB_ID_PIN, IOPORT_DIR_INPUT);
# endif
#endif

#ifdef CONF_BOARD_SDRAMC
	pio_configure_pin(SDRAM_A0_PIO, SDRAM_A_FLAGS);	//V71 A2
  40132c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401330:	2054      	movs	r0, #84	; 0x54
  401332:	4c57      	ldr	r4, [pc, #348]	; (401490 <board_init+0x2d0>)
  401334:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A1_PIO, SDRAM_A_FLAGS);	//V71 A3
  401336:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40133a:	2055      	movs	r0, #85	; 0x55
  40133c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);	//V71 A4
  40133e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401342:	2056      	movs	r0, #86	; 0x56
  401344:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  //V71 A5
  401346:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40134a:	2057      	movs	r0, #87	; 0x57
  40134c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  //V71 A6
  40134e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401352:	2058      	movs	r0, #88	; 0x58
  401354:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  //V71 A7
  401356:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40135a:	2059      	movs	r0, #89	; 0x59
  40135c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  //V71 A8
  40135e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401362:	205a      	movs	r0, #90	; 0x5a
  401364:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  //V71 A9
  401366:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40136a:	205b      	movs	r0, #91	; 0x5b
  40136c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);	 //V71 A10
  40136e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401372:	205c      	movs	r0, #92	; 0x5c
  401374:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  //V71 A11
  401376:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40137a:	205d      	movs	r0, #93	; 0x5d
  40137c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS); //V71 SDA10
  40137e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401382:	206d      	movs	r0, #109	; 0x6d
  401384:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A13_FLAGS); //V71 A13
  401386:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40138a:	205f      	movs	r0, #95	; 0x5f
  40138c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A12_PIO, SDRAM_A14_FLAGS); //V71 A14
  40138e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401392:	2012      	movs	r0, #18
  401394:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  401396:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40139a:	2014      	movs	r0, #20
  40139c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA1_PIO, SDRAM_BA1_FLAGS);
  40139e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013a2:	2000      	movs	r0, #0
  4013a4:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  4013a6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013aa:	2077      	movs	r0, #119	; 0x77
  4013ac:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  4013ae:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013b2:	206e      	movs	r0, #110	; 0x6e
  4013b4:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  4013b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013ba:	204f      	movs	r0, #79	; 0x4f
  4013bc:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  4013be:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013c2:	2070      	movs	r0, #112	; 0x70
  4013c4:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  4013c6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013ca:	2071      	movs	r0, #113	; 0x71
  4013cc:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  4013ce:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013d2:	207d      	movs	r0, #125	; 0x7d
  4013d4:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  4013d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013da:	2052      	movs	r0, #82	; 0x52
  4013dc:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  4013de:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013e2:	206f      	movs	r0, #111	; 0x6f
  4013e4:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);
  4013e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013ea:	2040      	movs	r0, #64	; 0x40
  4013ec:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);
  4013ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013f2:	2041      	movs	r0, #65	; 0x41
  4013f4:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);
  4013f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013fa:	2042      	movs	r0, #66	; 0x42
  4013fc:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);
  4013fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401402:	2043      	movs	r0, #67	; 0x43
  401404:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);
  401406:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40140a:	2044      	movs	r0, #68	; 0x44
  40140c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);
  40140e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401412:	2045      	movs	r0, #69	; 0x45
  401414:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);
  401416:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40141a:	2046      	movs	r0, #70	; 0x46
  40141c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);
  40141e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401422:	2047      	movs	r0, #71	; 0x47
  401424:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);
  401426:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40142a:	4630      	mov	r0, r6
  40142c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);
  40142e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401432:	2081      	movs	r0, #129	; 0x81
  401434:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS);
  401436:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40143a:	2082      	movs	r0, #130	; 0x82
  40143c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS);
  40143e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401442:	2083      	movs	r0, #131	; 0x83
  401444:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS);
  401446:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40144a:	2084      	movs	r0, #132	; 0x84
  40144c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS);
  40144e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401452:	2085      	movs	r0, #133	; 0x85
  401454:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS);
  401456:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40145a:	200f      	movs	r0, #15
  40145c:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS);
  40145e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401462:	4628      	mov	r0, r5
  401464:	47a0      	blx	r4

	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  401466:	f8c7 5124 	str.w	r5, [r7, #292]	; 0x124
  40146a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40146e:	bf00      	nop
  401470:	400e0c00 	.word	0x400e0c00
  401474:	5a00080c 	.word	0x5a00080c
  401478:	e000ed00 	.word	0xe000ed00
  40147c:	400e1400 	.word	0x400e1400
  401480:	400e0e00 	.word	0x400e0e00
  401484:	400e1200 	.word	0x400e1200
  401488:	40088000 	.word	0x40088000
  40148c:	400e1000 	.word	0x400e1000
  401490:	004034fd 	.word	0x004034fd
  401494:	00403819 	.word	0x00403819

00401498 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401498:	4b28      	ldr	r3, [pc, #160]	; (40153c <twihs_set_speed+0xa4>)
  40149a:	4299      	cmp	r1, r3
  40149c:	d84b      	bhi.n	401536 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40149e:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4014a2:	4299      	cmp	r1, r3
  4014a4:	d92d      	bls.n	401502 <twihs_set_speed+0x6a>
{
  4014a6:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4014a8:	4c25      	ldr	r4, [pc, #148]	; (401540 <twihs_set_speed+0xa8>)
  4014aa:	fba4 3402 	umull	r3, r4, r4, r2
  4014ae:	0ba4      	lsrs	r4, r4, #14
  4014b0:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4014b2:	4b24      	ldr	r3, [pc, #144]	; (401544 <twihs_set_speed+0xac>)
  4014b4:	440b      	add	r3, r1
  4014b6:	009b      	lsls	r3, r3, #2
  4014b8:	fbb2 f2f3 	udiv	r2, r2, r3
  4014bc:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014be:	2cff      	cmp	r4, #255	; 0xff
  4014c0:	d91d      	bls.n	4014fe <twihs_set_speed+0x66>
  4014c2:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4014c4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4014c6:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014c8:	2cff      	cmp	r4, #255	; 0xff
  4014ca:	d901      	bls.n	4014d0 <twihs_set_speed+0x38>
  4014cc:	2906      	cmp	r1, #6
  4014ce:	d9f9      	bls.n	4014c4 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014d0:	2aff      	cmp	r2, #255	; 0xff
  4014d2:	d907      	bls.n	4014e4 <twihs_set_speed+0x4c>
  4014d4:	2906      	cmp	r1, #6
  4014d6:	d805      	bhi.n	4014e4 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4014d8:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4014da:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014dc:	2aff      	cmp	r2, #255	; 0xff
  4014de:	d901      	bls.n	4014e4 <twihs_set_speed+0x4c>
  4014e0:	2906      	cmp	r1, #6
  4014e2:	d9f9      	bls.n	4014d8 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4014e4:	0213      	lsls	r3, r2, #8
  4014e6:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  4014e8:	0409      	lsls	r1, r1, #16
  4014ea:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4014ee:	430b      	orrs	r3, r1
  4014f0:	b2e4      	uxtb	r4, r4
  4014f2:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  4014f4:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4014f6:	2000      	movs	r0, #0
}
  4014f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014fc:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4014fe:	2100      	movs	r1, #0
  401500:	e7e6      	b.n	4014d0 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401502:	0049      	lsls	r1, r1, #1
  401504:	fbb2 f2f1 	udiv	r2, r2, r1
  401508:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40150a:	2aff      	cmp	r2, #255	; 0xff
  40150c:	d911      	bls.n	401532 <twihs_set_speed+0x9a>
  40150e:	2300      	movs	r3, #0
			ckdiv++;
  401510:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401512:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401514:	2aff      	cmp	r2, #255	; 0xff
  401516:	d901      	bls.n	40151c <twihs_set_speed+0x84>
  401518:	2b06      	cmp	r3, #6
  40151a:	d9f9      	bls.n	401510 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40151c:	0211      	lsls	r1, r2, #8
  40151e:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401520:	041b      	lsls	r3, r3, #16
  401522:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401526:	430b      	orrs	r3, r1
  401528:	b2d2      	uxtb	r2, r2
  40152a:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  40152c:	6102      	str	r2, [r0, #16]
	return PASS;
  40152e:	2000      	movs	r0, #0
  401530:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401532:	2300      	movs	r3, #0
  401534:	e7f2      	b.n	40151c <twihs_set_speed+0x84>
		return FAIL;
  401536:	2001      	movs	r0, #1
  401538:	4770      	bx	lr
  40153a:	bf00      	nop
  40153c:	00061a80 	.word	0x00061a80
  401540:	057619f1 	.word	0x057619f1
  401544:	3ffd1200 	.word	0x3ffd1200

00401548 <twihs_master_init>:
{
  401548:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  40154a:	f04f 32ff 	mov.w	r2, #4294967295
  40154e:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401550:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401552:	2280      	movs	r2, #128	; 0x80
  401554:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401556:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401558:	2208      	movs	r2, #8
  40155a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  40155c:	2220      	movs	r2, #32
  40155e:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401560:	2204      	movs	r2, #4
  401562:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401564:	680a      	ldr	r2, [r1, #0]
  401566:	6849      	ldr	r1, [r1, #4]
  401568:	4b03      	ldr	r3, [pc, #12]	; (401578 <twihs_master_init+0x30>)
  40156a:	4798      	blx	r3
}
  40156c:	2801      	cmp	r0, #1
  40156e:	bf14      	ite	ne
  401570:	2000      	movne	r0, #0
  401572:	2001      	moveq	r0, #1
  401574:	bd08      	pop	{r3, pc}
  401576:	bf00      	nop
  401578:	00401499 	.word	0x00401499

0040157c <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  40157c:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  40157e:	2a00      	cmp	r2, #0
  401580:	d04c      	beq.n	40161c <twihs_master_read+0xa0>
{
  401582:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401584:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401586:	2600      	movs	r6, #0
  401588:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40158a:	684b      	ldr	r3, [r1, #4]
  40158c:	021b      	lsls	r3, r3, #8
  40158e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401592:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401596:	7c0d      	ldrb	r5, [r1, #16]
  401598:	042d      	lsls	r5, r5, #16
  40159a:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  40159e:	432b      	orrs	r3, r5
  4015a0:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4015a2:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4015a4:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4015a6:	b15d      	cbz	r5, 4015c0 <twihs_master_read+0x44>
	val = addr[0];
  4015a8:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  4015aa:	2d01      	cmp	r5, #1
  4015ac:	dd02      	ble.n	4015b4 <twihs_master_read+0x38>
		val |= addr[1];
  4015ae:	784e      	ldrb	r6, [r1, #1]
  4015b0:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  4015b4:	2d02      	cmp	r5, #2
  4015b6:	dd04      	ble.n	4015c2 <twihs_master_read+0x46>
		val |= addr[2];
  4015b8:	7889      	ldrb	r1, [r1, #2]
  4015ba:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  4015be:	e000      	b.n	4015c2 <twihs_master_read+0x46>
		return 0;
  4015c0:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4015c2:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4015c4:	2301      	movs	r3, #1
  4015c6:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4015c8:	2502      	movs	r5, #2
  4015ca:	e012      	b.n	4015f2 <twihs_master_read+0x76>
  4015cc:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4015ce:	f013 0f02 	tst.w	r3, #2
  4015d2:	d01b      	beq.n	40160c <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  4015d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015d6:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4015d8:	6a03      	ldr	r3, [r0, #32]
  4015da:	f013 0f01 	tst.w	r3, #1
  4015de:	d0fb      	beq.n	4015d8 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  4015e0:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4015e2:	2000      	movs	r0, #0
}
  4015e4:	bc70      	pop	{r4, r5, r6}
  4015e6:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  4015e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015ea:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  4015ee:	3a01      	subs	r2, #1
  4015f0:	d0f2      	beq.n	4015d8 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4015f2:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4015f4:	f413 7f80 	tst.w	r3, #256	; 0x100
  4015f8:	d114      	bne.n	401624 <twihs_master_read+0xa8>
  4015fa:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  4015fe:	2a01      	cmp	r2, #1
  401600:	d0e4      	beq.n	4015cc <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401602:	f013 0f02 	tst.w	r3, #2
  401606:	d1ef      	bne.n	4015e8 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401608:	2a00      	cmp	r2, #0
  40160a:	d0e5      	beq.n	4015d8 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  40160c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40160e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401612:	d105      	bne.n	401620 <twihs_master_read+0xa4>
		if (!timeout--) {
  401614:	3901      	subs	r1, #1
  401616:	d1f2      	bne.n	4015fe <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401618:	2009      	movs	r0, #9
  40161a:	e7e3      	b.n	4015e4 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  40161c:	2001      	movs	r0, #1
  40161e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401620:	2005      	movs	r0, #5
  401622:	e7df      	b.n	4015e4 <twihs_master_read+0x68>
  401624:	2005      	movs	r0, #5
  401626:	e7dd      	b.n	4015e4 <twihs_master_read+0x68>

00401628 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401628:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  40162a:	2b00      	cmp	r3, #0
  40162c:	d043      	beq.n	4016b6 <twihs_master_write+0x8e>
{
  40162e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401630:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401632:	2600      	movs	r6, #0
  401634:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401636:	7c0a      	ldrb	r2, [r1, #16]
  401638:	0412      	lsls	r2, r2, #16
  40163a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40163e:	684d      	ldr	r5, [r1, #4]
  401640:	022d      	lsls	r5, r5, #8
  401642:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401646:	432a      	orrs	r2, r5
  401648:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40164a:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40164c:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  40164e:	b15d      	cbz	r5, 401668 <twihs_master_write+0x40>
	val = addr[0];
  401650:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401652:	2d01      	cmp	r5, #1
  401654:	dd02      	ble.n	40165c <twihs_master_write+0x34>
		val |= addr[1];
  401656:	784e      	ldrb	r6, [r1, #1]
  401658:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  40165c:	2d02      	cmp	r5, #2
  40165e:	dd04      	ble.n	40166a <twihs_master_write+0x42>
		val |= addr[2];
  401660:	7889      	ldrb	r1, [r1, #2]
  401662:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401666:	e000      	b.n	40166a <twihs_master_write+0x42>
		return 0;
  401668:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40166a:	60c2      	str	r2, [r0, #12]
  40166c:	e004      	b.n	401678 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  40166e:	f814 2b01 	ldrb.w	r2, [r4], #1
  401672:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401674:	3b01      	subs	r3, #1
  401676:	d00f      	beq.n	401698 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401678:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40167a:	f412 7f80 	tst.w	r2, #256	; 0x100
  40167e:	d11e      	bne.n	4016be <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401680:	f012 0f04 	tst.w	r2, #4
  401684:	d1f3      	bne.n	40166e <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401686:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401688:	f412 7f80 	tst.w	r2, #256	; 0x100
  40168c:	d115      	bne.n	4016ba <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  40168e:	f012 0f04 	tst.w	r2, #4
  401692:	d1ec      	bne.n	40166e <twihs_master_write+0x46>
	while (cnt > 0) {
  401694:	2b00      	cmp	r3, #0
  401696:	d1f6      	bne.n	401686 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401698:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40169a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40169e:	d111      	bne.n	4016c4 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  4016a0:	f013 0f04 	tst.w	r3, #4
  4016a4:	d0f8      	beq.n	401698 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4016a6:	2302      	movs	r3, #2
  4016a8:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4016aa:	6a03      	ldr	r3, [r0, #32]
  4016ac:	f013 0f01 	tst.w	r3, #1
  4016b0:	d0fb      	beq.n	4016aa <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  4016b2:	2000      	movs	r0, #0
  4016b4:	e004      	b.n	4016c0 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  4016b6:	2001      	movs	r0, #1
  4016b8:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4016ba:	2005      	movs	r0, #5
  4016bc:	e000      	b.n	4016c0 <twihs_master_write+0x98>
  4016be:	2005      	movs	r0, #5
}
  4016c0:	bc70      	pop	{r4, r5, r6}
  4016c2:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4016c4:	2005      	movs	r0, #5
  4016c6:	e7fb      	b.n	4016c0 <twihs_master_write+0x98>

004016c8 <write_scl_A_OLD>:
	
/*! \brief Writes SCL.
    \param x tristates SCL when x = 1, other wise 0
 */
void write_scl_A_OLD (char x)
{
  4016c8:	b508      	push	{r3, lr}
      if(x)
  4016ca:	b158      	cbz	r0, 4016e4 <write_scl_A_OLD+0x1c>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4016cc:	4b0a      	ldr	r3, [pc, #40]	; (4016f8 <write_scl_A_OLD+0x30>)
  4016ce:	f44f 7200 	mov.w	r2, #512	; 0x200
  4016d2:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4016d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4016d8:	461a      	mov	r2, r3
  4016da:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
      {
//             DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_A, IOPORT_DIR_INPUT);
 	    //check clock stretching
 	    while(!READ_SCL_A_OLD());
  4016dc:	f413 7f00 	tst.w	r3, #512	; 0x200
  4016e0:	d0fb      	beq.n	4016da <write_scl_A_OLD+0x12>
  4016e2:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4016e4:	4b04      	ldr	r3, [pc, #16]	; (4016f8 <write_scl_A_OLD+0x30>)
  4016e6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4016ea:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4016ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      else
      {
//             DDR_SCL |= (1 << SCL); //output 
//             PORT_SCL &= ~(1 << SCL); //set it low
			ioport_set_pin_dir(SCL_A, IOPORT_DIR_OUTPUT);
			pio_set_pin_low(SCL_A);
  4016f0:	2049      	movs	r0, #73	; 0x49
  4016f2:	4b02      	ldr	r3, [pc, #8]	; (4016fc <write_scl_A_OLD+0x34>)
  4016f4:	4798      	blx	r3
  4016f6:	bd08      	pop	{r3, pc}
  4016f8:	400e1200 	.word	0x400e1200
  4016fc:	004034e1 	.word	0x004034e1

00401700 <write_sda_A_OLD>:

/*! \brief Writes SDA.
    \param x tristates SDA when x = 1, other wise 0
 */
void write_sda_A_OLD (char x)
{
  401700:	b508      	push	{r3, lr}
	if(x)
  401702:	b130      	cbz	r0, 401712 <write_sda_A_OLD+0x12>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401704:	4b08      	ldr	r3, [pc, #32]	; (401728 <write_sda_A_OLD+0x28>)
  401706:	f44f 7280 	mov.w	r2, #256	; 0x100
  40170a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40170c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401710:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401712:	4b05      	ldr	r3, [pc, #20]	; (401728 <write_sda_A_OLD+0x28>)
  401714:	f44f 7280 	mov.w	r2, #256	; 0x100
  401718:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40171a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	else
	{
		///            DDR_SDA |= (1 << SDA); //output
		///            PORT_SDA &= ~(1 << SDA); //set it low
		ioport_set_pin_dir(SDA_A, IOPORT_DIR_OUTPUT);
		pio_set_pin_low(SDA_A);
  40171e:	2048      	movs	r0, #72	; 0x48
  401720:	4b02      	ldr	r3, [pc, #8]	; (40172c <write_sda_A_OLD+0x2c>)
  401722:	4798      	blx	r3
  401724:	bd08      	pop	{r3, pc}
  401726:	bf00      	nop
  401728:	400e1200 	.word	0x400e1200
  40172c:	004034e1 	.word	0x004034e1

00401730 <twi_start_cond_A_OLD>:
{
  401730:	b510      	push	{r4, lr}
        write_sda_A_OLD(0);
  401732:	2000      	movs	r0, #0
  401734:	4b05      	ldr	r3, [pc, #20]	; (40174c <twi_start_cond_A_OLD+0x1c>)
  401736:	4798      	blx	r3
	delay_us(DELAY_A_OLD);
  401738:	20cb      	movs	r0, #203	; 0xcb
  40173a:	4c05      	ldr	r4, [pc, #20]	; (401750 <twi_start_cond_A_OLD+0x20>)
  40173c:	47a0      	blx	r4
	write_scl_A_OLD(0);	
  40173e:	2000      	movs	r0, #0
  401740:	4b04      	ldr	r3, [pc, #16]	; (401754 <twi_start_cond_A_OLD+0x24>)
  401742:	4798      	blx	r3
	delay_us(DELAY_A_OLD);
  401744:	20cb      	movs	r0, #203	; 0xcb
  401746:	47a0      	blx	r4
}
  401748:	2001      	movs	r0, #1
  40174a:	bd10      	pop	{r4, pc}
  40174c:	00401701 	.word	0x00401701
  401750:	2040008d 	.word	0x2040008d
  401754:	004016c9 	.word	0x004016c9

00401758 <toggle_scl_A_OLD>:
		
	}
}

void toggle_scl_A_OLD() 
{
  401758:	b508      	push	{r3, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40175a:	4b0d      	ldr	r3, [pc, #52]	; (401790 <toggle_scl_A_OLD+0x38>)
  40175c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(SCL_A))
  40175e:	f413 7f00 	tst.w	r3, #512	; 0x200
  401762:	d10b      	bne.n	40177c <toggle_scl_A_OLD+0x24>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401764:	4b0a      	ldr	r3, [pc, #40]	; (401790 <toggle_scl_A_OLD+0x38>)
  401766:	f44f 7200 	mov.w	r2, #512	; 0x200
  40176a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40176c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401770:	461a      	mov	r2, r3
  401772:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	}
	else
	{
// 		DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_A, IOPORT_DIR_INPUT);
 		while(!READ_SCL_A_OLD());
  401774:	f413 7f00 	tst.w	r3, #512	; 0x200
  401778:	d0fb      	beq.n	401772 <toggle_scl_A_OLD+0x1a>
  40177a:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40177c:	4b04      	ldr	r3, [pc, #16]	; (401790 <toggle_scl_A_OLD+0x38>)
  40177e:	f44f 7200 	mov.w	r2, #512	; 0x200
  401782:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401784:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pio_set_pin_low(SCL_A);
  401788:	2049      	movs	r0, #73	; 0x49
  40178a:	4b02      	ldr	r3, [pc, #8]	; (401794 <toggle_scl_A_OLD+0x3c>)
  40178c:	4798      	blx	r3
  40178e:	bd08      	pop	{r3, pc}
  401790:	400e1200 	.word	0x400e1200
  401794:	004034e1 	.word	0x004034e1

00401798 <i2c_write_byte_A_OLD>:
{
  401798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40179c:	4604      	mov	r4, r0
  40179e:	2708      	movs	r7, #8
            write_sda_A_OLD((byte & 0x80) != 0);
  4017a0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 401814 <i2c_write_byte_A_OLD+0x7c>
            delay_us(DELAY_A_OLD);
  4017a4:	26cb      	movs	r6, #203	; 0xcb
  4017a6:	4d19      	ldr	r5, [pc, #100]	; (40180c <i2c_write_byte_A_OLD+0x74>)
            write_sda_A_OLD((byte & 0x80) != 0);
  4017a8:	09e0      	lsrs	r0, r4, #7
  4017aa:	47c8      	blx	r9
            delay_us(DELAY_A_OLD);
  4017ac:	4630      	mov	r0, r6
  4017ae:	47a8      	blx	r5
            toggle_scl_A_OLD();//goes high
  4017b0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 401818 <i2c_write_byte_A_OLD+0x80>
  4017b4:	47c0      	blx	r8
            delay_us(DELAY_A_OLD);
  4017b6:	4630      	mov	r0, r6
  4017b8:	47a8      	blx	r5
            toggle_scl_A_OLD();//goes low
  4017ba:	47c0      	blx	r8
            byte <<= 1;
  4017bc:	0064      	lsls	r4, r4, #1
  4017be:	b2e4      	uxtb	r4, r4
            delay_us(DELAY_A_OLD);
  4017c0:	4630      	mov	r0, r6
  4017c2:	47a8      	blx	r5
  4017c4:	1e78      	subs	r0, r7, #1
	for (bit = 0; bit < 8; bit++) 
  4017c6:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
  4017ca:	d1ed      	bne.n	4017a8 <i2c_write_byte_A_OLD+0x10>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4017cc:	4c10      	ldr	r4, [pc, #64]	; (401810 <i2c_write_byte_A_OLD+0x78>)
  4017ce:	f44f 7380 	mov.w	r3, #256	; 0x100
  4017d2:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017d4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	toggle_scl_A_OLD(); //goes high for the 9th clock
  4017d8:	47c0      	blx	r8
	delay_us(4);
  4017da:	20cb      	movs	r0, #203	; 0xcb
  4017dc:	4b0b      	ldr	r3, [pc, #44]	; (40180c <i2c_write_byte_A_OLD+0x74>)
  4017de:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4017e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if(READ_SDA_A_OLD())
  4017e2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4017e6:	d002      	beq.n	4017ee <i2c_write_byte_A_OLD+0x56>
}	
  4017e8:	4638      	mov	r0, r7
  4017ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	delay_us(DELAY_A_OLD);
  4017ee:	20cb      	movs	r0, #203	; 0xcb
  4017f0:	4c06      	ldr	r4, [pc, #24]	; (40180c <i2c_write_byte_A_OLD+0x74>)
  4017f2:	47a0      	blx	r4
	toggle_scl_A_OLD(); //end of byte with acknowledgment. 
  4017f4:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4017f6:	4b06      	ldr	r3, [pc, #24]	; (401810 <i2c_write_byte_A_OLD+0x78>)
  4017f8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4017fc:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	delay_us(DELAY_A_OLD); 
  401802:	20cb      	movs	r0, #203	; 0xcb
  401804:	47a0      	blx	r4
	return 1;
  401806:	2701      	movs	r7, #1
  401808:	e7ee      	b.n	4017e8 <i2c_write_byte_A_OLD+0x50>
  40180a:	bf00      	nop
  40180c:	2040008d 	.word	0x2040008d
  401810:	400e1200 	.word	0x400e1200
  401814:	00401701 	.word	0x00401701
  401818:	00401759 	.word	0x00401759

0040181c <write_data_A_OLD>:
{
  40181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40181e:	4607      	mov	r7, r0
  401820:	460e      	mov	r6, r1
	if(!twi_start_cond_A_OLD())
  401822:	4b12      	ldr	r3, [pc, #72]	; (40186c <write_data_A_OLD+0x50>)
  401824:	4798      	blx	r3
  401826:	4605      	mov	r5, r0
  401828:	b908      	cbnz	r0, 40182e <write_data_A_OLD+0x12>
}
  40182a:	4628      	mov	r0, r5
  40182c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 	return i2c_write_byte_A_OLD(SLAVE_ADDRESS_A_OLD | read );
  40182e:	20ee      	movs	r0, #238	; 0xee
  401830:	4b0f      	ldr	r3, [pc, #60]	; (401870 <write_data_A_OLD+0x54>)
  401832:	4798      	blx	r3
	if(!send_slave_address_A_OLD(WRITE_A_OLD))
  401834:	4605      	mov	r5, r0
  401836:	2800      	cmp	r0, #0
  401838:	d0f7      	beq.n	40182a <write_data_A_OLD+0xe>
	for(index = 0; index < bytes; index++)
  40183a:	b1ae      	cbz	r6, 401868 <write_data_A_OLD+0x4c>
  40183c:	1e7c      	subs	r4, r7, #1
  40183e:	3e01      	subs	r6, #1
  401840:	fa57 f686 	uxtab	r6, r7, r6
		 ack = i2c_write_byte_A_OLD(indata[index]);
  401844:	4f0a      	ldr	r7, [pc, #40]	; (401870 <write_data_A_OLD+0x54>)
  401846:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40184a:	47b8      	blx	r7
		 if(!ack)
  40184c:	4605      	mov	r5, r0
  40184e:	b108      	cbz	r0, 401854 <write_data_A_OLD+0x38>
	for(index = 0; index < bytes; index++)
  401850:	42b4      	cmp	r4, r6
  401852:	d1f8      	bne.n	401846 <write_data_A_OLD+0x2a>
	write_scl_A_OLD(1);
  401854:	2001      	movs	r0, #1
  401856:	4b07      	ldr	r3, [pc, #28]	; (401874 <write_data_A_OLD+0x58>)
  401858:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_A_OLD);
  40185a:	2066      	movs	r0, #102	; 0x66
  40185c:	4b06      	ldr	r3, [pc, #24]	; (401878 <write_data_A_OLD+0x5c>)
  40185e:	4798      	blx	r3
	write_sda_A_OLD(1);
  401860:	2001      	movs	r0, #1
  401862:	4b06      	ldr	r3, [pc, #24]	; (40187c <write_data_A_OLD+0x60>)
  401864:	4798      	blx	r3
	return ack;
  401866:	e7e0      	b.n	40182a <write_data_A_OLD+0xe>
	for(index = 0; index < bytes; index++)
  401868:	2500      	movs	r5, #0
  40186a:	e7f3      	b.n	401854 <write_data_A_OLD+0x38>
  40186c:	00401731 	.word	0x00401731
  401870:	00401799 	.word	0x00401799
  401874:	004016c9 	.word	0x004016c9
  401878:	2040008d 	.word	0x2040008d
  40187c:	00401701 	.word	0x00401701

00401880 <i2c_read_byte_A_OLD>:
{
  401880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401884:	b083      	sub	sp, #12
  401886:	4683      	mov	fp, r0
  401888:	9101      	str	r1, [sp, #4]
  40188a:	4692      	mov	sl, r2
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40188c:	4b26      	ldr	r3, [pc, #152]	; (401928 <i2c_read_byte_A_OLD+0xa8>)
  40188e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401892:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401894:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401898:	2407      	movs	r4, #7
        unsigned char byte = 0;
  40189a:	f04f 0800 	mov.w	r8, #0
             toggle_scl_A_OLD();//goes high
  40189e:	4f23      	ldr	r7, [pc, #140]	; (40192c <i2c_read_byte_A_OLD+0xac>)
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4018a0:	4699      	mov	r9, r3
              delay_us(DELAY_A_OLD);
  4018a2:	26cb      	movs	r6, #203	; 0xcb
  4018a4:	e009      	b.n	4018ba <i2c_read_byte_A_OLD+0x3a>
  4018a6:	4630      	mov	r0, r6
  4018a8:	4d21      	ldr	r5, [pc, #132]	; (401930 <i2c_read_byte_A_OLD+0xb0>)
  4018aa:	47a8      	blx	r5
              toggle_scl_A_OLD();//goes low
  4018ac:	47b8      	blx	r7
              delay_us(DELAY_A_OLD);
  4018ae:	4630      	mov	r0, r6
  4018b0:	47a8      	blx	r5
  4018b2:	3c01      	subs	r4, #1
	for (bit = 0; bit < 8; bit++) 
  4018b4:	f1b4 3fff 	cmp.w	r4, #4294967295
  4018b8:	d00c      	beq.n	4018d4 <i2c_read_byte_A_OLD+0x54>
             toggle_scl_A_OLD();//goes high
  4018ba:	47b8      	blx	r7
  4018bc:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
             if(READ_SDA_A_OLD())
  4018c0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4018c4:	d0ef      	beq.n	4018a6 <i2c_read_byte_A_OLD+0x26>
                     byte|= (1 << (7- bit));
  4018c6:	2301      	movs	r3, #1
  4018c8:	40a3      	lsls	r3, r4
  4018ca:	ea43 0808 	orr.w	r8, r3, r8
  4018ce:	fa5f f888 	uxtb.w	r8, r8
  4018d2:	e7e8      	b.n	4018a6 <i2c_read_byte_A_OLD+0x26>
	rcvdata[index] = byte;
  4018d4:	f80b 800a 	strb.w	r8, [fp, sl]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4018d8:	4b13      	ldr	r3, [pc, #76]	; (401928 <i2c_read_byte_A_OLD+0xa8>)
  4018da:	f44f 7280 	mov.w	r2, #256	; 0x100
  4018de:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if(index < (bytes-1))
  4018e4:	9b01      	ldr	r3, [sp, #4]
  4018e6:	3b01      	subs	r3, #1
  4018e8:	459a      	cmp	sl, r3
  4018ea:	db0e      	blt.n	40190a <i2c_read_byte_A_OLD+0x8a>
		write_sda_A_OLD(1);
  4018ec:	2001      	movs	r0, #1
  4018ee:	4b11      	ldr	r3, [pc, #68]	; (401934 <i2c_read_byte_A_OLD+0xb4>)
  4018f0:	4798      	blx	r3
		toggle_scl_A_OLD(); //goes high for the 9th clock
  4018f2:	4d0e      	ldr	r5, [pc, #56]	; (40192c <i2c_read_byte_A_OLD+0xac>)
  4018f4:	47a8      	blx	r5
		delay_us(DELAY_A_OLD);
  4018f6:	20cb      	movs	r0, #203	; 0xcb
  4018f8:	4c0d      	ldr	r4, [pc, #52]	; (401930 <i2c_read_byte_A_OLD+0xb0>)
  4018fa:	47a0      	blx	r4
		toggle_scl_A_OLD(); //end of byte with acknowledgment. 
  4018fc:	47a8      	blx	r5
		delay_us(DELAY_A_OLD);
  4018fe:	20cb      	movs	r0, #203	; 0xcb
  401900:	47a0      	blx	r4
}	
  401902:	2001      	movs	r0, #1
  401904:	b003      	add	sp, #12
  401906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		write_sda_A_OLD(0);
  40190a:	2000      	movs	r0, #0
  40190c:	4d09      	ldr	r5, [pc, #36]	; (401934 <i2c_read_byte_A_OLD+0xb4>)
  40190e:	47a8      	blx	r5
		toggle_scl_A_OLD(); //goes high for the 9th clock
  401910:	4e06      	ldr	r6, [pc, #24]	; (40192c <i2c_read_byte_A_OLD+0xac>)
  401912:	47b0      	blx	r6
		delay_us(DELAY_A_OLD);
  401914:	20cb      	movs	r0, #203	; 0xcb
  401916:	4c06      	ldr	r4, [pc, #24]	; (401930 <i2c_read_byte_A_OLD+0xb0>)
  401918:	47a0      	blx	r4
		toggle_scl_A_OLD(); //end of byte with acknowledgment. 
  40191a:	47b0      	blx	r6
		write_sda_A_OLD(1);
  40191c:	2001      	movs	r0, #1
  40191e:	47a8      	blx	r5
		delay_us(DELAY_A_OLD);
  401920:	20cb      	movs	r0, #203	; 0xcb
  401922:	47a0      	blx	r4
  401924:	e7ed      	b.n	401902 <i2c_read_byte_A_OLD+0x82>
  401926:	bf00      	nop
  401928:	400e1200 	.word	0x400e1200
  40192c:	00401759 	.word	0x00401759
  401930:	2040008d 	.word	0x2040008d
  401934:	00401701 	.word	0x00401701

00401938 <read_bytes_A_OLD>:
{
  401938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40193c:	4607      	mov	r7, r0
  40193e:	460d      	mov	r5, r1
	if(!twi_start_cond_A_OLD())
  401940:	4b13      	ldr	r3, [pc, #76]	; (401990 <read_bytes_A_OLD+0x58>)
  401942:	4798      	blx	r3
  401944:	4606      	mov	r6, r0
  401946:	b910      	cbnz	r0, 40194e <read_bytes_A_OLD+0x16>
}	
  401948:	4630      	mov	r0, r6
  40194a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 	return i2c_write_byte_A_OLD(SLAVE_ADDRESS_A_OLD | read );
  40194e:	20ef      	movs	r0, #239	; 0xef
  401950:	4b10      	ldr	r3, [pc, #64]	; (401994 <read_bytes_A_OLD+0x5c>)
  401952:	4798      	blx	r3
	if(!send_slave_address_A_OLD(READ_A_OLD))
  401954:	4606      	mov	r6, r0
  401956:	2800      	cmp	r0, #0
  401958:	d0f6      	beq.n	401948 <read_bytes_A_OLD+0x10>
	for(index = 0; index < bytes; index++)
  40195a:	b1b5      	cbz	r5, 40198a <read_bytes_A_OLD+0x52>
  40195c:	2400      	movs	r4, #0
		success = i2c_read_byte_A_OLD(data, bytes, index);//db: always returns 1?
  40195e:	4e0e      	ldr	r6, [pc, #56]	; (401998 <read_bytes_A_OLD+0x60>)
  401960:	4622      	mov	r2, r4
  401962:	4629      	mov	r1, r5
  401964:	4638      	mov	r0, r7
  401966:	47b0      	blx	r6
		if(!success)
  401968:	4680      	mov	r8, r0
  40196a:	b118      	cbz	r0, 401974 <read_bytes_A_OLD+0x3c>
	for(index = 0; index < bytes; index++)
  40196c:	3401      	adds	r4, #1
  40196e:	b2e4      	uxtb	r4, r4
  401970:	42a5      	cmp	r5, r4
  401972:	d1f5      	bne.n	401960 <read_bytes_A_OLD+0x28>
	write_scl_A_OLD(1);
  401974:	2001      	movs	r0, #1
  401976:	4b09      	ldr	r3, [pc, #36]	; (40199c <read_bytes_A_OLD+0x64>)
  401978:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_A_OLD);
  40197a:	2066      	movs	r0, #102	; 0x66
  40197c:	4b08      	ldr	r3, [pc, #32]	; (4019a0 <read_bytes_A_OLD+0x68>)
  40197e:	4798      	blx	r3
	write_sda_A_OLD(1);
  401980:	2001      	movs	r0, #1
  401982:	4b08      	ldr	r3, [pc, #32]	; (4019a4 <read_bytes_A_OLD+0x6c>)
  401984:	4798      	blx	r3
	return success;
  401986:	4646      	mov	r6, r8
  401988:	e7de      	b.n	401948 <read_bytes_A_OLD+0x10>
	for(index = 0; index < bytes; index++)
  40198a:	f04f 0800 	mov.w	r8, #0
  40198e:	e7f1      	b.n	401974 <read_bytes_A_OLD+0x3c>
  401990:	00401731 	.word	0x00401731
  401994:	00401799 	.word	0x00401799
  401998:	00401881 	.word	0x00401881
  40199c:	004016c9 	.word	0x004016c9
  4019a0:	2040008d 	.word	0x2040008d
  4019a4:	00401701 	.word	0x00401701

004019a8 <write_scl_H>:
	
/*! \brief Writes SCL.
    \param x tristates SCL when x = 1, other wise 0
 */
void write_scl_H (char x)
{
  4019a8:	b508      	push	{r3, lr}
      if(x)
  4019aa:	b158      	cbz	r0, 4019c4 <write_scl_H+0x1c>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4019ac:	4b0a      	ldr	r3, [pc, #40]	; (4019d8 <write_scl_H+0x30>)
  4019ae:	f44f 7200 	mov.w	r2, #512	; 0x200
  4019b2:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4019b8:	461a      	mov	r2, r3
  4019ba:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
      {
//             DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_H, IOPORT_DIR_INPUT);
 	    //check clock stretching
 	    while(!READ_SCL_H());
  4019bc:	f413 7f00 	tst.w	r3, #512	; 0x200
  4019c0:	d0fb      	beq.n	4019ba <write_scl_H+0x12>
  4019c2:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4019c4:	4b04      	ldr	r3, [pc, #16]	; (4019d8 <write_scl_H+0x30>)
  4019c6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4019ca:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      else
      {
//             DDR_SCL |= (1 << SCL); //output 
//             PORT_SCL &= ~(1 << SCL); //set it low
			ioport_set_pin_dir(SCL_H, IOPORT_DIR_OUTPUT);
			pio_set_pin_low(SCL_H);
  4019d0:	2049      	movs	r0, #73	; 0x49
  4019d2:	4b02      	ldr	r3, [pc, #8]	; (4019dc <write_scl_H+0x34>)
  4019d4:	4798      	blx	r3
  4019d6:	bd08      	pop	{r3, pc}
  4019d8:	400e1200 	.word	0x400e1200
  4019dc:	004034e1 	.word	0x004034e1

004019e0 <write_sda_H>:

/*! \brief Writes SDA.
    \param x tristates SDA when x = 1, other wise 0
 */
void write_sda_H (char x)
{
  4019e0:	b508      	push	{r3, lr}
	if(x)
  4019e2:	b130      	cbz	r0, 4019f2 <write_sda_H+0x12>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4019e4:	4b08      	ldr	r3, [pc, #32]	; (401a08 <write_sda_H+0x28>)
  4019e6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4019ea:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  4019f0:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4019f2:	4b05      	ldr	r3, [pc, #20]	; (401a08 <write_sda_H+0x28>)
  4019f4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4019f8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	else
	{
		///            DDR_SDA |= (1 << SDA); //output
		///            PORT_SDA &= ~(1 << SDA); //set it low
		ioport_set_pin_dir(SDA_H, IOPORT_DIR_OUTPUT);
		pio_set_pin_low(SDA_H);
  4019fe:	2048      	movs	r0, #72	; 0x48
  401a00:	4b02      	ldr	r3, [pc, #8]	; (401a0c <write_sda_H+0x2c>)
  401a02:	4798      	blx	r3
  401a04:	bd08      	pop	{r3, pc}
  401a06:	bf00      	nop
  401a08:	400e1200 	.word	0x400e1200
  401a0c:	004034e1 	.word	0x004034e1

00401a10 <twi_start_cond_H>:
{
  401a10:	b510      	push	{r4, lr}
        write_sda_H(0);
  401a12:	2000      	movs	r0, #0
  401a14:	4b05      	ldr	r3, [pc, #20]	; (401a2c <twi_start_cond_H+0x1c>)
  401a16:	4798      	blx	r3
	delay_us(DELAY_H);
  401a18:	20cb      	movs	r0, #203	; 0xcb
  401a1a:	4c05      	ldr	r4, [pc, #20]	; (401a30 <twi_start_cond_H+0x20>)
  401a1c:	47a0      	blx	r4
	write_scl_H(0);	
  401a1e:	2000      	movs	r0, #0
  401a20:	4b04      	ldr	r3, [pc, #16]	; (401a34 <twi_start_cond_H+0x24>)
  401a22:	4798      	blx	r3
	delay_us(DELAY_H);
  401a24:	20cb      	movs	r0, #203	; 0xcb
  401a26:	47a0      	blx	r4
}
  401a28:	2001      	movs	r0, #1
  401a2a:	bd10      	pop	{r4, pc}
  401a2c:	004019e1 	.word	0x004019e1
  401a30:	2040008d 	.word	0x2040008d
  401a34:	004019a9 	.word	0x004019a9

00401a38 <toggle_scl_H>:
		
	}
}

void toggle_scl_H() 
{
  401a38:	b508      	push	{r3, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401a3a:	4b0d      	ldr	r3, [pc, #52]	; (401a70 <toggle_scl_H+0x38>)
  401a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(SCL_H))
  401a3e:	f413 7f00 	tst.w	r3, #512	; 0x200
  401a42:	d10b      	bne.n	401a5c <toggle_scl_H+0x24>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401a44:	4b0a      	ldr	r3, [pc, #40]	; (401a70 <toggle_scl_H+0x38>)
  401a46:	f44f 7200 	mov.w	r2, #512	; 0x200
  401a4a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401a50:	461a      	mov	r2, r3
  401a52:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	}
	else
	{
// 		DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_H, IOPORT_DIR_INPUT);
 		while(!READ_SCL_H());
  401a54:	f413 7f00 	tst.w	r3, #512	; 0x200
  401a58:	d0fb      	beq.n	401a52 <toggle_scl_H+0x1a>
  401a5a:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401a5c:	4b04      	ldr	r3, [pc, #16]	; (401a70 <toggle_scl_H+0x38>)
  401a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
  401a62:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pio_set_pin_low(SCL_H);
  401a68:	2049      	movs	r0, #73	; 0x49
  401a6a:	4b02      	ldr	r3, [pc, #8]	; (401a74 <toggle_scl_H+0x3c>)
  401a6c:	4798      	blx	r3
  401a6e:	bd08      	pop	{r3, pc}
  401a70:	400e1200 	.word	0x400e1200
  401a74:	004034e1 	.word	0x004034e1

00401a78 <i2c_write_byte_H>:
{
  401a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401a7c:	4604      	mov	r4, r0
  401a7e:	2708      	movs	r7, #8
            write_sda_H((byte & 0x80) != 0);
  401a80:	f8df 9070 	ldr.w	r9, [pc, #112]	; 401af4 <i2c_write_byte_H+0x7c>
            delay_us(DELAY_H);
  401a84:	26cb      	movs	r6, #203	; 0xcb
  401a86:	4d19      	ldr	r5, [pc, #100]	; (401aec <i2c_write_byte_H+0x74>)
            write_sda_H((byte & 0x80) != 0);
  401a88:	09e0      	lsrs	r0, r4, #7
  401a8a:	47c8      	blx	r9
            delay_us(DELAY_H);
  401a8c:	4630      	mov	r0, r6
  401a8e:	47a8      	blx	r5
            toggle_scl_H();//goes high
  401a90:	f8df 8064 	ldr.w	r8, [pc, #100]	; 401af8 <i2c_write_byte_H+0x80>
  401a94:	47c0      	blx	r8
            delay_us(DELAY_H);
  401a96:	4630      	mov	r0, r6
  401a98:	47a8      	blx	r5
            toggle_scl_H();//goes low
  401a9a:	47c0      	blx	r8
            byte <<= 1;
  401a9c:	0064      	lsls	r4, r4, #1
  401a9e:	b2e4      	uxtb	r4, r4
            delay_us(DELAY_H);
  401aa0:	4630      	mov	r0, r6
  401aa2:	47a8      	blx	r5
  401aa4:	1e78      	subs	r0, r7, #1
	for (bit = 0; bit < 8; bit++) 
  401aa6:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
  401aaa:	d1ed      	bne.n	401a88 <i2c_write_byte_H+0x10>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401aac:	4c10      	ldr	r4, [pc, #64]	; (401af0 <i2c_write_byte_H+0x78>)
  401aae:	f44f 7380 	mov.w	r3, #256	; 0x100
  401ab2:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ab4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	toggle_scl_H(); //goes high for the 9th clock
  401ab8:	47c0      	blx	r8
	delay_us(4);
  401aba:	20cb      	movs	r0, #203	; 0xcb
  401abc:	4b0b      	ldr	r3, [pc, #44]	; (401aec <i2c_write_byte_H+0x74>)
  401abe:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401ac0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if(READ_SDA_H())
  401ac2:	f413 7f80 	tst.w	r3, #256	; 0x100
  401ac6:	d002      	beq.n	401ace <i2c_write_byte_H+0x56>
}	
  401ac8:	4638      	mov	r0, r7
  401aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	delay_us(DELAY_H);
  401ace:	20cb      	movs	r0, #203	; 0xcb
  401ad0:	4c06      	ldr	r4, [pc, #24]	; (401aec <i2c_write_byte_H+0x74>)
  401ad2:	47a0      	blx	r4
	toggle_scl_H(); //end of byte with acknowledgment. 
  401ad4:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401ad6:	4b06      	ldr	r3, [pc, #24]	; (401af0 <i2c_write_byte_H+0x78>)
  401ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
  401adc:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ade:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	delay_us(DELAY_H); 
  401ae2:	20cb      	movs	r0, #203	; 0xcb
  401ae4:	47a0      	blx	r4
	return 1;
  401ae6:	2701      	movs	r7, #1
  401ae8:	e7ee      	b.n	401ac8 <i2c_write_byte_H+0x50>
  401aea:	bf00      	nop
  401aec:	2040008d 	.word	0x2040008d
  401af0:	400e1200 	.word	0x400e1200
  401af4:	004019e1 	.word	0x004019e1
  401af8:	00401a39 	.word	0x00401a39

00401afc <write_data_H>:
{
  401afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401afe:	4607      	mov	r7, r0
  401b00:	460e      	mov	r6, r1
	if(!twi_start_cond_H())
  401b02:	4b12      	ldr	r3, [pc, #72]	; (401b4c <write_data_H+0x50>)
  401b04:	4798      	blx	r3
  401b06:	4605      	mov	r5, r0
  401b08:	b908      	cbnz	r0, 401b0e <write_data_H+0x12>
}
  401b0a:	4628      	mov	r0, r5
  401b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 	return i2c_write_byte_H(SLAVE_ADDRESS_H | read );
  401b0e:	2080      	movs	r0, #128	; 0x80
  401b10:	4b0f      	ldr	r3, [pc, #60]	; (401b50 <write_data_H+0x54>)
  401b12:	4798      	blx	r3
	if(!send_slave_Address_H(WRITE_H))
  401b14:	4605      	mov	r5, r0
  401b16:	2800      	cmp	r0, #0
  401b18:	d0f7      	beq.n	401b0a <write_data_H+0xe>
	for(index = 0; index < bytes; index++)
  401b1a:	b1ae      	cbz	r6, 401b48 <write_data_H+0x4c>
  401b1c:	1e7c      	subs	r4, r7, #1
  401b1e:	3e01      	subs	r6, #1
  401b20:	fa57 f686 	uxtab	r6, r7, r6
		 ack = i2c_write_byte_H(indata[index]);
  401b24:	4f0a      	ldr	r7, [pc, #40]	; (401b50 <write_data_H+0x54>)
  401b26:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  401b2a:	47b8      	blx	r7
		 if(!ack)
  401b2c:	4605      	mov	r5, r0
  401b2e:	b108      	cbz	r0, 401b34 <write_data_H+0x38>
	for(index = 0; index < bytes; index++)
  401b30:	42b4      	cmp	r4, r6
  401b32:	d1f8      	bne.n	401b26 <write_data_H+0x2a>
	write_scl_H(1);
  401b34:	2001      	movs	r0, #1
  401b36:	4b07      	ldr	r3, [pc, #28]	; (401b54 <write_data_H+0x58>)
  401b38:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_H);
  401b3a:	2066      	movs	r0, #102	; 0x66
  401b3c:	4b06      	ldr	r3, [pc, #24]	; (401b58 <write_data_H+0x5c>)
  401b3e:	4798      	blx	r3
	write_sda_H(1);
  401b40:	2001      	movs	r0, #1
  401b42:	4b06      	ldr	r3, [pc, #24]	; (401b5c <write_data_H+0x60>)
  401b44:	4798      	blx	r3
	return ack;
  401b46:	e7e0      	b.n	401b0a <write_data_H+0xe>
	for(index = 0; index < bytes; index++)
  401b48:	2500      	movs	r5, #0
  401b4a:	e7f3      	b.n	401b34 <write_data_H+0x38>
  401b4c:	00401a11 	.word	0x00401a11
  401b50:	00401a79 	.word	0x00401a79
  401b54:	004019a9 	.word	0x004019a9
  401b58:	2040008d 	.word	0x2040008d
  401b5c:	004019e1 	.word	0x004019e1

00401b60 <i2c_read_byte_H>:
{
  401b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b64:	b083      	sub	sp, #12
  401b66:	4683      	mov	fp, r0
  401b68:	9101      	str	r1, [sp, #4]
  401b6a:	4692      	mov	sl, r2
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401b6c:	4b26      	ldr	r3, [pc, #152]	; (401c08 <i2c_read_byte_H+0xa8>)
  401b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401b72:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401b78:	2407      	movs	r4, #7
        unsigned char byte = 0;
  401b7a:	f04f 0800 	mov.w	r8, #0
             toggle_scl_H();//goes high
  401b7e:	4f23      	ldr	r7, [pc, #140]	; (401c0c <i2c_read_byte_H+0xac>)
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401b80:	4699      	mov	r9, r3
              delay_us(DELAY_H);
  401b82:	26cb      	movs	r6, #203	; 0xcb
  401b84:	e009      	b.n	401b9a <i2c_read_byte_H+0x3a>
  401b86:	4630      	mov	r0, r6
  401b88:	4d21      	ldr	r5, [pc, #132]	; (401c10 <i2c_read_byte_H+0xb0>)
  401b8a:	47a8      	blx	r5
              toggle_scl_H();//goes low
  401b8c:	47b8      	blx	r7
              delay_us(DELAY_H);
  401b8e:	4630      	mov	r0, r6
  401b90:	47a8      	blx	r5
  401b92:	3c01      	subs	r4, #1
	for (bit = 0; bit < 8; bit++) 
  401b94:	f1b4 3fff 	cmp.w	r4, #4294967295
  401b98:	d00c      	beq.n	401bb4 <i2c_read_byte_H+0x54>
             toggle_scl_H();//goes high
  401b9a:	47b8      	blx	r7
  401b9c:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
             if(READ_SDA_H())
  401ba0:	f413 7f80 	tst.w	r3, #256	; 0x100
  401ba4:	d0ef      	beq.n	401b86 <i2c_read_byte_H+0x26>
                     byte|= (1 << (7- bit));
  401ba6:	2301      	movs	r3, #1
  401ba8:	40a3      	lsls	r3, r4
  401baa:	ea43 0808 	orr.w	r8, r3, r8
  401bae:	fa5f f888 	uxtb.w	r8, r8
  401bb2:	e7e8      	b.n	401b86 <i2c_read_byte_H+0x26>
	rcvdata[index] = byte;
  401bb4:	f80b 800a 	strb.w	r8, [fp, sl]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401bb8:	4b13      	ldr	r3, [pc, #76]	; (401c08 <i2c_read_byte_H+0xa8>)
  401bba:	f44f 7280 	mov.w	r2, #256	; 0x100
  401bbe:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401bc0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if(index < (bytes-1))
  401bc4:	9b01      	ldr	r3, [sp, #4]
  401bc6:	3b01      	subs	r3, #1
  401bc8:	459a      	cmp	sl, r3
  401bca:	db0e      	blt.n	401bea <i2c_read_byte_H+0x8a>
		write_sda_H(1);
  401bcc:	2001      	movs	r0, #1
  401bce:	4b11      	ldr	r3, [pc, #68]	; (401c14 <i2c_read_byte_H+0xb4>)
  401bd0:	4798      	blx	r3
		toggle_scl_H(); //goes high for the 9th clock
  401bd2:	4d0e      	ldr	r5, [pc, #56]	; (401c0c <i2c_read_byte_H+0xac>)
  401bd4:	47a8      	blx	r5
		delay_us(DELAY_H);
  401bd6:	20cb      	movs	r0, #203	; 0xcb
  401bd8:	4c0d      	ldr	r4, [pc, #52]	; (401c10 <i2c_read_byte_H+0xb0>)
  401bda:	47a0      	blx	r4
		toggle_scl_H(); //end of byte with acknowledgment. 
  401bdc:	47a8      	blx	r5
		delay_us(DELAY_H);
  401bde:	20cb      	movs	r0, #203	; 0xcb
  401be0:	47a0      	blx	r4
}	
  401be2:	2001      	movs	r0, #1
  401be4:	b003      	add	sp, #12
  401be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		write_sda_H(0);
  401bea:	2000      	movs	r0, #0
  401bec:	4d09      	ldr	r5, [pc, #36]	; (401c14 <i2c_read_byte_H+0xb4>)
  401bee:	47a8      	blx	r5
		toggle_scl_H(); //goes high for the 9th clock
  401bf0:	4e06      	ldr	r6, [pc, #24]	; (401c0c <i2c_read_byte_H+0xac>)
  401bf2:	47b0      	blx	r6
		delay_us(DELAY_H);
  401bf4:	20cb      	movs	r0, #203	; 0xcb
  401bf6:	4c06      	ldr	r4, [pc, #24]	; (401c10 <i2c_read_byte_H+0xb0>)
  401bf8:	47a0      	blx	r4
		toggle_scl_H(); //end of byte with acknowledgment. 
  401bfa:	47b0      	blx	r6
		write_sda_H(1);
  401bfc:	2001      	movs	r0, #1
  401bfe:	47a8      	blx	r5
		delay_us(DELAY_H);
  401c00:	20cb      	movs	r0, #203	; 0xcb
  401c02:	47a0      	blx	r4
  401c04:	e7ed      	b.n	401be2 <i2c_read_byte_H+0x82>
  401c06:	bf00      	nop
  401c08:	400e1200 	.word	0x400e1200
  401c0c:	00401a39 	.word	0x00401a39
  401c10:	2040008d 	.word	0x2040008d
  401c14:	004019e1 	.word	0x004019e1

00401c18 <read_bytes_H>:
{
  401c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c1c:	4607      	mov	r7, r0
  401c1e:	460d      	mov	r5, r1
	if(!twi_start_cond_H())
  401c20:	4b13      	ldr	r3, [pc, #76]	; (401c70 <read_bytes_H+0x58>)
  401c22:	4798      	blx	r3
  401c24:	4606      	mov	r6, r0
  401c26:	b910      	cbnz	r0, 401c2e <read_bytes_H+0x16>
}	
  401c28:	4630      	mov	r0, r6
  401c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 	return i2c_write_byte_H(SLAVE_ADDRESS_H | read );
  401c2e:	2081      	movs	r0, #129	; 0x81
  401c30:	4b10      	ldr	r3, [pc, #64]	; (401c74 <read_bytes_H+0x5c>)
  401c32:	4798      	blx	r3
	if(!send_slave_Address_H(READ_H))
  401c34:	4606      	mov	r6, r0
  401c36:	2800      	cmp	r0, #0
  401c38:	d0f6      	beq.n	401c28 <read_bytes_H+0x10>
	for(index = 0; index < bytes; index++)
  401c3a:	b1b5      	cbz	r5, 401c6a <read_bytes_H+0x52>
  401c3c:	2400      	movs	r4, #0
		success = i2c_read_byte_H(data, bytes, index);//db: always returns 1?
  401c3e:	4e0e      	ldr	r6, [pc, #56]	; (401c78 <read_bytes_H+0x60>)
  401c40:	4622      	mov	r2, r4
  401c42:	4629      	mov	r1, r5
  401c44:	4638      	mov	r0, r7
  401c46:	47b0      	blx	r6
		if(!success)
  401c48:	4680      	mov	r8, r0
  401c4a:	b118      	cbz	r0, 401c54 <read_bytes_H+0x3c>
	for(index = 0; index < bytes; index++)
  401c4c:	3401      	adds	r4, #1
  401c4e:	b2e4      	uxtb	r4, r4
  401c50:	42a5      	cmp	r5, r4
  401c52:	d1f5      	bne.n	401c40 <read_bytes_H+0x28>
	write_scl_H(1);
  401c54:	2001      	movs	r0, #1
  401c56:	4b09      	ldr	r3, [pc, #36]	; (401c7c <read_bytes_H+0x64>)
  401c58:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_H);
  401c5a:	2066      	movs	r0, #102	; 0x66
  401c5c:	4b08      	ldr	r3, [pc, #32]	; (401c80 <read_bytes_H+0x68>)
  401c5e:	4798      	blx	r3
	write_sda_H(1);
  401c60:	2001      	movs	r0, #1
  401c62:	4b08      	ldr	r3, [pc, #32]	; (401c84 <read_bytes_H+0x6c>)
  401c64:	4798      	blx	r3
	return success;
  401c66:	4646      	mov	r6, r8
  401c68:	e7de      	b.n	401c28 <read_bytes_H+0x10>
	for(index = 0; index < bytes; index++)
  401c6a:	f04f 0800 	mov.w	r8, #0
  401c6e:	e7f1      	b.n	401c54 <read_bytes_H+0x3c>
  401c70:	00401a11 	.word	0x00401a11
  401c74:	00401a79 	.word	0x00401a79
  401c78:	00401b61 	.word	0x00401b61
  401c7c:	004019a9 	.word	0x004019a9
  401c80:	2040008d 	.word	0x2040008d
  401c84:	004019e1 	.word	0x004019e1

00401c88 <write_SCL_RTC>:
	
/*! \brief Writes SCL.
    \param x tristates SCL when x = 1, other wise 0
 */
void write_SCL_RTC (char x)
{
  401c88:	b508      	push	{r3, lr}
      if(x)
  401c8a:	b158      	cbz	r0, 401ca4 <write_SCL_RTC+0x1c>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401c8c:	4b0a      	ldr	r3, [pc, #40]	; (401cb8 <write_SCL_RTC+0x30>)
  401c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401c92:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401c98:	461a      	mov	r2, r3
  401c9a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
      {
//             DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_RTC, IOPORT_DIR_INPUT);
 	    //check clock stretching
 	    while(!READ_SCL_RTC());
  401c9c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401ca0:	d0fb      	beq.n	401c9a <write_SCL_RTC+0x12>
  401ca2:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401ca4:	4b04      	ldr	r3, [pc, #16]	; (401cb8 <write_SCL_RTC+0x30>)
  401ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401caa:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401cac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      else
      {
//             DDR_SCL |= (1 << SCL); //output 
//             PORT_SCL &= ~(1 << SCL); //set it low
			ioport_set_pin_dir(SCL_RTC, IOPORT_DIR_OUTPUT);
			pio_set_pin_low(SCL_RTC);
  401cb0:	204d      	movs	r0, #77	; 0x4d
  401cb2:	4b02      	ldr	r3, [pc, #8]	; (401cbc <write_SCL_RTC+0x34>)
  401cb4:	4798      	blx	r3
  401cb6:	bd08      	pop	{r3, pc}
  401cb8:	400e1200 	.word	0x400e1200
  401cbc:	004034e1 	.word	0x004034e1

00401cc0 <write_SDA_RTC>:

/*! \brief Writes SDA.
    \param x tristates SDA when x = 1, other wise 0
 */
void write_SDA_RTC (char x)
{
  401cc0:	b508      	push	{r3, lr}
	if(x)
  401cc2:	b130      	cbz	r0, 401cd2 <write_SDA_RTC+0x12>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401cc4:	4b08      	ldr	r3, [pc, #32]	; (401ce8 <write_SDA_RTC+0x28>)
  401cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401cca:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ccc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401cd0:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401cd2:	4b05      	ldr	r3, [pc, #20]	; (401ce8 <write_SDA_RTC+0x28>)
  401cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401cd8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401cda:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	else
	{
		///            DDR_SDA |= (1 << SDA); //output
		///            PORT_SDA &= ~(1 << SDA); //set it low
		ioport_set_pin_dir(SDA_RTC, IOPORT_DIR_OUTPUT);
		pio_set_pin_low(SDA_RTC);
  401cde:	204a      	movs	r0, #74	; 0x4a
  401ce0:	4b02      	ldr	r3, [pc, #8]	; (401cec <write_SDA_RTC+0x2c>)
  401ce2:	4798      	blx	r3
  401ce4:	bd08      	pop	{r3, pc}
  401ce6:	bf00      	nop
  401ce8:	400e1200 	.word	0x400e1200
  401cec:	004034e1 	.word	0x004034e1

00401cf0 <twi_init_RTC>:
{
  401cf0:	b508      	push	{r3, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401cf2:	4b09      	ldr	r3, [pc, #36]	; (401d18 <twi_init_RTC+0x28>)
  401cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401cf8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401cfa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401d02:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	write_SDA_RTC(1);
  401d08:	2001      	movs	r0, #1
  401d0a:	4b04      	ldr	r3, [pc, #16]	; (401d1c <twi_init_RTC+0x2c>)
  401d0c:	4798      	blx	r3
    write_SCL_RTC(1);
  401d0e:	2001      	movs	r0, #1
  401d10:	4b03      	ldr	r3, [pc, #12]	; (401d20 <twi_init_RTC+0x30>)
  401d12:	4798      	blx	r3
  401d14:	bd08      	pop	{r3, pc}
  401d16:	bf00      	nop
  401d18:	400e1200 	.word	0x400e1200
  401d1c:	00401cc1 	.word	0x00401cc1
  401d20:	00401c89 	.word	0x00401c89

00401d24 <twi_start_cond_RTC>:
{
  401d24:	b510      	push	{r4, lr}
    write_SDA_RTC(0);
  401d26:	2000      	movs	r0, #0
  401d28:	4b06      	ldr	r3, [pc, #24]	; (401d44 <twi_start_cond_RTC+0x20>)
  401d2a:	4798      	blx	r3
	delay_us(DELAY_RTC);
  401d2c:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401d30:	4c05      	ldr	r4, [pc, #20]	; (401d48 <twi_start_cond_RTC+0x24>)
  401d32:	47a0      	blx	r4
	write_SCL_RTC(0);	
  401d34:	2000      	movs	r0, #0
  401d36:	4b05      	ldr	r3, [pc, #20]	; (401d4c <twi_start_cond_RTC+0x28>)
  401d38:	4798      	blx	r3
	delay_us(DELAY_RTC);
  401d3a:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401d3e:	47a0      	blx	r4
}
  401d40:	2001      	movs	r0, #1
  401d42:	bd10      	pop	{r4, pc}
  401d44:	00401cc1 	.word	0x00401cc1
  401d48:	2040008d 	.word	0x2040008d
  401d4c:	00401c89 	.word	0x00401c89

00401d50 <toggle_SCL_RTC>:
		
	}
}

void toggle_SCL_RTC() 
{
  401d50:	b508      	push	{r3, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401d52:	4b0d      	ldr	r3, [pc, #52]	; (401d88 <toggle_SCL_RTC+0x38>)
  401d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(SCL_RTC))
  401d56:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401d5a:	d10b      	bne.n	401d74 <toggle_SCL_RTC+0x24>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401d5c:	4b0a      	ldr	r3, [pc, #40]	; (401d88 <toggle_SCL_RTC+0x38>)
  401d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401d62:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401d68:	461a      	mov	r2, r3
  401d6a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	}
	else
	{
// 		DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_RTC, IOPORT_DIR_INPUT);
 		while(!READ_SCL_RTC());
  401d6c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401d70:	d0fb      	beq.n	401d6a <toggle_SCL_RTC+0x1a>
  401d72:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401d74:	4b04      	ldr	r3, [pc, #16]	; (401d88 <toggle_SCL_RTC+0x38>)
  401d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401d7a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pio_set_pin_low(SCL_RTC);
  401d80:	204d      	movs	r0, #77	; 0x4d
  401d82:	4b02      	ldr	r3, [pc, #8]	; (401d8c <toggle_SCL_RTC+0x3c>)
  401d84:	4798      	blx	r3
  401d86:	bd08      	pop	{r3, pc}
  401d88:	400e1200 	.word	0x400e1200
  401d8c:	004034e1 	.word	0x004034e1

00401d90 <i2c_write_byte_RTC>:
{
  401d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401d94:	4604      	mov	r4, r0
  401d96:	2708      	movs	r7, #8
            write_SDA_RTC((byte & 0x80) != 0);
  401d98:	f8df 9078 	ldr.w	r9, [pc, #120]	; 401e14 <i2c_write_byte_RTC+0x84>
            delay_us(DELAY_RTC);
  401d9c:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
  401da0:	4d1a      	ldr	r5, [pc, #104]	; (401e0c <i2c_write_byte_RTC+0x7c>)
            write_SDA_RTC((byte & 0x80) != 0);
  401da2:	09e0      	lsrs	r0, r4, #7
  401da4:	47c8      	blx	r9
            delay_us(DELAY_RTC);
  401da6:	4630      	mov	r0, r6
  401da8:	47a8      	blx	r5
            toggle_SCL_RTC();//goes high
  401daa:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401e18 <i2c_write_byte_RTC+0x88>
  401dae:	47c0      	blx	r8
            delay_us(DELAY_RTC);
  401db0:	4630      	mov	r0, r6
  401db2:	47a8      	blx	r5
            toggle_SCL_RTC();//goes low
  401db4:	47c0      	blx	r8
            byte <<= 1;
  401db6:	0064      	lsls	r4, r4, #1
  401db8:	b2e4      	uxtb	r4, r4
            delay_us(DELAY_RTC);
  401dba:	4630      	mov	r0, r6
  401dbc:	47a8      	blx	r5
  401dbe:	1e78      	subs	r0, r7, #1
	for (bit = 0; bit < 8; bit++) 
  401dc0:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
  401dc4:	d1ed      	bne.n	401da2 <i2c_write_byte_RTC+0x12>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401dc6:	4c12      	ldr	r4, [pc, #72]	; (401e10 <i2c_write_byte_RTC+0x80>)
  401dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401dcc:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401dce:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	toggle_SCL_RTC(); //goes high for the 9th clock
  401dd2:	47c0      	blx	r8
	delay_us(16);
  401dd4:	f240 302a 	movw	r0, #810	; 0x32a
  401dd8:	4b0c      	ldr	r3, [pc, #48]	; (401e0c <i2c_write_byte_RTC+0x7c>)
  401dda:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401ddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if(READ_SDA_RTC())
  401dde:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401de2:	d002      	beq.n	401dea <i2c_write_byte_RTC+0x5a>
}	
  401de4:	4638      	mov	r0, r7
  401de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	delay_us(DELAY_RTC);
  401dea:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401dee:	4c07      	ldr	r4, [pc, #28]	; (401e0c <i2c_write_byte_RTC+0x7c>)
  401df0:	47a0      	blx	r4
	toggle_SCL_RTC(); //end of byte with acknowledgment. SCL LOW.
  401df2:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401df4:	4b06      	ldr	r3, [pc, #24]	; (401e10 <i2c_write_byte_RTC+0x80>)
  401df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401dfa:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401dfc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	delay_us(DELAY_RTC); 
  401e00:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401e04:	47a0      	blx	r4
	return 1;
  401e06:	2701      	movs	r7, #1
  401e08:	e7ec      	b.n	401de4 <i2c_write_byte_RTC+0x54>
  401e0a:	bf00      	nop
  401e0c:	2040008d 	.word	0x2040008d
  401e10:	400e1200 	.word	0x400e1200
  401e14:	00401cc1 	.word	0x00401cc1
  401e18:	00401d51 	.word	0x00401d51

00401e1c <write_data_RTC>:
{
  401e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e1e:	4607      	mov	r7, r0
  401e20:	460e      	mov	r6, r1
	if(!twi_start_cond_RTC())
  401e22:	4b13      	ldr	r3, [pc, #76]	; (401e70 <write_data_RTC+0x54>)
  401e24:	4798      	blx	r3
  401e26:	4605      	mov	r5, r0
  401e28:	b908      	cbnz	r0, 401e2e <write_data_RTC+0x12>
}
  401e2a:	4628      	mov	r0, r5
  401e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 	return i2c_write_byte_RTC(SLAVE_ADDRESS_RTC | read );
  401e2e:	20a2      	movs	r0, #162	; 0xa2
  401e30:	4b10      	ldr	r3, [pc, #64]	; (401e74 <write_data_RTC+0x58>)
  401e32:	4798      	blx	r3
	if(!send_slave_address_RTC(WRITE_RTC))
  401e34:	4605      	mov	r5, r0
  401e36:	2800      	cmp	r0, #0
  401e38:	d0f7      	beq.n	401e2a <write_data_RTC+0xe>
	for(index = 0; index < bytes; index++)
  401e3a:	b1b6      	cbz	r6, 401e6a <write_data_RTC+0x4e>
  401e3c:	1e7c      	subs	r4, r7, #1
  401e3e:	3e01      	subs	r6, #1
  401e40:	fa57 f686 	uxtab	r6, r7, r6
		 ack = i2c_write_byte_RTC(indata[index]);
  401e44:	4f0b      	ldr	r7, [pc, #44]	; (401e74 <write_data_RTC+0x58>)
  401e46:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  401e4a:	47b8      	blx	r7
		 if(!ack)
  401e4c:	4605      	mov	r5, r0
  401e4e:	b108      	cbz	r0, 401e54 <write_data_RTC+0x38>
	for(index = 0; index < bytes; index++)
  401e50:	42b4      	cmp	r4, r6
  401e52:	d1f8      	bne.n	401e46 <write_data_RTC+0x2a>
	write_SCL_RTC(1);
  401e54:	2001      	movs	r0, #1
  401e56:	4b08      	ldr	r3, [pc, #32]	; (401e78 <write_data_RTC+0x5c>)
  401e58:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_RTC);
  401e5a:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401e5e:	4b07      	ldr	r3, [pc, #28]	; (401e7c <write_data_RTC+0x60>)
  401e60:	4798      	blx	r3
	write_SDA_RTC(1);
  401e62:	2001      	movs	r0, #1
  401e64:	4b06      	ldr	r3, [pc, #24]	; (401e80 <write_data_RTC+0x64>)
  401e66:	4798      	blx	r3
	return ack;
  401e68:	e7df      	b.n	401e2a <write_data_RTC+0xe>
	for(index = 0; index < bytes; index++)
  401e6a:	2500      	movs	r5, #0
  401e6c:	e7f2      	b.n	401e54 <write_data_RTC+0x38>
  401e6e:	bf00      	nop
  401e70:	00401d25 	.word	0x00401d25
  401e74:	00401d91 	.word	0x00401d91
  401e78:	00401c89 	.word	0x00401c89
  401e7c:	2040008d 	.word	0x2040008d
  401e80:	00401cc1 	.word	0x00401cc1

00401e84 <i2c_read_byte_RTC>:
{
  401e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e88:	b083      	sub	sp, #12
  401e8a:	4683      	mov	fp, r0
  401e8c:	9101      	str	r1, [sp, #4]
  401e8e:	4692      	mov	sl, r2
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401e90:	4b28      	ldr	r3, [pc, #160]	; (401f34 <i2c_read_byte_RTC+0xb0>)
  401e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401e96:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401e98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401e9c:	2407      	movs	r4, #7
        unsigned char byte = 0;
  401e9e:	f04f 0800 	mov.w	r8, #0
             toggle_SCL_RTC();//goes high
  401ea2:	4f25      	ldr	r7, [pc, #148]	; (401f38 <i2c_read_byte_RTC+0xb4>)
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401ea4:	4699      	mov	r9, r3
              delay_us(DELAY_RTC);
  401ea6:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
  401eaa:	e009      	b.n	401ec0 <i2c_read_byte_RTC+0x3c>
  401eac:	4630      	mov	r0, r6
  401eae:	4d23      	ldr	r5, [pc, #140]	; (401f3c <i2c_read_byte_RTC+0xb8>)
  401eb0:	47a8      	blx	r5
              toggle_SCL_RTC();//goes low
  401eb2:	47b8      	blx	r7
              delay_us(DELAY_RTC);
  401eb4:	4630      	mov	r0, r6
  401eb6:	47a8      	blx	r5
  401eb8:	3c01      	subs	r4, #1
	for (bit = 0; bit < 8; bit++) 
  401eba:	f1b4 3fff 	cmp.w	r4, #4294967295
  401ebe:	d00c      	beq.n	401eda <i2c_read_byte_RTC+0x56>
             toggle_SCL_RTC();//goes high
  401ec0:	47b8      	blx	r7
  401ec2:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
             if(READ_SDA_RTC())
  401ec6:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401eca:	d0ef      	beq.n	401eac <i2c_read_byte_RTC+0x28>
                     byte|= (1 << (7- bit));
  401ecc:	2301      	movs	r3, #1
  401ece:	40a3      	lsls	r3, r4
  401ed0:	ea43 0808 	orr.w	r8, r3, r8
  401ed4:	fa5f f888 	uxtb.w	r8, r8
  401ed8:	e7e8      	b.n	401eac <i2c_read_byte_RTC+0x28>
	rcvdata[index] = byte;
  401eda:	f80b 800a 	strb.w	r8, [fp, sl]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401ede:	4b15      	ldr	r3, [pc, #84]	; (401f34 <i2c_read_byte_RTC+0xb0>)
  401ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401ee4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ee6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if(index < (bytes-1))
  401eea:	9b01      	ldr	r3, [sp, #4]
  401eec:	3b01      	subs	r3, #1
  401eee:	459a      	cmp	sl, r3
  401ef0:	db10      	blt.n	401f14 <i2c_read_byte_RTC+0x90>
		write_SDA_RTC(1);
  401ef2:	2001      	movs	r0, #1
  401ef4:	4b12      	ldr	r3, [pc, #72]	; (401f40 <i2c_read_byte_RTC+0xbc>)
  401ef6:	4798      	blx	r3
		toggle_SCL_RTC(); //goes high for the 9th clock
  401ef8:	4d0f      	ldr	r5, [pc, #60]	; (401f38 <i2c_read_byte_RTC+0xb4>)
  401efa:	47a8      	blx	r5
		delay_us(DELAY_RTC);
  401efc:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401f00:	4c0e      	ldr	r4, [pc, #56]	; (401f3c <i2c_read_byte_RTC+0xb8>)
  401f02:	47a0      	blx	r4
		toggle_SCL_RTC(); //end of byte with acknowledgment. 
  401f04:	47a8      	blx	r5
		delay_us(DELAY_RTC);
  401f06:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401f0a:	47a0      	blx	r4
}	
  401f0c:	2001      	movs	r0, #1
  401f0e:	b003      	add	sp, #12
  401f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		write_SDA_RTC(0);
  401f14:	2000      	movs	r0, #0
  401f16:	4d0a      	ldr	r5, [pc, #40]	; (401f40 <i2c_read_byte_RTC+0xbc>)
  401f18:	47a8      	blx	r5
		toggle_SCL_RTC(); //goes high for the 9th clock
  401f1a:	4e07      	ldr	r6, [pc, #28]	; (401f38 <i2c_read_byte_RTC+0xb4>)
  401f1c:	47b0      	blx	r6
		delay_us(DELAY_RTC);
  401f1e:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401f22:	4c06      	ldr	r4, [pc, #24]	; (401f3c <i2c_read_byte_RTC+0xb8>)
  401f24:	47a0      	blx	r4
		toggle_SCL_RTC(); //end of byte with acknowledgment. 
  401f26:	47b0      	blx	r6
		write_SDA_RTC(1);
  401f28:	2001      	movs	r0, #1
  401f2a:	47a8      	blx	r5
		delay_us(DELAY_RTC);
  401f2c:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401f30:	47a0      	blx	r4
  401f32:	e7eb      	b.n	401f0c <i2c_read_byte_RTC+0x88>
  401f34:	400e1200 	.word	0x400e1200
  401f38:	00401d51 	.word	0x00401d51
  401f3c:	2040008d 	.word	0x2040008d
  401f40:	00401cc1 	.word	0x00401cc1

00401f44 <read_bytes_RTC>:
{
  401f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f48:	4607      	mov	r7, r0
  401f4a:	460d      	mov	r5, r1
	if(!twi_start_cond_RTC())
  401f4c:	4b18      	ldr	r3, [pc, #96]	; (401fb0 <read_bytes_RTC+0x6c>)
  401f4e:	4798      	blx	r3
  401f50:	4606      	mov	r6, r0
  401f52:	b910      	cbnz	r0, 401f5a <read_bytes_RTC+0x16>
}	
  401f54:	4630      	mov	r0, r6
  401f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 	return i2c_write_byte_RTC(SLAVE_ADDRESS_RTC | read );
  401f5a:	20a3      	movs	r0, #163	; 0xa3
  401f5c:	4b15      	ldr	r3, [pc, #84]	; (401fb4 <read_bytes_RTC+0x70>)
  401f5e:	4798      	blx	r3
	if(!send_slave_address_RTC(READ_RTC))
  401f60:	4606      	mov	r6, r0
  401f62:	2800      	cmp	r0, #0
  401f64:	d0f6      	beq.n	401f54 <read_bytes_RTC+0x10>
	for(index = 0; index < bytes; index++)
  401f66:	b1fd      	cbz	r5, 401fa8 <read_bytes_RTC+0x64>
  401f68:	2400      	movs	r4, #0
		success = i2c_read_byte_RTC(data, bytes, index);//db: always returns 1?
  401f6a:	4e13      	ldr	r6, [pc, #76]	; (401fb8 <read_bytes_RTC+0x74>)
  401f6c:	4622      	mov	r2, r4
  401f6e:	4629      	mov	r1, r5
  401f70:	4638      	mov	r0, r7
  401f72:	47b0      	blx	r6
		if(!success)
  401f74:	4680      	mov	r8, r0
  401f76:	b118      	cbz	r0, 401f80 <read_bytes_RTC+0x3c>
	for(index = 0; index < bytes; index++)
  401f78:	3401      	adds	r4, #1
  401f7a:	b2e4      	uxtb	r4, r4
  401f7c:	42a5      	cmp	r5, r4
  401f7e:	d1f5      	bne.n	401f6c <read_bytes_RTC+0x28>
	delay_us(SCL_SDA_DELAY_RTC);
  401f80:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401f84:	4c0d      	ldr	r4, [pc, #52]	; (401fbc <read_bytes_RTC+0x78>)
  401f86:	47a0      	blx	r4
	write_SDA_RTC(0);
  401f88:	2000      	movs	r0, #0
  401f8a:	4d0d      	ldr	r5, [pc, #52]	; (401fc0 <read_bytes_RTC+0x7c>)
  401f8c:	47a8      	blx	r5
	delay_us(SCL_SDA_DELAY_RTC);
  401f8e:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401f92:	47a0      	blx	r4
	write_SCL_RTC(1);
  401f94:	2001      	movs	r0, #1
  401f96:	4b0b      	ldr	r3, [pc, #44]	; (401fc4 <read_bytes_RTC+0x80>)
  401f98:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_RTC);
  401f9a:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401f9e:	47a0      	blx	r4
	write_SDA_RTC(1);
  401fa0:	2001      	movs	r0, #1
  401fa2:	47a8      	blx	r5
	return success;
  401fa4:	4646      	mov	r6, r8
  401fa6:	e7d5      	b.n	401f54 <read_bytes_RTC+0x10>
	for(index = 0; index < bytes; index++)
  401fa8:	f04f 0800 	mov.w	r8, #0
  401fac:	e7e8      	b.n	401f80 <read_bytes_RTC+0x3c>
  401fae:	bf00      	nop
  401fb0:	00401d25 	.word	0x00401d25
  401fb4:	00401d91 	.word	0x00401d91
  401fb8:	00401e85 	.word	0x00401e85
  401fbc:	2040008d 	.word	0x2040008d
  401fc0:	00401cc1 	.word	0x00401cc1
  401fc4:	00401c89 	.word	0x00401c89

00401fc8 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401fc8:	2801      	cmp	r0, #1
  401fca:	d901      	bls.n	401fd0 <mem_test_unit_ready+0x8>
  401fcc:	2001      	movs	r0, #1
  401fce:	4770      	bx	lr
{
  401fd0:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401fd2:	0140      	lsls	r0, r0, #5
  401fd4:	4b01      	ldr	r3, [pc, #4]	; (401fdc <mem_test_unit_ready+0x14>)
  401fd6:	581b      	ldr	r3, [r3, r0]
  401fd8:	4798      	blx	r3
  401fda:	bd08      	pop	{r3, pc}
  401fdc:	0040faac 	.word	0x0040faac

00401fe0 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401fe0:	2801      	cmp	r0, #1
  401fe2:	d901      	bls.n	401fe8 <mem_read_capacity+0x8>
  401fe4:	2001      	movs	r0, #1
  401fe6:	4770      	bx	lr
{
  401fe8:	b508      	push	{r3, lr}
  401fea:	4603      	mov	r3, r0
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401fec:	4803      	ldr	r0, [pc, #12]	; (401ffc <mem_read_capacity+0x1c>)
  401fee:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401ff2:	6843      	ldr	r3, [r0, #4]
  401ff4:	4608      	mov	r0, r1
  401ff6:	4798      	blx	r3
  401ff8:	bd08      	pop	{r3, pc}
  401ffa:	bf00      	nop
  401ffc:	0040faac 	.word	0x0040faac

00402000 <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  402000:	2801      	cmp	r0, #1
  402002:	bf8c      	ite	hi
  402004:	2000      	movhi	r0, #0
  402006:	2001      	movls	r0, #1
  402008:	4770      	bx	lr
	...

0040200c <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  40200c:	2801      	cmp	r0, #1
  40200e:	d901      	bls.n	402014 <mem_wr_protect+0x8>
  402010:	2001      	movs	r0, #1
  402012:	4770      	bx	lr
{
  402014:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  402016:	4b03      	ldr	r3, [pc, #12]	; (402024 <mem_wr_protect+0x18>)
  402018:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  40201c:	68c3      	ldr	r3, [r0, #12]
  40201e:	4798      	blx	r3
  402020:	bd08      	pop	{r3, pc}
  402022:	bf00      	nop
  402024:	0040faac 	.word	0x0040faac

00402028 <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  402028:	2801      	cmp	r0, #1
  40202a:	d901      	bls.n	402030 <memory_2_ram+0x8>
  40202c:	2001      	movs	r0, #1
  40202e:	4770      	bx	lr
{
  402030:	b510      	push	{r4, lr}
  402032:	460c      	mov	r4, r1
  402034:	4603      	mov	r3, r0
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  402036:	4804      	ldr	r0, [pc, #16]	; (402048 <memory_2_ram+0x20>)
  402038:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  40203c:	6943      	ldr	r3, [r0, #20]
  40203e:	4611      	mov	r1, r2
  402040:	4620      	mov	r0, r4
  402042:	4798      	blx	r3
  402044:	bd10      	pop	{r4, pc}
  402046:	bf00      	nop
  402048:	0040faac 	.word	0x0040faac

0040204c <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  40204c:	2801      	cmp	r0, #1
  40204e:	d901      	bls.n	402054 <ram_2_memory+0x8>
  402050:	2001      	movs	r0, #1
  402052:	4770      	bx	lr
{
  402054:	b510      	push	{r4, lr}
  402056:	460c      	mov	r4, r1
  402058:	4603      	mov	r3, r0
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  40205a:	4804      	ldr	r0, [pc, #16]	; (40206c <ram_2_memory+0x20>)
  40205c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  402060:	6983      	ldr	r3, [r0, #24]
  402062:	4611      	mov	r1, r2
  402064:	4620      	mov	r0, r4
  402066:	4798      	blx	r3
  402068:	bd10      	pop	{r4, pc}
  40206a:	bf00      	nop
  40206c:	0040faac 	.word	0x0040faac

00402070 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  402070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  402074:	b980      	cbnz	r0, 402098 <_read+0x28>
  402076:	460c      	mov	r4, r1
  402078:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40207a:	2a00      	cmp	r2, #0
  40207c:	dd0f      	ble.n	40209e <_read+0x2e>
  40207e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  402080:	4e08      	ldr	r6, [pc, #32]	; (4020a4 <_read+0x34>)
  402082:	4d09      	ldr	r5, [pc, #36]	; (4020a8 <_read+0x38>)
  402084:	6830      	ldr	r0, [r6, #0]
  402086:	4621      	mov	r1, r4
  402088:	682b      	ldr	r3, [r5, #0]
  40208a:	4798      	blx	r3
		ptr++;
  40208c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40208e:	42bc      	cmp	r4, r7
  402090:	d1f8      	bne.n	402084 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  402092:	4640      	mov	r0, r8
  402094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  402098:	f04f 38ff 	mov.w	r8, #4294967295
  40209c:	e7f9      	b.n	402092 <_read+0x22>
	for (; len > 0; --len) {
  40209e:	4680      	mov	r8, r0
  4020a0:	e7f7      	b.n	402092 <_read+0x22>
  4020a2:	bf00      	nop
  4020a4:	20400f0c 	.word	0x20400f0c
  4020a8:	20400f04 	.word	0x20400f04

004020ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4020ac:	3801      	subs	r0, #1
  4020ae:	2802      	cmp	r0, #2
  4020b0:	d815      	bhi.n	4020de <_write+0x32>
{
  4020b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020b6:	460e      	mov	r6, r1
  4020b8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4020ba:	b19a      	cbz	r2, 4020e4 <_write+0x38>
  4020bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4020be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4020f8 <_write+0x4c>
  4020c2:	4f0c      	ldr	r7, [pc, #48]	; (4020f4 <_write+0x48>)
  4020c4:	f8d8 0000 	ldr.w	r0, [r8]
  4020c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4020cc:	683b      	ldr	r3, [r7, #0]
  4020ce:	4798      	blx	r3
  4020d0:	2800      	cmp	r0, #0
  4020d2:	db0a      	blt.n	4020ea <_write+0x3e>
  4020d4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4020d6:	3c01      	subs	r4, #1
  4020d8:	d1f4      	bne.n	4020c4 <_write+0x18>
  4020da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4020de:	f04f 30ff 	mov.w	r0, #4294967295
  4020e2:	4770      	bx	lr
	for (; len != 0; --len) {
  4020e4:	4610      	mov	r0, r2
  4020e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4020ea:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4020ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4020f2:	bf00      	nop
  4020f4:	20400f08 	.word	0x20400f08
  4020f8:	20400f0c 	.word	0x20400f0c

004020fc <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  4020fc:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  4020fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402102:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  402104:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  402106:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  402108:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  40210a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  40210c:	2680      	movs	r6, #128	; 0x80
  40210e:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  402110:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  402112:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  402114:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  402116:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  402118:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  40211a:	2200      	movs	r2, #0
  40211c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  40211e:	2205      	movs	r2, #5
  402120:	601a      	str	r2, [r3, #0]
}
  402122:	bc70      	pop	{r4, r5, r6}
  402124:	4770      	bx	lr
	...

00402128 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  402128:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  40212a:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  40212e:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  402130:	f411 7f80 	tst.w	r1, #256	; 0x100
  402134:	d004      	beq.n	402140 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  402136:	f411 6f00 	tst.w	r1, #2048	; 0x800
  40213a:	d00e      	beq.n	40215a <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  40213c:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  402140:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  402144:	bf18      	it	ne
  402146:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  40214a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40214e:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  402150:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  402152:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  402154:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  402158:	e00d      	b.n	402176 <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  40215a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  40215e:	bf14      	ite	ne
  402160:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  402164:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  402168:	e7ea      	b.n	402140 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  40216a:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  40216e:	d10c      	bne.n	40218a <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  402170:	f013 0f01 	tst.w	r3, #1
  402174:	d10d      	bne.n	402192 <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  402176:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  402178:	2a00      	cmp	r2, #0
  40217a:	d0f6      	beq.n	40216a <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  40217c:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  402180:	d0f6      	beq.n	402170 <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  402182:	4b10      	ldr	r3, [pc, #64]	; (4021c4 <hsmci_send_cmd_execute+0x9c>)
  402184:	4798      	blx	r3
				return false;
  402186:	2000      	movs	r0, #0
  402188:	bd08      	pop	{r3, pc}
				hsmci_reset();
  40218a:	4b0e      	ldr	r3, [pc, #56]	; (4021c4 <hsmci_send_cmd_execute+0x9c>)
  40218c:	4798      	blx	r3
				return false;
  40218e:	2000      	movs	r0, #0
  402190:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  402192:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  402196:	d103      	bne.n	4021a0 <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  402198:	2001      	movs	r0, #1
  40219a:	bd08      	pop	{r3, pc}
	return true;
  40219c:	2001      	movs	r0, #1
  40219e:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  4021a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4021a6:	f04f 32ff 	mov.w	r2, #4294967295
  4021aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  4021ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
  4021b2:	2b20      	cmp	r3, #32
  4021b4:	d0f2      	beq.n	40219c <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  4021b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  4021b8:	3a01      	subs	r2, #1
  4021ba:	d1f8      	bne.n	4021ae <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  4021bc:	4b01      	ldr	r3, [pc, #4]	; (4021c4 <hsmci_send_cmd_execute+0x9c>)
  4021be:	4798      	blx	r3
			return false;
  4021c0:	2000      	movs	r0, #0
  4021c2:	bd08      	pop	{r3, pc}
  4021c4:	004020fd 	.word	0x004020fd

004021c8 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  4021c8:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  4021ca:	2012      	movs	r0, #18
  4021cc:	4c08      	ldr	r4, [pc, #32]	; (4021f0 <hsmci_init+0x28>)
  4021ce:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  4021d0:	203a      	movs	r0, #58	; 0x3a
  4021d2:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  4021d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4021d8:	2272      	movs	r2, #114	; 0x72
  4021da:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  4021dc:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  4021de:	2211      	movs	r2, #17
  4021e0:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  4021e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  4021e6:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  4021e8:	2205      	movs	r2, #5
  4021ea:	601a      	str	r2, [r3, #0]
  4021ec:	bd10      	pop	{r4, pc}
  4021ee:	bf00      	nop
  4021f0:	00403819 	.word	0x00403819

004021f4 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  4021f4:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  4021f6:	bf0c      	ite	eq
  4021f8:	2004      	moveq	r0, #4
  4021fa:	2000      	movne	r0, #0
  4021fc:	4770      	bx	lr

004021fe <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  4021fe:	2001      	movs	r0, #1
  402200:	4770      	bx	lr
	...

00402204 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  402204:	b37b      	cbz	r3, 402266 <hsmci_select_device+0x62>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  402206:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40220a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  402210:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  402212:	4b2b      	ldr	r3, [pc, #172]	; (4022c0 <hsmci_select_device+0xbc>)
  402214:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  402218:	d337      	bcc.n	40228a <hsmci_select_device+0x86>
{
  40221a:	b410      	push	{r4}
		div = (mck / speed) - 2;
  40221c:	4829      	ldr	r0, [pc, #164]	; (4022c4 <hsmci_select_device+0xc0>)
  40221e:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  402222:	fb01 0113 	mls	r1, r1, r3, r0
  402226:	bb29      	cbnz	r1, 402274 <hsmci_select_device+0x70>
		div = (mck / speed) - 2;
  402228:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  40222a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40222e:	6848      	ldr	r0, [r1, #4]
  402230:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  402234:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  402236:	684c      	ldr	r4, [r1, #4]
  402238:	f3c3 0047 	ubfx	r0, r3, #1, #8
  40223c:	4320      	orrs	r0, r4
  40223e:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  402240:	f013 0f01 	tst.w	r3, #1
  402244:	d018      	beq.n	402278 <hsmci_select_device+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  402246:	684b      	ldr	r3, [r1, #4]
  402248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40224c:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  40224e:	2a04      	cmp	r2, #4
  402250:	d019      	beq.n	402286 <hsmci_select_device+0x82>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  402252:	2a08      	cmp	r2, #8
  402254:	bf0c      	ite	eq
  402256:	22c0      	moveq	r2, #192	; 0xc0
  402258:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  40225a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40225e:	60da      	str	r2, [r3, #12]
}
  402260:	f85d 4b04 	ldr.w	r4, [sp], #4
  402264:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  402266:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40226a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40226c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402270:	6543      	str	r3, [r0, #84]	; 0x54
  402272:	e7ce      	b.n	402212 <hsmci_select_device+0xe>
			div++;
  402274:	3b01      	subs	r3, #1
  402276:	e7d8      	b.n	40222a <hsmci_select_device+0x26>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  402278:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40227c:	684b      	ldr	r3, [r1, #4]
  40227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  402282:	604b      	str	r3, [r1, #4]
  402284:	e7e3      	b.n	40224e <hsmci_select_device+0x4a>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  402286:	2280      	movs	r2, #128	; 0x80
  402288:	e7e7      	b.n	40225a <hsmci_select_device+0x56>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  40228a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40228e:	6859      	ldr	r1, [r3, #4]
  402290:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  402294:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  402296:	6859      	ldr	r1, [r3, #4]
  402298:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  40229a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40229e:	684b      	ldr	r3, [r1, #4]
  4022a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4022a4:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  4022a6:	2a04      	cmp	r2, #4
  4022a8:	d007      	beq.n	4022ba <hsmci_select_device+0xb6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4022aa:	2a08      	cmp	r2, #8
  4022ac:	bf0c      	ite	eq
  4022ae:	22c0      	moveq	r2, #192	; 0xc0
  4022b0:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4022b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4022b6:	60da      	str	r2, [r3, #12]
  4022b8:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4022ba:	2280      	movs	r2, #128	; 0x80
  4022bc:	e7f9      	b.n	4022b2 <hsmci_select_device+0xae>
  4022be:	bf00      	nop
  4022c0:	08f0d17f 	.word	0x08f0d17f
  4022c4:	08f0d180 	.word	0x08f0d180

004022c8 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  4022c8:	4770      	bx	lr

004022ca <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4022ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4022ce:	685a      	ldr	r2, [r3, #4]
  4022d0:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4022d4:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  4022d6:	2200      	movs	r2, #0
  4022d8:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  4022da:	f44f 6210 	mov.w	r2, #2304	; 0x900
  4022de:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  4022e0:	461a      	mov	r2, r3
  4022e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
  4022e4:	f013 0f01 	tst.w	r3, #1
  4022e8:	d0fb      	beq.n	4022e2 <hsmci_send_clock+0x18>
}
  4022ea:	4770      	bx	lr

004022ec <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  4022ec:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4022ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4022f2:	685a      	ldr	r2, [r3, #4]
  4022f4:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4022f8:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  4022fa:	2400      	movs	r4, #0
  4022fc:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  4022fe:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  402300:	460a      	mov	r2, r1
  402302:	4601      	mov	r1, r0
  402304:	4620      	mov	r0, r4
  402306:	4b01      	ldr	r3, [pc, #4]	; (40230c <hsmci_send_cmd+0x20>)
  402308:	4798      	blx	r3
}
  40230a:	bd10      	pop	{r4, pc}
  40230c:	00402129 	.word	0x00402129

00402310 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  402310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402314:	6a18      	ldr	r0, [r3, #32]
}
  402316:	4770      	bx	lr

00402318 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  402318:	b410      	push	{r4}
  40231a:	1d03      	adds	r3, r0, #4
  40231c:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  40231e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  402322:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  402324:	0e11      	lsrs	r1, r2, #24
  402326:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  40232a:	0c11      	lsrs	r1, r2, #16
  40232c:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  402330:	0a11      	lsrs	r1, r2, #8
  402332:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  402336:	f803 2c01 	strb.w	r2, [r3, #-1]
  40233a:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  40233c:	4283      	cmp	r3, r0
  40233e:	d1f0      	bne.n	402322 <hsmci_get_response_128+0xa>
		response++;
	}
}
  402340:	f85d 4b04 	ldr.w	r4, [sp], #4
  402344:	4770      	bx	lr
	...

00402348 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  402348:	b570      	push	{r4, r5, r6, lr}
  40234a:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  40234e:	b384      	cbz	r4, 4023b2 <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  402350:	f44f 7580 	mov.w	r5, #256	; 0x100
  402354:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  402358:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  40235a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  40235e:	686c      	ldr	r4, [r5, #4]
  402360:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  402364:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  402366:	f012 0f03 	tst.w	r2, #3
  40236a:	d027      	beq.n	4023bc <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  40236c:	686c      	ldr	r4, [r5, #4]
  40236e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  402372:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  402374:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  402378:	2c00      	cmp	r4, #0
  40237a:	bf14      	ite	ne
  40237c:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  402380:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  402384:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  402388:	d11f      	bne.n	4023ca <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  40238a:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  40238e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  402392:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  402394:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  402398:	d12b      	bne.n	4023f2 <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  40239a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  40239e:	d12b      	bne.n	4023f8 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  4023a0:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  4023a4:	d118      	bne.n	4023d8 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  4023a6:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  4023aa:	bf18      	it	ne
  4023ac:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  4023b0:	e012      	b.n	4023d8 <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  4023b2:	2500      	movs	r5, #0
  4023b4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4023b8:	6525      	str	r5, [r4, #80]	; 0x50
  4023ba:	e7ce      	b.n	40235a <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4023bc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4023c0:	686c      	ldr	r4, [r5, #4]
  4023c2:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  4023c6:	606c      	str	r4, [r5, #4]
  4023c8:	e7d4      	b.n	402374 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  4023ca:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  4023ce:	f3c2 0508 	ubfx	r5, r2, #0, #9
  4023d2:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  4023d6:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  4023d8:	2600      	movs	r6, #0
  4023da:	4d09      	ldr	r5, [pc, #36]	; (402400 <hsmci_adtc_start+0xb8>)
  4023dc:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  4023de:	4d09      	ldr	r5, [pc, #36]	; (402404 <hsmci_adtc_start+0xbc>)
  4023e0:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  4023e2:	4a09      	ldr	r2, [pc, #36]	; (402408 <hsmci_adtc_start+0xc0>)
  4023e4:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  4023e6:	460a      	mov	r2, r1
  4023e8:	4601      	mov	r1, r0
  4023ea:	4620      	mov	r0, r4
  4023ec:	4b07      	ldr	r3, [pc, #28]	; (40240c <hsmci_adtc_start+0xc4>)
  4023ee:	4798      	blx	r3
}
  4023f0:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  4023f2:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  4023f6:	e7ef      	b.n	4023d8 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  4023f8:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4023fc:	e7ec      	b.n	4023d8 <hsmci_adtc_start+0x90>
  4023fe:	bf00      	nop
  402400:	20400b90 	.word	0x20400b90
  402404:	20400b8a 	.word	0x20400b8a
  402408:	20400b8c 	.word	0x20400b8c
  40240c:	00402129 	.word	0x00402129

00402410 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  402410:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  402412:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  402416:	4a16      	ldr	r2, [pc, #88]	; (402470 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  402418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40241a:	4213      	tst	r3, r2
  40241c:	d11d      	bne.n	40245a <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  40241e:	f013 0f02 	tst.w	r3, #2
  402422:	d0f9      	beq.n	402418 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  402424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40242a:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  40242c:	4a11      	ldr	r2, [pc, #68]	; (402474 <hsmci_read_word+0x64>)
  40242e:	6813      	ldr	r3, [r2, #0]
  402430:	3304      	adds	r3, #4
  402432:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  402434:	4a10      	ldr	r2, [pc, #64]	; (402478 <hsmci_read_word+0x68>)
  402436:	8811      	ldrh	r1, [r2, #0]
  402438:	4a10      	ldr	r2, [pc, #64]	; (40247c <hsmci_read_word+0x6c>)
  40243a:	8812      	ldrh	r2, [r2, #0]
  40243c:	fb02 f201 	mul.w	r2, r2, r1
  402440:	4293      	cmp	r3, r2
  402442:	d312      	bcc.n	40246a <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  402444:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  402448:	4a09      	ldr	r2, [pc, #36]	; (402470 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  40244a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40244c:	4213      	tst	r3, r2
  40244e:	d108      	bne.n	402462 <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  402450:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  402454:	d0f9      	beq.n	40244a <hsmci_read_word+0x3a>
	return true;
  402456:	2001      	movs	r0, #1
  402458:	bd08      	pop	{r3, pc}
			hsmci_reset();
  40245a:	4b09      	ldr	r3, [pc, #36]	; (402480 <hsmci_read_word+0x70>)
  40245c:	4798      	blx	r3
			return false;
  40245e:	2000      	movs	r0, #0
  402460:	bd08      	pop	{r3, pc}
			hsmci_reset();
  402462:	4b07      	ldr	r3, [pc, #28]	; (402480 <hsmci_read_word+0x70>)
  402464:	4798      	blx	r3
			return false;
  402466:	2000      	movs	r0, #0
  402468:	bd08      	pop	{r3, pc}
		return true;
  40246a:	2001      	movs	r0, #1
}
  40246c:	bd08      	pop	{r3, pc}
  40246e:	bf00      	nop
  402470:	c0600000 	.word	0xc0600000
  402474:	20400b90 	.word	0x20400b90
  402478:	20400b8a 	.word	0x20400b8a
  40247c:	20400b8c 	.word	0x20400b8c
  402480:	004020fd 	.word	0x004020fd

00402484 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  402484:	b530      	push	{r4, r5, lr}
  402486:	b089      	sub	sp, #36	; 0x24
  402488:	4605      	mov	r5, r0
  40248a:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  40248c:	2220      	movs	r2, #32
  40248e:	2100      	movs	r1, #0
  402490:	4668      	mov	r0, sp
  402492:	4b18      	ldr	r3, [pc, #96]	; (4024f4 <hsmci_start_read_blocks+0x70>)
  402494:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  402496:	2201      	movs	r2, #1
  402498:	4b17      	ldr	r3, [pc, #92]	; (4024f8 <hsmci_start_read_blocks+0x74>)
  40249a:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  40249c:	4b17      	ldr	r3, [pc, #92]	; (4024fc <hsmci_start_read_blocks+0x78>)
  40249e:	881b      	ldrh	r3, [r3, #0]
  4024a0:	fb04 f403 	mul.w	r4, r4, r3

	if((uint32_t)dest & 3) {
  4024a4:	f015 0f03 	tst.w	r5, #3
  4024a8:	d11a      	bne.n	4024e0 <hsmci_start_read_blocks+0x5c>
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4024aa:	4b15      	ldr	r3, [pc, #84]	; (402500 <hsmci_start_read_blocks+0x7c>)
  4024ac:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF1
						| XDMAC_CC_DIF_AHB_IF0
						| XDMAC_CC_SAM_FIXED_AM
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  4024ae:	08a3      	lsrs	r3, r4, #2
  4024b0:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4024b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4024b6:	6853      	ldr	r3, [r2, #4]
  4024b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4024bc:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  4024be:	4b11      	ldr	r3, [pc, #68]	; (402504 <hsmci_start_read_blocks+0x80>)
  4024c0:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  4024c2:	9502      	str	r5, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  4024c4:	4d0c      	ldr	r5, [pc, #48]	; (4024f8 <hsmci_start_read_blocks+0x74>)
  4024c6:	466a      	mov	r2, sp
  4024c8:	2100      	movs	r1, #0
  4024ca:	4628      	mov	r0, r5
  4024cc:	4b0e      	ldr	r3, [pc, #56]	; (402508 <hsmci_start_read_blocks+0x84>)
  4024ce:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4024d0:	2001      	movs	r0, #1
  4024d2:	61e8      	str	r0, [r5, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  4024d4:	4a0d      	ldr	r2, [pc, #52]	; (40250c <hsmci_start_read_blocks+0x88>)
  4024d6:	6813      	ldr	r3, [r2, #0]
  4024d8:	441c      	add	r4, r3
  4024da:	6014      	str	r4, [r2, #0]
	return true;
}
  4024dc:	b009      	add	sp, #36	; 0x24
  4024de:	bd30      	pop	{r4, r5, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4024e0:	4b0b      	ldr	r3, [pc, #44]	; (402510 <hsmci_start_read_blocks+0x8c>)
  4024e2:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  4024e4:	9400      	str	r4, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4024e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4024ea:	6853      	ldr	r3, [r2, #4]
  4024ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4024f0:	6053      	str	r3, [r2, #4]
  4024f2:	e7e4      	b.n	4024be <hsmci_start_read_blocks+0x3a>
  4024f4:	0040c9f1 	.word	0x0040c9f1
  4024f8:	40078000 	.word	0x40078000
  4024fc:	20400b8a 	.word	0x20400b8a
  402500:	00043001 	.word	0x00043001
  402504:	40000200 	.word	0x40000200
  402508:	00404e1d 	.word	0x00404e1d
  40250c:	20400b90 	.word	0x20400b90
  402510:	00042001 	.word	0x00042001

00402514 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  402514:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  402516:	4b12      	ldr	r3, [pc, #72]	; (402560 <hsmci_wait_end_of_read_blocks+0x4c>)
  402518:	881b      	ldrh	r3, [r3, #0]
  40251a:	4a12      	ldr	r2, [pc, #72]	; (402564 <hsmci_wait_end_of_read_blocks+0x50>)
  40251c:	8812      	ldrh	r2, [r2, #0]
  40251e:	fb02 f203 	mul.w	r2, r2, r3
  402522:	4b11      	ldr	r3, [pc, #68]	; (402568 <hsmci_wait_end_of_read_blocks+0x54>)
  402524:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  402526:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40252a:	4910      	ldr	r1, [pc, #64]	; (40256c <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  40252c:	4e10      	ldr	r6, [pc, #64]	; (402570 <hsmci_wait_end_of_read_blocks+0x5c>)
  40252e:	e009      	b.n	402544 <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  402530:	4b10      	ldr	r3, [pc, #64]	; (402574 <hsmci_wait_end_of_read_blocks+0x60>)
  402532:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  402534:	2201      	movs	r2, #1
  402536:	4b0e      	ldr	r3, [pc, #56]	; (402570 <hsmci_wait_end_of_read_blocks+0x5c>)
  402538:	621a      	str	r2, [r3, #32]
			return false;
  40253a:	2000      	movs	r0, #0
  40253c:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  40253e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  402542:	d10a      	bne.n	40255a <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  402544:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  402546:	420b      	tst	r3, r1
  402548:	d1f2      	bne.n	402530 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40254a:	42a2      	cmp	r2, r4
  40254c:	d9f7      	bls.n	40253e <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  40254e:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  402550:	f015 0f01 	tst.w	r5, #1
  402554:	d0f3      	beq.n	40253e <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  402556:	2001      	movs	r0, #1
	return true;
}
  402558:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  40255a:	2001      	movs	r0, #1
  40255c:	bd70      	pop	{r4, r5, r6, pc}
  40255e:	bf00      	nop
  402560:	20400b8a 	.word	0x20400b8a
  402564:	20400b8c 	.word	0x20400b8c
  402568:	20400b90 	.word	0x20400b90
  40256c:	c0600000 	.word	0xc0600000
  402570:	40078000 	.word	0x40078000
  402574:	004020fd 	.word	0x004020fd

00402578 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  402578:	b530      	push	{r4, r5, lr}
  40257a:	b089      	sub	sp, #36	; 0x24
  40257c:	4605      	mov	r5, r0
  40257e:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  402580:	2220      	movs	r2, #32
  402582:	2100      	movs	r1, #0
  402584:	4668      	mov	r0, sp
  402586:	4b18      	ldr	r3, [pc, #96]	; (4025e8 <hsmci_start_write_blocks+0x70>)
  402588:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40258a:	2201      	movs	r2, #1
  40258c:	4b17      	ldr	r3, [pc, #92]	; (4025ec <hsmci_start_write_blocks+0x74>)
  40258e:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  402590:	4b17      	ldr	r3, [pc, #92]	; (4025f0 <hsmci_start_write_blocks+0x78>)
  402592:	881b      	ldrh	r3, [r3, #0]
  402594:	fb04 f403 	mul.w	r4, r4, r3

	if((uint32_t)src & 3) {
  402598:	f015 0f03 	tst.w	r5, #3
  40259c:	d11a      	bne.n	4025d4 <hsmci_start_write_blocks+0x5c>
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40259e:	4b15      	ldr	r3, [pc, #84]	; (4025f4 <hsmci_start_write_blocks+0x7c>)
  4025a0:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF0
						| XDMAC_CC_DIF_AHB_IF1
						| XDMAC_CC_SAM_INCREMENTED_AM
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  4025a2:	08a3      	lsrs	r3, r4, #2
  4025a4:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4025a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4025aa:	6853      	ldr	r3, [r2, #4]
  4025ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4025b0:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)src;
  4025b2:	9501      	str	r5, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  4025b4:	4b10      	ldr	r3, [pc, #64]	; (4025f8 <hsmci_start_write_blocks+0x80>)
  4025b6:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  4025b8:	4d0c      	ldr	r5, [pc, #48]	; (4025ec <hsmci_start_write_blocks+0x74>)
  4025ba:	466a      	mov	r2, sp
  4025bc:	2100      	movs	r1, #0
  4025be:	4628      	mov	r0, r5
  4025c0:	4b0e      	ldr	r3, [pc, #56]	; (4025fc <hsmci_start_write_blocks+0x84>)
  4025c2:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4025c4:	2001      	movs	r0, #1
  4025c6:	61e8      	str	r0, [r5, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  4025c8:	4a0d      	ldr	r2, [pc, #52]	; (402600 <hsmci_start_write_blocks+0x88>)
  4025ca:	6813      	ldr	r3, [r2, #0]
  4025cc:	441c      	add	r4, r3
  4025ce:	6014      	str	r4, [r2, #0]
	return true;
}
  4025d0:	b009      	add	sp, #36	; 0x24
  4025d2:	bd30      	pop	{r4, r5, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4025d4:	4b0b      	ldr	r3, [pc, #44]	; (402604 <hsmci_start_write_blocks+0x8c>)
  4025d6:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  4025d8:	9400      	str	r4, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4025da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4025de:	6853      	ldr	r3, [r2, #4]
  4025e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4025e4:	6053      	str	r3, [r2, #4]
  4025e6:	e7e4      	b.n	4025b2 <hsmci_start_write_blocks+0x3a>
  4025e8:	0040c9f1 	.word	0x0040c9f1
  4025ec:	40078000 	.word	0x40078000
  4025f0:	20400b8a 	.word	0x20400b8a
  4025f4:	00015011 	.word	0x00015011
  4025f8:	40000200 	.word	0x40000200
  4025fc:	00404e1d 	.word	0x00404e1d
  402600:	20400b90 	.word	0x20400b90
  402604:	00014011 	.word	0x00014011

00402608 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  402608:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40260a:	4b12      	ldr	r3, [pc, #72]	; (402654 <hsmci_wait_end_of_write_blocks+0x4c>)
  40260c:	881b      	ldrh	r3, [r3, #0]
  40260e:	4a12      	ldr	r2, [pc, #72]	; (402658 <hsmci_wait_end_of_write_blocks+0x50>)
  402610:	8812      	ldrh	r2, [r2, #0]
  402612:	fb02 f203 	mul.w	r2, r2, r3
  402616:	4b11      	ldr	r3, [pc, #68]	; (40265c <hsmci_wait_end_of_write_blocks+0x54>)
  402618:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  40261a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40261e:	4910      	ldr	r1, [pc, #64]	; (402660 <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  402620:	4e10      	ldr	r6, [pc, #64]	; (402664 <hsmci_wait_end_of_write_blocks+0x5c>)
  402622:	e009      	b.n	402638 <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  402624:	4b10      	ldr	r3, [pc, #64]	; (402668 <hsmci_wait_end_of_write_blocks+0x60>)
  402626:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  402628:	2201      	movs	r2, #1
  40262a:	4b0e      	ldr	r3, [pc, #56]	; (402664 <hsmci_wait_end_of_write_blocks+0x5c>)
  40262c:	621a      	str	r2, [r3, #32]
			return false;
  40262e:	2000      	movs	r0, #0
  402630:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  402632:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  402636:	d10a      	bne.n	40264e <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  402638:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40263a:	420b      	tst	r3, r1
  40263c:	d1f2      	bne.n	402624 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40263e:	42a2      	cmp	r2, r4
  402640:	d9f7      	bls.n	402632 <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  402642:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  402644:	f015 0f01 	tst.w	r5, #1
  402648:	d0f3      	beq.n	402632 <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  40264a:	2001      	movs	r0, #1

	return true;
}
  40264c:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  40264e:	2001      	movs	r0, #1
  402650:	bd70      	pop	{r4, r5, r6, pc}
  402652:	bf00      	nop
  402654:	20400b8a 	.word	0x20400b8a
  402658:	20400b8c 	.word	0x20400b8c
  40265c:	20400b90 	.word	0x20400b90
  402660:	c0600000 	.word	0xc0600000
  402664:	40078000 	.word	0x40078000
  402668:	004020fd 	.word	0x004020fd

0040266c <isi_init>:
 *
 * \param p_isi  Pointer to a ISI instance.
 * \param isi_cfg   Configuration for the ISI
 */
void isi_init(Isi *p_isi, struct isi_config_t *isi_cfg)
{
  40266c:	b410      	push	{r4}
	uint32_t reg = 0;

	if(isi_cfg->hpol) {
  40266e:	780b      	ldrb	r3, [r1, #0]
		reg |= ISI_CFG1_HSYNC_POL;
  402670:	2b00      	cmp	r3, #0
  402672:	bf0c      	ite	eq
  402674:	2200      	moveq	r2, #0
  402676:	2204      	movne	r2, #4
	}
	if(isi_cfg->vpol) {
  402678:	784b      	ldrb	r3, [r1, #1]
  40267a:	b10b      	cbz	r3, 402680 <isi_init+0x14>
		reg |= ISI_CFG1_VSYNC_POL;
  40267c:	f042 0208 	orr.w	r2, r2, #8
	}
	if(isi_cfg->pck_pol) {
  402680:	788b      	ldrb	r3, [r1, #2]
  402682:	b10b      	cbz	r3, 402688 <isi_init+0x1c>
		reg |= ISI_CFG1_PIXCLK_POL;
  402684:	f042 0210 	orr.w	r2, r2, #16
	}
	if(isi_cfg->emb_sync) {
  402688:	78cb      	ldrb	r3, [r1, #3]
  40268a:	b10b      	cbz	r3, 402690 <isi_init+0x24>
		reg |= ISI_CFG1_EMB_SYNC;
  40268c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	}
	if(isi_cfg->crc_sync) {
  402690:	790b      	ldrb	r3, [r1, #4]
  402692:	b10b      	cbz	r3, 402698 <isi_init+0x2c>
		reg |= ISI_CFG1_CRC_SYNC;
  402694:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  402698:	794b      	ldrb	r3, [r1, #5]
  40269a:	035b      	lsls	r3, r3, #13
  40269c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
  4026a0:	798c      	ldrb	r4, [r1, #6]
  4026a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		| ISI_CFG1_SFD(isi_cfg->sfd);
  4026a6:	79cc      	ldrb	r4, [r1, #7]
  4026a8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  4026ac:	4313      	orrs	r3, r2
	p_isi->ISI_CFG1 = reg;
  4026ae:	6003      	str	r3, [r0, #0]
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4026b0:	4b18      	ldr	r3, [pc, #96]	; (402714 <isi_init+0xa8>)
  4026b2:	685a      	ldr	r2, [r3, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4026b4:	685b      	ldr	r3, [r3, #4]
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4026b6:	0ed2      	lsrs	r2, r2, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4026b8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
  4026bc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28

	reg = _isi_get_CFG2_workaround();
	switch(isi_cfg->image_fmt) {
  4026c0:	7a0a      	ldrb	r2, [r1, #8]
  4026c2:	2a04      	cmp	r2, #4
  4026c4:	d806      	bhi.n	4026d4 <isi_init+0x68>
  4026c6:	e8df f002 	tbb	[pc, r2]
  4026ca:	1403      	.short	0x1403
  4026cc:	1c17      	.short	0x1c17
  4026ce:	1f          	.byte	0x1f
  4026cf:	00          	.byte	0x00
		case ISI_INPUT_YUV:
			reg &= ~ISI_CFG2_COL_SPACE;
  4026d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  4026d4:	68ca      	ldr	r2, [r1, #12]
  4026d6:	1e54      	subs	r4, r2, #1
  4026d8:	4a0f      	ldr	r2, [pc, #60]	; (402718 <isi_init+0xac>)
  4026da:	ea02 4204 	and.w	r2, r2, r4, lsl #16
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  4026de:	6909      	ldr	r1, [r1, #16]
  4026e0:	3901      	subs	r1, #1
  4026e2:	f3c1 010a 	ubfx	r1, r1, #0, #11
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  4026e6:	430a      	orrs	r2, r1
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  4026e8:	4313      	orrs	r3, r2
	p_isi->ISI_CFG2 = reg;
  4026ea:	6043      	str	r3, [r0, #4]
}
  4026ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4026f0:	4770      	bx	lr
			reg |= ISI_CFG2_RGB_MODE;
  4026f2:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
			break;
  4026f6:	e7ed      	b.n	4026d4 <isi_init+0x68>
			reg &= ~ISI_CFG2_RGB_MODE;
  4026f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4026fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			break;
  402700:	e7e8      	b.n	4026d4 <isi_init+0x68>
			reg |= ISI_CFG2_GRAYSCALE;
  402702:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
			break;
  402706:	e7e5      	b.n	4026d4 <isi_init+0x68>
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
  402708:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
  40270c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
			break;
  402710:	e7e0      	b.n	4026d4 <isi_init+0x68>
  402712:	bf00      	nop
  402714:	4004c000 	.word	0x4004c000
  402718:	07ff0000 	.word	0x07ff0000

0040271c <isi_set_dma_codec_path>:
 * \param frame_buf_start_addr  DMA codec base address.
 */
void isi_set_dma_codec_path(Isi *p_isi, uint8_t full_mode, uint8_t discr,
		uint32_t base_buf_desc, uint32_t dma_ctrl, uint32_t frame_buf_start_addr)
{
	if(full_mode) {
  40271c:	b171      	cbz	r1, 40273c <isi_set_dma_codec_path+0x20>
		p_isi->ISI_CFG1 |= ISI_CFG1_FULL;
  40271e:	6801      	ldr	r1, [r0, #0]
  402720:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  402724:	6001      	str	r1, [r0, #0]
	} else {
		p_isi->ISI_CFG1 &= ~ISI_CFG1_FULL;
	}
	if(discr) {
  402726:	b972      	cbnz	r2, 402746 <isi_set_dma_codec_path+0x2a>
		p_isi->ISI_CFG1 |= ISI_CFG1_DISCR;
	} else {
		p_isi->ISI_CFG1 &= ~ISI_CFG1_DISCR;
  402728:	6802      	ldr	r2, [r0, #0]
  40272a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40272e:	6002      	str	r2, [r0, #0]
	}

	p_isi->ISI_DMA_C_DSCR = base_buf_desc;
  402730:	6583      	str	r3, [r0, #88]	; 0x58
	p_isi->ISI_DMA_C_CTRL = dma_ctrl;
  402732:	9b00      	ldr	r3, [sp, #0]
  402734:	6543      	str	r3, [r0, #84]	; 0x54
	p_isi->ISI_DMA_C_ADDR = frame_buf_start_addr;
  402736:	9b01      	ldr	r3, [sp, #4]
  402738:	6503      	str	r3, [r0, #80]	; 0x50
  40273a:	4770      	bx	lr
		p_isi->ISI_CFG1 &= ~ISI_CFG1_FULL;
  40273c:	6801      	ldr	r1, [r0, #0]
  40273e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  402742:	6001      	str	r1, [r0, #0]
  402744:	e7ef      	b.n	402726 <isi_set_dma_codec_path+0xa>
		p_isi->ISI_CFG1 |= ISI_CFG1_DISCR;
  402746:	6802      	ldr	r2, [r0, #0]
  402748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40274c:	6002      	str	r2, [r0, #0]
  40274e:	e7ef      	b.n	402730 <isi_set_dma_codec_path+0x14>

00402750 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  402750:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  402752:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  402754:	6884      	ldr	r4, [r0, #8]
  402756:	42a5      	cmp	r5, r4
  402758:	d003      	beq.n	402762 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  40275a:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40275c:	6884      	ldr	r4, [r0, #8]
  40275e:	42ac      	cmp	r4, r5
  402760:	d1fb      	bne.n	40275a <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  402762:	b161      	cbz	r1, 40277e <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402764:	f3c4 5001 	ubfx	r0, r4, #20, #2
  402768:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40276c:	f3c4 4003 	ubfx	r0, r4, #16, #4
  402770:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  402774:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  402778:	bf18      	it	ne
  40277a:	300c      	addne	r0, #12
  40277c:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  40277e:	b142      	cbz	r2, 402792 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  402780:	f3c4 3102 	ubfx	r1, r4, #12, #3
  402784:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  402788:	f3c4 2003 	ubfx	r0, r4, #8, #4
  40278c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  402790:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  402792:	b143      	cbz	r3, 4027a6 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402794:	f3c4 1202 	ubfx	r2, r4, #4, #3
  402798:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40279c:	f004 040f 	and.w	r4, r4, #15
  4027a0:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  4027a4:	601c      	str	r4, [r3, #0]
	}
}
  4027a6:	bc30      	pop	{r4, r5}
  4027a8:	4770      	bx	lr
	...

004027ac <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4027ac:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4027ae:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  4027b0:	f014 0f01 	tst.w	r4, #1
  4027b4:	d005      	beq.n	4027c2 <rtc_set_time+0x16>
  4027b6:	290c      	cmp	r1, #12
  4027b8:	d903      	bls.n	4027c2 <rtc_set_time+0x16>
			ul_hour -= 12;
  4027ba:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  4027bc:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  4027c0:	e000      	b.n	4027c4 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4027c2:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4027c4:	4c1c      	ldr	r4, [pc, #112]	; (402838 <rtc_set_time+0x8c>)
  4027c6:	fba4 5603 	umull	r5, r6, r4, r3
  4027ca:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4027cc:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4027d0:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4027d4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4027d8:	fba4 6502 	umull	r6, r5, r4, r2
  4027dc:	08ed      	lsrs	r5, r5, #3
  4027de:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4027e2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4027e6:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  4027ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  4027ee:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4027f0:	fba4 4201 	umull	r4, r2, r4, r1
  4027f4:	08d2      	lsrs	r2, r2, #3
  4027f6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4027fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4027fe:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  402802:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  402806:	6983      	ldr	r3, [r0, #24]
  402808:	f013 0f04 	tst.w	r3, #4
  40280c:	d0fb      	beq.n	402806 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  40280e:	6803      	ldr	r3, [r0, #0]
  402810:	f043 0301 	orr.w	r3, r3, #1
  402814:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  402816:	6983      	ldr	r3, [r0, #24]
  402818:	f013 0f01 	tst.w	r3, #1
  40281c:	d0fb      	beq.n	402816 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40281e:	2301      	movs	r3, #1
  402820:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  402822:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  402824:	6803      	ldr	r3, [r0, #0]
  402826:	f023 0301 	bic.w	r3, r3, #1
  40282a:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  40282c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40282e:	f000 0001 	and.w	r0, r0, #1
  402832:	bcf0      	pop	{r4, r5, r6, r7}
  402834:	4770      	bx	lr
  402836:	bf00      	nop
  402838:	cccccccd 	.word	0xcccccccd

0040283c <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  40283c:	b4f0      	push	{r4, r5, r6, r7}
  40283e:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  402840:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  402842:	68c4      	ldr	r4, [r0, #12]
  402844:	42a5      	cmp	r5, r4
  402846:	d003      	beq.n	402850 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  402848:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40284a:	68c4      	ldr	r4, [r0, #12]
  40284c:	42ac      	cmp	r4, r5
  40284e:	d1fb      	bne.n	402848 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  402850:	b199      	cbz	r1, 40287a <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402852:	f3c4 3003 	ubfx	r0, r4, #12, #4
  402856:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40285a:	f3c4 2703 	ubfx	r7, r4, #8, #4
  40285e:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402862:	f3c4 1002 	ubfx	r0, r4, #4, #3
  402866:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40286a:	f004 000f 	and.w	r0, r4, #15
  40286e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402872:	2564      	movs	r5, #100	; 0x64
  402874:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  402878:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  40287a:	b142      	cbz	r2, 40288e <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40287c:	f3c4 5000 	ubfx	r0, r4, #20, #1
  402880:	0081      	lsls	r1, r0, #2
  402882:	4408      	add	r0, r1
  402884:	f3c4 4103 	ubfx	r1, r4, #16, #4
  402888:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  40288c:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  40288e:	b143      	cbz	r3, 4028a2 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402890:	f3c4 7201 	ubfx	r2, r4, #28, #2
  402894:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402898:	f3c4 6103 	ubfx	r1, r4, #24, #4
  40289c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4028a0:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4028a2:	b116      	cbz	r6, 4028aa <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4028a4:	f3c4 5442 	ubfx	r4, r4, #21, #3
  4028a8:	6034      	str	r4, [r6, #0]
	}
}
  4028aa:	bcf0      	pop	{r4, r5, r6, r7}
  4028ac:	4770      	bx	lr
	...

004028b0 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4028b0:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4028b2:	4d2a      	ldr	r5, [pc, #168]	; (40295c <rtc_set_date+0xac>)
  4028b4:	fba5 4603 	umull	r4, r6, r5, r3
  4028b8:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4028ba:	9c03      	ldr	r4, [sp, #12]
  4028bc:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4028be:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4028c2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4028c6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4028ca:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4028ce:	fba5 6402 	umull	r6, r4, r5, r2
  4028d2:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4028d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4028d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4028dc:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4028e0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4028e4:	4b1e      	ldr	r3, [pc, #120]	; (402960 <rtc_set_date+0xb0>)
  4028e6:	fba3 4301 	umull	r4, r3, r3, r1
  4028ea:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4028ec:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4028f0:	4b1c      	ldr	r3, [pc, #112]	; (402964 <rtc_set_date+0xb4>)
  4028f2:	fba3 4301 	umull	r4, r3, r3, r1
  4028f6:	095b      	lsrs	r3, r3, #5
  4028f8:	fba5 6403 	umull	r6, r4, r5, r3
  4028fc:	08e4      	lsrs	r4, r4, #3
  4028fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402902:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402906:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  402908:	fba5 4301 	umull	r4, r3, r5, r1
  40290c:	08db      	lsrs	r3, r3, #3
  40290e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  402912:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402916:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40291a:	fba5 1503 	umull	r1, r5, r5, r3
  40291e:	08ed      	lsrs	r5, r5, #3
  402920:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402924:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402928:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40292c:	6983      	ldr	r3, [r0, #24]
  40292e:	f013 0f04 	tst.w	r3, #4
  402932:	d0fb      	beq.n	40292c <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  402934:	6803      	ldr	r3, [r0, #0]
  402936:	f043 0302 	orr.w	r3, r3, #2
  40293a:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40293c:	6983      	ldr	r3, [r0, #24]
  40293e:	f013 0f01 	tst.w	r3, #1
  402942:	d0fb      	beq.n	40293c <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  402944:	2301      	movs	r3, #1
  402946:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  402948:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40294a:	6803      	ldr	r3, [r0, #0]
  40294c:	f023 0302 	bic.w	r3, r3, #2
  402950:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  402952:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  402954:	f000 0002 	and.w	r0, r0, #2
  402958:	bc70      	pop	{r4, r5, r6}
  40295a:	4770      	bx	lr
  40295c:	cccccccd 	.word	0xcccccccd
  402960:	10624dd3 	.word	0x10624dd3
  402964:	51eb851f 	.word	0x51eb851f

00402968 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402968:	6943      	ldr	r3, [r0, #20]
  40296a:	f013 0f02 	tst.w	r3, #2
  40296e:	d004      	beq.n	40297a <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  402970:	f3c1 0108 	ubfx	r1, r1, #0, #9
  402974:	61c1      	str	r1, [r0, #28]
	return 0;
  402976:	2000      	movs	r0, #0
  402978:	4770      	bx	lr
		return 1;
  40297a:	2001      	movs	r0, #1
}
  40297c:	4770      	bx	lr

0040297e <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40297e:	6943      	ldr	r3, [r0, #20]
  402980:	f013 0f01 	tst.w	r3, #1
  402984:	d005      	beq.n	402992 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402986:	6983      	ldr	r3, [r0, #24]
  402988:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40298c:	600b      	str	r3, [r1, #0]

	return 0;
  40298e:	2000      	movs	r0, #0
  402990:	4770      	bx	lr
		return 1;
  402992:	2001      	movs	r0, #1
}
  402994:	4770      	bx	lr
	...

00402998 <sdramc_init>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  402998:	4b51      	ldr	r3, [pc, #324]	; (402ae0 <sdramc_init+0x148>)
  40299a:	781b      	ldrb	r3, [r3, #0]
  40299c:	2bff      	cmp	r3, #255	; 0xff
  40299e:	f000 809d 	beq.w	402adc <sdramc_init+0x144>
 *
 * \param p_sdram  Pointer to the sdram memory structure.
 * \param ul_clk  SDRAM clock frequency.
 */
void sdramc_init(sdramc_memory_dev_t *p_sdram, uint32_t ul_clk)
{
  4029a2:	b4f0      	push	{r4, r5, r6, r7}
  4029a4:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4029a6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4029aa:	fab3 f383 	clz	r3, r3
  4029ae:	095b      	lsrs	r3, r3, #5
  4029b0:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4029b2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4029b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4029b8:	2200      	movs	r2, #0
  4029ba:	4b4a      	ldr	r3, [pc, #296]	; (402ae4 <sdramc_init+0x14c>)
  4029bc:	701a      	strb	r2, [r3, #0]
	return flags;
  4029be:	9c00      	ldr	r4, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4029c0:	4a47      	ldr	r2, [pc, #284]	; (402ae0 <sdramc_init+0x148>)
  4029c2:	7813      	ldrb	r3, [r2, #0]
  4029c4:	3301      	adds	r3, #1
  4029c6:	7013      	strb	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4029c8:	b12c      	cbz	r4, 4029d6 <sdramc_init+0x3e>
		cpu_irq_enable();
  4029ca:	2201      	movs	r2, #1
  4029cc:	4b45      	ldr	r3, [pc, #276]	; (402ae4 <sdramc_init+0x14c>)
  4029ce:	701a      	strb	r2, [r3, #0]
  4029d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4029d4:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);

	/* SDRAM device configuration */
	/* Step 1. */
	/* Set the features of SDRAM device into the Configuration Register */
	SDRAMC->SDRAMC_CR = p_sdram->cr.ul_cfg;
  4029d6:	6883      	ldr	r3, [r0, #8]
  4029d8:	4a43      	ldr	r2, [pc, #268]	; (402ae8 <sdramc_init+0x150>)
  4029da:	6093      	str	r3, [r2, #8]
	/* Step 2. */

	/* For low-power SDRAM, Temperature-Compensated Self Refresh (TCSR),
	   Drive Strength (DS) and Partial Array Self Refresh (PASR) must be set
	   in the Low-power Register. */
	SDRAMC->SDRAMC_LPR = 0;
  4029dc:	2300      	movs	r3, #0
  4029de:	6113      	str	r3, [r2, #16]

	/* Step 3. */
	/* Program the memory device type into the Memory Device Register */
	SDRAMC->SDRAMC_MDR = SDRAMC_MDR_MD_SDRAM;
  4029e0:	6253      	str	r3, [r2, #36]	; 0x24

	/* Step 4. */

	/* A minimum pause of 200 µs is provided to precede any signal toggle.
	   (6 core cycles per iteration) */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  4029e2:	9301      	str	r3, [sp, #4]
  4029e4:	4b41      	ldr	r3, [pc, #260]	; (402aec <sdramc_init+0x154>)
  4029e6:	fba3 2301 	umull	r2, r3, r3, r1
  4029ea:	0c9a      	lsrs	r2, r3, #18
  4029ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4029f0:	fb03 f302 	mul.w	r3, r3, r2
  4029f4:	4a3e      	ldr	r2, [pc, #248]	; (402af0 <sdramc_init+0x158>)
  4029f6:	fba2 2303 	umull	r2, r3, r2, r3
  4029fa:	089b      	lsrs	r3, r3, #2
  4029fc:	9a01      	ldr	r2, [sp, #4]
  4029fe:	4293      	cmp	r3, r2
  402a00:	d905      	bls.n	402a0e <sdramc_init+0x76>
  402a02:	9a01      	ldr	r2, [sp, #4]
  402a04:	3201      	adds	r2, #1
  402a06:	9201      	str	r2, [sp, #4]
  402a08:	9a01      	ldr	r2, [sp, #4]
  402a0a:	429a      	cmp	r2, r3
  402a0c:	d3f9      	bcc.n	402a02 <sdramc_init+0x6a>
	/* A NOP command is issued to the SDR-SDRAM. Program NOP command into
	   Mode Register, and the application must set Mode to 1 in the Mode
	   Register. Perform a write access to any SDR-SDRAM address to
	   acknowledge this command. Now the clock which drives SDR-SDRAM
	   device is enabled. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NOP;
  402a0e:	4d36      	ldr	r5, [pc, #216]	; (402ae8 <sdramc_init+0x150>)
  402a10:	2201      	movs	r2, #1
  402a12:	602a      	str	r2, [r5, #0]
	*pSdram = 0x0;
  402a14:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  402a18:	2200      	movs	r2, #0
  402a1a:	8022      	strh	r2, [r4, #0]

	/* An all banks precharge command is issued to the SDR-SDRAM. Program
	   all banks precharge command into Mode Register, and the application
	   must set Mode to 2 in the Mode Register. Perform a write access to
	   any SDRSDRAM address to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_ALLBANKS_PRECHARGE;
  402a1c:	2602      	movs	r6, #2
  402a1e:	602e      	str	r6, [r5, #0]
	*pSdram = 0x0;
  402a20:	8022      	strh	r2, [r4, #0]

	/* Add some delays after precharge */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  402a22:	9201      	str	r2, [sp, #4]
  402a24:	9a01      	ldr	r2, [sp, #4]
  402a26:	429a      	cmp	r2, r3
  402a28:	d205      	bcs.n	402a36 <sdramc_init+0x9e>
  402a2a:	9a01      	ldr	r2, [sp, #4]
  402a2c:	3201      	adds	r2, #1
  402a2e:	9201      	str	r2, [sp, #4]
  402a30:	9a01      	ldr	r2, [sp, #4]
  402a32:	429a      	cmp	r2, r3
  402a34:	d3f9      	bcc.n	402a2a <sdramc_init+0x92>
	/* Step 7. */
	/* Eight auto-refresh (CBR) cycles are provided. Program the auto
	   refresh command (CBR) into Mode Register, and the application
	   must set Mode to 4 in the Mode Register. Once in the idle state,
	   eight AUTO REFRESH cycles must be performed. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  402a36:	4a2c      	ldr	r2, [pc, #176]	; (402ae8 <sdramc_init+0x150>)
  402a38:	2404      	movs	r4, #4
  402a3a:	6014      	str	r4, [r2, #0]
	*pSdram = 0x1;
  402a3c:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
  402a40:	2601      	movs	r6, #1
  402a42:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  402a44:	6014      	str	r4, [r2, #0]
	*pSdram = 0x2;
  402a46:	2602      	movs	r6, #2
  402a48:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  402a4a:	6014      	str	r4, [r2, #0]
	*pSdram = 0x3;
  402a4c:	2603      	movs	r6, #3
  402a4e:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  402a50:	6014      	str	r4, [r2, #0]
	*pSdram = 0x4;
  402a52:	802c      	strh	r4, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  402a54:	6014      	str	r4, [r2, #0]
	*pSdram = 0x5;
  402a56:	2705      	movs	r7, #5
  402a58:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  402a5a:	6014      	str	r4, [r2, #0]
	*pSdram = 0x6;
  402a5c:	2706      	movs	r7, #6
  402a5e:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  402a60:	6014      	str	r4, [r2, #0]
	*pSdram = 0x7;
  402a62:	2707      	movs	r7, #7
  402a64:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  402a66:	6014      	str	r4, [r2, #0]
	*pSdram = 0x8;
  402a68:	2408      	movs	r4, #8
  402a6a:	802c      	strh	r4, [r5, #0]

	/* Step 8. */
	/* A Mode Register Set (MRS) cycle is issued to program the parameters
	   of the SDRAM devices, in particular CAS latency and burst length. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_LOAD_MODEREG;
  402a6c:	6016      	str	r6, [r2, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  402a6e:	6842      	ldr	r2, [r0, #4]
  402a70:	0052      	lsls	r2, r2, #1
  402a72:	442a      	add	r2, r5
  402a74:	f64c 24fe 	movw	r4, #51966	; 0xcafe
  402a78:	8014      	strh	r4, [r2, #0]
    
	/* Add some delays */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  402a7a:	2200      	movs	r2, #0
  402a7c:	9201      	str	r2, [sp, #4]
  402a7e:	9a01      	ldr	r2, [sp, #4]
  402a80:	429a      	cmp	r2, r3
  402a82:	d205      	bcs.n	402a90 <sdramc_init+0xf8>
  402a84:	9a01      	ldr	r2, [sp, #4]
  402a86:	3201      	adds	r2, #1
  402a88:	9201      	str	r2, [sp, #4]
  402a8a:	9a01      	ldr	r2, [sp, #4]
  402a8c:	429a      	cmp	r2, r3
  402a8e:	d3f9      	bcc.n	402a84 <sdramc_init+0xec>

	/* For low-power SDR-SDRAM initialization, an Extended Mode Register Set
	   (EMRS) cycle is issued to program the SDR-SDRAM parameters (TCSR,
	   PASR, DS). The write address must be chosen so that BA[1] is set to
	   1 and BA[0] is set to 0. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_EXT_LOAD_MODEREG;
  402a90:	4a15      	ldr	r2, [pc, #84]	; (402ae8 <sdramc_init+0x150>)
  402a92:	2305      	movs	r3, #5
  402a94:	6013      	str	r3, [r2, #0]
	*((uint16_t *)(pSdram + (1 << p_sdram->ul_bk1))) = 0x0;
  402a96:	6800      	ldr	r0, [r0, #0]
  402a98:	2302      	movs	r3, #2
  402a9a:	4083      	lsls	r3, r0
  402a9c:	f103 43e0 	add.w	r3, r3, #1879048192	; 0x70000000
  402aa0:	2000      	movs	r0, #0
  402aa2:	8018      	strh	r0, [r3, #0]

	/* Step 10. */
	/* The application must go into Normal Mode, setting Mode to 0 in the
	   Mode Register and perform a write access at any location in the\
	   SDRAM to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NORMAL;
  402aa4:	6010      	str	r0, [r2, #0]
	*pSdram = 0x0;
  402aa6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  402aaa:	8018      	strh	r0, [r3, #0]

	/* Step 11. */

	/* Write the refresh rate into the count field in the SDRAMC Refresh
	   Timer register. Set Refresh timer to 15.625 us. */
	i = ul_clk / 1000u;
  402aac:	4b11      	ldr	r3, [pc, #68]	; (402af4 <sdramc_init+0x15c>)
  402aae:	fba3 1301 	umull	r1, r3, r3, r1
  402ab2:	099b      	lsrs	r3, r3, #6
  402ab4:	9301      	str	r3, [sp, #4]
	i *= 15625u;
  402ab6:	9901      	ldr	r1, [sp, #4]
  402ab8:	f643 5309 	movw	r3, #15625	; 0x3d09
  402abc:	fb03 f301 	mul.w	r3, r3, r1
  402ac0:	9301      	str	r3, [sp, #4]
	i /= 1000000u;
  402ac2:	9b01      	ldr	r3, [sp, #4]
  402ac4:	4909      	ldr	r1, [pc, #36]	; (402aec <sdramc_init+0x154>)
  402ac6:	fba1 1303 	umull	r1, r3, r1, r3
  402aca:	0c9b      	lsrs	r3, r3, #18
  402acc:	9301      	str	r3, [sp, #4]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  402ace:	9b01      	ldr	r3, [sp, #4]
  402ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
  402ad4:	6053      	str	r3, [r2, #4]
}
  402ad6:	b002      	add	sp, #8
  402ad8:	bcf0      	pop	{r4, r5, r6, r7}
  402ada:	4770      	bx	lr
  402adc:	e7fe      	b.n	402adc <sdramc_init+0x144>
  402ade:	bf00      	nop
  402ae0:	20400f10 	.word	0x20400f10
  402ae4:	20400177 	.word	0x20400177
  402ae8:	40084000 	.word	0x40084000
  402aec:	431bde83 	.word	0x431bde83
  402af0:	aaaaaaab 	.word	0xaaaaaaab
  402af4:	10624dd3 	.word	0x10624dd3

00402af8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402af8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  402afa:	23ac      	movs	r3, #172	; 0xac
  402afc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402afe:	680b      	ldr	r3, [r1, #0]
  402b00:	684a      	ldr	r2, [r1, #4]
  402b02:	fbb3 f3f2 	udiv	r3, r3, r2
  402b06:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402b08:	1e5c      	subs	r4, r3, #1
  402b0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402b0e:	4294      	cmp	r4, r2
  402b10:	d808      	bhi.n	402b24 <uart_init+0x2c>
		return 1;

	p_uart->UART_BRGR = cd;
  402b12:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402b14:	688b      	ldr	r3, [r1, #8]
  402b16:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402b18:	2350      	movs	r3, #80	; 0x50
  402b1a:	6003      	str	r3, [r0, #0]

	return 0;
  402b1c:	2000      	movs	r0, #0
}
  402b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402b22:	4770      	bx	lr
		return 1;
  402b24:	2001      	movs	r0, #1
  402b26:	e7fa      	b.n	402b1e <uart_init+0x26>

00402b28 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  402b28:	2340      	movs	r3, #64	; 0x40
  402b2a:	6003      	str	r3, [r0, #0]
  402b2c:	4770      	bx	lr

00402b2e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402b2e:	6943      	ldr	r3, [r0, #20]
  402b30:	f013 0f02 	tst.w	r3, #2
  402b34:	d002      	beq.n	402b3c <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402b36:	61c1      	str	r1, [r0, #28]
	return 0;
  402b38:	2000      	movs	r0, #0
  402b3a:	4770      	bx	lr
		return 1;
  402b3c:	2001      	movs	r0, #1
}
  402b3e:	4770      	bx	lr

00402b40 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402b40:	6943      	ldr	r3, [r0, #20]
  402b42:	f013 0f01 	tst.w	r3, #1
  402b46:	d003      	beq.n	402b50 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402b48:	6983      	ldr	r3, [r0, #24]
  402b4a:	700b      	strb	r3, [r1, #0]
	return 0;
  402b4c:	2000      	movs	r0, #0
  402b4e:	4770      	bx	lr
		return 1;
  402b50:	2001      	movs	r0, #1
}
  402b52:	4770      	bx	lr

00402b54 <ui_powerdown>:
{
	/* Initialize LEDs */
}

void ui_powerdown(void)
{
  402b54:	4770      	bx	lr

00402b56 <ui_wakeup>:
}

void ui_wakeup(void)
{
  402b56:	4770      	bx	lr

00402b58 <ui_loop_back_state>:
}

void ui_loop_back_state(bool b_started)
{
  402b58:	4770      	bx	lr

00402b5a <ui_process>:
}

void ui_process(uint16_t framenumber)
{
  402b5a:	4770      	bx	lr

00402b5c <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  402b5c:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
  402b5e:	4b04      	ldr	r3, [pc, #16]	; (402b70 <sysclk_enable_usb+0x14>)
  402b60:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
  402b62:	2000      	movs	r0, #0
  402b64:	4b03      	ldr	r3, [pc, #12]	; (402b74 <sysclk_enable_usb+0x18>)
  402b66:	4798      	blx	r3
		pmc_enable_udpck();
  402b68:	4b03      	ldr	r3, [pc, #12]	; (402b78 <sysclk_enable_usb+0x1c>)
  402b6a:	4798      	blx	r3
  402b6c:	bd08      	pop	{r3, pc}
  402b6e:	bf00      	nop
  402b70:	00403801 	.word	0x00403801
  402b74:	00403839 	.word	0x00403839
  402b78:	0040384d 	.word	0x0040384d

00402b7c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402b7c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  402b7e:	4810      	ldr	r0, [pc, #64]	; (402bc0 <sysclk_init+0x44>)
  402b80:	4b10      	ldr	r3, [pc, #64]	; (402bc4 <sysclk_init+0x48>)
  402b82:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402b84:	211c      	movs	r1, #28
  402b86:	2000      	movs	r0, #0
  402b88:	4b0f      	ldr	r3, [pc, #60]	; (402bc8 <sysclk_init+0x4c>)
  402b8a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402b8c:	4c0f      	ldr	r4, [pc, #60]	; (402bcc <sysclk_init+0x50>)
  402b8e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402b90:	2800      	cmp	r0, #0
  402b92:	d0fc      	beq.n	402b8e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402b94:	4b0e      	ldr	r3, [pc, #56]	; (402bd0 <sysclk_init+0x54>)
  402b96:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402b98:	4a0e      	ldr	r2, [pc, #56]	; (402bd4 <sysclk_init+0x58>)
  402b9a:	4b0f      	ldr	r3, [pc, #60]	; (402bd8 <sysclk_init+0x5c>)
  402b9c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  402b9e:	4c0f      	ldr	r4, [pc, #60]	; (402bdc <sysclk_init+0x60>)
  402ba0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402ba2:	2800      	cmp	r0, #0
  402ba4:	d0fc      	beq.n	402ba0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402ba6:	2002      	movs	r0, #2
  402ba8:	4b0d      	ldr	r3, [pc, #52]	; (402be0 <sysclk_init+0x64>)
  402baa:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402bac:	2000      	movs	r0, #0
  402bae:	4b0d      	ldr	r3, [pc, #52]	; (402be4 <sysclk_init+0x68>)
  402bb0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402bb2:	4b0d      	ldr	r3, [pc, #52]	; (402be8 <sysclk_init+0x6c>)
  402bb4:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  402bb6:	4802      	ldr	r0, [pc, #8]	; (402bc0 <sysclk_init+0x44>)
  402bb8:	4b02      	ldr	r3, [pc, #8]	; (402bc4 <sysclk_init+0x48>)
  402bba:	4798      	blx	r3
  402bbc:	bd10      	pop	{r4, pc}
  402bbe:	bf00      	nop
  402bc0:	08f0d180 	.word	0x08f0d180
  402bc4:	00405081 	.word	0x00405081
  402bc8:	0040377d 	.word	0x0040377d
  402bcc:	004037d1 	.word	0x004037d1
  402bd0:	004037e1 	.word	0x004037e1
  402bd4:	20183f01 	.word	0x20183f01
  402bd8:	400e0600 	.word	0x400e0600
  402bdc:	004037f1 	.word	0x004037f1
  402be0:	004036e1 	.word	0x004036e1
  402be4:	00403719 	.word	0x00403719
  402be8:	00404f75 	.word	0x00404f75

00402bec <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
  402bec:	4b01      	ldr	r3, [pc, #4]	; (402bf4 <udi_vendor_getsetting+0x8>)
  402bee:	7818      	ldrb	r0, [r3, #0]
  402bf0:	4770      	bx	lr
  402bf2:	bf00      	nop
  402bf4:	20400b94 	.word	0x20400b94

00402bf8 <udi_vendor_enable>:
{
  402bf8:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
  402bfa:	4b06      	ldr	r3, [pc, #24]	; (402c14 <udi_vendor_enable+0x1c>)
  402bfc:	4798      	blx	r3
  402bfe:	78c3      	ldrb	r3, [r0, #3]
  402c00:	4a05      	ldr	r2, [pc, #20]	; (402c18 <udi_vendor_enable+0x20>)
  402c02:	7013      	strb	r3, [r2, #0]
	if (1 == udi_vendor_alternate_setting) {
  402c04:	2b01      	cmp	r3, #1
  402c06:	d001      	beq.n	402c0c <udi_vendor_enable+0x14>
	return true;
  402c08:	2001      	movs	r0, #1
}
  402c0a:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
  402c0c:	4b03      	ldr	r3, [pc, #12]	; (402c1c <udi_vendor_enable+0x24>)
  402c0e:	4798      	blx	r3
  402c10:	bd08      	pop	{r3, pc}
  402c12:	bf00      	nop
  402c14:	00402edd 	.word	0x00402edd
  402c18:	20400b94 	.word	0x20400b94
  402c1c:	0040b225 	.word	0x0040b225

00402c20 <udi_vendor_disable>:
{
  402c20:	b508      	push	{r3, lr}
	if (1 == udi_vendor_alternate_setting) {
  402c22:	4b04      	ldr	r3, [pc, #16]	; (402c34 <udi_vendor_disable+0x14>)
  402c24:	781b      	ldrb	r3, [r3, #0]
  402c26:	2b01      	cmp	r3, #1
  402c28:	d000      	beq.n	402c2c <udi_vendor_disable+0xc>
  402c2a:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
  402c2c:	4b02      	ldr	r3, [pc, #8]	; (402c38 <udi_vendor_disable+0x18>)
  402c2e:	4798      	blx	r3
}
  402c30:	e7fb      	b.n	402c2a <udi_vendor_disable+0xa>
  402c32:	bf00      	nop
  402c34:	20400b94 	.word	0x20400b94
  402c38:	00407969 	.word	0x00407969

00402c3c <udi_vendor_setup>:
{
  402c3c:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
  402c3e:	4b13      	ldr	r3, [pc, #76]	; (402c8c <udi_vendor_setup+0x50>)
  402c40:	781b      	ldrb	r3, [r3, #0]
  402c42:	f013 0f80 	tst.w	r3, #128	; 0x80
  402c46:	d105      	bne.n	402c54 <udi_vendor_setup+0x18>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
  402c48:	f003 0360 	and.w	r3, r3, #96	; 0x60
  402c4c:	2b40      	cmp	r3, #64	; 0x40
  402c4e:	d00f      	beq.n	402c70 <udi_vendor_setup+0x34>
	return false; // Not supported request
  402c50:	2000      	movs	r0, #0
  402c52:	bd08      	pop	{r3, pc}
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
  402c54:	f003 0360 	and.w	r3, r3, #96	; 0x60
  402c58:	2b40      	cmp	r3, #64	; 0x40
  402c5a:	d001      	beq.n	402c60 <udi_vendor_setup+0x24>
	return false; // Not supported request
  402c5c:	2000      	movs	r0, #0
  402c5e:	bd08      	pop	{r3, pc}
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
  402c60:	4b0a      	ldr	r3, [pc, #40]	; (402c8c <udi_vendor_setup+0x50>)
  402c62:	785b      	ldrb	r3, [r3, #1]
  402c64:	b10b      	cbz	r3, 402c6a <udi_vendor_setup+0x2e>
	return false; // Not supported request
  402c66:	2000      	movs	r0, #0
  402c68:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_IN_RECEIVED();
  402c6a:	4b09      	ldr	r3, [pc, #36]	; (402c90 <udi_vendor_setup+0x54>)
  402c6c:	4798      	blx	r3
  402c6e:	bd08      	pop	{r3, pc}
				&& (udd_g_ctrlreq.req.bRequest == 0)
  402c70:	4b06      	ldr	r3, [pc, #24]	; (402c8c <udi_vendor_setup+0x50>)
  402c72:	785b      	ldrb	r3, [r3, #1]
  402c74:	b93b      	cbnz	r3, 402c86 <udi_vendor_setup+0x4a>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
  402c76:	4b05      	ldr	r3, [pc, #20]	; (402c8c <udi_vendor_setup+0x50>)
  402c78:	88db      	ldrh	r3, [r3, #6]
  402c7a:	b90b      	cbnz	r3, 402c80 <udi_vendor_setup+0x44>
	return false; // Not supported request
  402c7c:	2000      	movs	r0, #0
}
  402c7e:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
  402c80:	4b04      	ldr	r3, [pc, #16]	; (402c94 <udi_vendor_setup+0x58>)
  402c82:	4798      	blx	r3
  402c84:	bd08      	pop	{r3, pc}
	return false; // Not supported request
  402c86:	2000      	movs	r0, #0
  402c88:	bd08      	pop	{r3, pc}
  402c8a:	bf00      	nop
  402c8c:	20400f18 	.word	0x20400f18
  402c90:	00407995 	.word	0x00407995
  402c94:	00407975 	.word	0x00407975

00402c98 <udi_vendor_interrupt_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402c98:	b510      	push	{r4, lr}
  402c9a:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_IN,
  402c9c:	9200      	str	r2, [sp, #0]
  402c9e:	460b      	mov	r3, r1
  402ca0:	4602      	mov	r2, r0
  402ca2:	2100      	movs	r1, #0
  402ca4:	2081      	movs	r0, #129	; 0x81
  402ca6:	4c02      	ldr	r4, [pc, #8]	; (402cb0 <udi_vendor_interrupt_in_run+0x18>)
  402ca8:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402caa:	b002      	add	sp, #8
  402cac:	bd10      	pop	{r4, pc}
  402cae:	bf00      	nop
  402cb0:	00404a91 	.word	0x00404a91

00402cb4 <udi_vendor_interrupt_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402cb4:	b510      	push	{r4, lr}
  402cb6:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_OUT,
  402cb8:	9200      	str	r2, [sp, #0]
  402cba:	460b      	mov	r3, r1
  402cbc:	4602      	mov	r2, r0
  402cbe:	2100      	movs	r1, #0
  402cc0:	2002      	movs	r0, #2
  402cc2:	4c02      	ldr	r4, [pc, #8]	; (402ccc <udi_vendor_interrupt_out_run+0x18>)
  402cc4:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402cc6:	b002      	add	sp, #8
  402cc8:	bd10      	pop	{r4, pc}
  402cca:	bf00      	nop
  402ccc:	00404a91 	.word	0x00404a91

00402cd0 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402cd0:	b510      	push	{r4, lr}
  402cd2:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
  402cd4:	9200      	str	r2, [sp, #0]
  402cd6:	460b      	mov	r3, r1
  402cd8:	4602      	mov	r2, r0
  402cda:	2100      	movs	r1, #0
  402cdc:	2083      	movs	r0, #131	; 0x83
  402cde:	4c02      	ldr	r4, [pc, #8]	; (402ce8 <udi_vendor_bulk_in_run+0x18>)
  402ce0:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402ce2:	b002      	add	sp, #8
  402ce4:	bd10      	pop	{r4, pc}
  402ce6:	bf00      	nop
  402ce8:	00404a91 	.word	0x00404a91

00402cec <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402cec:	b510      	push	{r4, lr}
  402cee:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
  402cf0:	9200      	str	r2, [sp, #0]
  402cf2:	460b      	mov	r3, r1
  402cf4:	4602      	mov	r2, r0
  402cf6:	2100      	movs	r1, #0
  402cf8:	2004      	movs	r0, #4
  402cfa:	4c02      	ldr	r4, [pc, #8]	; (402d04 <udi_vendor_bulk_out_run+0x18>)
  402cfc:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402cfe:	b002      	add	sp, #8
  402d00:	bd10      	pop	{r4, pc}
  402d02:	bf00      	nop
  402d04:	00404a91 	.word	0x00404a91

00402d08 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402d08:	b510      	push	{r4, lr}
  402d0a:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
  402d0c:	9200      	str	r2, [sp, #0]
  402d0e:	460b      	mov	r3, r1
  402d10:	4602      	mov	r2, r0
  402d12:	2100      	movs	r1, #0
  402d14:	2085      	movs	r0, #133	; 0x85
  402d16:	4c02      	ldr	r4, [pc, #8]	; (402d20 <udi_vendor_iso_in_run+0x18>)
  402d18:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402d1a:	b002      	add	sp, #8
  402d1c:	bd10      	pop	{r4, pc}
  402d1e:	bf00      	nop
  402d20:	00404a91 	.word	0x00404a91

00402d24 <udi_vendor_iso_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402d24:	b510      	push	{r4, lr}
  402d26:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_ISO_OUT,
  402d28:	9200      	str	r2, [sp, #0]
  402d2a:	460b      	mov	r3, r1
  402d2c:	4602      	mov	r2, r0
  402d2e:	2100      	movs	r1, #0
  402d30:	2006      	movs	r0, #6
  402d32:	4c02      	ldr	r4, [pc, #8]	; (402d3c <udi_vendor_iso_out_run+0x18>)
  402d34:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402d36:	b002      	add	sp, #8
  402d38:	bd10      	pop	{r4, pc}
  402d3a:	bf00      	nop
  402d3c:	00404a91 	.word	0x00404a91

00402d40 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  402d40:	4b10      	ldr	r3, [pc, #64]	; (402d84 <udc_next_desc_in_iface+0x44>)
  402d42:	681b      	ldr	r3, [r3, #0]
  402d44:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  402d46:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  402d48:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  402d4a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  402d4c:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  402d4e:	4290      	cmp	r0, r2
  402d50:	d211      	bcs.n	402d76 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  402d52:	7843      	ldrb	r3, [r0, #1]
  402d54:	2b04      	cmp	r3, #4
  402d56:	d010      	beq.n	402d7a <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  402d58:	428b      	cmp	r3, r1
  402d5a:	d009      	beq.n	402d70 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  402d5c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  402d5e:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  402d60:	4290      	cmp	r0, r2
  402d62:	d206      	bcs.n	402d72 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  402d64:	7843      	ldrb	r3, [r0, #1]
  402d66:	2b04      	cmp	r3, #4
  402d68:	d009      	beq.n	402d7e <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  402d6a:	428b      	cmp	r3, r1
  402d6c:	d1f6      	bne.n	402d5c <udc_next_desc_in_iface+0x1c>
  402d6e:	e007      	b.n	402d80 <udc_next_desc_in_iface+0x40>
  402d70:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  402d72:	2000      	movs	r0, #0
  402d74:	4770      	bx	lr
  402d76:	2000      	movs	r0, #0
  402d78:	4770      	bx	lr
  402d7a:	2000      	movs	r0, #0
  402d7c:	4770      	bx	lr
  402d7e:	2000      	movs	r0, #0
}
  402d80:	4770      	bx	lr
  402d82:	bf00      	nop
  402d84:	20400ba4 	.word	0x20400ba4

00402d88 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  402d88:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  402d8a:	4b03      	ldr	r3, [pc, #12]	; (402d98 <udc_valid_address+0x10>)
  402d8c:	7898      	ldrb	r0, [r3, #2]
  402d8e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  402d92:	4b02      	ldr	r3, [pc, #8]	; (402d9c <udc_valid_address+0x14>)
  402d94:	4798      	blx	r3
  402d96:	bd08      	pop	{r3, pc}
  402d98:	20400f18 	.word	0x20400f18
  402d9c:	004047ed 	.word	0x004047ed

00402da0 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  402da0:	4b19      	ldr	r3, [pc, #100]	; (402e08 <udc_update_iface_desc+0x68>)
  402da2:	781b      	ldrb	r3, [r3, #0]
  402da4:	b34b      	cbz	r3, 402dfa <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  402da6:	4b19      	ldr	r3, [pc, #100]	; (402e0c <udc_update_iface_desc+0x6c>)
  402da8:	681b      	ldr	r3, [r3, #0]
  402daa:	681b      	ldr	r3, [r3, #0]
  402dac:	791a      	ldrb	r2, [r3, #4]
  402dae:	4282      	cmp	r2, r0
  402db0:	d925      	bls.n	402dfe <udc_update_iface_desc+0x5e>
{
  402db2:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  402db4:	4a16      	ldr	r2, [pc, #88]	; (402e10 <udc_update_iface_desc+0x70>)
  402db6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  402db8:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  402dba:	441c      	add	r4, r3
	while (ptr_end_desc >
  402dbc:	42a3      	cmp	r3, r4
  402dbe:	d220      	bcs.n	402e02 <udc_update_iface_desc+0x62>
  402dc0:	2500      	movs	r5, #0
  402dc2:	2601      	movs	r6, #1
  402dc4:	e007      	b.n	402dd6 <udc_update_iface_desc+0x36>
  402dc6:	4a12      	ldr	r2, [pc, #72]	; (402e10 <udc_update_iface_desc+0x70>)
  402dc8:	6013      	str	r3, [r2, #0]
  402dca:	e00f      	b.n	402dec <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  402dcc:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  402dce:	4413      	add	r3, r2
  402dd0:	4635      	mov	r5, r6
	while (ptr_end_desc >
  402dd2:	42a3      	cmp	r3, r4
  402dd4:	d20c      	bcs.n	402df0 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  402dd6:	785a      	ldrb	r2, [r3, #1]
  402dd8:	2a04      	cmp	r2, #4
  402dda:	d1f7      	bne.n	402dcc <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  402ddc:	789a      	ldrb	r2, [r3, #2]
  402dde:	4282      	cmp	r2, r0
  402de0:	d1f4      	bne.n	402dcc <udc_update_iface_desc+0x2c>
  402de2:	78da      	ldrb	r2, [r3, #3]
  402de4:	428a      	cmp	r2, r1
  402de6:	d1f1      	bne.n	402dcc <udc_update_iface_desc+0x2c>
  402de8:	2d00      	cmp	r5, #0
  402dea:	d1ec      	bne.n	402dc6 <udc_update_iface_desc+0x26>
				return true; // Interface found
  402dec:	2001      	movs	r0, #1
  402dee:	e002      	b.n	402df6 <udc_update_iface_desc+0x56>
  402df0:	4a07      	ldr	r2, [pc, #28]	; (402e10 <udc_update_iface_desc+0x70>)
  402df2:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  402df4:	2000      	movs	r0, #0
}
  402df6:	bc70      	pop	{r4, r5, r6}
  402df8:	4770      	bx	lr
		return false;
  402dfa:	2000      	movs	r0, #0
  402dfc:	4770      	bx	lr
		return false;
  402dfe:	2000      	movs	r0, #0
  402e00:	4770      	bx	lr
	return false; // Interface not found
  402e02:	2000      	movs	r0, #0
  402e04:	e7f7      	b.n	402df6 <udc_update_iface_desc+0x56>
  402e06:	bf00      	nop
  402e08:	20400ba0 	.word	0x20400ba0
  402e0c:	20400ba4 	.word	0x20400ba4
  402e10:	20400ba8 	.word	0x20400ba8

00402e14 <udc_iface_disable>:
{
  402e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402e18:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  402e1a:	2100      	movs	r1, #0
  402e1c:	4b13      	ldr	r3, [pc, #76]	; (402e6c <udc_iface_disable+0x58>)
  402e1e:	4798      	blx	r3
  402e20:	4680      	mov	r8, r0
  402e22:	b910      	cbnz	r0, 402e2a <udc_iface_disable+0x16>
}
  402e24:	4640      	mov	r0, r8
  402e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  402e2a:	4b11      	ldr	r3, [pc, #68]	; (402e70 <udc_iface_disable+0x5c>)
  402e2c:	681b      	ldr	r3, [r3, #0]
  402e2e:	685b      	ldr	r3, [r3, #4]
  402e30:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  402e34:	f8d9 300c 	ldr.w	r3, [r9, #12]
  402e38:	4798      	blx	r3
  402e3a:	4601      	mov	r1, r0
  402e3c:	4620      	mov	r0, r4
  402e3e:	4b0b      	ldr	r3, [pc, #44]	; (402e6c <udc_iface_disable+0x58>)
  402e40:	4798      	blx	r3
  402e42:	4680      	mov	r8, r0
  402e44:	2800      	cmp	r0, #0
  402e46:	d0ed      	beq.n	402e24 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  402e48:	4b0a      	ldr	r3, [pc, #40]	; (402e74 <udc_iface_disable+0x60>)
  402e4a:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402e4c:	2605      	movs	r6, #5
  402e4e:	4d0a      	ldr	r5, [pc, #40]	; (402e78 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  402e50:	4f0a      	ldr	r7, [pc, #40]	; (402e7c <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402e52:	4631      	mov	r1, r6
  402e54:	4620      	mov	r0, r4
  402e56:	47a8      	blx	r5
			if (NULL == ep_desc) {
  402e58:	4604      	mov	r4, r0
  402e5a:	b110      	cbz	r0, 402e62 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  402e5c:	7880      	ldrb	r0, [r0, #2]
  402e5e:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402e60:	e7f7      	b.n	402e52 <udc_iface_disable+0x3e>
	udi_api->disable();
  402e62:	f8d9 3004 	ldr.w	r3, [r9, #4]
  402e66:	4798      	blx	r3
	return true;
  402e68:	e7dc      	b.n	402e24 <udc_iface_disable+0x10>
  402e6a:	bf00      	nop
  402e6c:	00402da1 	.word	0x00402da1
  402e70:	20400ba4 	.word	0x20400ba4
  402e74:	20400ba8 	.word	0x20400ba8
  402e78:	00402d41 	.word	0x00402d41
  402e7c:	00404841 	.word	0x00404841

00402e80 <udc_iface_enable>:
{
  402e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e84:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  402e86:	4b10      	ldr	r3, [pc, #64]	; (402ec8 <udc_iface_enable+0x48>)
  402e88:	4798      	blx	r3
  402e8a:	4603      	mov	r3, r0
  402e8c:	b1c8      	cbz	r0, 402ec2 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  402e8e:	4b0f      	ldr	r3, [pc, #60]	; (402ecc <udc_iface_enable+0x4c>)
  402e90:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402e92:	2605      	movs	r6, #5
  402e94:	4d0e      	ldr	r5, [pc, #56]	; (402ed0 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  402e96:	4f0f      	ldr	r7, [pc, #60]	; (402ed4 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402e98:	4631      	mov	r1, r6
  402e9a:	4620      	mov	r0, r4
  402e9c:	47a8      	blx	r5
		if (NULL == ep_desc)
  402e9e:	4604      	mov	r4, r0
  402ea0:	b138      	cbz	r0, 402eb2 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  402ea2:	8882      	ldrh	r2, [r0, #4]
  402ea4:	78c1      	ldrb	r1, [r0, #3]
  402ea6:	7880      	ldrb	r0, [r0, #2]
  402ea8:	47b8      	blx	r7
  402eaa:	4603      	mov	r3, r0
  402eac:	2800      	cmp	r0, #0
  402eae:	d1f3      	bne.n	402e98 <udc_iface_enable+0x18>
  402eb0:	e007      	b.n	402ec2 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  402eb2:	4b09      	ldr	r3, [pc, #36]	; (402ed8 <udc_iface_enable+0x58>)
  402eb4:	681b      	ldr	r3, [r3, #0]
  402eb6:	685b      	ldr	r3, [r3, #4]
  402eb8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  402ebc:	681b      	ldr	r3, [r3, #0]
  402ebe:	4798      	blx	r3
  402ec0:	4603      	mov	r3, r0
}
  402ec2:	4618      	mov	r0, r3
  402ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ec8:	00402da1 	.word	0x00402da1
  402ecc:	20400ba8 	.word	0x20400ba8
  402ed0:	00402d41 	.word	0x00402d41
  402ed4:	00404b9d 	.word	0x00404b9d
  402ed8:	20400ba4 	.word	0x20400ba4

00402edc <udc_get_interface_desc>:
}
  402edc:	4b01      	ldr	r3, [pc, #4]	; (402ee4 <udc_get_interface_desc+0x8>)
  402ede:	6818      	ldr	r0, [r3, #0]
  402ee0:	4770      	bx	lr
  402ee2:	bf00      	nop
  402ee4:	20400ba8 	.word	0x20400ba8

00402ee8 <udc_start>:
{
  402ee8:	b508      	push	{r3, lr}
	udd_enable();
  402eea:	4b01      	ldr	r3, [pc, #4]	; (402ef0 <udc_start+0x8>)
  402eec:	4798      	blx	r3
  402eee:	bd08      	pop	{r3, pc}
  402ef0:	004046a1 	.word	0x004046a1

00402ef4 <udc_reset>:
{
  402ef4:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  402ef6:	4b0d      	ldr	r3, [pc, #52]	; (402f2c <udc_reset+0x38>)
  402ef8:	781b      	ldrb	r3, [r3, #0]
  402efa:	b183      	cbz	r3, 402f1e <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402efc:	4b0c      	ldr	r3, [pc, #48]	; (402f30 <udc_reset+0x3c>)
  402efe:	681b      	ldr	r3, [r3, #0]
  402f00:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  402f02:	791b      	ldrb	r3, [r3, #4]
  402f04:	b15b      	cbz	r3, 402f1e <udc_reset+0x2a>
  402f06:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  402f08:	4e0a      	ldr	r6, [pc, #40]	; (402f34 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402f0a:	4d09      	ldr	r5, [pc, #36]	; (402f30 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  402f0c:	4620      	mov	r0, r4
  402f0e:	47b0      	blx	r6
				iface_num++) {
  402f10:	3401      	adds	r4, #1
  402f12:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402f14:	682b      	ldr	r3, [r5, #0]
  402f16:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  402f18:	791b      	ldrb	r3, [r3, #4]
  402f1a:	42a3      	cmp	r3, r4
  402f1c:	d8f6      	bhi.n	402f0c <udc_reset+0x18>
	udc_num_configuration = 0;
  402f1e:	2200      	movs	r2, #0
  402f20:	4b02      	ldr	r3, [pc, #8]	; (402f2c <udc_reset+0x38>)
  402f22:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  402f24:	2201      	movs	r2, #1
  402f26:	4b04      	ldr	r3, [pc, #16]	; (402f38 <udc_reset+0x44>)
  402f28:	801a      	strh	r2, [r3, #0]
  402f2a:	bd70      	pop	{r4, r5, r6, pc}
  402f2c:	20400ba0 	.word	0x20400ba0
  402f30:	20400ba4 	.word	0x20400ba4
  402f34:	00402e15 	.word	0x00402e15
  402f38:	20400b96 	.word	0x20400b96

00402f3c <udc_sof_notify>:
{
  402f3c:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  402f3e:	4b0d      	ldr	r3, [pc, #52]	; (402f74 <udc_sof_notify+0x38>)
  402f40:	781b      	ldrb	r3, [r3, #0]
  402f42:	b1b3      	cbz	r3, 402f72 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402f44:	4b0c      	ldr	r3, [pc, #48]	; (402f78 <udc_sof_notify+0x3c>)
  402f46:	681b      	ldr	r3, [r3, #0]
  402f48:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  402f4a:	7912      	ldrb	r2, [r2, #4]
  402f4c:	b18a      	cbz	r2, 402f72 <udc_sof_notify+0x36>
  402f4e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402f50:	4d09      	ldr	r5, [pc, #36]	; (402f78 <udc_sof_notify+0x3c>)
  402f52:	e006      	b.n	402f62 <udc_sof_notify+0x26>
				iface_num++) {
  402f54:	3401      	adds	r4, #1
  402f56:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402f58:	682b      	ldr	r3, [r5, #0]
  402f5a:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  402f5c:	7912      	ldrb	r2, [r2, #4]
  402f5e:	42a2      	cmp	r2, r4
  402f60:	d907      	bls.n	402f72 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  402f62:	685b      	ldr	r3, [r3, #4]
  402f64:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  402f68:	691b      	ldr	r3, [r3, #16]
  402f6a:	2b00      	cmp	r3, #0
  402f6c:	d0f2      	beq.n	402f54 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  402f6e:	4798      	blx	r3
  402f70:	e7f0      	b.n	402f54 <udc_sof_notify+0x18>
  402f72:	bd38      	pop	{r3, r4, r5, pc}
  402f74:	20400ba0 	.word	0x20400ba0
  402f78:	20400ba4 	.word	0x20400ba4

00402f7c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  402f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  402f7e:	4b88      	ldr	r3, [pc, #544]	; (4031a0 <udc_process_setup+0x224>)
  402f80:	2200      	movs	r2, #0
  402f82:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  402f84:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  402f86:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  402f88:	781b      	ldrb	r3, [r3, #0]
  402f8a:	f013 0f80 	tst.w	r3, #128	; 0x80
  402f8e:	d114      	bne.n	402fba <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  402f90:	f013 0f60 	tst.w	r3, #96	; 0x60
  402f94:	f000 80d5 	beq.w	403142 <udc_process_setup+0x1c6>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  402f98:	4b81      	ldr	r3, [pc, #516]	; (4031a0 <udc_process_setup+0x224>)
  402f9a:	781b      	ldrb	r3, [r3, #0]
  402f9c:	f003 031f 	and.w	r3, r3, #31
  402fa0:	2b01      	cmp	r3, #1
  402fa2:	f000 816c 	beq.w	40327e <udc_process_setup+0x302>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  402fa6:	4b7e      	ldr	r3, [pc, #504]	; (4031a0 <udc_process_setup+0x224>)
  402fa8:	781b      	ldrb	r3, [r3, #0]
  402faa:	f003 031f 	and.w	r3, r3, #31
  402fae:	2b02      	cmp	r3, #2
  402fb0:	f000 81c7 	beq.w	403342 <udc_process_setup+0x3c6>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  402fb4:	2300      	movs	r3, #0
#endif
}
  402fb6:	4618      	mov	r0, r3
  402fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  402fba:	4a79      	ldr	r2, [pc, #484]	; (4031a0 <udc_process_setup+0x224>)
  402fbc:	88d2      	ldrh	r2, [r2, #6]
  402fbe:	2a00      	cmp	r2, #0
  402fc0:	f000 81e8 	beq.w	403394 <udc_process_setup+0x418>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  402fc4:	f013 0f60 	tst.w	r3, #96	; 0x60
  402fc8:	d1e6      	bne.n	402f98 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  402fca:	f013 031f 	ands.w	r3, r3, #31
  402fce:	d106      	bne.n	402fde <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  402fd0:	4973      	ldr	r1, [pc, #460]	; (4031a0 <udc_process_setup+0x224>)
  402fd2:	7849      	ldrb	r1, [r1, #1]
  402fd4:	2906      	cmp	r1, #6
  402fd6:	d014      	beq.n	403002 <udc_process_setup+0x86>
  402fd8:	2908      	cmp	r1, #8
  402fda:	d074      	beq.n	4030c6 <udc_process_setup+0x14a>
  402fdc:	b151      	cbz	r1, 402ff4 <udc_process_setup+0x78>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  402fde:	2b01      	cmp	r3, #1
  402fe0:	d079      	beq.n	4030d6 <udc_process_setup+0x15a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  402fe2:	2b02      	cmp	r3, #2
  402fe4:	d1d8      	bne.n	402f98 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  402fe6:	4b6e      	ldr	r3, [pc, #440]	; (4031a0 <udc_process_setup+0x224>)
  402fe8:	785b      	ldrb	r3, [r3, #1]
  402fea:	2b00      	cmp	r3, #0
  402fec:	f000 809b 	beq.w	403126 <udc_process_setup+0x1aa>
	return false;
  402ff0:	2300      	movs	r3, #0
  402ff2:	e188      	b.n	403306 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  402ff4:	2a02      	cmp	r2, #2
  402ff6:	d1d6      	bne.n	402fa6 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  402ff8:	2102      	movs	r1, #2
  402ffa:	486a      	ldr	r0, [pc, #424]	; (4031a4 <udc_process_setup+0x228>)
  402ffc:	4b6a      	ldr	r3, [pc, #424]	; (4031a8 <udc_process_setup+0x22c>)
  402ffe:	4798      	blx	r3
  403000:	e0bb      	b.n	40317a <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  403002:	4b67      	ldr	r3, [pc, #412]	; (4031a0 <udc_process_setup+0x224>)
  403004:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  403006:	0a13      	lsrs	r3, r2, #8
  403008:	3b01      	subs	r3, #1
  40300a:	2b0e      	cmp	r3, #14
  40300c:	f200 8178 	bhi.w	403300 <udc_process_setup+0x384>
  403010:	e8df f013 	tbh	[pc, r3, lsl #1]
  403014:	001d000f 	.word	0x001d000f
  403018:	01760037 	.word	0x01760037
  40301c:	01760176 	.word	0x01760176
  403020:	01760176 	.word	0x01760176
  403024:	01760176 	.word	0x01760176
  403028:	01760176 	.word	0x01760176
  40302c:	01760176 	.word	0x01760176
  403030:	002f      	.short	0x002f
				(uint8_t *) udc_config.confdev_lsfs,
  403032:	4b5e      	ldr	r3, [pc, #376]	; (4031ac <udc_process_setup+0x230>)
  403034:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  403036:	7801      	ldrb	r1, [r0, #0]
  403038:	4b5b      	ldr	r3, [pc, #364]	; (4031a8 <udc_process_setup+0x22c>)
  40303a:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  40303c:	4b58      	ldr	r3, [pc, #352]	; (4031a0 <udc_process_setup+0x224>)
  40303e:	88da      	ldrh	r2, [r3, #6]
  403040:	899b      	ldrh	r3, [r3, #12]
  403042:	4293      	cmp	r3, r2
  403044:	f240 8099 	bls.w	40317a <udc_process_setup+0x1fe>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  403048:	4b55      	ldr	r3, [pc, #340]	; (4031a0 <udc_process_setup+0x224>)
  40304a:	819a      	strh	r2, [r3, #12]
  40304c:	e095      	b.n	40317a <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  40304e:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  403050:	4b56      	ldr	r3, [pc, #344]	; (4031ac <udc_process_setup+0x230>)
  403052:	681b      	ldr	r3, [r3, #0]
  403054:	7c5b      	ldrb	r3, [r3, #17]
  403056:	4293      	cmp	r3, r2
  403058:	d9a5      	bls.n	402fa6 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  40305a:	4b54      	ldr	r3, [pc, #336]	; (4031ac <udc_process_setup+0x230>)
  40305c:	685b      	ldr	r3, [r3, #4]
  40305e:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  403062:	8841      	ldrh	r1, [r0, #2]
  403064:	4b50      	ldr	r3, [pc, #320]	; (4031a8 <udc_process_setup+0x22c>)
  403066:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  403068:	4b4d      	ldr	r3, [pc, #308]	; (4031a0 <udc_process_setup+0x224>)
  40306a:	689b      	ldr	r3, [r3, #8]
  40306c:	2202      	movs	r2, #2
  40306e:	705a      	strb	r2, [r3, #1]
  403070:	e7e4      	b.n	40303c <udc_process_setup+0xc0>
		if (udc_config.conf_bos == NULL) {
  403072:	4b4e      	ldr	r3, [pc, #312]	; (4031ac <udc_process_setup+0x230>)
  403074:	6898      	ldr	r0, [r3, #8]
  403076:	2800      	cmp	r0, #0
  403078:	d095      	beq.n	402fa6 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  40307a:	8841      	ldrh	r1, [r0, #2]
  40307c:	4b4a      	ldr	r3, [pc, #296]	; (4031a8 <udc_process_setup+0x22c>)
  40307e:	4798      	blx	r3
  403080:	e7dc      	b.n	40303c <udc_process_setup+0xc0>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  403082:	b2d2      	uxtb	r2, r2
  403084:	2a01      	cmp	r2, #1
  403086:	d01b      	beq.n	4030c0 <udc_process_setup+0x144>
  403088:	b1aa      	cbz	r2, 4030b6 <udc_process_setup+0x13a>
  40308a:	2a02      	cmp	r2, #2
  40308c:	d184      	bne.n	402f98 <udc_process_setup+0x1c>
		str = udc_string_product_name;
  40308e:	4a48      	ldr	r2, [pc, #288]	; (4031b0 <udc_process_setup+0x234>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  403090:	240a      	movs	r4, #10
  403092:	3a01      	subs	r2, #1
  403094:	4947      	ldr	r1, [pc, #284]	; (4031b4 <udc_process_setup+0x238>)
  403096:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  403098:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40309c:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
  4030a0:	3301      	adds	r3, #1
  4030a2:	b2db      	uxtb	r3, r3
  4030a4:	42a3      	cmp	r3, r4
  4030a6:	d3f7      	bcc.n	403098 <udc_process_setup+0x11c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  4030a8:	0061      	lsls	r1, r4, #1
  4030aa:	3102      	adds	r1, #2
  4030ac:	4841      	ldr	r0, [pc, #260]	; (4031b4 <udc_process_setup+0x238>)
  4030ae:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  4030b0:	4b3d      	ldr	r3, [pc, #244]	; (4031a8 <udc_process_setup+0x22c>)
  4030b2:	4798      	blx	r3
  4030b4:	e7c2      	b.n	40303c <udc_process_setup+0xc0>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  4030b6:	2104      	movs	r1, #4
  4030b8:	483f      	ldr	r0, [pc, #252]	; (4031b8 <udc_process_setup+0x23c>)
  4030ba:	4b3b      	ldr	r3, [pc, #236]	; (4031a8 <udc_process_setup+0x22c>)
  4030bc:	4798      	blx	r3
  4030be:	e7bd      	b.n	40303c <udc_process_setup+0xc0>
		str = udc_string_manufacturer_name;
  4030c0:	4a3e      	ldr	r2, [pc, #248]	; (4031bc <udc_process_setup+0x240>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  4030c2:	2417      	movs	r4, #23
  4030c4:	e7e5      	b.n	403092 <udc_process_setup+0x116>
	if (udd_g_ctrlreq.req.wLength != 1) {
  4030c6:	2a01      	cmp	r2, #1
  4030c8:	f47f af6d 	bne.w	402fa6 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
  4030cc:	2101      	movs	r1, #1
  4030ce:	483c      	ldr	r0, [pc, #240]	; (4031c0 <udc_process_setup+0x244>)
  4030d0:	4b35      	ldr	r3, [pc, #212]	; (4031a8 <udc_process_setup+0x22c>)
  4030d2:	4798      	blx	r3
  4030d4:	e051      	b.n	40317a <udc_process_setup+0x1fe>
			switch (udd_g_ctrlreq.req.bRequest) {
  4030d6:	4932      	ldr	r1, [pc, #200]	; (4031a0 <udc_process_setup+0x224>)
  4030d8:	7849      	ldrb	r1, [r1, #1]
  4030da:	290a      	cmp	r1, #10
  4030dc:	d181      	bne.n	402fe2 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  4030de:	2a01      	cmp	r2, #1
  4030e0:	f040 80cd 	bne.w	40327e <udc_process_setup+0x302>
	if (!udc_num_configuration) {
  4030e4:	4b36      	ldr	r3, [pc, #216]	; (4031c0 <udc_process_setup+0x244>)
  4030e6:	781b      	ldrb	r3, [r3, #0]
  4030e8:	2b00      	cmp	r3, #0
  4030ea:	f000 80c8 	beq.w	40327e <udc_process_setup+0x302>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4030ee:	4b2c      	ldr	r3, [pc, #176]	; (4031a0 <udc_process_setup+0x224>)
  4030f0:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4030f2:	4b34      	ldr	r3, [pc, #208]	; (4031c4 <udc_process_setup+0x248>)
  4030f4:	681d      	ldr	r5, [r3, #0]
  4030f6:	682b      	ldr	r3, [r5, #0]
  4030f8:	791b      	ldrb	r3, [r3, #4]
  4030fa:	42a3      	cmp	r3, r4
  4030fc:	f240 80bf 	bls.w	40327e <udc_process_setup+0x302>
	if (!udc_update_iface_desc(iface_num, 0)) {
  403100:	2100      	movs	r1, #0
  403102:	4620      	mov	r0, r4
  403104:	4b30      	ldr	r3, [pc, #192]	; (4031c8 <udc_process_setup+0x24c>)
  403106:	4798      	blx	r3
  403108:	2800      	cmp	r0, #0
  40310a:	f43f af45 	beq.w	402f98 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  40310e:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  403110:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  403114:	68db      	ldr	r3, [r3, #12]
  403116:	4798      	blx	r3
  403118:	4b2c      	ldr	r3, [pc, #176]	; (4031cc <udc_process_setup+0x250>)
  40311a:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  40311c:	2101      	movs	r1, #1
  40311e:	4618      	mov	r0, r3
  403120:	4b21      	ldr	r3, [pc, #132]	; (4031a8 <udc_process_setup+0x22c>)
  403122:	4798      	blx	r3
  403124:	e029      	b.n	40317a <udc_process_setup+0x1fe>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  403126:	2a02      	cmp	r2, #2
  403128:	f47f af3d 	bne.w	402fa6 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  40312c:	4b1c      	ldr	r3, [pc, #112]	; (4031a0 <udc_process_setup+0x224>)
  40312e:	7918      	ldrb	r0, [r3, #4]
  403130:	4b27      	ldr	r3, [pc, #156]	; (4031d0 <udc_process_setup+0x254>)
  403132:	4798      	blx	r3
  403134:	4b27      	ldr	r3, [pc, #156]	; (4031d4 <udc_process_setup+0x258>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  403136:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  403138:	2102      	movs	r1, #2
  40313a:	4618      	mov	r0, r3
  40313c:	4b1a      	ldr	r3, [pc, #104]	; (4031a8 <udc_process_setup+0x22c>)
  40313e:	4798      	blx	r3
  403140:	e01b      	b.n	40317a <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  403142:	f013 031f 	ands.w	r3, r3, #31
  403146:	f040 8083 	bne.w	403250 <udc_process_setup+0x2d4>
			switch (udd_g_ctrlreq.req.bRequest) {
  40314a:	4a15      	ldr	r2, [pc, #84]	; (4031a0 <udc_process_setup+0x224>)
  40314c:	7852      	ldrb	r2, [r2, #1]
  40314e:	3a01      	subs	r2, #1
  403150:	2a08      	cmp	r2, #8
  403152:	d87d      	bhi.n	403250 <udc_process_setup+0x2d4>
  403154:	e8df f012 	tbh	[pc, r2, lsl #1]
  403158:	007c0013 	.word	0x007c0013
  40315c:	007c00d6 	.word	0x007c00d6
  403160:	007c0009 	.word	0x007c0009
  403164:	007c007c 	.word	0x007c007c
  403168:	0042      	.short	0x0042
	if (udd_g_ctrlreq.req.wLength) {
  40316a:	4b0d      	ldr	r3, [pc, #52]	; (4031a0 <udc_process_setup+0x224>)
  40316c:	88db      	ldrh	r3, [r3, #6]
  40316e:	2b00      	cmp	r3, #0
  403170:	f47f af19 	bne.w	402fa6 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
  403174:	4a18      	ldr	r2, [pc, #96]	; (4031d8 <udc_process_setup+0x25c>)
  403176:	4b0a      	ldr	r3, [pc, #40]	; (4031a0 <udc_process_setup+0x224>)
  403178:	611a      	str	r2, [r3, #16]
			return true;
  40317a:	2301      	movs	r3, #1
  40317c:	e71b      	b.n	402fb6 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  40317e:	4b08      	ldr	r3, [pc, #32]	; (4031a0 <udc_process_setup+0x224>)
  403180:	88db      	ldrh	r3, [r3, #6]
  403182:	2b00      	cmp	r3, #0
  403184:	f47f af0f 	bne.w	402fa6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  403188:	4b05      	ldr	r3, [pc, #20]	; (4031a0 <udc_process_setup+0x224>)
  40318a:	885b      	ldrh	r3, [r3, #2]
  40318c:	2b01      	cmp	r3, #1
  40318e:	f47f af0a 	bne.w	402fa6 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  403192:	4a04      	ldr	r2, [pc, #16]	; (4031a4 <udc_process_setup+0x228>)
  403194:	8813      	ldrh	r3, [r2, #0]
  403196:	f023 0302 	bic.w	r3, r3, #2
  40319a:	8013      	strh	r3, [r2, #0]
  40319c:	e7ed      	b.n	40317a <udc_process_setup+0x1fe>
  40319e:	bf00      	nop
  4031a0:	20400f18 	.word	0x20400f18
  4031a4:	20400b96 	.word	0x20400b96
  4031a8:	00404835 	.word	0x00404835
  4031ac:	204000ac 	.word	0x204000ac
  4031b0:	2040016c 	.word	0x2040016c
  4031b4:	20400120 	.word	0x20400120
  4031b8:	20400150 	.word	0x20400150
  4031bc:	20400154 	.word	0x20400154
  4031c0:	20400ba0 	.word	0x20400ba0
  4031c4:	20400ba4 	.word	0x20400ba4
  4031c8:	00402da1 	.word	0x00402da1
  4031cc:	20400b9c 	.word	0x20400b9c
  4031d0:	0040489d 	.word	0x0040489d
  4031d4:	20400b98 	.word	0x20400b98
  4031d8:	00402d89 	.word	0x00402d89
	if (udd_g_ctrlreq.req.wLength) {
  4031dc:	4b6f      	ldr	r3, [pc, #444]	; (40339c <udc_process_setup+0x420>)
  4031de:	88db      	ldrh	r3, [r3, #6]
  4031e0:	2b00      	cmp	r3, #0
  4031e2:	f47f aee0 	bne.w	402fa6 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
  4031e6:	4b6e      	ldr	r3, [pc, #440]	; (4033a0 <udc_process_setup+0x424>)
  4031e8:	4798      	blx	r3
  4031ea:	2800      	cmp	r0, #0
  4031ec:	f43f aed4 	beq.w	402f98 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4031f0:	4b6a      	ldr	r3, [pc, #424]	; (40339c <udc_process_setup+0x420>)
  4031f2:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  4031f4:	4b6b      	ldr	r3, [pc, #428]	; (4033a4 <udc_process_setup+0x428>)
  4031f6:	681b      	ldr	r3, [r3, #0]
  4031f8:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4031fa:	429a      	cmp	r2, r3
  4031fc:	f73f aecc 	bgt.w	402f98 <udc_process_setup+0x1c>
	udc_reset();
  403200:	4b69      	ldr	r3, [pc, #420]	; (4033a8 <udc_process_setup+0x42c>)
  403202:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  403204:	4b65      	ldr	r3, [pc, #404]	; (40339c <udc_process_setup+0x420>)
  403206:	789a      	ldrb	r2, [r3, #2]
  403208:	4b68      	ldr	r3, [pc, #416]	; (4033ac <udc_process_setup+0x430>)
  40320a:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  40320c:	2a00      	cmp	r2, #0
  40320e:	d0b4      	beq.n	40317a <udc_process_setup+0x1fe>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  403210:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  403214:	4413      	add	r3, r2
  403216:	4a63      	ldr	r2, [pc, #396]	; (4033a4 <udc_process_setup+0x428>)
  403218:	6852      	ldr	r2, [r2, #4]
  40321a:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  40321e:	4964      	ldr	r1, [pc, #400]	; (4033b0 <udc_process_setup+0x434>)
  403220:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403222:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  403226:	791b      	ldrb	r3, [r3, #4]
  403228:	2b00      	cmp	r3, #0
  40322a:	d0a6      	beq.n	40317a <udc_process_setup+0x1fe>
  40322c:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  40322e:	4626      	mov	r6, r4
  403230:	4d60      	ldr	r5, [pc, #384]	; (4033b4 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403232:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  403234:	4631      	mov	r1, r6
  403236:	4620      	mov	r0, r4
  403238:	47a8      	blx	r5
  40323a:	2800      	cmp	r0, #0
  40323c:	f43f aeac 	beq.w	402f98 <udc_process_setup+0x1c>
			iface_num++) {
  403240:	3401      	adds	r4, #1
  403242:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403244:	683b      	ldr	r3, [r7, #0]
  403246:	681b      	ldr	r3, [r3, #0]
  403248:	791b      	ldrb	r3, [r3, #4]
  40324a:	42a3      	cmp	r3, r4
  40324c:	d8f2      	bhi.n	403234 <udc_process_setup+0x2b8>
  40324e:	e794      	b.n	40317a <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  403250:	2b01      	cmp	r3, #1
  403252:	d00a      	beq.n	40326a <udc_process_setup+0x2ee>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  403254:	2b02      	cmp	r3, #2
  403256:	f47f ae9f 	bne.w	402f98 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  40325a:	4b50      	ldr	r3, [pc, #320]	; (40339c <udc_process_setup+0x420>)
  40325c:	785b      	ldrb	r3, [r3, #1]
  40325e:	2b01      	cmp	r3, #1
  403260:	d02b      	beq.n	4032ba <udc_process_setup+0x33e>
  403262:	2b03      	cmp	r3, #3
  403264:	d039      	beq.n	4032da <udc_process_setup+0x35e>
	return false;
  403266:	2300      	movs	r3, #0
  403268:	e04d      	b.n	403306 <udc_process_setup+0x38a>
			switch (udd_g_ctrlreq.req.bRequest) {
  40326a:	4a4c      	ldr	r2, [pc, #304]	; (40339c <udc_process_setup+0x420>)
  40326c:	7852      	ldrb	r2, [r2, #1]
  40326e:	2a0b      	cmp	r2, #11
  403270:	d1f0      	bne.n	403254 <udc_process_setup+0x2d8>
	if (udd_g_ctrlreq.req.wLength) {
  403272:	4b4a      	ldr	r3, [pc, #296]	; (40339c <udc_process_setup+0x420>)
  403274:	88db      	ldrh	r3, [r3, #6]
  403276:	b913      	cbnz	r3, 40327e <udc_process_setup+0x302>
	if (!udc_num_configuration) {
  403278:	4b4c      	ldr	r3, [pc, #304]	; (4033ac <udc_process_setup+0x430>)
  40327a:	781b      	ldrb	r3, [r3, #0]
  40327c:	b973      	cbnz	r3, 40329c <udc_process_setup+0x320>
	if (0 == udc_num_configuration) {
  40327e:	4b4b      	ldr	r3, [pc, #300]	; (4033ac <udc_process_setup+0x430>)
  403280:	781b      	ldrb	r3, [r3, #0]
  403282:	2b00      	cmp	r3, #0
  403284:	f000 8088 	beq.w	403398 <udc_process_setup+0x41c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  403288:	4b44      	ldr	r3, [pc, #272]	; (40339c <udc_process_setup+0x420>)
  40328a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40328c:	4b48      	ldr	r3, [pc, #288]	; (4033b0 <udc_process_setup+0x434>)
  40328e:	681d      	ldr	r5, [r3, #0]
  403290:	682b      	ldr	r3, [r5, #0]
  403292:	791b      	ldrb	r3, [r3, #4]
  403294:	42a3      	cmp	r3, r4
  403296:	d83a      	bhi.n	40330e <udc_process_setup+0x392>
	return false;
  403298:	2300      	movs	r3, #0
  40329a:	e68c      	b.n	402fb6 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40329c:	4b3f      	ldr	r3, [pc, #252]	; (40339c <udc_process_setup+0x420>)
  40329e:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  4032a0:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  4032a2:	4620      	mov	r0, r4
  4032a4:	4b44      	ldr	r3, [pc, #272]	; (4033b8 <udc_process_setup+0x43c>)
  4032a6:	4798      	blx	r3
  4032a8:	2800      	cmp	r0, #0
  4032aa:	f43f ae75 	beq.w	402f98 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  4032ae:	b2e9      	uxtb	r1, r5
  4032b0:	4620      	mov	r0, r4
  4032b2:	4b40      	ldr	r3, [pc, #256]	; (4033b4 <udc_process_setup+0x438>)
  4032b4:	4798      	blx	r3
  4032b6:	4603      	mov	r3, r0
  4032b8:	e025      	b.n	403306 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength) {
  4032ba:	4b38      	ldr	r3, [pc, #224]	; (40339c <udc_process_setup+0x420>)
  4032bc:	88db      	ldrh	r3, [r3, #6]
  4032be:	2b00      	cmp	r3, #0
  4032c0:	f47f ae71 	bne.w	402fa6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4032c4:	4b35      	ldr	r3, [pc, #212]	; (40339c <udc_process_setup+0x420>)
  4032c6:	885b      	ldrh	r3, [r3, #2]
  4032c8:	2b00      	cmp	r3, #0
  4032ca:	f47f ae6c 	bne.w	402fa6 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4032ce:	4b33      	ldr	r3, [pc, #204]	; (40339c <udc_process_setup+0x420>)
  4032d0:	7918      	ldrb	r0, [r3, #4]
  4032d2:	4b3a      	ldr	r3, [pc, #232]	; (4033bc <udc_process_setup+0x440>)
  4032d4:	4798      	blx	r3
  4032d6:	4603      	mov	r3, r0
  4032d8:	e015      	b.n	403306 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength) {
  4032da:	4b30      	ldr	r3, [pc, #192]	; (40339c <udc_process_setup+0x420>)
  4032dc:	88db      	ldrh	r3, [r3, #6]
  4032de:	2b00      	cmp	r3, #0
  4032e0:	f47f ae61 	bne.w	402fa6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4032e4:	4b2d      	ldr	r3, [pc, #180]	; (40339c <udc_process_setup+0x420>)
  4032e6:	885b      	ldrh	r3, [r3, #2]
  4032e8:	2b00      	cmp	r3, #0
  4032ea:	f47f ae5c 	bne.w	402fa6 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  4032ee:	4c2b      	ldr	r4, [pc, #172]	; (40339c <udc_process_setup+0x420>)
  4032f0:	7920      	ldrb	r0, [r4, #4]
  4032f2:	4b33      	ldr	r3, [pc, #204]	; (4033c0 <udc_process_setup+0x444>)
  4032f4:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4032f6:	7920      	ldrb	r0, [r4, #4]
  4032f8:	4b32      	ldr	r3, [pc, #200]	; (4033c4 <udc_process_setup+0x448>)
  4032fa:	4798      	blx	r3
  4032fc:	4603      	mov	r3, r0
  4032fe:	e002      	b.n	403306 <udc_process_setup+0x38a>
		return false;
  403300:	2300      	movs	r3, #0
  403302:	e000      	b.n	403306 <udc_process_setup+0x38a>
				return udc_req_std_dev_set_feature();
  403304:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  403306:	2b00      	cmp	r3, #0
  403308:	f47f ae55 	bne.w	402fb6 <udc_process_setup+0x3a>
  40330c:	e644      	b.n	402f98 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  40330e:	2100      	movs	r1, #0
  403310:	4620      	mov	r0, r4
  403312:	4b2d      	ldr	r3, [pc, #180]	; (4033c8 <udc_process_setup+0x44c>)
  403314:	4798      	blx	r3
  403316:	2800      	cmp	r0, #0
  403318:	f43f ae45 	beq.w	402fa6 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  40331c:	686b      	ldr	r3, [r5, #4]
  40331e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  403322:	68eb      	ldr	r3, [r5, #12]
  403324:	4798      	blx	r3
  403326:	4601      	mov	r1, r0
  403328:	4620      	mov	r0, r4
  40332a:	4b27      	ldr	r3, [pc, #156]	; (4033c8 <udc_process_setup+0x44c>)
  40332c:	4798      	blx	r3
  40332e:	2800      	cmp	r0, #0
  403330:	f43f ae39 	beq.w	402fa6 <udc_process_setup+0x2a>
	return udi_api->setup();
  403334:	68ab      	ldr	r3, [r5, #8]
  403336:	4798      	blx	r3
		if (udc_req_iface()) {
  403338:	4603      	mov	r3, r0
  40333a:	2800      	cmp	r0, #0
  40333c:	f47f ae3b 	bne.w	402fb6 <udc_process_setup+0x3a>
  403340:	e631      	b.n	402fa6 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  403342:	4b1a      	ldr	r3, [pc, #104]	; (4033ac <udc_process_setup+0x430>)
  403344:	781b      	ldrb	r3, [r3, #0]
  403346:	b30b      	cbz	r3, 40338c <udc_process_setup+0x410>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403348:	4b19      	ldr	r3, [pc, #100]	; (4033b0 <udc_process_setup+0x434>)
  40334a:	681a      	ldr	r2, [r3, #0]
  40334c:	6813      	ldr	r3, [r2, #0]
  40334e:	791b      	ldrb	r3, [r3, #4]
  403350:	b1f3      	cbz	r3, 403390 <udc_process_setup+0x414>
  403352:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  403354:	4e1c      	ldr	r6, [pc, #112]	; (4033c8 <udc_process_setup+0x44c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403356:	4f16      	ldr	r7, [pc, #88]	; (4033b0 <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  403358:	6853      	ldr	r3, [r2, #4]
  40335a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40335e:	68eb      	ldr	r3, [r5, #12]
  403360:	4798      	blx	r3
  403362:	4601      	mov	r1, r0
  403364:	4620      	mov	r0, r4
  403366:	47b0      	blx	r6
  403368:	4603      	mov	r3, r0
  40336a:	2800      	cmp	r0, #0
  40336c:	f43f ae23 	beq.w	402fb6 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  403370:	68ab      	ldr	r3, [r5, #8]
  403372:	4798      	blx	r3
  403374:	4603      	mov	r3, r0
  403376:	2800      	cmp	r0, #0
  403378:	f47f ae1d 	bne.w	402fb6 <udc_process_setup+0x3a>
			iface_num++) {
  40337c:	3401      	adds	r4, #1
  40337e:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403380:	683a      	ldr	r2, [r7, #0]
  403382:	6811      	ldr	r1, [r2, #0]
  403384:	7909      	ldrb	r1, [r1, #4]
  403386:	42a1      	cmp	r1, r4
  403388:	d8e6      	bhi.n	403358 <udc_process_setup+0x3dc>
  40338a:	e614      	b.n	402fb6 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  40338c:	2300      	movs	r3, #0
  40338e:	e612      	b.n	402fb6 <udc_process_setup+0x3a>
	return false;
  403390:	2300      	movs	r3, #0
  403392:	e610      	b.n	402fb6 <udc_process_setup+0x3a>
			return false; // Error from USB host
  403394:	2300      	movs	r3, #0
  403396:	e60e      	b.n	402fb6 <udc_process_setup+0x3a>
	return false;
  403398:	2300      	movs	r3, #0
  40339a:	e60c      	b.n	402fb6 <udc_process_setup+0x3a>
  40339c:	20400f18 	.word	0x20400f18
  4033a0:	00404815 	.word	0x00404815
  4033a4:	204000ac 	.word	0x204000ac
  4033a8:	00402ef5 	.word	0x00402ef5
  4033ac:	20400ba0 	.word	0x20400ba0
  4033b0:	20400ba4 	.word	0x20400ba4
  4033b4:	00402e81 	.word	0x00402e81
  4033b8:	00402e15 	.word	0x00402e15
  4033bc:	004049b5 	.word	0x004049b5
  4033c0:	00404d95 	.word	0x00404d95
  4033c4:	004048b1 	.word	0x004048b1
  4033c8:	00402da1 	.word	0x00402da1

004033cc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4033cc:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4033ce:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4033d2:	d03a      	beq.n	40344a <pio_set_peripheral+0x7e>
  4033d4:	d813      	bhi.n	4033fe <pio_set_peripheral+0x32>
  4033d6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4033da:	d025      	beq.n	403428 <pio_set_peripheral+0x5c>
  4033dc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4033e0:	d10a      	bne.n	4033f8 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4033e2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4033e4:	4313      	orrs	r3, r2
  4033e6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4033e8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4033ea:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4033ec:	400b      	ands	r3, r1
  4033ee:	ea23 0302 	bic.w	r3, r3, r2
  4033f2:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4033f4:	6042      	str	r2, [r0, #4]
  4033f6:	4770      	bx	lr
	switch (ul_type) {
  4033f8:	2900      	cmp	r1, #0
  4033fa:	d1fb      	bne.n	4033f4 <pio_set_peripheral+0x28>
  4033fc:	4770      	bx	lr
  4033fe:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  403402:	d021      	beq.n	403448 <pio_set_peripheral+0x7c>
  403404:	d809      	bhi.n	40341a <pio_set_peripheral+0x4e>
  403406:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40340a:	d1f3      	bne.n	4033f4 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40340c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40340e:	4313      	orrs	r3, r2
  403410:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403412:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403414:	4313      	orrs	r3, r2
  403416:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403418:	e7ec      	b.n	4033f4 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40341a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40341e:	d013      	beq.n	403448 <pio_set_peripheral+0x7c>
  403420:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  403424:	d010      	beq.n	403448 <pio_set_peripheral+0x7c>
  403426:	e7e5      	b.n	4033f4 <pio_set_peripheral+0x28>
{
  403428:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40342a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40342c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40342e:	43d3      	mvns	r3, r2
  403430:	4021      	ands	r1, r4
  403432:	461c      	mov	r4, r3
  403434:	4019      	ands	r1, r3
  403436:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403438:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40343a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40343c:	400b      	ands	r3, r1
  40343e:	4023      	ands	r3, r4
  403440:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  403442:	6042      	str	r2, [r0, #4]
}
  403444:	f85d 4b04 	ldr.w	r4, [sp], #4
  403448:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40344a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40344c:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40344e:	400b      	ands	r3, r1
  403450:	ea23 0302 	bic.w	r3, r3, r2
  403454:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403456:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403458:	4313      	orrs	r3, r2
  40345a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40345c:	e7ca      	b.n	4033f4 <pio_set_peripheral+0x28>

0040345e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40345e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  403460:	f012 0f01 	tst.w	r2, #1
  403464:	d10d      	bne.n	403482 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  403466:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  403468:	f012 0f0a 	tst.w	r2, #10
  40346c:	d00b      	beq.n	403486 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40346e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  403470:	f012 0f02 	tst.w	r2, #2
  403474:	d109      	bne.n	40348a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  403476:	f012 0f08 	tst.w	r2, #8
  40347a:	d008      	beq.n	40348e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40347c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  403480:	e005      	b.n	40348e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  403482:	6641      	str	r1, [r0, #100]	; 0x64
  403484:	e7f0      	b.n	403468 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  403486:	6241      	str	r1, [r0, #36]	; 0x24
  403488:	e7f2      	b.n	403470 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40348a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40348e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  403490:	6001      	str	r1, [r0, #0]
  403492:	4770      	bx	lr

00403494 <pio_set_output>:
{
  403494:	b410      	push	{r4}
  403496:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  403498:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40349a:	b94c      	cbnz	r4, 4034b0 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40349c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40349e:	b14b      	cbz	r3, 4034b4 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4034a0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4034a2:	b94a      	cbnz	r2, 4034b8 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4034a4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4034a6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4034a8:	6001      	str	r1, [r0, #0]
}
  4034aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4034ae:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4034b0:	6641      	str	r1, [r0, #100]	; 0x64
  4034b2:	e7f4      	b.n	40349e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4034b4:	6541      	str	r1, [r0, #84]	; 0x54
  4034b6:	e7f4      	b.n	4034a2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4034b8:	6301      	str	r1, [r0, #48]	; 0x30
  4034ba:	e7f4      	b.n	4034a6 <pio_set_output+0x12>

004034bc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4034bc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4034be:	4770      	bx	lr

004034c0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4034c0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4034c2:	4770      	bx	lr

004034c4 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4034c4:	4b05      	ldr	r3, [pc, #20]	; (4034dc <pio_set_pin_high+0x18>)
  4034c6:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4034ca:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4034cc:	f000 001f 	and.w	r0, r0, #31
  4034d0:	2201      	movs	r2, #1
  4034d2:	fa02 f000 	lsl.w	r0, r2, r0
  4034d6:	6318      	str	r0, [r3, #48]	; 0x30
  4034d8:	4770      	bx	lr
  4034da:	bf00      	nop
  4034dc:	00200707 	.word	0x00200707

004034e0 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4034e0:	4b05      	ldr	r3, [pc, #20]	; (4034f8 <pio_set_pin_low+0x18>)
  4034e2:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4034e6:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4034e8:	f000 001f 	and.w	r0, r0, #31
  4034ec:	2201      	movs	r2, #1
  4034ee:	fa02 f000 	lsl.w	r0, r2, r0
  4034f2:	6358      	str	r0, [r3, #52]	; 0x34
  4034f4:	4770      	bx	lr
  4034f6:	bf00      	nop
  4034f8:	00200707 	.word	0x00200707

004034fc <pio_configure_pin>:
{
  4034fc:	b570      	push	{r4, r5, r6, lr}
  4034fe:	b082      	sub	sp, #8
  403500:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403502:	4c46      	ldr	r4, [pc, #280]	; (40361c <pio_configure_pin+0x120>)
  403504:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  403508:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40350a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40350e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403512:	d059      	beq.n	4035c8 <pio_configure_pin+0xcc>
  403514:	d80a      	bhi.n	40352c <pio_configure_pin+0x30>
  403516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40351a:	d02f      	beq.n	40357c <pio_configure_pin+0x80>
  40351c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403520:	d03f      	beq.n	4035a2 <pio_configure_pin+0xa6>
  403522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403526:	d016      	beq.n	403556 <pio_configure_pin+0x5a>
		return 0;
  403528:	2000      	movs	r0, #0
  40352a:	e012      	b.n	403552 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  40352c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403530:	d05d      	beq.n	4035ee <pio_configure_pin+0xf2>
  403532:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403536:	d05a      	beq.n	4035ee <pio_configure_pin+0xf2>
  403538:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40353c:	d1f4      	bne.n	403528 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40353e:	f000 011f 	and.w	r1, r0, #31
  403542:	2601      	movs	r6, #1
  403544:	462a      	mov	r2, r5
  403546:	fa06 f101 	lsl.w	r1, r6, r1
  40354a:	4620      	mov	r0, r4
  40354c:	4b34      	ldr	r3, [pc, #208]	; (403620 <pio_configure_pin+0x124>)
  40354e:	4798      	blx	r3
	return 1;
  403550:	4630      	mov	r0, r6
}
  403552:	b002      	add	sp, #8
  403554:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  403556:	f000 001f 	and.w	r0, r0, #31
  40355a:	2601      	movs	r6, #1
  40355c:	4086      	lsls	r6, r0
  40355e:	4632      	mov	r2, r6
  403560:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403564:	4620      	mov	r0, r4
  403566:	4b2f      	ldr	r3, [pc, #188]	; (403624 <pio_configure_pin+0x128>)
  403568:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40356a:	f015 0f01 	tst.w	r5, #1
  40356e:	d102      	bne.n	403576 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  403570:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  403572:	2001      	movs	r0, #1
  403574:	e7ed      	b.n	403552 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  403576:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  403578:	2001      	movs	r0, #1
  40357a:	e7ea      	b.n	403552 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40357c:	f000 001f 	and.w	r0, r0, #31
  403580:	2601      	movs	r6, #1
  403582:	4086      	lsls	r6, r0
  403584:	4632      	mov	r2, r6
  403586:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40358a:	4620      	mov	r0, r4
  40358c:	4b25      	ldr	r3, [pc, #148]	; (403624 <pio_configure_pin+0x128>)
  40358e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  403590:	f015 0f01 	tst.w	r5, #1
  403594:	d102      	bne.n	40359c <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  403596:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  403598:	2001      	movs	r0, #1
  40359a:	e7da      	b.n	403552 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40359c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40359e:	2001      	movs	r0, #1
  4035a0:	e7d7      	b.n	403552 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4035a2:	f000 001f 	and.w	r0, r0, #31
  4035a6:	2601      	movs	r6, #1
  4035a8:	4086      	lsls	r6, r0
  4035aa:	4632      	mov	r2, r6
  4035ac:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4035b0:	4620      	mov	r0, r4
  4035b2:	4b1c      	ldr	r3, [pc, #112]	; (403624 <pio_configure_pin+0x128>)
  4035b4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4035b6:	f015 0f01 	tst.w	r5, #1
  4035ba:	d102      	bne.n	4035c2 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4035bc:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4035be:	2001      	movs	r0, #1
  4035c0:	e7c7      	b.n	403552 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4035c2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4035c4:	2001      	movs	r0, #1
  4035c6:	e7c4      	b.n	403552 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4035c8:	f000 001f 	and.w	r0, r0, #31
  4035cc:	2601      	movs	r6, #1
  4035ce:	4086      	lsls	r6, r0
  4035d0:	4632      	mov	r2, r6
  4035d2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4035d6:	4620      	mov	r0, r4
  4035d8:	4b12      	ldr	r3, [pc, #72]	; (403624 <pio_configure_pin+0x128>)
  4035da:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4035dc:	f015 0f01 	tst.w	r5, #1
  4035e0:	d102      	bne.n	4035e8 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4035e2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4035e4:	2001      	movs	r0, #1
  4035e6:	e7b4      	b.n	403552 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4035e8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4035ea:	2001      	movs	r0, #1
  4035ec:	e7b1      	b.n	403552 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4035ee:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4035f2:	f000 011f 	and.w	r1, r0, #31
  4035f6:	2601      	movs	r6, #1
  4035f8:	ea05 0306 	and.w	r3, r5, r6
  4035fc:	9300      	str	r3, [sp, #0]
  4035fe:	f3c5 0380 	ubfx	r3, r5, #2, #1
  403602:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  403606:	bf14      	ite	ne
  403608:	2200      	movne	r2, #0
  40360a:	2201      	moveq	r2, #1
  40360c:	fa06 f101 	lsl.w	r1, r6, r1
  403610:	4620      	mov	r0, r4
  403612:	4c05      	ldr	r4, [pc, #20]	; (403628 <pio_configure_pin+0x12c>)
  403614:	47a0      	blx	r4
	return 1;
  403616:	4630      	mov	r0, r6
		break;
  403618:	e79b      	b.n	403552 <pio_configure_pin+0x56>
  40361a:	bf00      	nop
  40361c:	00200707 	.word	0x00200707
  403620:	0040345f 	.word	0x0040345f
  403624:	004033cd 	.word	0x004033cd
  403628:	00403495 	.word	0x00403495

0040362c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403630:	4604      	mov	r4, r0
  403632:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  403634:	4b0e      	ldr	r3, [pc, #56]	; (403670 <pio_handler_process+0x44>)
  403636:	4798      	blx	r3
  403638:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40363a:	4620      	mov	r0, r4
  40363c:	4b0d      	ldr	r3, [pc, #52]	; (403674 <pio_handler_process+0x48>)
  40363e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  403640:	4005      	ands	r5, r0
  403642:	d013      	beq.n	40366c <pio_handler_process+0x40>
  403644:	4c0c      	ldr	r4, [pc, #48]	; (403678 <pio_handler_process+0x4c>)
  403646:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40364a:	e003      	b.n	403654 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40364c:	42b4      	cmp	r4, r6
  40364e:	d00d      	beq.n	40366c <pio_handler_process+0x40>
  403650:	3410      	adds	r4, #16
		while (status != 0) {
  403652:	b15d      	cbz	r5, 40366c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  403654:	6820      	ldr	r0, [r4, #0]
  403656:	4540      	cmp	r0, r8
  403658:	d1f8      	bne.n	40364c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40365a:	6861      	ldr	r1, [r4, #4]
  40365c:	4229      	tst	r1, r5
  40365e:	d0f5      	beq.n	40364c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403660:	68e3      	ldr	r3, [r4, #12]
  403662:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  403664:	6863      	ldr	r3, [r4, #4]
  403666:	ea25 0503 	bic.w	r5, r5, r3
  40366a:	e7ef      	b.n	40364c <pio_handler_process+0x20>
  40366c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403670:	004034bd 	.word	0x004034bd
  403674:	004034c1 	.word	0x004034c1
  403678:	20400bac 	.word	0x20400bac

0040367c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40367c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40367e:	210a      	movs	r1, #10
  403680:	4801      	ldr	r0, [pc, #4]	; (403688 <PIOA_Handler+0xc>)
  403682:	4b02      	ldr	r3, [pc, #8]	; (40368c <PIOA_Handler+0x10>)
  403684:	4798      	blx	r3
  403686:	bd08      	pop	{r3, pc}
  403688:	400e0e00 	.word	0x400e0e00
  40368c:	0040362d 	.word	0x0040362d

00403690 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403690:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  403692:	210b      	movs	r1, #11
  403694:	4801      	ldr	r0, [pc, #4]	; (40369c <PIOB_Handler+0xc>)
  403696:	4b02      	ldr	r3, [pc, #8]	; (4036a0 <PIOB_Handler+0x10>)
  403698:	4798      	blx	r3
  40369a:	bd08      	pop	{r3, pc}
  40369c:	400e1000 	.word	0x400e1000
  4036a0:	0040362d 	.word	0x0040362d

004036a4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4036a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4036a6:	210c      	movs	r1, #12
  4036a8:	4801      	ldr	r0, [pc, #4]	; (4036b0 <PIOC_Handler+0xc>)
  4036aa:	4b02      	ldr	r3, [pc, #8]	; (4036b4 <PIOC_Handler+0x10>)
  4036ac:	4798      	blx	r3
  4036ae:	bd08      	pop	{r3, pc}
  4036b0:	400e1200 	.word	0x400e1200
  4036b4:	0040362d 	.word	0x0040362d

004036b8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4036b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4036ba:	2110      	movs	r1, #16
  4036bc:	4801      	ldr	r0, [pc, #4]	; (4036c4 <PIOD_Handler+0xc>)
  4036be:	4b02      	ldr	r3, [pc, #8]	; (4036c8 <PIOD_Handler+0x10>)
  4036c0:	4798      	blx	r3
  4036c2:	bd08      	pop	{r3, pc}
  4036c4:	400e1400 	.word	0x400e1400
  4036c8:	0040362d 	.word	0x0040362d

004036cc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4036cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4036ce:	2111      	movs	r1, #17
  4036d0:	4801      	ldr	r0, [pc, #4]	; (4036d8 <PIOE_Handler+0xc>)
  4036d2:	4b02      	ldr	r3, [pc, #8]	; (4036dc <PIOE_Handler+0x10>)
  4036d4:	4798      	blx	r3
  4036d6:	bd08      	pop	{r3, pc}
  4036d8:	400e1600 	.word	0x400e1600
  4036dc:	0040362d 	.word	0x0040362d

004036e0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4036e0:	2803      	cmp	r0, #3
  4036e2:	d011      	beq.n	403708 <pmc_mck_set_division+0x28>
  4036e4:	2804      	cmp	r0, #4
  4036e6:	d012      	beq.n	40370e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4036e8:	2802      	cmp	r0, #2
  4036ea:	bf0c      	ite	eq
  4036ec:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4036f0:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4036f2:	4a08      	ldr	r2, [pc, #32]	; (403714 <pmc_mck_set_division+0x34>)
  4036f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4036f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4036fa:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4036fc:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4036fe:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403700:	f013 0f08 	tst.w	r3, #8
  403704:	d0fb      	beq.n	4036fe <pmc_mck_set_division+0x1e>
}
  403706:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  403708:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40370c:	e7f1      	b.n	4036f2 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40370e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  403712:	e7ee      	b.n	4036f2 <pmc_mck_set_division+0x12>
  403714:	400e0600 	.word	0x400e0600

00403718 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403718:	4a17      	ldr	r2, [pc, #92]	; (403778 <pmc_switch_mck_to_pllack+0x60>)
  40371a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40371c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403720:	4318      	orrs	r0, r3
  403722:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403724:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403726:	f013 0f08 	tst.w	r3, #8
  40372a:	d10a      	bne.n	403742 <pmc_switch_mck_to_pllack+0x2a>
  40372c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403730:	4911      	ldr	r1, [pc, #68]	; (403778 <pmc_switch_mck_to_pllack+0x60>)
  403732:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403734:	f012 0f08 	tst.w	r2, #8
  403738:	d103      	bne.n	403742 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40373a:	3b01      	subs	r3, #1
  40373c:	d1f9      	bne.n	403732 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40373e:	2001      	movs	r0, #1
  403740:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  403742:	4a0d      	ldr	r2, [pc, #52]	; (403778 <pmc_switch_mck_to_pllack+0x60>)
  403744:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403746:	f023 0303 	bic.w	r3, r3, #3
  40374a:	f043 0302 	orr.w	r3, r3, #2
  40374e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403750:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403752:	f013 0f08 	tst.w	r3, #8
  403756:	d10a      	bne.n	40376e <pmc_switch_mck_to_pllack+0x56>
  403758:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40375c:	4906      	ldr	r1, [pc, #24]	; (403778 <pmc_switch_mck_to_pllack+0x60>)
  40375e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403760:	f012 0f08 	tst.w	r2, #8
  403764:	d105      	bne.n	403772 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403766:	3b01      	subs	r3, #1
  403768:	d1f9      	bne.n	40375e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40376a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40376c:	4770      	bx	lr
	return 0;
  40376e:	2000      	movs	r0, #0
  403770:	4770      	bx	lr
  403772:	2000      	movs	r0, #0
  403774:	4770      	bx	lr
  403776:	bf00      	nop
  403778:	400e0600 	.word	0x400e0600

0040377c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40377c:	b9a0      	cbnz	r0, 4037a8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40377e:	480e      	ldr	r0, [pc, #56]	; (4037b8 <pmc_switch_mainck_to_xtal+0x3c>)
  403780:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  403782:	0209      	lsls	r1, r1, #8
  403784:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  403786:	4a0d      	ldr	r2, [pc, #52]	; (4037bc <pmc_switch_mainck_to_xtal+0x40>)
  403788:	401a      	ands	r2, r3
  40378a:	4b0d      	ldr	r3, [pc, #52]	; (4037c0 <pmc_switch_mainck_to_xtal+0x44>)
  40378c:	4313      	orrs	r3, r2
  40378e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403790:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  403792:	4602      	mov	r2, r0
  403794:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403796:	f013 0f01 	tst.w	r3, #1
  40379a:	d0fb      	beq.n	403794 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40379c:	4a06      	ldr	r2, [pc, #24]	; (4037b8 <pmc_switch_mainck_to_xtal+0x3c>)
  40379e:	6a11      	ldr	r1, [r2, #32]
  4037a0:	4b08      	ldr	r3, [pc, #32]	; (4037c4 <pmc_switch_mainck_to_xtal+0x48>)
  4037a2:	430b      	orrs	r3, r1
  4037a4:	6213      	str	r3, [r2, #32]
  4037a6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4037a8:	4903      	ldr	r1, [pc, #12]	; (4037b8 <pmc_switch_mainck_to_xtal+0x3c>)
  4037aa:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4037ac:	4a06      	ldr	r2, [pc, #24]	; (4037c8 <pmc_switch_mainck_to_xtal+0x4c>)
  4037ae:	401a      	ands	r2, r3
  4037b0:	4b06      	ldr	r3, [pc, #24]	; (4037cc <pmc_switch_mainck_to_xtal+0x50>)
  4037b2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4037b4:	620b      	str	r3, [r1, #32]
  4037b6:	4770      	bx	lr
  4037b8:	400e0600 	.word	0x400e0600
  4037bc:	ffc8fffc 	.word	0xffc8fffc
  4037c0:	00370001 	.word	0x00370001
  4037c4:	01370000 	.word	0x01370000
  4037c8:	fec8fffc 	.word	0xfec8fffc
  4037cc:	01370002 	.word	0x01370002

004037d0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4037d0:	4b02      	ldr	r3, [pc, #8]	; (4037dc <pmc_osc_is_ready_mainck+0xc>)
  4037d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4037d4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4037d8:	4770      	bx	lr
  4037da:	bf00      	nop
  4037dc:	400e0600 	.word	0x400e0600

004037e0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4037e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4037e4:	4b01      	ldr	r3, [pc, #4]	; (4037ec <pmc_disable_pllack+0xc>)
  4037e6:	629a      	str	r2, [r3, #40]	; 0x28
  4037e8:	4770      	bx	lr
  4037ea:	bf00      	nop
  4037ec:	400e0600 	.word	0x400e0600

004037f0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4037f0:	4b02      	ldr	r3, [pc, #8]	; (4037fc <pmc_is_locked_pllack+0xc>)
  4037f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4037f4:	f000 0002 	and.w	r0, r0, #2
  4037f8:	4770      	bx	lr
  4037fa:	bf00      	nop
  4037fc:	400e0600 	.word	0x400e0600

00403800 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
  403800:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
  403804:	4b03      	ldr	r3, [pc, #12]	; (403814 <pmc_enable_upll_clock+0x14>)
  403806:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
  403808:	461a      	mov	r2, r3
  40380a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40380c:	f013 0f40 	tst.w	r3, #64	; 0x40
  403810:	d0fb      	beq.n	40380a <pmc_enable_upll_clock+0xa>
}
  403812:	4770      	bx	lr
  403814:	400e0600 	.word	0x400e0600

00403818 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  403818:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40381c:	4b05      	ldr	r3, [pc, #20]	; (403834 <pmc_enable_periph_clk+0x1c>)
  40381e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  403822:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  403826:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  40382a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40382e:	2000      	movs	r0, #0
  403830:	4770      	bx	lr
  403832:	bf00      	nop
  403834:	400e0600 	.word	0x400e0600

00403838 <pmc_switch_udpck_to_upllck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
  403838:	0200      	lsls	r0, r0, #8
  40383a:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  40383e:	f040 0001 	orr.w	r0, r0, #1
  403842:	4b01      	ldr	r3, [pc, #4]	; (403848 <pmc_switch_udpck_to_upllck+0x10>)
  403844:	6398      	str	r0, [r3, #56]	; 0x38
  403846:	4770      	bx	lr
  403848:	400e0600 	.word	0x400e0600

0040384c <pmc_enable_udpck>:
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
  40384c:	2220      	movs	r2, #32
  40384e:	4b01      	ldr	r3, [pc, #4]	; (403854 <pmc_enable_udpck+0x8>)
  403850:	601a      	str	r2, [r3, #0]
  403852:	4770      	bx	lr
  403854:	400e0600 	.word	0x400e0600

00403858 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  403858:	4b03      	ldr	r3, [pc, #12]	; (403868 <pmc_set_fast_startup_input+0x10>)
  40385a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  40385c:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  403860:	4310      	orrs	r0, r2
  403862:	6718      	str	r0, [r3, #112]	; 0x70
  403864:	4770      	bx	lr
  403866:	bf00      	nop
  403868:	400e0600 	.word	0x400e0600

0040386c <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  40386c:	4770      	bx	lr
	...

00403870 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  403870:	4a10      	ldr	r2, [pc, #64]	; (4038b4 <pmc_enable_waitmode+0x44>)
  403872:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  403874:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  403878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  40387c:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  40387e:	6a11      	ldr	r1, [r2, #32]
  403880:	4b0d      	ldr	r3, [pc, #52]	; (4038b8 <pmc_enable_waitmode+0x48>)
  403882:	430b      	orrs	r3, r1
  403884:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403886:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403888:	f013 0f08 	tst.w	r3, #8
  40388c:	d0fb      	beq.n	403886 <pmc_enable_waitmode+0x16>
  40388e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  403892:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  403894:	3b01      	subs	r3, #1
  403896:	d1fc      	bne.n	403892 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  403898:	4a06      	ldr	r2, [pc, #24]	; (4038b4 <pmc_enable_waitmode+0x44>)
  40389a:	6a13      	ldr	r3, [r2, #32]
  40389c:	f013 0f08 	tst.w	r3, #8
  4038a0:	d0fb      	beq.n	40389a <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4038a2:	4a04      	ldr	r2, [pc, #16]	; (4038b4 <pmc_enable_waitmode+0x44>)
  4038a4:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4038a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4038aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4038ae:	6713      	str	r3, [r2, #112]	; 0x70
  4038b0:	4770      	bx	lr
  4038b2:	bf00      	nop
  4038b4:	400e0600 	.word	0x400e0600
  4038b8:	00370004 	.word	0x00370004

004038bc <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4038bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  4038c0:	1e43      	subs	r3, r0, #1
  4038c2:	2b04      	cmp	r3, #4
  4038c4:	f200 8107 	bhi.w	403ad6 <pmc_sleep+0x21a>
  4038c8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4038cc:	00050005 	.word	0x00050005
  4038d0:	00150015 	.word	0x00150015
  4038d4:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4038d6:	4a81      	ldr	r2, [pc, #516]	; (403adc <pmc_sleep+0x220>)
  4038d8:	6913      	ldr	r3, [r2, #16]
  4038da:	f023 0304 	bic.w	r3, r3, #4
  4038de:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  4038e0:	2201      	movs	r2, #1
  4038e2:	4b7f      	ldr	r3, [pc, #508]	; (403ae0 <pmc_sleep+0x224>)
  4038e4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4038e6:	f3bf 8f5f 	dmb	sy
  4038ea:	b662      	cpsie	i
  __ASM volatile ("dsb");
  4038ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  4038f0:	bf30      	wfi
  4038f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4038f6:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  4038f8:	2803      	cmp	r0, #3
  4038fa:	bf0c      	ite	eq
  4038fc:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  4038fe:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  403902:	4b78      	ldr	r3, [pc, #480]	; (403ae4 <pmc_sleep+0x228>)
  403904:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  403906:	b672      	cpsid	i
  __ASM volatile ("dmb");
  403908:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40390c:	2200      	movs	r2, #0
  40390e:	4b74      	ldr	r3, [pc, #464]	; (403ae0 <pmc_sleep+0x224>)
  403910:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  403912:	2201      	movs	r2, #1
  403914:	4b74      	ldr	r3, [pc, #464]	; (403ae8 <pmc_sleep+0x22c>)
  403916:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  403918:	4b74      	ldr	r3, [pc, #464]	; (403aec <pmc_sleep+0x230>)
  40391a:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  40391c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40391e:	4a74      	ldr	r2, [pc, #464]	; (403af0 <pmc_sleep+0x234>)
  403920:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  403924:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  403926:	4a73      	ldr	r2, [pc, #460]	; (403af4 <pmc_sleep+0x238>)
  403928:	433a      	orrs	r2, r7
  40392a:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40392c:	f005 0903 	and.w	r9, r5, #3
  403930:	f1b9 0f01 	cmp.w	r9, #1
  403934:	f240 8089 	bls.w	403a4a <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  403938:	f025 0103 	bic.w	r1, r5, #3
  40393c:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  403940:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403942:	461a      	mov	r2, r3
  403944:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403946:	f013 0f08 	tst.w	r3, #8
  40394a:	d0fb      	beq.n	403944 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  40394c:	f011 0f70 	tst.w	r1, #112	; 0x70
  403950:	d008      	beq.n	403964 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  403952:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  403956:	4b65      	ldr	r3, [pc, #404]	; (403aec <pmc_sleep+0x230>)
  403958:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40395a:	461a      	mov	r2, r3
  40395c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40395e:	f013 0f08 	tst.w	r3, #8
  403962:	d0fb      	beq.n	40395c <pmc_sleep+0xa0>
	pmc_disable_pllack();
  403964:	4b64      	ldr	r3, [pc, #400]	; (403af8 <pmc_sleep+0x23c>)
  403966:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  403968:	4a60      	ldr	r2, [pc, #384]	; (403aec <pmc_sleep+0x230>)
  40396a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40396c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  403970:	d0fb      	beq.n	40396a <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  403972:	4a5e      	ldr	r2, [pc, #376]	; (403aec <pmc_sleep+0x230>)
  403974:	6a11      	ldr	r1, [r2, #32]
  403976:	4b61      	ldr	r3, [pc, #388]	; (403afc <pmc_sleep+0x240>)
  403978:	400b      	ands	r3, r1
  40397a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40397e:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  403980:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403982:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  403986:	d0fb      	beq.n	403980 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  403988:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  40398c:	4a58      	ldr	r2, [pc, #352]	; (403af0 <pmc_sleep+0x234>)
  40398e:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  403990:	2c04      	cmp	r4, #4
  403992:	d05c      	beq.n	403a4e <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  403994:	4c52      	ldr	r4, [pc, #328]	; (403ae0 <pmc_sleep+0x224>)
  403996:	2301      	movs	r3, #1
  403998:	7023      	strb	r3, [r4, #0]
  40399a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40399e:	b662      	cpsie	i

		pmc_enable_waitmode();
  4039a0:	4b57      	ldr	r3, [pc, #348]	; (403b00 <pmc_sleep+0x244>)
  4039a2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4039a4:	b672      	cpsid	i
  4039a6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4039aa:	2300      	movs	r3, #0
  4039ac:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4039ae:	f017 0f02 	tst.w	r7, #2
  4039b2:	d055      	beq.n	403a60 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4039b4:	4a4d      	ldr	r2, [pc, #308]	; (403aec <pmc_sleep+0x230>)
  4039b6:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4039b8:	4952      	ldr	r1, [pc, #328]	; (403b04 <pmc_sleep+0x248>)
  4039ba:	4019      	ands	r1, r3
  4039bc:	4b52      	ldr	r3, [pc, #328]	; (403b08 <pmc_sleep+0x24c>)
  4039be:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4039c0:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4039c2:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4039c4:	4b51      	ldr	r3, [pc, #324]	; (403b0c <pmc_sleep+0x250>)
  4039c6:	400b      	ands	r3, r1
  4039c8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4039cc:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4039ce:	4b50      	ldr	r3, [pc, #320]	; (403b10 <pmc_sleep+0x254>)
  4039d0:	4033      	ands	r3, r6
  4039d2:	2b00      	cmp	r3, #0
  4039d4:	d06e      	beq.n	403ab4 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  4039d6:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4039da:	4b44      	ldr	r3, [pc, #272]	; (403aec <pmc_sleep+0x230>)
  4039dc:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  4039de:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  4039e0:	f1b9 0f02 	cmp.w	r9, #2
  4039e4:	d104      	bne.n	4039f0 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4039e6:	4a41      	ldr	r2, [pc, #260]	; (403aec <pmc_sleep+0x230>)
  4039e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4039ea:	f013 0f02 	tst.w	r3, #2
  4039ee:	d0fb      	beq.n	4039e8 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  4039f0:	4a3e      	ldr	r2, [pc, #248]	; (403aec <pmc_sleep+0x230>)
  4039f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4039f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4039f8:	f005 0070 	and.w	r0, r5, #112	; 0x70
  4039fc:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4039fe:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403a00:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403a02:	f013 0f08 	tst.w	r3, #8
  403a06:	d0fb      	beq.n	403a00 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  403a08:	4b39      	ldr	r3, [pc, #228]	; (403af0 <pmc_sleep+0x234>)
  403a0a:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  403a0e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  403a12:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403a14:	461a      	mov	r2, r3
  403a16:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403a18:	f013 0f08 	tst.w	r3, #8
  403a1c:	d0fb      	beq.n	403a16 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  403a1e:	4a33      	ldr	r2, [pc, #204]	; (403aec <pmc_sleep+0x230>)
  403a20:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403a22:	420b      	tst	r3, r1
  403a24:	d0fc      	beq.n	403a20 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  403a26:	2200      	movs	r2, #0
  403a28:	4b2f      	ldr	r3, [pc, #188]	; (403ae8 <pmc_sleep+0x22c>)
  403a2a:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  403a2c:	4b39      	ldr	r3, [pc, #228]	; (403b14 <pmc_sleep+0x258>)
  403a2e:	681b      	ldr	r3, [r3, #0]
  403a30:	b11b      	cbz	r3, 403a3a <pmc_sleep+0x17e>
			callback_clocks_restored();
  403a32:	4798      	blx	r3
			callback_clocks_restored = NULL;
  403a34:	2200      	movs	r2, #0
  403a36:	4b37      	ldr	r3, [pc, #220]	; (403b14 <pmc_sleep+0x258>)
  403a38:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  403a3a:	2201      	movs	r2, #1
  403a3c:	4b28      	ldr	r3, [pc, #160]	; (403ae0 <pmc_sleep+0x224>)
  403a3e:	701a      	strb	r2, [r3, #0]
  403a40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403a44:	b662      	cpsie	i
  403a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  403a4a:	4629      	mov	r1, r5
  403a4c:	e77e      	b.n	40394c <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403a4e:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  403a52:	6a11      	ldr	r1, [r2, #32]
  403a54:	4b30      	ldr	r3, [pc, #192]	; (403b18 <pmc_sleep+0x25c>)
  403a56:	400b      	ands	r3, r1
  403a58:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403a5c:	6213      	str	r3, [r2, #32]
  403a5e:	e799      	b.n	403994 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  403a60:	f017 0f01 	tst.w	r7, #1
  403a64:	d0b3      	beq.n	4039ce <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  403a66:	4b21      	ldr	r3, [pc, #132]	; (403aec <pmc_sleep+0x230>)
  403a68:	6a1b      	ldr	r3, [r3, #32]
  403a6a:	f013 0f01 	tst.w	r3, #1
  403a6e:	d10b      	bne.n	403a88 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403a70:	491e      	ldr	r1, [pc, #120]	; (403aec <pmc_sleep+0x230>)
  403a72:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  403a74:	4a29      	ldr	r2, [pc, #164]	; (403b1c <pmc_sleep+0x260>)
  403a76:	401a      	ands	r2, r3
  403a78:	4b29      	ldr	r3, [pc, #164]	; (403b20 <pmc_sleep+0x264>)
  403a7a:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403a7c:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  403a7e:	460a      	mov	r2, r1
  403a80:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403a82:	f013 0f01 	tst.w	r3, #1
  403a86:	d0fb      	beq.n	403a80 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  403a88:	4b18      	ldr	r3, [pc, #96]	; (403aec <pmc_sleep+0x230>)
  403a8a:	6a1b      	ldr	r3, [r3, #32]
  403a8c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403a90:	d108      	bne.n	403aa4 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403a92:	4a16      	ldr	r2, [pc, #88]	; (403aec <pmc_sleep+0x230>)
  403a94:	6a11      	ldr	r1, [r2, #32]
  403a96:	4b23      	ldr	r3, [pc, #140]	; (403b24 <pmc_sleep+0x268>)
  403a98:	430b      	orrs	r3, r1
  403a9a:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  403a9c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403a9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  403aa2:	d0fb      	beq.n	403a9c <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  403aa4:	4a11      	ldr	r2, [pc, #68]	; (403aec <pmc_sleep+0x230>)
  403aa6:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  403aa8:	4b18      	ldr	r3, [pc, #96]	; (403b0c <pmc_sleep+0x250>)
  403aaa:	400b      	ands	r3, r1
  403aac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  403ab0:	6213      	str	r3, [r2, #32]
  403ab2:	e78c      	b.n	4039ce <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  403ab4:	2100      	movs	r1, #0
  403ab6:	e793      	b.n	4039e0 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  403ab8:	4a08      	ldr	r2, [pc, #32]	; (403adc <pmc_sleep+0x220>)
  403aba:	6913      	ldr	r3, [r2, #16]
  403abc:	f043 0304 	orr.w	r3, r3, #4
  403ac0:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  403ac2:	4a19      	ldr	r2, [pc, #100]	; (403b28 <pmc_sleep+0x26c>)
  403ac4:	4b19      	ldr	r3, [pc, #100]	; (403b2c <pmc_sleep+0x270>)
  403ac6:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  403ac8:	2201      	movs	r2, #1
  403aca:	4b05      	ldr	r3, [pc, #20]	; (403ae0 <pmc_sleep+0x224>)
  403acc:	701a      	strb	r2, [r3, #0]
  403ace:	f3bf 8f5f 	dmb	sy
  403ad2:	b662      	cpsie	i
  __ASM volatile ("wfi");
  403ad4:	bf30      	wfi
  403ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403ada:	bf00      	nop
  403adc:	e000ed00 	.word	0xe000ed00
  403ae0:	20400177 	.word	0x20400177
  403ae4:	0040386d 	.word	0x0040386d
  403ae8:	20400c1c 	.word	0x20400c1c
  403aec:	400e0600 	.word	0x400e0600
  403af0:	400e0c00 	.word	0x400e0c00
  403af4:	00370008 	.word	0x00370008
  403af8:	004037e1 	.word	0x004037e1
  403afc:	fec8ffff 	.word	0xfec8ffff
  403b00:	00403871 	.word	0x00403871
  403b04:	fec8fffc 	.word	0xfec8fffc
  403b08:	01370002 	.word	0x01370002
  403b0c:	ffc8ff87 	.word	0xffc8ff87
  403b10:	07ff0000 	.word	0x07ff0000
  403b14:	20400c20 	.word	0x20400c20
  403b18:	ffc8fffe 	.word	0xffc8fffe
  403b1c:	ffc8fffc 	.word	0xffc8fffc
  403b20:	00370001 	.word	0x00370001
  403b24:	01370000 	.word	0x01370000
  403b28:	a5000004 	.word	0xa5000004
  403b2c:	400e1810 	.word	0x400e1810

00403b30 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  403b30:	4b02      	ldr	r3, [pc, #8]	; (403b3c <pmc_is_wakeup_clocks_restored+0xc>)
  403b32:	7818      	ldrb	r0, [r3, #0]
}
  403b34:	f080 0001 	eor.w	r0, r0, #1
  403b38:	4770      	bx	lr
  403b3a:	bf00      	nop
  403b3c:	20400c1c 	.word	0x20400c1c

00403b40 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_idle true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  403b40:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  403b42:	4601      	mov	r1, r0
  403b44:	bb28      	cbnz	r0, 403b92 <udd_sleep_mode+0x52>
  403b46:	4b24      	ldr	r3, [pc, #144]	; (403bd8 <udd_sleep_mode+0x98>)
  403b48:	781b      	ldrb	r3, [r3, #0]
  403b4a:	b91b      	cbnz	r3, 403b54 <udd_sleep_mode+0x14>
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(USBHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  403b4c:	4b22      	ldr	r3, [pc, #136]	; (403bd8 <udd_sleep_mode+0x98>)
  403b4e:	7019      	strb	r1, [r3, #0]
}
  403b50:	b002      	add	sp, #8
  403b52:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  403b54:	4b21      	ldr	r3, [pc, #132]	; (403bdc <udd_sleep_mode+0x9c>)
  403b56:	789b      	ldrb	r3, [r3, #2]
  403b58:	b903      	cbnz	r3, 403b5c <udd_sleep_mode+0x1c>
  403b5a:	e7fe      	b.n	403b5a <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403b5c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403b60:	fab3 f383 	clz	r3, r3
  403b64:	095b      	lsrs	r3, r3, #5
  403b66:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  403b68:	b672      	cpsid	i
  __ASM volatile ("dmb");
  403b6a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403b6e:	2200      	movs	r2, #0
  403b70:	4b1b      	ldr	r3, [pc, #108]	; (403be0 <udd_sleep_mode+0xa0>)
  403b72:	701a      	strb	r2, [r3, #0]
	return flags;
  403b74:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  403b76:	4a19      	ldr	r2, [pc, #100]	; (403bdc <udd_sleep_mode+0x9c>)
  403b78:	7893      	ldrb	r3, [r2, #2]
  403b7a:	3b01      	subs	r3, #1
  403b7c:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  403b7e:	2800      	cmp	r0, #0
  403b80:	d0e4      	beq.n	403b4c <udd_sleep_mode+0xc>
		cpu_irq_enable();
  403b82:	2201      	movs	r2, #1
  403b84:	4b16      	ldr	r3, [pc, #88]	; (403be0 <udd_sleep_mode+0xa0>)
  403b86:	701a      	strb	r2, [r3, #0]
  403b88:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403b8c:	b662      	cpsie	i
  403b8e:	e7dd      	b.n	403b4c <udd_sleep_mode+0xc>
  403b90:	e7fe      	b.n	403b90 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  403b92:	4b11      	ldr	r3, [pc, #68]	; (403bd8 <udd_sleep_mode+0x98>)
  403b94:	781b      	ldrb	r3, [r3, #0]
  403b96:	2b00      	cmp	r3, #0
  403b98:	d1d8      	bne.n	403b4c <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  403b9a:	4b10      	ldr	r3, [pc, #64]	; (403bdc <udd_sleep_mode+0x9c>)
  403b9c:	789b      	ldrb	r3, [r3, #2]
  403b9e:	2bff      	cmp	r3, #255	; 0xff
  403ba0:	d0f6      	beq.n	403b90 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403ba2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403ba6:	fab3 f383 	clz	r3, r3
  403baa:	095b      	lsrs	r3, r3, #5
  403bac:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403bae:	b672      	cpsid	i
  403bb0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403bb4:	2200      	movs	r2, #0
  403bb6:	4b0a      	ldr	r3, [pc, #40]	; (403be0 <udd_sleep_mode+0xa0>)
  403bb8:	701a      	strb	r2, [r3, #0]
	return flags;
  403bba:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  403bbc:	4a07      	ldr	r2, [pc, #28]	; (403bdc <udd_sleep_mode+0x9c>)
  403bbe:	7893      	ldrb	r3, [r2, #2]
  403bc0:	3301      	adds	r3, #1
  403bc2:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  403bc4:	2800      	cmp	r0, #0
  403bc6:	d0c1      	beq.n	403b4c <udd_sleep_mode+0xc>
		cpu_irq_enable();
  403bc8:	2201      	movs	r2, #1
  403bca:	4b05      	ldr	r3, [pc, #20]	; (403be0 <udd_sleep_mode+0xa0>)
  403bcc:	701a      	strb	r2, [r3, #0]
  403bce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403bd2:	b662      	cpsie	i
  403bd4:	e7ba      	b.n	403b4c <udd_sleep_mode+0xc>
  403bd6:	bf00      	nop
  403bd8:	20400c25 	.word	0x20400c25
  403bdc:	20400f10 	.word	0x20400f10
  403be0:	20400177 	.word	0x20400177

00403be4 <udd_ctrl_init>:
	udd_enable_endpoint_interrupt(0);
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
  403be4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403be6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403bea:	fab3 f383 	clz	r3, r3
  403bee:	095b      	lsrs	r3, r3, #5
  403bf0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403bf2:	b672      	cpsid	i
  403bf4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403bf8:	2200      	movs	r2, #0
  403bfa:	4b0c      	ldr	r3, [pc, #48]	; (403c2c <udd_ctrl_init+0x48>)
  403bfc:	701a      	strb	r2, [r3, #0]
	return flags;
  403bfe:	9b01      	ldr	r3, [sp, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
  403c00:	2101      	movs	r1, #1
  403c02:	4a0b      	ldr	r2, [pc, #44]	; (403c30 <udd_ctrl_init+0x4c>)
  403c04:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403c06:	b123      	cbz	r3, 403c12 <udd_ctrl_init+0x2e>
		cpu_irq_enable();
  403c08:	4b08      	ldr	r3, [pc, #32]	; (403c2c <udd_ctrl_init+0x48>)
  403c0a:	7019      	strb	r1, [r3, #0]
  403c0c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403c10:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
  403c12:	2202      	movs	r2, #2
  403c14:	4b07      	ldr	r3, [pc, #28]	; (403c34 <udd_ctrl_init+0x50>)
  403c16:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
  403c18:	4a07      	ldr	r2, [pc, #28]	; (403c38 <udd_ctrl_init+0x54>)
  403c1a:	2300      	movs	r3, #0
  403c1c:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  403c1e:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  403c20:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  403c22:	4a06      	ldr	r2, [pc, #24]	; (403c3c <udd_ctrl_init+0x58>)
  403c24:	7013      	strb	r3, [r2, #0]
}
  403c26:	b002      	add	sp, #8
  403c28:	4770      	bx	lr
  403c2a:	bf00      	nop
  403c2c:	20400177 	.word	0x20400177
  403c30:	40038220 	.word	0x40038220
  403c34:	40038160 	.word	0x40038160
  403c38:	20400f18 	.word	0x20400f18
  403c3c:	20400c2c 	.word	0x20400c2c

00403c40 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  403c40:	2205      	movs	r2, #5
  403c42:	4b03      	ldr	r3, [pc, #12]	; (403c50 <udd_ctrl_stall_data+0x10>)
  403c44:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  403c46:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403c4a:	4b02      	ldr	r3, [pc, #8]	; (403c54 <udd_ctrl_stall_data+0x14>)
  403c4c:	601a      	str	r2, [r3, #0]
  403c4e:	4770      	bx	lr
  403c50:	20400c2c 	.word	0x20400c2c
  403c54:	400381f0 	.word	0x400381f0

00403c58 <udd_ctrl_send_zlp_in>:
}


static void udd_ctrl_send_zlp_in(void)
{
  403c58:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  403c5a:	2203      	movs	r2, #3
  403c5c:	4b0f      	ldr	r3, [pc, #60]	; (403c9c <udd_ctrl_send_zlp_in+0x44>)
  403c5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403c60:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403c64:	fab3 f383 	clz	r3, r3
  403c68:	095b      	lsrs	r3, r3, #5
  403c6a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403c6c:	b672      	cpsid	i
  403c6e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403c72:	2200      	movs	r2, #0
  403c74:	4b0a      	ldr	r3, [pc, #40]	; (403ca0 <udd_ctrl_send_zlp_in+0x48>)
  403c76:	701a      	strb	r2, [r3, #0]
	return flags;
  403c78:	9801      	ldr	r0, [sp, #4]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
  403c7a:	490a      	ldr	r1, [pc, #40]	; (403ca4 <udd_ctrl_send_zlp_in+0x4c>)
  403c7c:	2201      	movs	r2, #1
  403c7e:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
  403c80:	4b09      	ldr	r3, [pc, #36]	; (403ca8 <udd_ctrl_send_zlp_in+0x50>)
  403c82:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
  403c84:	2208      	movs	r2, #8
  403c86:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
  403c88:	601a      	str	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403c8a:	b128      	cbz	r0, 403c98 <udd_ctrl_send_zlp_in+0x40>
		cpu_irq_enable();
  403c8c:	2201      	movs	r2, #1
  403c8e:	4b04      	ldr	r3, [pc, #16]	; (403ca0 <udd_ctrl_send_zlp_in+0x48>)
  403c90:	701a      	strb	r2, [r3, #0]
  403c92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403c96:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
  403c98:	b002      	add	sp, #8
  403c9a:	4770      	bx	lr
  403c9c:	20400c2c 	.word	0x20400c2c
  403ca0:	20400177 	.word	0x20400177
  403ca4:	40038160 	.word	0x40038160
  403ca8:	400381f0 	.word	0x400381f0

00403cac <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
  403cac:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  403cae:	4b02      	ldr	r3, [pc, #8]	; (403cb8 <udd_ctrl_endofrequest+0xc>)
  403cb0:	691b      	ldr	r3, [r3, #16]
  403cb2:	b103      	cbz	r3, 403cb6 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  403cb4:	4798      	blx	r3
  403cb6:	bd08      	pop	{r3, pc}
  403cb8:	20400f18 	.word	0x20400f18

00403cbc <udd_ctrl_in_sent>:
{
  403cbc:	b530      	push	{r4, r5, lr}
  403cbe:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403cc0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403cc4:	fab3 f383 	clz	r3, r3
  403cc8:	095b      	lsrs	r3, r3, #5
  403cca:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403ccc:	b672      	cpsid	i
  403cce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403cd2:	2200      	movs	r2, #0
  403cd4:	4b4f      	ldr	r3, [pc, #316]	; (403e14 <udd_ctrl_in_sent+0x158>)
  403cd6:	701a      	strb	r2, [r3, #0]
	return flags;
  403cd8:	9b01      	ldr	r3, [sp, #4]
	udd_disable_in_send_interrupt(0);
  403cda:	2101      	movs	r1, #1
  403cdc:	4a4e      	ldr	r2, [pc, #312]	; (403e18 <udd_ctrl_in_sent+0x15c>)
  403cde:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403ce0:	b123      	cbz	r3, 403cec <udd_ctrl_in_sent+0x30>
		cpu_irq_enable();
  403ce2:	4b4c      	ldr	r3, [pc, #304]	; (403e14 <udd_ctrl_in_sent+0x158>)
  403ce4:	7019      	strb	r1, [r3, #0]
  403ce6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403cea:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  403cec:	4b4b      	ldr	r3, [pc, #300]	; (403e1c <udd_ctrl_in_sent+0x160>)
  403cee:	781b      	ldrb	r3, [r3, #0]
  403cf0:	2b03      	cmp	r3, #3
  403cf2:	d05d      	beq.n	403db0 <udd_ctrl_in_sent+0xf4>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
  403cf4:	4b4a      	ldr	r3, [pc, #296]	; (403e20 <udd_ctrl_in_sent+0x164>)
  403cf6:	881b      	ldrh	r3, [r3, #0]
  403cf8:	4a4a      	ldr	r2, [pc, #296]	; (403e24 <udd_ctrl_in_sent+0x168>)
  403cfa:	8994      	ldrh	r4, [r2, #12]
  403cfc:	1ae4      	subs	r4, r4, r3
  403cfe:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  403d00:	b9c4      	cbnz	r4, 403d34 <udd_ctrl_in_sent+0x78>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
  403d02:	4a49      	ldr	r2, [pc, #292]	; (403e28 <udd_ctrl_in_sent+0x16c>)
  403d04:	8811      	ldrh	r1, [r2, #0]
  403d06:	440b      	add	r3, r1
  403d08:	b29b      	uxth	r3, r3
  403d0a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
  403d0c:	4a45      	ldr	r2, [pc, #276]	; (403e24 <udd_ctrl_in_sent+0x168>)
  403d0e:	88d2      	ldrh	r2, [r2, #6]
  403d10:	429a      	cmp	r2, r3
  403d12:	d052      	beq.n	403dba <udd_ctrl_in_sent+0xfe>
					|| b_shortpacket) {
  403d14:	4b45      	ldr	r3, [pc, #276]	; (403e2c <udd_ctrl_in_sent+0x170>)
  403d16:	781b      	ldrb	r3, [r3, #0]
  403d18:	2b00      	cmp	r3, #0
  403d1a:	d14e      	bne.n	403dba <udd_ctrl_in_sent+0xfe>
		if ((!udd_g_ctrlreq.over_under_run)
  403d1c:	4b41      	ldr	r3, [pc, #260]	; (403e24 <udd_ctrl_in_sent+0x168>)
  403d1e:	695b      	ldr	r3, [r3, #20]
  403d20:	2b00      	cmp	r3, #0
  403d22:	d067      	beq.n	403df4 <udd_ctrl_in_sent+0x138>
				|| (!udd_g_ctrlreq.over_under_run())) {
  403d24:	4798      	blx	r3
  403d26:	2800      	cmp	r0, #0
  403d28:	d064      	beq.n	403df4 <udd_ctrl_in_sent+0x138>
			udd_ctrl_payload_buf_cnt = 0;
  403d2a:	2200      	movs	r2, #0
  403d2c:	4b3c      	ldr	r3, [pc, #240]	; (403e20 <udd_ctrl_in_sent+0x164>)
  403d2e:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  403d30:	4b3c      	ldr	r3, [pc, #240]	; (403e24 <udd_ctrl_in_sent+0x168>)
  403d32:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  403d34:	2c3f      	cmp	r4, #63	; 0x3f
  403d36:	d95d      	bls.n	403df4 <udd_ctrl_in_sent+0x138>
		b_shortpacket = false;
  403d38:	2200      	movs	r2, #0
  403d3a:	4b3c      	ldr	r3, [pc, #240]	; (403e2c <udd_ctrl_in_sent+0x170>)
  403d3c:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  403d3e:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  403d40:	4b38      	ldr	r3, [pc, #224]	; (403e24 <udd_ctrl_in_sent+0x168>)
  403d42:	6899      	ldr	r1, [r3, #8]
  403d44:	4b36      	ldr	r3, [pc, #216]	; (403e20 <udd_ctrl_in_sent+0x164>)
  403d46:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403d48:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403d4c:	fab3 f383 	clz	r3, r3
  403d50:	095b      	lsrs	r3, r3, #5
  403d52:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  403d54:	b672      	cpsid	i
  403d56:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403d5a:	2200      	movs	r2, #0
  403d5c:	4b2d      	ldr	r3, [pc, #180]	; (403e14 <udd_ctrl_in_sent+0x158>)
  403d5e:	701a      	strb	r2, [r3, #0]
	return flags;
  403d60:	9d02      	ldr	r5, [sp, #8]
	if (Is_udd_out_received(0)) {
  403d62:	4b33      	ldr	r3, [pc, #204]	; (403e30 <udd_ctrl_in_sent+0x174>)
  403d64:	681b      	ldr	r3, [r3, #0]
  403d66:	f013 0f02 	tst.w	r3, #2
  403d6a:	d147      	bne.n	403dfc <udd_ctrl_in_sent+0x140>
	for (i = 0; i < nb_remain; i++) {
  403d6c:	b154      	cbz	r4, 403d84 <udd_ctrl_in_sent+0xc8>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  403d6e:	4401      	add	r1, r0
  403d70:	4830      	ldr	r0, [pc, #192]	; (403e34 <udd_ctrl_in_sent+0x178>)
		*ptr_dest++ = *ptr_src++;
  403d72:	1c43      	adds	r3, r0, #1
  403d74:	780a      	ldrb	r2, [r1, #0]
  403d76:	b2d2      	uxtb	r2, r2
  403d78:	7002      	strb	r2, [r0, #0]
  403d7a:	4618      	mov	r0, r3
  403d7c:	3101      	adds	r1, #1
	for (i = 0; i < nb_remain; i++) {
  403d7e:	b2db      	uxtb	r3, r3
  403d80:	42a3      	cmp	r3, r4
  403d82:	d3f6      	bcc.n	403d72 <udd_ctrl_in_sent+0xb6>
	udd_ctrl_payload_buf_cnt += nb_remain;
  403d84:	4b26      	ldr	r3, [pc, #152]	; (403e20 <udd_ctrl_in_sent+0x164>)
  403d86:	881a      	ldrh	r2, [r3, #0]
  403d88:	4414      	add	r4, r2
  403d8a:	801c      	strh	r4, [r3, #0]
  __ASM volatile ("dsb");
  403d8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403d90:	f3bf 8f6f 	isb	sy
	udd_ack_in_send(0);
  403d94:	2301      	movs	r3, #1
  403d96:	4a28      	ldr	r2, [pc, #160]	; (403e38 <udd_ctrl_in_sent+0x17c>)
  403d98:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
  403d9a:	3290      	adds	r2, #144	; 0x90
  403d9c:	6013      	str	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403d9e:	2d00      	cmp	r5, #0
  403da0:	d036      	beq.n	403e10 <udd_ctrl_in_sent+0x154>
		cpu_irq_enable();
  403da2:	461a      	mov	r2, r3
  403da4:	4b1b      	ldr	r3, [pc, #108]	; (403e14 <udd_ctrl_in_sent+0x158>)
  403da6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  403da8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403dac:	b662      	cpsie	i
  403dae:	e02f      	b.n	403e10 <udd_ctrl_in_sent+0x154>
		udd_ctrl_endofrequest();
  403db0:	4b22      	ldr	r3, [pc, #136]	; (403e3c <udd_ctrl_in_sent+0x180>)
  403db2:	4798      	blx	r3
		udd_ctrl_init();
  403db4:	4b22      	ldr	r3, [pc, #136]	; (403e40 <udd_ctrl_in_sent+0x184>)
  403db6:	4798      	blx	r3
		return;
  403db8:	e02a      	b.n	403e10 <udd_ctrl_in_sent+0x154>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  403dba:	2204      	movs	r2, #4
  403dbc:	4b17      	ldr	r3, [pc, #92]	; (403e1c <udd_ctrl_in_sent+0x160>)
  403dbe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403dc0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403dc4:	fab3 f383 	clz	r3, r3
  403dc8:	095b      	lsrs	r3, r3, #5
  403dca:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  403dcc:	b672      	cpsid	i
  403dce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403dd2:	2200      	movs	r2, #0
  403dd4:	4b0f      	ldr	r3, [pc, #60]	; (403e14 <udd_ctrl_in_sent+0x158>)
  403dd6:	701a      	strb	r2, [r3, #0]
	return flags;
  403dd8:	9a03      	ldr	r2, [sp, #12]
	udd_ack_nak_in(0);
  403dda:	2310      	movs	r3, #16
  403ddc:	4916      	ldr	r1, [pc, #88]	; (403e38 <udd_ctrl_in_sent+0x17c>)
  403dde:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
  403de0:	3190      	adds	r1, #144	; 0x90
  403de2:	600b      	str	r3, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403de4:	b1a2      	cbz	r2, 403e10 <udd_ctrl_in_sent+0x154>
		cpu_irq_enable();
  403de6:	2201      	movs	r2, #1
  403de8:	4b0a      	ldr	r3, [pc, #40]	; (403e14 <udd_ctrl_in_sent+0x158>)
  403dea:	701a      	strb	r2, [r3, #0]
  403dec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403df0:	b662      	cpsie	i
  403df2:	e00d      	b.n	403e10 <udd_ctrl_in_sent+0x154>
		b_shortpacket = true;
  403df4:	2201      	movs	r2, #1
  403df6:	4b0d      	ldr	r3, [pc, #52]	; (403e2c <udd_ctrl_in_sent+0x170>)
  403df8:	701a      	strb	r2, [r3, #0]
  403dfa:	e7a1      	b.n	403d40 <udd_ctrl_in_sent+0x84>
	if (cpu_irq_is_enabled_flags(flags))
  403dfc:	b12d      	cbz	r5, 403e0a <udd_ctrl_in_sent+0x14e>
		cpu_irq_enable();
  403dfe:	2201      	movs	r2, #1
  403e00:	4b04      	ldr	r3, [pc, #16]	; (403e14 <udd_ctrl_in_sent+0x158>)
  403e02:	701a      	strb	r2, [r3, #0]
  403e04:	f3bf 8f5f 	dmb	sy
  403e08:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  403e0a:	2204      	movs	r2, #4
  403e0c:	4b03      	ldr	r3, [pc, #12]	; (403e1c <udd_ctrl_in_sent+0x160>)
  403e0e:	701a      	strb	r2, [r3, #0]
}
  403e10:	b005      	add	sp, #20
  403e12:	bd30      	pop	{r4, r5, pc}
  403e14:	20400177 	.word	0x20400177
  403e18:	40038220 	.word	0x40038220
  403e1c:	20400c2c 	.word	0x20400c2c
  403e20:	20400c28 	.word	0x20400c28
  403e24:	20400f18 	.word	0x20400f18
  403e28:	20400c2a 	.word	0x20400c2a
  403e2c:	20400c24 	.word	0x20400c24
  403e30:	40038130 	.word	0x40038130
  403e34:	a0100000 	.word	0xa0100000
  403e38:	40038160 	.word	0x40038160
  403e3c:	00403cad 	.word	0x00403cad
  403e40:	00403be5 	.word	0x00403be5

00403e44 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
  403e44:	7d03      	ldrb	r3, [r0, #20]
  403e46:	f013 0f01 	tst.w	r3, #1
  403e4a:	d013      	beq.n	403e74 <udd_ep_finish_job+0x30>
{
  403e4c:	b510      	push	{r4, lr}
  403e4e:	460c      	mov	r4, r1
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
  403e50:	7d03      	ldrb	r3, [r0, #20]
  403e52:	f36f 0300 	bfc	r3, #0, #1
  403e56:	7503      	strb	r3, [r0, #20]
	if (NULL == ptr_job->call_trans) {
  403e58:	6803      	ldr	r3, [r0, #0]
  403e5a:	b153      	cbz	r3, 403e72 <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
  403e5c:	4906      	ldr	r1, [pc, #24]	; (403e78 <udd_ep_finish_job+0x34>)
  403e5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  403e62:	f411 7f80 	tst.w	r1, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
  403e66:	bf18      	it	ne
  403e68:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
  403e6c:	6881      	ldr	r1, [r0, #8]
  403e6e:	4620      	mov	r0, r4
  403e70:	4798      	blx	r3
  403e72:	bd10      	pop	{r4, pc}
  403e74:	4770      	bx	lr
  403e76:	bf00      	nop
  403e78:	40038100 	.word	0x40038100

00403e7c <udd_ep_trans_done>:
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
  403e7c:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
  403e7e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  403e82:	4a5f      	ldr	r2, [pc, #380]	; (404000 <udd_ep_trans_done+0x184>)
  403e84:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  403e88:	7d12      	ldrb	r2, [r2, #20]
  403e8a:	f012 0f01 	tst.w	r2, #1
  403e8e:	f000 80b6 	beq.w	403ffe <udd_ep_trans_done+0x182>
{
  403e92:	b5f0      	push	{r4, r5, r6, r7, lr}
  403e94:	b083      	sub	sp, #12
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
  403e96:	460a      	mov	r2, r1
  403e98:	4959      	ldr	r1, [pc, #356]	; (404000 <udd_ep_trans_done+0x184>)
  403e9a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  403e9e:	68d1      	ldr	r1, [r2, #12]
  403ea0:	6892      	ldr	r2, [r2, #8]
  403ea2:	4291      	cmp	r1, r2
  403ea4:	d078      	beq.n	403f98 <udd_ep_trans_done+0x11c>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
  403ea6:	1a52      	subs	r2, r2, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
  403ea8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  403eac:	d81b      	bhi.n	403ee6 <udd_ep_trans_done+0x6a>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
  403eae:	0417      	lsls	r7, r2, #16
		}
		if (Is_udd_endpoint_in(ep)) {
  403eb0:	4c54      	ldr	r4, [pc, #336]	; (404004 <udd_ep_trans_done+0x188>)
  403eb2:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  403eb6:	f415 7f80 	tst.w	r5, #256	; 0x100
  403eba:	d018      	beq.n	403eee <udd_ep_trans_done+0x72>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
  403ebc:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  403ec0:	f3c5 1502 	ubfx	r5, r5, #4, #3
  403ec4:	2408      	movs	r4, #8
  403ec6:	40ac      	lsls	r4, r5
  403ec8:	3c01      	subs	r4, #1
  403eca:	4214      	tst	r4, r2
  403ecc:	d017      	beq.n	403efe <udd_ep_trans_done+0x82>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  403ece:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
  403ed2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  403ed6:	4d4a      	ldr	r5, [pc, #296]	; (404000 <udd_ep_trans_done+0x184>)
  403ed8:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
  403edc:	7d25      	ldrb	r5, [r4, #20]
  403ede:	f36f 0541 	bfc	r5, #1, #1
  403ee2:	7525      	strb	r5, [r4, #20]
  403ee4:	e00b      	b.n	403efe <udd_ep_trans_done+0x82>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
  403ee6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  403eea:	2700      	movs	r7, #0
  403eec:	e7e0      	b.n	403eb0 <udd_ep_trans_done+0x34>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
  403eee:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  403ef2:	f3c5 25c1 	ubfx	r5, r5, #11, #2
  403ef6:	2d01      	cmp	r5, #1
  403ef8:	d037      	beq.n	403f6a <udd_ep_trans_done+0xee>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT
  403efa:	f047 0714 	orr.w	r7, r7, #20
						| USBHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
  403efe:	4c42      	ldr	r4, [pc, #264]	; (404008 <udd_ep_trans_done+0x18c>)
  403f00:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  403f04:	eb03 0543 	add.w	r5, r3, r3, lsl #1
  403f08:	4e3d      	ldr	r6, [pc, #244]	; (404000 <udd_ep_trans_done+0x184>)
  403f0a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  403f0e:	686d      	ldr	r5, [r5, #4]
  403f10:	4429      	add	r1, r5
  403f12:	6061      	str	r1, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403f14:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403f18:	fab1 f181 	clz	r1, r1
  403f1c:	0949      	lsrs	r1, r1, #5
  403f1e:	9101      	str	r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403f20:	b672      	cpsid	i
  403f22:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403f26:	2500      	movs	r5, #0
  403f28:	4938      	ldr	r1, [pc, #224]	; (40400c <udd_ep_trans_done+0x190>)
  403f2a:	700d      	strb	r5, [r1, #0]
	return flags;
  403f2c:	9d01      	ldr	r5, [sp, #4]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
  403f2e:	68e1      	ldr	r1, [r4, #12]
  403f30:	f011 0f10 	tst.w	r1, #16
  403f34:	d122      	bne.n	403f7c <udd_ep_trans_done+0x100>
		udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT |
  403f36:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& USBHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
  403f3a:	60a7      	str	r7, [r4, #8]
			ptr_job->buf_cnt += next_trans;
  403f3c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  403f40:	eb06 01c0 	add.w	r1, r6, r0, lsl #3
  403f44:	68c8      	ldr	r0, [r1, #12]
  403f46:	4410      	add	r0, r2
  403f48:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
  403f4a:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
  403f4c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  403f50:	fa00 f303 	lsl.w	r3, r0, r3
  403f54:	4a2e      	ldr	r2, [pc, #184]	; (404010 <udd_ep_trans_done+0x194>)
  403f56:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
  403f58:	2d00      	cmp	r5, #0
  403f5a:	d04e      	beq.n	403ffa <udd_ep_trans_done+0x17e>
		cpu_irq_enable();
  403f5c:	2201      	movs	r2, #1
  403f5e:	4b2b      	ldr	r3, [pc, #172]	; (40400c <udd_ep_trans_done+0x190>)
  403f60:	701a      	strb	r2, [r3, #0]
  403f62:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403f66:	b662      	cpsie	i
  403f68:	e047      	b.n	403ffa <udd_ep_trans_done+0x17e>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
  403f6a:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  403f6e:	f3c5 1502 	ubfx	r5, r5, #4, #3
  403f72:	2408      	movs	r4, #8
  403f74:	40ac      	lsls	r4, r5
  403f76:	42a2      	cmp	r2, r4
  403f78:	d8c1      	bhi.n	403efe <udd_ep_trans_done+0x82>
  403f7a:	e7be      	b.n	403efa <udd_ep_trans_done+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
  403f7c:	b12d      	cbz	r5, 403f8a <udd_ep_trans_done+0x10e>
		cpu_irq_enable();
  403f7e:	2101      	movs	r1, #1
  403f80:	4a22      	ldr	r2, [pc, #136]	; (40400c <udd_ep_trans_done+0x190>)
  403f82:	7011      	strb	r1, [r2, #0]
  403f84:	f3bf 8f5f 	dmb	sy
  403f88:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
  403f8a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  403f8e:	491c      	ldr	r1, [pc, #112]	; (404000 <udd_ep_trans_done+0x184>)
  403f90:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  403f94:	68d1      	ldr	r1, [r2, #12]
  403f96:	6091      	str	r1, [r2, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
  403f98:	4a1a      	ldr	r2, [pc, #104]	; (404004 <udd_ep_trans_done+0x188>)
  403f9a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  403f9e:	f412 7f80 	tst.w	r2, #256	; 0x100
  403fa2:	d021      	beq.n	403fe8 <udd_ep_trans_done+0x16c>
		if (ptr_job->b_shortpacket) {
  403fa4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  403fa8:	4915      	ldr	r1, [pc, #84]	; (404000 <udd_ep_trans_done+0x184>)
  403faa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  403fae:	7d12      	ldrb	r2, [r2, #20]
  403fb0:	f012 0f02 	tst.w	r2, #2
  403fb4:	d018      	beq.n	403fe8 <udd_ep_trans_done+0x16c>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
  403fb6:	2201      	movs	r2, #1
  403fb8:	4b16      	ldr	r3, [pc, #88]	; (404014 <udd_ep_trans_done+0x198>)
  403fba:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (Is_udd_write_enabled(ep)) {
  403fbe:	3b30      	subs	r3, #48	; 0x30
  403fc0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  403fc4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  403fc8:	d002      	beq.n	403fd0 <udd_ep_trans_done+0x154>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
  403fca:	4b13      	ldr	r3, [pc, #76]	; (404018 <udd_ep_trans_done+0x19c>)
  403fcc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
  403fd0:	2201      	movs	r2, #1
  403fd2:	4b12      	ldr	r3, [pc, #72]	; (40401c <udd_ep_trans_done+0x1a0>)
  403fd4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_enable_endpoint_interrupt(ep);
  403fd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403fdc:	fa02 f000 	lsl.w	r0, r2, r0
  403fe0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
  403fe4:	6198      	str	r0, [r3, #24]
			return;
  403fe6:	e008      	b.n	403ffa <udd_ep_trans_done+0x17e>
  403fe8:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
  403fea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	} else {
		_dcache_invalidate(ptr_job->buf, ptr_job->buf_size);
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
  403fee:	2100      	movs	r1, #0
  403ff0:	4803      	ldr	r0, [pc, #12]	; (404000 <udd_ep_trans_done+0x184>)
  403ff2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
  403ff6:	4b0a      	ldr	r3, [pc, #40]	; (404020 <udd_ep_trans_done+0x1a4>)
  403ff8:	4798      	blx	r3
}
  403ffa:	b003      	add	sp, #12
  403ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403ffe:	4770      	bx	lr
  404000:	20400c30 	.word	0x20400c30
  404004:	40038100 	.word	0x40038100
  404008:	40038300 	.word	0x40038300
  40400c:	20400177 	.word	0x20400177
  404010:	40038000 	.word	0x40038000
  404014:	40038160 	.word	0x40038160
  404018:	40038190 	.word	0x40038190
  40401c:	400381f0 	.word	0x400381f0
  404020:	00403e45 	.word	0x00403e45

00404024 <USBHS_Handler>:
{
  404024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404028:	b085      	sub	sp, #20
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  40402a:	4b87      	ldr	r3, [pc, #540]	; (404248 <USBHS_Handler+0x224>)
  40402c:	4798      	blx	r3
  40402e:	b920      	cbnz	r0, 40403a <USBHS_Handler+0x16>
  404030:	4b86      	ldr	r3, [pc, #536]	; (40424c <USBHS_Handler+0x228>)
  404032:	685b      	ldr	r3, [r3, #4]
  404034:	f013 0f01 	tst.w	r3, #1
  404038:	d011      	beq.n	40405e <USBHS_Handler+0x3a>
	if (Is_udd_sof()) {
  40403a:	4b84      	ldr	r3, [pc, #528]	; (40424c <USBHS_Handler+0x228>)
  40403c:	685b      	ldr	r3, [r3, #4]
  40403e:	f013 0f04 	tst.w	r3, #4
  404042:	d016      	beq.n	404072 <USBHS_Handler+0x4e>
		udd_ack_sof();
  404044:	4b81      	ldr	r3, [pc, #516]	; (40424c <USBHS_Handler+0x228>)
  404046:	2204      	movs	r2, #4
  404048:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
  40404a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
  40404e:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  404052:	d00b      	beq.n	40406c <USBHS_Handler+0x48>
		UDC_SOF_EVENT();
  404054:	4b7e      	ldr	r3, [pc, #504]	; (404250 <USBHS_Handler+0x22c>)
  404056:	4798      	blx	r3
}
  404058:	b005      	add	sp, #20
  40405a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("cpsid i" : : : "memory");
  40405e:	b672      	cpsid	i
  404060:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  404064:	2200      	movs	r2, #0
  404066:	4b7b      	ldr	r3, [pc, #492]	; (404254 <USBHS_Handler+0x230>)
  404068:	701a      	strb	r2, [r3, #0]
		return;
  40406a:	e7f5      	b.n	404058 <USBHS_Handler+0x34>
			udc_sof_notify();
  40406c:	4b7a      	ldr	r3, [pc, #488]	; (404258 <USBHS_Handler+0x234>)
  40406e:	4798      	blx	r3
  404070:	e7f0      	b.n	404054 <USBHS_Handler+0x30>
	if (Is_udd_msof()) {
  404072:	4b76      	ldr	r3, [pc, #472]	; (40424c <USBHS_Handler+0x228>)
  404074:	685b      	ldr	r3, [r3, #4]
  404076:	f013 0f02 	tst.w	r3, #2
  40407a:	d133      	bne.n	4040e4 <USBHS_Handler+0xc0>
	if (!Is_udd_endpoint_interrupt(0)) {
  40407c:	4b73      	ldr	r3, [pc, #460]	; (40424c <USBHS_Handler+0x228>)
  40407e:	685b      	ldr	r3, [r3, #4]
  404080:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  404084:	d026      	beq.n	4040d4 <USBHS_Handler+0xb0>
	udd_disable_nak_in_interrupt(0);
  404086:	4b75      	ldr	r3, [pc, #468]	; (40425c <USBHS_Handler+0x238>)
  404088:	2210      	movs	r2, #16
  40408a:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
  40408c:	2208      	movs	r2, #8
  40408e:	601a      	str	r2, [r3, #0]
	if (Is_udd_setup_received(0)) {
  404090:	3bf0      	subs	r3, #240	; 0xf0
  404092:	681b      	ldr	r3, [r3, #0]
  404094:	f013 0f04 	tst.w	r3, #4
  404098:	d12a      	bne.n	4040f0 <USBHS_Handler+0xcc>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
  40409a:	4b71      	ldr	r3, [pc, #452]	; (404260 <USBHS_Handler+0x23c>)
  40409c:	681b      	ldr	r3, [r3, #0]
  40409e:	f013 0f01 	tst.w	r3, #1
  4040a2:	d005      	beq.n	4040b0 <USBHS_Handler+0x8c>
  4040a4:	4b6f      	ldr	r3, [pc, #444]	; (404264 <USBHS_Handler+0x240>)
  4040a6:	681b      	ldr	r3, [r3, #0]
  4040a8:	f013 0f01 	tst.w	r3, #1
  4040ac:	f040 808b 	bne.w	4041c6 <USBHS_Handler+0x1a2>
	if (Is_udd_out_received(0)) {
  4040b0:	4b6b      	ldr	r3, [pc, #428]	; (404260 <USBHS_Handler+0x23c>)
  4040b2:	681b      	ldr	r3, [r3, #0]
  4040b4:	f013 0f02 	tst.w	r3, #2
  4040b8:	f040 8088 	bne.w	4041cc <USBHS_Handler+0x1a8>
	if (Is_udd_nak_out(0)) {
  4040bc:	4b68      	ldr	r3, [pc, #416]	; (404260 <USBHS_Handler+0x23c>)
  4040be:	681b      	ldr	r3, [r3, #0]
  4040c0:	f013 0f08 	tst.w	r3, #8
  4040c4:	f040 8135 	bne.w	404332 <USBHS_Handler+0x30e>
	if (Is_udd_nak_in(0)) {
  4040c8:	4b65      	ldr	r3, [pc, #404]	; (404260 <USBHS_Handler+0x23c>)
  4040ca:	681b      	ldr	r3, [r3, #0]
  4040cc:	f013 0f10 	tst.w	r3, #16
  4040d0:	f040 8142 	bne.w	404358 <USBHS_Handler+0x334>
	for (i = 0; i < nb_data; i++) {
  4040d4:	4e64      	ldr	r6, [pc, #400]	; (404268 <USBHS_Handler+0x244>)
  4040d6:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  4040d8:	4a5c      	ldr	r2, [pc, #368]	; (40424c <USBHS_Handler+0x228>)
  4040da:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  4040de:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  4040e2:	e184      	b.n	4043ee <USBHS_Handler+0x3ca>
		udd_ack_msof();
  4040e4:	2202      	movs	r2, #2
  4040e6:	4b59      	ldr	r3, [pc, #356]	; (40424c <USBHS_Handler+0x228>)
  4040e8:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
  4040ea:	4b5b      	ldr	r3, [pc, #364]	; (404258 <USBHS_Handler+0x234>)
  4040ec:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  4040ee:	e7b3      	b.n	404058 <USBHS_Handler+0x34>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  4040f0:	4b5e      	ldr	r3, [pc, #376]	; (40426c <USBHS_Handler+0x248>)
  4040f2:	781b      	ldrb	r3, [r3, #0]
  4040f4:	2b00      	cmp	r3, #0
  4040f6:	d147      	bne.n	404188 <USBHS_Handler+0x164>
	if (8 != udd_byte_count(0)) {
  4040f8:	4b59      	ldr	r3, [pc, #356]	; (404260 <USBHS_Handler+0x23c>)
  4040fa:	681b      	ldr	r3, [r3, #0]
  4040fc:	f3c3 530a 	ubfx	r3, r3, #20, #11
  404100:	2b08      	cmp	r3, #8
  404102:	d146      	bne.n	404192 <USBHS_Handler+0x16e>
	uint16_t nb_data = udd_byte_count(0);
  404104:	4b56      	ldr	r3, [pc, #344]	; (404260 <USBHS_Handler+0x23c>)
  404106:	6818      	ldr	r0, [r3, #0]
  404108:	f3c0 500a 	ubfx	r0, r0, #20, #11
	for (i = 0; i < nb_data; i++) {
  40410c:	b148      	cbz	r0, 404122 <USBHS_Handler+0xfe>
  40410e:	4b58      	ldr	r3, [pc, #352]	; (404270 <USBHS_Handler+0x24c>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
  404110:	4c58      	ldr	r4, [pc, #352]	; (404274 <USBHS_Handler+0x250>)
  404112:	1c5a      	adds	r2, r3, #1
  404114:	7819      	ldrb	r1, [r3, #0]
  404116:	b2db      	uxtb	r3, r3
  404118:	5519      	strb	r1, [r3, r4]
  40411a:	4613      	mov	r3, r2
	for (i = 0; i < nb_data; i++) {
  40411c:	b2d2      	uxtb	r2, r2
  40411e:	4282      	cmp	r2, r0
  404120:	d3f7      	bcc.n	404112 <USBHS_Handler+0xee>
	if (udc_process_setup() == false) {
  404122:	4b55      	ldr	r3, [pc, #340]	; (404278 <USBHS_Handler+0x254>)
  404124:	4798      	blx	r3
  404126:	2800      	cmp	r0, #0
  404128:	d039      	beq.n	40419e <USBHS_Handler+0x17a>
	udd_ack_setup_received(0);
  40412a:	2204      	movs	r2, #4
  40412c:	4b53      	ldr	r3, [pc, #332]	; (40427c <USBHS_Handler+0x258>)
  40412e:	601a      	str	r2, [r3, #0]
	if (Udd_setup_is_in()) {
  404130:	4b50      	ldr	r3, [pc, #320]	; (404274 <USBHS_Handler+0x250>)
  404132:	f993 3000 	ldrsb.w	r3, [r3]
  404136:	2b00      	cmp	r3, #0
  404138:	db37      	blt.n	4041aa <USBHS_Handler+0x186>
		if (0 == udd_g_ctrlreq.req.wLength) {
  40413a:	4b4e      	ldr	r3, [pc, #312]	; (404274 <USBHS_Handler+0x250>)
  40413c:	88db      	ldrh	r3, [r3, #6]
  40413e:	2b00      	cmp	r3, #0
  404140:	d03e      	beq.n	4041c0 <USBHS_Handler+0x19c>
		udd_ctrl_prev_payload_buf_cnt = 0;
  404142:	2200      	movs	r2, #0
  404144:	4b4e      	ldr	r3, [pc, #312]	; (404280 <USBHS_Handler+0x25c>)
  404146:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
  404148:	4b4e      	ldr	r3, [pc, #312]	; (404284 <USBHS_Handler+0x260>)
  40414a:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  40414c:	2101      	movs	r1, #1
  40414e:	4b47      	ldr	r3, [pc, #284]	; (40426c <USBHS_Handler+0x248>)
  404150:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
  404152:	2110      	movs	r1, #16
  404154:	4b49      	ldr	r3, [pc, #292]	; (40427c <USBHS_Handler+0x258>)
  404156:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404158:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40415c:	fab3 f383 	clz	r3, r3
  404160:	095b      	lsrs	r3, r3, #5
  404162:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404164:	b672      	cpsid	i
  404166:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40416a:	4b3a      	ldr	r3, [pc, #232]	; (404254 <USBHS_Handler+0x230>)
  40416c:	701a      	strb	r2, [r3, #0]
	return flags;
  40416e:	9b01      	ldr	r3, [sp, #4]
		udd_enable_nak_in_interrupt(0);
  404170:	4a45      	ldr	r2, [pc, #276]	; (404288 <USBHS_Handler+0x264>)
  404172:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  404174:	2b00      	cmp	r3, #0
  404176:	f43f af6f 	beq.w	404058 <USBHS_Handler+0x34>
		cpu_irq_enable();
  40417a:	2201      	movs	r2, #1
  40417c:	4b35      	ldr	r3, [pc, #212]	; (404254 <USBHS_Handler+0x230>)
  40417e:	701a      	strb	r2, [r3, #0]
  404180:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404184:	b662      	cpsie	i
  404186:	e767      	b.n	404058 <USBHS_Handler+0x34>
		udd_ctrl_endofrequest();
  404188:	4b40      	ldr	r3, [pc, #256]	; (40428c <USBHS_Handler+0x268>)
  40418a:	4798      	blx	r3
		udd_ctrl_init();
  40418c:	4b40      	ldr	r3, [pc, #256]	; (404290 <USBHS_Handler+0x26c>)
  40418e:	4798      	blx	r3
  404190:	e7b2      	b.n	4040f8 <USBHS_Handler+0xd4>
		udd_ctrl_stall_data();
  404192:	4b40      	ldr	r3, [pc, #256]	; (404294 <USBHS_Handler+0x270>)
  404194:	4798      	blx	r3
		udd_ack_setup_received(0);
  404196:	2204      	movs	r2, #4
  404198:	4b38      	ldr	r3, [pc, #224]	; (40427c <USBHS_Handler+0x258>)
  40419a:	601a      	str	r2, [r3, #0]
  40419c:	e75c      	b.n	404058 <USBHS_Handler+0x34>
		udd_ctrl_stall_data();
  40419e:	4b3d      	ldr	r3, [pc, #244]	; (404294 <USBHS_Handler+0x270>)
  4041a0:	4798      	blx	r3
		udd_ack_setup_received(0);
  4041a2:	2204      	movs	r2, #4
  4041a4:	4b35      	ldr	r3, [pc, #212]	; (40427c <USBHS_Handler+0x258>)
  4041a6:	601a      	str	r2, [r3, #0]
  4041a8:	e756      	b.n	404058 <USBHS_Handler+0x34>
		udd_ctrl_prev_payload_buf_cnt = 0;
  4041aa:	2300      	movs	r3, #0
  4041ac:	4a34      	ldr	r2, [pc, #208]	; (404280 <USBHS_Handler+0x25c>)
  4041ae:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
  4041b0:	4a34      	ldr	r2, [pc, #208]	; (404284 <USBHS_Handler+0x260>)
  4041b2:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  4041b4:	2202      	movs	r2, #2
  4041b6:	4b2d      	ldr	r3, [pc, #180]	; (40426c <USBHS_Handler+0x248>)
  4041b8:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  4041ba:	4b37      	ldr	r3, [pc, #220]	; (404298 <USBHS_Handler+0x274>)
  4041bc:	4798      	blx	r3
  4041be:	e74b      	b.n	404058 <USBHS_Handler+0x34>
			udd_ctrl_send_zlp_in();
  4041c0:	4b36      	ldr	r3, [pc, #216]	; (40429c <USBHS_Handler+0x278>)
  4041c2:	4798      	blx	r3
  4041c4:	e748      	b.n	404058 <USBHS_Handler+0x34>
		udd_ctrl_in_sent();
  4041c6:	4b34      	ldr	r3, [pc, #208]	; (404298 <USBHS_Handler+0x274>)
  4041c8:	4798      	blx	r3
  4041ca:	e745      	b.n	404058 <USBHS_Handler+0x34>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  4041cc:	4b27      	ldr	r3, [pc, #156]	; (40426c <USBHS_Handler+0x248>)
  4041ce:	781b      	ldrb	r3, [r3, #0]
  4041d0:	2b01      	cmp	r3, #1
  4041d2:	d00b      	beq.n	4041ec <USBHS_Handler+0x1c8>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  4041d4:	2b02      	cmp	r3, #2
  4041d6:	d004      	beq.n	4041e2 <USBHS_Handler+0x1be>
  4041d8:	2b04      	cmp	r3, #4
  4041da:	d002      	beq.n	4041e2 <USBHS_Handler+0x1be>
			udd_ctrl_stall_data();
  4041dc:	4b2d      	ldr	r3, [pc, #180]	; (404294 <USBHS_Handler+0x270>)
  4041de:	4798      	blx	r3
  4041e0:	e001      	b.n	4041e6 <USBHS_Handler+0x1c2>
			udd_ctrl_endofrequest();
  4041e2:	4b2a      	ldr	r3, [pc, #168]	; (40428c <USBHS_Handler+0x268>)
  4041e4:	4798      	blx	r3
		udd_ctrl_init();
  4041e6:	4b2a      	ldr	r3, [pc, #168]	; (404290 <USBHS_Handler+0x26c>)
  4041e8:	4798      	blx	r3
  4041ea:	e735      	b.n	404058 <USBHS_Handler+0x34>
	nb_data = udd_byte_count(0);
  4041ec:	4b1c      	ldr	r3, [pc, #112]	; (404260 <USBHS_Handler+0x23c>)
  4041ee:	6818      	ldr	r0, [r3, #0]
  4041f0:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
  4041f4:	4b1f      	ldr	r3, [pc, #124]	; (404274 <USBHS_Handler+0x250>)
  4041f6:	899b      	ldrh	r3, [r3, #12]
  4041f8:	4a22      	ldr	r2, [pc, #136]	; (404284 <USBHS_Handler+0x260>)
  4041fa:	8814      	ldrh	r4, [r2, #0]
  4041fc:	1822      	adds	r2, r4, r0
  4041fe:	4293      	cmp	r3, r2
  404200:	da01      	bge.n	404206 <USBHS_Handler+0x1e2>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
  404202:	1b1b      	subs	r3, r3, r4
  404204:	b298      	uxth	r0, r3
	volatile uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  404206:	4b1b      	ldr	r3, [pc, #108]	; (404274 <USBHS_Handler+0x250>)
  404208:	6899      	ldr	r1, [r3, #8]
  40420a:	4421      	add	r1, r4
	for (i = 0; i < nb_data; i++) {
  40420c:	b178      	cbz	r0, 40422e <USBHS_Handler+0x20a>
  40420e:	4a18      	ldr	r2, [pc, #96]	; (404270 <USBHS_Handler+0x24c>)
		*ptr_dest++ = *ptr_src++;
  404210:	1c53      	adds	r3, r2, #1
  404212:	7812      	ldrb	r2, [r2, #0]
  404214:	b2d2      	uxtb	r2, r2
  404216:	700a      	strb	r2, [r1, #0]
  404218:	3101      	adds	r1, #1
  40421a:	461a      	mov	r2, r3
	for (i = 0; i < nb_data; i++) {
  40421c:	b2db      	uxtb	r3, r3
  40421e:	4283      	cmp	r3, r0
  404220:	d3f6      	bcc.n	404210 <USBHS_Handler+0x1ec>
	udd_ctrl_payload_buf_cnt += nb_data;
  404222:	4404      	add	r4, r0
  404224:	b2a4      	uxth	r4, r4
  404226:	4b17      	ldr	r3, [pc, #92]	; (404284 <USBHS_Handler+0x260>)
  404228:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  40422a:	2840      	cmp	r0, #64	; 0x40
  40422c:	d038      	beq.n	4042a0 <USBHS_Handler+0x27c>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
  40422e:	4b11      	ldr	r3, [pc, #68]	; (404274 <USBHS_Handler+0x250>)
  404230:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  404232:	695b      	ldr	r3, [r3, #20]
  404234:	b113      	cbz	r3, 40423c <USBHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
  404236:	4798      	blx	r3
  404238:	2800      	cmp	r0, #0
  40423a:	d05a      	beq.n	4042f2 <USBHS_Handler+0x2ce>
		udd_ack_out_received(0);
  40423c:	2202      	movs	r2, #2
  40423e:	4b0f      	ldr	r3, [pc, #60]	; (40427c <USBHS_Handler+0x258>)
  404240:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
  404242:	4b16      	ldr	r3, [pc, #88]	; (40429c <USBHS_Handler+0x278>)
  404244:	4798      	blx	r3
  404246:	e707      	b.n	404058 <USBHS_Handler+0x34>
  404248:	00403b31 	.word	0x00403b31
  40424c:	40038000 	.word	0x40038000
  404250:	00407949 	.word	0x00407949
  404254:	20400177 	.word	0x20400177
  404258:	00402f3d 	.word	0x00402f3d
  40425c:	40038220 	.word	0x40038220
  404260:	40038130 	.word	0x40038130
  404264:	400381c0 	.word	0x400381c0
  404268:	40038134 	.word	0x40038134
  40426c:	20400c2c 	.word	0x20400c2c
  404270:	a0100000 	.word	0xa0100000
  404274:	20400f18 	.word	0x20400f18
  404278:	00402f7d 	.word	0x00402f7d
  40427c:	40038160 	.word	0x40038160
  404280:	20400c2a 	.word	0x20400c2a
  404284:	20400c28 	.word	0x20400c28
  404288:	400381f0 	.word	0x400381f0
  40428c:	00403cad 	.word	0x00403cad
  404290:	00403be5 	.word	0x00403be5
  404294:	00403c41 	.word	0x00403c41
  404298:	00403cbd 	.word	0x00403cbd
  40429c:	00403c59 	.word	0x00403c59
			|| (udd_g_ctrlreq.req.wLength <=
  4042a0:	4ba8      	ldr	r3, [pc, #672]	; (404544 <USBHS_Handler+0x520>)
  4042a2:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
  4042a4:	4ba8      	ldr	r3, [pc, #672]	; (404548 <USBHS_Handler+0x524>)
  4042a6:	881b      	ldrh	r3, [r3, #0]
  4042a8:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
  4042aa:	429a      	cmp	r2, r3
  4042ac:	ddbf      	ble.n	40422e <USBHS_Handler+0x20a>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
  4042ae:	4ba5      	ldr	r3, [pc, #660]	; (404544 <USBHS_Handler+0x520>)
  4042b0:	899b      	ldrh	r3, [r3, #12]
  4042b2:	42a3      	cmp	r3, r4
  4042b4:	d023      	beq.n	4042fe <USBHS_Handler+0x2da>
	udd_ack_out_received(0);
  4042b6:	4ba5      	ldr	r3, [pc, #660]	; (40454c <USBHS_Handler+0x528>)
  4042b8:	2202      	movs	r2, #2
  4042ba:	601a      	str	r2, [r3, #0]
	udd_ack_nak_in(0);
  4042bc:	2210      	movs	r2, #16
  4042be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4042c0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4042c4:	fab3 f383 	clz	r3, r3
  4042c8:	095b      	lsrs	r3, r3, #5
  4042ca:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  4042cc:	b672      	cpsid	i
  4042ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4042d2:	2100      	movs	r1, #0
  4042d4:	4b9e      	ldr	r3, [pc, #632]	; (404550 <USBHS_Handler+0x52c>)
  4042d6:	7019      	strb	r1, [r3, #0]
	return flags;
  4042d8:	9b02      	ldr	r3, [sp, #8]
	udd_enable_nak_in_interrupt(0);
  4042da:	499e      	ldr	r1, [pc, #632]	; (404554 <USBHS_Handler+0x530>)
  4042dc:	600a      	str	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4042de:	2b00      	cmp	r3, #0
  4042e0:	f43f aeba 	beq.w	404058 <USBHS_Handler+0x34>
		cpu_irq_enable();
  4042e4:	2201      	movs	r2, #1
  4042e6:	4b9a      	ldr	r3, [pc, #616]	; (404550 <USBHS_Handler+0x52c>)
  4042e8:	701a      	strb	r2, [r3, #0]
  4042ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4042ee:	b662      	cpsie	i
  4042f0:	e6b2      	b.n	404058 <USBHS_Handler+0x34>
				udd_ctrl_stall_data();
  4042f2:	4b99      	ldr	r3, [pc, #612]	; (404558 <USBHS_Handler+0x534>)
  4042f4:	4798      	blx	r3
				udd_ack_out_received(0);
  4042f6:	2202      	movs	r2, #2
  4042f8:	4b94      	ldr	r3, [pc, #592]	; (40454c <USBHS_Handler+0x528>)
  4042fa:	601a      	str	r2, [r3, #0]
  4042fc:	e6ac      	b.n	404058 <USBHS_Handler+0x34>
		if (!udd_g_ctrlreq.over_under_run) {
  4042fe:	4b91      	ldr	r3, [pc, #580]	; (404544 <USBHS_Handler+0x520>)
  404300:	695b      	ldr	r3, [r3, #20]
  404302:	b153      	cbz	r3, 40431a <USBHS_Handler+0x2f6>
		if (!udd_g_ctrlreq.over_under_run()) {
  404304:	4798      	blx	r3
  404306:	b170      	cbz	r0, 404326 <USBHS_Handler+0x302>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
  404308:	498f      	ldr	r1, [pc, #572]	; (404548 <USBHS_Handler+0x524>)
  40430a:	4a94      	ldr	r2, [pc, #592]	; (40455c <USBHS_Handler+0x538>)
  40430c:	880b      	ldrh	r3, [r1, #0]
  40430e:	8810      	ldrh	r0, [r2, #0]
  404310:	4403      	add	r3, r0
  404312:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
  404314:	2300      	movs	r3, #0
  404316:	8013      	strh	r3, [r2, #0]
  404318:	e7cd      	b.n	4042b6 <USBHS_Handler+0x292>
			udd_ctrl_stall_data();
  40431a:	4b8f      	ldr	r3, [pc, #572]	; (404558 <USBHS_Handler+0x534>)
  40431c:	4798      	blx	r3
			udd_ack_out_received(0);
  40431e:	2202      	movs	r2, #2
  404320:	4b8a      	ldr	r3, [pc, #552]	; (40454c <USBHS_Handler+0x528>)
  404322:	601a      	str	r2, [r3, #0]
  404324:	e698      	b.n	404058 <USBHS_Handler+0x34>
			udd_ctrl_stall_data();
  404326:	4b8c      	ldr	r3, [pc, #560]	; (404558 <USBHS_Handler+0x534>)
  404328:	4798      	blx	r3
			udd_ack_out_received(0);
  40432a:	2202      	movs	r2, #2
  40432c:	4b87      	ldr	r3, [pc, #540]	; (40454c <USBHS_Handler+0x528>)
  40432e:	601a      	str	r2, [r3, #0]
  404330:	e692      	b.n	404058 <USBHS_Handler+0x34>
		udd_ack_nak_out(0);
  404332:	2208      	movs	r2, #8
  404334:	4b85      	ldr	r3, [pc, #532]	; (40454c <USBHS_Handler+0x528>)
  404336:	601a      	str	r2, [r3, #0]
	if (Is_udd_in_send(0))
  404338:	3b30      	subs	r3, #48	; 0x30
  40433a:	681b      	ldr	r3, [r3, #0]
  40433c:	f013 0f01 	tst.w	r3, #1
  404340:	f47f ae8a 	bne.w	404058 <USBHS_Handler+0x34>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  404344:	4b86      	ldr	r3, [pc, #536]	; (404560 <USBHS_Handler+0x53c>)
  404346:	781b      	ldrb	r3, [r3, #0]
  404348:	2b03      	cmp	r3, #3
  40434a:	f47f ae85 	bne.w	404058 <USBHS_Handler+0x34>
		udd_enable_stall_handshake(0);
  40434e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  404352:	4b80      	ldr	r3, [pc, #512]	; (404554 <USBHS_Handler+0x530>)
  404354:	601a      	str	r2, [r3, #0]
  404356:	e67f      	b.n	404058 <USBHS_Handler+0x34>
		udd_ack_nak_in(0);
  404358:	2210      	movs	r2, #16
  40435a:	4b7c      	ldr	r3, [pc, #496]	; (40454c <USBHS_Handler+0x528>)
  40435c:	601a      	str	r2, [r3, #0]
	if (Is_udd_out_received(0))
  40435e:	3b30      	subs	r3, #48	; 0x30
  404360:	681b      	ldr	r3, [r3, #0]
  404362:	f013 0f02 	tst.w	r3, #2
  404366:	f47f ae77 	bne.w	404058 <USBHS_Handler+0x34>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
  40436a:	4b7d      	ldr	r3, [pc, #500]	; (404560 <USBHS_Handler+0x53c>)
  40436c:	781b      	ldrb	r3, [r3, #0]
  40436e:	2b01      	cmp	r3, #1
  404370:	d007      	beq.n	404382 <USBHS_Handler+0x35e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
  404372:	2b04      	cmp	r3, #4
  404374:	f47f ae70 	bne.w	404058 <USBHS_Handler+0x34>
		udd_enable_stall_handshake(0);
  404378:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40437c:	4b75      	ldr	r3, [pc, #468]	; (404554 <USBHS_Handler+0x530>)
  40437e:	601a      	str	r2, [r3, #0]
  404380:	e66a      	b.n	404058 <USBHS_Handler+0x34>
		udd_ctrl_send_zlp_in();
  404382:	4b78      	ldr	r3, [pc, #480]	; (404564 <USBHS_Handler+0x540>)
  404384:	4798      	blx	r3
  404386:	e667      	b.n	404058 <USBHS_Handler+0x34>
			if (udd_endpoint_dma_get_status(ep)
  404388:	4b77      	ldr	r3, [pc, #476]	; (404568 <USBHS_Handler+0x544>)
  40438a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40438e:	68da      	ldr	r2, [r3, #12]
  404390:	f012 0f01 	tst.w	r2, #1
  404394:	f47f ae60 	bne.w	404058 <USBHS_Handler+0x34>
			udd_disable_endpoint_dma_interrupt(ep);
  404398:	4a74      	ldr	r2, [pc, #464]	; (40456c <USBHS_Handler+0x548>)
  40439a:	6151      	str	r1, [r2, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
  40439c:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
  40439e:	0c1b      	lsrs	r3, r3, #16
  4043a0:	d008      	beq.n	4043b4 <USBHS_Handler+0x390>
				ptr_job->buf_cnt -= nb_remaining;
  4043a2:	4a73      	ldr	r2, [pc, #460]	; (404570 <USBHS_Handler+0x54c>)
  4043a4:	007c      	lsls	r4, r7, #1
  4043a6:	19e5      	adds	r5, r4, r7
  4043a8:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
  4043ac:	68e9      	ldr	r1, [r5, #12]
  4043ae:	1acb      	subs	r3, r1, r3
  4043b0:	60eb      	str	r3, [r5, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
  4043b2:	60ab      	str	r3, [r5, #8]
			udd_ep_trans_done(ep);
  4043b4:	4b6f      	ldr	r3, [pc, #444]	; (404574 <USBHS_Handler+0x550>)
  4043b6:	4798      	blx	r3
  4043b8:	e64e      	b.n	404058 <USBHS_Handler+0x34>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
  4043ba:	4b6f      	ldr	r3, [pc, #444]	; (404578 <USBHS_Handler+0x554>)
  4043bc:	2201      	movs	r2, #1
  4043be:	f849 2003 	str.w	r2, [r9, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
  4043c2:	4962      	ldr	r1, [pc, #392]	; (40454c <USBHS_Handler+0x528>)
  4043c4:	f849 2001 	str.w	r2, [r9, r1]
				udd_ack_fifocon(ep);
  4043c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4043cc:	f849 2003 	str.w	r2, [r9, r3]
		ptr_job = &udd_ep_job[ep - 1];
  4043d0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
  4043d4:	4602      	mov	r2, r0
  4043d6:	2100      	movs	r1, #0
  4043d8:	4865      	ldr	r0, [pc, #404]	; (404570 <USBHS_Handler+0x54c>)
  4043da:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
  4043de:	4b67      	ldr	r3, [pc, #412]	; (40457c <USBHS_Handler+0x558>)
  4043e0:	4798      	blx	r3
  4043e2:	e639      	b.n	404058 <USBHS_Handler+0x34>
  4043e4:	3301      	adds	r3, #1
  4043e6:	3604      	adds	r6, #4
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4043e8:	2b07      	cmp	r3, #7
  4043ea:	f000 80d5 	beq.w	404598 <USBHS_Handler+0x574>
  4043ee:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
  4043f0:	461d      	mov	r5, r3
  4043f2:	1e5f      	subs	r7, r3, #1
  4043f4:	46b8      	mov	r8, r7
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  4043f6:	6914      	ldr	r4, [r2, #16]
  4043f8:	fa0e f107 	lsl.w	r1, lr, r7
  4043fc:	420c      	tst	r4, r1
  4043fe:	d002      	beq.n	404406 <USBHS_Handler+0x3e2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
  404400:	6854      	ldr	r4, [r2, #4]
  404402:	4221      	tst	r1, r4
  404404:	d1c0      	bne.n	404388 <USBHS_Handler+0x364>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  404406:	6911      	ldr	r1, [r2, #16]
  404408:	fa0c f505 	lsl.w	r5, ip, r5
  40440c:	4229      	tst	r1, r5
  40440e:	d0e9      	beq.n	4043e4 <USBHS_Handler+0x3c0>
  404410:	ea4f 0983 	mov.w	r9, r3, lsl #2
  404414:	f106 0490 	add.w	r4, r6, #144	; 0x90
			if (Is_udd_in_send_interrupt_enabled(ep)
  404418:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
  40441c:	f011 0f01 	tst.w	r1, #1
  404420:	d003      	beq.n	40442a <USBHS_Handler+0x406>
					&& Is_udd_in_send(ep)) {
  404422:	6831      	ldr	r1, [r6, #0]
  404424:	f011 0f01 	tst.w	r1, #1
  404428:	d1c7      	bne.n	4043ba <USBHS_Handler+0x396>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
  40442a:	6821      	ldr	r1, [r4, #0]
  40442c:	f411 5f80 	tst.w	r1, #4096	; 0x1000
  404430:	d0d8      	beq.n	4043e4 <USBHS_Handler+0x3c0>
					&& (0 == udd_nb_busy_bank(ep))) {
  404432:	6831      	ldr	r1, [r6, #0]
  404434:	f411 5f40 	tst.w	r1, #12288	; 0x3000
  404438:	d1d4      	bne.n	4043e4 <USBHS_Handler+0x3c0>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
  40443a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40443e:	4b4e      	ldr	r3, [pc, #312]	; (404578 <USBHS_Handler+0x554>)
  404440:	f849 2003 	str.w	r2, [r9, r3]
				udd_disable_endpoint_interrupt(ep);
  404444:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
  404448:	615d      	str	r5, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
  40444a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  40444e:	4b48      	ldr	r3, [pc, #288]	; (404570 <USBHS_Handler+0x54c>)
  404450:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
  404454:	f898 2014 	ldrb.w	r2, [r8, #20]
  404458:	f36f 0282 	bfc	r2, #2, #1
  40445c:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
  404460:	4a47      	ldr	r2, [pc, #284]	; (404580 <USBHS_Handler+0x55c>)
  404462:	f859 3002 	ldr.w	r3, [r9, r2]
  404466:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  40446a:	f849 3002 	str.w	r3, [r9, r2]
				udd_enable_stall_handshake(ep);
  40446e:	4b39      	ldr	r3, [pc, #228]	; (404554 <USBHS_Handler+0x530>)
  404470:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  404474:	f849 2003 	str.w	r2, [r9, r3]
				udd_reset_data_toggle(ep);
  404478:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40447c:	f849 2003 	str.w	r2, [r9, r3]
  404480:	e5ea      	b.n	404058 <USBHS_Handler+0x34>
		udd_ack_reset();
  404482:	2208      	movs	r2, #8
  404484:	4b39      	ldr	r3, [pc, #228]	; (40456c <USBHS_Handler+0x548>)
  404486:	609a      	str	r2, [r3, #8]
  404488:	4d39      	ldr	r5, [pc, #228]	; (404570 <USBHS_Handler+0x54c>)
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40448a:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
  40448c:	2701      	movs	r7, #1
  40448e:	4e3b      	ldr	r6, [pc, #236]	; (40457c <USBHS_Handler+0x558>)
  404490:	3401      	adds	r4, #1
  404492:	b2e4      	uxtb	r4, r4
  404494:	4622      	mov	r2, r4
  404496:	4639      	mov	r1, r7
  404498:	4628      	mov	r0, r5
  40449a:	47b0      	blx	r6
  40449c:	3518      	adds	r5, #24
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40449e:	2c06      	cmp	r4, #6
  4044a0:	d1f6      	bne.n	404490 <USBHS_Handler+0x46c>
		udc_reset();
  4044a2:	4b38      	ldr	r3, [pc, #224]	; (404584 <USBHS_Handler+0x560>)
  4044a4:	4798      	blx	r3
	udd_configure_address(0);
  4044a6:	4b31      	ldr	r3, [pc, #196]	; (40456c <USBHS_Handler+0x548>)
  4044a8:	681a      	ldr	r2, [r3, #0]
  4044aa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4044ae:	601a      	str	r2, [r3, #0]
	udd_enable_address();
  4044b0:	681a      	ldr	r2, [r3, #0]
  4044b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4044b6:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
  4044b8:	4931      	ldr	r1, [pc, #196]	; (404580 <USBHS_Handler+0x55c>)
  4044ba:	6808      	ldr	r0, [r1, #0]
  4044bc:	4a32      	ldr	r2, [pc, #200]	; (404588 <USBHS_Handler+0x564>)
  4044be:	4002      	ands	r2, r0
  4044c0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  4044c4:	600a      	str	r2, [r1, #0]
	udd_allocate_memory(0);
  4044c6:	680a      	ldr	r2, [r1, #0]
  4044c8:	f042 0202 	orr.w	r2, r2, #2
  4044cc:	600a      	str	r2, [r1, #0]
	udd_enable_endpoint(0);
  4044ce:	69da      	ldr	r2, [r3, #28]
  4044d0:	f042 0201 	orr.w	r2, r2, #1
  4044d4:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4044d6:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4044da:	fab2 f282 	clz	r2, r2
  4044de:	0952      	lsrs	r2, r2, #5
  4044e0:	9203      	str	r2, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  4044e2:	b672      	cpsid	i
  4044e4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4044e8:	2100      	movs	r1, #0
  4044ea:	4a19      	ldr	r2, [pc, #100]	; (404550 <USBHS_Handler+0x52c>)
  4044ec:	7011      	strb	r1, [r2, #0]
	return flags;
  4044ee:	9903      	ldr	r1, [sp, #12]
	udd_enable_setup_received_interrupt(0);
  4044f0:	4a18      	ldr	r2, [pc, #96]	; (404554 <USBHS_Handler+0x530>)
  4044f2:	2004      	movs	r0, #4
  4044f4:	6010      	str	r0, [r2, #0]
	udd_enable_out_received_interrupt(0);
  4044f6:	2002      	movs	r0, #2
  4044f8:	6010      	str	r0, [r2, #0]
	udd_enable_endpoint_interrupt(0);
  4044fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4044fe:	619a      	str	r2, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
  404500:	b129      	cbz	r1, 40450e <USBHS_Handler+0x4ea>
		cpu_irq_enable();
  404502:	2201      	movs	r2, #1
  404504:	4b12      	ldr	r3, [pc, #72]	; (404550 <USBHS_Handler+0x52c>)
  404506:	701a      	strb	r2, [r3, #0]
  404508:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40450c:	b662      	cpsie	i
		udd_ctrl_init();
  40450e:	4b1f      	ldr	r3, [pc, #124]	; (40458c <USBHS_Handler+0x568>)
  404510:	4798      	blx	r3
		goto udd_interrupt_end;
  404512:	e5a1      	b.n	404058 <USBHS_Handler+0x34>
		otg_unfreeze_clock();
  404514:	4b15      	ldr	r3, [pc, #84]	; (40456c <USBHS_Handler+0x548>)
  404516:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  40451a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  40451e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_disable_suspend_interrupt();
  404522:	2201      	movs	r2, #1
  404524:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  404526:	2210      	movs	r2, #16
  404528:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
  40452a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  40452e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  404532:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
  404536:	2000      	movs	r0, #0
  404538:	4b15      	ldr	r3, [pc, #84]	; (404590 <USBHS_Handler+0x56c>)
  40453a:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
  40453c:	4b15      	ldr	r3, [pc, #84]	; (404594 <USBHS_Handler+0x570>)
  40453e:	4798      	blx	r3
		goto udd_interrupt_end;
  404540:	e58a      	b.n	404058 <USBHS_Handler+0x34>
  404542:	bf00      	nop
  404544:	20400f18 	.word	0x20400f18
  404548:	20400c2a 	.word	0x20400c2a
  40454c:	40038160 	.word	0x40038160
  404550:	20400177 	.word	0x20400177
  404554:	400381f0 	.word	0x400381f0
  404558:	00403c41 	.word	0x00403c41
  40455c:	20400c28 	.word	0x20400c28
  404560:	20400c2c 	.word	0x20400c2c
  404564:	00403c59 	.word	0x00403c59
  404568:	40038300 	.word	0x40038300
  40456c:	40038000 	.word	0x40038000
  404570:	20400c30 	.word	0x20400c30
  404574:	00403e7d 	.word	0x00403e7d
  404578:	40038220 	.word	0x40038220
  40457c:	00403e45 	.word	0x00403e45
  404580:	40038100 	.word	0x40038100
  404584:	00402ef5 	.word	0x00402ef5
  404588:	ffffe683 	.word	0xffffe683
  40458c:	00403be5 	.word	0x00403be5
  404590:	00403b41 	.word	0x00403b41
  404594:	00407919 	.word	0x00407919
	if (Is_udd_reset()) {
  404598:	4b1b      	ldr	r3, [pc, #108]	; (404608 <USBHS_Handler+0x5e4>)
  40459a:	685b      	ldr	r3, [r3, #4]
  40459c:	f013 0f08 	tst.w	r3, #8
  4045a0:	f47f af6f 	bne.w	404482 <USBHS_Handler+0x45e>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  4045a4:	4b18      	ldr	r3, [pc, #96]	; (404608 <USBHS_Handler+0x5e4>)
  4045a6:	691b      	ldr	r3, [r3, #16]
  4045a8:	f013 0f01 	tst.w	r3, #1
  4045ac:	d004      	beq.n	4045b8 <USBHS_Handler+0x594>
  4045ae:	4b16      	ldr	r3, [pc, #88]	; (404608 <USBHS_Handler+0x5e4>)
  4045b0:	685b      	ldr	r3, [r3, #4]
  4045b2:	f013 0f01 	tst.w	r3, #1
  4045b6:	d1ad      	bne.n	404514 <USBHS_Handler+0x4f0>
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
  4045b8:	4b13      	ldr	r3, [pc, #76]	; (404608 <USBHS_Handler+0x5e4>)
  4045ba:	691b      	ldr	r3, [r3, #16]
  4045bc:	f013 0f10 	tst.w	r3, #16
  4045c0:	f43f ad4a 	beq.w	404058 <USBHS_Handler+0x34>
  4045c4:	4b10      	ldr	r3, [pc, #64]	; (404608 <USBHS_Handler+0x5e4>)
  4045c6:	685b      	ldr	r3, [r3, #4]
  4045c8:	f013 0f10 	tst.w	r3, #16
  4045cc:	f43f ad44 	beq.w	404058 <USBHS_Handler+0x34>
		otg_unfreeze_clock();
  4045d0:	4a0d      	ldr	r2, [pc, #52]	; (404608 <USBHS_Handler+0x5e4>)
  4045d2:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  4045d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  4045da:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
  4045de:	4613      	mov	r3, r2
  4045e0:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
  4045e4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
  4045e8:	d103      	bne.n	4045f2 <USBHS_Handler+0x5ce>
			if (Is_udd_suspend()) {
  4045ea:	685a      	ldr	r2, [r3, #4]
  4045ec:	f012 0f01 	tst.w	r2, #1
  4045f0:	d0f6      	beq.n	4045e0 <USBHS_Handler+0x5bc>
		udd_disable_wake_up_interrupt();
  4045f2:	4b05      	ldr	r3, [pc, #20]	; (404608 <USBHS_Handler+0x5e4>)
  4045f4:	2210      	movs	r2, #16
  4045f6:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
  4045f8:	2001      	movs	r0, #1
  4045fa:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
  4045fc:	4b03      	ldr	r3, [pc, #12]	; (40460c <USBHS_Handler+0x5e8>)
  4045fe:	4798      	blx	r3
		UDC_RESUME_EVENT();
  404600:	4b03      	ldr	r3, [pc, #12]	; (404610 <USBHS_Handler+0x5ec>)
  404602:	4798      	blx	r3
		goto udd_interrupt_end;
  404604:	e528      	b.n	404058 <USBHS_Handler+0x34>
  404606:	bf00      	nop
  404608:	40038000 	.word	0x40038000
  40460c:	00403b41 	.word	0x00403b41
  404610:	00407931 	.word	0x00407931

00404614 <udd_attach>:
{
  404614:	b530      	push	{r4, r5, lr}
  404616:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404618:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40461c:	fab3 f383 	clz	r3, r3
  404620:	095b      	lsrs	r3, r3, #5
  404622:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404624:	b672      	cpsid	i
  404626:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40462a:	2200      	movs	r2, #0
  40462c:	4b19      	ldr	r3, [pc, #100]	; (404694 <udd_attach+0x80>)
  40462e:	701a      	strb	r2, [r3, #0]
	return flags;
  404630:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  404632:	2001      	movs	r0, #1
  404634:	4b18      	ldr	r3, [pc, #96]	; (404698 <udd_attach+0x84>)
  404636:	4798      	blx	r3
	otg_unfreeze_clock();
  404638:	4a18      	ldr	r2, [pc, #96]	; (40469c <udd_attach+0x88>)
  40463a:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  40463e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  404642:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	while (!Is_otg_clock_usable());
  404646:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
  40464a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40464e:	d0fa      	beq.n	404646 <udd_attach+0x32>
	udd_attach_device();
  404650:	4b12      	ldr	r3, [pc, #72]	; (40469c <udd_attach+0x88>)
  404652:	681a      	ldr	r2, [r3, #0]
  404654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  404658:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
  40465a:	2508      	movs	r5, #8
  40465c:	619d      	str	r5, [r3, #24]
	udd_enable_suspend_interrupt();
  40465e:	2101      	movs	r1, #1
  404660:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
  404662:	2210      	movs	r2, #16
  404664:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
  404666:	2004      	movs	r0, #4
  404668:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
  40466a:	609d      	str	r5, [r3, #8]
	udd_ack_sof();
  40466c:	6098      	str	r0, [r3, #8]
	udd_ack_msof();
  40466e:	2002      	movs	r0, #2
  404670:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
  404672:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
  404674:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
  404676:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  40467a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40467e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
  404682:	b124      	cbz	r4, 40468e <udd_attach+0x7a>
		cpu_irq_enable();
  404684:	4b03      	ldr	r3, [pc, #12]	; (404694 <udd_attach+0x80>)
  404686:	7019      	strb	r1, [r3, #0]
  404688:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40468c:	b662      	cpsie	i
}
  40468e:	b003      	add	sp, #12
  404690:	bd30      	pop	{r4, r5, pc}
  404692:	bf00      	nop
  404694:	20400177 	.word	0x20400177
  404698:	00403b41 	.word	0x00403b41
  40469c:	40038000 	.word	0x40038000

004046a0 <udd_enable>:
{
  4046a0:	b510      	push	{r4, lr}
  4046a2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4046a4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4046a8:	fab3 f383 	clz	r3, r3
  4046ac:	095b      	lsrs	r3, r3, #5
  4046ae:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4046b0:	b672      	cpsid	i
  4046b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4046b6:	2200      	movs	r2, #0
  4046b8:	4b3f      	ldr	r3, [pc, #252]	; (4047b8 <udd_enable+0x118>)
  4046ba:	701a      	strb	r2, [r3, #0]
	return flags;
  4046bc:	9c00      	ldr	r4, [sp, #0]
	pmc_enable_periph_clk(ID_USBHS);
  4046be:	2022      	movs	r0, #34	; 0x22
  4046c0:	4b3e      	ldr	r3, [pc, #248]	; (4047bc <udd_enable+0x11c>)
  4046c2:	4798      	blx	r3
	sysclk_enable_usb();
  4046c4:	4b3e      	ldr	r3, [pc, #248]	; (4047c0 <udd_enable+0x120>)
  4046c6:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4046c8:	4b3e      	ldr	r3, [pc, #248]	; (4047c4 <udd_enable+0x124>)
  4046ca:	22a0      	movs	r2, #160	; 0xa0
  4046cc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4046d0:	2204      	movs	r2, #4
  4046d2:	605a      	str	r2, [r3, #4]
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  4046d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4046d8:	4b3b      	ldr	r3, [pc, #236]	; (4047c8 <udd_enable+0x128>)
  4046da:	4798      	blx	r3
	USBHS->USBHS_CTRL = USBHS_CTRL_UIMOD_DEVICE;
  4046dc:	4b3b      	ldr	r3, [pc, #236]	; (4047cc <udd_enable+0x12c>)
  4046de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4046e2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
  4046e6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  4046ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4046ee:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_low_speed_disable();
  4046f2:	681a      	ldr	r2, [r3, #0]
  4046f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4046f8:	601a      	str	r2, [r3, #0]
	udd_high_speed_disable();
  4046fa:	681a      	ldr	r2, [r3, #0]
  4046fc:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
  404700:	601a      	str	r2, [r3, #0]
	otg_unfreeze_clock();
  404702:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  404706:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  40470a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
  40470e:	461a      	mov	r2, r3
  404710:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
  404714:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  404718:	d0fa      	beq.n	404710 <udd_enable+0x70>
  40471a:	2200      	movs	r2, #0
		udd_ep_job[i].busy = false;
  40471c:	482c      	ldr	r0, [pc, #176]	; (4047d0 <udd_enable+0x130>)
  40471e:	0053      	lsls	r3, r2, #1
  404720:	1899      	adds	r1, r3, r2
  404722:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  404726:	7d09      	ldrb	r1, [r1, #20]
		udd_ep_job[i].stall_requested = false;
  404728:	4413      	add	r3, r2
  40472a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  40472e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  404732:	f36f 0182 	bfc	r1, #2, #1
  404736:	7519      	strb	r1, [r3, #20]
  404738:	3201      	adds	r2, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40473a:	2a06      	cmp	r2, #6
  40473c:	d1ef      	bne.n	40471e <udd_enable+0x7e>
	otg_freeze_clock();
  40473e:	4a23      	ldr	r2, [pc, #140]	; (4047cc <udd_enable+0x12c>)
  404740:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  404744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  404748:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	if (!udd_b_sleep_initialized) {
  40474c:	4b21      	ldr	r3, [pc, #132]	; (4047d4 <udd_enable+0x134>)
  40474e:	781b      	ldrb	r3, [r3, #0]
  404750:	bb1b      	cbnz	r3, 40479a <udd_enable+0xfa>
		udd_b_sleep_initialized = true;
  404752:	2201      	movs	r2, #1
  404754:	4b1f      	ldr	r3, [pc, #124]	; (4047d4 <udd_enable+0x134>)
  404756:	701a      	strb	r2, [r3, #0]
		udd_b_idle = false;
  404758:	2200      	movs	r2, #0
  40475a:	4b1f      	ldr	r3, [pc, #124]	; (4047d8 <udd_enable+0x138>)
  40475c:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  40475e:	4b1f      	ldr	r3, [pc, #124]	; (4047dc <udd_enable+0x13c>)
  404760:	78db      	ldrb	r3, [r3, #3]
  404762:	2bff      	cmp	r3, #255	; 0xff
  404764:	d018      	beq.n	404798 <udd_enable+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404766:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40476a:	fab3 f383 	clz	r3, r3
  40476e:	095b      	lsrs	r3, r3, #5
  404770:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404772:	b672      	cpsid	i
  404774:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404778:	2200      	movs	r2, #0
  40477a:	4b0f      	ldr	r3, [pc, #60]	; (4047b8 <udd_enable+0x118>)
  40477c:	701a      	strb	r2, [r3, #0]
	return flags;
  40477e:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  404780:	4a16      	ldr	r2, [pc, #88]	; (4047dc <udd_enable+0x13c>)
  404782:	78d3      	ldrb	r3, [r2, #3]
  404784:	3301      	adds	r3, #1
  404786:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
  404788:	b151      	cbz	r1, 4047a0 <udd_enable+0x100>
		cpu_irq_enable();
  40478a:	2201      	movs	r2, #1
  40478c:	4b0a      	ldr	r3, [pc, #40]	; (4047b8 <udd_enable+0x118>)
  40478e:	701a      	strb	r2, [r3, #0]
  404790:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404794:	b662      	cpsie	i
  404796:	e003      	b.n	4047a0 <udd_enable+0x100>
  404798:	e7fe      	b.n	404798 <udd_enable+0xf8>
		udd_sleep_mode(false); // Enter idle mode
  40479a:	2000      	movs	r0, #0
  40479c:	4b10      	ldr	r3, [pc, #64]	; (4047e0 <udd_enable+0x140>)
  40479e:	4798      	blx	r3
	udd_attach();
  4047a0:	4b10      	ldr	r3, [pc, #64]	; (4047e4 <udd_enable+0x144>)
  4047a2:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  4047a4:	b12c      	cbz	r4, 4047b2 <udd_enable+0x112>
		cpu_irq_enable();
  4047a6:	2201      	movs	r2, #1
  4047a8:	4b03      	ldr	r3, [pc, #12]	; (4047b8 <udd_enable+0x118>)
  4047aa:	701a      	strb	r2, [r3, #0]
  4047ac:	f3bf 8f5f 	dmb	sy
  4047b0:	b662      	cpsie	i
}
  4047b2:	b002      	add	sp, #8
  4047b4:	bd10      	pop	{r4, pc}
  4047b6:	bf00      	nop
  4047b8:	20400177 	.word	0x20400177
  4047bc:	00403819 	.word	0x00403819
  4047c0:	00402b5d 	.word	0x00402b5d
  4047c4:	e000e100 	.word	0xe000e100
  4047c8:	00403859 	.word	0x00403859
  4047cc:	40038000 	.word	0x40038000
  4047d0:	20400c30 	.word	0x20400c30
  4047d4:	20400c26 	.word	0x20400c26
  4047d8:	20400c25 	.word	0x20400c25
  4047dc:	20400f10 	.word	0x20400f10
  4047e0:	00403b41 	.word	0x00403b41
  4047e4:	00404615 	.word	0x00404615

004047e8 <udd_is_high_speed>:
}
  4047e8:	2000      	movs	r0, #0
  4047ea:	4770      	bx	lr

004047ec <udd_set_address>:
	udd_disable_address();
  4047ec:	4b08      	ldr	r3, [pc, #32]	; (404810 <udd_set_address+0x24>)
  4047ee:	681a      	ldr	r2, [r3, #0]
  4047f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4047f4:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
  4047f6:	681a      	ldr	r2, [r3, #0]
  4047f8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4047fc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  404800:	4302      	orrs	r2, r0
  404802:	601a      	str	r2, [r3, #0]
	udd_enable_address();
  404804:	681a      	ldr	r2, [r3, #0]
  404806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40480a:	601a      	str	r2, [r3, #0]
  40480c:	4770      	bx	lr
  40480e:	bf00      	nop
  404810:	40038000 	.word	0x40038000

00404814 <udd_getaddress>:
	return udd_get_configured_address();
  404814:	4b02      	ldr	r3, [pc, #8]	; (404820 <udd_getaddress+0xc>)
  404816:	6818      	ldr	r0, [r3, #0]
}
  404818:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40481c:	4770      	bx	lr
  40481e:	bf00      	nop
  404820:	40038000 	.word	0x40038000

00404824 <udd_get_frame_number>:
	return udd_frame_number();
  404824:	4b02      	ldr	r3, [pc, #8]	; (404830 <udd_get_frame_number+0xc>)
  404826:	6a18      	ldr	r0, [r3, #32]
}
  404828:	f3c0 00ca 	ubfx	r0, r0, #3, #11
  40482c:	4770      	bx	lr
  40482e:	bf00      	nop
  404830:	40038000 	.word	0x40038000

00404834 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  404834:	4b01      	ldr	r3, [pc, #4]	; (40483c <udd_set_setup_payload+0x8>)
  404836:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  404838:	8199      	strh	r1, [r3, #12]
  40483a:	4770      	bx	lr
  40483c:	20400f18 	.word	0x20400f18

00404840 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404840:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  404844:	2a06      	cmp	r2, #6
  404846:	d900      	bls.n	40484a <udd_ep_free+0xa>
  404848:	4770      	bx	lr
{
  40484a:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
  40484c:	4810      	ldr	r0, [pc, #64]	; (404890 <udd_ep_free+0x50>)
  40484e:	69c3      	ldr	r3, [r0, #28]
  404850:	2101      	movs	r1, #1
  404852:	fa01 f402 	lsl.w	r4, r1, r2
  404856:	ea23 0304 	bic.w	r3, r3, r4
  40485a:	61c3      	str	r3, [r0, #28]
	udd_unallocate_memory(ep_index);
  40485c:	f500 7080 	add.w	r0, r0, #256	; 0x100
  404860:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
  404864:	f023 0302 	bic.w	r3, r3, #2
  404868:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
  40486c:	1e56      	subs	r6, r2, #1
  40486e:	4c09      	ldr	r4, [pc, #36]	; (404894 <udd_ep_free+0x54>)
  404870:	fa06 f501 	lsl.w	r5, r6, r1
  404874:	19a8      	adds	r0, r5, r6
  404876:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  40487a:	4b07      	ldr	r3, [pc, #28]	; (404898 <udd_ep_free+0x58>)
  40487c:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
  40487e:	4435      	add	r5, r6
  404880:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  404884:	7d23      	ldrb	r3, [r4, #20]
  404886:	f36f 0382 	bfc	r3, #2, #1
  40488a:	7523      	strb	r3, [r4, #20]
  40488c:	bd70      	pop	{r4, r5, r6, pc}
  40488e:	bf00      	nop
  404890:	40038000 	.word	0x40038000
  404894:	20400c30 	.word	0x20400c30
  404898:	00403e45 	.word	0x00403e45

0040489c <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
  40489c:	f000 000f 	and.w	r0, r0, #15
  4048a0:	4b02      	ldr	r3, [pc, #8]	; (4048ac <udd_ep_is_halted+0x10>)
  4048a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
  4048a6:	f3c0 40c0 	ubfx	r0, r0, #19, #1
  4048aa:	4770      	bx	lr
  4048ac:	400381c0 	.word	0x400381c0

004048b0 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4048b0:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4048b4:	2b06      	cmp	r3, #6
  4048b6:	d85d      	bhi.n	404974 <udd_ep_set_halt+0xc4>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
  4048b8:	4a36      	ldr	r2, [pc, #216]	; (404994 <udd_ep_set_halt+0xe4>)
  4048ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4048be:	f412 2f00 	tst.w	r2, #524288	; 0x80000
  4048c2:	d159      	bne.n	404978 <udd_ep_set_halt+0xc8>
{
  4048c4:	b410      	push	{r4}
  4048c6:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  4048c8:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
  4048ca:	eb01 0441 	add.w	r4, r1, r1, lsl #1
  4048ce:	4a32      	ldr	r2, [pc, #200]	; (404998 <udd_ep_set_halt+0xe8>)
  4048d0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  4048d4:	7d12      	ldrb	r2, [r2, #20]
  4048d6:	f012 0f04 	tst.w	r2, #4
  4048da:	d14f      	bne.n	40497c <udd_ep_set_halt+0xcc>
	if (ptr_job->busy == true) {
  4048dc:	f012 0f01 	tst.w	r2, #1
  4048e0:	d151      	bne.n	404986 <udd_ep_set_halt+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4048e2:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4048e6:	fab2 f282 	clz	r2, r2
  4048ea:	0952      	lsrs	r2, r2, #5
  4048ec:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4048ee:	b672      	cpsid	i
  4048f0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4048f4:	2400      	movs	r4, #0
  4048f6:	4a29      	ldr	r2, [pc, #164]	; (40499c <udd_ep_set_halt+0xec>)
  4048f8:	7014      	strb	r4, [r2, #0]
	return flags;
  4048fa:	9c01      	ldr	r4, [sp, #4]
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
  4048fc:	f010 0f80 	tst.w	r0, #128	; 0x80
  404900:	d118      	bne.n	404934 <udd_ep_set_halt+0x84>
	udd_disable_endpoint_bank_autoswitch(ep_index);
  404902:	4927      	ldr	r1, [pc, #156]	; (4049a0 <udd_ep_set_halt+0xf0>)
  404904:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
  404908:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  40490c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_ack_stall(ep_index);
  404910:	2140      	movs	r1, #64	; 0x40
  404912:	4a24      	ldr	r2, [pc, #144]	; (4049a4 <udd_ep_set_halt+0xf4>)
  404914:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
  404918:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40491c:	3290      	adds	r2, #144	; 0x90
  40491e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
  404922:	2c00      	cmp	r4, #0
  404924:	d033      	beq.n	40498e <udd_ep_set_halt+0xde>
		cpu_irq_enable();
  404926:	2001      	movs	r0, #1
  404928:	4b1c      	ldr	r3, [pc, #112]	; (40499c <udd_ep_set_halt+0xec>)
  40492a:	7018      	strb	r0, [r3, #0]
  40492c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404930:	b662      	cpsie	i
  404932:	e024      	b.n	40497e <udd_ep_set_halt+0xce>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
  404934:	4a1c      	ldr	r2, [pc, #112]	; (4049a8 <udd_ep_set_halt+0xf8>)
  404936:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40493a:	f412 5f40 	tst.w	r2, #12288	; 0x3000
  40493e:	d0e0      	beq.n	404902 <udd_ep_set_halt+0x52>
		ptr_job->stall_requested = true;
  404940:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  404944:	4a14      	ldr	r2, [pc, #80]	; (404998 <udd_ep_set_halt+0xe8>)
  404946:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
  40494a:	7d0a      	ldrb	r2, [r1, #20]
  40494c:	f042 0204 	orr.w	r2, r2, #4
  404950:	750a      	strb	r2, [r1, #20]
		udd_enable_bank_interrupt(ep_index);
  404952:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  404956:	4915      	ldr	r1, [pc, #84]	; (4049ac <udd_ep_set_halt+0xfc>)
  404958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
  40495c:	fa02 f303 	lsl.w	r3, r2, r3
  404960:	4a13      	ldr	r2, [pc, #76]	; (4049b0 <udd_ep_set_halt+0x100>)
  404962:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
  404964:	b18c      	cbz	r4, 40498a <udd_ep_set_halt+0xda>
		cpu_irq_enable();
  404966:	2001      	movs	r0, #1
  404968:	4b0c      	ldr	r3, [pc, #48]	; (40499c <udd_ep_set_halt+0xec>)
  40496a:	7018      	strb	r0, [r3, #0]
  40496c:	f3bf 8f5f 	dmb	sy
  404970:	b662      	cpsie	i
  404972:	e004      	b.n	40497e <udd_ep_set_halt+0xce>
		return false;
  404974:	2000      	movs	r0, #0
  404976:	4770      	bx	lr
		return true; // Already STALL
  404978:	2001      	movs	r0, #1
  40497a:	4770      	bx	lr
  40497c:	2001      	movs	r0, #1
}
  40497e:	b003      	add	sp, #12
  404980:	f85d 4b04 	ldr.w	r4, [sp], #4
  404984:	4770      	bx	lr
		return false; // Job on going, stall impossible
  404986:	2000      	movs	r0, #0
  404988:	e7f9      	b.n	40497e <udd_ep_set_halt+0xce>
		return true;
  40498a:	2001      	movs	r0, #1
  40498c:	e7f7      	b.n	40497e <udd_ep_set_halt+0xce>
	return true;
  40498e:	2001      	movs	r0, #1
  404990:	e7f5      	b.n	40497e <udd_ep_set_halt+0xce>
  404992:	bf00      	nop
  404994:	400381c0 	.word	0x400381c0
  404998:	20400c30 	.word	0x20400c30
  40499c:	20400177 	.word	0x20400177
  4049a0:	40038100 	.word	0x40038100
  4049a4:	40038160 	.word	0x40038160
  4049a8:	40038130 	.word	0x40038130
  4049ac:	400381f0 	.word	0x400381f0
  4049b0:	40038000 	.word	0x40038000

004049b4 <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4049b4:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
  4049b8:	2806      	cmp	r0, #6
  4049ba:	d851      	bhi.n	404a60 <udd_ep_clear_halt+0xac>
{
  4049bc:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  4049be:	1e43      	subs	r3, r0, #1
	if (ptr_job->stall_requested) {
  4049c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4049c4:	4a2c      	ldr	r2, [pc, #176]	; (404a78 <udd_ep_clear_halt+0xc4>)
  4049c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  4049ca:	7d12      	ldrb	r2, [r2, #20]
  4049cc:	f012 0f04 	tst.w	r2, #4
  4049d0:	d048      	beq.n	404a64 <udd_ep_clear_halt+0xb0>
		ptr_job->stall_requested = false;
  4049d2:	460a      	mov	r2, r1
  4049d4:	4928      	ldr	r1, [pc, #160]	; (404a78 <udd_ep_clear_halt+0xc4>)
  4049d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4049da:	7d11      	ldrb	r1, [r2, #20]
  4049dc:	f36f 0182 	bfc	r1, #2, #1
  4049e0:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
  4049e2:	0082      	lsls	r2, r0, #2
  4049e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4049e8:	4c24      	ldr	r4, [pc, #144]	; (404a7c <udd_ep_clear_halt+0xc8>)
  4049ea:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
  4049ee:	4081      	lsls	r1, r0
  4049f0:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
  4049f4:	6161      	str	r1, [r4, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
  4049f6:	4922      	ldr	r1, [pc, #136]	; (404a80 <udd_ep_clear_halt+0xcc>)
  4049f8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4049fc:	f411 2f00 	tst.w	r1, #524288	; 0x80000
  404a00:	d014      	beq.n	404a2c <udd_ep_clear_halt+0x78>
		if (Is_udd_stall(ep_index)) {
  404a02:	4920      	ldr	r1, [pc, #128]	; (404a84 <udd_ep_clear_halt+0xd0>)
  404a04:	5851      	ldr	r1, [r2, r1]
  404a06:	f011 0f40 	tst.w	r1, #64	; 0x40
  404a0a:	d006      	beq.n	404a1a <udd_ep_clear_halt+0x66>
			udd_ack_stall(ep_index);
  404a0c:	2040      	movs	r0, #64	; 0x40
  404a0e:	491e      	ldr	r1, [pc, #120]	; (404a88 <udd_ep_clear_halt+0xd4>)
  404a10:	5050      	str	r0, [r2, r1]
			udd_reset_data_toggle(ep_index);
  404a12:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  404a16:	3190      	adds	r1, #144	; 0x90
  404a18:	5050      	str	r0, [r2, r1]
		udd_disable_stall_handshake(ep_index);
  404a1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  404a1e:	4917      	ldr	r1, [pc, #92]	; (404a7c <udd_ep_clear_halt+0xc8>)
  404a20:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
  404a22:	481a      	ldr	r0, [pc, #104]	; (404a8c <udd_ep_clear_halt+0xd8>)
  404a24:	5811      	ldr	r1, [r2, r0]
  404a26:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  404a2a:	5011      	str	r1, [r2, r0]
		if (ptr_job->busy == true) {
  404a2c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  404a30:	4911      	ldr	r1, [pc, #68]	; (404a78 <udd_ep_clear_halt+0xc4>)
  404a32:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  404a36:	7d12      	ldrb	r2, [r2, #20]
  404a38:	f012 0f01 	tst.w	r2, #1
  404a3c:	d101      	bne.n	404a42 <udd_ep_clear_halt+0x8e>
	return true;
  404a3e:	2001      	movs	r0, #1
  404a40:	bd10      	pop	{r4, pc}
			ptr_job->busy = false;
  404a42:	4608      	mov	r0, r1
  404a44:	0059      	lsls	r1, r3, #1
  404a46:	18ca      	adds	r2, r1, r3
  404a48:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  404a4c:	7d14      	ldrb	r4, [r2, #20]
  404a4e:	f36f 0400 	bfc	r4, #0, #1
  404a52:	7514      	strb	r4, [r2, #20]
			ptr_job->call_nohalt();
  404a54:	440b      	add	r3, r1
  404a56:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
  404a5a:	4798      	blx	r3
	return true;
  404a5c:	2001      	movs	r0, #1
  404a5e:	bd10      	pop	{r4, pc}
		return false;
  404a60:	2000      	movs	r0, #0
  404a62:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep_index)) {
  404a64:	0082      	lsls	r2, r0, #2
  404a66:	4906      	ldr	r1, [pc, #24]	; (404a80 <udd_ep_clear_halt+0xcc>)
  404a68:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  404a6c:	f411 2f00 	tst.w	r1, #524288	; 0x80000
  404a70:	d1c7      	bne.n	404a02 <udd_ep_clear_halt+0x4e>
	return true;
  404a72:	2001      	movs	r0, #1
}
  404a74:	bd10      	pop	{r4, pc}
  404a76:	bf00      	nop
  404a78:	20400c30 	.word	0x20400c30
  404a7c:	40038220 	.word	0x40038220
  404a80:	400381c0 	.word	0x400381c0
  404a84:	40038130 	.word	0x40038130
  404a88:	40038160 	.word	0x40038160
  404a8c:	40038100 	.word	0x40038100

00404a90 <udd_ep_run>:
{
  404a90:	b5f0      	push	{r4, r5, r6, r7, lr}
  404a92:	b083      	sub	sp, #12
  404a94:	f000 000f 	and.w	r0, r0, #15
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
  404a98:	4c3a      	ldr	r4, [pc, #232]	; (404b84 <udd_ep_run+0xf4>)
  404a9a:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
	if (USB_DEVICE_MAX_EP < ep) {
  404a9e:	2806      	cmp	r0, #6
  404aa0:	d864      	bhi.n	404b6c <udd_ep_run+0xdc>
	if ((!Is_udd_endpoint_enabled(ep))
  404aa2:	4c39      	ldr	r4, [pc, #228]	; (404b88 <udd_ep_run+0xf8>)
  404aa4:	69e5      	ldr	r5, [r4, #28]
  404aa6:	2401      	movs	r4, #1
  404aa8:	4084      	lsls	r4, r0
  404aaa:	422c      	tst	r4, r5
  404aac:	d061      	beq.n	404b72 <udd_ep_run+0xe2>
			|| Is_udd_endpoint_stall_requested(ep)
  404aae:	4c37      	ldr	r4, [pc, #220]	; (404b8c <udd_ep_run+0xfc>)
  404ab0:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
  404ab4:	f414 2f00 	tst.w	r4, #524288	; 0x80000
  404ab8:	d15d      	bne.n	404b76 <udd_ep_run+0xe6>
	ptr_job = &udd_ep_job[ep - 1];
  404aba:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
  404abc:	eb04 0644 	add.w	r6, r4, r4, lsl #1
  404ac0:	4d33      	ldr	r5, [pc, #204]	; (404b90 <udd_ep_run+0x100>)
  404ac2:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
  404ac6:	7d2d      	ldrb	r5, [r5, #20]
  404ac8:	f015 0f04 	tst.w	r5, #4
  404acc:	d155      	bne.n	404b7a <udd_ep_run+0xea>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404ace:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404ad2:	fab5 f585 	clz	r5, r5
  404ad6:	096d      	lsrs	r5, r5, #5
  404ad8:	9501      	str	r5, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404ada:	b672      	cpsid	i
  404adc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404ae0:	2600      	movs	r6, #0
  404ae2:	4d2c      	ldr	r5, [pc, #176]	; (404b94 <udd_ep_run+0x104>)
  404ae4:	702e      	strb	r6, [r5, #0]
	return flags;
  404ae6:	9f01      	ldr	r7, [sp, #4]
	if (ptr_job->busy == true) {
  404ae8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  404aec:	4e28      	ldr	r6, [pc, #160]	; (404b90 <udd_ep_run+0x100>)
  404aee:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  404af2:	7d2d      	ldrb	r5, [r5, #20]
  404af4:	f015 0f01 	tst.w	r5, #1
  404af8:	d009      	beq.n	404b0e <udd_ep_run+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
  404afa:	2f00      	cmp	r7, #0
  404afc:	d03f      	beq.n	404b7e <udd_ep_run+0xee>
		cpu_irq_enable();
  404afe:	2201      	movs	r2, #1
  404b00:	4b24      	ldr	r3, [pc, #144]	; (404b94 <udd_ep_run+0x104>)
  404b02:	701a      	strb	r2, [r3, #0]
  404b04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404b08:	b662      	cpsie	i
		return false; // Job already on going
  404b0a:	2000      	movs	r0, #0
  404b0c:	e02f      	b.n	404b6e <udd_ep_run+0xde>
	ptr_job->busy = true;
  404b0e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  404b12:	4e1f      	ldr	r6, [pc, #124]	; (404b90 <udd_ep_run+0x100>)
  404b14:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  404b18:	7d2e      	ldrb	r6, [r5, #20]
  404b1a:	f046 0601 	orr.w	r6, r6, #1
  404b1e:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
  404b20:	b12f      	cbz	r7, 404b2e <udd_ep_run+0x9e>
		cpu_irq_enable();
  404b22:	2601      	movs	r6, #1
  404b24:	4d1b      	ldr	r5, [pc, #108]	; (404b94 <udd_ep_run+0x104>)
  404b26:	702e      	strb	r6, [r5, #0]
  404b28:	f3bf 8f5f 	dmb	sy
  404b2c:	b662      	cpsie	i
	ptr_job->buf = buf;
  404b2e:	4d18      	ldr	r5, [pc, #96]	; (404b90 <udd_ep_run+0x100>)
  404b30:	0066      	lsls	r6, r4, #1
  404b32:	1937      	adds	r7, r6, r4
  404b34:	00ff      	lsls	r7, r7, #3
  404b36:	eb05 0e07 	add.w	lr, r5, r7
  404b3a:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  404b3e:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  404b42:	2200      	movs	r2, #0
  404b44:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->buf_load = 0;
  404b48:	f8ce 2010 	str.w	r2, [lr, #16]
	ptr_job->call_trans = callback;
  404b4c:	9a08      	ldr	r2, [sp, #32]
  404b4e:	51ea      	str	r2, [r5, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  404b50:	2b00      	cmp	r3, #0
  404b52:	bf08      	it	eq
  404b54:	f041 0101 	orreq.w	r1, r1, #1
  404b58:	f89e 3014 	ldrb.w	r3, [lr, #20]
  404b5c:	f361 0341 	bfi	r3, r1, #1, #1
  404b60:	f88e 3014 	strb.w	r3, [lr, #20]
	udd_ep_trans_done(ep);
  404b64:	4b0c      	ldr	r3, [pc, #48]	; (404b98 <udd_ep_run+0x108>)
  404b66:	4798      	blx	r3
	return true;
  404b68:	2001      	movs	r0, #1
  404b6a:	e000      	b.n	404b6e <udd_ep_run+0xde>
		return false;
  404b6c:	2000      	movs	r0, #0
}
  404b6e:	b003      	add	sp, #12
  404b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  404b72:	2000      	movs	r0, #0
  404b74:	e7fb      	b.n	404b6e <udd_ep_run+0xde>
  404b76:	2000      	movs	r0, #0
  404b78:	e7f9      	b.n	404b6e <udd_ep_run+0xde>
  404b7a:	2000      	movs	r0, #0
  404b7c:	e7f7      	b.n	404b6e <udd_ep_run+0xde>
		return false; // Job already on going
  404b7e:	2000      	movs	r0, #0
  404b80:	e7f5      	b.n	404b6e <udd_ep_run+0xde>
  404b82:	bf00      	nop
  404b84:	40038100 	.word	0x40038100
  404b88:	40038000 	.word	0x40038000
  404b8c:	400381c0 	.word	0x400381c0
  404b90:	20400c30 	.word	0x20400c30
  404b94:	20400177 	.word	0x20400177
  404b98:	00403e7d 	.word	0x00403e7d

00404b9c <udd_ep_alloc>:
{
  404b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ba0:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  404ba2:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  404ba6:	2c06      	cmp	r4, #6
  404ba8:	f200 80df 	bhi.w	404d6a <udd_ep_alloc+0x1ce>
	if (Is_udd_endpoint_enabled(ep)) {
  404bac:	4b73      	ldr	r3, [pc, #460]	; (404d7c <udd_ep_alloc+0x1e0>)
  404bae:	69dd      	ldr	r5, [r3, #28]
  404bb0:	2301      	movs	r3, #1
  404bb2:	40a3      	lsls	r3, r4
  404bb4:	402b      	ands	r3, r5
  404bb6:	f040 80dd 	bne.w	404d74 <udd_ep_alloc+0x1d8>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
  404bba:	f001 0503 	and.w	r5, r1, #3
  404bbe:	2d02      	cmp	r5, #2
  404bc0:	d005      	beq.n	404bce <udd_ep_alloc+0x32>
  404bc2:	2d03      	cmp	r5, #3
  404bc4:	d020      	beq.n	404c08 <udd_ep_alloc+0x6c>
  404bc6:	2d01      	cmp	r5, #1
  404bc8:	d01e      	beq.n	404c08 <udd_ep_alloc+0x6c>
		return false;
  404bca:	2300      	movs	r3, #0
  404bcc:	e0ce      	b.n	404d6c <udd_ep_alloc+0x1d0>
		bank = USBHS_DEVEPTCFG_EPBK_2_BANK >>
  404bce:	f04f 0e01 	mov.w	lr, #1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  404bd2:	4e6b      	ldr	r6, [pc, #428]	; (404d80 <udd_ep_alloc+0x1e4>)
  404bd4:	eb06 0584 	add.w	r5, r6, r4, lsl #2
  404bd8:	f856 c024 	ldr.w	ip, [r6, r4, lsl #2]
  404bdc:	4f69      	ldr	r7, [pc, #420]	; (404d84 <udd_ep_alloc+0x1e8>)
  404bde:	ea0c 0707 	and.w	r7, ip, r7
  404be2:	02c9      	lsls	r1, r1, #11
  404be4:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
  404be8:	b240      	sxtb	r0, r0
  404bea:	2800      	cmp	r0, #0
  404bec:	bfb8      	it	lt
  404bee:	f44f 7380 	movlt.w	r3, #256	; 0x100
  404bf2:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
  404bf6:	b280      	uxth	r0, r0
  404bf8:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
  404bfc:	d307      	bcc.n	404c0e <udd_ep_alloc+0x72>
  404bfe:	2a08      	cmp	r2, #8
  404c00:	d924      	bls.n	404c4c <udd_ep_alloc+0xb0>
  404c02:	0052      	lsls	r2, r2, #1
  404c04:	3a01      	subs	r2, #1
  404c06:	e004      	b.n	404c12 <udd_ep_alloc+0x76>
		bank = USBHS_DEVEPTCFG_EPBK_1_BANK >>
  404c08:	f04f 0e00 	mov.w	lr, #0
  404c0c:	e7e1      	b.n	404bd2 <udd_ep_alloc+0x36>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  404c0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
  404c12:	fab2 f282 	clz	r2, r2
  404c16:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
  404c1a:	430b      	orrs	r3, r1
  404c1c:	f1c2 021c 	rsb	r2, r2, #28
  404c20:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  404c24:	f423 63d0 	bic.w	r3, r3, #1664	; 0x680
  404c28:	f023 0303 	bic.w	r3, r3, #3
  404c2c:	04db      	lsls	r3, r3, #19
  404c2e:	0cdb      	lsrs	r3, r3, #19
  404c30:	433b      	orrs	r3, r7
  404c32:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	ep_allocated = 1 << ep;
  404c36:	2701      	movs	r7, #1
  404c38:	40a7      	lsls	r7, r4
  404c3a:	b2bf      	uxth	r7, r7
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
  404c3c:	2c05      	cmp	r4, #5
  404c3e:	d81c      	bhi.n	404c7a <udd_ep_alloc+0xde>
  404c40:	4a51      	ldr	r2, [pc, #324]	; (404d88 <udd_ep_alloc+0x1ec>)
  404c42:	2306      	movs	r3, #6
		if (Is_udd_endpoint_enabled(i)) {
  404c44:	484d      	ldr	r0, [pc, #308]	; (404d7c <udd_ep_alloc+0x1e0>)
  404c46:	f04f 0e01 	mov.w	lr, #1
  404c4a:	e006      	b.n	404c5a <udd_ep_alloc+0xbe>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  404c4c:	220f      	movs	r2, #15
  404c4e:	e7e0      	b.n	404c12 <udd_ep_alloc+0x76>
  404c50:	3b01      	subs	r3, #1
  404c52:	3a04      	subs	r2, #4
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
  404c54:	b2d9      	uxtb	r1, r3
  404c56:	428c      	cmp	r4, r1
  404c58:	d20f      	bcs.n	404c7a <udd_ep_alloc+0xde>
		if (Is_udd_endpoint_enabled(i)) {
  404c5a:	69c6      	ldr	r6, [r0, #28]
  404c5c:	fa0e f103 	lsl.w	r1, lr, r3
  404c60:	420e      	tst	r6, r1
  404c62:	d0f5      	beq.n	404c50 <udd_ep_alloc+0xb4>
			ep_allocated |= 1 << i;
  404c64:	430f      	orrs	r7, r1
  404c66:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
  404c68:	69c6      	ldr	r6, [r0, #28]
  404c6a:	ea26 0101 	bic.w	r1, r6, r1
  404c6e:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
  404c70:	6811      	ldr	r1, [r2, #0]
  404c72:	f021 0102 	bic.w	r1, r1, #2
  404c76:	6011      	str	r1, [r2, #0]
  404c78:	e7ea      	b.n	404c50 <udd_ep_alloc+0xb4>
  404c7a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  404c7e:	4e43      	ldr	r6, [pc, #268]	; (404d8c <udd_ep_alloc+0x1f0>)
  404c80:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
			bool b_restart = ptr_job->busy;
  404c84:	f8df 9104 	ldr.w	r9, [pc, #260]	; 404d8c <udd_ep_alloc+0x1f0>
			udd_enable_endpoint(i);
  404c88:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 404d7c <udd_ep_alloc+0x1e0>
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  404c8c:	f8df a100 	ldr.w	sl, [pc, #256]	; 404d90 <udd_ep_alloc+0x1f4>
  404c90:	e01d      	b.n	404cce <udd_ep_alloc+0x132>
				if (NULL == ptr_job->call_trans) {
  404c92:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  404c96:	4a3d      	ldr	r2, [pc, #244]	; (404d8c <udd_ep_alloc+0x1f0>)
  404c98:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
  404c9c:	2c00      	cmp	r4, #0
  404c9e:	d06b      	beq.n	404d78 <udd_ep_alloc+0x1dc>
				if (Is_udd_endpoint_in(i)) {
  404ca0:	682b      	ldr	r3, [r5, #0]
  404ca2:	f413 7f80 	tst.w	r3, #256	; 0x100
					i |= USB_EP_DIR_IN;
  404ca6:	bf18      	it	ne
  404ca8:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
  404cac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  404cb0:	4b36      	ldr	r3, [pc, #216]	; (404d8c <udd_ep_alloc+0x1f0>)
  404cb2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404cb6:	4602      	mov	r2, r0
  404cb8:	68c9      	ldr	r1, [r1, #12]
  404cba:	2001      	movs	r0, #1
  404cbc:	47a0      	blx	r4
				return false;
  404cbe:	2300      	movs	r3, #0
  404cc0:	e054      	b.n	404d6c <udd_ep_alloc+0x1d0>
  404cc2:	3401      	adds	r4, #1
  404cc4:	3504      	adds	r5, #4
  404cc6:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
  404cc8:	b2e3      	uxtb	r3, r4
  404cca:	2b06      	cmp	r3, #6
  404ccc:	d84b      	bhi.n	404d66 <udd_ep_alloc+0x1ca>
  404cce:	b2e0      	uxtb	r0, r4
		if (ep_allocated & (1 << i)) {
  404cd0:	fa47 f304 	asr.w	r3, r7, r4
  404cd4:	f013 0f01 	tst.w	r3, #1
  404cd8:	d0f3      	beq.n	404cc2 <udd_ep_alloc+0x126>
  404cda:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
  404cdc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  404ce0:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
  404ce4:	f893 e014 	ldrb.w	lr, [r3, #20]
  404ce8:	f00e 0201 	and.w	r2, lr, #1
			ptr_job->busy = false;
  404cec:	f36f 0e00 	bfc	lr, #0, #1
  404cf0:	f883 e014 	strb.w	lr, [r3, #20]
			udd_allocate_memory(i);
  404cf4:	682b      	ldr	r3, [r5, #0]
  404cf6:	f043 0302 	orr.w	r3, r3, #2
  404cfa:	602b      	str	r3, [r5, #0]
			udd_enable_endpoint(i);
  404cfc:	f8d8 e01c 	ldr.w	lr, [r8, #28]
  404d00:	2301      	movs	r3, #1
  404d02:	40a3      	lsls	r3, r4
  404d04:	ea43 030e 	orr.w	r3, r3, lr
  404d08:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
  404d0c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404d0e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  404d12:	d0be      	beq.n	404c92 <udd_ep_alloc+0xf6>
			udd_enable_endpoint_bank_autoswitch(i);
  404d14:	682b      	ldr	r3, [r5, #0]
  404d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  404d1a:	602b      	str	r3, [r5, #0]
			if (b_restart) {
  404d1c:	2a00      	cmp	r2, #0
  404d1e:	d0d0      	beq.n	404cc2 <udd_ep_alloc+0x126>
				ptr_job->buf_cnt -= ptr_job->buf_load;
  404d20:	f856 3c0c 	ldr.w	r3, [r6, #-12]
  404d24:	f856 2c08 	ldr.w	r2, [r6, #-8]
  404d28:	1a9a      	subs	r2, r3, r2
  404d2a:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  404d2e:	682b      	ldr	r3, [r5, #0]
  404d30:	f413 7f80 	tst.w	r3, #256	; 0x100
  404d34:	bf18      	it	ne
  404d36:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
  404d3a:	f856 bc10 	ldr.w	fp, [r6, #-16]
  404d3e:	f856 cc14 	ldr.w	ip, [r6, #-20]
						ptr_job->b_shortpacket,
  404d42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  404d46:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
  404d4a:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  404d4c:	f856 3c18 	ldr.w	r3, [r6, #-24]
  404d50:	9300      	str	r3, [sp, #0]
  404d52:	ebab 0302 	sub.w	r3, fp, r2
  404d56:	4462      	add	r2, ip
  404d58:	f3c1 0140 	ubfx	r1, r1, #1, #1
  404d5c:	47d0      	blx	sl
				if (!b_restart) {
  404d5e:	4603      	mov	r3, r0
  404d60:	2800      	cmp	r0, #0
  404d62:	d1ae      	bne.n	404cc2 <udd_ep_alloc+0x126>
  404d64:	e002      	b.n	404d6c <udd_ep_alloc+0x1d0>
	return true;
  404d66:	2301      	movs	r3, #1
  404d68:	e000      	b.n	404d6c <udd_ep_alloc+0x1d0>
		return false;
  404d6a:	2300      	movs	r3, #0
}
  404d6c:	4618      	mov	r0, r3
  404d6e:	b003      	add	sp, #12
  404d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
  404d74:	2300      	movs	r3, #0
  404d76:	e7f9      	b.n	404d6c <udd_ep_alloc+0x1d0>
					return false;
  404d78:	2300      	movs	r3, #0
  404d7a:	e7f7      	b.n	404d6c <udd_ep_alloc+0x1d0>
  404d7c:	40038000 	.word	0x40038000
  404d80:	40038100 	.word	0x40038100
  404d84:	ffffe683 	.word	0xffffe683
  404d88:	40038118 	.word	0x40038118
  404d8c:	20400c30 	.word	0x20400c30
  404d90:	00404a91 	.word	0x00404a91

00404d94 <udd_ep_abort>:
{
  404d94:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404d96:	f000 020f 	and.w	r2, r0, #15
		udd_disable_endpoint_dma_interrupt(ep_index);
  404d9a:	1e54      	subs	r4, r2, #1
  404d9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  404da0:	40a3      	lsls	r3, r4
  404da2:	4918      	ldr	r1, [pc, #96]	; (404e04 <udd_ep_abort+0x70>)
  404da4:	614b      	str	r3, [r1, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
  404da6:	4b18      	ldr	r3, [pc, #96]	; (404e08 <udd_ep_abort+0x74>)
  404da8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  404dac:	2500      	movs	r5, #0
  404dae:	609d      	str	r5, [r3, #8]
	udd_disable_endpoint_interrupt(ep_index);
  404db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404db4:	4093      	lsls	r3, r2
  404db6:	614b      	str	r3, [r1, #20]
  __ASM volatile ("dsb");
  404db8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404dbc:	f3bf 8f6f 	isb	sy
	if (ep & USB_EP_DIR_IN) {
  404dc0:	f010 0f80 	tst.w	r0, #128	; 0x80
  404dc4:	d108      	bne.n	404dd8 <udd_ep_abort+0x44>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
  404dc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  404dca:	2101      	movs	r1, #1
  404dcc:	480f      	ldr	r0, [pc, #60]	; (404e0c <udd_ep_abort+0x78>)
  404dce:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  404dd2:	4b0f      	ldr	r3, [pc, #60]	; (404e10 <udd_ep_abort+0x7c>)
  404dd4:	4798      	blx	r3
  404dd6:	bd70      	pop	{r4, r5, r6, pc}
		while(udd_nb_busy_bank(ep_index)) {
  404dd8:	0093      	lsls	r3, r2, #2
  404dda:	480e      	ldr	r0, [pc, #56]	; (404e14 <udd_ep_abort+0x80>)
  404ddc:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
  404dde:	4d0e      	ldr	r5, [pc, #56]	; (404e18 <udd_ep_abort+0x84>)
  404de0:	441d      	add	r5, r3
  404de2:	f44f 5600 	mov.w	r6, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
  404de6:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
  404dea:	4419      	add	r1, r3
  404dec:	e004      	b.n	404df8 <udd_ep_abort+0x64>
			udd_kill_last_in_bank(ep_index);
  404dee:	602e      	str	r6, [r5, #0]
			while(Is_udd_kill_last(ep_index));
  404df0:	680b      	ldr	r3, [r1, #0]
  404df2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  404df6:	d1fb      	bne.n	404df0 <udd_ep_abort+0x5c>
		while(udd_nb_busy_bank(ep_index)) {
  404df8:	6803      	ldr	r3, [r0, #0]
  404dfa:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  404dfe:	d1f6      	bne.n	404dee <udd_ep_abort+0x5a>
  404e00:	e7e1      	b.n	404dc6 <udd_ep_abort+0x32>
  404e02:	bf00      	nop
  404e04:	40038000 	.word	0x40038000
  404e08:	40038300 	.word	0x40038300
  404e0c:	20400c30 	.word	0x20400c30
  404e10:	00403e45 	.word	0x00403e45
  404e14:	40038130 	.word	0x40038130
  404e18:	400381f0 	.word	0x400381f0

00404e1c <xdmac_configure_transfer>:
  404e1c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  404e20:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  404e22:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  404e24:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  404e26:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  404e28:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  404e2a:	6813      	ldr	r3, [r2, #0]
  404e2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  404e30:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  404e32:	6913      	ldr	r3, [r2, #16]
  404e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
  404e38:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  404e3a:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  404e3c:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  404e3e:	6993      	ldr	r3, [r2, #24]
  404e40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  404e44:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  404e48:	69d3      	ldr	r3, [r2, #28]
  404e4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  404e4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  404e52:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  404e54:	678b      	str	r3, [r1, #120]	; 0x78
  404e56:	4770      	bx	lr

00404e58 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
  404e58:	b570      	push	{r4, r5, r6, lr}
  404e5a:	b086      	sub	sp, #24
  404e5c:	4604      	mov	r4, r0
  404e5e:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
  404e60:	2304      	movs	r3, #4
  404e62:	9300      	str	r3, [sp, #0]
  404e64:	ab02      	add	r3, sp, #8
  404e66:	220f      	movs	r2, #15
  404e68:	210e      	movs	r1, #14
  404e6a:	480d      	ldr	r0, [pc, #52]	; (404ea0 <flash_read_unique_id+0x48>)
  404e6c:	4d0d      	ldr	r5, [pc, #52]	; (404ea4 <flash_read_unique_id+0x4c>)
  404e6e:	47a8      	blx	r5
  404e70:	b118      	cbz	r0, 404e7a <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
  404e72:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
  404e74:	4628      	mov	r0, r5
  404e76:	b006      	add	sp, #24
  404e78:	bd70      	pop	{r4, r5, r6, pc}
  404e7a:	4605      	mov	r5, r0
  404e7c:	2e04      	cmp	r6, #4
  404e7e:	bf28      	it	cs
  404e80:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
  404e82:	b156      	cbz	r6, 404e9a <flash_read_unique_id+0x42>
  404e84:	aa02      	add	r2, sp, #8
  404e86:	4623      	mov	r3, r4
  404e88:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
  404e8c:	f852 0b04 	ldr.w	r0, [r2], #4
  404e90:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
  404e94:	428b      	cmp	r3, r1
  404e96:	d1f9      	bne.n	404e8c <flash_read_unique_id+0x34>
  404e98:	e7ec      	b.n	404e74 <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
  404e9a:	4635      	mov	r5, r6
  404e9c:	e7ea      	b.n	404e74 <flash_read_unique_id+0x1c>
  404e9e:	bf00      	nop
  404ea0:	400e0c00 	.word	0x400e0c00
  404ea4:	20400001 	.word	0x20400001

00404ea8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  404ea8:	e7fe      	b.n	404ea8 <Dummy_Handler>
	...

00404eac <Reset_Handler>:
{
  404eac:	b500      	push	{lr}
  404eae:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  404eb0:	4b25      	ldr	r3, [pc, #148]	; (404f48 <Reset_Handler+0x9c>)
  404eb2:	4a26      	ldr	r2, [pc, #152]	; (404f4c <Reset_Handler+0xa0>)
  404eb4:	429a      	cmp	r2, r3
  404eb6:	d010      	beq.n	404eda <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  404eb8:	4b25      	ldr	r3, [pc, #148]	; (404f50 <Reset_Handler+0xa4>)
  404eba:	4a23      	ldr	r2, [pc, #140]	; (404f48 <Reset_Handler+0x9c>)
  404ebc:	429a      	cmp	r2, r3
  404ebe:	d20c      	bcs.n	404eda <Reset_Handler+0x2e>
  404ec0:	3b01      	subs	r3, #1
  404ec2:	1a9b      	subs	r3, r3, r2
  404ec4:	f023 0303 	bic.w	r3, r3, #3
  404ec8:	3304      	adds	r3, #4
  404eca:	4413      	add	r3, r2
  404ecc:	491f      	ldr	r1, [pc, #124]	; (404f4c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  404ece:	f851 0b04 	ldr.w	r0, [r1], #4
  404ed2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  404ed6:	429a      	cmp	r2, r3
  404ed8:	d1f9      	bne.n	404ece <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  404eda:	4b1e      	ldr	r3, [pc, #120]	; (404f54 <Reset_Handler+0xa8>)
  404edc:	4a1e      	ldr	r2, [pc, #120]	; (404f58 <Reset_Handler+0xac>)
  404ede:	429a      	cmp	r2, r3
  404ee0:	d20a      	bcs.n	404ef8 <Reset_Handler+0x4c>
  404ee2:	3b01      	subs	r3, #1
  404ee4:	1a9b      	subs	r3, r3, r2
  404ee6:	f023 0303 	bic.w	r3, r3, #3
  404eea:	3304      	adds	r3, #4
  404eec:	4413      	add	r3, r2
                *pDest++ = 0;
  404eee:	2100      	movs	r1, #0
  404ef0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  404ef4:	4293      	cmp	r3, r2
  404ef6:	d1fb      	bne.n	404ef0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  404ef8:	4a18      	ldr	r2, [pc, #96]	; (404f5c <Reset_Handler+0xb0>)
  404efa:	4b19      	ldr	r3, [pc, #100]	; (404f60 <Reset_Handler+0xb4>)
  404efc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  404f00:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404f02:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404f06:	fab3 f383 	clz	r3, r3
  404f0a:	095b      	lsrs	r3, r3, #5
  404f0c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404f0e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  404f10:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404f14:	2200      	movs	r2, #0
  404f16:	4b13      	ldr	r3, [pc, #76]	; (404f64 <Reset_Handler+0xb8>)
  404f18:	701a      	strb	r2, [r3, #0]
	return flags;
  404f1a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  404f1c:	4a12      	ldr	r2, [pc, #72]	; (404f68 <Reset_Handler+0xbc>)
  404f1e:	6813      	ldr	r3, [r2, #0]
  404f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  404f24:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  404f26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404f2a:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  404f2e:	b129      	cbz	r1, 404f3c <Reset_Handler+0x90>
		cpu_irq_enable();
  404f30:	2201      	movs	r2, #1
  404f32:	4b0c      	ldr	r3, [pc, #48]	; (404f64 <Reset_Handler+0xb8>)
  404f34:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  404f36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404f3a:	b662      	cpsie	i
        __libc_init_array();
  404f3c:	4b0b      	ldr	r3, [pc, #44]	; (404f6c <Reset_Handler+0xc0>)
  404f3e:	4798      	blx	r3
        main();
  404f40:	4b0b      	ldr	r3, [pc, #44]	; (404f70 <Reset_Handler+0xc4>)
  404f42:	4798      	blx	r3
  404f44:	e7fe      	b.n	404f44 <Reset_Handler+0x98>
  404f46:	bf00      	nop
  404f48:	20400000 	.word	0x20400000
  404f4c:	00410aa0 	.word	0x00410aa0
  404f50:	20400b30 	.word	0x20400b30
  404f54:	20401024 	.word	0x20401024
  404f58:	20400b40 	.word	0x20400b40
  404f5c:	e000ed00 	.word	0xe000ed00
  404f60:	00400000 	.word	0x00400000
  404f64:	20400177 	.word	0x20400177
  404f68:	e000ed88 	.word	0xe000ed88
  404f6c:	0040c845 	.word	0x0040c845
  404f70:	0040c23d 	.word	0x0040c23d

00404f74 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  404f74:	4b3b      	ldr	r3, [pc, #236]	; (405064 <SystemCoreClockUpdate+0xf0>)
  404f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404f78:	f003 0303 	and.w	r3, r3, #3
  404f7c:	2b01      	cmp	r3, #1
  404f7e:	d01d      	beq.n	404fbc <SystemCoreClockUpdate+0x48>
  404f80:	b183      	cbz	r3, 404fa4 <SystemCoreClockUpdate+0x30>
  404f82:	2b02      	cmp	r3, #2
  404f84:	d036      	beq.n	404ff4 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  404f86:	4b37      	ldr	r3, [pc, #220]	; (405064 <SystemCoreClockUpdate+0xf0>)
  404f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404f8e:	2b70      	cmp	r3, #112	; 0x70
  404f90:	d05f      	beq.n	405052 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  404f92:	4b34      	ldr	r3, [pc, #208]	; (405064 <SystemCoreClockUpdate+0xf0>)
  404f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  404f96:	4934      	ldr	r1, [pc, #208]	; (405068 <SystemCoreClockUpdate+0xf4>)
  404f98:	f3c2 1202 	ubfx	r2, r2, #4, #3
  404f9c:	680b      	ldr	r3, [r1, #0]
  404f9e:	40d3      	lsrs	r3, r2
  404fa0:	600b      	str	r3, [r1, #0]
  404fa2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  404fa4:	4b31      	ldr	r3, [pc, #196]	; (40506c <SystemCoreClockUpdate+0xf8>)
  404fa6:	695b      	ldr	r3, [r3, #20]
  404fa8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  404fac:	bf14      	ite	ne
  404fae:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  404fb2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  404fb6:	4b2c      	ldr	r3, [pc, #176]	; (405068 <SystemCoreClockUpdate+0xf4>)
  404fb8:	601a      	str	r2, [r3, #0]
  404fba:	e7e4      	b.n	404f86 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404fbc:	4b29      	ldr	r3, [pc, #164]	; (405064 <SystemCoreClockUpdate+0xf0>)
  404fbe:	6a1b      	ldr	r3, [r3, #32]
  404fc0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404fc4:	d003      	beq.n	404fce <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  404fc6:	4a2a      	ldr	r2, [pc, #168]	; (405070 <SystemCoreClockUpdate+0xfc>)
  404fc8:	4b27      	ldr	r3, [pc, #156]	; (405068 <SystemCoreClockUpdate+0xf4>)
  404fca:	601a      	str	r2, [r3, #0]
  404fcc:	e7db      	b.n	404f86 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404fce:	4a29      	ldr	r2, [pc, #164]	; (405074 <SystemCoreClockUpdate+0x100>)
  404fd0:	4b25      	ldr	r3, [pc, #148]	; (405068 <SystemCoreClockUpdate+0xf4>)
  404fd2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  404fd4:	4b23      	ldr	r3, [pc, #140]	; (405064 <SystemCoreClockUpdate+0xf0>)
  404fd6:	6a1b      	ldr	r3, [r3, #32]
  404fd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404fdc:	2b10      	cmp	r3, #16
  404fde:	d005      	beq.n	404fec <SystemCoreClockUpdate+0x78>
  404fe0:	2b20      	cmp	r3, #32
  404fe2:	d1d0      	bne.n	404f86 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  404fe4:	4a22      	ldr	r2, [pc, #136]	; (405070 <SystemCoreClockUpdate+0xfc>)
  404fe6:	4b20      	ldr	r3, [pc, #128]	; (405068 <SystemCoreClockUpdate+0xf4>)
  404fe8:	601a      	str	r2, [r3, #0]
          break;
  404fea:	e7cc      	b.n	404f86 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  404fec:	4a22      	ldr	r2, [pc, #136]	; (405078 <SystemCoreClockUpdate+0x104>)
  404fee:	4b1e      	ldr	r3, [pc, #120]	; (405068 <SystemCoreClockUpdate+0xf4>)
  404ff0:	601a      	str	r2, [r3, #0]
          break;
  404ff2:	e7c8      	b.n	404f86 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404ff4:	4b1b      	ldr	r3, [pc, #108]	; (405064 <SystemCoreClockUpdate+0xf0>)
  404ff6:	6a1b      	ldr	r3, [r3, #32]
  404ff8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404ffc:	d016      	beq.n	40502c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  404ffe:	4a1c      	ldr	r2, [pc, #112]	; (405070 <SystemCoreClockUpdate+0xfc>)
  405000:	4b19      	ldr	r3, [pc, #100]	; (405068 <SystemCoreClockUpdate+0xf4>)
  405002:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  405004:	4b17      	ldr	r3, [pc, #92]	; (405064 <SystemCoreClockUpdate+0xf0>)
  405006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405008:	f003 0303 	and.w	r3, r3, #3
  40500c:	2b02      	cmp	r3, #2
  40500e:	d1ba      	bne.n	404f86 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405010:	4a14      	ldr	r2, [pc, #80]	; (405064 <SystemCoreClockUpdate+0xf0>)
  405012:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405014:	6a92      	ldr	r2, [r2, #40]	; 0x28
  405016:	4814      	ldr	r0, [pc, #80]	; (405068 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405018:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40501c:	6803      	ldr	r3, [r0, #0]
  40501e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405022:	b2d2      	uxtb	r2, r2
  405024:	fbb3 f3f2 	udiv	r3, r3, r2
  405028:	6003      	str	r3, [r0, #0]
  40502a:	e7ac      	b.n	404f86 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40502c:	4a11      	ldr	r2, [pc, #68]	; (405074 <SystemCoreClockUpdate+0x100>)
  40502e:	4b0e      	ldr	r3, [pc, #56]	; (405068 <SystemCoreClockUpdate+0xf4>)
  405030:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405032:	4b0c      	ldr	r3, [pc, #48]	; (405064 <SystemCoreClockUpdate+0xf0>)
  405034:	6a1b      	ldr	r3, [r3, #32]
  405036:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40503a:	2b10      	cmp	r3, #16
  40503c:	d005      	beq.n	40504a <SystemCoreClockUpdate+0xd6>
  40503e:	2b20      	cmp	r3, #32
  405040:	d1e0      	bne.n	405004 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  405042:	4a0b      	ldr	r2, [pc, #44]	; (405070 <SystemCoreClockUpdate+0xfc>)
  405044:	4b08      	ldr	r3, [pc, #32]	; (405068 <SystemCoreClockUpdate+0xf4>)
  405046:	601a      	str	r2, [r3, #0]
          break;
  405048:	e7dc      	b.n	405004 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40504a:	4a0b      	ldr	r2, [pc, #44]	; (405078 <SystemCoreClockUpdate+0x104>)
  40504c:	4b06      	ldr	r3, [pc, #24]	; (405068 <SystemCoreClockUpdate+0xf4>)
  40504e:	601a      	str	r2, [r3, #0]
          break;
  405050:	e7d8      	b.n	405004 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  405052:	4a05      	ldr	r2, [pc, #20]	; (405068 <SystemCoreClockUpdate+0xf4>)
  405054:	6813      	ldr	r3, [r2, #0]
  405056:	4909      	ldr	r1, [pc, #36]	; (40507c <SystemCoreClockUpdate+0x108>)
  405058:	fba1 1303 	umull	r1, r3, r1, r3
  40505c:	085b      	lsrs	r3, r3, #1
  40505e:	6013      	str	r3, [r2, #0]
  405060:	4770      	bx	lr
  405062:	bf00      	nop
  405064:	400e0600 	.word	0x400e0600
  405068:	20400178 	.word	0x20400178
  40506c:	400e1810 	.word	0x400e1810
  405070:	00b71b00 	.word	0x00b71b00
  405074:	003d0900 	.word	0x003d0900
  405078:	007a1200 	.word	0x007a1200
  40507c:	aaaaaaab 	.word	0xaaaaaaab

00405080 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  405080:	4b16      	ldr	r3, [pc, #88]	; (4050dc <system_init_flash+0x5c>)
  405082:	4298      	cmp	r0, r3
  405084:	d913      	bls.n	4050ae <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  405086:	4b16      	ldr	r3, [pc, #88]	; (4050e0 <system_init_flash+0x60>)
  405088:	4298      	cmp	r0, r3
  40508a:	d915      	bls.n	4050b8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40508c:	4b15      	ldr	r3, [pc, #84]	; (4050e4 <system_init_flash+0x64>)
  40508e:	4298      	cmp	r0, r3
  405090:	d916      	bls.n	4050c0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  405092:	4b15      	ldr	r3, [pc, #84]	; (4050e8 <system_init_flash+0x68>)
  405094:	4298      	cmp	r0, r3
  405096:	d917      	bls.n	4050c8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  405098:	4b14      	ldr	r3, [pc, #80]	; (4050ec <system_init_flash+0x6c>)
  40509a:	4298      	cmp	r0, r3
  40509c:	d918      	bls.n	4050d0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40509e:	4b14      	ldr	r3, [pc, #80]	; (4050f0 <system_init_flash+0x70>)
  4050a0:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4050a2:	bf94      	ite	ls
  4050a4:	4a13      	ldrls	r2, [pc, #76]	; (4050f4 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4050a6:	4a14      	ldrhi	r2, [pc, #80]	; (4050f8 <system_init_flash+0x78>)
  4050a8:	4b14      	ldr	r3, [pc, #80]	; (4050fc <system_init_flash+0x7c>)
  4050aa:	601a      	str	r2, [r3, #0]
  4050ac:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4050ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4050b2:	4b12      	ldr	r3, [pc, #72]	; (4050fc <system_init_flash+0x7c>)
  4050b4:	601a      	str	r2, [r3, #0]
  4050b6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4050b8:	4a11      	ldr	r2, [pc, #68]	; (405100 <system_init_flash+0x80>)
  4050ba:	4b10      	ldr	r3, [pc, #64]	; (4050fc <system_init_flash+0x7c>)
  4050bc:	601a      	str	r2, [r3, #0]
  4050be:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4050c0:	4a10      	ldr	r2, [pc, #64]	; (405104 <system_init_flash+0x84>)
  4050c2:	4b0e      	ldr	r3, [pc, #56]	; (4050fc <system_init_flash+0x7c>)
  4050c4:	601a      	str	r2, [r3, #0]
  4050c6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4050c8:	4a0f      	ldr	r2, [pc, #60]	; (405108 <system_init_flash+0x88>)
  4050ca:	4b0c      	ldr	r3, [pc, #48]	; (4050fc <system_init_flash+0x7c>)
  4050cc:	601a      	str	r2, [r3, #0]
  4050ce:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4050d0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4050d4:	4b09      	ldr	r3, [pc, #36]	; (4050fc <system_init_flash+0x7c>)
  4050d6:	601a      	str	r2, [r3, #0]
  4050d8:	4770      	bx	lr
  4050da:	bf00      	nop
  4050dc:	015ef3bf 	.word	0x015ef3bf
  4050e0:	02bde77f 	.word	0x02bde77f
  4050e4:	041cdb3f 	.word	0x041cdb3f
  4050e8:	057bceff 	.word	0x057bceff
  4050ec:	06dac2bf 	.word	0x06dac2bf
  4050f0:	0839b67f 	.word	0x0839b67f
  4050f4:	04000500 	.word	0x04000500
  4050f8:	04000600 	.word	0x04000600
  4050fc:	400e0c00 	.word	0x400e0c00
  405100:	04000100 	.word	0x04000100
  405104:	04000200 	.word	0x04000200
  405108:	04000300 	.word	0x04000300

0040510c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40510c:	4b0a      	ldr	r3, [pc, #40]	; (405138 <_sbrk+0x2c>)
  40510e:	681b      	ldr	r3, [r3, #0]
  405110:	b153      	cbz	r3, 405128 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  405112:	4b09      	ldr	r3, [pc, #36]	; (405138 <_sbrk+0x2c>)
  405114:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  405116:	181a      	adds	r2, r3, r0
  405118:	4908      	ldr	r1, [pc, #32]	; (40513c <_sbrk+0x30>)
  40511a:	4291      	cmp	r1, r2
  40511c:	db08      	blt.n	405130 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40511e:	4610      	mov	r0, r2
  405120:	4a05      	ldr	r2, [pc, #20]	; (405138 <_sbrk+0x2c>)
  405122:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  405124:	4618      	mov	r0, r3
  405126:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  405128:	4a05      	ldr	r2, [pc, #20]	; (405140 <_sbrk+0x34>)
  40512a:	4b03      	ldr	r3, [pc, #12]	; (405138 <_sbrk+0x2c>)
  40512c:	601a      	str	r2, [r3, #0]
  40512e:	e7f0      	b.n	405112 <_sbrk+0x6>
		return (caddr_t) -1;	
  405130:	f04f 30ff 	mov.w	r0, #4294967295
}
  405134:	4770      	bx	lr
  405136:	bf00      	nop
  405138:	20400cc0 	.word	0x20400cc0
  40513c:	2045fffc 	.word	0x2045fffc
  405140:	20409228 	.word	0x20409228

00405144 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  405144:	f04f 30ff 	mov.w	r0, #4294967295
  405148:	4770      	bx	lr

0040514a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40514a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40514e:	604b      	str	r3, [r1, #4]

	return 0;
}
  405150:	2000      	movs	r0, #0
  405152:	4770      	bx	lr

00405154 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  405154:	2001      	movs	r0, #1
  405156:	4770      	bx	lr

00405158 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  405158:	2000      	movs	r0, #0
  40515a:	4770      	bx	lr

0040515c <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  40515c:	2802      	cmp	r0, #2
  40515e:	d815      	bhi.n	40518c <disk_initialize+0x30>
{
  405160:	b510      	push	{r4, lr}
  405162:	4604      	mov	r4, r0
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  405164:	4b0b      	ldr	r3, [pc, #44]	; (405194 <disk_initialize+0x38>)
  405166:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  405168:	2803      	cmp	r0, #3
  40516a:	d106      	bne.n	40517a <disk_initialize+0x1e>
		mem_status = mem_test_unit_ready(drv);
  40516c:	4620      	mov	r0, r4
  40516e:	4b09      	ldr	r3, [pc, #36]	; (405194 <disk_initialize+0x38>)
  405170:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  405172:	2803      	cmp	r0, #3
  405174:	d101      	bne.n	40517a <disk_initialize+0x1e>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  405176:	2001      	movs	r0, #1
  405178:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  40517a:	b948      	cbnz	r0, 405190 <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  40517c:	4620      	mov	r0, r4
  40517e:	4b06      	ldr	r3, [pc, #24]	; (405198 <disk_initialize+0x3c>)
  405180:	4798      	blx	r3
  405182:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  405184:	bf14      	ite	ne
  405186:	2004      	movne	r0, #4
  405188:	2000      	moveq	r0, #0
  40518a:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  40518c:	2001      	movs	r0, #1
  40518e:	4770      	bx	lr
		return STA_NOINIT;
  405190:	2001      	movs	r0, #1
}
  405192:	bd10      	pop	{r4, pc}
  405194:	00401fc9 	.word	0x00401fc9
  405198:	0040200d 	.word	0x0040200d

0040519c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  40519c:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  40519e:	4b05      	ldr	r3, [pc, #20]	; (4051b4 <disk_status+0x18>)
  4051a0:	4798      	blx	r3
  4051a2:	b120      	cbz	r0, 4051ae <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  4051a4:	2802      	cmp	r0, #2
  4051a6:	bf0c      	ite	eq
  4051a8:	2003      	moveq	r0, #3
  4051aa:	2001      	movne	r0, #1
  4051ac:	bd08      	pop	{r3, pc}
		return 0;
  4051ae:	2000      	movs	r0, #0
	}
}
  4051b0:	bd08      	pop	{r3, pc}
  4051b2:	bf00      	nop
  4051b4:	00401fc9 	.word	0x00401fc9

004051b8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  4051b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4051bc:	b083      	sub	sp, #12
  4051be:	4680      	mov	r8, r0
  4051c0:	460d      	mov	r5, r1
  4051c2:	4614      	mov	r4, r2
  4051c4:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4051c6:	4b15      	ldr	r3, [pc, #84]	; (40521c <disk_read+0x64>)
  4051c8:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  4051ca:	b918      	cbnz	r0, 4051d4 <disk_read+0x1c>
		return RES_ERROR;
  4051cc:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  4051ce:	b003      	add	sp, #12
  4051d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051d4:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  4051d6:	a901      	add	r1, sp, #4
  4051d8:	4640      	mov	r0, r8
  4051da:	4b11      	ldr	r3, [pc, #68]	; (405220 <disk_read+0x68>)
  4051dc:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  4051de:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  4051e0:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  4051e4:	9b01      	ldr	r3, [sp, #4]
  4051e6:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  4051ea:	429a      	cmp	r2, r3
  4051ec:	d901      	bls.n	4051f2 <disk_read+0x3a>
		return RES_PARERR;
  4051ee:	2004      	movs	r0, #4
  4051f0:	e7ed      	b.n	4051ce <disk_read+0x16>
	for (i = 0; i < count; i++) {
  4051f2:	46ba      	mov	sl, r7
  4051f4:	b177      	cbz	r7, 405214 <disk_read+0x5c>
  4051f6:	0276      	lsls	r6, r6, #9
  4051f8:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  4051fa:	f8df b028 	ldr.w	fp, [pc, #40]	; 405224 <disk_read+0x6c>
  4051fe:	462a      	mov	r2, r5
  405200:	4621      	mov	r1, r4
  405202:	4640      	mov	r0, r8
  405204:	47d8      	blx	fp
  405206:	b938      	cbnz	r0, 405218 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  405208:	3701      	adds	r7, #1
  40520a:	444c      	add	r4, r9
  40520c:	4435      	add	r5, r6
  40520e:	4557      	cmp	r7, sl
  405210:	d1f5      	bne.n	4051fe <disk_read+0x46>
  405212:	e7dc      	b.n	4051ce <disk_read+0x16>
	return RES_OK;
  405214:	2000      	movs	r0, #0
  405216:	e7da      	b.n	4051ce <disk_read+0x16>
			return RES_ERROR;
  405218:	2001      	movs	r0, #1
  40521a:	e7d8      	b.n	4051ce <disk_read+0x16>
  40521c:	00402001 	.word	0x00402001
  405220:	00401fe1 	.word	0x00401fe1
  405224:	00402029 	.word	0x00402029

00405228 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  405228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40522c:	b083      	sub	sp, #12
  40522e:	4680      	mov	r8, r0
  405230:	460d      	mov	r5, r1
  405232:	4614      	mov	r4, r2
  405234:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  405236:	4b15      	ldr	r3, [pc, #84]	; (40528c <disk_write+0x64>)
  405238:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  40523a:	b918      	cbnz	r0, 405244 <disk_write+0x1c>
		return RES_ERROR;
  40523c:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  40523e:	b003      	add	sp, #12
  405240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405244:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  405246:	a901      	add	r1, sp, #4
  405248:	4640      	mov	r0, r8
  40524a:	4b11      	ldr	r3, [pc, #68]	; (405290 <disk_write+0x68>)
  40524c:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  40524e:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  405250:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  405254:	9b01      	ldr	r3, [sp, #4]
  405256:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  40525a:	429a      	cmp	r2, r3
  40525c:	d901      	bls.n	405262 <disk_write+0x3a>
		return RES_PARERR;
  40525e:	2004      	movs	r0, #4
  405260:	e7ed      	b.n	40523e <disk_write+0x16>
	for (i = 0; i < count; i++) {
  405262:	46ba      	mov	sl, r7
  405264:	b177      	cbz	r7, 405284 <disk_write+0x5c>
  405266:	0276      	lsls	r6, r6, #9
  405268:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  40526a:	f8df b028 	ldr.w	fp, [pc, #40]	; 405294 <disk_write+0x6c>
  40526e:	462a      	mov	r2, r5
  405270:	4621      	mov	r1, r4
  405272:	4640      	mov	r0, r8
  405274:	47d8      	blx	fp
  405276:	b938      	cbnz	r0, 405288 <disk_write+0x60>
	for (i = 0; i < count; i++) {
  405278:	3701      	adds	r7, #1
  40527a:	444c      	add	r4, r9
  40527c:	4435      	add	r5, r6
  40527e:	4557      	cmp	r7, sl
  405280:	d1f5      	bne.n	40526e <disk_write+0x46>
  405282:	e7dc      	b.n	40523e <disk_write+0x16>
	return RES_OK;
  405284:	2000      	movs	r0, #0
  405286:	e7da      	b.n	40523e <disk_write+0x16>
			return RES_ERROR;
  405288:	2001      	movs	r0, #1
  40528a:	e7d8      	b.n	40523e <disk_write+0x16>
  40528c:	00402001 	.word	0x00402001
  405290:	00401fe1 	.word	0x00401fe1
  405294:	0040204d 	.word	0x0040204d

00405298 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  405298:	b510      	push	{r4, lr}
  40529a:	b082      	sub	sp, #8
  40529c:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  40529e:	2903      	cmp	r1, #3
  4052a0:	d825      	bhi.n	4052ee <disk_ioctl+0x56>
  4052a2:	e8df f001 	tbb	[pc, r1]
  4052a6:	071d      	.short	0x071d
  4052a8:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  4052aa:	2301      	movs	r3, #1
  4052ac:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  4052ae:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  4052b0:	b002      	add	sp, #8
  4052b2:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  4052b4:	a901      	add	r1, sp, #4
  4052b6:	4b11      	ldr	r3, [pc, #68]	; (4052fc <disk_ioctl+0x64>)
  4052b8:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  4052ba:	9b01      	ldr	r3, [sp, #4]
  4052bc:	3301      	adds	r3, #1
  4052be:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  4052c0:	2000      	movs	r0, #0
	break;
  4052c2:	e7f5      	b.n	4052b0 <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  4052c4:	4b0e      	ldr	r3, [pc, #56]	; (405300 <disk_ioctl+0x68>)
  4052c6:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  4052c8:	2808      	cmp	r0, #8
  4052ca:	d812      	bhi.n	4052f2 <disk_ioctl+0x5a>
  4052cc:	f44f 738b 	mov.w	r3, #278	; 0x116
  4052d0:	fa23 f000 	lsr.w	r0, r3, r0
				(uc_sector_size != SECTOR_SIZE_2048) &&
  4052d4:	f010 0f01 	tst.w	r0, #1
  4052d8:	d00d      	beq.n	4052f6 <disk_ioctl+0x5e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  4052da:	2000      	movs	r0, #0
  4052dc:	7020      	strb	r0, [r4, #0]
	break;
  4052de:	e7e7      	b.n	4052b0 <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  4052e0:	4b08      	ldr	r3, [pc, #32]	; (405304 <disk_ioctl+0x6c>)
  4052e2:	4798      	blx	r3
  4052e4:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  4052e6:	bf0c      	ite	eq
  4052e8:	2000      	moveq	r0, #0
  4052ea:	2003      	movne	r0, #3
  4052ec:	e7e0      	b.n	4052b0 <disk_ioctl+0x18>
		res = RES_PARERR;
  4052ee:	2004      	movs	r0, #4
  4052f0:	e7de      	b.n	4052b0 <disk_ioctl+0x18>
			return RES_ERROR;
  4052f2:	2001      	movs	r0, #1
  4052f4:	e7dc      	b.n	4052b0 <disk_ioctl+0x18>
  4052f6:	2001      	movs	r0, #1
  4052f8:	e7da      	b.n	4052b0 <disk_ioctl+0x18>
  4052fa:	bf00      	nop
  4052fc:	00401fe1 	.word	0x00401fe1
  405300:	00402001 	.word	0x00402001
  405304:	00401fc9 	.word	0x00401fc9

00405308 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  405308:	b530      	push	{r4, r5, lr}
  40530a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  40530c:	4c11      	ldr	r4, [pc, #68]	; (405354 <get_fattime+0x4c>)
  40530e:	ab07      	add	r3, sp, #28
  405310:	aa08      	add	r2, sp, #32
  405312:	a909      	add	r1, sp, #36	; 0x24
  405314:	4620      	mov	r0, r4
  405316:	4d10      	ldr	r5, [pc, #64]	; (405358 <get_fattime+0x50>)
  405318:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  40531a:	ab03      	add	r3, sp, #12
  40531c:	9300      	str	r3, [sp, #0]
  40531e:	ab04      	add	r3, sp, #16
  405320:	aa05      	add	r2, sp, #20
  405322:	a906      	add	r1, sp, #24
  405324:	4620      	mov	r0, r4
  405326:	4c0d      	ldr	r4, [pc, #52]	; (40535c <get_fattime+0x54>)
  405328:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  40532a:	9b04      	ldr	r3, [sp, #16]
  40532c:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  40532e:	9805      	ldr	r0, [sp, #20]
  405330:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  405334:	9809      	ldr	r0, [sp, #36]	; 0x24
  405336:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  40533a:	9808      	ldr	r0, [sp, #32]
  40533c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  405340:	9807      	ldr	r0, [sp, #28]
  405342:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  405346:	9806      	ldr	r0, [sp, #24]
  405348:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  40534c:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  405350:	b00b      	add	sp, #44	; 0x2c
  405352:	bd30      	pop	{r4, r5, pc}
  405354:	400e1860 	.word	0x400e1860
  405358:	00402751 	.word	0x00402751
  40535c:	0040283d 	.word	0x0040283d

00405360 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  405360:	b13a      	cbz	r2, 405372 <mem_cpy+0x12>
  405362:	3801      	subs	r0, #1
  405364:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  405366:	f811 3b01 	ldrb.w	r3, [r1], #1
  40536a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  40536e:	4291      	cmp	r1, r2
  405370:	d1f9      	bne.n	405366 <mem_cpy+0x6>
  405372:	4770      	bx	lr

00405374 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  405374:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  405376:	6983      	ldr	r3, [r0, #24]
  405378:	3b02      	subs	r3, #2
  40537a:	4299      	cmp	r1, r3
  40537c:	d204      	bcs.n	405388 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
  40537e:	7883      	ldrb	r3, [r0, #2]
  405380:	6a80      	ldr	r0, [r0, #40]	; 0x28
  405382:	fb01 0003 	mla	r0, r1, r3, r0
  405386:	4770      	bx	lr
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  405388:	2000      	movs	r0, #0
}
  40538a:	4770      	bx	lr

0040538c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  40538c:	4602      	mov	r2, r0
  40538e:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  405392:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  405394:	01c3      	lsls	r3, r0, #7
  405396:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  40539a:	f812 0b01 	ldrb.w	r0, [r2], #1
  40539e:	fa50 f383 	uxtab	r3, r0, r3
  4053a2:	b2d8      	uxtb	r0, r3
  4053a4:	428a      	cmp	r2, r1
  4053a6:	d1f5      	bne.n	405394 <sum_sfn+0x8>
	return sum;
}
  4053a8:	4770      	bx	lr
	...

004053ac <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  4053ac:	b198      	cbz	r0, 4053d6 <validate+0x2a>
{
  4053ae:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  4053b0:	7802      	ldrb	r2, [r0, #0]
  4053b2:	b90a      	cbnz	r2, 4053b8 <validate+0xc>
		return FR_INVALID_OBJECT;
  4053b4:	2009      	movs	r0, #9
  4053b6:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  4053b8:	88c2      	ldrh	r2, [r0, #6]
  4053ba:	428a      	cmp	r2, r1
  4053bc:	d001      	beq.n	4053c2 <validate+0x16>
		return FR_INVALID_OBJECT;
  4053be:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  4053c0:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  4053c2:	7840      	ldrb	r0, [r0, #1]
  4053c4:	4b05      	ldr	r3, [pc, #20]	; (4053dc <validate+0x30>)
  4053c6:	4798      	blx	r3
  4053c8:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  4053cc:	2800      	cmp	r0, #0
  4053ce:	bf14      	ite	ne
  4053d0:	2003      	movne	r0, #3
  4053d2:	2000      	moveq	r0, #0
  4053d4:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  4053d6:	2009      	movs	r0, #9
  4053d8:	4770      	bx	lr
  4053da:	bf00      	nop
  4053dc:	0040519d 	.word	0x0040519d

004053e0 <check_fs>:
{
  4053e0:	b538      	push	{r3, r4, r5, lr}
  4053e2:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  4053e4:	2301      	movs	r3, #1
  4053e6:	460a      	mov	r2, r1
  4053e8:	f100 0130 	add.w	r1, r0, #48	; 0x30
  4053ec:	7840      	ldrb	r0, [r0, #1]
  4053ee:	4d1d      	ldr	r5, [pc, #116]	; (405464 <check_fs+0x84>)
  4053f0:	47a8      	blx	r5
  4053f2:	b108      	cbz	r0, 4053f8 <check_fs+0x18>
		return 3;
  4053f4:	2003      	movs	r0, #3
  4053f6:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  4053f8:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  4053fc:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  405400:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  405404:	b21b      	sxth	r3, r3
  405406:	4a18      	ldr	r2, [pc, #96]	; (405468 <check_fs+0x88>)
  405408:	4293      	cmp	r3, r2
  40540a:	d001      	beq.n	405410 <check_fs+0x30>
		return 2;
  40540c:	2002      	movs	r0, #2
  40540e:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  405410:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  405414:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  405418:	041b      	lsls	r3, r3, #16
  40541a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40541e:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  405422:	4313      	orrs	r3, r2
  405424:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  405428:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40542c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  405430:	4a0e      	ldr	r2, [pc, #56]	; (40546c <check_fs+0x8c>)
  405432:	4293      	cmp	r3, r2
  405434:	d013      	beq.n	40545e <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  405436:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  40543a:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  40543e:	0400      	lsls	r0, r0, #16
  405440:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  405444:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  405448:	4318      	orrs	r0, r3
  40544a:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  40544e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  405452:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  405456:	1a80      	subs	r0, r0, r2
  405458:	bf18      	it	ne
  40545a:	2001      	movne	r0, #1
  40545c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  40545e:	2000      	movs	r0, #0
}
  405460:	bd38      	pop	{r3, r4, r5, pc}
  405462:	bf00      	nop
  405464:	004051b9 	.word	0x004051b9
  405468:	ffffaa55 	.word	0xffffaa55
  40546c:	00544146 	.word	0x00544146

00405470 <chk_mounted>:
{
  405470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  405472:	6804      	ldr	r4, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  405474:	7823      	ldrb	r3, [r4, #0]
  405476:	3b30      	subs	r3, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  405478:	2b09      	cmp	r3, #9
  40547a:	d802      	bhi.n	405482 <chk_mounted+0x12>
  40547c:	7865      	ldrb	r5, [r4, #1]
  40547e:	2d3a      	cmp	r5, #58	; 0x3a
  405480:	d018      	beq.n	4054b4 <chk_mounted+0x44>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  405482:	4bb0      	ldr	r3, [pc, #704]	; (405744 <chk_mounted+0x2d4>)
  405484:	681c      	ldr	r4, [r3, #0]
  405486:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  405488:	2c00      	cmp	r4, #0
  40548a:	f000 8143 	beq.w	405714 <chk_mounted+0x2a4>
  40548e:	4615      	mov	r5, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  405490:	7823      	ldrb	r3, [r4, #0]
  405492:	b1ab      	cbz	r3, 4054c0 <chk_mounted+0x50>
		stat = disk_status(fs->drv);
  405494:	7860      	ldrb	r0, [r4, #1]
  405496:	4bac      	ldr	r3, [pc, #688]	; (405748 <chk_mounted+0x2d8>)
  405498:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  40549a:	f010 0f01 	tst.w	r0, #1
  40549e:	d10f      	bne.n	4054c0 <chk_mounted+0x50>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  4054a0:	2d00      	cmp	r5, #0
  4054a2:	f000 8139 	beq.w	405718 <chk_mounted+0x2a8>
  4054a6:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  4054aa:	2800      	cmp	r0, #0
  4054ac:	bf0c      	ite	eq
  4054ae:	2000      	moveq	r0, #0
  4054b0:	200a      	movne	r0, #10
  4054b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p += 2; *path = p;				/* Return pointer to the path name */
  4054b4:	3402      	adds	r4, #2
  4054b6:	6004      	str	r4, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  4054b8:	2b00      	cmp	r3, #0
  4054ba:	d0e2      	beq.n	405482 <chk_mounted+0x12>
		return FR_INVALID_DRIVE;
  4054bc:	200b      	movs	r0, #11
  4054be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  4054c0:	2000      	movs	r0, #0
  4054c2:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  4054c4:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  4054c6:	4ba1      	ldr	r3, [pc, #644]	; (40574c <chk_mounted+0x2dc>)
  4054c8:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  4054ca:	f010 0f01 	tst.w	r0, #1
  4054ce:	d001      	beq.n	4054d4 <chk_mounted+0x64>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  4054d0:	2003      	movs	r0, #3
  4054d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  4054d4:	b125      	cbz	r5, 4054e0 <chk_mounted+0x70>
  4054d6:	f010 0f04 	tst.w	r0, #4
  4054da:	d001      	beq.n	4054e0 <chk_mounted+0x70>
		return FR_WRITE_PROTECTED;
  4054dc:	200a      	movs	r0, #10
  4054de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  4054e0:	2100      	movs	r1, #0
  4054e2:	4620      	mov	r0, r4
  4054e4:	4b9a      	ldr	r3, [pc, #616]	; (405750 <chk_mounted+0x2e0>)
  4054e6:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  4054e8:	2801      	cmp	r0, #1
  4054ea:	d006      	beq.n	4054fa <chk_mounted+0x8a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  4054ec:	2500      	movs	r5, #0
	if (fmt == 3) return FR_DISK_ERR;
  4054ee:	2803      	cmp	r0, #3
  4054f0:	f000 8114 	beq.w	40571c <chk_mounted+0x2ac>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  4054f4:	b1c8      	cbz	r0, 40552a <chk_mounted+0xba>
  4054f6:	200d      	movs	r0, #13
  4054f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  4054fa:	f894 31f2 	ldrb.w	r3, [r4, #498]	; 0x1f2
  4054fe:	b90b      	cbnz	r3, 405504 <chk_mounted+0x94>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  405500:	200d      	movs	r0, #13
  405502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  405504:	f894 31f9 	ldrb.w	r3, [r4, #505]	; 0x1f9
  405508:	f894 51f8 	ldrb.w	r5, [r4, #504]	; 0x1f8
  40550c:	042d      	lsls	r5, r5, #16
  40550e:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
  405512:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
  405516:	431d      	orrs	r5, r3
  405518:	f894 31f7 	ldrb.w	r3, [r4, #503]	; 0x1f7
  40551c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  405520:	4629      	mov	r1, r5
  405522:	4620      	mov	r0, r4
  405524:	4b8a      	ldr	r3, [pc, #552]	; (405750 <chk_mounted+0x2e0>)
  405526:	4798      	blx	r3
  405528:	e7e1      	b.n	4054ee <chk_mounted+0x7e>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  40552a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  40552e:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
  405532:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  405536:	b21b      	sxth	r3, r3
  405538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40553c:	d001      	beq.n	405542 <chk_mounted+0xd2>
		return FR_NO_FILESYSTEM;
  40553e:	200d      	movs	r0, #13
  405540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  405542:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  405546:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  40554a:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  40554e:	d10d      	bne.n	40556c <chk_mounted+0xfc>
  405550:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
  405554:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
  405558:	0412      	lsls	r2, r2, #16
  40555a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  40555e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
  405562:	431a      	orrs	r2, r3
  405564:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
  405568:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  40556c:	61e2      	str	r2, [r4, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  40556e:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
  405572:	f884 e003 	strb.w	lr, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  405576:	f10e 33ff 	add.w	r3, lr, #4294967295
  40557a:	b2db      	uxtb	r3, r3
  40557c:	2b01      	cmp	r3, #1
  40557e:	d901      	bls.n	405584 <chk_mounted+0x114>
  405580:	200d      	movs	r0, #13
  405582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  405584:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
  405588:	70a6      	strb	r6, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  40558a:	2e00      	cmp	r6, #0
  40558c:	f000 80c8 	beq.w	405720 <chk_mounted+0x2b0>
  405590:	1e73      	subs	r3, r6, #1
  405592:	4233      	tst	r3, r6
  405594:	d001      	beq.n	40559a <chk_mounted+0x12a>
  405596:	200d      	movs	r0, #13
  405598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  40559a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  40559e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  4055a2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  4055a6:	8121      	strh	r1, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  4055a8:	f011 0f0f 	tst.w	r1, #15
  4055ac:	f040 80ba 	bne.w	405724 <chk_mounted+0x2b4>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  4055b0:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  4055b4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  4055b8:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  4055bc:	d10d      	bne.n	4055da <chk_mounted+0x16a>
  4055be:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
  4055c2:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
  4055c6:	041b      	lsls	r3, r3, #16
  4055c8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  4055cc:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
  4055d0:	4303      	orrs	r3, r0
  4055d2:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  4055d6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  4055da:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
  4055de:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  4055e2:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  4055e6:	f000 809f 	beq.w	405728 <chk_mounted+0x2b8>
	fasize *= b;										/* Number of sectors for FAT area */
  4055ea:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  4055ee:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  4055f2:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  4055f4:	4283      	cmp	r3, r0
  4055f6:	f0c0 8099 	bcc.w	40572c <chk_mounted+0x2bc>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  4055fa:	1a1b      	subs	r3, r3, r0
  4055fc:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  405600:	2b00      	cmp	r3, #0
  405602:	f000 8095 	beq.w	405730 <chk_mounted+0x2c0>
	fmt = FS_FAT12;
  405606:	f640 76f5 	movw	r6, #4085	; 0xff5
  40560a:	42b3      	cmp	r3, r6
  40560c:	bf8c      	ite	hi
  40560e:	2602      	movhi	r6, #2
  405610:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  405612:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  405616:	4563      	cmp	r3, ip
  405618:	f200 80a4 	bhi.w	405764 <chk_mounted+0x2f4>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  40561c:	3302      	adds	r3, #2
  40561e:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  405620:	4428      	add	r0, r5
  405622:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  405624:	443d      	add	r5, r7
  405626:	6225      	str	r5, [r4, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  405628:	2900      	cmp	r1, #0
  40562a:	f000 8089 	beq.w	405740 <chk_mounted+0x2d0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  40562e:	4475      	add	r5, lr
  405630:	6265      	str	r5, [r4, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  405632:	2e02      	cmp	r6, #2
  405634:	d10b      	bne.n	40564e <chk_mounted+0x1de>
  405636:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  405638:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  40563c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  405640:	d37c      	bcc.n	40573c <chk_mounted+0x2cc>
	fs->free_clust = 0xFFFFFFFF;
  405642:	f04f 33ff 	mov.w	r3, #4294967295
  405646:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
  405648:	2300      	movs	r3, #0
  40564a:	60e3      	str	r3, [r4, #12]
  40564c:	e051      	b.n	4056f2 <chk_mounted+0x282>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  40564e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  405652:	f003 0301 	and.w	r3, r3, #1
  405656:	eb03 0351 	add.w	r3, r3, r1, lsr #1
  40565a:	e7ed      	b.n	405638 <chk_mounted+0x1c8>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40565c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  405660:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  405664:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  405668:	b21b      	sxth	r3, r3
  40566a:	4a3a      	ldr	r2, [pc, #232]	; (405754 <chk_mounted+0x2e4>)
  40566c:	4293      	cmp	r3, r2
  40566e:	d14b      	bne.n	405708 <chk_mounted+0x298>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  405670:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  405674:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  405678:	041b      	lsls	r3, r3, #16
  40567a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40567e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  405682:	4313      	orrs	r3, r2
  405684:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
  405688:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40568c:	4a32      	ldr	r2, [pc, #200]	; (405758 <chk_mounted+0x2e8>)
  40568e:	4293      	cmp	r3, r2
  405690:	d13c      	bne.n	40570c <chk_mounted+0x29c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  405692:	f894 2217 	ldrb.w	r2, [r4, #535]	; 0x217
  405696:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
  40569a:	041b      	lsls	r3, r3, #16
  40569c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4056a0:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
  4056a4:	4313      	orrs	r3, r2
  4056a6:	f894 2215 	ldrb.w	r2, [r4, #533]	; 0x215
  4056aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  4056ae:	4a2b      	ldr	r2, [pc, #172]	; (40575c <chk_mounted+0x2ec>)
  4056b0:	4293      	cmp	r3, r2
  4056b2:	d12d      	bne.n	405710 <chk_mounted+0x2a0>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4056b4:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
  4056b8:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
  4056bc:	041b      	lsls	r3, r3, #16
  4056be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4056c2:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
  4056c6:	4313      	orrs	r3, r2
  4056c8:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
  4056cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4056d0:	60e3      	str	r3, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4056d2:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
  4056d6:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
  4056da:	041b      	lsls	r3, r3, #16
  4056dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4056e0:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
  4056e4:	4313      	orrs	r3, r2
  4056e6:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
  4056ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4056ee:	6123      	str	r3, [r4, #16]
  4056f0:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  4056f2:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  4056f4:	4a1a      	ldr	r2, [pc, #104]	; (405760 <chk_mounted+0x2f0>)
  4056f6:	8813      	ldrh	r3, [r2, #0]
  4056f8:	3301      	adds	r3, #1
  4056fa:	b29b      	uxth	r3, r3
  4056fc:	8013      	strh	r3, [r2, #0]
  4056fe:	80e3      	strh	r3, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  405700:	2000      	movs	r0, #0
  405702:	62e0      	str	r0, [r4, #44]	; 0x2c
	fs->wflag = 0;
  405704:	7120      	strb	r0, [r4, #4]
	return FR_OK;
  405706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405708:	2603      	movs	r6, #3
  40570a:	e7f2      	b.n	4056f2 <chk_mounted+0x282>
  40570c:	2603      	movs	r6, #3
  40570e:	e7f0      	b.n	4056f2 <chk_mounted+0x282>
  405710:	2603      	movs	r6, #3
  405712:	e7ee      	b.n	4056f2 <chk_mounted+0x282>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  405714:	200c      	movs	r0, #12
  405716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  405718:	2000      	movs	r0, #0
  40571a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  40571c:	2001      	movs	r0, #1
  40571e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  405720:	200d      	movs	r0, #13
  405722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  405724:	200d      	movs	r0, #13
  405726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  405728:	200d      	movs	r0, #13
  40572a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  40572c:	200d      	movs	r0, #13
  40572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  405730:	200d      	movs	r0, #13
  405732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  405734:	200d      	movs	r0, #13
  405736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  405738:	200d      	movs	r0, #13
  40573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  40573c:	200d      	movs	r0, #13
  40573e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  405740:	200d      	movs	r0, #13
  405742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405744:	20400cc4 	.word	0x20400cc4
  405748:	0040519d 	.word	0x0040519d
  40574c:	0040515d 	.word	0x0040515d
  405750:	004053e1 	.word	0x004053e1
  405754:	ffffaa55 	.word	0xffffaa55
  405758:	41615252 	.word	0x41615252
  40575c:	61417272 	.word	0x61417272
  405760:	20400cc8 	.word	0x20400cc8
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  405764:	3302      	adds	r3, #2
  405766:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  405768:	4428      	add	r0, r5
  40576a:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  40576c:	442f      	add	r7, r5
  40576e:	6227      	str	r7, [r4, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  405770:	2900      	cmp	r1, #0
  405772:	d1e1      	bne.n	405738 <chk_mounted+0x2c8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  405774:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
  405778:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
  40577c:	0409      	lsls	r1, r1, #16
  40577e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  405782:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  405786:	4301      	orrs	r1, r0
  405788:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  40578c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  405790:	6261      	str	r1, [r4, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  405792:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  405794:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  405798:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  40579c:	d3ca      	bcc.n	405734 <chk_mounted+0x2c4>
	fs->free_clust = 0xFFFFFFFF;
  40579e:	f04f 33ff 	mov.w	r3, #4294967295
  4057a2:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
  4057a4:	2300      	movs	r3, #0
  4057a6:	60e3      	str	r3, [r4, #12]
	 	fs->fsi_flag = 0;
  4057a8:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  4057aa:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
  4057ae:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
  4057b2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  4057b6:	442a      	add	r2, r5
  4057b8:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  4057ba:	2301      	movs	r3, #1
  4057bc:	f104 0130 	add.w	r1, r4, #48	; 0x30
  4057c0:	7860      	ldrb	r0, [r4, #1]
  4057c2:	4d03      	ldr	r5, [pc, #12]	; (4057d0 <chk_mounted+0x360>)
  4057c4:	47a8      	blx	r5
  4057c6:	2800      	cmp	r0, #0
  4057c8:	f43f af48 	beq.w	40565c <chk_mounted+0x1ec>
  4057cc:	2603      	movs	r6, #3
  4057ce:	e790      	b.n	4056f2 <chk_mounted+0x282>
  4057d0:	004051b9 	.word	0x004051b9

004057d4 <get_fileinfo>:
{
  4057d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	p = fno->fname;
  4057d8:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
  4057dc:	6903      	ldr	r3, [r0, #16]
  4057de:	2b00      	cmp	r3, #0
  4057e0:	d05e      	beq.n	4058a0 <get_fileinfo+0xcc>
		dir = dj->dir;
  4057e2:	6944      	ldr	r4, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
  4057e4:	f894 e00c 	ldrb.w	lr, [r4, #12]
			c = dir[i];
  4057e8:	7823      	ldrb	r3, [r4, #0]
			if (c == ' ') break;
  4057ea:	2b20      	cmp	r3, #32
  4057ec:	d01d      	beq.n	40582a <get_fileinfo+0x56>
  4057ee:	4625      	mov	r5, r4
  4057f0:	f101 0711 	add.w	r7, r1, #17
			if (c == NDDE) c = (TCHAR)DDE;
  4057f4:	f04f 08e5 	mov.w	r8, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  4057f8:	f00e 0c08 	and.w	ip, lr, #8
  4057fc:	e008      	b.n	405810 <get_fileinfo+0x3c>
			if (c == NDDE) c = (TCHAR)DDE;
  4057fe:	4643      	mov	r3, r8
			*p++ = c;
  405800:	f802 3b01 	strb.w	r3, [r2], #1
		for (i = 0; i < 8; i++) {	/* Copy name body */
  405804:	42ba      	cmp	r2, r7
  405806:	d010      	beq.n	40582a <get_fileinfo+0x56>
			c = dir[i];
  405808:	f815 3f01 	ldrb.w	r3, [r5, #1]!
			if (c == ' ') break;
  40580c:	2b20      	cmp	r3, #32
  40580e:	d00c      	beq.n	40582a <get_fileinfo+0x56>
			if (c == NDDE) c = (TCHAR)DDE;
  405810:	2b05      	cmp	r3, #5
  405812:	d0f4      	beq.n	4057fe <get_fileinfo+0x2a>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  405814:	f1bc 0f00 	cmp.w	ip, #0
  405818:	d0f2      	beq.n	405800 <get_fileinfo+0x2c>
  40581a:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
  40581e:	b2f6      	uxtb	r6, r6
  405820:	2e19      	cmp	r6, #25
  405822:	d8ed      	bhi.n	405800 <get_fileinfo+0x2c>
  405824:	3320      	adds	r3, #32
  405826:	b2db      	uxtb	r3, r3
  405828:	e7ea      	b.n	405800 <get_fileinfo+0x2c>
		if (dir[8] != ' ') {		/* Copy name extension */
  40582a:	7a23      	ldrb	r3, [r4, #8]
  40582c:	2b20      	cmp	r3, #32
  40582e:	d020      	beq.n	405872 <get_fileinfo+0x9e>
			*p++ = '.';
  405830:	1c55      	adds	r5, r2, #1
  405832:	232e      	movs	r3, #46	; 0x2e
  405834:	7013      	strb	r3, [r2, #0]
				c = dir[i];
  405836:	7a23      	ldrb	r3, [r4, #8]
				if (c == ' ') break;
  405838:	2b20      	cmp	r3, #32
  40583a:	d019      	beq.n	405870 <get_fileinfo+0x9c>
  40583c:	f104 0708 	add.w	r7, r4, #8
  405840:	f102 0c04 	add.w	ip, r2, #4
  405844:	462a      	mov	r2, r5
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  405846:	f00e 0510 	and.w	r5, lr, #16
  40584a:	e007      	b.n	40585c <get_fileinfo+0x88>
				*p++ = c;
  40584c:	f802 3b01 	strb.w	r3, [r2], #1
			for (i = 8; i < 11; i++) {
  405850:	4562      	cmp	r2, ip
  405852:	d00e      	beq.n	405872 <get_fileinfo+0x9e>
				c = dir[i];
  405854:	f817 3f01 	ldrb.w	r3, [r7, #1]!
				if (c == ' ') break;
  405858:	2b20      	cmp	r3, #32
  40585a:	d00a      	beq.n	405872 <get_fileinfo+0x9e>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  40585c:	2d00      	cmp	r5, #0
  40585e:	d0f5      	beq.n	40584c <get_fileinfo+0x78>
  405860:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
  405864:	b2f6      	uxtb	r6, r6
  405866:	2e19      	cmp	r6, #25
  405868:	d8f0      	bhi.n	40584c <get_fileinfo+0x78>
  40586a:	3320      	adds	r3, #32
  40586c:	b2db      	uxtb	r3, r3
  40586e:	e7ed      	b.n	40584c <get_fileinfo+0x78>
			*p++ = '.';
  405870:	462a      	mov	r2, r5
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
  405872:	7ae3      	ldrb	r3, [r4, #11]
  405874:	720b      	strb	r3, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
  405876:	7fe5      	ldrb	r5, [r4, #31]
  405878:	7fa3      	ldrb	r3, [r4, #30]
  40587a:	041b      	lsls	r3, r3, #16
  40587c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  405880:	7f25      	ldrb	r5, [r4, #28]
  405882:	432b      	orrs	r3, r5
  405884:	7f65      	ldrb	r5, [r4, #29]
  405886:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  40588a:	600b      	str	r3, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
  40588c:	7e65      	ldrb	r5, [r4, #25]
  40588e:	7e23      	ldrb	r3, [r4, #24]
  405890:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  405894:	808b      	strh	r3, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
  405896:	7de5      	ldrb	r5, [r4, #23]
  405898:	7da3      	ldrb	r3, [r4, #22]
  40589a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  40589e:	80cb      	strh	r3, [r1, #6]
	*p = 0;		/* Terminate SFN str by a \0 */
  4058a0:	2300      	movs	r3, #0
  4058a2:	7013      	strb	r3, [r2, #0]
	if (fno->lfname && fno->lfsize) {
  4058a4:	698f      	ldr	r7, [r1, #24]
  4058a6:	b32f      	cbz	r7, 4058f4 <get_fileinfo+0x120>
  4058a8:	69cb      	ldr	r3, [r1, #28]
  4058aa:	b31b      	cbz	r3, 4058f4 <get_fileinfo+0x120>
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
  4058ac:	6903      	ldr	r3, [r0, #16]
  4058ae:	b1f3      	cbz	r3, 4058ee <get_fileinfo+0x11a>
  4058b0:	8c02      	ldrh	r2, [r0, #32]
  4058b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4058b6:	429a      	cmp	r2, r3
  4058b8:	d01e      	beq.n	4058f8 <get_fileinfo+0x124>
			lfn = dj->lfn;
  4058ba:	f8d0 801c 	ldr.w	r8, [r0, #28]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  4058be:	f8b8 0000 	ldrh.w	r0, [r8]
  4058c2:	b1d8      	cbz	r0, 4058fc <get_fileinfo+0x128>
  4058c4:	460d      	mov	r5, r1
  4058c6:	1e7e      	subs	r6, r7, #1
  4058c8:	2400      	movs	r4, #0
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
  4058ca:	46a2      	mov	sl, r4
  4058cc:	f8df 9038 	ldr.w	r9, [pc, #56]	; 405908 <get_fileinfo+0x134>
  4058d0:	4651      	mov	r1, sl
  4058d2:	47c8      	blx	r9
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  4058d4:	b1a0      	cbz	r0, 405900 <get_fileinfo+0x12c>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  4058d6:	69eb      	ldr	r3, [r5, #28]
  4058d8:	3b01      	subs	r3, #1
  4058da:	42a3      	cmp	r3, r4
  4058dc:	d912      	bls.n	405904 <get_fileinfo+0x130>
				tp[i++] = (TCHAR)w;
  4058de:	3401      	adds	r4, #1
  4058e0:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  4058e4:	f838 0014 	ldrh.w	r0, [r8, r4, lsl #1]
  4058e8:	2800      	cmp	r0, #0
  4058ea:	d1f1      	bne.n	4058d0 <get_fileinfo+0xfc>
  4058ec:	e000      	b.n	4058f0 <get_fileinfo+0x11c>
		i = 0;
  4058ee:	2400      	movs	r4, #0
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
  4058f0:	2300      	movs	r3, #0
  4058f2:	553b      	strb	r3, [r7, r4]
  4058f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = 0;
  4058f8:	2400      	movs	r4, #0
  4058fa:	e7f9      	b.n	4058f0 <get_fileinfo+0x11c>
  4058fc:	2400      	movs	r4, #0
  4058fe:	e7f7      	b.n	4058f0 <get_fileinfo+0x11c>
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  405900:	2400      	movs	r4, #0
  405902:	e7f5      	b.n	4058f0 <get_fileinfo+0x11c>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  405904:	2400      	movs	r4, #0
  405906:	e7f3      	b.n	4058f0 <get_fileinfo+0x11c>
  405908:	00407049 	.word	0x00407049

0040590c <move_window>:
{
  40590c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  405910:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  405912:	428f      	cmp	r7, r1
  405914:	d035      	beq.n	405982 <move_window+0x76>
  405916:	460e      	mov	r6, r1
  405918:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  40591a:	7903      	ldrb	r3, [r0, #4]
  40591c:	b91b      	cbnz	r3, 405926 <move_window+0x1a>
		if (sector) {
  40591e:	bb2e      	cbnz	r6, 40596c <move_window+0x60>
	return FR_OK;
  405920:	2000      	movs	r0, #0
  405922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  405926:	f100 0830 	add.w	r8, r0, #48	; 0x30
  40592a:	2301      	movs	r3, #1
  40592c:	463a      	mov	r2, r7
  40592e:	4641      	mov	r1, r8
  405930:	7840      	ldrb	r0, [r0, #1]
  405932:	4d18      	ldr	r5, [pc, #96]	; (405994 <move_window+0x88>)
  405934:	47a8      	blx	r5
  405936:	bb38      	cbnz	r0, 405988 <move_window+0x7c>
			fs->wflag = 0;
  405938:	2300      	movs	r3, #0
  40593a:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  40593c:	6a23      	ldr	r3, [r4, #32]
  40593e:	69e2      	ldr	r2, [r4, #28]
  405940:	4413      	add	r3, r2
  405942:	429f      	cmp	r7, r3
  405944:	d2eb      	bcs.n	40591e <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  405946:	78e5      	ldrb	r5, [r4, #3]
  405948:	2d01      	cmp	r5, #1
  40594a:	d9e8      	bls.n	40591e <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  40594c:	f04f 0a01 	mov.w	sl, #1
  405950:	f8df 9040 	ldr.w	r9, [pc, #64]	; 405994 <move_window+0x88>
					wsect += fs->fsize;
  405954:	69e3      	ldr	r3, [r4, #28]
  405956:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  405958:	4653      	mov	r3, sl
  40595a:	463a      	mov	r2, r7
  40595c:	4641      	mov	r1, r8
  40595e:	7860      	ldrb	r0, [r4, #1]
  405960:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  405962:	3d01      	subs	r5, #1
  405964:	b2ed      	uxtb	r5, r5
  405966:	2d01      	cmp	r5, #1
  405968:	d1f4      	bne.n	405954 <move_window+0x48>
  40596a:	e7d8      	b.n	40591e <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  40596c:	2301      	movs	r3, #1
  40596e:	4632      	mov	r2, r6
  405970:	f104 0130 	add.w	r1, r4, #48	; 0x30
  405974:	7860      	ldrb	r0, [r4, #1]
  405976:	4d08      	ldr	r5, [pc, #32]	; (405998 <move_window+0x8c>)
  405978:	47a8      	blx	r5
  40597a:	b940      	cbnz	r0, 40598e <move_window+0x82>
			fs->winsect = sector;
  40597c:	62e6      	str	r6, [r4, #44]	; 0x2c
  40597e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  405982:	2000      	movs	r0, #0
  405984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  405988:	2001      	movs	r0, #1
  40598a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  40598e:	2001      	movs	r0, #1
}
  405990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405994:	00405229 	.word	0x00405229
  405998:	004051b9 	.word	0x004051b9

0040599c <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  40599c:	2901      	cmp	r1, #1
  40599e:	d96a      	bls.n	405a76 <get_fat+0xda>
{
  4059a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4059a2:	6983      	ldr	r3, [r0, #24]
  4059a4:	4299      	cmp	r1, r3
  4059a6:	d268      	bcs.n	405a7a <get_fat+0xde>
  4059a8:	460c      	mov	r4, r1
  4059aa:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  4059ac:	7803      	ldrb	r3, [r0, #0]
  4059ae:	2b02      	cmp	r3, #2
  4059b0:	d02f      	beq.n	405a12 <get_fat+0x76>
  4059b2:	2b03      	cmp	r3, #3
  4059b4:	d041      	beq.n	405a3a <get_fat+0x9e>
  4059b6:	2b01      	cmp	r3, #1
  4059b8:	d002      	beq.n	4059c0 <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4059ba:	f04f 30ff 	mov.w	r0, #4294967295
  4059be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  4059c0:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  4059c4:	6a01      	ldr	r1, [r0, #32]
  4059c6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  4059ca:	4b2d      	ldr	r3, [pc, #180]	; (405a80 <get_fat+0xe4>)
  4059cc:	4798      	blx	r3
  4059ce:	b110      	cbz	r0, 4059d6 <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4059d0:	f04f 30ff 	mov.w	r0, #4294967295
  4059d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  4059d6:	f3c7 0308 	ubfx	r3, r7, #0, #9
  4059da:	4433      	add	r3, r6
  4059dc:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  4059e0:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  4059e2:	6a31      	ldr	r1, [r6, #32]
  4059e4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  4059e8:	4630      	mov	r0, r6
  4059ea:	4b25      	ldr	r3, [pc, #148]	; (405a80 <get_fat+0xe4>)
  4059ec:	4798      	blx	r3
  4059ee:	b110      	cbz	r0, 4059f6 <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4059f0:	f04f 30ff 	mov.w	r0, #4294967295
  4059f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  4059f6:	f3c7 0708 	ubfx	r7, r7, #0, #9
  4059fa:	19f0      	adds	r0, r6, r7
  4059fc:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  405a00:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  405a04:	f014 0f01 	tst.w	r4, #1
  405a08:	bf14      	ite	ne
  405a0a:	0900      	lsrne	r0, r0, #4
  405a0c:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  405a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  405a12:	6a01      	ldr	r1, [r0, #32]
  405a14:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  405a18:	4b19      	ldr	r3, [pc, #100]	; (405a80 <get_fat+0xe4>)
  405a1a:	4798      	blx	r3
  405a1c:	b110      	cbz	r0, 405a24 <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405a1e:	f04f 30ff 	mov.w	r0, #4294967295
  405a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  405a24:	0060      	lsls	r0, r4, #1
  405a26:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  405a2a:	4430      	add	r0, r6
  405a2c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  405a30:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  405a34:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  405a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  405a3a:	6a01      	ldr	r1, [r0, #32]
  405a3c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  405a40:	4b0f      	ldr	r3, [pc, #60]	; (405a80 <get_fat+0xe4>)
  405a42:	4798      	blx	r3
  405a44:	b110      	cbz	r0, 405a4c <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405a46:	f04f 30ff 	mov.w	r0, #4294967295
}
  405a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  405a4c:	00a0      	lsls	r0, r4, #2
  405a4e:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  405a52:	f100 0230 	add.w	r2, r0, #48	; 0x30
  405a56:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  405a58:	78d1      	ldrb	r1, [r2, #3]
  405a5a:	7893      	ldrb	r3, [r2, #2]
  405a5c:	041b      	lsls	r3, r3, #16
  405a5e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  405a62:	4430      	add	r0, r6
  405a64:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  405a68:	4318      	orrs	r0, r3
  405a6a:	7853      	ldrb	r3, [r2, #1]
  405a6c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  405a70:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  405a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  405a76:	2001      	movs	r0, #1
  405a78:	4770      	bx	lr
  405a7a:	2001      	movs	r0, #1
  405a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405a7e:	bf00      	nop
  405a80:	0040590d 	.word	0x0040590d

00405a84 <dir_sdi>:
{
  405a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405a86:	4605      	mov	r5, r0
  405a88:	460c      	mov	r4, r1
	dj->index = idx;
  405a8a:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  405a8c:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  405a8e:	2901      	cmp	r1, #1
  405a90:	d03d      	beq.n	405b0e <dir_sdi+0x8a>
  405a92:	6803      	ldr	r3, [r0, #0]
  405a94:	699a      	ldr	r2, [r3, #24]
  405a96:	4291      	cmp	r1, r2
  405a98:	d301      	bcc.n	405a9e <dir_sdi+0x1a>
		return FR_INT_ERR;
  405a9a:	2002      	movs	r0, #2
  405a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  405a9e:	b961      	cbnz	r1, 405aba <dir_sdi+0x36>
  405aa0:	781a      	ldrb	r2, [r3, #0]
  405aa2:	2a03      	cmp	r2, #3
  405aa4:	d006      	beq.n	405ab4 <dir_sdi+0x30>
		dj->clust = clst;
  405aa6:	2200      	movs	r2, #0
  405aa8:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  405aaa:	891a      	ldrh	r2, [r3, #8]
  405aac:	42a2      	cmp	r2, r4
  405aae:	d821      	bhi.n	405af4 <dir_sdi+0x70>
			return FR_INT_ERR;
  405ab0:	2002      	movs	r0, #2
  405ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  405ab4:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  405ab6:	2900      	cmp	r1, #0
  405ab8:	d0f5      	beq.n	405aa6 <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  405aba:	789e      	ldrb	r6, [r3, #2]
  405abc:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  405abe:	42b4      	cmp	r4, r6
  405ac0:	d310      	bcc.n	405ae4 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  405ac2:	4f17      	ldr	r7, [pc, #92]	; (405b20 <dir_sdi+0x9c>)
  405ac4:	6828      	ldr	r0, [r5, #0]
  405ac6:	47b8      	blx	r7
  405ac8:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  405aca:	f1b0 3fff 	cmp.w	r0, #4294967295
  405ace:	d020      	beq.n	405b12 <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  405ad0:	2801      	cmp	r0, #1
  405ad2:	d920      	bls.n	405b16 <dir_sdi+0x92>
  405ad4:	682b      	ldr	r3, [r5, #0]
  405ad6:	699b      	ldr	r3, [r3, #24]
  405ad8:	4298      	cmp	r0, r3
  405ada:	d21e      	bcs.n	405b1a <dir_sdi+0x96>
			idx -= ic;
  405adc:	1ba4      	subs	r4, r4, r6
  405ade:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  405ae0:	42a6      	cmp	r6, r4
  405ae2:	d9ef      	bls.n	405ac4 <dir_sdi+0x40>
		dj->clust = clst;
  405ae4:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  405ae6:	6828      	ldr	r0, [r5, #0]
  405ae8:	4b0e      	ldr	r3, [pc, #56]	; (405b24 <dir_sdi+0xa0>)
  405aea:	4798      	blx	r3
  405aec:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  405af0:	6128      	str	r0, [r5, #16]
  405af2:	e003      	b.n	405afc <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  405af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405af6:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  405afa:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  405afc:	682b      	ldr	r3, [r5, #0]
  405afe:	3330      	adds	r3, #48	; 0x30
  405b00:	f004 040f 	and.w	r4, r4, #15
  405b04:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  405b08:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  405b0a:	2000      	movs	r0, #0
  405b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  405b0e:	2002      	movs	r0, #2
  405b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  405b12:	2001      	movs	r0, #1
  405b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  405b16:	2002      	movs	r0, #2
  405b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b1a:	2002      	movs	r0, #2
}
  405b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b1e:	bf00      	nop
  405b20:	0040599d 	.word	0x0040599d
  405b24:	00405375 	.word	0x00405375

00405b28 <put_fat>:
{
  405b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  405b2c:	2901      	cmp	r1, #1
  405b2e:	f240 808f 	bls.w	405c50 <put_fat+0x128>
  405b32:	6983      	ldr	r3, [r0, #24]
  405b34:	4299      	cmp	r1, r3
  405b36:	d301      	bcc.n	405b3c <put_fat+0x14>
		res = FR_INT_ERR;
  405b38:	2702      	movs	r7, #2
	return res;
  405b3a:	e08a      	b.n	405c52 <put_fat+0x12a>
  405b3c:	4615      	mov	r5, r2
  405b3e:	460c      	mov	r4, r1
  405b40:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  405b42:	7803      	ldrb	r3, [r0, #0]
  405b44:	2b02      	cmp	r3, #2
  405b46:	d04e      	beq.n	405be6 <put_fat+0xbe>
  405b48:	2b03      	cmp	r3, #3
  405b4a:	d05f      	beq.n	405c0c <put_fat+0xe4>
  405b4c:	2b01      	cmp	r3, #1
  405b4e:	d003      	beq.n	405b58 <put_fat+0x30>
			res = FR_INT_ERR;
  405b50:	2702      	movs	r7, #2
		fs->wflag = 1;
  405b52:	2301      	movs	r3, #1
  405b54:	7133      	strb	r3, [r6, #4]
  405b56:	e07c      	b.n	405c52 <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  405b58:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  405b5c:	6a01      	ldr	r1, [r0, #32]
  405b5e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  405b62:	4b3d      	ldr	r3, [pc, #244]	; (405c58 <put_fat+0x130>)
  405b64:	4798      	blx	r3
			if (res != FR_OK) break;
  405b66:	4607      	mov	r7, r0
  405b68:	2800      	cmp	r0, #0
  405b6a:	d1f2      	bne.n	405b52 <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  405b6c:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  405b70:	f014 0f01 	tst.w	r4, #1
  405b74:	d01c      	beq.n	405bb0 <put_fat+0x88>
  405b76:	4433      	add	r3, r6
  405b78:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  405b7c:	f002 020f 	and.w	r2, r2, #15
  405b80:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  405b84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  405b88:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  405b8c:	2301      	movs	r3, #1
  405b8e:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  405b90:	6a31      	ldr	r1, [r6, #32]
  405b92:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  405b96:	4630      	mov	r0, r6
  405b98:	4b2f      	ldr	r3, [pc, #188]	; (405c58 <put_fat+0x130>)
  405b9a:	4798      	blx	r3
			if (res != FR_OK) break;
  405b9c:	2800      	cmp	r0, #0
  405b9e:	d153      	bne.n	405c48 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  405ba0:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  405ba4:	f3c5 1207 	ubfx	r2, r5, #4, #8
  405ba8:	44b0      	add	r8, r6
  405baa:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  405bae:	e7d0      	b.n	405b52 <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  405bb0:	4433      	add	r3, r6
  405bb2:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  405bb6:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  405bba:	2301      	movs	r3, #1
  405bbc:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  405bbe:	6a31      	ldr	r1, [r6, #32]
  405bc0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  405bc4:	4630      	mov	r0, r6
  405bc6:	4b24      	ldr	r3, [pc, #144]	; (405c58 <put_fat+0x130>)
  405bc8:	4798      	blx	r3
			if (res != FR_OK) break;
  405bca:	2800      	cmp	r0, #0
  405bcc:	d13e      	bne.n	405c4c <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  405bce:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  405bd2:	eb06 0308 	add.w	r3, r6, r8
  405bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  405bda:	f023 030f 	bic.w	r3, r3, #15
  405bde:	f3c5 2203 	ubfx	r2, r5, #8, #4
  405be2:	431a      	orrs	r2, r3
  405be4:	e7e0      	b.n	405ba8 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  405be6:	6a01      	ldr	r1, [r0, #32]
  405be8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  405bec:	4b1a      	ldr	r3, [pc, #104]	; (405c58 <put_fat+0x130>)
  405bee:	4798      	blx	r3
			if (res != FR_OK) break;
  405bf0:	4607      	mov	r7, r0
  405bf2:	2800      	cmp	r0, #0
  405bf4:	d1ad      	bne.n	405b52 <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  405bf6:	0063      	lsls	r3, r4, #1
  405bf8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  405bfc:	4433      	add	r3, r6
  405bfe:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  405c02:	f3c5 2207 	ubfx	r2, r5, #8, #8
  405c06:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  405c0a:	e7a2      	b.n	405b52 <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  405c0c:	6a01      	ldr	r1, [r0, #32]
  405c0e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  405c12:	4b11      	ldr	r3, [pc, #68]	; (405c58 <put_fat+0x130>)
  405c14:	4798      	blx	r3
			if (res != FR_OK) break;
  405c16:	4607      	mov	r7, r0
  405c18:	2800      	cmp	r0, #0
  405c1a:	d19a      	bne.n	405b52 <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  405c1c:	00a1      	lsls	r1, r4, #2
  405c1e:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  405c22:	f101 0330 	add.w	r3, r1, #48	; 0x30
  405c26:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  405c28:	78da      	ldrb	r2, [r3, #3]
  405c2a:	0612      	lsls	r2, r2, #24
  405c2c:	4431      	add	r1, r6
  405c2e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  405c32:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  405c34:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  405c38:	f3c2 2107 	ubfx	r1, r2, #8, #8
  405c3c:	7059      	strb	r1, [r3, #1]
  405c3e:	0c11      	lsrs	r1, r2, #16
  405c40:	7099      	strb	r1, [r3, #2]
  405c42:	0e12      	lsrs	r2, r2, #24
  405c44:	70da      	strb	r2, [r3, #3]
			break;
  405c46:	e784      	b.n	405b52 <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  405c48:	4607      	mov	r7, r0
  405c4a:	e782      	b.n	405b52 <put_fat+0x2a>
  405c4c:	4607      	mov	r7, r0
  405c4e:	e780      	b.n	405b52 <put_fat+0x2a>
		res = FR_INT_ERR;
  405c50:	2702      	movs	r7, #2
}
  405c52:	4638      	mov	r0, r7
  405c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c58:	0040590d 	.word	0x0040590d

00405c5c <create_chain>:
{
  405c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c60:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  405c62:	4688      	mov	r8, r1
  405c64:	b941      	cbnz	r1, 405c78 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  405c66:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  405c68:	b186      	cbz	r6, 405c8c <create_chain+0x30>
  405c6a:	6983      	ldr	r3, [r0, #24]
  405c6c:	429e      	cmp	r6, r3
  405c6e:	bf28      	it	cs
  405c70:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  405c72:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  405c74:	4f27      	ldr	r7, [pc, #156]	; (405d14 <create_chain+0xb8>)
  405c76:	e017      	b.n	405ca8 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  405c78:	4b26      	ldr	r3, [pc, #152]	; (405d14 <create_chain+0xb8>)
  405c7a:	4798      	blx	r3
  405c7c:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  405c7e:	2801      	cmp	r0, #1
  405c80:	d93e      	bls.n	405d00 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  405c82:	69aa      	ldr	r2, [r5, #24]
  405c84:	4290      	cmp	r0, r2
  405c86:	d340      	bcc.n	405d0a <create_chain+0xae>
		scl = clst;
  405c88:	4646      	mov	r6, r8
  405c8a:	e7f2      	b.n	405c72 <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  405c8c:	2601      	movs	r6, #1
  405c8e:	e7f0      	b.n	405c72 <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  405c90:	4621      	mov	r1, r4
  405c92:	4628      	mov	r0, r5
  405c94:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  405c96:	4603      	mov	r3, r0
  405c98:	b170      	cbz	r0, 405cb8 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  405c9a:	f1b0 3fff 	cmp.w	r0, #4294967295
  405c9e:	d034      	beq.n	405d0a <create_chain+0xae>
  405ca0:	2801      	cmp	r0, #1
  405ca2:	d032      	beq.n	405d0a <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  405ca4:	42b4      	cmp	r4, r6
  405ca6:	d02f      	beq.n	405d08 <create_chain+0xac>
		ncl++;							/* Next cluster */
  405ca8:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  405caa:	69ab      	ldr	r3, [r5, #24]
  405cac:	429c      	cmp	r4, r3
  405cae:	d3ef      	bcc.n	405c90 <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  405cb0:	2e01      	cmp	r6, #1
  405cb2:	d927      	bls.n	405d04 <create_chain+0xa8>
			ncl = 2;
  405cb4:	2402      	movs	r4, #2
  405cb6:	e7eb      	b.n	405c90 <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  405cb8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  405cbc:	4621      	mov	r1, r4
  405cbe:	4628      	mov	r0, r5
  405cc0:	4b15      	ldr	r3, [pc, #84]	; (405d18 <create_chain+0xbc>)
  405cc2:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  405cc4:	4603      	mov	r3, r0
  405cc6:	b910      	cbnz	r0, 405cce <create_chain+0x72>
  405cc8:	f1b8 0f00 	cmp.w	r8, #0
  405ccc:	d10b      	bne.n	405ce6 <create_chain+0x8a>
	if (res == FR_OK) {
  405cce:	b98b      	cbnz	r3, 405cf4 <create_chain+0x98>
		fs->last_clust = ncl;			/* Update FSINFO */
  405cd0:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  405cd2:	692b      	ldr	r3, [r5, #16]
  405cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
  405cd8:	d01a      	beq.n	405d10 <create_chain+0xb4>
			fs->free_clust--;
  405cda:	3b01      	subs	r3, #1
  405cdc:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  405cde:	2301      	movs	r3, #1
  405ce0:	716b      	strb	r3, [r5, #5]
  405ce2:	4623      	mov	r3, r4
  405ce4:	e011      	b.n	405d0a <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  405ce6:	4622      	mov	r2, r4
  405ce8:	4641      	mov	r1, r8
  405cea:	4628      	mov	r0, r5
  405cec:	4b0a      	ldr	r3, [pc, #40]	; (405d18 <create_chain+0xbc>)
  405cee:	4798      	blx	r3
  405cf0:	4603      	mov	r3, r0
  405cf2:	e7ec      	b.n	405cce <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  405cf4:	2b01      	cmp	r3, #1
  405cf6:	bf0c      	ite	eq
  405cf8:	f04f 33ff 	moveq.w	r3, #4294967295
  405cfc:	2301      	movne	r3, #1
  405cfe:	e004      	b.n	405d0a <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  405d00:	2301      	movs	r3, #1
  405d02:	e002      	b.n	405d0a <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  405d04:	2300      	movs	r3, #0
  405d06:	e000      	b.n	405d0a <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  405d08:	2300      	movs	r3, #0
}
  405d0a:	4618      	mov	r0, r3
  405d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405d10:	4623      	mov	r3, r4
  405d12:	e7fa      	b.n	405d0a <create_chain+0xae>
  405d14:	0040599d 	.word	0x0040599d
  405d18:	00405b29 	.word	0x00405b29

00405d1c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  405d1c:	2901      	cmp	r1, #1
  405d1e:	d92e      	bls.n	405d7e <remove_chain+0x62>
{
  405d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405d24:	4604      	mov	r4, r0
  405d26:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  405d28:	6983      	ldr	r3, [r0, #24]
  405d2a:	4299      	cmp	r1, r3
  405d2c:	d303      	bcc.n	405d36 <remove_chain+0x1a>
		res = FR_INT_ERR;
  405d2e:	2202      	movs	r2, #2
}
  405d30:	4610      	mov	r0, r2
  405d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  405d36:	4f16      	ldr	r7, [pc, #88]	; (405d90 <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  405d38:	f04f 0900 	mov.w	r9, #0
  405d3c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 405d94 <remove_chain+0x78>
  405d40:	e003      	b.n	405d4a <remove_chain+0x2e>
  405d42:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  405d44:	69a3      	ldr	r3, [r4, #24]
  405d46:	42ab      	cmp	r3, r5
  405d48:	d9f2      	bls.n	405d30 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  405d4a:	4631      	mov	r1, r6
  405d4c:	4620      	mov	r0, r4
  405d4e:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  405d50:	4605      	mov	r5, r0
  405d52:	b1b8      	cbz	r0, 405d84 <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  405d54:	2801      	cmp	r0, #1
  405d56:	d017      	beq.n	405d88 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  405d58:	f1b0 3fff 	cmp.w	r0, #4294967295
  405d5c:	d016      	beq.n	405d8c <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  405d5e:	464a      	mov	r2, r9
  405d60:	4631      	mov	r1, r6
  405d62:	4620      	mov	r0, r4
  405d64:	47c0      	blx	r8
			if (res != FR_OK) break;
  405d66:	4602      	mov	r2, r0
  405d68:	2800      	cmp	r0, #0
  405d6a:	d1e1      	bne.n	405d30 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  405d6c:	6923      	ldr	r3, [r4, #16]
  405d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
  405d72:	d0e6      	beq.n	405d42 <remove_chain+0x26>
				fs->free_clust++;
  405d74:	3301      	adds	r3, #1
  405d76:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  405d78:	2301      	movs	r3, #1
  405d7a:	7163      	strb	r3, [r4, #5]
  405d7c:	e7e1      	b.n	405d42 <remove_chain+0x26>
		res = FR_INT_ERR;
  405d7e:	2202      	movs	r2, #2
}
  405d80:	4610      	mov	r0, r2
  405d82:	4770      	bx	lr
  405d84:	2200      	movs	r2, #0
  405d86:	e7d3      	b.n	405d30 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  405d88:	2202      	movs	r2, #2
  405d8a:	e7d1      	b.n	405d30 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  405d8c:	2201      	movs	r2, #1
  405d8e:	e7cf      	b.n	405d30 <remove_chain+0x14>
  405d90:	0040599d 	.word	0x0040599d
  405d94:	00405b29 	.word	0x00405b29

00405d98 <sync>:
{
  405d98:	b538      	push	{r3, r4, r5, lr}
  405d9a:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  405d9c:	2100      	movs	r1, #0
  405d9e:	4b2e      	ldr	r3, [pc, #184]	; (405e58 <sync+0xc0>)
  405da0:	4798      	blx	r3
	if (res == FR_OK) {
  405da2:	4603      	mov	r3, r0
  405da4:	b950      	cbnz	r0, 405dbc <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  405da6:	7823      	ldrb	r3, [r4, #0]
  405da8:	2b03      	cmp	r3, #3
  405daa:	d009      	beq.n	405dc0 <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  405dac:	2200      	movs	r2, #0
  405dae:	4611      	mov	r1, r2
  405db0:	7860      	ldrb	r0, [r4, #1]
  405db2:	4b2a      	ldr	r3, [pc, #168]	; (405e5c <sync+0xc4>)
  405db4:	4798      	blx	r3
	res = move_window(fs, 0);
  405db6:	1c03      	adds	r3, r0, #0
  405db8:	bf18      	it	ne
  405dba:	2301      	movne	r3, #1
}
  405dbc:	4618      	mov	r0, r3
  405dbe:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  405dc0:	7963      	ldrb	r3, [r4, #5]
  405dc2:	2b00      	cmp	r3, #0
  405dc4:	d0f2      	beq.n	405dac <sync+0x14>
			fs->winsect = 0;
  405dc6:	2300      	movs	r3, #0
  405dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  405dca:	f104 0130 	add.w	r1, r4, #48	; 0x30
  405dce:	f504 700c 	add.w	r0, r4, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  405dd2:	460b      	mov	r3, r1
		*d++ = (BYTE)val;
  405dd4:	2200      	movs	r2, #0
  405dd6:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  405dda:	4283      	cmp	r3, r0
  405ddc:	d1fb      	bne.n	405dd6 <sync+0x3e>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  405dde:	2355      	movs	r3, #85	; 0x55
  405de0:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  405de4:	23aa      	movs	r3, #170	; 0xaa
  405de6:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  405dea:	2352      	movs	r3, #82	; 0x52
  405dec:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  405df0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  405df4:	2361      	movs	r3, #97	; 0x61
  405df6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  405dfa:	2241      	movs	r2, #65	; 0x41
  405dfc:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  405e00:	2072      	movs	r0, #114	; 0x72
  405e02:	f884 0214 	strb.w	r0, [r4, #532]	; 0x214
  405e06:	f884 0215 	strb.w	r0, [r4, #533]	; 0x215
  405e0a:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  405e0e:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  405e12:	6923      	ldr	r3, [r4, #16]
  405e14:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  405e18:	f3c3 2207 	ubfx	r2, r3, #8, #8
  405e1c:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  405e20:	0c1a      	lsrs	r2, r3, #16
  405e22:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  405e26:	0e1b      	lsrs	r3, r3, #24
  405e28:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  405e2c:	68e3      	ldr	r3, [r4, #12]
  405e2e:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  405e32:	f3c3 2207 	ubfx	r2, r3, #8, #8
  405e36:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  405e3a:	0c1a      	lsrs	r2, r3, #16
  405e3c:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  405e40:	0e1b      	lsrs	r3, r3, #24
  405e42:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  405e46:	2301      	movs	r3, #1
  405e48:	6962      	ldr	r2, [r4, #20]
  405e4a:	7860      	ldrb	r0, [r4, #1]
  405e4c:	4d04      	ldr	r5, [pc, #16]	; (405e60 <sync+0xc8>)
  405e4e:	47a8      	blx	r5
			fs->fsi_flag = 0;
  405e50:	2300      	movs	r3, #0
  405e52:	7163      	strb	r3, [r4, #5]
  405e54:	e7aa      	b.n	405dac <sync+0x14>
  405e56:	bf00      	nop
  405e58:	0040590d 	.word	0x0040590d
  405e5c:	00405299 	.word	0x00405299
  405e60:	00405229 	.word	0x00405229

00405e64 <dir_next>:
{
  405e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  405e68:	88c4      	ldrh	r4, [r0, #6]
  405e6a:	3401      	adds	r4, #1
  405e6c:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  405e6e:	b914      	cbnz	r4, 405e76 <dir_next+0x12>
		return FR_NO_FILE;
  405e70:	2004      	movs	r0, #4
  405e72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  405e76:	6903      	ldr	r3, [r0, #16]
  405e78:	b913      	cbnz	r3, 405e80 <dir_next+0x1c>
		return FR_NO_FILE;
  405e7a:	2004      	movs	r0, #4
  405e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e80:	460e      	mov	r6, r1
  405e82:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  405e84:	f014 070f 	ands.w	r7, r4, #15
  405e88:	d110      	bne.n	405eac <dir_next+0x48>
		dj->sect++;					/* Next sector */
  405e8a:	3301      	adds	r3, #1
  405e8c:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  405e8e:	68c1      	ldr	r1, [r0, #12]
  405e90:	b931      	cbnz	r1, 405ea0 <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  405e92:	6803      	ldr	r3, [r0, #0]
  405e94:	891b      	ldrh	r3, [r3, #8]
  405e96:	42a3      	cmp	r3, r4
  405e98:	d808      	bhi.n	405eac <dir_next+0x48>
				return FR_NO_FILE;
  405e9a:	2004      	movs	r0, #4
  405e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  405ea0:	6800      	ldr	r0, [r0, #0]
  405ea2:	7883      	ldrb	r3, [r0, #2]
  405ea4:	3b01      	subs	r3, #1
  405ea6:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  405eaa:	d008      	beq.n	405ebe <dir_next+0x5a>
	dj->index = i;
  405eac:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  405eae:	682b      	ldr	r3, [r5, #0]
  405eb0:	3330      	adds	r3, #48	; 0x30
  405eb2:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  405eb6:	616b      	str	r3, [r5, #20]
	return FR_OK;
  405eb8:	2000      	movs	r0, #0
  405eba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  405ebe:	4b33      	ldr	r3, [pc, #204]	; (405f8c <dir_next+0x128>)
  405ec0:	4798      	blx	r3
  405ec2:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  405ec4:	2801      	cmp	r0, #1
  405ec6:	d94f      	bls.n	405f68 <dir_next+0x104>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  405ec8:	f1b0 3fff 	cmp.w	r0, #4294967295
  405ecc:	d04f      	beq.n	405f6e <dir_next+0x10a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  405ece:	6828      	ldr	r0, [r5, #0]
  405ed0:	6983      	ldr	r3, [r0, #24]
  405ed2:	4598      	cmp	r8, r3
  405ed4:	d340      	bcc.n	405f58 <dir_next+0xf4>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  405ed6:	b916      	cbnz	r6, 405ede <dir_next+0x7a>
  405ed8:	2004      	movs	r0, #4
  405eda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  405ede:	68e9      	ldr	r1, [r5, #12]
  405ee0:	4b2b      	ldr	r3, [pc, #172]	; (405f90 <dir_next+0x12c>)
  405ee2:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  405ee4:	4680      	mov	r8, r0
  405ee6:	b910      	cbnz	r0, 405eee <dir_next+0x8a>
  405ee8:	2007      	movs	r0, #7
  405eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  405eee:	2801      	cmp	r0, #1
  405ef0:	d040      	beq.n	405f74 <dir_next+0x110>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  405ef2:	f1b0 3fff 	cmp.w	r0, #4294967295
  405ef6:	d040      	beq.n	405f7a <dir_next+0x116>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  405ef8:	2100      	movs	r1, #0
  405efa:	6828      	ldr	r0, [r5, #0]
  405efc:	4b25      	ldr	r3, [pc, #148]	; (405f94 <dir_next+0x130>)
  405efe:	4798      	blx	r3
  405f00:	2800      	cmp	r0, #0
  405f02:	d13d      	bne.n	405f80 <dir_next+0x11c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  405f04:	682b      	ldr	r3, [r5, #0]
  405f06:	f503 710c 	add.w	r1, r3, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  405f0a:	3330      	adds	r3, #48	; 0x30
		*d++ = (BYTE)val;
  405f0c:	2200      	movs	r2, #0
  405f0e:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  405f12:	428b      	cmp	r3, r1
  405f14:	d1fb      	bne.n	405f0e <dir_next+0xaa>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  405f16:	682e      	ldr	r6, [r5, #0]
  405f18:	4641      	mov	r1, r8
  405f1a:	4630      	mov	r0, r6
  405f1c:	4b1e      	ldr	r3, [pc, #120]	; (405f98 <dir_next+0x134>)
  405f1e:	4798      	blx	r3
  405f20:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  405f22:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  405f24:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  405f28:	46b2      	mov	sl, r6
  405f2a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 405f94 <dir_next+0x130>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  405f2e:	682b      	ldr	r3, [r5, #0]
  405f30:	7899      	ldrb	r1, [r3, #2]
  405f32:	b2f2      	uxtb	r2, r6
  405f34:	4291      	cmp	r1, r2
  405f36:	d90b      	bls.n	405f50 <dir_next+0xec>
						dj->fs->wflag = 1;
  405f38:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  405f3c:	4651      	mov	r1, sl
  405f3e:	6828      	ldr	r0, [r5, #0]
  405f40:	47c8      	blx	r9
  405f42:	3601      	adds	r6, #1
  405f44:	b9f8      	cbnz	r0, 405f86 <dir_next+0x122>
						dj->fs->winsect++;
  405f46:	682a      	ldr	r2, [r5, #0]
  405f48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  405f4a:	3301      	adds	r3, #1
  405f4c:	62d3      	str	r3, [r2, #44]	; 0x2c
  405f4e:	e7ee      	b.n	405f2e <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
  405f50:	4616      	mov	r6, r2
  405f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405f54:	1b96      	subs	r6, r2, r6
  405f56:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  405f58:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  405f5c:	4641      	mov	r1, r8
  405f5e:	6828      	ldr	r0, [r5, #0]
  405f60:	4b0d      	ldr	r3, [pc, #52]	; (405f98 <dir_next+0x134>)
  405f62:	4798      	blx	r3
  405f64:	6128      	str	r0, [r5, #16]
  405f66:	e7a1      	b.n	405eac <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  405f68:	2002      	movs	r0, #2
  405f6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  405f6e:	2001      	movs	r0, #1
  405f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  405f74:	2002      	movs	r0, #2
  405f76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  405f7a:	2001      	movs	r0, #1
  405f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  405f80:	2001      	movs	r0, #1
  405f82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  405f86:	2001      	movs	r0, #1
}
  405f88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f8c:	0040599d 	.word	0x0040599d
  405f90:	00405c5d 	.word	0x00405c5d
  405f94:	0040590d 	.word	0x0040590d
  405f98:	00405375 	.word	0x00405375

00405f9c <dir_find>:
{
  405f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405fa0:	b085      	sub	sp, #20
  405fa2:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  405fa4:	2100      	movs	r1, #0
  405fa6:	4b61      	ldr	r3, [pc, #388]	; (40612c <dir_find+0x190>)
  405fa8:	4798      	blx	r3
	if (res != FR_OK) return res;
  405faa:	4680      	mov	r8, r0
  405fac:	bb08      	cbnz	r0, 405ff2 <dir_find+0x56>
  405fae:	f04f 0bff 	mov.w	fp, #255	; 0xff
  405fb2:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  405fb4:	4f5e      	ldr	r7, [pc, #376]	; (406130 <dir_find+0x194>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  405fb6:	46da      	mov	sl, fp
  405fb8:	e094      	b.n	4060e4 <dir_find+0x148>
			if (a == AM_LFN) {			/* An LFN entry is found */
  405fba:	2a0f      	cmp	r2, #15
  405fbc:	d01d      	beq.n	405ffa <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  405fbe:	f1b9 0f00 	cmp.w	r9, #0
  405fc2:	d104      	bne.n	405fce <dir_find+0x32>
  405fc4:	4620      	mov	r0, r4
  405fc6:	4b5b      	ldr	r3, [pc, #364]	; (406134 <dir_find+0x198>)
  405fc8:	4798      	blx	r3
  405fca:	4582      	cmp	sl, r0
  405fcc:	d011      	beq.n	405ff2 <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  405fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
  405fd2:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  405fd4:	69ab      	ldr	r3, [r5, #24]
  405fd6:	7ada      	ldrb	r2, [r3, #11]
  405fd8:	f012 0f01 	tst.w	r2, #1
  405fdc:	d179      	bne.n	4060d2 <dir_find+0x136>
  405fde:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  405fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
  405fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
  405fea:	4291      	cmp	r1, r2
  405fec:	d16b      	bne.n	4060c6 <dir_find+0x12a>
  405fee:	4284      	cmp	r4, r0
  405ff0:	d1f7      	bne.n	405fe2 <dir_find+0x46>
}
  405ff2:	4640      	mov	r0, r8
  405ff4:	b005      	add	sp, #20
  405ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  405ffa:	f8d5 801c 	ldr.w	r8, [r5, #28]
  405ffe:	f1b8 0f00 	cmp.w	r8, #0
  406002:	d068      	beq.n	4060d6 <dir_find+0x13a>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  406004:	f016 0f40 	tst.w	r6, #64	; 0x40
  406008:	d00c      	beq.n	406024 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  40600a:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  40600e:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  406012:	88eb      	ldrh	r3, [r5, #6]
  406014:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  406016:	f894 b00d 	ldrb.w	fp, [r4, #13]
  40601a:	45d3      	cmp	fp, sl
  40601c:	d007      	beq.n	40602e <dir_find+0x92>
  40601e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  406022:	e058      	b.n	4060d6 <dir_find+0x13a>
  406024:	45b1      	cmp	r9, r6
  406026:	d0f6      	beq.n	406016 <dir_find+0x7a>
  406028:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40602c:	e053      	b.n	4060d6 <dir_find+0x13a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  40602e:	f894 a000 	ldrb.w	sl, [r4]
  406032:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  406036:	f10a 3aff 	add.w	sl, sl, #4294967295
  40603a:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  40603e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  406042:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 406140 <dir_find+0x1a4>
  406046:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  40604a:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  40604c:	9603      	str	r6, [sp, #12]
  40604e:	f8cd b004 	str.w	fp, [sp, #4]
  406052:	461e      	mov	r6, r3
  406054:	9502      	str	r5, [sp, #8]
  406056:	e00f      	b.n	406078 <dir_find+0xdc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  406058:	4618      	mov	r0, r3
  40605a:	4b37      	ldr	r3, [pc, #220]	; (406138 <dir_find+0x19c>)
  40605c:	4798      	blx	r3
  40605e:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  406060:	2efe      	cmp	r6, #254	; 0xfe
  406062:	d85a      	bhi.n	40611a <dir_find+0x17e>
  406064:	1c75      	adds	r5, r6, #1
  406066:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  40606a:	4b33      	ldr	r3, [pc, #204]	; (406138 <dir_find+0x19c>)
  40606c:	4798      	blx	r3
  40606e:	4583      	cmp	fp, r0
  406070:	d157      	bne.n	406122 <dir_find+0x186>
  406072:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  406074:	45d1      	cmp	r9, sl
  406076:	d013      	beq.n	4060a0 <dir_find+0x104>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  406078:	f819 2b01 	ldrb.w	r2, [r9], #1
  40607c:	18a3      	adds	r3, r4, r2
  40607e:	7859      	ldrb	r1, [r3, #1]
  406080:	5ca3      	ldrb	r3, [r4, r2]
  406082:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  406086:	2800      	cmp	r0, #0
  406088:	d1e6      	bne.n	406058 <dir_find+0xbc>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  40608a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40608e:	4293      	cmp	r3, r2
  406090:	d0f0      	beq.n	406074 <dir_find+0xd8>
  406092:	f8dd b004 	ldr.w	fp, [sp, #4]
  406096:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  406098:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40609a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40609e:	e01a      	b.n	4060d6 <dir_find+0x13a>
  4060a0:	f8dd b004 	ldr.w	fp, [sp, #4]
  4060a4:	4632      	mov	r2, r6
  4060a6:	9e03      	ldr	r6, [sp, #12]
  4060a8:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  4060aa:	7823      	ldrb	r3, [r4, #0]
  4060ac:	f013 0f40 	tst.w	r3, #64	; 0x40
  4060b0:	d004      	beq.n	4060bc <dir_find+0x120>
  4060b2:	b118      	cbz	r0, 4060bc <dir_find+0x120>
  4060b4:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  4060b8:	2b00      	cmp	r3, #0
  4060ba:	d1ed      	bne.n	406098 <dir_find+0xfc>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4060bc:	3e01      	subs	r6, #1
  4060be:	fa5f f986 	uxtb.w	r9, r6
  4060c2:	46da      	mov	sl, fp
  4060c4:	e007      	b.n	4060d6 <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4060c6:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4060ca:	e004      	b.n	4060d6 <dir_find+0x13a>
			ord = 0xFF;
  4060cc:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4060d0:	e001      	b.n	4060d6 <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4060d2:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  4060d6:	2100      	movs	r1, #0
  4060d8:	4628      	mov	r0, r5
  4060da:	4b18      	ldr	r3, [pc, #96]	; (40613c <dir_find+0x1a0>)
  4060dc:	4798      	blx	r3
	} while (res == FR_OK);
  4060de:	4680      	mov	r8, r0
  4060e0:	2800      	cmp	r0, #0
  4060e2:	d186      	bne.n	405ff2 <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  4060e4:	6929      	ldr	r1, [r5, #16]
  4060e6:	6828      	ldr	r0, [r5, #0]
  4060e8:	47b8      	blx	r7
		if (res != FR_OK) break;
  4060ea:	4680      	mov	r8, r0
  4060ec:	2800      	cmp	r0, #0
  4060ee:	d180      	bne.n	405ff2 <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  4060f0:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  4060f2:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4060f4:	b176      	cbz	r6, 406114 <dir_find+0x178>
		a = dir[DIR_Attr] & AM_MASK;
  4060f6:	7ae3      	ldrb	r3, [r4, #11]
  4060f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  4060fc:	2ee5      	cmp	r6, #229	; 0xe5
  4060fe:	d0e5      	beq.n	4060cc <dir_find+0x130>
  406100:	f013 0f08 	tst.w	r3, #8
  406104:	f43f af59 	beq.w	405fba <dir_find+0x1e>
  406108:	2a0f      	cmp	r2, #15
  40610a:	f43f af56 	beq.w	405fba <dir_find+0x1e>
			ord = 0xFF;
  40610e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  406112:	e7e0      	b.n	4060d6 <dir_find+0x13a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  406114:	f04f 0804 	mov.w	r8, #4
  406118:	e76b      	b.n	405ff2 <dir_find+0x56>
  40611a:	f8dd b004 	ldr.w	fp, [sp, #4]
  40611e:	9d02      	ldr	r5, [sp, #8]
  406120:	e7ba      	b.n	406098 <dir_find+0xfc>
  406122:	f8dd b004 	ldr.w	fp, [sp, #4]
  406126:	9d02      	ldr	r5, [sp, #8]
  406128:	e7b6      	b.n	406098 <dir_find+0xfc>
  40612a:	bf00      	nop
  40612c:	00405a85 	.word	0x00405a85
  406130:	0040590d 	.word	0x0040590d
  406134:	0040538d 	.word	0x0040538d
  406138:	00407089 	.word	0x00407089
  40613c:	00405e65 	.word	0x00405e65
  406140:	0040fb1c 	.word	0x0040fb1c

00406144 <follow_path>:
{
  406144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406148:	b083      	sub	sp, #12
  40614a:	4682      	mov	sl, r0
  40614c:	460f      	mov	r7, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  40614e:	780b      	ldrb	r3, [r1, #0]
  406150:	2b2f      	cmp	r3, #47	; 0x2f
  406152:	d00a      	beq.n	40616a <follow_path+0x26>
  406154:	2b5c      	cmp	r3, #92	; 0x5c
  406156:	d008      	beq.n	40616a <follow_path+0x26>
	dj->sclust = 0;						/* Start from the root dir */
  406158:	2300      	movs	r3, #0
  40615a:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  40615e:	783b      	ldrb	r3, [r7, #0]
  406160:	2b1f      	cmp	r3, #31
  406162:	d904      	bls.n	40616e <follow_path+0x2a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  406164:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 406464 <follow_path+0x320>
  406168:	e133      	b.n	4063d2 <follow_path+0x28e>
		path++;
  40616a:	3701      	adds	r7, #1
  40616c:	e7f4      	b.n	406158 <follow_path+0x14>
		res = dir_sdi(dj, 0);
  40616e:	2100      	movs	r1, #0
  406170:	4650      	mov	r0, sl
  406172:	4bb7      	ldr	r3, [pc, #732]	; (406450 <follow_path+0x30c>)
  406174:	4798      	blx	r3
  406176:	4603      	mov	r3, r0
		dj->dir = 0;
  406178:	2200      	movs	r2, #0
  40617a:	f8ca 2014 	str.w	r2, [sl, #20]
  40617e:	e15d      	b.n	40643c <follow_path+0x2f8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  406180:	2b00      	cmp	r3, #0
  406182:	f040 8155 	bne.w	406430 <follow_path+0x2ec>
		lfn[di++] = w;					/* Store the Unicode char */
  406186:	f826 2f02 	strh.w	r2, [r6, #2]!
		w = p[si++];					/* Get a character */
  40618a:	1c63      	adds	r3, r4, #1
  40618c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  406190:	282f      	cmp	r0, #47	; 0x2f
  406192:	bf18      	it	ne
  406194:	281f      	cmpne	r0, #31
  406196:	d91b      	bls.n	4061d0 <follow_path+0x8c>
  406198:	285c      	cmp	r0, #92	; 0x5c
  40619a:	d019      	beq.n	4061d0 <follow_path+0x8c>
		if (di >= _MAX_LFN)				/* Reject too long name */
  40619c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4061a0:	f000 8146 	beq.w	406430 <follow_path+0x2ec>
		w = p[si++];					/* Get a character */
  4061a4:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4061a6:	4641      	mov	r1, r8
  4061a8:	47c8      	blx	r9
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  4061aa:	4602      	mov	r2, r0
  4061ac:	2800      	cmp	r0, #0
  4061ae:	f000 813f 	beq.w	406430 <follow_path+0x2ec>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  4061b2:	287f      	cmp	r0, #127	; 0x7f
  4061b4:	d8e7      	bhi.n	406186 <follow_path+0x42>
	while (*str && *str != chr) str++;
  4061b6:	2822      	cmp	r0, #34	; 0x22
  4061b8:	f000 813f 	beq.w	40643a <follow_path+0x2f6>
  4061bc:	232a      	movs	r3, #42	; 0x2a
  4061be:	49a5      	ldr	r1, [pc, #660]	; (406454 <follow_path+0x310>)
  4061c0:	b298      	uxth	r0, r3
  4061c2:	4290      	cmp	r0, r2
  4061c4:	d0dc      	beq.n	406180 <follow_path+0x3c>
  4061c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4061ca:	2b00      	cmp	r3, #0
  4061cc:	d1f8      	bne.n	4061c0 <follow_path+0x7c>
  4061ce:	e7da      	b.n	406186 <follow_path+0x42>
	*path = &p[si];						/* Return pointer to the next segment */
  4061d0:	441f      	add	r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  4061d2:	2820      	cmp	r0, #32
  4061d4:	bf34      	ite	cc
  4061d6:	2504      	movcc	r5, #4
  4061d8:	2500      	movcs	r5, #0
	while (di) {						/* Strip trailing spaces and dots */
  4061da:	2c00      	cmp	r4, #0
  4061dc:	f000 812d 	beq.w	40643a <follow_path+0x2f6>
		w = lfn[di-1];
  4061e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4061e4:	4423      	add	r3, r4
  4061e6:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
  4061ea:	f83b 3013 	ldrh.w	r3, [fp, r3, lsl #1]
		if (w != ' ' && w != '.') break;
  4061ee:	2b20      	cmp	r3, #32
  4061f0:	d001      	beq.n	4061f6 <follow_path+0xb2>
  4061f2:	2b2e      	cmp	r3, #46	; 0x2e
  4061f4:	d108      	bne.n	406208 <follow_path+0xc4>
	while (di) {						/* Strip trailing spaces and dots */
  4061f6:	3c01      	subs	r4, #1
  4061f8:	f000 811f 	beq.w	40643a <follow_path+0x2f6>
		w = lfn[di-1];
  4061fc:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  406200:	2b20      	cmp	r3, #32
  406202:	d0f8      	beq.n	4061f6 <follow_path+0xb2>
  406204:	2b2e      	cmp	r3, #46	; 0x2e
  406206:	d0f6      	beq.n	4061f6 <follow_path+0xb2>
	lfn[di] = 0;						/* LFN is created */
  406208:	0060      	lsls	r0, r4, #1
  40620a:	2300      	movs	r3, #0
  40620c:	f82b 3014 	strh.w	r3, [fp, r4, lsl #1]
	mem_set(dj->fn, ' ', 11);
  406210:	f8da 3018 	ldr.w	r3, [sl, #24]
  406214:	f103 010b 	add.w	r1, r3, #11
		*d++ = (BYTE)val;
  406218:	2220      	movs	r2, #32
  40621a:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  40621e:	4299      	cmp	r1, r3
  406220:	d1fb      	bne.n	40621a <follow_path+0xd6>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  406222:	f8bb 3000 	ldrh.w	r3, [fp]
  406226:	2b20      	cmp	r3, #32
  406228:	d001      	beq.n	40622e <follow_path+0xea>
  40622a:	2b2e      	cmp	r3, #46	; 0x2e
  40622c:	d11f      	bne.n	40626e <follow_path+0x12a>
  40622e:	4659      	mov	r1, fp
  406230:	2300      	movs	r3, #0
  406232:	3301      	adds	r3, #1
  406234:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  406238:	2a20      	cmp	r2, #32
  40623a:	d0fa      	beq.n	406232 <follow_path+0xee>
  40623c:	2a2e      	cmp	r2, #46	; 0x2e
  40623e:	d0f8      	beq.n	406232 <follow_path+0xee>
	if (si) cf |= NS_LOSS | NS_LFN;
  406240:	b10b      	cbz	r3, 406246 <follow_path+0x102>
  406242:	f045 0503 	orr.w	r5, r5, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  406246:	3802      	subs	r0, #2
  406248:	eb0b 0200 	add.w	r2, fp, r0
  40624c:	f83b 1000 	ldrh.w	r1, [fp, r0]
  406250:	292e      	cmp	r1, #46	; 0x2e
  406252:	d005      	beq.n	406260 <follow_path+0x11c>
  406254:	3c01      	subs	r4, #1
  406256:	d003      	beq.n	406260 <follow_path+0x11c>
  406258:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  40625c:	292e      	cmp	r1, #46	; 0x2e
  40625e:	d1f9      	bne.n	406254 <follow_path+0x110>
		dj->fn[i++] = (BYTE)w;
  406260:	2208      	movs	r2, #8
  406262:	9200      	str	r2, [sp, #0]
  406264:	f04f 0800 	mov.w	r8, #0
  406268:	f8cd 8004 	str.w	r8, [sp, #4]
  40626c:	e004      	b.n	406278 <follow_path+0x134>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  40626e:	2300      	movs	r3, #0
  406270:	e7e9      	b.n	406246 <follow_path+0x102>
			cf |= NS_LOSS | NS_LFN; continue;
  406272:	f045 0503 	orr.w	r5, r5, #3
		w = lfn[si++];					/* Get an LFN char */
  406276:	4633      	mov	r3, r6
  406278:	1c5e      	adds	r6, r3, #1
  40627a:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  40627e:	2800      	cmp	r0, #0
  406280:	d066      	beq.n	406350 <follow_path+0x20c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  406282:	2820      	cmp	r0, #32
  406284:	d0f5      	beq.n	406272 <follow_path+0x12e>
  406286:	282e      	cmp	r0, #46	; 0x2e
  406288:	d101      	bne.n	40628e <follow_path+0x14a>
  40628a:	42a6      	cmp	r6, r4
  40628c:	d1f1      	bne.n	406272 <follow_path+0x12e>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  40628e:	9b00      	ldr	r3, [sp, #0]
  406290:	4598      	cmp	r8, r3
  406292:	d218      	bcs.n	4062c6 <follow_path+0x182>
  406294:	42a6      	cmp	r6, r4
  406296:	d016      	beq.n	4062c6 <follow_path+0x182>
		if (w >= 0x80) {				/* Non ASCII char */
  406298:	287f      	cmp	r0, #127	; 0x7f
  40629a:	d831      	bhi.n	406300 <follow_path+0x1bc>
	while (*str && *str != chr) str++;
  40629c:	282b      	cmp	r0, #43	; 0x2b
  40629e:	d03d      	beq.n	40631c <follow_path+0x1d8>
  4062a0:	232c      	movs	r3, #44	; 0x2c
  4062a2:	496d      	ldr	r1, [pc, #436]	; (406458 <follow_path+0x314>)
  4062a4:	b29a      	uxth	r2, r3
  4062a6:	4282      	cmp	r2, r0
  4062a8:	d043      	beq.n	406332 <follow_path+0x1ee>
  4062aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4062ae:	2b00      	cmp	r3, #0
  4062b0:	d1f8      	bne.n	4062a4 <follow_path+0x160>
				if (IsUpper(w)) {		/* ASCII large capital */
  4062b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  4062b6:	b29b      	uxth	r3, r3
  4062b8:	2b19      	cmp	r3, #25
  4062ba:	d83d      	bhi.n	406338 <follow_path+0x1f4>
					b |= 2;
  4062bc:	9b01      	ldr	r3, [sp, #4]
  4062be:	f043 0302 	orr.w	r3, r3, #2
  4062c2:	9301      	str	r3, [sp, #4]
  4062c4:	e02d      	b.n	406322 <follow_path+0x1de>
			if (ni == 11) {				/* Long extension */
  4062c6:	9b00      	ldr	r3, [sp, #0]
  4062c8:	2b0b      	cmp	r3, #11
  4062ca:	d00f      	beq.n	4062ec <follow_path+0x1a8>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  4062cc:	42a6      	cmp	r6, r4
  4062ce:	bf18      	it	ne
  4062d0:	f045 0503 	orrne.w	r5, r5, #3
			if (si > di) break;			/* No extension */
  4062d4:	42a6      	cmp	r6, r4
  4062d6:	d83b      	bhi.n	406350 <follow_path+0x20c>
			b <<= 2; continue;
  4062d8:	9b01      	ldr	r3, [sp, #4]
  4062da:	009b      	lsls	r3, r3, #2
  4062dc:	b2db      	uxtb	r3, r3
  4062de:	9301      	str	r3, [sp, #4]
  4062e0:	4623      	mov	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
  4062e2:	220b      	movs	r2, #11
  4062e4:	9200      	str	r2, [sp, #0]
  4062e6:	f04f 0808 	mov.w	r8, #8
  4062ea:	e7c5      	b.n	406278 <follow_path+0x134>
				cf |= NS_LOSS | NS_LFN; break;
  4062ec:	f045 0503 	orr.w	r5, r5, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  4062f0:	f8da 3018 	ldr.w	r3, [sl, #24]
  4062f4:	781a      	ldrb	r2, [r3, #0]
  4062f6:	2ae5      	cmp	r2, #229	; 0xe5
  4062f8:	d132      	bne.n	406360 <follow_path+0x21c>
  4062fa:	2205      	movs	r2, #5
  4062fc:	701a      	strb	r2, [r3, #0]
  4062fe:	e02c      	b.n	40635a <follow_path+0x216>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  406300:	2100      	movs	r1, #0
  406302:	47c8      	blx	r9
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  406304:	4603      	mov	r3, r0
  406306:	2800      	cmp	r0, #0
  406308:	f000 809f 	beq.w	40644a <follow_path+0x306>
  40630c:	4a53      	ldr	r2, [pc, #332]	; (40645c <follow_path+0x318>)
  40630e:	4413      	add	r3, r2
  406310:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  406314:	f045 0502 	orr.w	r5, r5, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  406318:	2800      	cmp	r0, #0
  40631a:	d1bf      	bne.n	40629c <follow_path+0x158>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  40631c:	f045 0503 	orr.w	r5, r5, #3
  406320:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  406322:	f8da 3018 	ldr.w	r3, [sl, #24]
  406326:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  40632a:	4633      	mov	r3, r6
		dj->fn[i++] = (BYTE)w;
  40632c:	f108 0801 	add.w	r8, r8, #1
  406330:	e7a2      	b.n	406278 <follow_path+0x134>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  406332:	2b00      	cmp	r3, #0
  406334:	d1f2      	bne.n	40631c <follow_path+0x1d8>
  406336:	e7bc      	b.n	4062b2 <follow_path+0x16e>
					if (IsLower(w)) {	/* ASCII small capital */
  406338:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  40633c:	b29b      	uxth	r3, r3
  40633e:	2b19      	cmp	r3, #25
  406340:	d8ef      	bhi.n	406322 <follow_path+0x1de>
						b |= 1; w -= 0x20;
  406342:	9b01      	ldr	r3, [sp, #4]
  406344:	f043 0301 	orr.w	r3, r3, #1
  406348:	9301      	str	r3, [sp, #4]
  40634a:	3820      	subs	r0, #32
  40634c:	b280      	uxth	r0, r0
  40634e:	e7e8      	b.n	406322 <follow_path+0x1de>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  406350:	f8da 3018 	ldr.w	r3, [sl, #24]
  406354:	781a      	ldrb	r2, [r3, #0]
  406356:	2ae5      	cmp	r2, #229	; 0xe5
  406358:	d0cf      	beq.n	4062fa <follow_path+0x1b6>
	if (ni == 8) b <<= 2;
  40635a:	9b00      	ldr	r3, [sp, #0]
  40635c:	2b08      	cmp	r3, #8
  40635e:	d052      	beq.n	406406 <follow_path+0x2c2>
  406360:	9a01      	ldr	r2, [sp, #4]
  406362:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  406366:	2b0c      	cmp	r3, #12
  406368:	d054      	beq.n	406414 <follow_path+0x2d0>
  40636a:	f002 0203 	and.w	r2, r2, #3
  40636e:	2a03      	cmp	r2, #3
  406370:	d050      	beq.n	406414 <follow_path+0x2d0>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  406372:	f015 0f02 	tst.w	r5, #2
  406376:	d10b      	bne.n	406390 <follow_path+0x24c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  406378:	9a01      	ldr	r2, [sp, #4]
  40637a:	f002 0b03 	and.w	fp, r2, #3
  40637e:	f1bb 0f01 	cmp.w	fp, #1
  406382:	bf08      	it	eq
  406384:	f045 0510 	orreq.w	r5, r5, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  406388:	2b04      	cmp	r3, #4
  40638a:	bf08      	it	eq
  40638c:	f045 0508 	orreq.w	r5, r5, #8
	dj->fn[NS] = cf;	/* SFN is created */
  406390:	f8da 3018 	ldr.w	r3, [sl, #24]
  406394:	72dd      	strb	r5, [r3, #11]
			res = dir_find(dj);				/* Find it */
  406396:	4650      	mov	r0, sl
  406398:	4b31      	ldr	r3, [pc, #196]	; (406460 <follow_path+0x31c>)
  40639a:	4798      	blx	r3
			ns = *(dj->fn+NS);
  40639c:	f8da 3018 	ldr.w	r3, [sl, #24]
  4063a0:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  4063a2:	4603      	mov	r3, r0
  4063a4:	2800      	cmp	r0, #0
  4063a6:	d138      	bne.n	40641a <follow_path+0x2d6>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  4063a8:	f012 0f04 	tst.w	r2, #4
  4063ac:	d146      	bne.n	40643c <follow_path+0x2f8>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  4063ae:	f8da 3014 	ldr.w	r3, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  4063b2:	7ada      	ldrb	r2, [r3, #11]
  4063b4:	f012 0f10 	tst.w	r2, #16
  4063b8:	d038      	beq.n	40642c <follow_path+0x2e8>
			dj->sclust = LD_CLUST(dir);
  4063ba:	7d59      	ldrb	r1, [r3, #21]
  4063bc:	7d1a      	ldrb	r2, [r3, #20]
  4063be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4063c2:	7ed9      	ldrb	r1, [r3, #27]
  4063c4:	7e9b      	ldrb	r3, [r3, #26]
  4063c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  4063ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4063ce:	f8ca 3008 	str.w	r3, [sl, #8]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  4063d2:	783b      	ldrb	r3, [r7, #0]
  4063d4:	2b2f      	cmp	r3, #47	; 0x2f
  4063d6:	d001      	beq.n	4063dc <follow_path+0x298>
  4063d8:	2b5c      	cmp	r3, #92	; 0x5c
  4063da:	d105      	bne.n	4063e8 <follow_path+0x2a4>
  4063dc:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  4063e0:	2b2f      	cmp	r3, #47	; 0x2f
  4063e2:	d0fb      	beq.n	4063dc <follow_path+0x298>
  4063e4:	2b5c      	cmp	r3, #92	; 0x5c
  4063e6:	d0f9      	beq.n	4063dc <follow_path+0x298>
	lfn = dj->lfn;
  4063e8:	f8da b01c 	ldr.w	fp, [sl, #28]
		w = p[si++];					/* Get a character */
  4063ec:	7838      	ldrb	r0, [r7, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  4063ee:	282f      	cmp	r0, #47	; 0x2f
  4063f0:	bf18      	it	ne
  4063f2:	281f      	cmpne	r0, #31
  4063f4:	d91e      	bls.n	406434 <follow_path+0x2f0>
  4063f6:	285c      	cmp	r0, #92	; 0x5c
  4063f8:	d01c      	beq.n	406434 <follow_path+0x2f0>
  4063fa:	f1ab 0602 	sub.w	r6, fp, #2
  4063fe:	463d      	mov	r5, r7
  406400:	2401      	movs	r4, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  406402:	46a0      	mov	r8, r4
  406404:	e6cf      	b.n	4061a6 <follow_path+0x62>
	if (ni == 8) b <<= 2;
  406406:	9b01      	ldr	r3, [sp, #4]
  406408:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  40640c:	fa5f f38b 	uxtb.w	r3, fp
  406410:	9301      	str	r3, [sp, #4]
  406412:	e7a5      	b.n	406360 <follow_path+0x21c>
		cf |= NS_LFN;
  406414:	f045 0502 	orr.w	r5, r5, #2
  406418:	e7ab      	b.n	406372 <follow_path+0x22e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  40641a:	2804      	cmp	r0, #4
  40641c:	d10e      	bne.n	40643c <follow_path+0x2f8>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  40641e:	f002 0204 	and.w	r2, r2, #4
  406422:	2a00      	cmp	r2, #0
  406424:	bf14      	ite	ne
  406426:	4603      	movne	r3, r0
  406428:	2305      	moveq	r3, #5
  40642a:	e007      	b.n	40643c <follow_path+0x2f8>
				res = FR_NO_PATH; break;
  40642c:	2305      	movs	r3, #5
  40642e:	e005      	b.n	40643c <follow_path+0x2f8>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  406430:	2306      	movs	r3, #6
	return res;
  406432:	e003      	b.n	40643c <follow_path+0x2f8>
	*path = &p[si];						/* Return pointer to the next segment */
  406434:	3701      	adds	r7, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  406436:	281f      	cmp	r0, #31
  406438:	d804      	bhi.n	406444 <follow_path+0x300>
  40643a:	2306      	movs	r3, #6
}
  40643c:	4618      	mov	r0, r3
  40643e:	b003      	add	sp, #12
  406440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	si = di = 0;
  406444:	2400      	movs	r4, #0
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  406446:	4625      	mov	r5, r4
  406448:	e6c7      	b.n	4061da <follow_path+0x96>
			cf |= NS_LFN;				/* Force create LFN entry */
  40644a:	f045 0502 	orr.w	r5, r5, #2
  40644e:	e765      	b.n	40631c <follow_path+0x1d8>
  406450:	00405a85 	.word	0x00405a85
  406454:	0040fbad 	.word	0x0040fbad
  406458:	0040fbb9 	.word	0x0040fbb9
  40645c:	0040fb2c 	.word	0x0040fb2c
  406460:	00405f9d 	.word	0x00405f9d
  406464:	00407049 	.word	0x00407049

00406468 <dir_register>:
{
  406468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40646c:	b089      	sub	sp, #36	; 0x24
  40646e:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  406470:	6985      	ldr	r5, [r0, #24]
  406472:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  406476:	220c      	movs	r2, #12
  406478:	4629      	mov	r1, r5
  40647a:	a805      	add	r0, sp, #20
  40647c:	4baa      	ldr	r3, [pc, #680]	; (406728 <dir_register+0x2c0>)
  40647e:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  406480:	f89d 301f 	ldrb.w	r3, [sp, #31]
  406484:	f013 0f01 	tst.w	r3, #1
  406488:	d079      	beq.n	40657e <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  40648a:	2300      	movs	r3, #0
  40648c:	72eb      	strb	r3, [r5, #11]
  40648e:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  406490:	220b      	movs	r2, #11
  406492:	a905      	add	r1, sp, #20
  406494:	4628      	mov	r0, r5
  406496:	4ba4      	ldr	r3, [pc, #656]	; (406728 <dir_register+0x2c0>)
  406498:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  40649a:	2701      	movs	r7, #1
  40649c:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  40649e:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  4064a2:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 406744 <dir_register+0x2dc>
	mem_cpy(dst, src, 11);
  4064a6:	f8df a280 	ldr.w	sl, [pc, #640]	; 406728 <dir_register+0x2c0>
  4064aa:	e032      	b.n	406512 <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  4064ac:	463b      	mov	r3, r7
  4064ae:	e030      	b.n	406512 <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  4064b0:	4613      	mov	r3, r2
  4064b2:	e002      	b.n	4064ba <dir_register+0x52>
  4064b4:	2300      	movs	r3, #0
  4064b6:	e000      	b.n	4064ba <dir_register+0x52>
  4064b8:	4613      	mov	r3, r2
  4064ba:	442b      	add	r3, r5
  4064bc:	e005      	b.n	4064ca <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4064be:	4641      	mov	r1, r8
  4064c0:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  4064c4:	1b59      	subs	r1, r3, r5
  4064c6:	2907      	cmp	r1, #7
  4064c8:	d807      	bhi.n	4064da <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4064ca:	2a07      	cmp	r2, #7
  4064cc:	d8f7      	bhi.n	4064be <dir_register+0x56>
  4064ce:	a908      	add	r1, sp, #32
  4064d0:	4411      	add	r1, r2
  4064d2:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  4064d6:	3201      	adds	r2, #1
  4064d8:	e7f2      	b.n	4064c0 <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  4064da:	4620      	mov	r0, r4
  4064dc:	47c8      	blx	r9
			if (res != FR_OK) break;
  4064de:	4606      	mov	r6, r0
  4064e0:	2800      	cmp	r0, #0
  4064e2:	d13e      	bne.n	406562 <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  4064e4:	3701      	adds	r7, #1
  4064e6:	b2bf      	uxth	r7, r7
  4064e8:	2f64      	cmp	r7, #100	; 0x64
  4064ea:	d038      	beq.n	40655e <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  4064ec:	220b      	movs	r2, #11
  4064ee:	a905      	add	r1, sp, #20
  4064f0:	4628      	mov	r0, r5
  4064f2:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  4064f4:	2f05      	cmp	r7, #5
  4064f6:	d9d9      	bls.n	4064ac <dir_register+0x44>
  4064f8:	463b      	mov	r3, r7
  4064fa:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  4064fc:	03da      	lsls	r2, r3, #15
  4064fe:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  406502:	f831 2b02 	ldrh.w	r2, [r1], #2
  406506:	fa12 f383 	uxtah	r3, r2, r3
  40650a:	b29b      	uxth	r3, r3
  40650c:	880a      	ldrh	r2, [r1, #0]
  40650e:	2a00      	cmp	r2, #0
  406510:	d1f4      	bne.n	4064fc <dir_register+0x94>
  406512:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  406516:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  406518:	f003 000f 	and.w	r0, r3, #15
  40651c:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  406520:	2939      	cmp	r1, #57	; 0x39
  406522:	bf88      	it	hi
  406524:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  406528:	3a01      	subs	r2, #1
  40652a:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  40652e:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  406532:	2b00      	cmp	r3, #0
  406534:	d1f0      	bne.n	406518 <dir_register+0xb0>
	ns[i] = '~';
  406536:	217e      	movs	r1, #126	; 0x7e
  406538:	ab08      	add	r3, sp, #32
  40653a:	4413      	add	r3, r2
  40653c:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  406540:	2a00      	cmp	r2, #0
  406542:	d0b5      	beq.n	4064b0 <dir_register+0x48>
  406544:	782b      	ldrb	r3, [r5, #0]
  406546:	2b20      	cmp	r3, #32
  406548:	d0b4      	beq.n	4064b4 <dir_register+0x4c>
  40654a:	4629      	mov	r1, r5
  40654c:	2300      	movs	r3, #0
  40654e:	3301      	adds	r3, #1
  406550:	429a      	cmp	r2, r3
  406552:	d0b1      	beq.n	4064b8 <dir_register+0x50>
  406554:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  406558:	2820      	cmp	r0, #32
  40655a:	d1f8      	bne.n	40654e <dir_register+0xe6>
  40655c:	e7ad      	b.n	4064ba <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40655e:	2607      	movs	r6, #7
  406560:	e004      	b.n	40656c <dir_register+0x104>
  406562:	2f64      	cmp	r7, #100	; 0x64
  406564:	f000 80af 	beq.w	4066c6 <dir_register+0x25e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  406568:	2804      	cmp	r0, #4
  40656a:	d003      	beq.n	406574 <dir_register+0x10c>
}
  40656c:	4630      	mov	r0, r6
  40656e:	b009      	add	sp, #36	; 0x24
  406570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  406574:	f89d 301f 	ldrb.w	r3, [sp, #31]
  406578:	72eb      	strb	r3, [r5, #11]
  40657a:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  40657e:	f89d 301f 	ldrb.w	r3, [sp, #31]
  406582:	f013 0f02 	tst.w	r3, #2
  406586:	d014      	beq.n	4065b2 <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  406588:	f8bb 3000 	ldrh.w	r3, [fp]
  40658c:	b17b      	cbz	r3, 4065ae <dir_register+0x146>
  40658e:	2300      	movs	r3, #0
  406590:	3301      	adds	r3, #1
  406592:	b29b      	uxth	r3, r3
  406594:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  406598:	2a00      	cmp	r2, #0
  40659a:	d1f9      	bne.n	406590 <dir_register+0x128>
		ne = (ne + 25) / 13;
  40659c:	3319      	adds	r3, #25
  40659e:	4f63      	ldr	r7, [pc, #396]	; (40672c <dir_register+0x2c4>)
  4065a0:	fb87 2703 	smull	r2, r7, r7, r3
  4065a4:	17db      	asrs	r3, r3, #31
  4065a6:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  4065aa:	b2bf      	uxth	r7, r7
  4065ac:	e002      	b.n	4065b4 <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  4065ae:	2300      	movs	r3, #0
  4065b0:	e7f4      	b.n	40659c <dir_register+0x134>
		ne = 1;
  4065b2:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  4065b4:	2100      	movs	r1, #0
  4065b6:	4620      	mov	r0, r4
  4065b8:	4b5d      	ldr	r3, [pc, #372]	; (406730 <dir_register+0x2c8>)
  4065ba:	4798      	blx	r3
	if (res != FR_OK) return res;
  4065bc:	4606      	mov	r6, r0
  4065be:	2800      	cmp	r0, #0
  4065c0:	d1d4      	bne.n	40656c <dir_register+0x104>
  4065c2:	f04f 0a00 	mov.w	sl, #0
  4065c6:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  4065c8:	f8df 816c 	ldr.w	r8, [pc, #364]	; 406738 <dir_register+0x2d0>
			n = 0;					/* Not a blank entry. Restart to search */
  4065cc:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  4065ce:	f8df 9164 	ldr.w	r9, [pc, #356]	; 406734 <dir_register+0x2cc>
  4065d2:	e00a      	b.n	4065ea <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  4065d4:	1c6b      	adds	r3, r5, #1
  4065d6:	b29b      	uxth	r3, r3
  4065d8:	429f      	cmp	r7, r3
  4065da:	d076      	beq.n	4066ca <dir_register+0x262>
  4065dc:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  4065de:	2101      	movs	r1, #1
  4065e0:	4620      	mov	r0, r4
  4065e2:	47c8      	blx	r9
	} while (res == FR_OK);
  4065e4:	4606      	mov	r6, r0
  4065e6:	2800      	cmp	r0, #0
  4065e8:	d1c0      	bne.n	40656c <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  4065ea:	6921      	ldr	r1, [r4, #16]
  4065ec:	6820      	ldr	r0, [r4, #0]
  4065ee:	47c0      	blx	r8
		if (res != FR_OK) break;
  4065f0:	4606      	mov	r6, r0
  4065f2:	2800      	cmp	r0, #0
  4065f4:	d1ba      	bne.n	40656c <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  4065f6:	6963      	ldr	r3, [r4, #20]
  4065f8:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  4065fa:	2be5      	cmp	r3, #229	; 0xe5
  4065fc:	d000      	beq.n	406600 <dir_register+0x198>
  4065fe:	b923      	cbnz	r3, 40660a <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  406600:	2d00      	cmp	r5, #0
  406602:	d1e7      	bne.n	4065d4 <dir_register+0x16c>
  406604:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  406608:	e7e4      	b.n	4065d4 <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  40660a:	465d      	mov	r5, fp
  40660c:	e7e7      	b.n	4065de <dir_register+0x176>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40660e:	4671      	mov	r1, lr
  406610:	e073      	b.n	4066fa <dir_register+0x292>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  406612:	f64f 72ff 	movw	r2, #65535	; 0xffff
  406616:	4293      	cmp	r3, r2
  406618:	d002      	beq.n	406620 <dir_register+0x1b8>
  40661a:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  40661e:	b90b      	cbnz	r3, 406624 <dir_register+0x1bc>
  406620:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  406624:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  406628:	6823      	ldr	r3, [r4, #0]
  40662a:	2201      	movs	r2, #1
  40662c:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  40662e:	4639      	mov	r1, r7
  406630:	4620      	mov	r0, r4
  406632:	4b40      	ldr	r3, [pc, #256]	; (406734 <dir_register+0x2cc>)
  406634:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  406636:	4606      	mov	r6, r0
  406638:	2800      	cmp	r0, #0
  40663a:	d197      	bne.n	40656c <dir_register+0x104>
  40663c:	3d01      	subs	r5, #1
  40663e:	b2ad      	uxth	r5, r5
  406640:	b315      	cbz	r5, 406688 <dir_register+0x220>
				res = move_window(dj->fs, dj->sect);
  406642:	6921      	ldr	r1, [r4, #16]
  406644:	6820      	ldr	r0, [r4, #0]
  406646:	4b3c      	ldr	r3, [pc, #240]	; (406738 <dir_register+0x2d0>)
  406648:	4798      	blx	r3
				if (res != FR_OK) break;
  40664a:	4606      	mov	r6, r0
  40664c:	2800      	cmp	r0, #0
  40664e:	d18d      	bne.n	40656c <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  406650:	f8d4 901c 	ldr.w	r9, [r4, #28]
  406654:	6960      	ldr	r0, [r4, #20]
  406656:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  40665a:	f89d 3000 	ldrb.w	r3, [sp]
  40665e:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  406660:	230f      	movs	r3, #15
  406662:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  406664:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  406666:	7687      	strb	r7, [r0, #26]
  406668:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  40666a:	f10b 31ff 	add.w	r1, fp, #4294967295
  40666e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  406672:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  406676:	4a31      	ldr	r2, [pc, #196]	; (40673c <dir_register+0x2d4>)
  406678:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  40667c:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40667e:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  406682:	f04f 0aff 	mov.w	sl, #255	; 0xff
  406686:	e03b      	b.n	406700 <dir_register+0x298>
		res = move_window(dj->fs, dj->sect);
  406688:	6921      	ldr	r1, [r4, #16]
  40668a:	6820      	ldr	r0, [r4, #0]
  40668c:	4b2a      	ldr	r3, [pc, #168]	; (406738 <dir_register+0x2d0>)
  40668e:	4798      	blx	r3
		if (res == FR_OK) {
  406690:	4606      	mov	r6, r0
  406692:	2800      	cmp	r0, #0
  406694:	f47f af6a 	bne.w	40656c <dir_register+0x104>
			dir = dj->dir;
  406698:	6965      	ldr	r5, [r4, #20]
  40669a:	f105 0120 	add.w	r1, r5, #32
	BYTE *d = (BYTE*)dst;
  40669e:	462b      	mov	r3, r5
		*d++ = (BYTE)val;
  4066a0:	2200      	movs	r2, #0
  4066a2:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  4066a6:	4299      	cmp	r1, r3
  4066a8:	d1fb      	bne.n	4066a2 <dir_register+0x23a>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  4066aa:	220b      	movs	r2, #11
  4066ac:	69a1      	ldr	r1, [r4, #24]
  4066ae:	4628      	mov	r0, r5
  4066b0:	4b1d      	ldr	r3, [pc, #116]	; (406728 <dir_register+0x2c0>)
  4066b2:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  4066b4:	69a3      	ldr	r3, [r4, #24]
  4066b6:	7adb      	ldrb	r3, [r3, #11]
  4066b8:	f003 0318 	and.w	r3, r3, #24
  4066bc:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  4066be:	6823      	ldr	r3, [r4, #0]
  4066c0:	2201      	movs	r2, #1
  4066c2:	711a      	strb	r2, [r3, #4]
  4066c4:	e752      	b.n	40656c <dir_register+0x104>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  4066c6:	2607      	movs	r6, #7
  4066c8:	e750      	b.n	40656c <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  4066ca:	2b01      	cmp	r3, #1
  4066cc:	d9dc      	bls.n	406688 <dir_register+0x220>
		res = dir_sdi(dj, is);
  4066ce:	4651      	mov	r1, sl
  4066d0:	4620      	mov	r0, r4
  4066d2:	4b17      	ldr	r3, [pc, #92]	; (406730 <dir_register+0x2c8>)
  4066d4:	4798      	blx	r3
		if (res == FR_OK) {
  4066d6:	4606      	mov	r6, r0
  4066d8:	2800      	cmp	r0, #0
  4066da:	f47f af47 	bne.w	40656c <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  4066de:	69a0      	ldr	r0, [r4, #24]
  4066e0:	4b17      	ldr	r3, [pc, #92]	; (406740 <dir_register+0x2d8>)
  4066e2:	4798      	blx	r3
  4066e4:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  4066e6:	2700      	movs	r7, #0
	s = wc = 0;
  4066e8:	9701      	str	r7, [sp, #4]
  4066ea:	e7aa      	b.n	406642 <dir_register+0x1da>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4066ec:	f892 e000 	ldrb.w	lr, [r2]
  4066f0:	f800 a00e 	strb.w	sl, [r0, lr]
  4066f4:	4486      	add	lr, r0
  4066f6:	f88e a001 	strb.w	sl, [lr, #1]
  4066fa:	3201      	adds	r2, #1
	} while (++s < 13);
  4066fc:	4542      	cmp	r2, r8
  4066fe:	d088      	beq.n	406612 <dir_register+0x1aa>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  406700:	42b3      	cmp	r3, r6
  406702:	d0f3      	beq.n	4066ec <dir_register+0x284>
  406704:	f101 0e01 	add.w	lr, r1, #1
  406708:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  40670c:	7811      	ldrb	r1, [r2, #0]
  40670e:	5443      	strb	r3, [r0, r1]
  406710:	4401      	add	r1, r0
  406712:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  406716:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  40671a:	2b00      	cmp	r3, #0
  40671c:	f47f af77 	bne.w	40660e <dir_register+0x1a6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  406720:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  406722:	4633      	mov	r3, r6
  406724:	e7e9      	b.n	4066fa <dir_register+0x292>
  406726:	bf00      	nop
  406728:	00405361 	.word	0x00405361
  40672c:	4ec4ec4f 	.word	0x4ec4ec4f
  406730:	00405a85 	.word	0x00405a85
  406734:	00405e65 	.word	0x00405e65
  406738:	0040590d 	.word	0x0040590d
  40673c:	0040fb1c 	.word	0x0040fb1c
  406740:	0040538d 	.word	0x0040538d
  406744:	00405f9d 	.word	0x00405f9d

00406748 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  406748:	b108      	cbz	r0, 40674e <f_mount+0x6>
		return FR_INVALID_DRIVE;
  40674a:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  40674c:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  40674e:	4b06      	ldr	r3, [pc, #24]	; (406768 <f_mount+0x20>)
  406750:	681b      	ldr	r3, [r3, #0]
	if (rfs) {
  406752:	b10b      	cbz	r3, 406758 <f_mount+0x10>
		rfs->fs_type = 0;		/* Clear old fs object */
  406754:	2200      	movs	r2, #0
  406756:	701a      	strb	r2, [r3, #0]
	if (fs) {
  406758:	b109      	cbz	r1, 40675e <f_mount+0x16>
		fs->fs_type = 0;		/* Clear new fs object */
  40675a:	2300      	movs	r3, #0
  40675c:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  40675e:	4b02      	ldr	r3, [pc, #8]	; (406768 <f_mount+0x20>)
  406760:	6019      	str	r1, [r3, #0]
	return FR_OK;
  406762:	2000      	movs	r0, #0
  406764:	4770      	bx	lr
  406766:	bf00      	nop
  406768:	20400cc4 	.word	0x20400cc4

0040676c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  40676c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406770:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  406774:	4605      	mov	r5, r0
  406776:	9101      	str	r1, [sp, #4]
  406778:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  40677a:	2300      	movs	r3, #0
  40677c:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  40677e:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  406782:	f002 021e 	and.w	r2, r2, #30
  406786:	a985      	add	r1, sp, #532	; 0x214
  406788:	a801      	add	r0, sp, #4
  40678a:	4b58      	ldr	r3, [pc, #352]	; (4068ec <f_open+0x180>)
  40678c:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  40678e:	ab82      	add	r3, sp, #520	; 0x208
  406790:	938b      	str	r3, [sp, #556]	; 0x22c
  406792:	ab02      	add	r3, sp, #8
  406794:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  406796:	b168      	cbz	r0, 4067b4 <f_open+0x48>
  406798:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  40679a:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  40679c:	f016 0f1c 	tst.w	r6, #28
  4067a0:	d158      	bne.n	406854 <f_open+0xe8>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  4067a2:	2b00      	cmp	r3, #0
  4067a4:	f040 8096 	bne.w	4068d4 <f_open+0x168>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  4067a8:	7ae3      	ldrb	r3, [r4, #11]
  4067aa:	f013 0f10 	tst.w	r3, #16
  4067ae:	d062      	beq.n	406876 <f_open+0x10a>
				res = FR_NO_FILE;
  4067b0:	2304      	movs	r3, #4
  4067b2:	e08f      	b.n	4068d4 <f_open+0x168>
		res = follow_path(&dj, path);	/* Follow the file path */
  4067b4:	9901      	ldr	r1, [sp, #4]
  4067b6:	a885      	add	r0, sp, #532	; 0x214
  4067b8:	4b4d      	ldr	r3, [pc, #308]	; (4068f0 <f_open+0x184>)
  4067ba:	4798      	blx	r3
  4067bc:	4603      	mov	r3, r0
	dir = dj.dir;
  4067be:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (!dir)	/* Current dir itself */
  4067c0:	b934      	cbnz	r4, 4067d0 <f_open+0x64>
  4067c2:	b928      	cbnz	r0, 4067d0 <f_open+0x64>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  4067c4:	f016 0f1c 	tst.w	r6, #28
  4067c8:	f040 8089 	bne.w	4068de <f_open+0x172>
			res = FR_INVALID_NAME;
  4067cc:	2306      	movs	r3, #6
  4067ce:	e046      	b.n	40685e <f_open+0xf2>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  4067d0:	f016 0f1c 	tst.w	r6, #28
  4067d4:	d0e5      	beq.n	4067a2 <f_open+0x36>
		if (res != FR_OK) {					/* No file, create new */
  4067d6:	2b00      	cmp	r3, #0
  4067d8:	d13c      	bne.n	406854 <f_open+0xe8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  4067da:	7ae3      	ldrb	r3, [r4, #11]
  4067dc:	f013 0f11 	tst.w	r3, #17
  4067e0:	d17f      	bne.n	4068e2 <f_open+0x176>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  4067e2:	f016 0f04 	tst.w	r6, #4
  4067e6:	d17e      	bne.n	4068e6 <f_open+0x17a>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  4067e8:	f017 0f08 	tst.w	r7, #8
  4067ec:	d050      	beq.n	406890 <f_open+0x124>
			dw = get_fattime();					/* Created time */
  4067ee:	4b41      	ldr	r3, [pc, #260]	; (4068f4 <f_open+0x188>)
  4067f0:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  4067f2:	73a0      	strb	r0, [r4, #14]
  4067f4:	f3c0 2307 	ubfx	r3, r0, #8, #8
  4067f8:	73e3      	strb	r3, [r4, #15]
  4067fa:	0c03      	lsrs	r3, r0, #16
  4067fc:	7423      	strb	r3, [r4, #16]
  4067fe:	0e00      	lsrs	r0, r0, #24
  406800:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  406802:	2300      	movs	r3, #0
  406804:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  406806:	7723      	strb	r3, [r4, #28]
  406808:	7763      	strb	r3, [r4, #29]
  40680a:	77a3      	strb	r3, [r4, #30]
  40680c:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  40680e:	7d62      	ldrb	r2, [r4, #21]
  406810:	7d26      	ldrb	r6, [r4, #20]
  406812:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  406816:	7ee1      	ldrb	r1, [r4, #27]
  406818:	7ea2      	ldrb	r2, [r4, #26]
  40681a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  40681e:	76a3      	strb	r3, [r4, #26]
  406820:	76e3      	strb	r3, [r4, #27]
  406822:	7523      	strb	r3, [r4, #20]
  406824:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  406826:	9885      	ldr	r0, [sp, #532]	; 0x214
  406828:	2301      	movs	r3, #1
  40682a:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  40682c:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  406830:	d02c      	beq.n	40688c <f_open+0x120>
				dw = dj.fs->winsect;
  406832:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  406836:	4631      	mov	r1, r6
  406838:	4b2f      	ldr	r3, [pc, #188]	; (4068f8 <f_open+0x18c>)
  40683a:	4798      	blx	r3
				if (res == FR_OK) {
  40683c:	4603      	mov	r3, r0
  40683e:	2800      	cmp	r0, #0
  406840:	d148      	bne.n	4068d4 <f_open+0x168>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  406842:	9885      	ldr	r0, [sp, #532]	; 0x214
  406844:	3e01      	subs	r6, #1
  406846:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  406848:	4641      	mov	r1, r8
  40684a:	4b2c      	ldr	r3, [pc, #176]	; (4068fc <f_open+0x190>)
  40684c:	4798      	blx	r3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  40684e:	4603      	mov	r3, r0
  406850:	b1e0      	cbz	r0, 40688c <f_open+0x120>
  406852:	e03f      	b.n	4068d4 <f_open+0x168>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  406854:	2b04      	cmp	r3, #4
  406856:	d004      	beq.n	406862 <f_open+0xf6>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  406858:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  40685c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  40685e:	b1db      	cbz	r3, 406898 <f_open+0x12c>
  406860:	e038      	b.n	4068d4 <f_open+0x168>
				res = dir_register(&dj);
  406862:	a885      	add	r0, sp, #532	; 0x214
  406864:	4b26      	ldr	r3, [pc, #152]	; (406900 <f_open+0x194>)
  406866:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  406868:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  40686c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  40686e:	4603      	mov	r3, r0
  406870:	2800      	cmp	r0, #0
  406872:	d0b9      	beq.n	4067e8 <f_open+0x7c>
  406874:	e02e      	b.n	4068d4 <f_open+0x168>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  406876:	f016 0f02 	tst.w	r6, #2
  40687a:	d004      	beq.n	406886 <f_open+0x11a>
  40687c:	f013 0f01 	tst.w	r3, #1
  406880:	d001      	beq.n	406886 <f_open+0x11a>
					res = FR_DENIED;
  406882:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  406884:	e026      	b.n	4068d4 <f_open+0x168>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  406886:	f016 0f08 	tst.w	r6, #8
  40688a:	d001      	beq.n	406890 <f_open+0x124>
			mode |= FA__WRITTEN;
  40688c:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  406890:	9b85      	ldr	r3, [sp, #532]	; 0x214
  406892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406894:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  406896:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  406898:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  40689a:	7d62      	ldrb	r2, [r4, #21]
  40689c:	7d23      	ldrb	r3, [r4, #20]
  40689e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4068a2:	7ee1      	ldrb	r1, [r4, #27]
  4068a4:	7ea3      	ldrb	r3, [r4, #26]
  4068a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  4068aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4068ae:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  4068b0:	7fe2      	ldrb	r2, [r4, #31]
  4068b2:	7fa3      	ldrb	r3, [r4, #30]
  4068b4:	041b      	lsls	r3, r3, #16
  4068b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4068ba:	7f22      	ldrb	r2, [r4, #28]
  4068bc:	4313      	orrs	r3, r2
  4068be:	7f62      	ldrb	r2, [r4, #29]
  4068c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4068c4:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  4068c6:	2300      	movs	r3, #0
  4068c8:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  4068ca:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  4068cc:	9a85      	ldr	r2, [sp, #532]	; 0x214
  4068ce:	602a      	str	r2, [r5, #0]
  4068d0:	88d2      	ldrh	r2, [r2, #6]
  4068d2:	80aa      	strh	r2, [r5, #4]
}
  4068d4:	4618      	mov	r0, r3
  4068d6:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  4068da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_INVALID_NAME;
  4068de:	2306      	movs	r3, #6
  4068e0:	e7ba      	b.n	406858 <f_open+0xec>
				res = FR_DENIED;
  4068e2:	2307      	movs	r3, #7
  4068e4:	e7f6      	b.n	4068d4 <f_open+0x168>
					res = FR_EXIST;
  4068e6:	2308      	movs	r3, #8
  4068e8:	e7f4      	b.n	4068d4 <f_open+0x168>
  4068ea:	bf00      	nop
  4068ec:	00405471 	.word	0x00405471
  4068f0:	00406145 	.word	0x00406145
  4068f4:	00405309 	.word	0x00405309
  4068f8:	00405d1d 	.word	0x00405d1d
  4068fc:	0040590d 	.word	0x0040590d
  406900:	00406469 	.word	0x00406469

00406904 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  406904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406908:	b083      	sub	sp, #12
  40690a:	4604      	mov	r4, r0
  40690c:	4689      	mov	r9, r1
  40690e:	4616      	mov	r6, r2
  406910:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  406912:	2300      	movs	r3, #0
  406914:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  406918:	8881      	ldrh	r1, [r0, #4]
  40691a:	6800      	ldr	r0, [r0, #0]
  40691c:	4b75      	ldr	r3, [pc, #468]	; (406af4 <f_write+0x1f0>)
  40691e:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  406920:	9001      	str	r0, [sp, #4]
  406922:	2800      	cmp	r0, #0
  406924:	f040 80e2 	bne.w	406aec <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  406928:	79a3      	ldrb	r3, [r4, #6]
  40692a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40692e:	f040 80db 	bne.w	406ae8 <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  406932:	f013 0f02 	tst.w	r3, #2
  406936:	d102      	bne.n	40693e <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  406938:	2307      	movs	r3, #7
  40693a:	9301      	str	r3, [sp, #4]
  40693c:	e0d6      	b.n	406aec <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  40693e:	68e3      	ldr	r3, [r4, #12]
  406940:	42f3      	cmn	r3, r6
  406942:	d20f      	bcs.n	406964 <f_write+0x60>

	for ( ;  btw;							/* Repeat until all data written */
  406944:	2e00      	cmp	r6, #0
  406946:	d17a      	bne.n	406a3e <f_write+0x13a>
  406948:	e00c      	b.n	406964 <f_write+0x60>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  40694a:	2100      	movs	r1, #0
  40694c:	4b6a      	ldr	r3, [pc, #424]	; (406af8 <f_write+0x1f4>)
  40694e:	4798      	blx	r3
  406950:	4603      	mov	r3, r0
  406952:	6120      	str	r0, [r4, #16]
  406954:	e003      	b.n	40695e <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  406956:	6961      	ldr	r1, [r4, #20]
  406958:	4b67      	ldr	r3, [pc, #412]	; (406af8 <f_write+0x1f4>)
  40695a:	4798      	blx	r3
  40695c:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  40695e:	2b00      	cmp	r3, #0
  406960:	f040 8081 	bne.w	406a66 <f_write+0x162>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  406964:	68a3      	ldr	r3, [r4, #8]
  406966:	68e2      	ldr	r2, [r4, #12]
  406968:	4293      	cmp	r3, r2
  40696a:	bf88      	it	hi
  40696c:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  40696e:	79a3      	ldrb	r3, [r4, #6]
  406970:	f043 0320 	orr.w	r3, r3, #32
  406974:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  406976:	e0b9      	b.n	406aec <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  406978:	79a3      	ldrb	r3, [r4, #6]
  40697a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40697e:	71a3      	strb	r3, [r4, #6]
  406980:	2302      	movs	r3, #2
  406982:	9301      	str	r3, [sp, #4]
  406984:	e0b2      	b.n	406aec <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  406986:	79a3      	ldrb	r3, [r4, #6]
  406988:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40698c:	71a3      	strb	r3, [r4, #6]
  40698e:	2301      	movs	r3, #1
  406990:	9301      	str	r3, [sp, #4]
  406992:	e0ab      	b.n	406aec <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  406994:	6820      	ldr	r0, [r4, #0]
  406996:	2301      	movs	r3, #1
  406998:	69a2      	ldr	r2, [r4, #24]
  40699a:	f104 0124 	add.w	r1, r4, #36	; 0x24
  40699e:	7840      	ldrb	r0, [r0, #1]
  4069a0:	4d56      	ldr	r5, [pc, #344]	; (406afc <f_write+0x1f8>)
  4069a2:	47a8      	blx	r5
  4069a4:	b920      	cbnz	r0, 4069b0 <f_write+0xac>
				fp->flag &= ~FA__DIRTY;
  4069a6:	79a3      	ldrb	r3, [r4, #6]
  4069a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4069ac:	71a3      	strb	r3, [r4, #6]
  4069ae:	e064      	b.n	406a7a <f_write+0x176>
					ABORT(fp->fs, FR_DISK_ERR);
  4069b0:	79a3      	ldrb	r3, [r4, #6]
  4069b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4069b6:	71a3      	strb	r3, [r4, #6]
  4069b8:	2301      	movs	r3, #1
  4069ba:	9301      	str	r3, [sp, #4]
  4069bc:	e096      	b.n	406aec <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  4069be:	79a3      	ldrb	r3, [r4, #6]
  4069c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4069c4:	71a3      	strb	r3, [r4, #6]
  4069c6:	2302      	movs	r3, #2
  4069c8:	9301      	str	r3, [sp, #4]
  4069ca:	e08f      	b.n	406aec <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  4069cc:	79a3      	ldrb	r3, [r4, #6]
  4069ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4069d2:	71a3      	strb	r3, [r4, #6]
  4069d4:	2301      	movs	r3, #1
  4069d6:	9301      	str	r3, [sp, #4]
  4069d8:	e088      	b.n	406aec <f_write+0x1e8>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  4069da:	f44f 7200 	mov.w	r2, #512	; 0x200
  4069de:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  4069e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4069e6:	4b46      	ldr	r3, [pc, #280]	; (406b00 <f_write+0x1fc>)
  4069e8:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
  4069ea:	79a3      	ldrb	r3, [r4, #6]
  4069ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4069f0:	71a3      	strb	r3, [r4, #6]
  4069f2:	e065      	b.n	406ac0 <f_write+0x1bc>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
  4069f4:	69a3      	ldr	r3, [r4, #24]
  4069f6:	429d      	cmp	r5, r3
  4069f8:	d003      	beq.n	406a02 <f_write+0xfe>
				if (fp->fptr < fp->fsize &&
  4069fa:	68a2      	ldr	r2, [r4, #8]
  4069fc:	68e3      	ldr	r3, [r4, #12]
  4069fe:	429a      	cmp	r2, r3
  406a00:	d361      	bcc.n	406ac6 <f_write+0x1c2>
			fp->dsect = sect;
  406a02:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  406a04:	68a0      	ldr	r0, [r4, #8]
  406a06:	f3c0 0008 	ubfx	r0, r0, #0, #9
  406a0a:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
  406a0e:	42b5      	cmp	r5, r6
  406a10:	bf28      	it	cs
  406a12:	4635      	movcs	r5, r6
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  406a14:	3024      	adds	r0, #36	; 0x24
  406a16:	462a      	mov	r2, r5
  406a18:	4649      	mov	r1, r9
  406a1a:	4420      	add	r0, r4
  406a1c:	4b38      	ldr	r3, [pc, #224]	; (406b00 <f_write+0x1fc>)
  406a1e:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
  406a20:	79a3      	ldrb	r3, [r4, #6]
  406a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406a26:	71a3      	strb	r3, [r4, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  406a28:	44a9      	add	r9, r5
  406a2a:	68a3      	ldr	r3, [r4, #8]
  406a2c:	442b      	add	r3, r5
  406a2e:	60a3      	str	r3, [r4, #8]
  406a30:	f8d8 3000 	ldr.w	r3, [r8]
  406a34:	442b      	add	r3, r5
  406a36:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  406a3a:	1b76      	subs	r6, r6, r5
  406a3c:	d092      	beq.n	406964 <f_write+0x60>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  406a3e:	68a2      	ldr	r2, [r4, #8]
  406a40:	f3c2 0308 	ubfx	r3, r2, #0, #9
  406a44:	2b00      	cmp	r3, #0
  406a46:	d1dd      	bne.n	406a04 <f_write+0x100>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  406a48:	6820      	ldr	r0, [r4, #0]
  406a4a:	7883      	ldrb	r3, [r0, #2]
  406a4c:	3b01      	subs	r3, #1
  406a4e:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  406a52:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  406a56:	d10c      	bne.n	406a72 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
  406a58:	2a00      	cmp	r2, #0
  406a5a:	f47f af7c 	bne.w	406956 <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  406a5e:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  406a60:	2b00      	cmp	r3, #0
  406a62:	f43f af72 	beq.w	40694a <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  406a66:	2b01      	cmp	r3, #1
  406a68:	d086      	beq.n	406978 <f_write+0x74>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  406a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
  406a6e:	d08a      	beq.n	406986 <f_write+0x82>
				fp->clust = clst;			/* Update current cluster */
  406a70:	6163      	str	r3, [r4, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
  406a72:	79a3      	ldrb	r3, [r4, #6]
  406a74:	f013 0f40 	tst.w	r3, #64	; 0x40
  406a78:	d18c      	bne.n	406994 <f_write+0x90>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  406a7a:	f8d4 a000 	ldr.w	sl, [r4]
  406a7e:	6961      	ldr	r1, [r4, #20]
  406a80:	4650      	mov	r0, sl
  406a82:	4b20      	ldr	r3, [pc, #128]	; (406b04 <f_write+0x200>)
  406a84:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  406a86:	4605      	mov	r5, r0
  406a88:	2800      	cmp	r0, #0
  406a8a:	d098      	beq.n	4069be <f_write+0xba>
			sect += csect;
  406a8c:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  406a8e:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  406a92:	d0af      	beq.n	4069f4 <f_write+0xf0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  406a94:	f89a 3002 	ldrb.w	r3, [sl, #2]
  406a98:	eb07 020b 	add.w	r2, r7, fp
  406a9c:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  406a9e:	bf88      	it	hi
  406aa0:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  406aa4:	fa5f f38b 	uxtb.w	r3, fp
  406aa8:	462a      	mov	r2, r5
  406aaa:	4649      	mov	r1, r9
  406aac:	f89a 0001 	ldrb.w	r0, [sl, #1]
  406ab0:	4f12      	ldr	r7, [pc, #72]	; (406afc <f_write+0x1f8>)
  406ab2:	47b8      	blx	r7
  406ab4:	2800      	cmp	r0, #0
  406ab6:	d189      	bne.n	4069cc <f_write+0xc8>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  406ab8:	69a1      	ldr	r1, [r4, #24]
  406aba:	1b49      	subs	r1, r1, r5
  406abc:	458b      	cmp	fp, r1
  406abe:	d88c      	bhi.n	4069da <f_write+0xd6>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  406ac0:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  406ac4:	e7b0      	b.n	406a28 <f_write+0x124>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  406ac6:	2301      	movs	r3, #1
  406ac8:	462a      	mov	r2, r5
  406aca:	f104 0124 	add.w	r1, r4, #36	; 0x24
  406ace:	f89a 0001 	ldrb.w	r0, [sl, #1]
  406ad2:	4f0d      	ldr	r7, [pc, #52]	; (406b08 <f_write+0x204>)
  406ad4:	47b8      	blx	r7
				if (fp->fptr < fp->fsize &&
  406ad6:	2800      	cmp	r0, #0
  406ad8:	d093      	beq.n	406a02 <f_write+0xfe>
						ABORT(fp->fs, FR_DISK_ERR);
  406ada:	79a3      	ldrb	r3, [r4, #6]
  406adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406ae0:	71a3      	strb	r3, [r4, #6]
  406ae2:	2301      	movs	r3, #1
  406ae4:	9301      	str	r3, [sp, #4]
  406ae6:	e001      	b.n	406aec <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  406ae8:	2302      	movs	r3, #2
  406aea:	9301      	str	r3, [sp, #4]
}
  406aec:	9801      	ldr	r0, [sp, #4]
  406aee:	b003      	add	sp, #12
  406af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406af4:	004053ad 	.word	0x004053ad
  406af8:	00405c5d 	.word	0x00405c5d
  406afc:	00405229 	.word	0x00405229
  406b00:	00405361 	.word	0x00405361
  406b04:	00405375 	.word	0x00405375
  406b08:	004051b9 	.word	0x004051b9

00406b0c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  406b0c:	b538      	push	{r3, r4, r5, lr}
  406b0e:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  406b10:	8881      	ldrh	r1, [r0, #4]
  406b12:	6800      	ldr	r0, [r0, #0]
  406b14:	4b28      	ldr	r3, [pc, #160]	; (406bb8 <f_sync+0xac>)
  406b16:	4798      	blx	r3
	if (res == FR_OK) {
  406b18:	4603      	mov	r3, r0
  406b1a:	b9d0      	cbnz	r0, 406b52 <f_sync+0x46>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  406b1c:	79a2      	ldrb	r2, [r4, #6]
  406b1e:	f012 0f20 	tst.w	r2, #32
  406b22:	d016      	beq.n	406b52 <f_sync+0x46>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
  406b24:	f012 0f40 	tst.w	r2, #64	; 0x40
  406b28:	d00d      	beq.n	406b46 <f_sync+0x3a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  406b2a:	6820      	ldr	r0, [r4, #0]
  406b2c:	2301      	movs	r3, #1
  406b2e:	69a2      	ldr	r2, [r4, #24]
  406b30:	f104 0124 	add.w	r1, r4, #36	; 0x24
  406b34:	7840      	ldrb	r0, [r0, #1]
  406b36:	4d21      	ldr	r5, [pc, #132]	; (406bbc <f_sync+0xb0>)
  406b38:	47a8      	blx	r5
  406b3a:	2800      	cmp	r0, #0
  406b3c:	d139      	bne.n	406bb2 <f_sync+0xa6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
  406b3e:	79a3      	ldrb	r3, [r4, #6]
  406b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  406b44:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  406b46:	69e1      	ldr	r1, [r4, #28]
  406b48:	6820      	ldr	r0, [r4, #0]
  406b4a:	4b1d      	ldr	r3, [pc, #116]	; (406bc0 <f_sync+0xb4>)
  406b4c:	4798      	blx	r3
			if (res == FR_OK) {
  406b4e:	4603      	mov	r3, r0
  406b50:	b108      	cbz	r0, 406b56 <f_sync+0x4a>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  406b52:	4618      	mov	r0, r3
  406b54:	bd38      	pop	{r3, r4, r5, pc}
				dir = fp->dir_ptr;
  406b56:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  406b58:	7aeb      	ldrb	r3, [r5, #11]
  406b5a:	f043 0320 	orr.w	r3, r3, #32
  406b5e:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  406b60:	68e3      	ldr	r3, [r4, #12]
  406b62:	772b      	strb	r3, [r5, #28]
  406b64:	89a3      	ldrh	r3, [r4, #12]
  406b66:	0a1b      	lsrs	r3, r3, #8
  406b68:	776b      	strb	r3, [r5, #29]
  406b6a:	89e3      	ldrh	r3, [r4, #14]
  406b6c:	77ab      	strb	r3, [r5, #30]
  406b6e:	7be3      	ldrb	r3, [r4, #15]
  406b70:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  406b72:	6923      	ldr	r3, [r4, #16]
  406b74:	76ab      	strb	r3, [r5, #26]
  406b76:	8a23      	ldrh	r3, [r4, #16]
  406b78:	0a1b      	lsrs	r3, r3, #8
  406b7a:	76eb      	strb	r3, [r5, #27]
  406b7c:	8a63      	ldrh	r3, [r4, #18]
  406b7e:	752b      	strb	r3, [r5, #20]
  406b80:	8a63      	ldrh	r3, [r4, #18]
  406b82:	0a1b      	lsrs	r3, r3, #8
  406b84:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  406b86:	4b0f      	ldr	r3, [pc, #60]	; (406bc4 <f_sync+0xb8>)
  406b88:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  406b8a:	75a8      	strb	r0, [r5, #22]
  406b8c:	f3c0 2307 	ubfx	r3, r0, #8, #8
  406b90:	75eb      	strb	r3, [r5, #23]
  406b92:	0c03      	lsrs	r3, r0, #16
  406b94:	762b      	strb	r3, [r5, #24]
  406b96:	0e00      	lsrs	r0, r0, #24
  406b98:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  406b9a:	79a3      	ldrb	r3, [r4, #6]
  406b9c:	f023 0320 	bic.w	r3, r3, #32
  406ba0:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  406ba2:	6823      	ldr	r3, [r4, #0]
  406ba4:	2201      	movs	r2, #1
  406ba6:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  406ba8:	6820      	ldr	r0, [r4, #0]
  406baa:	4b07      	ldr	r3, [pc, #28]	; (406bc8 <f_sync+0xbc>)
  406bac:	4798      	blx	r3
  406bae:	4603      	mov	r3, r0
  406bb0:	e7cf      	b.n	406b52 <f_sync+0x46>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  406bb2:	2301      	movs	r3, #1
  406bb4:	e7cd      	b.n	406b52 <f_sync+0x46>
  406bb6:	bf00      	nop
  406bb8:	004053ad 	.word	0x004053ad
  406bbc:	00405229 	.word	0x00405229
  406bc0:	0040590d 	.word	0x0040590d
  406bc4:	00405309 	.word	0x00405309
  406bc8:	00405d99 	.word	0x00405d99

00406bcc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  406bcc:	b510      	push	{r4, lr}
  406bce:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  406bd0:	4b03      	ldr	r3, [pc, #12]	; (406be0 <f_close+0x14>)
  406bd2:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  406bd4:	4603      	mov	r3, r0
  406bd6:	b908      	cbnz	r0, 406bdc <f_close+0x10>
  406bd8:	2200      	movs	r2, #0
  406bda:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  406bdc:	4618      	mov	r0, r3
  406bde:	bd10      	pop	{r4, pc}
  406be0:	00406b0d 	.word	0x00406b0d

00406be4 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
  406be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406be8:	4604      	mov	r4, r0
  406bea:	460e      	mov	r6, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  406bec:	8881      	ldrh	r1, [r0, #4]
  406bee:	6800      	ldr	r0, [r0, #0]
  406bf0:	4b68      	ldr	r3, [pc, #416]	; (406d94 <f_lseek+0x1b0>)
  406bf2:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  406bf4:	4680      	mov	r8, r0
  406bf6:	2800      	cmp	r0, #0
  406bf8:	f040 80c8 	bne.w	406d8c <f_lseek+0x1a8>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
  406bfc:	79a3      	ldrb	r3, [r4, #6]
  406bfe:	f013 0f80 	tst.w	r3, #128	; 0x80
  406c02:	f040 80c1 	bne.w	406d88 <f_lseek+0x1a4>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
  406c06:	68e2      	ldr	r2, [r4, #12]
  406c08:	42b2      	cmp	r2, r6
  406c0a:	d204      	bcs.n	406c16 <f_lseek+0x32>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
  406c0c:	f003 0302 	and.w	r3, r3, #2
#endif
			) ofs = fp->fsize;
  406c10:	2b00      	cmp	r3, #0
  406c12:	bf08      	it	eq
  406c14:	4616      	moveq	r6, r2

		ifptr = fp->fptr;
  406c16:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
  406c18:	2200      	movs	r2, #0
  406c1a:	60a2      	str	r2, [r4, #8]
		if (ofs) {
  406c1c:	2e00      	cmp	r6, #0
  406c1e:	f000 80b5 	beq.w	406d8c <f_lseek+0x1a8>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
  406c22:	6820      	ldr	r0, [r4, #0]
  406c24:	7887      	ldrb	r7, [r0, #2]
  406c26:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
  406c28:	b16b      	cbz	r3, 406c46 <f_lseek+0x62>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
  406c2a:	3b01      	subs	r3, #1
  406c2c:	1e72      	subs	r2, r6, #1
  406c2e:	fbb2 f2f7 	udiv	r2, r2, r7
  406c32:	fbb3 f1f7 	udiv	r1, r3, r7
			if (ifptr > 0 &&
  406c36:	428a      	cmp	r2, r1
  406c38:	d305      	bcc.n	406c46 <f_lseek+0x62>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
  406c3a:	427a      	negs	r2, r7
  406c3c:	4013      	ands	r3, r2
  406c3e:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
  406c40:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
  406c42:	6965      	ldr	r5, [r4, #20]
  406c44:	e002      	b.n	406c4c <f_lseek+0x68>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
  406c46:	6925      	ldr	r5, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
  406c48:	b14d      	cbz	r5, 406c5e <f_lseek+0x7a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
  406c4a:	6165      	str	r5, [r4, #20]
			}
			if (clst != 0) {
  406c4c:	2d00      	cmp	r5, #0
  406c4e:	d062      	beq.n	406d16 <f_lseek+0x132>
				while (ofs > bcs) {						/* Cluster following loop */
  406c50:	42be      	cmp	r6, r7
  406c52:	d93c      	bls.n	406cce <f_lseek+0xea>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
  406c54:	f8df a140 	ldr.w	sl, [pc, #320]	; 406d98 <f_lseek+0x1b4>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
  406c58:	f8df 914c 	ldr.w	r9, [pc, #332]	; 406da8 <f_lseek+0x1c4>
  406c5c:	e02c      	b.n	406cb8 <f_lseek+0xd4>
					clst = create_chain(fp->fs, 0);
  406c5e:	2100      	movs	r1, #0
  406c60:	4b4d      	ldr	r3, [pc, #308]	; (406d98 <f_lseek+0x1b4>)
  406c62:	4798      	blx	r3
  406c64:	4605      	mov	r5, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  406c66:	2801      	cmp	r0, #1
  406c68:	d004      	beq.n	406c74 <f_lseek+0x90>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  406c6a:	f1b0 3fff 	cmp.w	r0, #4294967295
  406c6e:	d008      	beq.n	406c82 <f_lseek+0x9e>
					fp->sclust = clst;
  406c70:	6120      	str	r0, [r4, #16]
  406c72:	e7ea      	b.n	406c4a <f_lseek+0x66>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  406c74:	79a3      	ldrb	r3, [r4, #6]
  406c76:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406c7a:	71a3      	strb	r3, [r4, #6]
  406c7c:	f04f 0802 	mov.w	r8, #2
  406c80:	e084      	b.n	406d8c <f_lseek+0x1a8>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  406c82:	79a3      	ldrb	r3, [r4, #6]
  406c84:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406c88:	71a3      	strb	r3, [r4, #6]
  406c8a:	f04f 0801 	mov.w	r8, #1
  406c8e:	e07d      	b.n	406d8c <f_lseek+0x1a8>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
  406c90:	4629      	mov	r1, r5
  406c92:	6820      	ldr	r0, [r4, #0]
  406c94:	47c8      	blx	r9
  406c96:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  406c98:	f1b5 3fff 	cmp.w	r5, #4294967295
  406c9c:	d029      	beq.n	406cf2 <f_lseek+0x10e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  406c9e:	2d01      	cmp	r5, #1
  406ca0:	d92e      	bls.n	406d00 <f_lseek+0x11c>
  406ca2:	6823      	ldr	r3, [r4, #0]
  406ca4:	699b      	ldr	r3, [r3, #24]
  406ca6:	429d      	cmp	r5, r3
  406ca8:	d22a      	bcs.n	406d00 <f_lseek+0x11c>
					fp->clust = clst;
  406caa:	6165      	str	r5, [r4, #20]
					fp->fptr += bcs;
  406cac:	68a3      	ldr	r3, [r4, #8]
  406cae:	443b      	add	r3, r7
  406cb0:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
  406cb2:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
  406cb4:	42b7      	cmp	r7, r6
  406cb6:	d20a      	bcs.n	406cce <f_lseek+0xea>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
  406cb8:	79a3      	ldrb	r3, [r4, #6]
  406cba:	f013 0f02 	tst.w	r3, #2
  406cbe:	d0e7      	beq.n	406c90 <f_lseek+0xac>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
  406cc0:	4629      	mov	r1, r5
  406cc2:	6820      	ldr	r0, [r4, #0]
  406cc4:	47d0      	blx	sl
						if (clst == 0) {				/* When disk gets full, clip file size */
  406cc6:	4605      	mov	r5, r0
  406cc8:	2800      	cmp	r0, #0
  406cca:	d1e5      	bne.n	406c98 <f_lseek+0xb4>
							ofs = bcs; break;
  406ccc:	463e      	mov	r6, r7
				}
				fp->fptr += ofs;
  406cce:	68a3      	ldr	r3, [r4, #8]
  406cd0:	4433      	add	r3, r6
  406cd2:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
  406cd4:	f3c6 0308 	ubfx	r3, r6, #0, #9
  406cd8:	b1e3      	cbz	r3, 406d14 <f_lseek+0x130>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
  406cda:	4629      	mov	r1, r5
  406cdc:	6820      	ldr	r0, [r4, #0]
  406cde:	4b2f      	ldr	r3, [pc, #188]	; (406d9c <f_lseek+0x1b8>)
  406ce0:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
  406ce2:	b9a0      	cbnz	r0, 406d0e <f_lseek+0x12a>
  406ce4:	79a3      	ldrb	r3, [r4, #6]
  406ce6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406cea:	71a3      	strb	r3, [r4, #6]
  406cec:	f04f 0802 	mov.w	r8, #2
  406cf0:	e04c      	b.n	406d8c <f_lseek+0x1a8>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  406cf2:	79a3      	ldrb	r3, [r4, #6]
  406cf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406cf8:	71a3      	strb	r3, [r4, #6]
  406cfa:	f04f 0801 	mov.w	r8, #1
  406cfe:	e045      	b.n	406d8c <f_lseek+0x1a8>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  406d00:	79a3      	ldrb	r3, [r4, #6]
  406d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406d06:	71a3      	strb	r3, [r4, #6]
  406d08:	f04f 0802 	mov.w	r8, #2
  406d0c:	e03e      	b.n	406d8c <f_lseek+0x1a8>
					nsect += ofs / SS(fp->fs);
  406d0e:	eb00 2556 	add.w	r5, r0, r6, lsr #9
  406d12:	e000      	b.n	406d16 <f_lseek+0x132>
		fp->fptr = nsect = 0;
  406d14:	2500      	movs	r5, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
  406d16:	68a3      	ldr	r3, [r4, #8]
  406d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
  406d1c:	b1e3      	cbz	r3, 406d58 <f_lseek+0x174>
  406d1e:	69a2      	ldr	r2, [r4, #24]
  406d20:	4295      	cmp	r5, r2
  406d22:	d019      	beq.n	406d58 <f_lseek+0x174>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
  406d24:	79a3      	ldrb	r3, [r4, #6]
  406d26:	f013 0f40 	tst.w	r3, #64	; 0x40
  406d2a:	d00b      	beq.n	406d44 <f_lseek+0x160>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  406d2c:	6820      	ldr	r0, [r4, #0]
  406d2e:	2301      	movs	r3, #1
  406d30:	f104 0124 	add.w	r1, r4, #36	; 0x24
  406d34:	7840      	ldrb	r0, [r0, #1]
  406d36:	4e1a      	ldr	r6, [pc, #104]	; (406da0 <f_lseek+0x1bc>)
  406d38:	47b0      	blx	r6
  406d3a:	b9b8      	cbnz	r0, 406d6c <f_lseek+0x188>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
  406d3c:	79a3      	ldrb	r3, [r4, #6]
  406d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  406d42:	71a3      	strb	r3, [r4, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
  406d44:	6820      	ldr	r0, [r4, #0]
  406d46:	2301      	movs	r3, #1
  406d48:	462a      	mov	r2, r5
  406d4a:	f104 0124 	add.w	r1, r4, #36	; 0x24
  406d4e:	7840      	ldrb	r0, [r0, #1]
  406d50:	4e14      	ldr	r6, [pc, #80]	; (406da4 <f_lseek+0x1c0>)
  406d52:	47b0      	blx	r6
  406d54:	b988      	cbnz	r0, 406d7a <f_lseek+0x196>
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
  406d56:	61a5      	str	r5, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
  406d58:	68a3      	ldr	r3, [r4, #8]
  406d5a:	68e2      	ldr	r2, [r4, #12]
  406d5c:	4293      	cmp	r3, r2
  406d5e:	d915      	bls.n	406d8c <f_lseek+0x1a8>
			fp->fsize = fp->fptr;
  406d60:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
  406d62:	79a3      	ldrb	r3, [r4, #6]
  406d64:	f043 0320 	orr.w	r3, r3, #32
  406d68:	71a3      	strb	r3, [r4, #6]
  406d6a:	e00f      	b.n	406d8c <f_lseek+0x1a8>
					ABORT(fp->fs, FR_DISK_ERR);
  406d6c:	79a3      	ldrb	r3, [r4, #6]
  406d6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406d72:	71a3      	strb	r3, [r4, #6]
  406d74:	f04f 0801 	mov.w	r8, #1
  406d78:	e008      	b.n	406d8c <f_lseek+0x1a8>
				ABORT(fp->fs, FR_DISK_ERR);
  406d7a:	79a3      	ldrb	r3, [r4, #6]
  406d7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406d80:	71a3      	strb	r3, [r4, #6]
  406d82:	f04f 0801 	mov.w	r8, #1
  406d86:	e001      	b.n	406d8c <f_lseek+0x1a8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  406d88:	f04f 0802 	mov.w	r8, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
  406d8c:	4640      	mov	r0, r8
  406d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406d92:	bf00      	nop
  406d94:	004053ad 	.word	0x004053ad
  406d98:	00405c5d 	.word	0x00405c5d
  406d9c:	00405375 	.word	0x00405375
  406da0:	00405229 	.word	0x00405229
  406da4:	004051b9 	.word	0x004051b9
  406da8:	0040599d 	.word	0x0040599d

00406dac <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
  406dac:	b530      	push	{r4, r5, lr}
  406dae:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  406db2:	9001      	str	r0, [sp, #4]
  406db4:	460d      	mov	r5, r1
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
  406db6:	2200      	movs	r2, #0
  406db8:	a985      	add	r1, sp, #532	; 0x214
  406dba:	a801      	add	r0, sp, #4
  406dbc:	4b0d      	ldr	r3, [pc, #52]	; (406df4 <f_stat+0x48>)
  406dbe:	4798      	blx	r3
	if (res == FR_OK) {
  406dc0:	4604      	mov	r4, r0
  406dc2:	b118      	cbz	r0, 406dcc <f_stat+0x20>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
  406dc4:	4620      	mov	r0, r4
  406dc6:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  406dca:	bd30      	pop	{r4, r5, pc}
		INIT_BUF(dj);
  406dcc:	ab82      	add	r3, sp, #520	; 0x208
  406dce:	938b      	str	r3, [sp, #556]	; 0x22c
  406dd0:	ab02      	add	r3, sp, #8
  406dd2:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
  406dd4:	9901      	ldr	r1, [sp, #4]
  406dd6:	a885      	add	r0, sp, #532	; 0x214
  406dd8:	4b07      	ldr	r3, [pc, #28]	; (406df8 <f_stat+0x4c>)
  406dda:	4798      	blx	r3
		if (res == FR_OK) {				/* Follow completed */
  406ddc:	4604      	mov	r4, r0
  406dde:	2800      	cmp	r0, #0
  406de0:	d1f0      	bne.n	406dc4 <f_stat+0x18>
			if (dj.dir)		/* Found an object */
  406de2:	9b8a      	ldr	r3, [sp, #552]	; 0x228
  406de4:	b123      	cbz	r3, 406df0 <f_stat+0x44>
				get_fileinfo(&dj, fno);
  406de6:	4629      	mov	r1, r5
  406de8:	a885      	add	r0, sp, #532	; 0x214
  406dea:	4b04      	ldr	r3, [pc, #16]	; (406dfc <f_stat+0x50>)
  406dec:	4798      	blx	r3
  406dee:	e7e9      	b.n	406dc4 <f_stat+0x18>
				res = FR_INVALID_NAME;
  406df0:	2406      	movs	r4, #6
  406df2:	e7e7      	b.n	406dc4 <f_stat+0x18>
  406df4:	00405471 	.word	0x00405471
  406df8:	00406145 	.word	0x00406145
  406dfc:	004057d5 	.word	0x004057d5

00406e00 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
  406e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406e04:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  406e08:	9001      	str	r0, [sp, #4]
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
  406e0a:	4b6e      	ldr	r3, [pc, #440]	; (406fc4 <f_mkdir+0x1c4>)
  406e0c:	4798      	blx	r3
  406e0e:	4607      	mov	r7, r0
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
  406e10:	2201      	movs	r2, #1
  406e12:	a985      	add	r1, sp, #532	; 0x214
  406e14:	a801      	add	r0, sp, #4
  406e16:	4b6c      	ldr	r3, [pc, #432]	; (406fc8 <f_mkdir+0x1c8>)
  406e18:	4798      	blx	r3
	if (res == FR_OK) {
  406e1a:	4605      	mov	r5, r0
  406e1c:	b120      	cbz	r0, 406e28 <f_mkdir+0x28>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
  406e1e:	4628      	mov	r0, r5
  406e20:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  406e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_BUF(dj);
  406e28:	ab82      	add	r3, sp, #520	; 0x208
  406e2a:	938b      	str	r3, [sp, #556]	; 0x22c
  406e2c:	ab02      	add	r3, sp, #8
  406e2e:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);			/* Follow the file path */
  406e30:	9901      	ldr	r1, [sp, #4]
  406e32:	a885      	add	r0, sp, #532	; 0x214
  406e34:	4b65      	ldr	r3, [pc, #404]	; (406fcc <f_mkdir+0x1cc>)
  406e36:	4798      	blx	r3
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
  406e38:	2800      	cmp	r0, #0
  406e3a:	f000 809a 	beq.w	406f72 <f_mkdir+0x172>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
  406e3e:	2804      	cmp	r0, #4
  406e40:	d001      	beq.n	406e46 <f_mkdir+0x46>
		res = follow_path(&dj, path);			/* Follow the file path */
  406e42:	4605      	mov	r5, r0
	LEAVE_FF(dj.fs, res);
  406e44:	e7eb      	b.n	406e1e <f_mkdir+0x1e>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
  406e46:	2100      	movs	r1, #0
  406e48:	9885      	ldr	r0, [sp, #532]	; 0x214
  406e4a:	4b61      	ldr	r3, [pc, #388]	; (406fd0 <f_mkdir+0x1d0>)
  406e4c:	4798      	blx	r3
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
  406e4e:	4681      	mov	r9, r0
  406e50:	b140      	cbz	r0, 406e64 <f_mkdir+0x64>
			if (dcl == 1) res = FR_INT_ERR;
  406e52:	2801      	cmp	r0, #1
  406e54:	d101      	bne.n	406e5a <f_mkdir+0x5a>
  406e56:	2502      	movs	r5, #2
  406e58:	e005      	b.n	406e66 <f_mkdir+0x66>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
  406e5a:	f1b0 3fff 	cmp.w	r0, #4294967295
  406e5e:	d102      	bne.n	406e66 <f_mkdir+0x66>
  406e60:	2501      	movs	r5, #1
  406e62:	e08c      	b.n	406f7e <f_mkdir+0x17e>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
  406e64:	2507      	movs	r5, #7
			if (res == FR_OK)					/* Flush FAT */
  406e66:	b125      	cbz	r5, 406e72 <f_mkdir+0x72>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
  406e68:	4649      	mov	r1, r9
  406e6a:	9885      	ldr	r0, [sp, #532]	; 0x214
  406e6c:	4b59      	ldr	r3, [pc, #356]	; (406fd4 <f_mkdir+0x1d4>)
  406e6e:	4798      	blx	r3
  406e70:	e7d5      	b.n	406e1e <f_mkdir+0x1e>
				res = move_window(dj.fs, 0);
  406e72:	2100      	movs	r1, #0
  406e74:	9885      	ldr	r0, [sp, #532]	; 0x214
  406e76:	4b58      	ldr	r3, [pc, #352]	; (406fd8 <f_mkdir+0x1d8>)
  406e78:	4798      	blx	r3
			if (res == FR_OK) {					/* Initialize the new directory table */
  406e7a:	4605      	mov	r5, r0
  406e7c:	2800      	cmp	r0, #0
  406e7e:	d1f3      	bne.n	406e68 <f_mkdir+0x68>
				dsc = clust2sect(dj.fs, dcl);
  406e80:	9e85      	ldr	r6, [sp, #532]	; 0x214
  406e82:	4649      	mov	r1, r9
  406e84:	4630      	mov	r0, r6
  406e86:	4b55      	ldr	r3, [pc, #340]	; (406fdc <f_mkdir+0x1dc>)
  406e88:	4798      	blx	r3
  406e8a:	4605      	mov	r5, r0
				dir = dj.fs->win;
  406e8c:	f106 0330 	add.w	r3, r6, #48	; 0x30
  406e90:	9300      	str	r3, [sp, #0]
  406e92:	f506 720c 	add.w	r2, r6, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  406e96:	461c      	mov	r4, r3
		*d++ = (BYTE)val;
  406e98:	2300      	movs	r3, #0
  406e9a:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt--)
  406e9e:	42a2      	cmp	r2, r4
  406ea0:	d1fb      	bne.n	406e9a <f_mkdir+0x9a>
  406ea2:	f106 013b 	add.w	r1, r6, #59	; 0x3b
  406ea6:	9b00      	ldr	r3, [sp, #0]
		*d++ = (BYTE)val;
  406ea8:	2220      	movs	r2, #32
  406eaa:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  406eae:	428b      	cmp	r3, r1
  406eb0:	d1fb      	bne.n	406eaa <f_mkdir+0xaa>
				dir[DIR_Name] = '.';
  406eb2:	f04f 082e 	mov.w	r8, #46	; 0x2e
  406eb6:	f886 8030 	strb.w	r8, [r6, #48]	; 0x30
				dir[DIR_Attr] = AM_DIR;
  406eba:	2310      	movs	r3, #16
  406ebc:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
				ST_DWORD(dir+DIR_WrtTime, tim);
  406ec0:	f886 7046 	strb.w	r7, [r6, #70]	; 0x46
  406ec4:	f3c7 2307 	ubfx	r3, r7, #8, #8
  406ec8:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
  406ecc:	0c3b      	lsrs	r3, r7, #16
  406ece:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
  406ed2:	0e3b      	lsrs	r3, r7, #24
  406ed4:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
				ST_CLUST(dir, dcl);
  406ed8:	f886 904a 	strb.w	r9, [r6, #74]	; 0x4a
  406edc:	f3c9 2307 	ubfx	r3, r9, #8, #8
  406ee0:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
  406ee4:	ea4f 4319 	mov.w	r3, r9, lsr #16
  406ee8:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
  406eec:	0a1b      	lsrs	r3, r3, #8
  406eee:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
  406ef2:	2220      	movs	r2, #32
  406ef4:	9900      	ldr	r1, [sp, #0]
  406ef6:	f106 0050 	add.w	r0, r6, #80	; 0x50
  406efa:	4b39      	ldr	r3, [pc, #228]	; (406fe0 <f_mkdir+0x1e0>)
  406efc:	4798      	blx	r3
				dir[33] = '.'; pcl = dj.sclust;
  406efe:	f886 8051 	strb.w	r8, [r6, #81]	; 0x51
  406f02:	9b87      	ldr	r3, [sp, #540]	; 0x21c
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  406f04:	9a85      	ldr	r2, [sp, #532]	; 0x214
  406f06:	7811      	ldrb	r1, [r2, #0]
  406f08:	2903      	cmp	r1, #3
  406f0a:	d018      	beq.n	406f3e <f_mkdir+0x13e>
				ST_CLUST(dir+SZ_DIR, pcl);
  406f0c:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
  406f10:	f3c3 2107 	ubfx	r1, r3, #8, #8
  406f14:	f886 106b 	strb.w	r1, [r6, #107]	; 0x6b
  406f18:	0c1b      	lsrs	r3, r3, #16
  406f1a:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
  406f1e:	0a1b      	lsrs	r3, r3, #8
  406f20:	f886 3065 	strb.w	r3, [r6, #101]	; 0x65
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
  406f24:	7893      	ldrb	r3, [r2, #2]
  406f26:	b333      	cbz	r3, 406f76 <f_mkdir+0x176>
  406f28:	f103 3aff 	add.w	sl, r3, #4294967295
  406f2c:	fa5f fa8a 	uxtb.w	sl, sl
  406f30:	f10a 0a01 	add.w	sl, sl, #1
  406f34:	44aa      	add	sl, r5
					dj.fs->wflag = 1;
  406f36:	f04f 0b01 	mov.w	fp, #1
					res = move_window(dj.fs, 0);
  406f3a:	2600      	movs	r6, #0
  406f3c:	e007      	b.n	406f4e <f_mkdir+0x14e>
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  406f3e:	6a51      	ldr	r1, [r2, #36]	; 0x24
					pcl = 0;
  406f40:	428b      	cmp	r3, r1
  406f42:	bf08      	it	eq
  406f44:	2300      	moveq	r3, #0
  406f46:	e7e1      	b.n	406f0c <f_mkdir+0x10c>
					dj.fs->winsect = dsc++;
  406f48:	4645      	mov	r5, r8
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
  406f4a:	45d0      	cmp	r8, sl
  406f4c:	d013      	beq.n	406f76 <f_mkdir+0x176>
					dj.fs->winsect = dsc++;
  406f4e:	9885      	ldr	r0, [sp, #532]	; 0x214
  406f50:	f105 0801 	add.w	r8, r5, #1
  406f54:	62c5      	str	r5, [r0, #44]	; 0x2c
					dj.fs->wflag = 1;
  406f56:	f880 b004 	strb.w	fp, [r0, #4]
					res = move_window(dj.fs, 0);
  406f5a:	4631      	mov	r1, r6
  406f5c:	4b1e      	ldr	r3, [pc, #120]	; (406fd8 <f_mkdir+0x1d8>)
  406f5e:	4798      	blx	r3
					if (res != FR_OK) break;
  406f60:	4605      	mov	r5, r0
  406f62:	2800      	cmp	r0, #0
  406f64:	d180      	bne.n	406e68 <f_mkdir+0x68>
  406f66:	9b00      	ldr	r3, [sp, #0]
		*d++ = (BYTE)val;
  406f68:	f803 6b01 	strb.w	r6, [r3], #1
	while (cnt--)
  406f6c:	429c      	cmp	r4, r3
  406f6e:	d1fb      	bne.n	406f68 <f_mkdir+0x168>
  406f70:	e7ea      	b.n	406f48 <f_mkdir+0x148>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
  406f72:	2508      	movs	r5, #8
  406f74:	e753      	b.n	406e1e <f_mkdir+0x1e>
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
  406f76:	a885      	add	r0, sp, #532	; 0x214
  406f78:	4b1a      	ldr	r3, [pc, #104]	; (406fe4 <f_mkdir+0x1e4>)
  406f7a:	4798      	blx	r3
  406f7c:	4605      	mov	r5, r0
			if (res != FR_OK) {
  406f7e:	2d00      	cmp	r5, #0
  406f80:	f47f af72 	bne.w	406e68 <f_mkdir+0x68>
				dir = dj.dir;
  406f84:	9b8a      	ldr	r3, [sp, #552]	; 0x228
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
  406f86:	2210      	movs	r2, #16
  406f88:	72da      	strb	r2, [r3, #11]
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
  406f8a:	759f      	strb	r7, [r3, #22]
  406f8c:	f3c7 2207 	ubfx	r2, r7, #8, #8
  406f90:	75da      	strb	r2, [r3, #23]
  406f92:	0c3a      	lsrs	r2, r7, #16
  406f94:	761a      	strb	r2, [r3, #24]
  406f96:	0e3f      	lsrs	r7, r7, #24
  406f98:	765f      	strb	r7, [r3, #25]
				ST_CLUST(dir, dcl);					/* Table start cluster */
  406f9a:	f883 901a 	strb.w	r9, [r3, #26]
  406f9e:	f3c9 2207 	ubfx	r2, r9, #8, #8
  406fa2:	76da      	strb	r2, [r3, #27]
  406fa4:	ea4f 4919 	mov.w	r9, r9, lsr #16
  406fa8:	f883 9014 	strb.w	r9, [r3, #20]
  406fac:	ea4f 2919 	mov.w	r9, r9, lsr #8
  406fb0:	f883 9015 	strb.w	r9, [r3, #21]
				dj.fs->wflag = 1;
  406fb4:	9885      	ldr	r0, [sp, #532]	; 0x214
  406fb6:	2301      	movs	r3, #1
  406fb8:	7103      	strb	r3, [r0, #4]
				res = sync(dj.fs);
  406fba:	4b0b      	ldr	r3, [pc, #44]	; (406fe8 <f_mkdir+0x1e8>)
  406fbc:	4798      	blx	r3
  406fbe:	4605      	mov	r5, r0
  406fc0:	e72d      	b.n	406e1e <f_mkdir+0x1e>
  406fc2:	bf00      	nop
  406fc4:	00405309 	.word	0x00405309
  406fc8:	00405471 	.word	0x00405471
  406fcc:	00406145 	.word	0x00406145
  406fd0:	00405c5d 	.word	0x00405c5d
  406fd4:	00405d1d 	.word	0x00405d1d
  406fd8:	0040590d 	.word	0x0040590d
  406fdc:	00405375 	.word	0x00405375
  406fe0:	00405361 	.word	0x00405361
  406fe4:	00406469 	.word	0x00406469
  406fe8:	00405d99 	.word	0x00405d99

00406fec <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  406fec:	b510      	push	{r4, lr}
  406fee:	b082      	sub	sp, #8
  406ff0:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  406ff2:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  406ff6:	ab01      	add	r3, sp, #4
  406ff8:	2201      	movs	r2, #1
  406ffa:	4669      	mov	r1, sp
  406ffc:	4620      	mov	r0, r4
  406ffe:	4c05      	ldr	r4, [pc, #20]	; (407014 <f_putc+0x28>)
  407000:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  407002:	9b01      	ldr	r3, [sp, #4]
  407004:	2b01      	cmp	r3, #1
}
  407006:	bf0c      	ite	eq
  407008:	2001      	moveq	r0, #1
  40700a:	f04f 30ff 	movne.w	r0, #4294967295
  40700e:	b002      	add	sp, #8
  407010:	bd10      	pop	{r4, pc}
  407012:	bf00      	nop
  407014:	00406905 	.word	0x00406905

00407018 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  407018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;


	for (n = 0; *str; str++, n++) {
  40701a:	7803      	ldrb	r3, [r0, #0]
  40701c:	b17b      	cbz	r3, 40703e <f_puts+0x26>
  40701e:	460e      	mov	r6, r1
  407020:	4605      	mov	r5, r0
  407022:	1c44      	adds	r4, r0, #1
		if (f_putc(*str, fil) == EOF) return EOF;
  407024:	4f07      	ldr	r7, [pc, #28]	; (407044 <f_puts+0x2c>)
  407026:	4631      	mov	r1, r6
  407028:	4618      	mov	r0, r3
  40702a:	47b8      	blx	r7
  40702c:	f1b0 3fff 	cmp.w	r0, #4294967295
  407030:	d006      	beq.n	407040 <f_puts+0x28>
  407032:	1b60      	subs	r0, r4, r5
	for (n = 0; *str; str++, n++) {
  407034:	f814 3b01 	ldrb.w	r3, [r4], #1
  407038:	2b00      	cmp	r3, #0
  40703a:	d1f4      	bne.n	407026 <f_puts+0xe>
  40703c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40703e:	2000      	movs	r0, #0
	}
	return n;
}
  407040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407042:	bf00      	nop
  407044:	00406fed 	.word	0x00406fed

00407048 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  407048:	287f      	cmp	r0, #127	; 0x7f
  40704a:	d919      	bls.n	407080 <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  40704c:	b971      	cbnz	r1, 40706c <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  40704e:	28c7      	cmp	r0, #199	; 0xc7
  407050:	d013      	beq.n	40707a <ff_convert+0x32>
  407052:	4a0c      	ldr	r2, [pc, #48]	; (407084 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  407054:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  407056:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  40705a:	4281      	cmp	r1, r0
  40705c:	d003      	beq.n	407066 <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  40705e:	3301      	adds	r3, #1
  407060:	b29b      	uxth	r3, r3
  407062:	2b80      	cmp	r3, #128	; 0x80
  407064:	d1f7      	bne.n	407056 <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  407066:	3380      	adds	r3, #128	; 0x80
  407068:	b2d8      	uxtb	r0, r3
  40706a:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40706c:	28ff      	cmp	r0, #255	; 0xff
  40706e:	d806      	bhi.n	40707e <ff_convert+0x36>
  407070:	3880      	subs	r0, #128	; 0x80
  407072:	4b04      	ldr	r3, [pc, #16]	; (407084 <ff_convert+0x3c>)
  407074:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  407078:	4770      	bx	lr
				if (src == Tbl[c]) break;
  40707a:	2300      	movs	r3, #0
  40707c:	e7f3      	b.n	407066 <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40707e:	2000      	movs	r0, #0
		}
	}

	return c;
}
  407080:	4770      	bx	lr
  407082:	bf00      	nop
  407084:	0040fbc0 	.word	0x0040fbc0

00407088 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  407088:	2861      	cmp	r0, #97	; 0x61
  40708a:	d00e      	beq.n	4070aa <ff_wtoupper+0x22>
  40708c:	4908      	ldr	r1, [pc, #32]	; (4070b0 <ff_wtoupper+0x28>)
  40708e:	2200      	movs	r2, #0
  407090:	3201      	adds	r2, #1
  407092:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  407096:	4283      	cmp	r3, r0
  407098:	d001      	beq.n	40709e <ff_wtoupper+0x16>
  40709a:	2b00      	cmp	r3, #0
  40709c:	d1f8      	bne.n	407090 <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  40709e:	b11b      	cbz	r3, 4070a8 <ff_wtoupper+0x20>
  4070a0:	4b04      	ldr	r3, [pc, #16]	; (4070b4 <ff_wtoupper+0x2c>)
  4070a2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  4070a6:	4770      	bx	lr
  4070a8:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  4070aa:	2200      	movs	r2, #0
  4070ac:	e7f8      	b.n	4070a0 <ff_wtoupper+0x18>
  4070ae:	bf00      	nop
  4070b0:	0040fcc0 	.word	0x0040fcc0
  4070b4:	0040fea0 	.word	0x0040fea0

004070b8 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  4070b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4070ba:	4b1b      	ldr	r3, [pc, #108]	; (407128 <SCB_EnableDCache+0x70>)
  4070bc:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4070c0:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4070c4:	f007 0007 	and.w	r0, r7, #7
  4070c8:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4070ca:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4070ce:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4070d2:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4070d6:	f3bf 8f4f 	dsb	sy
  4070da:	f04f 34ff 	mov.w	r4, #4294967295
  4070de:	fa04 fc00 	lsl.w	ip, r4, r0
  4070e2:	fa06 f000 	lsl.w	r0, r6, r0
  4070e6:	fa04 f40e 	lsl.w	r4, r4, lr
  4070ea:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4070ee:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4070f0:	463a      	mov	r2, r7
  4070f2:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4070f4:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  4070f8:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4070fc:	3a01      	subs	r2, #1
  4070fe:	4423      	add	r3, r4
  407100:	f1b2 3fff 	cmp.w	r2, #4294967295
  407104:	d1f6      	bne.n	4070f4 <SCB_EnableDCache+0x3c>
        } while(sets--);
  407106:	3e01      	subs	r6, #1
  407108:	4460      	add	r0, ip
  40710a:	f1b6 3fff 	cmp.w	r6, #4294967295
  40710e:	d1ef      	bne.n	4070f0 <SCB_EnableDCache+0x38>
  407110:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  407114:	4a04      	ldr	r2, [pc, #16]	; (407128 <SCB_EnableDCache+0x70>)
  407116:	6953      	ldr	r3, [r2, #20]
  407118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40711c:	6153      	str	r3, [r2, #20]
  40711e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407122:	f3bf 8f6f 	isb	sy
  407126:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407128:	e000ed00 	.word	0xe000ed00

0040712c <SCB_DisableDCache>:
/** \brief Disable D-Cache

    The function turns off D-Cache
  */
__STATIC_INLINE void SCB_DisableDCache(void)
{
  40712c:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40712e:	4b1a      	ldr	r3, [pc, #104]	; (407198 <SCB_DisableDCache+0x6c>)
  407130:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  407134:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  407138:	f007 0007 	and.w	r0, r7, #7
  40713c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40713e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  407142:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  407146:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40714a:	f3bf 8f4f 	dsb	sy

    __DSB();

    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  40714e:	695a      	ldr	r2, [r3, #20]
  407150:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  407154:	615a      	str	r2, [r3, #20]
  407156:	f04f 34ff 	mov.w	r4, #4294967295
  40715a:	fa04 fc00 	lsl.w	ip, r4, r0
  40715e:	fa06 f000 	lsl.w	r0, r6, r0
  407162:	fa04 f40e 	lsl.w	r4, r4, lr
  407166:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  40716a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40716c:	463a      	mov	r2, r7
  40716e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  407170:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  407174:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  407178:	3a01      	subs	r2, #1
  40717a:	4423      	add	r3, r4
  40717c:	f1b2 3fff 	cmp.w	r2, #4294967295
  407180:	d1f6      	bne.n	407170 <SCB_DisableDCache+0x44>
        } while(sets--);
  407182:	3e01      	subs	r6, #1
  407184:	4460      	add	r0, ip
  407186:	f1b6 3fff 	cmp.w	r6, #4294967295
  40718a:	d1ef      	bne.n	40716c <SCB_DisableDCache+0x40>
  40718c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407190:	f3bf 8f6f 	isb	sy
  407194:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407196:	bf00      	nop
  407198:	e000ed00 	.word	0xe000ed00

0040719c <SCB_CleanInvalidateDCache>:
/** \brief Clean & Invalidate D-Cache

    The function cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache(void)
{
  40719c:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40719e:	4b18      	ldr	r3, [pc, #96]	; (407200 <SCB_CleanInvalidateDCache+0x64>)
  4071a0:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4071a4:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4071a8:	f007 0007 	and.w	r0, r7, #7
  4071ac:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4071ae:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4071b2:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4071b6:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4071ba:	f3bf 8f4f 	dsb	sy
  4071be:	f04f 34ff 	mov.w	r4, #4294967295
  4071c2:	fa04 fc00 	lsl.w	ip, r4, r0
  4071c6:	fa06 f000 	lsl.w	r0, r6, r0
  4071ca:	fa04 f40e 	lsl.w	r4, r4, lr
  4071ce:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  4071d2:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4071d4:	463a      	mov	r2, r7
  4071d6:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4071d8:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  4071dc:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  4071e0:	3a01      	subs	r2, #1
  4071e2:	4423      	add	r3, r4
  4071e4:	f1b2 3fff 	cmp.w	r2, #4294967295
  4071e8:	d1f6      	bne.n	4071d8 <SCB_CleanInvalidateDCache+0x3c>
        } while(sets--);
  4071ea:	3e01      	subs	r6, #1
  4071ec:	4460      	add	r0, ip
  4071ee:	f1b6 3fff 	cmp.w	r6, #4294967295
  4071f2:	d1ef      	bne.n	4071d4 <SCB_CleanInvalidateDCache+0x38>
  4071f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4071f8:	f3bf 8f6f 	isb	sy
  4071fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4071fe:	bf00      	nop
  407200:	e000ed00 	.word	0xe000ed00

00407204 <hex1ToAscii>:
 /***********************************************************************/
 /*  hex1ToAscii nibble to 2-byte Ascii
 /***********************************************************************/
 static unsigned int hex1ToAscii(int hex){
   int a;
   hex &= 0x000F;
  407204:	f000 000f 	and.w	r0, r0, #15
     switch (hex) {
  407208:	280f      	cmp	r0, #15
  40720a:	d80a      	bhi.n	407222 <hex1ToAscii+0x1e>
  40720c:	e8df f000 	tbb	[pc, r0]
  407210:	0f0d0b08 	.word	0x0f0d0b08
  407214:	17151311 	.word	0x17151311
  407218:	1f1d1b19 	.word	0x1f1d1b19
  40721c:	27252321 	.word	0x27252321
       case 0: a = 0x30;
  407220:	2330      	movs	r3, #48	; 0x30
       break;
       case 15: a = 0x46;
       break;
     };
    return a;
 }
  407222:	4618      	mov	r0, r3
  407224:	4770      	bx	lr
       case 1: a = 0x31;
  407226:	2331      	movs	r3, #49	; 0x31
       break;
  407228:	e7fb      	b.n	407222 <hex1ToAscii+0x1e>
       case 2: a = 0x32;
  40722a:	2332      	movs	r3, #50	; 0x32
       break;
  40722c:	e7f9      	b.n	407222 <hex1ToAscii+0x1e>
       case 3: a = 0x33;
  40722e:	2333      	movs	r3, #51	; 0x33
       break;
  407230:	e7f7      	b.n	407222 <hex1ToAscii+0x1e>
       case 4: a = 0x34;
  407232:	2334      	movs	r3, #52	; 0x34
       break;
  407234:	e7f5      	b.n	407222 <hex1ToAscii+0x1e>
       case 5: a = 0x35;
  407236:	2335      	movs	r3, #53	; 0x35
       break;
  407238:	e7f3      	b.n	407222 <hex1ToAscii+0x1e>
       case 6: a = 0x36;
  40723a:	2336      	movs	r3, #54	; 0x36
       break;
  40723c:	e7f1      	b.n	407222 <hex1ToAscii+0x1e>
       case 7: a = 0x37;
  40723e:	2337      	movs	r3, #55	; 0x37
       break;
  407240:	e7ef      	b.n	407222 <hex1ToAscii+0x1e>
       case 8: a = 0x38;
  407242:	2338      	movs	r3, #56	; 0x38
       break;
  407244:	e7ed      	b.n	407222 <hex1ToAscii+0x1e>
       case 9: a = 0x39;
  407246:	2339      	movs	r3, #57	; 0x39
       break;
  407248:	e7eb      	b.n	407222 <hex1ToAscii+0x1e>
       case 10: a = 0x41;
  40724a:	2341      	movs	r3, #65	; 0x41
       break;
  40724c:	e7e9      	b.n	407222 <hex1ToAscii+0x1e>
       case 11: a = 0x42;
  40724e:	2342      	movs	r3, #66	; 0x42
       break;
  407250:	e7e7      	b.n	407222 <hex1ToAscii+0x1e>
       case 12: a = 0x43;
  407252:	2343      	movs	r3, #67	; 0x43
       break;
  407254:	e7e5      	b.n	407222 <hex1ToAscii+0x1e>
       case 13: a = 0x44;
  407256:	2344      	movs	r3, #68	; 0x44
       break;
  407258:	e7e3      	b.n	407222 <hex1ToAscii+0x1e>
       case 14: a = 0x45;
  40725a:	2345      	movs	r3, #69	; 0x45
       break;
  40725c:	e7e1      	b.n	407222 <hex1ToAscii+0x1e>
       case 15: a = 0x46;
  40725e:	2346      	movs	r3, #70	; 0x46
       break;
  407260:	e7df      	b.n	407222 <hex1ToAscii+0x1e>

00407262 <bcdToHex>:
/***********************************************************************/
/*  Converts BCD to Hex.
/***********************************************************************/
char bcdToHex (char toConvert){
char inHex;
inHex = ((toConvert>>4)*10)+(toConvert%16);
  407262:	0903      	lsrs	r3, r0, #4
  407264:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  407268:	f000 000f 	and.w	r0, r0, #15
  40726c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
return inHex;
}
  407270:	b2c0      	uxtb	r0, r0
  407272:	4770      	bx	lr

00407274 <hexToBCD>:
/***********************************************************************/
/*  Converts Hex to BCD. Works up to 99,999.
/***********************************************************************/
static int hexToBCD (int toConvert){
  407274:	b410      	push	{r4}
	int inBCD;
	char tenThous=0;
	char thousands=0;
	char hundreds=0;
	char tens=0;
	if(toConvert>89999){tenThous=9;toConvert-=90000;}
  407276:	4b8c      	ldr	r3, [pc, #560]	; (4074a8 <hexToBCD+0x234>)
  407278:	4298      	cmp	r0, r3
  40727a:	dd31      	ble.n	4072e0 <hexToBCD+0x6c>
  40727c:	f5a0 30af 	sub.w	r0, r0, #89600	; 0x15e00
  407280:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
  407284:	2409      	movs	r4, #9
	else if(toConvert>39999){tenThous=4;toConvert-=40000;}
	else if(toConvert>29999){tenThous=3;toConvert-=30000;}
	else if(toConvert>19999){tenThous=2;toConvert-=20000;}
	else if(toConvert>9999){tenThous=1;toConvert-=10000;}

	if(toConvert>8999){thousands=9;toConvert-=9000;}
  407286:	f242 3127 	movw	r1, #8999	; 0x2327
  40728a:	4288      	cmp	r0, r1
  40728c:	dd71      	ble.n	407372 <hexToBCD+0xfe>
  40728e:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
  407292:	3828      	subs	r0, #40	; 0x28
  407294:	2209      	movs	r2, #9
	else if(toConvert>3999){thousands=4;toConvert-=4000;}
	else if(toConvert>2999){thousands=3;toConvert-=3000;}
	else if(toConvert>1999){thousands=2;toConvert-=2000;}
	else if(toConvert>999){thousands=1;toConvert-=1000;}

	if(toConvert>899){hundreds=9;toConvert-=900;}
  407296:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
  40729a:	f2c0 80ab 	blt.w	4073f4 <hexToBCD+0x180>
  40729e:	f5a0 7061 	sub.w	r0, r0, #900	; 0x384
  4072a2:	2309      	movs	r3, #9
	else if(toConvert>399){hundreds=4;toConvert-=400;}
	else if(toConvert>299){hundreds=3;toConvert-=300;}
	else if(toConvert>199){hundreds=2;toConvert-=200;}
	else if(toConvert>99){hundreds=1;toConvert-=100;}

	if(toConvert>89){tens=9;toConvert-=90;}
  4072a4:	2859      	cmp	r0, #89	; 0x59
  4072a6:	f300 80db 	bgt.w	407460 <hexToBCD+0x1ec>
	else if(toConvert>79){tens=8;toConvert-=80;}
  4072aa:	284f      	cmp	r0, #79	; 0x4f
  4072ac:	f300 80e5 	bgt.w	40747a <hexToBCD+0x206>
	else if(toConvert>69){tens=7;toConvert-=70;}
  4072b0:	2845      	cmp	r0, #69	; 0x45
  4072b2:	f300 80e5 	bgt.w	407480 <hexToBCD+0x20c>
	else if(toConvert>59){tens=6;toConvert-=60;}
  4072b6:	283b      	cmp	r0, #59	; 0x3b
  4072b8:	f300 80e5 	bgt.w	407486 <hexToBCD+0x212>
	else if(toConvert>49){tens=5;toConvert-=50;}
  4072bc:	2831      	cmp	r0, #49	; 0x31
  4072be:	f300 80e5 	bgt.w	40748c <hexToBCD+0x218>
	else if(toConvert>39){tens=4;toConvert-=40;}
  4072c2:	2827      	cmp	r0, #39	; 0x27
  4072c4:	f300 80e5 	bgt.w	407492 <hexToBCD+0x21e>
	else if(toConvert>29){tens=3;toConvert-=30;}
  4072c8:	281d      	cmp	r0, #29
  4072ca:	f300 80e5 	bgt.w	407498 <hexToBCD+0x224>
	else if(toConvert>19){tens=2;toConvert-=20;}
  4072ce:	2813      	cmp	r0, #19
  4072d0:	f300 80e5 	bgt.w	40749e <hexToBCD+0x22a>
	else if(toConvert>9){tens=1;toConvert-=10;}
  4072d4:	2809      	cmp	r0, #9
  4072d6:	f340 80e5 	ble.w	4074a4 <hexToBCD+0x230>
  4072da:	380a      	subs	r0, #10
  4072dc:	2101      	movs	r1, #1
  4072de:	e0c1      	b.n	407464 <hexToBCD+0x1f0>
	else if(toConvert>79999){tenThous=8;toConvert-=80000;}
  4072e0:	4b72      	ldr	r3, [pc, #456]	; (4074ac <hexToBCD+0x238>)
  4072e2:	4298      	cmp	r0, r3
  4072e4:	dd04      	ble.n	4072f0 <hexToBCD+0x7c>
  4072e6:	f5a0 309c 	sub.w	r0, r0, #79872	; 0x13800
  4072ea:	3880      	subs	r0, #128	; 0x80
  4072ec:	2408      	movs	r4, #8
  4072ee:	e7ca      	b.n	407286 <hexToBCD+0x12>
	else if(toConvert>69999){tenThous=7;toConvert-=70000;}
  4072f0:	4b6f      	ldr	r3, [pc, #444]	; (4074b0 <hexToBCD+0x23c>)
  4072f2:	4298      	cmp	r0, r3
  4072f4:	dd05      	ble.n	407302 <hexToBCD+0x8e>
  4072f6:	f5a0 3088 	sub.w	r0, r0, #69632	; 0x11000
  4072fa:	f5a0 70b8 	sub.w	r0, r0, #368	; 0x170
  4072fe:	2407      	movs	r4, #7
  407300:	e7c1      	b.n	407286 <hexToBCD+0x12>
	else if(toConvert>59999){tenThous=6;toConvert-=60000;}
  407302:	f64e 235f 	movw	r3, #59999	; 0xea5f
  407306:	4298      	cmp	r0, r3
  407308:	dd04      	ble.n	407314 <hexToBCD+0xa0>
  40730a:	f5a0 406a 	sub.w	r0, r0, #59904	; 0xea00
  40730e:	3860      	subs	r0, #96	; 0x60
  407310:	2406      	movs	r4, #6
  407312:	e7b8      	b.n	407286 <hexToBCD+0x12>
	else if(toConvert>49999){tenThous=5;toConvert-=50000;}
  407314:	f24c 334f 	movw	r3, #49999	; 0xc34f
  407318:	4298      	cmp	r0, r3
  40731a:	dd04      	ble.n	407326 <hexToBCD+0xb2>
  40731c:	f5a0 4043 	sub.w	r0, r0, #49920	; 0xc300
  407320:	3850      	subs	r0, #80	; 0x50
  407322:	2405      	movs	r4, #5
  407324:	e7af      	b.n	407286 <hexToBCD+0x12>
	else if(toConvert>39999){tenThous=4;toConvert-=40000;}
  407326:	f649 433f 	movw	r3, #39999	; 0x9c3f
  40732a:	4298      	cmp	r0, r3
  40732c:	dd04      	ble.n	407338 <hexToBCD+0xc4>
  40732e:	f5a0 401c 	sub.w	r0, r0, #39936	; 0x9c00
  407332:	3840      	subs	r0, #64	; 0x40
  407334:	2404      	movs	r4, #4
  407336:	e7a6      	b.n	407286 <hexToBCD+0x12>
	else if(toConvert>29999){tenThous=3;toConvert-=30000;}
  407338:	f247 532f 	movw	r3, #29999	; 0x752f
  40733c:	4298      	cmp	r0, r3
  40733e:	dd04      	ble.n	40734a <hexToBCD+0xd6>
  407340:	f5a0 40ea 	sub.w	r0, r0, #29952	; 0x7500
  407344:	3830      	subs	r0, #48	; 0x30
  407346:	2403      	movs	r4, #3
  407348:	e79d      	b.n	407286 <hexToBCD+0x12>
	else if(toConvert>19999){tenThous=2;toConvert-=20000;}
  40734a:	f644 631f 	movw	r3, #19999	; 0x4e1f
  40734e:	4298      	cmp	r0, r3
  407350:	dd04      	ble.n	40735c <hexToBCD+0xe8>
  407352:	f5a0 409c 	sub.w	r0, r0, #19968	; 0x4e00
  407356:	3820      	subs	r0, #32
  407358:	2402      	movs	r4, #2
  40735a:	e794      	b.n	407286 <hexToBCD+0x12>
	else if(toConvert>9999){tenThous=1;toConvert-=10000;}
  40735c:	f242 730f 	movw	r3, #9999	; 0x270f
  407360:	4298      	cmp	r0, r3
  407362:	dd04      	ble.n	40736e <hexToBCD+0xfa>
  407364:	f5a0 501c 	sub.w	r0, r0, #9984	; 0x2700
  407368:	3810      	subs	r0, #16
  40736a:	2401      	movs	r4, #1
  40736c:	e78b      	b.n	407286 <hexToBCD+0x12>
	char tenThous=0;
  40736e:	2400      	movs	r4, #0
  407370:	e789      	b.n	407286 <hexToBCD+0x12>
	else if(toConvert>7999){thousands=8;toConvert-=8000;}
  407372:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
  407376:	db03      	blt.n	407380 <hexToBCD+0x10c>
  407378:	f5a0 50fa 	sub.w	r0, r0, #8000	; 0x1f40
  40737c:	2208      	movs	r2, #8
  40737e:	e78a      	b.n	407296 <hexToBCD+0x22>
	else if(toConvert>6999){thousands=7;toConvert-=7000;}
  407380:	f641 3357 	movw	r3, #6999	; 0x1b57
  407384:	4298      	cmp	r0, r3
  407386:	dd04      	ble.n	407392 <hexToBCD+0x11e>
  407388:	f5a0 50da 	sub.w	r0, r0, #6976	; 0x1b40
  40738c:	3818      	subs	r0, #24
  40738e:	2207      	movs	r2, #7
  407390:	e781      	b.n	407296 <hexToBCD+0x22>
	else if(toConvert>5999){thousands=6;toConvert-=6000;}
  407392:	f241 736f 	movw	r3, #5999	; 0x176f
  407396:	4298      	cmp	r0, r3
  407398:	dd04      	ble.n	4073a4 <hexToBCD+0x130>
  40739a:	f5a0 50bb 	sub.w	r0, r0, #5984	; 0x1760
  40739e:	3810      	subs	r0, #16
  4073a0:	2206      	movs	r2, #6
  4073a2:	e778      	b.n	407296 <hexToBCD+0x22>
	else if(toConvert>4999){thousands=5;toConvert-=5000;}
  4073a4:	f241 3387 	movw	r3, #4999	; 0x1387
  4073a8:	4298      	cmp	r0, r3
  4073aa:	dd04      	ble.n	4073b6 <hexToBCD+0x142>
  4073ac:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
  4073b0:	3808      	subs	r0, #8
  4073b2:	2205      	movs	r2, #5
  4073b4:	e76f      	b.n	407296 <hexToBCD+0x22>
	else if(toConvert>3999){thousands=4;toConvert-=4000;}
  4073b6:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
  4073ba:	db03      	blt.n	4073c4 <hexToBCD+0x150>
  4073bc:	f5a0 607a 	sub.w	r0, r0, #4000	; 0xfa0
  4073c0:	2204      	movs	r2, #4
  4073c2:	e768      	b.n	407296 <hexToBCD+0x22>
	else if(toConvert>2999){thousands=3;toConvert-=3000;}
  4073c4:	f640 33b7 	movw	r3, #2999	; 0xbb7
  4073c8:	4298      	cmp	r0, r3
  4073ca:	dd03      	ble.n	4073d4 <hexToBCD+0x160>
  4073cc:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
  4073d0:	2203      	movs	r2, #3
  4073d2:	e760      	b.n	407296 <hexToBCD+0x22>
	else if(toConvert>1999){thousands=2;toConvert-=2000;}
  4073d4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
  4073d8:	db03      	blt.n	4073e2 <hexToBCD+0x16e>
  4073da:	f5a0 60fa 	sub.w	r0, r0, #2000	; 0x7d0
  4073de:	2202      	movs	r2, #2
  4073e0:	e759      	b.n	407296 <hexToBCD+0x22>
	else if(toConvert>999){thousands=1;toConvert-=1000;}
  4073e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  4073e6:	db03      	blt.n	4073f0 <hexToBCD+0x17c>
  4073e8:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
  4073ec:	2201      	movs	r2, #1
  4073ee:	e752      	b.n	407296 <hexToBCD+0x22>
	char thousands=0;
  4073f0:	2200      	movs	r2, #0
  4073f2:	e750      	b.n	407296 <hexToBCD+0x22>
	else if(toConvert>799){hundreds=8;toConvert-=800;}
  4073f4:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
  4073f8:	db03      	blt.n	407402 <hexToBCD+0x18e>
  4073fa:	f5a0 7048 	sub.w	r0, r0, #800	; 0x320
  4073fe:	2308      	movs	r3, #8
  407400:	e750      	b.n	4072a4 <hexToBCD+0x30>
	else if(toConvert>699){hundreds=7;toConvert-=700;}
  407402:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
  407406:	db03      	blt.n	407410 <hexToBCD+0x19c>
  407408:	f5a0 702f 	sub.w	r0, r0, #700	; 0x2bc
  40740c:	2307      	movs	r3, #7
  40740e:	e749      	b.n	4072a4 <hexToBCD+0x30>
	else if(toConvert>599){hundreds=6;toConvert-=600;}
  407410:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
  407414:	db03      	blt.n	40741e <hexToBCD+0x1aa>
  407416:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
  40741a:	2306      	movs	r3, #6
  40741c:	e742      	b.n	4072a4 <hexToBCD+0x30>
	else if(toConvert>499){hundreds=5;toConvert-=500;}
  40741e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  407422:	db03      	blt.n	40742c <hexToBCD+0x1b8>
  407424:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
  407428:	2305      	movs	r3, #5
  40742a:	e73b      	b.n	4072a4 <hexToBCD+0x30>
	else if(toConvert>399){hundreds=4;toConvert-=400;}
  40742c:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
  407430:	db03      	blt.n	40743a <hexToBCD+0x1c6>
  407432:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
  407436:	2304      	movs	r3, #4
  407438:	e734      	b.n	4072a4 <hexToBCD+0x30>
	else if(toConvert>299){hundreds=3;toConvert-=300;}
  40743a:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
  40743e:	db03      	blt.n	407448 <hexToBCD+0x1d4>
  407440:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
  407444:	2303      	movs	r3, #3
  407446:	e72d      	b.n	4072a4 <hexToBCD+0x30>
	else if(toConvert>199){hundreds=2;toConvert-=200;}
  407448:	28c7      	cmp	r0, #199	; 0xc7
  40744a:	dd02      	ble.n	407452 <hexToBCD+0x1de>
  40744c:	38c8      	subs	r0, #200	; 0xc8
  40744e:	2302      	movs	r3, #2
  407450:	e728      	b.n	4072a4 <hexToBCD+0x30>
	else if(toConvert>99){hundreds=1;toConvert-=100;}
  407452:	2863      	cmp	r0, #99	; 0x63
  407454:	dd02      	ble.n	40745c <hexToBCD+0x1e8>
  407456:	3864      	subs	r0, #100	; 0x64
  407458:	2301      	movs	r3, #1
  40745a:	e723      	b.n	4072a4 <hexToBCD+0x30>
	char hundreds=0;
  40745c:	2300      	movs	r3, #0
  40745e:	e721      	b.n	4072a4 <hexToBCD+0x30>
	if(toConvert>89){tens=9;toConvert-=90;}
  407460:	385a      	subs	r0, #90	; 0x5a
  407462:	2109      	movs	r1, #9

	return (tenThous*65536)+(thousands*4096)+(hundreds*256)+(tens*16)+toConvert;
  407464:	eb02 1204 	add.w	r2, r2, r4, lsl #4
  407468:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  40746c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
}
  407470:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  407474:	f85d 4b04 	ldr.w	r4, [sp], #4
  407478:	4770      	bx	lr
	else if(toConvert>79){tens=8;toConvert-=80;}
  40747a:	3850      	subs	r0, #80	; 0x50
  40747c:	2108      	movs	r1, #8
  40747e:	e7f1      	b.n	407464 <hexToBCD+0x1f0>
	else if(toConvert>69){tens=7;toConvert-=70;}
  407480:	3846      	subs	r0, #70	; 0x46
  407482:	2107      	movs	r1, #7
  407484:	e7ee      	b.n	407464 <hexToBCD+0x1f0>
	else if(toConvert>59){tens=6;toConvert-=60;}
  407486:	383c      	subs	r0, #60	; 0x3c
  407488:	2106      	movs	r1, #6
  40748a:	e7eb      	b.n	407464 <hexToBCD+0x1f0>
	else if(toConvert>49){tens=5;toConvert-=50;}
  40748c:	3832      	subs	r0, #50	; 0x32
  40748e:	2105      	movs	r1, #5
  407490:	e7e8      	b.n	407464 <hexToBCD+0x1f0>
	else if(toConvert>39){tens=4;toConvert-=40;}
  407492:	3828      	subs	r0, #40	; 0x28
  407494:	2104      	movs	r1, #4
  407496:	e7e5      	b.n	407464 <hexToBCD+0x1f0>
	else if(toConvert>29){tens=3;toConvert-=30;}
  407498:	381e      	subs	r0, #30
  40749a:	2103      	movs	r1, #3
  40749c:	e7e2      	b.n	407464 <hexToBCD+0x1f0>
	else if(toConvert>19){tens=2;toConvert-=20;}
  40749e:	3814      	subs	r0, #20
  4074a0:	2102      	movs	r1, #2
  4074a2:	e7df      	b.n	407464 <hexToBCD+0x1f0>
	char tens=0;
  4074a4:	2100      	movs	r1, #0
  4074a6:	e7dd      	b.n	407464 <hexToBCD+0x1f0>
  4074a8:	00015f8f 	.word	0x00015f8f
  4074ac:	0001387f 	.word	0x0001387f
  4074b0:	0001116f 	.word	0x0001116f

004074b4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4074b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4074b6:	b083      	sub	sp, #12
  4074b8:	4605      	mov	r5, r0
  4074ba:	460c      	mov	r4, r1
	uint32_t val = 0;
  4074bc:	2300      	movs	r3, #0
  4074be:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4074c0:	4b2a      	ldr	r3, [pc, #168]	; (40756c <usart_serial_getchar+0xb8>)
  4074c2:	4298      	cmp	r0, r3
  4074c4:	d013      	beq.n	4074ee <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4074c6:	4b2a      	ldr	r3, [pc, #168]	; (407570 <usart_serial_getchar+0xbc>)
  4074c8:	4298      	cmp	r0, r3
  4074ca:	d018      	beq.n	4074fe <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4074cc:	4b29      	ldr	r3, [pc, #164]	; (407574 <usart_serial_getchar+0xc0>)
  4074ce:	4298      	cmp	r0, r3
  4074d0:	d01d      	beq.n	40750e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4074d2:	4b29      	ldr	r3, [pc, #164]	; (407578 <usart_serial_getchar+0xc4>)
  4074d4:	429d      	cmp	r5, r3
  4074d6:	d022      	beq.n	40751e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4074d8:	4b28      	ldr	r3, [pc, #160]	; (40757c <usart_serial_getchar+0xc8>)
  4074da:	429d      	cmp	r5, r3
  4074dc:	d027      	beq.n	40752e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4074de:	4b28      	ldr	r3, [pc, #160]	; (407580 <usart_serial_getchar+0xcc>)
  4074e0:	429d      	cmp	r5, r3
  4074e2:	d02e      	beq.n	407542 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4074e4:	4b27      	ldr	r3, [pc, #156]	; (407584 <usart_serial_getchar+0xd0>)
  4074e6:	429d      	cmp	r5, r3
  4074e8:	d035      	beq.n	407556 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4074ea:	b003      	add	sp, #12
  4074ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4074ee:	461f      	mov	r7, r3
  4074f0:	4e25      	ldr	r6, [pc, #148]	; (407588 <usart_serial_getchar+0xd4>)
  4074f2:	4621      	mov	r1, r4
  4074f4:	4638      	mov	r0, r7
  4074f6:	47b0      	blx	r6
  4074f8:	2800      	cmp	r0, #0
  4074fa:	d1fa      	bne.n	4074f2 <usart_serial_getchar+0x3e>
  4074fc:	e7e9      	b.n	4074d2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4074fe:	461f      	mov	r7, r3
  407500:	4e21      	ldr	r6, [pc, #132]	; (407588 <usart_serial_getchar+0xd4>)
  407502:	4621      	mov	r1, r4
  407504:	4638      	mov	r0, r7
  407506:	47b0      	blx	r6
  407508:	2800      	cmp	r0, #0
  40750a:	d1fa      	bne.n	407502 <usart_serial_getchar+0x4e>
  40750c:	e7e4      	b.n	4074d8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40750e:	461f      	mov	r7, r3
  407510:	4e1d      	ldr	r6, [pc, #116]	; (407588 <usart_serial_getchar+0xd4>)
  407512:	4621      	mov	r1, r4
  407514:	4638      	mov	r0, r7
  407516:	47b0      	blx	r6
  407518:	2800      	cmp	r0, #0
  40751a:	d1fa      	bne.n	407512 <usart_serial_getchar+0x5e>
  40751c:	e7df      	b.n	4074de <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40751e:	461f      	mov	r7, r3
  407520:	4e19      	ldr	r6, [pc, #100]	; (407588 <usart_serial_getchar+0xd4>)
  407522:	4621      	mov	r1, r4
  407524:	4638      	mov	r0, r7
  407526:	47b0      	blx	r6
  407528:	2800      	cmp	r0, #0
  40752a:	d1fa      	bne.n	407522 <usart_serial_getchar+0x6e>
  40752c:	e7da      	b.n	4074e4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40752e:	461e      	mov	r6, r3
  407530:	4d16      	ldr	r5, [pc, #88]	; (40758c <usart_serial_getchar+0xd8>)
  407532:	a901      	add	r1, sp, #4
  407534:	4630      	mov	r0, r6
  407536:	47a8      	blx	r5
  407538:	2800      	cmp	r0, #0
  40753a:	d1fa      	bne.n	407532 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40753c:	9b01      	ldr	r3, [sp, #4]
  40753e:	7023      	strb	r3, [r4, #0]
  407540:	e7d3      	b.n	4074ea <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  407542:	461e      	mov	r6, r3
  407544:	4d11      	ldr	r5, [pc, #68]	; (40758c <usart_serial_getchar+0xd8>)
  407546:	a901      	add	r1, sp, #4
  407548:	4630      	mov	r0, r6
  40754a:	47a8      	blx	r5
  40754c:	2800      	cmp	r0, #0
  40754e:	d1fa      	bne.n	407546 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  407550:	9b01      	ldr	r3, [sp, #4]
  407552:	7023      	strb	r3, [r4, #0]
  407554:	e7c9      	b.n	4074ea <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  407556:	461e      	mov	r6, r3
  407558:	4d0c      	ldr	r5, [pc, #48]	; (40758c <usart_serial_getchar+0xd8>)
  40755a:	a901      	add	r1, sp, #4
  40755c:	4630      	mov	r0, r6
  40755e:	47a8      	blx	r5
  407560:	2800      	cmp	r0, #0
  407562:	d1fa      	bne.n	40755a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  407564:	9b01      	ldr	r3, [sp, #4]
  407566:	7023      	strb	r3, [r4, #0]
}
  407568:	e7bf      	b.n	4074ea <usart_serial_getchar+0x36>
  40756a:	bf00      	nop
  40756c:	400e0800 	.word	0x400e0800
  407570:	400e0a00 	.word	0x400e0a00
  407574:	400e1a00 	.word	0x400e1a00
  407578:	400e1c00 	.word	0x400e1c00
  40757c:	40024000 	.word	0x40024000
  407580:	40028000 	.word	0x40028000
  407584:	4002c000 	.word	0x4002c000
  407588:	00402b41 	.word	0x00402b41
  40758c:	0040297f 	.word	0x0040297f

00407590 <usart_serial_putchar>:
{
  407590:	b570      	push	{r4, r5, r6, lr}
  407592:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  407594:	4b2a      	ldr	r3, [pc, #168]	; (407640 <usart_serial_putchar+0xb0>)
  407596:	4298      	cmp	r0, r3
  407598:	d013      	beq.n	4075c2 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40759a:	4b2a      	ldr	r3, [pc, #168]	; (407644 <usart_serial_putchar+0xb4>)
  40759c:	4298      	cmp	r0, r3
  40759e:	d019      	beq.n	4075d4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4075a0:	4b29      	ldr	r3, [pc, #164]	; (407648 <usart_serial_putchar+0xb8>)
  4075a2:	4298      	cmp	r0, r3
  4075a4:	d01f      	beq.n	4075e6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4075a6:	4b29      	ldr	r3, [pc, #164]	; (40764c <usart_serial_putchar+0xbc>)
  4075a8:	4298      	cmp	r0, r3
  4075aa:	d025      	beq.n	4075f8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4075ac:	4b28      	ldr	r3, [pc, #160]	; (407650 <usart_serial_putchar+0xc0>)
  4075ae:	4298      	cmp	r0, r3
  4075b0:	d02b      	beq.n	40760a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4075b2:	4b28      	ldr	r3, [pc, #160]	; (407654 <usart_serial_putchar+0xc4>)
  4075b4:	4298      	cmp	r0, r3
  4075b6:	d031      	beq.n	40761c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4075b8:	4b27      	ldr	r3, [pc, #156]	; (407658 <usart_serial_putchar+0xc8>)
  4075ba:	4298      	cmp	r0, r3
  4075bc:	d037      	beq.n	40762e <usart_serial_putchar+0x9e>
	return 0;
  4075be:	2000      	movs	r0, #0
}
  4075c0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4075c2:	461e      	mov	r6, r3
  4075c4:	4d25      	ldr	r5, [pc, #148]	; (40765c <usart_serial_putchar+0xcc>)
  4075c6:	4621      	mov	r1, r4
  4075c8:	4630      	mov	r0, r6
  4075ca:	47a8      	blx	r5
  4075cc:	2800      	cmp	r0, #0
  4075ce:	d1fa      	bne.n	4075c6 <usart_serial_putchar+0x36>
		return 1;
  4075d0:	2001      	movs	r0, #1
  4075d2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4075d4:	461e      	mov	r6, r3
  4075d6:	4d21      	ldr	r5, [pc, #132]	; (40765c <usart_serial_putchar+0xcc>)
  4075d8:	4621      	mov	r1, r4
  4075da:	4630      	mov	r0, r6
  4075dc:	47a8      	blx	r5
  4075de:	2800      	cmp	r0, #0
  4075e0:	d1fa      	bne.n	4075d8 <usart_serial_putchar+0x48>
		return 1;
  4075e2:	2001      	movs	r0, #1
  4075e4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4075e6:	461e      	mov	r6, r3
  4075e8:	4d1c      	ldr	r5, [pc, #112]	; (40765c <usart_serial_putchar+0xcc>)
  4075ea:	4621      	mov	r1, r4
  4075ec:	4630      	mov	r0, r6
  4075ee:	47a8      	blx	r5
  4075f0:	2800      	cmp	r0, #0
  4075f2:	d1fa      	bne.n	4075ea <usart_serial_putchar+0x5a>
		return 1;
  4075f4:	2001      	movs	r0, #1
  4075f6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4075f8:	461e      	mov	r6, r3
  4075fa:	4d18      	ldr	r5, [pc, #96]	; (40765c <usart_serial_putchar+0xcc>)
  4075fc:	4621      	mov	r1, r4
  4075fe:	4630      	mov	r0, r6
  407600:	47a8      	blx	r5
  407602:	2800      	cmp	r0, #0
  407604:	d1fa      	bne.n	4075fc <usart_serial_putchar+0x6c>
		return 1;
  407606:	2001      	movs	r0, #1
  407608:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40760a:	461e      	mov	r6, r3
  40760c:	4d14      	ldr	r5, [pc, #80]	; (407660 <usart_serial_putchar+0xd0>)
  40760e:	4621      	mov	r1, r4
  407610:	4630      	mov	r0, r6
  407612:	47a8      	blx	r5
  407614:	2800      	cmp	r0, #0
  407616:	d1fa      	bne.n	40760e <usart_serial_putchar+0x7e>
		return 1;
  407618:	2001      	movs	r0, #1
  40761a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40761c:	461e      	mov	r6, r3
  40761e:	4d10      	ldr	r5, [pc, #64]	; (407660 <usart_serial_putchar+0xd0>)
  407620:	4621      	mov	r1, r4
  407622:	4630      	mov	r0, r6
  407624:	47a8      	blx	r5
  407626:	2800      	cmp	r0, #0
  407628:	d1fa      	bne.n	407620 <usart_serial_putchar+0x90>
		return 1;
  40762a:	2001      	movs	r0, #1
  40762c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40762e:	461e      	mov	r6, r3
  407630:	4d0b      	ldr	r5, [pc, #44]	; (407660 <usart_serial_putchar+0xd0>)
  407632:	4621      	mov	r1, r4
  407634:	4630      	mov	r0, r6
  407636:	47a8      	blx	r5
  407638:	2800      	cmp	r0, #0
  40763a:	d1fa      	bne.n	407632 <usart_serial_putchar+0xa2>
		return 1;
  40763c:	2001      	movs	r0, #1
  40763e:	bd70      	pop	{r4, r5, r6, pc}
  407640:	400e0800 	.word	0x400e0800
  407644:	400e0a00 	.word	0x400e0a00
  407648:	400e1a00 	.word	0x400e1a00
  40764c:	400e1c00 	.word	0x400e1c00
  407650:	40024000 	.word	0x40024000
  407654:	40028000 	.word	0x40028000
  407658:	4002c000 	.word	0x4002c000
  40765c:	00402b2f 	.word	0x00402b2f
  407660:	00402969 	.word	0x00402969

00407664 <main_vendor_int_out_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  407664:	b100      	cbz	r0, 407668 <main_vendor_int_out_received+0x4>
  407666:	4770      	bx	lr
{
  407668:	b510      	push	{r4, lr}
  40766a:	b084      	sub	sp, #16
	udi_vendor_interrupt_in_run(
  40766c:	4c0a      	ldr	r4, [pc, #40]	; (407698 <main_vendor_int_out_received+0x34>)
  40766e:	4a0b      	ldr	r2, [pc, #44]	; (40769c <main_vendor_int_out_received+0x38>)
  407670:	4620      	mov	r0, r4
  407672:	4b0b      	ldr	r3, [pc, #44]	; (4076a0 <main_vendor_int_out_received+0x3c>)
  407674:	4798      	blx	r3
	printf("OUT: %d %d %d %d %d %d %d\r\n",main_buf_loopback[0],main_buf_loopback[1],main_buf_loopback[2],main_buf_loopback[3],main_buf_loopback[4],main_buf_loopback[5],main_buf_loopback[6]);
  407676:	78a3      	ldrb	r3, [r4, #2]
  407678:	7862      	ldrb	r2, [r4, #1]
  40767a:	7821      	ldrb	r1, [r4, #0]
  40767c:	79a0      	ldrb	r0, [r4, #6]
  40767e:	9003      	str	r0, [sp, #12]
  407680:	7960      	ldrb	r0, [r4, #5]
  407682:	9002      	str	r0, [sp, #8]
  407684:	7920      	ldrb	r0, [r4, #4]
  407686:	9001      	str	r0, [sp, #4]
  407688:	78e0      	ldrb	r0, [r4, #3]
  40768a:	9000      	str	r0, [sp, #0]
  40768c:	4805      	ldr	r0, [pc, #20]	; (4076a4 <main_vendor_int_out_received+0x40>)
  40768e:	4c06      	ldr	r4, [pc, #24]	; (4076a8 <main_vendor_int_out_received+0x44>)
  407690:	47a0      	blx	r4
}
  407692:	b004      	add	sp, #16
  407694:	bd10      	pop	{r4, pc}
  407696:	bf00      	nop
  407698:	20400cd0 	.word	0x20400cd0
  40769c:	0040b17d 	.word	0x0040b17d
  4076a0:	00402c99 	.word	0x00402c99
  4076a4:	00410514 	.word	0x00410514
  4076a8:	0040c895 	.word	0x0040c895

004076ac <main_vendor_bulk_in_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  4076ac:	b100      	cbz	r0, 4076b0 <main_vendor_bulk_in_received+0x4>
  4076ae:	4770      	bx	lr
{
  4076b0:	b510      	push	{r4, lr}
  4076b2:	b086      	sub	sp, #24
	udi_vendor_bulk_out_run(
  4076b4:	4c0b      	ldr	r4, [pc, #44]	; (4076e4 <main_vendor_bulk_in_received+0x38>)
  4076b6:	4a0c      	ldr	r2, [pc, #48]	; (4076e8 <main_vendor_bulk_in_received+0x3c>)
  4076b8:	2114      	movs	r1, #20
  4076ba:	4620      	mov	r0, r4
  4076bc:	4b0b      	ldr	r3, [pc, #44]	; (4076ec <main_vendor_bulk_in_received+0x40>)
  4076be:	4798      	blx	r3
	 printf("BULK OUT RCVD: %x %x %x %x %x %x %x %x\r\n",crapBuf[0],crapBuf[1],crapBuf[2],crapBuf[3],crapBuf[4],crapBuf[5],crapBuf[6],crapBuf[7]);
  4076c0:	78a3      	ldrb	r3, [r4, #2]
  4076c2:	7862      	ldrb	r2, [r4, #1]
  4076c4:	7821      	ldrb	r1, [r4, #0]
  4076c6:	79e0      	ldrb	r0, [r4, #7]
  4076c8:	9004      	str	r0, [sp, #16]
  4076ca:	79a0      	ldrb	r0, [r4, #6]
  4076cc:	9003      	str	r0, [sp, #12]
  4076ce:	7960      	ldrb	r0, [r4, #5]
  4076d0:	9002      	str	r0, [sp, #8]
  4076d2:	7920      	ldrb	r0, [r4, #4]
  4076d4:	9001      	str	r0, [sp, #4]
  4076d6:	78e0      	ldrb	r0, [r4, #3]
  4076d8:	9000      	str	r0, [sp, #0]
  4076da:	4805      	ldr	r0, [pc, #20]	; (4076f0 <main_vendor_bulk_in_received+0x44>)
  4076dc:	4c05      	ldr	r4, [pc, #20]	; (4076f4 <main_vendor_bulk_in_received+0x48>)
  4076de:	47a0      	blx	r4
}
  4076e0:	b006      	add	sp, #24
  4076e2:	bd10      	pop	{r4, pc}
  4076e4:	20400fcc 	.word	0x20400fcc
  4076e8:	004076f9 	.word	0x004076f9
  4076ec:	00402ced 	.word	0x00402ced
  4076f0:	00410458 	.word	0x00410458
  4076f4:	0040c895 	.word	0x0040c895

004076f8 <main_vendor_bulk_out_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  4076f8:	2800      	cmp	r0, #0
  4076fa:	d136      	bne.n	40776a <main_vendor_bulk_out_received+0x72>
{
  4076fc:	b510      	push	{r4, lr}
  4076fe:	b086      	sub	sp, #24
	if(g_imageSize==0){
  407700:	4b1a      	ldr	r3, [pc, #104]	; (40776c <main_vendor_bulk_out_received+0x74>)
  407702:	781b      	ldrb	r3, [r3, #0]
  407704:	b1cb      	cbz	r3, 40773a <main_vendor_bulk_out_received+0x42>
	udi_vendor_bulk_in_run(
  407706:	4a1a      	ldr	r2, [pc, #104]	; (407770 <main_vendor_bulk_out_received+0x78>)
  407708:	491a      	ldr	r1, [pc, #104]	; (407774 <main_vendor_bulk_out_received+0x7c>)
  40770a:	4b1b      	ldr	r3, [pc, #108]	; (407778 <main_vendor_bulk_out_received+0x80>)
  40770c:	6818      	ldr	r0, [r3, #0]
  40770e:	4b1b      	ldr	r3, [pc, #108]	; (40777c <main_vendor_bulk_out_received+0x84>)
  407710:	4798      	blx	r3
			printf("BULK IN DATA SENT 888: %x %x %x %x %x %x %x %x\r\n",picBuff[0],picBuff[1],picBuff[2],picBuff[3],picBuff[4],picBuff[5],picBuff[6],picBuff[7]);
  407712:	4b1b      	ldr	r3, [pc, #108]	; (407780 <main_vendor_bulk_out_received+0x88>)
  407714:	6818      	ldr	r0, [r3, #0]
  407716:	7883      	ldrb	r3, [r0, #2]
  407718:	7842      	ldrb	r2, [r0, #1]
  40771a:	7801      	ldrb	r1, [r0, #0]
  40771c:	79c4      	ldrb	r4, [r0, #7]
  40771e:	9404      	str	r4, [sp, #16]
  407720:	7984      	ldrb	r4, [r0, #6]
  407722:	9403      	str	r4, [sp, #12]
  407724:	7944      	ldrb	r4, [r0, #5]
  407726:	9402      	str	r4, [sp, #8]
  407728:	7904      	ldrb	r4, [r0, #4]
  40772a:	9401      	str	r4, [sp, #4]
  40772c:	78c0      	ldrb	r0, [r0, #3]
  40772e:	9000      	str	r0, [sp, #0]
  407730:	4814      	ldr	r0, [pc, #80]	; (407784 <main_vendor_bulk_out_received+0x8c>)
  407732:	4c15      	ldr	r4, [pc, #84]	; (407788 <main_vendor_bulk_out_received+0x90>)
  407734:	47a0      	blx	r4
}
  407736:	b006      	add	sp, #24
  407738:	bd10      	pop	{r4, pc}
	udi_vendor_bulk_in_run(
  40773a:	4c11      	ldr	r4, [pc, #68]	; (407780 <main_vendor_bulk_out_received+0x88>)
  40773c:	4a0c      	ldr	r2, [pc, #48]	; (407770 <main_vendor_bulk_out_received+0x78>)
  40773e:	4913      	ldr	r1, [pc, #76]	; (40778c <main_vendor_bulk_out_received+0x94>)
  407740:	6820      	ldr	r0, [r4, #0]
  407742:	4b0e      	ldr	r3, [pc, #56]	; (40777c <main_vendor_bulk_out_received+0x84>)
  407744:	4798      	blx	r3
 	 printf("BULK IN DATA SENT 565: %x %x %x %x %x %x %x %x\r\n",picBuff[0],picBuff[1],picBuff[2],picBuff[3],picBuff[4],picBuff[5],picBuff[6],picBuff[7]);
  407746:	6820      	ldr	r0, [r4, #0]
  407748:	7883      	ldrb	r3, [r0, #2]
  40774a:	7842      	ldrb	r2, [r0, #1]
  40774c:	7801      	ldrb	r1, [r0, #0]
  40774e:	79c4      	ldrb	r4, [r0, #7]
  407750:	9404      	str	r4, [sp, #16]
  407752:	7984      	ldrb	r4, [r0, #6]
  407754:	9403      	str	r4, [sp, #12]
  407756:	7944      	ldrb	r4, [r0, #5]
  407758:	9402      	str	r4, [sp, #8]
  40775a:	7904      	ldrb	r4, [r0, #4]
  40775c:	9401      	str	r4, [sp, #4]
  40775e:	78c0      	ldrb	r0, [r0, #3]
  407760:	9000      	str	r0, [sp, #0]
  407762:	480b      	ldr	r0, [pc, #44]	; (407790 <main_vendor_bulk_out_received+0x98>)
  407764:	4c08      	ldr	r4, [pc, #32]	; (407788 <main_vendor_bulk_out_received+0x90>)
  407766:	47a0      	blx	r4
  407768:	e7e5      	b.n	407736 <main_vendor_bulk_out_received+0x3e>
  40776a:	4770      	bx	lr
  40776c:	20400cca 	.word	0x20400cca
  407770:	004076ad 	.word	0x004076ad
  407774:	0057e400 	.word	0x0057e400
  407778:	20400180 	.word	0x20400180
  40777c:	00402cd1 	.word	0x00402cd1
  407780:	2040017c 	.word	0x2040017c
  407784:	004104b8 	.word	0x004104b8
  407788:	0040c895 	.word	0x0040c895
  40778c:	003a9800 	.word	0x003a9800
  407790:	00410484 	.word	0x00410484

00407794 <main_vendor_iso_in_received>:
{
  407794:	b508      	push	{r3, lr}
	ui_loop_back_state(false);
  407796:	2000      	movs	r0, #0
  407798:	4b01      	ldr	r3, [pc, #4]	; (4077a0 <main_vendor_iso_in_received+0xc>)
  40779a:	4798      	blx	r3
  40779c:	bd08      	pop	{r3, pc}
  40779e:	bf00      	nop
  4077a0:	00402b59 	.word	0x00402b59

004077a4 <main_vendor_iso_out_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  4077a4:	bb20      	cbnz	r0, 4077f0 <main_vendor_iso_out_received+0x4c>
{
  4077a6:	b510      	push	{r4, lr}
  4077a8:	460c      	mov	r4, r1
	if (nb_transfered) {
  4077aa:	b9a1      	cbnz	r1, 4077d6 <main_vendor_iso_out_received+0x32>
	main_buf_iso_sel = main_buf_iso_sel? 0:1;
  4077ac:	4a11      	ldr	r2, [pc, #68]	; (4077f4 <main_vendor_iso_out_received+0x50>)
  4077ae:	7813      	ldrb	r3, [r2, #0]
  4077b0:	fab3 f383 	clz	r3, r3
  4077b4:	095b      	lsrs	r3, r3, #5
  4077b6:	7013      	strb	r3, [r2, #0]
	buf_ptr = &main_buf_loopback[ main_buf_iso_sel
  4077b8:	4c0f      	ldr	r4, [pc, #60]	; (4077f8 <main_vendor_iso_out_received+0x54>)
  4077ba:	eb04 2403 	add.w	r4, r4, r3, lsl #8
			udd_is_high_speed()?
  4077be:	4b0f      	ldr	r3, [pc, #60]	; (4077fc <main_vendor_iso_out_received+0x58>)
  4077c0:	4798      	blx	r3
	udi_vendor_iso_out_run(
  4077c2:	2800      	cmp	r0, #0
  4077c4:	4a0e      	ldr	r2, [pc, #56]	; (407800 <main_vendor_iso_out_received+0x5c>)
  4077c6:	bf14      	ite	ne
  4077c8:	2140      	movne	r1, #64	; 0x40
  4077ca:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4077ce:	4620      	mov	r0, r4
  4077d0:	4b0c      	ldr	r3, [pc, #48]	; (407804 <main_vendor_iso_out_received+0x60>)
  4077d2:	4798      	blx	r3
  4077d4:	bd10      	pop	{r4, pc}
		ui_loop_back_state(true);
  4077d6:	2001      	movs	r0, #1
  4077d8:	4b0b      	ldr	r3, [pc, #44]	; (407808 <main_vendor_iso_out_received+0x64>)
  4077da:	4798      	blx	r3
				*(sizeof(main_buf_loopback)/2) ];
  4077dc:	4b05      	ldr	r3, [pc, #20]	; (4077f4 <main_vendor_iso_out_received+0x50>)
  4077de:	7818      	ldrb	r0, [r3, #0]
		udi_vendor_iso_in_run(
  4077e0:	4a0a      	ldr	r2, [pc, #40]	; (40780c <main_vendor_iso_out_received+0x68>)
  4077e2:	4621      	mov	r1, r4
  4077e4:	4b04      	ldr	r3, [pc, #16]	; (4077f8 <main_vendor_iso_out_received+0x54>)
  4077e6:	eb03 2000 	add.w	r0, r3, r0, lsl #8
  4077ea:	4b09      	ldr	r3, [pc, #36]	; (407810 <main_vendor_iso_out_received+0x6c>)
  4077ec:	4798      	blx	r3
  4077ee:	e7dd      	b.n	4077ac <main_vendor_iso_out_received+0x8>
  4077f0:	4770      	bx	lr
  4077f2:	bf00      	nop
  4077f4:	20400ccf 	.word	0x20400ccf
  4077f8:	20400cd0 	.word	0x20400cd0
  4077fc:	004047e9 	.word	0x004047e9
  407800:	004077a5 	.word	0x004077a5
  407804:	00402d25 	.word	0x00402d25
  407808:	00402b59 	.word	0x00402b59
  40780c:	00407795 	.word	0x00407795
  407810:	00402d09 	.word	0x00402d09

00407814 <configure_console>:
{
  407814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407818:	b086      	sub	sp, #24
		base->PIO_PUDR = mask;
  40781a:	4b25      	ldr	r3, [pc, #148]	; (4078b0 <configure_console+0x9c>)
  40781c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  407820:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407822:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407826:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407828:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40782a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40782e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  407830:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  407834:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407836:	6f59      	ldr	r1, [r3, #116]	; 0x74
  407838:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  40783c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40783e:	605a      	str	r2, [r3, #4]
  407840:	202d      	movs	r0, #45	; 0x2d
  407842:	4d1c      	ldr	r5, [pc, #112]	; (4078b4 <configure_console+0xa0>)
  407844:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  407846:	4c1c      	ldr	r4, [pc, #112]	; (4078b8 <configure_console+0xa4>)
  407848:	4b1c      	ldr	r3, [pc, #112]	; (4078bc <configure_console+0xa8>)
  40784a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40784c:	4a1c      	ldr	r2, [pc, #112]	; (4078c0 <configure_console+0xac>)
  40784e:	4b1d      	ldr	r3, [pc, #116]	; (4078c4 <configure_console+0xb0>)
  407850:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  407852:	4a1d      	ldr	r2, [pc, #116]	; (4078c8 <configure_console+0xb4>)
  407854:	4b1d      	ldr	r3, [pc, #116]	; (4078cc <configure_console+0xb8>)
  407856:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  407858:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4078d8 <configure_console+0xc4>
  40785c:	f8cd 8000 	str.w	r8, [sp]
	uart_settings.ul_baudrate = opt->baudrate;
  407860:	f44f 5716 	mov.w	r7, #9600	; 0x2580
  407864:	9701      	str	r7, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  407866:	f44f 6600 	mov.w	r6, #2048	; 0x800
  40786a:	9602      	str	r6, [sp, #8]
  40786c:	202d      	movs	r0, #45	; 0x2d
  40786e:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  407870:	4669      	mov	r1, sp
  407872:	4620      	mov	r0, r4
  407874:	4d16      	ldr	r5, [pc, #88]	; (4078d0 <configure_console+0xbc>)
  407876:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  407878:	f8df a060 	ldr.w	sl, [pc, #96]	; 4078dc <configure_console+0xc8>
  40787c:	f8da 3000 	ldr.w	r3, [sl]
  407880:	2100      	movs	r1, #0
  407882:	6898      	ldr	r0, [r3, #8]
  407884:	f8df 9058 	ldr.w	r9, [pc, #88]	; 4078e0 <configure_console+0xcc>
  407888:	47c8      	blx	r9
	setbuf(stdin, NULL);
  40788a:	f8da 3000 	ldr.w	r3, [sl]
  40788e:	2100      	movs	r1, #0
  407890:	6858      	ldr	r0, [r3, #4]
  407892:	47c8      	blx	r9
   uart_enable_tx(CONF_UART);
  407894:	4620      	mov	r0, r4
  407896:	4b0f      	ldr	r3, [pc, #60]	; (4078d4 <configure_console+0xc0>)
  407898:	4798      	blx	r3
   uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40789a:	f8cd 800c 	str.w	r8, [sp, #12]
   uart_settings.ul_baudrate = CONF_UART_BAUDRATE;
  40789e:	9704      	str	r7, [sp, #16]
   uart_settings.ul_mode = CONF_UART_PARITY;
  4078a0:	9605      	str	r6, [sp, #20]
   uart_init(CONF_UART, &uart_settings);
  4078a2:	a903      	add	r1, sp, #12
  4078a4:	4620      	mov	r0, r4
  4078a6:	47a8      	blx	r5
}
  4078a8:	b006      	add	sp, #24
  4078aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4078ae:	bf00      	nop
  4078b0:	400e1400 	.word	0x400e1400
  4078b4:	00403819 	.word	0x00403819
  4078b8:	400e1c00 	.word	0x400e1c00
  4078bc:	20400f0c 	.word	0x20400f0c
  4078c0:	00407591 	.word	0x00407591
  4078c4:	20400f08 	.word	0x20400f08
  4078c8:	004074b5 	.word	0x004074b5
  4078cc:	20400f04 	.word	0x20400f04
  4078d0:	00402af9 	.word	0x00402af9
  4078d4:	00402b29 	.word	0x00402b29
  4078d8:	08f0d180 	.word	0x08f0d180
  4078dc:	20400184 	.word	0x20400184
  4078e0:	0040ca8d 	.word	0x0040ca8d

004078e4 <ISI_Handler>:
	status = ISI->ISI_SR;
  4078e4:	4b0b      	ldr	r3, [pc, #44]	; (407914 <ISI_Handler+0x30>)
  4078e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	imr = ISI->ISI_IMR;
  4078e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	if ((status & ISI_SR_CXFR_DONE) && (imr & ISI_IMR_CXFR_DONE)) {
  4078ea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
  4078ee:	d00f      	beq.n	407910 <ISI_Handler+0x2c>
  4078f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4078f4:	d00c      	beq.n	407910 <ISI_Handler+0x2c>
		ISI->ISI_DMA_CHDR |= ISI_DMA_CHDR_C_CH_DIS;
  4078f6:	4b07      	ldr	r3, [pc, #28]	; (407914 <ISI_Handler+0x30>)
  4078f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4078fa:	f042 0202 	orr.w	r2, r2, #2
  4078fe:	63da      	str	r2, [r3, #60]	; 0x3c
		ISI->ISI_IDR = ISI_IDR_CXFR_DONE;
  407900:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  407904:	6319      	str	r1, [r3, #48]	; 0x30
		ISI->ISI_DMA_CHER |= ISI_DMA_CHER_C_CH_EN;
  407906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407908:	f042 0202 	orr.w	r2, r2, #2
  40790c:	639a      	str	r2, [r3, #56]	; 0x38
		ISI->ISI_IER = ISI_IER_CXFR_DONE;
  40790e:	62d9      	str	r1, [r3, #44]	; 0x2c
  407910:	4770      	bx	lr
  407912:	bf00      	nop
  407914:	4004c000 	.word	0x4004c000

00407918 <main_suspend_action>:
{
  407918:	b508      	push	{r3, lr}
	ui_powerdown();
  40791a:	4b03      	ldr	r3, [pc, #12]	; (407928 <main_suspend_action+0x10>)
  40791c:	4798      	blx	r3
	g_usbFlagA=1;
  40791e:	2201      	movs	r2, #1
  407920:	4b02      	ldr	r3, [pc, #8]	; (40792c <main_suspend_action+0x14>)
  407922:	701a      	strb	r2, [r3, #0]
  407924:	bd08      	pop	{r3, pc}
  407926:	bf00      	nop
  407928:	00402b55 	.word	0x00402b55
  40792c:	20400ccb 	.word	0x20400ccb

00407930 <main_resume_action>:
{
  407930:	b508      	push	{r3, lr}
	ui_wakeup();
  407932:	4b03      	ldr	r3, [pc, #12]	; (407940 <main_resume_action+0x10>)
  407934:	4798      	blx	r3
	g_usbFlagB=2;
  407936:	2202      	movs	r2, #2
  407938:	4b02      	ldr	r3, [pc, #8]	; (407944 <main_resume_action+0x14>)
  40793a:	701a      	strb	r2, [r3, #0]
  40793c:	bd08      	pop	{r3, pc}
  40793e:	bf00      	nop
  407940:	00402b57 	.word	0x00402b57
  407944:	20400ccc 	.word	0x20400ccc

00407948 <main_sof_action>:
{
  407948:	b508      	push	{r3, lr}
	if (!main_b_vendor_enable)
  40794a:	4b04      	ldr	r3, [pc, #16]	; (40795c <main_sof_action+0x14>)
  40794c:	781b      	ldrb	r3, [r3, #0]
  40794e:	b903      	cbnz	r3, 407952 <main_sof_action+0xa>
  407950:	bd08      	pop	{r3, pc}
	ui_process(udd_get_frame_number());
  407952:	4b03      	ldr	r3, [pc, #12]	; (407960 <main_sof_action+0x18>)
  407954:	4798      	blx	r3
  407956:	4b03      	ldr	r3, [pc, #12]	; (407964 <main_sof_action+0x1c>)
  407958:	4798      	blx	r3
  40795a:	e7f9      	b.n	407950 <main_sof_action+0x8>
  40795c:	20400cce 	.word	0x20400cce
  407960:	00404825 	.word	0x00404825
  407964:	00402b5b 	.word	0x00402b5b

00407968 <main_vendor_disable>:
	main_b_vendor_enable = false;
  407968:	2200      	movs	r2, #0
  40796a:	4b01      	ldr	r3, [pc, #4]	; (407970 <main_vendor_disable+0x8>)
  40796c:	701a      	strb	r2, [r3, #0]
  40796e:	4770      	bx	lr
  407970:	20400cce 	.word	0x20400cce

00407974 <main_setup_out_received>:
	udd_g_ctrlreq.payload = main_buf_loopback;
  407974:	4b05      	ldr	r3, [pc, #20]	; (40798c <main_setup_out_received+0x18>)
  407976:	4a06      	ldr	r2, [pc, #24]	; (407990 <main_setup_out_received+0x1c>)
  407978:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = min(
  40797a:	88da      	ldrh	r2, [r3, #6]
  40797c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407980:	bf28      	it	cs
  407982:	f44f 7200 	movcs.w	r2, #512	; 0x200
  407986:	819a      	strh	r2, [r3, #12]
}
  407988:	2001      	movs	r0, #1
  40798a:	4770      	bx	lr
  40798c:	20400f18 	.word	0x20400f18
  407990:	20400cd0 	.word	0x20400cd0

00407994 <main_setup_in_received>:
	udd_g_ctrlreq.payload = main_buf_loopback;
  407994:	4b05      	ldr	r3, [pc, #20]	; (4079ac <main_setup_in_received+0x18>)
  407996:	4a06      	ldr	r2, [pc, #24]	; (4079b0 <main_setup_in_received+0x1c>)
  407998:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size =
  40799a:	88da      	ldrh	r2, [r3, #6]
  40799c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4079a0:	bf28      	it	cs
  4079a2:	f44f 7200 	movcs.w	r2, #512	; 0x200
  4079a6:	819a      	strh	r2, [r3, #12]
}
  4079a8:	2001      	movs	r0, #1
  4079aa:	4770      	bx	lr
  4079ac:	20400f18 	.word	0x20400f18
  4079b0:	20400cd0 	.word	0x20400cd0

004079b4 <receiveUSBcamConfig>:
void receiveUSBcamConfig(void){
  4079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4079b6:	4d06      	ldr	r5, [pc, #24]	; (4079d0 <receiveUSBcamConfig+0x1c>)
  4079b8:	1e6c      	subs	r4, r5, #1
  4079ba:	3577      	adds	r5, #119	; 0x77
		printf("%x",main_buf_loopback[iters]);
  4079bc:	4f05      	ldr	r7, [pc, #20]	; (4079d4 <receiveUSBcamConfig+0x20>)
  4079be:	4e06      	ldr	r6, [pc, #24]	; (4079d8 <receiveUSBcamConfig+0x24>)
  4079c0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  4079c4:	4638      	mov	r0, r7
  4079c6:	47b0      	blx	r6
	for(iters=0;iters<120;iters++){
  4079c8:	42ac      	cmp	r4, r5
  4079ca:	d1f9      	bne.n	4079c0 <receiveUSBcamConfig+0xc>
}
  4079cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4079ce:	bf00      	nop
  4079d0:	20400cd0 	.word	0x20400cd0
  4079d4:	004107e8 	.word	0x004107e8
  4079d8:	0040c895 	.word	0x0040c895

004079dc <RGB565toRGB888>:
void RGB565toRGB888 (void){
  4079dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  4079e0:	4822      	ldr	r0, [pc, #136]	; (407a6c <RGB565toRGB888+0x90>)
  4079e2:	4c23      	ldr	r4, [pc, #140]	; (407a70 <RGB565toRGB888+0x94>)
  4079e4:	4f23      	ldr	r7, [pc, #140]	; (407a74 <RGB565toRGB888+0x98>)
  4079e6:	4e24      	ldr	r6, [pc, #144]	; (407a78 <RGB565toRGB888+0x9c>)
	for(picBlockCtr=0;picBlockCtr<600;picBlockCtr++){
  4079e8:	4d24      	ldr	r5, [pc, #144]	; (407a7c <RGB565toRGB888+0xa0>)
  4079ea:	19e1      	adds	r1, r4, r7
  4079ec:	f5a0 5296 	sub.w	r2, r0, #4800	; 0x12c0
  4079f0:	eb04 0806 	add.w	r8, r4, r6
			firstByte=*camBuffPtrA++;
  4079f4:	f811 cc02 	ldrb.w	ip, [r1, #-2]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  4079f8:	f811 ec01 	ldrb.w	lr, [r1, #-1]
			blueByte=(firstByte&0xF8);
  4079fc:	f02c 0307 	bic.w	r3, ip, #7
			*camBuffPtrC++=blueByte;
  407a00:	f802 3c03 	strb.w	r3, [r2, #-3]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  407a04:	ea4f 03ee 	mov.w	r3, lr, asr #3
  407a08:	f003 031c 	and.w	r3, r3, #28
  407a0c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
			*camBuffPtrC++=greenByte;
  407a10:	f802 3c02 	strb.w	r3, [r2, #-2]
			redByte=(secondByte&0x1F)<<3;
  407a14:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  407a18:	f802 ec01 	strb.w	lr, [r2, #-1]
  407a1c:	3102      	adds	r1, #2
  407a1e:	3203      	adds	r2, #3
		for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  407a20:	4541      	cmp	r1, r8
  407a22:	d1e7      	bne.n	4079f4 <RGB565toRGB888+0x18>
  407a24:	f500 5896 	add.w	r8, r0, #4800	; 0x12c0
  407a28:	4603      	mov	r3, r0
  407a2a:	46a6      	mov	lr, r4
			firstByte=*camBuffPtrB++;
  407a2c:	f81e cc02 	ldrb.w	ip, [lr, #-2]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  407a30:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
			blueByte=(firstByte&0xF8);
  407a34:	f02c 0207 	bic.w	r2, ip, #7
			*camBuffPtrC++=blueByte;
  407a38:	f803 2c03 	strb.w	r2, [r3, #-3]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  407a3c:	10ca      	asrs	r2, r1, #3
  407a3e:	f002 021c 	and.w	r2, r2, #28
  407a42:	eb02 124c 	add.w	r2, r2, ip, lsl #5
			*camBuffPtrC++=greenByte;
  407a46:	f803 2c02 	strb.w	r2, [r3, #-2]
			redByte=(secondByte&0x1F)<<3;
  407a4a:	00c9      	lsls	r1, r1, #3
  407a4c:	f803 1c01 	strb.w	r1, [r3, #-1]
  407a50:	f10e 0e02 	add.w	lr, lr, #2
  407a54:	3303      	adds	r3, #3
		for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  407a56:	4543      	cmp	r3, r8
  407a58:	d1e8      	bne.n	407a2c <RGB565toRGB888+0x50>
  407a5a:	f504 6448 	add.w	r4, r4, #3200	; 0xc80
  407a5e:	f500 5016 	add.w	r0, r0, #9600	; 0x2580
	for(picBlockCtr=0;picBlockCtr<600;picBlockCtr++){
  407a62:	42a8      	cmp	r0, r5
  407a64:	d1c1      	bne.n	4079ea <RGB565toRGB888+0xe>
  407a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407a6a:	bf00      	nop
  407a6c:	703aaac3 	.word	0x703aaac3
  407a70:	701d3302 	.word	0x701d3302
  407a74:	ffe2cd00 	.word	0xffe2cd00
  407a78:	ffe2d980 	.word	0xffe2d980
  407a7c:	70928ec3 	.word	0x70928ec3

00407a80 <LCDclear>:
void LCDclear (void){
  407a80:	b510      	push	{r4, lr}
  407a82:	b086      	sub	sp, #24
	printf("%c%c%c%c%c%c%c%c",0xFE,0x46,0xFE,0x48,0xFE,0x4C,0xFE,0x51);//clear display, cursor home
  407a84:	2351      	movs	r3, #81	; 0x51
  407a86:	9304      	str	r3, [sp, #16]
  407a88:	21fe      	movs	r1, #254	; 0xfe
  407a8a:	9103      	str	r1, [sp, #12]
  407a8c:	234c      	movs	r3, #76	; 0x4c
  407a8e:	9302      	str	r3, [sp, #8]
  407a90:	9101      	str	r1, [sp, #4]
  407a92:	2348      	movs	r3, #72	; 0x48
  407a94:	9300      	str	r3, [sp, #0]
  407a96:	460b      	mov	r3, r1
  407a98:	2246      	movs	r2, #70	; 0x46
  407a9a:	4804      	ldr	r0, [pc, #16]	; (407aac <LCDclear+0x2c>)
  407a9c:	4c04      	ldr	r4, [pc, #16]	; (407ab0 <LCDclear+0x30>)
  407a9e:	47a0      	blx	r4
	delay_ms(10);
  407aa0:	4804      	ldr	r0, [pc, #16]	; (407ab4 <LCDclear+0x34>)
  407aa2:	4b05      	ldr	r3, [pc, #20]	; (407ab8 <LCDclear+0x38>)
  407aa4:	4798      	blx	r3
}
  407aa6:	b006      	add	sp, #24
  407aa8:	bd10      	pop	{r4, pc}
  407aaa:	bf00      	nop
  407aac:	004102a0 	.word	0x004102a0
  407ab0:	0040c895 	.word	0x0040c895
  407ab4:	0007b784 	.word	0x0007b784
  407ab8:	2040008d 	.word	0x2040008d

00407abc <sendCmdToTiny>:
 void sendCmdToTiny(char cmdToSend){
  407abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407abe:	4604      	mov	r4, r0
	 if((cmdToSend&0x80)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407ac0:	f010 0f80 	tst.w	r0, #128	; 0x80
  407ac4:	f040 8086 	bne.w	407bd4 <sendCmdToTiny+0x118>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407ac8:	2201      	movs	r2, #1
  407aca:	4b52      	ldr	r3, [pc, #328]	; (407c14 <sendCmdToTiny+0x158>)
  407acc:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  407ace:	f240 302a 	movw	r0, #810	; 0x32a
  407ad2:	4f51      	ldr	r7, [pc, #324]	; (407c18 <sendCmdToTiny+0x15c>)
  407ad4:	47b8      	blx	r7
  407ad6:	4d51      	ldr	r5, [pc, #324]	; (407c1c <sendCmdToTiny+0x160>)
  407ad8:	2608      	movs	r6, #8
  407ada:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  407adc:	f240 302a 	movw	r0, #810	; 0x32a
  407ae0:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407ae2:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x40)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407ae4:	f014 0f40 	tst.w	r4, #64	; 0x40
  407ae8:	d178      	bne.n	407bdc <sendCmdToTiny+0x120>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407aea:	2201      	movs	r2, #1
  407aec:	4b49      	ldr	r3, [pc, #292]	; (407c14 <sendCmdToTiny+0x158>)
  407aee:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  407af0:	f240 302a 	movw	r0, #810	; 0x32a
  407af4:	4f48      	ldr	r7, [pc, #288]	; (407c18 <sendCmdToTiny+0x15c>)
  407af6:	47b8      	blx	r7
  407af8:	4d48      	ldr	r5, [pc, #288]	; (407c1c <sendCmdToTiny+0x160>)
  407afa:	2608      	movs	r6, #8
  407afc:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  407afe:	f240 302a 	movw	r0, #810	; 0x32a
  407b02:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407b04:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x20)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407b06:	f014 0f20 	tst.w	r4, #32
  407b0a:	d16b      	bne.n	407be4 <sendCmdToTiny+0x128>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407b0c:	2201      	movs	r2, #1
  407b0e:	4b41      	ldr	r3, [pc, #260]	; (407c14 <sendCmdToTiny+0x158>)
  407b10:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  407b12:	f240 302a 	movw	r0, #810	; 0x32a
  407b16:	4f40      	ldr	r7, [pc, #256]	; (407c18 <sendCmdToTiny+0x15c>)
  407b18:	47b8      	blx	r7
  407b1a:	4d40      	ldr	r5, [pc, #256]	; (407c1c <sendCmdToTiny+0x160>)
  407b1c:	2608      	movs	r6, #8
  407b1e:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  407b20:	f240 302a 	movw	r0, #810	; 0x32a
  407b24:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407b26:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x10)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407b28:	f014 0f10 	tst.w	r4, #16
  407b2c:	d15e      	bne.n	407bec <sendCmdToTiny+0x130>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407b2e:	2201      	movs	r2, #1
  407b30:	4b38      	ldr	r3, [pc, #224]	; (407c14 <sendCmdToTiny+0x158>)
  407b32:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  407b34:	f240 302a 	movw	r0, #810	; 0x32a
  407b38:	4f37      	ldr	r7, [pc, #220]	; (407c18 <sendCmdToTiny+0x15c>)
  407b3a:	47b8      	blx	r7
  407b3c:	4d37      	ldr	r5, [pc, #220]	; (407c1c <sendCmdToTiny+0x160>)
  407b3e:	2608      	movs	r6, #8
  407b40:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  407b42:	f240 302a 	movw	r0, #810	; 0x32a
  407b46:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407b48:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x08)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407b4a:	f014 0f08 	tst.w	r4, #8
  407b4e:	d151      	bne.n	407bf4 <sendCmdToTiny+0x138>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407b50:	2201      	movs	r2, #1
  407b52:	4b30      	ldr	r3, [pc, #192]	; (407c14 <sendCmdToTiny+0x158>)
  407b54:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  407b56:	f240 302a 	movw	r0, #810	; 0x32a
  407b5a:	4f2f      	ldr	r7, [pc, #188]	; (407c18 <sendCmdToTiny+0x15c>)
  407b5c:	47b8      	blx	r7
  407b5e:	4d2f      	ldr	r5, [pc, #188]	; (407c1c <sendCmdToTiny+0x160>)
  407b60:	2608      	movs	r6, #8
  407b62:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  407b64:	f240 302a 	movw	r0, #810	; 0x32a
  407b68:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407b6a:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x04)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407b6c:	f014 0f04 	tst.w	r4, #4
  407b70:	d144      	bne.n	407bfc <sendCmdToTiny+0x140>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407b72:	2201      	movs	r2, #1
  407b74:	4b27      	ldr	r3, [pc, #156]	; (407c14 <sendCmdToTiny+0x158>)
  407b76:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  407b78:	f240 302a 	movw	r0, #810	; 0x32a
  407b7c:	4f26      	ldr	r7, [pc, #152]	; (407c18 <sendCmdToTiny+0x15c>)
  407b7e:	47b8      	blx	r7
  407b80:	4d26      	ldr	r5, [pc, #152]	; (407c1c <sendCmdToTiny+0x160>)
  407b82:	2608      	movs	r6, #8
  407b84:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  407b86:	f240 302a 	movw	r0, #810	; 0x32a
  407b8a:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407b8c:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x02)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407b8e:	f014 0f02 	tst.w	r4, #2
  407b92:	d137      	bne.n	407c04 <sendCmdToTiny+0x148>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407b94:	2201      	movs	r2, #1
  407b96:	4b1f      	ldr	r3, [pc, #124]	; (407c14 <sendCmdToTiny+0x158>)
  407b98:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  407b9a:	f240 302a 	movw	r0, #810	; 0x32a
  407b9e:	4f1e      	ldr	r7, [pc, #120]	; (407c18 <sendCmdToTiny+0x15c>)
  407ba0:	47b8      	blx	r7
  407ba2:	4d1e      	ldr	r5, [pc, #120]	; (407c1c <sendCmdToTiny+0x160>)
  407ba4:	2608      	movs	r6, #8
  407ba6:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  407ba8:	f240 302a 	movw	r0, #810	; 0x32a
  407bac:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407bae:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x01)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407bb0:	f014 0f01 	tst.w	r4, #1
  407bb4:	d02a      	beq.n	407c0c <sendCmdToTiny+0x150>
  407bb6:	2201      	movs	r2, #1
  407bb8:	4b16      	ldr	r3, [pc, #88]	; (407c14 <sendCmdToTiny+0x158>)
  407bba:	631a      	str	r2, [r3, #48]	; 0x30
	 delay_us(TINY_CLK_DELAY);
  407bbc:	f240 302a 	movw	r0, #810	; 0x32a
  407bc0:	4e15      	ldr	r6, [pc, #84]	; (407c18 <sendCmdToTiny+0x15c>)
  407bc2:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407bc4:	4c15      	ldr	r4, [pc, #84]	; (407c1c <sendCmdToTiny+0x160>)
  407bc6:	2508      	movs	r5, #8
  407bc8:	6365      	str	r5, [r4, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  407bca:	f240 302a 	movw	r0, #810	; 0x32a
  407bce:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407bd0:	6325      	str	r5, [r4, #48]	; 0x30
  407bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407bd4:	2201      	movs	r2, #1
  407bd6:	4b0f      	ldr	r3, [pc, #60]	; (407c14 <sendCmdToTiny+0x158>)
  407bd8:	631a      	str	r2, [r3, #48]	; 0x30
  407bda:	e778      	b.n	407ace <sendCmdToTiny+0x12>
  407bdc:	2201      	movs	r2, #1
  407bde:	4b0d      	ldr	r3, [pc, #52]	; (407c14 <sendCmdToTiny+0x158>)
  407be0:	631a      	str	r2, [r3, #48]	; 0x30
  407be2:	e785      	b.n	407af0 <sendCmdToTiny+0x34>
  407be4:	2201      	movs	r2, #1
  407be6:	4b0b      	ldr	r3, [pc, #44]	; (407c14 <sendCmdToTiny+0x158>)
  407be8:	631a      	str	r2, [r3, #48]	; 0x30
  407bea:	e792      	b.n	407b12 <sendCmdToTiny+0x56>
  407bec:	2201      	movs	r2, #1
  407bee:	4b09      	ldr	r3, [pc, #36]	; (407c14 <sendCmdToTiny+0x158>)
  407bf0:	631a      	str	r2, [r3, #48]	; 0x30
  407bf2:	e79f      	b.n	407b34 <sendCmdToTiny+0x78>
  407bf4:	2201      	movs	r2, #1
  407bf6:	4b07      	ldr	r3, [pc, #28]	; (407c14 <sendCmdToTiny+0x158>)
  407bf8:	631a      	str	r2, [r3, #48]	; 0x30
  407bfa:	e7ac      	b.n	407b56 <sendCmdToTiny+0x9a>
  407bfc:	2201      	movs	r2, #1
  407bfe:	4b05      	ldr	r3, [pc, #20]	; (407c14 <sendCmdToTiny+0x158>)
  407c00:	631a      	str	r2, [r3, #48]	; 0x30
  407c02:	e7b9      	b.n	407b78 <sendCmdToTiny+0xbc>
  407c04:	2201      	movs	r2, #1
  407c06:	4b03      	ldr	r3, [pc, #12]	; (407c14 <sendCmdToTiny+0x158>)
  407c08:	631a      	str	r2, [r3, #48]	; 0x30
  407c0a:	e7c6      	b.n	407b9a <sendCmdToTiny+0xde>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407c0c:	2201      	movs	r2, #1
  407c0e:	4b01      	ldr	r3, [pc, #4]	; (407c14 <sendCmdToTiny+0x158>)
  407c10:	635a      	str	r2, [r3, #52]	; 0x34
  407c12:	e7d3      	b.n	407bbc <sendCmdToTiny+0x100>
  407c14:	400e1000 	.word	0x400e1000
  407c18:	2040008d 	.word	0x2040008d
  407c1c:	400e1400 	.word	0x400e1400

00407c20 <getByteFromTiny>:
char getByteFromTiny(void){
  407c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407c22:	4c48      	ldr	r4, [pc, #288]	; (407d44 <getByteFromTiny+0x124>)
  407c24:	2508      	movs	r5, #8
  407c26:	6325      	str	r5, [r4, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep. Making only this one longer doesn't help.
  407c28:	f240 302a 	movw	r0, #810	; 0x32a
  407c2c:	4b46      	ldr	r3, [pc, #280]	; (407d48 <getByteFromTiny+0x128>)
  407c2e:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407c30:	6365      	str	r5, [r4, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407c32:	4b46      	ldr	r3, [pc, #280]	; (407d4c <getByteFromTiny+0x12c>)
  407c34:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  407c36:	f004 0401 	and.w	r4, r4, #1
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x80;
  407c3a:	01e4      	lsls	r4, r4, #7
	delay_us(TINY_CLK_DELAY);
  407c3c:	f240 302a 	movw	r0, #810	; 0x32a
  407c40:	4f41      	ldr	r7, [pc, #260]	; (407d48 <getByteFromTiny+0x128>)
  407c42:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407c44:	4d3f      	ldr	r5, [pc, #252]	; (407d44 <getByteFromTiny+0x124>)
  407c46:	2608      	movs	r6, #8
  407c48:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  407c4a:	f240 302a 	movw	r0, #810	; 0x32a
  407c4e:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407c50:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407c52:	4b3e      	ldr	r3, [pc, #248]	; (407d4c <getByteFromTiny+0x12c>)
  407c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x40;
  407c56:	f013 0f01 	tst.w	r3, #1
  407c5a:	bf18      	it	ne
  407c5c:	f044 0440 	orrne.w	r4, r4, #64	; 0x40
	delay_us(TINY_CLK_DELAY);
  407c60:	f240 302a 	movw	r0, #810	; 0x32a
  407c64:	4f38      	ldr	r7, [pc, #224]	; (407d48 <getByteFromTiny+0x128>)
  407c66:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407c68:	4d36      	ldr	r5, [pc, #216]	; (407d44 <getByteFromTiny+0x124>)
  407c6a:	2608      	movs	r6, #8
  407c6c:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  407c6e:	f240 302a 	movw	r0, #810	; 0x32a
  407c72:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407c74:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407c76:	4b35      	ldr	r3, [pc, #212]	; (407d4c <getByteFromTiny+0x12c>)
  407c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x20;
  407c7a:	f013 0f01 	tst.w	r3, #1
  407c7e:	bf18      	it	ne
  407c80:	f044 0420 	orrne.w	r4, r4, #32
	delay_us(TINY_CLK_DELAY);
  407c84:	f240 302a 	movw	r0, #810	; 0x32a
  407c88:	4f2f      	ldr	r7, [pc, #188]	; (407d48 <getByteFromTiny+0x128>)
  407c8a:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407c8c:	4d2d      	ldr	r5, [pc, #180]	; (407d44 <getByteFromTiny+0x124>)
  407c8e:	2608      	movs	r6, #8
  407c90:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  407c92:	f240 302a 	movw	r0, #810	; 0x32a
  407c96:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407c98:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407c9a:	4b2c      	ldr	r3, [pc, #176]	; (407d4c <getByteFromTiny+0x12c>)
  407c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x10;
  407c9e:	f013 0f01 	tst.w	r3, #1
  407ca2:	bf18      	it	ne
  407ca4:	f044 0410 	orrne.w	r4, r4, #16
	delay_us(TINY_CLK_DELAY);
  407ca8:	f240 302a 	movw	r0, #810	; 0x32a
  407cac:	4f26      	ldr	r7, [pc, #152]	; (407d48 <getByteFromTiny+0x128>)
  407cae:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407cb0:	4d24      	ldr	r5, [pc, #144]	; (407d44 <getByteFromTiny+0x124>)
  407cb2:	2608      	movs	r6, #8
  407cb4:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  407cb6:	f240 302a 	movw	r0, #810	; 0x32a
  407cba:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407cbc:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407cbe:	4b23      	ldr	r3, [pc, #140]	; (407d4c <getByteFromTiny+0x12c>)
  407cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x08;
  407cc2:	f013 0f01 	tst.w	r3, #1
  407cc6:	bf18      	it	ne
  407cc8:	4334      	orrne	r4, r6
	delay_us(TINY_CLK_DELAY);
  407cca:	f240 302a 	movw	r0, #810	; 0x32a
  407cce:	4f1e      	ldr	r7, [pc, #120]	; (407d48 <getByteFromTiny+0x128>)
  407cd0:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407cd2:	4d1c      	ldr	r5, [pc, #112]	; (407d44 <getByteFromTiny+0x124>)
  407cd4:	2608      	movs	r6, #8
  407cd6:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  407cd8:	f240 302a 	movw	r0, #810	; 0x32a
  407cdc:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407cde:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407ce0:	4b1a      	ldr	r3, [pc, #104]	; (407d4c <getByteFromTiny+0x12c>)
  407ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x04;
  407ce4:	f013 0f01 	tst.w	r3, #1
  407ce8:	bf18      	it	ne
  407cea:	f044 0404 	orrne.w	r4, r4, #4
	delay_us(TINY_CLK_DELAY);
  407cee:	f240 302a 	movw	r0, #810	; 0x32a
  407cf2:	4f15      	ldr	r7, [pc, #84]	; (407d48 <getByteFromTiny+0x128>)
  407cf4:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407cf6:	4d13      	ldr	r5, [pc, #76]	; (407d44 <getByteFromTiny+0x124>)
  407cf8:	2608      	movs	r6, #8
  407cfa:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  407cfc:	f240 302a 	movw	r0, #810	; 0x32a
  407d00:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407d02:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407d04:	4b11      	ldr	r3, [pc, #68]	; (407d4c <getByteFromTiny+0x12c>)
  407d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x02;
  407d08:	f013 0f01 	tst.w	r3, #1
  407d0c:	bf18      	it	ne
  407d0e:	f044 0402 	orrne.w	r4, r4, #2
	delay_us(TINY_CLK_DELAY);
  407d12:	f240 302a 	movw	r0, #810	; 0x32a
  407d16:	4f0c      	ldr	r7, [pc, #48]	; (407d48 <getByteFromTiny+0x128>)
  407d18:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407d1a:	4d0a      	ldr	r5, [pc, #40]	; (407d44 <getByteFromTiny+0x124>)
  407d1c:	2608      	movs	r6, #8
  407d1e:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  407d20:	f240 302a 	movw	r0, #810	; 0x32a
  407d24:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407d26:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407d28:	4b08      	ldr	r3, [pc, #32]	; (407d4c <getByteFromTiny+0x12c>)
  407d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x01;
  407d2c:	f013 0f01 	tst.w	r3, #1
  407d30:	bf18      	it	ne
  407d32:	f044 0401 	orrne.w	r4, r4, #1
	delay_us(TINY_CLK_DELAY);
  407d36:	f240 302a 	movw	r0, #810	; 0x32a
  407d3a:	4b03      	ldr	r3, [pc, #12]	; (407d48 <getByteFromTiny+0x128>)
  407d3c:	4798      	blx	r3
}
  407d3e:	4620      	mov	r0, r4
  407d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d42:	bf00      	nop
  407d44:	400e1400 	.word	0x400e1400
  407d48:	2040008d 	.word	0x2040008d
  407d4c:	400e1000 	.word	0x400e1000

00407d50 <calcCRC>:
   for (i=0;i<LEN;i++){       //for each element
  407d50:	2900      	cmp	r1, #0
  407d52:	dd20      	ble.n	407d96 <calcCRC+0x46>
unsigned short calcCRC(char cbuff[], int LEN) {
  407d54:	b5f0      	push	{r4, r5, r6, r7, lr}
  407d56:	4605      	mov	r5, r0
  407d58:	1847      	adds	r7, r0, r1
   for (i=0;i<LEN;i++){       //for each element
  407d5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
       if((Y & cbuff[i]) != 0){ X++;};
  407d5e:	f04f 0e80 	mov.w	lr, #128	; 0x80
       if ((Z & 0x8000) != 0) {X ^= 0x1021; };
  407d62:	f241 0621 	movw	r6, #4129	; 0x1021
  407d66:	e011      	b.n	407d8c <calcCRC+0x3c>
       Y >>= 1;
  407d68:	0849      	lsrs	r1, r1, #1
       if ((Z & 0x8000) != 0) {X ^= 0x1021; };
  407d6a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  407d6e:	bf14      	ite	ne
  407d70:	ea83 0006 	eorne.w	r0, r3, r6
  407d74:	4618      	moveq	r0, r3
     for (j=0;j<8;j++){
  407d76:	3a01      	subs	r2, #1
  407d78:	d006      	beq.n	407d88 <calcCRC+0x38>
       X <<= 1;
  407d7a:	0043      	lsls	r3, r0, #1
  407d7c:	b29b      	uxth	r3, r3
       if((Y & cbuff[i]) != 0){ X++;};
  407d7e:	4221      	tst	r1, r4
  407d80:	d0f2      	beq.n	407d68 <calcCRC+0x18>
  407d82:	3301      	adds	r3, #1
  407d84:	b29b      	uxth	r3, r3
  407d86:	e7ef      	b.n	407d68 <calcCRC+0x18>
   for (i=0;i<LEN;i++){       //for each element
  407d88:	42bd      	cmp	r5, r7
  407d8a:	d013      	beq.n	407db4 <calcCRC+0x64>
       if((Y & cbuff[i]) != 0){ X++;};
  407d8c:	f815 4b01 	ldrb.w	r4, [r5], #1
  407d90:	2208      	movs	r2, #8
  407d92:	4671      	mov	r1, lr
  407d94:	e7f1      	b.n	407d7a <calcCRC+0x2a>
   unsigned short X = 0xFFFF;
  407d96:	f64f 70ff 	movw	r0, #65535	; 0xffff
  407d9a:	2310      	movs	r3, #16
    if ((X & 0x8000) != 0) { X<<=1; X ^= 0x1021; } else X <<= 1;
  407d9c:	f241 0221 	movw	r2, #4129	; 0x1021
  407da0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  407da4:	ea4f 0040 	mov.w	r0, r0, lsl #1
  407da8:	b280      	uxth	r0, r0
  407daa:	bf18      	it	ne
  407dac:	4050      	eorne	r0, r2
  for (i=0;i<16;i++){
  407dae:	3b01      	subs	r3, #1
  407db0:	d1f6      	bne.n	407da0 <calcCRC+0x50>
  407db2:	4770      	bx	lr
   unsigned short X = 0xFFFF;
  407db4:	2310      	movs	r3, #16
    if ((X & 0x8000) != 0) { X<<=1; X ^= 0x1021; } else X <<= 1;
  407db6:	f241 0221 	movw	r2, #4129	; 0x1021
  407dba:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  407dbe:	ea4f 0040 	mov.w	r0, r0, lsl #1
  407dc2:	b280      	uxth	r0, r0
  407dc4:	bf18      	it	ne
  407dc6:	4050      	eorne	r0, r2
  for (i=0;i<16;i++){
  407dc8:	3b01      	subs	r3, #1
  407dca:	d1f6      	bne.n	407dba <calcCRC+0x6a>
}
  407dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00407dd0 <hex2ToAscii>:
void hex2ToAscii(int hexx, char* asciiChars){
  407dd0:	b570      	push	{r4, r5, r6, lr}
  407dd2:	460c      	mov	r4, r1
   hexx &= 0x000FFFFF;
  407dd4:	f3c0 0613 	ubfx	r6, r0, #0, #20
   asciiChars[0] = hex1ToAscii(hexx);
  407dd8:	4630      	mov	r0, r6
  407dda:	4d08      	ldr	r5, [pc, #32]	; (407dfc <hex2ToAscii+0x2c>)
  407ddc:	47a8      	blx	r5
  407dde:	7020      	strb	r0, [r4, #0]
   asciiChars[1] = hex1ToAscii(hexx);
  407de0:	1130      	asrs	r0, r6, #4
  407de2:	47a8      	blx	r5
  407de4:	7060      	strb	r0, [r4, #1]
   asciiChars[2] = hex1ToAscii(hexx);
  407de6:	1230      	asrs	r0, r6, #8
  407de8:	47a8      	blx	r5
  407dea:	70a0      	strb	r0, [r4, #2]
   asciiChars[3] = hex1ToAscii(hexx);
  407dec:	1330      	asrs	r0, r6, #12
  407dee:	47a8      	blx	r5
  407df0:	70e0      	strb	r0, [r4, #3]
   asciiChars[4] = hex1ToAscii(hexx);
  407df2:	1430      	asrs	r0, r6, #16
  407df4:	47a8      	blx	r5
  407df6:	7120      	strb	r0, [r4, #4]
  407df8:	bd70      	pop	{r4, r5, r6, pc}
  407dfa:	bf00      	nop
  407dfc:	00407205 	.word	0x00407205

00407e00 <getGPSdateTimeFrmTiny>:
/***********************************************************************/
/*  Interrupt from Tiny
/***********************************************************************/
void getGPSdateTimeFrmTiny(void){
  407e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407e04:	b09b      	sub	sp, #108	; 0x6c
	char iters;
	unsigned short crcrc;
	int yearNow,LatFract,LongFract;
	unsigned int params[4];

	pmc_enable_periph_clk(ID_PIOB);
  407e06:	200b      	movs	r0, #11
  407e08:	4c97      	ldr	r4, [pc, #604]	; (408068 <getGPSdateTimeFrmTiny+0x268>)
  407e0a:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  407e0c:	2010      	movs	r0, #16
  407e0e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407e10:	4b96      	ldr	r3, [pc, #600]	; (40806c <getGPSdateTimeFrmTiny+0x26c>)
  407e12:	2208      	movs	r2, #8
  407e14:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407e16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407e1a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407e1c:	4994      	ldr	r1, [pc, #592]	; (408070 <getGPSdateTimeFrmTiny+0x270>)
  407e1e:	2001      	movs	r0, #1
  407e20:	6148      	str	r0, [r1, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407e22:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407e26:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(BigTiny_CLK, 1);
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_INPUT);
	ioport_set_pin_level(BigTiny_CLK, 0);//start condition for big-to-tiny
	delay_us(150);
  407e28:	f641 50a2 	movw	r0, #7586	; 0x1da2
  407e2c:	4b91      	ldr	r3, [pc, #580]	; (408074 <getGPSdateTimeFrmTiny+0x274>)
  407e2e:	4798      	blx	r3
  407e30:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
  407e34:	ae12      	add	r6, sp, #72	; 0x48
	for(iters=0;iters<25;iters++){
		rcvFromTinyGG[iters]=getByteFromTiny();
  407e36:	4d90      	ldr	r5, [pc, #576]	; (408078 <getGPSdateTimeFrmTiny+0x278>)
  407e38:	47a8      	blx	r5
  407e3a:	f804 0f01 	strb.w	r0, [r4, #1]!
	for(iters=0;iters<25;iters++){
  407e3e:	42a6      	cmp	r6, r4
  407e40:	d1fa      	bne.n	407e38 <getGPSdateTimeFrmTiny+0x38>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407e42:	2208      	movs	r2, #8
  407e44:	4b89      	ldr	r3, [pc, #548]	; (40806c <getGPSdateTimeFrmTiny+0x26c>)
  407e46:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ioport_set_pin_level(BigTiny_CLK, 1);//start condition for tiny-to-big
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  407e48:	4a8c      	ldr	r2, [pc, #560]	; (40807c <getGPSdateTimeFrmTiny+0x27c>)
  407e4a:	f503 638a 	add.w	r3, r3, #1104	; 0x450
  407e4e:	601a      	str	r2, [r3, #0]
	crcrc=calcCRC(rcvFromTinyGG,23);
  407e50:	2117      	movs	r1, #23
  407e52:	a80c      	add	r0, sp, #48	; 0x30
  407e54:	4b8a      	ldr	r3, [pc, #552]	; (408080 <getGPSdateTimeFrmTiny+0x280>)
  407e56:	4798      	blx	r3
	if(((crcrc>>8)!=rcvFromTinyGG[23])||((crcrc&0x00FF)!=rcvFromTinyGG[24])){
  407e58:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
  407e5c:	f3c0 230f 	ubfx	r3, r0, #8, #16
  407e60:	429a      	cmp	r2, r3
  407e62:	d104      	bne.n	407e6e <getGPSdateTimeFrmTiny+0x6e>
  407e64:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
  407e68:	b2c0      	uxtb	r0, r0
  407e6a:	4283      	cmp	r3, r0
  407e6c:	d02e      	beq.n	407ecc <getGPSdateTimeFrmTiny+0xcc>
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407e6e:	4b7f      	ldr	r3, [pc, #508]	; (40806c <getGPSdateTimeFrmTiny+0x26c>)
  407e70:	2208      	movs	r2, #8
  407e72:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407e74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407e78:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407e7a:	4c7d      	ldr	r4, [pc, #500]	; (408070 <getGPSdateTimeFrmTiny+0x270>)
  407e7c:	2501      	movs	r5, #1
  407e7e:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407e80:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);//WakeUp Tiny
		ioport_set_pin_level(BigTiny_CLK, 1);//start condition
		ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);//WakeUp Tiny
		sendCmdToTiny('b');//potential addition tshoooooooooooot
  407e84:	2062      	movs	r0, #98	; 0x62
  407e86:	4b7f      	ldr	r3, [pc, #508]	; (408084 <getGPSdateTimeFrmTiny+0x284>)
  407e88:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407e8a:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407e8c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_INPUT);//WakeUp Tiny
#ifdef DO_DIAGS
		configure_console();  //TSHOOOOOOOOOOOOOOT
  407e90:	4b7d      	ldr	r3, [pc, #500]	; (408088 <getGPSdateTimeFrmTiny+0x288>)
  407e92:	4798      	blx	r3
		printf("\r\nFAIL CRC TO TINY\r\n");
  407e94:	487d      	ldr	r0, [pc, #500]	; (40808c <getGPSdateTimeFrmTiny+0x28c>)
  407e96:	4b7e      	ldr	r3, [pc, #504]	; (408090 <getGPSdateTimeFrmTiny+0x290>)
  407e98:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407e9a:	4b74      	ldr	r3, [pc, #464]	; (40806c <getGPSdateTimeFrmTiny+0x26c>)
  407e9c:	2208      	movs	r2, #8
  407e9e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407ea0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407ea4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407ea6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  407eaa:	2201      	movs	r2, #1
  407eac:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407eae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407eb2:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407eb4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
	ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);//WakeUp Tiny
	ioport_set_pin_level(BigTiny_CLK, 1);//start condition for tiny-to-big
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);//WakeUp Tiny
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_INPUT);//WakeUp Tiny
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  407eb8:	4c76      	ldr	r4, [pc, #472]	; (408094 <getGPSdateTimeFrmTiny+0x294>)
  407eba:	4d70      	ldr	r5, [pc, #448]	; (40807c <getGPSdateTimeFrmTiny+0x27c>)
  407ebc:	6025      	str	r5, [r4, #0]
	delay_ms(1000);
  407ebe:	4876      	ldr	r0, [pc, #472]	; (408098 <getGPSdateTimeFrmTiny+0x298>)
  407ec0:	4b6c      	ldr	r3, [pc, #432]	; (408074 <getGPSdateTimeFrmTiny+0x274>)
  407ec2:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  407ec4:	6025      	str	r5, [r4, #0]
}
  407ec6:	b01b      	add	sp, #108	; 0x6c
  407ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407ecc:	4b67      	ldr	r3, [pc, #412]	; (40806c <getGPSdateTimeFrmTiny+0x26c>)
  407ece:	2208      	movs	r2, #8
  407ed0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407ed2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407ed6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407ed8:	4c65      	ldr	r4, [pc, #404]	; (408070 <getGPSdateTimeFrmTiny+0x270>)
  407eda:	2501      	movs	r5, #1
  407edc:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407ede:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		sendCmdToTiny('G');//potential addition tshoooooooooooot
  407ee2:	2047      	movs	r0, #71	; 0x47
  407ee4:	4b67      	ldr	r3, [pc, #412]	; (408084 <getGPSdateTimeFrmTiny+0x284>)
  407ee6:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407ee8:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407eea:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		yearNow = rcvFromTinyGG[9];
  407eee:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
  407ef2:	9303      	str	r3, [sp, #12]
		monthNow = rcvFromTinyGG[10];
  407ef4:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 4080c0 <getGPSdateTimeFrmTiny+0x2c0>
  407ef8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
  407efc:	f8ca 3000 	str.w	r3, [sl]
		dayNow = rcvFromTinyGG[11];
  407f00:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 4080c4 <getGPSdateTimeFrmTiny+0x2c4>
  407f04:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
  407f08:	f8cb 3000 	str.w	r3, [fp]
		hourNow = rcvFromTinyGG[12];
  407f0c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 4080c8 <getGPSdateTimeFrmTiny+0x2c8>
  407f10:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  407f14:	f8c8 3000 	str.w	r3, [r8]
		minsNow = rcvFromTinyGG[13];
  407f18:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 4080cc <getGPSdateTimeFrmTiny+0x2cc>
  407f1c:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
  407f20:	f8c9 3000 	str.w	r3, [r9]
		secNow = rcvFromTinyGG[14];
  407f24:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
  407f28:	4a5c      	ldr	r2, [pc, #368]	; (40809c <getGPSdateTimeFrmTiny+0x29c>)
  407f2a:	6013      	str	r3, [r2, #0]
	pmc_enable_periph_clk(ID_PIOC);
  407f2c:	200c      	movs	r0, #12
  407f2e:	4b4e      	ldr	r3, [pc, #312]	; (408068 <getGPSdateTimeFrmTiny+0x268>)
  407f30:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407f32:	4b5b      	ldr	r3, [pc, #364]	; (4080a0 <getGPSdateTimeFrmTiny+0x2a0>)
  407f34:	2204      	movs	r2, #4
  407f36:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407f38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  407f3c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  407f3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407f42:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407f44:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  407f4c:	f022 0204 	bic.w	r2, r2, #4
  407f50:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407f52:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  407f54:	f022 0204 	bic.w	r2, r2, #4
  407f58:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407f5a:	f504 7400 	add.w	r4, r4, #512	; 0x200
  407f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  407f62:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407f64:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407f68:	f44f 6680 	mov.w	r6, #1024	; 0x400
  407f6c:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407f6e:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407f72:	6323      	str	r3, [r4, #48]	; 0x30
  407f74:	6326      	str	r6, [r4, #48]	; 0x30
	delay_ms(200);//looked fine even at only 1ms (when repeated every 500ms);
  407f76:	484b      	ldr	r0, [pc, #300]	; (4080a4 <getGPSdateTimeFrmTiny+0x2a4>)
  407f78:	4f3e      	ldr	r7, [pc, #248]	; (408074 <getGPSdateTimeFrmTiny+0x274>)
  407f7a:	47b8      	blx	r7
	twi_init_RTC();
  407f7c:	4b4a      	ldr	r3, [pc, #296]	; (4080a8 <getGPSdateTimeFrmTiny+0x2a8>)
  407f7e:	4798      	blx	r3
	delay_ms(500);//
  407f80:	484a      	ldr	r0, [pc, #296]	; (4080ac <getGPSdateTimeFrmTiny+0x2ac>)
  407f82:	47b8      	blx	r7
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407f84:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407f86:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  407f8a:	6666      	str	r6, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  407f8c:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  407f90:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  407f92:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407f94:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407f98:	6f23      	ldr	r3, [r4, #112]	; 0x70
  407f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  407f9e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407fa0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  407fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  407fa6:	6763      	str	r3, [r4, #116]	; 0x74
	rtcData[0]=0x00;//write to Address 0x00  SET ALL
  407fa8:	2600      	movs	r6, #0
  407faa:	f88d 6014 	strb.w	r6, [sp, #20]
	rtcData[1]=0x02;//contents of Addr 0x00 CTL1
  407fae:	f04f 0202 	mov.w	r2, #2
  407fb2:	f88d 2015 	strb.w	r2, [sp, #21]
	rtcData[2]=0x00;//contents of Addr 0x01 CTL2
  407fb6:	f88d 6016 	strb.w	r6, [sp, #22]
	rtcData[3]=0x00;//contents of Addr 0x02 CTL3
  407fba:	f88d 6017 	strb.w	r6, [sp, #23]
	rtcData[4]=hexToBCD(secNow);//contents of Addr 0x03 SECONDS works
  407fbe:	4a37      	ldr	r2, [pc, #220]	; (40809c <getGPSdateTimeFrmTiny+0x29c>)
  407fc0:	6810      	ldr	r0, [r2, #0]
  407fc2:	4c3b      	ldr	r4, [pc, #236]	; (4080b0 <getGPSdateTimeFrmTiny+0x2b0>)
  407fc4:	47a0      	blx	r4
  407fc6:	f88d 0018 	strb.w	r0, [sp, #24]
	rtcData[5]=hexToBCD(minsNow);//contents of Addr 0x04 MINUTES works
  407fca:	f8d9 0000 	ldr.w	r0, [r9]
  407fce:	47a0      	blx	r4
  407fd0:	f88d 0019 	strb.w	r0, [sp, #25]
	rtcData[6]=hexToBCD(hourNow);//contents of Addr 0x05 HOURS works
  407fd4:	f8d8 0000 	ldr.w	r0, [r8]
  407fd8:	47a0      	blx	r4
  407fda:	f88d 001a 	strb.w	r0, [sp, #26]
	rtcData[7]=hexToBCD(dayNow);//contents of Addr 0x06 DAYS
  407fde:	f8db 0000 	ldr.w	r0, [fp]
  407fe2:	47a0      	blx	r4
  407fe4:	f88d 001b 	strb.w	r0, [sp, #27]
	rtcData[8]=0x02;//contents of Addr 0x07 WEEKDAY
  407fe8:	f04f 0202 	mov.w	r2, #2
  407fec:	f88d 201c 	strb.w	r2, [sp, #28]
	rtcData[9]=hexToBCD(monthNow);//contents of Addr 0x08 MONTH
  407ff0:	f8da 0000 	ldr.w	r0, [sl]
  407ff4:	47a0      	blx	r4
  407ff6:	f88d 001d 	strb.w	r0, [sp, #29]
	rtcData[0x0A]=hexToBCD(yearNow);//contents of Addr 0x09 YEAR
  407ffa:	9803      	ldr	r0, [sp, #12]
  407ffc:	47a0      	blx	r4
  407ffe:	f88d 001e 	strb.w	r0, [sp, #30]
	rtcData[0x0B]=0x80;//contents of Addr 0x0A  0x80 = second alarm disabled
  408002:	2380      	movs	r3, #128	; 0x80
  408004:	f88d 301f 	strb.w	r3, [sp, #31]
	rtcData[0x0C]=0x80;//contents of Addr 0x0B  0x80 = minute alarm disabled
  408008:	f88d 3020 	strb.w	r3, [sp, #32]
	rtcData[0x0D]=0x80;//contents of Addr 0x0C  0x80 = Hour alarm disabled
  40800c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	rtcData[0x0E]=0x80;//contents of Addr 0x0D  0x80 = day alarm disabled
  408010:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	rtcData[0x0F]=0x80;//contents of Addr 0x0E  0x80 = weekday alarm disabled
  408014:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	rtcData[0x10]=0x00;//contents of Addr 0x0F  0x00 = temperature clockout period 4 minutes
  408018:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	rtcData[0x11]=0x00;//contents of Addr 0x10  20=PULSED INTERRUPT
  40801c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
	writeRet = write_data_RTC(rtcData,18);//!< write sequentially to the slave "1" sends addr plus data[0].
  408020:	2112      	movs	r1, #18
  408022:	a805      	add	r0, sp, #20
  408024:	4c23      	ldr	r4, [pc, #140]	; (4080b4 <getGPSdateTimeFrmTiny+0x2b4>)
  408026:	47a0      	blx	r4
	delay_ms(200);//
  408028:	481e      	ldr	r0, [pc, #120]	; (4080a4 <getGPSdateTimeFrmTiny+0x2a4>)
  40802a:	47b8      	blx	r7
	rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40802c:	f88d 5014 	strb.w	r5, [sp, #20]
	rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  408030:	2330      	movs	r3, #48	; 0x30
  408032:	f88d 3015 	strb.w	r3, [sp, #21]
	write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  408036:	2102      	movs	r1, #2
  408038:	a805      	add	r0, sp, #20
  40803a:	47a0      	blx	r4
		configure_console();  //TSHOOOOOOOOOOOOOOT
  40803c:	4b12      	ldr	r3, [pc, #72]	; (408088 <getGPSdateTimeFrmTiny+0x288>)
  40803e:	4798      	blx	r3
		printf("\r\nGOOD FROM TINY: %d-%d-%d %d:%d \r\n",yearNow, monthNow, dayNow, hourNow, minsNow);
  408040:	f8db 3000 	ldr.w	r3, [fp]
  408044:	f8da 2000 	ldr.w	r2, [sl]
  408048:	f8d9 1000 	ldr.w	r1, [r9]
  40804c:	9101      	str	r1, [sp, #4]
  40804e:	f8d8 1000 	ldr.w	r1, [r8]
  408052:	9100      	str	r1, [sp, #0]
  408054:	9903      	ldr	r1, [sp, #12]
  408056:	4818      	ldr	r0, [pc, #96]	; (4080b8 <getGPSdateTimeFrmTiny+0x2b8>)
  408058:	4c0d      	ldr	r4, [pc, #52]	; (408090 <getGPSdateTimeFrmTiny+0x290>)
  40805a:	47a0      	blx	r4
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40805c:	4a07      	ldr	r2, [pc, #28]	; (40807c <getGPSdateTimeFrmTiny+0x27c>)
  40805e:	4b0d      	ldr	r3, [pc, #52]	; (408094 <getGPSdateTimeFrmTiny+0x294>)
  408060:	601a      	str	r2, [r3, #0]
		delay_s(2);
  408062:	4816      	ldr	r0, [pc, #88]	; (4080bc <getGPSdateTimeFrmTiny+0x2bc>)
  408064:	47b8      	blx	r7
  408066:	e718      	b.n	407e9a <getGPSdateTimeFrmTiny+0x9a>
  408068:	00403819 	.word	0x00403819
  40806c:	400e1400 	.word	0x400e1400
  408070:	400e1000 	.word	0x400e1000
  408074:	2040008d 	.word	0x2040008d
  408078:	00407c21 	.word	0x00407c21
  40807c:	a5000001 	.word	0xa5000001
  408080:	00407d51 	.word	0x00407d51
  408084:	00407abd 	.word	0x00407abd
  408088:	00407815 	.word	0x00407815
  40808c:	00410324 	.word	0x00410324
  408090:	0040c895 	.word	0x0040c895
  408094:	400e1850 	.word	0x400e1850
  408098:	0303af6b 	.word	0x0303af6b
  40809c:	20400f70 	.word	0x20400f70
  4080a0:	400e0e00 	.word	0x400e0e00
  4080a4:	009a5649 	.word	0x009a5649
  4080a8:	00401cf1 	.word	0x00401cf1
  4080ac:	0181d7b6 	.word	0x0181d7b6
  4080b0:	00407275 	.word	0x00407275
  4080b4:	00401e1d 	.word	0x00401e1d
  4080b8:	0041033c 	.word	0x0041033c
  4080bc:	06075ed6 	.word	0x06075ed6
  4080c0:	20400f44 	.word	0x20400f44
  4080c4:	20400f60 	.word	0x20400f60
  4080c8:	20400fbc 	.word	0x20400fbc
  4080cc:	20400f90 	.word	0x20400f90

004080d0 <getHumidity>:
 /***********************************************************************/
 /*  Get Humidity
 /***********************************************************************/
unsigned int getHumidity(void){
  4080d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4080d2:	b083      	sub	sp, #12
	unsigned char data[3];
	unsigned char readRet,writeRet = 0;
	unsigned short humidityMeasurement;
	char errCtr;
	pmc_enable_periph_clk(ID_PIOD);
  4080d4:	2010      	movs	r0, #16
  4080d6:	4b39      	ldr	r3, [pc, #228]	; (4081bc <getHumidity+0xec>)
  4080d8:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4080da:	4b39      	ldr	r3, [pc, #228]	; (4081c0 <getHumidity+0xf0>)
  4080dc:	2240      	movs	r2, #64	; 0x40
  4080de:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4080e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4080e4:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4080e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4080ea:	f44f 7100 	mov.w	r1, #512	; 0x200
  4080ee:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4080f0:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4080f4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4080f8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4080fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4080fe:	6319      	str	r1, [r3, #48]	; 0x30
  408100:	631a      	str	r2, [r3, #48]	; 0x30
	ALTPWR_ON;
	ioport_set_pin_dir(ALT_CLK, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(ALT_DAT, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(ALT_CLK, 1);
	ioport_set_pin_level(ALT_DAT, 1);
	delay_ms(20);//looked fine even at only 1ms (when repeated every 500ms);
  408102:	4830      	ldr	r0, [pc, #192]	; (4081c4 <getHumidity+0xf4>)
  408104:	4b30      	ldr	r3, [pc, #192]	; (4081c8 <getHumidity+0xf8>)
  408106:	4798      	blx	r3
		data[0]=0xF5;//F5=Humidity,F3=Temperature measurement, No Hold Master
  408108:	a802      	add	r0, sp, #8
  40810a:	23f5      	movs	r3, #245	; 0xf5
  40810c:	f800 3d04 	strb.w	r3, [r0, #-4]!
		writeRet = write_data_H(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  408110:	2101      	movs	r1, #1
  408112:	4b2e      	ldr	r3, [pc, #184]	; (4081cc <getHumidity+0xfc>)
  408114:	4798      	blx	r3
		errCtr=100;
		data[0]=0;data[1]=0;data[2]=0;
  408116:	2300      	movs	r3, #0
  408118:	f88d 3004 	strb.w	r3, [sp, #4]
  40811c:	f88d 3005 	strb.w	r3, [sp, #5]
  408120:	f88d 3006 	strb.w	r3, [sp, #6]
  408124:	2464      	movs	r4, #100	; 0x64
		while((errCtr>0)&&(read_bytes_H(data,3)==0)){
  408126:	4d2a      	ldr	r5, [pc, #168]	; (4081d0 <getHumidity+0x100>)
			errCtr--;
 			delay_ms(2);
  408128:	4f2a      	ldr	r7, [pc, #168]	; (4081d4 <getHumidity+0x104>)
  40812a:	4e27      	ldr	r6, [pc, #156]	; (4081c8 <getHumidity+0xf8>)
		while((errCtr>0)&&(read_bytes_H(data,3)==0)){
  40812c:	2103      	movs	r1, #3
  40812e:	a801      	add	r0, sp, #4
  408130:	47a8      	blx	r5
  408132:	b928      	cbnz	r0, 408140 <getHumidity+0x70>
 			delay_ms(2);
  408134:	4638      	mov	r0, r7
  408136:	47b0      	blx	r6
  408138:	1e63      	subs	r3, r4, #1
		while((errCtr>0)&&(read_bytes_H(data,3)==0)){
  40813a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40813e:	d1f5      	bne.n	40812c <getHumidity+0x5c>
		}
		humidityMeasurement=(((unsigned int)data[0])<<2)+(((unsigned int)data[1])>>6);//only want the upper ten bits
  408140:	f89d 3004 	ldrb.w	r3, [sp, #4]
  408144:	f89d 4005 	ldrb.w	r4, [sp, #5]
  408148:	09a4      	lsrs	r4, r4, #6
  40814a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		delay_ms(4);//
  40814e:	4822      	ldr	r0, [pc, #136]	; (4081d8 <getHumidity+0x108>)
  408150:	4b1d      	ldr	r3, [pc, #116]	; (4081c8 <getHumidity+0xf8>)
  408152:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  408154:	4b21      	ldr	r3, [pc, #132]	; (4081dc <getHumidity+0x10c>)
  408156:	f44f 7180 	mov.w	r1, #256	; 0x100
  40815a:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40815c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  408160:	f44f 7200 	mov.w	r2, #512	; 0x200
  408164:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408166:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40816a:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40816c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408170:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408172:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408174:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408178:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40817a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  40817e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408180:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408182:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  408186:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  408188:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40818a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40818e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408190:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408196:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408198:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  40819c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40819e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4081a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  4081a4:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4081a6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4081aa:	2240      	movs	r2, #64	; 0x40
  4081ac:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4081ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4081b2:	631a      	str	r2, [r3, #48]	; 0x30
 	ioport_set_pin_mode(ALT_DAT, IOPORT_MODE_PULLUP);//ALT_DAT
 	ioport_set_pin_mode(ALT_CLK, IOPORT_MODE_PULLUP);//ATL_CLK
	ALTPWR_OUTPUT;
	ALTPWR_OFF;
	return(humidityMeasurement);
}
  4081b4:	4620      	mov	r0, r4
  4081b6:	b003      	add	sp, #12
  4081b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4081ba:	bf00      	nop
  4081bc:	00403819 	.word	0x00403819
  4081c0:	400e0e00 	.word	0x400e0e00
  4081c4:	000f6f08 	.word	0x000f6f08
  4081c8:	2040008d 	.word	0x2040008d
  4081cc:	00401afd 	.word	0x00401afd
  4081d0:	00401c19 	.word	0x00401c19
  4081d4:	00018b1b 	.word	0x00018b1b
  4081d8:	00031635 	.word	0x00031635
  4081dc:	400e1200 	.word	0x400e1200

004081e0 <mult64bit>:
		return (((compTemperature<<16)&0xFFFF0000)+(compPressure&0x0000FFFF));
 }
/***********************************************************************/
/*  32 x 32 = 64 bit MULTIPLY
/***********************************************************************/
void mult64bit (unsigned int A32,unsigned int B32,unsigned int* resultHigh, unsigned int* resultLow) {
  4081e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int Ahigh,Alow,Bhigh,Blow,BLALL,BLALH,BLAHL,BLAHH,BHALL,BHALH,BHAH,carry;
	Ahigh=(A32>>16)&0x0000FFFF;
  4081e2:	0c04      	lsrs	r4, r0, #16
	Alow=A32&0x0000FFFF;
  4081e4:	b280      	uxth	r0, r0
	Bhigh=(B32>>16)&0x0000FFFF;
  4081e6:	0c0e      	lsrs	r6, r1, #16
	Blow=B32&0x0000FFFF;
  4081e8:	b289      	uxth	r1, r1

	BLALH=Blow*Alow;
  4081ea:	fb01 f700 	mul.w	r7, r1, r0
	BLALL=BLALH;
	BLALH=(BLALH>>16)&0x0000FFFF;
	BLALL&=0x0000FFFF;

	BLAHH=Blow*Ahigh;
  4081ee:	fb01 f104 	mul.w	r1, r1, r4
	BLAHL=BLAHH;
	BLAHH=(BLAHH>>16)&0x0000FFFF;
	BLAHL&=0x0000FFFF;
	BHALH=Bhigh*Alow;
  4081f2:	fb06 f000 	mul.w	r0, r6, r0
	BLAHL&=0x0000FFFF;
  4081f6:	b28d      	uxth	r5, r1
	BHALL=BHALH;
	BHALH=(BHALH>>16)&0x0000FFFF;
	BHALL&=0x0000FFFF;
	BHAH=Bhigh*Ahigh;
	carry=((BLALH+BLAHL+BHALL)&0xFFFF0000)>>16;
  4081f8:	eb05 4517 	add.w	r5, r5, r7, lsr #16
  4081fc:	fa15 f580 	uxtah	r5, r5, r0

	*resultLow=((BLALH+BLAHL+BHALL)<<16)+BLALL;
  408200:	ea4f 4e05 	mov.w	lr, r5, lsl #16
  408204:	fa1e f787 	uxtah	r7, lr, r7
  408208:	601f      	str	r7, [r3, #0]
	BHALH=(BHALH>>16)&0x0000FFFF;
  40820a:	0c00      	lsrs	r0, r0, #16
	*resultHigh=BLAHH+BHALH+BHAH + carry;
  40820c:	eb00 4011 	add.w	r0, r0, r1, lsr #16
  408210:	fb06 0004 	mla	r0, r6, r4, r0
  408214:	eb00 4015 	add.w	r0, r0, r5, lsr #16
  408218:	6010      	str	r0, [r2, #0]
  40821a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040821c <getAltimeterTemperatureOLD>:
unsigned int getAltimeterTemperatureOLD(void){
  40821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408220:	b08f      	sub	sp, #60	; 0x3c
		pmc_enable_periph_clk(ID_PIOD);
  408222:	2010      	movs	r0, #16
  408224:	4bb8      	ldr	r3, [pc, #736]	; (408508 <getAltimeterTemperatureOLD+0x2ec>)
  408226:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408228:	f8df b304 	ldr.w	fp, [pc, #772]	; 408530 <getAltimeterTemperatureOLD+0x314>
  40822c:	2340      	movs	r3, #64	; 0x40
  40822e:	f8cb 3010 	str.w	r3, [fp, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408232:	f8cb 30a0 	str.w	r3, [fp, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408236:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40823a:	4cb4      	ldr	r4, [pc, #720]	; (40850c <getAltimeterTemperatureOLD+0x2f0>)
  40823c:	f44f 7800 	mov.w	r8, #512	; 0x200
  408240:	f8c4 8010 	str.w	r8, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408244:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408248:	f44f 7980 	mov.w	r9, #256	; 0x100
  40824c:	f8c4 9010 	str.w	r9, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408250:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408254:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  408258:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		delay_ms(20);//looked fine even at only 1ms (when repeated every 500ms);
  40825c:	48ac      	ldr	r0, [pc, #688]	; (408510 <getAltimeterTemperatureOLD+0x2f4>)
  40825e:	4dad      	ldr	r5, [pc, #692]	; (408514 <getAltimeterTemperatureOLD+0x2f8>)
  408260:	47a8      	blx	r5
		data[0]=0x1E;//Altimeter RESET
  408262:	ab0e      	add	r3, sp, #56	; 0x38
  408264:	461a      	mov	r2, r3
  408266:	231e      	movs	r3, #30
  408268:	f802 3d18 	strb.w	r3, [r2, #-24]!
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40826c:	2101      	movs	r1, #1
  40826e:	4692      	mov	sl, r2
  408270:	4610      	mov	r0, r2
  408272:	4fa9      	ldr	r7, [pc, #676]	; (408518 <getAltimeterTemperatureOLD+0x2fc>)
  408274:	47b8      	blx	r7
		delay_ms(4);//datasheet says 2.8ms needed after reset
  408276:	48a9      	ldr	r0, [pc, #676]	; (40851c <getAltimeterTemperatureOLD+0x300>)
  408278:	47a8      	blx	r5
		data[0]=0xA2;//Ax=read PROM
  40827a:	23a2      	movs	r3, #162	; 0xa2
  40827c:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  408280:	2101      	movs	r1, #1
  408282:	4650      	mov	r0, sl
  408284:	47b8      	blx	r7
		data[0]=0;data[1]=0;
  408286:	2600      	movs	r6, #0
  408288:	f88d 6020 	strb.w	r6, [sp, #32]
  40828c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
		readRet = read_bytes_A_OLD(data,2);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  408290:	2102      	movs	r1, #2
  408292:	f8cd a000 	str.w	sl, [sp]
  408296:	4650      	mov	r0, sl
  408298:	f8df a298 	ldr.w	sl, [pc, #664]	; 408534 <getAltimeterTemperatureOLD+0x318>
  40829c:	47d0      	blx	sl
		C1=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  40829e:	f89d 3020 	ldrb.w	r3, [sp, #32]
  4082a2:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
  4082a6:	eb01 2303 	add.w	r3, r1, r3, lsl #8
  4082aa:	9301      	str	r3, [sp, #4]
		data[0]=0xA4;//Ax=read PROM
  4082ac:	23a4      	movs	r3, #164	; 0xa4
  4082ae:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  4082b2:	2101      	movs	r1, #1
  4082b4:	9800      	ldr	r0, [sp, #0]
  4082b6:	47b8      	blx	r7
		data[0]=0;data[1]=0;
  4082b8:	f88d 6020 	strb.w	r6, [sp, #32]
  4082bc:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
		readRet = read_bytes_A_OLD(data,2);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  4082c0:	2102      	movs	r1, #2
  4082c2:	9800      	ldr	r0, [sp, #0]
  4082c4:	47d0      	blx	sl
		C2=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  4082c6:	f89d 2020 	ldrb.w	r2, [sp, #32]
  4082ca:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  4082ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  4082d2:	9302      	str	r3, [sp, #8]
		data[0]=0xA6;//Ax=read PROM
  4082d4:	23a6      	movs	r3, #166	; 0xa6
  4082d6:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  4082da:	2101      	movs	r1, #1
  4082dc:	9800      	ldr	r0, [sp, #0]
  4082de:	47b8      	blx	r7
		data[0]=0;data[1]=0;
  4082e0:	f88d 6020 	strb.w	r6, [sp, #32]
  4082e4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
		readRet = read_bytes_A_OLD(data,2);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  4082e8:	2102      	movs	r1, #2
  4082ea:	9800      	ldr	r0, [sp, #0]
  4082ec:	47d0      	blx	sl
		C3=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  4082ee:	f89d 2020 	ldrb.w	r2, [sp, #32]
  4082f2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  4082f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  4082fa:	9303      	str	r3, [sp, #12]
		data[0]=0xA8;//Ax=read PROM
  4082fc:	23a8      	movs	r3, #168	; 0xa8
  4082fe:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  408302:	2101      	movs	r1, #1
  408304:	9800      	ldr	r0, [sp, #0]
  408306:	47b8      	blx	r7
		data[0]=0;data[1]=0;
  408308:	f88d 6020 	strb.w	r6, [sp, #32]
  40830c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
		readRet = read_bytes_A_OLD(data,2);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  408310:	2102      	movs	r1, #2
  408312:	9800      	ldr	r0, [sp, #0]
  408314:	47d0      	blx	sl
		C4=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  408316:	f89d 2020 	ldrb.w	r2, [sp, #32]
  40831a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  40831e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  408322:	9304      	str	r3, [sp, #16]
		data[0]=0xAA;//Ax=read PROM
  408324:	23aa      	movs	r3, #170	; 0xaa
  408326:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40832a:	2101      	movs	r1, #1
  40832c:	9800      	ldr	r0, [sp, #0]
  40832e:	47b8      	blx	r7
		data[0]=0;data[1]=0;
  408330:	f88d 6020 	strb.w	r6, [sp, #32]
  408334:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
		readRet = read_bytes_A_OLD(data,2);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  408338:	2102      	movs	r1, #2
  40833a:	9800      	ldr	r0, [sp, #0]
  40833c:	47d0      	blx	sl
		C5=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  40833e:	f89d 2020 	ldrb.w	r2, [sp, #32]
  408342:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  408346:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40834a:	9305      	str	r3, [sp, #20]
		data[0]=0xAC;//Ax=read PROM
  40834c:	23ac      	movs	r3, #172	; 0xac
  40834e:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  408352:	2101      	movs	r1, #1
  408354:	9800      	ldr	r0, [sp, #0]
  408356:	47b8      	blx	r7
		data[0]=0;data[1]=0;
  408358:	f88d 6020 	strb.w	r6, [sp, #32]
  40835c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
		readRet = read_bytes_A_OLD(data,2);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  408360:	2102      	movs	r1, #2
  408362:	9800      	ldr	r0, [sp, #0]
  408364:	47d0      	blx	sl
		C6=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  408366:	f89d 2020 	ldrb.w	r2, [sp, #32]
  40836a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  40836e:	eb03 2102 	add.w	r1, r3, r2, lsl #8
  408372:	9106      	str	r1, [sp, #24]
			data[0]=0x48;//48=start conversion of 24 bit pressure
  408374:	2348      	movs	r3, #72	; 0x48
  408376:	f88d 3020 	strb.w	r3, [sp, #32]
			writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40837a:	2101      	movs	r1, #1
  40837c:	9800      	ldr	r0, [sp, #0]
  40837e:	47b8      	blx	r7
			delay_ms(9);//datasheet says 8ms delay for 4096 OverSampling (OSR) bits
  408380:	4867      	ldr	r0, [pc, #412]	; (408520 <getAltimeterTemperatureOLD+0x304>)
  408382:	47a8      	blx	r5
			data[0]=0x00;//00=Read Command
  408384:	f88d 6020 	strb.w	r6, [sp, #32]
			writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  408388:	2101      	movs	r1, #1
  40838a:	9800      	ldr	r0, [sp, #0]
  40838c:	47b8      	blx	r7
			data[0]=0;data[1]=0;data[2]=0;
  40838e:	f88d 6020 	strb.w	r6, [sp, #32]
  408392:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
  408396:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
			readRet = read_bytes_A_OLD(data,3);//!< write sequentially to the slave "1" sends addr plus data[0].
  40839a:	2103      	movs	r1, #3
  40839c:	9800      	ldr	r0, [sp, #0]
  40839e:	47d0      	blx	sl
			rawPressure+=(((int)data[0])<<16)+(((int)data[1])<<8)+(((int)data[2]));
  4083a0:	f89d 2020 	ldrb.w	r2, [sp, #32]
  4083a4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  4083a8:	021b      	lsls	r3, r3, #8
  4083aa:	eb03 4302 	add.w	r3, r3, r2, lsl #16
  4083ae:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
  4083b2:	1899      	adds	r1, r3, r2
  4083b4:	9107      	str	r1, [sp, #28]
			data[0]=0x58;//58=start conversion of 24 bit temperature
  4083b6:	2358      	movs	r3, #88	; 0x58
  4083b8:	f88d 3020 	strb.w	r3, [sp, #32]
			writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  4083bc:	2101      	movs	r1, #1
  4083be:	9800      	ldr	r0, [sp, #0]
  4083c0:	47b8      	blx	r7
			delay_ms(9);
  4083c2:	4857      	ldr	r0, [pc, #348]	; (408520 <getAltimeterTemperatureOLD+0x304>)
  4083c4:	47a8      	blx	r5
			data[0]=0x00;//00=Read Command
  4083c6:	f88d 6020 	strb.w	r6, [sp, #32]
			writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  4083ca:	2101      	movs	r1, #1
  4083cc:	9d00      	ldr	r5, [sp, #0]
  4083ce:	4628      	mov	r0, r5
  4083d0:	47b8      	blx	r7
			data[0]=0;data[1]=0;data[2]=0;
  4083d2:	f88d 6020 	strb.w	r6, [sp, #32]
  4083d6:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
  4083da:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
			readRet = read_bytes_A_OLD(data,3);//!< write sequentially to the slave "1" sends addr plus data[0].
  4083de:	2103      	movs	r1, #3
  4083e0:	4628      	mov	r0, r5
  4083e2:	47d0      	blx	sl
			rawTemperature+=(((unsigned int)data[0])<<16)+(((unsigned int)data[1])<<8)+(((unsigned int)data[2]));
  4083e4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  4083e8:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
  4083ec:	022d      	lsls	r5, r5, #8
  4083ee:	eb05 4503 	add.w	r5, r5, r3, lsl #16
  4083f2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
  4083f6:	442b      	add	r3, r5
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4083f8:	f8c4 9014 	str.w	r9, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4083fc:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  408400:	f8c4 8014 	str.w	r8, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408404:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  408408:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40840c:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  408410:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  408414:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408418:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40841c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40841e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  408422:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408424:	6f62      	ldr	r2, [r4, #116]	; 0x74
  408426:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  40842a:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40842c:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  408430:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  408434:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  408438:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40843c:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408440:	6f22      	ldr	r2, [r4, #112]	; 0x70
  408442:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  408446:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408448:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40844a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  40844e:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408450:	2140      	movs	r1, #64	; 0x40
  408452:	f8cb 1010 	str.w	r1, [fp, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408456:	f8cb 10a0 	str.w	r1, [fp, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40845a:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
			C5=C5<<8;
  40845e:	9a05      	ldr	r2, [sp, #20]
  408460:	0215      	lsls	r5, r2, #8
			if(rawTemperature>C5){
  408462:	42ab      	cmp	r3, r5
  408464:	d868      	bhi.n	408538 <getAltimeterTemperatureOLD+0x31c>
					dT=C5-rawTemperature;//dT is negative
  408466:	1aed      	subs	r5, r5, r3
					mult64bit(dT,C6,&HH64,&LL64);//28325
  408468:	ab0c      	add	r3, sp, #48	; 0x30
  40846a:	aa0d      	add	r2, sp, #52	; 0x34
  40846c:	9906      	ldr	r1, [sp, #24]
  40846e:	4628      	mov	r0, r5
  408470:	4c2c      	ldr	r4, [pc, #176]	; (408524 <getAltimeterTemperatureOLD+0x308>)
  408472:	47a0      	blx	r4
					below20 = ((int)((LL64>>23)+(HH64<<9)));
  408474:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  408476:	0264      	lsls	r4, r4, #9
  408478:	980c      	ldr	r0, [sp, #48]	; 0x30
  40847a:	eb04 54d0 	add.w	r4, r4, r0, lsr #23
						compTemperature = 0-(below20-2000);
  40847e:	f5c4 64fa 	rsb	r4, r4, #2000	; 0x7d0
						mult64bit(C4,dT,&HH64,&LL64);
  408482:	ab0c      	add	r3, sp, #48	; 0x30
  408484:	aa0d      	add	r2, sp, #52	; 0x34
  408486:	4629      	mov	r1, r5
  408488:	9804      	ldr	r0, [sp, #16]
  40848a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 408524 <getAltimeterTemperatureOLD+0x308>
  40848e:	47c0      	blx	r8
						OFF_L+=(HH64<<25);
  408490:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  408492:	067e      	lsls	r6, r7, #25
  408494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408496:	eb06 16d3 	add.w	r6, r6, r3, lsr #7
						mult64bit(C3,dT,&HH64,&LL64);
  40849a:	ab0c      	add	r3, sp, #48	; 0x30
  40849c:	aa0d      	add	r2, sp, #52	; 0x34
  40849e:	4629      	mov	r1, r5
  4084a0:	9803      	ldr	r0, [sp, #12]
  4084a2:	47c0      	blx	r8
						SENS_L+=(HH64<<24);
  4084a4:	990d      	ldr	r1, [sp, #52]	; 0x34
  4084a6:	060b      	lsls	r3, r1, #24
  4084a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4084aa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
						SENS_LL=SENS_L&0x00007FFF;
  4084ae:	f3c3 000e 	ubfx	r0, r3, #0, #15
						SENS_H=(HH64>>8)&0x00FFFFFF;
  4084b2:	0a09      	lsrs	r1, r1, #8
						SENS_M=C1-SENS_M;
  4084b4:	9a01      	ldr	r2, [sp, #4]
  4084b6:	eba2 4141 	sub.w	r1, r2, r1, lsl #17
  4084ba:	eba1 31d3 	sub.w	r1, r1, r3, lsr #15
						mult64bit(rawPressure,SENS_L,&HH64,&LL64);
  4084be:	ab0c      	add	r3, sp, #48	; 0x30
  4084c0:	aa0d      	add	r2, sp, #52	; 0x34
  4084c2:	eb00 31c1 	add.w	r1, r0, r1, lsl #15
  4084c6:	9807      	ldr	r0, [sp, #28]
  4084c8:	47c0      	blx	r8
						compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  4084ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4084cc:	02db      	lsls	r3, r3, #11
  4084ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4084d0:	eb03 5352 	add.w	r3, r3, r2, lsr #21
						OFF_LL=OFF_L&0x0000FFFF;
  4084d4:	b2b2      	uxth	r2, r6
						compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  4084d6:	1a9b      	subs	r3, r3, r2
						OFF_H=(HH64>>7)&0x01FFFFFF;
  4084d8:	09ff      	lsrs	r7, r7, #7
						OFF_M=C2-OFF_M;
  4084da:	9a02      	ldr	r2, [sp, #8]
  4084dc:	eba2 4707 	sub.w	r7, r2, r7, lsl #16
  4084e0:	eba7 4616 	sub.w	r6, r7, r6, lsr #16
						compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  4084e4:	eba3 4306 	sub.w	r3, r3, r6, lsl #16
  4084e8:	0bdb      	lsrs	r3, r3, #15
		compTemperature/=10;
  4084ea:	480f      	ldr	r0, [pc, #60]	; (408528 <getAltimeterTemperatureOLD+0x30c>)
  4084ec:	fb80 2004 	smull	r2, r0, r0, r4
  4084f0:	17e4      	asrs	r4, r4, #31
  4084f2:	ebc4 00a0 	rsb	r0, r4, r0, asr #2
		compPressure/=10;
  4084f6:	4e0d      	ldr	r6, [pc, #52]	; (40852c <getAltimeterTemperatureOLD+0x310>)
  4084f8:	fba6 2303 	umull	r2, r3, r6, r3
		return (((compTemperature<<16)&0xFFFF0000)+(compPressure&0x0000FFFF));
  4084fc:	08db      	lsrs	r3, r3, #3
 }
  4084fe:	eb03 4000 	add.w	r0, r3, r0, lsl #16
  408502:	b00f      	add	sp, #60	; 0x3c
  408504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408508:	00403819 	.word	0x00403819
  40850c:	400e1200 	.word	0x400e1200
  408510:	000f6f08 	.word	0x000f6f08
  408514:	2040008d 	.word	0x2040008d
  408518:	0040181d 	.word	0x0040181d
  40851c:	00031635 	.word	0x00031635
  408520:	0006f1f7 	.word	0x0006f1f7
  408524:	004081e1 	.word	0x004081e1
  408528:	66666667 	.word	0x66666667
  40852c:	cccccccd 	.word	0xcccccccd
  408530:	400e0e00 	.word	0x400e0e00
  408534:	00401939 	.word	0x00401939
				dT=rawTemperature-C5;//dT is positive
  408538:	1b5d      	subs	r5, r3, r5
				mult64bit(dT,C6,&HH64,&LL64);
  40853a:	ab0c      	add	r3, sp, #48	; 0x30
  40853c:	aa0d      	add	r2, sp, #52	; 0x34
  40853e:	9906      	ldr	r1, [sp, #24]
  408540:	4628      	mov	r0, r5
  408542:	4e1b      	ldr	r6, [pc, #108]	; (4085b0 <getAltimeterTemperatureOLD+0x394>)
  408544:	47b0      	blx	r6
				compTemperature=((int)((LL64>>23)+(HH64<<9)))+2000;
  408546:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  408548:	0264      	lsls	r4, r4, #9
  40854a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40854c:	eb04 54d0 	add.w	r4, r4, r0, lsr #23
  408550:	f504 64fa 	add.w	r4, r4, #2000	; 0x7d0
				mult64bit(C4,dT,&HH64,&LL64);
  408554:	ab0c      	add	r3, sp, #48	; 0x30
  408556:	aa0d      	add	r2, sp, #52	; 0x34
  408558:	4629      	mov	r1, r5
  40855a:	9804      	ldr	r0, [sp, #16]
  40855c:	47b0      	blx	r6
				OFF_L+=(HH64<<25);
  40855e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  408560:	067f      	lsls	r7, r7, #25
  408562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408564:	eb07 17d3 	add.w	r7, r7, r3, lsr #7
				mult64bit(C3,dT,&HH64,&LL64);
  408568:	ab0c      	add	r3, sp, #48	; 0x30
  40856a:	aa0d      	add	r2, sp, #52	; 0x34
  40856c:	4629      	mov	r1, r5
  40856e:	9803      	ldr	r0, [sp, #12]
  408570:	47b0      	blx	r6
				SENS_L+=(HH64<<24);
  408572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408574:	061b      	lsls	r3, r3, #24
  408576:	990c      	ldr	r1, [sp, #48]	; 0x30
  408578:	eb03 2311 	add.w	r3, r3, r1, lsr #8
				SENS_LL=SENS_L&0x00007FFF;
  40857c:	f3c3 000e 	ubfx	r0, r3, #0, #15
				SENS_M=(SENS_H<<17)+(SENS_L>>15)+C1;
  408580:	9a01      	ldr	r2, [sp, #4]
  408582:	eb02 31d3 	add.w	r1, r2, r3, lsr #15
				mult64bit(rawPressure,SENS_L,&HH64,&LL64);
  408586:	ab0c      	add	r3, sp, #48	; 0x30
  408588:	aa0d      	add	r2, sp, #52	; 0x34
  40858a:	eb00 31c1 	add.w	r1, r0, r1, lsl #15
  40858e:	9807      	ldr	r0, [sp, #28]
  408590:	47b0      	blx	r6
				compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  408592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408594:	02db      	lsls	r3, r3, #11
  408596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408598:	eb03 5352 	add.w	r3, r3, r2, lsr #21
				OFF_LL=OFF_L&0x0000FFFF;
  40859c:	b2ba      	uxth	r2, r7
				compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  40859e:	1a9b      	subs	r3, r3, r2
				OFF_M=(OFF_H<<16)+(OFF_L>>16)+C2;
  4085a0:	9a02      	ldr	r2, [sp, #8]
  4085a2:	eb02 4717 	add.w	r7, r2, r7, lsr #16
				compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  4085a6:	eba3 4307 	sub.w	r3, r3, r7, lsl #16
  4085aa:	0bdb      	lsrs	r3, r3, #15
  4085ac:	e79d      	b.n	4084ea <getAltimeterTemperatureOLD+0x2ce>
  4085ae:	bf00      	nop
  4085b0:	004081e1 	.word	0x004081e1

004085b4 <getSetDeviceID>:
	ioport_set_pin_mode(BigTiny_DAT, 0);//BigTiny DAT
}
 /***********************************************************************/
 /*  READ ATMEL'S UNIQUE CHIP ID
 /***********************************************************************/
void getSetDeviceID(void){
  4085b4:	b500      	push	{lr}
  4085b6:	b085      	sub	sp, #20
	char rdIDerr;
	int unique_id[4];
	rdIDerr = flash_read_unique_id(unique_id, 4);
  4085b8:	2104      	movs	r1, #4
  4085ba:	4668      	mov	r0, sp
  4085bc:	4b17      	ldr	r3, [pc, #92]	; (40861c <getSetDeviceID+0x68>)
  4085be:	4798      	blx	r3
	if (rdIDerr != FLASH_RC_OK) {
  4085c0:	b2c0      	uxtb	r0, r0
  4085c2:	bb20      	cbnz	r0, 40860e <getSetDeviceID+0x5a>
		LCDclear();
		printf("UniqueID error");
	}
	DEVICEID[0]=(char)(unique_id[0]>>24);
  4085c4:	9a00      	ldr	r2, [sp, #0]
  4085c6:	4b16      	ldr	r3, [pc, #88]	; (408620 <getSetDeviceID+0x6c>)
  4085c8:	1611      	asrs	r1, r2, #24
  4085ca:	7019      	strb	r1, [r3, #0]
	DEVICEID[1]=(char)((unique_id[0]>>16)&0x00FF);
  4085cc:	1411      	asrs	r1, r2, #16
  4085ce:	7059      	strb	r1, [r3, #1]
	DEVICEID[2]=(char)((unique_id[0]>>8)&0x00FF);
  4085d0:	1212      	asrs	r2, r2, #8
  4085d2:	709a      	strb	r2, [r3, #2]
	DEVICEID[3]=0x30;//(char)(unique_id[0]&0x00FF);
  4085d4:	2230      	movs	r2, #48	; 0x30
  4085d6:	70da      	strb	r2, [r3, #3]
	DEVICEID[4]=(char)(unique_id[1]>>24);
  4085d8:	9a01      	ldr	r2, [sp, #4]
  4085da:	1611      	asrs	r1, r2, #24
  4085dc:	7119      	strb	r1, [r3, #4]
	DEVICEID[5]=(char)((unique_id[1]>>16)&0x00FF);
  4085de:	1411      	asrs	r1, r2, #16
  4085e0:	7159      	strb	r1, [r3, #5]
	DEVICEID[6]=(char)((unique_id[1]>>8)&0x00FF);
  4085e2:	1211      	asrs	r1, r2, #8
  4085e4:	7199      	strb	r1, [r3, #6]
	DEVICEID[7]=(char)(unique_id[1]&0x00FF);
  4085e6:	71da      	strb	r2, [r3, #7]
	DEVICEID[8]=(char)(unique_id[2]>>24);
  4085e8:	9a02      	ldr	r2, [sp, #8]
  4085ea:	1611      	asrs	r1, r2, #24
  4085ec:	7219      	strb	r1, [r3, #8]
	DEVICEID[9]=(char)((unique_id[2]>>16)&0x00FF);
  4085ee:	1411      	asrs	r1, r2, #16
  4085f0:	7259      	strb	r1, [r3, #9]
	DEVICEID[10]=(char)((unique_id[2]>>8)&0x00FF);
  4085f2:	1211      	asrs	r1, r2, #8
  4085f4:	7299      	strb	r1, [r3, #10]
	DEVICEID[11]=(char)(unique_id[2]&0x00FF);
  4085f6:	72da      	strb	r2, [r3, #11]
	DEVICEID[12]=(char)(unique_id[3]>>24);
  4085f8:	9a03      	ldr	r2, [sp, #12]
  4085fa:	1611      	asrs	r1, r2, #24
  4085fc:	7319      	strb	r1, [r3, #12]
	DEVICEID[13]=(char)((unique_id[3]>>16)&0x00FF);
  4085fe:	1411      	asrs	r1, r2, #16
  408600:	7359      	strb	r1, [r3, #13]
	DEVICEID[14]=(char)((unique_id[3]>>8)&0x00FF);
  408602:	1211      	asrs	r1, r2, #8
  408604:	7399      	strb	r1, [r3, #14]
	DEVICEID[15]=(char)(unique_id[3]&0x00FF);
  408606:	73da      	strb	r2, [r3, #15]
}
  408608:	b005      	add	sp, #20
  40860a:	f85d fb04 	ldr.w	pc, [sp], #4
		LCDclear();
  40860e:	4b05      	ldr	r3, [pc, #20]	; (408624 <getSetDeviceID+0x70>)
  408610:	4798      	blx	r3
		printf("UniqueID error");
  408612:	4805      	ldr	r0, [pc, #20]	; (408628 <getSetDeviceID+0x74>)
  408614:	4b05      	ldr	r3, [pc, #20]	; (40862c <getSetDeviceID+0x78>)
  408616:	4798      	blx	r3
  408618:	e7d4      	b.n	4085c4 <getSetDeviceID+0x10>
  40861a:	bf00      	nop
  40861c:	00404e59 	.word	0x00404e59
  408620:	20400fa8 	.word	0x20400fa8
  408624:	00407a81 	.word	0x00407a81
  408628:	00410360 	.word	0x00410360
  40862c:	0040c895 	.word	0x0040c895

00408630 <configPinsSDRAM>:
	}
}
/***********************************************************************
 *    CONFIGURE SDRAM PINS
 ***********************************************************************/
void configPinsSDRAM(void){
  408630:	b510      	push	{r4, lr}
	pio_configure_pin(SDRAM_A0_PIO, SDRAM_A_FLAGS);	//V71 A2
  408632:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408636:	2054      	movs	r0, #84	; 0x54
  408638:	4c4d      	ldr	r4, [pc, #308]	; (408770 <configPinsSDRAM+0x140>)
  40863a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A1_PIO, SDRAM_A_FLAGS);	//V71 A3
  40863c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408640:	2055      	movs	r0, #85	; 0x55
  408642:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);	//V71 A4
  408644:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408648:	2056      	movs	r0, #86	; 0x56
  40864a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  //V71 A5
  40864c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408650:	2057      	movs	r0, #87	; 0x57
  408652:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  //V71 A6
  408654:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408658:	2058      	movs	r0, #88	; 0x58
  40865a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  //V71 A7
  40865c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408660:	2059      	movs	r0, #89	; 0x59
  408662:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  //V71 A8
  408664:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408668:	205a      	movs	r0, #90	; 0x5a
  40866a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  //V71 A9
  40866c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408670:	205b      	movs	r0, #91	; 0x5b
  408672:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);	 //V71 A10
  408674:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408678:	205c      	movs	r0, #92	; 0x5c
  40867a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  //V71 A11
  40867c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408680:	205d      	movs	r0, #93	; 0x5d
  408682:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS); //V71 SDA10
  408684:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  408688:	206d      	movs	r0, #109	; 0x6d
  40868a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A13_FLAGS); //V71 A13
  40868c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408690:	205f      	movs	r0, #95	; 0x5f
  408692:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A12_PIO, SDRAM_A14_FLAGS); //V71 A14
  408694:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  408698:	2012      	movs	r0, #18
  40869a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  40869c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4086a0:	2014      	movs	r0, #20
  4086a2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA1_PIO, SDRAM_BA1_FLAGS);
  4086a4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4086a8:	2000      	movs	r0, #0
  4086aa:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  4086ac:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4086b0:	2077      	movs	r0, #119	; 0x77
  4086b2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  4086b4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4086b8:	206e      	movs	r0, #110	; 0x6e
  4086ba:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  4086bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4086c0:	204f      	movs	r0, #79	; 0x4f
  4086c2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  4086c4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4086c8:	2070      	movs	r0, #112	; 0x70
  4086ca:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  4086cc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4086d0:	2071      	movs	r0, #113	; 0x71
  4086d2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  4086d4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4086d8:	207d      	movs	r0, #125	; 0x7d
  4086da:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  4086dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4086e0:	2052      	movs	r0, #82	; 0x52
  4086e2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  4086e4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4086e8:	206f      	movs	r0, #111	; 0x6f
  4086ea:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);
  4086ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4086f0:	2040      	movs	r0, #64	; 0x40
  4086f2:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);
  4086f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4086f8:	2041      	movs	r0, #65	; 0x41
  4086fa:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);
  4086fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408700:	2042      	movs	r0, #66	; 0x42
  408702:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);
  408704:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408708:	2043      	movs	r0, #67	; 0x43
  40870a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);
  40870c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408710:	2044      	movs	r0, #68	; 0x44
  408712:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);
  408714:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408718:	2045      	movs	r0, #69	; 0x45
  40871a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);
  40871c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408720:	2046      	movs	r0, #70	; 0x46
  408722:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);
  408724:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408728:	2047      	movs	r0, #71	; 0x47
  40872a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);
  40872c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408730:	2080      	movs	r0, #128	; 0x80
  408732:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);
  408734:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408738:	2081      	movs	r0, #129	; 0x81
  40873a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS);
  40873c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408740:	2082      	movs	r0, #130	; 0x82
  408742:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS);
  408744:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408748:	2083      	movs	r0, #131	; 0x83
  40874a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS);
  40874c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408750:	2084      	movs	r0, #132	; 0x84
  408752:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS);
  408754:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408758:	2085      	movs	r0, #133	; 0x85
  40875a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS);
  40875c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408760:	200f      	movs	r0, #15
  408762:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS);
  408764:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408768:	2010      	movs	r0, #16
  40876a:	47a0      	blx	r4
  40876c:	bd10      	pop	{r4, pc}
  40876e:	bf00      	nop
  408770:	004034fd 	.word	0x004034fd

00408774 <SDRAMtest>:
void SDRAMtest (void){
  408774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408778:	b095      	sub	sp, #84	; 0x54
    ccsidr  = SCB->CCSIDR;
  40877a:	4bc3      	ldr	r3, [pc, #780]	; (408a88 <SDRAMtest+0x314>)
  40877c:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  408780:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  408784:	f006 0007 	and.w	r0, r6, #7
  408788:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40878a:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40878e:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  408792:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  408796:	f3bf 8f4f 	dsb	sy
  40879a:	f04f 34ff 	mov.w	r4, #4294967295
  40879e:	fa04 fc00 	lsl.w	ip, r4, r0
  4087a2:	fa0e f000 	lsl.w	r0, lr, r0
  4087a6:	409c      	lsls	r4, r3
  4087a8:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCISW = sw;
  4087ac:	4db6      	ldr	r5, [pc, #728]	; (408a88 <SDRAMtest+0x314>)
         int32_t tmpways = ways;
  4087ae:	4632      	mov	r2, r6
  4087b0:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  4087b2:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  4087b6:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4087ba:	3a01      	subs	r2, #1
  4087bc:	4423      	add	r3, r4
  4087be:	f1b2 3fff 	cmp.w	r2, #4294967295
  4087c2:	d1f6      	bne.n	4087b2 <SDRAMtest+0x3e>
        } while(sets--);
  4087c4:	f10e 3eff 	add.w	lr, lr, #4294967295
  4087c8:	4460      	add	r0, ip
  4087ca:	f1be 3fff 	cmp.w	lr, #4294967295
  4087ce:	d1ee      	bne.n	4087ae <SDRAMtest+0x3a>
  4087d0:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4087d4:	4bac      	ldr	r3, [pc, #688]	; (408a88 <SDRAMtest+0x314>)
  4087d6:	695a      	ldr	r2, [r3, #20]
  4087d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4087dc:	615a      	str	r2, [r3, #20]
  4087de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4087e2:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  4087e6:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4087ea:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4087ee:	f006 0007 	and.w	r0, r6, #7
  4087f2:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4087f4:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4087f8:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  4087fc:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  408800:	f3bf 8f4f 	dsb	sy
  408804:	f04f 34ff 	mov.w	r4, #4294967295
  408808:	fa04 fc00 	lsl.w	ip, r4, r0
  40880c:	fa0e f000 	lsl.w	r0, lr, r0
  408810:	409c      	lsls	r4, r3
  408812:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCCISW = sw;
  408816:	4d9c      	ldr	r5, [pc, #624]	; (408a88 <SDRAMtest+0x314>)
         int32_t tmpways = ways;
  408818:	4632      	mov	r2, r6
  40881a:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40881c:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  408820:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  408824:	3a01      	subs	r2, #1
  408826:	4423      	add	r3, r4
  408828:	f1b2 3fff 	cmp.w	r2, #4294967295
  40882c:	d1f6      	bne.n	40881c <SDRAMtest+0xa8>
        } while(sets--);
  40882e:	f10e 3eff 	add.w	lr, lr, #4294967295
  408832:	4460      	add	r0, ip
  408834:	f1be 3fff 	cmp.w	lr, #4294967295
  408838:	d1ee      	bne.n	408818 <SDRAMtest+0xa4>
  40883a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40883e:	f3bf 8f6f 	isb	sy
  408842:	4c92      	ldr	r4, [pc, #584]	; (408a8c <SDRAMtest+0x318>)
  408844:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  408848:	6323      	str	r3, [r4, #48]	; 0x30
	pmc_enable_periph_clk(ID_SDRAMC);
  40884a:	203e      	movs	r0, #62	; 0x3e
  40884c:	4b90      	ldr	r3, [pc, #576]	; (408a90 <SDRAMtest+0x31c>)
  40884e:	4798      	blx	r3
	configPinsSDRAM();
  408850:	4b90      	ldr	r3, [pc, #576]	; (408a94 <SDRAMtest+0x320>)
  408852:	4798      	blx	r3
	printf("SRAM\r\n");
  408854:	4890      	ldr	r0, [pc, #576]	; (408a98 <SDRAMtest+0x324>)
  408856:	4d91      	ldr	r5, [pc, #580]	; (408a9c <SDRAMtest+0x328>)
  408858:	47a8      	blx	r5
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40885a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40885e:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408860:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408864:	6323      	str	r3, [r4, #48]	; 0x30
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_INSIGNIS_16M,	sysclk_get_cpu_hz());
  408866:	498e      	ldr	r1, [pc, #568]	; (408aa0 <SDRAMtest+0x32c>)
  408868:	488e      	ldr	r0, [pc, #568]	; (408aa4 <SDRAMtest+0x330>)
  40886a:	4b8f      	ldr	r3, [pc, #572]	; (408aa8 <SDRAMtest+0x334>)
  40886c:	4798      	blx	r3
/**
 * \brief Unaligned access is supported.
 */
static inline void sdram_enable_unaligned_support(void)
{
	SDRAMC->SDRAMC_CFR1 |= SDRAMC_CFR1_UNAL;
  40886e:	4a8f      	ldr	r2, [pc, #572]	; (408aac <SDRAMtest+0x338>)
  408870:	6a93      	ldr	r3, [r2, #40]	; 0x28
  408872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408876:	6293      	str	r3, [r2, #40]	; 0x28
	printf("SRAM COMPLETE\r\n");
  408878:	488d      	ldr	r0, [pc, #564]	; (408ab0 <SDRAMtest+0x33c>)
  40887a:	47a8      	blx	r5
	delay_ms(200);
  40887c:	488d      	ldr	r0, [pc, #564]	; (408ab4 <SDRAMtest+0x340>)
  40887e:	4b8e      	ldr	r3, [pc, #568]	; (408ab8 <SDRAMtest+0x344>)
  408880:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  408882:	4b81      	ldr	r3, [pc, #516]	; (408a88 <SDRAMtest+0x314>)
  408884:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  408888:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40888c:	f006 0007 	and.w	r0, r6, #7
  408890:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  408892:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  408896:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  40889a:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  40889e:	f3bf 8f4f 	dsb	sy
  4088a2:	f04f 34ff 	mov.w	r4, #4294967295
  4088a6:	fa04 fc00 	lsl.w	ip, r4, r0
  4088aa:	fa0e f000 	lsl.w	r0, lr, r0
  4088ae:	409c      	lsls	r4, r3
  4088b0:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCCISW = sw;
  4088b4:	4d74      	ldr	r5, [pc, #464]	; (408a88 <SDRAMtest+0x314>)
         int32_t tmpways = ways;
  4088b6:	4632      	mov	r2, r6
  4088b8:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  4088ba:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  4088be:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  4088c2:	3a01      	subs	r2, #1
  4088c4:	4423      	add	r3, r4
  4088c6:	f1b2 3fff 	cmp.w	r2, #4294967295
  4088ca:	d1f6      	bne.n	4088ba <SDRAMtest+0x146>
        } while(sets--);
  4088cc:	f10e 3eff 	add.w	lr, lr, #4294967295
  4088d0:	4460      	add	r0, ip
  4088d2:	f1be 3fff 	cmp.w	lr, #4294967295
  4088d6:	d1ee      	bne.n	4088b6 <SDRAMtest+0x142>
  4088d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4088dc:	f3bf 8f6f 	isb	sy
  4088e0:	f8df a238 	ldr.w	sl, [pc, #568]	; 408b1c <SDRAMtest+0x3a8>
  4088e4:	f8df 9238 	ldr.w	r9, [pc, #568]	; 408b20 <SDRAMtest+0x3ac>
  4088e8:	f8df 8238 	ldr.w	r8, [pc, #568]	; 408b24 <SDRAMtest+0x3b0>
  4088ec:	f8df c238 	ldr.w	ip, [pc, #568]	; 408b28 <SDRAMtest+0x3b4>
  4088f0:	f8df e238 	ldr.w	lr, [pc, #568]	; 408b2c <SDRAMtest+0x3b8>
  4088f4:	f8df b238 	ldr.w	fp, [pc, #568]	; 408b30 <SDRAMtest+0x3bc>
  4088f8:	4f70      	ldr	r7, [pc, #448]	; (408abc <SDRAMtest+0x348>)
		*camBuffPtr++=0xFF;//WHITE
  4088fa:	21ff      	movs	r1, #255	; 0xff
		*camBuffPtr++=0x07;//YEL
  4088fc:	2607      	movs	r6, #7
		*camBuffPtr++=0xE0;
  4088fe:	25e0      	movs	r5, #224	; 0xe0
		*camBuffPtr++=0xF8;//MAGENTA
  408900:	24f8      	movs	r4, #248	; 0xf8
		*camBuffPtr++=0x1F;
  408902:	201f      	movs	r0, #31
		*camBuffPtr++=0x00;//RED
  408904:	2200      	movs	r2, #0
  408906:	f5a7 632f 	sub.w	r3, r7, #2800	; 0xaf0
		*camBuffPtr++=0xFF;//WHITE
  40890a:	f803 1c02 	strb.w	r1, [r3, #-2]
		*camBuffPtr++=0xFF;
  40890e:	f803 1c01 	strb.w	r1, [r3, #-1]
  408912:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  408914:	4553      	cmp	r3, sl
  408916:	d1f8      	bne.n	40890a <SDRAMtest+0x196>
		*camBuffPtr++=0x07;//YEL
  408918:	f803 6c02 	strb.w	r6, [r3, #-2]
		*camBuffPtr++=0xFF;
  40891c:	f803 1c01 	strb.w	r1, [r3, #-1]
  408920:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  408922:	454b      	cmp	r3, r9
  408924:	d1f8      	bne.n	408918 <SDRAMtest+0x1a4>
		*camBuffPtr++=0xFF;//CYAN
  408926:	f803 1c02 	strb.w	r1, [r3, #-2]
		*camBuffPtr++=0xE0;
  40892a:	f803 5c01 	strb.w	r5, [r3, #-1]
  40892e:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  408930:	4543      	cmp	r3, r8
  408932:	d1f8      	bne.n	408926 <SDRAMtest+0x1b2>
		*camBuffPtr++=0x07;//GREEN
  408934:	f803 6c02 	strb.w	r6, [r3, #-2]
		*camBuffPtr++=0xE0;
  408938:	f803 5c01 	strb.w	r5, [r3, #-1]
  40893c:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  40893e:	4563      	cmp	r3, ip
  408940:	d1f8      	bne.n	408934 <SDRAMtest+0x1c0>
		*camBuffPtr++=0xF8;//MAGENTA
  408942:	f803 4c02 	strb.w	r4, [r3, #-2]
		*camBuffPtr++=0x1F;
  408946:	f803 0c01 	strb.w	r0, [r3, #-1]
  40894a:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  40894c:	4573      	cmp	r3, lr
  40894e:	d1f8      	bne.n	408942 <SDRAMtest+0x1ce>
		*camBuffPtr++=0x00;//RED
  408950:	f803 2c02 	strb.w	r2, [r3, #-2]
		*camBuffPtr++=0x1F;
  408954:	f803 0c01 	strb.w	r0, [r3, #-1]
  408958:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  40895a:	455b      	cmp	r3, fp
  40895c:	d1f8      	bne.n	408950 <SDRAMtest+0x1dc>
		*camBuffPtr++=0xF8;//BLUE
  40895e:	f803 4c02 	strb.w	r4, [r3, #-2]
		*camBuffPtr++=0x00;
  408962:	f803 2c01 	strb.w	r2, [r3, #-1]
  408966:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  408968:	42bb      	cmp	r3, r7
  40896a:	d1f8      	bne.n	40895e <SDRAMtest+0x1ea>
  40896c:	9312      	str	r3, [sp, #72]	; 0x48
  40896e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
  408972:	9313      	str	r3, [sp, #76]	; 0x4c
  408974:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408976:	9712      	str	r7, [sp, #72]	; 0x48
  408978:	9f13      	ldr	r7, [sp, #76]	; 0x4c
		*camBuffPtr++=0x00;//BLACK
  40897a:	f803 2c02 	strb.w	r2, [r3, #-2]
		*camBuffPtr++=0x00;
  40897e:	f803 2c01 	strb.w	r2, [r3, #-1]
  408982:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  408984:	42bb      	cmp	r3, r7
  408986:	d1f8      	bne.n	40897a <SDRAMtest+0x206>
  408988:	9f12      	ldr	r7, [sp, #72]	; 0x48
  40898a:	f507 6748 	add.w	r7, r7, #3200	; 0xc80
  40898e:	f50b 6b48 	add.w	fp, fp, #3200	; 0xc80
  408992:	f50e 6e48 	add.w	lr, lr, #3200	; 0xc80
  408996:	f50c 6c48 	add.w	ip, ip, #3200	; 0xc80
  40899a:	f508 6848 	add.w	r8, r8, #3200	; 0xc80
  40899e:	f509 6948 	add.w	r9, r9, #3200	; 0xc80
  4089a2:	f50a 6a48 	add.w	sl, sl, #3200	; 0xc80
 	for(rowCtr=0;rowCtr<1200;rowCtr++){
  4089a6:	4b46      	ldr	r3, [pc, #280]	; (408ac0 <SDRAMtest+0x34c>)
  4089a8:	429f      	cmp	r7, r3
  4089aa:	d1ac      	bne.n	408906 <SDRAMtest+0x192>
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4089ac:	4a45      	ldr	r2, [pc, #276]	; (408ac4 <SDRAMtest+0x350>)
  4089ae:	4b46      	ldr	r3, [pc, #280]	; (408ac8 <SDRAMtest+0x354>)
  4089b0:	601a      	str	r2, [r3, #0]
    ccsidr  = SCB->CCSIDR;
  4089b2:	4b35      	ldr	r3, [pc, #212]	; (408a88 <SDRAMtest+0x314>)
  4089b4:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4089b8:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4089bc:	f006 0007 	and.w	r0, r6, #7
  4089c0:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4089c2:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4089c6:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  4089ca:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  4089ce:	f3bf 8f4f 	dsb	sy
  4089d2:	f04f 34ff 	mov.w	r4, #4294967295
  4089d6:	fa04 fc00 	lsl.w	ip, r4, r0
  4089da:	fa0e f000 	lsl.w	r0, lr, r0
  4089de:	409c      	lsls	r4, r3
  4089e0:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCCISW = sw;
  4089e4:	4d28      	ldr	r5, [pc, #160]	; (408a88 <SDRAMtest+0x314>)
         int32_t tmpways = ways;
  4089e6:	4632      	mov	r2, r6
  4089e8:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  4089ea:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  4089ee:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  4089f2:	3a01      	subs	r2, #1
  4089f4:	4423      	add	r3, r4
  4089f6:	f1b2 3fff 	cmp.w	r2, #4294967295
  4089fa:	d1f6      	bne.n	4089ea <SDRAMtest+0x276>
        } while(sets--);
  4089fc:	f10e 3eff 	add.w	lr, lr, #4294967295
  408a00:	4460      	add	r0, ip
  408a02:	f1be 3fff 	cmp.w	lr, #4294967295
  408a06:	d1ee      	bne.n	4089e6 <SDRAMtest+0x272>
  408a08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  408a0c:	f3bf 8f6f 	isb	sy
	printf("%X %X\r\n",camBuffPtr,*camBuffPtr++);
  408a10:	4d2e      	ldr	r5, [pc, #184]	; (408acc <SDRAMtest+0x358>)
  408a12:	4e2f      	ldr	r6, [pc, #188]	; (408ad0 <SDRAMtest+0x35c>)
  408a14:	782a      	ldrb	r2, [r5, #0]
  408a16:	4631      	mov	r1, r6
  408a18:	482e      	ldr	r0, [pc, #184]	; (408ad4 <SDRAMtest+0x360>)
  408a1a:	4c20      	ldr	r4, [pc, #128]	; (408a9c <SDRAMtest+0x328>)
  408a1c:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  408a1e:	7833      	ldrb	r3, [r6, #0]
  408a20:	782a      	ldrb	r2, [r5, #0]
  408a22:	4d2d      	ldr	r5, [pc, #180]	; (408ad8 <SDRAMtest+0x364>)
  408a24:	492d      	ldr	r1, [pc, #180]	; (408adc <SDRAMtest+0x368>)
  408a26:	7809      	ldrb	r1, [r1, #0]
  408a28:	9111      	str	r1, [sp, #68]	; 0x44
  408a2a:	492d      	ldr	r1, [pc, #180]	; (408ae0 <SDRAMtest+0x36c>)
  408a2c:	7809      	ldrb	r1, [r1, #0]
  408a2e:	9110      	str	r1, [sp, #64]	; 0x40
  408a30:	492c      	ldr	r1, [pc, #176]	; (408ae4 <SDRAMtest+0x370>)
  408a32:	7809      	ldrb	r1, [r1, #0]
  408a34:	910f      	str	r1, [sp, #60]	; 0x3c
  408a36:	492c      	ldr	r1, [pc, #176]	; (408ae8 <SDRAMtest+0x374>)
  408a38:	7809      	ldrb	r1, [r1, #0]
  408a3a:	910e      	str	r1, [sp, #56]	; 0x38
  408a3c:	492b      	ldr	r1, [pc, #172]	; (408aec <SDRAMtest+0x378>)
  408a3e:	7809      	ldrb	r1, [r1, #0]
  408a40:	910d      	str	r1, [sp, #52]	; 0x34
  408a42:	492b      	ldr	r1, [pc, #172]	; (408af0 <SDRAMtest+0x37c>)
  408a44:	7809      	ldrb	r1, [r1, #0]
  408a46:	910c      	str	r1, [sp, #48]	; 0x30
  408a48:	492a      	ldr	r1, [pc, #168]	; (408af4 <SDRAMtest+0x380>)
  408a4a:	7809      	ldrb	r1, [r1, #0]
  408a4c:	910b      	str	r1, [sp, #44]	; 0x2c
  408a4e:	492a      	ldr	r1, [pc, #168]	; (408af8 <SDRAMtest+0x384>)
  408a50:	7809      	ldrb	r1, [r1, #0]
  408a52:	910a      	str	r1, [sp, #40]	; 0x28
  408a54:	4929      	ldr	r1, [pc, #164]	; (408afc <SDRAMtest+0x388>)
  408a56:	7809      	ldrb	r1, [r1, #0]
  408a58:	9109      	str	r1, [sp, #36]	; 0x24
  408a5a:	4929      	ldr	r1, [pc, #164]	; (408b00 <SDRAMtest+0x38c>)
  408a5c:	7809      	ldrb	r1, [r1, #0]
  408a5e:	9108      	str	r1, [sp, #32]
  408a60:	4928      	ldr	r1, [pc, #160]	; (408b04 <SDRAMtest+0x390>)
  408a62:	7809      	ldrb	r1, [r1, #0]
  408a64:	9107      	str	r1, [sp, #28]
  408a66:	4928      	ldr	r1, [pc, #160]	; (408b08 <SDRAMtest+0x394>)
  408a68:	7809      	ldrb	r1, [r1, #0]
  408a6a:	9106      	str	r1, [sp, #24]
  408a6c:	4927      	ldr	r1, [pc, #156]	; (408b0c <SDRAMtest+0x398>)
  408a6e:	7809      	ldrb	r1, [r1, #0]
  408a70:	9105      	str	r1, [sp, #20]
  408a72:	4927      	ldr	r1, [pc, #156]	; (408b10 <SDRAMtest+0x39c>)
  408a74:	7809      	ldrb	r1, [r1, #0]
  408a76:	9104      	str	r1, [sp, #16]
  408a78:	4926      	ldr	r1, [pc, #152]	; (408b14 <SDRAMtest+0x3a0>)
  408a7a:	7809      	ldrb	r1, [r1, #0]
  408a7c:	9103      	str	r1, [sp, #12]
  408a7e:	4926      	ldr	r1, [pc, #152]	; (408b18 <SDRAMtest+0x3a4>)
  408a80:	7809      	ldrb	r1, [r1, #0]
  408a82:	9102      	str	r1, [sp, #8]
  408a84:	e056      	b.n	408b34 <SDRAMtest+0x3c0>
  408a86:	bf00      	nop
  408a88:	e000ed00 	.word	0xe000ed00
  408a8c:	400e0e00 	.word	0x400e0e00
  408a90:	00403819 	.word	0x00403819
  408a94:	00408631 	.word	0x00408631
  408a98:	004102c0 	.word	0x004102c0
  408a9c:	0040c895 	.word	0x0040c895
  408aa0:	11e1a300 	.word	0x11e1a300
  408aa4:	004102b4 	.word	0x004102b4
  408aa8:	00402999 	.word	0x00402999
  408aac:	40084000 	.word	0x40084000
  408ab0:	004102c8 	.word	0x004102c8
  408ab4:	009a5649 	.word	0x009a5649
  408ab8:	2040008d 	.word	0x2040008d
  408abc:	70000af2 	.word	0x70000af2
  408ac0:	703aa2f2 	.word	0x703aa2f2
  408ac4:	a5000001 	.word	0xa5000001
  408ac8:	400e1850 	.word	0x400e1850
  408acc:	710000ee 	.word	0x710000ee
  408ad0:	710000ef 	.word	0x710000ef
  408ad4:	004102d8 	.word	0x004102d8
  408ad8:	004102e0 	.word	0x004102e0
  408adc:	71000101 	.word	0x71000101
  408ae0:	71000100 	.word	0x71000100
  408ae4:	710000ff 	.word	0x710000ff
  408ae8:	710000fe 	.word	0x710000fe
  408aec:	710000fd 	.word	0x710000fd
  408af0:	710000fc 	.word	0x710000fc
  408af4:	710000fb 	.word	0x710000fb
  408af8:	710000fa 	.word	0x710000fa
  408afc:	710000f9 	.word	0x710000f9
  408b00:	710000f8 	.word	0x710000f8
  408b04:	710000f7 	.word	0x710000f7
  408b08:	710000f6 	.word	0x710000f6
  408b0c:	710000f5 	.word	0x710000f5
  408b10:	710000f4 	.word	0x710000f4
  408b14:	710000f3 	.word	0x710000f3
  408b18:	710000f2 	.word	0x710000f2
  408b1c:	70000192 	.word	0x70000192
  408b20:	70000322 	.word	0x70000322
  408b24:	700004b2 	.word	0x700004b2
  408b28:	70000642 	.word	0x70000642
  408b2c:	700007d2 	.word	0x700007d2
  408b30:	70000962 	.word	0x70000962
  408b34:	4980      	ldr	r1, [pc, #512]	; (408d38 <SDRAMtest+0x5c4>)
  408b36:	7809      	ldrb	r1, [r1, #0]
  408b38:	9101      	str	r1, [sp, #4]
  408b3a:	4980      	ldr	r1, [pc, #512]	; (408d3c <SDRAMtest+0x5c8>)
  408b3c:	7809      	ldrb	r1, [r1, #0]
  408b3e:	9100      	str	r1, [sp, #0]
  408b40:	497f      	ldr	r1, [pc, #508]	; (408d40 <SDRAMtest+0x5cc>)
  408b42:	4628      	mov	r0, r5
  408b44:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  408b46:	4b7f      	ldr	r3, [pc, #508]	; (408d44 <SDRAMtest+0x5d0>)
  408b48:	781b      	ldrb	r3, [r3, #0]
  408b4a:	4a7f      	ldr	r2, [pc, #508]	; (408d48 <SDRAMtest+0x5d4>)
  408b4c:	7812      	ldrb	r2, [r2, #0]
  408b4e:	497f      	ldr	r1, [pc, #508]	; (408d4c <SDRAMtest+0x5d8>)
  408b50:	7809      	ldrb	r1, [r1, #0]
  408b52:	9111      	str	r1, [sp, #68]	; 0x44
  408b54:	497e      	ldr	r1, [pc, #504]	; (408d50 <SDRAMtest+0x5dc>)
  408b56:	7809      	ldrb	r1, [r1, #0]
  408b58:	9110      	str	r1, [sp, #64]	; 0x40
  408b5a:	497e      	ldr	r1, [pc, #504]	; (408d54 <SDRAMtest+0x5e0>)
  408b5c:	7809      	ldrb	r1, [r1, #0]
  408b5e:	910f      	str	r1, [sp, #60]	; 0x3c
  408b60:	497d      	ldr	r1, [pc, #500]	; (408d58 <SDRAMtest+0x5e4>)
  408b62:	7809      	ldrb	r1, [r1, #0]
  408b64:	910e      	str	r1, [sp, #56]	; 0x38
  408b66:	497d      	ldr	r1, [pc, #500]	; (408d5c <SDRAMtest+0x5e8>)
  408b68:	7809      	ldrb	r1, [r1, #0]
  408b6a:	910d      	str	r1, [sp, #52]	; 0x34
  408b6c:	497c      	ldr	r1, [pc, #496]	; (408d60 <SDRAMtest+0x5ec>)
  408b6e:	7809      	ldrb	r1, [r1, #0]
  408b70:	910c      	str	r1, [sp, #48]	; 0x30
  408b72:	497c      	ldr	r1, [pc, #496]	; (408d64 <SDRAMtest+0x5f0>)
  408b74:	7809      	ldrb	r1, [r1, #0]
  408b76:	910b      	str	r1, [sp, #44]	; 0x2c
  408b78:	497b      	ldr	r1, [pc, #492]	; (408d68 <SDRAMtest+0x5f4>)
  408b7a:	7809      	ldrb	r1, [r1, #0]
  408b7c:	910a      	str	r1, [sp, #40]	; 0x28
  408b7e:	497b      	ldr	r1, [pc, #492]	; (408d6c <SDRAMtest+0x5f8>)
  408b80:	7809      	ldrb	r1, [r1, #0]
  408b82:	9109      	str	r1, [sp, #36]	; 0x24
  408b84:	497a      	ldr	r1, [pc, #488]	; (408d70 <SDRAMtest+0x5fc>)
  408b86:	7809      	ldrb	r1, [r1, #0]
  408b88:	9108      	str	r1, [sp, #32]
  408b8a:	497a      	ldr	r1, [pc, #488]	; (408d74 <SDRAMtest+0x600>)
  408b8c:	7809      	ldrb	r1, [r1, #0]
  408b8e:	9107      	str	r1, [sp, #28]
  408b90:	4979      	ldr	r1, [pc, #484]	; (408d78 <SDRAMtest+0x604>)
  408b92:	7809      	ldrb	r1, [r1, #0]
  408b94:	9106      	str	r1, [sp, #24]
  408b96:	4979      	ldr	r1, [pc, #484]	; (408d7c <SDRAMtest+0x608>)
  408b98:	7809      	ldrb	r1, [r1, #0]
  408b9a:	9105      	str	r1, [sp, #20]
  408b9c:	4978      	ldr	r1, [pc, #480]	; (408d80 <SDRAMtest+0x60c>)
  408b9e:	7809      	ldrb	r1, [r1, #0]
  408ba0:	9104      	str	r1, [sp, #16]
  408ba2:	4978      	ldr	r1, [pc, #480]	; (408d84 <SDRAMtest+0x610>)
  408ba4:	7809      	ldrb	r1, [r1, #0]
  408ba6:	9103      	str	r1, [sp, #12]
  408ba8:	4977      	ldr	r1, [pc, #476]	; (408d88 <SDRAMtest+0x614>)
  408baa:	7809      	ldrb	r1, [r1, #0]
  408bac:	9102      	str	r1, [sp, #8]
  408bae:	4977      	ldr	r1, [pc, #476]	; (408d8c <SDRAMtest+0x618>)
  408bb0:	7809      	ldrb	r1, [r1, #0]
  408bb2:	9101      	str	r1, [sp, #4]
  408bb4:	4976      	ldr	r1, [pc, #472]	; (408d90 <SDRAMtest+0x61c>)
  408bb6:	7809      	ldrb	r1, [r1, #0]
  408bb8:	9100      	str	r1, [sp, #0]
  408bba:	4976      	ldr	r1, [pc, #472]	; (408d94 <SDRAMtest+0x620>)
  408bbc:	4628      	mov	r0, r5
  408bbe:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  408bc0:	4b75      	ldr	r3, [pc, #468]	; (408d98 <SDRAMtest+0x624>)
  408bc2:	781b      	ldrb	r3, [r3, #0]
  408bc4:	4a75      	ldr	r2, [pc, #468]	; (408d9c <SDRAMtest+0x628>)
  408bc6:	7812      	ldrb	r2, [r2, #0]
  408bc8:	4975      	ldr	r1, [pc, #468]	; (408da0 <SDRAMtest+0x62c>)
  408bca:	7809      	ldrb	r1, [r1, #0]
  408bcc:	9111      	str	r1, [sp, #68]	; 0x44
  408bce:	4975      	ldr	r1, [pc, #468]	; (408da4 <SDRAMtest+0x630>)
  408bd0:	7809      	ldrb	r1, [r1, #0]
  408bd2:	9110      	str	r1, [sp, #64]	; 0x40
  408bd4:	4974      	ldr	r1, [pc, #464]	; (408da8 <SDRAMtest+0x634>)
  408bd6:	7809      	ldrb	r1, [r1, #0]
  408bd8:	910f      	str	r1, [sp, #60]	; 0x3c
  408bda:	4974      	ldr	r1, [pc, #464]	; (408dac <SDRAMtest+0x638>)
  408bdc:	7809      	ldrb	r1, [r1, #0]
  408bde:	910e      	str	r1, [sp, #56]	; 0x38
  408be0:	4973      	ldr	r1, [pc, #460]	; (408db0 <SDRAMtest+0x63c>)
  408be2:	7809      	ldrb	r1, [r1, #0]
  408be4:	910d      	str	r1, [sp, #52]	; 0x34
  408be6:	4973      	ldr	r1, [pc, #460]	; (408db4 <SDRAMtest+0x640>)
  408be8:	7809      	ldrb	r1, [r1, #0]
  408bea:	910c      	str	r1, [sp, #48]	; 0x30
  408bec:	4972      	ldr	r1, [pc, #456]	; (408db8 <SDRAMtest+0x644>)
  408bee:	7809      	ldrb	r1, [r1, #0]
  408bf0:	910b      	str	r1, [sp, #44]	; 0x2c
  408bf2:	4972      	ldr	r1, [pc, #456]	; (408dbc <SDRAMtest+0x648>)
  408bf4:	7809      	ldrb	r1, [r1, #0]
  408bf6:	910a      	str	r1, [sp, #40]	; 0x28
  408bf8:	4971      	ldr	r1, [pc, #452]	; (408dc0 <SDRAMtest+0x64c>)
  408bfa:	7809      	ldrb	r1, [r1, #0]
  408bfc:	9109      	str	r1, [sp, #36]	; 0x24
  408bfe:	4971      	ldr	r1, [pc, #452]	; (408dc4 <SDRAMtest+0x650>)
  408c00:	7809      	ldrb	r1, [r1, #0]
  408c02:	9108      	str	r1, [sp, #32]
  408c04:	4970      	ldr	r1, [pc, #448]	; (408dc8 <SDRAMtest+0x654>)
  408c06:	7809      	ldrb	r1, [r1, #0]
  408c08:	9107      	str	r1, [sp, #28]
  408c0a:	4970      	ldr	r1, [pc, #448]	; (408dcc <SDRAMtest+0x658>)
  408c0c:	7809      	ldrb	r1, [r1, #0]
  408c0e:	9106      	str	r1, [sp, #24]
  408c10:	496f      	ldr	r1, [pc, #444]	; (408dd0 <SDRAMtest+0x65c>)
  408c12:	7809      	ldrb	r1, [r1, #0]
  408c14:	9105      	str	r1, [sp, #20]
  408c16:	496f      	ldr	r1, [pc, #444]	; (408dd4 <SDRAMtest+0x660>)
  408c18:	7809      	ldrb	r1, [r1, #0]
  408c1a:	9104      	str	r1, [sp, #16]
  408c1c:	496e      	ldr	r1, [pc, #440]	; (408dd8 <SDRAMtest+0x664>)
  408c1e:	7809      	ldrb	r1, [r1, #0]
  408c20:	9103      	str	r1, [sp, #12]
  408c22:	496e      	ldr	r1, [pc, #440]	; (408ddc <SDRAMtest+0x668>)
  408c24:	7809      	ldrb	r1, [r1, #0]
  408c26:	9102      	str	r1, [sp, #8]
  408c28:	496d      	ldr	r1, [pc, #436]	; (408de0 <SDRAMtest+0x66c>)
  408c2a:	7809      	ldrb	r1, [r1, #0]
  408c2c:	9101      	str	r1, [sp, #4]
  408c2e:	496d      	ldr	r1, [pc, #436]	; (408de4 <SDRAMtest+0x670>)
  408c30:	7809      	ldrb	r1, [r1, #0]
  408c32:	9100      	str	r1, [sp, #0]
  408c34:	496c      	ldr	r1, [pc, #432]	; (408de8 <SDRAMtest+0x674>)
  408c36:	4628      	mov	r0, r5
  408c38:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  408c3a:	4b6c      	ldr	r3, [pc, #432]	; (408dec <SDRAMtest+0x678>)
  408c3c:	781b      	ldrb	r3, [r3, #0]
  408c3e:	4a6c      	ldr	r2, [pc, #432]	; (408df0 <SDRAMtest+0x67c>)
  408c40:	7812      	ldrb	r2, [r2, #0]
  408c42:	496c      	ldr	r1, [pc, #432]	; (408df4 <SDRAMtest+0x680>)
  408c44:	7809      	ldrb	r1, [r1, #0]
  408c46:	9111      	str	r1, [sp, #68]	; 0x44
  408c48:	496b      	ldr	r1, [pc, #428]	; (408df8 <SDRAMtest+0x684>)
  408c4a:	7809      	ldrb	r1, [r1, #0]
  408c4c:	9110      	str	r1, [sp, #64]	; 0x40
  408c4e:	496b      	ldr	r1, [pc, #428]	; (408dfc <SDRAMtest+0x688>)
  408c50:	7809      	ldrb	r1, [r1, #0]
  408c52:	910f      	str	r1, [sp, #60]	; 0x3c
  408c54:	496a      	ldr	r1, [pc, #424]	; (408e00 <SDRAMtest+0x68c>)
  408c56:	7809      	ldrb	r1, [r1, #0]
  408c58:	910e      	str	r1, [sp, #56]	; 0x38
  408c5a:	496a      	ldr	r1, [pc, #424]	; (408e04 <SDRAMtest+0x690>)
  408c5c:	7809      	ldrb	r1, [r1, #0]
  408c5e:	910d      	str	r1, [sp, #52]	; 0x34
  408c60:	4969      	ldr	r1, [pc, #420]	; (408e08 <SDRAMtest+0x694>)
  408c62:	7809      	ldrb	r1, [r1, #0]
  408c64:	910c      	str	r1, [sp, #48]	; 0x30
  408c66:	4969      	ldr	r1, [pc, #420]	; (408e0c <SDRAMtest+0x698>)
  408c68:	7809      	ldrb	r1, [r1, #0]
  408c6a:	910b      	str	r1, [sp, #44]	; 0x2c
  408c6c:	4968      	ldr	r1, [pc, #416]	; (408e10 <SDRAMtest+0x69c>)
  408c6e:	7809      	ldrb	r1, [r1, #0]
  408c70:	910a      	str	r1, [sp, #40]	; 0x28
  408c72:	4968      	ldr	r1, [pc, #416]	; (408e14 <SDRAMtest+0x6a0>)
  408c74:	7809      	ldrb	r1, [r1, #0]
  408c76:	9109      	str	r1, [sp, #36]	; 0x24
  408c78:	4967      	ldr	r1, [pc, #412]	; (408e18 <SDRAMtest+0x6a4>)
  408c7a:	7809      	ldrb	r1, [r1, #0]
  408c7c:	9108      	str	r1, [sp, #32]
  408c7e:	4967      	ldr	r1, [pc, #412]	; (408e1c <SDRAMtest+0x6a8>)
  408c80:	7809      	ldrb	r1, [r1, #0]
  408c82:	9107      	str	r1, [sp, #28]
  408c84:	4966      	ldr	r1, [pc, #408]	; (408e20 <SDRAMtest+0x6ac>)
  408c86:	7809      	ldrb	r1, [r1, #0]
  408c88:	9106      	str	r1, [sp, #24]
  408c8a:	4966      	ldr	r1, [pc, #408]	; (408e24 <SDRAMtest+0x6b0>)
  408c8c:	7809      	ldrb	r1, [r1, #0]
  408c8e:	9105      	str	r1, [sp, #20]
  408c90:	4965      	ldr	r1, [pc, #404]	; (408e28 <SDRAMtest+0x6b4>)
  408c92:	7809      	ldrb	r1, [r1, #0]
  408c94:	9104      	str	r1, [sp, #16]
  408c96:	4965      	ldr	r1, [pc, #404]	; (408e2c <SDRAMtest+0x6b8>)
  408c98:	7809      	ldrb	r1, [r1, #0]
  408c9a:	9103      	str	r1, [sp, #12]
  408c9c:	4964      	ldr	r1, [pc, #400]	; (408e30 <SDRAMtest+0x6bc>)
  408c9e:	7809      	ldrb	r1, [r1, #0]
  408ca0:	9102      	str	r1, [sp, #8]
  408ca2:	4964      	ldr	r1, [pc, #400]	; (408e34 <SDRAMtest+0x6c0>)
  408ca4:	7809      	ldrb	r1, [r1, #0]
  408ca6:	9101      	str	r1, [sp, #4]
  408ca8:	4963      	ldr	r1, [pc, #396]	; (408e38 <SDRAMtest+0x6c4>)
  408caa:	7809      	ldrb	r1, [r1, #0]
  408cac:	9100      	str	r1, [sp, #0]
  408cae:	4963      	ldr	r1, [pc, #396]	; (408e3c <SDRAMtest+0x6c8>)
  408cb0:	4628      	mov	r0, r5
  408cb2:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  408cb4:	4b62      	ldr	r3, [pc, #392]	; (408e40 <SDRAMtest+0x6cc>)
  408cb6:	781b      	ldrb	r3, [r3, #0]
  408cb8:	4a62      	ldr	r2, [pc, #392]	; (408e44 <SDRAMtest+0x6d0>)
  408cba:	7812      	ldrb	r2, [r2, #0]
  408cbc:	4962      	ldr	r1, [pc, #392]	; (408e48 <SDRAMtest+0x6d4>)
  408cbe:	7809      	ldrb	r1, [r1, #0]
  408cc0:	9111      	str	r1, [sp, #68]	; 0x44
  408cc2:	4962      	ldr	r1, [pc, #392]	; (408e4c <SDRAMtest+0x6d8>)
  408cc4:	7809      	ldrb	r1, [r1, #0]
  408cc6:	9110      	str	r1, [sp, #64]	; 0x40
  408cc8:	4961      	ldr	r1, [pc, #388]	; (408e50 <SDRAMtest+0x6dc>)
  408cca:	7809      	ldrb	r1, [r1, #0]
  408ccc:	910f      	str	r1, [sp, #60]	; 0x3c
  408cce:	4961      	ldr	r1, [pc, #388]	; (408e54 <SDRAMtest+0x6e0>)
  408cd0:	7809      	ldrb	r1, [r1, #0]
  408cd2:	910e      	str	r1, [sp, #56]	; 0x38
  408cd4:	4960      	ldr	r1, [pc, #384]	; (408e58 <SDRAMtest+0x6e4>)
  408cd6:	7809      	ldrb	r1, [r1, #0]
  408cd8:	910d      	str	r1, [sp, #52]	; 0x34
  408cda:	4960      	ldr	r1, [pc, #384]	; (408e5c <SDRAMtest+0x6e8>)
  408cdc:	7809      	ldrb	r1, [r1, #0]
  408cde:	910c      	str	r1, [sp, #48]	; 0x30
  408ce0:	495f      	ldr	r1, [pc, #380]	; (408e60 <SDRAMtest+0x6ec>)
  408ce2:	7809      	ldrb	r1, [r1, #0]
  408ce4:	910b      	str	r1, [sp, #44]	; 0x2c
  408ce6:	495f      	ldr	r1, [pc, #380]	; (408e64 <SDRAMtest+0x6f0>)
  408ce8:	7809      	ldrb	r1, [r1, #0]
  408cea:	910a      	str	r1, [sp, #40]	; 0x28
  408cec:	495e      	ldr	r1, [pc, #376]	; (408e68 <SDRAMtest+0x6f4>)
  408cee:	7809      	ldrb	r1, [r1, #0]
  408cf0:	9109      	str	r1, [sp, #36]	; 0x24
  408cf2:	495e      	ldr	r1, [pc, #376]	; (408e6c <SDRAMtest+0x6f8>)
  408cf4:	7809      	ldrb	r1, [r1, #0]
  408cf6:	9108      	str	r1, [sp, #32]
  408cf8:	495d      	ldr	r1, [pc, #372]	; (408e70 <SDRAMtest+0x6fc>)
  408cfa:	7809      	ldrb	r1, [r1, #0]
  408cfc:	9107      	str	r1, [sp, #28]
  408cfe:	495d      	ldr	r1, [pc, #372]	; (408e74 <SDRAMtest+0x700>)
  408d00:	7809      	ldrb	r1, [r1, #0]
  408d02:	9106      	str	r1, [sp, #24]
  408d04:	495c      	ldr	r1, [pc, #368]	; (408e78 <SDRAMtest+0x704>)
  408d06:	7809      	ldrb	r1, [r1, #0]
  408d08:	9105      	str	r1, [sp, #20]
  408d0a:	495c      	ldr	r1, [pc, #368]	; (408e7c <SDRAMtest+0x708>)
  408d0c:	7809      	ldrb	r1, [r1, #0]
  408d0e:	9104      	str	r1, [sp, #16]
  408d10:	495b      	ldr	r1, [pc, #364]	; (408e80 <SDRAMtest+0x70c>)
  408d12:	7809      	ldrb	r1, [r1, #0]
  408d14:	9103      	str	r1, [sp, #12]
  408d16:	495b      	ldr	r1, [pc, #364]	; (408e84 <SDRAMtest+0x710>)
  408d18:	7809      	ldrb	r1, [r1, #0]
  408d1a:	9102      	str	r1, [sp, #8]
  408d1c:	495a      	ldr	r1, [pc, #360]	; (408e88 <SDRAMtest+0x714>)
  408d1e:	7809      	ldrb	r1, [r1, #0]
  408d20:	9101      	str	r1, [sp, #4]
  408d22:	495a      	ldr	r1, [pc, #360]	; (408e8c <SDRAMtest+0x718>)
  408d24:	7809      	ldrb	r1, [r1, #0]
  408d26:	9100      	str	r1, [sp, #0]
  408d28:	4959      	ldr	r1, [pc, #356]	; (408e90 <SDRAMtest+0x71c>)
  408d2a:	4628      	mov	r0, r5
  408d2c:	47a0      	blx	r4
	delay_ms(100);//
  408d2e:	4859      	ldr	r0, [pc, #356]	; (408e94 <SDRAMtest+0x720>)
  408d30:	4b59      	ldr	r3, [pc, #356]	; (408e98 <SDRAMtest+0x724>)
  408d32:	4798      	blx	r3
  408d34:	e0b2      	b.n	408e9c <SDRAMtest+0x728>
  408d36:	bf00      	nop
  408d38:	710000f1 	.word	0x710000f1
  408d3c:	710000f0 	.word	0x710000f0
  408d40:	71000102 	.word	0x71000102
  408d44:	711000ef 	.word	0x711000ef
  408d48:	711000ee 	.word	0x711000ee
  408d4c:	71100101 	.word	0x71100101
  408d50:	71100100 	.word	0x71100100
  408d54:	711000ff 	.word	0x711000ff
  408d58:	711000fe 	.word	0x711000fe
  408d5c:	711000fd 	.word	0x711000fd
  408d60:	711000fc 	.word	0x711000fc
  408d64:	711000fb 	.word	0x711000fb
  408d68:	711000fa 	.word	0x711000fa
  408d6c:	711000f9 	.word	0x711000f9
  408d70:	711000f8 	.word	0x711000f8
  408d74:	711000f7 	.word	0x711000f7
  408d78:	711000f6 	.word	0x711000f6
  408d7c:	711000f5 	.word	0x711000f5
  408d80:	711000f4 	.word	0x711000f4
  408d84:	711000f3 	.word	0x711000f3
  408d88:	711000f2 	.word	0x711000f2
  408d8c:	711000f1 	.word	0x711000f1
  408d90:	711000f0 	.word	0x711000f0
  408d94:	71100102 	.word	0x71100102
  408d98:	712000ef 	.word	0x712000ef
  408d9c:	712000ee 	.word	0x712000ee
  408da0:	71200101 	.word	0x71200101
  408da4:	71200100 	.word	0x71200100
  408da8:	712000ff 	.word	0x712000ff
  408dac:	712000fe 	.word	0x712000fe
  408db0:	712000fd 	.word	0x712000fd
  408db4:	712000fc 	.word	0x712000fc
  408db8:	712000fb 	.word	0x712000fb
  408dbc:	712000fa 	.word	0x712000fa
  408dc0:	712000f9 	.word	0x712000f9
  408dc4:	712000f8 	.word	0x712000f8
  408dc8:	712000f7 	.word	0x712000f7
  408dcc:	712000f6 	.word	0x712000f6
  408dd0:	712000f5 	.word	0x712000f5
  408dd4:	712000f4 	.word	0x712000f4
  408dd8:	712000f3 	.word	0x712000f3
  408ddc:	712000f2 	.word	0x712000f2
  408de0:	712000f1 	.word	0x712000f1
  408de4:	712000f0 	.word	0x712000f0
  408de8:	71200102 	.word	0x71200102
  408dec:	713000ef 	.word	0x713000ef
  408df0:	713000ee 	.word	0x713000ee
  408df4:	71300101 	.word	0x71300101
  408df8:	71300100 	.word	0x71300100
  408dfc:	713000ff 	.word	0x713000ff
  408e00:	713000fe 	.word	0x713000fe
  408e04:	713000fd 	.word	0x713000fd
  408e08:	713000fc 	.word	0x713000fc
  408e0c:	713000fb 	.word	0x713000fb
  408e10:	713000fa 	.word	0x713000fa
  408e14:	713000f9 	.word	0x713000f9
  408e18:	713000f8 	.word	0x713000f8
  408e1c:	713000f7 	.word	0x713000f7
  408e20:	713000f6 	.word	0x713000f6
  408e24:	713000f5 	.word	0x713000f5
  408e28:	713000f4 	.word	0x713000f4
  408e2c:	713000f3 	.word	0x713000f3
  408e30:	713000f2 	.word	0x713000f2
  408e34:	713000f1 	.word	0x713000f1
  408e38:	713000f0 	.word	0x713000f0
  408e3c:	71300102 	.word	0x71300102
  408e40:	714000ef 	.word	0x714000ef
  408e44:	714000ee 	.word	0x714000ee
  408e48:	71400101 	.word	0x71400101
  408e4c:	71400100 	.word	0x71400100
  408e50:	714000ff 	.word	0x714000ff
  408e54:	714000fe 	.word	0x714000fe
  408e58:	714000fd 	.word	0x714000fd
  408e5c:	714000fc 	.word	0x714000fc
  408e60:	714000fb 	.word	0x714000fb
  408e64:	714000fa 	.word	0x714000fa
  408e68:	714000f9 	.word	0x714000f9
  408e6c:	714000f8 	.word	0x714000f8
  408e70:	714000f7 	.word	0x714000f7
  408e74:	714000f6 	.word	0x714000f6
  408e78:	714000f5 	.word	0x714000f5
  408e7c:	714000f4 	.word	0x714000f4
  408e80:	714000f3 	.word	0x714000f3
  408e84:	714000f2 	.word	0x714000f2
  408e88:	714000f1 	.word	0x714000f1
  408e8c:	714000f0 	.word	0x714000f0
  408e90:	71400102 	.word	0x71400102
  408e94:	004d2b25 	.word	0x004d2b25
  408e98:	2040008d 	.word	0x2040008d
    ccsidr  = SCB->CCSIDR;
  408e9c:	4a1c      	ldr	r2, [pc, #112]	; (408f10 <SDRAMtest+0x79c>)
  408e9e:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  408ea2:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  408ea6:	f006 0007 	and.w	r0, r6, #7
  408eaa:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  408eac:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  408eb0:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  408eb4:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  408eb8:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  408ebc:	6951      	ldr	r1, [r2, #20]
  408ebe:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  408ec2:	6151      	str	r1, [r2, #20]
  408ec4:	f04f 34ff 	mov.w	r4, #4294967295
  408ec8:	fa04 fc00 	lsl.w	ip, r4, r0
  408ecc:	fa0e f000 	lsl.w	r0, lr, r0
  408ed0:	409c      	lsls	r4, r3
  408ed2:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCCISW = sw;
  408ed6:	4615      	mov	r5, r2
         int32_t tmpways = ways;
  408ed8:	4632      	mov	r2, r6
  408eda:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  408edc:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  408ee0:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  408ee4:	3a01      	subs	r2, #1
  408ee6:	4423      	add	r3, r4
  408ee8:	f1b2 3fff 	cmp.w	r2, #4294967295
  408eec:	d1f6      	bne.n	408edc <SDRAMtest+0x768>
        } while(sets--);
  408eee:	f10e 3eff 	add.w	lr, lr, #4294967295
  408ef2:	4460      	add	r0, ip
  408ef4:	f1be 3fff 	cmp.w	lr, #4294967295
  408ef8:	d1ee      	bne.n	408ed8 <SDRAMtest+0x764>
  408efa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  408efe:	f3bf 8f6f 	isb	sy
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  408f02:	4a04      	ldr	r2, [pc, #16]	; (408f14 <SDRAMtest+0x7a0>)
  408f04:	4b04      	ldr	r3, [pc, #16]	; (408f18 <SDRAMtest+0x7a4>)
  408f06:	601a      	str	r2, [r3, #0]
}
  408f08:	b015      	add	sp, #84	; 0x54
  408f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f0e:	bf00      	nop
  408f10:	e000ed00 	.word	0xe000ed00
  408f14:	a5000001 	.word	0xa5000001
  408f18:	400e1850 	.word	0x400e1850

00408f1c <redBlink>:
}
 /***********************************************************************/
 /*    YELLOW BLINK ATSAM
 ***********************************************************************/
 void redBlink (int numBlinks) {
  408f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408f20:	4b0f      	ldr	r3, [pc, #60]	; (408f60 <redBlink+0x44>)
  408f22:	2201      	movs	r2, #1
  408f24:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408f26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 int i;
	 ioport_set_pin_dir(LED_RED_GPIO, IOPORT_DIR_OUTPUT);
	 for (i=numBlinks; i>0; i--){
  408f2a:	1e04      	subs	r4, r0, #0
  408f2c:	dd10      	ble.n	408f50 <redBlink+0x34>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408f2e:	461e      	mov	r6, r3
  408f30:	4617      	mov	r7, r2
  408f32:	4692      	mov	sl, r2
		 ioport_set_pin_level(LED_RED_GPIO, LED_ACTIVE_LEVEL); //LED ON
		 delay_ms(20);
  408f34:	f8df 9030 	ldr.w	r9, [pc, #48]	; 408f68 <redBlink+0x4c>
  408f38:	4d0a      	ldr	r5, [pc, #40]	; (408f64 <redBlink+0x48>)
		 ioport_set_pin_level(LED_RED_GPIO, LED_INACTIVE_LEVEL); //LED OFF
		 delay_ms(50);
  408f3a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 408f6c <redBlink+0x50>
  408f3e:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		 delay_ms(20);
  408f42:	4648      	mov	r0, r9
  408f44:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408f46:	6337      	str	r7, [r6, #48]	; 0x30
		 delay_ms(50);
  408f48:	4640      	mov	r0, r8
  408f4a:	47a8      	blx	r5
	 for (i=numBlinks; i>0; i--){
  408f4c:	3c01      	subs	r4, #1
  408f4e:	d1f6      	bne.n	408f3e <redBlink+0x22>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  408f50:	4b03      	ldr	r3, [pc, #12]	; (408f60 <redBlink+0x44>)
  408f52:	2201      	movs	r2, #1
  408f54:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408f56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  408f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408f5e:	bf00      	nop
  408f60:	400e1400 	.word	0x400e1400
  408f64:	2040008d 	.word	0x2040008d
  408f68:	000f6f08 	.word	0x000f6f08
  408f6c:	00269593 	.word	0x00269593

00408f70 <resetPinsSDRAM>:
	printf("\r\n    %d MB\r\n", (uint16_t)(sd_mmc_get_capacity(slot) / 1024));
}
/***********************************************************************
 *    RESET SDRAM PINS
 ***********************************************************************/
void resetPinsSDRAM(void){
  408f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		base->PIO_PUDR = mask;
  408f74:	4bcb      	ldr	r3, [pc, #812]	; (4092a4 <resetPinsSDRAM+0x334>)
  408f76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  408f7a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408f7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408f80:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408f82:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408f88:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408f8a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  408f8e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408f90:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408f92:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  408f96:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408f98:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  408f9a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  408f9e:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408fa0:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408fa4:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408fa6:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408fa8:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408fac:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408fae:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  408fb2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408fb4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408fb6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  408fba:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408fbc:	601f      	str	r7, [r3, #0]
		base->PIO_PUDR = mask;
  408fbe:	f44f 2680 	mov.w	r6, #262144	; 0x40000
  408fc2:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408fc4:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408fc8:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408fca:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408fcc:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408fd0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408fd2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
  408fd6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408fd8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408fda:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
  408fde:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408fe0:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  408fe2:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
  408fe6:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408fe8:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408fec:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408fee:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408ff0:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408ff4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408ff6:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  408ffa:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408ffc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408ffe:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  409002:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409004:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  409006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40900a:	2401      	movs	r4, #1
  40900c:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40900e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409012:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409014:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409016:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40901a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40901c:	f021 0101 	bic.w	r1, r1, #1
  409020:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409022:	6f59      	ldr	r1, [r3, #116]	; 0x74
  409024:	f021 0101 	bic.w	r1, r1, #1
  409028:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40902a:	601c      	str	r4, [r3, #0]
		base->PIO_PUDR = mask;
  40902c:	2002      	movs	r0, #2
  40902e:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409030:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409034:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409036:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409038:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40903c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40903e:	f021 0102 	bic.w	r1, r1, #2
  409042:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409044:	6f59      	ldr	r1, [r3, #116]	; 0x74
  409046:	f021 0102 	bic.w	r1, r1, #2
  40904a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40904c:	6018      	str	r0, [r3, #0]
		base->PIO_PUDR = mask;
  40904e:	2104      	movs	r1, #4
  409050:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409052:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409056:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409058:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40905a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40905e:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  409062:	f02e 0e04 	bic.w	lr, lr, #4
  409066:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40906a:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  40906e:	f02e 0e04 	bic.w	lr, lr, #4
  409072:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409076:	6019      	str	r1, [r3, #0]
		base->PIO_PUDR = mask;
  409078:	f04f 0e08 	mov.w	lr, #8
  40907c:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409080:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409084:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409088:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40908c:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409090:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  409094:	f02c 0c08 	bic.w	ip, ip, #8
  409098:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40909c:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  4090a0:	f02c 0c08 	bic.w	ip, ip, #8
  4090a4:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4090a8:	f8c3 e000 	str.w	lr, [r3]
		base->PIO_PUDR = mask;
  4090ac:	f04f 0c10 	mov.w	ip, #16
  4090b0:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4090b4:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4090b8:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4090bc:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4090c0:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4090c4:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  4090c8:	f028 0810 	bic.w	r8, r8, #16
  4090cc:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4090d0:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  4090d4:	f028 0810 	bic.w	r8, r8, #16
  4090d8:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4090dc:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  4090e0:	f04f 0c20 	mov.w	ip, #32
  4090e4:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4090e8:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4090ec:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4090f0:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4090f4:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4090f8:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  4090fc:	f028 0820 	bic.w	r8, r8, #32
  409100:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409104:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  409108:	f028 0820 	bic.w	r8, r8, #32
  40910c:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409110:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  409114:	f04f 0c40 	mov.w	ip, #64	; 0x40
  409118:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40911c:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409120:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409124:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409128:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40912c:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  409130:	f028 0840 	bic.w	r8, r8, #64	; 0x40
  409134:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409138:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  40913c:	f028 0840 	bic.w	r8, r8, #64	; 0x40
  409140:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409144:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  409148:	f04f 0c80 	mov.w	ip, #128	; 0x80
  40914c:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409150:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409154:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409158:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40915c:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409160:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  409164:	f028 0880 	bic.w	r8, r8, #128	; 0x80
  409168:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40916c:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  409170:	f028 0880 	bic.w	r8, r8, #128	; 0x80
  409174:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409178:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  40917c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40917e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409182:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409184:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40918a:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  40918e:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  409192:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409196:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  40919a:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  40919e:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4091a2:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  4091a4:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4091a6:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4091aa:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4091ac:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4091ae:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4091b2:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  4091b6:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  4091ba:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4091be:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  4091c2:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  4091c6:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4091ca:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  4091cc:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4091ce:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4091d2:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4091d4:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4091d6:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4091da:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  4091dc:	f426 1680 	bic.w	r6, r6, #1048576	; 0x100000
  4091e0:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4091e2:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  4091e4:	f426 1680 	bic.w	r6, r6, #1048576	; 0x100000
  4091e8:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4091ea:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  4091ec:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
  4091f0:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4091f2:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4091f6:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4091f8:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4091fa:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4091fe:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  409200:	f426 1600 	bic.w	r6, r6, #2097152	; 0x200000
  409204:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409206:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  409208:	f426 1600 	bic.w	r6, r6, #2097152	; 0x200000
  40920c:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40920e:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  409210:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  409214:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409216:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40921a:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40921c:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40921e:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409222:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  409224:	f426 0680 	bic.w	r6, r6, #4194304	; 0x400000
  409228:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40922a:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40922c:	f426 0680 	bic.w	r6, r6, #4194304	; 0x400000
  409230:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409232:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  409234:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
  409238:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40923a:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40923e:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409240:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409242:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409246:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  409248:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
  40924c:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40924e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  409250:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
  409254:	675d      	str	r5, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409256:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  409258:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  40925c:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40925e:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409262:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409264:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409266:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40926a:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  40926e:	f02c 7c80 	bic.w	ip, ip, #16777216	; 0x1000000
  409272:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409276:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  40927a:	f02c 7c80 	bic.w	ip, ip, #16777216	; 0x1000000
  40927e:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409282:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  409284:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  409288:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40928a:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40928e:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409290:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409292:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409296:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  40929a:	f02c 7c00 	bic.w	ip, ip, #33554432	; 0x2000000
  40929e:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
  4092a2:	e001      	b.n	4092a8 <resetPinsSDRAM+0x338>
  4092a4:	400e0e00 	.word	0x400e0e00
		base->PIO_ABCDSR[1] &= ~mask;
  4092a8:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  4092ac:	f02c 7c00 	bic.w	ip, ip, #33554432	; 0x2000000
  4092b0:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4092b4:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  4092b6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  4092ba:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4092bc:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4092c0:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4092c2:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4092c4:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4092c8:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  4092cc:	f02c 6c80 	bic.w	ip, ip, #67108864	; 0x4000000
  4092d0:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4092d4:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  4092d8:	f02c 6c80 	bic.w	ip, ip, #67108864	; 0x4000000
  4092dc:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4092e0:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  4092e2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  4092e6:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4092e8:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4092ec:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4092ee:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4092f0:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4092f4:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  4092f8:	f02c 6c00 	bic.w	ip, ip, #134217728	; 0x8000000
  4092fc:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409300:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  409304:	f02c 6c00 	bic.w	ip, ip, #134217728	; 0x8000000
  409308:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40930c:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  40930e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  409312:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409314:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409318:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40931a:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40931c:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409320:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  409324:	f02c 5c80 	bic.w	ip, ip, #268435456	; 0x10000000
  409328:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40932c:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  409330:	f02c 5c80 	bic.w	ip, ip, #268435456	; 0x10000000
  409334:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409338:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  40933a:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  40933e:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409340:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409344:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409346:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409348:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40934c:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  409350:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  409354:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409358:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  40935c:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  409360:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409364:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  409366:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40936a:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40936e:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409372:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409376:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40937a:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40937e:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  409382:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
  409386:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40938a:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  40938e:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
  409392:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409396:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  40939a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40939e:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  4093a2:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4093a6:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4093aa:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4093ae:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4093b2:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4093b6:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  4093ba:	f428 5800 	bic.w	r8, r8, #8192	; 0x2000
  4093be:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4093c2:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  4093c6:	f428 5800 	bic.w	r8, r8, #8192	; 0x2000
  4093ca:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4093ce:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  4093d2:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  4093d6:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4093da:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4093de:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4093e2:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4093e6:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4093ea:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  4093ee:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
  4093f2:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4093f6:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  4093fa:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
  4093fe:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409402:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  409406:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409408:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40940c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40940e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409414:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  409418:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  40941c:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409420:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  409424:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  409428:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40942c:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  40942e:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409430:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409434:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409436:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409438:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40943c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40943e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  409442:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409444:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  409446:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  40944a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40944c:	601f      	str	r7, [r3, #0]
		base->PIO_PUDR = mask;
  40944e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  409452:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409454:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409458:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40945a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40945c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409460:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  409462:	f427 3700 	bic.w	r7, r7, #131072	; 0x20000
  409466:	671f      	str	r7, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409468:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  40946a:	f427 3700 	bic.w	r7, r7, #131072	; 0x20000
  40946e:	675f      	str	r7, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409470:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  409472:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409474:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409478:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40947a:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40947c:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409480:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  409482:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  409486:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409488:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40948a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  40948e:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409490:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  409492:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409494:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409498:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40949a:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40949c:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4094a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4094a2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  4094a6:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4094a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4094aa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  4094ae:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4094b0:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  4094b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4094b6:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4094b8:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4094bc:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4094be:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4094c0:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4094c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4094c6:	f022 0201 	bic.w	r2, r2, #1
  4094ca:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4094cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4094ce:	f022 0201 	bic.w	r2, r2, #1
  4094d2:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4094d4:	601c      	str	r4, [r3, #0]
		base->PIO_PUDR = mask;
  4094d6:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4094d8:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4094dc:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4094de:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4094e0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4094e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4094e6:	f022 0202 	bic.w	r2, r2, #2
  4094ea:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4094ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4094ee:	f022 0202 	bic.w	r2, r2, #2
  4094f2:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4094f4:	6018      	str	r0, [r3, #0]
		base->PIO_PUDR = mask;
  4094f6:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4094f8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4094fc:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4094fe:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409500:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409504:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  409506:	f022 0204 	bic.w	r2, r2, #4
  40950a:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40950c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40950e:	f022 0204 	bic.w	r2, r2, #4
  409512:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409514:	6019      	str	r1, [r3, #0]
		base->PIO_PUDR = mask;
  409516:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40951a:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40951e:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409522:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409526:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40952a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40952c:	f022 0208 	bic.w	r2, r2, #8
  409530:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409532:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  409534:	f022 0208 	bic.w	r2, r2, #8
  409538:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40953a:	f8c3 e000 	str.w	lr, [r3]
		base->PIO_PUDR = mask;
  40953e:	2210      	movs	r2, #16
  409540:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409542:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409546:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409548:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40954a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40954e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  409550:	f021 0110 	bic.w	r1, r1, #16
  409554:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409556:	6f59      	ldr	r1, [r3, #116]	; 0x74
  409558:	f021 0110 	bic.w	r1, r1, #16
  40955c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40955e:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  409560:	2220      	movs	r2, #32
  409562:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409564:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409568:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40956a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40956c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409570:	6f19      	ldr	r1, [r3, #112]	; 0x70
  409572:	f021 0120 	bic.w	r1, r1, #32
  409576:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409578:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40957a:	f021 0120 	bic.w	r1, r1, #32
  40957e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409580:	601a      	str	r2, [r3, #0]
  409582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409586:	bf00      	nop

00409588 <closeSDcard>:
	ioport_enable_pin(GPIO_PE5);//Enable normal SDRAM function
}
/***********************************************************************
 *    CLOSE SD CARD
 ***********************************************************************/
void closeSDcard(void){
  409588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  40958a:	4c49      	ldr	r4, [pc, #292]	; (4096b0 <closeSDcard+0x128>)
  40958c:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
  409590:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409592:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  409596:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  409598:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40959a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40959e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4095a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  4095a4:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4095a6:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4095a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  4095ac:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4095ae:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  4095b2:	6625      	str	r5, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4095b4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4095b8:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4095ba:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4095bc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4095c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4095c2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  4095c6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4095c8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4095ca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  4095ce:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4095d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4095d4:	6620      	str	r0, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4095d6:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4095da:	6560      	str	r0, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4095dc:	6260      	str	r0, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4095de:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4095e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4095e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  4095e8:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4095ea:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4095ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  4095f0:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4095f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4095f6:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4095f8:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4095fc:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4095fe:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409600:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409604:	6f23      	ldr	r3, [r4, #112]	; 0x70
  409606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40960a:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40960c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40960e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  409612:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  409614:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  409618:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40961a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40961e:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  409620:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409622:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409626:	6f23      	ldr	r3, [r4, #112]	; 0x70
  409628:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  40962c:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40962e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  409630:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  409634:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  409636:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40963a:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40963c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  409640:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  409642:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409644:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409648:	6f27      	ldr	r7, [r4, #112]	; 0x70
  40964a:	f027 6700 	bic.w	r7, r7, #134217728	; 0x8000000
  40964e:	6727      	str	r7, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409650:	6f67      	ldr	r7, [r4, #116]	; 0x74
  409652:	f027 6700 	bic.w	r7, r7, #134217728	; 0x8000000
  409656:	6767      	str	r7, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409658:	6026      	str	r6, [r4, #0]
  40965a:	6025      	str	r5, [r4, #0]
  40965c:	6020      	str	r0, [r4, #0]
  40965e:	6021      	str	r1, [r4, #0]
  409660:	6022      	str	r2, [r4, #0]
  409662:	6023      	str	r3, [r4, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409664:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409666:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40966a:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40966c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409670:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409672:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409676:	6121      	str	r1, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409678:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40967c:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40967e:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409682:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409684:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  409688:	6366      	str	r6, [r4, #52]	; 0x34
  40968a:	6365      	str	r5, [r4, #52]	; 0x34
  40968c:	6360      	str	r0, [r4, #52]	; 0x34
  40968e:	6361      	str	r1, [r4, #52]	; 0x34
  409690:	6362      	str	r2, [r4, #52]	; 0x34
  409692:	6363      	str	r3, [r4, #52]	; 0x34
	ioport_set_pin_level(PIN_HSMCI_MCCK_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA0_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA1_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA2_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA3_GPIO,0);
	delay_ms(10);
  409694:	4e07      	ldr	r6, [pc, #28]	; (4096b4 <closeSDcard+0x12c>)
  409696:	4630      	mov	r0, r6
  409698:	4d07      	ldr	r5, [pc, #28]	; (4096b8 <closeSDcard+0x130>)
  40969a:	47a8      	blx	r5
  40969c:	f44f 7280 	mov.w	r2, #256	; 0x100
  4096a0:	4b06      	ldr	r3, [pc, #24]	; (4096bc <closeSDcard+0x134>)
  4096a2:	635a      	str	r2, [r3, #52]	; 0x34
  4096a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4096a8:	6363      	str	r3, [r4, #52]	; 0x34
	ioport_set_pin_level(SDCARDPWRC_GPIO, 0);
	ioport_set_pin_level(CPWRC_GPIO,0);
	delay_ms(10);
  4096aa:	4630      	mov	r0, r6
  4096ac:	47a8      	blx	r5
  4096ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4096b0:	400e0e00 	.word	0x400e0e00
  4096b4:	0007b784 	.word	0x0007b784
  4096b8:	2040008d 	.word	0x2040008d
  4096bc:	400e1400 	.word	0x400e1400

004096c0 <resetSD>:
}
/***********************************************************************
 *    SSD Card Hardware Reset
 ***********************************************************************/
void resetSD (void){
  4096c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		base->PIO_PUDR = mask;
  4096c4:	4c88      	ldr	r4, [pc, #544]	; (4098e8 <resetSD+0x228>)
  4096c6:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
  4096ca:	f8c4 a060 	str.w	sl, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4096ce:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4096d2:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4096d6:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4096da:	f8c4 a080 	str.w	sl, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4096de:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4096e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  4096e4:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4096e6:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4096e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  4096ec:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4096ee:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
  4096f2:	f8c4 9060 	str.w	r9, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4096f6:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4096fa:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4096fe:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409702:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409706:	6f23      	ldr	r3, [r4, #112]	; 0x70
  409708:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  40970c:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40970e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  409710:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  409714:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  409716:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  40971a:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40971e:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  409722:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  409726:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40972a:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40972e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  409730:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  409734:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409736:	6f63      	ldr	r3, [r4, #116]	; 0x74
  409738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  40973c:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  40973e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  409742:	6627      	str	r7, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409744:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  409748:	6567      	str	r7, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40974a:	6267      	str	r7, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40974c:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409750:	6f23      	ldr	r3, [r4, #112]	; 0x70
  409752:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  409756:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409758:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40975a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40975e:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  409760:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  409764:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409766:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40976a:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40976c:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40976e:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409772:	6f23      	ldr	r3, [r4, #112]	; 0x70
  409774:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  409778:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40977a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40977c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  409780:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  409782:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  409786:	6625      	str	r5, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409788:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40978c:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40978e:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409790:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409794:	6f23      	ldr	r3, [r4, #112]	; 0x70
  409796:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
  40979a:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40979c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40979e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
  4097a2:	6763      	str	r3, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4097a4:	f8c4 a000 	str.w	sl, [r4]
  4097a8:	f8c4 9000 	str.w	r9, [r4]
  4097ac:	f8c4 8000 	str.w	r8, [r4]
  4097b0:	6027      	str	r7, [r4, #0]
  4097b2:	6026      	str	r6, [r4, #0]
  4097b4:	6025      	str	r5, [r4, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4097b6:	f8c4 a010 	str.w	sl, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4097ba:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4097be:	f8c4 9010 	str.w	r9, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4097c2:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4097c6:	f8c4 8010 	str.w	r8, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4097ca:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4097ce:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4097d0:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4097d4:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4097d6:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4097da:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4097dc:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4097e0:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  4097e4:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  4097e8:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
  4097ec:	6367      	str	r7, [r4, #52]	; 0x34
  4097ee:	6366      	str	r6, [r4, #52]	; 0x34
  4097f0:	6365      	str	r5, [r4, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4097f2:	4b3e      	ldr	r3, [pc, #248]	; (4098ec <resetSD+0x22c>)
  4097f4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4097f8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4097fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4097fe:	635a      	str	r2, [r3, #52]	; 0x34
  409800:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  409804:	6363      	str	r3, [r4, #52]	; 0x34
	ioport_set_pin_level(PIN_HSMCI_MCDA2_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA3_GPIO,0);
	ioport_set_pin_dir(SDCARDPWRC_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SDCARDPWRC_GPIO, 0);
	ioport_set_pin_level(CPWRC_GPIO,0);
	delay_ms(200);
  409806:	483a      	ldr	r0, [pc, #232]	; (4098f0 <resetSD+0x230>)
  409808:	4b3a      	ldr	r3, [pc, #232]	; (4098f4 <resetSD+0x234>)
  40980a:	4798      	blx	r3
		base->PIO_PUDR = mask;
  40980c:	f8c4 a060 	str.w	sl, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409810:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  409814:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  409818:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40981c:	f8c4 a080 	str.w	sl, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409820:	6f23      	ldr	r3, [r4, #112]	; 0x70
  409822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  409826:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  409828:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40982a:	ea43 030a 	orr.w	r3, r3, sl
  40982e:	6763      	str	r3, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  409830:	f8c4 a004 	str.w	sl, [r4, #4]
		base->PIO_PUDR = mask;
  409834:	f8c4 9060 	str.w	r9, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409838:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40983c:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  409840:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409844:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  409848:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40984a:	ea43 0309 	orr.w	r3, r3, r9
  40984e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  409850:	6f63      	ldr	r3, [r4, #116]	; 0x74
  409852:	ea43 0309 	orr.w	r3, r3, r9
  409856:	6763      	str	r3, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  409858:	f8c4 9004 	str.w	r9, [r4, #4]
		base->PIO_PUDR = mask;
  40985c:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409860:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  409864:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  409868:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40986c:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409870:	6f23      	ldr	r3, [r4, #112]	; 0x70
  409872:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  409876:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  409878:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40987a:	ea43 0308 	orr.w	r3, r3, r8
  40987e:	6763      	str	r3, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  409880:	f8c4 8004 	str.w	r8, [r4, #4]
		base->PIO_PUDR = mask;
  409884:	6627      	str	r7, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409886:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40988a:	6567      	str	r7, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40988c:	6267      	str	r7, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40988e:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409892:	6f23      	ldr	r3, [r4, #112]	; 0x70
  409894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  409898:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40989a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40989c:	433b      	orrs	r3, r7
  40989e:	6763      	str	r3, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4098a0:	6067      	str	r7, [r4, #4]
		base->PIO_PUDR = mask;
  4098a2:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4098a4:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4098a8:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4098aa:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4098ac:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4098b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4098b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  4098b6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4098b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4098ba:	4333      	orrs	r3, r6
  4098bc:	6763      	str	r3, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4098be:	6066      	str	r6, [r4, #4]
		base->PIO_PUDR = mask;
  4098c0:	6625      	str	r5, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4098c2:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4098c6:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4098c8:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4098ca:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4098ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4098d0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
  4098d4:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4098d6:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4098d8:	432b      	orrs	r3, r5
  4098da:	6763      	str	r3, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4098dc:	6065      	str	r5, [r4, #4]
 	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
	pio_set_pin_high(SDCARDPWRC_GPIO);
  4098de:	2068      	movs	r0, #104	; 0x68
  4098e0:	4b05      	ldr	r3, [pc, #20]	; (4098f8 <resetSD+0x238>)
  4098e2:	4798      	blx	r3
  4098e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4098e8:	400e0e00 	.word	0x400e0e00
  4098ec:	400e1400 	.word	0x400e1400
  4098f0:	009a5649 	.word	0x009a5649
  4098f4:	2040008d 	.word	0x2040008d
  4098f8:	004034c5 	.word	0x004034c5

004098fc <oneDayToSD>:
void oneDayToSD(unsigned int archiveDay,unsigned int test){
  4098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409900:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
  409904:	9004      	str	r0, [sp, #16]
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  409906:	f8df a324 	ldr.w	sl, [pc, #804]	; 409c2c <oneDayToSD+0x330>
  40990a:	f8df b324 	ldr.w	fp, [pc, #804]	; 409c30 <oneDayToSD+0x334>
  40990e:	f8ca b000 	str.w	fp, [sl]
	twi_init_RTC();
  409912:	4bb1      	ldr	r3, [pc, #708]	; (409bd8 <oneDayToSD+0x2dc>)
  409914:	4798      	blx	r3
	delay_ms(100);//
  409916:	48b1      	ldr	r0, [pc, #708]	; (409bdc <oneDayToSD+0x2e0>)
  409918:	f8df 930c 	ldr.w	r9, [pc, #780]	; 409c28 <oneDayToSD+0x32c>
  40991c:	47c8      	blx	r9
	rtcData[0]=0x03;//
  40991e:	2303      	movs	r3, #3
  409920:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
	write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  409924:	2101      	movs	r1, #1
  409926:	ab25      	add	r3, sp, #148	; 0x94
  409928:	4618      	mov	r0, r3
  40992a:	4bad      	ldr	r3, [pc, #692]	; (409be0 <oneDayToSD+0x2e4>)
  40992c:	4798      	blx	r3
	delay_ms(1);//
  40992e:	f24c 508e 	movw	r0, #50574	; 0xc58e
  409932:	47c8      	blx	r9
 	read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  409934:	2107      	movs	r1, #7
  409936:	ab25      	add	r3, sp, #148	; 0x94
  409938:	4618      	mov	r0, r3
  40993a:	4baa      	ldr	r3, [pc, #680]	; (409be4 <oneDayToSD+0x2e8>)
  40993c:	4798      	blx	r3
 	getSetDeviceID();
  40993e:	4baa      	ldr	r3, [pc, #680]	; (409be8 <oneDayToSD+0x2ec>)
  409940:	4798      	blx	r3
 	rtc_set_date(RTC,(unsigned int)(bcdToHex(rtcData[0])+19),bcdToHex(rtcData[5]),bcdToHex(rtcData[3]),5);//Flag to avoid bogus downloads or other interruptions from interfering with initial GPS)
  409942:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
  409946:	4da9      	ldr	r5, [pc, #676]	; (409bec <oneDayToSD+0x2f0>)
  409948:	47a8      	blx	r5
  40994a:	4606      	mov	r6, r0
  40994c:	f89d 0099 	ldrb.w	r0, [sp, #153]	; 0x99
  409950:	47a8      	blx	r5
  409952:	4607      	mov	r7, r0
  409954:	f89d 0097 	ldrb.w	r0, [sp, #151]	; 0x97
  409958:	47a8      	blx	r5
  40995a:	4ca5      	ldr	r4, [pc, #660]	; (409bf0 <oneDayToSD+0x2f4>)
  40995c:	2305      	movs	r3, #5
  40995e:	9300      	str	r3, [sp, #0]
  409960:	4603      	mov	r3, r0
  409962:	463a      	mov	r2, r7
  409964:	f106 0113 	add.w	r1, r6, #19
  409968:	4620      	mov	r0, r4
  40996a:	4ea2      	ldr	r6, [pc, #648]	; (409bf4 <oneDayToSD+0x2f8>)
  40996c:	47b0      	blx	r6
 	rtc_set_time(RTC,bcdToHex(rtcData[2]),bcdToHex(rtcData[1]),bcdToHex(rtcData[0]));//[RTC,hourNow,minsNow,secNow] Set these as a counter to determine if stuck in a stupid boot-up loop. )
  40996e:	f89d 0096 	ldrb.w	r0, [sp, #150]	; 0x96
  409972:	47a8      	blx	r5
  409974:	4606      	mov	r6, r0
  409976:	f89d 0095 	ldrb.w	r0, [sp, #149]	; 0x95
  40997a:	47a8      	blx	r5
  40997c:	4607      	mov	r7, r0
  40997e:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
  409982:	47a8      	blx	r5
  409984:	4603      	mov	r3, r0
  409986:	463a      	mov	r2, r7
  409988:	4631      	mov	r1, r6
  40998a:	4620      	mov	r0, r4
  40998c:	4c9a      	ldr	r4, [pc, #616]	; (409bf8 <oneDayToSD+0x2fc>)
  40998e:	47a0      	blx	r4
	const char fdtFolderName[] = {'F','D','T',0};
  409990:	4b9a      	ldr	r3, [pc, #616]	; (409bfc <oneDayToSD+0x300>)
  409992:	681b      	ldr	r3, [r3, #0]
  409994:	9324      	str	r3, [sp, #144]	; 0x90
	char csvFileName[] = {'F','D','T','/',
  409996:	2346      	movs	r3, #70	; 0x46
  409998:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40999c:	2344      	movs	r3, #68	; 0x44
  40999e:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  4099a2:	2354      	movs	r3, #84	; 0x54
  4099a4:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
  4099a8:	232f      	movs	r3, #47	; 0x2f
  4099aa:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
	DEVICEID[0],DEVICEID[1],DEVICEID[2],DEVICEID[3],DEVICEID[4],DEVICEID[5],DEVICEID[6],DEVICEID[7],
  4099ae:	4b94      	ldr	r3, [pc, #592]	; (409c00 <oneDayToSD+0x304>)
	char csvFileName[] = {'F','D','T','/',
  4099b0:	781a      	ldrb	r2, [r3, #0]
  4099b2:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
  4099b6:	785a      	ldrb	r2, [r3, #1]
  4099b8:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
  4099bc:	789a      	ldrb	r2, [r3, #2]
  4099be:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  4099c2:	78da      	ldrb	r2, [r3, #3]
  4099c4:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
  4099c8:	791a      	ldrb	r2, [r3, #4]
  4099ca:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4099ce:	795a      	ldrb	r2, [r3, #5]
  4099d0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4099d4:	799a      	ldrb	r2, [r3, #6]
  4099d6:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
  4099da:	79da      	ldrb	r2, [r3, #7]
  4099dc:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
  4099e0:	7a1a      	ldrb	r2, [r3, #8]
  4099e2:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  4099e6:	7a5a      	ldrb	r2, [r3, #9]
  4099e8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4099ec:	7a9a      	ldrb	r2, [r3, #10]
  4099ee:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4099f2:	7ada      	ldrb	r2, [r3, #11]
  4099f4:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
  4099f8:	7b1a      	ldrb	r2, [r3, #12]
  4099fa:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
  4099fe:	7b5a      	ldrb	r2, [r3, #13]
  409a00:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
  409a04:	7b9a      	ldrb	r2, [r3, #14]
  409a06:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
  409a0a:	7bdb      	ldrb	r3, [r3, #15]
  409a0c:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
  409a10:	235f      	movs	r3, #95	; 0x5f
  409a12:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
	'_',(char)(hex1ToAscii((bcdToHex(rtcData[6]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[6]))%10)),
  409a16:	f89d 009a 	ldrb.w	r0, [sp, #154]	; 0x9a
  409a1a:	47a8      	blx	r5
  409a1c:	4680      	mov	r8, r0
  409a1e:	4c79      	ldr	r4, [pc, #484]	; (409c04 <oneDayToSD+0x308>)
  409a20:	fba4 3600 	umull	r3, r6, r4, r0
  409a24:	08f6      	lsrs	r6, r6, #3
  409a26:	b2f0      	uxtb	r0, r6
  409a28:	4f77      	ldr	r7, [pc, #476]	; (409c08 <oneDayToSD+0x30c>)
  409a2a:	47b8      	blx	r7
  409a2c:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
  409a30:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  409a34:	eba8 0646 	sub.w	r6, r8, r6, lsl #1
  409a38:	b2f0      	uxtb	r0, r6
  409a3a:	47b8      	blx	r7
  409a3c:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
	(char)(hex1ToAscii((bcdToHex(rtcData[5]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[5]))%10)),
  409a40:	f89d 0099 	ldrb.w	r0, [sp, #153]	; 0x99
  409a44:	47a8      	blx	r5
  409a46:	4605      	mov	r5, r0
  409a48:	fba4 3400 	umull	r3, r4, r4, r0
  409a4c:	08e4      	lsrs	r4, r4, #3
  409a4e:	b2e0      	uxtb	r0, r4
  409a50:	47b8      	blx	r7
  409a52:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
  409a56:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  409a5a:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
  409a5e:	b2e0      	uxtb	r0, r4
  409a60:	47b8      	blx	r7
  409a62:	f88d 0088 	strb.w	r0, [sp, #136]	; 0x88
	char csvFileName[] = {'F','D','T','/',
  409a66:	232e      	movs	r3, #46	; 0x2e
  409a68:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
  409a6c:	2343      	movs	r3, #67	; 0x43
  409a6e:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
  409a72:	2353      	movs	r3, #83	; 0x53
  409a74:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
  409a78:	2356      	movs	r3, #86	; 0x56
  409a7a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
  409a7e:	2300      	movs	r3, #0
  409a80:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
	configure_console();
  409a84:	4b61      	ldr	r3, [pc, #388]	; (409c0c <oneDayToSD+0x310>)
  409a86:	4798      	blx	r3
	delay_ms(10);
  409a88:	4861      	ldr	r0, [pc, #388]	; (409c10 <oneDayToSD+0x314>)
  409a8a:	47c8      	blx	r9
	printf("BEGIN ONE DAY APPEND TO CSV %X.\r\n",archiveDay);
  409a8c:	9904      	ldr	r1, [sp, #16]
  409a8e:	4861      	ldr	r0, [pc, #388]	; (409c14 <oneDayToSD+0x318>)
  409a90:	4b61      	ldr	r3, [pc, #388]	; (409c18 <oneDayToSD+0x31c>)
  409a92:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  409a94:	f8ca b000 	str.w	fp, [sl]
	resetSD();
  409a98:	4b60      	ldr	r3, [pc, #384]	; (409c1c <oneDayToSD+0x320>)
  409a9a:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  409a9c:	4b60      	ldr	r3, [pc, #384]	; (409c20 <oneDayToSD+0x324>)
  409a9e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  409aa2:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409aa6:	f007 0007 	and.w	r0, r7, #7
  409aaa:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409aac:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  409ab0:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  409ab4:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  409ab8:	f3bf 8f4f 	dsb	sy
  409abc:	f04f 34ff 	mov.w	r4, #4294967295
  409ac0:	fa04 fc00 	lsl.w	ip, r4, r0
  409ac4:	fa06 f000 	lsl.w	r0, r6, r0
  409ac8:	fa04 f40e 	lsl.w	r4, r4, lr
  409acc:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCISW = sw;
  409ad0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  409ad2:	463a      	mov	r2, r7
  409ad4:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  409ad6:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  409ada:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  409ade:	3a01      	subs	r2, #1
  409ae0:	4423      	add	r3, r4
  409ae2:	f1b2 3fff 	cmp.w	r2, #4294967295
  409ae6:	d1f6      	bne.n	409ad6 <oneDayToSD+0x1da>
        } while(sets--);
  409ae8:	3e01      	subs	r6, #1
  409aea:	4460      	add	r0, ip
  409aec:	f1b6 3fff 	cmp.w	r6, #4294967295
  409af0:	d1ef      	bne.n	409ad2 <oneDayToSD+0x1d6>
  409af2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  409af6:	4b4a      	ldr	r3, [pc, #296]	; (409c20 <oneDayToSD+0x324>)
  409af8:	695a      	ldr	r2, [r3, #20]
  409afa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  409afe:	615a      	str	r2, [r3, #20]
  409b00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409b04:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  409b08:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  409b0c:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409b10:	f007 0007 	and.w	r0, r7, #7
  409b14:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409b16:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  409b1a:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  409b1e:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  409b22:	f3bf 8f4f 	dsb	sy
  409b26:	f04f 34ff 	mov.w	r4, #4294967295
  409b2a:	fa04 fc00 	lsl.w	ip, r4, r0
  409b2e:	fa06 f000 	lsl.w	r0, r6, r0
  409b32:	fa04 f40e 	lsl.w	r4, r4, lr
  409b36:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  409b3a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  409b3c:	463a      	mov	r2, r7
  409b3e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  409b40:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  409b44:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  409b48:	3a01      	subs	r2, #1
  409b4a:	4423      	add	r3, r4
  409b4c:	f1b2 3fff 	cmp.w	r2, #4294967295
  409b50:	d1f6      	bne.n	409b40 <oneDayToSD+0x244>
        } while(sets--);
  409b52:	3e01      	subs	r6, #1
  409b54:	4460      	add	r0, ip
  409b56:	f1b6 3fff 	cmp.w	r6, #4294967295
  409b5a:	d1ef      	bne.n	409b3c <oneDayToSD+0x240>
  409b5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409b60:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  409b64:	4b2e      	ldr	r3, [pc, #184]	; (409c20 <oneDayToSD+0x324>)
  409b66:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  409b6a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409b6e:	f007 0007 	and.w	r0, r7, #7
  409b72:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409b74:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  409b78:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  409b7c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  409b80:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  409b84:	695a      	ldr	r2, [r3, #20]
  409b86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  409b8a:	615a      	str	r2, [r3, #20]
  409b8c:	f04f 34ff 	mov.w	r4, #4294967295
  409b90:	fa04 fc00 	lsl.w	ip, r4, r0
  409b94:	fa06 f000 	lsl.w	r0, r6, r0
  409b98:	fa04 f40e 	lsl.w	r4, r4, lr
  409b9c:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  409ba0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  409ba2:	463a      	mov	r2, r7
  409ba4:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  409ba6:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  409baa:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  409bae:	3a01      	subs	r2, #1
  409bb0:	4423      	add	r3, r4
  409bb2:	f1b2 3fff 	cmp.w	r2, #4294967295
  409bb6:	d1f6      	bne.n	409ba6 <oneDayToSD+0x2aa>
        } while(sets--);
  409bb8:	3e01      	subs	r6, #1
  409bba:	4460      	add	r0, ip
  409bbc:	f1b6 3fff 	cmp.w	r6, #4294967295
  409bc0:	d1ef      	bne.n	409ba2 <oneDayToSD+0x2a6>
  409bc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409bc6:	f3bf 8f6f 	isb	sy
	sd_mmc_init();
  409bca:	4b16      	ldr	r3, [pc, #88]	; (409c24 <oneDayToSD+0x328>)
  409bcc:	4798      	blx	r3
	errorLoopCtr=50;
  409bce:	2432      	movs	r4, #50	; 0x32
		status = sd_mmc_test_unit_ready(0);//first electronic signals
  409bd0:	2600      	movs	r6, #0
		delay_ms(100);
  409bd2:	4f02      	ldr	r7, [pc, #8]	; (409bdc <oneDayToSD+0x2e0>)
  409bd4:	e039      	b.n	409c4a <oneDayToSD+0x34e>
  409bd6:	bf00      	nop
  409bd8:	00401cf1 	.word	0x00401cf1
  409bdc:	004d2b25 	.word	0x004d2b25
  409be0:	00401e1d 	.word	0x00401e1d
  409be4:	00401f45 	.word	0x00401f45
  409be8:	004085b5 	.word	0x004085b5
  409bec:	00407263 	.word	0x00407263
  409bf0:	400e1860 	.word	0x400e1860
  409bf4:	004028b1 	.word	0x004028b1
  409bf8:	004027ad 	.word	0x004027ad
  409bfc:	00410080 	.word	0x00410080
  409c00:	20400fa8 	.word	0x20400fa8
  409c04:	cccccccd 	.word	0xcccccccd
  409c08:	00407205 	.word	0x00407205
  409c0c:	00407815 	.word	0x00407815
  409c10:	0007b784 	.word	0x0007b784
  409c14:	00410638 	.word	0x00410638
  409c18:	0040c895 	.word	0x0040c895
  409c1c:	004096c1 	.word	0x004096c1
  409c20:	e000ed00 	.word	0xe000ed00
  409c24:	004004a1 	.word	0x004004a1
  409c28:	2040008d 	.word	0x2040008d
  409c2c:	400e1850 	.word	0x400e1850
  409c30:	a5000001 	.word	0xa5000001
  409c34:	4638      	mov	r0, r7
  409c36:	4bac      	ldr	r3, [pc, #688]	; (409ee8 <oneDayToSD+0x5ec>)
  409c38:	4798      	blx	r3
		errorLoopCtr--;
  409c3a:	3c01      	subs	r4, #1
  409c3c:	b2e4      	uxtb	r4, r4
	} while ((status != CTRL_GOOD)&&(errorLoopCtr>0));
  409c3e:	2d00      	cmp	r5, #0
  409c40:	f000 80be 	beq.w	409dc0 <oneDayToSD+0x4c4>
  409c44:	2c00      	cmp	r4, #0
  409c46:	f000 80bb 	beq.w	409dc0 <oneDayToSD+0x4c4>
		status = sd_mmc_test_unit_ready(0);//first electronic signals
  409c4a:	4630      	mov	r0, r6
  409c4c:	4ba7      	ldr	r3, [pc, #668]	; (409eec <oneDayToSD+0x5f0>)
  409c4e:	4798      	blx	r3
  409c50:	4605      	mov	r5, r0
		printf("MMC %d %d\r\n",status, errorLoopCtr);
  409c52:	9003      	str	r0, [sp, #12]
  409c54:	4622      	mov	r2, r4
  409c56:	4601      	mov	r1, r0
  409c58:	48a5      	ldr	r0, [pc, #660]	; (409ef0 <oneDayToSD+0x5f4>)
  409c5a:	4ba6      	ldr	r3, [pc, #664]	; (409ef4 <oneDayToSD+0x5f8>)
  409c5c:	4798      	blx	r3
		isCard = sd_mmc_check(0);
  409c5e:	4630      	mov	r0, r6
  409c60:	4ba5      	ldr	r3, [pc, #660]	; (409ef8 <oneDayToSD+0x5fc>)
  409c62:	4798      	blx	r3
		if  ((status == CTRL_FAIL)&&((errorLoopCtr%4)==0)) {
  409c64:	2d01      	cmp	r5, #1
  409c66:	d1e5      	bne.n	409c34 <oneDayToSD+0x338>
  409c68:	f014 0f03 	tst.w	r4, #3
  409c6c:	d1e2      	bne.n	409c34 <oneDayToSD+0x338>
			printf("MMC RESET %d %d\r\n",status, errorLoopCtr);
  409c6e:	4622      	mov	r2, r4
  409c70:	2101      	movs	r1, #1
  409c72:	48a2      	ldr	r0, [pc, #648]	; (409efc <oneDayToSD+0x600>)
  409c74:	4b9f      	ldr	r3, [pc, #636]	; (409ef4 <oneDayToSD+0x5f8>)
  409c76:	4798      	blx	r3
			resetSD();
  409c78:	4ba1      	ldr	r3, [pc, #644]	; (409f00 <oneDayToSD+0x604>)
  409c7a:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  409c7c:	4ba1      	ldr	r3, [pc, #644]	; (409f04 <oneDayToSD+0x608>)
  409c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  409c82:	f3c3 384e 	ubfx	r8, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409c86:	f003 0007 	and.w	r0, r3, #7
  409c8a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409c8c:	f3c3 09c9 	ubfx	r9, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  409c90:	fab9 fa89 	clz	sl, r9
    wshift  = __CLZ(ways) & 0x1f;
  409c94:	f00a 0a1f 	and.w	sl, sl, #31
  __ASM volatile ("dsb");
  409c98:	f3bf 8f4f 	dsb	sy
  409c9c:	f04f 3eff 	mov.w	lr, #4294967295
  409ca0:	fa0e fb00 	lsl.w	fp, lr, r0
  409ca4:	fa08 f000 	lsl.w	r0, r8, r0
  409ca8:	fa0e fe0a 	lsl.w	lr, lr, sl
  409cac:	fa09 fa0a 	lsl.w	sl, r9, sl
              SCB->DCISW = sw;
  409cb0:	f8df c250 	ldr.w	ip, [pc, #592]	; 409f04 <oneDayToSD+0x608>
         int32_t tmpways = ways;
  409cb4:	464a      	mov	r2, r9
  409cb6:	4653      	mov	r3, sl
              sw = ((tmpways << wshift) | (sets << sshift));
  409cb8:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  409cbc:	f8cc 1260 	str.w	r1, [ip, #608]	; 0x260
            } while(tmpways--);
  409cc0:	3a01      	subs	r2, #1
  409cc2:	4473      	add	r3, lr
  409cc4:	f1b2 3fff 	cmp.w	r2, #4294967295
  409cc8:	d1f6      	bne.n	409cb8 <oneDayToSD+0x3bc>
        } while(sets--);
  409cca:	f108 38ff 	add.w	r8, r8, #4294967295
  409cce:	4458      	add	r0, fp
  409cd0:	f1b8 3fff 	cmp.w	r8, #4294967295
  409cd4:	d1ee      	bne.n	409cb4 <oneDayToSD+0x3b8>
  409cd6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  409cda:	4b8a      	ldr	r3, [pc, #552]	; (409f04 <oneDayToSD+0x608>)
  409cdc:	695a      	ldr	r2, [r3, #20]
  409cde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  409ce2:	615a      	str	r2, [r3, #20]
  409ce4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409ce8:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  409cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  409cf0:	f3c3 384e 	ubfx	r8, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409cf4:	f003 0007 	and.w	r0, r3, #7
  409cf8:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409cfa:	f3c3 09c9 	ubfx	r9, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  409cfe:	fab9 fa89 	clz	sl, r9
    wshift  = __CLZ(ways) & 0x1f;
  409d02:	f00a 0a1f 	and.w	sl, sl, #31
  __ASM volatile ("dsb");
  409d06:	f3bf 8f4f 	dsb	sy
  409d0a:	f04f 3eff 	mov.w	lr, #4294967295
  409d0e:	fa0e fb00 	lsl.w	fp, lr, r0
  409d12:	fa08 f000 	lsl.w	r0, r8, r0
  409d16:	fa0e fe0a 	lsl.w	lr, lr, sl
  409d1a:	fa09 fa0a 	lsl.w	sl, r9, sl
              SCB->DCCISW = sw;
  409d1e:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 409f04 <oneDayToSD+0x608>
         int32_t tmpways = ways;
  409d22:	464a      	mov	r2, r9
  409d24:	4653      	mov	r3, sl
              sw = ((tmpways << wshift) | (sets << sshift));
  409d26:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  409d2a:	f8cc 1274 	str.w	r1, [ip, #628]	; 0x274
            } while(tmpways--);
  409d2e:	3a01      	subs	r2, #1
  409d30:	4473      	add	r3, lr
  409d32:	f1b2 3fff 	cmp.w	r2, #4294967295
  409d36:	d1f6      	bne.n	409d26 <oneDayToSD+0x42a>
        } while(sets--);
  409d38:	f108 38ff 	add.w	r8, r8, #4294967295
  409d3c:	4458      	add	r0, fp
  409d3e:	f1b8 3fff 	cmp.w	r8, #4294967295
  409d42:	d1ee      	bne.n	409d22 <oneDayToSD+0x426>
  409d44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409d48:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  409d4c:	4b6d      	ldr	r3, [pc, #436]	; (409f04 <oneDayToSD+0x608>)
  409d4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  409d52:	f3c2 384e 	ubfx	r8, r2, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409d56:	f002 0007 	and.w	r0, r2, #7
  409d5a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409d5c:	f3c2 09c9 	ubfx	r9, r2, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  409d60:	fab9 fa89 	clz	sl, r9
    wshift  = __CLZ(ways) & 0x1f;
  409d64:	f00a 0a1f 	and.w	sl, sl, #31
  __ASM volatile ("dsb");
  409d68:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  409d6c:	695a      	ldr	r2, [r3, #20]
  409d6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  409d72:	615a      	str	r2, [r3, #20]
  409d74:	f04f 3eff 	mov.w	lr, #4294967295
  409d78:	fa0e fb00 	lsl.w	fp, lr, r0
  409d7c:	fa08 f000 	lsl.w	r0, r8, r0
  409d80:	fa0e fe0a 	lsl.w	lr, lr, sl
  409d84:	fa09 fa0a 	lsl.w	sl, r9, sl
              SCB->DCCISW = sw;
  409d88:	469c      	mov	ip, r3
         int32_t tmpways = ways;
  409d8a:	464a      	mov	r2, r9
  409d8c:	4653      	mov	r3, sl
              sw = ((tmpways << wshift) | (sets << sshift));
  409d8e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  409d92:	f8cc 1274 	str.w	r1, [ip, #628]	; 0x274
            } while(tmpways--);
  409d96:	3a01      	subs	r2, #1
  409d98:	4473      	add	r3, lr
  409d9a:	f1b2 3fff 	cmp.w	r2, #4294967295
  409d9e:	d1f6      	bne.n	409d8e <oneDayToSD+0x492>
        } while(sets--);
  409da0:	f108 38ff 	add.w	r8, r8, #4294967295
  409da4:	4458      	add	r0, fp
  409da6:	f1b8 3fff 	cmp.w	r8, #4294967295
  409daa:	d1ee      	bne.n	409d8a <oneDayToSD+0x48e>
  409dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409db0:	f3bf 8f6f 	isb	sy
			sd_mmc_init();
  409db4:	4b54      	ldr	r3, [pc, #336]	; (409f08 <oneDayToSD+0x60c>)
  409db6:	4798      	blx	r3
			WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  409db8:	4b54      	ldr	r3, [pc, #336]	; (409f0c <oneDayToSD+0x610>)
  409dba:	4a55      	ldr	r2, [pc, #340]	; (409f10 <oneDayToSD+0x614>)
  409dbc:	6013      	str	r3, [r2, #0]
  409dbe:	e739      	b.n	409c34 <oneDayToSD+0x338>
	printf("MMC INIT %d\r\n",status);
  409dc0:	9903      	ldr	r1, [sp, #12]
  409dc2:	4854      	ldr	r0, [pc, #336]	; (409f14 <oneDayToSD+0x618>)
  409dc4:	4c4b      	ldr	r4, [pc, #300]	; (409ef4 <oneDayToSD+0x5f8>)
  409dc6:	47a0      	blx	r4
	printf("MOUNT DISK...\r\n");
  409dc8:	4853      	ldr	r0, [pc, #332]	; (409f18 <oneDayToSD+0x61c>)
  409dca:	47a0      	blx	r4
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  409dcc:	4a4f      	ldr	r2, [pc, #316]	; (409f0c <oneDayToSD+0x610>)
  409dce:	4b50      	ldr	r3, [pc, #320]	; (409f10 <oneDayToSD+0x614>)
  409dd0:	601a      	str	r2, [r3, #0]
	memset(&fs, 0, sizeof(FATFS));
  409dd2:	f44f 720c 	mov.w	r2, #560	; 0x230
  409dd6:	2100      	movs	r1, #0
  409dd8:	a8b8      	add	r0, sp, #736	; 0x2e0
  409dda:	4b50      	ldr	r3, [pc, #320]	; (409f1c <oneDayToSD+0x620>)
  409ddc:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  409dde:	a9b8      	add	r1, sp, #736	; 0x2e0
  409de0:	2000      	movs	r0, #0
  409de2:	4b4f      	ldr	r3, [pc, #316]	; (409f20 <oneDayToSD+0x624>)
  409de4:	4798      	blx	r3
  409de6:	4605      	mov	r5, r0
	printf("MOUNT DISK RESULT %d\r\n",res);
  409de8:	4601      	mov	r1, r0
  409dea:	484e      	ldr	r0, [pc, #312]	; (409f24 <oneDayToSD+0x628>)
  409dec:	47a0      	blx	r4
	if (FR_INVALID_DRIVE == res) {
  409dee:	2d0b      	cmp	r5, #11
  409df0:	f000 84d4 	beq.w	40a79c <oneDayToSD+0xea0>
	printf("TRYING F_STAT()\r\n");
  409df4:	484c      	ldr	r0, [pc, #304]	; (409f28 <oneDayToSD+0x62c>)
  409df6:	4625      	mov	r5, r4
  409df8:	47a0      	blx	r4
	res = f_stat(fdtFolderName,&fileInfo);
  409dfa:	a927      	add	r1, sp, #156	; 0x9c
  409dfc:	a824      	add	r0, sp, #144	; 0x90
  409dfe:	4b4b      	ldr	r3, [pc, #300]	; (409f2c <oneDayToSD+0x630>)
  409e00:	4798      	blx	r3
  409e02:	4604      	mov	r4, r0
	printf("F_STAT() RES = %d\r\n",res);
  409e04:	4601      	mov	r1, r0
  409e06:	484a      	ldr	r0, [pc, #296]	; (409f30 <oneDayToSD+0x634>)
  409e08:	47a8      	blx	r5
	switch (res){
  409e0a:	2c00      	cmp	r4, #0
  409e0c:	d05d      	beq.n	409eca <oneDayToSD+0x5ce>
  409e0e:	2c04      	cmp	r4, #4
  409e10:	d062      	beq.n	409ed8 <oneDayToSD+0x5dc>
		printf("some other directory error %X \r\n",res);
  409e12:	4621      	mov	r1, r4
  409e14:	4847      	ldr	r0, [pc, #284]	; (409f34 <oneDayToSD+0x638>)
  409e16:	4b37      	ldr	r3, [pc, #220]	; (409ef4 <oneDayToSD+0x5f8>)
  409e18:	4798      	blx	r3
	if(res==0)printf("f_mount GOOD WDS\r\n");  
  409e1a:	2c00      	cmp	r4, #0
  409e1c:	d058      	beq.n	409ed0 <oneDayToSD+0x5d4>
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  409e1e:	4a3b      	ldr	r2, [pc, #236]	; (409f0c <oneDayToSD+0x610>)
  409e20:	4b3b      	ldr	r3, [pc, #236]	; (409f10 <oneDayToSD+0x614>)
  409e22:	601a      	str	r2, [r3, #0]
	res = f_stat(csvFileName,&fileInfo);
  409e24:	a927      	add	r1, sp, #156	; 0x9c
  409e26:	a81c      	add	r0, sp, #112	; 0x70
  409e28:	4b40      	ldr	r3, [pc, #256]	; (409f2c <oneDayToSD+0x630>)
  409e2a:	4798      	blx	r3
  409e2c:	4604      	mov	r4, r0
	printf("CSV RES: %d. SIZE: %d. DATE: %d. TIME: %d.\r\n",res,fileInfo.fsize,fileInfo.fdate,fileInfo.ftime);
  409e2e:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
  409e32:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  409e34:	f8bd 10a2 	ldrh.w	r1, [sp, #162]	; 0xa2
  409e38:	9100      	str	r1, [sp, #0]
  409e3a:	4601      	mov	r1, r0
  409e3c:	483e      	ldr	r0, [pc, #248]	; (409f38 <oneDayToSD+0x63c>)
  409e3e:	4d2d      	ldr	r5, [pc, #180]	; (409ef4 <oneDayToSD+0x5f8>)
  409e40:	47a8      	blx	r5
	if(res==0)appendJump=fileInfo.fsize; else appendJump=0;
  409e42:	2c00      	cmp	r4, #0
  409e44:	f040 84c0 	bne.w	40a7c8 <oneDayToSD+0xecc>
  409e48:	9c27      	ldr	r4, [sp, #156]	; 0x9c
	res = f_open(&file_object, (char const *)csvFileName, FA_CREATE_ALWAYS | FA_WRITE);
  409e4a:	220a      	movs	r2, #10
  409e4c:	a91c      	add	r1, sp, #112	; 0x70
  409e4e:	a82f      	add	r0, sp, #188	; 0xbc
  409e50:	4b3a      	ldr	r3, [pc, #232]	; (409f3c <oneDayToSD+0x640>)
  409e52:	4798      	blx	r3
	if (res != FR_OK) { 
  409e54:	4601      	mov	r1, r0
  409e56:	2800      	cmp	r0, #0
  409e58:	f040 84be 	bne.w	40a7d8 <oneDayToSD+0xedc>
	f_lseek(&file_object,appendJump);//APPEND FILE. move to end of file
  409e5c:	4621      	mov	r1, r4
  409e5e:	a82f      	add	r0, sp, #188	; 0xbc
  409e60:	4b37      	ldr	r3, [pc, #220]	; (409f40 <oneDayToSD+0x644>)
  409e62:	4798      	blx	r3
	printf("CREATING OR OPENING CSV FILE...\r\n");
  409e64:	4837      	ldr	r0, [pc, #220]	; (409f44 <oneDayToSD+0x648>)
  409e66:	4b23      	ldr	r3, [pc, #140]	; (409ef4 <oneDayToSD+0x5f8>)
  409e68:	4798      	blx	r3
	if(appendJump==0){
  409e6a:	2c00      	cmp	r4, #0
  409e6c:	f000 84a6 	beq.w	40a7bc <oneDayToSD+0xec0>
	archiveBuffPtr=ARCHIVEADDR + ((bcdToHex(archiveDay)-1)*46080);//0x480020;
  409e70:	f89d 0010 	ldrb.w	r0, [sp, #16]
  409e74:	4b34      	ldr	r3, [pc, #208]	; (409f48 <oneDayToSD+0x64c>)
  409e76:	4798      	blx	r3
  409e78:	3801      	subs	r0, #1
  409e7a:	f44f 4434 	mov.w	r4, #46080	; 0xb400
  409e7e:	fb04 f400 	mul.w	r4, r4, r0
	printf("Archive from: %X\r\n",archiveBuffPtr);
  409e82:	f504 0190 	add.w	r1, r4, #4718592	; 0x480000
  409e86:	4831      	ldr	r0, [pc, #196]	; (409f4c <oneDayToSD+0x650>)
  409e88:	4b1a      	ldr	r3, [pc, #104]	; (409ef4 <oneDayToSD+0x5f8>)
  409e8a:	4798      	blx	r3
  409e8c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 409f6c <oneDayToSD+0x670>
  409e90:	44a1      	add	r9, r4
  409e92:	4b2f      	ldr	r3, [pc, #188]	; (409f50 <oneDayToSD+0x654>)
  409e94:	18e3      	adds	r3, r4, r3
  409e96:	9317      	str	r3, [sp, #92]	; 0x5c
	char magnetometer=0;
  409e98:	2300      	movs	r3, #0
  409e9a:	9316      	str	r3, [sp, #88]	; 0x58
	char GPSnumSats=0;
  409e9c:	9315      	str	r3, [sp, #84]	; 0x54
	unsigned short GPSttff=0;
  409e9e:	9307      	str	r3, [sp, #28]
	char GPSsecond=0;
  409ea0:	9314      	str	r3, [sp, #80]	; 0x50
	char GPSminute=0;
  409ea2:	9313      	str	r3, [sp, #76]	; 0x4c
	char GPShour=0;
  409ea4:	9312      	str	r3, [sp, #72]	; 0x48
	char GPSday=0;
  409ea6:	9311      	str	r3, [sp, #68]	; 0x44
	char GPSmonth=0;
  409ea8:	9310      	str	r3, [sp, #64]	; 0x40
	char GPSyear=0;
  409eaa:	930f      	str	r3, [sp, #60]	; 0x3c
	char batt=0;
  409eac:	9308      	str	r3, [sp, #32]
	unsigned int longFrac6=0;
  409eae:	930e      	str	r3, [sp, #56]	; 0x38
	unsigned int longFrac=0;
  409eb0:	9319      	str	r3, [sp, #100]	; 0x64
	char longWhole=0;
  409eb2:	930d      	str	r3, [sp, #52]	; 0x34
	char longSign=0;
  409eb4:	930c      	str	r3, [sp, #48]	; 0x30
	unsigned int latFrac6=0;
  409eb6:	930b      	str	r3, [sp, #44]	; 0x2c
	unsigned int latFrac=0;
  409eb8:	9318      	str	r3, [sp, #96]	; 0x60
	char latWhole=0;
  409eba:	930a      	str	r3, [sp, #40]	; 0x28
	char latSign=0;
  409ebc:	9309      	str	r3, [sp, #36]	; 0x24
	for(recordCtr=0;recordCtr<1440;recordCtr++){//should be 1440
  409ebe:	469a      	mov	sl, r3
		hex2ToAscii(hexToBCD(recFormatVers),asciiChars);
  409ec0:	4f24      	ldr	r7, [pc, #144]	; (409f54 <oneDayToSD+0x658>)
  409ec2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 409f70 <oneDayToSD+0x674>
		f_putc('2',&file_object);//
  409ec6:	4c24      	ldr	r4, [pc, #144]	; (409f58 <oneDayToSD+0x65c>)
  409ec8:	e205      	b.n	40a2d6 <oneDayToSD+0x9da>
		printf("FOUND WDS FOLDER\r\n");
  409eca:	4824      	ldr	r0, [pc, #144]	; (409f5c <oneDayToSD+0x660>)
  409ecc:	4b09      	ldr	r3, [pc, #36]	; (409ef4 <oneDayToSD+0x5f8>)
  409ece:	4798      	blx	r3
	if(res==0)printf("f_mount GOOD WDS\r\n");  
  409ed0:	4823      	ldr	r0, [pc, #140]	; (409f60 <oneDayToSD+0x664>)
  409ed2:	4b08      	ldr	r3, [pc, #32]	; (409ef4 <oneDayToSD+0x5f8>)
  409ed4:	4798      	blx	r3
  409ed6:	e7a2      	b.n	409e1e <oneDayToSD+0x522>
		printf("CREATING WDS FOLDER\r\n");
  409ed8:	4822      	ldr	r0, [pc, #136]	; (409f64 <oneDayToSD+0x668>)
  409eda:	4b06      	ldr	r3, [pc, #24]	; (409ef4 <oneDayToSD+0x5f8>)
  409edc:	4798      	blx	r3
		f_mkdir((char const *)fdtFolderName);
  409ede:	a824      	add	r0, sp, #144	; 0x90
  409ee0:	4b21      	ldr	r3, [pc, #132]	; (409f68 <oneDayToSD+0x66c>)
  409ee2:	4798      	blx	r3
  409ee4:	e79b      	b.n	409e1e <oneDayToSD+0x522>
  409ee6:	bf00      	nop
  409ee8:	2040008d 	.word	0x2040008d
  409eec:	00401009 	.word	0x00401009
  409ef0:	0041065c 	.word	0x0041065c
  409ef4:	0040c895 	.word	0x0040c895
  409ef8:	004004c1 	.word	0x004004c1
  409efc:	00410668 	.word	0x00410668
  409f00:	004096c1 	.word	0x004096c1
  409f04:	e000ed00 	.word	0xe000ed00
  409f08:	004004a1 	.word	0x004004a1
  409f0c:	a5000001 	.word	0xa5000001
  409f10:	400e1850 	.word	0x400e1850
  409f14:	0041067c 	.word	0x0041067c
  409f18:	0041068c 	.word	0x0041068c
  409f1c:	0040c9f1 	.word	0x0040c9f1
  409f20:	00406749 	.word	0x00406749
  409f24:	0041069c 	.word	0x0041069c
  409f28:	004106b4 	.word	0x004106b4
  409f2c:	00406dad 	.word	0x00406dad
  409f30:	004106c8 	.word	0x004106c8
  409f34:	00410708 	.word	0x00410708
  409f38:	00410740 	.word	0x00410740
  409f3c:	0040676d 	.word	0x0040676d
  409f40:	00406be5 	.word	0x00406be5
  409f44:	00410788 	.word	0x00410788
  409f48:	00407263 	.word	0x00407263
  409f4c:	004107ac 	.word	0x004107ac
  409f50:	0048b41d 	.word	0x0048b41d
  409f54:	00407275 	.word	0x00407275
  409f58:	00406fed 	.word	0x00406fed
  409f5c:	004106dc 	.word	0x004106dc
  409f60:	0041072c 	.word	0x0041072c
  409f64:	004106f0 	.word	0x004106f0
  409f68:	00406e01 	.word	0x00406e01
  409f6c:	0048001d 	.word	0x0048001d
  409f70:	00407dd1 	.word	0x00407dd1
		if(rtcData[5]<18)beforeNov2=1;//(18 is BCD 12)
  409f74:	2b11      	cmp	r3, #17
  409f76:	bf8c      	ite	hi
  409f78:	2200      	movhi	r2, #0
  409f7a:	2201      	movls	r2, #1
		if(rtcData[5]>3)afterMar7=1;
  409f7c:	2b03      	cmp	r3, #3
  409f7e:	bf94      	ite	ls
  409f80:	2100      	movls	r1, #0
  409f82:	2101      	movhi	r1, #1
		if((rtcData[5]==3)&&(thisDay<8))afterMar7=0;
  409f84:	2d07      	cmp	r5, #7
  409f86:	d802      	bhi.n	409f8e <oneDayToSD+0x692>
  409f88:	2b03      	cmp	r3, #3
  409f8a:	f000 824c 	beq.w	40a426 <oneDayToSD+0xb2a>
		if((beforeNov2)&&(afterMar7))hexLocHour++;//(18 is BCD 12)
  409f8e:	2900      	cmp	r1, #0
  409f90:	f000 8249 	beq.w	40a426 <oneDayToSD+0xb2a>
  409f94:	2a00      	cmp	r2, #0
  409f96:	f000 8246 	beq.w	40a426 <oneDayToSD+0xb2a>
  409f9a:	f106 0011 	add.w	r0, r6, #17
  409f9e:	b2c0      	uxtb	r0, r0
  409fa0:	e241      	b.n	40a426 <oneDayToSD+0xb2a>
			f_putc('-',&file_object);
  409fa2:	a92f      	add	r1, sp, #188	; 0xbc
  409fa4:	202d      	movs	r0, #45	; 0x2d
  409fa6:	47a0      	blx	r4
			temperatureHigh=0x0700-temperatureHigh;
  409fa8:	9b03      	ldr	r3, [sp, #12]
  409faa:	f5c3 63e0 	rsb	r3, r3, #1792	; 0x700
  409fae:	9303      	str	r3, [sp, #12]
			temperatureLow=0x100 - temperatureLow;
  409fb0:	f5c5 7580 	rsb	r5, r5, #256	; 0x100
  409fb4:	e2ef      	b.n	40a596 <oneDayToSD+0xc9a>
			barom-=10000;
  409fb6:	f5a5 551c 	sub.w	r5, r5, #9984	; 0x2700
  409fba:	3d10      	subs	r5, #16
			f_putc('1',&file_object);//
  409fbc:	a92f      	add	r1, sp, #188	; 0xbc
  409fbe:	2031      	movs	r0, #49	; 0x31
  409fc0:	47a0      	blx	r4
  409fc2:	e332      	b.n	40a62a <oneDayToSD+0xd2e>
			if((*archiveBuffPtr)==255){f_putc('-',&file_object);}
  409fc4:	a92f      	add	r1, sp, #188	; 0xbc
  409fc6:	202d      	movs	r0, #45	; 0x2d
  409fc8:	47a0      	blx	r4
			f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  409fca:	a92f      	add	r1, sp, #188	; 0xbc
  409fcc:	202c      	movs	r0, #44	; 0x2c
  409fce:	47a0      	blx	r4
		for(paramCtr=0;paramCtr<12;paramCtr++){//should be 1440
  409fd0:	454d      	cmp	r5, r9
  409fd2:	d013      	beq.n	409ffc <oneDayToSD+0x700>
			if((*archiveBuffPtr)==255){f_putc('-',&file_object);}
  409fd4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
  409fd8:	28ff      	cmp	r0, #255	; 0xff
  409fda:	d0f3      	beq.n	409fc4 <oneDayToSD+0x6c8>
				hex2ToAscii(hexToBCD(*archiveBuffPtr),asciiChars);
  409fdc:	47b8      	blx	r7
  409fde:	a91a      	add	r1, sp, #104	; 0x68
  409fe0:	47d8      	blx	fp
				f_putc(asciiChars[2],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  409fe2:	a92f      	add	r1, sp, #188	; 0xbc
  409fe4:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  409fe8:	47a0      	blx	r4
				f_putc(asciiChars[1],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  409fea:	a92f      	add	r1, sp, #188	; 0xbc
  409fec:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  409ff0:	47a0      	blx	r4
				f_putc(asciiChars[0],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  409ff2:	a92f      	add	r1, sp, #188	; 0xbc
  409ff4:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  409ff8:	47a0      	blx	r4
  409ffa:	e7e6      	b.n	409fca <oneDayToSD+0x6ce>
			hex2ToAscii(hexToBCD(*archiveBuffPtr),asciiChars);
  409ffc:	f899 0001 	ldrb.w	r0, [r9, #1]
  40a000:	47b8      	blx	r7
  40a002:	a91a      	add	r1, sp, #104	; 0x68
  40a004:	47d8      	blx	fp
			f_putc(asciiChars[2],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a006:	a92f      	add	r1, sp, #188	; 0xbc
  40a008:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a00c:	47a0      	blx	r4
			f_putc(asciiChars[1],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a00e:	a92f      	add	r1, sp, #188	; 0xbc
  40a010:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a014:	47a0      	blx	r4
			f_putc(asciiChars[0],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a016:	a92f      	add	r1, sp, #188	; 0xbc
  40a018:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a01c:	47a0      	blx	r4
		f_putc(',',&file_object);//
  40a01e:	a92f      	add	r1, sp, #188	; 0xbc
  40a020:	202c      	movs	r0, #44	; 0x2c
  40a022:	47a0      	blx	r4
		switch (minCycle){
  40a024:	2e13      	cmp	r6, #19
  40a026:	d821      	bhi.n	40a06c <oneDayToSD+0x770>
  40a028:	e8df f016 	tbh	[pc, r6, lsl #1]
  40a02c:	03350014 	.word	0x03350014
  40a030:	0345033d 	.word	0x0345033d
  40a034:	03540350 	.word	0x03540350
  40a038:	03600358 	.word	0x03600358
  40a03c:	03730368 	.word	0x03730368
  40a040:	037b0377 	.word	0x037b0377
  40a044:	0383037f 	.word	0x0383037f
  40a048:	038b0387 	.word	0x038b0387
  40a04c:	0394038f 	.word	0x0394038f
  40a050:	03a00399 	.word	0x03a00399
				if(((*archiveBuffPtr)|0x80)==0x80)latSign='-';
  40a054:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a058:	f043 0280 	orr.w	r2, r3, #128	; 0x80
				else latSign='+';
  40a05c:	2a80      	cmp	r2, #128	; 0x80
  40a05e:	bf0c      	ite	eq
  40a060:	222d      	moveq	r2, #45	; 0x2d
  40a062:	222b      	movne	r2, #43	; 0x2b
  40a064:	9209      	str	r2, [sp, #36]	; 0x24
				latWhole=(*archiveBuffPtr)&0x7F;
  40a066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40a06a:	930a      	str	r3, [sp, #40]	; 0x28
		f_putc(longSign,&file_object);//
  40a06c:	a92f      	add	r1, sp, #188	; 0xbc
  40a06e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a070:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(longWhole),asciiChars);
  40a072:	980d      	ldr	r0, [sp, #52]	; 0x34
  40a074:	47b8      	blx	r7
  40a076:	a91a      	add	r1, sp, #104	; 0x68
  40a078:	47d8      	blx	fp
		f_putc(asciiChars[2],&file_object);//
  40a07a:	a92f      	add	r1, sp, #188	; 0xbc
  40a07c:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a080:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  40a082:	a92f      	add	r1, sp, #188	; 0xbc
  40a084:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a088:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a08a:	a92f      	add	r1, sp, #188	; 0xbc
  40a08c:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a090:	47a0      	blx	r4
		f_putc('.',&file_object);//
  40a092:	a92f      	add	r1, sp, #188	; 0xbc
  40a094:	202e      	movs	r0, #46	; 0x2e
  40a096:	47a0      	blx	r4
		hex2ToAscii(hexToBCD((unsigned int)(longFrac6)),asciiChars);
  40a098:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a09a:	47b8      	blx	r7
  40a09c:	a91a      	add	r1, sp, #104	; 0x68
  40a09e:	47d8      	blx	fp
		f_putc(asciiChars[4],&file_object);
  40a0a0:	a92f      	add	r1, sp, #188	; 0xbc
  40a0a2:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  40a0a6:	47a0      	blx	r4
		f_putc(asciiChars[3],&file_object);
  40a0a8:	a92f      	add	r1, sp, #188	; 0xbc
  40a0aa:	f89d 006b 	ldrb.w	r0, [sp, #107]	; 0x6b
  40a0ae:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);
  40a0b0:	a92f      	add	r1, sp, #188	; 0xbc
  40a0b2:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a0b6:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);
  40a0b8:	a92f      	add	r1, sp, #188	; 0xbc
  40a0ba:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a0be:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40a0c0:	a92f      	add	r1, sp, #188	; 0xbc
  40a0c2:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a0c6:	47a0      	blx	r4
		f_putc(',',&file_object);
  40a0c8:	a92f      	add	r1, sp, #188	; 0xbc
  40a0ca:	202c      	movs	r0, #44	; 0x2c
  40a0cc:	47a0      	blx	r4
		f_putc(latSign,&file_object);//
  40a0ce:	a92f      	add	r1, sp, #188	; 0xbc
  40a0d0:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a0d2:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(latWhole),asciiChars);//
  40a0d4:	980a      	ldr	r0, [sp, #40]	; 0x28
  40a0d6:	47b8      	blx	r7
  40a0d8:	a91a      	add	r1, sp, #104	; 0x68
  40a0da:	47d8      	blx	fp
		f_putc(asciiChars[2],&file_object);//
  40a0dc:	a92f      	add	r1, sp, #188	; 0xbc
  40a0de:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a0e2:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  40a0e4:	a92f      	add	r1, sp, #188	; 0xbc
  40a0e6:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a0ea:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a0ec:	a92f      	add	r1, sp, #188	; 0xbc
  40a0ee:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a0f2:	47a0      	blx	r4
		f_putc('.',&file_object);//.
  40a0f4:	a92f      	add	r1, sp, #188	; 0xbc
  40a0f6:	202e      	movs	r0, #46	; 0x2e
  40a0f8:	47a0      	blx	r4
		hex2ToAscii(hexToBCD((unsigned int)(latFrac6)),asciiChars);
  40a0fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40a0fc:	47b8      	blx	r7
  40a0fe:	a91a      	add	r1, sp, #104	; 0x68
  40a100:	47d8      	blx	fp
		f_putc(asciiChars[4],&file_object);
  40a102:	a92f      	add	r1, sp, #188	; 0xbc
  40a104:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
  40a108:	47a0      	blx	r4
		f_putc(asciiChars[3],&file_object);
  40a10a:	a92f      	add	r1, sp, #188	; 0xbc
  40a10c:	f89d 006b 	ldrb.w	r0, [sp, #107]	; 0x6b
  40a110:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);
  40a112:	a92f      	add	r1, sp, #188	; 0xbc
  40a114:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a118:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);
  40a11a:	a92f      	add	r1, sp, #188	; 0xbc
  40a11c:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a120:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40a122:	a92f      	add	r1, sp, #188	; 0xbc
  40a124:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a128:	47a0      	blx	r4
		f_putc(',',&file_object);
  40a12a:	a92f      	add	r1, sp, #188	; 0xbc
  40a12c:	202c      	movs	r0, #44	; 0x2c
  40a12e:	47a0      	blx	r4
		f_putc('2',&file_object);//
  40a130:	a92f      	add	r1, sp, #188	; 0xbc
  40a132:	2032      	movs	r0, #50	; 0x32
  40a134:	47a0      	blx	r4
		f_putc('0',&file_object);//
  40a136:	a92f      	add	r1, sp, #188	; 0xbc
  40a138:	2030      	movs	r0, #48	; 0x30
  40a13a:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSyear),asciiChars);		
  40a13c:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40a13e:	47b8      	blx	r7
  40a140:	a91a      	add	r1, sp, #104	; 0x68
  40a142:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//
  40a144:	a92f      	add	r1, sp, #188	; 0xbc
  40a146:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a14a:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a14c:	a92f      	add	r1, sp, #188	; 0xbc
  40a14e:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a152:	47a0      	blx	r4
		f_putc('-',&file_object);//
  40a154:	a92f      	add	r1, sp, #188	; 0xbc
  40a156:	202d      	movs	r0, #45	; 0x2d
  40a158:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSmonth),asciiChars);
  40a15a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40a15c:	47b8      	blx	r7
  40a15e:	a91a      	add	r1, sp, #104	; 0x68
  40a160:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//
  40a162:	a92f      	add	r1, sp, #188	; 0xbc
  40a164:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a168:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a16a:	a92f      	add	r1, sp, #188	; 0xbc
  40a16c:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a170:	47a0      	blx	r4
		f_putc('-',&file_object);//
  40a172:	a92f      	add	r1, sp, #188	; 0xbc
  40a174:	202d      	movs	r0, #45	; 0x2d
  40a176:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSday),asciiChars);
  40a178:	9811      	ldr	r0, [sp, #68]	; 0x44
  40a17a:	47b8      	blx	r7
  40a17c:	a91a      	add	r1, sp, #104	; 0x68
  40a17e:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//
  40a180:	a92f      	add	r1, sp, #188	; 0xbc
  40a182:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a186:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a188:	a92f      	add	r1, sp, #188	; 0xbc
  40a18a:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a18e:	47a0      	blx	r4
		f_putc(',',&file_object);//
  40a190:	a92f      	add	r1, sp, #188	; 0xbc
  40a192:	202c      	movs	r0, #44	; 0x2c
  40a194:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPShour),asciiChars);
  40a196:	9812      	ldr	r0, [sp, #72]	; 0x48
  40a198:	47b8      	blx	r7
  40a19a:	a91a      	add	r1, sp, #104	; 0x68
  40a19c:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//
  40a19e:	a92f      	add	r1, sp, #188	; 0xbc
  40a1a0:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a1a4:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a1a6:	a92f      	add	r1, sp, #188	; 0xbc
  40a1a8:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a1ac:	47a0      	blx	r4
		f_putc(':',&file_object);//
  40a1ae:	a92f      	add	r1, sp, #188	; 0xbc
  40a1b0:	203a      	movs	r0, #58	; 0x3a
  40a1b2:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSminute),asciiChars);
  40a1b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40a1b6:	47b8      	blx	r7
  40a1b8:	a91a      	add	r1, sp, #104	; 0x68
  40a1ba:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//
  40a1bc:	a92f      	add	r1, sp, #188	; 0xbc
  40a1be:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a1c2:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a1c4:	a92f      	add	r1, sp, #188	; 0xbc
  40a1c6:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a1ca:	47a0      	blx	r4
		f_putc(':',&file_object);//
  40a1cc:	a92f      	add	r1, sp, #188	; 0xbc
  40a1ce:	203a      	movs	r0, #58	; 0x3a
  40a1d0:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSsecond),asciiChars);
  40a1d2:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a1d4:	47b8      	blx	r7
  40a1d6:	a91a      	add	r1, sp, #104	; 0x68
  40a1d8:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//
  40a1da:	a92f      	add	r1, sp, #188	; 0xbc
  40a1dc:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a1e0:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a1e2:	a92f      	add	r1, sp, #188	; 0xbc
  40a1e4:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a1e8:	47a0      	blx	r4
		f_putc(',',&file_object);//
  40a1ea:	a92f      	add	r1, sp, #188	; 0xbc
  40a1ec:	202c      	movs	r0, #44	; 0x2c
  40a1ee:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(batt),asciiChars);//placeholder
  40a1f0:	9808      	ldr	r0, [sp, #32]
  40a1f2:	47b8      	blx	r7
  40a1f4:	a91a      	add	r1, sp, #104	; 0x68
  40a1f6:	47d8      	blx	fp
		f_putc(asciiChars[2],&file_object);//
  40a1f8:	a92f      	add	r1, sp, #188	; 0xbc
  40a1fa:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a1fe:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  40a200:	a92f      	add	r1, sp, #188	; 0xbc
  40a202:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a206:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a208:	a92f      	add	r1, sp, #188	; 0xbc
  40a20a:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a20e:	47a0      	blx	r4
		f_putc(',',&file_object);//
  40a210:	a92f      	add	r1, sp, #188	; 0xbc
  40a212:	202c      	movs	r0, #44	; 0x2c
  40a214:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSnumSats),asciiChars);//placeholder
  40a216:	9815      	ldr	r0, [sp, #84]	; 0x54
  40a218:	47b8      	blx	r7
  40a21a:	a91a      	add	r1, sp, #104	; 0x68
  40a21c:	47d8      	blx	fp
		f_putc(asciiChars[2],&file_object);//
  40a21e:	a92f      	add	r1, sp, #188	; 0xbc
  40a220:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a224:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  40a226:	a92f      	add	r1, sp, #188	; 0xbc
  40a228:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a22c:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a22e:	a92f      	add	r1, sp, #188	; 0xbc
  40a230:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a234:	47a0      	blx	r4
		f_putc(',',&file_object);//
  40a236:	a92f      	add	r1, sp, #188	; 0xbc
  40a238:	202c      	movs	r0, #44	; 0x2c
  40a23a:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(GPSttff),asciiChars);//placeholder
  40a23c:	9807      	ldr	r0, [sp, #28]
  40a23e:	47b8      	blx	r7
  40a240:	a91a      	add	r1, sp, #104	; 0x68
  40a242:	47d8      	blx	fp
		f_putc(asciiChars[3],&file_object);//
  40a244:	a92f      	add	r1, sp, #188	; 0xbc
  40a246:	f89d 006b 	ldrb.w	r0, [sp, #107]	; 0x6b
  40a24a:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);//
  40a24c:	a92f      	add	r1, sp, #188	; 0xbc
  40a24e:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a252:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  40a254:	a92f      	add	r1, sp, #188	; 0xbc
  40a256:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a25a:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a25c:	a92f      	add	r1, sp, #188	; 0xbc
  40a25e:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a262:	47a0      	blx	r4
		f_putc(',',&file_object);//
  40a264:	a92f      	add	r1, sp, #188	; 0xbc
  40a266:	202c      	movs	r0, #44	; 0x2c
  40a268:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(magnetometer),asciiChars);//placeholder
  40a26a:	9816      	ldr	r0, [sp, #88]	; 0x58
  40a26c:	47b8      	blx	r7
  40a26e:	a91a      	add	r1, sp, #104	; 0x68
  40a270:	47d8      	blx	fp
		f_putc(asciiChars[2],&file_object);//
  40a272:	a92f      	add	r1, sp, #188	; 0xbc
  40a274:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a278:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  40a27a:	a92f      	add	r1, sp, #188	; 0xbc
  40a27c:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a280:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a282:	a92f      	add	r1, sp, #188	; 0xbc
  40a284:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a288:	47a0      	blx	r4
		f_putc(0x0D,&file_object);
  40a28a:	a92f      	add	r1, sp, #188	; 0xbc
  40a28c:	200d      	movs	r0, #13
  40a28e:	47a0      	blx	r4
		if((recordCtr%50)==0)printf(".");
  40a290:	4aaf      	ldr	r2, [pc, #700]	; (40a550 <oneDayToSD+0xc54>)
  40a292:	fb82 320a 	smull	r3, r2, r2, sl
  40a296:	ea4f 73ea 	mov.w	r3, sl, asr #31
  40a29a:	ebc3 1322 	rsb	r3, r3, r2, asr #4
  40a29e:	2232      	movs	r2, #50	; 0x32
  40a2a0:	fb02 a313 	mls	r3, r2, r3, sl
  40a2a4:	2b00      	cmp	r3, #0
  40a2a6:	f000 8265 	beq.w	40a774 <oneDayToSD+0xe78>
		if((recordCtr%200)==0)WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40a2aa:	4aa9      	ldr	r2, [pc, #676]	; (40a550 <oneDayToSD+0xc54>)
  40a2ac:	fb82 320a 	smull	r3, r2, r2, sl
  40a2b0:	ea4f 73ea 	mov.w	r3, sl, asr #31
  40a2b4:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  40a2b8:	22c8      	movs	r2, #200	; 0xc8
  40a2ba:	fb02 a313 	mls	r3, r2, r3, sl
  40a2be:	b913      	cbnz	r3, 40a2c6 <oneDayToSD+0x9ca>
  40a2c0:	4aa4      	ldr	r2, [pc, #656]	; (40a554 <oneDayToSD+0xc58>)
  40a2c2:	4ba5      	ldr	r3, [pc, #660]	; (40a558 <oneDayToSD+0xc5c>)
  40a2c4:	601a      	str	r2, [r3, #0]
	for(recordCtr=0;recordCtr<1440;recordCtr++){//should be 1440
  40a2c6:	f10a 0a01 	add.w	sl, sl, #1
  40a2ca:	f109 0920 	add.w	r9, r9, #32
  40a2ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40a2d0:	454b      	cmp	r3, r9
  40a2d2:	f000 8253 	beq.w	40a77c <oneDayToSD+0xe80>
		temperatureHigh=((int)((*archiveBuffPtr)&0x00E0))<<3;
  40a2d6:	f819 0c1d 	ldrb.w	r0, [r9, #-29]
  40a2da:	00c3      	lsls	r3, r0, #3
  40a2dc:	9305      	str	r3, [sp, #20]
  40a2de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40a2e2:	9303      	str	r3, [sp, #12]
		humidityHB=((int)((*archiveBuffPtr)&0x0018))<<5;
  40a2e4:	0143      	lsls	r3, r0, #5
  40a2e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40a2ea:	9306      	str	r3, [sp, #24]
		lightHB=((int)((*archiveBuffPtr)&0x0006))<<7;
  40a2ec:	01c3      	lsls	r3, r0, #7
  40a2ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40a2f2:	9304      	str	r3, [sp, #16]
		hex2ToAscii(hexToBCD(recFormatVers),asciiChars);
  40a2f4:	f000 0001 	and.w	r0, r0, #1
  40a2f8:	47b8      	blx	r7
  40a2fa:	a91a      	add	r1, sp, #104	; 0x68
  40a2fc:	47d8      	blx	fp
		temp=asciiChars[0];
  40a2fe:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
		asciiChars[0]=asciiChars[2];
  40a302:	f89d 206a 	ldrb.w	r2, [sp, #106]	; 0x6a
  40a306:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
		asciiChars[2]=temp;
  40a30a:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
		asciiChars[3]=',';
  40a30e:	f04f 032c 	mov.w	r3, #44	; 0x2c
  40a312:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
		asciiChars[4]=0;
  40a316:	2300      	movs	r3, #0
  40a318:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		f_puts((const char*)asciiChars,&file_object);
  40a31c:	a92f      	add	r1, sp, #188	; 0xbc
  40a31e:	a81a      	add	r0, sp, #104	; 0x68
  40a320:	4b8e      	ldr	r3, [pc, #568]	; (40a55c <oneDayToSD+0xc60>)
  40a322:	4798      	blx	r3
		f_putc('2',&file_object);//
  40a324:	a92f      	add	r1, sp, #188	; 0xbc
  40a326:	2032      	movs	r0, #50	; 0x32
  40a328:	47a0      	blx	r4
		f_putc('0',&file_object);//
  40a32a:	a92f      	add	r1, sp, #188	; 0xbc
  40a32c:	2030      	movs	r0, #48	; 0x30
  40a32e:	47a0      	blx	r4
		f_putc((char)(hex1ToAscii((bcdToHex(rtcData[6]))/10)),&file_object);//Year HB from RTC
  40a330:	f89d 009a 	ldrb.w	r0, [sp, #154]	; 0x9a
  40a334:	4e8a      	ldr	r6, [pc, #552]	; (40a560 <oneDayToSD+0xc64>)
  40a336:	47b0      	blx	r6
  40a338:	4d8a      	ldr	r5, [pc, #552]	; (40a564 <oneDayToSD+0xc68>)
  40a33a:	fba5 3000 	umull	r3, r0, r5, r0
  40a33e:	f3c0 00c7 	ubfx	r0, r0, #3, #8
  40a342:	f8df 8224 	ldr.w	r8, [pc, #548]	; 40a568 <oneDayToSD+0xc6c>
  40a346:	47c0      	blx	r8
  40a348:	a92f      	add	r1, sp, #188	; 0xbc
  40a34a:	b2c0      	uxtb	r0, r0
  40a34c:	47a0      	blx	r4
		f_putc((char)(hex1ToAscii((bcdToHex(rtcData[6]))%10)),&file_object);//Year LB from RTC
  40a34e:	f89d 009a 	ldrb.w	r0, [sp, #154]	; 0x9a
  40a352:	47b0      	blx	r6
  40a354:	fba5 2300 	umull	r2, r3, r5, r0
  40a358:	08db      	lsrs	r3, r3, #3
  40a35a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40a35e:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
  40a362:	b2c0      	uxtb	r0, r0
  40a364:	47c0      	blx	r8
  40a366:	a92f      	add	r1, sp, #188	; 0xbc
  40a368:	b2c0      	uxtb	r0, r0
  40a36a:	47a0      	blx	r4
		f_putc('-',&file_object);//
  40a36c:	a92f      	add	r1, sp, #188	; 0xbc
  40a36e:	202d      	movs	r0, #45	; 0x2d
  40a370:	47a0      	blx	r4
		f_putc((char)(hex1ToAscii((bcdToHex(rtcData[5]))/10)),&file_object);//Month HB from RTC
  40a372:	f89d 0099 	ldrb.w	r0, [sp, #153]	; 0x99
  40a376:	47b0      	blx	r6
  40a378:	fba5 3000 	umull	r3, r0, r5, r0
  40a37c:	f3c0 00c7 	ubfx	r0, r0, #3, #8
  40a380:	47c0      	blx	r8
  40a382:	a92f      	add	r1, sp, #188	; 0xbc
  40a384:	b2c0      	uxtb	r0, r0
  40a386:	47a0      	blx	r4
		f_putc((char)(hex1ToAscii((bcdToHex(rtcData[5]))%10)),&file_object);//Month LB from RTC
  40a388:	f89d 0099 	ldrb.w	r0, [sp, #153]	; 0x99
  40a38c:	47b0      	blx	r6
  40a38e:	fba5 3500 	umull	r3, r5, r5, r0
  40a392:	08ed      	lsrs	r5, r5, #3
  40a394:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40a398:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
  40a39c:	b2c0      	uxtb	r0, r0
  40a39e:	47c0      	blx	r8
  40a3a0:	a92f      	add	r1, sp, #188	; 0xbc
  40a3a2:	b2c0      	uxtb	r0, r0
  40a3a4:	47a0      	blx	r4
		f_putc('-',&file_object);//
  40a3a6:	a92f      	add	r1, sp, #188	; 0xbc
  40a3a8:	202d      	movs	r0, #45	; 0x2d
  40a3aa:	47a0      	blx	r4
		thisDay=*archiveBuffPtr++;
  40a3ac:	f819 5c1c 	ldrb.w	r5, [r9, #-28]
		hex2ToAscii(thisDay,asciiChars);//Date is already in BCD
  40a3b0:	a91a      	add	r1, sp, #104	; 0x68
  40a3b2:	4628      	mov	r0, r5
  40a3b4:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//Date from flash archive
  40a3b6:	a92f      	add	r1, sp, #188	; 0xbc
  40a3b8:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a3bc:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);////Date from flash archive
  40a3be:	a92f      	add	r1, sp, #188	; 0xbc
  40a3c0:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a3c4:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  40a3c6:	a92f      	add	r1, sp, #188	; 0xbc
  40a3c8:	202c      	movs	r0, #44	; 0x2c
  40a3ca:	47a0      	blx	r4
		hexLocHour=*archiveBuffPtr++;
  40a3cc:	f819 8c1b 	ldrb.w	r8, [r9, #-27]
		hex2ToAscii(hexLocHour,asciiChars);//hexLocHour is still BCD at this line
  40a3d0:	a91a      	add	r1, sp, #104	; 0x68
  40a3d2:	4640      	mov	r0, r8
  40a3d4:	47d8      	blx	fp
		hexLocHour=bcdToHex(hexLocHour);
  40a3d6:	4640      	mov	r0, r8
  40a3d8:	47b0      	blx	r6
  40a3da:	4606      	mov	r6, r0
		f_putc(asciiChars[1],&file_object);//Hour HB from flash archive
  40a3dc:	a92f      	add	r1, sp, #188	; 0xbc
  40a3de:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a3e2:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//Hour LB from flash archive
  40a3e4:	a92f      	add	r1, sp, #188	; 0xbc
  40a3e6:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a3ea:	47a0      	blx	r4
		f_putc(':',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  40a3ec:	a92f      	add	r1, sp, #188	; 0xbc
  40a3ee:	203a      	movs	r0, #58	; 0x3a
  40a3f0:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr,asciiChars);//date and time is already in BCD
  40a3f2:	a91a      	add	r1, sp, #104	; 0x68
  40a3f4:	f819 0c1a 	ldrb.w	r0, [r9, #-26]
  40a3f8:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//Minute HB from flash archive
  40a3fa:	a92f      	add	r1, sp, #188	; 0xbc
  40a3fc:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a400:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//Minute LB from flash archive
  40a402:	a92f      	add	r1, sp, #188	; 0xbc
  40a404:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a408:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  40a40a:	a92f      	add	r1, sp, #188	; 0xbc
  40a40c:	202c      	movs	r0, #44	; 0x2c
  40a40e:	47a0      	blx	r4
		hexLocHour=hexLocHour+24+TIMEZONE_OFFSET;
  40a410:	f106 0010 	add.w	r0, r6, #16
  40a414:	b2c0      	uxtb	r0, r0
		if(rtcData[5]<18)beforeNov2=1;//(18 is BCD 12)
  40a416:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
		if((rtcData[5]==11)&&(thisDay>1))beforeNov2=0;
  40a41a:	2d01      	cmp	r5, #1
  40a41c:	f67f adaa 	bls.w	409f74 <oneDayToSD+0x678>
  40a420:	2b0b      	cmp	r3, #11
  40a422:	f47f ada7 	bne.w	409f74 <oneDayToSD+0x678>
		if(hexLocHour>23)hexLocHour-=24;
  40a426:	2817      	cmp	r0, #23
  40a428:	d901      	bls.n	40a42e <oneDayToSD+0xb32>
  40a42a:	3818      	subs	r0, #24
  40a42c:	b2c0      	uxtb	r0, r0
		hexLocHour=hexToBCD(hexLocHour);
  40a42e:	47b8      	blx	r7
		hex2ToAscii(hexLocHour,asciiChars);//hexLocalHour is now BCD again.
  40a430:	a91a      	add	r1, sp, #104	; 0x68
  40a432:	b2c0      	uxtb	r0, r0
  40a434:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//Hour HB from flash archive
  40a436:	a92f      	add	r1, sp, #188	; 0xbc
  40a438:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a43c:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//Hour LB from flash archive
  40a43e:	a92f      	add	r1, sp, #188	; 0xbc
  40a440:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a444:	47a0      	blx	r4
		f_putc(':',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  40a446:	a92f      	add	r1, sp, #188	; 0xbc
  40a448:	203a      	movs	r0, #58	; 0x3a
  40a44a:	47a0      	blx	r4
		minCycle=(bcdToHex(*archiveBuffPtr))&0x1F;
  40a44c:	f819 5c1a 	ldrb.w	r5, [r9, #-26]
  40a450:	4628      	mov	r0, r5
  40a452:	4b43      	ldr	r3, [pc, #268]	; (40a560 <oneDayToSD+0xc64>)
  40a454:	4798      	blx	r3
  40a456:	f000 061f 	and.w	r6, r0, #31
		hex2ToAscii(*archiveBuffPtr++,asciiChars);//date and time is already in BCD
  40a45a:	a91a      	add	r1, sp, #104	; 0x68
  40a45c:	4628      	mov	r0, r5
  40a45e:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);//Minute HB from flash archive
  40a460:	a92f      	add	r1, sp, #188	; 0xbc
  40a462:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a466:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//Minute LB from flash archive
  40a468:	a92f      	add	r1, sp, #188	; 0xbc
  40a46a:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a46e:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  40a470:	a92f      	add	r1, sp, #188	; 0xbc
  40a472:	202c      	movs	r0, #44	; 0x2c
  40a474:	47a0      	blx	r4
		hex2ToAscii(hexToBCD(*archiveBuffPtr++),asciiChars);
  40a476:	f819 0c19 	ldrb.w	r0, [r9, #-25]
  40a47a:	47b8      	blx	r7
  40a47c:	a91a      	add	r1, sp, #104	; 0x68
  40a47e:	47d8      	blx	fp
		f_putc(asciiChars[2],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a480:	a92f      	add	r1, sp, #188	; 0xbc
  40a482:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a486:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a488:	a92f      	add	r1, sp, #188	; 0xbc
  40a48a:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a48e:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a490:	a92f      	add	r1, sp, #188	; 0xbc
  40a492:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a496:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  40a498:	a92f      	add	r1, sp, #188	; 0xbc
  40a49a:	202c      	movs	r0, #44	; 0x2c
  40a49c:	47a0      	blx	r4
		f_putc(0x27,&file_object);//apostrophe forces Excel to display as a string
  40a49e:	a92f      	add	r1, sp, #188	; 0xbc
  40a4a0:	2027      	movs	r0, #39	; 0x27
  40a4a2:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);//Seconds 0..15
  40a4a4:	a91a      	add	r1, sp, #104	; 0x68
  40a4a6:	f819 0c18 	ldrb.w	r0, [r9, #-24]
  40a4aa:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  40a4ac:	a92f      	add	r1, sp, #188	; 0xbc
  40a4ae:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a4b2:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40a4b4:	a92f      	add	r1, sp, #188	; 0xbc
  40a4b6:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a4ba:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);
  40a4bc:	a91a      	add	r1, sp, #104	; 0x68
  40a4be:	f819 0c17 	ldrb.w	r0, [r9, #-23]
  40a4c2:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  40a4c4:	a92f      	add	r1, sp, #188	; 0xbc
  40a4c6:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a4ca:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40a4cc:	a92f      	add	r1, sp, #188	; 0xbc
  40a4ce:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a4d2:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);
  40a4d4:	a91a      	add	r1, sp, #104	; 0x68
  40a4d6:	f819 0c16 	ldrb.w	r0, [r9, #-22]
  40a4da:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  40a4dc:	a92f      	add	r1, sp, #188	; 0xbc
  40a4de:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a4e2:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40a4e4:	a92f      	add	r1, sp, #188	; 0xbc
  40a4e6:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a4ea:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);
  40a4ec:	a91a      	add	r1, sp, #104	; 0x68
  40a4ee:	f819 0c15 	ldrb.w	r0, [r9, #-21]
  40a4f2:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  40a4f4:	a92f      	add	r1, sp, #188	; 0xbc
  40a4f6:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a4fa:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40a4fc:	a92f      	add	r1, sp, #188	; 0xbc
  40a4fe:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a502:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);
  40a504:	a91a      	add	r1, sp, #104	; 0x68
  40a506:	f819 0c14 	ldrb.w	r0, [r9, #-20]
  40a50a:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  40a50c:	a92f      	add	r1, sp, #188	; 0xbc
  40a50e:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a512:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40a514:	a92f      	add	r1, sp, #188	; 0xbc
  40a516:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a51a:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);
  40a51c:	a91a      	add	r1, sp, #104	; 0x68
  40a51e:	f819 0c13 	ldrb.w	r0, [r9, #-19]
  40a522:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  40a524:	a92f      	add	r1, sp, #188	; 0xbc
  40a526:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a52a:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40a52c:	a92f      	add	r1, sp, #188	; 0xbc
  40a52e:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a532:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);
  40a534:	a91a      	add	r1, sp, #104	; 0x68
  40a536:	f819 0c12 	ldrb.w	r0, [r9, #-18]
  40a53a:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  40a53c:	a92f      	add	r1, sp, #188	; 0xbc
  40a53e:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a542:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40a544:	a92f      	add	r1, sp, #188	; 0xbc
  40a546:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a54a:	47a0      	blx	r4
		hex2ToAscii(*archiveBuffPtr++,asciiChars);//Seconds 54..59
  40a54c:	a91a      	add	r1, sp, #104	; 0x68
  40a54e:	e00d      	b.n	40a56c <oneDayToSD+0xc70>
  40a550:	51eb851f 	.word	0x51eb851f
  40a554:	a5000001 	.word	0xa5000001
  40a558:	400e1850 	.word	0x400e1850
  40a55c:	00407019 	.word	0x00407019
  40a560:	00407263 	.word	0x00407263
  40a564:	cccccccd 	.word	0xcccccccd
  40a568:	00407205 	.word	0x00407205
  40a56c:	f819 0c11 	ldrb.w	r0, [r9, #-17]
  40a570:	47d8      	blx	fp
		f_putc(asciiChars[1],&file_object);
  40a572:	a92f      	add	r1, sp, #188	; 0xbc
  40a574:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a578:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);
  40a57a:	a92f      	add	r1, sp, #188	; 0xbc
  40a57c:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a580:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  40a582:	a92f      	add	r1, sp, #188	; 0xbc
  40a584:	202c      	movs	r0, #44	; 0x2c
  40a586:	47a0      	blx	r4
		temperatureLow=*archiveBuffPtr;
  40a588:	f819 5c10 	ldrb.w	r5, [r9, #-16]
		if((temperatureHigh&0x0400)==0x0400){
  40a58c:	9b05      	ldr	r3, [sp, #20]
  40a58e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40a592:	f47f ad06 	bne.w	409fa2 <oneDayToSD+0x6a6>
		hex2ToAscii(hexToBCD((short)(temperatureHigh+temperatureLow)),asciiChars);
  40a596:	9b03      	ldr	r3, [sp, #12]
  40a598:	442b      	add	r3, r5
  40a59a:	b218      	sxth	r0, r3
  40a59c:	47b8      	blx	r7
  40a59e:	a91a      	add	r1, sp, #104	; 0x68
  40a5a0:	47d8      	blx	fp
		f_putc(asciiChars[3],&file_object);//
  40a5a2:	a92f      	add	r1, sp, #188	; 0xbc
  40a5a4:	f89d 006b 	ldrb.w	r0, [sp, #107]	; 0x6b
  40a5a8:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);//
  40a5aa:	a92f      	add	r1, sp, #188	; 0xbc
  40a5ac:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a5b0:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  40a5b2:	a92f      	add	r1, sp, #188	; 0xbc
  40a5b4:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a5b8:	47a0      	blx	r4
		f_putc('.',&file_object);//
  40a5ba:	a92f      	add	r1, sp, #188	; 0xbc
  40a5bc:	202e      	movs	r0, #46	; 0x2e
  40a5be:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a5c0:	a92f      	add	r1, sp, #188	; 0xbc
  40a5c2:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a5c6:	47a0      	blx	r4
		f_putc(',',&file_object);//
  40a5c8:	a92f      	add	r1, sp, #188	; 0xbc
  40a5ca:	202c      	movs	r0, #44	; 0x2c
  40a5cc:	47a0      	blx	r4
		humidityVal=(*archiveBuffPtr)+humidityHB;
  40a5ce:	f819 0c0f 	ldrb.w	r0, [r9, #-15]
  40a5d2:	9b06      	ldr	r3, [sp, #24]
  40a5d4:	4418      	add	r0, r3
		humidityVal=(humidityVal + (humidityVal>>2))-60;//from datasheet RH = (125*val)/1024 - 6.  which is about (1.25*val) - 60
  40a5d6:	eb00 00a0 	add.w	r0, r0, r0, asr #2
		hex2ToAscii(hexToBCD(humidityVal),asciiChars);
  40a5da:	383c      	subs	r0, #60	; 0x3c
  40a5dc:	47b8      	blx	r7
  40a5de:	a91a      	add	r1, sp, #104	; 0x68
  40a5e0:	47d8      	blx	fp
		f_putc(asciiChars[3],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a5e2:	a92f      	add	r1, sp, #188	; 0xbc
  40a5e4:	f89d 006b 	ldrb.w	r0, [sp, #107]	; 0x6b
  40a5e8:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a5ea:	a92f      	add	r1, sp, #188	; 0xbc
  40a5ec:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a5f0:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a5f2:	a92f      	add	r1, sp, #188	; 0xbc
  40a5f4:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a5f8:	47a0      	blx	r4
		f_putc('.',&file_object);
  40a5fa:	a92f      	add	r1, sp, #188	; 0xbc
  40a5fc:	202e      	movs	r0, #46	; 0x2e
  40a5fe:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a600:	a92f      	add	r1, sp, #188	; 0xbc
  40a602:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a606:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  40a608:	a92f      	add	r1, sp, #188	; 0xbc
  40a60a:	202c      	movs	r0, #44	; 0x2c
  40a60c:	47a0      	blx	r4
		barom=(((int)(*archiveBuffPtr))&0x000000FF)<<8;
  40a60e:	f819 3c0e 	ldrb.w	r3, [r9, #-14]
		barom+=*archiveBuffPtr;
  40a612:	f819 5c0d 	ldrb.w	r5, [r9, #-13]
  40a616:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		barom<<=1;
  40a61a:	006d      	lsls	r5, r5, #1
		barom&=0x00003FFF;
  40a61c:	f3c5 050d 	ubfx	r5, r5, #0, #14
		if(barom>9999){
  40a620:	f242 730f 	movw	r3, #9999	; 0x270f
  40a624:	429d      	cmp	r5, r3
  40a626:	f73f acc6 	bgt.w	409fb6 <oneDayToSD+0x6ba>
		hex2ToAscii(hexToBCD(barom),asciiChars);
  40a62a:	4628      	mov	r0, r5
  40a62c:	47b8      	blx	r7
  40a62e:	a91a      	add	r1, sp, #104	; 0x68
  40a630:	47d8      	blx	fp
		f_putc(asciiChars[3],&file_object);//
  40a632:	a92f      	add	r1, sp, #188	; 0xbc
  40a634:	f89d 006b 	ldrb.w	r0, [sp, #107]	; 0x6b
  40a638:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);//
  40a63a:	a92f      	add	r1, sp, #188	; 0xbc
  40a63c:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a640:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//
  40a642:	a92f      	add	r1, sp, #188	; 0xbc
  40a644:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a648:	47a0      	blx	r4
		f_putc('.',&file_object);//
  40a64a:	a92f      	add	r1, sp, #188	; 0xbc
  40a64c:	202e      	movs	r0, #46	; 0x2e
  40a64e:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//
  40a650:	a92f      	add	r1, sp, #188	; 0xbc
  40a652:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a656:	47a0      	blx	r4
		f_putc(',',&file_object);//
  40a658:	a92f      	add	r1, sp, #188	; 0xbc
  40a65a:	202c      	movs	r0, #44	; 0x2c
  40a65c:	47a0      	blx	r4
		lightVal=(*archiveBuffPtr)+lightHB;
  40a65e:	464d      	mov	r5, r9
  40a660:	f815 0d0c 	ldrb.w	r0, [r5, #-12]!
		hex2ToAscii(hexToBCD(lightVal),asciiChars);
  40a664:	9b04      	ldr	r3, [sp, #16]
  40a666:	4418      	add	r0, r3
  40a668:	47b8      	blx	r7
  40a66a:	a91a      	add	r1, sp, #104	; 0x68
  40a66c:	47d8      	blx	fp
		f_putc(asciiChars[3],&file_object);//
  40a66e:	a92f      	add	r1, sp, #188	; 0xbc
  40a670:	f89d 006b 	ldrb.w	r0, [sp, #107]	; 0x6b
  40a674:	47a0      	blx	r4
		f_putc(asciiChars[2],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a676:	a92f      	add	r1, sp, #188	; 0xbc
  40a678:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
  40a67c:	47a0      	blx	r4
		f_putc(asciiChars[1],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a67e:	a92f      	add	r1, sp, #188	; 0xbc
  40a680:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
  40a684:	47a0      	blx	r4
		f_putc(asciiChars[0],&file_object);//THIS BYTE IS READ SECOND BY WINDOWS. Two bytes per pixel
  40a686:	a92f      	add	r1, sp, #188	; 0xbc
  40a688:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40a68c:	47a0      	blx	r4
		f_putc(',',&file_object);//THIS BYTE IS READ FIRST BY WINDOWS.
  40a68e:	a92f      	add	r1, sp, #188	; 0xbc
  40a690:	202c      	movs	r0, #44	; 0x2c
  40a692:	47a0      	blx	r4
  40a694:	e49e      	b.n	409fd4 <oneDayToSD+0x6d8>
				latFrac=((unsigned int)(*archiveBuffPtr))*10000;
  40a696:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a69a:	f242 7210 	movw	r2, #10000	; 0x2710
  40a69e:	fb02 f303 	mul.w	r3, r2, r3
  40a6a2:	9318      	str	r3, [sp, #96]	; 0x60
				break;
  40a6a4:	e4e2      	b.n	40a06c <oneDayToSD+0x770>
				latFrac+=((unsigned int)(*archiveBuffPtr))*100;
  40a6a6:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a6aa:	2264      	movs	r2, #100	; 0x64
  40a6ac:	9918      	ldr	r1, [sp, #96]	; 0x60
  40a6ae:	fb02 1303 	mla	r3, r2, r3, r1
  40a6b2:	9318      	str	r3, [sp, #96]	; 0x60
				break;
  40a6b4:	e4da      	b.n	40a06c <oneDayToSD+0x770>
				latFrac+=(unsigned int)(*archiveBuffPtr);
  40a6b6:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a6ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
  40a6bc:	441a      	add	r2, r3
  40a6be:	9218      	str	r2, [sp, #96]	; 0x60
				latFrac6=latFrac/6;
  40a6c0:	4b47      	ldr	r3, [pc, #284]	; (40a7e0 <oneDayToSD+0xee4>)
  40a6c2:	fba3 2302 	umull	r2, r3, r3, r2
  40a6c6:	089b      	lsrs	r3, r3, #2
  40a6c8:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
  40a6ca:	e4cf      	b.n	40a06c <oneDayToSD+0x770>
				longSign=*archiveBuffPtr;
  40a6cc:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a6d0:	930c      	str	r3, [sp, #48]	; 0x30
				break;
  40a6d2:	e4cb      	b.n	40a06c <oneDayToSD+0x770>
				longWhole=*archiveBuffPtr;
  40a6d4:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a6d8:	930d      	str	r3, [sp, #52]	; 0x34
				break;
  40a6da:	e4c7      	b.n	40a06c <oneDayToSD+0x770>
				longFrac=((unsigned int)(*archiveBuffPtr))*10000;
  40a6dc:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a6e0:	f242 7210 	movw	r2, #10000	; 0x2710
  40a6e4:	fb02 f303 	mul.w	r3, r2, r3
  40a6e8:	9319      	str	r3, [sp, #100]	; 0x64
				break;
  40a6ea:	e4bf      	b.n	40a06c <oneDayToSD+0x770>
				longFrac+=((unsigned int)(*archiveBuffPtr))*100;
  40a6ec:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a6f0:	2264      	movs	r2, #100	; 0x64
  40a6f2:	9919      	ldr	r1, [sp, #100]	; 0x64
  40a6f4:	fb02 1303 	mla	r3, r2, r3, r1
  40a6f8:	9319      	str	r3, [sp, #100]	; 0x64
				break;
  40a6fa:	e4b7      	b.n	40a06c <oneDayToSD+0x770>
				longFrac+=(unsigned int)(*archiveBuffPtr);
  40a6fc:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a700:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40a702:	441a      	add	r2, r3
  40a704:	9219      	str	r2, [sp, #100]	; 0x64
				longFrac6=longFrac/6;
  40a706:	4b36      	ldr	r3, [pc, #216]	; (40a7e0 <oneDayToSD+0xee4>)
  40a708:	fba3 2302 	umull	r2, r3, r3, r2
  40a70c:	089b      	lsrs	r3, r3, #2
  40a70e:	930e      	str	r3, [sp, #56]	; 0x38
				break;
  40a710:	e4ac      	b.n	40a06c <oneDayToSD+0x770>
				GPSyear=*archiveBuffPtr;
  40a712:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a716:	930f      	str	r3, [sp, #60]	; 0x3c
				break;
  40a718:	e4a8      	b.n	40a06c <oneDayToSD+0x770>
				GPSmonth=*archiveBuffPtr;
  40a71a:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a71e:	9310      	str	r3, [sp, #64]	; 0x40
				break;
  40a720:	e4a4      	b.n	40a06c <oneDayToSD+0x770>
				GPSday=*archiveBuffPtr;
  40a722:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a726:	9311      	str	r3, [sp, #68]	; 0x44
				break;
  40a728:	e4a0      	b.n	40a06c <oneDayToSD+0x770>
				GPShour=*archiveBuffPtr;
  40a72a:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a72e:	9312      	str	r3, [sp, #72]	; 0x48
				break;
  40a730:	e49c      	b.n	40a06c <oneDayToSD+0x770>
				GPSminute=*archiveBuffPtr;
  40a732:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a736:	9313      	str	r3, [sp, #76]	; 0x4c
				break;
  40a738:	e498      	b.n	40a06c <oneDayToSD+0x770>
				GPSsecond=*archiveBuffPtr;
  40a73a:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a73e:	9314      	str	r3, [sp, #80]	; 0x50
				break;
  40a740:	e494      	b.n	40a06c <oneDayToSD+0x770>
				batt=*archiveBuffPtr;
  40a742:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a746:	9308      	str	r3, [sp, #32]
				break;
  40a748:	e490      	b.n	40a06c <oneDayToSD+0x770>
			case 16: batt=*archiveBuffPtr;
  40a74a:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a74e:	9308      	str	r3, [sp, #32]
				GPSnumSats=*archiveBuffPtr;
  40a750:	9315      	str	r3, [sp, #84]	; 0x54
				break;
  40a752:	e48b      	b.n	40a06c <oneDayToSD+0x770>
				GPSttff=((unsigned short)(*archiveBuffPtr))<<8;
  40a754:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a758:	021b      	lsls	r3, r3, #8
  40a75a:	9307      	str	r3, [sp, #28]
				break;
  40a75c:	e486      	b.n	40a06c <oneDayToSD+0x770>
				GPSttff+=(unsigned short)(*archiveBuffPtr);
  40a75e:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a762:	9a07      	ldr	r2, [sp, #28]
  40a764:	441a      	add	r2, r3
  40a766:	b293      	uxth	r3, r2
  40a768:	9307      	str	r3, [sp, #28]
				break;
  40a76a:	e47f      	b.n	40a06c <oneDayToSD+0x770>
				magnetometer=*archiveBuffPtr;
  40a76c:	f899 3002 	ldrb.w	r3, [r9, #2]
  40a770:	9316      	str	r3, [sp, #88]	; 0x58
				break;
  40a772:	e47b      	b.n	40a06c <oneDayToSD+0x770>
		if((recordCtr%50)==0)printf(".");
  40a774:	481b      	ldr	r0, [pc, #108]	; (40a7e4 <oneDayToSD+0xee8>)
  40a776:	4b1c      	ldr	r3, [pc, #112]	; (40a7e8 <oneDayToSD+0xeec>)
  40a778:	4798      	blx	r3
  40a77a:	e596      	b.n	40a2aa <oneDayToSD+0x9ae>
	f_close(&file_object);
  40a77c:	a82f      	add	r0, sp, #188	; 0xbc
  40a77e:	4b1b      	ldr	r3, [pc, #108]	; (40a7ec <oneDayToSD+0xef0>)
  40a780:	4798      	blx	r3
	closeSDcard();
  40a782:	4b1b      	ldr	r3, [pc, #108]	; (40a7f0 <oneDayToSD+0xef4>)
  40a784:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40a786:	f44f 7280 	mov.w	r2, #256	; 0x100
  40a78a:	4b1a      	ldr	r3, [pc, #104]	; (40a7f4 <oneDayToSD+0xef8>)
  40a78c:	635a      	str	r2, [r3, #52]	; 0x34
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40a78e:	4a1a      	ldr	r2, [pc, #104]	; (40a7f8 <oneDayToSD+0xefc>)
  40a790:	f503 638a 	add.w	r3, r3, #1104	; 0x450
  40a794:	601a      	str	r2, [r3, #0]
	printf("\r\nMain Branch. GOOD. FILE CLOSED.\r\n");
  40a796:	4819      	ldr	r0, [pc, #100]	; (40a7fc <oneDayToSD+0xf00>)
  40a798:	4b13      	ldr	r3, [pc, #76]	; (40a7e8 <oneDayToSD+0xeec>)
  40a79a:	4798      	blx	r3
	delay_ms(10);
  40a79c:	4818      	ldr	r0, [pc, #96]	; (40a800 <oneDayToSD+0xf04>)
  40a79e:	4b19      	ldr	r3, [pc, #100]	; (40a804 <oneDayToSD+0xf08>)
  40a7a0:	4798      	blx	r3
	closeSDcard();
  40a7a2:	4b13      	ldr	r3, [pc, #76]	; (40a7f0 <oneDayToSD+0xef4>)
  40a7a4:	4798      	blx	r3
}
  40a7a6:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
  40a7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	f_lseek(&file_object,appendJump);//APPEND FILE. move to end of file
  40a7ae:	2100      	movs	r1, #0
  40a7b0:	a82f      	add	r0, sp, #188	; 0xbc
  40a7b2:	4b15      	ldr	r3, [pc, #84]	; (40a808 <oneDayToSD+0xf0c>)
  40a7b4:	4798      	blx	r3
	printf("CREATING OR OPENING CSV FILE...\r\n");
  40a7b6:	4815      	ldr	r0, [pc, #84]	; (40a80c <oneDayToSD+0xf10>)
  40a7b8:	4b0b      	ldr	r3, [pc, #44]	; (40a7e8 <oneDayToSD+0xeec>)
  40a7ba:	4798      	blx	r3
		f_puts(oneDayHeader,&file_object);
  40a7bc:	a92f      	add	r1, sp, #188	; 0xbc
  40a7be:	4814      	ldr	r0, [pc, #80]	; (40a810 <oneDayToSD+0xf14>)
  40a7c0:	4b14      	ldr	r3, [pc, #80]	; (40a814 <oneDayToSD+0xf18>)
  40a7c2:	4798      	blx	r3
  40a7c4:	f7ff bb54 	b.w	409e70 <oneDayToSD+0x574>
	res = f_open(&file_object, (char const *)csvFileName, FA_CREATE_ALWAYS | FA_WRITE);
  40a7c8:	220a      	movs	r2, #10
  40a7ca:	a91c      	add	r1, sp, #112	; 0x70
  40a7cc:	a82f      	add	r0, sp, #188	; 0xbc
  40a7ce:	4b12      	ldr	r3, [pc, #72]	; (40a818 <oneDayToSD+0xf1c>)
  40a7d0:	4798      	blx	r3
	if (res != FR_OK) { 
  40a7d2:	4601      	mov	r1, r0
  40a7d4:	2800      	cmp	r0, #0
  40a7d6:	d0ea      	beq.n	40a7ae <oneDayToSD+0xeb2>
		printf("f_open A FAIL res %d\r\n", res);
  40a7d8:	4810      	ldr	r0, [pc, #64]	; (40a81c <oneDayToSD+0xf20>)
  40a7da:	4b03      	ldr	r3, [pc, #12]	; (40a7e8 <oneDayToSD+0xeec>)
  40a7dc:	4798      	blx	r3
		goto oneDay_end_of_test;
  40a7de:	e7dd      	b.n	40a79c <oneDayToSD+0xea0>
  40a7e0:	aaaaaaab 	.word	0xaaaaaaab
  40a7e4:	004107c0 	.word	0x004107c0
  40a7e8:	0040c895 	.word	0x0040c895
  40a7ec:	00406bcd 	.word	0x00406bcd
  40a7f0:	00409589 	.word	0x00409589
  40a7f4:	400e1400 	.word	0x400e1400
  40a7f8:	a5000001 	.word	0xa5000001
  40a7fc:	004107c4 	.word	0x004107c4
  40a800:	0007b784 	.word	0x0007b784
  40a804:	2040008d 	.word	0x2040008d
  40a808:	00406be5 	.word	0x00406be5
  40a80c:	00410788 	.word	0x00410788
  40a810:	00410530 	.word	0x00410530
  40a814:	00407019 	.word	0x00407019
  40a818:	0040676d 	.word	0x0040676d
  40a81c:	00410770 	.word	0x00410770

0040a820 <resetPinsISI>:
}
/***********************************************************************
 *    RESET ISI PINS
 ***********************************************************************/
void resetPinsISI(void){
  40a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		base->PIO_PUDR = mask;
  40a824:	4b7c      	ldr	r3, [pc, #496]	; (40aa18 <resetPinsISI+0x1f8>)
  40a826:	f44f 0a80 	mov.w	sl, #4194304	; 0x400000
  40a82a:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a82e:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a832:	f8c3 a054 	str.w	sl, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a836:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a83a:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a83e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40a840:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  40a844:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a846:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40a848:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  40a84c:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a84e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40a852:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a854:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a858:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a85a:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a85c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a860:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40a862:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40a866:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a868:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40a86a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40a86e:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a870:	4c6a      	ldr	r4, [pc, #424]	; (40aa1c <resetPinsISI+0x1fc>)
  40a872:	f04f 0908 	mov.w	r9, #8
  40a876:	f8c4 9060 	str.w	r9, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a87a:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a87e:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a882:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a886:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a88a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40a88c:	f022 0208 	bic.w	r2, r2, #8
  40a890:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a892:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40a894:	f022 0208 	bic.w	r2, r2, #8
  40a898:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a89a:	4a61      	ldr	r2, [pc, #388]	; (40aa20 <resetPinsISI+0x200>)
  40a89c:	f44f 7800 	mov.w	r8, #512	; 0x200
  40a8a0:	f8c2 8060 	str.w	r8, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a8a4:	f8c2 8090 	str.w	r8, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a8a8:	f8c2 8054 	str.w	r8, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a8ac:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a8b0:	f8c2 8080 	str.w	r8, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a8b4:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40a8b6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  40a8ba:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a8bc:	6f51      	ldr	r1, [r2, #116]	; 0x74
  40a8be:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  40a8c2:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a8c4:	f04f 0c20 	mov.w	ip, #32
  40a8c8:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a8cc:	f8c2 c090 	str.w	ip, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a8d0:	f8c2 c054 	str.w	ip, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a8d4:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a8d8:	f8c2 c080 	str.w	ip, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a8dc:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40a8de:	f021 0120 	bic.w	r1, r1, #32
  40a8e2:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a8e4:	6f51      	ldr	r1, [r2, #116]	; 0x74
  40a8e6:	f021 0120 	bic.w	r1, r1, #32
  40a8ea:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a8ec:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  40a8f0:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a8f4:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a8f8:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a8fc:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a900:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a904:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40a906:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40a90a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a90c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40a90e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40a912:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a914:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  40a918:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a91a:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a91e:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a920:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a922:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a926:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40a928:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40a92c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a92e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40a930:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40a934:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a936:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  40a93a:	6616      	str	r6, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a93c:	f8c2 6090 	str.w	r6, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a940:	6556      	str	r6, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a942:	6256      	str	r6, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a944:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a948:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40a94a:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40a94e:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a950:	6f51      	ldr	r1, [r2, #116]	; 0x74
  40a952:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40a956:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a958:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  40a95c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a95e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a962:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a964:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a966:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a96a:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  40a96c:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
  40a970:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a972:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40a974:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
  40a978:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a97a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  40a97e:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a980:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a984:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a986:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a988:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a98c:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  40a990:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
  40a994:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a998:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  40a99c:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
  40a9a0:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a9a4:	6610      	str	r0, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a9a6:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a9aa:	6550      	str	r0, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a9ac:	6250      	str	r0, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a9ae:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a9b2:	f8d2 b070 	ldr.w	fp, [r2, #112]	; 0x70
  40a9b6:	f42b 1b00 	bic.w	fp, fp, #2097152	; 0x200000
  40a9ba:	f8c2 b070 	str.w	fp, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a9be:	f8d2 b074 	ldr.w	fp, [r2, #116]	; 0x74
  40a9c2:	f42b 1b00 	bic.w	fp, fp, #2097152	; 0x200000
  40a9c6:	f8c2 b074 	str.w	fp, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a9ca:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a9cc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a9d0:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a9d2:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a9d4:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a9d8:	f8d2 b070 	ldr.w	fp, [r2, #112]	; 0x70
  40a9dc:	f02b 7b80 	bic.w	fp, fp, #16777216	; 0x1000000
  40a9e0:	f8c2 b070 	str.w	fp, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a9e4:	f8d2 b074 	ldr.w	fp, [r2, #116]	; 0x74
  40a9e8:	f02b 7b80 	bic.w	fp, fp, #16777216	; 0x1000000
  40a9ec:	f8c2 b074 	str.w	fp, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40a9f0:	f8c3 a000 	str.w	sl, [r3]
  40a9f4:	6018      	str	r0, [r3, #0]
  40a9f6:	f8c4 9000 	str.w	r9, [r4]
  40a9fa:	f8c2 8000 	str.w	r8, [r2]
  40a9fe:	f8c2 c000 	str.w	ip, [r2]
  40aa02:	f8c3 e000 	str.w	lr, [r3]
  40aa06:	601f      	str	r7, [r3, #0]
  40aa08:	6016      	str	r6, [r2, #0]
  40aa0a:	6019      	str	r1, [r3, #0]
  40aa0c:	601d      	str	r5, [r3, #0]
  40aa0e:	6010      	str	r0, [r2, #0]
  40aa10:	6011      	str	r1, [r2, #0]
  40aa12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa16:	bf00      	nop
  40aa18:	400e1400 	.word	0x400e1400
  40aa1c:	400e1000 	.word	0x400e1000
  40aa20:	400e0e00 	.word	0x400e0e00

0040aa24 <takeImage>:
char takeImage(char flash, char configSource, char formatSize){
  40aa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40aa28:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
  40aa2c:	468b      	mov	fp, r1
  40aa2e:	9203      	str	r2, [sp, #12]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40aa30:	4b90      	ldr	r3, [pc, #576]	; (40ac74 <takeImage+0x250>)
  40aa32:	2080      	movs	r0, #128	; 0x80
  40aa34:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40aa36:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	printf("TAKE IMAGE. ConfigSource: %d. ImageSize: %d \r\n", configSource, formatSize);
  40aa3a:	488f      	ldr	r0, [pc, #572]	; (40ac78 <takeImage+0x254>)
  40aa3c:	4b8f      	ldr	r3, [pc, #572]	; (40ac7c <takeImage+0x258>)
  40aa3e:	4798      	blx	r3
  __ASM volatile ("dsb");
  40aa40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40aa44:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40aa48:	4b8d      	ldr	r3, [pc, #564]	; (40ac80 <takeImage+0x25c>)
  40aa4a:	2200      	movs	r2, #0
  40aa4c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40aa50:	695a      	ldr	r2, [r3, #20]
  40aa52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40aa56:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  40aa58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40aa5c:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40aa60:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40aa64:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40aa68:	f007 0007 	and.w	r0, r7, #7
  40aa6c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40aa6e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40aa72:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40aa76:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40aa7a:	f3bf 8f4f 	dsb	sy
  40aa7e:	f04f 34ff 	mov.w	r4, #4294967295
  40aa82:	fa04 fc00 	lsl.w	ip, r4, r0
  40aa86:	fa06 f000 	lsl.w	r0, r6, r0
  40aa8a:	fa04 f40e 	lsl.w	r4, r4, lr
  40aa8e:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCISW = sw;
  40aa92:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40aa94:	463a      	mov	r2, r7
  40aa96:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40aa98:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  40aa9c:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40aaa0:	3a01      	subs	r2, #1
  40aaa2:	4423      	add	r3, r4
  40aaa4:	f1b2 3fff 	cmp.w	r2, #4294967295
  40aaa8:	d1f6      	bne.n	40aa98 <takeImage+0x74>
        } while(sets--);
  40aaaa:	3e01      	subs	r6, #1
  40aaac:	4460      	add	r0, ip
  40aaae:	f1b6 3fff 	cmp.w	r6, #4294967295
  40aab2:	d1ef      	bne.n	40aa94 <takeImage+0x70>
  40aab4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40aab8:	4a71      	ldr	r2, [pc, #452]	; (40ac80 <takeImage+0x25c>)
  40aaba:	6953      	ldr	r3, [r2, #20]
  40aabc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40aac0:	6153      	str	r3, [r2, #20]
  40aac2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40aac6:	f3bf 8f6f 	isb	sy
	configPinsSDRAM();
  40aaca:	4b6e      	ldr	r3, [pc, #440]	; (40ac84 <takeImage+0x260>)
  40aacc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_SDRAMC);
  40aace:	203e      	movs	r0, #62	; 0x3e
  40aad0:	4b6d      	ldr	r3, [pc, #436]	; (40ac88 <takeImage+0x264>)
  40aad2:	4798      	blx	r3
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_INSIGNIS_16M,	sysclk_get_cpu_hz());
  40aad4:	496d      	ldr	r1, [pc, #436]	; (40ac8c <takeImage+0x268>)
  40aad6:	486e      	ldr	r0, [pc, #440]	; (40ac90 <takeImage+0x26c>)
  40aad8:	4b6e      	ldr	r3, [pc, #440]	; (40ac94 <takeImage+0x270>)
  40aada:	4798      	blx	r3
  40aadc:	4a6e      	ldr	r2, [pc, #440]	; (40ac98 <takeImage+0x274>)
  40aade:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40aae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40aae4:	6293      	str	r3, [r2, #40]	; 0x28
	printf("SRAM COMPLETE\r\n");
  40aae6:	486d      	ldr	r0, [pc, #436]	; (40ac9c <takeImage+0x278>)
  40aae8:	4b64      	ldr	r3, [pc, #400]	; (40ac7c <takeImage+0x258>)
  40aaea:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  40aaec:	2210      	movs	r2, #16
  40aaee:	4b6c      	ldr	r3, [pc, #432]	; (40aca0 <takeImage+0x27c>)
  40aaf0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40aaf4:	4c6b      	ldr	r4, [pc, #428]	; (40aca4 <takeImage+0x280>)
  40aaf6:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
  40aafa:	f8c4 a010 	str.w	sl, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40aafe:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ab02:	4e5c      	ldr	r6, [pc, #368]	; (40ac74 <takeImage+0x250>)
  40ab04:	f44f 7780 	mov.w	r7, #256	; 0x100
  40ab08:	6137      	str	r7, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ab0a:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ab0e:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40ab12:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ab14:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ab18:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ab1a:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40ab1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40ab22:	6173      	str	r3, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ab24:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40ab28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  40ab2c:	6173      	str	r3, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ab2e:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ab32:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ab34:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40ab38:	6325      	str	r5, [r4, #48]	; 0x30
  40ab3a:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(100);
  40ab3c:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 40acf0 <takeImage+0x2cc>
  40ab40:	4648      	mov	r0, r9
  40ab42:	f8df 8184 	ldr.w	r8, [pc, #388]	; 40acc8 <takeImage+0x2a4>
  40ab46:	47c0      	blx	r8
  40ab48:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
  40ab4c:	6337      	str	r7, [r6, #48]	; 0x30
  40ab4e:	6327      	str	r7, [r4, #48]	; 0x30
	delay_ms(100);
  40ab50:	4648      	mov	r0, r9
  40ab52:	47c0      	blx	r8
	delay_ms(6);//OV2710 datasheet says minimum 5ms between applying power an allowing CPWDN to go low.
  40ab54:	4854      	ldr	r0, [pc, #336]	; (40aca8 <takeImage+0x284>)
  40ab56:	47c0      	blx	r8
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40ab58:	6365      	str	r5, [r4, #52]	; 0x34
	delay_ms(2);
  40ab5a:	4854      	ldr	r0, [pc, #336]	; (40acac <takeImage+0x288>)
  40ab5c:	47c0      	blx	r8
	delay_ms(100);
  40ab5e:	4648      	mov	r0, r9
  40ab60:	47c0      	blx	r8
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40ab62:	4a53      	ldr	r2, [pc, #332]	; (40acb0 <takeImage+0x28c>)
  40ab64:	4b53      	ldr	r3, [pc, #332]	; (40acb4 <takeImage+0x290>)
  40ab66:	601a      	str	r2, [r3, #0]
	gpio_configure_pin(ISI_MCLK_GPIO, ISI_MCLK_FLAGS);
  40ab68:	4953      	ldr	r1, [pc, #332]	; (40acb8 <takeImage+0x294>)
  40ab6a:	2015      	movs	r0, #21
  40ab6c:	4b53      	ldr	r3, [pc, #332]	; (40acbc <takeImage+0x298>)
  40ab6e:	4798      	blx	r3
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  40ab70:	4b53      	ldr	r3, [pc, #332]	; (40acc0 <takeImage+0x29c>)
  40ab72:	f44f 7281 	mov.w	r2, #258	; 0x102
  40ab76:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  40ab78:	f44f 7200 	mov.w	r2, #512	; 0x200
  40ab7c:	601a      	str	r2, [r3, #0]
	while ((!(PMC->PMC_SCSR & PMC_SCSR_PCK1))&&(iters>0)) {
  40ab7e:	689b      	ldr	r3, [r3, #8]
  40ab80:	f413 7f00 	tst.w	r3, #512	; 0x200
  40ab84:	d119      	bne.n	40abba <takeImage+0x196>
  40ab86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  40ab8a:	494d      	ldr	r1, [pc, #308]	; (40acc0 <takeImage+0x29c>)
		iters--;
  40ab8c:	3b01      	subs	r3, #1
	while ((!(PMC->PMC_SCSR & PMC_SCSR_PCK1))&&(iters>0)) {
  40ab8e:	688a      	ldr	r2, [r1, #8]
  40ab90:	f412 7f00 	tst.w	r2, #512	; 0x200
  40ab94:	d101      	bne.n	40ab9a <takeImage+0x176>
  40ab96:	2b00      	cmp	r3, #0
  40ab98:	dcf8      	bgt.n	40ab8c <takeImage+0x168>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  40ab9a:	b973      	cbnz	r3, 40abba <takeImage+0x196>
  40ab9c:	2401      	movs	r4, #1
	resetPinsISI();
  40ab9e:	4b49      	ldr	r3, [pc, #292]	; (40acc4 <takeImage+0x2a0>)
  40aba0:	4798      	blx	r3
	delay_ms(1);
  40aba2:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40aba6:	4b48      	ldr	r3, [pc, #288]	; (40acc8 <takeImage+0x2a4>)
  40aba8:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40abaa:	4a41      	ldr	r2, [pc, #260]	; (40acb0 <takeImage+0x28c>)
  40abac:	4b41      	ldr	r3, [pc, #260]	; (40acb4 <takeImage+0x290>)
  40abae:	601a      	str	r2, [r3, #0]
}
  40abb0:	4620      	mov	r0, r4
  40abb2:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
  40abb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	printf("MCLK OKAY\r\n");//tshooooooooooooooooooooooooooooooooooooooooooooot
  40abba:	4844      	ldr	r0, [pc, #272]	; (40accc <takeImage+0x2a8>)
  40abbc:	4b2f      	ldr	r3, [pc, #188]	; (40ac7c <takeImage+0x258>)
  40abbe:	4798      	blx	r3
	delay_ms(1);
  40abc0:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40abc4:	4e40      	ldr	r6, [pc, #256]	; (40acc8 <takeImage+0x2a4>)
  40abc6:	47b0      	blx	r6
	opt.master_clk = sysclk_get_cpu_hz();
  40abc8:	4b30      	ldr	r3, [pc, #192]	; (40ac8c <takeImage+0x268>)
  40abca:	9391      	str	r3, [sp, #580]	; 0x244
	opt.speed      = TWIHS_CLK;
  40abcc:	4b40      	ldr	r3, [pc, #256]	; (40acd0 <takeImage+0x2ac>)
  40abce:	9392      	str	r3, [sp, #584]	; 0x248
	twihs_master_init(BOARD_TWIHS, &opt);
  40abd0:	a991      	add	r1, sp, #580	; 0x244
  40abd2:	4840      	ldr	r0, [pc, #256]	; (40acd4 <takeImage+0x2b0>)
  40abd4:	4b40      	ldr	r3, [pc, #256]	; (40acd8 <takeImage+0x2b4>)
  40abd6:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40abd8:	4b40      	ldr	r3, [pc, #256]	; (40acdc <takeImage+0x2b8>)
  40abda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40abde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40abe2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40abe6:	2100      	movs	r1, #0
  40abe8:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40abec:	601a      	str	r2, [r3, #0]
	pmc_enable_periph_clk(ID_BOARD_TWIHS);
  40abee:	2013      	movs	r0, #19
  40abf0:	4b25      	ldr	r3, [pc, #148]	; (40ac88 <takeImage+0x264>)
  40abf2:	4798      	blx	r3
	pio_configure_pin(ISI_D0_GPIO, ISI_D0_FLAGS);
  40abf4:	4d3a      	ldr	r5, [pc, #232]	; (40ace0 <takeImage+0x2bc>)
  40abf6:	4629      	mov	r1, r5
  40abf8:	2076      	movs	r0, #118	; 0x76
  40abfa:	4c30      	ldr	r4, [pc, #192]	; (40acbc <takeImage+0x298>)
  40abfc:	47a0      	blx	r4
	pio_configure_pin(ISI_D1_GPIO, ISI_D1_FLAGS);
  40abfe:	4629      	mov	r1, r5
  40ac00:	2075      	movs	r0, #117	; 0x75
  40ac02:	47a0      	blx	r4
	pio_configure_pin(ISI_D2_GPIO, ISI_D2_FLAGS);
  40ac04:	4629      	mov	r1, r5
  40ac06:	2023      	movs	r0, #35	; 0x23
  40ac08:	47a0      	blx	r4
	pio_configure_pin(ISI_D3_GPIO, ISI_D3_FLAGS);
  40ac0a:	4f2b      	ldr	r7, [pc, #172]	; (40acb8 <takeImage+0x294>)
  40ac0c:	4639      	mov	r1, r7
  40ac0e:	2009      	movs	r0, #9
  40ac10:	47a0      	blx	r4
	pio_configure_pin(ISI_D4_GPIO, ISI_D4_FLAGS);
  40ac12:	4639      	mov	r1, r7
  40ac14:	2005      	movs	r0, #5
  40ac16:	47a0      	blx	r4
	pio_configure_pin(ISI_D5_GPIO, ISI_D5_FLAGS);
  40ac18:	4629      	mov	r1, r5
  40ac1a:	206b      	movs	r0, #107	; 0x6b
  40ac1c:	47a0      	blx	r4
	pio_configure_pin(ISI_D6_GPIO, ISI_D6_FLAGS);
  40ac1e:	4629      	mov	r1, r5
  40ac20:	206c      	movs	r0, #108	; 0x6c
  40ac22:	47a0      	blx	r4
	pio_configure_pin(ISI_D7_GPIO, ISI_D7_FLAGS);
  40ac24:	4629      	mov	r1, r5
  40ac26:	201b      	movs	r0, #27
  40ac28:	47a0      	blx	r4
	pio_configure_pin(ISI_HSYNC_GPIO, ISI_HSYNC_FLAGS);
  40ac2a:	4629      	mov	r1, r5
  40ac2c:	2078      	movs	r0, #120	; 0x78
  40ac2e:	47a0      	blx	r4
	pio_configure_pin(ISI_VSYNC_GPIO, ISI_VSYNC_FLAGS);
  40ac30:	4629      	mov	r1, r5
  40ac32:	2079      	movs	r0, #121	; 0x79
  40ac34:	47a0      	blx	r4
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
  40ac36:	4629      	mov	r1, r5
  40ac38:	2018      	movs	r0, #24
  40ac3a:	47a0      	blx	r4
	delay_ms(200);
  40ac3c:	4829      	ldr	r0, [pc, #164]	; (40ace4 <takeImage+0x2c0>)
  40ac3e:	47b0      	blx	r6
	iters=10;
  40ac40:	240a      	movs	r4, #10
	while ((ov_init(BOARD_TWIHS)==1)&&(iters>0)) {
  40ac42:	4d24      	ldr	r5, [pc, #144]	; (40acd4 <takeImage+0x2b0>)
		delay_ms(200);
  40ac44:	4f27      	ldr	r7, [pc, #156]	; (40ace4 <takeImage+0x2c0>)
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40ac46:	4e1b      	ldr	r6, [pc, #108]	; (40acb4 <takeImage+0x290>)
	while ((ov_init(BOARD_TWIHS)==1)&&(iters>0)) {
  40ac48:	4628      	mov	r0, r5
  40ac4a:	4b27      	ldr	r3, [pc, #156]	; (40ace8 <takeImage+0x2c4>)
  40ac4c:	4798      	blx	r3
  40ac4e:	2c00      	cmp	r4, #0
  40ac50:	dd0b      	ble.n	40ac6a <takeImage+0x246>
  40ac52:	2801      	cmp	r0, #1
  40ac54:	d109      	bne.n	40ac6a <takeImage+0x246>
		delay_ms(200);
  40ac56:	4638      	mov	r0, r7
  40ac58:	4b1b      	ldr	r3, [pc, #108]	; (40acc8 <takeImage+0x2a4>)
  40ac5a:	4798      	blx	r3
		printf(".");
  40ac5c:	4823      	ldr	r0, [pc, #140]	; (40acec <takeImage+0x2c8>)
  40ac5e:	4b07      	ldr	r3, [pc, #28]	; (40ac7c <takeImage+0x258>)
  40ac60:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40ac62:	4b13      	ldr	r3, [pc, #76]	; (40acb0 <takeImage+0x28c>)
  40ac64:	6033      	str	r3, [r6, #0]
	iters--;	}	//WORKS for OV2655 (after changing one address byte for OV7692 to two address bytes for OV2655)
  40ac66:	3c01      	subs	r4, #1
  40ac68:	e7ee      	b.n	40ac48 <takeImage+0x224>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  40ac6a:	2c00      	cmp	r4, #0
  40ac6c:	d142      	bne.n	40acf4 <takeImage+0x2d0>
  40ac6e:	2401      	movs	r4, #1
  40ac70:	e795      	b.n	40ab9e <takeImage+0x17a>
  40ac72:	bf00      	nop
  40ac74:	400e1400 	.word	0x400e1400
  40ac78:	004107ec 	.word	0x004107ec
  40ac7c:	0040c895 	.word	0x0040c895
  40ac80:	e000ed00 	.word	0xe000ed00
  40ac84:	00408631 	.word	0x00408631
  40ac88:	00403819 	.word	0x00403819
  40ac8c:	11e1a300 	.word	0x11e1a300
  40ac90:	004102b4 	.word	0x004102b4
  40ac94:	00402999 	.word	0x00402999
  40ac98:	40084000 	.word	0x40084000
  40ac9c:	004102c8 	.word	0x004102c8
  40aca0:	40088000 	.word	0x40088000
  40aca4:	400e0e00 	.word	0x400e0e00
  40aca8:	0004a14f 	.word	0x0004a14f
  40acac:	00018b1b 	.word	0x00018b1b
  40acb0:	a5000001 	.word	0xa5000001
  40acb4:	400e1850 	.word	0x400e1850
  40acb8:	10000001 	.word	0x10000001
  40acbc:	004034fd 	.word	0x004034fd
  40acc0:	400e0600 	.word	0x400e0600
  40acc4:	0040a821 	.word	0x0040a821
  40acc8:	2040008d 	.word	0x2040008d
  40accc:	0041081c 	.word	0x0041081c
  40acd0:	00061a80 	.word	0x00061a80
  40acd4:	40018000 	.word	0x40018000
  40acd8:	00401549 	.word	0x00401549
  40acdc:	e000e100 	.word	0xe000e100
  40ace0:	20000001 	.word	0x20000001
  40ace4:	009a5649 	.word	0x009a5649
  40ace8:	00400259 	.word	0x00400259
  40acec:	004107c0 	.word	0x004107c0
  40acf0:	004d2b25 	.word	0x004d2b25
	delay_ms(100);//CRITICAL DELAY, THIS NEEDS TO BE HERE OR OV_CONFIG() HANGS when no DO_DIAGS. March 2020. 50 seemed to work at least most of the time.
  40acf4:	486b      	ldr	r0, [pc, #428]	; (40aea4 <takeImage+0x480>)
  40acf6:	4b6c      	ldr	r3, [pc, #432]	; (40aea8 <takeImage+0x484>)
  40acf8:	4798      	blx	r3
	printf("CAM INIT OKAY\r\n");
  40acfa:	486c      	ldr	r0, [pc, #432]	; (40aeac <takeImage+0x488>)
  40acfc:	4c6c      	ldr	r4, [pc, #432]	; (40aeb0 <takeImage+0x48c>)
  40acfe:	47a0      	blx	r4
	ov_configure(BOARD_TWIHS, 4);//OV2655 RESET=4
  40ad00:	2104      	movs	r1, #4
  40ad02:	486c      	ldr	r0, [pc, #432]	; (40aeb4 <takeImage+0x490>)
  40ad04:	4b6c      	ldr	r3, [pc, #432]	; (40aeb8 <takeImage+0x494>)
  40ad06:	4798      	blx	r3
	printf("CAM RESET OKAY\r\n");
  40ad08:	486c      	ldr	r0, [pc, #432]	; (40aebc <takeImage+0x498>)
  40ad0a:	47a0      	blx	r4
	if(configSource == 0){
  40ad0c:	f1bb 0f00 	cmp.w	fp, #0
  40ad10:	f040 809b 	bne.w	40ae4a <takeImage+0x426>
		ov_configure(BOARD_TWIHS, 2);//OV2655 CONFIG=2
  40ad14:	2102      	movs	r1, #2
  40ad16:	4867      	ldr	r0, [pc, #412]	; (40aeb4 <takeImage+0x490>)
  40ad18:	4b67      	ldr	r3, [pc, #412]	; (40aeb8 <takeImage+0x494>)
  40ad1a:	4798      	blx	r3
		printf("CAM CONFIG FROM HARD CODE DEFAULT.\r\n");
  40ad1c:	4868      	ldr	r0, [pc, #416]	; (40aec0 <takeImage+0x49c>)
  40ad1e:	47a0      	blx	r4
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40ad20:	4c68      	ldr	r4, [pc, #416]	; (40aec4 <takeImage+0x4a0>)
  40ad22:	4d69      	ldr	r5, [pc, #420]	; (40aec8 <takeImage+0x4a4>)
  40ad24:	6025      	str	r5, [r4, #0]
	printf("CAM CONFIG OKAY\r\n");
  40ad26:	4869      	ldr	r0, [pc, #420]	; (40aecc <takeImage+0x4a8>)
  40ad28:	4b61      	ldr	r3, [pc, #388]	; (40aeb0 <takeImage+0x48c>)
  40ad2a:	4798      	blx	r3
	delay_ms(2000);			// IMAGE SENSOR DELAY TO ADJUST TO LIGHT 500ms,200ms get bad.
  40ad2c:	4868      	ldr	r0, [pc, #416]	; (40aed0 <takeImage+0x4ac>)
  40ad2e:	4e5e      	ldr	r6, [pc, #376]	; (40aea8 <takeImage+0x484>)
  40ad30:	47b0      	blx	r6
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40ad32:	6025      	str	r5, [r4, #0]
	delay_ms(1000);			// IMAGE SENSOR DELAY TO ADJUST TO LIGHT 500ms,200ms get bad.
  40ad34:	4867      	ldr	r0, [pc, #412]	; (40aed4 <takeImage+0x4b0>)
  40ad36:	47b0      	blx	r6
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40ad38:	6025      	str	r5, [r4, #0]
    ccsidr  = SCB->CCSIDR;
  40ad3a:	4b67      	ldr	r3, [pc, #412]	; (40aed8 <takeImage+0x4b4>)
  40ad3c:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40ad40:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40ad44:	f007 0007 	and.w	r0, r7, #7
  40ad48:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40ad4a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40ad4e:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40ad52:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40ad56:	f3bf 8f4f 	dsb	sy
  40ad5a:	f04f 34ff 	mov.w	r4, #4294967295
  40ad5e:	fa04 fc00 	lsl.w	ip, r4, r0
  40ad62:	fa06 f000 	lsl.w	r0, r6, r0
  40ad66:	fa04 f40e 	lsl.w	r4, r4, lr
  40ad6a:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  40ad6e:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40ad70:	463a      	mov	r2, r7
  40ad72:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40ad74:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40ad78:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40ad7c:	3a01      	subs	r2, #1
  40ad7e:	4423      	add	r3, r4
  40ad80:	f1b2 3fff 	cmp.w	r2, #4294967295
  40ad84:	d1f6      	bne.n	40ad74 <takeImage+0x350>
        } while(sets--);
  40ad86:	3e01      	subs	r6, #1
  40ad88:	4460      	add	r0, ip
  40ad8a:	f1b6 3fff 	cmp.w	r6, #4294967295
  40ad8e:	d1ef      	bne.n	40ad70 <takeImage+0x34c>
  40ad90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40ad94:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40ad98:	4b4f      	ldr	r3, [pc, #316]	; (40aed8 <takeImage+0x4b4>)
  40ad9a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40ad9e:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40ada2:	f007 0007 	and.w	r0, r7, #7
  40ada6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40ada8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40adac:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40adb0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40adb4:	f3bf 8f4f 	dsb	sy
  40adb8:	f04f 34ff 	mov.w	r4, #4294967295
  40adbc:	fa04 fc00 	lsl.w	ip, r4, r0
  40adc0:	fa06 f000 	lsl.w	r0, r6, r0
  40adc4:	fa04 f40e 	lsl.w	r4, r4, lr
  40adc8:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  40adcc:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40adce:	463a      	mov	r2, r7
  40add0:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40add2:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  40add6:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40adda:	3a01      	subs	r2, #1
  40addc:	4423      	add	r3, r4
  40adde:	f1b2 3fff 	cmp.w	r2, #4294967295
  40ade2:	d1f6      	bne.n	40add2 <takeImage+0x3ae>
        } while(sets--);
  40ade4:	3e01      	subs	r6, #1
  40ade6:	4460      	add	r0, ip
  40ade8:	f1b6 3fff 	cmp.w	r6, #4294967295
  40adec:	d1ef      	bne.n	40adce <takeImage+0x3aa>
  40adee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40adf2:	f3bf 8f6f 	isb	sy
	pmc_enable_periph_clk(ID_ISI);//
  40adf6:	203b      	movs	r0, #59	; 0x3b
  40adf8:	4b38      	ldr	r3, [pc, #224]	; (40aedc <takeImage+0x4b8>)
  40adfa:	4798      	blx	r3
preBufDescList[i].Current = (uint32_t)SRAM_BASE;
  40adfc:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 40aefc <takeImage+0x4d8>
  40ae00:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  40ae04:	f8c8 3000 	str.w	r3, [r8]
preBufDescList[i].Control = ISI_DMA_C_CTRL_C_FETCH;
  40ae08:	2301      	movs	r3, #1
  40ae0a:	f8c8 3004 	str.w	r3, [r8, #4]
preBufDescList[i].Next = (uint32_t)&preBufDescList[0];
  40ae0e:	f8c8 8008 	str.w	r8, [r8, #8]
	printf("ISI ALLOCATE COMPLETE\r\n");
  40ae12:	4833      	ldr	r0, [pc, #204]	; (40aee0 <takeImage+0x4bc>)
  40ae14:	4b26      	ldr	r3, [pc, #152]	; (40aeb0 <takeImage+0x48c>)
  40ae16:	4798      	blx	r3
	ISI->ISI_CR = ISI_CR_ISI_SRST | ISI_CR_ISI_DIS;
  40ae18:	4b32      	ldr	r3, [pc, #200]	; (40aee4 <takeImage+0x4c0>)
  40ae1a:	2206      	movs	r2, #6
  40ae1c:	625a      	str	r2, [r3, #36]	; 0x24
	while (((ISI->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST)&&(iters>0)) {  //early boards stalled here
  40ae1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40ae20:	f013 0f04 	tst.w	r3, #4
  40ae24:	d11f      	bne.n	40ae66 <takeImage+0x442>
  40ae26:	f240 54dc 	movw	r4, #1500	; 0x5dc
		delay_ms(1);
  40ae2a:	f24c 578e 	movw	r7, #50574	; 0xc58e
  40ae2e:	4e1e      	ldr	r6, [pc, #120]	; (40aea8 <takeImage+0x484>)
	while (((ISI->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST)&&(iters>0)) {  //early boards stalled here
  40ae30:	4d2c      	ldr	r5, [pc, #176]	; (40aee4 <takeImage+0x4c0>)
		delay_ms(1);
  40ae32:	4638      	mov	r0, r7
  40ae34:	47b0      	blx	r6
		iters--;
  40ae36:	3c01      	subs	r4, #1
	while (((ISI->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST)&&(iters>0)) {  //early boards stalled here
  40ae38:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40ae3a:	f013 0f04 	tst.w	r3, #4
  40ae3e:	d101      	bne.n	40ae44 <takeImage+0x420>
  40ae40:	2c00      	cmp	r4, #0
  40ae42:	dcf6      	bgt.n	40ae32 <takeImage+0x40e>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  40ae44:	b97c      	cbnz	r4, 40ae66 <takeImage+0x442>
  40ae46:	2401      	movs	r4, #1
  40ae48:	e6a9      	b.n	40ab9e <takeImage+0x17a>
		ov_reg ov2655FromUSB[] = {
  40ae4a:	f44f 7207 	mov.w	r2, #540	; 0x21c
  40ae4e:	4926      	ldr	r1, [pc, #152]	; (40aee8 <takeImage+0x4c4>)
  40ae50:	a805      	add	r0, sp, #20
  40ae52:	4b26      	ldr	r3, [pc, #152]	; (40aeec <takeImage+0x4c8>)
  40ae54:	4798      	blx	r3
		ov_write_regs(BOARD_TWIHS, ov2655FromUSB);
  40ae56:	a905      	add	r1, sp, #20
  40ae58:	4816      	ldr	r0, [pc, #88]	; (40aeb4 <takeImage+0x490>)
  40ae5a:	4b25      	ldr	r3, [pc, #148]	; (40aef0 <takeImage+0x4cc>)
  40ae5c:	4798      	blx	r3
		printf("CAM CONFIG FROM HOST PC\r\n");
  40ae5e:	4825      	ldr	r0, [pc, #148]	; (40aef4 <takeImage+0x4d0>)
  40ae60:	4b13      	ldr	r3, [pc, #76]	; (40aeb0 <takeImage+0x48c>)
  40ae62:	4798      	blx	r3
  40ae64:	e75c      	b.n	40ad20 <takeImage+0x2fc>
	ISI->ISI_CR |= ISI_CR_ISI_EN;
  40ae66:	4c1f      	ldr	r4, [pc, #124]	; (40aee4 <takeImage+0x4c0>)
  40ae68:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40ae6a:	f043 0301 	orr.w	r3, r3, #1
  40ae6e:	6263      	str	r3, [r4, #36]	; 0x24
	delay_ms(10);
  40ae70:	4821      	ldr	r0, [pc, #132]	; (40aef8 <takeImage+0x4d4>)
  40ae72:	4b0d      	ldr	r3, [pc, #52]	; (40aea8 <takeImage+0x484>)
  40ae74:	4798      	blx	r3
	while (((ISI->ISI_SR & ISI_SR_ENABLE) != ISI_SR_ENABLE)&&(iters>0)) {  //early boards stalled here
  40ae76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40ae78:	f013 0f01 	tst.w	r3, #1
  40ae7c:	d140      	bne.n	40af00 <takeImage+0x4dc>
  40ae7e:	f240 54dc 	movw	r4, #1500	; 0x5dc
		delay_ms(1);
  40ae82:	f24c 578e 	movw	r7, #50574	; 0xc58e
  40ae86:	4e08      	ldr	r6, [pc, #32]	; (40aea8 <takeImage+0x484>)
	while (((ISI->ISI_SR & ISI_SR_ENABLE) != ISI_SR_ENABLE)&&(iters>0)) {  //early boards stalled here
  40ae88:	4d16      	ldr	r5, [pc, #88]	; (40aee4 <takeImage+0x4c0>)
		delay_ms(1);
  40ae8a:	4638      	mov	r0, r7
  40ae8c:	47b0      	blx	r6
		iters--;
  40ae8e:	3c01      	subs	r4, #1
	while (((ISI->ISI_SR & ISI_SR_ENABLE) != ISI_SR_ENABLE)&&(iters>0)) {  //early boards stalled here
  40ae90:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40ae92:	f013 0f01 	tst.w	r3, #1
  40ae96:	d101      	bne.n	40ae9c <takeImage+0x478>
  40ae98:	2c00      	cmp	r4, #0
  40ae9a:	dcf6      	bgt.n	40ae8a <takeImage+0x466>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  40ae9c:	bb84      	cbnz	r4, 40af00 <takeImage+0x4dc>
  40ae9e:	2401      	movs	r4, #1
  40aea0:	e67d      	b.n	40ab9e <takeImage+0x17a>
  40aea2:	bf00      	nop
  40aea4:	004d2b25 	.word	0x004d2b25
  40aea8:	2040008d 	.word	0x2040008d
  40aeac:	00410828 	.word	0x00410828
  40aeb0:	0040c895 	.word	0x0040c895
  40aeb4:	40018000 	.word	0x40018000
  40aeb8:	00400335 	.word	0x00400335
  40aebc:	00410838 	.word	0x00410838
  40aec0:	0041084c 	.word	0x0041084c
  40aec4:	400e1850 	.word	0x400e1850
  40aec8:	a5000001 	.word	0xa5000001
  40aecc:	00410890 	.word	0x00410890
  40aed0:	06075ed6 	.word	0x06075ed6
  40aed4:	0303af6b 	.word	0x0303af6b
  40aed8:	e000ed00 	.word	0xe000ed00
  40aedc:	00403819 	.word	0x00403819
  40aee0:	004108a4 	.word	0x004108a4
  40aee4:	4004c000 	.word	0x4004c000
  40aee8:	00410084 	.word	0x00410084
  40aeec:	0040c8bd 	.word	0x0040c8bd
  40aef0:	004001ed 	.word	0x004001ed
  40aef4:	00410874 	.word	0x00410874
  40aef8:	0007b784 	.word	0x0007b784
  40aefc:	20400f80 	.word	0x20400f80
	printf("ISI ENABLED\r\n");
  40af00:	4889      	ldr	r0, [pc, #548]	; (40b128 <takeImage+0x704>)
  40af02:	4b8a      	ldr	r3, [pc, #552]	; (40b12c <takeImage+0x708>)
  40af04:	4798      	blx	r3
	adsIsiConfig.crc_sync=0;//0=no crc on embedded sync
  40af06:	2300      	movs	r3, #0
  40af08:	f88d 3234 	strb.w	r3, [sp, #564]	; 0x234
	adsIsiConfig.emb_sync=0;//0=sync on vsync/hsync signals
  40af0c:	f88d 3233 	strb.w	r3, [sp, #563]	; 0x233
	adsIsiConfig.hpol=0;//0=sync active high
  40af10:	f88d 3230 	strb.w	r3, [sp, #560]	; 0x230
	adsIsiConfig.vpol=0;//0=sync active high
  40af14:	f88d 3231 	strb.w	r3, [sp, #561]	; 0x231
	adsIsiConfig.image_fmt=ISI_INPUT_YUV;//ISI_INPUT_GS_8BIT;//need 8-bit "grayscale" ("grayscale is deceiving term, it means raw unprocessed, it can mean color)
  40af18:	f88d 3238 	strb.w	r3, [sp, #568]	; 0x238
	adsIsiConfig.image_hsize=1600;//OV2655 color bar ~works with 1600.
  40af1c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  40af20:	928f      	str	r2, [sp, #572]	; 0x23c
	adsIsiConfig.image_vsize=1200;//480;//960;//480;
  40af22:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
  40af26:	9290      	str	r2, [sp, #576]	; 0x240
	adsIsiConfig.sld=0;//h blanking
  40af28:	f88d 3236 	strb.w	r3, [sp, #566]	; 0x236
	adsIsiConfig.sfd=0;//v blanking
  40af2c:	f88d 3237 	strb.w	r3, [sp, #567]	; 0x237
	adsIsiConfig.pck_pol=0;//0=data sampled on rising edge
  40af30:	f88d 3232 	strb.w	r3, [sp, #562]	; 0x232
	adsIsiConfig.thmask=0;//only four beats of AHB burst allowed
  40af34:	f88d 3235 	strb.w	r3, [sp, #565]	; 0x235
	isi_init(ISI, &adsIsiConfig);
  40af38:	4d7d      	ldr	r5, [pc, #500]	; (40b130 <takeImage+0x70c>)
  40af3a:	a98c      	add	r1, sp, #560	; 0x230
  40af3c:	4628      	mov	r0, r5
  40af3e:	4b7d      	ldr	r3, [pc, #500]	; (40b134 <takeImage+0x710>)
  40af40:	4798      	blx	r3
	isi_set_dma_codec_path(ISI,1, 1000,&preBufDescList[0], 1, SRAM_BASE);//Use codec path for capturing in "grayscale" (raw color) mode.
  40af42:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  40af46:	9301      	str	r3, [sp, #4]
  40af48:	2101      	movs	r1, #1
  40af4a:	9100      	str	r1, [sp, #0]
  40af4c:	4643      	mov	r3, r8
  40af4e:	22e8      	movs	r2, #232	; 0xe8
  40af50:	4628      	mov	r0, r5
  40af52:	4c79      	ldr	r4, [pc, #484]	; (40b138 <takeImage+0x714>)
  40af54:	47a0      	blx	r4
	ISI->ISI_IDR = 0xFFFFFFFF;
  40af56:	f04f 34ff 	mov.w	r4, #4294967295
  40af5a:	632c      	str	r4, [r5, #48]	; 0x30
	ISI->ISI_IER = ISI_IER_CXFR_DONE;
  40af5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40af60:	62eb      	str	r3, [r5, #44]	; 0x2c
	ISI->ISI_DMA_CHDR |= ISI_DMA_CHDR_P_CH_DIS;//disable Preview Mode
  40af62:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40af64:	f043 0301 	orr.w	r3, r3, #1
  40af68:	63eb      	str	r3, [r5, #60]	; 0x3c
	ISI->ISI_DMA_CHDR |= ISI_DMA_CHDR_C_CH_DIS;//disable Codec Mode
  40af6a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40af6c:	f043 0302 	orr.w	r3, r3, #2
  40af70:	63eb      	str	r3, [r5, #60]	; 0x3c
    ccsidr  = SCB->CCSIDR;
  40af72:	4b72      	ldr	r3, [pc, #456]	; (40b13c <takeImage+0x718>)
  40af74:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40af78:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40af7c:	f006 0007 	and.w	r0, r6, #7
  40af80:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40af82:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40af86:	fab6 f786 	clz	r7, r6
    wshift  = __CLZ(ways) & 0x1f;
  40af8a:	f007 071f 	and.w	r7, r7, #31
  __ASM volatile ("dsb");
  40af8e:	f3bf 8f4f 	dsb	sy
  40af92:	fa04 fc00 	lsl.w	ip, r4, r0
  40af96:	fa0e f000 	lsl.w	r0, lr, r0
  40af9a:	40bc      	lsls	r4, r7
  40af9c:	fa06 f707 	lsl.w	r7, r6, r7
              SCB->DCCSW = sw;
  40afa0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40afa2:	4632      	mov	r2, r6
  40afa4:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40afa6:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCSW = sw;
  40afaa:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
            } while(tmpways--);
  40afae:	3a01      	subs	r2, #1
  40afb0:	4423      	add	r3, r4
  40afb2:	f1b2 3fff 	cmp.w	r2, #4294967295
  40afb6:	d1f6      	bne.n	40afa6 <takeImage+0x582>
        } while(sets--);
  40afb8:	f10e 3eff 	add.w	lr, lr, #4294967295
  40afbc:	4460      	add	r0, ip
  40afbe:	f1be 3fff 	cmp.w	lr, #4294967295
  40afc2:	d1ee      	bne.n	40afa2 <takeImage+0x57e>
  40afc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40afc8:	f3bf 8f6f 	isb	sy
	ISI->ISI_DMA_CHER |= ISI_DMA_CHER_C_CH_EN;//enable Codec Mode. MUST USE CODEC PATH BECAUSE PREVIEW IS ONLY 640 X 480
  40afcc:	4a58      	ldr	r2, [pc, #352]	; (40b130 <takeImage+0x70c>)
  40afce:	6b93      	ldr	r3, [r2, #56]	; 0x38
  40afd0:	f043 0302 	orr.w	r3, r3, #2
  40afd4:	6393      	str	r3, [r2, #56]	; 0x38
	printf("ISI INIT DONE A\r\n");
  40afd6:	485a      	ldr	r0, [pc, #360]	; (40b140 <takeImage+0x71c>)
  40afd8:	4b54      	ldr	r3, [pc, #336]	; (40b12c <takeImage+0x708>)
  40afda:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40afdc:	4b59      	ldr	r3, [pc, #356]	; (40b144 <takeImage+0x720>)
  40afde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40afe2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40afe4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40afe8:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(5);
  40afea:	4857      	ldr	r0, [pc, #348]	; (40b148 <takeImage+0x724>)
  40afec:	4b57      	ldr	r3, [pc, #348]	; (40b14c <takeImage+0x728>)
  40afee:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40aff0:	4b57      	ldr	r3, [pc, #348]	; (40b150 <takeImage+0x72c>)
  40aff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40aff6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40affa:	21e0      	movs	r1, #224	; 0xe0
  40affc:	f883 133b 	strb.w	r1, [r3, #827]	; 0x33b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40b000:	605a      	str	r2, [r3, #4]
 */
static inline char isi_capture(Isi *p_isi)
{
	char captureIters = 0;
	/* A new request cannot be taken into account while CDC_PND bit is active */
	while((p_isi->ISI_SR & ISI_SR_CDC_PND) == ISI_SR_CDC_PND);
  40b002:	4a4b      	ldr	r2, [pc, #300]	; (40b130 <takeImage+0x70c>)
  40b004:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40b006:	f413 7f80 	tst.w	r3, #256	; 0x100
  40b00a:	d1fb      	bne.n	40b004 <takeImage+0x5e0>
	p_isi->ISI_CR = ISI_CR_ISI_CDC;
  40b00c:	f44f 7280 	mov.w	r2, #256	; 0x100
  40b010:	4b47      	ldr	r3, [pc, #284]	; (40b130 <takeImage+0x70c>)
  40b012:	625a      	str	r2, [r3, #36]	; 0x24
	printf("ISI CAPTURE DONE. CapIters = %d   ",capIters);
  40b014:	2100      	movs	r1, #0
  40b016:	484f      	ldr	r0, [pc, #316]	; (40b154 <takeImage+0x730>)
  40b018:	4b44      	ldr	r3, [pc, #272]	; (40b12c <takeImage+0x708>)
  40b01a:	4798      	blx	r3
	delay_ms(1200);//100ms left first row of memory wrong. Need even longer delay if use slower PLL divide on camera.
  40b01c:	484e      	ldr	r0, [pc, #312]	; (40b158 <takeImage+0x734>)
  40b01e:	4b4b      	ldr	r3, [pc, #300]	; (40b14c <takeImage+0x728>)
  40b020:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  40b022:	4b46      	ldr	r3, [pc, #280]	; (40b13c <takeImage+0x718>)
  40b024:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40b028:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40b02c:	f006 0007 	and.w	r0, r6, #7
  40b030:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40b032:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40b036:	fab6 f786 	clz	r7, r6
    wshift  = __CLZ(ways) & 0x1f;
  40b03a:	f007 071f 	and.w	r7, r7, #31
  __ASM volatile ("dsb");
  40b03e:	f3bf 8f4f 	dsb	sy
  40b042:	f04f 34ff 	mov.w	r4, #4294967295
  40b046:	fa04 fc00 	lsl.w	ip, r4, r0
  40b04a:	fa0e f000 	lsl.w	r0, lr, r0
  40b04e:	40bc      	lsls	r4, r7
  40b050:	fa06 f707 	lsl.w	r7, r6, r7
              SCB->DCCISW = sw;
  40b054:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40b056:	4632      	mov	r2, r6
  40b058:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40b05a:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40b05e:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40b062:	3a01      	subs	r2, #1
  40b064:	4423      	add	r3, r4
  40b066:	f1b2 3fff 	cmp.w	r2, #4294967295
  40b06a:	d1f6      	bne.n	40b05a <takeImage+0x636>
        } while(sets--);
  40b06c:	f10e 3eff 	add.w	lr, lr, #4294967295
  40b070:	4460      	add	r0, ip
  40b072:	f1be 3fff 	cmp.w	lr, #4294967295
  40b076:	d1ee      	bne.n	40b056 <takeImage+0x632>
  40b078:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40b07c:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40b080:	4b2e      	ldr	r3, [pc, #184]	; (40b13c <takeImage+0x718>)
  40b082:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40b086:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40b08a:	f006 0007 	and.w	r0, r6, #7
  40b08e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40b090:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40b094:	fab6 f786 	clz	r7, r6
    wshift  = __CLZ(ways) & 0x1f;
  40b098:	f007 071f 	and.w	r7, r7, #31
  __ASM volatile ("dsb");
  40b09c:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  40b0a0:	695a      	ldr	r2, [r3, #20]
  40b0a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  40b0a6:	615a      	str	r2, [r3, #20]
  40b0a8:	f04f 34ff 	mov.w	r4, #4294967295
  40b0ac:	fa04 fc00 	lsl.w	ip, r4, r0
  40b0b0:	fa0e f000 	lsl.w	r0, lr, r0
  40b0b4:	40bc      	lsls	r4, r7
  40b0b6:	fa06 f707 	lsl.w	r7, r6, r7
              SCB->DCCISW = sw;
  40b0ba:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40b0bc:	4632      	mov	r2, r6
  40b0be:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40b0c0:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  40b0c4:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40b0c8:	3a01      	subs	r2, #1
  40b0ca:	4423      	add	r3, r4
  40b0cc:	f1b2 3fff 	cmp.w	r2, #4294967295
  40b0d0:	d1f6      	bne.n	40b0c0 <takeImage+0x69c>
        } while(sets--);
  40b0d2:	f10e 3eff 	add.w	lr, lr, #4294967295
  40b0d6:	4460      	add	r0, ip
  40b0d8:	f1be 3fff 	cmp.w	lr, #4294967295
  40b0dc:	d1ee      	bne.n	40b0bc <takeImage+0x698>
  40b0de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40b0e2:	f3bf 8f6f 	isb	sy
	ov_configure(BOARD_TWIHS, 2);//OV2710 RESET. Required to free up ISID7_SDdat3 for SDcard to work.  OV2655 = 2 for Reset (not needed for 2655??)
  40b0e6:	2102      	movs	r1, #2
  40b0e8:	481c      	ldr	r0, [pc, #112]	; (40b15c <takeImage+0x738>)
  40b0ea:	4b1d      	ldr	r3, [pc, #116]	; (40b160 <takeImage+0x73c>)
  40b0ec:	4798      	blx	r3
  40b0ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40b0f2:	4b14      	ldr	r3, [pc, #80]	; (40b144 <takeImage+0x720>)
  40b0f4:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
  40b0f6:	481b      	ldr	r0, [pc, #108]	; (40b164 <takeImage+0x740>)
  40b0f8:	4b14      	ldr	r3, [pc, #80]	; (40b14c <takeImage+0x728>)
  40b0fa:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40b0fc:	4a1a      	ldr	r2, [pc, #104]	; (40b168 <takeImage+0x744>)
  40b0fe:	4b1b      	ldr	r3, [pc, #108]	; (40b16c <takeImage+0x748>)
  40b100:	601a      	str	r2, [r3, #0]
	if(formatSize)RGB565toRGB888();
  40b102:	9b03      	ldr	r3, [sp, #12]
  40b104:	b10b      	cbz	r3, 40b10a <takeImage+0x6e6>
  40b106:	4b1a      	ldr	r3, [pc, #104]	; (40b170 <takeImage+0x74c>)
  40b108:	4798      	blx	r3
  40b10a:	4c1a      	ldr	r4, [pc, #104]	; (40b174 <takeImage+0x750>)
  40b10c:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40b110:	6325      	str	r5, [r4, #48]	; 0x30
  40b112:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(1);
  40b114:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40b118:	4b0c      	ldr	r3, [pc, #48]	; (40b14c <takeImage+0x728>)
  40b11a:	4798      	blx	r3
  40b11c:	6325      	str	r5, [r4, #48]	; 0x30
	printf("CAM OFF\r\n");
  40b11e:	4816      	ldr	r0, [pc, #88]	; (40b178 <takeImage+0x754>)
  40b120:	4b02      	ldr	r3, [pc, #8]	; (40b12c <takeImage+0x708>)
  40b122:	4798      	blx	r3
	char ret=0;
  40b124:	2400      	movs	r4, #0
  40b126:	e53a      	b.n	40ab9e <takeImage+0x17a>
  40b128:	004108bc 	.word	0x004108bc
  40b12c:	0040c895 	.word	0x0040c895
  40b130:	4004c000 	.word	0x4004c000
  40b134:	0040266d 	.word	0x0040266d
  40b138:	0040271d 	.word	0x0040271d
  40b13c:	e000ed00 	.word	0xe000ed00
  40b140:	004108cc 	.word	0x004108cc
  40b144:	400e1200 	.word	0x400e1200
  40b148:	0003dbc2 	.word	0x0003dbc2
  40b14c:	2040008d 	.word	0x2040008d
  40b150:	e000e100 	.word	0xe000e100
  40b154:	004108e0 	.word	0x004108e0
  40b158:	039e05b4 	.word	0x039e05b4
  40b15c:	40018000 	.word	0x40018000
  40b160:	00400335 	.word	0x00400335
  40b164:	0303af6b 	.word	0x0303af6b
  40b168:	a5000001 	.word	0xa5000001
  40b16c:	400e1850 	.word	0x400e1850
  40b170:	004079dd 	.word	0x004079dd
  40b174:	400e0e00 	.word	0x400e0e00
  40b178:	00410904 	.word	0x00410904

0040b17c <main_vendor_int_in_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  40b17c:	b100      	cbz	r0, 40b180 <main_vendor_int_in_received+0x4>
  40b17e:	4770      	bx	lr
{
  40b180:	b510      	push	{r4, lr}
  40b182:	b084      	sub	sp, #16
	udi_vendor_interrupt_out_run(
  40b184:	4c1d      	ldr	r4, [pc, #116]	; (40b1fc <main_vendor_int_in_received+0x80>)
  40b186:	4a1e      	ldr	r2, [pc, #120]	; (40b200 <main_vendor_int_in_received+0x84>)
  40b188:	f44f 7100 	mov.w	r1, #512	; 0x200
  40b18c:	4620      	mov	r0, r4
  40b18e:	4b1d      	ldr	r3, [pc, #116]	; (40b204 <main_vendor_int_in_received+0x88>)
  40b190:	4798      	blx	r3
	if((main_buf_loopback[0]=='W')&&(main_buf_loopback[1]=='D')&&(main_buf_loopback[2]=='S')){
  40b192:	7823      	ldrb	r3, [r4, #0]
  40b194:	2b57      	cmp	r3, #87	; 0x57
  40b196:	d010      	beq.n	40b1ba <main_vendor_int_in_received+0x3e>
	printf("IN: %d %d %d %d %d %d %d\r\n",main_buf_loopback[0],main_buf_loopback[1],main_buf_loopback[2],main_buf_loopback[3],main_buf_loopback[4],main_buf_loopback[5],main_buf_loopback[6]);
  40b198:	4818      	ldr	r0, [pc, #96]	; (40b1fc <main_vendor_int_in_received+0x80>)
  40b19a:	7883      	ldrb	r3, [r0, #2]
  40b19c:	7842      	ldrb	r2, [r0, #1]
  40b19e:	7801      	ldrb	r1, [r0, #0]
  40b1a0:	7984      	ldrb	r4, [r0, #6]
  40b1a2:	9403      	str	r4, [sp, #12]
  40b1a4:	7944      	ldrb	r4, [r0, #5]
  40b1a6:	9402      	str	r4, [sp, #8]
  40b1a8:	7904      	ldrb	r4, [r0, #4]
  40b1aa:	9401      	str	r4, [sp, #4]
  40b1ac:	78c0      	ldrb	r0, [r0, #3]
  40b1ae:	9000      	str	r0, [sp, #0]
  40b1b0:	4815      	ldr	r0, [pc, #84]	; (40b208 <main_vendor_int_in_received+0x8c>)
  40b1b2:	4c16      	ldr	r4, [pc, #88]	; (40b20c <main_vendor_int_in_received+0x90>)
  40b1b4:	47a0      	blx	r4
}
  40b1b6:	b004      	add	sp, #16
  40b1b8:	bd10      	pop	{r4, pc}
	if((main_buf_loopback[0]=='W')&&(main_buf_loopback[1]=='D')&&(main_buf_loopback[2]=='S')){
  40b1ba:	7863      	ldrb	r3, [r4, #1]
  40b1bc:	2b44      	cmp	r3, #68	; 0x44
  40b1be:	d1eb      	bne.n	40b198 <main_vendor_int_in_received+0x1c>
  40b1c0:	78a3      	ldrb	r3, [r4, #2]
  40b1c2:	2b53      	cmp	r3, #83	; 0x53
  40b1c4:	d1e8      	bne.n	40b198 <main_vendor_int_in_received+0x1c>
		switch(main_buf_loopback[5]){
  40b1c6:	7963      	ldrb	r3, [r4, #5]
  40b1c8:	2b02      	cmp	r3, #2
  40b1ca:	d00c      	beq.n	40b1e6 <main_vendor_int_in_received+0x6a>
  40b1cc:	2b05      	cmp	r3, #5
  40b1ce:	d012      	beq.n	40b1f6 <main_vendor_int_in_received+0x7a>
  40b1d0:	2b01      	cmp	r3, #1
  40b1d2:	d1e1      	bne.n	40b198 <main_vendor_int_in_received+0x1c>
			g_imageSize = main_buf_loopback[17];
  40b1d4:	4b09      	ldr	r3, [pc, #36]	; (40b1fc <main_vendor_int_in_received+0x80>)
  40b1d6:	7c5a      	ldrb	r2, [r3, #17]
  40b1d8:	490d      	ldr	r1, [pc, #52]	; (40b210 <main_vendor_int_in_received+0x94>)
  40b1da:	700a      	strb	r2, [r1, #0]
			takeImage(0, main_buf_loopback[14], main_buf_loopback[17]);			
  40b1dc:	7b99      	ldrb	r1, [r3, #14]
  40b1de:	2000      	movs	r0, #0
  40b1e0:	4b0c      	ldr	r3, [pc, #48]	; (40b214 <main_vendor_int_in_received+0x98>)
  40b1e2:	4798      	blx	r3
			break;
  40b1e4:	e7d8      	b.n	40b198 <main_vendor_int_in_received+0x1c>
			redBlink(main_buf_loopback[17]);
  40b1e6:	4b05      	ldr	r3, [pc, #20]	; (40b1fc <main_vendor_int_in_received+0x80>)
  40b1e8:	7c58      	ldrb	r0, [r3, #17]
  40b1ea:	4b0b      	ldr	r3, [pc, #44]	; (40b218 <main_vendor_int_in_received+0x9c>)
  40b1ec:	4798      	blx	r3
			printf("Blinked\r\n");
  40b1ee:	480b      	ldr	r0, [pc, #44]	; (40b21c <main_vendor_int_in_received+0xa0>)
  40b1f0:	4b06      	ldr	r3, [pc, #24]	; (40b20c <main_vendor_int_in_received+0x90>)
  40b1f2:	4798      	blx	r3
			break;
  40b1f4:	e7d0      	b.n	40b198 <main_vendor_int_in_received+0x1c>
			receiveUSBcamConfig();
  40b1f6:	4b0a      	ldr	r3, [pc, #40]	; (40b220 <main_vendor_int_in_received+0xa4>)
  40b1f8:	4798      	blx	r3
			break;
  40b1fa:	e7cd      	b.n	40b198 <main_vendor_int_in_received+0x1c>
  40b1fc:	20400cd0 	.word	0x20400cd0
  40b200:	00407665 	.word	0x00407665
  40b204:	00402cb5 	.word	0x00402cb5
  40b208:	004104f8 	.word	0x004104f8
  40b20c:	0040c895 	.word	0x0040c895
  40b210:	20400cca 	.word	0x20400cca
  40b214:	0040aa25 	.word	0x0040aa25
  40b218:	00408f1d 	.word	0x00408f1d
  40b21c:	004104ec 	.word	0x004104ec
  40b220:	004079b5 	.word	0x004079b5

0040b224 <main_vendor_enable>:
{
  40b224:	b510      	push	{r4, lr}
	main_b_vendor_enable = true;
  40b226:	2401      	movs	r4, #1
  40b228:	4b0b      	ldr	r3, [pc, #44]	; (40b258 <main_vendor_enable+0x34>)
  40b22a:	701c      	strb	r4, [r3, #0]
	main_vendor_int_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  40b22c:	2200      	movs	r2, #0
  40b22e:	4611      	mov	r1, r2
  40b230:	4610      	mov	r0, r2
  40b232:	4b0a      	ldr	r3, [pc, #40]	; (40b25c <main_vendor_enable+0x38>)
  40b234:	4798      	blx	r3
	g_usbFlagC=3;
  40b236:	2203      	movs	r2, #3
  40b238:	4b09      	ldr	r3, [pc, #36]	; (40b260 <main_vendor_enable+0x3c>)
  40b23a:	701a      	strb	r2, [r3, #0]
	main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  40b23c:	2200      	movs	r2, #0
  40b23e:	4611      	mov	r1, r2
  40b240:	4610      	mov	r0, r2
  40b242:	4b08      	ldr	r3, [pc, #32]	; (40b264 <main_vendor_enable+0x40>)
  40b244:	4798      	blx	r3
	main_buf_iso_sel=0;
  40b246:	2000      	movs	r0, #0
  40b248:	4b07      	ldr	r3, [pc, #28]	; (40b268 <main_vendor_enable+0x44>)
  40b24a:	7018      	strb	r0, [r3, #0]
	main_vendor_iso_out_received(UDD_EP_TRANSFER_OK, 0, 0);
  40b24c:	4602      	mov	r2, r0
  40b24e:	4601      	mov	r1, r0
  40b250:	4b06      	ldr	r3, [pc, #24]	; (40b26c <main_vendor_enable+0x48>)
  40b252:	4798      	blx	r3
}
  40b254:	4620      	mov	r0, r4
  40b256:	bd10      	pop	{r4, pc}
  40b258:	20400cce 	.word	0x20400cce
  40b25c:	0040b17d 	.word	0x0040b17d
  40b260:	20400ccd 	.word	0x20400ccd
  40b264:	004076ad 	.word	0x004076ad
  40b268:	20400ccf 	.word	0x20400ccf
  40b26c:	004077a5 	.word	0x004077a5

0040b270 <sleepPins>:
void sleepPins(void){
  40b270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pmc_enable_periph_clk(ID_PIOA);
  40b274:	200a      	movs	r0, #10
  40b276:	4ce1      	ldr	r4, [pc, #900]	; (40b5fc <sleepPins+0x38c>)
  40b278:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  40b27a:	200b      	movs	r0, #11
  40b27c:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOC);
  40b27e:	200c      	movs	r0, #12
  40b280:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  40b282:	2010      	movs	r0, #16
  40b284:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOE);
  40b286:	2011      	movs	r0, #17
  40b288:	47a0      	blx	r4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b28a:	4bdd      	ldr	r3, [pc, #884]	; (40b600 <sleepPins+0x390>)
  40b28c:	2701      	movs	r7, #1
  40b28e:	615f      	str	r7, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b290:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b294:	2602      	movs	r6, #2
  40b296:	615e      	str	r6, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b298:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b29c:	2504      	movs	r5, #4
  40b29e:	615d      	str	r5, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b2a0:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b2a4:	2440      	movs	r4, #64	; 0x40
  40b2a6:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b2a8:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b2ac:	f04f 0a80 	mov.w	sl, #128	; 0x80
  40b2b0:	f8c3 a014 	str.w	sl, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b2b4:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b2b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40b2bc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b2be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b2c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b2c6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b2c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b2cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40b2d0:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b2d2:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b2d6:	f44f 4980 	mov.w	r9, #16384	; 0x4000
  40b2da:	f8c3 9014 	str.w	r9, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b2de:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b2e2:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  40b2e6:	f8c3 8014 	str.w	r8, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b2ea:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b2ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40b2f2:	f8c3 c014 	str.w	ip, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b2f6:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b2fa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  40b2fe:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b300:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b304:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  40b308:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b30a:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b30e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  40b312:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b314:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b318:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  40b31c:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b31e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b322:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  40b326:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b328:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b32c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  40b330:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b332:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b336:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
  40b33a:	f8c3 e010 	str.w	lr, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b33e:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b342:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  40b346:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b348:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40b34c:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b34e:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b352:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b354:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b356:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b35a:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  40b35e:	f02b 0b01 	bic.w	fp, fp, #1
  40b362:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b366:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  40b36a:	f02b 0b01 	bic.w	fp, fp, #1
  40b36e:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b372:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b374:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDER = mask;
  40b378:	651e      	str	r6, [r3, #80]	; 0x50
		base->PIO_IFER = mask;
  40b37a:	621e      	str	r6, [r3, #32]
		base->PIO_IFSCDR = mask;
  40b37c:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b380:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  40b384:	f02b 0b02 	bic.w	fp, fp, #2
  40b388:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b38c:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  40b390:	f02b 0b02 	bic.w	fp, fp, #2
  40b394:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b398:	665d      	str	r5, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b39a:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b39e:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b3a0:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b3a2:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b3a6:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  40b3aa:	f02b 0b04 	bic.w	fp, fp, #4
  40b3ae:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b3b2:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  40b3b6:	f02b 0b04 	bic.w	fp, fp, #4
  40b3ba:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b3be:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b3c0:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDER = mask;
  40b3c4:	651c      	str	r4, [r3, #80]	; 0x50
		base->PIO_IFDR = mask;
  40b3c6:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b3c8:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b3cc:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  40b3d0:	f02b 0b40 	bic.w	fp, fp, #64	; 0x40
  40b3d4:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b3d8:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  40b3dc:	f02b 0b40 	bic.w	fp, fp, #64	; 0x40
  40b3e0:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b3e4:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b3e8:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDER = mask;
  40b3ec:	f8c3 a050 	str.w	sl, [r3, #80]	; 0x50
		base->PIO_IFDR = mask;
  40b3f0:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b3f4:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b3f8:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  40b3fc:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
  40b400:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b404:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40b408:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
  40b40c:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b410:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40b414:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b416:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b41a:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b41c:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b41e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b422:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  40b426:	f42a 6a00 	bic.w	sl, sl, #2048	; 0x800
  40b42a:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b42e:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40b432:	f42a 6a00 	bic.w	sl, sl, #2048	; 0x800
  40b436:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b43a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b43c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b440:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b442:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b448:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  40b44c:	f42a 5a80 	bic.w	sl, sl, #4096	; 0x1000
  40b450:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b454:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40b458:	f42a 5a80 	bic.w	sl, sl, #4096	; 0x1000
  40b45c:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b460:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b462:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b466:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b468:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b46a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b46e:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  40b472:	f42a 5a00 	bic.w	sl, sl, #8192	; 0x2000
  40b476:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b47a:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40b47e:	f42a 5a00 	bic.w	sl, sl, #8192	; 0x2000
  40b482:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b486:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b48a:	f8c3 9090 	str.w	r9, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b48e:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b492:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b496:	f8c3 9080 	str.w	r9, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b49a:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b49e:	f429 4980 	bic.w	r9, r9, #16384	; 0x4000
  40b4a2:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b4a6:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b4aa:	f429 4980 	bic.w	r9, r9, #16384	; 0x4000
  40b4ae:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b4b2:	f8c3 8064 	str.w	r8, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b4b6:	f8c3 8090 	str.w	r8, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b4ba:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b4be:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b4c2:	f8c3 8080 	str.w	r8, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b4c6:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b4ca:	f429 3900 	bic.w	r9, r9, #131072	; 0x20000
  40b4ce:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b4d2:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b4d6:	f429 3900 	bic.w	r9, r9, #131072	; 0x20000
  40b4da:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b4de:	f8c3 c064 	str.w	ip, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b4e2:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b4e6:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b4ea:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b4ee:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b4f2:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b4f6:	f429 2900 	bic.w	r9, r9, #524288	; 0x80000
  40b4fa:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b4fe:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b502:	f429 2900 	bic.w	r9, r9, #524288	; 0x80000
  40b506:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b50a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  40b50e:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b510:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b514:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b516:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b518:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b51c:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b520:	f429 0980 	bic.w	r9, r9, #4194304	; 0x400000
  40b524:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b528:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b52c:	f429 0980 	bic.w	r9, r9, #4194304	; 0x400000
  40b530:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b534:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  40b538:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b53a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b53e:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b540:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b542:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b546:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b54a:	f029 7900 	bic.w	r9, r9, #33554432	; 0x2000000
  40b54e:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b552:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b556:	f029 7900 	bic.w	r9, r9, #33554432	; 0x2000000
  40b55a:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b55e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  40b562:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b564:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b568:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b56a:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b56c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b570:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b574:	f029 6980 	bic.w	r9, r9, #67108864	; 0x4000000
  40b578:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b57c:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b580:	f029 6980 	bic.w	r9, r9, #67108864	; 0x4000000
  40b584:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b588:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  40b58c:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b58e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b592:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b594:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b596:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b59a:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b59e:	f029 6900 	bic.w	r9, r9, #134217728	; 0x8000000
  40b5a2:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b5a6:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b5aa:	f029 6900 	bic.w	r9, r9, #134217728	; 0x8000000
  40b5ae:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b5b2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  40b5b6:	6358      	str	r0, [r3, #52]	; 0x34
		base->PIO_PUER = mask;
  40b5b8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  40b5bc:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b5be:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b5c2:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b5c4:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b5c6:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b5ca:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b5ce:	f029 5900 	bic.w	r9, r9, #536870912	; 0x20000000
  40b5d2:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b5d6:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b5da:	f029 5900 	bic.w	r9, r9, #536870912	; 0x20000000
  40b5de:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b5e2:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b5e6:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b5ea:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b5ee:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b5f2:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b5f6:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b5fa:	e003      	b.n	40b604 <sleepPins+0x394>
  40b5fc:	00403819 	.word	0x00403819
  40b600:	400e0e00 	.word	0x400e0e00
  40b604:	f029 4980 	bic.w	r9, r9, #1073741824	; 0x40000000
  40b608:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b60c:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b610:	f029 4980 	bic.w	r9, r9, #1073741824	; 0x40000000
  40b614:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b618:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  40b61c:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b61e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b622:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b624:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b626:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b62a:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40b62e:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
  40b632:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b636:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40b63a:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
  40b63e:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b642:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b646:	615f      	str	r7, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b648:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b64c:	615e      	str	r6, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b64e:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b652:	615d      	str	r5, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b654:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b658:	f04f 0b10 	mov.w	fp, #16
  40b65c:	f8c3 b014 	str.w	fp, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b660:	f8c3 b0a0 	str.w	fp, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b664:	f04f 0a20 	mov.w	sl, #32
  40b668:	f8c3 a014 	str.w	sl, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b66c:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b670:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b672:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b676:	f44f 7900 	mov.w	r9, #512	; 0x200
  40b67a:	f8c3 9014 	str.w	r9, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b67e:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b682:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b684:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b688:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b68a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40b68e:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b690:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b694:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b696:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b698:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b69c:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  40b69e:	f027 0701 	bic.w	r7, r7, #1
  40b6a2:	671f      	str	r7, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b6a4:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  40b6a6:	f027 0701 	bic.w	r7, r7, #1
  40b6aa:	675f      	str	r7, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b6ac:	665e      	str	r6, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b6ae:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b6b2:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b6b4:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b6b6:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b6ba:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  40b6bc:	f026 0602 	bic.w	r6, r6, #2
  40b6c0:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b6c2:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40b6c4:	f026 0602 	bic.w	r6, r6, #2
  40b6c8:	675e      	str	r6, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b6ca:	665d      	str	r5, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b6cc:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b6d0:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b6d2:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b6d4:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b6d8:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  40b6da:	f025 0504 	bic.w	r5, r5, #4
  40b6de:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b6e0:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40b6e2:	f025 0504 	bic.w	r5, r5, #4
  40b6e6:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b6e8:	f8c3 b064 	str.w	fp, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b6ec:	f8c3 b090 	str.w	fp, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b6f0:	f8c3 b054 	str.w	fp, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b6f4:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b6f8:	f8c3 b080 	str.w	fp, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b6fc:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  40b6fe:	f025 0510 	bic.w	r5, r5, #16
  40b702:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b704:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40b706:	f025 0510 	bic.w	r5, r5, #16
  40b70a:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b70c:	f8c3 a064 	str.w	sl, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b710:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b714:	f8c3 a054 	str.w	sl, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b718:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b71c:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b720:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  40b722:	f025 0520 	bic.w	r5, r5, #32
  40b726:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b728:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40b72a:	f025 0520 	bic.w	r5, r5, #32
  40b72e:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b730:	665c      	str	r4, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b732:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b736:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b738:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b73a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b73e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40b740:	f024 0440 	bic.w	r4, r4, #64	; 0x40
  40b744:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b746:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40b748:	f024 0440 	bic.w	r4, r4, #64	; 0x40
  40b74c:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b74e:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b752:	f8c3 9090 	str.w	r9, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b756:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b75a:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b75e:	f8c3 9080 	str.w	r9, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b762:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40b764:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  40b768:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b76a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40b76c:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  40b770:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b772:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  40b774:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  40b778:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b77a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b77c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b780:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40b782:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  40b786:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b788:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40b78a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  40b78e:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b790:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b792:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b796:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b798:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b79a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b79e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40b7a0:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  40b7a4:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b7a6:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40b7a8:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  40b7ac:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b7ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b7b2:	f44f 7580 	mov.w	r5, #256	; 0x100
  40b7b6:	611d      	str	r5, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b7b8:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b7bc:	f8c3 9010 	str.w	r9, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b7c0:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b7c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40b7c8:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b7ca:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b7ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40b7d2:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b7d4:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b7d8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b7da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b7de:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b7e0:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b7e4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40b7e8:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b7ea:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b7ee:	f8c3 8014 	str.w	r8, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b7f2:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b7f6:	f8c3 c014 	str.w	ip, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b7fa:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b7fe:	f8c3 e014 	str.w	lr, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b802:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b806:	635d      	str	r5, [r3, #52]	; 0x34
  40b808:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
		base->PIO_PUDR = mask;
  40b80c:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b80e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b812:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b814:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b816:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b81a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40b81c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  40b820:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b822:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40b824:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  40b828:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b82a:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b82c:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b830:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b832:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b834:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b838:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40b83a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40b83e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b840:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40b842:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40b846:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40b848:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b84a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b84e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b850:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b856:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40b858:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40b85c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b85e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40b860:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40b864:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40b866:	461d      	mov	r5, r3
  40b868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40b86c:	662b      	str	r3, [r5, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40b86e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b872:	656b      	str	r3, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b874:	626b      	str	r3, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b876:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b87a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40b87c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40b880:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b882:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40b884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40b888:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40b88a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40b88e:	666b      	str	r3, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b890:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b894:	656b      	str	r3, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b896:	626b      	str	r3, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b898:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b89c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40b89e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40b8a2:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b8a4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40b8a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40b8aa:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40b8ac:	f8c5 8064 	str.w	r8, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b8b0:	f8c5 8090 	str.w	r8, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b8b4:	f8c5 8054 	str.w	r8, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b8b8:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b8bc:	f8c5 8080 	str.w	r8, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b8c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40b8c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  40b8c6:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b8c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40b8ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  40b8ce:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40b8d0:	4662      	mov	r2, ip
  40b8d2:	f8c5 c064 	str.w	ip, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b8d6:	f8c5 c090 	str.w	ip, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b8da:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b8de:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b8e2:	f8c5 c080 	str.w	ip, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b8e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40b8e8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  40b8ec:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b8ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40b8f0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  40b8f4:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40b8f6:	4673      	mov	r3, lr
  40b8f8:	f8c5 e064 	str.w	lr, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b8fc:	f8c5 e090 	str.w	lr, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b900:	f8c5 e054 	str.w	lr, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b904:	f8c5 e024 	str.w	lr, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b908:	f8c5 e080 	str.w	lr, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b90c:	6f29      	ldr	r1, [r5, #112]	; 0x70
  40b90e:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  40b912:	6729      	str	r1, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b914:	6f69      	ldr	r1, [r5, #116]	; 0x74
  40b916:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  40b91a:	6769      	str	r1, [r5, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b91c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
  40b920:	f504 2461 	add.w	r4, r4, #921600	; 0xe1000
  40b924:	2101      	movs	r1, #1
  40b926:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b928:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b92c:	2102      	movs	r1, #2
  40b92e:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b930:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b934:	2104      	movs	r1, #4
  40b936:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b938:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b93c:	2708      	movs	r7, #8
  40b93e:	6167      	str	r7, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b940:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b944:	46d8      	mov	r8, fp
  40b946:	f8c4 b014 	str.w	fp, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b94a:	f8c4 b0a0 	str.w	fp, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b94e:	46d1      	mov	r9, sl
  40b950:	f8c4 a014 	str.w	sl, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b954:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b958:	2140      	movs	r1, #64	; 0x40
  40b95a:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b95c:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b960:	2180      	movs	r1, #128	; 0x80
  40b962:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b964:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b968:	f44f 7180 	mov.w	r1, #256	; 0x100
  40b96c:	6121      	str	r1, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b96e:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b972:	f44f 7b00 	mov.w	fp, #512	; 0x200
  40b976:	f8c4 b014 	str.w	fp, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b97a:	f8c4 b0a0 	str.w	fp, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b97e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  40b982:	f8c4 a014 	str.w	sl, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b986:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b98a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40b98e:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b990:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b994:	f8c4 c014 	str.w	ip, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b998:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b99c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40b9a0:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b9a2:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b9a6:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
  40b9aa:	f8c4 e014 	str.w	lr, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b9ae:	f8c4 e0a0 	str.w	lr, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b9b2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  40b9b6:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b9b8:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b9bc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  40b9c0:	6160      	str	r0, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b9c2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b9c6:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b9c8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b9cc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40b9d0:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b9d2:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  40b9d6:	2101      	movs	r1, #1
  40b9d8:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40b9da:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40b9de:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40b9e0:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40b9e2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40b9e6:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40b9ea:	f02c 0c01 	bic.w	ip, ip, #1
  40b9ee:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40b9f2:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40b9f6:	f02c 0c01 	bic.w	ip, ip, #1
  40b9fa:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40b9fe:	2102      	movs	r1, #2
  40ba00:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40ba02:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40ba06:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40ba08:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40ba0a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40ba0e:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40ba12:	f02c 0c02 	bic.w	ip, ip, #2
  40ba16:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40ba1a:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40ba1e:	f02c 0c02 	bic.w	ip, ip, #2
  40ba22:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40ba26:	2104      	movs	r1, #4
  40ba28:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40ba2a:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40ba2e:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40ba30:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40ba32:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40ba36:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40ba3a:	f02c 0c04 	bic.w	ip, ip, #4
  40ba3e:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40ba42:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40ba46:	f02c 0c04 	bic.w	ip, ip, #4
  40ba4a:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40ba4e:	6667      	str	r7, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40ba50:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40ba54:	6567      	str	r7, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40ba56:	6267      	str	r7, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40ba58:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40ba5c:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40ba60:	f02c 0c08 	bic.w	ip, ip, #8
  40ba64:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40ba68:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40ba6c:	f02c 0c08 	bic.w	ip, ip, #8
  40ba70:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40ba74:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40ba78:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40ba7c:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40ba80:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40ba84:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40ba88:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40ba8c:	f02c 0c10 	bic.w	ip, ip, #16
  40ba90:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40ba94:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40ba98:	f02c 0c10 	bic.w	ip, ip, #16
  40ba9c:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40baa0:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40baa4:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40baa8:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40baac:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bab0:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bab4:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40bab8:	f02c 0c20 	bic.w	ip, ip, #32
  40babc:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bac0:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40bac4:	f02c 0c20 	bic.w	ip, ip, #32
  40bac8:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40bacc:	2140      	movs	r1, #64	; 0x40
  40bace:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bad0:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bad4:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bad6:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bad8:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40badc:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40bae0:	f02c 0c40 	bic.w	ip, ip, #64	; 0x40
  40bae4:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bae8:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40baec:	f02c 0c40 	bic.w	ip, ip, #64	; 0x40
  40baf0:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40baf4:	2180      	movs	r1, #128	; 0x80
  40baf6:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40baf8:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bafc:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bafe:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bb00:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bb04:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40bb08:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40bb0c:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bb10:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40bb14:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40bb18:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bb1c:	f44f 7180 	mov.w	r1, #256	; 0x100
  40bb20:	6361      	str	r1, [r4, #52]	; 0x34
		base->PIO_PUER = mask;
  40bb22:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bb26:	f8c4 b090 	str.w	fp, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bb2a:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bb2e:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bb32:	f8c4 b080 	str.w	fp, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bb36:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40bb3a:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  40bb3e:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bb42:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40bb46:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  40bb4a:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40bb4e:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bb52:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bb56:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bb5a:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bb5e:	f8c4 a080 	str.w	sl, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bb62:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40bb66:	f42c 6c80 	bic.w	ip, ip, #1024	; 0x400
  40bb6a:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bb6e:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40bb72:	f42c 6c80 	bic.w	ip, ip, #1024	; 0x400
  40bb76:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40bb7a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40bb7e:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bb80:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bb84:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bb86:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bb88:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bb8c:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40bb90:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  40bb94:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bb98:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40bb9c:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  40bba0:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40bba4:	6662      	str	r2, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bba6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bbaa:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bbac:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bbae:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bbb2:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40bbb4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  40bbb8:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bbba:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40bbbc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  40bbc0:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40bbc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40bbc6:	6662      	str	r2, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bbc8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bbcc:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bbce:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bbd0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bbd4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40bbd6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40bbda:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bbdc:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40bbde:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40bbe2:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40bbe4:	f8c4 e064 	str.w	lr, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bbe8:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bbec:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bbf0:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bbf4:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bbf8:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40bbfa:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  40bbfe:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bc00:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40bc02:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  40bc06:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40bc08:	6666      	str	r6, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bc0a:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bc0e:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bc10:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bc12:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bc16:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40bc18:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  40bc1c:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bc1e:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40bc20:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  40bc24:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40bc26:	6660      	str	r0, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bc28:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bc2c:	6560      	str	r0, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bc2e:	6260      	str	r0, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bc30:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bc34:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40bc36:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
  40bc3a:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bc3c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40bc3e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
  40bc42:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40bc44:	6663      	str	r3, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bc46:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bc4a:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bc4c:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bc4e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bc52:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40bc54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  40bc58:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bc5a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40bc5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  40bc60:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40bc62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  40bc66:	6663      	str	r3, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40bc68:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bc6c:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bc6e:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bc70:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bc74:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40bc76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40bc7a:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bc7c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40bc7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40bc82:	6763      	str	r3, [r4, #116]	; 0x74
 	resetPinsISI();
  40bc84:	4bcc      	ldr	r3, [pc, #816]	; (40bfb8 <sleepPins+0xd48>)
  40bc86:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bc88:	4ecc      	ldr	r6, [pc, #816]	; (40bfbc <sleepPins+0xd4c>)
  40bc8a:	6177      	str	r7, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bc8c:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bc90:	f8c6 8014 	str.w	r8, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bc94:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bc98:	f8c6 9010 	str.w	r9, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bc9c:	f8c6 90a0 	str.w	r9, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bca0:	f8c6 b010 	str.w	fp, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bca4:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bca8:	f8c6 a010 	str.w	sl, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bcac:	f8c6 a0a0 	str.w	sl, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bcb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  40bcb4:	6131      	str	r1, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bcb6:	f8c6 10a0 	str.w	r1, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bcba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40bcbe:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bcc0:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_PUDR = mask;
  40bcc4:	6637      	str	r7, [r6, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40bcc6:	f8c6 7090 	str.w	r7, [r6, #144]	; 0x90
		base->PIO_MDER = mask;
  40bcca:	6537      	str	r7, [r6, #80]	; 0x50
		base->PIO_IFDR = mask;
  40bccc:	6277      	str	r7, [r6, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bcce:	f8c6 7080 	str.w	r7, [r6, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bcd2:	6f33      	ldr	r3, [r6, #112]	; 0x70
  40bcd4:	f023 0308 	bic.w	r3, r3, #8
  40bcd8:	6733      	str	r3, [r6, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bcda:	6f73      	ldr	r3, [r6, #116]	; 0x74
  40bcdc:	f023 0308 	bic.w	r3, r3, #8
  40bce0:	6773      	str	r3, [r6, #116]	; 0x74
		base->PIO_PUDR = mask;
  40bce2:	f8c6 8060 	str.w	r8, [r6, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40bce6:	f8c6 8090 	str.w	r8, [r6, #144]	; 0x90
		base->PIO_MDER = mask;
  40bcea:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
		base->PIO_IFDR = mask;
  40bcee:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bcf2:	f8c6 8080 	str.w	r8, [r6, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bcf6:	6f33      	ldr	r3, [r6, #112]	; 0x70
  40bcf8:	f023 0310 	bic.w	r3, r3, #16
  40bcfc:	6733      	str	r3, [r6, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bcfe:	6f73      	ldr	r3, [r6, #116]	; 0x74
  40bd00:	f023 0310 	bic.w	r3, r3, #16
  40bd04:	6773      	str	r3, [r6, #116]	; 0x74
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bd06:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
  40bd0a:	f8c6 b034 	str.w	fp, [r6, #52]	; 0x34
  40bd0e:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
  40bd12:	6371      	str	r1, [r6, #52]	; 0x34
  40bd14:	6372      	str	r2, [r6, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bd16:	4baa      	ldr	r3, [pc, #680]	; (40bfc0 <sleepPins+0xd50>)
  40bd18:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bd1a:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bd1e:	635f      	str	r7, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bd20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40bd24:	616b      	str	r3, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bd26:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		base->PIO_PUDR = mask;
  40bd2a:	662b      	str	r3, [r5, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40bd2c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
		base->PIO_MDER = mask;
  40bd30:	652b      	str	r3, [r5, #80]	; 0x50
		base->PIO_IFDR = mask;
  40bd32:	626b      	str	r3, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bd34:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bd38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40bd3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  40bd3e:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bd40:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40bd42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  40bd46:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bd48:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  40bd4c:	f8c4 c010 	str.w	ip, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bd50:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bd54:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  40bd58:	f8c4 e010 	str.w	lr, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bd5c:	f8c4 e0a0 	str.w	lr, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bd60:	6121      	str	r1, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bd62:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bd66:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  40bd6a:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bd6c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bd70:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bd72:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bd76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  40bd7a:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bd7c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bd80:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
  40bd84:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  40bd88:	6361      	str	r1, [r4, #52]	; 0x34
  40bd8a:	6360      	str	r0, [r4, #52]	; 0x34
  40bd8c:	6362      	str	r2, [r4, #52]	; 0x34
  40bd8e:	6363      	str	r3, [r4, #52]	; 0x34
	resetPinsSDRAM();
  40bd90:	4b8c      	ldr	r3, [pc, #560]	; (40bfc4 <sleepPins+0xd54>)
  40bd92:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bd94:	f44f 7380 	mov.w	r3, #256	; 0x100
  40bd98:	6133      	str	r3, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bd9a:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bd9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40bda2:	6133      	str	r3, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bda4:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bda8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40bdac:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bdae:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bdb2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40bdb6:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bdb8:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bdbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40bdc0:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bdc2:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bdc6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40bdca:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bdcc:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bdd0:	f44f 7180 	mov.w	r1, #256	; 0x100
  40bdd4:	6371      	str	r1, [r6, #52]	; 0x34
  40bdd6:	6373      	str	r3, [r6, #52]	; 0x34
  40bdd8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40bddc:	6371      	str	r1, [r6, #52]	; 0x34
  40bdde:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40bde2:	6371      	str	r1, [r6, #52]	; 0x34
  40bde4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40bde8:	6371      	str	r1, [r6, #52]	; 0x34
  40bdea:	6372      	str	r2, [r6, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bdec:	2201      	movs	r2, #1
  40bdee:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bdf0:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bdf4:	2202      	movs	r2, #2
  40bdf6:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bdf8:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bdfc:	2204      	movs	r2, #4
  40bdfe:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be00:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be04:	612f      	str	r7, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be06:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be0a:	f8c5 8010 	str.w	r8, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be0e:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be12:	f8c5 9010 	str.w	r9, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be16:	f8c5 90a0 	str.w	r9, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be1a:	2240      	movs	r2, #64	; 0x40
  40be1c:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be1e:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be22:	2280      	movs	r2, #128	; 0x80
  40be24:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be26:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be2a:	612b      	str	r3, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be2c:	462b      	mov	r3, r5
  40be2e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  40be32:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be36:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  40be3a:	f8c5 a010 	str.w	sl, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be3e:	f8c5 a0a0 	str.w	sl, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be42:	4689      	mov	r9, r1
  40be44:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be46:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be4a:	f44f 1800 	mov.w	r8, #2097152	; 0x200000
  40be4e:	f8c5 8010 	str.w	r8, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be52:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be56:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40be5a:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be5c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be60:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  40be64:	6128      	str	r0, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be66:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40be6e:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be70:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40be78:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be7a:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40be82:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be84:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40be8c:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be8e:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40be96:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40be98:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40be9c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40bea0:	6129      	str	r1, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bea2:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bea6:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
  40beaa:	f8c5 b010 	str.w	fp, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40beae:	f8c5 b0a0 	str.w	fp, [r5, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40beb2:	2201      	movs	r2, #1
  40beb4:	636a      	str	r2, [r5, #52]	; 0x34
  40beb6:	f04f 0c02 	mov.w	ip, #2
  40beba:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
  40bebe:	f04f 0e04 	mov.w	lr, #4
  40bec2:	f8c5 e034 	str.w	lr, [r5, #52]	; 0x34
  40bec6:	636f      	str	r7, [r5, #52]	; 0x34
  40bec8:	2610      	movs	r6, #16
  40beca:	636e      	str	r6, [r5, #52]	; 0x34
  40becc:	2520      	movs	r5, #32
  40bece:	635d      	str	r5, [r3, #52]	; 0x34
  40bed0:	2540      	movs	r5, #64	; 0x40
  40bed2:	635d      	str	r5, [r3, #52]	; 0x34
  40bed4:	2580      	movs	r5, #128	; 0x80
  40bed6:	635d      	str	r5, [r3, #52]	; 0x34
  40bed8:	635c      	str	r4, [r3, #52]	; 0x34
  40beda:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
  40bede:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  40bee2:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  40bee6:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  40beea:	635d      	str	r5, [r3, #52]	; 0x34
  40beec:	6358      	str	r0, [r3, #52]	; 0x34
  40beee:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  40bef2:	635d      	str	r5, [r3, #52]	; 0x34
  40bef4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  40bef8:	635d      	str	r5, [r3, #52]	; 0x34
  40befa:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  40befe:	635d      	str	r5, [r3, #52]	; 0x34
  40bf00:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  40bf04:	635d      	str	r5, [r3, #52]	; 0x34
  40bf06:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40bf0a:	635d      	str	r5, [r3, #52]	; 0x34
  40bf0c:	6359      	str	r1, [r3, #52]	; 0x34
  40bf0e:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bf12:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40bf16:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  40bf1a:	f8c3 b010 	str.w	fp, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bf1e:	f8c3 b0a0 	str.w	fp, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bf22:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
  40bf26:	f8c3 a010 	str.w	sl, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bf2a:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bf2e:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bf30:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bf34:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  40bf38:	f8c3 9010 	str.w	r9, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bf3c:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bf40:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  40bf44:	f8c3 8010 	str.w	r8, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bf48:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bf4c:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bf4e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bf52:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bf54:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bf58:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
  40bf5c:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
  40bf60:	635c      	str	r4, [r3, #52]	; 0x34
  40bf62:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  40bf66:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  40bf6a:	6358      	str	r0, [r3, #52]	; 0x34
  40bf6c:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_PUDR = mask;
  40bf6e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40bf72:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40bf74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40bf78:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40bf7a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40bf7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40bf80:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40bf82:	f021 0101 	bic.w	r1, r1, #1
  40bf86:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40bf88:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40bf8a:	f021 0101 	bic.w	r1, r1, #1
  40bf8e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40bf90:	601a      	str	r2, [r3, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bf92:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bf94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bf98:	f8c3 c010 	str.w	ip, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bf9c:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bfa0:	f8c3 e010 	str.w	lr, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bfa4:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bfa8:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bfaa:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bfae:	611e      	str	r6, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bfb0:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  40bfb4:	e008      	b.n	40bfc8 <sleepPins+0xd58>
  40bfb6:	bf00      	nop
  40bfb8:	0040a821 	.word	0x0040a821
  40bfbc:	400e0e00 	.word	0x400e0e00
  40bfc0:	400e1000 	.word	0x400e1000
  40bfc4:	00408f71 	.word	0x00408f71
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40bfc8:	2120      	movs	r1, #32
  40bfca:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bfcc:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bfd0:	635a      	str	r2, [r3, #52]	; 0x34
  40bfd2:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
  40bfd6:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
  40bfda:	635f      	str	r7, [r3, #52]	; 0x34
  40bfdc:	635e      	str	r6, [r3, #52]	; 0x34
  40bfde:	6359      	str	r1, [r3, #52]	; 0x34
  40bfe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040bfe4 <floatCamForSDCard>:
}
/***********************************************************************
 *    FLOAT ISI PINS
 ***********************************************************************/
//NOT YET SURE WHAT CAM PINS MIGHT SOMETIMES MESS UP SD CARD !!!!!!!!!!!!!!!
void floatCamForSDCard(void){
  40bfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	resetPinsISI();
  40bfe8:	4b89      	ldr	r3, [pc, #548]	; (40c210 <floatCamForSDCard+0x22c>)
  40bfea:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bfec:	4b89      	ldr	r3, [pc, #548]	; (40c214 <floatCamForSDCard+0x230>)
  40bfee:	f44f 0a80 	mov.w	sl, #4194304	; 0x400000
  40bff2:	f8c3 a014 	str.w	sl, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40bff6:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40bffa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40bffe:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c000:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c004:	4c84      	ldr	r4, [pc, #528]	; (40c218 <floatCamForSDCard+0x234>)
  40c006:	f04f 0908 	mov.w	r9, #8
  40c00a:	f8c4 9014 	str.w	r9, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c00e:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c012:	4a82      	ldr	r2, [pc, #520]	; (40c21c <floatCamForSDCard+0x238>)
  40c014:	f44f 7800 	mov.w	r8, #512	; 0x200
  40c018:	f8c2 8014 	str.w	r8, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c01c:	f8c2 80a0 	str.w	r8, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c020:	f04f 0c20 	mov.w	ip, #32
  40c024:	f8c2 c014 	str.w	ip, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c028:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c02c:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  40c030:	f8c3 e014 	str.w	lr, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c034:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c038:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  40c03c:	615f      	str	r7, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c03e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c042:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  40c046:	6156      	str	r6, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c048:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c04c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  40c050:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c052:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c056:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  40c05a:	615d      	str	r5, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c05c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c060:	6150      	str	r0, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c062:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c066:	6151      	str	r1, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c068:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  40c06c:	f8c3 a064 	str.w	sl, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c070:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c074:	f8c3 a054 	str.w	sl, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c078:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c07c:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c080:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  40c084:	f42a 0a80 	bic.w	sl, sl, #4194304	; 0x400000
  40c088:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c08c:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40c090:	f42a 0a80 	bic.w	sl, sl, #4194304	; 0x400000
  40c094:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40c098:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c09a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c09e:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c0a0:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c0a2:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c0a6:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  40c0aa:	f42a 1a00 	bic.w	sl, sl, #2097152	; 0x200000
  40c0ae:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c0b2:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40c0b6:	f42a 1a00 	bic.w	sl, sl, #2097152	; 0x200000
  40c0ba:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40c0be:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c0c2:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c0c6:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c0ca:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c0ce:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c0d2:	f8d4 9070 	ldr.w	r9, [r4, #112]	; 0x70
  40c0d6:	f029 0908 	bic.w	r9, r9, #8
  40c0da:	f8c4 9070 	str.w	r9, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c0de:	f8d4 9074 	ldr.w	r9, [r4, #116]	; 0x74
  40c0e2:	f029 0908 	bic.w	r9, r9, #8
  40c0e6:	f8c4 9074 	str.w	r9, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40c0ea:	f8c2 8064 	str.w	r8, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c0ee:	f8c2 8090 	str.w	r8, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c0f2:	f8c2 8054 	str.w	r8, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c0f6:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c0fa:	f8c2 8080 	str.w	r8, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c0fe:	6f14      	ldr	r4, [r2, #112]	; 0x70
  40c100:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  40c104:	6714      	str	r4, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c106:	6f54      	ldr	r4, [r2, #116]	; 0x74
  40c108:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  40c10c:	6754      	str	r4, [r2, #116]	; 0x74
		base->PIO_PUER = mask;
  40c10e:	f8c2 c064 	str.w	ip, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c112:	f8c2 c090 	str.w	ip, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c116:	f8c2 c054 	str.w	ip, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c11a:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c11e:	f8c2 c080 	str.w	ip, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c122:	6f14      	ldr	r4, [r2, #112]	; 0x70
  40c124:	f024 0420 	bic.w	r4, r4, #32
  40c128:	6714      	str	r4, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c12a:	6f54      	ldr	r4, [r2, #116]	; 0x74
  40c12c:	f024 0420 	bic.w	r4, r4, #32
  40c130:	6754      	str	r4, [r2, #116]	; 0x74
		base->PIO_PUER = mask;
  40c132:	f8c3 e064 	str.w	lr, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c136:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c13a:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c13e:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c142:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c146:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40c148:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  40c14c:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c14e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40c150:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  40c154:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40c156:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c158:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c15c:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c15e:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c160:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c164:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40c166:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  40c16a:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c16c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40c16e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  40c172:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40c174:	6656      	str	r6, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c176:	f8c2 6090 	str.w	r6, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c17a:	6556      	str	r6, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c17c:	6256      	str	r6, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c17e:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c182:	6f14      	ldr	r4, [r2, #112]	; 0x70
  40c184:	f024 6400 	bic.w	r4, r4, #134217728	; 0x8000000
  40c188:	6714      	str	r4, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c18a:	6f54      	ldr	r4, [r2, #116]	; 0x74
  40c18c:	f024 6400 	bic.w	r4, r4, #134217728	; 0x8000000
  40c190:	6754      	str	r4, [r2, #116]	; 0x74
		base->PIO_PUER = mask;
  40c192:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c194:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c198:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c19a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c19c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c1a0:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40c1a2:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
  40c1a6:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c1a8:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40c1aa:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
  40c1ae:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40c1b0:	665d      	str	r5, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c1b2:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c1b6:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c1b8:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c1ba:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c1be:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40c1c0:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
  40c1c4:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c1c6:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40c1c8:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
  40c1cc:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40c1ce:	6650      	str	r0, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c1d0:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c1d4:	6550      	str	r0, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c1d6:	6250      	str	r0, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c1d8:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c1dc:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40c1de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40c1e2:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c1e4:	6f53      	ldr	r3, [r2, #116]	; 0x74
  40c1e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40c1ea:	6753      	str	r3, [r2, #116]	; 0x74
		base->PIO_PUER = mask;
  40c1ec:	6651      	str	r1, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c1ee:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c1f2:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c1f4:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c1f6:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c1fa:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40c1fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40c200:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c202:	6f53      	ldr	r3, [r2, #116]	; 0x74
  40c204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40c208:	6753      	str	r3, [r2, #116]	; 0x74
  40c20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c20e:	bf00      	nop
  40c210:	0040a821 	.word	0x0040a821
  40c214:	400e1400 	.word	0x400e1400
  40c218:	400e1000 	.word	0x400e1000
  40c21c:	400e0e00 	.word	0x400e0e00

0040c220 <wdt_init>:
/***********************************************************************
 *    WATCHDOG INIT
 ***********************************************************************/
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
uint16_t us_delta)
{
  40c220:	b410      	push	{r4}
	p_wdt->WDT_MR = ul_mode |
	WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
  40c222:	4c05      	ldr	r4, [pc, #20]	; (40c238 <wdt_init+0x18>)
  40c224:	ea04 4303 	and.w	r3, r4, r3, lsl #16
  40c228:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40c22c:	4313      	orrs	r3, r2
  40c22e:	430b      	orrs	r3, r1
	p_wdt->WDT_MR = ul_mode |
  40c230:	6043      	str	r3, [r0, #4]
}
  40c232:	f85d 4b04 	ldr.w	r4, [sp], #4
  40c236:	4770      	bx	lr
  40c238:	0fff0000 	.word	0x0fff0000

0040c23c <main>:
{
  40c23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c240:	b08d      	sub	sp, #52	; 0x34
	bootSource = (RSTC->RSTC_SR & RSTC_SR_RSTTYP_Msk);
  40c242:	4bae      	ldr	r3, [pc, #696]	; (40c4fc <main+0x2c0>)
  40c244:	685e      	ldr	r6, [r3, #4]
	cpu_irq_enable();//
  40c246:	f04f 0801 	mov.w	r8, #1
  40c24a:	4bad      	ldr	r3, [pc, #692]	; (40c500 <main+0x2c4>)
  40c24c:	f883 8000 	strb.w	r8, [r3]
  __ASM volatile ("dmb");
  40c250:	f3bf 8f5f 	dmb	sy
  40c254:	b662      	cpsie	i
	sysclk_init();
  40c256:	4fab      	ldr	r7, [pc, #684]	; (40c504 <main+0x2c8>)
  40c258:	47b8      	blx	r7
	board_init();
  40c25a:	4dab      	ldr	r5, [pc, #684]	; (40c508 <main+0x2cc>)
  40c25c:	47a8      	blx	r5
		sleepmgr_locks[i] = 0;
  40c25e:	4bab      	ldr	r3, [pc, #684]	; (40c50c <main+0x2d0>)
  40c260:	2400      	movs	r4, #0
  40c262:	701c      	strb	r4, [r3, #0]
  40c264:	705c      	strb	r4, [r3, #1]
  40c266:	709c      	strb	r4, [r3, #2]
  40c268:	70dc      	strb	r4, [r3, #3]
  40c26a:	711c      	strb	r4, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  40c26c:	f883 8005 	strb.w	r8, [r3, #5]
	sysclk_init();
  40c270:	47b8      	blx	r7
	board_init();
  40c272:	47a8      	blx	r5
	wdt_init(WDT, wdt_mode, timeout_value, timeout_value);
  40c274:	4fa6      	ldr	r7, [pc, #664]	; (40c510 <main+0x2d4>)
  40c276:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40c27a:	461a      	mov	r2, r3
  40c27c:	49a5      	ldr	r1, [pc, #660]	; (40c514 <main+0x2d8>)
  40c27e:	4638      	mov	r0, r7
  40c280:	4da5      	ldr	r5, [pc, #660]	; (40c518 <main+0x2dc>)
  40c282:	47a8      	blx	r5
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40c284:	4ba5      	ldr	r3, [pc, #660]	; (40c51c <main+0x2e0>)
  40c286:	2510      	movs	r5, #16
  40c288:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40c28c:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40c290:	f883 4304 	strb.w	r4, [r3, #772]	; 0x304
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40c294:	601d      	str	r5, [r3, #0]
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c296:	4ba2      	ldr	r3, [pc, #648]	; (40c520 <main+0x2e4>)
  40c298:	603b      	str	r3, [r7, #0]
  40c29a:	200a      	movs	r0, #10
  40c29c:	4ca1      	ldr	r4, [pc, #644]	; (40c524 <main+0x2e8>)
  40c29e:	47a0      	blx	r4
  40c2a0:	200b      	movs	r0, #11
  40c2a2:	47a0      	blx	r4
  40c2a4:	200c      	movs	r0, #12
  40c2a6:	47a0      	blx	r4
  40c2a8:	4628      	mov	r0, r5
  40c2aa:	47a0      	blx	r4
	configure_console();  //pmc_enable_pllack messes up the console speed
  40c2ac:	4c9e      	ldr	r4, [pc, #632]	; (40c528 <main+0x2ec>)
  40c2ae:	47a0      	blx	r4
	configure_console();  //pmc_enable_pllack messes up the console speed
  40c2b0:	47a0      	blx	r4
	printf("\r\nBOOT GOOD ");
  40c2b2:	489e      	ldr	r0, [pc, #632]	; (40c52c <main+0x2f0>)
  40c2b4:	4b9e      	ldr	r3, [pc, #632]	; (40c530 <main+0x2f4>)
  40c2b6:	4798      	blx	r3
	bootSource = (RSTC->RSTC_SR & RSTC_SR_RSTTYP_Msk);
  40c2b8:	f406 66e0 	and.w	r6, r6, #1792	; 0x700
	if(bootSource!=RSTC_SR_RSTTYP_BACKUP_RST){//Assume POWER-UP RESET  STAKE_EEE
  40c2bc:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
  40c2c0:	f000 81e1 	beq.w	40c686 <main+0x44a>
		pmc_enable_periph_clk(ID_PIOC);
  40c2c4:	200c      	movs	r0, #12
  40c2c6:	4b97      	ldr	r3, [pc, #604]	; (40c524 <main+0x2e8>)
  40c2c8:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c2ca:	4c9a      	ldr	r4, [pc, #616]	; (40c534 <main+0x2f8>)
  40c2cc:	2304      	movs	r3, #4
  40c2ce:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c2d0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  40c2d4:	6663      	str	r3, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c2d6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c2da:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c2dc:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c2de:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c2e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40c2e4:	f023 0304 	bic.w	r3, r3, #4
  40c2e8:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c2ea:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40c2ec:	f023 0304 	bic.w	r3, r3, #4
  40c2f0:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40c2f2:	4d91      	ldr	r5, [pc, #580]	; (40c538 <main+0x2fc>)
  40c2f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40c2f8:	612b      	str	r3, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c2fa:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40c2fe:	f44f 6780 	mov.w	r7, #1024	; 0x400
  40c302:	612f      	str	r7, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c304:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
		delay_ms(200);//looked fine even at only 1ms (when repeated every 500ms);
  40c308:	f8df 8278 	ldr.w	r8, [pc, #632]	; 40c584 <main+0x348>
  40c30c:	4640      	mov	r0, r8
  40c30e:	4e8b      	ldr	r6, [pc, #556]	; (40c53c <main+0x300>)
  40c310:	47b0      	blx	r6
		twi_init_RTC();
  40c312:	4b8b      	ldr	r3, [pc, #556]	; (40c540 <main+0x304>)
  40c314:	4798      	blx	r3
		delay_ms(500);//
  40c316:	488b      	ldr	r0, [pc, #556]	; (40c544 <main+0x308>)
  40c318:	47b0      	blx	r6
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c31a:	616f      	str	r7, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c31c:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
		base->PIO_PUER = mask;
  40c320:	666f      	str	r7, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40c322:	f8c5 7090 	str.w	r7, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40c326:	656f      	str	r7, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40c328:	626f      	str	r7, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40c32a:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40c32e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40c330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  40c334:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40c336:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40c338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  40c33c:	676b      	str	r3, [r5, #116]	; 0x74
		rtcData[0]=0x00;//write to Address 0x00  SET ALL
  40c33e:	2500      	movs	r5, #0
  40c340:	f88d 5014 	strb.w	r5, [sp, #20]
		rtcData[1]=0x02;//contents of Addr 0x00 CTL1
  40c344:	f04f 0902 	mov.w	r9, #2
  40c348:	f88d 9015 	strb.w	r9, [sp, #21]
		rtcData[2]=0x00;//contents of Addr 0x01 CTL2
  40c34c:	f88d 5016 	strb.w	r5, [sp, #22]
		rtcData[3]=0x00;//contents of Addr 0x02 CTL3
  40c350:	f88d 5017 	strb.w	r5, [sp, #23]
		rtcData[4]=SET_SECOND;//contents of Addr 0x03 SECONDS works
  40c354:	f88d 5018 	strb.w	r5, [sp, #24]
		rtcData[5]=SET_MINUTE;//contents of Addr 0x04 MINUTES works
  40c358:	f88d 5019 	strb.w	r5, [sp, #25]
		rtcData[6]=SET_HOUR;//contents of Addr 0x05 HOURS works
  40c35c:	2308      	movs	r3, #8
  40c35e:	f88d 301a 	strb.w	r3, [sp, #26]
		rtcData[7]=SET_DAY;//contents of Addr 0x06 DAYS
  40c362:	f88d 901b 	strb.w	r9, [sp, #27]
		rtcData[8]=0x02;//contents of Addr 0x07 WEEKDAY
  40c366:	f88d 901c 	strb.w	r9, [sp, #28]
		rtcData[9]=SET_MONTH;//contents of Addr 0x08 MONTH
  40c36a:	f04f 0b01 	mov.w	fp, #1
  40c36e:	f88d b01d 	strb.w	fp, [sp, #29]
		rtcData[0x0A]=SET_YEAR;//contents of Addr 0x09 YEAR
  40c372:	2317      	movs	r3, #23
  40c374:	f88d 301e 	strb.w	r3, [sp, #30]
		rtcData[0x0B]=0x80;//contents of Addr 0x0A  0x80 = second alarm disabled
  40c378:	2380      	movs	r3, #128	; 0x80
  40c37a:	f88d 301f 	strb.w	r3, [sp, #31]
		rtcData[0x0C]=0x80;//contents of Addr 0x0B  0x80 = minute alarm disabled
  40c37e:	f88d 3020 	strb.w	r3, [sp, #32]
		rtcData[0x0D]=0x80;//contents of Addr 0x0C  0x80 = Hour alarm disabled
  40c382:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		rtcData[0x0E]=0x80;//contents of Addr 0x0D  0x80 = day alarm disabled
  40c386:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		rtcData[0x0F]=0x80;//contents of Addr 0x0E  0x80 = weekday alarm disabled
  40c38a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		rtcData[0x10]=0x00;//contents of Addr 0x0F  0x00 = temperature clockout period 4 minutes
  40c38e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
		rtcData[0x11]=0x00;//contents of Addr 0x10  20=PULSED INTERRUPT
  40c392:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
		writeRet = write_data_RTC(rtcData,18);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c396:	2112      	movs	r1, #18
  40c398:	a805      	add	r0, sp, #20
  40c39a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 40c578 <main+0x33c>
  40c39e:	47d0      	blx	sl
		delay_ms(200);//
  40c3a0:	4640      	mov	r0, r8
  40c3a2:	47b0      	blx	r6
		rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40c3a4:	f88d b014 	strb.w	fp, [sp, #20]
		rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  40c3a8:	f04f 0330 	mov.w	r3, #48	; 0x30
  40c3ac:	f88d 3015 	strb.w	r3, [sp, #21]
		write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c3b0:	4649      	mov	r1, r9
  40c3b2:	a805      	add	r0, sp, #20
  40c3b4:	47d0      	blx	sl
		delay_ms(1000);
  40c3b6:	4864      	ldr	r0, [pc, #400]	; (40c548 <main+0x30c>)
  40c3b8:	47b0      	blx	r6
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c3ba:	4f55      	ldr	r7, [pc, #340]	; (40c510 <main+0x2d4>)
  40c3bc:	f8df 8160 	ldr.w	r8, [pc, #352]	; 40c520 <main+0x2e4>
  40c3c0:	f8c7 8000 	str.w	r8, [r7]
		rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40c3c4:	f88d b014 	strb.w	fp, [sp, #20]
		rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  40c3c8:	f04f 0330 	mov.w	r3, #48	; 0x30
  40c3cc:	f88d 3015 	strb.w	r3, [sp, #21]
		write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c3d0:	4649      	mov	r1, r9
  40c3d2:	a805      	add	r0, sp, #20
  40c3d4:	47d0      	blx	sl
		rtcData[0]=0x03;//
  40c3d6:	2303      	movs	r3, #3
  40c3d8:	f88d 3014 	strb.w	r3, [sp, #20]
		write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c3dc:	4659      	mov	r1, fp
  40c3de:	a805      	add	r0, sp, #20
  40c3e0:	47d0      	blx	sl
		delay_ms(1);//
  40c3e2:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c3e6:	47b0      	blx	r6
		read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  40c3e8:	2107      	movs	r1, #7
  40c3ea:	a805      	add	r0, sp, #20
  40c3ec:	4b57      	ldr	r3, [pc, #348]	; (40c54c <main+0x310>)
  40c3ee:	4798      	blx	r3
		delay_ms(1000);
  40c3f0:	4855      	ldr	r0, [pc, #340]	; (40c548 <main+0x30c>)
  40c3f2:	47b0      	blx	r6
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c3f4:	f8c7 8000 	str.w	r8, [r7]
		printf("  %X-%X-%X  %X:%X:%X %X \r\n",rtcData[5],rtcData[3],rtcData[6],rtcData[2],rtcData[1],rtcData[0],rtcData[7]);
  40c3f8:	f89d 301a 	ldrb.w	r3, [sp, #26]
  40c3fc:	f89d 2017 	ldrb.w	r2, [sp, #23]
  40c400:	f89d 1019 	ldrb.w	r1, [sp, #25]
  40c404:	f89d 001b 	ldrb.w	r0, [sp, #27]
  40c408:	9003      	str	r0, [sp, #12]
  40c40a:	f89d 0014 	ldrb.w	r0, [sp, #20]
  40c40e:	9002      	str	r0, [sp, #8]
  40c410:	f89d 0015 	ldrb.w	r0, [sp, #21]
  40c414:	9001      	str	r0, [sp, #4]
  40c416:	f89d 0016 	ldrb.w	r0, [sp, #22]
  40c41a:	9000      	str	r0, [sp, #0]
  40c41c:	484c      	ldr	r0, [pc, #304]	; (40c550 <main+0x314>)
  40c41e:	f8df a110 	ldr.w	sl, [pc, #272]	; 40c530 <main+0x2f4>
  40c422:	47d0      	blx	sl
 		sleepPins();
  40c424:	4b4b      	ldr	r3, [pc, #300]	; (40c554 <main+0x318>)
  40c426:	4798      	blx	r3
		floatCamForSDCard();//Needs this after sleep pins.
  40c428:	4b4b      	ldr	r3, [pc, #300]	; (40c558 <main+0x31c>)
  40c42a:	4798      	blx	r3
		oneDayToSD(22,0);
  40c42c:	4629      	mov	r1, r5
  40c42e:	2016      	movs	r0, #22
  40c430:	4b4a      	ldr	r3, [pc, #296]	; (40c55c <main+0x320>)
  40c432:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40c434:	f44f 7980 	mov.w	r9, #256	; 0x100
  40c438:	f8c4 9010 	str.w	r9, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c43c:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40c440:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
		configure_console();  //pmc_enable_pllack messes up the console speed
  40c444:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 40c528 <main+0x2ec>
  40c448:	47d8      	blx	fp
		configure_console();  //pmc_enable_pllack messes up the console speed
  40c44a:	47d8      	blx	fp
		printf("\r\nTEST GOOD\r\n");
  40c44c:	4844      	ldr	r0, [pc, #272]	; (40c560 <main+0x324>)
  40c44e:	47d0      	blx	sl
		SCB_EnableDCache();//for SD to work twice in a row, have to enable DCache before cleanInvalidate,disable.
  40c450:	4b44      	ldr	r3, [pc, #272]	; (40c564 <main+0x328>)
  40c452:	4798      	blx	r3
		SCB_CleanInvalidateDCache();
  40c454:	4b44      	ldr	r3, [pc, #272]	; (40c568 <main+0x32c>)
  40c456:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40c458:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40c45c:	6323      	str	r3, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40c45e:	f8c4 9010 	str.w	r9, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c462:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40c466:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		delay_ms(1);
  40c46a:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c46e:	47b0      	blx	r6
		SCB_DisableDCache();//for SD to work twice in a row, have to enable DCache before cleanInvalidate,disable.
  40c470:	4b3e      	ldr	r3, [pc, #248]	; (40c56c <main+0x330>)
  40c472:	4798      	blx	r3
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c474:	f8c7 8000 	str.w	r8, [r7]
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c478:	f8c7 8000 	str.w	r8, [r7]
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c47c:	f8c7 8000 	str.w	r8, [r7]
		printf("y");
  40c480:	483b      	ldr	r0, [pc, #236]	; (40c570 <main+0x334>)
  40c482:	47d0      	blx	sl
		main_buf_loopback[0]	=0;	
  40c484:	4b3b      	ldr	r3, [pc, #236]	; (40c574 <main+0x338>)
  40c486:	701d      	strb	r5, [r3, #0]
		delay_ms(1000);
  40c488:	482f      	ldr	r0, [pc, #188]	; (40c548 <main+0x30c>)
  40c48a:	47b0      	blx	r6
  40c48c:	f10d 0313 	add.w	r3, sp, #19
  40c490:	f10d 0127 	add.w	r1, sp, #39	; 0x27
	for(iters=0;iters<20;iters++)rtcData[iters]=0;
  40c494:	462a      	mov	r2, r5
  40c496:	f803 2f01 	strb.w	r2, [r3, #1]!
  40c49a:	4299      	cmp	r1, r3
  40c49c:	d1fb      	bne.n	40c496 <main+0x25a>
	rtcData[0]=0x00;//
  40c49e:	ac0c      	add	r4, sp, #48	; 0x30
  40c4a0:	2300      	movs	r3, #0
  40c4a2:	f804 3d1c 	strb.w	r3, [r4, #-28]!
	writeRet = write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c4a6:	2101      	movs	r1, #1
  40c4a8:	4620      	mov	r0, r4
  40c4aa:	4d33      	ldr	r5, [pc, #204]	; (40c578 <main+0x33c>)
  40c4ac:	47a8      	blx	r5
	delay_ms(1);//
  40c4ae:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c4b2:	4e22      	ldr	r6, [pc, #136]	; (40c53c <main+0x300>)
  40c4b4:	47b0      	blx	r6
	readRet = read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  40c4b6:	2107      	movs	r1, #7
  40c4b8:	4620      	mov	r0, r4
  40c4ba:	4b24      	ldr	r3, [pc, #144]	; (40c54c <main+0x310>)
  40c4bc:	4798      	blx	r3
	printf("%X %X %X %X %X %X %X\r\n",rtcData[0],rtcData[1],rtcData[2],rtcData[3],rtcData[4],rtcData[5],rtcData[6]);
  40c4be:	f89d 3016 	ldrb.w	r3, [sp, #22]
  40c4c2:	f89d 2015 	ldrb.w	r2, [sp, #21]
  40c4c6:	f89d 1014 	ldrb.w	r1, [sp, #20]
  40c4ca:	f89d 001a 	ldrb.w	r0, [sp, #26]
  40c4ce:	9003      	str	r0, [sp, #12]
  40c4d0:	f89d 0019 	ldrb.w	r0, [sp, #25]
  40c4d4:	9002      	str	r0, [sp, #8]
  40c4d6:	f89d 0018 	ldrb.w	r0, [sp, #24]
  40c4da:	9001      	str	r0, [sp, #4]
  40c4dc:	f89d 0017 	ldrb.w	r0, [sp, #23]
  40c4e0:	9000      	str	r0, [sp, #0]
  40c4e2:	4826      	ldr	r0, [pc, #152]	; (40c57c <main+0x340>)
  40c4e4:	4f12      	ldr	r7, [pc, #72]	; (40c530 <main+0x2f4>)
  40c4e6:	47b8      	blx	r7
	delay_ms(100);
  40c4e8:	4825      	ldr	r0, [pc, #148]	; (40c580 <main+0x344>)
  40c4ea:	47b0      	blx	r6
	write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c4ec:	2102      	movs	r1, #2
  40c4ee:	4620      	mov	r0, r4
  40c4f0:	47a8      	blx	r5
	if((rtcData[1]&0x80)==0x80){
  40c4f2:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40c4f6:	2b00      	cmp	r3, #0
  40c4f8:	da79      	bge.n	40c5ee <main+0x3b2>
  40c4fa:	e045      	b.n	40c588 <main+0x34c>
  40c4fc:	400e1800 	.word	0x400e1800
  40c500:	20400177 	.word	0x20400177
  40c504:	00402b7d 	.word	0x00402b7d
  40c508:	004011c1 	.word	0x004011c1
  40c50c:	20400f10 	.word	0x20400f10
  40c510:	400e1850 	.word	0x400e1850
  40c514:	30002000 	.word	0x30002000
  40c518:	0040c221 	.word	0x0040c221
  40c51c:	e000e100 	.word	0xe000e100
  40c520:	a5000001 	.word	0xa5000001
  40c524:	00403819 	.word	0x00403819
  40c528:	00407815 	.word	0x00407815
  40c52c:	00410370 	.word	0x00410370
  40c530:	0040c895 	.word	0x0040c895
  40c534:	400e0e00 	.word	0x400e0e00
  40c538:	400e1200 	.word	0x400e1200
  40c53c:	2040008d 	.word	0x2040008d
  40c540:	00401cf1 	.word	0x00401cf1
  40c544:	0181d7b6 	.word	0x0181d7b6
  40c548:	0303af6b 	.word	0x0303af6b
  40c54c:	00401f45 	.word	0x00401f45
  40c550:	00410380 	.word	0x00410380
  40c554:	0040b271 	.word	0x0040b271
  40c558:	0040bfe5 	.word	0x0040bfe5
  40c55c:	004098fd 	.word	0x004098fd
  40c560:	0041039c 	.word	0x0041039c
  40c564:	004070b9 	.word	0x004070b9
  40c568:	0040719d 	.word	0x0040719d
  40c56c:	0040712d 	.word	0x0040712d
  40c570:	004103ac 	.word	0x004103ac
  40c574:	20400cd0 	.word	0x20400cd0
  40c578:	00401e1d 	.word	0x00401e1d
  40c57c:	004103b0 	.word	0x004103b0
  40c580:	004d2b25 	.word	0x004d2b25
  40c584:	009a5649 	.word	0x009a5649
	rtcData[0]=0x01;//write to Address 0x00
  40c588:	2301      	movs	r3, #1
  40c58a:	f88d 3014 	strb.w	r3, [sp, #20]
	rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  40c58e:	2330      	movs	r3, #48	; 0x30
  40c590:	f88d 3015 	strb.w	r3, [sp, #21]
	writeRet = write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c594:	2102      	movs	r1, #2
  40c596:	a805      	add	r0, sp, #20
  40c598:	47a8      	blx	r5
	printf("%X %X %X %X %X %X %X",rtcData[0],rtcData[1],rtcData[2],rtcData[0x0E],rtcData[0x0F],rtcData[0x10],rtcData[0x11]);
  40c59a:	f89d 3016 	ldrb.w	r3, [sp, #22]
  40c59e:	f89d 2015 	ldrb.w	r2, [sp, #21]
  40c5a2:	f89d 1014 	ldrb.w	r1, [sp, #20]
  40c5a6:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
  40c5aa:	9003      	str	r0, [sp, #12]
  40c5ac:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
  40c5b0:	9002      	str	r0, [sp, #8]
  40c5b2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
  40c5b6:	9001      	str	r0, [sp, #4]
  40c5b8:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
  40c5bc:	9000      	str	r0, [sp, #0]
  40c5be:	487c      	ldr	r0, [pc, #496]	; (40c7b0 <main+0x574>)
  40c5c0:	47b8      	blx	r7
	printf("  %X-%X-%X  %X:%X:%X %X \r\n",rtcData[8],rtcData[6],rtcData[9],rtcData[5],rtcData[4],rtcData[3],rtcData[7]);
  40c5c2:	f89d 301d 	ldrb.w	r3, [sp, #29]
  40c5c6:	f89d 201a 	ldrb.w	r2, [sp, #26]
  40c5ca:	f89d 101c 	ldrb.w	r1, [sp, #28]
  40c5ce:	f89d 001b 	ldrb.w	r0, [sp, #27]
  40c5d2:	9003      	str	r0, [sp, #12]
  40c5d4:	f89d 0017 	ldrb.w	r0, [sp, #23]
  40c5d8:	9002      	str	r0, [sp, #8]
  40c5da:	f89d 0018 	ldrb.w	r0, [sp, #24]
  40c5de:	9001      	str	r0, [sp, #4]
  40c5e0:	f89d 0019 	ldrb.w	r0, [sp, #25]
  40c5e4:	9000      	str	r0, [sp, #0]
  40c5e6:	4873      	ldr	r0, [pc, #460]	; (40c7b4 <main+0x578>)
  40c5e8:	47b8      	blx	r7
	delay_ms(1000);
  40c5ea:	4873      	ldr	r0, [pc, #460]	; (40c7b8 <main+0x57c>)
  40c5ec:	47b0      	blx	r6
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c5ee:	4d73      	ldr	r5, [pc, #460]	; (40c7bc <main+0x580>)
  40c5f0:	4e73      	ldr	r6, [pc, #460]	; (40c7c0 <main+0x584>)
  40c5f2:	602e      	str	r6, [r5, #0]
	delay_s(2);
  40c5f4:	4873      	ldr	r0, [pc, #460]	; (40c7c4 <main+0x588>)
  40c5f6:	4c74      	ldr	r4, [pc, #464]	; (40c7c8 <main+0x58c>)
  40c5f8:	47a0      	blx	r4
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c5fa:	602e      	str	r6, [r5, #0]
	delay_s(1);
  40c5fc:	486e      	ldr	r0, [pc, #440]	; (40c7b8 <main+0x57c>)
  40c5fe:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40c600:	4b72      	ldr	r3, [pc, #456]	; (40c7cc <main+0x590>)
  40c602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40c606:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c608:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	printf("ALL\r\n");
  40c60c:	4870      	ldr	r0, [pc, #448]	; (40c7d0 <main+0x594>)
  40c60e:	4e71      	ldr	r6, [pc, #452]	; (40c7d4 <main+0x598>)
  40c610:	47b0      	blx	r6
	delay_ms(100);
  40c612:	4871      	ldr	r0, [pc, #452]	; (40c7d8 <main+0x59c>)
  40c614:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 40c7c8 <main+0x58c>
  40c618:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40c61a:	4c70      	ldr	r4, [pc, #448]	; (40c7dc <main+0x5a0>)
  40c61c:	f44f 7580 	mov.w	r5, #256	; 0x100
  40c620:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c622:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40c626:	6365      	str	r5, [r4, #52]	; 0x34
	configure_console();  //pmc_enable_pllack messes up the console speed
  40c628:	4f6d      	ldr	r7, [pc, #436]	; (40c7e0 <main+0x5a4>)
  40c62a:	47b8      	blx	r7
	configure_console();  //pmc_enable_pllack messes up the console speed
  40c62c:	47b8      	blx	r7
	SDRAMtest();
  40c62e:	4b6d      	ldr	r3, [pc, #436]	; (40c7e4 <main+0x5a8>)
  40c630:	4798      	blx	r3
	redBlink(20);
  40c632:	2014      	movs	r0, #20
  40c634:	4b6c      	ldr	r3, [pc, #432]	; (40c7e8 <main+0x5ac>)
  40c636:	4798      	blx	r3
floatCamForSDCard();
  40c638:	4b6c      	ldr	r3, [pc, #432]	; (40c7ec <main+0x5b0>)
  40c63a:	4798      	blx	r3
oneDayToSD(44,0);
  40c63c:	2100      	movs	r1, #0
  40c63e:	202c      	movs	r0, #44	; 0x2c
  40c640:	4b6b      	ldr	r3, [pc, #428]	; (40c7f0 <main+0x5b4>)
  40c642:	4798      	blx	r3
	printf("LAUNCH USB STACK\r\n")	;
  40c644:	486b      	ldr	r0, [pc, #428]	; (40c7f4 <main+0x5b8>)
  40c646:	47b0      	blx	r6
	SCB_EnableDCache();//for SD to work twice in a row, have to enable DCache before cleanInvalidate,disable.
  40c648:	4f6b      	ldr	r7, [pc, #428]	; (40c7f8 <main+0x5bc>)
  40c64a:	47b8      	blx	r7
	SCB_CleanInvalidateDCache();
  40c64c:	4e6b      	ldr	r6, [pc, #428]	; (40c7fc <main+0x5c0>)
  40c64e:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40c650:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40c654:	6323      	str	r3, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40c656:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c658:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40c65c:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(1);
  40c65e:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c662:	47c0      	blx	r8
	SCB_DisableDCache();//for SD to work twice in a row, have to enable DCache before cleanInvalidate,disable.
  40c664:	4b66      	ldr	r3, [pc, #408]	; (40c800 <main+0x5c4>)
  40c666:	4798      	blx	r3
	cpu_irq_enable();
  40c668:	2201      	movs	r2, #1
  40c66a:	4b66      	ldr	r3, [pc, #408]	; (40c804 <main+0x5c8>)
  40c66c:	701a      	strb	r2, [r3, #0]
  40c66e:	f3bf 8f5f 	dmb	sy
  40c672:	b662      	cpsie	i
	udc_start();// Start USB stack to authorize VBus monitoring
  40c674:	4b64      	ldr	r3, [pc, #400]	; (40c808 <main+0x5cc>)
  40c676:	4798      	blx	r3
	SCB_EnableDCache();//for SD to work twice in a row, have to enable DCache before cleanInvalidate,disable.
  40c678:	47b8      	blx	r7
	SCB_CleanInvalidateDCache();
  40c67a:	47b0      	blx	r6
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c67c:	4f4f      	ldr	r7, [pc, #316]	; (40c7bc <main+0x580>)
  40c67e:	4e50      	ldr	r6, [pc, #320]	; (40c7c0 <main+0x584>)
		printf("x");
  40c680:	4d62      	ldr	r5, [pc, #392]	; (40c80c <main+0x5d0>)
		delay_ms(100);
  40c682:	4c55      	ldr	r4, [pc, #340]	; (40c7d8 <main+0x59c>)
  40c684:	e070      	b.n	40c768 <main+0x52c>
	pmc_enable_periph_clk(ID_PIOB);
  40c686:	200b      	movs	r0, #11
  40c688:	4c61      	ldr	r4, [pc, #388]	; (40c810 <main+0x5d4>)
  40c68a:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  40c68c:	2010      	movs	r0, #16
  40c68e:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOA);//for RTC INT pin
  40c690:	200a      	movs	r0, #10
  40c692:	47a0      	blx	r4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40c694:	4c51      	ldr	r4, [pc, #324]	; (40c7dc <main+0x5a0>)
  40c696:	2302      	movs	r3, #2
  40c698:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40c69a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	delay_us(1);
  40c69e:	2033      	movs	r0, #51	; 0x33
  40c6a0:	4b49      	ldr	r3, [pc, #292]	; (40c7c8 <main+0x58c>)
  40c6a2:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40c6a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if(ioport_get_pin_level(ToBigWU)==0){//STAKE_DDD IF THIS WAKEUP IS FROM TINY WITH A GPS DATE/TIME
  40c6a6:	f013 0f02 	tst.w	r3, #2
  40c6aa:	d10e      	bne.n	40c6ca <main+0x48e>
	getGPSdateTimeFrmTiny();	//RUN TINY STUFF
  40c6ac:	4b59      	ldr	r3, [pc, #356]	; (40c814 <main+0x5d8>)
  40c6ae:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c6b0:	4a43      	ldr	r2, [pc, #268]	; (40c7c0 <main+0x584>)
  40c6b2:	4b42      	ldr	r3, [pc, #264]	; (40c7bc <main+0x580>)
  40c6b4:	601a      	str	r2, [r3, #0]
	configure_console();
  40c6b6:	4b4a      	ldr	r3, [pc, #296]	; (40c7e0 <main+0x5a4>)
  40c6b8:	4798      	blx	r3
	delay_ms(1);
  40c6ba:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c6be:	4b42      	ldr	r3, [pc, #264]	; (40c7c8 <main+0x58c>)
  40c6c0:	4798      	blx	r3
	printf("INT FROM TINY\r\n");
  40c6c2:	4855      	ldr	r0, [pc, #340]	; (40c818 <main+0x5dc>)
  40c6c4:	4b43      	ldr	r3, [pc, #268]	; (40c7d4 <main+0x598>)
  40c6c6:	4798      	blx	r3
  40c6c8:	e7a0      	b.n	40c60c <main+0x3d0>
  40c6ca:	4b44      	ldr	r3, [pc, #272]	; (40c7dc <main+0x5a0>)
  40c6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}else if (ioport_get_pin_level(RTC_INT)==0)	{
  40c6ce:	f013 0f04 	tst.w	r3, #4
  40c6d2:	d19b      	bne.n	40c60c <main+0x3d0>
		pmc_enable_periph_clk(ID_PIOC);
  40c6d4:	200c      	movs	r0, #12
  40c6d6:	4c4e      	ldr	r4, [pc, #312]	; (40c810 <main+0x5d4>)
  40c6d8:	47a0      	blx	r4
		configure_console();
  40c6da:	4b41      	ldr	r3, [pc, #260]	; (40c7e0 <main+0x5a4>)
  40c6dc:	4798      	blx	r3
		delay_ms(1);
  40c6de:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c6e2:	4d39      	ldr	r5, [pc, #228]	; (40c7c8 <main+0x58c>)
  40c6e4:	47a8      	blx	r5
		printf("\r\nRTC INTERRUPT\r\n");
  40c6e6:	484d      	ldr	r0, [pc, #308]	; (40c81c <main+0x5e0>)
  40c6e8:	4e3a      	ldr	r6, [pc, #232]	; (40c7d4 <main+0x598>)
  40c6ea:	47b0      	blx	r6
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c6ec:	4a34      	ldr	r2, [pc, #208]	; (40c7c0 <main+0x584>)
  40c6ee:	4b33      	ldr	r3, [pc, #204]	; (40c7bc <main+0x580>)
  40c6f0:	601a      	str	r2, [r3, #0]
	pmc_enable_periph_clk(ID_PIOA);
  40c6f2:	200a      	movs	r0, #10
  40c6f4:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  40c6f6:	200b      	movs	r0, #11
  40c6f8:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  40c6fa:	2010      	movs	r0, #16
  40c6fc:	47a0      	blx	r4
	rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40c6fe:	2401      	movs	r4, #1
  40c700:	f88d 4014 	strb.w	r4, [sp, #20]
	rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  40c704:	2330      	movs	r3, #48	; 0x30
  40c706:	f88d 3015 	strb.w	r3, [sp, #21]
	write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c70a:	2102      	movs	r1, #2
  40c70c:	a805      	add	r0, sp, #20
  40c70e:	4f44      	ldr	r7, [pc, #272]	; (40c820 <main+0x5e4>)
  40c710:	47b8      	blx	r7
	rtcData[0]=0x03;//
  40c712:	2303      	movs	r3, #3
  40c714:	f88d 3014 	strb.w	r3, [sp, #20]
	write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40c718:	4621      	mov	r1, r4
  40c71a:	a805      	add	r0, sp, #20
  40c71c:	47b8      	blx	r7
	delay_ms(1);//
  40c71e:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40c722:	47a8      	blx	r5
	read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  40c724:	2107      	movs	r1, #7
  40c726:	a805      	add	r0, sp, #20
  40c728:	4b3e      	ldr	r3, [pc, #248]	; (40c824 <main+0x5e8>)
  40c72a:	4798      	blx	r3
	yearNow=rtcData[6];
  40c72c:	f89d 201a 	ldrb.w	r2, [sp, #26]
  40c730:	4b3d      	ldr	r3, [pc, #244]	; (40c828 <main+0x5ec>)
  40c732:	601a      	str	r2, [r3, #0]
	secNow=rtcData[0];
  40c734:	f89d 2014 	ldrb.w	r2, [sp, #20]
  40c738:	4b3c      	ldr	r3, [pc, #240]	; (40c82c <main+0x5f0>)
  40c73a:	601a      	str	r2, [r3, #0]
		gotAltitudeTemperature=getAltimeterTemperatureOLD();
  40c73c:	4b3c      	ldr	r3, [pc, #240]	; (40c830 <main+0x5f4>)
  40c73e:	4798      	blx	r3
  40c740:	4607      	mov	r7, r0
		gotHumidity=getHumidity();
  40c742:	4b3c      	ldr	r3, [pc, #240]	; (40c834 <main+0x5f8>)
  40c744:	4798      	blx	r3
		printf("TEMP %X BAROM %X HUMIDITY %X LIGHT %X MOTION %X\r\n",(gotAltitudeTemperature>>16),(gotAltitudeTemperature&0x0000FFFF),gotHumidity,gotLight,1);
  40c746:	9401      	str	r4, [sp, #4]
  40c748:	2300      	movs	r3, #0
  40c74a:	9300      	str	r3, [sp, #0]
  40c74c:	4603      	mov	r3, r0
  40c74e:	b2ba      	uxth	r2, r7
  40c750:	0c39      	lsrs	r1, r7, #16
  40c752:	4839      	ldr	r0, [pc, #228]	; (40c838 <main+0x5fc>)
  40c754:	47b0      	blx	r6
		delay_ms(100);
  40c756:	4820      	ldr	r0, [pc, #128]	; (40c7d8 <main+0x59c>)
  40c758:	47a8      	blx	r5
  40c75a:	e757      	b.n	40c60c <main+0x3d0>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
  40c75c:	2201      	movs	r2, #1
  40c75e:	4b29      	ldr	r3, [pc, #164]	; (40c804 <main+0x5c8>)
  40c760:	701a      	strb	r2, [r3, #0]
  40c762:	f3bf 8f5f 	dmb	sy
  40c766:	b662      	cpsie	i
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40c768:	603e      	str	r6, [r7, #0]
		printf("x");
  40c76a:	4628      	mov	r0, r5
  40c76c:	4b19      	ldr	r3, [pc, #100]	; (40c7d4 <main+0x598>)
  40c76e:	4798      	blx	r3
		delay_ms(100);
  40c770:	4620      	mov	r0, r4
  40c772:	4b15      	ldr	r3, [pc, #84]	; (40c7c8 <main+0x58c>)
  40c774:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  40c776:	b672      	cpsid	i
  40c778:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40c77c:	2200      	movs	r2, #0
  40c77e:	4b21      	ldr	r3, [pc, #132]	; (40c804 <main+0x5c8>)
  40c780:	701a      	strb	r2, [r3, #0]
	while (!(*lock_ptr)) {
  40c782:	4b2e      	ldr	r3, [pc, #184]	; (40c83c <main+0x600>)
  40c784:	781b      	ldrb	r3, [r3, #0]
  40c786:	2b00      	cmp	r3, #0
  40c788:	d1e8      	bne.n	40c75c <main+0x520>
  40c78a:	4b2c      	ldr	r3, [pc, #176]	; (40c83c <main+0x600>)
  40c78c:	4610      	mov	r0, r2
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
  40c78e:	3001      	adds	r0, #1
  40c790:	b2c0      	uxtb	r0, r0
	while (!(*lock_ptr)) {
  40c792:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  40c796:	2a00      	cmp	r2, #0
  40c798:	d0f9      	beq.n	40c78e <main+0x552>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
  40c79a:	2800      	cmp	r0, #0
  40c79c:	d0de      	beq.n	40c75c <main+0x520>
  40c79e:	b672      	cpsid	i
  40c7a0:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
  40c7a4:	2200      	movs	r2, #0
  40c7a6:	4b17      	ldr	r3, [pc, #92]	; (40c804 <main+0x5c8>)
  40c7a8:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
  40c7aa:	4b25      	ldr	r3, [pc, #148]	; (40c840 <main+0x604>)
  40c7ac:	4798      	blx	r3
  40c7ae:	e7db      	b.n	40c768 <main+0x52c>
  40c7b0:	004103c8 	.word	0x004103c8
  40c7b4:	00410380 	.word	0x00410380
  40c7b8:	0303af6b 	.word	0x0303af6b
  40c7bc:	400e1850 	.word	0x400e1850
  40c7c0:	a5000001 	.word	0xa5000001
  40c7c4:	06075ed6 	.word	0x06075ed6
  40c7c8:	2040008d 	.word	0x2040008d
  40c7cc:	400e1200 	.word	0x400e1200
  40c7d0:	00410438 	.word	0x00410438
  40c7d4:	0040c895 	.word	0x0040c895
  40c7d8:	004d2b25 	.word	0x004d2b25
  40c7dc:	400e0e00 	.word	0x400e0e00
  40c7e0:	00407815 	.word	0x00407815
  40c7e4:	00408775 	.word	0x00408775
  40c7e8:	00408f1d 	.word	0x00408f1d
  40c7ec:	0040bfe5 	.word	0x0040bfe5
  40c7f0:	004098fd 	.word	0x004098fd
  40c7f4:	00410440 	.word	0x00410440
  40c7f8:	004070b9 	.word	0x004070b9
  40c7fc:	0040719d 	.word	0x0040719d
  40c800:	0040712d 	.word	0x0040712d
  40c804:	20400177 	.word	0x20400177
  40c808:	00402ee9 	.word	0x00402ee9
  40c80c:	00410454 	.word	0x00410454
  40c810:	00403819 	.word	0x00403819
  40c814:	00407e01 	.word	0x00407e01
  40c818:	004103e0 	.word	0x004103e0
  40c81c:	004103f0 	.word	0x004103f0
  40c820:	00401e1d 	.word	0x00401e1d
  40c824:	00401f45 	.word	0x00401f45
  40c828:	20400f78 	.word	0x20400f78
  40c82c:	20400f70 	.word	0x20400f70
  40c830:	0040821d 	.word	0x0040821d
  40c834:	004080d1 	.word	0x004080d1
  40c838:	00410404 	.word	0x00410404
  40c83c:	20400f10 	.word	0x20400f10
  40c840:	004038bd 	.word	0x004038bd

0040c844 <__libc_init_array>:
  40c844:	b570      	push	{r4, r5, r6, lr}
  40c846:	4e0f      	ldr	r6, [pc, #60]	; (40c884 <__libc_init_array+0x40>)
  40c848:	4d0f      	ldr	r5, [pc, #60]	; (40c888 <__libc_init_array+0x44>)
  40c84a:	1b76      	subs	r6, r6, r5
  40c84c:	10b6      	asrs	r6, r6, #2
  40c84e:	bf18      	it	ne
  40c850:	2400      	movne	r4, #0
  40c852:	d005      	beq.n	40c860 <__libc_init_array+0x1c>
  40c854:	3401      	adds	r4, #1
  40c856:	f855 3b04 	ldr.w	r3, [r5], #4
  40c85a:	4798      	blx	r3
  40c85c:	42a6      	cmp	r6, r4
  40c85e:	d1f9      	bne.n	40c854 <__libc_init_array+0x10>
  40c860:	4e0a      	ldr	r6, [pc, #40]	; (40c88c <__libc_init_array+0x48>)
  40c862:	4d0b      	ldr	r5, [pc, #44]	; (40c890 <__libc_init_array+0x4c>)
  40c864:	1b76      	subs	r6, r6, r5
  40c866:	f004 f905 	bl	410a74 <_init>
  40c86a:	10b6      	asrs	r6, r6, #2
  40c86c:	bf18      	it	ne
  40c86e:	2400      	movne	r4, #0
  40c870:	d006      	beq.n	40c880 <__libc_init_array+0x3c>
  40c872:	3401      	adds	r4, #1
  40c874:	f855 3b04 	ldr.w	r3, [r5], #4
  40c878:	4798      	blx	r3
  40c87a:	42a6      	cmp	r6, r4
  40c87c:	d1f9      	bne.n	40c872 <__libc_init_array+0x2e>
  40c87e:	bd70      	pop	{r4, r5, r6, pc}
  40c880:	bd70      	pop	{r4, r5, r6, pc}
  40c882:	bf00      	nop
  40c884:	00410a80 	.word	0x00410a80
  40c888:	00410a80 	.word	0x00410a80
  40c88c:	00410a88 	.word	0x00410a88
  40c890:	00410a80 	.word	0x00410a80

0040c894 <iprintf>:
  40c894:	b40f      	push	{r0, r1, r2, r3}
  40c896:	b500      	push	{lr}
  40c898:	4907      	ldr	r1, [pc, #28]	; (40c8b8 <iprintf+0x24>)
  40c89a:	b083      	sub	sp, #12
  40c89c:	ab04      	add	r3, sp, #16
  40c89e:	6808      	ldr	r0, [r1, #0]
  40c8a0:	f853 2b04 	ldr.w	r2, [r3], #4
  40c8a4:	6881      	ldr	r1, [r0, #8]
  40c8a6:	9301      	str	r3, [sp, #4]
  40c8a8:	f000 fa00 	bl	40ccac <_vfiprintf_r>
  40c8ac:	b003      	add	sp, #12
  40c8ae:	f85d eb04 	ldr.w	lr, [sp], #4
  40c8b2:	b004      	add	sp, #16
  40c8b4:	4770      	bx	lr
  40c8b6:	bf00      	nop
  40c8b8:	20400184 	.word	0x20400184

0040c8bc <memcpy>:
  40c8bc:	4684      	mov	ip, r0
  40c8be:	ea41 0300 	orr.w	r3, r1, r0
  40c8c2:	f013 0303 	ands.w	r3, r3, #3
  40c8c6:	d16d      	bne.n	40c9a4 <memcpy+0xe8>
  40c8c8:	3a40      	subs	r2, #64	; 0x40
  40c8ca:	d341      	bcc.n	40c950 <memcpy+0x94>
  40c8cc:	f851 3b04 	ldr.w	r3, [r1], #4
  40c8d0:	f840 3b04 	str.w	r3, [r0], #4
  40c8d4:	f851 3b04 	ldr.w	r3, [r1], #4
  40c8d8:	f840 3b04 	str.w	r3, [r0], #4
  40c8dc:	f851 3b04 	ldr.w	r3, [r1], #4
  40c8e0:	f840 3b04 	str.w	r3, [r0], #4
  40c8e4:	f851 3b04 	ldr.w	r3, [r1], #4
  40c8e8:	f840 3b04 	str.w	r3, [r0], #4
  40c8ec:	f851 3b04 	ldr.w	r3, [r1], #4
  40c8f0:	f840 3b04 	str.w	r3, [r0], #4
  40c8f4:	f851 3b04 	ldr.w	r3, [r1], #4
  40c8f8:	f840 3b04 	str.w	r3, [r0], #4
  40c8fc:	f851 3b04 	ldr.w	r3, [r1], #4
  40c900:	f840 3b04 	str.w	r3, [r0], #4
  40c904:	f851 3b04 	ldr.w	r3, [r1], #4
  40c908:	f840 3b04 	str.w	r3, [r0], #4
  40c90c:	f851 3b04 	ldr.w	r3, [r1], #4
  40c910:	f840 3b04 	str.w	r3, [r0], #4
  40c914:	f851 3b04 	ldr.w	r3, [r1], #4
  40c918:	f840 3b04 	str.w	r3, [r0], #4
  40c91c:	f851 3b04 	ldr.w	r3, [r1], #4
  40c920:	f840 3b04 	str.w	r3, [r0], #4
  40c924:	f851 3b04 	ldr.w	r3, [r1], #4
  40c928:	f840 3b04 	str.w	r3, [r0], #4
  40c92c:	f851 3b04 	ldr.w	r3, [r1], #4
  40c930:	f840 3b04 	str.w	r3, [r0], #4
  40c934:	f851 3b04 	ldr.w	r3, [r1], #4
  40c938:	f840 3b04 	str.w	r3, [r0], #4
  40c93c:	f851 3b04 	ldr.w	r3, [r1], #4
  40c940:	f840 3b04 	str.w	r3, [r0], #4
  40c944:	f851 3b04 	ldr.w	r3, [r1], #4
  40c948:	f840 3b04 	str.w	r3, [r0], #4
  40c94c:	3a40      	subs	r2, #64	; 0x40
  40c94e:	d2bd      	bcs.n	40c8cc <memcpy+0x10>
  40c950:	3230      	adds	r2, #48	; 0x30
  40c952:	d311      	bcc.n	40c978 <memcpy+0xbc>
  40c954:	f851 3b04 	ldr.w	r3, [r1], #4
  40c958:	f840 3b04 	str.w	r3, [r0], #4
  40c95c:	f851 3b04 	ldr.w	r3, [r1], #4
  40c960:	f840 3b04 	str.w	r3, [r0], #4
  40c964:	f851 3b04 	ldr.w	r3, [r1], #4
  40c968:	f840 3b04 	str.w	r3, [r0], #4
  40c96c:	f851 3b04 	ldr.w	r3, [r1], #4
  40c970:	f840 3b04 	str.w	r3, [r0], #4
  40c974:	3a10      	subs	r2, #16
  40c976:	d2ed      	bcs.n	40c954 <memcpy+0x98>
  40c978:	320c      	adds	r2, #12
  40c97a:	d305      	bcc.n	40c988 <memcpy+0xcc>
  40c97c:	f851 3b04 	ldr.w	r3, [r1], #4
  40c980:	f840 3b04 	str.w	r3, [r0], #4
  40c984:	3a04      	subs	r2, #4
  40c986:	d2f9      	bcs.n	40c97c <memcpy+0xc0>
  40c988:	3204      	adds	r2, #4
  40c98a:	d008      	beq.n	40c99e <memcpy+0xe2>
  40c98c:	07d2      	lsls	r2, r2, #31
  40c98e:	bf1c      	itt	ne
  40c990:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40c994:	f800 3b01 	strbne.w	r3, [r0], #1
  40c998:	d301      	bcc.n	40c99e <memcpy+0xe2>
  40c99a:	880b      	ldrh	r3, [r1, #0]
  40c99c:	8003      	strh	r3, [r0, #0]
  40c99e:	4660      	mov	r0, ip
  40c9a0:	4770      	bx	lr
  40c9a2:	bf00      	nop
  40c9a4:	2a08      	cmp	r2, #8
  40c9a6:	d313      	bcc.n	40c9d0 <memcpy+0x114>
  40c9a8:	078b      	lsls	r3, r1, #30
  40c9aa:	d08d      	beq.n	40c8c8 <memcpy+0xc>
  40c9ac:	f010 0303 	ands.w	r3, r0, #3
  40c9b0:	d08a      	beq.n	40c8c8 <memcpy+0xc>
  40c9b2:	f1c3 0304 	rsb	r3, r3, #4
  40c9b6:	1ad2      	subs	r2, r2, r3
  40c9b8:	07db      	lsls	r3, r3, #31
  40c9ba:	bf1c      	itt	ne
  40c9bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40c9c0:	f800 3b01 	strbne.w	r3, [r0], #1
  40c9c4:	d380      	bcc.n	40c8c8 <memcpy+0xc>
  40c9c6:	f831 3b02 	ldrh.w	r3, [r1], #2
  40c9ca:	f820 3b02 	strh.w	r3, [r0], #2
  40c9ce:	e77b      	b.n	40c8c8 <memcpy+0xc>
  40c9d0:	3a04      	subs	r2, #4
  40c9d2:	d3d9      	bcc.n	40c988 <memcpy+0xcc>
  40c9d4:	3a01      	subs	r2, #1
  40c9d6:	f811 3b01 	ldrb.w	r3, [r1], #1
  40c9da:	f800 3b01 	strb.w	r3, [r0], #1
  40c9de:	d2f9      	bcs.n	40c9d4 <memcpy+0x118>
  40c9e0:	780b      	ldrb	r3, [r1, #0]
  40c9e2:	7003      	strb	r3, [r0, #0]
  40c9e4:	784b      	ldrb	r3, [r1, #1]
  40c9e6:	7043      	strb	r3, [r0, #1]
  40c9e8:	788b      	ldrb	r3, [r1, #2]
  40c9ea:	7083      	strb	r3, [r0, #2]
  40c9ec:	4660      	mov	r0, ip
  40c9ee:	4770      	bx	lr

0040c9f0 <memset>:
  40c9f0:	b470      	push	{r4, r5, r6}
  40c9f2:	0786      	lsls	r6, r0, #30
  40c9f4:	d046      	beq.n	40ca84 <memset+0x94>
  40c9f6:	1e54      	subs	r4, r2, #1
  40c9f8:	2a00      	cmp	r2, #0
  40c9fa:	d041      	beq.n	40ca80 <memset+0x90>
  40c9fc:	b2ca      	uxtb	r2, r1
  40c9fe:	4603      	mov	r3, r0
  40ca00:	e002      	b.n	40ca08 <memset+0x18>
  40ca02:	f114 34ff 	adds.w	r4, r4, #4294967295
  40ca06:	d33b      	bcc.n	40ca80 <memset+0x90>
  40ca08:	f803 2b01 	strb.w	r2, [r3], #1
  40ca0c:	079d      	lsls	r5, r3, #30
  40ca0e:	d1f8      	bne.n	40ca02 <memset+0x12>
  40ca10:	2c03      	cmp	r4, #3
  40ca12:	d92e      	bls.n	40ca72 <memset+0x82>
  40ca14:	b2cd      	uxtb	r5, r1
  40ca16:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40ca1a:	2c0f      	cmp	r4, #15
  40ca1c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40ca20:	d919      	bls.n	40ca56 <memset+0x66>
  40ca22:	f103 0210 	add.w	r2, r3, #16
  40ca26:	4626      	mov	r6, r4
  40ca28:	3e10      	subs	r6, #16
  40ca2a:	2e0f      	cmp	r6, #15
  40ca2c:	f842 5c10 	str.w	r5, [r2, #-16]
  40ca30:	f842 5c0c 	str.w	r5, [r2, #-12]
  40ca34:	f842 5c08 	str.w	r5, [r2, #-8]
  40ca38:	f842 5c04 	str.w	r5, [r2, #-4]
  40ca3c:	f102 0210 	add.w	r2, r2, #16
  40ca40:	d8f2      	bhi.n	40ca28 <memset+0x38>
  40ca42:	f1a4 0210 	sub.w	r2, r4, #16
  40ca46:	f022 020f 	bic.w	r2, r2, #15
  40ca4a:	f004 040f 	and.w	r4, r4, #15
  40ca4e:	3210      	adds	r2, #16
  40ca50:	2c03      	cmp	r4, #3
  40ca52:	4413      	add	r3, r2
  40ca54:	d90d      	bls.n	40ca72 <memset+0x82>
  40ca56:	461e      	mov	r6, r3
  40ca58:	4622      	mov	r2, r4
  40ca5a:	3a04      	subs	r2, #4
  40ca5c:	2a03      	cmp	r2, #3
  40ca5e:	f846 5b04 	str.w	r5, [r6], #4
  40ca62:	d8fa      	bhi.n	40ca5a <memset+0x6a>
  40ca64:	1f22      	subs	r2, r4, #4
  40ca66:	f022 0203 	bic.w	r2, r2, #3
  40ca6a:	3204      	adds	r2, #4
  40ca6c:	4413      	add	r3, r2
  40ca6e:	f004 0403 	and.w	r4, r4, #3
  40ca72:	b12c      	cbz	r4, 40ca80 <memset+0x90>
  40ca74:	b2c9      	uxtb	r1, r1
  40ca76:	441c      	add	r4, r3
  40ca78:	f803 1b01 	strb.w	r1, [r3], #1
  40ca7c:	429c      	cmp	r4, r3
  40ca7e:	d1fb      	bne.n	40ca78 <memset+0x88>
  40ca80:	bc70      	pop	{r4, r5, r6}
  40ca82:	4770      	bx	lr
  40ca84:	4614      	mov	r4, r2
  40ca86:	4603      	mov	r3, r0
  40ca88:	e7c2      	b.n	40ca10 <memset+0x20>
  40ca8a:	bf00      	nop

0040ca8c <setbuf>:
  40ca8c:	2900      	cmp	r1, #0
  40ca8e:	bf0c      	ite	eq
  40ca90:	2202      	moveq	r2, #2
  40ca92:	2200      	movne	r2, #0
  40ca94:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40ca98:	f000 b800 	b.w	40ca9c <setvbuf>

0040ca9c <setvbuf>:
  40ca9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40caa0:	4c61      	ldr	r4, [pc, #388]	; (40cc28 <setvbuf+0x18c>)
  40caa2:	6825      	ldr	r5, [r4, #0]
  40caa4:	b083      	sub	sp, #12
  40caa6:	4604      	mov	r4, r0
  40caa8:	460f      	mov	r7, r1
  40caaa:	4690      	mov	r8, r2
  40caac:	461e      	mov	r6, r3
  40caae:	b115      	cbz	r5, 40cab6 <setvbuf+0x1a>
  40cab0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40cab2:	2b00      	cmp	r3, #0
  40cab4:	d064      	beq.n	40cb80 <setvbuf+0xe4>
  40cab6:	f1b8 0f02 	cmp.w	r8, #2
  40caba:	d006      	beq.n	40caca <setvbuf+0x2e>
  40cabc:	f1b8 0f01 	cmp.w	r8, #1
  40cac0:	f200 809f 	bhi.w	40cc02 <setvbuf+0x166>
  40cac4:	2e00      	cmp	r6, #0
  40cac6:	f2c0 809c 	blt.w	40cc02 <setvbuf+0x166>
  40caca:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40cacc:	07d8      	lsls	r0, r3, #31
  40cace:	d534      	bpl.n	40cb3a <setvbuf+0x9e>
  40cad0:	4621      	mov	r1, r4
  40cad2:	4628      	mov	r0, r5
  40cad4:	f001 f888 	bl	40dbe8 <_fflush_r>
  40cad8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40cada:	b141      	cbz	r1, 40caee <setvbuf+0x52>
  40cadc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40cae0:	4299      	cmp	r1, r3
  40cae2:	d002      	beq.n	40caea <setvbuf+0x4e>
  40cae4:	4628      	mov	r0, r5
  40cae6:	f001 f9fd 	bl	40dee4 <_free_r>
  40caea:	2300      	movs	r3, #0
  40caec:	6323      	str	r3, [r4, #48]	; 0x30
  40caee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40caf2:	2200      	movs	r2, #0
  40caf4:	61a2      	str	r2, [r4, #24]
  40caf6:	6062      	str	r2, [r4, #4]
  40caf8:	061a      	lsls	r2, r3, #24
  40cafa:	d43a      	bmi.n	40cb72 <setvbuf+0xd6>
  40cafc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40cb00:	f023 0303 	bic.w	r3, r3, #3
  40cb04:	f1b8 0f02 	cmp.w	r8, #2
  40cb08:	81a3      	strh	r3, [r4, #12]
  40cb0a:	d01d      	beq.n	40cb48 <setvbuf+0xac>
  40cb0c:	ab01      	add	r3, sp, #4
  40cb0e:	466a      	mov	r2, sp
  40cb10:	4621      	mov	r1, r4
  40cb12:	4628      	mov	r0, r5
  40cb14:	f001 fc84 	bl	40e420 <__swhatbuf_r>
  40cb18:	89a3      	ldrh	r3, [r4, #12]
  40cb1a:	4318      	orrs	r0, r3
  40cb1c:	81a0      	strh	r0, [r4, #12]
  40cb1e:	2e00      	cmp	r6, #0
  40cb20:	d132      	bne.n	40cb88 <setvbuf+0xec>
  40cb22:	9e00      	ldr	r6, [sp, #0]
  40cb24:	4630      	mov	r0, r6
  40cb26:	f001 fcf3 	bl	40e510 <malloc>
  40cb2a:	4607      	mov	r7, r0
  40cb2c:	2800      	cmp	r0, #0
  40cb2e:	d06b      	beq.n	40cc08 <setvbuf+0x16c>
  40cb30:	89a3      	ldrh	r3, [r4, #12]
  40cb32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40cb36:	81a3      	strh	r3, [r4, #12]
  40cb38:	e028      	b.n	40cb8c <setvbuf+0xf0>
  40cb3a:	89a3      	ldrh	r3, [r4, #12]
  40cb3c:	0599      	lsls	r1, r3, #22
  40cb3e:	d4c7      	bmi.n	40cad0 <setvbuf+0x34>
  40cb40:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40cb42:	f001 fc69 	bl	40e418 <__retarget_lock_acquire_recursive>
  40cb46:	e7c3      	b.n	40cad0 <setvbuf+0x34>
  40cb48:	2500      	movs	r5, #0
  40cb4a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40cb4c:	2600      	movs	r6, #0
  40cb4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40cb52:	f043 0302 	orr.w	r3, r3, #2
  40cb56:	2001      	movs	r0, #1
  40cb58:	60a6      	str	r6, [r4, #8]
  40cb5a:	07ce      	lsls	r6, r1, #31
  40cb5c:	81a3      	strh	r3, [r4, #12]
  40cb5e:	6022      	str	r2, [r4, #0]
  40cb60:	6122      	str	r2, [r4, #16]
  40cb62:	6160      	str	r0, [r4, #20]
  40cb64:	d401      	bmi.n	40cb6a <setvbuf+0xce>
  40cb66:	0598      	lsls	r0, r3, #22
  40cb68:	d53e      	bpl.n	40cbe8 <setvbuf+0x14c>
  40cb6a:	4628      	mov	r0, r5
  40cb6c:	b003      	add	sp, #12
  40cb6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40cb72:	6921      	ldr	r1, [r4, #16]
  40cb74:	4628      	mov	r0, r5
  40cb76:	f001 f9b5 	bl	40dee4 <_free_r>
  40cb7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40cb7e:	e7bd      	b.n	40cafc <setvbuf+0x60>
  40cb80:	4628      	mov	r0, r5
  40cb82:	f001 f889 	bl	40dc98 <__sinit>
  40cb86:	e796      	b.n	40cab6 <setvbuf+0x1a>
  40cb88:	2f00      	cmp	r7, #0
  40cb8a:	d0cb      	beq.n	40cb24 <setvbuf+0x88>
  40cb8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40cb8e:	2b00      	cmp	r3, #0
  40cb90:	d033      	beq.n	40cbfa <setvbuf+0x15e>
  40cb92:	9b00      	ldr	r3, [sp, #0]
  40cb94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40cb98:	6027      	str	r7, [r4, #0]
  40cb9a:	429e      	cmp	r6, r3
  40cb9c:	bf1c      	itt	ne
  40cb9e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40cba2:	81a2      	strhne	r2, [r4, #12]
  40cba4:	f1b8 0f01 	cmp.w	r8, #1
  40cba8:	bf04      	itt	eq
  40cbaa:	f042 0201 	orreq.w	r2, r2, #1
  40cbae:	81a2      	strheq	r2, [r4, #12]
  40cbb0:	b292      	uxth	r2, r2
  40cbb2:	f012 0308 	ands.w	r3, r2, #8
  40cbb6:	6127      	str	r7, [r4, #16]
  40cbb8:	6166      	str	r6, [r4, #20]
  40cbba:	d00e      	beq.n	40cbda <setvbuf+0x13e>
  40cbbc:	07d1      	lsls	r1, r2, #31
  40cbbe:	d51a      	bpl.n	40cbf6 <setvbuf+0x15a>
  40cbc0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40cbc2:	4276      	negs	r6, r6
  40cbc4:	2300      	movs	r3, #0
  40cbc6:	f015 0501 	ands.w	r5, r5, #1
  40cbca:	61a6      	str	r6, [r4, #24]
  40cbcc:	60a3      	str	r3, [r4, #8]
  40cbce:	d009      	beq.n	40cbe4 <setvbuf+0x148>
  40cbd0:	2500      	movs	r5, #0
  40cbd2:	4628      	mov	r0, r5
  40cbd4:	b003      	add	sp, #12
  40cbd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40cbda:	60a3      	str	r3, [r4, #8]
  40cbdc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40cbde:	f015 0501 	ands.w	r5, r5, #1
  40cbe2:	d1f5      	bne.n	40cbd0 <setvbuf+0x134>
  40cbe4:	0593      	lsls	r3, r2, #22
  40cbe6:	d4c0      	bmi.n	40cb6a <setvbuf+0xce>
  40cbe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40cbea:	f001 fc17 	bl	40e41c <__retarget_lock_release_recursive>
  40cbee:	4628      	mov	r0, r5
  40cbf0:	b003      	add	sp, #12
  40cbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40cbf6:	60a6      	str	r6, [r4, #8]
  40cbf8:	e7f0      	b.n	40cbdc <setvbuf+0x140>
  40cbfa:	4628      	mov	r0, r5
  40cbfc:	f001 f84c 	bl	40dc98 <__sinit>
  40cc00:	e7c7      	b.n	40cb92 <setvbuf+0xf6>
  40cc02:	f04f 35ff 	mov.w	r5, #4294967295
  40cc06:	e7b0      	b.n	40cb6a <setvbuf+0xce>
  40cc08:	f8dd 9000 	ldr.w	r9, [sp]
  40cc0c:	45b1      	cmp	r9, r6
  40cc0e:	d004      	beq.n	40cc1a <setvbuf+0x17e>
  40cc10:	4648      	mov	r0, r9
  40cc12:	f001 fc7d 	bl	40e510 <malloc>
  40cc16:	4607      	mov	r7, r0
  40cc18:	b920      	cbnz	r0, 40cc24 <setvbuf+0x188>
  40cc1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40cc1e:	f04f 35ff 	mov.w	r5, #4294967295
  40cc22:	e792      	b.n	40cb4a <setvbuf+0xae>
  40cc24:	464e      	mov	r6, r9
  40cc26:	e783      	b.n	40cb30 <setvbuf+0x94>
  40cc28:	20400184 	.word	0x20400184

0040cc2c <__sprint_r.part.0>:
  40cc2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cc30:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40cc32:	049c      	lsls	r4, r3, #18
  40cc34:	4693      	mov	fp, r2
  40cc36:	d52f      	bpl.n	40cc98 <__sprint_r.part.0+0x6c>
  40cc38:	6893      	ldr	r3, [r2, #8]
  40cc3a:	6812      	ldr	r2, [r2, #0]
  40cc3c:	b353      	cbz	r3, 40cc94 <__sprint_r.part.0+0x68>
  40cc3e:	460e      	mov	r6, r1
  40cc40:	4607      	mov	r7, r0
  40cc42:	f102 0908 	add.w	r9, r2, #8
  40cc46:	e919 0420 	ldmdb	r9, {r5, sl}
  40cc4a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40cc4e:	d017      	beq.n	40cc80 <__sprint_r.part.0+0x54>
  40cc50:	3d04      	subs	r5, #4
  40cc52:	2400      	movs	r4, #0
  40cc54:	e001      	b.n	40cc5a <__sprint_r.part.0+0x2e>
  40cc56:	45a0      	cmp	r8, r4
  40cc58:	d010      	beq.n	40cc7c <__sprint_r.part.0+0x50>
  40cc5a:	4632      	mov	r2, r6
  40cc5c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40cc60:	4638      	mov	r0, r7
  40cc62:	f001 f8bb 	bl	40dddc <_fputwc_r>
  40cc66:	1c43      	adds	r3, r0, #1
  40cc68:	f104 0401 	add.w	r4, r4, #1
  40cc6c:	d1f3      	bne.n	40cc56 <__sprint_r.part.0+0x2a>
  40cc6e:	2300      	movs	r3, #0
  40cc70:	f8cb 3008 	str.w	r3, [fp, #8]
  40cc74:	f8cb 3004 	str.w	r3, [fp, #4]
  40cc78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cc7c:	f8db 3008 	ldr.w	r3, [fp, #8]
  40cc80:	f02a 0a03 	bic.w	sl, sl, #3
  40cc84:	eba3 030a 	sub.w	r3, r3, sl
  40cc88:	f8cb 3008 	str.w	r3, [fp, #8]
  40cc8c:	f109 0908 	add.w	r9, r9, #8
  40cc90:	2b00      	cmp	r3, #0
  40cc92:	d1d8      	bne.n	40cc46 <__sprint_r.part.0+0x1a>
  40cc94:	2000      	movs	r0, #0
  40cc96:	e7ea      	b.n	40cc6e <__sprint_r.part.0+0x42>
  40cc98:	f001 fa0a 	bl	40e0b0 <__sfvwrite_r>
  40cc9c:	2300      	movs	r3, #0
  40cc9e:	f8cb 3008 	str.w	r3, [fp, #8]
  40cca2:	f8cb 3004 	str.w	r3, [fp, #4]
  40cca6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ccaa:	bf00      	nop

0040ccac <_vfiprintf_r>:
  40ccac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ccb0:	b0ad      	sub	sp, #180	; 0xb4
  40ccb2:	461d      	mov	r5, r3
  40ccb4:	468b      	mov	fp, r1
  40ccb6:	4690      	mov	r8, r2
  40ccb8:	9307      	str	r3, [sp, #28]
  40ccba:	9006      	str	r0, [sp, #24]
  40ccbc:	b118      	cbz	r0, 40ccc6 <_vfiprintf_r+0x1a>
  40ccbe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ccc0:	2b00      	cmp	r3, #0
  40ccc2:	f000 80f3 	beq.w	40ceac <_vfiprintf_r+0x200>
  40ccc6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40ccca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40ccce:	07df      	lsls	r7, r3, #31
  40ccd0:	b281      	uxth	r1, r0
  40ccd2:	d402      	bmi.n	40ccda <_vfiprintf_r+0x2e>
  40ccd4:	058e      	lsls	r6, r1, #22
  40ccd6:	f140 80fc 	bpl.w	40ced2 <_vfiprintf_r+0x226>
  40ccda:	048c      	lsls	r4, r1, #18
  40ccdc:	d40a      	bmi.n	40ccf4 <_vfiprintf_r+0x48>
  40ccde:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40cce2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40cce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40ccea:	f8ab 100c 	strh.w	r1, [fp, #12]
  40ccee:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40ccf2:	b289      	uxth	r1, r1
  40ccf4:	0708      	lsls	r0, r1, #28
  40ccf6:	f140 80b3 	bpl.w	40ce60 <_vfiprintf_r+0x1b4>
  40ccfa:	f8db 3010 	ldr.w	r3, [fp, #16]
  40ccfe:	2b00      	cmp	r3, #0
  40cd00:	f000 80ae 	beq.w	40ce60 <_vfiprintf_r+0x1b4>
  40cd04:	f001 031a 	and.w	r3, r1, #26
  40cd08:	2b0a      	cmp	r3, #10
  40cd0a:	f000 80b5 	beq.w	40ce78 <_vfiprintf_r+0x1cc>
  40cd0e:	2300      	movs	r3, #0
  40cd10:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  40cd14:	930b      	str	r3, [sp, #44]	; 0x2c
  40cd16:	9311      	str	r3, [sp, #68]	; 0x44
  40cd18:	9310      	str	r3, [sp, #64]	; 0x40
  40cd1a:	9303      	str	r3, [sp, #12]
  40cd1c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40cd20:	46ca      	mov	sl, r9
  40cd22:	f8cd b010 	str.w	fp, [sp, #16]
  40cd26:	f898 3000 	ldrb.w	r3, [r8]
  40cd2a:	4644      	mov	r4, r8
  40cd2c:	b1fb      	cbz	r3, 40cd6e <_vfiprintf_r+0xc2>
  40cd2e:	2b25      	cmp	r3, #37	; 0x25
  40cd30:	d102      	bne.n	40cd38 <_vfiprintf_r+0x8c>
  40cd32:	e01c      	b.n	40cd6e <_vfiprintf_r+0xc2>
  40cd34:	2b25      	cmp	r3, #37	; 0x25
  40cd36:	d003      	beq.n	40cd40 <_vfiprintf_r+0x94>
  40cd38:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40cd3c:	2b00      	cmp	r3, #0
  40cd3e:	d1f9      	bne.n	40cd34 <_vfiprintf_r+0x88>
  40cd40:	eba4 0508 	sub.w	r5, r4, r8
  40cd44:	b19d      	cbz	r5, 40cd6e <_vfiprintf_r+0xc2>
  40cd46:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cd48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40cd4a:	f8ca 8000 	str.w	r8, [sl]
  40cd4e:	3301      	adds	r3, #1
  40cd50:	442a      	add	r2, r5
  40cd52:	2b07      	cmp	r3, #7
  40cd54:	f8ca 5004 	str.w	r5, [sl, #4]
  40cd58:	9211      	str	r2, [sp, #68]	; 0x44
  40cd5a:	9310      	str	r3, [sp, #64]	; 0x40
  40cd5c:	dd7a      	ble.n	40ce54 <_vfiprintf_r+0x1a8>
  40cd5e:	2a00      	cmp	r2, #0
  40cd60:	f040 84b0 	bne.w	40d6c4 <_vfiprintf_r+0xa18>
  40cd64:	9b03      	ldr	r3, [sp, #12]
  40cd66:	9210      	str	r2, [sp, #64]	; 0x40
  40cd68:	442b      	add	r3, r5
  40cd6a:	46ca      	mov	sl, r9
  40cd6c:	9303      	str	r3, [sp, #12]
  40cd6e:	7823      	ldrb	r3, [r4, #0]
  40cd70:	2b00      	cmp	r3, #0
  40cd72:	f000 83e0 	beq.w	40d536 <_vfiprintf_r+0x88a>
  40cd76:	2000      	movs	r0, #0
  40cd78:	f04f 0300 	mov.w	r3, #0
  40cd7c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40cd80:	f104 0801 	add.w	r8, r4, #1
  40cd84:	7862      	ldrb	r2, [r4, #1]
  40cd86:	4605      	mov	r5, r0
  40cd88:	4606      	mov	r6, r0
  40cd8a:	4603      	mov	r3, r0
  40cd8c:	f04f 34ff 	mov.w	r4, #4294967295
  40cd90:	f108 0801 	add.w	r8, r8, #1
  40cd94:	f1a2 0120 	sub.w	r1, r2, #32
  40cd98:	2958      	cmp	r1, #88	; 0x58
  40cd9a:	f200 82de 	bhi.w	40d35a <_vfiprintf_r+0x6ae>
  40cd9e:	e8df f011 	tbh	[pc, r1, lsl #1]
  40cda2:	0221      	.short	0x0221
  40cda4:	02dc02dc 	.word	0x02dc02dc
  40cda8:	02dc0229 	.word	0x02dc0229
  40cdac:	02dc02dc 	.word	0x02dc02dc
  40cdb0:	02dc02dc 	.word	0x02dc02dc
  40cdb4:	028902dc 	.word	0x028902dc
  40cdb8:	02dc0295 	.word	0x02dc0295
  40cdbc:	02bd00a2 	.word	0x02bd00a2
  40cdc0:	019f02dc 	.word	0x019f02dc
  40cdc4:	01a401a4 	.word	0x01a401a4
  40cdc8:	01a401a4 	.word	0x01a401a4
  40cdcc:	01a401a4 	.word	0x01a401a4
  40cdd0:	01a401a4 	.word	0x01a401a4
  40cdd4:	02dc01a4 	.word	0x02dc01a4
  40cdd8:	02dc02dc 	.word	0x02dc02dc
  40cddc:	02dc02dc 	.word	0x02dc02dc
  40cde0:	02dc02dc 	.word	0x02dc02dc
  40cde4:	02dc02dc 	.word	0x02dc02dc
  40cde8:	01b202dc 	.word	0x01b202dc
  40cdec:	02dc02dc 	.word	0x02dc02dc
  40cdf0:	02dc02dc 	.word	0x02dc02dc
  40cdf4:	02dc02dc 	.word	0x02dc02dc
  40cdf8:	02dc02dc 	.word	0x02dc02dc
  40cdfc:	02dc02dc 	.word	0x02dc02dc
  40ce00:	02dc0197 	.word	0x02dc0197
  40ce04:	02dc02dc 	.word	0x02dc02dc
  40ce08:	02dc02dc 	.word	0x02dc02dc
  40ce0c:	02dc019b 	.word	0x02dc019b
  40ce10:	025302dc 	.word	0x025302dc
  40ce14:	02dc02dc 	.word	0x02dc02dc
  40ce18:	02dc02dc 	.word	0x02dc02dc
  40ce1c:	02dc02dc 	.word	0x02dc02dc
  40ce20:	02dc02dc 	.word	0x02dc02dc
  40ce24:	02dc02dc 	.word	0x02dc02dc
  40ce28:	021b025a 	.word	0x021b025a
  40ce2c:	02dc02dc 	.word	0x02dc02dc
  40ce30:	026e02dc 	.word	0x026e02dc
  40ce34:	02dc021b 	.word	0x02dc021b
  40ce38:	027302dc 	.word	0x027302dc
  40ce3c:	01f502dc 	.word	0x01f502dc
  40ce40:	02090182 	.word	0x02090182
  40ce44:	02dc02d7 	.word	0x02dc02d7
  40ce48:	02dc029a 	.word	0x02dc029a
  40ce4c:	02dc00a7 	.word	0x02dc00a7
  40ce50:	022e02dc 	.word	0x022e02dc
  40ce54:	f10a 0a08 	add.w	sl, sl, #8
  40ce58:	9b03      	ldr	r3, [sp, #12]
  40ce5a:	442b      	add	r3, r5
  40ce5c:	9303      	str	r3, [sp, #12]
  40ce5e:	e786      	b.n	40cd6e <_vfiprintf_r+0xc2>
  40ce60:	4659      	mov	r1, fp
  40ce62:	9806      	ldr	r0, [sp, #24]
  40ce64:	f000 fdac 	bl	40d9c0 <__swsetup_r>
  40ce68:	bb18      	cbnz	r0, 40ceb2 <_vfiprintf_r+0x206>
  40ce6a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40ce6e:	f001 031a 	and.w	r3, r1, #26
  40ce72:	2b0a      	cmp	r3, #10
  40ce74:	f47f af4b 	bne.w	40cd0e <_vfiprintf_r+0x62>
  40ce78:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40ce7c:	2b00      	cmp	r3, #0
  40ce7e:	f6ff af46 	blt.w	40cd0e <_vfiprintf_r+0x62>
  40ce82:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40ce86:	07db      	lsls	r3, r3, #31
  40ce88:	d405      	bmi.n	40ce96 <_vfiprintf_r+0x1ea>
  40ce8a:	058f      	lsls	r7, r1, #22
  40ce8c:	d403      	bmi.n	40ce96 <_vfiprintf_r+0x1ea>
  40ce8e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40ce92:	f001 fac3 	bl	40e41c <__retarget_lock_release_recursive>
  40ce96:	462b      	mov	r3, r5
  40ce98:	4642      	mov	r2, r8
  40ce9a:	4659      	mov	r1, fp
  40ce9c:	9806      	ldr	r0, [sp, #24]
  40ce9e:	f000 fd4d 	bl	40d93c <__sbprintf>
  40cea2:	9003      	str	r0, [sp, #12]
  40cea4:	9803      	ldr	r0, [sp, #12]
  40cea6:	b02d      	add	sp, #180	; 0xb4
  40cea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ceac:	f000 fef4 	bl	40dc98 <__sinit>
  40ceb0:	e709      	b.n	40ccc6 <_vfiprintf_r+0x1a>
  40ceb2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40ceb6:	07d9      	lsls	r1, r3, #31
  40ceb8:	d404      	bmi.n	40cec4 <_vfiprintf_r+0x218>
  40ceba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40cebe:	059a      	lsls	r2, r3, #22
  40cec0:	f140 84aa 	bpl.w	40d818 <_vfiprintf_r+0xb6c>
  40cec4:	f04f 33ff 	mov.w	r3, #4294967295
  40cec8:	9303      	str	r3, [sp, #12]
  40ceca:	9803      	ldr	r0, [sp, #12]
  40cecc:	b02d      	add	sp, #180	; 0xb4
  40cece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ced2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40ced6:	f001 fa9f 	bl	40e418 <__retarget_lock_acquire_recursive>
  40ceda:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40cede:	b281      	uxth	r1, r0
  40cee0:	e6fb      	b.n	40ccda <_vfiprintf_r+0x2e>
  40cee2:	4276      	negs	r6, r6
  40cee4:	9207      	str	r2, [sp, #28]
  40cee6:	f043 0304 	orr.w	r3, r3, #4
  40ceea:	f898 2000 	ldrb.w	r2, [r8]
  40ceee:	e74f      	b.n	40cd90 <_vfiprintf_r+0xe4>
  40cef0:	9608      	str	r6, [sp, #32]
  40cef2:	069e      	lsls	r6, r3, #26
  40cef4:	f100 8450 	bmi.w	40d798 <_vfiprintf_r+0xaec>
  40cef8:	9907      	ldr	r1, [sp, #28]
  40cefa:	06dd      	lsls	r5, r3, #27
  40cefc:	460a      	mov	r2, r1
  40cefe:	f100 83ef 	bmi.w	40d6e0 <_vfiprintf_r+0xa34>
  40cf02:	0658      	lsls	r0, r3, #25
  40cf04:	f140 83ec 	bpl.w	40d6e0 <_vfiprintf_r+0xa34>
  40cf08:	880e      	ldrh	r6, [r1, #0]
  40cf0a:	3104      	adds	r1, #4
  40cf0c:	2700      	movs	r7, #0
  40cf0e:	2201      	movs	r2, #1
  40cf10:	9107      	str	r1, [sp, #28]
  40cf12:	f04f 0100 	mov.w	r1, #0
  40cf16:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40cf1a:	2500      	movs	r5, #0
  40cf1c:	1c61      	adds	r1, r4, #1
  40cf1e:	f000 8116 	beq.w	40d14e <_vfiprintf_r+0x4a2>
  40cf22:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40cf26:	9102      	str	r1, [sp, #8]
  40cf28:	ea56 0107 	orrs.w	r1, r6, r7
  40cf2c:	f040 8114 	bne.w	40d158 <_vfiprintf_r+0x4ac>
  40cf30:	2c00      	cmp	r4, #0
  40cf32:	f040 835c 	bne.w	40d5ee <_vfiprintf_r+0x942>
  40cf36:	2a00      	cmp	r2, #0
  40cf38:	f040 83b7 	bne.w	40d6aa <_vfiprintf_r+0x9fe>
  40cf3c:	f013 0301 	ands.w	r3, r3, #1
  40cf40:	9305      	str	r3, [sp, #20]
  40cf42:	f000 8457 	beq.w	40d7f4 <_vfiprintf_r+0xb48>
  40cf46:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40cf4a:	2330      	movs	r3, #48	; 0x30
  40cf4c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40cf50:	9b05      	ldr	r3, [sp, #20]
  40cf52:	42a3      	cmp	r3, r4
  40cf54:	bfb8      	it	lt
  40cf56:	4623      	movlt	r3, r4
  40cf58:	9301      	str	r3, [sp, #4]
  40cf5a:	b10d      	cbz	r5, 40cf60 <_vfiprintf_r+0x2b4>
  40cf5c:	3301      	adds	r3, #1
  40cf5e:	9301      	str	r3, [sp, #4]
  40cf60:	9b02      	ldr	r3, [sp, #8]
  40cf62:	f013 0302 	ands.w	r3, r3, #2
  40cf66:	9309      	str	r3, [sp, #36]	; 0x24
  40cf68:	d002      	beq.n	40cf70 <_vfiprintf_r+0x2c4>
  40cf6a:	9b01      	ldr	r3, [sp, #4]
  40cf6c:	3302      	adds	r3, #2
  40cf6e:	9301      	str	r3, [sp, #4]
  40cf70:	9b02      	ldr	r3, [sp, #8]
  40cf72:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40cf76:	930a      	str	r3, [sp, #40]	; 0x28
  40cf78:	f040 8217 	bne.w	40d3aa <_vfiprintf_r+0x6fe>
  40cf7c:	9b08      	ldr	r3, [sp, #32]
  40cf7e:	9a01      	ldr	r2, [sp, #4]
  40cf80:	1a9d      	subs	r5, r3, r2
  40cf82:	2d00      	cmp	r5, #0
  40cf84:	f340 8211 	ble.w	40d3aa <_vfiprintf_r+0x6fe>
  40cf88:	2d10      	cmp	r5, #16
  40cf8a:	f340 8490 	ble.w	40d8ae <_vfiprintf_r+0xc02>
  40cf8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cf90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40cf92:	4ec4      	ldr	r6, [pc, #784]	; (40d2a4 <_vfiprintf_r+0x5f8>)
  40cf94:	46d6      	mov	lr, sl
  40cf96:	2710      	movs	r7, #16
  40cf98:	46a2      	mov	sl, r4
  40cf9a:	4619      	mov	r1, r3
  40cf9c:	9c06      	ldr	r4, [sp, #24]
  40cf9e:	e007      	b.n	40cfb0 <_vfiprintf_r+0x304>
  40cfa0:	f101 0c02 	add.w	ip, r1, #2
  40cfa4:	f10e 0e08 	add.w	lr, lr, #8
  40cfa8:	4601      	mov	r1, r0
  40cfaa:	3d10      	subs	r5, #16
  40cfac:	2d10      	cmp	r5, #16
  40cfae:	dd11      	ble.n	40cfd4 <_vfiprintf_r+0x328>
  40cfb0:	1c48      	adds	r0, r1, #1
  40cfb2:	3210      	adds	r2, #16
  40cfb4:	2807      	cmp	r0, #7
  40cfb6:	9211      	str	r2, [sp, #68]	; 0x44
  40cfb8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40cfbc:	9010      	str	r0, [sp, #64]	; 0x40
  40cfbe:	ddef      	ble.n	40cfa0 <_vfiprintf_r+0x2f4>
  40cfc0:	2a00      	cmp	r2, #0
  40cfc2:	f040 81e4 	bne.w	40d38e <_vfiprintf_r+0x6e2>
  40cfc6:	3d10      	subs	r5, #16
  40cfc8:	2d10      	cmp	r5, #16
  40cfca:	4611      	mov	r1, r2
  40cfcc:	f04f 0c01 	mov.w	ip, #1
  40cfd0:	46ce      	mov	lr, r9
  40cfd2:	dced      	bgt.n	40cfb0 <_vfiprintf_r+0x304>
  40cfd4:	4654      	mov	r4, sl
  40cfd6:	4661      	mov	r1, ip
  40cfd8:	46f2      	mov	sl, lr
  40cfda:	442a      	add	r2, r5
  40cfdc:	2907      	cmp	r1, #7
  40cfde:	9211      	str	r2, [sp, #68]	; 0x44
  40cfe0:	f8ca 6000 	str.w	r6, [sl]
  40cfe4:	f8ca 5004 	str.w	r5, [sl, #4]
  40cfe8:	9110      	str	r1, [sp, #64]	; 0x40
  40cfea:	f300 82ec 	bgt.w	40d5c6 <_vfiprintf_r+0x91a>
  40cfee:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40cff2:	f10a 0a08 	add.w	sl, sl, #8
  40cff6:	1c48      	adds	r0, r1, #1
  40cff8:	2d00      	cmp	r5, #0
  40cffa:	f040 81de 	bne.w	40d3ba <_vfiprintf_r+0x70e>
  40cffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d000:	2b00      	cmp	r3, #0
  40d002:	f000 81f8 	beq.w	40d3f6 <_vfiprintf_r+0x74a>
  40d006:	3202      	adds	r2, #2
  40d008:	a90e      	add	r1, sp, #56	; 0x38
  40d00a:	2302      	movs	r3, #2
  40d00c:	2807      	cmp	r0, #7
  40d00e:	9211      	str	r2, [sp, #68]	; 0x44
  40d010:	9010      	str	r0, [sp, #64]	; 0x40
  40d012:	e88a 000a 	stmia.w	sl, {r1, r3}
  40d016:	f340 81ea 	ble.w	40d3ee <_vfiprintf_r+0x742>
  40d01a:	2a00      	cmp	r2, #0
  40d01c:	f040 838c 	bne.w	40d738 <_vfiprintf_r+0xa8c>
  40d020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d022:	2b80      	cmp	r3, #128	; 0x80
  40d024:	f04f 0001 	mov.w	r0, #1
  40d028:	4611      	mov	r1, r2
  40d02a:	46ca      	mov	sl, r9
  40d02c:	f040 81e7 	bne.w	40d3fe <_vfiprintf_r+0x752>
  40d030:	9b08      	ldr	r3, [sp, #32]
  40d032:	9d01      	ldr	r5, [sp, #4]
  40d034:	1b5e      	subs	r6, r3, r5
  40d036:	2e00      	cmp	r6, #0
  40d038:	f340 81e1 	ble.w	40d3fe <_vfiprintf_r+0x752>
  40d03c:	2e10      	cmp	r6, #16
  40d03e:	4d9a      	ldr	r5, [pc, #616]	; (40d2a8 <_vfiprintf_r+0x5fc>)
  40d040:	f340 8450 	ble.w	40d8e4 <_vfiprintf_r+0xc38>
  40d044:	46d4      	mov	ip, sl
  40d046:	2710      	movs	r7, #16
  40d048:	46a2      	mov	sl, r4
  40d04a:	9c06      	ldr	r4, [sp, #24]
  40d04c:	e007      	b.n	40d05e <_vfiprintf_r+0x3b2>
  40d04e:	f101 0e02 	add.w	lr, r1, #2
  40d052:	f10c 0c08 	add.w	ip, ip, #8
  40d056:	4601      	mov	r1, r0
  40d058:	3e10      	subs	r6, #16
  40d05a:	2e10      	cmp	r6, #16
  40d05c:	dd11      	ble.n	40d082 <_vfiprintf_r+0x3d6>
  40d05e:	1c48      	adds	r0, r1, #1
  40d060:	3210      	adds	r2, #16
  40d062:	2807      	cmp	r0, #7
  40d064:	9211      	str	r2, [sp, #68]	; 0x44
  40d066:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40d06a:	9010      	str	r0, [sp, #64]	; 0x40
  40d06c:	ddef      	ble.n	40d04e <_vfiprintf_r+0x3a2>
  40d06e:	2a00      	cmp	r2, #0
  40d070:	f040 829d 	bne.w	40d5ae <_vfiprintf_r+0x902>
  40d074:	3e10      	subs	r6, #16
  40d076:	2e10      	cmp	r6, #16
  40d078:	f04f 0e01 	mov.w	lr, #1
  40d07c:	4611      	mov	r1, r2
  40d07e:	46cc      	mov	ip, r9
  40d080:	dced      	bgt.n	40d05e <_vfiprintf_r+0x3b2>
  40d082:	4654      	mov	r4, sl
  40d084:	46e2      	mov	sl, ip
  40d086:	4432      	add	r2, r6
  40d088:	f1be 0f07 	cmp.w	lr, #7
  40d08c:	9211      	str	r2, [sp, #68]	; 0x44
  40d08e:	e88a 0060 	stmia.w	sl, {r5, r6}
  40d092:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40d096:	f300 8369 	bgt.w	40d76c <_vfiprintf_r+0xac0>
  40d09a:	f10a 0a08 	add.w	sl, sl, #8
  40d09e:	f10e 0001 	add.w	r0, lr, #1
  40d0a2:	4671      	mov	r1, lr
  40d0a4:	e1ab      	b.n	40d3fe <_vfiprintf_r+0x752>
  40d0a6:	9608      	str	r6, [sp, #32]
  40d0a8:	f013 0220 	ands.w	r2, r3, #32
  40d0ac:	f040 838c 	bne.w	40d7c8 <_vfiprintf_r+0xb1c>
  40d0b0:	f013 0110 	ands.w	r1, r3, #16
  40d0b4:	f040 831a 	bne.w	40d6ec <_vfiprintf_r+0xa40>
  40d0b8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40d0bc:	f000 8316 	beq.w	40d6ec <_vfiprintf_r+0xa40>
  40d0c0:	9807      	ldr	r0, [sp, #28]
  40d0c2:	460a      	mov	r2, r1
  40d0c4:	4601      	mov	r1, r0
  40d0c6:	3104      	adds	r1, #4
  40d0c8:	8806      	ldrh	r6, [r0, #0]
  40d0ca:	9107      	str	r1, [sp, #28]
  40d0cc:	2700      	movs	r7, #0
  40d0ce:	e720      	b.n	40cf12 <_vfiprintf_r+0x266>
  40d0d0:	9608      	str	r6, [sp, #32]
  40d0d2:	f043 0310 	orr.w	r3, r3, #16
  40d0d6:	e7e7      	b.n	40d0a8 <_vfiprintf_r+0x3fc>
  40d0d8:	9608      	str	r6, [sp, #32]
  40d0da:	f043 0310 	orr.w	r3, r3, #16
  40d0de:	e708      	b.n	40cef2 <_vfiprintf_r+0x246>
  40d0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40d0e4:	f898 2000 	ldrb.w	r2, [r8]
  40d0e8:	e652      	b.n	40cd90 <_vfiprintf_r+0xe4>
  40d0ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40d0ee:	2600      	movs	r6, #0
  40d0f0:	f818 2b01 	ldrb.w	r2, [r8], #1
  40d0f4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40d0f8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40d0fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40d100:	2909      	cmp	r1, #9
  40d102:	d9f5      	bls.n	40d0f0 <_vfiprintf_r+0x444>
  40d104:	e646      	b.n	40cd94 <_vfiprintf_r+0xe8>
  40d106:	9608      	str	r6, [sp, #32]
  40d108:	2800      	cmp	r0, #0
  40d10a:	f040 8408 	bne.w	40d91e <_vfiprintf_r+0xc72>
  40d10e:	f043 0310 	orr.w	r3, r3, #16
  40d112:	069e      	lsls	r6, r3, #26
  40d114:	f100 834c 	bmi.w	40d7b0 <_vfiprintf_r+0xb04>
  40d118:	06dd      	lsls	r5, r3, #27
  40d11a:	f100 82f3 	bmi.w	40d704 <_vfiprintf_r+0xa58>
  40d11e:	0658      	lsls	r0, r3, #25
  40d120:	f140 82f0 	bpl.w	40d704 <_vfiprintf_r+0xa58>
  40d124:	9d07      	ldr	r5, [sp, #28]
  40d126:	f9b5 6000 	ldrsh.w	r6, [r5]
  40d12a:	462a      	mov	r2, r5
  40d12c:	17f7      	asrs	r7, r6, #31
  40d12e:	3204      	adds	r2, #4
  40d130:	4630      	mov	r0, r6
  40d132:	4639      	mov	r1, r7
  40d134:	9207      	str	r2, [sp, #28]
  40d136:	2800      	cmp	r0, #0
  40d138:	f171 0200 	sbcs.w	r2, r1, #0
  40d13c:	f2c0 835d 	blt.w	40d7fa <_vfiprintf_r+0xb4e>
  40d140:	1c61      	adds	r1, r4, #1
  40d142:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d146:	f04f 0201 	mov.w	r2, #1
  40d14a:	f47f aeea 	bne.w	40cf22 <_vfiprintf_r+0x276>
  40d14e:	ea56 0107 	orrs.w	r1, r6, r7
  40d152:	f000 824d 	beq.w	40d5f0 <_vfiprintf_r+0x944>
  40d156:	9302      	str	r3, [sp, #8]
  40d158:	2a01      	cmp	r2, #1
  40d15a:	f000 828c 	beq.w	40d676 <_vfiprintf_r+0x9ca>
  40d15e:	2a02      	cmp	r2, #2
  40d160:	f040 825c 	bne.w	40d61c <_vfiprintf_r+0x970>
  40d164:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d166:	46cb      	mov	fp, r9
  40d168:	0933      	lsrs	r3, r6, #4
  40d16a:	f006 010f 	and.w	r1, r6, #15
  40d16e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40d172:	093a      	lsrs	r2, r7, #4
  40d174:	461e      	mov	r6, r3
  40d176:	4617      	mov	r7, r2
  40d178:	5c43      	ldrb	r3, [r0, r1]
  40d17a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40d17e:	ea56 0307 	orrs.w	r3, r6, r7
  40d182:	d1f1      	bne.n	40d168 <_vfiprintf_r+0x4bc>
  40d184:	eba9 030b 	sub.w	r3, r9, fp
  40d188:	9305      	str	r3, [sp, #20]
  40d18a:	e6e1      	b.n	40cf50 <_vfiprintf_r+0x2a4>
  40d18c:	2800      	cmp	r0, #0
  40d18e:	f040 83c0 	bne.w	40d912 <_vfiprintf_r+0xc66>
  40d192:	0699      	lsls	r1, r3, #26
  40d194:	f100 8367 	bmi.w	40d866 <_vfiprintf_r+0xbba>
  40d198:	06da      	lsls	r2, r3, #27
  40d19a:	f100 80f1 	bmi.w	40d380 <_vfiprintf_r+0x6d4>
  40d19e:	065b      	lsls	r3, r3, #25
  40d1a0:	f140 80ee 	bpl.w	40d380 <_vfiprintf_r+0x6d4>
  40d1a4:	9a07      	ldr	r2, [sp, #28]
  40d1a6:	6813      	ldr	r3, [r2, #0]
  40d1a8:	3204      	adds	r2, #4
  40d1aa:	9207      	str	r2, [sp, #28]
  40d1ac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40d1b0:	801a      	strh	r2, [r3, #0]
  40d1b2:	e5b8      	b.n	40cd26 <_vfiprintf_r+0x7a>
  40d1b4:	9807      	ldr	r0, [sp, #28]
  40d1b6:	4a3d      	ldr	r2, [pc, #244]	; (40d2ac <_vfiprintf_r+0x600>)
  40d1b8:	9608      	str	r6, [sp, #32]
  40d1ba:	920b      	str	r2, [sp, #44]	; 0x2c
  40d1bc:	6806      	ldr	r6, [r0, #0]
  40d1be:	2278      	movs	r2, #120	; 0x78
  40d1c0:	2130      	movs	r1, #48	; 0x30
  40d1c2:	3004      	adds	r0, #4
  40d1c4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40d1c8:	f043 0302 	orr.w	r3, r3, #2
  40d1cc:	9007      	str	r0, [sp, #28]
  40d1ce:	2700      	movs	r7, #0
  40d1d0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40d1d4:	2202      	movs	r2, #2
  40d1d6:	e69c      	b.n	40cf12 <_vfiprintf_r+0x266>
  40d1d8:	9608      	str	r6, [sp, #32]
  40d1da:	2800      	cmp	r0, #0
  40d1dc:	d099      	beq.n	40d112 <_vfiprintf_r+0x466>
  40d1de:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40d1e2:	e796      	b.n	40d112 <_vfiprintf_r+0x466>
  40d1e4:	f898 2000 	ldrb.w	r2, [r8]
  40d1e8:	2d00      	cmp	r5, #0
  40d1ea:	f47f add1 	bne.w	40cd90 <_vfiprintf_r+0xe4>
  40d1ee:	2001      	movs	r0, #1
  40d1f0:	2520      	movs	r5, #32
  40d1f2:	e5cd      	b.n	40cd90 <_vfiprintf_r+0xe4>
  40d1f4:	f043 0301 	orr.w	r3, r3, #1
  40d1f8:	f898 2000 	ldrb.w	r2, [r8]
  40d1fc:	e5c8      	b.n	40cd90 <_vfiprintf_r+0xe4>
  40d1fe:	9608      	str	r6, [sp, #32]
  40d200:	2800      	cmp	r0, #0
  40d202:	f040 8393 	bne.w	40d92c <_vfiprintf_r+0xc80>
  40d206:	4929      	ldr	r1, [pc, #164]	; (40d2ac <_vfiprintf_r+0x600>)
  40d208:	910b      	str	r1, [sp, #44]	; 0x2c
  40d20a:	069f      	lsls	r7, r3, #26
  40d20c:	f100 82e8 	bmi.w	40d7e0 <_vfiprintf_r+0xb34>
  40d210:	9807      	ldr	r0, [sp, #28]
  40d212:	06de      	lsls	r6, r3, #27
  40d214:	4601      	mov	r1, r0
  40d216:	f100 8270 	bmi.w	40d6fa <_vfiprintf_r+0xa4e>
  40d21a:	065d      	lsls	r5, r3, #25
  40d21c:	f140 826d 	bpl.w	40d6fa <_vfiprintf_r+0xa4e>
  40d220:	3104      	adds	r1, #4
  40d222:	8806      	ldrh	r6, [r0, #0]
  40d224:	9107      	str	r1, [sp, #28]
  40d226:	2700      	movs	r7, #0
  40d228:	07d8      	lsls	r0, r3, #31
  40d22a:	f140 8222 	bpl.w	40d672 <_vfiprintf_r+0x9c6>
  40d22e:	ea56 0107 	orrs.w	r1, r6, r7
  40d232:	f000 821e 	beq.w	40d672 <_vfiprintf_r+0x9c6>
  40d236:	2130      	movs	r1, #48	; 0x30
  40d238:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40d23c:	f043 0302 	orr.w	r3, r3, #2
  40d240:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40d244:	2202      	movs	r2, #2
  40d246:	e664      	b.n	40cf12 <_vfiprintf_r+0x266>
  40d248:	9608      	str	r6, [sp, #32]
  40d24a:	2800      	cmp	r0, #0
  40d24c:	f040 836b 	bne.w	40d926 <_vfiprintf_r+0xc7a>
  40d250:	4917      	ldr	r1, [pc, #92]	; (40d2b0 <_vfiprintf_r+0x604>)
  40d252:	910b      	str	r1, [sp, #44]	; 0x2c
  40d254:	e7d9      	b.n	40d20a <_vfiprintf_r+0x55e>
  40d256:	9907      	ldr	r1, [sp, #28]
  40d258:	9608      	str	r6, [sp, #32]
  40d25a:	680a      	ldr	r2, [r1, #0]
  40d25c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40d260:	f04f 0000 	mov.w	r0, #0
  40d264:	460a      	mov	r2, r1
  40d266:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40d26a:	3204      	adds	r2, #4
  40d26c:	2001      	movs	r0, #1
  40d26e:	9001      	str	r0, [sp, #4]
  40d270:	9207      	str	r2, [sp, #28]
  40d272:	9005      	str	r0, [sp, #20]
  40d274:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40d278:	9302      	str	r3, [sp, #8]
  40d27a:	2400      	movs	r4, #0
  40d27c:	e670      	b.n	40cf60 <_vfiprintf_r+0x2b4>
  40d27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d282:	f898 2000 	ldrb.w	r2, [r8]
  40d286:	e583      	b.n	40cd90 <_vfiprintf_r+0xe4>
  40d288:	f898 2000 	ldrb.w	r2, [r8]
  40d28c:	2a6c      	cmp	r2, #108	; 0x6c
  40d28e:	bf03      	ittte	eq
  40d290:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  40d294:	f043 0320 	orreq.w	r3, r3, #32
  40d298:	f108 0801 	addeq.w	r8, r8, #1
  40d29c:	f043 0310 	orrne.w	r3, r3, #16
  40d2a0:	e576      	b.n	40cd90 <_vfiprintf_r+0xe4>
  40d2a2:	bf00      	nop
  40d2a4:	00410944 	.word	0x00410944
  40d2a8:	00410954 	.word	0x00410954
  40d2ac:	00410928 	.word	0x00410928
  40d2b0:	00410914 	.word	0x00410914
  40d2b4:	9907      	ldr	r1, [sp, #28]
  40d2b6:	680e      	ldr	r6, [r1, #0]
  40d2b8:	460a      	mov	r2, r1
  40d2ba:	2e00      	cmp	r6, #0
  40d2bc:	f102 0204 	add.w	r2, r2, #4
  40d2c0:	f6ff ae0f 	blt.w	40cee2 <_vfiprintf_r+0x236>
  40d2c4:	9207      	str	r2, [sp, #28]
  40d2c6:	f898 2000 	ldrb.w	r2, [r8]
  40d2ca:	e561      	b.n	40cd90 <_vfiprintf_r+0xe4>
  40d2cc:	f898 2000 	ldrb.w	r2, [r8]
  40d2d0:	2001      	movs	r0, #1
  40d2d2:	252b      	movs	r5, #43	; 0x2b
  40d2d4:	e55c      	b.n	40cd90 <_vfiprintf_r+0xe4>
  40d2d6:	9907      	ldr	r1, [sp, #28]
  40d2d8:	9608      	str	r6, [sp, #32]
  40d2da:	f8d1 b000 	ldr.w	fp, [r1]
  40d2de:	f04f 0200 	mov.w	r2, #0
  40d2e2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40d2e6:	1d0e      	adds	r6, r1, #4
  40d2e8:	f1bb 0f00 	cmp.w	fp, #0
  40d2ec:	f000 82e5 	beq.w	40d8ba <_vfiprintf_r+0xc0e>
  40d2f0:	1c67      	adds	r7, r4, #1
  40d2f2:	f000 82c4 	beq.w	40d87e <_vfiprintf_r+0xbd2>
  40d2f6:	4622      	mov	r2, r4
  40d2f8:	2100      	movs	r1, #0
  40d2fa:	4658      	mov	r0, fp
  40d2fc:	9301      	str	r3, [sp, #4]
  40d2fe:	f001 fbd7 	bl	40eab0 <memchr>
  40d302:	9b01      	ldr	r3, [sp, #4]
  40d304:	2800      	cmp	r0, #0
  40d306:	f000 82e5 	beq.w	40d8d4 <_vfiprintf_r+0xc28>
  40d30a:	eba0 020b 	sub.w	r2, r0, fp
  40d30e:	9205      	str	r2, [sp, #20]
  40d310:	9607      	str	r6, [sp, #28]
  40d312:	9302      	str	r3, [sp, #8]
  40d314:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d318:	2400      	movs	r4, #0
  40d31a:	e619      	b.n	40cf50 <_vfiprintf_r+0x2a4>
  40d31c:	f898 2000 	ldrb.w	r2, [r8]
  40d320:	2a2a      	cmp	r2, #42	; 0x2a
  40d322:	f108 0701 	add.w	r7, r8, #1
  40d326:	f000 82e9 	beq.w	40d8fc <_vfiprintf_r+0xc50>
  40d32a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40d32e:	2909      	cmp	r1, #9
  40d330:	46b8      	mov	r8, r7
  40d332:	f04f 0400 	mov.w	r4, #0
  40d336:	f63f ad2d 	bhi.w	40cd94 <_vfiprintf_r+0xe8>
  40d33a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40d33e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40d342:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40d346:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40d34a:	2909      	cmp	r1, #9
  40d34c:	d9f5      	bls.n	40d33a <_vfiprintf_r+0x68e>
  40d34e:	e521      	b.n	40cd94 <_vfiprintf_r+0xe8>
  40d350:	f043 0320 	orr.w	r3, r3, #32
  40d354:	f898 2000 	ldrb.w	r2, [r8]
  40d358:	e51a      	b.n	40cd90 <_vfiprintf_r+0xe4>
  40d35a:	9608      	str	r6, [sp, #32]
  40d35c:	2800      	cmp	r0, #0
  40d35e:	f040 82db 	bne.w	40d918 <_vfiprintf_r+0xc6c>
  40d362:	2a00      	cmp	r2, #0
  40d364:	f000 80e7 	beq.w	40d536 <_vfiprintf_r+0x88a>
  40d368:	2101      	movs	r1, #1
  40d36a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40d36e:	f04f 0200 	mov.w	r2, #0
  40d372:	9101      	str	r1, [sp, #4]
  40d374:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40d378:	9105      	str	r1, [sp, #20]
  40d37a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40d37e:	e77b      	b.n	40d278 <_vfiprintf_r+0x5cc>
  40d380:	9a07      	ldr	r2, [sp, #28]
  40d382:	6813      	ldr	r3, [r2, #0]
  40d384:	3204      	adds	r2, #4
  40d386:	9207      	str	r2, [sp, #28]
  40d388:	9a03      	ldr	r2, [sp, #12]
  40d38a:	601a      	str	r2, [r3, #0]
  40d38c:	e4cb      	b.n	40cd26 <_vfiprintf_r+0x7a>
  40d38e:	aa0f      	add	r2, sp, #60	; 0x3c
  40d390:	9904      	ldr	r1, [sp, #16]
  40d392:	4620      	mov	r0, r4
  40d394:	f7ff fc4a 	bl	40cc2c <__sprint_r.part.0>
  40d398:	2800      	cmp	r0, #0
  40d39a:	f040 8139 	bne.w	40d610 <_vfiprintf_r+0x964>
  40d39e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d3a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d3a2:	f101 0c01 	add.w	ip, r1, #1
  40d3a6:	46ce      	mov	lr, r9
  40d3a8:	e5ff      	b.n	40cfaa <_vfiprintf_r+0x2fe>
  40d3aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d3ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d3ae:	1c48      	adds	r0, r1, #1
  40d3b0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d3b4:	2d00      	cmp	r5, #0
  40d3b6:	f43f ae22 	beq.w	40cffe <_vfiprintf_r+0x352>
  40d3ba:	3201      	adds	r2, #1
  40d3bc:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40d3c0:	2101      	movs	r1, #1
  40d3c2:	2807      	cmp	r0, #7
  40d3c4:	9211      	str	r2, [sp, #68]	; 0x44
  40d3c6:	9010      	str	r0, [sp, #64]	; 0x40
  40d3c8:	f8ca 5000 	str.w	r5, [sl]
  40d3cc:	f8ca 1004 	str.w	r1, [sl, #4]
  40d3d0:	f340 8108 	ble.w	40d5e4 <_vfiprintf_r+0x938>
  40d3d4:	2a00      	cmp	r2, #0
  40d3d6:	f040 81bc 	bne.w	40d752 <_vfiprintf_r+0xaa6>
  40d3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d3dc:	2b00      	cmp	r3, #0
  40d3de:	f43f ae1f 	beq.w	40d020 <_vfiprintf_r+0x374>
  40d3e2:	ab0e      	add	r3, sp, #56	; 0x38
  40d3e4:	2202      	movs	r2, #2
  40d3e6:	4608      	mov	r0, r1
  40d3e8:	931c      	str	r3, [sp, #112]	; 0x70
  40d3ea:	921d      	str	r2, [sp, #116]	; 0x74
  40d3ec:	46ca      	mov	sl, r9
  40d3ee:	4601      	mov	r1, r0
  40d3f0:	f10a 0a08 	add.w	sl, sl, #8
  40d3f4:	3001      	adds	r0, #1
  40d3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d3f8:	2b80      	cmp	r3, #128	; 0x80
  40d3fa:	f43f ae19 	beq.w	40d030 <_vfiprintf_r+0x384>
  40d3fe:	9b05      	ldr	r3, [sp, #20]
  40d400:	1ae4      	subs	r4, r4, r3
  40d402:	2c00      	cmp	r4, #0
  40d404:	dd2e      	ble.n	40d464 <_vfiprintf_r+0x7b8>
  40d406:	2c10      	cmp	r4, #16
  40d408:	4db3      	ldr	r5, [pc, #716]	; (40d6d8 <_vfiprintf_r+0xa2c>)
  40d40a:	dd1e      	ble.n	40d44a <_vfiprintf_r+0x79e>
  40d40c:	46d6      	mov	lr, sl
  40d40e:	2610      	movs	r6, #16
  40d410:	9f06      	ldr	r7, [sp, #24]
  40d412:	f8dd a010 	ldr.w	sl, [sp, #16]
  40d416:	e006      	b.n	40d426 <_vfiprintf_r+0x77a>
  40d418:	1c88      	adds	r0, r1, #2
  40d41a:	f10e 0e08 	add.w	lr, lr, #8
  40d41e:	4619      	mov	r1, r3
  40d420:	3c10      	subs	r4, #16
  40d422:	2c10      	cmp	r4, #16
  40d424:	dd10      	ble.n	40d448 <_vfiprintf_r+0x79c>
  40d426:	1c4b      	adds	r3, r1, #1
  40d428:	3210      	adds	r2, #16
  40d42a:	2b07      	cmp	r3, #7
  40d42c:	9211      	str	r2, [sp, #68]	; 0x44
  40d42e:	e88e 0060 	stmia.w	lr, {r5, r6}
  40d432:	9310      	str	r3, [sp, #64]	; 0x40
  40d434:	ddf0      	ble.n	40d418 <_vfiprintf_r+0x76c>
  40d436:	2a00      	cmp	r2, #0
  40d438:	d165      	bne.n	40d506 <_vfiprintf_r+0x85a>
  40d43a:	3c10      	subs	r4, #16
  40d43c:	2c10      	cmp	r4, #16
  40d43e:	f04f 0001 	mov.w	r0, #1
  40d442:	4611      	mov	r1, r2
  40d444:	46ce      	mov	lr, r9
  40d446:	dcee      	bgt.n	40d426 <_vfiprintf_r+0x77a>
  40d448:	46f2      	mov	sl, lr
  40d44a:	4422      	add	r2, r4
  40d44c:	2807      	cmp	r0, #7
  40d44e:	9211      	str	r2, [sp, #68]	; 0x44
  40d450:	f8ca 5000 	str.w	r5, [sl]
  40d454:	f8ca 4004 	str.w	r4, [sl, #4]
  40d458:	9010      	str	r0, [sp, #64]	; 0x40
  40d45a:	f300 8085 	bgt.w	40d568 <_vfiprintf_r+0x8bc>
  40d45e:	f10a 0a08 	add.w	sl, sl, #8
  40d462:	3001      	adds	r0, #1
  40d464:	9905      	ldr	r1, [sp, #20]
  40d466:	f8ca b000 	str.w	fp, [sl]
  40d46a:	440a      	add	r2, r1
  40d46c:	2807      	cmp	r0, #7
  40d46e:	9211      	str	r2, [sp, #68]	; 0x44
  40d470:	f8ca 1004 	str.w	r1, [sl, #4]
  40d474:	9010      	str	r0, [sp, #64]	; 0x40
  40d476:	f340 8082 	ble.w	40d57e <_vfiprintf_r+0x8d2>
  40d47a:	2a00      	cmp	r2, #0
  40d47c:	f040 8118 	bne.w	40d6b0 <_vfiprintf_r+0xa04>
  40d480:	9b02      	ldr	r3, [sp, #8]
  40d482:	9210      	str	r2, [sp, #64]	; 0x40
  40d484:	0758      	lsls	r0, r3, #29
  40d486:	d535      	bpl.n	40d4f4 <_vfiprintf_r+0x848>
  40d488:	9b08      	ldr	r3, [sp, #32]
  40d48a:	9901      	ldr	r1, [sp, #4]
  40d48c:	1a5c      	subs	r4, r3, r1
  40d48e:	2c00      	cmp	r4, #0
  40d490:	f340 80e7 	ble.w	40d662 <_vfiprintf_r+0x9b6>
  40d494:	46ca      	mov	sl, r9
  40d496:	2c10      	cmp	r4, #16
  40d498:	f340 8218 	ble.w	40d8cc <_vfiprintf_r+0xc20>
  40d49c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d49e:	4e8f      	ldr	r6, [pc, #572]	; (40d6dc <_vfiprintf_r+0xa30>)
  40d4a0:	9f06      	ldr	r7, [sp, #24]
  40d4a2:	f8dd b010 	ldr.w	fp, [sp, #16]
  40d4a6:	2510      	movs	r5, #16
  40d4a8:	e006      	b.n	40d4b8 <_vfiprintf_r+0x80c>
  40d4aa:	1c88      	adds	r0, r1, #2
  40d4ac:	f10a 0a08 	add.w	sl, sl, #8
  40d4b0:	4619      	mov	r1, r3
  40d4b2:	3c10      	subs	r4, #16
  40d4b4:	2c10      	cmp	r4, #16
  40d4b6:	dd11      	ble.n	40d4dc <_vfiprintf_r+0x830>
  40d4b8:	1c4b      	adds	r3, r1, #1
  40d4ba:	3210      	adds	r2, #16
  40d4bc:	2b07      	cmp	r3, #7
  40d4be:	9211      	str	r2, [sp, #68]	; 0x44
  40d4c0:	f8ca 6000 	str.w	r6, [sl]
  40d4c4:	f8ca 5004 	str.w	r5, [sl, #4]
  40d4c8:	9310      	str	r3, [sp, #64]	; 0x40
  40d4ca:	ddee      	ble.n	40d4aa <_vfiprintf_r+0x7fe>
  40d4cc:	bb42      	cbnz	r2, 40d520 <_vfiprintf_r+0x874>
  40d4ce:	3c10      	subs	r4, #16
  40d4d0:	2c10      	cmp	r4, #16
  40d4d2:	f04f 0001 	mov.w	r0, #1
  40d4d6:	4611      	mov	r1, r2
  40d4d8:	46ca      	mov	sl, r9
  40d4da:	dced      	bgt.n	40d4b8 <_vfiprintf_r+0x80c>
  40d4dc:	4422      	add	r2, r4
  40d4de:	2807      	cmp	r0, #7
  40d4e0:	9211      	str	r2, [sp, #68]	; 0x44
  40d4e2:	f8ca 6000 	str.w	r6, [sl]
  40d4e6:	f8ca 4004 	str.w	r4, [sl, #4]
  40d4ea:	9010      	str	r0, [sp, #64]	; 0x40
  40d4ec:	dd51      	ble.n	40d592 <_vfiprintf_r+0x8e6>
  40d4ee:	2a00      	cmp	r2, #0
  40d4f0:	f040 819b 	bne.w	40d82a <_vfiprintf_r+0xb7e>
  40d4f4:	9b03      	ldr	r3, [sp, #12]
  40d4f6:	9a08      	ldr	r2, [sp, #32]
  40d4f8:	9901      	ldr	r1, [sp, #4]
  40d4fa:	428a      	cmp	r2, r1
  40d4fc:	bfac      	ite	ge
  40d4fe:	189b      	addge	r3, r3, r2
  40d500:	185b      	addlt	r3, r3, r1
  40d502:	9303      	str	r3, [sp, #12]
  40d504:	e04e      	b.n	40d5a4 <_vfiprintf_r+0x8f8>
  40d506:	aa0f      	add	r2, sp, #60	; 0x3c
  40d508:	4651      	mov	r1, sl
  40d50a:	4638      	mov	r0, r7
  40d50c:	f7ff fb8e 	bl	40cc2c <__sprint_r.part.0>
  40d510:	2800      	cmp	r0, #0
  40d512:	f040 813f 	bne.w	40d794 <_vfiprintf_r+0xae8>
  40d516:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d518:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d51a:	1c48      	adds	r0, r1, #1
  40d51c:	46ce      	mov	lr, r9
  40d51e:	e77f      	b.n	40d420 <_vfiprintf_r+0x774>
  40d520:	aa0f      	add	r2, sp, #60	; 0x3c
  40d522:	4659      	mov	r1, fp
  40d524:	4638      	mov	r0, r7
  40d526:	f7ff fb81 	bl	40cc2c <__sprint_r.part.0>
  40d52a:	b960      	cbnz	r0, 40d546 <_vfiprintf_r+0x89a>
  40d52c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d52e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d530:	1c48      	adds	r0, r1, #1
  40d532:	46ca      	mov	sl, r9
  40d534:	e7bd      	b.n	40d4b2 <_vfiprintf_r+0x806>
  40d536:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40d538:	f8dd b010 	ldr.w	fp, [sp, #16]
  40d53c:	2b00      	cmp	r3, #0
  40d53e:	f040 81d4 	bne.w	40d8ea <_vfiprintf_r+0xc3e>
  40d542:	2300      	movs	r3, #0
  40d544:	9310      	str	r3, [sp, #64]	; 0x40
  40d546:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40d54a:	f013 0f01 	tst.w	r3, #1
  40d54e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40d552:	d102      	bne.n	40d55a <_vfiprintf_r+0x8ae>
  40d554:	059a      	lsls	r2, r3, #22
  40d556:	f140 80de 	bpl.w	40d716 <_vfiprintf_r+0xa6a>
  40d55a:	065b      	lsls	r3, r3, #25
  40d55c:	f53f acb2 	bmi.w	40cec4 <_vfiprintf_r+0x218>
  40d560:	9803      	ldr	r0, [sp, #12]
  40d562:	b02d      	add	sp, #180	; 0xb4
  40d564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d568:	2a00      	cmp	r2, #0
  40d56a:	f040 8106 	bne.w	40d77a <_vfiprintf_r+0xace>
  40d56e:	9a05      	ldr	r2, [sp, #20]
  40d570:	921d      	str	r2, [sp, #116]	; 0x74
  40d572:	2301      	movs	r3, #1
  40d574:	9211      	str	r2, [sp, #68]	; 0x44
  40d576:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40d57a:	9310      	str	r3, [sp, #64]	; 0x40
  40d57c:	46ca      	mov	sl, r9
  40d57e:	f10a 0a08 	add.w	sl, sl, #8
  40d582:	9b02      	ldr	r3, [sp, #8]
  40d584:	0759      	lsls	r1, r3, #29
  40d586:	d504      	bpl.n	40d592 <_vfiprintf_r+0x8e6>
  40d588:	9b08      	ldr	r3, [sp, #32]
  40d58a:	9901      	ldr	r1, [sp, #4]
  40d58c:	1a5c      	subs	r4, r3, r1
  40d58e:	2c00      	cmp	r4, #0
  40d590:	dc81      	bgt.n	40d496 <_vfiprintf_r+0x7ea>
  40d592:	9b03      	ldr	r3, [sp, #12]
  40d594:	9908      	ldr	r1, [sp, #32]
  40d596:	9801      	ldr	r0, [sp, #4]
  40d598:	4281      	cmp	r1, r0
  40d59a:	bfac      	ite	ge
  40d59c:	185b      	addge	r3, r3, r1
  40d59e:	181b      	addlt	r3, r3, r0
  40d5a0:	9303      	str	r3, [sp, #12]
  40d5a2:	bb72      	cbnz	r2, 40d602 <_vfiprintf_r+0x956>
  40d5a4:	2300      	movs	r3, #0
  40d5a6:	9310      	str	r3, [sp, #64]	; 0x40
  40d5a8:	46ca      	mov	sl, r9
  40d5aa:	f7ff bbbc 	b.w	40cd26 <_vfiprintf_r+0x7a>
  40d5ae:	aa0f      	add	r2, sp, #60	; 0x3c
  40d5b0:	9904      	ldr	r1, [sp, #16]
  40d5b2:	4620      	mov	r0, r4
  40d5b4:	f7ff fb3a 	bl	40cc2c <__sprint_r.part.0>
  40d5b8:	bb50      	cbnz	r0, 40d610 <_vfiprintf_r+0x964>
  40d5ba:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d5bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d5be:	f101 0e01 	add.w	lr, r1, #1
  40d5c2:	46cc      	mov	ip, r9
  40d5c4:	e548      	b.n	40d058 <_vfiprintf_r+0x3ac>
  40d5c6:	2a00      	cmp	r2, #0
  40d5c8:	f040 8140 	bne.w	40d84c <_vfiprintf_r+0xba0>
  40d5cc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40d5d0:	2900      	cmp	r1, #0
  40d5d2:	f000 811b 	beq.w	40d80c <_vfiprintf_r+0xb60>
  40d5d6:	2201      	movs	r2, #1
  40d5d8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40d5dc:	4610      	mov	r0, r2
  40d5de:	921d      	str	r2, [sp, #116]	; 0x74
  40d5e0:	911c      	str	r1, [sp, #112]	; 0x70
  40d5e2:	46ca      	mov	sl, r9
  40d5e4:	4601      	mov	r1, r0
  40d5e6:	f10a 0a08 	add.w	sl, sl, #8
  40d5ea:	3001      	adds	r0, #1
  40d5ec:	e507      	b.n	40cffe <_vfiprintf_r+0x352>
  40d5ee:	9b02      	ldr	r3, [sp, #8]
  40d5f0:	2a01      	cmp	r2, #1
  40d5f2:	f000 8098 	beq.w	40d726 <_vfiprintf_r+0xa7a>
  40d5f6:	2a02      	cmp	r2, #2
  40d5f8:	d10d      	bne.n	40d616 <_vfiprintf_r+0x96a>
  40d5fa:	9302      	str	r3, [sp, #8]
  40d5fc:	2600      	movs	r6, #0
  40d5fe:	2700      	movs	r7, #0
  40d600:	e5b0      	b.n	40d164 <_vfiprintf_r+0x4b8>
  40d602:	aa0f      	add	r2, sp, #60	; 0x3c
  40d604:	9904      	ldr	r1, [sp, #16]
  40d606:	9806      	ldr	r0, [sp, #24]
  40d608:	f7ff fb10 	bl	40cc2c <__sprint_r.part.0>
  40d60c:	2800      	cmp	r0, #0
  40d60e:	d0c9      	beq.n	40d5a4 <_vfiprintf_r+0x8f8>
  40d610:	f8dd b010 	ldr.w	fp, [sp, #16]
  40d614:	e797      	b.n	40d546 <_vfiprintf_r+0x89a>
  40d616:	9302      	str	r3, [sp, #8]
  40d618:	2600      	movs	r6, #0
  40d61a:	2700      	movs	r7, #0
  40d61c:	4649      	mov	r1, r9
  40d61e:	e000      	b.n	40d622 <_vfiprintf_r+0x976>
  40d620:	4659      	mov	r1, fp
  40d622:	08f2      	lsrs	r2, r6, #3
  40d624:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40d628:	08f8      	lsrs	r0, r7, #3
  40d62a:	f006 0307 	and.w	r3, r6, #7
  40d62e:	4607      	mov	r7, r0
  40d630:	4616      	mov	r6, r2
  40d632:	3330      	adds	r3, #48	; 0x30
  40d634:	ea56 0207 	orrs.w	r2, r6, r7
  40d638:	f801 3c01 	strb.w	r3, [r1, #-1]
  40d63c:	f101 3bff 	add.w	fp, r1, #4294967295
  40d640:	d1ee      	bne.n	40d620 <_vfiprintf_r+0x974>
  40d642:	9a02      	ldr	r2, [sp, #8]
  40d644:	07d6      	lsls	r6, r2, #31
  40d646:	f57f ad9d 	bpl.w	40d184 <_vfiprintf_r+0x4d8>
  40d64a:	2b30      	cmp	r3, #48	; 0x30
  40d64c:	f43f ad9a 	beq.w	40d184 <_vfiprintf_r+0x4d8>
  40d650:	3902      	subs	r1, #2
  40d652:	2330      	movs	r3, #48	; 0x30
  40d654:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40d658:	eba9 0301 	sub.w	r3, r9, r1
  40d65c:	9305      	str	r3, [sp, #20]
  40d65e:	468b      	mov	fp, r1
  40d660:	e476      	b.n	40cf50 <_vfiprintf_r+0x2a4>
  40d662:	9b03      	ldr	r3, [sp, #12]
  40d664:	9a08      	ldr	r2, [sp, #32]
  40d666:	428a      	cmp	r2, r1
  40d668:	bfac      	ite	ge
  40d66a:	189b      	addge	r3, r3, r2
  40d66c:	185b      	addlt	r3, r3, r1
  40d66e:	9303      	str	r3, [sp, #12]
  40d670:	e798      	b.n	40d5a4 <_vfiprintf_r+0x8f8>
  40d672:	2202      	movs	r2, #2
  40d674:	e44d      	b.n	40cf12 <_vfiprintf_r+0x266>
  40d676:	2f00      	cmp	r7, #0
  40d678:	bf08      	it	eq
  40d67a:	2e0a      	cmpeq	r6, #10
  40d67c:	d352      	bcc.n	40d724 <_vfiprintf_r+0xa78>
  40d67e:	46cb      	mov	fp, r9
  40d680:	4630      	mov	r0, r6
  40d682:	4639      	mov	r1, r7
  40d684:	220a      	movs	r2, #10
  40d686:	2300      	movs	r3, #0
  40d688:	f001 ff16 	bl	40f4b8 <__aeabi_uldivmod>
  40d68c:	3230      	adds	r2, #48	; 0x30
  40d68e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40d692:	4630      	mov	r0, r6
  40d694:	4639      	mov	r1, r7
  40d696:	2300      	movs	r3, #0
  40d698:	220a      	movs	r2, #10
  40d69a:	f001 ff0d 	bl	40f4b8 <__aeabi_uldivmod>
  40d69e:	4606      	mov	r6, r0
  40d6a0:	460f      	mov	r7, r1
  40d6a2:	ea56 0307 	orrs.w	r3, r6, r7
  40d6a6:	d1eb      	bne.n	40d680 <_vfiprintf_r+0x9d4>
  40d6a8:	e56c      	b.n	40d184 <_vfiprintf_r+0x4d8>
  40d6aa:	9405      	str	r4, [sp, #20]
  40d6ac:	46cb      	mov	fp, r9
  40d6ae:	e44f      	b.n	40cf50 <_vfiprintf_r+0x2a4>
  40d6b0:	aa0f      	add	r2, sp, #60	; 0x3c
  40d6b2:	9904      	ldr	r1, [sp, #16]
  40d6b4:	9806      	ldr	r0, [sp, #24]
  40d6b6:	f7ff fab9 	bl	40cc2c <__sprint_r.part.0>
  40d6ba:	2800      	cmp	r0, #0
  40d6bc:	d1a8      	bne.n	40d610 <_vfiprintf_r+0x964>
  40d6be:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d6c0:	46ca      	mov	sl, r9
  40d6c2:	e75e      	b.n	40d582 <_vfiprintf_r+0x8d6>
  40d6c4:	aa0f      	add	r2, sp, #60	; 0x3c
  40d6c6:	9904      	ldr	r1, [sp, #16]
  40d6c8:	9806      	ldr	r0, [sp, #24]
  40d6ca:	f7ff faaf 	bl	40cc2c <__sprint_r.part.0>
  40d6ce:	2800      	cmp	r0, #0
  40d6d0:	d19e      	bne.n	40d610 <_vfiprintf_r+0x964>
  40d6d2:	46ca      	mov	sl, r9
  40d6d4:	f7ff bbc0 	b.w	40ce58 <_vfiprintf_r+0x1ac>
  40d6d8:	00410954 	.word	0x00410954
  40d6dc:	00410944 	.word	0x00410944
  40d6e0:	3104      	adds	r1, #4
  40d6e2:	6816      	ldr	r6, [r2, #0]
  40d6e4:	9107      	str	r1, [sp, #28]
  40d6e6:	2201      	movs	r2, #1
  40d6e8:	2700      	movs	r7, #0
  40d6ea:	e412      	b.n	40cf12 <_vfiprintf_r+0x266>
  40d6ec:	9807      	ldr	r0, [sp, #28]
  40d6ee:	4601      	mov	r1, r0
  40d6f0:	3104      	adds	r1, #4
  40d6f2:	6806      	ldr	r6, [r0, #0]
  40d6f4:	9107      	str	r1, [sp, #28]
  40d6f6:	2700      	movs	r7, #0
  40d6f8:	e40b      	b.n	40cf12 <_vfiprintf_r+0x266>
  40d6fa:	680e      	ldr	r6, [r1, #0]
  40d6fc:	3104      	adds	r1, #4
  40d6fe:	9107      	str	r1, [sp, #28]
  40d700:	2700      	movs	r7, #0
  40d702:	e591      	b.n	40d228 <_vfiprintf_r+0x57c>
  40d704:	9907      	ldr	r1, [sp, #28]
  40d706:	680e      	ldr	r6, [r1, #0]
  40d708:	460a      	mov	r2, r1
  40d70a:	17f7      	asrs	r7, r6, #31
  40d70c:	3204      	adds	r2, #4
  40d70e:	9207      	str	r2, [sp, #28]
  40d710:	4630      	mov	r0, r6
  40d712:	4639      	mov	r1, r7
  40d714:	e50f      	b.n	40d136 <_vfiprintf_r+0x48a>
  40d716:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40d71a:	f000 fe7f 	bl	40e41c <__retarget_lock_release_recursive>
  40d71e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40d722:	e71a      	b.n	40d55a <_vfiprintf_r+0x8ae>
  40d724:	9b02      	ldr	r3, [sp, #8]
  40d726:	9302      	str	r3, [sp, #8]
  40d728:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40d72c:	3630      	adds	r6, #48	; 0x30
  40d72e:	2301      	movs	r3, #1
  40d730:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40d734:	9305      	str	r3, [sp, #20]
  40d736:	e40b      	b.n	40cf50 <_vfiprintf_r+0x2a4>
  40d738:	aa0f      	add	r2, sp, #60	; 0x3c
  40d73a:	9904      	ldr	r1, [sp, #16]
  40d73c:	9806      	ldr	r0, [sp, #24]
  40d73e:	f7ff fa75 	bl	40cc2c <__sprint_r.part.0>
  40d742:	2800      	cmp	r0, #0
  40d744:	f47f af64 	bne.w	40d610 <_vfiprintf_r+0x964>
  40d748:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d74a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d74c:	1c48      	adds	r0, r1, #1
  40d74e:	46ca      	mov	sl, r9
  40d750:	e651      	b.n	40d3f6 <_vfiprintf_r+0x74a>
  40d752:	aa0f      	add	r2, sp, #60	; 0x3c
  40d754:	9904      	ldr	r1, [sp, #16]
  40d756:	9806      	ldr	r0, [sp, #24]
  40d758:	f7ff fa68 	bl	40cc2c <__sprint_r.part.0>
  40d75c:	2800      	cmp	r0, #0
  40d75e:	f47f af57 	bne.w	40d610 <_vfiprintf_r+0x964>
  40d762:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d764:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d766:	1c48      	adds	r0, r1, #1
  40d768:	46ca      	mov	sl, r9
  40d76a:	e448      	b.n	40cffe <_vfiprintf_r+0x352>
  40d76c:	2a00      	cmp	r2, #0
  40d76e:	f040 8091 	bne.w	40d894 <_vfiprintf_r+0xbe8>
  40d772:	2001      	movs	r0, #1
  40d774:	4611      	mov	r1, r2
  40d776:	46ca      	mov	sl, r9
  40d778:	e641      	b.n	40d3fe <_vfiprintf_r+0x752>
  40d77a:	aa0f      	add	r2, sp, #60	; 0x3c
  40d77c:	9904      	ldr	r1, [sp, #16]
  40d77e:	9806      	ldr	r0, [sp, #24]
  40d780:	f7ff fa54 	bl	40cc2c <__sprint_r.part.0>
  40d784:	2800      	cmp	r0, #0
  40d786:	f47f af43 	bne.w	40d610 <_vfiprintf_r+0x964>
  40d78a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40d78c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d78e:	3001      	adds	r0, #1
  40d790:	46ca      	mov	sl, r9
  40d792:	e667      	b.n	40d464 <_vfiprintf_r+0x7b8>
  40d794:	46d3      	mov	fp, sl
  40d796:	e6d6      	b.n	40d546 <_vfiprintf_r+0x89a>
  40d798:	9e07      	ldr	r6, [sp, #28]
  40d79a:	3607      	adds	r6, #7
  40d79c:	f026 0207 	bic.w	r2, r6, #7
  40d7a0:	f102 0108 	add.w	r1, r2, #8
  40d7a4:	e9d2 6700 	ldrd	r6, r7, [r2]
  40d7a8:	9107      	str	r1, [sp, #28]
  40d7aa:	2201      	movs	r2, #1
  40d7ac:	f7ff bbb1 	b.w	40cf12 <_vfiprintf_r+0x266>
  40d7b0:	9e07      	ldr	r6, [sp, #28]
  40d7b2:	3607      	adds	r6, #7
  40d7b4:	f026 0607 	bic.w	r6, r6, #7
  40d7b8:	e9d6 0100 	ldrd	r0, r1, [r6]
  40d7bc:	f106 0208 	add.w	r2, r6, #8
  40d7c0:	9207      	str	r2, [sp, #28]
  40d7c2:	4606      	mov	r6, r0
  40d7c4:	460f      	mov	r7, r1
  40d7c6:	e4b6      	b.n	40d136 <_vfiprintf_r+0x48a>
  40d7c8:	9e07      	ldr	r6, [sp, #28]
  40d7ca:	3607      	adds	r6, #7
  40d7cc:	f026 0207 	bic.w	r2, r6, #7
  40d7d0:	f102 0108 	add.w	r1, r2, #8
  40d7d4:	e9d2 6700 	ldrd	r6, r7, [r2]
  40d7d8:	9107      	str	r1, [sp, #28]
  40d7da:	2200      	movs	r2, #0
  40d7dc:	f7ff bb99 	b.w	40cf12 <_vfiprintf_r+0x266>
  40d7e0:	9e07      	ldr	r6, [sp, #28]
  40d7e2:	3607      	adds	r6, #7
  40d7e4:	f026 0107 	bic.w	r1, r6, #7
  40d7e8:	f101 0008 	add.w	r0, r1, #8
  40d7ec:	9007      	str	r0, [sp, #28]
  40d7ee:	e9d1 6700 	ldrd	r6, r7, [r1]
  40d7f2:	e519      	b.n	40d228 <_vfiprintf_r+0x57c>
  40d7f4:	46cb      	mov	fp, r9
  40d7f6:	f7ff bbab 	b.w	40cf50 <_vfiprintf_r+0x2a4>
  40d7fa:	252d      	movs	r5, #45	; 0x2d
  40d7fc:	4276      	negs	r6, r6
  40d7fe:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40d802:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40d806:	2201      	movs	r2, #1
  40d808:	f7ff bb88 	b.w	40cf1c <_vfiprintf_r+0x270>
  40d80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d80e:	b9b3      	cbnz	r3, 40d83e <_vfiprintf_r+0xb92>
  40d810:	4611      	mov	r1, r2
  40d812:	2001      	movs	r0, #1
  40d814:	46ca      	mov	sl, r9
  40d816:	e5f2      	b.n	40d3fe <_vfiprintf_r+0x752>
  40d818:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40d81c:	f000 fdfe 	bl	40e41c <__retarget_lock_release_recursive>
  40d820:	f04f 33ff 	mov.w	r3, #4294967295
  40d824:	9303      	str	r3, [sp, #12]
  40d826:	f7ff bb50 	b.w	40ceca <_vfiprintf_r+0x21e>
  40d82a:	aa0f      	add	r2, sp, #60	; 0x3c
  40d82c:	9904      	ldr	r1, [sp, #16]
  40d82e:	9806      	ldr	r0, [sp, #24]
  40d830:	f7ff f9fc 	bl	40cc2c <__sprint_r.part.0>
  40d834:	2800      	cmp	r0, #0
  40d836:	f47f aeeb 	bne.w	40d610 <_vfiprintf_r+0x964>
  40d83a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d83c:	e6a9      	b.n	40d592 <_vfiprintf_r+0x8e6>
  40d83e:	ab0e      	add	r3, sp, #56	; 0x38
  40d840:	2202      	movs	r2, #2
  40d842:	931c      	str	r3, [sp, #112]	; 0x70
  40d844:	921d      	str	r2, [sp, #116]	; 0x74
  40d846:	2001      	movs	r0, #1
  40d848:	46ca      	mov	sl, r9
  40d84a:	e5d0      	b.n	40d3ee <_vfiprintf_r+0x742>
  40d84c:	aa0f      	add	r2, sp, #60	; 0x3c
  40d84e:	9904      	ldr	r1, [sp, #16]
  40d850:	9806      	ldr	r0, [sp, #24]
  40d852:	f7ff f9eb 	bl	40cc2c <__sprint_r.part.0>
  40d856:	2800      	cmp	r0, #0
  40d858:	f47f aeda 	bne.w	40d610 <_vfiprintf_r+0x964>
  40d85c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d85e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d860:	1c48      	adds	r0, r1, #1
  40d862:	46ca      	mov	sl, r9
  40d864:	e5a4      	b.n	40d3b0 <_vfiprintf_r+0x704>
  40d866:	9a07      	ldr	r2, [sp, #28]
  40d868:	9903      	ldr	r1, [sp, #12]
  40d86a:	6813      	ldr	r3, [r2, #0]
  40d86c:	17cd      	asrs	r5, r1, #31
  40d86e:	4608      	mov	r0, r1
  40d870:	3204      	adds	r2, #4
  40d872:	4629      	mov	r1, r5
  40d874:	9207      	str	r2, [sp, #28]
  40d876:	e9c3 0100 	strd	r0, r1, [r3]
  40d87a:	f7ff ba54 	b.w	40cd26 <_vfiprintf_r+0x7a>
  40d87e:	4658      	mov	r0, fp
  40d880:	9607      	str	r6, [sp, #28]
  40d882:	9302      	str	r3, [sp, #8]
  40d884:	f001 fbdc 	bl	40f040 <strlen>
  40d888:	2400      	movs	r4, #0
  40d88a:	9005      	str	r0, [sp, #20]
  40d88c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d890:	f7ff bb5e 	b.w	40cf50 <_vfiprintf_r+0x2a4>
  40d894:	aa0f      	add	r2, sp, #60	; 0x3c
  40d896:	9904      	ldr	r1, [sp, #16]
  40d898:	9806      	ldr	r0, [sp, #24]
  40d89a:	f7ff f9c7 	bl	40cc2c <__sprint_r.part.0>
  40d89e:	2800      	cmp	r0, #0
  40d8a0:	f47f aeb6 	bne.w	40d610 <_vfiprintf_r+0x964>
  40d8a4:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d8a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d8a8:	1c48      	adds	r0, r1, #1
  40d8aa:	46ca      	mov	sl, r9
  40d8ac:	e5a7      	b.n	40d3fe <_vfiprintf_r+0x752>
  40d8ae:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d8b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d8b2:	4e20      	ldr	r6, [pc, #128]	; (40d934 <_vfiprintf_r+0xc88>)
  40d8b4:	3101      	adds	r1, #1
  40d8b6:	f7ff bb90 	b.w	40cfda <_vfiprintf_r+0x32e>
  40d8ba:	2c06      	cmp	r4, #6
  40d8bc:	bf28      	it	cs
  40d8be:	2406      	movcs	r4, #6
  40d8c0:	9405      	str	r4, [sp, #20]
  40d8c2:	9607      	str	r6, [sp, #28]
  40d8c4:	9401      	str	r4, [sp, #4]
  40d8c6:	f8df b070 	ldr.w	fp, [pc, #112]	; 40d938 <_vfiprintf_r+0xc8c>
  40d8ca:	e4d5      	b.n	40d278 <_vfiprintf_r+0x5cc>
  40d8cc:	9810      	ldr	r0, [sp, #64]	; 0x40
  40d8ce:	4e19      	ldr	r6, [pc, #100]	; (40d934 <_vfiprintf_r+0xc88>)
  40d8d0:	3001      	adds	r0, #1
  40d8d2:	e603      	b.n	40d4dc <_vfiprintf_r+0x830>
  40d8d4:	9405      	str	r4, [sp, #20]
  40d8d6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d8da:	9607      	str	r6, [sp, #28]
  40d8dc:	9302      	str	r3, [sp, #8]
  40d8de:	4604      	mov	r4, r0
  40d8e0:	f7ff bb36 	b.w	40cf50 <_vfiprintf_r+0x2a4>
  40d8e4:	4686      	mov	lr, r0
  40d8e6:	f7ff bbce 	b.w	40d086 <_vfiprintf_r+0x3da>
  40d8ea:	9806      	ldr	r0, [sp, #24]
  40d8ec:	aa0f      	add	r2, sp, #60	; 0x3c
  40d8ee:	4659      	mov	r1, fp
  40d8f0:	f7ff f99c 	bl	40cc2c <__sprint_r.part.0>
  40d8f4:	2800      	cmp	r0, #0
  40d8f6:	f43f ae24 	beq.w	40d542 <_vfiprintf_r+0x896>
  40d8fa:	e624      	b.n	40d546 <_vfiprintf_r+0x89a>
  40d8fc:	9907      	ldr	r1, [sp, #28]
  40d8fe:	f898 2001 	ldrb.w	r2, [r8, #1]
  40d902:	680c      	ldr	r4, [r1, #0]
  40d904:	3104      	adds	r1, #4
  40d906:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40d90a:	46b8      	mov	r8, r7
  40d90c:	9107      	str	r1, [sp, #28]
  40d90e:	f7ff ba3f 	b.w	40cd90 <_vfiprintf_r+0xe4>
  40d912:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40d916:	e43c      	b.n	40d192 <_vfiprintf_r+0x4e6>
  40d918:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40d91c:	e521      	b.n	40d362 <_vfiprintf_r+0x6b6>
  40d91e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40d922:	f7ff bbf4 	b.w	40d10e <_vfiprintf_r+0x462>
  40d926:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40d92a:	e491      	b.n	40d250 <_vfiprintf_r+0x5a4>
  40d92c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40d930:	e469      	b.n	40d206 <_vfiprintf_r+0x55a>
  40d932:	bf00      	nop
  40d934:	00410944 	.word	0x00410944
  40d938:	0041093c 	.word	0x0041093c

0040d93c <__sbprintf>:
  40d93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d940:	460c      	mov	r4, r1
  40d942:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40d946:	8989      	ldrh	r1, [r1, #12]
  40d948:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40d94a:	89e5      	ldrh	r5, [r4, #14]
  40d94c:	9619      	str	r6, [sp, #100]	; 0x64
  40d94e:	f021 0102 	bic.w	r1, r1, #2
  40d952:	4606      	mov	r6, r0
  40d954:	69e0      	ldr	r0, [r4, #28]
  40d956:	f8ad 100c 	strh.w	r1, [sp, #12]
  40d95a:	4617      	mov	r7, r2
  40d95c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40d960:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40d962:	f8ad 500e 	strh.w	r5, [sp, #14]
  40d966:	4698      	mov	r8, r3
  40d968:	ad1a      	add	r5, sp, #104	; 0x68
  40d96a:	2300      	movs	r3, #0
  40d96c:	9007      	str	r0, [sp, #28]
  40d96e:	a816      	add	r0, sp, #88	; 0x58
  40d970:	9209      	str	r2, [sp, #36]	; 0x24
  40d972:	9306      	str	r3, [sp, #24]
  40d974:	9500      	str	r5, [sp, #0]
  40d976:	9504      	str	r5, [sp, #16]
  40d978:	9102      	str	r1, [sp, #8]
  40d97a:	9105      	str	r1, [sp, #20]
  40d97c:	f000 fd48 	bl	40e410 <__retarget_lock_init_recursive>
  40d980:	4643      	mov	r3, r8
  40d982:	463a      	mov	r2, r7
  40d984:	4669      	mov	r1, sp
  40d986:	4630      	mov	r0, r6
  40d988:	f7ff f990 	bl	40ccac <_vfiprintf_r>
  40d98c:	1e05      	subs	r5, r0, #0
  40d98e:	db07      	blt.n	40d9a0 <__sbprintf+0x64>
  40d990:	4630      	mov	r0, r6
  40d992:	4669      	mov	r1, sp
  40d994:	f000 f928 	bl	40dbe8 <_fflush_r>
  40d998:	2800      	cmp	r0, #0
  40d99a:	bf18      	it	ne
  40d99c:	f04f 35ff 	movne.w	r5, #4294967295
  40d9a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40d9a4:	065b      	lsls	r3, r3, #25
  40d9a6:	d503      	bpl.n	40d9b0 <__sbprintf+0x74>
  40d9a8:	89a3      	ldrh	r3, [r4, #12]
  40d9aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d9ae:	81a3      	strh	r3, [r4, #12]
  40d9b0:	9816      	ldr	r0, [sp, #88]	; 0x58
  40d9b2:	f000 fd2f 	bl	40e414 <__retarget_lock_close_recursive>
  40d9b6:	4628      	mov	r0, r5
  40d9b8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40d9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040d9c0 <__swsetup_r>:
  40d9c0:	b538      	push	{r3, r4, r5, lr}
  40d9c2:	4b30      	ldr	r3, [pc, #192]	; (40da84 <__swsetup_r+0xc4>)
  40d9c4:	681b      	ldr	r3, [r3, #0]
  40d9c6:	4605      	mov	r5, r0
  40d9c8:	460c      	mov	r4, r1
  40d9ca:	b113      	cbz	r3, 40d9d2 <__swsetup_r+0x12>
  40d9cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40d9ce:	2a00      	cmp	r2, #0
  40d9d0:	d038      	beq.n	40da44 <__swsetup_r+0x84>
  40d9d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d9d6:	b293      	uxth	r3, r2
  40d9d8:	0718      	lsls	r0, r3, #28
  40d9da:	d50c      	bpl.n	40d9f6 <__swsetup_r+0x36>
  40d9dc:	6920      	ldr	r0, [r4, #16]
  40d9de:	b1a8      	cbz	r0, 40da0c <__swsetup_r+0x4c>
  40d9e0:	f013 0201 	ands.w	r2, r3, #1
  40d9e4:	d01e      	beq.n	40da24 <__swsetup_r+0x64>
  40d9e6:	6963      	ldr	r3, [r4, #20]
  40d9e8:	2200      	movs	r2, #0
  40d9ea:	425b      	negs	r3, r3
  40d9ec:	61a3      	str	r3, [r4, #24]
  40d9ee:	60a2      	str	r2, [r4, #8]
  40d9f0:	b1f0      	cbz	r0, 40da30 <__swsetup_r+0x70>
  40d9f2:	2000      	movs	r0, #0
  40d9f4:	bd38      	pop	{r3, r4, r5, pc}
  40d9f6:	06d9      	lsls	r1, r3, #27
  40d9f8:	d53c      	bpl.n	40da74 <__swsetup_r+0xb4>
  40d9fa:	0758      	lsls	r0, r3, #29
  40d9fc:	d426      	bmi.n	40da4c <__swsetup_r+0x8c>
  40d9fe:	6920      	ldr	r0, [r4, #16]
  40da00:	f042 0308 	orr.w	r3, r2, #8
  40da04:	81a3      	strh	r3, [r4, #12]
  40da06:	b29b      	uxth	r3, r3
  40da08:	2800      	cmp	r0, #0
  40da0a:	d1e9      	bne.n	40d9e0 <__swsetup_r+0x20>
  40da0c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40da10:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40da14:	d0e4      	beq.n	40d9e0 <__swsetup_r+0x20>
  40da16:	4628      	mov	r0, r5
  40da18:	4621      	mov	r1, r4
  40da1a:	f000 fd2f 	bl	40e47c <__smakebuf_r>
  40da1e:	89a3      	ldrh	r3, [r4, #12]
  40da20:	6920      	ldr	r0, [r4, #16]
  40da22:	e7dd      	b.n	40d9e0 <__swsetup_r+0x20>
  40da24:	0799      	lsls	r1, r3, #30
  40da26:	bf58      	it	pl
  40da28:	6962      	ldrpl	r2, [r4, #20]
  40da2a:	60a2      	str	r2, [r4, #8]
  40da2c:	2800      	cmp	r0, #0
  40da2e:	d1e0      	bne.n	40d9f2 <__swsetup_r+0x32>
  40da30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40da34:	061a      	lsls	r2, r3, #24
  40da36:	d5dd      	bpl.n	40d9f4 <__swsetup_r+0x34>
  40da38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40da3c:	81a3      	strh	r3, [r4, #12]
  40da3e:	f04f 30ff 	mov.w	r0, #4294967295
  40da42:	bd38      	pop	{r3, r4, r5, pc}
  40da44:	4618      	mov	r0, r3
  40da46:	f000 f927 	bl	40dc98 <__sinit>
  40da4a:	e7c2      	b.n	40d9d2 <__swsetup_r+0x12>
  40da4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40da4e:	b151      	cbz	r1, 40da66 <__swsetup_r+0xa6>
  40da50:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40da54:	4299      	cmp	r1, r3
  40da56:	d004      	beq.n	40da62 <__swsetup_r+0xa2>
  40da58:	4628      	mov	r0, r5
  40da5a:	f000 fa43 	bl	40dee4 <_free_r>
  40da5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40da62:	2300      	movs	r3, #0
  40da64:	6323      	str	r3, [r4, #48]	; 0x30
  40da66:	2300      	movs	r3, #0
  40da68:	6920      	ldr	r0, [r4, #16]
  40da6a:	6063      	str	r3, [r4, #4]
  40da6c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40da70:	6020      	str	r0, [r4, #0]
  40da72:	e7c5      	b.n	40da00 <__swsetup_r+0x40>
  40da74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40da78:	2309      	movs	r3, #9
  40da7a:	602b      	str	r3, [r5, #0]
  40da7c:	f04f 30ff 	mov.w	r0, #4294967295
  40da80:	81a2      	strh	r2, [r4, #12]
  40da82:	bd38      	pop	{r3, r4, r5, pc}
  40da84:	20400184 	.word	0x20400184

0040da88 <register_fini>:
  40da88:	4b02      	ldr	r3, [pc, #8]	; (40da94 <register_fini+0xc>)
  40da8a:	b113      	cbz	r3, 40da92 <register_fini+0xa>
  40da8c:	4802      	ldr	r0, [pc, #8]	; (40da98 <register_fini+0x10>)
  40da8e:	f000 b805 	b.w	40da9c <atexit>
  40da92:	4770      	bx	lr
  40da94:	00000000 	.word	0x00000000
  40da98:	0040dd09 	.word	0x0040dd09

0040da9c <atexit>:
  40da9c:	2300      	movs	r3, #0
  40da9e:	4601      	mov	r1, r0
  40daa0:	461a      	mov	r2, r3
  40daa2:	4618      	mov	r0, r3
  40daa4:	f001 bbe0 	b.w	40f268 <__register_exitproc>

0040daa8 <__sflush_r>:
  40daa8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40daac:	b29a      	uxth	r2, r3
  40daae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40dab2:	460d      	mov	r5, r1
  40dab4:	0711      	lsls	r1, r2, #28
  40dab6:	4680      	mov	r8, r0
  40dab8:	d43a      	bmi.n	40db30 <__sflush_r+0x88>
  40daba:	686a      	ldr	r2, [r5, #4]
  40dabc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40dac0:	2a00      	cmp	r2, #0
  40dac2:	81ab      	strh	r3, [r5, #12]
  40dac4:	dd6f      	ble.n	40dba6 <__sflush_r+0xfe>
  40dac6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40dac8:	2c00      	cmp	r4, #0
  40daca:	d049      	beq.n	40db60 <__sflush_r+0xb8>
  40dacc:	2200      	movs	r2, #0
  40dace:	b29b      	uxth	r3, r3
  40dad0:	f8d8 6000 	ldr.w	r6, [r8]
  40dad4:	f8c8 2000 	str.w	r2, [r8]
  40dad8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40dadc:	d067      	beq.n	40dbae <__sflush_r+0x106>
  40dade:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40dae0:	075f      	lsls	r7, r3, #29
  40dae2:	d505      	bpl.n	40daf0 <__sflush_r+0x48>
  40dae4:	6869      	ldr	r1, [r5, #4]
  40dae6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40dae8:	1a52      	subs	r2, r2, r1
  40daea:	b10b      	cbz	r3, 40daf0 <__sflush_r+0x48>
  40daec:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40daee:	1ad2      	subs	r2, r2, r3
  40daf0:	2300      	movs	r3, #0
  40daf2:	69e9      	ldr	r1, [r5, #28]
  40daf4:	4640      	mov	r0, r8
  40daf6:	47a0      	blx	r4
  40daf8:	1c44      	adds	r4, r0, #1
  40dafa:	d03c      	beq.n	40db76 <__sflush_r+0xce>
  40dafc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40db00:	692a      	ldr	r2, [r5, #16]
  40db02:	602a      	str	r2, [r5, #0]
  40db04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40db08:	2200      	movs	r2, #0
  40db0a:	81ab      	strh	r3, [r5, #12]
  40db0c:	04db      	lsls	r3, r3, #19
  40db0e:	606a      	str	r2, [r5, #4]
  40db10:	d447      	bmi.n	40dba2 <__sflush_r+0xfa>
  40db12:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40db14:	f8c8 6000 	str.w	r6, [r8]
  40db18:	b311      	cbz	r1, 40db60 <__sflush_r+0xb8>
  40db1a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40db1e:	4299      	cmp	r1, r3
  40db20:	d002      	beq.n	40db28 <__sflush_r+0x80>
  40db22:	4640      	mov	r0, r8
  40db24:	f000 f9de 	bl	40dee4 <_free_r>
  40db28:	2000      	movs	r0, #0
  40db2a:	6328      	str	r0, [r5, #48]	; 0x30
  40db2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40db30:	692e      	ldr	r6, [r5, #16]
  40db32:	b1ae      	cbz	r6, 40db60 <__sflush_r+0xb8>
  40db34:	682c      	ldr	r4, [r5, #0]
  40db36:	602e      	str	r6, [r5, #0]
  40db38:	0791      	lsls	r1, r2, #30
  40db3a:	bf0c      	ite	eq
  40db3c:	696b      	ldreq	r3, [r5, #20]
  40db3e:	2300      	movne	r3, #0
  40db40:	1ba4      	subs	r4, r4, r6
  40db42:	60ab      	str	r3, [r5, #8]
  40db44:	e00a      	b.n	40db5c <__sflush_r+0xb4>
  40db46:	4623      	mov	r3, r4
  40db48:	4632      	mov	r2, r6
  40db4a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40db4c:	69e9      	ldr	r1, [r5, #28]
  40db4e:	4640      	mov	r0, r8
  40db50:	47b8      	blx	r7
  40db52:	2800      	cmp	r0, #0
  40db54:	eba4 0400 	sub.w	r4, r4, r0
  40db58:	4406      	add	r6, r0
  40db5a:	dd04      	ble.n	40db66 <__sflush_r+0xbe>
  40db5c:	2c00      	cmp	r4, #0
  40db5e:	dcf2      	bgt.n	40db46 <__sflush_r+0x9e>
  40db60:	2000      	movs	r0, #0
  40db62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40db66:	89ab      	ldrh	r3, [r5, #12]
  40db68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40db6c:	81ab      	strh	r3, [r5, #12]
  40db6e:	f04f 30ff 	mov.w	r0, #4294967295
  40db72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40db76:	f8d8 4000 	ldr.w	r4, [r8]
  40db7a:	2c1d      	cmp	r4, #29
  40db7c:	d8f3      	bhi.n	40db66 <__sflush_r+0xbe>
  40db7e:	4b19      	ldr	r3, [pc, #100]	; (40dbe4 <__sflush_r+0x13c>)
  40db80:	40e3      	lsrs	r3, r4
  40db82:	43db      	mvns	r3, r3
  40db84:	f013 0301 	ands.w	r3, r3, #1
  40db88:	d1ed      	bne.n	40db66 <__sflush_r+0xbe>
  40db8a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40db8e:	606b      	str	r3, [r5, #4]
  40db90:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40db94:	6929      	ldr	r1, [r5, #16]
  40db96:	81ab      	strh	r3, [r5, #12]
  40db98:	04da      	lsls	r2, r3, #19
  40db9a:	6029      	str	r1, [r5, #0]
  40db9c:	d5b9      	bpl.n	40db12 <__sflush_r+0x6a>
  40db9e:	2c00      	cmp	r4, #0
  40dba0:	d1b7      	bne.n	40db12 <__sflush_r+0x6a>
  40dba2:	6528      	str	r0, [r5, #80]	; 0x50
  40dba4:	e7b5      	b.n	40db12 <__sflush_r+0x6a>
  40dba6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40dba8:	2a00      	cmp	r2, #0
  40dbaa:	dc8c      	bgt.n	40dac6 <__sflush_r+0x1e>
  40dbac:	e7d8      	b.n	40db60 <__sflush_r+0xb8>
  40dbae:	2301      	movs	r3, #1
  40dbb0:	69e9      	ldr	r1, [r5, #28]
  40dbb2:	4640      	mov	r0, r8
  40dbb4:	47a0      	blx	r4
  40dbb6:	1c43      	adds	r3, r0, #1
  40dbb8:	4602      	mov	r2, r0
  40dbba:	d002      	beq.n	40dbc2 <__sflush_r+0x11a>
  40dbbc:	89ab      	ldrh	r3, [r5, #12]
  40dbbe:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40dbc0:	e78e      	b.n	40dae0 <__sflush_r+0x38>
  40dbc2:	f8d8 3000 	ldr.w	r3, [r8]
  40dbc6:	2b00      	cmp	r3, #0
  40dbc8:	d0f8      	beq.n	40dbbc <__sflush_r+0x114>
  40dbca:	2b1d      	cmp	r3, #29
  40dbcc:	d001      	beq.n	40dbd2 <__sflush_r+0x12a>
  40dbce:	2b16      	cmp	r3, #22
  40dbd0:	d102      	bne.n	40dbd8 <__sflush_r+0x130>
  40dbd2:	f8c8 6000 	str.w	r6, [r8]
  40dbd6:	e7c3      	b.n	40db60 <__sflush_r+0xb8>
  40dbd8:	89ab      	ldrh	r3, [r5, #12]
  40dbda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40dbde:	81ab      	strh	r3, [r5, #12]
  40dbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40dbe4:	20400001 	.word	0x20400001

0040dbe8 <_fflush_r>:
  40dbe8:	b538      	push	{r3, r4, r5, lr}
  40dbea:	460d      	mov	r5, r1
  40dbec:	4604      	mov	r4, r0
  40dbee:	b108      	cbz	r0, 40dbf4 <_fflush_r+0xc>
  40dbf0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40dbf2:	b1bb      	cbz	r3, 40dc24 <_fflush_r+0x3c>
  40dbf4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40dbf8:	b188      	cbz	r0, 40dc1e <_fflush_r+0x36>
  40dbfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40dbfc:	07db      	lsls	r3, r3, #31
  40dbfe:	d401      	bmi.n	40dc04 <_fflush_r+0x1c>
  40dc00:	0581      	lsls	r1, r0, #22
  40dc02:	d517      	bpl.n	40dc34 <_fflush_r+0x4c>
  40dc04:	4620      	mov	r0, r4
  40dc06:	4629      	mov	r1, r5
  40dc08:	f7ff ff4e 	bl	40daa8 <__sflush_r>
  40dc0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40dc0e:	07da      	lsls	r2, r3, #31
  40dc10:	4604      	mov	r4, r0
  40dc12:	d402      	bmi.n	40dc1a <_fflush_r+0x32>
  40dc14:	89ab      	ldrh	r3, [r5, #12]
  40dc16:	059b      	lsls	r3, r3, #22
  40dc18:	d507      	bpl.n	40dc2a <_fflush_r+0x42>
  40dc1a:	4620      	mov	r0, r4
  40dc1c:	bd38      	pop	{r3, r4, r5, pc}
  40dc1e:	4604      	mov	r4, r0
  40dc20:	4620      	mov	r0, r4
  40dc22:	bd38      	pop	{r3, r4, r5, pc}
  40dc24:	f000 f838 	bl	40dc98 <__sinit>
  40dc28:	e7e4      	b.n	40dbf4 <_fflush_r+0xc>
  40dc2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40dc2c:	f000 fbf6 	bl	40e41c <__retarget_lock_release_recursive>
  40dc30:	4620      	mov	r0, r4
  40dc32:	bd38      	pop	{r3, r4, r5, pc}
  40dc34:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40dc36:	f000 fbef 	bl	40e418 <__retarget_lock_acquire_recursive>
  40dc3a:	e7e3      	b.n	40dc04 <_fflush_r+0x1c>

0040dc3c <_cleanup_r>:
  40dc3c:	4901      	ldr	r1, [pc, #4]	; (40dc44 <_cleanup_r+0x8>)
  40dc3e:	f000 bbaf 	b.w	40e3a0 <_fwalk_reent>
  40dc42:	bf00      	nop
  40dc44:	0040f351 	.word	0x0040f351

0040dc48 <std.isra.0>:
  40dc48:	b510      	push	{r4, lr}
  40dc4a:	2300      	movs	r3, #0
  40dc4c:	4604      	mov	r4, r0
  40dc4e:	8181      	strh	r1, [r0, #12]
  40dc50:	81c2      	strh	r2, [r0, #14]
  40dc52:	6003      	str	r3, [r0, #0]
  40dc54:	6043      	str	r3, [r0, #4]
  40dc56:	6083      	str	r3, [r0, #8]
  40dc58:	6643      	str	r3, [r0, #100]	; 0x64
  40dc5a:	6103      	str	r3, [r0, #16]
  40dc5c:	6143      	str	r3, [r0, #20]
  40dc5e:	6183      	str	r3, [r0, #24]
  40dc60:	4619      	mov	r1, r3
  40dc62:	2208      	movs	r2, #8
  40dc64:	305c      	adds	r0, #92	; 0x5c
  40dc66:	f7fe fec3 	bl	40c9f0 <memset>
  40dc6a:	4807      	ldr	r0, [pc, #28]	; (40dc88 <std.isra.0+0x40>)
  40dc6c:	4907      	ldr	r1, [pc, #28]	; (40dc8c <std.isra.0+0x44>)
  40dc6e:	4a08      	ldr	r2, [pc, #32]	; (40dc90 <std.isra.0+0x48>)
  40dc70:	4b08      	ldr	r3, [pc, #32]	; (40dc94 <std.isra.0+0x4c>)
  40dc72:	6220      	str	r0, [r4, #32]
  40dc74:	61e4      	str	r4, [r4, #28]
  40dc76:	6261      	str	r1, [r4, #36]	; 0x24
  40dc78:	62a2      	str	r2, [r4, #40]	; 0x28
  40dc7a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40dc7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40dc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40dc84:	f000 bbc4 	b.w	40e410 <__retarget_lock_init_recursive>
  40dc88:	0040efa1 	.word	0x0040efa1
  40dc8c:	0040efc5 	.word	0x0040efc5
  40dc90:	0040f001 	.word	0x0040f001
  40dc94:	0040f021 	.word	0x0040f021

0040dc98 <__sinit>:
  40dc98:	b510      	push	{r4, lr}
  40dc9a:	4604      	mov	r4, r0
  40dc9c:	4812      	ldr	r0, [pc, #72]	; (40dce8 <__sinit+0x50>)
  40dc9e:	f000 fbbb 	bl	40e418 <__retarget_lock_acquire_recursive>
  40dca2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40dca4:	b9d2      	cbnz	r2, 40dcdc <__sinit+0x44>
  40dca6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40dcaa:	4810      	ldr	r0, [pc, #64]	; (40dcec <__sinit+0x54>)
  40dcac:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40dcb0:	2103      	movs	r1, #3
  40dcb2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40dcb6:	63e0      	str	r0, [r4, #60]	; 0x3c
  40dcb8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40dcbc:	6860      	ldr	r0, [r4, #4]
  40dcbe:	2104      	movs	r1, #4
  40dcc0:	f7ff ffc2 	bl	40dc48 <std.isra.0>
  40dcc4:	2201      	movs	r2, #1
  40dcc6:	2109      	movs	r1, #9
  40dcc8:	68a0      	ldr	r0, [r4, #8]
  40dcca:	f7ff ffbd 	bl	40dc48 <std.isra.0>
  40dcce:	2202      	movs	r2, #2
  40dcd0:	2112      	movs	r1, #18
  40dcd2:	68e0      	ldr	r0, [r4, #12]
  40dcd4:	f7ff ffb8 	bl	40dc48 <std.isra.0>
  40dcd8:	2301      	movs	r3, #1
  40dcda:	63a3      	str	r3, [r4, #56]	; 0x38
  40dcdc:	4802      	ldr	r0, [pc, #8]	; (40dce8 <__sinit+0x50>)
  40dcde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40dce2:	f000 bb9b 	b.w	40e41c <__retarget_lock_release_recursive>
  40dce6:	bf00      	nop
  40dce8:	20401008 	.word	0x20401008
  40dcec:	0040dc3d 	.word	0x0040dc3d

0040dcf0 <__sfp_lock_acquire>:
  40dcf0:	4801      	ldr	r0, [pc, #4]	; (40dcf8 <__sfp_lock_acquire+0x8>)
  40dcf2:	f000 bb91 	b.w	40e418 <__retarget_lock_acquire_recursive>
  40dcf6:	bf00      	nop
  40dcf8:	2040101c 	.word	0x2040101c

0040dcfc <__sfp_lock_release>:
  40dcfc:	4801      	ldr	r0, [pc, #4]	; (40dd04 <__sfp_lock_release+0x8>)
  40dcfe:	f000 bb8d 	b.w	40e41c <__retarget_lock_release_recursive>
  40dd02:	bf00      	nop
  40dd04:	2040101c 	.word	0x2040101c

0040dd08 <__libc_fini_array>:
  40dd08:	b538      	push	{r3, r4, r5, lr}
  40dd0a:	4c0a      	ldr	r4, [pc, #40]	; (40dd34 <__libc_fini_array+0x2c>)
  40dd0c:	4d0a      	ldr	r5, [pc, #40]	; (40dd38 <__libc_fini_array+0x30>)
  40dd0e:	1b64      	subs	r4, r4, r5
  40dd10:	10a4      	asrs	r4, r4, #2
  40dd12:	d00a      	beq.n	40dd2a <__libc_fini_array+0x22>
  40dd14:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40dd18:	3b01      	subs	r3, #1
  40dd1a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40dd1e:	3c01      	subs	r4, #1
  40dd20:	f855 3904 	ldr.w	r3, [r5], #-4
  40dd24:	4798      	blx	r3
  40dd26:	2c00      	cmp	r4, #0
  40dd28:	d1f9      	bne.n	40dd1e <__libc_fini_array+0x16>
  40dd2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40dd2e:	f002 beab 	b.w	410a88 <_fini>
  40dd32:	bf00      	nop
  40dd34:	00410a98 	.word	0x00410a98
  40dd38:	00410a94 	.word	0x00410a94

0040dd3c <__fputwc>:
  40dd3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40dd40:	b082      	sub	sp, #8
  40dd42:	4680      	mov	r8, r0
  40dd44:	4689      	mov	r9, r1
  40dd46:	4614      	mov	r4, r2
  40dd48:	f000 fb54 	bl	40e3f4 <__locale_mb_cur_max>
  40dd4c:	2801      	cmp	r0, #1
  40dd4e:	d036      	beq.n	40ddbe <__fputwc+0x82>
  40dd50:	464a      	mov	r2, r9
  40dd52:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40dd56:	a901      	add	r1, sp, #4
  40dd58:	4640      	mov	r0, r8
  40dd5a:	f001 fa37 	bl	40f1cc <_wcrtomb_r>
  40dd5e:	1c42      	adds	r2, r0, #1
  40dd60:	4606      	mov	r6, r0
  40dd62:	d025      	beq.n	40ddb0 <__fputwc+0x74>
  40dd64:	b3a8      	cbz	r0, 40ddd2 <__fputwc+0x96>
  40dd66:	f89d e004 	ldrb.w	lr, [sp, #4]
  40dd6a:	2500      	movs	r5, #0
  40dd6c:	f10d 0a04 	add.w	sl, sp, #4
  40dd70:	e009      	b.n	40dd86 <__fputwc+0x4a>
  40dd72:	6823      	ldr	r3, [r4, #0]
  40dd74:	1c5a      	adds	r2, r3, #1
  40dd76:	6022      	str	r2, [r4, #0]
  40dd78:	f883 e000 	strb.w	lr, [r3]
  40dd7c:	3501      	adds	r5, #1
  40dd7e:	42b5      	cmp	r5, r6
  40dd80:	d227      	bcs.n	40ddd2 <__fputwc+0x96>
  40dd82:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40dd86:	68a3      	ldr	r3, [r4, #8]
  40dd88:	3b01      	subs	r3, #1
  40dd8a:	2b00      	cmp	r3, #0
  40dd8c:	60a3      	str	r3, [r4, #8]
  40dd8e:	daf0      	bge.n	40dd72 <__fputwc+0x36>
  40dd90:	69a7      	ldr	r7, [r4, #24]
  40dd92:	42bb      	cmp	r3, r7
  40dd94:	4671      	mov	r1, lr
  40dd96:	4622      	mov	r2, r4
  40dd98:	4640      	mov	r0, r8
  40dd9a:	db02      	blt.n	40dda2 <__fputwc+0x66>
  40dd9c:	f1be 0f0a 	cmp.w	lr, #10
  40dda0:	d1e7      	bne.n	40dd72 <__fputwc+0x36>
  40dda2:	f001 f9bb 	bl	40f11c <__swbuf_r>
  40dda6:	1c43      	adds	r3, r0, #1
  40dda8:	d1e8      	bne.n	40dd7c <__fputwc+0x40>
  40ddaa:	b002      	add	sp, #8
  40ddac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ddb0:	89a3      	ldrh	r3, [r4, #12]
  40ddb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ddb6:	81a3      	strh	r3, [r4, #12]
  40ddb8:	b002      	add	sp, #8
  40ddba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ddbe:	f109 33ff 	add.w	r3, r9, #4294967295
  40ddc2:	2bfe      	cmp	r3, #254	; 0xfe
  40ddc4:	d8c4      	bhi.n	40dd50 <__fputwc+0x14>
  40ddc6:	fa5f fe89 	uxtb.w	lr, r9
  40ddca:	4606      	mov	r6, r0
  40ddcc:	f88d e004 	strb.w	lr, [sp, #4]
  40ddd0:	e7cb      	b.n	40dd6a <__fputwc+0x2e>
  40ddd2:	4648      	mov	r0, r9
  40ddd4:	b002      	add	sp, #8
  40ddd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ddda:	bf00      	nop

0040dddc <_fputwc_r>:
  40dddc:	b530      	push	{r4, r5, lr}
  40ddde:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40dde0:	f013 0f01 	tst.w	r3, #1
  40dde4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40dde8:	4614      	mov	r4, r2
  40ddea:	b083      	sub	sp, #12
  40ddec:	4605      	mov	r5, r0
  40ddee:	b29a      	uxth	r2, r3
  40ddf0:	d101      	bne.n	40ddf6 <_fputwc_r+0x1a>
  40ddf2:	0590      	lsls	r0, r2, #22
  40ddf4:	d51c      	bpl.n	40de30 <_fputwc_r+0x54>
  40ddf6:	0490      	lsls	r0, r2, #18
  40ddf8:	d406      	bmi.n	40de08 <_fputwc_r+0x2c>
  40ddfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40ddfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40de00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40de04:	81a3      	strh	r3, [r4, #12]
  40de06:	6662      	str	r2, [r4, #100]	; 0x64
  40de08:	4628      	mov	r0, r5
  40de0a:	4622      	mov	r2, r4
  40de0c:	f7ff ff96 	bl	40dd3c <__fputwc>
  40de10:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40de12:	07da      	lsls	r2, r3, #31
  40de14:	4605      	mov	r5, r0
  40de16:	d402      	bmi.n	40de1e <_fputwc_r+0x42>
  40de18:	89a3      	ldrh	r3, [r4, #12]
  40de1a:	059b      	lsls	r3, r3, #22
  40de1c:	d502      	bpl.n	40de24 <_fputwc_r+0x48>
  40de1e:	4628      	mov	r0, r5
  40de20:	b003      	add	sp, #12
  40de22:	bd30      	pop	{r4, r5, pc}
  40de24:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40de26:	f000 faf9 	bl	40e41c <__retarget_lock_release_recursive>
  40de2a:	4628      	mov	r0, r5
  40de2c:	b003      	add	sp, #12
  40de2e:	bd30      	pop	{r4, r5, pc}
  40de30:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40de32:	9101      	str	r1, [sp, #4]
  40de34:	f000 faf0 	bl	40e418 <__retarget_lock_acquire_recursive>
  40de38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40de3c:	9901      	ldr	r1, [sp, #4]
  40de3e:	b29a      	uxth	r2, r3
  40de40:	e7d9      	b.n	40ddf6 <_fputwc_r+0x1a>
  40de42:	bf00      	nop

0040de44 <_malloc_trim_r>:
  40de44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40de46:	4f24      	ldr	r7, [pc, #144]	; (40ded8 <_malloc_trim_r+0x94>)
  40de48:	460c      	mov	r4, r1
  40de4a:	4606      	mov	r6, r0
  40de4c:	f000 fee4 	bl	40ec18 <__malloc_lock>
  40de50:	68bb      	ldr	r3, [r7, #8]
  40de52:	685d      	ldr	r5, [r3, #4]
  40de54:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40de58:	310f      	adds	r1, #15
  40de5a:	f025 0503 	bic.w	r5, r5, #3
  40de5e:	4429      	add	r1, r5
  40de60:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40de64:	f021 010f 	bic.w	r1, r1, #15
  40de68:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40de6c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40de70:	db07      	blt.n	40de82 <_malloc_trim_r+0x3e>
  40de72:	2100      	movs	r1, #0
  40de74:	4630      	mov	r0, r6
  40de76:	f001 f881 	bl	40ef7c <_sbrk_r>
  40de7a:	68bb      	ldr	r3, [r7, #8]
  40de7c:	442b      	add	r3, r5
  40de7e:	4298      	cmp	r0, r3
  40de80:	d004      	beq.n	40de8c <_malloc_trim_r+0x48>
  40de82:	4630      	mov	r0, r6
  40de84:	f000 fece 	bl	40ec24 <__malloc_unlock>
  40de88:	2000      	movs	r0, #0
  40de8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40de8c:	4261      	negs	r1, r4
  40de8e:	4630      	mov	r0, r6
  40de90:	f001 f874 	bl	40ef7c <_sbrk_r>
  40de94:	3001      	adds	r0, #1
  40de96:	d00d      	beq.n	40deb4 <_malloc_trim_r+0x70>
  40de98:	4b10      	ldr	r3, [pc, #64]	; (40dedc <_malloc_trim_r+0x98>)
  40de9a:	68ba      	ldr	r2, [r7, #8]
  40de9c:	6819      	ldr	r1, [r3, #0]
  40de9e:	1b2d      	subs	r5, r5, r4
  40dea0:	f045 0501 	orr.w	r5, r5, #1
  40dea4:	4630      	mov	r0, r6
  40dea6:	1b09      	subs	r1, r1, r4
  40dea8:	6055      	str	r5, [r2, #4]
  40deaa:	6019      	str	r1, [r3, #0]
  40deac:	f000 feba 	bl	40ec24 <__malloc_unlock>
  40deb0:	2001      	movs	r0, #1
  40deb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40deb4:	2100      	movs	r1, #0
  40deb6:	4630      	mov	r0, r6
  40deb8:	f001 f860 	bl	40ef7c <_sbrk_r>
  40debc:	68ba      	ldr	r2, [r7, #8]
  40debe:	1a83      	subs	r3, r0, r2
  40dec0:	2b0f      	cmp	r3, #15
  40dec2:	ddde      	ble.n	40de82 <_malloc_trim_r+0x3e>
  40dec4:	4c06      	ldr	r4, [pc, #24]	; (40dee0 <_malloc_trim_r+0x9c>)
  40dec6:	4905      	ldr	r1, [pc, #20]	; (40dedc <_malloc_trim_r+0x98>)
  40dec8:	6824      	ldr	r4, [r4, #0]
  40deca:	f043 0301 	orr.w	r3, r3, #1
  40dece:	1b00      	subs	r0, r0, r4
  40ded0:	6053      	str	r3, [r2, #4]
  40ded2:	6008      	str	r0, [r1, #0]
  40ded4:	e7d5      	b.n	40de82 <_malloc_trim_r+0x3e>
  40ded6:	bf00      	nop
  40ded8:	20400720 	.word	0x20400720
  40dedc:	20400ed0 	.word	0x20400ed0
  40dee0:	20400b28 	.word	0x20400b28

0040dee4 <_free_r>:
  40dee4:	2900      	cmp	r1, #0
  40dee6:	d044      	beq.n	40df72 <_free_r+0x8e>
  40dee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40deec:	460d      	mov	r5, r1
  40deee:	4680      	mov	r8, r0
  40def0:	f000 fe92 	bl	40ec18 <__malloc_lock>
  40def4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40def8:	4969      	ldr	r1, [pc, #420]	; (40e0a0 <_free_r+0x1bc>)
  40defa:	f027 0301 	bic.w	r3, r7, #1
  40defe:	f1a5 0408 	sub.w	r4, r5, #8
  40df02:	18e2      	adds	r2, r4, r3
  40df04:	688e      	ldr	r6, [r1, #8]
  40df06:	6850      	ldr	r0, [r2, #4]
  40df08:	42b2      	cmp	r2, r6
  40df0a:	f020 0003 	bic.w	r0, r0, #3
  40df0e:	d05e      	beq.n	40dfce <_free_r+0xea>
  40df10:	07fe      	lsls	r6, r7, #31
  40df12:	6050      	str	r0, [r2, #4]
  40df14:	d40b      	bmi.n	40df2e <_free_r+0x4a>
  40df16:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40df1a:	1be4      	subs	r4, r4, r7
  40df1c:	f101 0e08 	add.w	lr, r1, #8
  40df20:	68a5      	ldr	r5, [r4, #8]
  40df22:	4575      	cmp	r5, lr
  40df24:	443b      	add	r3, r7
  40df26:	d06d      	beq.n	40e004 <_free_r+0x120>
  40df28:	68e7      	ldr	r7, [r4, #12]
  40df2a:	60ef      	str	r7, [r5, #12]
  40df2c:	60bd      	str	r5, [r7, #8]
  40df2e:	1815      	adds	r5, r2, r0
  40df30:	686d      	ldr	r5, [r5, #4]
  40df32:	07ed      	lsls	r5, r5, #31
  40df34:	d53e      	bpl.n	40dfb4 <_free_r+0xd0>
  40df36:	f043 0201 	orr.w	r2, r3, #1
  40df3a:	6062      	str	r2, [r4, #4]
  40df3c:	50e3      	str	r3, [r4, r3]
  40df3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40df42:	d217      	bcs.n	40df74 <_free_r+0x90>
  40df44:	08db      	lsrs	r3, r3, #3
  40df46:	1c58      	adds	r0, r3, #1
  40df48:	109a      	asrs	r2, r3, #2
  40df4a:	684d      	ldr	r5, [r1, #4]
  40df4c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40df50:	60a7      	str	r7, [r4, #8]
  40df52:	2301      	movs	r3, #1
  40df54:	4093      	lsls	r3, r2
  40df56:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40df5a:	432b      	orrs	r3, r5
  40df5c:	3a08      	subs	r2, #8
  40df5e:	60e2      	str	r2, [r4, #12]
  40df60:	604b      	str	r3, [r1, #4]
  40df62:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40df66:	60fc      	str	r4, [r7, #12]
  40df68:	4640      	mov	r0, r8
  40df6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40df6e:	f000 be59 	b.w	40ec24 <__malloc_unlock>
  40df72:	4770      	bx	lr
  40df74:	0a5a      	lsrs	r2, r3, #9
  40df76:	2a04      	cmp	r2, #4
  40df78:	d852      	bhi.n	40e020 <_free_r+0x13c>
  40df7a:	099a      	lsrs	r2, r3, #6
  40df7c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40df80:	00ff      	lsls	r7, r7, #3
  40df82:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40df86:	19c8      	adds	r0, r1, r7
  40df88:	59ca      	ldr	r2, [r1, r7]
  40df8a:	3808      	subs	r0, #8
  40df8c:	4290      	cmp	r0, r2
  40df8e:	d04f      	beq.n	40e030 <_free_r+0x14c>
  40df90:	6851      	ldr	r1, [r2, #4]
  40df92:	f021 0103 	bic.w	r1, r1, #3
  40df96:	428b      	cmp	r3, r1
  40df98:	d232      	bcs.n	40e000 <_free_r+0x11c>
  40df9a:	6892      	ldr	r2, [r2, #8]
  40df9c:	4290      	cmp	r0, r2
  40df9e:	d1f7      	bne.n	40df90 <_free_r+0xac>
  40dfa0:	68c3      	ldr	r3, [r0, #12]
  40dfa2:	60a0      	str	r0, [r4, #8]
  40dfa4:	60e3      	str	r3, [r4, #12]
  40dfa6:	609c      	str	r4, [r3, #8]
  40dfa8:	60c4      	str	r4, [r0, #12]
  40dfaa:	4640      	mov	r0, r8
  40dfac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40dfb0:	f000 be38 	b.w	40ec24 <__malloc_unlock>
  40dfb4:	6895      	ldr	r5, [r2, #8]
  40dfb6:	4f3b      	ldr	r7, [pc, #236]	; (40e0a4 <_free_r+0x1c0>)
  40dfb8:	42bd      	cmp	r5, r7
  40dfba:	4403      	add	r3, r0
  40dfbc:	d040      	beq.n	40e040 <_free_r+0x15c>
  40dfbe:	68d0      	ldr	r0, [r2, #12]
  40dfc0:	60e8      	str	r0, [r5, #12]
  40dfc2:	f043 0201 	orr.w	r2, r3, #1
  40dfc6:	6085      	str	r5, [r0, #8]
  40dfc8:	6062      	str	r2, [r4, #4]
  40dfca:	50e3      	str	r3, [r4, r3]
  40dfcc:	e7b7      	b.n	40df3e <_free_r+0x5a>
  40dfce:	07ff      	lsls	r7, r7, #31
  40dfd0:	4403      	add	r3, r0
  40dfd2:	d407      	bmi.n	40dfe4 <_free_r+0x100>
  40dfd4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40dfd8:	1aa4      	subs	r4, r4, r2
  40dfda:	4413      	add	r3, r2
  40dfdc:	68a0      	ldr	r0, [r4, #8]
  40dfde:	68e2      	ldr	r2, [r4, #12]
  40dfe0:	60c2      	str	r2, [r0, #12]
  40dfe2:	6090      	str	r0, [r2, #8]
  40dfe4:	4a30      	ldr	r2, [pc, #192]	; (40e0a8 <_free_r+0x1c4>)
  40dfe6:	6812      	ldr	r2, [r2, #0]
  40dfe8:	f043 0001 	orr.w	r0, r3, #1
  40dfec:	4293      	cmp	r3, r2
  40dfee:	6060      	str	r0, [r4, #4]
  40dff0:	608c      	str	r4, [r1, #8]
  40dff2:	d3b9      	bcc.n	40df68 <_free_r+0x84>
  40dff4:	4b2d      	ldr	r3, [pc, #180]	; (40e0ac <_free_r+0x1c8>)
  40dff6:	4640      	mov	r0, r8
  40dff8:	6819      	ldr	r1, [r3, #0]
  40dffa:	f7ff ff23 	bl	40de44 <_malloc_trim_r>
  40dffe:	e7b3      	b.n	40df68 <_free_r+0x84>
  40e000:	4610      	mov	r0, r2
  40e002:	e7cd      	b.n	40dfa0 <_free_r+0xbc>
  40e004:	1811      	adds	r1, r2, r0
  40e006:	6849      	ldr	r1, [r1, #4]
  40e008:	07c9      	lsls	r1, r1, #31
  40e00a:	d444      	bmi.n	40e096 <_free_r+0x1b2>
  40e00c:	6891      	ldr	r1, [r2, #8]
  40e00e:	68d2      	ldr	r2, [r2, #12]
  40e010:	60ca      	str	r2, [r1, #12]
  40e012:	4403      	add	r3, r0
  40e014:	f043 0001 	orr.w	r0, r3, #1
  40e018:	6091      	str	r1, [r2, #8]
  40e01a:	6060      	str	r0, [r4, #4]
  40e01c:	50e3      	str	r3, [r4, r3]
  40e01e:	e7a3      	b.n	40df68 <_free_r+0x84>
  40e020:	2a14      	cmp	r2, #20
  40e022:	d816      	bhi.n	40e052 <_free_r+0x16e>
  40e024:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40e028:	00ff      	lsls	r7, r7, #3
  40e02a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40e02e:	e7aa      	b.n	40df86 <_free_r+0xa2>
  40e030:	10aa      	asrs	r2, r5, #2
  40e032:	2301      	movs	r3, #1
  40e034:	684d      	ldr	r5, [r1, #4]
  40e036:	4093      	lsls	r3, r2
  40e038:	432b      	orrs	r3, r5
  40e03a:	604b      	str	r3, [r1, #4]
  40e03c:	4603      	mov	r3, r0
  40e03e:	e7b0      	b.n	40dfa2 <_free_r+0xbe>
  40e040:	f043 0201 	orr.w	r2, r3, #1
  40e044:	614c      	str	r4, [r1, #20]
  40e046:	610c      	str	r4, [r1, #16]
  40e048:	60e5      	str	r5, [r4, #12]
  40e04a:	60a5      	str	r5, [r4, #8]
  40e04c:	6062      	str	r2, [r4, #4]
  40e04e:	50e3      	str	r3, [r4, r3]
  40e050:	e78a      	b.n	40df68 <_free_r+0x84>
  40e052:	2a54      	cmp	r2, #84	; 0x54
  40e054:	d806      	bhi.n	40e064 <_free_r+0x180>
  40e056:	0b1a      	lsrs	r2, r3, #12
  40e058:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40e05c:	00ff      	lsls	r7, r7, #3
  40e05e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40e062:	e790      	b.n	40df86 <_free_r+0xa2>
  40e064:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40e068:	d806      	bhi.n	40e078 <_free_r+0x194>
  40e06a:	0bda      	lsrs	r2, r3, #15
  40e06c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40e070:	00ff      	lsls	r7, r7, #3
  40e072:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40e076:	e786      	b.n	40df86 <_free_r+0xa2>
  40e078:	f240 5054 	movw	r0, #1364	; 0x554
  40e07c:	4282      	cmp	r2, r0
  40e07e:	d806      	bhi.n	40e08e <_free_r+0x1aa>
  40e080:	0c9a      	lsrs	r2, r3, #18
  40e082:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40e086:	00ff      	lsls	r7, r7, #3
  40e088:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40e08c:	e77b      	b.n	40df86 <_free_r+0xa2>
  40e08e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40e092:	257e      	movs	r5, #126	; 0x7e
  40e094:	e777      	b.n	40df86 <_free_r+0xa2>
  40e096:	f043 0101 	orr.w	r1, r3, #1
  40e09a:	6061      	str	r1, [r4, #4]
  40e09c:	6013      	str	r3, [r2, #0]
  40e09e:	e763      	b.n	40df68 <_free_r+0x84>
  40e0a0:	20400720 	.word	0x20400720
  40e0a4:	20400728 	.word	0x20400728
  40e0a8:	20400b2c 	.word	0x20400b2c
  40e0ac:	20400f00 	.word	0x20400f00

0040e0b0 <__sfvwrite_r>:
  40e0b0:	6893      	ldr	r3, [r2, #8]
  40e0b2:	2b00      	cmp	r3, #0
  40e0b4:	d073      	beq.n	40e19e <__sfvwrite_r+0xee>
  40e0b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e0ba:	898b      	ldrh	r3, [r1, #12]
  40e0bc:	b083      	sub	sp, #12
  40e0be:	460c      	mov	r4, r1
  40e0c0:	0719      	lsls	r1, r3, #28
  40e0c2:	9000      	str	r0, [sp, #0]
  40e0c4:	4616      	mov	r6, r2
  40e0c6:	d526      	bpl.n	40e116 <__sfvwrite_r+0x66>
  40e0c8:	6922      	ldr	r2, [r4, #16]
  40e0ca:	b322      	cbz	r2, 40e116 <__sfvwrite_r+0x66>
  40e0cc:	f013 0002 	ands.w	r0, r3, #2
  40e0d0:	6835      	ldr	r5, [r6, #0]
  40e0d2:	d02c      	beq.n	40e12e <__sfvwrite_r+0x7e>
  40e0d4:	f04f 0900 	mov.w	r9, #0
  40e0d8:	4fb0      	ldr	r7, [pc, #704]	; (40e39c <__sfvwrite_r+0x2ec>)
  40e0da:	46c8      	mov	r8, r9
  40e0dc:	46b2      	mov	sl, r6
  40e0de:	45b8      	cmp	r8, r7
  40e0e0:	4643      	mov	r3, r8
  40e0e2:	464a      	mov	r2, r9
  40e0e4:	bf28      	it	cs
  40e0e6:	463b      	movcs	r3, r7
  40e0e8:	9800      	ldr	r0, [sp, #0]
  40e0ea:	f1b8 0f00 	cmp.w	r8, #0
  40e0ee:	d050      	beq.n	40e192 <__sfvwrite_r+0xe2>
  40e0f0:	69e1      	ldr	r1, [r4, #28]
  40e0f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40e0f4:	47b0      	blx	r6
  40e0f6:	2800      	cmp	r0, #0
  40e0f8:	dd58      	ble.n	40e1ac <__sfvwrite_r+0xfc>
  40e0fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  40e0fe:	1a1b      	subs	r3, r3, r0
  40e100:	4481      	add	r9, r0
  40e102:	eba8 0800 	sub.w	r8, r8, r0
  40e106:	f8ca 3008 	str.w	r3, [sl, #8]
  40e10a:	2b00      	cmp	r3, #0
  40e10c:	d1e7      	bne.n	40e0de <__sfvwrite_r+0x2e>
  40e10e:	2000      	movs	r0, #0
  40e110:	b003      	add	sp, #12
  40e112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e116:	4621      	mov	r1, r4
  40e118:	9800      	ldr	r0, [sp, #0]
  40e11a:	f7ff fc51 	bl	40d9c0 <__swsetup_r>
  40e11e:	2800      	cmp	r0, #0
  40e120:	f040 8133 	bne.w	40e38a <__sfvwrite_r+0x2da>
  40e124:	89a3      	ldrh	r3, [r4, #12]
  40e126:	6835      	ldr	r5, [r6, #0]
  40e128:	f013 0002 	ands.w	r0, r3, #2
  40e12c:	d1d2      	bne.n	40e0d4 <__sfvwrite_r+0x24>
  40e12e:	f013 0901 	ands.w	r9, r3, #1
  40e132:	d145      	bne.n	40e1c0 <__sfvwrite_r+0x110>
  40e134:	464f      	mov	r7, r9
  40e136:	9601      	str	r6, [sp, #4]
  40e138:	b337      	cbz	r7, 40e188 <__sfvwrite_r+0xd8>
  40e13a:	059a      	lsls	r2, r3, #22
  40e13c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40e140:	f140 8083 	bpl.w	40e24a <__sfvwrite_r+0x19a>
  40e144:	4547      	cmp	r7, r8
  40e146:	46c3      	mov	fp, r8
  40e148:	f0c0 80ab 	bcc.w	40e2a2 <__sfvwrite_r+0x1f2>
  40e14c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40e150:	f040 80ac 	bne.w	40e2ac <__sfvwrite_r+0x1fc>
  40e154:	6820      	ldr	r0, [r4, #0]
  40e156:	46ba      	mov	sl, r7
  40e158:	465a      	mov	r2, fp
  40e15a:	4649      	mov	r1, r9
  40e15c:	f000 fcf8 	bl	40eb50 <memmove>
  40e160:	68a2      	ldr	r2, [r4, #8]
  40e162:	6823      	ldr	r3, [r4, #0]
  40e164:	eba2 0208 	sub.w	r2, r2, r8
  40e168:	445b      	add	r3, fp
  40e16a:	60a2      	str	r2, [r4, #8]
  40e16c:	6023      	str	r3, [r4, #0]
  40e16e:	9a01      	ldr	r2, [sp, #4]
  40e170:	6893      	ldr	r3, [r2, #8]
  40e172:	eba3 030a 	sub.w	r3, r3, sl
  40e176:	44d1      	add	r9, sl
  40e178:	eba7 070a 	sub.w	r7, r7, sl
  40e17c:	6093      	str	r3, [r2, #8]
  40e17e:	2b00      	cmp	r3, #0
  40e180:	d0c5      	beq.n	40e10e <__sfvwrite_r+0x5e>
  40e182:	89a3      	ldrh	r3, [r4, #12]
  40e184:	2f00      	cmp	r7, #0
  40e186:	d1d8      	bne.n	40e13a <__sfvwrite_r+0x8a>
  40e188:	f8d5 9000 	ldr.w	r9, [r5]
  40e18c:	686f      	ldr	r7, [r5, #4]
  40e18e:	3508      	adds	r5, #8
  40e190:	e7d2      	b.n	40e138 <__sfvwrite_r+0x88>
  40e192:	f8d5 9000 	ldr.w	r9, [r5]
  40e196:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40e19a:	3508      	adds	r5, #8
  40e19c:	e79f      	b.n	40e0de <__sfvwrite_r+0x2e>
  40e19e:	2000      	movs	r0, #0
  40e1a0:	4770      	bx	lr
  40e1a2:	4621      	mov	r1, r4
  40e1a4:	9800      	ldr	r0, [sp, #0]
  40e1a6:	f7ff fd1f 	bl	40dbe8 <_fflush_r>
  40e1aa:	b370      	cbz	r0, 40e20a <__sfvwrite_r+0x15a>
  40e1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e1b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e1b4:	f04f 30ff 	mov.w	r0, #4294967295
  40e1b8:	81a3      	strh	r3, [r4, #12]
  40e1ba:	b003      	add	sp, #12
  40e1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e1c0:	4681      	mov	r9, r0
  40e1c2:	4633      	mov	r3, r6
  40e1c4:	464e      	mov	r6, r9
  40e1c6:	46a8      	mov	r8, r5
  40e1c8:	469a      	mov	sl, r3
  40e1ca:	464d      	mov	r5, r9
  40e1cc:	b34e      	cbz	r6, 40e222 <__sfvwrite_r+0x172>
  40e1ce:	b380      	cbz	r0, 40e232 <__sfvwrite_r+0x182>
  40e1d0:	6820      	ldr	r0, [r4, #0]
  40e1d2:	6923      	ldr	r3, [r4, #16]
  40e1d4:	6962      	ldr	r2, [r4, #20]
  40e1d6:	45b1      	cmp	r9, r6
  40e1d8:	46cb      	mov	fp, r9
  40e1da:	bf28      	it	cs
  40e1dc:	46b3      	movcs	fp, r6
  40e1de:	4298      	cmp	r0, r3
  40e1e0:	465f      	mov	r7, fp
  40e1e2:	d904      	bls.n	40e1ee <__sfvwrite_r+0x13e>
  40e1e4:	68a3      	ldr	r3, [r4, #8]
  40e1e6:	4413      	add	r3, r2
  40e1e8:	459b      	cmp	fp, r3
  40e1ea:	f300 80a6 	bgt.w	40e33a <__sfvwrite_r+0x28a>
  40e1ee:	4593      	cmp	fp, r2
  40e1f0:	db4b      	blt.n	40e28a <__sfvwrite_r+0x1da>
  40e1f2:	4613      	mov	r3, r2
  40e1f4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40e1f6:	69e1      	ldr	r1, [r4, #28]
  40e1f8:	9800      	ldr	r0, [sp, #0]
  40e1fa:	462a      	mov	r2, r5
  40e1fc:	47b8      	blx	r7
  40e1fe:	1e07      	subs	r7, r0, #0
  40e200:	ddd4      	ble.n	40e1ac <__sfvwrite_r+0xfc>
  40e202:	ebb9 0907 	subs.w	r9, r9, r7
  40e206:	d0cc      	beq.n	40e1a2 <__sfvwrite_r+0xf2>
  40e208:	2001      	movs	r0, #1
  40e20a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40e20e:	1bdb      	subs	r3, r3, r7
  40e210:	443d      	add	r5, r7
  40e212:	1bf6      	subs	r6, r6, r7
  40e214:	f8ca 3008 	str.w	r3, [sl, #8]
  40e218:	2b00      	cmp	r3, #0
  40e21a:	f43f af78 	beq.w	40e10e <__sfvwrite_r+0x5e>
  40e21e:	2e00      	cmp	r6, #0
  40e220:	d1d5      	bne.n	40e1ce <__sfvwrite_r+0x11e>
  40e222:	f108 0308 	add.w	r3, r8, #8
  40e226:	e913 0060 	ldmdb	r3, {r5, r6}
  40e22a:	4698      	mov	r8, r3
  40e22c:	3308      	adds	r3, #8
  40e22e:	2e00      	cmp	r6, #0
  40e230:	d0f9      	beq.n	40e226 <__sfvwrite_r+0x176>
  40e232:	4632      	mov	r2, r6
  40e234:	210a      	movs	r1, #10
  40e236:	4628      	mov	r0, r5
  40e238:	f000 fc3a 	bl	40eab0 <memchr>
  40e23c:	2800      	cmp	r0, #0
  40e23e:	f000 80a1 	beq.w	40e384 <__sfvwrite_r+0x2d4>
  40e242:	3001      	adds	r0, #1
  40e244:	eba0 0905 	sub.w	r9, r0, r5
  40e248:	e7c2      	b.n	40e1d0 <__sfvwrite_r+0x120>
  40e24a:	6820      	ldr	r0, [r4, #0]
  40e24c:	6923      	ldr	r3, [r4, #16]
  40e24e:	4298      	cmp	r0, r3
  40e250:	d802      	bhi.n	40e258 <__sfvwrite_r+0x1a8>
  40e252:	6963      	ldr	r3, [r4, #20]
  40e254:	429f      	cmp	r7, r3
  40e256:	d25d      	bcs.n	40e314 <__sfvwrite_r+0x264>
  40e258:	45b8      	cmp	r8, r7
  40e25a:	bf28      	it	cs
  40e25c:	46b8      	movcs	r8, r7
  40e25e:	4642      	mov	r2, r8
  40e260:	4649      	mov	r1, r9
  40e262:	f000 fc75 	bl	40eb50 <memmove>
  40e266:	68a3      	ldr	r3, [r4, #8]
  40e268:	6822      	ldr	r2, [r4, #0]
  40e26a:	eba3 0308 	sub.w	r3, r3, r8
  40e26e:	4442      	add	r2, r8
  40e270:	60a3      	str	r3, [r4, #8]
  40e272:	6022      	str	r2, [r4, #0]
  40e274:	b10b      	cbz	r3, 40e27a <__sfvwrite_r+0x1ca>
  40e276:	46c2      	mov	sl, r8
  40e278:	e779      	b.n	40e16e <__sfvwrite_r+0xbe>
  40e27a:	4621      	mov	r1, r4
  40e27c:	9800      	ldr	r0, [sp, #0]
  40e27e:	f7ff fcb3 	bl	40dbe8 <_fflush_r>
  40e282:	2800      	cmp	r0, #0
  40e284:	d192      	bne.n	40e1ac <__sfvwrite_r+0xfc>
  40e286:	46c2      	mov	sl, r8
  40e288:	e771      	b.n	40e16e <__sfvwrite_r+0xbe>
  40e28a:	465a      	mov	r2, fp
  40e28c:	4629      	mov	r1, r5
  40e28e:	f000 fc5f 	bl	40eb50 <memmove>
  40e292:	68a2      	ldr	r2, [r4, #8]
  40e294:	6823      	ldr	r3, [r4, #0]
  40e296:	eba2 020b 	sub.w	r2, r2, fp
  40e29a:	445b      	add	r3, fp
  40e29c:	60a2      	str	r2, [r4, #8]
  40e29e:	6023      	str	r3, [r4, #0]
  40e2a0:	e7af      	b.n	40e202 <__sfvwrite_r+0x152>
  40e2a2:	6820      	ldr	r0, [r4, #0]
  40e2a4:	46b8      	mov	r8, r7
  40e2a6:	46ba      	mov	sl, r7
  40e2a8:	46bb      	mov	fp, r7
  40e2aa:	e755      	b.n	40e158 <__sfvwrite_r+0xa8>
  40e2ac:	6962      	ldr	r2, [r4, #20]
  40e2ae:	6820      	ldr	r0, [r4, #0]
  40e2b0:	6921      	ldr	r1, [r4, #16]
  40e2b2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40e2b6:	eba0 0a01 	sub.w	sl, r0, r1
  40e2ba:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40e2be:	f10a 0001 	add.w	r0, sl, #1
  40e2c2:	ea4f 0868 	mov.w	r8, r8, asr #1
  40e2c6:	4438      	add	r0, r7
  40e2c8:	4540      	cmp	r0, r8
  40e2ca:	4642      	mov	r2, r8
  40e2cc:	bf84      	itt	hi
  40e2ce:	4680      	movhi	r8, r0
  40e2d0:	4642      	movhi	r2, r8
  40e2d2:	055b      	lsls	r3, r3, #21
  40e2d4:	d544      	bpl.n	40e360 <__sfvwrite_r+0x2b0>
  40e2d6:	4611      	mov	r1, r2
  40e2d8:	9800      	ldr	r0, [sp, #0]
  40e2da:	f000 f921 	bl	40e520 <_malloc_r>
  40e2de:	4683      	mov	fp, r0
  40e2e0:	2800      	cmp	r0, #0
  40e2e2:	d055      	beq.n	40e390 <__sfvwrite_r+0x2e0>
  40e2e4:	4652      	mov	r2, sl
  40e2e6:	6921      	ldr	r1, [r4, #16]
  40e2e8:	f7fe fae8 	bl	40c8bc <memcpy>
  40e2ec:	89a3      	ldrh	r3, [r4, #12]
  40e2ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40e2f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40e2f6:	81a3      	strh	r3, [r4, #12]
  40e2f8:	eb0b 000a 	add.w	r0, fp, sl
  40e2fc:	eba8 030a 	sub.w	r3, r8, sl
  40e300:	f8c4 b010 	str.w	fp, [r4, #16]
  40e304:	f8c4 8014 	str.w	r8, [r4, #20]
  40e308:	6020      	str	r0, [r4, #0]
  40e30a:	60a3      	str	r3, [r4, #8]
  40e30c:	46b8      	mov	r8, r7
  40e30e:	46ba      	mov	sl, r7
  40e310:	46bb      	mov	fp, r7
  40e312:	e721      	b.n	40e158 <__sfvwrite_r+0xa8>
  40e314:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40e318:	42b9      	cmp	r1, r7
  40e31a:	bf28      	it	cs
  40e31c:	4639      	movcs	r1, r7
  40e31e:	464a      	mov	r2, r9
  40e320:	fb91 f1f3 	sdiv	r1, r1, r3
  40e324:	9800      	ldr	r0, [sp, #0]
  40e326:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40e328:	fb03 f301 	mul.w	r3, r3, r1
  40e32c:	69e1      	ldr	r1, [r4, #28]
  40e32e:	47b0      	blx	r6
  40e330:	f1b0 0a00 	subs.w	sl, r0, #0
  40e334:	f73f af1b 	bgt.w	40e16e <__sfvwrite_r+0xbe>
  40e338:	e738      	b.n	40e1ac <__sfvwrite_r+0xfc>
  40e33a:	461a      	mov	r2, r3
  40e33c:	4629      	mov	r1, r5
  40e33e:	9301      	str	r3, [sp, #4]
  40e340:	f000 fc06 	bl	40eb50 <memmove>
  40e344:	6822      	ldr	r2, [r4, #0]
  40e346:	9b01      	ldr	r3, [sp, #4]
  40e348:	9800      	ldr	r0, [sp, #0]
  40e34a:	441a      	add	r2, r3
  40e34c:	6022      	str	r2, [r4, #0]
  40e34e:	4621      	mov	r1, r4
  40e350:	f7ff fc4a 	bl	40dbe8 <_fflush_r>
  40e354:	9b01      	ldr	r3, [sp, #4]
  40e356:	2800      	cmp	r0, #0
  40e358:	f47f af28 	bne.w	40e1ac <__sfvwrite_r+0xfc>
  40e35c:	461f      	mov	r7, r3
  40e35e:	e750      	b.n	40e202 <__sfvwrite_r+0x152>
  40e360:	9800      	ldr	r0, [sp, #0]
  40e362:	f000 fc65 	bl	40ec30 <_realloc_r>
  40e366:	4683      	mov	fp, r0
  40e368:	2800      	cmp	r0, #0
  40e36a:	d1c5      	bne.n	40e2f8 <__sfvwrite_r+0x248>
  40e36c:	9d00      	ldr	r5, [sp, #0]
  40e36e:	6921      	ldr	r1, [r4, #16]
  40e370:	4628      	mov	r0, r5
  40e372:	f7ff fdb7 	bl	40dee4 <_free_r>
  40e376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e37a:	220c      	movs	r2, #12
  40e37c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40e380:	602a      	str	r2, [r5, #0]
  40e382:	e715      	b.n	40e1b0 <__sfvwrite_r+0x100>
  40e384:	f106 0901 	add.w	r9, r6, #1
  40e388:	e722      	b.n	40e1d0 <__sfvwrite_r+0x120>
  40e38a:	f04f 30ff 	mov.w	r0, #4294967295
  40e38e:	e6bf      	b.n	40e110 <__sfvwrite_r+0x60>
  40e390:	9a00      	ldr	r2, [sp, #0]
  40e392:	230c      	movs	r3, #12
  40e394:	6013      	str	r3, [r2, #0]
  40e396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e39a:	e709      	b.n	40e1b0 <__sfvwrite_r+0x100>
  40e39c:	7ffffc00 	.word	0x7ffffc00

0040e3a0 <_fwalk_reent>:
  40e3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40e3a4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40e3a8:	d01f      	beq.n	40e3ea <_fwalk_reent+0x4a>
  40e3aa:	4688      	mov	r8, r1
  40e3ac:	4606      	mov	r6, r0
  40e3ae:	f04f 0900 	mov.w	r9, #0
  40e3b2:	687d      	ldr	r5, [r7, #4]
  40e3b4:	68bc      	ldr	r4, [r7, #8]
  40e3b6:	3d01      	subs	r5, #1
  40e3b8:	d411      	bmi.n	40e3de <_fwalk_reent+0x3e>
  40e3ba:	89a3      	ldrh	r3, [r4, #12]
  40e3bc:	2b01      	cmp	r3, #1
  40e3be:	f105 35ff 	add.w	r5, r5, #4294967295
  40e3c2:	d908      	bls.n	40e3d6 <_fwalk_reent+0x36>
  40e3c4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40e3c8:	3301      	adds	r3, #1
  40e3ca:	4621      	mov	r1, r4
  40e3cc:	4630      	mov	r0, r6
  40e3ce:	d002      	beq.n	40e3d6 <_fwalk_reent+0x36>
  40e3d0:	47c0      	blx	r8
  40e3d2:	ea49 0900 	orr.w	r9, r9, r0
  40e3d6:	1c6b      	adds	r3, r5, #1
  40e3d8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40e3dc:	d1ed      	bne.n	40e3ba <_fwalk_reent+0x1a>
  40e3de:	683f      	ldr	r7, [r7, #0]
  40e3e0:	2f00      	cmp	r7, #0
  40e3e2:	d1e6      	bne.n	40e3b2 <_fwalk_reent+0x12>
  40e3e4:	4648      	mov	r0, r9
  40e3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40e3ea:	46b9      	mov	r9, r7
  40e3ec:	4648      	mov	r0, r9
  40e3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40e3f2:	bf00      	nop

0040e3f4 <__locale_mb_cur_max>:
  40e3f4:	4b04      	ldr	r3, [pc, #16]	; (40e408 <__locale_mb_cur_max+0x14>)
  40e3f6:	4a05      	ldr	r2, [pc, #20]	; (40e40c <__locale_mb_cur_max+0x18>)
  40e3f8:	681b      	ldr	r3, [r3, #0]
  40e3fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40e3fc:	2b00      	cmp	r3, #0
  40e3fe:	bf08      	it	eq
  40e400:	4613      	moveq	r3, r2
  40e402:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40e406:	4770      	bx	lr
  40e408:	20400184 	.word	0x20400184
  40e40c:	204005b4 	.word	0x204005b4

0040e410 <__retarget_lock_init_recursive>:
  40e410:	4770      	bx	lr
  40e412:	bf00      	nop

0040e414 <__retarget_lock_close_recursive>:
  40e414:	4770      	bx	lr
  40e416:	bf00      	nop

0040e418 <__retarget_lock_acquire_recursive>:
  40e418:	4770      	bx	lr
  40e41a:	bf00      	nop

0040e41c <__retarget_lock_release_recursive>:
  40e41c:	4770      	bx	lr
  40e41e:	bf00      	nop

0040e420 <__swhatbuf_r>:
  40e420:	b570      	push	{r4, r5, r6, lr}
  40e422:	460c      	mov	r4, r1
  40e424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40e428:	2900      	cmp	r1, #0
  40e42a:	b090      	sub	sp, #64	; 0x40
  40e42c:	4615      	mov	r5, r2
  40e42e:	461e      	mov	r6, r3
  40e430:	db14      	blt.n	40e45c <__swhatbuf_r+0x3c>
  40e432:	aa01      	add	r2, sp, #4
  40e434:	f000 ffee 	bl	40f414 <_fstat_r>
  40e438:	2800      	cmp	r0, #0
  40e43a:	db0f      	blt.n	40e45c <__swhatbuf_r+0x3c>
  40e43c:	9a02      	ldr	r2, [sp, #8]
  40e43e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40e442:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40e446:	fab2 f282 	clz	r2, r2
  40e44a:	0952      	lsrs	r2, r2, #5
  40e44c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40e450:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40e454:	6032      	str	r2, [r6, #0]
  40e456:	602b      	str	r3, [r5, #0]
  40e458:	b010      	add	sp, #64	; 0x40
  40e45a:	bd70      	pop	{r4, r5, r6, pc}
  40e45c:	89a2      	ldrh	r2, [r4, #12]
  40e45e:	2300      	movs	r3, #0
  40e460:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40e464:	6033      	str	r3, [r6, #0]
  40e466:	d004      	beq.n	40e472 <__swhatbuf_r+0x52>
  40e468:	2240      	movs	r2, #64	; 0x40
  40e46a:	4618      	mov	r0, r3
  40e46c:	602a      	str	r2, [r5, #0]
  40e46e:	b010      	add	sp, #64	; 0x40
  40e470:	bd70      	pop	{r4, r5, r6, pc}
  40e472:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40e476:	602b      	str	r3, [r5, #0]
  40e478:	b010      	add	sp, #64	; 0x40
  40e47a:	bd70      	pop	{r4, r5, r6, pc}

0040e47c <__smakebuf_r>:
  40e47c:	898a      	ldrh	r2, [r1, #12]
  40e47e:	0792      	lsls	r2, r2, #30
  40e480:	460b      	mov	r3, r1
  40e482:	d506      	bpl.n	40e492 <__smakebuf_r+0x16>
  40e484:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40e488:	2101      	movs	r1, #1
  40e48a:	601a      	str	r2, [r3, #0]
  40e48c:	611a      	str	r2, [r3, #16]
  40e48e:	6159      	str	r1, [r3, #20]
  40e490:	4770      	bx	lr
  40e492:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e494:	b083      	sub	sp, #12
  40e496:	ab01      	add	r3, sp, #4
  40e498:	466a      	mov	r2, sp
  40e49a:	460c      	mov	r4, r1
  40e49c:	4606      	mov	r6, r0
  40e49e:	f7ff ffbf 	bl	40e420 <__swhatbuf_r>
  40e4a2:	9900      	ldr	r1, [sp, #0]
  40e4a4:	4605      	mov	r5, r0
  40e4a6:	4630      	mov	r0, r6
  40e4a8:	f000 f83a 	bl	40e520 <_malloc_r>
  40e4ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e4b0:	b1d8      	cbz	r0, 40e4ea <__smakebuf_r+0x6e>
  40e4b2:	9a01      	ldr	r2, [sp, #4]
  40e4b4:	4f15      	ldr	r7, [pc, #84]	; (40e50c <__smakebuf_r+0x90>)
  40e4b6:	9900      	ldr	r1, [sp, #0]
  40e4b8:	63f7      	str	r7, [r6, #60]	; 0x3c
  40e4ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40e4be:	81a3      	strh	r3, [r4, #12]
  40e4c0:	6020      	str	r0, [r4, #0]
  40e4c2:	6120      	str	r0, [r4, #16]
  40e4c4:	6161      	str	r1, [r4, #20]
  40e4c6:	b91a      	cbnz	r2, 40e4d0 <__smakebuf_r+0x54>
  40e4c8:	432b      	orrs	r3, r5
  40e4ca:	81a3      	strh	r3, [r4, #12]
  40e4cc:	b003      	add	sp, #12
  40e4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e4d0:	4630      	mov	r0, r6
  40e4d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40e4d6:	f000 ffb1 	bl	40f43c <_isatty_r>
  40e4da:	b1a0      	cbz	r0, 40e506 <__smakebuf_r+0x8a>
  40e4dc:	89a3      	ldrh	r3, [r4, #12]
  40e4de:	f023 0303 	bic.w	r3, r3, #3
  40e4e2:	f043 0301 	orr.w	r3, r3, #1
  40e4e6:	b21b      	sxth	r3, r3
  40e4e8:	e7ee      	b.n	40e4c8 <__smakebuf_r+0x4c>
  40e4ea:	059a      	lsls	r2, r3, #22
  40e4ec:	d4ee      	bmi.n	40e4cc <__smakebuf_r+0x50>
  40e4ee:	f023 0303 	bic.w	r3, r3, #3
  40e4f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40e4f6:	f043 0302 	orr.w	r3, r3, #2
  40e4fa:	2101      	movs	r1, #1
  40e4fc:	81a3      	strh	r3, [r4, #12]
  40e4fe:	6022      	str	r2, [r4, #0]
  40e500:	6122      	str	r2, [r4, #16]
  40e502:	6161      	str	r1, [r4, #20]
  40e504:	e7e2      	b.n	40e4cc <__smakebuf_r+0x50>
  40e506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e50a:	e7dd      	b.n	40e4c8 <__smakebuf_r+0x4c>
  40e50c:	0040dc3d 	.word	0x0040dc3d

0040e510 <malloc>:
  40e510:	4b02      	ldr	r3, [pc, #8]	; (40e51c <malloc+0xc>)
  40e512:	4601      	mov	r1, r0
  40e514:	6818      	ldr	r0, [r3, #0]
  40e516:	f000 b803 	b.w	40e520 <_malloc_r>
  40e51a:	bf00      	nop
  40e51c:	20400184 	.word	0x20400184

0040e520 <_malloc_r>:
  40e520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e524:	f101 060b 	add.w	r6, r1, #11
  40e528:	2e16      	cmp	r6, #22
  40e52a:	b083      	sub	sp, #12
  40e52c:	4605      	mov	r5, r0
  40e52e:	f240 809e 	bls.w	40e66e <_malloc_r+0x14e>
  40e532:	f036 0607 	bics.w	r6, r6, #7
  40e536:	f100 80bd 	bmi.w	40e6b4 <_malloc_r+0x194>
  40e53a:	42b1      	cmp	r1, r6
  40e53c:	f200 80ba 	bhi.w	40e6b4 <_malloc_r+0x194>
  40e540:	f000 fb6a 	bl	40ec18 <__malloc_lock>
  40e544:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40e548:	f0c0 8293 	bcc.w	40ea72 <_malloc_r+0x552>
  40e54c:	0a73      	lsrs	r3, r6, #9
  40e54e:	f000 80b8 	beq.w	40e6c2 <_malloc_r+0x1a2>
  40e552:	2b04      	cmp	r3, #4
  40e554:	f200 8179 	bhi.w	40e84a <_malloc_r+0x32a>
  40e558:	09b3      	lsrs	r3, r6, #6
  40e55a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40e55e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40e562:	00c3      	lsls	r3, r0, #3
  40e564:	4fbf      	ldr	r7, [pc, #764]	; (40e864 <_malloc_r+0x344>)
  40e566:	443b      	add	r3, r7
  40e568:	f1a3 0108 	sub.w	r1, r3, #8
  40e56c:	685c      	ldr	r4, [r3, #4]
  40e56e:	42a1      	cmp	r1, r4
  40e570:	d106      	bne.n	40e580 <_malloc_r+0x60>
  40e572:	e00c      	b.n	40e58e <_malloc_r+0x6e>
  40e574:	2a00      	cmp	r2, #0
  40e576:	f280 80aa 	bge.w	40e6ce <_malloc_r+0x1ae>
  40e57a:	68e4      	ldr	r4, [r4, #12]
  40e57c:	42a1      	cmp	r1, r4
  40e57e:	d006      	beq.n	40e58e <_malloc_r+0x6e>
  40e580:	6863      	ldr	r3, [r4, #4]
  40e582:	f023 0303 	bic.w	r3, r3, #3
  40e586:	1b9a      	subs	r2, r3, r6
  40e588:	2a0f      	cmp	r2, #15
  40e58a:	ddf3      	ble.n	40e574 <_malloc_r+0x54>
  40e58c:	4670      	mov	r0, lr
  40e58e:	693c      	ldr	r4, [r7, #16]
  40e590:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40e878 <_malloc_r+0x358>
  40e594:	4574      	cmp	r4, lr
  40e596:	f000 81ab 	beq.w	40e8f0 <_malloc_r+0x3d0>
  40e59a:	6863      	ldr	r3, [r4, #4]
  40e59c:	f023 0303 	bic.w	r3, r3, #3
  40e5a0:	1b9a      	subs	r2, r3, r6
  40e5a2:	2a0f      	cmp	r2, #15
  40e5a4:	f300 8190 	bgt.w	40e8c8 <_malloc_r+0x3a8>
  40e5a8:	2a00      	cmp	r2, #0
  40e5aa:	f8c7 e014 	str.w	lr, [r7, #20]
  40e5ae:	f8c7 e010 	str.w	lr, [r7, #16]
  40e5b2:	f280 809d 	bge.w	40e6f0 <_malloc_r+0x1d0>
  40e5b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40e5ba:	f080 8161 	bcs.w	40e880 <_malloc_r+0x360>
  40e5be:	08db      	lsrs	r3, r3, #3
  40e5c0:	f103 0c01 	add.w	ip, r3, #1
  40e5c4:	1099      	asrs	r1, r3, #2
  40e5c6:	687a      	ldr	r2, [r7, #4]
  40e5c8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40e5cc:	f8c4 8008 	str.w	r8, [r4, #8]
  40e5d0:	2301      	movs	r3, #1
  40e5d2:	408b      	lsls	r3, r1
  40e5d4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40e5d8:	4313      	orrs	r3, r2
  40e5da:	3908      	subs	r1, #8
  40e5dc:	60e1      	str	r1, [r4, #12]
  40e5de:	607b      	str	r3, [r7, #4]
  40e5e0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40e5e4:	f8c8 400c 	str.w	r4, [r8, #12]
  40e5e8:	1082      	asrs	r2, r0, #2
  40e5ea:	2401      	movs	r4, #1
  40e5ec:	4094      	lsls	r4, r2
  40e5ee:	429c      	cmp	r4, r3
  40e5f0:	f200 808b 	bhi.w	40e70a <_malloc_r+0x1ea>
  40e5f4:	421c      	tst	r4, r3
  40e5f6:	d106      	bne.n	40e606 <_malloc_r+0xe6>
  40e5f8:	f020 0003 	bic.w	r0, r0, #3
  40e5fc:	0064      	lsls	r4, r4, #1
  40e5fe:	421c      	tst	r4, r3
  40e600:	f100 0004 	add.w	r0, r0, #4
  40e604:	d0fa      	beq.n	40e5fc <_malloc_r+0xdc>
  40e606:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40e60a:	46cc      	mov	ip, r9
  40e60c:	4680      	mov	r8, r0
  40e60e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40e612:	459c      	cmp	ip, r3
  40e614:	d107      	bne.n	40e626 <_malloc_r+0x106>
  40e616:	e16d      	b.n	40e8f4 <_malloc_r+0x3d4>
  40e618:	2a00      	cmp	r2, #0
  40e61a:	f280 817b 	bge.w	40e914 <_malloc_r+0x3f4>
  40e61e:	68db      	ldr	r3, [r3, #12]
  40e620:	459c      	cmp	ip, r3
  40e622:	f000 8167 	beq.w	40e8f4 <_malloc_r+0x3d4>
  40e626:	6859      	ldr	r1, [r3, #4]
  40e628:	f021 0103 	bic.w	r1, r1, #3
  40e62c:	1b8a      	subs	r2, r1, r6
  40e62e:	2a0f      	cmp	r2, #15
  40e630:	ddf2      	ble.n	40e618 <_malloc_r+0xf8>
  40e632:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40e636:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40e63a:	9300      	str	r3, [sp, #0]
  40e63c:	199c      	adds	r4, r3, r6
  40e63e:	4628      	mov	r0, r5
  40e640:	f046 0601 	orr.w	r6, r6, #1
  40e644:	f042 0501 	orr.w	r5, r2, #1
  40e648:	605e      	str	r6, [r3, #4]
  40e64a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40e64e:	f8cc 8008 	str.w	r8, [ip, #8]
  40e652:	617c      	str	r4, [r7, #20]
  40e654:	613c      	str	r4, [r7, #16]
  40e656:	f8c4 e00c 	str.w	lr, [r4, #12]
  40e65a:	f8c4 e008 	str.w	lr, [r4, #8]
  40e65e:	6065      	str	r5, [r4, #4]
  40e660:	505a      	str	r2, [r3, r1]
  40e662:	f000 fadf 	bl	40ec24 <__malloc_unlock>
  40e666:	9b00      	ldr	r3, [sp, #0]
  40e668:	f103 0408 	add.w	r4, r3, #8
  40e66c:	e01e      	b.n	40e6ac <_malloc_r+0x18c>
  40e66e:	2910      	cmp	r1, #16
  40e670:	d820      	bhi.n	40e6b4 <_malloc_r+0x194>
  40e672:	f000 fad1 	bl	40ec18 <__malloc_lock>
  40e676:	2610      	movs	r6, #16
  40e678:	2318      	movs	r3, #24
  40e67a:	2002      	movs	r0, #2
  40e67c:	4f79      	ldr	r7, [pc, #484]	; (40e864 <_malloc_r+0x344>)
  40e67e:	443b      	add	r3, r7
  40e680:	f1a3 0208 	sub.w	r2, r3, #8
  40e684:	685c      	ldr	r4, [r3, #4]
  40e686:	4294      	cmp	r4, r2
  40e688:	f000 813d 	beq.w	40e906 <_malloc_r+0x3e6>
  40e68c:	6863      	ldr	r3, [r4, #4]
  40e68e:	68e1      	ldr	r1, [r4, #12]
  40e690:	68a6      	ldr	r6, [r4, #8]
  40e692:	f023 0303 	bic.w	r3, r3, #3
  40e696:	4423      	add	r3, r4
  40e698:	4628      	mov	r0, r5
  40e69a:	685a      	ldr	r2, [r3, #4]
  40e69c:	60f1      	str	r1, [r6, #12]
  40e69e:	f042 0201 	orr.w	r2, r2, #1
  40e6a2:	608e      	str	r6, [r1, #8]
  40e6a4:	605a      	str	r2, [r3, #4]
  40e6a6:	f000 fabd 	bl	40ec24 <__malloc_unlock>
  40e6aa:	3408      	adds	r4, #8
  40e6ac:	4620      	mov	r0, r4
  40e6ae:	b003      	add	sp, #12
  40e6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e6b4:	2400      	movs	r4, #0
  40e6b6:	230c      	movs	r3, #12
  40e6b8:	4620      	mov	r0, r4
  40e6ba:	602b      	str	r3, [r5, #0]
  40e6bc:	b003      	add	sp, #12
  40e6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e6c2:	2040      	movs	r0, #64	; 0x40
  40e6c4:	f44f 7300 	mov.w	r3, #512	; 0x200
  40e6c8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40e6cc:	e74a      	b.n	40e564 <_malloc_r+0x44>
  40e6ce:	4423      	add	r3, r4
  40e6d0:	68e1      	ldr	r1, [r4, #12]
  40e6d2:	685a      	ldr	r2, [r3, #4]
  40e6d4:	68a6      	ldr	r6, [r4, #8]
  40e6d6:	f042 0201 	orr.w	r2, r2, #1
  40e6da:	60f1      	str	r1, [r6, #12]
  40e6dc:	4628      	mov	r0, r5
  40e6de:	608e      	str	r6, [r1, #8]
  40e6e0:	605a      	str	r2, [r3, #4]
  40e6e2:	f000 fa9f 	bl	40ec24 <__malloc_unlock>
  40e6e6:	3408      	adds	r4, #8
  40e6e8:	4620      	mov	r0, r4
  40e6ea:	b003      	add	sp, #12
  40e6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e6f0:	4423      	add	r3, r4
  40e6f2:	4628      	mov	r0, r5
  40e6f4:	685a      	ldr	r2, [r3, #4]
  40e6f6:	f042 0201 	orr.w	r2, r2, #1
  40e6fa:	605a      	str	r2, [r3, #4]
  40e6fc:	f000 fa92 	bl	40ec24 <__malloc_unlock>
  40e700:	3408      	adds	r4, #8
  40e702:	4620      	mov	r0, r4
  40e704:	b003      	add	sp, #12
  40e706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e70a:	68bc      	ldr	r4, [r7, #8]
  40e70c:	6863      	ldr	r3, [r4, #4]
  40e70e:	f023 0803 	bic.w	r8, r3, #3
  40e712:	45b0      	cmp	r8, r6
  40e714:	d304      	bcc.n	40e720 <_malloc_r+0x200>
  40e716:	eba8 0306 	sub.w	r3, r8, r6
  40e71a:	2b0f      	cmp	r3, #15
  40e71c:	f300 8085 	bgt.w	40e82a <_malloc_r+0x30a>
  40e720:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40e87c <_malloc_r+0x35c>
  40e724:	4b50      	ldr	r3, [pc, #320]	; (40e868 <_malloc_r+0x348>)
  40e726:	f8d9 2000 	ldr.w	r2, [r9]
  40e72a:	681b      	ldr	r3, [r3, #0]
  40e72c:	3201      	adds	r2, #1
  40e72e:	4433      	add	r3, r6
  40e730:	eb04 0a08 	add.w	sl, r4, r8
  40e734:	f000 8155 	beq.w	40e9e2 <_malloc_r+0x4c2>
  40e738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40e73c:	330f      	adds	r3, #15
  40e73e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40e742:	f02b 0b0f 	bic.w	fp, fp, #15
  40e746:	4659      	mov	r1, fp
  40e748:	4628      	mov	r0, r5
  40e74a:	f000 fc17 	bl	40ef7c <_sbrk_r>
  40e74e:	1c41      	adds	r1, r0, #1
  40e750:	4602      	mov	r2, r0
  40e752:	f000 80fc 	beq.w	40e94e <_malloc_r+0x42e>
  40e756:	4582      	cmp	sl, r0
  40e758:	f200 80f7 	bhi.w	40e94a <_malloc_r+0x42a>
  40e75c:	4b43      	ldr	r3, [pc, #268]	; (40e86c <_malloc_r+0x34c>)
  40e75e:	6819      	ldr	r1, [r3, #0]
  40e760:	4459      	add	r1, fp
  40e762:	6019      	str	r1, [r3, #0]
  40e764:	f000 814d 	beq.w	40ea02 <_malloc_r+0x4e2>
  40e768:	f8d9 0000 	ldr.w	r0, [r9]
  40e76c:	3001      	adds	r0, #1
  40e76e:	bf1b      	ittet	ne
  40e770:	eba2 0a0a 	subne.w	sl, r2, sl
  40e774:	4451      	addne	r1, sl
  40e776:	f8c9 2000 	streq.w	r2, [r9]
  40e77a:	6019      	strne	r1, [r3, #0]
  40e77c:	f012 0107 	ands.w	r1, r2, #7
  40e780:	f000 8115 	beq.w	40e9ae <_malloc_r+0x48e>
  40e784:	f1c1 0008 	rsb	r0, r1, #8
  40e788:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40e78c:	4402      	add	r2, r0
  40e78e:	3108      	adds	r1, #8
  40e790:	eb02 090b 	add.w	r9, r2, fp
  40e794:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40e798:	eba1 0909 	sub.w	r9, r1, r9
  40e79c:	4649      	mov	r1, r9
  40e79e:	4628      	mov	r0, r5
  40e7a0:	9301      	str	r3, [sp, #4]
  40e7a2:	9200      	str	r2, [sp, #0]
  40e7a4:	f000 fbea 	bl	40ef7c <_sbrk_r>
  40e7a8:	1c43      	adds	r3, r0, #1
  40e7aa:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40e7ae:	f000 8143 	beq.w	40ea38 <_malloc_r+0x518>
  40e7b2:	1a80      	subs	r0, r0, r2
  40e7b4:	4448      	add	r0, r9
  40e7b6:	f040 0001 	orr.w	r0, r0, #1
  40e7ba:	6819      	ldr	r1, [r3, #0]
  40e7bc:	60ba      	str	r2, [r7, #8]
  40e7be:	4449      	add	r1, r9
  40e7c0:	42bc      	cmp	r4, r7
  40e7c2:	6050      	str	r0, [r2, #4]
  40e7c4:	6019      	str	r1, [r3, #0]
  40e7c6:	d017      	beq.n	40e7f8 <_malloc_r+0x2d8>
  40e7c8:	f1b8 0f0f 	cmp.w	r8, #15
  40e7cc:	f240 80fb 	bls.w	40e9c6 <_malloc_r+0x4a6>
  40e7d0:	6860      	ldr	r0, [r4, #4]
  40e7d2:	f1a8 020c 	sub.w	r2, r8, #12
  40e7d6:	f022 0207 	bic.w	r2, r2, #7
  40e7da:	eb04 0e02 	add.w	lr, r4, r2
  40e7de:	f000 0001 	and.w	r0, r0, #1
  40e7e2:	f04f 0c05 	mov.w	ip, #5
  40e7e6:	4310      	orrs	r0, r2
  40e7e8:	2a0f      	cmp	r2, #15
  40e7ea:	6060      	str	r0, [r4, #4]
  40e7ec:	f8ce c004 	str.w	ip, [lr, #4]
  40e7f0:	f8ce c008 	str.w	ip, [lr, #8]
  40e7f4:	f200 8117 	bhi.w	40ea26 <_malloc_r+0x506>
  40e7f8:	4b1d      	ldr	r3, [pc, #116]	; (40e870 <_malloc_r+0x350>)
  40e7fa:	68bc      	ldr	r4, [r7, #8]
  40e7fc:	681a      	ldr	r2, [r3, #0]
  40e7fe:	4291      	cmp	r1, r2
  40e800:	bf88      	it	hi
  40e802:	6019      	strhi	r1, [r3, #0]
  40e804:	4b1b      	ldr	r3, [pc, #108]	; (40e874 <_malloc_r+0x354>)
  40e806:	681a      	ldr	r2, [r3, #0]
  40e808:	4291      	cmp	r1, r2
  40e80a:	6862      	ldr	r2, [r4, #4]
  40e80c:	bf88      	it	hi
  40e80e:	6019      	strhi	r1, [r3, #0]
  40e810:	f022 0203 	bic.w	r2, r2, #3
  40e814:	4296      	cmp	r6, r2
  40e816:	eba2 0306 	sub.w	r3, r2, r6
  40e81a:	d801      	bhi.n	40e820 <_malloc_r+0x300>
  40e81c:	2b0f      	cmp	r3, #15
  40e81e:	dc04      	bgt.n	40e82a <_malloc_r+0x30a>
  40e820:	4628      	mov	r0, r5
  40e822:	f000 f9ff 	bl	40ec24 <__malloc_unlock>
  40e826:	2400      	movs	r4, #0
  40e828:	e740      	b.n	40e6ac <_malloc_r+0x18c>
  40e82a:	19a2      	adds	r2, r4, r6
  40e82c:	f043 0301 	orr.w	r3, r3, #1
  40e830:	f046 0601 	orr.w	r6, r6, #1
  40e834:	6066      	str	r6, [r4, #4]
  40e836:	4628      	mov	r0, r5
  40e838:	60ba      	str	r2, [r7, #8]
  40e83a:	6053      	str	r3, [r2, #4]
  40e83c:	f000 f9f2 	bl	40ec24 <__malloc_unlock>
  40e840:	3408      	adds	r4, #8
  40e842:	4620      	mov	r0, r4
  40e844:	b003      	add	sp, #12
  40e846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e84a:	2b14      	cmp	r3, #20
  40e84c:	d971      	bls.n	40e932 <_malloc_r+0x412>
  40e84e:	2b54      	cmp	r3, #84	; 0x54
  40e850:	f200 80a3 	bhi.w	40e99a <_malloc_r+0x47a>
  40e854:	0b33      	lsrs	r3, r6, #12
  40e856:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40e85a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40e85e:	00c3      	lsls	r3, r0, #3
  40e860:	e680      	b.n	40e564 <_malloc_r+0x44>
  40e862:	bf00      	nop
  40e864:	20400720 	.word	0x20400720
  40e868:	20400f00 	.word	0x20400f00
  40e86c:	20400ed0 	.word	0x20400ed0
  40e870:	20400ef8 	.word	0x20400ef8
  40e874:	20400efc 	.word	0x20400efc
  40e878:	20400728 	.word	0x20400728
  40e87c:	20400b28 	.word	0x20400b28
  40e880:	0a5a      	lsrs	r2, r3, #9
  40e882:	2a04      	cmp	r2, #4
  40e884:	d95b      	bls.n	40e93e <_malloc_r+0x41e>
  40e886:	2a14      	cmp	r2, #20
  40e888:	f200 80ae 	bhi.w	40e9e8 <_malloc_r+0x4c8>
  40e88c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40e890:	00c9      	lsls	r1, r1, #3
  40e892:	325b      	adds	r2, #91	; 0x5b
  40e894:	eb07 0c01 	add.w	ip, r7, r1
  40e898:	5879      	ldr	r1, [r7, r1]
  40e89a:	f1ac 0c08 	sub.w	ip, ip, #8
  40e89e:	458c      	cmp	ip, r1
  40e8a0:	f000 8088 	beq.w	40e9b4 <_malloc_r+0x494>
  40e8a4:	684a      	ldr	r2, [r1, #4]
  40e8a6:	f022 0203 	bic.w	r2, r2, #3
  40e8aa:	4293      	cmp	r3, r2
  40e8ac:	d273      	bcs.n	40e996 <_malloc_r+0x476>
  40e8ae:	6889      	ldr	r1, [r1, #8]
  40e8b0:	458c      	cmp	ip, r1
  40e8b2:	d1f7      	bne.n	40e8a4 <_malloc_r+0x384>
  40e8b4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40e8b8:	687b      	ldr	r3, [r7, #4]
  40e8ba:	60e2      	str	r2, [r4, #12]
  40e8bc:	f8c4 c008 	str.w	ip, [r4, #8]
  40e8c0:	6094      	str	r4, [r2, #8]
  40e8c2:	f8cc 400c 	str.w	r4, [ip, #12]
  40e8c6:	e68f      	b.n	40e5e8 <_malloc_r+0xc8>
  40e8c8:	19a1      	adds	r1, r4, r6
  40e8ca:	f046 0c01 	orr.w	ip, r6, #1
  40e8ce:	f042 0601 	orr.w	r6, r2, #1
  40e8d2:	f8c4 c004 	str.w	ip, [r4, #4]
  40e8d6:	4628      	mov	r0, r5
  40e8d8:	6179      	str	r1, [r7, #20]
  40e8da:	6139      	str	r1, [r7, #16]
  40e8dc:	f8c1 e00c 	str.w	lr, [r1, #12]
  40e8e0:	f8c1 e008 	str.w	lr, [r1, #8]
  40e8e4:	604e      	str	r6, [r1, #4]
  40e8e6:	50e2      	str	r2, [r4, r3]
  40e8e8:	f000 f99c 	bl	40ec24 <__malloc_unlock>
  40e8ec:	3408      	adds	r4, #8
  40e8ee:	e6dd      	b.n	40e6ac <_malloc_r+0x18c>
  40e8f0:	687b      	ldr	r3, [r7, #4]
  40e8f2:	e679      	b.n	40e5e8 <_malloc_r+0xc8>
  40e8f4:	f108 0801 	add.w	r8, r8, #1
  40e8f8:	f018 0f03 	tst.w	r8, #3
  40e8fc:	f10c 0c08 	add.w	ip, ip, #8
  40e900:	f47f ae85 	bne.w	40e60e <_malloc_r+0xee>
  40e904:	e02d      	b.n	40e962 <_malloc_r+0x442>
  40e906:	68dc      	ldr	r4, [r3, #12]
  40e908:	42a3      	cmp	r3, r4
  40e90a:	bf08      	it	eq
  40e90c:	3002      	addeq	r0, #2
  40e90e:	f43f ae3e 	beq.w	40e58e <_malloc_r+0x6e>
  40e912:	e6bb      	b.n	40e68c <_malloc_r+0x16c>
  40e914:	4419      	add	r1, r3
  40e916:	461c      	mov	r4, r3
  40e918:	684a      	ldr	r2, [r1, #4]
  40e91a:	68db      	ldr	r3, [r3, #12]
  40e91c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40e920:	f042 0201 	orr.w	r2, r2, #1
  40e924:	604a      	str	r2, [r1, #4]
  40e926:	4628      	mov	r0, r5
  40e928:	60f3      	str	r3, [r6, #12]
  40e92a:	609e      	str	r6, [r3, #8]
  40e92c:	f000 f97a 	bl	40ec24 <__malloc_unlock>
  40e930:	e6bc      	b.n	40e6ac <_malloc_r+0x18c>
  40e932:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40e936:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40e93a:	00c3      	lsls	r3, r0, #3
  40e93c:	e612      	b.n	40e564 <_malloc_r+0x44>
  40e93e:	099a      	lsrs	r2, r3, #6
  40e940:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40e944:	00c9      	lsls	r1, r1, #3
  40e946:	3238      	adds	r2, #56	; 0x38
  40e948:	e7a4      	b.n	40e894 <_malloc_r+0x374>
  40e94a:	42bc      	cmp	r4, r7
  40e94c:	d054      	beq.n	40e9f8 <_malloc_r+0x4d8>
  40e94e:	68bc      	ldr	r4, [r7, #8]
  40e950:	6862      	ldr	r2, [r4, #4]
  40e952:	f022 0203 	bic.w	r2, r2, #3
  40e956:	e75d      	b.n	40e814 <_malloc_r+0x2f4>
  40e958:	f859 3908 	ldr.w	r3, [r9], #-8
  40e95c:	4599      	cmp	r9, r3
  40e95e:	f040 8086 	bne.w	40ea6e <_malloc_r+0x54e>
  40e962:	f010 0f03 	tst.w	r0, #3
  40e966:	f100 30ff 	add.w	r0, r0, #4294967295
  40e96a:	d1f5      	bne.n	40e958 <_malloc_r+0x438>
  40e96c:	687b      	ldr	r3, [r7, #4]
  40e96e:	ea23 0304 	bic.w	r3, r3, r4
  40e972:	607b      	str	r3, [r7, #4]
  40e974:	0064      	lsls	r4, r4, #1
  40e976:	429c      	cmp	r4, r3
  40e978:	f63f aec7 	bhi.w	40e70a <_malloc_r+0x1ea>
  40e97c:	2c00      	cmp	r4, #0
  40e97e:	f43f aec4 	beq.w	40e70a <_malloc_r+0x1ea>
  40e982:	421c      	tst	r4, r3
  40e984:	4640      	mov	r0, r8
  40e986:	f47f ae3e 	bne.w	40e606 <_malloc_r+0xe6>
  40e98a:	0064      	lsls	r4, r4, #1
  40e98c:	421c      	tst	r4, r3
  40e98e:	f100 0004 	add.w	r0, r0, #4
  40e992:	d0fa      	beq.n	40e98a <_malloc_r+0x46a>
  40e994:	e637      	b.n	40e606 <_malloc_r+0xe6>
  40e996:	468c      	mov	ip, r1
  40e998:	e78c      	b.n	40e8b4 <_malloc_r+0x394>
  40e99a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40e99e:	d815      	bhi.n	40e9cc <_malloc_r+0x4ac>
  40e9a0:	0bf3      	lsrs	r3, r6, #15
  40e9a2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40e9a6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40e9aa:	00c3      	lsls	r3, r0, #3
  40e9ac:	e5da      	b.n	40e564 <_malloc_r+0x44>
  40e9ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40e9b2:	e6ed      	b.n	40e790 <_malloc_r+0x270>
  40e9b4:	687b      	ldr	r3, [r7, #4]
  40e9b6:	1092      	asrs	r2, r2, #2
  40e9b8:	2101      	movs	r1, #1
  40e9ba:	fa01 f202 	lsl.w	r2, r1, r2
  40e9be:	4313      	orrs	r3, r2
  40e9c0:	607b      	str	r3, [r7, #4]
  40e9c2:	4662      	mov	r2, ip
  40e9c4:	e779      	b.n	40e8ba <_malloc_r+0x39a>
  40e9c6:	2301      	movs	r3, #1
  40e9c8:	6053      	str	r3, [r2, #4]
  40e9ca:	e729      	b.n	40e820 <_malloc_r+0x300>
  40e9cc:	f240 5254 	movw	r2, #1364	; 0x554
  40e9d0:	4293      	cmp	r3, r2
  40e9d2:	d822      	bhi.n	40ea1a <_malloc_r+0x4fa>
  40e9d4:	0cb3      	lsrs	r3, r6, #18
  40e9d6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40e9da:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40e9de:	00c3      	lsls	r3, r0, #3
  40e9e0:	e5c0      	b.n	40e564 <_malloc_r+0x44>
  40e9e2:	f103 0b10 	add.w	fp, r3, #16
  40e9e6:	e6ae      	b.n	40e746 <_malloc_r+0x226>
  40e9e8:	2a54      	cmp	r2, #84	; 0x54
  40e9ea:	d829      	bhi.n	40ea40 <_malloc_r+0x520>
  40e9ec:	0b1a      	lsrs	r2, r3, #12
  40e9ee:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40e9f2:	00c9      	lsls	r1, r1, #3
  40e9f4:	326e      	adds	r2, #110	; 0x6e
  40e9f6:	e74d      	b.n	40e894 <_malloc_r+0x374>
  40e9f8:	4b20      	ldr	r3, [pc, #128]	; (40ea7c <_malloc_r+0x55c>)
  40e9fa:	6819      	ldr	r1, [r3, #0]
  40e9fc:	4459      	add	r1, fp
  40e9fe:	6019      	str	r1, [r3, #0]
  40ea00:	e6b2      	b.n	40e768 <_malloc_r+0x248>
  40ea02:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40ea06:	2800      	cmp	r0, #0
  40ea08:	f47f aeae 	bne.w	40e768 <_malloc_r+0x248>
  40ea0c:	eb08 030b 	add.w	r3, r8, fp
  40ea10:	68ba      	ldr	r2, [r7, #8]
  40ea12:	f043 0301 	orr.w	r3, r3, #1
  40ea16:	6053      	str	r3, [r2, #4]
  40ea18:	e6ee      	b.n	40e7f8 <_malloc_r+0x2d8>
  40ea1a:	207f      	movs	r0, #127	; 0x7f
  40ea1c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40ea20:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40ea24:	e59e      	b.n	40e564 <_malloc_r+0x44>
  40ea26:	f104 0108 	add.w	r1, r4, #8
  40ea2a:	4628      	mov	r0, r5
  40ea2c:	9300      	str	r3, [sp, #0]
  40ea2e:	f7ff fa59 	bl	40dee4 <_free_r>
  40ea32:	9b00      	ldr	r3, [sp, #0]
  40ea34:	6819      	ldr	r1, [r3, #0]
  40ea36:	e6df      	b.n	40e7f8 <_malloc_r+0x2d8>
  40ea38:	2001      	movs	r0, #1
  40ea3a:	f04f 0900 	mov.w	r9, #0
  40ea3e:	e6bc      	b.n	40e7ba <_malloc_r+0x29a>
  40ea40:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40ea44:	d805      	bhi.n	40ea52 <_malloc_r+0x532>
  40ea46:	0bda      	lsrs	r2, r3, #15
  40ea48:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40ea4c:	00c9      	lsls	r1, r1, #3
  40ea4e:	3277      	adds	r2, #119	; 0x77
  40ea50:	e720      	b.n	40e894 <_malloc_r+0x374>
  40ea52:	f240 5154 	movw	r1, #1364	; 0x554
  40ea56:	428a      	cmp	r2, r1
  40ea58:	d805      	bhi.n	40ea66 <_malloc_r+0x546>
  40ea5a:	0c9a      	lsrs	r2, r3, #18
  40ea5c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40ea60:	00c9      	lsls	r1, r1, #3
  40ea62:	327c      	adds	r2, #124	; 0x7c
  40ea64:	e716      	b.n	40e894 <_malloc_r+0x374>
  40ea66:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40ea6a:	227e      	movs	r2, #126	; 0x7e
  40ea6c:	e712      	b.n	40e894 <_malloc_r+0x374>
  40ea6e:	687b      	ldr	r3, [r7, #4]
  40ea70:	e780      	b.n	40e974 <_malloc_r+0x454>
  40ea72:	08f0      	lsrs	r0, r6, #3
  40ea74:	f106 0308 	add.w	r3, r6, #8
  40ea78:	e600      	b.n	40e67c <_malloc_r+0x15c>
  40ea7a:	bf00      	nop
  40ea7c:	20400ed0 	.word	0x20400ed0

0040ea80 <__ascii_mbtowc>:
  40ea80:	b082      	sub	sp, #8
  40ea82:	b149      	cbz	r1, 40ea98 <__ascii_mbtowc+0x18>
  40ea84:	b15a      	cbz	r2, 40ea9e <__ascii_mbtowc+0x1e>
  40ea86:	b16b      	cbz	r3, 40eaa4 <__ascii_mbtowc+0x24>
  40ea88:	7813      	ldrb	r3, [r2, #0]
  40ea8a:	600b      	str	r3, [r1, #0]
  40ea8c:	7812      	ldrb	r2, [r2, #0]
  40ea8e:	1c10      	adds	r0, r2, #0
  40ea90:	bf18      	it	ne
  40ea92:	2001      	movne	r0, #1
  40ea94:	b002      	add	sp, #8
  40ea96:	4770      	bx	lr
  40ea98:	a901      	add	r1, sp, #4
  40ea9a:	2a00      	cmp	r2, #0
  40ea9c:	d1f3      	bne.n	40ea86 <__ascii_mbtowc+0x6>
  40ea9e:	4610      	mov	r0, r2
  40eaa0:	b002      	add	sp, #8
  40eaa2:	4770      	bx	lr
  40eaa4:	f06f 0001 	mvn.w	r0, #1
  40eaa8:	e7f4      	b.n	40ea94 <__ascii_mbtowc+0x14>
  40eaaa:	bf00      	nop
  40eaac:	0000      	movs	r0, r0
	...

0040eab0 <memchr>:
  40eab0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40eab4:	2a10      	cmp	r2, #16
  40eab6:	db2b      	blt.n	40eb10 <memchr+0x60>
  40eab8:	f010 0f07 	tst.w	r0, #7
  40eabc:	d008      	beq.n	40ead0 <memchr+0x20>
  40eabe:	f810 3b01 	ldrb.w	r3, [r0], #1
  40eac2:	3a01      	subs	r2, #1
  40eac4:	428b      	cmp	r3, r1
  40eac6:	d02d      	beq.n	40eb24 <memchr+0x74>
  40eac8:	f010 0f07 	tst.w	r0, #7
  40eacc:	b342      	cbz	r2, 40eb20 <memchr+0x70>
  40eace:	d1f6      	bne.n	40eabe <memchr+0xe>
  40ead0:	b4f0      	push	{r4, r5, r6, r7}
  40ead2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40ead6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40eada:	f022 0407 	bic.w	r4, r2, #7
  40eade:	f07f 0700 	mvns.w	r7, #0
  40eae2:	2300      	movs	r3, #0
  40eae4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40eae8:	3c08      	subs	r4, #8
  40eaea:	ea85 0501 	eor.w	r5, r5, r1
  40eaee:	ea86 0601 	eor.w	r6, r6, r1
  40eaf2:	fa85 f547 	uadd8	r5, r5, r7
  40eaf6:	faa3 f587 	sel	r5, r3, r7
  40eafa:	fa86 f647 	uadd8	r6, r6, r7
  40eafe:	faa5 f687 	sel	r6, r5, r7
  40eb02:	b98e      	cbnz	r6, 40eb28 <memchr+0x78>
  40eb04:	d1ee      	bne.n	40eae4 <memchr+0x34>
  40eb06:	bcf0      	pop	{r4, r5, r6, r7}
  40eb08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40eb0c:	f002 0207 	and.w	r2, r2, #7
  40eb10:	b132      	cbz	r2, 40eb20 <memchr+0x70>
  40eb12:	f810 3b01 	ldrb.w	r3, [r0], #1
  40eb16:	3a01      	subs	r2, #1
  40eb18:	ea83 0301 	eor.w	r3, r3, r1
  40eb1c:	b113      	cbz	r3, 40eb24 <memchr+0x74>
  40eb1e:	d1f8      	bne.n	40eb12 <memchr+0x62>
  40eb20:	2000      	movs	r0, #0
  40eb22:	4770      	bx	lr
  40eb24:	3801      	subs	r0, #1
  40eb26:	4770      	bx	lr
  40eb28:	2d00      	cmp	r5, #0
  40eb2a:	bf06      	itte	eq
  40eb2c:	4635      	moveq	r5, r6
  40eb2e:	3803      	subeq	r0, #3
  40eb30:	3807      	subne	r0, #7
  40eb32:	f015 0f01 	tst.w	r5, #1
  40eb36:	d107      	bne.n	40eb48 <memchr+0x98>
  40eb38:	3001      	adds	r0, #1
  40eb3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40eb3e:	bf02      	ittt	eq
  40eb40:	3001      	addeq	r0, #1
  40eb42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40eb46:	3001      	addeq	r0, #1
  40eb48:	bcf0      	pop	{r4, r5, r6, r7}
  40eb4a:	3801      	subs	r0, #1
  40eb4c:	4770      	bx	lr
  40eb4e:	bf00      	nop

0040eb50 <memmove>:
  40eb50:	4288      	cmp	r0, r1
  40eb52:	b5f0      	push	{r4, r5, r6, r7, lr}
  40eb54:	d90d      	bls.n	40eb72 <memmove+0x22>
  40eb56:	188b      	adds	r3, r1, r2
  40eb58:	4298      	cmp	r0, r3
  40eb5a:	d20a      	bcs.n	40eb72 <memmove+0x22>
  40eb5c:	1884      	adds	r4, r0, r2
  40eb5e:	2a00      	cmp	r2, #0
  40eb60:	d051      	beq.n	40ec06 <memmove+0xb6>
  40eb62:	4622      	mov	r2, r4
  40eb64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40eb68:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40eb6c:	4299      	cmp	r1, r3
  40eb6e:	d1f9      	bne.n	40eb64 <memmove+0x14>
  40eb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40eb72:	2a0f      	cmp	r2, #15
  40eb74:	d948      	bls.n	40ec08 <memmove+0xb8>
  40eb76:	ea41 0300 	orr.w	r3, r1, r0
  40eb7a:	079b      	lsls	r3, r3, #30
  40eb7c:	d146      	bne.n	40ec0c <memmove+0xbc>
  40eb7e:	f100 0410 	add.w	r4, r0, #16
  40eb82:	f101 0310 	add.w	r3, r1, #16
  40eb86:	4615      	mov	r5, r2
  40eb88:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40eb8c:	f844 6c10 	str.w	r6, [r4, #-16]
  40eb90:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40eb94:	f844 6c0c 	str.w	r6, [r4, #-12]
  40eb98:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40eb9c:	f844 6c08 	str.w	r6, [r4, #-8]
  40eba0:	3d10      	subs	r5, #16
  40eba2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40eba6:	f844 6c04 	str.w	r6, [r4, #-4]
  40ebaa:	2d0f      	cmp	r5, #15
  40ebac:	f103 0310 	add.w	r3, r3, #16
  40ebb0:	f104 0410 	add.w	r4, r4, #16
  40ebb4:	d8e8      	bhi.n	40eb88 <memmove+0x38>
  40ebb6:	f1a2 0310 	sub.w	r3, r2, #16
  40ebba:	f023 030f 	bic.w	r3, r3, #15
  40ebbe:	f002 0e0f 	and.w	lr, r2, #15
  40ebc2:	3310      	adds	r3, #16
  40ebc4:	f1be 0f03 	cmp.w	lr, #3
  40ebc8:	4419      	add	r1, r3
  40ebca:	4403      	add	r3, r0
  40ebcc:	d921      	bls.n	40ec12 <memmove+0xc2>
  40ebce:	1f1e      	subs	r6, r3, #4
  40ebd0:	460d      	mov	r5, r1
  40ebd2:	4674      	mov	r4, lr
  40ebd4:	3c04      	subs	r4, #4
  40ebd6:	f855 7b04 	ldr.w	r7, [r5], #4
  40ebda:	f846 7f04 	str.w	r7, [r6, #4]!
  40ebde:	2c03      	cmp	r4, #3
  40ebe0:	d8f8      	bhi.n	40ebd4 <memmove+0x84>
  40ebe2:	f1ae 0404 	sub.w	r4, lr, #4
  40ebe6:	f024 0403 	bic.w	r4, r4, #3
  40ebea:	3404      	adds	r4, #4
  40ebec:	4421      	add	r1, r4
  40ebee:	4423      	add	r3, r4
  40ebf0:	f002 0203 	and.w	r2, r2, #3
  40ebf4:	b162      	cbz	r2, 40ec10 <memmove+0xc0>
  40ebf6:	3b01      	subs	r3, #1
  40ebf8:	440a      	add	r2, r1
  40ebfa:	f811 4b01 	ldrb.w	r4, [r1], #1
  40ebfe:	f803 4f01 	strb.w	r4, [r3, #1]!
  40ec02:	428a      	cmp	r2, r1
  40ec04:	d1f9      	bne.n	40ebfa <memmove+0xaa>
  40ec06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ec08:	4603      	mov	r3, r0
  40ec0a:	e7f3      	b.n	40ebf4 <memmove+0xa4>
  40ec0c:	4603      	mov	r3, r0
  40ec0e:	e7f2      	b.n	40ebf6 <memmove+0xa6>
  40ec10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ec12:	4672      	mov	r2, lr
  40ec14:	e7ee      	b.n	40ebf4 <memmove+0xa4>
  40ec16:	bf00      	nop

0040ec18 <__malloc_lock>:
  40ec18:	4801      	ldr	r0, [pc, #4]	; (40ec20 <__malloc_lock+0x8>)
  40ec1a:	f7ff bbfd 	b.w	40e418 <__retarget_lock_acquire_recursive>
  40ec1e:	bf00      	nop
  40ec20:	2040100c 	.word	0x2040100c

0040ec24 <__malloc_unlock>:
  40ec24:	4801      	ldr	r0, [pc, #4]	; (40ec2c <__malloc_unlock+0x8>)
  40ec26:	f7ff bbf9 	b.w	40e41c <__retarget_lock_release_recursive>
  40ec2a:	bf00      	nop
  40ec2c:	2040100c 	.word	0x2040100c

0040ec30 <_realloc_r>:
  40ec30:	2900      	cmp	r1, #0
  40ec32:	f000 8095 	beq.w	40ed60 <_realloc_r+0x130>
  40ec36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ec3a:	460d      	mov	r5, r1
  40ec3c:	4616      	mov	r6, r2
  40ec3e:	b083      	sub	sp, #12
  40ec40:	4680      	mov	r8, r0
  40ec42:	f106 070b 	add.w	r7, r6, #11
  40ec46:	f7ff ffe7 	bl	40ec18 <__malloc_lock>
  40ec4a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40ec4e:	2f16      	cmp	r7, #22
  40ec50:	f02e 0403 	bic.w	r4, lr, #3
  40ec54:	f1a5 0908 	sub.w	r9, r5, #8
  40ec58:	d83c      	bhi.n	40ecd4 <_realloc_r+0xa4>
  40ec5a:	2210      	movs	r2, #16
  40ec5c:	4617      	mov	r7, r2
  40ec5e:	42be      	cmp	r6, r7
  40ec60:	d83d      	bhi.n	40ecde <_realloc_r+0xae>
  40ec62:	4294      	cmp	r4, r2
  40ec64:	da43      	bge.n	40ecee <_realloc_r+0xbe>
  40ec66:	4bc4      	ldr	r3, [pc, #784]	; (40ef78 <_realloc_r+0x348>)
  40ec68:	6899      	ldr	r1, [r3, #8]
  40ec6a:	eb09 0004 	add.w	r0, r9, r4
  40ec6e:	4288      	cmp	r0, r1
  40ec70:	f000 80b4 	beq.w	40eddc <_realloc_r+0x1ac>
  40ec74:	6843      	ldr	r3, [r0, #4]
  40ec76:	f023 0101 	bic.w	r1, r3, #1
  40ec7a:	4401      	add	r1, r0
  40ec7c:	6849      	ldr	r1, [r1, #4]
  40ec7e:	07c9      	lsls	r1, r1, #31
  40ec80:	d54c      	bpl.n	40ed1c <_realloc_r+0xec>
  40ec82:	f01e 0f01 	tst.w	lr, #1
  40ec86:	f000 809b 	beq.w	40edc0 <_realloc_r+0x190>
  40ec8a:	4631      	mov	r1, r6
  40ec8c:	4640      	mov	r0, r8
  40ec8e:	f7ff fc47 	bl	40e520 <_malloc_r>
  40ec92:	4606      	mov	r6, r0
  40ec94:	2800      	cmp	r0, #0
  40ec96:	d03a      	beq.n	40ed0e <_realloc_r+0xde>
  40ec98:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40ec9c:	f023 0301 	bic.w	r3, r3, #1
  40eca0:	444b      	add	r3, r9
  40eca2:	f1a0 0208 	sub.w	r2, r0, #8
  40eca6:	429a      	cmp	r2, r3
  40eca8:	f000 8121 	beq.w	40eeee <_realloc_r+0x2be>
  40ecac:	1f22      	subs	r2, r4, #4
  40ecae:	2a24      	cmp	r2, #36	; 0x24
  40ecb0:	f200 8107 	bhi.w	40eec2 <_realloc_r+0x292>
  40ecb4:	2a13      	cmp	r2, #19
  40ecb6:	f200 80db 	bhi.w	40ee70 <_realloc_r+0x240>
  40ecba:	4603      	mov	r3, r0
  40ecbc:	462a      	mov	r2, r5
  40ecbe:	6811      	ldr	r1, [r2, #0]
  40ecc0:	6019      	str	r1, [r3, #0]
  40ecc2:	6851      	ldr	r1, [r2, #4]
  40ecc4:	6059      	str	r1, [r3, #4]
  40ecc6:	6892      	ldr	r2, [r2, #8]
  40ecc8:	609a      	str	r2, [r3, #8]
  40ecca:	4629      	mov	r1, r5
  40eccc:	4640      	mov	r0, r8
  40ecce:	f7ff f909 	bl	40dee4 <_free_r>
  40ecd2:	e01c      	b.n	40ed0e <_realloc_r+0xde>
  40ecd4:	f027 0707 	bic.w	r7, r7, #7
  40ecd8:	2f00      	cmp	r7, #0
  40ecda:	463a      	mov	r2, r7
  40ecdc:	dabf      	bge.n	40ec5e <_realloc_r+0x2e>
  40ecde:	2600      	movs	r6, #0
  40ece0:	230c      	movs	r3, #12
  40ece2:	4630      	mov	r0, r6
  40ece4:	f8c8 3000 	str.w	r3, [r8]
  40ece8:	b003      	add	sp, #12
  40ecea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ecee:	462e      	mov	r6, r5
  40ecf0:	1be3      	subs	r3, r4, r7
  40ecf2:	2b0f      	cmp	r3, #15
  40ecf4:	d81e      	bhi.n	40ed34 <_realloc_r+0x104>
  40ecf6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40ecfa:	f003 0301 	and.w	r3, r3, #1
  40ecfe:	4323      	orrs	r3, r4
  40ed00:	444c      	add	r4, r9
  40ed02:	f8c9 3004 	str.w	r3, [r9, #4]
  40ed06:	6863      	ldr	r3, [r4, #4]
  40ed08:	f043 0301 	orr.w	r3, r3, #1
  40ed0c:	6063      	str	r3, [r4, #4]
  40ed0e:	4640      	mov	r0, r8
  40ed10:	f7ff ff88 	bl	40ec24 <__malloc_unlock>
  40ed14:	4630      	mov	r0, r6
  40ed16:	b003      	add	sp, #12
  40ed18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ed1c:	f023 0303 	bic.w	r3, r3, #3
  40ed20:	18e1      	adds	r1, r4, r3
  40ed22:	4291      	cmp	r1, r2
  40ed24:	db1f      	blt.n	40ed66 <_realloc_r+0x136>
  40ed26:	68c3      	ldr	r3, [r0, #12]
  40ed28:	6882      	ldr	r2, [r0, #8]
  40ed2a:	462e      	mov	r6, r5
  40ed2c:	60d3      	str	r3, [r2, #12]
  40ed2e:	460c      	mov	r4, r1
  40ed30:	609a      	str	r2, [r3, #8]
  40ed32:	e7dd      	b.n	40ecf0 <_realloc_r+0xc0>
  40ed34:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40ed38:	eb09 0107 	add.w	r1, r9, r7
  40ed3c:	f002 0201 	and.w	r2, r2, #1
  40ed40:	444c      	add	r4, r9
  40ed42:	f043 0301 	orr.w	r3, r3, #1
  40ed46:	4317      	orrs	r7, r2
  40ed48:	f8c9 7004 	str.w	r7, [r9, #4]
  40ed4c:	604b      	str	r3, [r1, #4]
  40ed4e:	6863      	ldr	r3, [r4, #4]
  40ed50:	f043 0301 	orr.w	r3, r3, #1
  40ed54:	3108      	adds	r1, #8
  40ed56:	6063      	str	r3, [r4, #4]
  40ed58:	4640      	mov	r0, r8
  40ed5a:	f7ff f8c3 	bl	40dee4 <_free_r>
  40ed5e:	e7d6      	b.n	40ed0e <_realloc_r+0xde>
  40ed60:	4611      	mov	r1, r2
  40ed62:	f7ff bbdd 	b.w	40e520 <_malloc_r>
  40ed66:	f01e 0f01 	tst.w	lr, #1
  40ed6a:	d18e      	bne.n	40ec8a <_realloc_r+0x5a>
  40ed6c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40ed70:	eba9 0a01 	sub.w	sl, r9, r1
  40ed74:	f8da 1004 	ldr.w	r1, [sl, #4]
  40ed78:	f021 0103 	bic.w	r1, r1, #3
  40ed7c:	440b      	add	r3, r1
  40ed7e:	4423      	add	r3, r4
  40ed80:	4293      	cmp	r3, r2
  40ed82:	db25      	blt.n	40edd0 <_realloc_r+0x1a0>
  40ed84:	68c2      	ldr	r2, [r0, #12]
  40ed86:	6881      	ldr	r1, [r0, #8]
  40ed88:	4656      	mov	r6, sl
  40ed8a:	60ca      	str	r2, [r1, #12]
  40ed8c:	6091      	str	r1, [r2, #8]
  40ed8e:	f8da 100c 	ldr.w	r1, [sl, #12]
  40ed92:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40ed96:	1f22      	subs	r2, r4, #4
  40ed98:	2a24      	cmp	r2, #36	; 0x24
  40ed9a:	60c1      	str	r1, [r0, #12]
  40ed9c:	6088      	str	r0, [r1, #8]
  40ed9e:	f200 8094 	bhi.w	40eeca <_realloc_r+0x29a>
  40eda2:	2a13      	cmp	r2, #19
  40eda4:	d96f      	bls.n	40ee86 <_realloc_r+0x256>
  40eda6:	6829      	ldr	r1, [r5, #0]
  40eda8:	f8ca 1008 	str.w	r1, [sl, #8]
  40edac:	6869      	ldr	r1, [r5, #4]
  40edae:	f8ca 100c 	str.w	r1, [sl, #12]
  40edb2:	2a1b      	cmp	r2, #27
  40edb4:	f200 80a2 	bhi.w	40eefc <_realloc_r+0x2cc>
  40edb8:	3508      	adds	r5, #8
  40edba:	f10a 0210 	add.w	r2, sl, #16
  40edbe:	e063      	b.n	40ee88 <_realloc_r+0x258>
  40edc0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40edc4:	eba9 0a03 	sub.w	sl, r9, r3
  40edc8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40edcc:	f021 0103 	bic.w	r1, r1, #3
  40edd0:	1863      	adds	r3, r4, r1
  40edd2:	4293      	cmp	r3, r2
  40edd4:	f6ff af59 	blt.w	40ec8a <_realloc_r+0x5a>
  40edd8:	4656      	mov	r6, sl
  40edda:	e7d8      	b.n	40ed8e <_realloc_r+0x15e>
  40eddc:	6841      	ldr	r1, [r0, #4]
  40edde:	f021 0b03 	bic.w	fp, r1, #3
  40ede2:	44a3      	add	fp, r4
  40ede4:	f107 0010 	add.w	r0, r7, #16
  40ede8:	4583      	cmp	fp, r0
  40edea:	da56      	bge.n	40ee9a <_realloc_r+0x26a>
  40edec:	f01e 0f01 	tst.w	lr, #1
  40edf0:	f47f af4b 	bne.w	40ec8a <_realloc_r+0x5a>
  40edf4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40edf8:	eba9 0a01 	sub.w	sl, r9, r1
  40edfc:	f8da 1004 	ldr.w	r1, [sl, #4]
  40ee00:	f021 0103 	bic.w	r1, r1, #3
  40ee04:	448b      	add	fp, r1
  40ee06:	4558      	cmp	r0, fp
  40ee08:	dce2      	bgt.n	40edd0 <_realloc_r+0x1a0>
  40ee0a:	4656      	mov	r6, sl
  40ee0c:	f8da 100c 	ldr.w	r1, [sl, #12]
  40ee10:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40ee14:	1f22      	subs	r2, r4, #4
  40ee16:	2a24      	cmp	r2, #36	; 0x24
  40ee18:	60c1      	str	r1, [r0, #12]
  40ee1a:	6088      	str	r0, [r1, #8]
  40ee1c:	f200 808f 	bhi.w	40ef3e <_realloc_r+0x30e>
  40ee20:	2a13      	cmp	r2, #19
  40ee22:	f240 808a 	bls.w	40ef3a <_realloc_r+0x30a>
  40ee26:	6829      	ldr	r1, [r5, #0]
  40ee28:	f8ca 1008 	str.w	r1, [sl, #8]
  40ee2c:	6869      	ldr	r1, [r5, #4]
  40ee2e:	f8ca 100c 	str.w	r1, [sl, #12]
  40ee32:	2a1b      	cmp	r2, #27
  40ee34:	f200 808a 	bhi.w	40ef4c <_realloc_r+0x31c>
  40ee38:	3508      	adds	r5, #8
  40ee3a:	f10a 0210 	add.w	r2, sl, #16
  40ee3e:	6829      	ldr	r1, [r5, #0]
  40ee40:	6011      	str	r1, [r2, #0]
  40ee42:	6869      	ldr	r1, [r5, #4]
  40ee44:	6051      	str	r1, [r2, #4]
  40ee46:	68a9      	ldr	r1, [r5, #8]
  40ee48:	6091      	str	r1, [r2, #8]
  40ee4a:	eb0a 0107 	add.w	r1, sl, r7
  40ee4e:	ebab 0207 	sub.w	r2, fp, r7
  40ee52:	f042 0201 	orr.w	r2, r2, #1
  40ee56:	6099      	str	r1, [r3, #8]
  40ee58:	604a      	str	r2, [r1, #4]
  40ee5a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40ee5e:	f003 0301 	and.w	r3, r3, #1
  40ee62:	431f      	orrs	r7, r3
  40ee64:	4640      	mov	r0, r8
  40ee66:	f8ca 7004 	str.w	r7, [sl, #4]
  40ee6a:	f7ff fedb 	bl	40ec24 <__malloc_unlock>
  40ee6e:	e751      	b.n	40ed14 <_realloc_r+0xe4>
  40ee70:	682b      	ldr	r3, [r5, #0]
  40ee72:	6003      	str	r3, [r0, #0]
  40ee74:	686b      	ldr	r3, [r5, #4]
  40ee76:	6043      	str	r3, [r0, #4]
  40ee78:	2a1b      	cmp	r2, #27
  40ee7a:	d82d      	bhi.n	40eed8 <_realloc_r+0x2a8>
  40ee7c:	f100 0308 	add.w	r3, r0, #8
  40ee80:	f105 0208 	add.w	r2, r5, #8
  40ee84:	e71b      	b.n	40ecbe <_realloc_r+0x8e>
  40ee86:	4632      	mov	r2, r6
  40ee88:	6829      	ldr	r1, [r5, #0]
  40ee8a:	6011      	str	r1, [r2, #0]
  40ee8c:	6869      	ldr	r1, [r5, #4]
  40ee8e:	6051      	str	r1, [r2, #4]
  40ee90:	68a9      	ldr	r1, [r5, #8]
  40ee92:	6091      	str	r1, [r2, #8]
  40ee94:	461c      	mov	r4, r3
  40ee96:	46d1      	mov	r9, sl
  40ee98:	e72a      	b.n	40ecf0 <_realloc_r+0xc0>
  40ee9a:	eb09 0107 	add.w	r1, r9, r7
  40ee9e:	ebab 0b07 	sub.w	fp, fp, r7
  40eea2:	f04b 0201 	orr.w	r2, fp, #1
  40eea6:	6099      	str	r1, [r3, #8]
  40eea8:	604a      	str	r2, [r1, #4]
  40eeaa:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40eeae:	f003 0301 	and.w	r3, r3, #1
  40eeb2:	431f      	orrs	r7, r3
  40eeb4:	4640      	mov	r0, r8
  40eeb6:	f845 7c04 	str.w	r7, [r5, #-4]
  40eeba:	f7ff feb3 	bl	40ec24 <__malloc_unlock>
  40eebe:	462e      	mov	r6, r5
  40eec0:	e728      	b.n	40ed14 <_realloc_r+0xe4>
  40eec2:	4629      	mov	r1, r5
  40eec4:	f7ff fe44 	bl	40eb50 <memmove>
  40eec8:	e6ff      	b.n	40ecca <_realloc_r+0x9a>
  40eeca:	4629      	mov	r1, r5
  40eecc:	4630      	mov	r0, r6
  40eece:	461c      	mov	r4, r3
  40eed0:	46d1      	mov	r9, sl
  40eed2:	f7ff fe3d 	bl	40eb50 <memmove>
  40eed6:	e70b      	b.n	40ecf0 <_realloc_r+0xc0>
  40eed8:	68ab      	ldr	r3, [r5, #8]
  40eeda:	6083      	str	r3, [r0, #8]
  40eedc:	68eb      	ldr	r3, [r5, #12]
  40eede:	60c3      	str	r3, [r0, #12]
  40eee0:	2a24      	cmp	r2, #36	; 0x24
  40eee2:	d017      	beq.n	40ef14 <_realloc_r+0x2e4>
  40eee4:	f100 0310 	add.w	r3, r0, #16
  40eee8:	f105 0210 	add.w	r2, r5, #16
  40eeec:	e6e7      	b.n	40ecbe <_realloc_r+0x8e>
  40eeee:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40eef2:	f023 0303 	bic.w	r3, r3, #3
  40eef6:	441c      	add	r4, r3
  40eef8:	462e      	mov	r6, r5
  40eefa:	e6f9      	b.n	40ecf0 <_realloc_r+0xc0>
  40eefc:	68a9      	ldr	r1, [r5, #8]
  40eefe:	f8ca 1010 	str.w	r1, [sl, #16]
  40ef02:	68e9      	ldr	r1, [r5, #12]
  40ef04:	f8ca 1014 	str.w	r1, [sl, #20]
  40ef08:	2a24      	cmp	r2, #36	; 0x24
  40ef0a:	d00c      	beq.n	40ef26 <_realloc_r+0x2f6>
  40ef0c:	3510      	adds	r5, #16
  40ef0e:	f10a 0218 	add.w	r2, sl, #24
  40ef12:	e7b9      	b.n	40ee88 <_realloc_r+0x258>
  40ef14:	692b      	ldr	r3, [r5, #16]
  40ef16:	6103      	str	r3, [r0, #16]
  40ef18:	696b      	ldr	r3, [r5, #20]
  40ef1a:	6143      	str	r3, [r0, #20]
  40ef1c:	f105 0218 	add.w	r2, r5, #24
  40ef20:	f100 0318 	add.w	r3, r0, #24
  40ef24:	e6cb      	b.n	40ecbe <_realloc_r+0x8e>
  40ef26:	692a      	ldr	r2, [r5, #16]
  40ef28:	f8ca 2018 	str.w	r2, [sl, #24]
  40ef2c:	696a      	ldr	r2, [r5, #20]
  40ef2e:	f8ca 201c 	str.w	r2, [sl, #28]
  40ef32:	3518      	adds	r5, #24
  40ef34:	f10a 0220 	add.w	r2, sl, #32
  40ef38:	e7a6      	b.n	40ee88 <_realloc_r+0x258>
  40ef3a:	4632      	mov	r2, r6
  40ef3c:	e77f      	b.n	40ee3e <_realloc_r+0x20e>
  40ef3e:	4629      	mov	r1, r5
  40ef40:	4630      	mov	r0, r6
  40ef42:	9301      	str	r3, [sp, #4]
  40ef44:	f7ff fe04 	bl	40eb50 <memmove>
  40ef48:	9b01      	ldr	r3, [sp, #4]
  40ef4a:	e77e      	b.n	40ee4a <_realloc_r+0x21a>
  40ef4c:	68a9      	ldr	r1, [r5, #8]
  40ef4e:	f8ca 1010 	str.w	r1, [sl, #16]
  40ef52:	68e9      	ldr	r1, [r5, #12]
  40ef54:	f8ca 1014 	str.w	r1, [sl, #20]
  40ef58:	2a24      	cmp	r2, #36	; 0x24
  40ef5a:	d003      	beq.n	40ef64 <_realloc_r+0x334>
  40ef5c:	3510      	adds	r5, #16
  40ef5e:	f10a 0218 	add.w	r2, sl, #24
  40ef62:	e76c      	b.n	40ee3e <_realloc_r+0x20e>
  40ef64:	692a      	ldr	r2, [r5, #16]
  40ef66:	f8ca 2018 	str.w	r2, [sl, #24]
  40ef6a:	696a      	ldr	r2, [r5, #20]
  40ef6c:	f8ca 201c 	str.w	r2, [sl, #28]
  40ef70:	3518      	adds	r5, #24
  40ef72:	f10a 0220 	add.w	r2, sl, #32
  40ef76:	e762      	b.n	40ee3e <_realloc_r+0x20e>
  40ef78:	20400720 	.word	0x20400720

0040ef7c <_sbrk_r>:
  40ef7c:	b538      	push	{r3, r4, r5, lr}
  40ef7e:	4c07      	ldr	r4, [pc, #28]	; (40ef9c <_sbrk_r+0x20>)
  40ef80:	2300      	movs	r3, #0
  40ef82:	4605      	mov	r5, r0
  40ef84:	4608      	mov	r0, r1
  40ef86:	6023      	str	r3, [r4, #0]
  40ef88:	f7f6 f8c0 	bl	40510c <_sbrk>
  40ef8c:	1c43      	adds	r3, r0, #1
  40ef8e:	d000      	beq.n	40ef92 <_sbrk_r+0x16>
  40ef90:	bd38      	pop	{r3, r4, r5, pc}
  40ef92:	6823      	ldr	r3, [r4, #0]
  40ef94:	2b00      	cmp	r3, #0
  40ef96:	d0fb      	beq.n	40ef90 <_sbrk_r+0x14>
  40ef98:	602b      	str	r3, [r5, #0]
  40ef9a:	bd38      	pop	{r3, r4, r5, pc}
  40ef9c:	20401020 	.word	0x20401020

0040efa0 <__sread>:
  40efa0:	b510      	push	{r4, lr}
  40efa2:	460c      	mov	r4, r1
  40efa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40efa8:	f000 fa70 	bl	40f48c <_read_r>
  40efac:	2800      	cmp	r0, #0
  40efae:	db03      	blt.n	40efb8 <__sread+0x18>
  40efb0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40efb2:	4403      	add	r3, r0
  40efb4:	6523      	str	r3, [r4, #80]	; 0x50
  40efb6:	bd10      	pop	{r4, pc}
  40efb8:	89a3      	ldrh	r3, [r4, #12]
  40efba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40efbe:	81a3      	strh	r3, [r4, #12]
  40efc0:	bd10      	pop	{r4, pc}
  40efc2:	bf00      	nop

0040efc4 <__swrite>:
  40efc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40efc8:	4616      	mov	r6, r2
  40efca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40efce:	461f      	mov	r7, r3
  40efd0:	05d3      	lsls	r3, r2, #23
  40efd2:	460c      	mov	r4, r1
  40efd4:	4605      	mov	r5, r0
  40efd6:	d507      	bpl.n	40efe8 <__swrite+0x24>
  40efd8:	2200      	movs	r2, #0
  40efda:	2302      	movs	r3, #2
  40efdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40efe0:	f000 fa3e 	bl	40f460 <_lseek_r>
  40efe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40efe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40efec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40eff0:	81a2      	strh	r2, [r4, #12]
  40eff2:	463b      	mov	r3, r7
  40eff4:	4632      	mov	r2, r6
  40eff6:	4628      	mov	r0, r5
  40eff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40effc:	f000 b91e 	b.w	40f23c <_write_r>

0040f000 <__sseek>:
  40f000:	b510      	push	{r4, lr}
  40f002:	460c      	mov	r4, r1
  40f004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f008:	f000 fa2a 	bl	40f460 <_lseek_r>
  40f00c:	89a3      	ldrh	r3, [r4, #12]
  40f00e:	1c42      	adds	r2, r0, #1
  40f010:	bf0e      	itee	eq
  40f012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40f016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40f01a:	6520      	strne	r0, [r4, #80]	; 0x50
  40f01c:	81a3      	strh	r3, [r4, #12]
  40f01e:	bd10      	pop	{r4, pc}

0040f020 <__sclose>:
  40f020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f024:	f000 b982 	b.w	40f32c <_close_r>
	...

0040f040 <strlen>:
  40f040:	f890 f000 	pld	[r0]
  40f044:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40f048:	f020 0107 	bic.w	r1, r0, #7
  40f04c:	f06f 0c00 	mvn.w	ip, #0
  40f050:	f010 0407 	ands.w	r4, r0, #7
  40f054:	f891 f020 	pld	[r1, #32]
  40f058:	f040 8049 	bne.w	40f0ee <strlen+0xae>
  40f05c:	f04f 0400 	mov.w	r4, #0
  40f060:	f06f 0007 	mvn.w	r0, #7
  40f064:	e9d1 2300 	ldrd	r2, r3, [r1]
  40f068:	f891 f040 	pld	[r1, #64]	; 0x40
  40f06c:	f100 0008 	add.w	r0, r0, #8
  40f070:	fa82 f24c 	uadd8	r2, r2, ip
  40f074:	faa4 f28c 	sel	r2, r4, ip
  40f078:	fa83 f34c 	uadd8	r3, r3, ip
  40f07c:	faa2 f38c 	sel	r3, r2, ip
  40f080:	bb4b      	cbnz	r3, 40f0d6 <strlen+0x96>
  40f082:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40f086:	fa82 f24c 	uadd8	r2, r2, ip
  40f08a:	f100 0008 	add.w	r0, r0, #8
  40f08e:	faa4 f28c 	sel	r2, r4, ip
  40f092:	fa83 f34c 	uadd8	r3, r3, ip
  40f096:	faa2 f38c 	sel	r3, r2, ip
  40f09a:	b9e3      	cbnz	r3, 40f0d6 <strlen+0x96>
  40f09c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40f0a0:	fa82 f24c 	uadd8	r2, r2, ip
  40f0a4:	f100 0008 	add.w	r0, r0, #8
  40f0a8:	faa4 f28c 	sel	r2, r4, ip
  40f0ac:	fa83 f34c 	uadd8	r3, r3, ip
  40f0b0:	faa2 f38c 	sel	r3, r2, ip
  40f0b4:	b97b      	cbnz	r3, 40f0d6 <strlen+0x96>
  40f0b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40f0ba:	f101 0120 	add.w	r1, r1, #32
  40f0be:	fa82 f24c 	uadd8	r2, r2, ip
  40f0c2:	f100 0008 	add.w	r0, r0, #8
  40f0c6:	faa4 f28c 	sel	r2, r4, ip
  40f0ca:	fa83 f34c 	uadd8	r3, r3, ip
  40f0ce:	faa2 f38c 	sel	r3, r2, ip
  40f0d2:	2b00      	cmp	r3, #0
  40f0d4:	d0c6      	beq.n	40f064 <strlen+0x24>
  40f0d6:	2a00      	cmp	r2, #0
  40f0d8:	bf04      	itt	eq
  40f0da:	3004      	addeq	r0, #4
  40f0dc:	461a      	moveq	r2, r3
  40f0de:	ba12      	rev	r2, r2
  40f0e0:	fab2 f282 	clz	r2, r2
  40f0e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40f0e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40f0ec:	4770      	bx	lr
  40f0ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  40f0f2:	f004 0503 	and.w	r5, r4, #3
  40f0f6:	f1c4 0000 	rsb	r0, r4, #0
  40f0fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40f0fe:	f014 0f04 	tst.w	r4, #4
  40f102:	f891 f040 	pld	[r1, #64]	; 0x40
  40f106:	fa0c f505 	lsl.w	r5, ip, r5
  40f10a:	ea62 0205 	orn	r2, r2, r5
  40f10e:	bf1c      	itt	ne
  40f110:	ea63 0305 	ornne	r3, r3, r5
  40f114:	4662      	movne	r2, ip
  40f116:	f04f 0400 	mov.w	r4, #0
  40f11a:	e7a9      	b.n	40f070 <strlen+0x30>

0040f11c <__swbuf_r>:
  40f11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f11e:	460d      	mov	r5, r1
  40f120:	4614      	mov	r4, r2
  40f122:	4606      	mov	r6, r0
  40f124:	b110      	cbz	r0, 40f12c <__swbuf_r+0x10>
  40f126:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f128:	2b00      	cmp	r3, #0
  40f12a:	d04b      	beq.n	40f1c4 <__swbuf_r+0xa8>
  40f12c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f130:	69a3      	ldr	r3, [r4, #24]
  40f132:	60a3      	str	r3, [r4, #8]
  40f134:	b291      	uxth	r1, r2
  40f136:	0708      	lsls	r0, r1, #28
  40f138:	d539      	bpl.n	40f1ae <__swbuf_r+0x92>
  40f13a:	6923      	ldr	r3, [r4, #16]
  40f13c:	2b00      	cmp	r3, #0
  40f13e:	d036      	beq.n	40f1ae <__swbuf_r+0x92>
  40f140:	b2ed      	uxtb	r5, r5
  40f142:	0489      	lsls	r1, r1, #18
  40f144:	462f      	mov	r7, r5
  40f146:	d515      	bpl.n	40f174 <__swbuf_r+0x58>
  40f148:	6822      	ldr	r2, [r4, #0]
  40f14a:	6961      	ldr	r1, [r4, #20]
  40f14c:	1ad3      	subs	r3, r2, r3
  40f14e:	428b      	cmp	r3, r1
  40f150:	da1c      	bge.n	40f18c <__swbuf_r+0x70>
  40f152:	3301      	adds	r3, #1
  40f154:	68a1      	ldr	r1, [r4, #8]
  40f156:	1c50      	adds	r0, r2, #1
  40f158:	3901      	subs	r1, #1
  40f15a:	60a1      	str	r1, [r4, #8]
  40f15c:	6020      	str	r0, [r4, #0]
  40f15e:	7015      	strb	r5, [r2, #0]
  40f160:	6962      	ldr	r2, [r4, #20]
  40f162:	429a      	cmp	r2, r3
  40f164:	d01a      	beq.n	40f19c <__swbuf_r+0x80>
  40f166:	89a3      	ldrh	r3, [r4, #12]
  40f168:	07db      	lsls	r3, r3, #31
  40f16a:	d501      	bpl.n	40f170 <__swbuf_r+0x54>
  40f16c:	2d0a      	cmp	r5, #10
  40f16e:	d015      	beq.n	40f19c <__swbuf_r+0x80>
  40f170:	4638      	mov	r0, r7
  40f172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f174:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40f176:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40f17a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40f17e:	81a2      	strh	r2, [r4, #12]
  40f180:	6822      	ldr	r2, [r4, #0]
  40f182:	6661      	str	r1, [r4, #100]	; 0x64
  40f184:	6961      	ldr	r1, [r4, #20]
  40f186:	1ad3      	subs	r3, r2, r3
  40f188:	428b      	cmp	r3, r1
  40f18a:	dbe2      	blt.n	40f152 <__swbuf_r+0x36>
  40f18c:	4621      	mov	r1, r4
  40f18e:	4630      	mov	r0, r6
  40f190:	f7fe fd2a 	bl	40dbe8 <_fflush_r>
  40f194:	b940      	cbnz	r0, 40f1a8 <__swbuf_r+0x8c>
  40f196:	6822      	ldr	r2, [r4, #0]
  40f198:	2301      	movs	r3, #1
  40f19a:	e7db      	b.n	40f154 <__swbuf_r+0x38>
  40f19c:	4621      	mov	r1, r4
  40f19e:	4630      	mov	r0, r6
  40f1a0:	f7fe fd22 	bl	40dbe8 <_fflush_r>
  40f1a4:	2800      	cmp	r0, #0
  40f1a6:	d0e3      	beq.n	40f170 <__swbuf_r+0x54>
  40f1a8:	f04f 37ff 	mov.w	r7, #4294967295
  40f1ac:	e7e0      	b.n	40f170 <__swbuf_r+0x54>
  40f1ae:	4621      	mov	r1, r4
  40f1b0:	4630      	mov	r0, r6
  40f1b2:	f7fe fc05 	bl	40d9c0 <__swsetup_r>
  40f1b6:	2800      	cmp	r0, #0
  40f1b8:	d1f6      	bne.n	40f1a8 <__swbuf_r+0x8c>
  40f1ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f1be:	6923      	ldr	r3, [r4, #16]
  40f1c0:	b291      	uxth	r1, r2
  40f1c2:	e7bd      	b.n	40f140 <__swbuf_r+0x24>
  40f1c4:	f7fe fd68 	bl	40dc98 <__sinit>
  40f1c8:	e7b0      	b.n	40f12c <__swbuf_r+0x10>
  40f1ca:	bf00      	nop

0040f1cc <_wcrtomb_r>:
  40f1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f1ce:	4606      	mov	r6, r0
  40f1d0:	b085      	sub	sp, #20
  40f1d2:	461f      	mov	r7, r3
  40f1d4:	b189      	cbz	r1, 40f1fa <_wcrtomb_r+0x2e>
  40f1d6:	4c10      	ldr	r4, [pc, #64]	; (40f218 <_wcrtomb_r+0x4c>)
  40f1d8:	4d10      	ldr	r5, [pc, #64]	; (40f21c <_wcrtomb_r+0x50>)
  40f1da:	6824      	ldr	r4, [r4, #0]
  40f1dc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40f1de:	2c00      	cmp	r4, #0
  40f1e0:	bf08      	it	eq
  40f1e2:	462c      	moveq	r4, r5
  40f1e4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40f1e8:	47a0      	blx	r4
  40f1ea:	1c43      	adds	r3, r0, #1
  40f1ec:	d103      	bne.n	40f1f6 <_wcrtomb_r+0x2a>
  40f1ee:	2200      	movs	r2, #0
  40f1f0:	238a      	movs	r3, #138	; 0x8a
  40f1f2:	603a      	str	r2, [r7, #0]
  40f1f4:	6033      	str	r3, [r6, #0]
  40f1f6:	b005      	add	sp, #20
  40f1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f1fa:	460c      	mov	r4, r1
  40f1fc:	4906      	ldr	r1, [pc, #24]	; (40f218 <_wcrtomb_r+0x4c>)
  40f1fe:	4a07      	ldr	r2, [pc, #28]	; (40f21c <_wcrtomb_r+0x50>)
  40f200:	6809      	ldr	r1, [r1, #0]
  40f202:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40f204:	2900      	cmp	r1, #0
  40f206:	bf08      	it	eq
  40f208:	4611      	moveq	r1, r2
  40f20a:	4622      	mov	r2, r4
  40f20c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40f210:	a901      	add	r1, sp, #4
  40f212:	47a0      	blx	r4
  40f214:	e7e9      	b.n	40f1ea <_wcrtomb_r+0x1e>
  40f216:	bf00      	nop
  40f218:	20400184 	.word	0x20400184
  40f21c:	204005b4 	.word	0x204005b4

0040f220 <__ascii_wctomb>:
  40f220:	b121      	cbz	r1, 40f22c <__ascii_wctomb+0xc>
  40f222:	2aff      	cmp	r2, #255	; 0xff
  40f224:	d804      	bhi.n	40f230 <__ascii_wctomb+0x10>
  40f226:	700a      	strb	r2, [r1, #0]
  40f228:	2001      	movs	r0, #1
  40f22a:	4770      	bx	lr
  40f22c:	4608      	mov	r0, r1
  40f22e:	4770      	bx	lr
  40f230:	238a      	movs	r3, #138	; 0x8a
  40f232:	6003      	str	r3, [r0, #0]
  40f234:	f04f 30ff 	mov.w	r0, #4294967295
  40f238:	4770      	bx	lr
  40f23a:	bf00      	nop

0040f23c <_write_r>:
  40f23c:	b570      	push	{r4, r5, r6, lr}
  40f23e:	460d      	mov	r5, r1
  40f240:	4c08      	ldr	r4, [pc, #32]	; (40f264 <_write_r+0x28>)
  40f242:	4611      	mov	r1, r2
  40f244:	4606      	mov	r6, r0
  40f246:	461a      	mov	r2, r3
  40f248:	4628      	mov	r0, r5
  40f24a:	2300      	movs	r3, #0
  40f24c:	6023      	str	r3, [r4, #0]
  40f24e:	f7f2 ff2d 	bl	4020ac <_write>
  40f252:	1c43      	adds	r3, r0, #1
  40f254:	d000      	beq.n	40f258 <_write_r+0x1c>
  40f256:	bd70      	pop	{r4, r5, r6, pc}
  40f258:	6823      	ldr	r3, [r4, #0]
  40f25a:	2b00      	cmp	r3, #0
  40f25c:	d0fb      	beq.n	40f256 <_write_r+0x1a>
  40f25e:	6033      	str	r3, [r6, #0]
  40f260:	bd70      	pop	{r4, r5, r6, pc}
  40f262:	bf00      	nop
  40f264:	20401020 	.word	0x20401020

0040f268 <__register_exitproc>:
  40f268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40f26c:	4d2c      	ldr	r5, [pc, #176]	; (40f320 <__register_exitproc+0xb8>)
  40f26e:	4606      	mov	r6, r0
  40f270:	6828      	ldr	r0, [r5, #0]
  40f272:	4698      	mov	r8, r3
  40f274:	460f      	mov	r7, r1
  40f276:	4691      	mov	r9, r2
  40f278:	f7ff f8ce 	bl	40e418 <__retarget_lock_acquire_recursive>
  40f27c:	4b29      	ldr	r3, [pc, #164]	; (40f324 <__register_exitproc+0xbc>)
  40f27e:	681c      	ldr	r4, [r3, #0]
  40f280:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40f284:	2b00      	cmp	r3, #0
  40f286:	d03e      	beq.n	40f306 <__register_exitproc+0x9e>
  40f288:	685a      	ldr	r2, [r3, #4]
  40f28a:	2a1f      	cmp	r2, #31
  40f28c:	dc1c      	bgt.n	40f2c8 <__register_exitproc+0x60>
  40f28e:	f102 0e01 	add.w	lr, r2, #1
  40f292:	b176      	cbz	r6, 40f2b2 <__register_exitproc+0x4a>
  40f294:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40f298:	2401      	movs	r4, #1
  40f29a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40f29e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40f2a2:	4094      	lsls	r4, r2
  40f2a4:	4320      	orrs	r0, r4
  40f2a6:	2e02      	cmp	r6, #2
  40f2a8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40f2ac:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40f2b0:	d023      	beq.n	40f2fa <__register_exitproc+0x92>
  40f2b2:	3202      	adds	r2, #2
  40f2b4:	f8c3 e004 	str.w	lr, [r3, #4]
  40f2b8:	6828      	ldr	r0, [r5, #0]
  40f2ba:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40f2be:	f7ff f8ad 	bl	40e41c <__retarget_lock_release_recursive>
  40f2c2:	2000      	movs	r0, #0
  40f2c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40f2c8:	4b17      	ldr	r3, [pc, #92]	; (40f328 <__register_exitproc+0xc0>)
  40f2ca:	b30b      	cbz	r3, 40f310 <__register_exitproc+0xa8>
  40f2cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40f2d0:	f7ff f91e 	bl	40e510 <malloc>
  40f2d4:	4603      	mov	r3, r0
  40f2d6:	b1d8      	cbz	r0, 40f310 <__register_exitproc+0xa8>
  40f2d8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40f2dc:	6002      	str	r2, [r0, #0]
  40f2de:	2100      	movs	r1, #0
  40f2e0:	6041      	str	r1, [r0, #4]
  40f2e2:	460a      	mov	r2, r1
  40f2e4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40f2e8:	f04f 0e01 	mov.w	lr, #1
  40f2ec:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40f2f0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40f2f4:	2e00      	cmp	r6, #0
  40f2f6:	d0dc      	beq.n	40f2b2 <__register_exitproc+0x4a>
  40f2f8:	e7cc      	b.n	40f294 <__register_exitproc+0x2c>
  40f2fa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40f2fe:	430c      	orrs	r4, r1
  40f300:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40f304:	e7d5      	b.n	40f2b2 <__register_exitproc+0x4a>
  40f306:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40f30a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40f30e:	e7bb      	b.n	40f288 <__register_exitproc+0x20>
  40f310:	6828      	ldr	r0, [r5, #0]
  40f312:	f7ff f883 	bl	40e41c <__retarget_lock_release_recursive>
  40f316:	f04f 30ff 	mov.w	r0, #4294967295
  40f31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40f31e:	bf00      	nop
  40f320:	204005b0 	.word	0x204005b0
  40f324:	00410910 	.word	0x00410910
  40f328:	0040e511 	.word	0x0040e511

0040f32c <_close_r>:
  40f32c:	b538      	push	{r3, r4, r5, lr}
  40f32e:	4c07      	ldr	r4, [pc, #28]	; (40f34c <_close_r+0x20>)
  40f330:	2300      	movs	r3, #0
  40f332:	4605      	mov	r5, r0
  40f334:	4608      	mov	r0, r1
  40f336:	6023      	str	r3, [r4, #0]
  40f338:	f7f5 ff04 	bl	405144 <_close>
  40f33c:	1c43      	adds	r3, r0, #1
  40f33e:	d000      	beq.n	40f342 <_close_r+0x16>
  40f340:	bd38      	pop	{r3, r4, r5, pc}
  40f342:	6823      	ldr	r3, [r4, #0]
  40f344:	2b00      	cmp	r3, #0
  40f346:	d0fb      	beq.n	40f340 <_close_r+0x14>
  40f348:	602b      	str	r3, [r5, #0]
  40f34a:	bd38      	pop	{r3, r4, r5, pc}
  40f34c:	20401020 	.word	0x20401020

0040f350 <_fclose_r>:
  40f350:	b570      	push	{r4, r5, r6, lr}
  40f352:	b159      	cbz	r1, 40f36c <_fclose_r+0x1c>
  40f354:	4605      	mov	r5, r0
  40f356:	460c      	mov	r4, r1
  40f358:	b110      	cbz	r0, 40f360 <_fclose_r+0x10>
  40f35a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f35c:	2b00      	cmp	r3, #0
  40f35e:	d03c      	beq.n	40f3da <_fclose_r+0x8a>
  40f360:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40f362:	07d8      	lsls	r0, r3, #31
  40f364:	d505      	bpl.n	40f372 <_fclose_r+0x22>
  40f366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f36a:	b92b      	cbnz	r3, 40f378 <_fclose_r+0x28>
  40f36c:	2600      	movs	r6, #0
  40f36e:	4630      	mov	r0, r6
  40f370:	bd70      	pop	{r4, r5, r6, pc}
  40f372:	89a3      	ldrh	r3, [r4, #12]
  40f374:	0599      	lsls	r1, r3, #22
  40f376:	d53c      	bpl.n	40f3f2 <_fclose_r+0xa2>
  40f378:	4621      	mov	r1, r4
  40f37a:	4628      	mov	r0, r5
  40f37c:	f7fe fb94 	bl	40daa8 <__sflush_r>
  40f380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40f382:	4606      	mov	r6, r0
  40f384:	b133      	cbz	r3, 40f394 <_fclose_r+0x44>
  40f386:	69e1      	ldr	r1, [r4, #28]
  40f388:	4628      	mov	r0, r5
  40f38a:	4798      	blx	r3
  40f38c:	2800      	cmp	r0, #0
  40f38e:	bfb8      	it	lt
  40f390:	f04f 36ff 	movlt.w	r6, #4294967295
  40f394:	89a3      	ldrh	r3, [r4, #12]
  40f396:	061a      	lsls	r2, r3, #24
  40f398:	d422      	bmi.n	40f3e0 <_fclose_r+0x90>
  40f39a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40f39c:	b141      	cbz	r1, 40f3b0 <_fclose_r+0x60>
  40f39e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40f3a2:	4299      	cmp	r1, r3
  40f3a4:	d002      	beq.n	40f3ac <_fclose_r+0x5c>
  40f3a6:	4628      	mov	r0, r5
  40f3a8:	f7fe fd9c 	bl	40dee4 <_free_r>
  40f3ac:	2300      	movs	r3, #0
  40f3ae:	6323      	str	r3, [r4, #48]	; 0x30
  40f3b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40f3b2:	b121      	cbz	r1, 40f3be <_fclose_r+0x6e>
  40f3b4:	4628      	mov	r0, r5
  40f3b6:	f7fe fd95 	bl	40dee4 <_free_r>
  40f3ba:	2300      	movs	r3, #0
  40f3bc:	6463      	str	r3, [r4, #68]	; 0x44
  40f3be:	f7fe fc97 	bl	40dcf0 <__sfp_lock_acquire>
  40f3c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40f3c4:	2200      	movs	r2, #0
  40f3c6:	07db      	lsls	r3, r3, #31
  40f3c8:	81a2      	strh	r2, [r4, #12]
  40f3ca:	d50e      	bpl.n	40f3ea <_fclose_r+0x9a>
  40f3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f3ce:	f7ff f821 	bl	40e414 <__retarget_lock_close_recursive>
  40f3d2:	f7fe fc93 	bl	40dcfc <__sfp_lock_release>
  40f3d6:	4630      	mov	r0, r6
  40f3d8:	bd70      	pop	{r4, r5, r6, pc}
  40f3da:	f7fe fc5d 	bl	40dc98 <__sinit>
  40f3de:	e7bf      	b.n	40f360 <_fclose_r+0x10>
  40f3e0:	6921      	ldr	r1, [r4, #16]
  40f3e2:	4628      	mov	r0, r5
  40f3e4:	f7fe fd7e 	bl	40dee4 <_free_r>
  40f3e8:	e7d7      	b.n	40f39a <_fclose_r+0x4a>
  40f3ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f3ec:	f7ff f816 	bl	40e41c <__retarget_lock_release_recursive>
  40f3f0:	e7ec      	b.n	40f3cc <_fclose_r+0x7c>
  40f3f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f3f4:	f7ff f810 	bl	40e418 <__retarget_lock_acquire_recursive>
  40f3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f3fc:	2b00      	cmp	r3, #0
  40f3fe:	d1bb      	bne.n	40f378 <_fclose_r+0x28>
  40f400:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40f402:	f016 0601 	ands.w	r6, r6, #1
  40f406:	d1b1      	bne.n	40f36c <_fclose_r+0x1c>
  40f408:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f40a:	f7ff f807 	bl	40e41c <__retarget_lock_release_recursive>
  40f40e:	4630      	mov	r0, r6
  40f410:	bd70      	pop	{r4, r5, r6, pc}
  40f412:	bf00      	nop

0040f414 <_fstat_r>:
  40f414:	b538      	push	{r3, r4, r5, lr}
  40f416:	460b      	mov	r3, r1
  40f418:	4c07      	ldr	r4, [pc, #28]	; (40f438 <_fstat_r+0x24>)
  40f41a:	4605      	mov	r5, r0
  40f41c:	4611      	mov	r1, r2
  40f41e:	4618      	mov	r0, r3
  40f420:	2300      	movs	r3, #0
  40f422:	6023      	str	r3, [r4, #0]
  40f424:	f7f5 fe91 	bl	40514a <_fstat>
  40f428:	1c43      	adds	r3, r0, #1
  40f42a:	d000      	beq.n	40f42e <_fstat_r+0x1a>
  40f42c:	bd38      	pop	{r3, r4, r5, pc}
  40f42e:	6823      	ldr	r3, [r4, #0]
  40f430:	2b00      	cmp	r3, #0
  40f432:	d0fb      	beq.n	40f42c <_fstat_r+0x18>
  40f434:	602b      	str	r3, [r5, #0]
  40f436:	bd38      	pop	{r3, r4, r5, pc}
  40f438:	20401020 	.word	0x20401020

0040f43c <_isatty_r>:
  40f43c:	b538      	push	{r3, r4, r5, lr}
  40f43e:	4c07      	ldr	r4, [pc, #28]	; (40f45c <_isatty_r+0x20>)
  40f440:	2300      	movs	r3, #0
  40f442:	4605      	mov	r5, r0
  40f444:	4608      	mov	r0, r1
  40f446:	6023      	str	r3, [r4, #0]
  40f448:	f7f5 fe84 	bl	405154 <_isatty>
  40f44c:	1c43      	adds	r3, r0, #1
  40f44e:	d000      	beq.n	40f452 <_isatty_r+0x16>
  40f450:	bd38      	pop	{r3, r4, r5, pc}
  40f452:	6823      	ldr	r3, [r4, #0]
  40f454:	2b00      	cmp	r3, #0
  40f456:	d0fb      	beq.n	40f450 <_isatty_r+0x14>
  40f458:	602b      	str	r3, [r5, #0]
  40f45a:	bd38      	pop	{r3, r4, r5, pc}
  40f45c:	20401020 	.word	0x20401020

0040f460 <_lseek_r>:
  40f460:	b570      	push	{r4, r5, r6, lr}
  40f462:	460d      	mov	r5, r1
  40f464:	4c08      	ldr	r4, [pc, #32]	; (40f488 <_lseek_r+0x28>)
  40f466:	4611      	mov	r1, r2
  40f468:	4606      	mov	r6, r0
  40f46a:	461a      	mov	r2, r3
  40f46c:	4628      	mov	r0, r5
  40f46e:	2300      	movs	r3, #0
  40f470:	6023      	str	r3, [r4, #0]
  40f472:	f7f5 fe71 	bl	405158 <_lseek>
  40f476:	1c43      	adds	r3, r0, #1
  40f478:	d000      	beq.n	40f47c <_lseek_r+0x1c>
  40f47a:	bd70      	pop	{r4, r5, r6, pc}
  40f47c:	6823      	ldr	r3, [r4, #0]
  40f47e:	2b00      	cmp	r3, #0
  40f480:	d0fb      	beq.n	40f47a <_lseek_r+0x1a>
  40f482:	6033      	str	r3, [r6, #0]
  40f484:	bd70      	pop	{r4, r5, r6, pc}
  40f486:	bf00      	nop
  40f488:	20401020 	.word	0x20401020

0040f48c <_read_r>:
  40f48c:	b570      	push	{r4, r5, r6, lr}
  40f48e:	460d      	mov	r5, r1
  40f490:	4c08      	ldr	r4, [pc, #32]	; (40f4b4 <_read_r+0x28>)
  40f492:	4611      	mov	r1, r2
  40f494:	4606      	mov	r6, r0
  40f496:	461a      	mov	r2, r3
  40f498:	4628      	mov	r0, r5
  40f49a:	2300      	movs	r3, #0
  40f49c:	6023      	str	r3, [r4, #0]
  40f49e:	f7f2 fde7 	bl	402070 <_read>
  40f4a2:	1c43      	adds	r3, r0, #1
  40f4a4:	d000      	beq.n	40f4a8 <_read_r+0x1c>
  40f4a6:	bd70      	pop	{r4, r5, r6, pc}
  40f4a8:	6823      	ldr	r3, [r4, #0]
  40f4aa:	2b00      	cmp	r3, #0
  40f4ac:	d0fb      	beq.n	40f4a6 <_read_r+0x1a>
  40f4ae:	6033      	str	r3, [r6, #0]
  40f4b0:	bd70      	pop	{r4, r5, r6, pc}
  40f4b2:	bf00      	nop
  40f4b4:	20401020 	.word	0x20401020

0040f4b8 <__aeabi_uldivmod>:
  40f4b8:	b953      	cbnz	r3, 40f4d0 <__aeabi_uldivmod+0x18>
  40f4ba:	b94a      	cbnz	r2, 40f4d0 <__aeabi_uldivmod+0x18>
  40f4bc:	2900      	cmp	r1, #0
  40f4be:	bf08      	it	eq
  40f4c0:	2800      	cmpeq	r0, #0
  40f4c2:	bf1c      	itt	ne
  40f4c4:	f04f 31ff 	movne.w	r1, #4294967295
  40f4c8:	f04f 30ff 	movne.w	r0, #4294967295
  40f4cc:	f000 b97a 	b.w	40f7c4 <__aeabi_idiv0>
  40f4d0:	f1ad 0c08 	sub.w	ip, sp, #8
  40f4d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40f4d8:	f000 f806 	bl	40f4e8 <__udivmoddi4>
  40f4dc:	f8dd e004 	ldr.w	lr, [sp, #4]
  40f4e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40f4e4:	b004      	add	sp, #16
  40f4e6:	4770      	bx	lr

0040f4e8 <__udivmoddi4>:
  40f4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f4ec:	468c      	mov	ip, r1
  40f4ee:	460d      	mov	r5, r1
  40f4f0:	4604      	mov	r4, r0
  40f4f2:	9e08      	ldr	r6, [sp, #32]
  40f4f4:	2b00      	cmp	r3, #0
  40f4f6:	d151      	bne.n	40f59c <__udivmoddi4+0xb4>
  40f4f8:	428a      	cmp	r2, r1
  40f4fa:	4617      	mov	r7, r2
  40f4fc:	d96d      	bls.n	40f5da <__udivmoddi4+0xf2>
  40f4fe:	fab2 fe82 	clz	lr, r2
  40f502:	f1be 0f00 	cmp.w	lr, #0
  40f506:	d00b      	beq.n	40f520 <__udivmoddi4+0x38>
  40f508:	f1ce 0c20 	rsb	ip, lr, #32
  40f50c:	fa01 f50e 	lsl.w	r5, r1, lr
  40f510:	fa20 fc0c 	lsr.w	ip, r0, ip
  40f514:	fa02 f70e 	lsl.w	r7, r2, lr
  40f518:	ea4c 0c05 	orr.w	ip, ip, r5
  40f51c:	fa00 f40e 	lsl.w	r4, r0, lr
  40f520:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40f524:	0c25      	lsrs	r5, r4, #16
  40f526:	fbbc f8fa 	udiv	r8, ip, sl
  40f52a:	fa1f f987 	uxth.w	r9, r7
  40f52e:	fb0a cc18 	mls	ip, sl, r8, ip
  40f532:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40f536:	fb08 f309 	mul.w	r3, r8, r9
  40f53a:	42ab      	cmp	r3, r5
  40f53c:	d90a      	bls.n	40f554 <__udivmoddi4+0x6c>
  40f53e:	19ed      	adds	r5, r5, r7
  40f540:	f108 32ff 	add.w	r2, r8, #4294967295
  40f544:	f080 8123 	bcs.w	40f78e <__udivmoddi4+0x2a6>
  40f548:	42ab      	cmp	r3, r5
  40f54a:	f240 8120 	bls.w	40f78e <__udivmoddi4+0x2a6>
  40f54e:	f1a8 0802 	sub.w	r8, r8, #2
  40f552:	443d      	add	r5, r7
  40f554:	1aed      	subs	r5, r5, r3
  40f556:	b2a4      	uxth	r4, r4
  40f558:	fbb5 f0fa 	udiv	r0, r5, sl
  40f55c:	fb0a 5510 	mls	r5, sl, r0, r5
  40f560:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40f564:	fb00 f909 	mul.w	r9, r0, r9
  40f568:	45a1      	cmp	r9, r4
  40f56a:	d909      	bls.n	40f580 <__udivmoddi4+0x98>
  40f56c:	19e4      	adds	r4, r4, r7
  40f56e:	f100 33ff 	add.w	r3, r0, #4294967295
  40f572:	f080 810a 	bcs.w	40f78a <__udivmoddi4+0x2a2>
  40f576:	45a1      	cmp	r9, r4
  40f578:	f240 8107 	bls.w	40f78a <__udivmoddi4+0x2a2>
  40f57c:	3802      	subs	r0, #2
  40f57e:	443c      	add	r4, r7
  40f580:	eba4 0409 	sub.w	r4, r4, r9
  40f584:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40f588:	2100      	movs	r1, #0
  40f58a:	2e00      	cmp	r6, #0
  40f58c:	d061      	beq.n	40f652 <__udivmoddi4+0x16a>
  40f58e:	fa24 f40e 	lsr.w	r4, r4, lr
  40f592:	2300      	movs	r3, #0
  40f594:	6034      	str	r4, [r6, #0]
  40f596:	6073      	str	r3, [r6, #4]
  40f598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f59c:	428b      	cmp	r3, r1
  40f59e:	d907      	bls.n	40f5b0 <__udivmoddi4+0xc8>
  40f5a0:	2e00      	cmp	r6, #0
  40f5a2:	d054      	beq.n	40f64e <__udivmoddi4+0x166>
  40f5a4:	2100      	movs	r1, #0
  40f5a6:	e886 0021 	stmia.w	r6, {r0, r5}
  40f5aa:	4608      	mov	r0, r1
  40f5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f5b0:	fab3 f183 	clz	r1, r3
  40f5b4:	2900      	cmp	r1, #0
  40f5b6:	f040 808e 	bne.w	40f6d6 <__udivmoddi4+0x1ee>
  40f5ba:	42ab      	cmp	r3, r5
  40f5bc:	d302      	bcc.n	40f5c4 <__udivmoddi4+0xdc>
  40f5be:	4282      	cmp	r2, r0
  40f5c0:	f200 80fa 	bhi.w	40f7b8 <__udivmoddi4+0x2d0>
  40f5c4:	1a84      	subs	r4, r0, r2
  40f5c6:	eb65 0503 	sbc.w	r5, r5, r3
  40f5ca:	2001      	movs	r0, #1
  40f5cc:	46ac      	mov	ip, r5
  40f5ce:	2e00      	cmp	r6, #0
  40f5d0:	d03f      	beq.n	40f652 <__udivmoddi4+0x16a>
  40f5d2:	e886 1010 	stmia.w	r6, {r4, ip}
  40f5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f5da:	b912      	cbnz	r2, 40f5e2 <__udivmoddi4+0xfa>
  40f5dc:	2701      	movs	r7, #1
  40f5de:	fbb7 f7f2 	udiv	r7, r7, r2
  40f5e2:	fab7 fe87 	clz	lr, r7
  40f5e6:	f1be 0f00 	cmp.w	lr, #0
  40f5ea:	d134      	bne.n	40f656 <__udivmoddi4+0x16e>
  40f5ec:	1beb      	subs	r3, r5, r7
  40f5ee:	0c3a      	lsrs	r2, r7, #16
  40f5f0:	fa1f fc87 	uxth.w	ip, r7
  40f5f4:	2101      	movs	r1, #1
  40f5f6:	fbb3 f8f2 	udiv	r8, r3, r2
  40f5fa:	0c25      	lsrs	r5, r4, #16
  40f5fc:	fb02 3318 	mls	r3, r2, r8, r3
  40f600:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40f604:	fb0c f308 	mul.w	r3, ip, r8
  40f608:	42ab      	cmp	r3, r5
  40f60a:	d907      	bls.n	40f61c <__udivmoddi4+0x134>
  40f60c:	19ed      	adds	r5, r5, r7
  40f60e:	f108 30ff 	add.w	r0, r8, #4294967295
  40f612:	d202      	bcs.n	40f61a <__udivmoddi4+0x132>
  40f614:	42ab      	cmp	r3, r5
  40f616:	f200 80d1 	bhi.w	40f7bc <__udivmoddi4+0x2d4>
  40f61a:	4680      	mov	r8, r0
  40f61c:	1aed      	subs	r5, r5, r3
  40f61e:	b2a3      	uxth	r3, r4
  40f620:	fbb5 f0f2 	udiv	r0, r5, r2
  40f624:	fb02 5510 	mls	r5, r2, r0, r5
  40f628:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40f62c:	fb0c fc00 	mul.w	ip, ip, r0
  40f630:	45a4      	cmp	ip, r4
  40f632:	d907      	bls.n	40f644 <__udivmoddi4+0x15c>
  40f634:	19e4      	adds	r4, r4, r7
  40f636:	f100 33ff 	add.w	r3, r0, #4294967295
  40f63a:	d202      	bcs.n	40f642 <__udivmoddi4+0x15a>
  40f63c:	45a4      	cmp	ip, r4
  40f63e:	f200 80b8 	bhi.w	40f7b2 <__udivmoddi4+0x2ca>
  40f642:	4618      	mov	r0, r3
  40f644:	eba4 040c 	sub.w	r4, r4, ip
  40f648:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40f64c:	e79d      	b.n	40f58a <__udivmoddi4+0xa2>
  40f64e:	4631      	mov	r1, r6
  40f650:	4630      	mov	r0, r6
  40f652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f656:	f1ce 0420 	rsb	r4, lr, #32
  40f65a:	fa05 f30e 	lsl.w	r3, r5, lr
  40f65e:	fa07 f70e 	lsl.w	r7, r7, lr
  40f662:	fa20 f804 	lsr.w	r8, r0, r4
  40f666:	0c3a      	lsrs	r2, r7, #16
  40f668:	fa25 f404 	lsr.w	r4, r5, r4
  40f66c:	ea48 0803 	orr.w	r8, r8, r3
  40f670:	fbb4 f1f2 	udiv	r1, r4, r2
  40f674:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40f678:	fb02 4411 	mls	r4, r2, r1, r4
  40f67c:	fa1f fc87 	uxth.w	ip, r7
  40f680:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40f684:	fb01 f30c 	mul.w	r3, r1, ip
  40f688:	42ab      	cmp	r3, r5
  40f68a:	fa00 f40e 	lsl.w	r4, r0, lr
  40f68e:	d909      	bls.n	40f6a4 <__udivmoddi4+0x1bc>
  40f690:	19ed      	adds	r5, r5, r7
  40f692:	f101 30ff 	add.w	r0, r1, #4294967295
  40f696:	f080 808a 	bcs.w	40f7ae <__udivmoddi4+0x2c6>
  40f69a:	42ab      	cmp	r3, r5
  40f69c:	f240 8087 	bls.w	40f7ae <__udivmoddi4+0x2c6>
  40f6a0:	3902      	subs	r1, #2
  40f6a2:	443d      	add	r5, r7
  40f6a4:	1aeb      	subs	r3, r5, r3
  40f6a6:	fa1f f588 	uxth.w	r5, r8
  40f6aa:	fbb3 f0f2 	udiv	r0, r3, r2
  40f6ae:	fb02 3310 	mls	r3, r2, r0, r3
  40f6b2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40f6b6:	fb00 f30c 	mul.w	r3, r0, ip
  40f6ba:	42ab      	cmp	r3, r5
  40f6bc:	d907      	bls.n	40f6ce <__udivmoddi4+0x1e6>
  40f6be:	19ed      	adds	r5, r5, r7
  40f6c0:	f100 38ff 	add.w	r8, r0, #4294967295
  40f6c4:	d26f      	bcs.n	40f7a6 <__udivmoddi4+0x2be>
  40f6c6:	42ab      	cmp	r3, r5
  40f6c8:	d96d      	bls.n	40f7a6 <__udivmoddi4+0x2be>
  40f6ca:	3802      	subs	r0, #2
  40f6cc:	443d      	add	r5, r7
  40f6ce:	1aeb      	subs	r3, r5, r3
  40f6d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40f6d4:	e78f      	b.n	40f5f6 <__udivmoddi4+0x10e>
  40f6d6:	f1c1 0720 	rsb	r7, r1, #32
  40f6da:	fa22 f807 	lsr.w	r8, r2, r7
  40f6de:	408b      	lsls	r3, r1
  40f6e0:	fa05 f401 	lsl.w	r4, r5, r1
  40f6e4:	ea48 0303 	orr.w	r3, r8, r3
  40f6e8:	fa20 fe07 	lsr.w	lr, r0, r7
  40f6ec:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40f6f0:	40fd      	lsrs	r5, r7
  40f6f2:	ea4e 0e04 	orr.w	lr, lr, r4
  40f6f6:	fbb5 f9fc 	udiv	r9, r5, ip
  40f6fa:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40f6fe:	fb0c 5519 	mls	r5, ip, r9, r5
  40f702:	fa1f f883 	uxth.w	r8, r3
  40f706:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40f70a:	fb09 f408 	mul.w	r4, r9, r8
  40f70e:	42ac      	cmp	r4, r5
  40f710:	fa02 f201 	lsl.w	r2, r2, r1
  40f714:	fa00 fa01 	lsl.w	sl, r0, r1
  40f718:	d908      	bls.n	40f72c <__udivmoddi4+0x244>
  40f71a:	18ed      	adds	r5, r5, r3
  40f71c:	f109 30ff 	add.w	r0, r9, #4294967295
  40f720:	d243      	bcs.n	40f7aa <__udivmoddi4+0x2c2>
  40f722:	42ac      	cmp	r4, r5
  40f724:	d941      	bls.n	40f7aa <__udivmoddi4+0x2c2>
  40f726:	f1a9 0902 	sub.w	r9, r9, #2
  40f72a:	441d      	add	r5, r3
  40f72c:	1b2d      	subs	r5, r5, r4
  40f72e:	fa1f fe8e 	uxth.w	lr, lr
  40f732:	fbb5 f0fc 	udiv	r0, r5, ip
  40f736:	fb0c 5510 	mls	r5, ip, r0, r5
  40f73a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40f73e:	fb00 f808 	mul.w	r8, r0, r8
  40f742:	45a0      	cmp	r8, r4
  40f744:	d907      	bls.n	40f756 <__udivmoddi4+0x26e>
  40f746:	18e4      	adds	r4, r4, r3
  40f748:	f100 35ff 	add.w	r5, r0, #4294967295
  40f74c:	d229      	bcs.n	40f7a2 <__udivmoddi4+0x2ba>
  40f74e:	45a0      	cmp	r8, r4
  40f750:	d927      	bls.n	40f7a2 <__udivmoddi4+0x2ba>
  40f752:	3802      	subs	r0, #2
  40f754:	441c      	add	r4, r3
  40f756:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40f75a:	eba4 0408 	sub.w	r4, r4, r8
  40f75e:	fba0 8902 	umull	r8, r9, r0, r2
  40f762:	454c      	cmp	r4, r9
  40f764:	46c6      	mov	lr, r8
  40f766:	464d      	mov	r5, r9
  40f768:	d315      	bcc.n	40f796 <__udivmoddi4+0x2ae>
  40f76a:	d012      	beq.n	40f792 <__udivmoddi4+0x2aa>
  40f76c:	b156      	cbz	r6, 40f784 <__udivmoddi4+0x29c>
  40f76e:	ebba 030e 	subs.w	r3, sl, lr
  40f772:	eb64 0405 	sbc.w	r4, r4, r5
  40f776:	fa04 f707 	lsl.w	r7, r4, r7
  40f77a:	40cb      	lsrs	r3, r1
  40f77c:	431f      	orrs	r7, r3
  40f77e:	40cc      	lsrs	r4, r1
  40f780:	6037      	str	r7, [r6, #0]
  40f782:	6074      	str	r4, [r6, #4]
  40f784:	2100      	movs	r1, #0
  40f786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f78a:	4618      	mov	r0, r3
  40f78c:	e6f8      	b.n	40f580 <__udivmoddi4+0x98>
  40f78e:	4690      	mov	r8, r2
  40f790:	e6e0      	b.n	40f554 <__udivmoddi4+0x6c>
  40f792:	45c2      	cmp	sl, r8
  40f794:	d2ea      	bcs.n	40f76c <__udivmoddi4+0x284>
  40f796:	ebb8 0e02 	subs.w	lr, r8, r2
  40f79a:	eb69 0503 	sbc.w	r5, r9, r3
  40f79e:	3801      	subs	r0, #1
  40f7a0:	e7e4      	b.n	40f76c <__udivmoddi4+0x284>
  40f7a2:	4628      	mov	r0, r5
  40f7a4:	e7d7      	b.n	40f756 <__udivmoddi4+0x26e>
  40f7a6:	4640      	mov	r0, r8
  40f7a8:	e791      	b.n	40f6ce <__udivmoddi4+0x1e6>
  40f7aa:	4681      	mov	r9, r0
  40f7ac:	e7be      	b.n	40f72c <__udivmoddi4+0x244>
  40f7ae:	4601      	mov	r1, r0
  40f7b0:	e778      	b.n	40f6a4 <__udivmoddi4+0x1bc>
  40f7b2:	3802      	subs	r0, #2
  40f7b4:	443c      	add	r4, r7
  40f7b6:	e745      	b.n	40f644 <__udivmoddi4+0x15c>
  40f7b8:	4608      	mov	r0, r1
  40f7ba:	e708      	b.n	40f5ce <__udivmoddi4+0xe6>
  40f7bc:	f1a8 0802 	sub.w	r8, r8, #2
  40f7c0:	443d      	add	r5, r7
  40f7c2:	e72b      	b.n	40f61c <__udivmoddi4+0x134>

0040f7c4 <__aeabi_idiv0>:
  40f7c4:	4770      	bx	lr
  40f7c6:	bf00      	nop

0040f7c8 <MY_OV2655_BASIC_CONFIG>:
  40f7c8:	308c 0080 308d 0010 360b 0000 30b0 00fc     .0...0...6...0..
  40f7d8:	30b1 002f 30b2 0024 3601 0000 3308 0000     .0/..0$..6...3..
  40f7e8:	3012 0010 3011 0002 3093 0000 3013 00f7     .0...0...0...0..
  40f7f8:	3014 008c 3018 0088 3019 0070 301a 00d4     .0...0...0p..0..
  40f808:	3020 0001 3021 0018 3022 0000 3023 000a      0..!0.."0..#0..
  40f818:	3024 0006 3025 0040 3026 0002 3027 0058     $0..%0@.&0..'0X.
  40f828:	3028 0007 3029 0093 302a 0004 302b 00d4     (0..)0..*0..+0..
  40f838:	3088 0006 3089 0040 308a 0002 308b 0058     .0...0@..0...0X.
  40f848:	3316 0064 3317 0025 3318 0080 3319 0008     .3d..3%..3...3..
  40f858:	331a 0064 331b 004b 331c 0000 331d 0038     .3d..3K..3...38.
  40f868:	3320 00fa 3321 0011 3322 0092 3323 0001      3..!3.."3..#3..
  40f878:	3324 0097 3325 0002 3326 00ff 3327 000c     $3..%3..&3..'3..
  40f888:	3328 0010 3329 0010 332a 0058 332b 0056     (3..)3..*3X.+3V.
  40f898:	332c 00be 332d 00e1 332e 003a 332f 0036     ,3..-3...3:./36.
  40f8a8:	3330 004d 3331 0044 3332 00f8 3333 000a     03M.13D.23..33..
  40f8b8:	3334 00f0 3335 00f0 3336 00f0 3337 0040     43..53..63..73@.
  40f8c8:	3338 0040 3339 0040 333a 0000 333b 0000     83@.93@.:3..;3..
  40f8d8:	3380 0028 3381 0048 3382 0010 3383 0018     .3(..3H..3...3..
  40f8e8:	3384 0028 3385 0040 3386 0040 3387 0034     .3(..3@..3@..34.
  40f8f8:	3388 000c 3389 0098 338a 0001 3340 0004     .3...3...3..@3..
  40f908:	3341 0007 3342 0019 3343 0034 3344 004a     A3..B3..C34.D3J.
  40f918:	3345 005a 3346 006a 3347 0071 3348 007c     E3Z.F3j.G3q.H3|.
  40f928:	3349 008c 334a 009b 334b 00a9 334c 00c0     I3..J3..K3..L3..
  40f938:	334d 00d5 334e 00e8 334f 0020 3090 0041     M3..N3..O3 ..0A.
  40f948:	3300 00b0 3301 00ff 338b 0011 338c 0010     .3...3...3...3..
  40f958:	338d 0040 3370 00ff 3371 0000 3372 0017     .3@.p3..q3..r3..
  40f968:	3373 0020 3374 0000 3375 0010 3376 0010     s3 .t3..u3..v3..
  40f978:	3377 0000 3378 0010 3379 0080 3069 0086     w3..x3..y3..i0..
  40f988:	3087 0002 307c 0010 307a 0000 3100 0002     .0..|0..z0...1..
  40f998:	3400 0040 3601 0000 30f3 0083 304e 0088     .4@..6...0..N0..
  40f9a8:	3015 0002 302d 0000 302e 0000 3306 0000     .0..-0...0...3..
  40f9b8:	363b 0001 363c 00f2 30a1 0041 30a3 0080     ;6..<6...0A..0..
  40f9c8:	30a8 0056 30aa 0072 30af 0010 30b2 002c     .0V..0r..0...0,.
  40f9d8:	30d9 008c 3000 0000 ffff 00ff               .0...0......

0040f9e4 <MY_OV2655_BASIC_FALLBACK>:
  40f9e4:	ffff 00ff                                   ....

0040f9e8 <MY_OV2655_BASIC_RESET>:
  40f9e8:	3012 0080 ffff 00ff                         .0......

0040f9f0 <MY_OV2710_BASIC_CONFIG>:
  40f9f0:	ffff 00ff                                   ....

0040f9f4 <MY_OV2710_BASIC_RESET>:
  40f9f4:	3008 0082 3017 0000 3018 0000 ffff 00ff     .0...0...0......

0040fa04 <OV7740_TEST_PATTERN>:
  40fa04:	000e 0000 00ff 00ff                         ........

0040fa0c <OV7740_VGA_YUV422_20FPS>:
  40fa0c:	00ff 00ff                                   ....

0040fa10 <mmc_trans_multipliers>:
  40fa10:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40fa20:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  40fa30:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  40fa40:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040fa50 <sd_mmc_trans_units>:
  40fa50:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0040fa6c <sd_trans_multipliers>:
  40fa6c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40fa7c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  40fa8c:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  40fa9c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040faac <lun_desc>:
  40faac:	1059 0040 1099 0040 10b9 0040 10d1 0040     Y.@...@...@...@.
  40fabc:	10f1 0040 1135 0040 1199 0040 faec 0040     ..@.5.@...@...@.
  40facc:	1069 0040 10a9 0040 10c5 0040 10e1 0040     i.@...@...@...@.
  40fadc:	10f5 0040 1149 0040 11ad 0040 fb04 0040     ..@.I.@...@...@.
  40faec:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
  40fafc:	2074 2230 0000 0000 5322 2f44 4d4d 2043     t 0"...."SD/MMC 
  40fb0c:	6143 6472 5320 6f6c 2074 2231 0000 0000     Card Slot 1"....

0040fb1c <LfnOfs>:
  40fb1c:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0040fb2c <excvt.5682>:
  40fb2c:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  40fb3c:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  40fb4c:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  40fb5c:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  40fb6c:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  40fb7c:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  40fb8c:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  40fb9c:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
  40fbac:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  40fbbc:	5d5b 0000                                   []..

0040fbc0 <Tbl>:
  40fbc0:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  40fbd0:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  40fbe0:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  40fbf0:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  40fc00:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  40fc10:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  40fc20:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  40fc30:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  40fc40:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  40fc50:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  40fc60:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  40fc70:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  40fc80:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  40fc90:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  40fca0:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  40fcb0:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0040fcc0 <tbl_lower.5432>:
  40fcc0:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  40fcd0:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  40fce0:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  40fcf0:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  40fd00:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  40fd10:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  40fd20:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  40fd30:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  40fd40:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  40fd50:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  40fd60:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  40fd70:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  40fd80:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  40fd90:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  40fda0:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  40fdb0:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  40fdc0:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  40fdd0:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  40fde0:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  40fdf0:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  40fe00:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  40fe10:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  40fe20:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  40fe30:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  40fe40:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  40fe50:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  40fe60:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  40fe70:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  40fe80:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  40fe90:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0040fea0 <tbl_upper.5433>:
  40fea0:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  40feb0:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  40fec0:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  40fed0:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  40fee0:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  40fef0:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  40ff00:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  40ff10:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  40ff20:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  40ff30:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  40ff40:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  40ff50:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  40ff60:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  40ff70:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  40ff80:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  40ff90:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  40ffa0:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  40ffb0:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  40ffc0:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  40ffd0:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  40ffe0:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  40fff0:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  410000:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  410010:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  410020:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  410030:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  410040:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  410050:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  410060:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  410070:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
  410080:	4446 0054 308c 0080 308d 0010 360b 0000     FDT..0...0...6..
  410090:	30b0 00fc 30b1 002f 30b2 0024 3601 0000     .0...0/..0$..6..
  4100a0:	3308 0001 3012 0010 3011 0002 3093 0000     .3...0...0...0..
  4100b0:	3013 00f7 3014 008c 3018 0088 3019 0070     .0...0...0...0p.
  4100c0:	301a 00d4 3020 0001 3021 0018 3022 0000     .0.. 0..!0.."0..
  4100d0:	3023 000a 3024 0006 3025 0040 3026 0002     #0..$0..%0@.&0..
  4100e0:	3027 0058 3028 0007 3029 0093 302a 0004     '0X.(0..)0..*0..
  4100f0:	302b 00d4 3088 0006 3089 0040 308a 0002     +0...0...0@..0..
  410100:	308b 0058 3316 0064 3317 0025 3318 0080     .0X..3d..3%..3..
  410110:	3319 0008 331a 0064 331b 004b 331c 0000     .3...3d..3K..3..
  410120:	331d 0038 3320 00fa 3321 0011 3322 0092     .38. 3..!3.."3..
  410130:	3323 0001 3324 0097 3325 0002 3326 00ff     #3..$3..%3..&3..
  410140:	3327 000c 3328 0010 3329 0010 332a 0058     '3..(3..)3..*3X.
  410150:	332b 0056 332c 00be 332d 00e1 332e 003a     +3V.,3..-3...3:.
  410160:	332f 0036 3330 004d 3331 0044 3332 00f8     /36.03M.13D.23..
  410170:	3333 000a 3334 00f0 3335 00f0 3336 00f0     33..43..53..63..
  410180:	3337 0040 3338 0040 3339 0040 333a 0000     73@.83@.93@.:3..
  410190:	333b 0000 3380 0028 3381 0048 3382 0010     ;3...3(..3H..3..
  4101a0:	3383 0018 3384 0028 3385 0040 3386 0040     .3...3(..3@..3@.
  4101b0:	3387 0034 3388 000c 3389 0098 338a 0001     .34..3...3...3..
  4101c0:	3340 0004 3341 0007 3342 0019 3343 0034     @3..A3..B3..C34.
  4101d0:	3344 004a 3345 005a 3346 006a 3347 0071     D3J.E3Z.F3j.G3q.
  4101e0:	3348 007c 3349 008c 334a 009b 334b 00a9     H3|.I3..J3..K3..
  4101f0:	334c 00c0 334d 00d5 334e 00e8 334f 0020     L3..M3..N3..O3 .
  410200:	3090 0041 3300 00b0 3301 00ff 338b 0011     .0A..3...3...3..
  410210:	338c 0010 338d 0040 3370 00ff 3371 0000     .3...3@.p3..q3..
  410220:	3372 0017 3373 0020 3374 0000 3375 0010     r3..s3 .t3..u3..
  410230:	3376 0010 3377 0000 3378 0010 3379 0080     v3..w3..x3..y3..
  410240:	3069 0086 3087 0002 307c 0010 307a 0000     i0...0..|0..z0..
  410250:	3100 0002 3400 0040 3601 0000 30f3 0083     .1...4@..6...0..
  410260:	304e 0088 3015 0002 302d 0000 302e 0000     N0...0..-0...0..
  410270:	3306 0000 363b 0001 363c 00f2 30a1 0041     .3..;6..<6...0A.
  410280:	30a3 0080 30a8 0056 30aa 0072 30af 0010     .0...0V..0r..0..
  410290:	30b2 002c 30d9 008c 3000 0000 ffff 00ff     .0,..0...0......
  4102a0:	6325 6325 6325 6325 6325 6325 6325 6325     %c%c%c%c%c%c%c%c
  4102b0:	0000 0000                                   ....

004102b4 <SDRAM_INSIGNIS_16M>:
  4102b4:	0016 0000 0030 0000 d5f9 f955 5253 4d41     ....0.....U.SRAM
  4102c4:	0a0d 0000 5253 4d41 4320 4d4f 4c50 5445     ....SRAM COMPLET
  4102d4:	0d45 000a 5825 2520 0d58 000a 5825 2520     E...%X %X...%X %
  4102e4:	2058 5825 2520 2058 5825 2520 2058 5825     X %X %X %X %X %X
  4102f4:	2520 2058 5825 2520 2058 5825 2520 2058      %X %X %X %X %X 
  410304:	5825 2520 2058 5825 2520 2058 5825 2520     %X %X %X %X %X %
  410314:	2058 5825 2520 2058 5825 0a0d 0000 0000     X %X %X %X......
  410324:	0a0d 4146 4c49 4320 4352 5420 204f 4954     ..FAIL CRC TO TI
  410334:	594e 0a0d 0000 0000 0a0d 4f47 444f 4620     NY........GOOD F
  410344:	4f52 204d 4954 594e 203a 6425 252d 2d64     ROM TINY: %d-%d-
  410354:	6425 2520 3a64 6425 0d20 000a 6e55 7169     %d %d:%d ...Uniq
  410364:	6575 4449 6520 7272 726f 0000 0a0d 4f42     ueID error....BO
  410374:	544f 4720 4f4f 2044 0000 0000 2020 5825     OT GOOD ....  %X
  410384:	252d 2d58 5825 2020 5825 253a 3a58 5825     -%X-%X  %X:%X:%X
  410394:	2520 2058 0a0d 0000 0a0d 4554 5453 4720      %X ......TEST G
  4103a4:	4f4f 0d44 000a 0000 0079 0000 5825 2520     OOD.....y...%X %
  4103b4:	2058 5825 2520 2058 5825 2520 2058 5825     X %X %X %X %X %X
  4103c4:	0a0d 0000 5825 2520 2058 5825 2520 2058     ....%X %X %X %X 
  4103d4:	5825 2520 2058 5825 0000 0000 4e49 2054     %X %X %X....INT 
  4103e4:	5246 4d4f 5420 4e49 0d59 000a 0a0d 5452     FROM TINY.....RT
  4103f4:	2043 4e49 4554 5252 5055 0d54 000a 0000     C INTERRUPT.....
  410404:	4554 504d 2520 2058 4142 4f52 204d 5825     TEMP %X BAROM %X
  410414:	4820 4d55 4449 5449 2059 5825 4c20 4749      HUMIDITY %X LIG
  410424:	5448 2520 2058 4f4d 4954 4e4f 2520 0d58     HT %X MOTION %X.
  410434:	000a 0000 4c41 0d4c 000a 0000 414c 4e55     ....ALL.....LAUN
  410444:	4843 5520 4253 5320 4154 4b43 0a0d 0000     CH USB STACK....
  410454:	0078 0000 5542 4b4c 4f20 5455 5220 5643     x...BULK OUT RCV
  410464:	3a44 2520 2078 7825 2520 2078 7825 2520     D: %x %x %x %x %
  410474:	2078 7825 2520 2078 7825 0a0d 0000 0000     x %x %x %x......
  410484:	5542 4b4c 4920 204e 4144 4154 5320 4e45     BULK IN DATA SEN
  410494:	2054 3635 3a35 2520 2078 7825 2520 2078     T 565: %x %x %x 
  4104a4:	7825 2520 2078 7825 2520 2078 7825 0a0d     %x %x %x %x %x..
  4104b4:	0000 0000 5542 4b4c 4920 204e 4144 4154     ....BULK IN DATA
  4104c4:	5320 4e45 2054 3838 3a38 2520 2078 7825      SENT 888: %x %x
  4104d4:	2520 2078 7825 2520 2078 7825 2520 2078      %x %x %x %x %x 
  4104e4:	7825 0a0d 0000 0000 6c42 6e69 656b 0d64     %x......Blinked.
  4104f4:	000a 0000 4e49 203a 6425 2520 2064 6425     ....IN: %d %d %d
  410504:	2520 2064 6425 2520 2064 6425 0a0d 0000      %d %d %d %d....
  410514:	554f 3a54 2520 2064 6425 2520 2064 6425     OUT: %d %d %d %d
  410524:	2520 2064 6425 2520 0d64 000a                %d %d %d...

00410530 <oneDayHeader>:
  410530:	6556 7372 6f69 2c6e 6144 6574 4728 544d     Version,Date(GMT
  410540:	2c29 6954 656d 4728 544d 2c29 6954 656d     ),Time(GMT),Time
  410550:	4c28 636f 2c29 6f4d 6974 6e6f 6550 4d72     (Loc),MotionPerM
  410560:	6e69 7475 2c65 6f4d 6974 6e6f 6553 2c71     inute,MotionSeq,
  410570:	6554 706d 7265 7461 7275 2c65 7548 696d     Temperature,Humi
  410580:	6964 7974 412c 7269 7250 7365 7573 6572     dity,AirPressure
  410590:	4c2c 6769 7468 442c 7275 2c31 7544 3272     ,Light,Dur1,Dur2
  4105a0:	442c 7275 2c33 7544 3472 442c 7275 2c35     ,Dur3,Dur4,Dur5,
  4105b0:	7544 3672 442c 7275 2c37 7544 3872 442c     Dur6,Dur7,Dur8,D
  4105c0:	7275 2c39 7544 3172 2c30 7544 3172 2c31     ur9,Dur10,Dur11,
  4105d0:	7544 3172 2c32 754e 546d 6972 7370 4c2c     Dur12,NumTrips,L
  4105e0:	6e6f 6967 7574 6564 4c2c 7461 7469 6475     ongitude,Latitud
  4105f0:	2c65 614c 7473 5047 6453 7461 2c65 614c     e,LastGPSdate,La
  410600:	7473 5047 7453 6d69 2c65 6142 7474 7265     stGPStime,Batter
  410610:	2c79 5047 4e53 6d75 6153 7374 472c 5350     y,GPSNumSats,GPS
  410620:	5454 4646 4d2c 6761 656e 6f74 656d 6574     TTFF,Magnetomete
  410630:	0d72 000a 0000 0000 4542 4947 204e 4e4f     r.......BEGIN ON
  410640:	2045 4144 2059 5041 4550 444e 5420 204f     E DAY APPEND TO 
  410650:	5343 2056 5825 0d2e 000a 0000 4d4d 2043     CSV %X......MMC 
  410660:	6425 2520 0d64 000a 4d4d 2043 4552 4553     %d %d...MMC RESE
  410670:	2054 6425 2520 0d64 000a 0000 4d4d 2043     T %d %d.....MMC 
  410680:	4e49 5449 2520 0d64 000a 0000 4f4d 4e55     INIT %d.....MOUN
  410690:	2054 4944 4b53 2e2e 0d2e 000a 4f4d 4e55     T DISK......MOUN
  4106a0:	2054 4944 4b53 5220 5345 4c55 2054 6425     T DISK RESULT %d
  4106b0:	0a0d 0000 5254 4959 474e 4620 535f 4154     ....TRYING F_STA
  4106c0:	2854 0d29 000a 0000 5f46 5453 5441 2928     T().....F_STAT()
  4106d0:	5220 5345 3d20 2520 0d64 000a 4f46 4e55      RES = %d...FOUN
  4106e0:	2044 4457 2053 4f46 444c 5245 0a0d 0000     D WDS FOLDER....
  4106f0:	5243 4145 4954 474e 5720 5344 4620 4c4f     CREATING WDS FOL
  410700:	4544 0d52 000a 0000 6f73 656d 6f20 6874     DER.....some oth
  410710:	7265 6420 7269 6365 6f74 7972 6520 7272     er directory err
  410720:	726f 2520 2058 0a0d 0000 0000 5f66 6f6d     or %X ......f_mo
  410730:	6e75 2074 4f47 444f 5720 5344 0a0d 0000     unt GOOD WDS....
  410740:	5343 2056 4552 3a53 2520 2e64 5320 5a49     CSV RES: %d. SIZ
  410750:	3a45 2520 2e64 4420 5441 3a45 2520 2e64     E: %d. DATE: %d.
  410760:	5420 4d49 3a45 2520 2e64 0a0d 0000 0000      TIME: %d.......
  410770:	5f66 706f 6e65 4120 4620 4941 204c 6572     f_open A FAIL re
  410780:	2073 6425 0a0d 0000 5243 4145 4954 474e     s %d....CREATING
  410790:	4f20 2052 504f 4e45 4e49 2047 5343 2056      OR OPENING CSV 
  4107a0:	4946 454c 2e2e 0d2e 000a 0000 7241 6863     FILE........Arch
  4107b0:	7669 2065 7266 6d6f 203a 5825 0a0d 0000     ive from: %X....
  4107c0:	002e 0000 0a0d 614d 6e69 4220 6172 636e     ......Main Branc
  4107d0:	2e68 4720 4f4f 2e44 4620 4c49 2045 4c43     h. GOOD. FILE CL
  4107e0:	534f 4445 0d2e 000a 7825 0000 4154 454b     OSED....%x..TAKE
  4107f0:	4920 414d 4547 202e 6f43 666e 6769 6f53      IMAGE. ConfigSo
  410800:	7275 6563 203a 6425 202e 6d49 6761 5365     urce: %d. ImageS
  410810:	7a69 3a65 2520 2064 0a0d 0000 434d 4b4c     ize: %d ....MCLK
  410820:	4f20 414b 0d59 000a 4143 204d 4e49 5449      OKAY...CAM INIT
  410830:	4f20 414b 0d59 000a 4143 204d 4552 4553      OKAY...CAM RESE
  410840:	2054 4b4f 5941 0a0d 0000 0000 4143 204d     T OKAY......CAM 
  410850:	4f43 464e 4749 4620 4f52 204d 4148 4452     CONFIG FROM HARD
  410860:	4320 444f 2045 4544 4146 4c55 2e54 0a0d      CODE DEFAULT...
  410870:	0000 0000 4143 204d 4f43 464e 4749 4620     ....CAM CONFIG F
  410880:	4f52 204d 4f48 5453 5020 0d43 000a 0000     ROM HOST PC.....
  410890:	4143 204d 4f43 464e 4749 4f20 414b 0d59     CAM CONFIG OKAY.
  4108a0:	000a 0000 5349 2049 4c41 4f4c 4143 4554     ....ISI ALLOCATE
  4108b0:	4320 4d4f 4c50 5445 0d45 000a 5349 2049      COMPLETE...ISI 
  4108c0:	4e45 4241 454c 0d44 000a 0000 5349 2049     ENABLED.....ISI 
  4108d0:	4e49 5449 4420 4e4f 2045 0d41 000a 0000     INIT DONE A.....
  4108e0:	5349 2049 4143 5450 5255 2045 4f44 454e     ISI CAPTURE DONE
  4108f0:	202e 6143 4970 6574 7372 3d20 2520 2064     . CapIters = %d 
  410900:	2020 0000 4143 204d 464f 0d46 000a 0000       ..CAM OFF.....

00410910 <_global_impure_ptr>:
  410910:	0188 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  410920:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  410930:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  410940:	296c 0000                                   l)..

00410944 <blanks.7217>:
  410944:	2020 2020 2020 2020 2020 2020 2020 2020                     

00410954 <zeroes.7218>:
  410954:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  410964:	0043 0000 4f50 4953 0058 0000               C...POSIX...

00410970 <_ctype_>:
  410970:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  410980:	2020 2020 2020 2020 2020 2020 2020 2020                     
  410990:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4109a0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4109b0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4109c0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4109d0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4109e0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4109f0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00410a74 <_init>:
  410a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  410a76:	bf00      	nop
  410a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
  410a7a:	bc08      	pop	{r3}
  410a7c:	469e      	mov	lr, r3
  410a7e:	4770      	bx	lr

00410a80 <__init_array_start>:
  410a80:	0040da89 	.word	0x0040da89

00410a84 <__frame_dummy_init_array_entry>:
  410a84:	0040018d                                ..@.

00410a88 <_fini>:
  410a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  410a8a:	bf00      	nop
  410a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  410a8e:	bc08      	pop	{r3}
  410a90:	469e      	mov	lr, r3
  410a92:	4770      	bx	lr

00410a94 <__fini_array_start>:
  410a94:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20400000:	b430      	push	{r4, r5}
20400002:	b082      	sub	sp, #8
20400004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20400006:	b35b      	cbz	r3, 20400060 <efc_perform_read_sequence+0x60>
20400008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2040000a:	6803      	ldr	r3, [r0, #0]
2040000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20400010:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20400012:	b2c9      	uxtb	r1, r1
20400014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20400018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2040001a:	6883      	ldr	r3, [r0, #8]
2040001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2040001e:	9b01      	ldr	r3, [sp, #4]
20400020:	f013 0f01 	tst.w	r3, #1
20400024:	d1f9      	bne.n	2040001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20400026:	b14d      	cbz	r5, 2040003c <efc_perform_read_sequence+0x3c>
20400028:	4621      	mov	r1, r4
2040002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2040002e:	4c0d      	ldr	r4, [pc, #52]	; (20400064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20400030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20400034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20400038:	4299      	cmp	r1, r3
2040003a:	d1f9      	bne.n	20400030 <efc_perform_read_sequence+0x30>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2040003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2040003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20400042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20400044:	6883      	ldr	r3, [r0, #8]
20400046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20400048:	9b01      	ldr	r3, [sp, #4]
2040004a:	f013 0f01 	tst.w	r3, #1
2040004e:	d0f9      	beq.n	20400044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20400050:	6803      	ldr	r3, [r0, #0]
20400052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20400056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20400058:	2000      	movs	r0, #0
}
2040005a:	b002      	add	sp, #8
2040005c:	bc30      	pop	{r4, r5}
2040005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20400060:	2002      	movs	r0, #2
20400062:	e7fa      	b.n	2040005a <efc_perform_read_sequence+0x5a>
20400064:	003ffffc 	.word	0x003ffffc

20400068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20400068:	6001      	str	r1, [r0, #0]
2040006a:	4770      	bx	lr

2040006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2040006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2040006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20400070:	6883      	ldr	r3, [r0, #8]
20400072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20400074:	9b01      	ldr	r3, [sp, #4]
20400076:	f013 0f01 	tst.w	r3, #1
2040007a:	d0f9      	beq.n	20400070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2040007c:	9b01      	ldr	r3, [sp, #4]
}
2040007e:	4802      	ldr	r0, [pc, #8]	; (20400088 <efc_perform_fcr+0x1c>)
20400080:	4018      	ands	r0, r3
20400082:	b002      	add	sp, #8
20400084:	4770      	bx	lr
20400086:	bf00      	nop
20400088:	000f000e 	.word	0x000f000e

2040008c <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
2040008c:	f3bf 8f5f 	dmb	sy
20400090:	3801      	subs	r0, #1
20400092:	d1fb      	bne.n	2040008c <portable_delay_cycles>
20400094:	4770      	bx	lr
	...

20400098 <udi_api_vendor>:
20400098:	2bf9 0040 2c21 0040 2c3d 0040 2bed 0040     .+@.!,@.=,@..+@.
204000a8:	0000 0000                                   ....

204000ac <udc_config>:
204000ac:	0108 2040 00b8 2040 0000 0000               ..@ ..@ ....

204000b8 <udc_config_lsfs>:
204000b8:	00c0 2040 011c 2040                         ..@ ..@ 

204000c0 <udc_desc_fs>:
204000c0:	0209 0045 0101 c000 0932 0004 0000 ffff     ..E.....2.......
204000d0:	00ff 0409 0100 ff06 ffff 0700 8105 4003     ...............@
204000e0:	0100 0507 0302 0040 0701 8305 4002 0000     ......@......@..
204000f0:	0507 0204 0040 0700 8505 0001 0101 0507     ....@...........
20400100:	0106 0100 0001 0000                         ........

20400108 <udc_device_desc>:
20400108:	0112 0200 0000 4000 03eb 2423 0100 0201     .......@..#$....
20400118:	0100 0000                                   ....

2040011c <udi_apis>:
2040011c:	0098 2040                                   ..@ 

20400120 <udc_string_desc>:
20400120:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20400150 <udc_string_desc_languageid>:
20400150:	0304 0409                                   ....

20400154 <udc_string_manufacturer_name>:
20400154:	6946 6c65 2064 6144 6174 5420 6365 6e68     Field Data Techn
20400164:	6c6f 676f 6569 0073                         ologies.

2040016c <udc_string_product_name>:
2040016c:	4446 2054 6544 6976 6563 0100                    FDT Device.

20400177 <g_interrupt_enabled>:
20400177:	0001                                             .

20400178 <SystemCoreClock>:
20400178:	0900 003d                                   ..=.

2040017c <picBuff>:
2040017c:	0000 7000                                   ...p

20400180 <picBuff_2>:
20400180:	9800 703a                                   ..:p

20400184 <_impure_ptr>:
20400184:	0188 2040                                   ..@ 

20400188 <impure_data>:
20400188:	0000 0000 0474 2040 04dc 2040 0544 2040     ....t.@ ..@ D.@ 
	...
20400230:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400240:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204005b0 <__atexit_recursive_mutex>:
204005b0:	0ffc 2040                                   ..@ 

204005b4 <__global_locale>:
204005b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400614:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400634:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400654:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400674:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400694:	f221 0040 ea81 0040 0000 0000 0970 0041     !.@...@.....p.A.
204006a4:	07c0 0041 0728 0041 0728 0041 0728 0041     ..A.(.A.(.A.(.A.
204006b4:	0728 0041 0728 0041 0728 0041 0728 0041     (.A.(.A.(.A.(.A.
204006c4:	0728 0041 0728 0041 ffff ffff ffff ffff     (.A.(.A.........
204006d4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204006fc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20400720 <__malloc_av_>:
	...
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 
204009c8:	09c0 2040 09c0 2040 09c8 2040 09c8 2040     ..@ ..@ ..@ ..@ 
204009d8:	09d0 2040 09d0 2040 09d8 2040 09d8 2040     ..@ ..@ ..@ ..@ 
204009e8:	09e0 2040 09e0 2040 09e8 2040 09e8 2040     ..@ ..@ ..@ ..@ 
204009f8:	09f0 2040 09f0 2040 09f8 2040 09f8 2040     ..@ ..@ ..@ ..@ 
20400a08:	0a00 2040 0a00 2040 0a08 2040 0a08 2040     ..@ ..@ ..@ ..@ 
20400a18:	0a10 2040 0a10 2040 0a18 2040 0a18 2040     ..@ ..@ ..@ ..@ 
20400a28:	0a20 2040 0a20 2040 0a28 2040 0a28 2040      .@  .@ (.@ (.@ 
20400a38:	0a30 2040 0a30 2040 0a38 2040 0a38 2040     0.@ 0.@ 8.@ 8.@ 
20400a48:	0a40 2040 0a40 2040 0a48 2040 0a48 2040     @.@ @.@ H.@ H.@ 
20400a58:	0a50 2040 0a50 2040 0a58 2040 0a58 2040     P.@ P.@ X.@ X.@ 
20400a68:	0a60 2040 0a60 2040 0a68 2040 0a68 2040     `.@ `.@ h.@ h.@ 
20400a78:	0a70 2040 0a70 2040 0a78 2040 0a78 2040     p.@ p.@ x.@ x.@ 
20400a88:	0a80 2040 0a80 2040 0a88 2040 0a88 2040     ..@ ..@ ..@ ..@ 
20400a98:	0a90 2040 0a90 2040 0a98 2040 0a98 2040     ..@ ..@ ..@ ..@ 
20400aa8:	0aa0 2040 0aa0 2040 0aa8 2040 0aa8 2040     ..@ ..@ ..@ ..@ 
20400ab8:	0ab0 2040 0ab0 2040 0ab8 2040 0ab8 2040     ..@ ..@ ..@ ..@ 
20400ac8:	0ac0 2040 0ac0 2040 0ac8 2040 0ac8 2040     ..@ ..@ ..@ ..@ 
20400ad8:	0ad0 2040 0ad0 2040 0ad8 2040 0ad8 2040     ..@ ..@ ..@ ..@ 
20400ae8:	0ae0 2040 0ae0 2040 0ae8 2040 0ae8 2040     ..@ ..@ ..@ ..@ 
20400af8:	0af0 2040 0af0 2040 0af8 2040 0af8 2040     ..@ ..@ ..@ ..@ 
20400b08:	0b00 2040 0b00 2040 0b08 2040 0b08 2040     ..@ ..@ ..@ ..@ 
20400b18:	0b10 2040 0b10 2040 0b18 2040 0b18 2040     ..@ ..@ ..@ ..@ 

20400b28 <__malloc_sbrk_base>:
20400b28:	ffff ffff                                   ....

20400b2c <__malloc_trim_threshold>:
20400b2c:	0000 0002                                   ....
