
WDS_USB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b100  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b100  0040b100  0001b100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000aa0  20400000  0040b108  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000016a8  20400aa0  0040bbc0  00020aa0  2**5
                  ALLOC
  4 .stack        00002000  20402148  0040d268  00020aa0  2**0
                  ALLOC
  5 .heap         00000200  20404148  0040f268  00020aa0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020aa0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020ace  2**0
                  CONTENTS, READONLY
  8 .debug_info   0004098c  00000000  00000000  00020b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005bd6  00000000  00000000  000614b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000139b8  00000000  00000000  00067089  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000011b0  00000000  00000000  0007aa41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001338  00000000  00000000  0007bbf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027a53  00000000  00000000  0007cf29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001a3df  00000000  00000000  000a497c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a6038  00000000  00000000  000bed5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003894  00000000  00000000  00164d94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 41 40 20 b1 37 40 00 ad 37 40 00 ad 37 40 00     HA@ .7@..7@..7@.
  400010:	ad 37 40 00 ad 37 40 00 ad 37 40 00 00 00 00 00     .7@..7@..7@.....
	...
  40002c:	ad 37 40 00 ad 37 40 00 00 00 00 00 ad 37 40 00     .7@..7@......7@.
  40003c:	ad 37 40 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .7@..7@..7@..7@.
  40004c:	ad 37 40 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .7@..7@..7@..7@.
  40005c:	ad 37 40 00 ad 37 40 00 00 00 00 00 0d 20 40 00     .7@..7@...... @.
  40006c:	21 20 40 00 35 20 40 00 ad 37 40 00 ad 37 40 00     ! @.5 @..7@..7@.
  40007c:	ad 37 40 00 49 20 40 00 5d 20 40 00 ad 37 40 00     .7@.I @.] @..7@.
  40008c:	ad 37 40 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .7@..7@..7@..7@.
  40009c:	ad 37 40 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .7@..7@..7@..7@.
  4000ac:	ad 37 40 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .7@..7@..7@..7@.
  4000bc:	ad 37 40 00 ad 37 40 00 ad 37 40 00 b5 29 40 00     .7@..7@..7@..)@.
  4000cc:	ad 37 40 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .7@..7@..7@..7@.
  4000dc:	ad 37 40 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .7@..7@..7@..7@.
  4000ec:	ad 37 40 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .7@..7@..7@..7@.
  4000fc:	ad 37 40 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .7@..7@..7@..7@.
  40010c:	ad 37 40 00 ad 37 40 00 ad 37 40 00 00 00 00 00     .7@..7@..7@.....
  40011c:	00 00 00 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .....7@..7@..7@.
  40012c:	d5 41 40 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .A@..7@..7@..7@.
  40013c:	ad 37 40 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .7@..7@..7@..7@.
  40014c:	ad 37 40 00 ad 37 40 00 ad 37 40 00 ad 37 40 00     .7@..7@..7@..7@.
  40015c:	ad 37 40 00 ad 37 40 00 ad 37 40 00                 .7@..7@..7@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400aa0 	.word	0x20400aa0
  400184:	00000000 	.word	0x00000000
  400188:	0040b108 	.word	0x0040b108

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040b108 	.word	0x0040b108
  4001c8:	20400aa4 	.word	0x20400aa4
  4001cc:	0040b108 	.word	0x0040b108
  4001d0:	00000000 	.word	0x00000000

004001d4 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twihs* const p_twi, twihs_packet_t* const p_packet)
{
  4001d4:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twihs_master_read(p_twi, p_packet);
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <ov_read_reg+0x8>)
  4001d8:	4798      	blx	r3

	return ul_status;
}
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	00400759 	.word	0x00400759

004001e0 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twihs* const p_twi, twihs_packet_t* const p_packet)
{
  4001e0:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twihs_master_write(p_twi, p_packet);
  4001e2:	4b01      	ldr	r3, [pc, #4]	; (4001e8 <ov_write_reg+0x8>)
  4001e4:	4798      	blx	r3

	return ul_status;
}
  4001e6:	bd08      	pop	{r3, pc}
  4001e8:	00400805 	.word	0x00400805

004001ec <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twihs* const p_twi, const ov_reg *p_reg_list)
{
  4001ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001f0:	b086      	sub	sp, #24
  4001f2:	4606      	mov	r6, r0
  4001f4:	1c8c      	adds	r4, r1, #2
			twi_packet_regs.addr_length = 2;
			twi_packet_regs.chip = OV_I2C_2655_ADDRESS;
			twi_packet_regs.length = 1;
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  4001f6:	4d15      	ldr	r5, [pc, #84]	; (40024c <ov_write_regs+0x60>)
			delay_ms(5);
  4001f8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400254 <ov_write_regs+0x68>
  4001fc:	4f14      	ldr	r7, [pc, #80]	; (400250 <ov_write_regs+0x64>)
	while (!((p_next->reg == OV_REG_TERM) &&
  4001fe:	e015      	b.n	40022c <ov_write_regs+0x40>
  400200:	7822      	ldrb	r2, [r4, #0]
  400202:	2aff      	cmp	r2, #255	; 0xff
  400204:	d01e      	beq.n	400244 <ov_write_regs+0x58>
			twi_packet_regs.addr[0] = (p_next->reg)>>8;
  400206:	0a1a      	lsrs	r2, r3, #8
  400208:	f88d 2004 	strb.w	r2, [sp, #4]
			twi_packet_regs.addr[1] = (p_next->reg)&0x00FF;
  40020c:	f88d 3005 	strb.w	r3, [sp, #5]
			twi_packet_regs.addr_length = 2;
  400210:	2302      	movs	r3, #2
  400212:	9302      	str	r3, [sp, #8]
			twi_packet_regs.chip = OV_I2C_2655_ADDRESS;
  400214:	2330      	movs	r3, #48	; 0x30
  400216:	f88d 3014 	strb.w	r3, [sp, #20]
			twi_packet_regs.length = 1;
  40021a:	2301      	movs	r3, #1
  40021c:	9304      	str	r3, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  40021e:	9103      	str	r1, [sp, #12]
			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400220:	a901      	add	r1, sp, #4
  400222:	4630      	mov	r0, r6
  400224:	47a8      	blx	r5
			ul_size++;

			if (ul_err == TWIHS_BUSY) {
  400226:	2808      	cmp	r0, #8
  400228:	d00d      	beq.n	400246 <ov_write_regs+0x5a>
  40022a:	3404      	adds	r4, #4
  40022c:	4621      	mov	r1, r4
	while (!((p_next->reg == OV_REG_TERM) &&
  40022e:	f834 3c02 	ldrh.w	r3, [r4, #-2]
  400232:	f64f 72ff 	movw	r2, #65535	; 0xffff
  400236:	4293      	cmp	r3, r2
  400238:	d0e2      	beq.n	400200 <ov_write_regs+0x14>
		if (p_next->reg == 0xFE) {
  40023a:	2bfe      	cmp	r3, #254	; 0xfe
  40023c:	d1e3      	bne.n	400206 <ov_write_regs+0x1a>
			delay_ms(5);
  40023e:	4640      	mov	r0, r8
  400240:	47b8      	blx	r7
  400242:	e7f2      	b.n	40022a <ov_write_regs+0x3e>
			}
		}

		p_next++;
	}
	return 0;
  400244:	2000      	movs	r0, #0
			ov_read_reg(p_twi, &twi_packet_regs);
			printf("%c%c%c%c%c%c%c%c",0xFE,0x46,0xFE,0x48,0xFE,0x4C,0xFE,0x51);//clear display, cursor home
			delay_ms(10);
			printf("%x:%x ",twi_packet_regs.addr[0],ul_value);
			delay_ms(2000);*/
}
  400246:	b006      	add	sp, #24
  400248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40024c:	004001e1 	.word	0x004001e1
  400250:	20400001 	.word	0x20400001
  400254:	0003dbc2 	.word	0x0003dbc2

00400258 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twihs* const p_twi)
{
  400258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40025c:	b08c      	sub	sp, #48	; 0x30
  40025e:	4680      	mov	r8, r0
	uint32_t ul_id = 0;
  400260:	2300      	movs	r3, #0
  400262:	9300      	str	r3, [sp, #0]
	uint32_t ul_ver = 0;
  400264:	9301      	str	r3, [sp, #4]
	packet_pid.chip = OV_I2C_2655_ADDRESS;  //BC WORKS!! (0x78>>1) OV7692was 0x78 for CamCube.  0x60 for OV2655
  400266:	2430      	movs	r4, #48	; 0x30
  400268:	f88d 4018 	strb.w	r4, [sp, #24]
	packet_pid.addr[0] = 0x30;
  40026c:	f88d 4008 	strb.w	r4, [sp, #8]
	packet_pid.addr[1] = OV2655_PIDH;
  400270:	230a      	movs	r3, #10
  400272:	f88d 3009 	strb.w	r3, [sp, #9]
	packet_pid.addr_length = 2;
  400276:	2702      	movs	r7, #2
  400278:	9703      	str	r7, [sp, #12]
	packet_pid.buffer = &ul_id;
  40027a:	f8cd d010 	str.w	sp, [sp, #16]
	packet_pid.length = 1;
  40027e:	2601      	movs	r6, #1
  400280:	9605      	str	r6, [sp, #20]
	ov_read_reg(p_twi, &packet_pid);
  400282:	a902      	add	r1, sp, #8
  400284:	4d29      	ldr	r5, [pc, #164]	; (40032c <ov_init+0xd4>)
  400286:	47a8      	blx	r5
	packet_ver.chip = OV_I2C_2655_ADDRESS;//was 0x78 for CamCube.  0x60 for OV2655
  400288:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	packet_ver.addr[0] = 0x30;
  40028c:	f88d 401c 	strb.w	r4, [sp, #28]
	packet_ver.addr[1] = OV2655_PIDL;
  400290:	230b      	movs	r3, #11
  400292:	f88d 301d 	strb.w	r3, [sp, #29]
	packet_ver.addr_length = 2;
  400296:	9708      	str	r7, [sp, #32]
	packet_ver.buffer = &ul_ver;
  400298:	ab01      	add	r3, sp, #4
  40029a:	9309      	str	r3, [sp, #36]	; 0x24
	packet_ver.length = 1;
  40029c:	960a      	str	r6, [sp, #40]	; 0x28
	ov_read_reg(p_twi, &packet_ver);
  40029e:	a907      	add	r1, sp, #28
  4002a0:	4640      	mov	r0, r8
  4002a2:	47a8      	blx	r5
	return ((uint32_t)(ul_id << 8) | ul_ver);
  4002a4:	9b01      	ldr	r3, [sp, #4]
  4002a6:	9a00      	ldr	r2, [sp, #0]
  4002a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	uint32_t ul_id = 0;

	ul_id = ov_id(p_twi);

//	if (((ul_id >> 8) & 0xff)  == OV2710_PIDH_DEFAULT) {
	if (((ul_id >> 8) & 0xff)  == OV2655_PIDH_DEFAULT) {
  4002ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4002b0:	2b26      	cmp	r3, #38	; 0x26
  4002b2:	d003      	beq.n	4002bc <ov_init+0x64>
				return 0;
			}
//		}
	}

	return 1;
  4002b4:	2001      	movs	r0, #1
}
  4002b6:	b00c      	add	sp, #48	; 0x30
  4002b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t ul_value = 0;
  4002bc:	2300      	movs	r3, #0
  4002be:	9300      	str	r3, [sp, #0]
	uint32_t ul_oldvalue = 0;
  4002c0:	9301      	str	r3, [sp, #4]
	uint32_t ul_entervalue = 0;
  4002c2:	9302      	str	r3, [sp, #8]
	twi_packet.addr[0] = 0x30;
  4002c4:	f88d 401c 	strb.w	r4, [sp, #28]
	twi_packet.addr[1] = 0x04;
  4002c8:	2204      	movs	r2, #4
  4002ca:	f88d 201d 	strb.w	r2, [sp, #29]
	twi_packet.addr_length = 2;
  4002ce:	9708      	str	r7, [sp, #32]
	twi_packet.chip = OV_I2C_2655_ADDRESS;
  4002d0:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	twi_packet.length = 1;
  4002d4:	960a      	str	r6, [sp, #40]	; 0x28
	twi_packet.buffer = &ul_oldvalue;
  4002d6:	ab01      	add	r3, sp, #4
  4002d8:	9309      	str	r3, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4002da:	a907      	add	r1, sp, #28
  4002dc:	4640      	mov	r0, r8
  4002de:	47a8      	blx	r5
	ul_entervalue = 0x11;
  4002e0:	ab0c      	add	r3, sp, #48	; 0x30
  4002e2:	2211      	movs	r2, #17
  4002e4:	f843 2d28 	str.w	r2, [r3, #-40]!
	twi_packet.buffer = &ul_entervalue;
  4002e8:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  4002ea:	a907      	add	r1, sp, #28
  4002ec:	4640      	mov	r0, r8
  4002ee:	4b10      	ldr	r3, [pc, #64]	; (400330 <ov_init+0xd8>)
  4002f0:	4798      	blx	r3
	twi_packet.buffer = &ul_value;
  4002f2:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4002f6:	a907      	add	r1, sp, #28
  4002f8:	4640      	mov	r0, r8
  4002fa:	47a8      	blx	r5
	if (ul_value != ul_entervalue) {
  4002fc:	9b02      	ldr	r3, [sp, #8]
  4002fe:	9a00      	ldr	r2, [sp, #0]
  400300:	429a      	cmp	r2, r3
  400302:	d001      	beq.n	400308 <ov_init+0xb0>
		return 1;
  400304:	2001      	movs	r0, #1
  400306:	e7d6      	b.n	4002b6 <ov_init+0x5e>
	twi_packet.buffer = &ul_oldvalue;
  400308:	ab01      	add	r3, sp, #4
  40030a:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  40030c:	a907      	add	r1, sp, #28
  40030e:	4640      	mov	r0, r8
  400310:	4b07      	ldr	r3, [pc, #28]	; (400330 <ov_init+0xd8>)
  400312:	4798      	blx	r3
	twi_packet.buffer = &ul_value;
  400314:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400318:	a907      	add	r1, sp, #28
  40031a:	4640      	mov	r0, r8
  40031c:	47a8      	blx	r5
	if (ul_value != ul_oldvalue) {
  40031e:	9b01      	ldr	r3, [sp, #4]
  400320:	9800      	ldr	r0, [sp, #0]
  400322:	1ac0      	subs	r0, r0, r3
  400324:	bf18      	it	ne
  400326:	2001      	movne	r0, #1
  400328:	e7c5      	b.n	4002b6 <ov_init+0x5e>
  40032a:	bf00      	nop
  40032c:	004001d5 	.word	0x004001d5
  400330:	004001e1 	.word	0x004001e1

00400334 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twihs* const p_twi, const e_ov7740_format format)
{
  400334:	b508      	push	{r3, lr}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
  400336:	2908      	cmp	r1, #8
  400338:	d814      	bhi.n	400364 <ov_configure+0x30>
  40033a:	e8df f001 	tbb	[pc, r1]
  40033e:	0515      	.short	0x0515
  400340:	0b090717 	.word	0x0b090717
  400344:	0f0d      	.short	0x0f0d
  400346:	11          	.byte	0x11
  400347:	00          	.byte	0x00
	case MY_OV2710_RESET:
		p_regs_conf = MY_OV2710_BASIC_RESET;
		break;

	case MY_OV2710_CONFIG:
		p_regs_conf = MY_OV2710_BASIC_CONFIG;
  400348:	490b      	ldr	r1, [pc, #44]	; (400378 <ov_configure+0x44>)
  40034a:	e010      	b.n	40036e <ov_configure+0x3a>
	case MY_OV2655_CONFIG:
		p_regs_conf = MY_OV2655_BASIC_CONFIG;
		break;

	case MY_OV2655_FALLBACK:
		p_regs_conf = MY_OV2655_BASIC_FALLBACK;
  40034c:	490b      	ldr	r1, [pc, #44]	; (40037c <ov_configure+0x48>)
		break;
  40034e:	e00e      	b.n	40036e <ov_configure+0x3a>

	case MY_OV2655_RESET:
		p_regs_conf = MY_OV2655_BASIC_RESET;
  400350:	490b      	ldr	r1, [pc, #44]	; (400380 <ov_configure+0x4c>)
		break;
  400352:	e00c      	b.n	40036e <ov_configure+0x3a>

	case MY_OV2655_TESTPATTERN33:
		p_regs_conf = MY_OV2655_BASIC_TESTPATTERN33;
  400354:	490b      	ldr	r1, [pc, #44]	; (400384 <ov_configure+0x50>)
		break;
  400356:	e00a      	b.n	40036e <ov_configure+0x3a>

	case MY_OV2655_36:
		p_regs_conf = MY_OV2655_BASIC_FALLBACK;
  400358:	4908      	ldr	r1, [pc, #32]	; (40037c <ov_configure+0x48>)
		break;
  40035a:	e008      	b.n	40036e <ov_configure+0x3a>

	case TEST_PATTERN:
		p_regs_conf = OV7740_TEST_PATTERN;
  40035c:	490a      	ldr	r1, [pc, #40]	; (400388 <ov_configure+0x54>)
		break;
  40035e:	e006      	b.n	40036e <ov_configure+0x3a>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV7740_VGA_YUV422_20FPS;
  400360:	490a      	ldr	r1, [pc, #40]	; (40038c <ov_configure+0x58>)
		break;
  400362:	e004      	b.n	40036e <ov_configure+0x3a>
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf);
		return 0;
	}

	return 1;
  400364:	2001      	movs	r0, #1
  400366:	bd08      	pop	{r3, pc}
		p_regs_conf = MY_OV2710_BASIC_RESET;
  400368:	4909      	ldr	r1, [pc, #36]	; (400390 <ov_configure+0x5c>)
  40036a:	e000      	b.n	40036e <ov_configure+0x3a>
		p_regs_conf = MY_OV2655_BASIC_CONFIG;
  40036c:	4909      	ldr	r1, [pc, #36]	; (400394 <ov_configure+0x60>)
		ov_write_regs( p_twi, p_regs_conf);
  40036e:	4b0a      	ldr	r3, [pc, #40]	; (400398 <ov_configure+0x64>)
  400370:	4798      	blx	r3
		return 0;
  400372:	2000      	movs	r0, #0
}
  400374:	bd08      	pop	{r3, pc}
  400376:	bf00      	nop
  400378:	0040ab38 	.word	0x0040ab38
  40037c:	0040ab24 	.word	0x0040ab24
  400380:	0040ab28 	.word	0x0040ab28
  400384:	0040ab30 	.word	0x0040ab30
  400388:	0040ab4c 	.word	0x0040ab4c
  40038c:	0040ab54 	.word	0x0040ab54
  400390:	0040ab3c 	.word	0x0040ab3c
  400394:	0040a908 	.word	0x0040a908
  400398:	004001ed 	.word	0x004001ed

0040039c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  40039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4003a0:	4baa      	ldr	r3, [pc, #680]	; (40064c <board_init+0x2b0>)
  4003a2:	4aab      	ldr	r2, [pc, #684]	; (400650 <board_init+0x2b4>)
  4003a4:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4003a6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  4003aa:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4003ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4003b0:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4003b4:	4ba7      	ldr	r3, [pc, #668]	; (400654 <board_init+0x2b8>)
  4003b6:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4003ba:	f022 0201 	bic.w	r2, r2, #1
  4003be:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4003c2:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4003c6:	f022 0201 	bic.w	r2, r2, #1
  4003ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4003ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4003d2:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4003d6:	200a      	movs	r0, #10
  4003d8:	f8df 8294 	ldr.w	r8, [pc, #660]	; 400670 <board_init+0x2d4>
  4003dc:	47c0      	blx	r8
  4003de:	200b      	movs	r0, #11
  4003e0:	47c0      	blx	r8
  4003e2:	200c      	movs	r0, #12
  4003e4:	47c0      	blx	r8
  4003e6:	2010      	movs	r0, #16
  4003e8:	47c0      	blx	r8
  4003ea:	2011      	movs	r0, #17
  4003ec:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003ee:	4b9a      	ldr	r3, [pc, #616]	; (400658 <board_init+0x2bc>)
  4003f0:	f04f 0e01 	mov.w	lr, #1
  4003f4:	f8c3 e010 	str.w	lr, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003f8:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003fc:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400400:	4c96      	ldr	r4, [pc, #600]	; (40065c <board_init+0x2c0>)
  400402:	2204      	movs	r2, #4
  400404:	6162      	str	r2, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400406:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  40040a:	6662      	str	r2, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40040c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400410:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400412:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400414:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400418:	6f21      	ldr	r1, [r4, #112]	; 0x70
  40041a:	f021 0104 	bic.w	r1, r1, #4
  40041e:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400420:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400422:	f021 0104 	bic.w	r1, r1, #4
  400426:	6761      	str	r1, [r4, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400428:	498d      	ldr	r1, [pc, #564]	; (400660 <board_init+0x2c4>)
  40042a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40042e:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400430:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400434:	6308      	str	r0, [r1, #48]	; 0x30
#define UART3_TXD_GPIO   PIO_PD30_IDX
   
#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
//	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400436:	4f8b      	ldr	r7, [pc, #556]	; (400664 <board_init+0x2c8>)
  400438:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
  40043c:	f041 0110 	orr.w	r1, r1, #16
  400440:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
		base->PIO_PUDR = mask;
  400444:	2108      	movs	r1, #8
  400446:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400448:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40044c:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40044e:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400450:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400454:	6f20      	ldr	r0, [r4, #112]	; 0x70
  400456:	f020 0008 	bic.w	r0, r0, #8
  40045a:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40045c:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40045e:	f020 0008 	bic.w	r0, r0, #8
  400462:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400464:	6061      	str	r1, [r4, #4]
		base->PIO_PUDR = mask;
  400466:	2510      	movs	r5, #16
  400468:	6625      	str	r5, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40046a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40046e:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400470:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400472:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400476:	6f20      	ldr	r0, [r4, #112]	; 0x70
  400478:	f020 0010 	bic.w	r0, r0, #16
  40047c:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40047e:	6f60      	ldr	r0, [r4, #116]	; 0x74
  400480:	f020 0010 	bic.w	r0, r0, #16
  400484:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400486:	6065      	str	r5, [r4, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400488:	2680      	movs	r6, #128	; 0x80
  40048a:	611e      	str	r6, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40048c:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400490:	631e      	str	r6, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400492:	f44f 7080 	mov.w	r0, #256	; 0x100
  400496:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400498:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40049c:	6360      	str	r0, [r4, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40049e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  4004a2:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004a4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4004a8:	6360      	str	r0, [r4, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4004ae:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004b0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004b4:	6320      	str	r0, [r4, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4004b6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  4004ba:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004bc:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4004c0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  4004c4:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004c6:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004ca:	4867      	ldr	r0, [pc, #412]	; (400668 <board_init+0x2cc>)
  4004cc:	6102      	str	r2, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004ce:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004d2:	6302      	str	r2, [r0, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004d4:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004d6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004da:	6319      	str	r1, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004dc:	f8c0 e010 	str.w	lr, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004e0:	f8c0 e0a0 	str.w	lr, [r0, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004e4:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
	ioport_set_pin_level(BigTiny_CLK, HIGH);
	/* DAT to Tiny.*/
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(BigTiny_DAT, HIGH);
	/* WU Tiny to Big. */
	pmc_enable_periph_clk(ID_PIOA);
  4004e8:	200a      	movs	r0, #10
  4004ea:	47c0      	blx	r8
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4004ec:	2302      	movs	r3, #2
  4004ee:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004f0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4004f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4004f8:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004fa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4004fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  400502:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400504:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	ioport_set_pin_dir(USB_ID_PIN, IOPORT_DIR_INPUT);
# endif
#endif

#ifdef CONF_BOARD_SDRAMC
	pio_configure_pin(SDRAM_A0_PIO, SDRAM_A_FLAGS);	//V71 A2
  400508:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40050c:	2054      	movs	r0, #84	; 0x54
  40050e:	4c57      	ldr	r4, [pc, #348]	; (40066c <board_init+0x2d0>)
  400510:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A1_PIO, SDRAM_A_FLAGS);	//V71 A3
  400512:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400516:	2055      	movs	r0, #85	; 0x55
  400518:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);	//V71 A4
  40051a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40051e:	2056      	movs	r0, #86	; 0x56
  400520:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  //V71 A5
  400522:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400526:	2057      	movs	r0, #87	; 0x57
  400528:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  //V71 A6
  40052a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40052e:	2058      	movs	r0, #88	; 0x58
  400530:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  //V71 A7
  400532:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400536:	2059      	movs	r0, #89	; 0x59
  400538:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  //V71 A8
  40053a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40053e:	205a      	movs	r0, #90	; 0x5a
  400540:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  //V71 A9
  400542:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400546:	205b      	movs	r0, #91	; 0x5b
  400548:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);	 //V71 A10
  40054a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40054e:	205c      	movs	r0, #92	; 0x5c
  400550:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  //V71 A11
  400552:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400556:	205d      	movs	r0, #93	; 0x5d
  400558:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS); //V71 SDA10
  40055a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40055e:	206d      	movs	r0, #109	; 0x6d
  400560:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A13_FLAGS); //V71 A13
  400562:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400566:	205f      	movs	r0, #95	; 0x5f
  400568:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A12_PIO, SDRAM_A14_FLAGS); //V71 A14
  40056a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40056e:	2012      	movs	r0, #18
  400570:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  400572:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400576:	2014      	movs	r0, #20
  400578:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA1_PIO, SDRAM_BA1_FLAGS);
  40057a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40057e:	2000      	movs	r0, #0
  400580:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  400582:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400586:	2077      	movs	r0, #119	; 0x77
  400588:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  40058a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40058e:	206e      	movs	r0, #110	; 0x6e
  400590:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  400592:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400596:	204f      	movs	r0, #79	; 0x4f
  400598:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  40059a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40059e:	2070      	movs	r0, #112	; 0x70
  4005a0:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  4005a2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4005a6:	2071      	movs	r0, #113	; 0x71
  4005a8:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  4005aa:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4005ae:	207d      	movs	r0, #125	; 0x7d
  4005b0:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  4005b2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005b6:	2052      	movs	r0, #82	; 0x52
  4005b8:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  4005ba:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4005be:	206f      	movs	r0, #111	; 0x6f
  4005c0:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);
  4005c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005c6:	2040      	movs	r0, #64	; 0x40
  4005c8:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);
  4005ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005ce:	2041      	movs	r0, #65	; 0x41
  4005d0:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);
  4005d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005d6:	2042      	movs	r0, #66	; 0x42
  4005d8:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);
  4005da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005de:	2043      	movs	r0, #67	; 0x43
  4005e0:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);
  4005e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005e6:	2044      	movs	r0, #68	; 0x44
  4005e8:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);
  4005ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005ee:	2045      	movs	r0, #69	; 0x45
  4005f0:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);
  4005f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005f6:	2046      	movs	r0, #70	; 0x46
  4005f8:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);
  4005fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005fe:	2047      	movs	r0, #71	; 0x47
  400600:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);
  400602:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400606:	4630      	mov	r0, r6
  400608:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);
  40060a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40060e:	2081      	movs	r0, #129	; 0x81
  400610:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS);
  400612:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400616:	2082      	movs	r0, #130	; 0x82
  400618:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS);
  40061a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40061e:	2083      	movs	r0, #131	; 0x83
  400620:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS);
  400622:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400626:	2084      	movs	r0, #132	; 0x84
  400628:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS);
  40062a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40062e:	2085      	movs	r0, #133	; 0x85
  400630:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS);
  400632:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400636:	200f      	movs	r0, #15
  400638:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS);
  40063a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40063e:	4628      	mov	r0, r5
  400640:	47a0      	blx	r4

	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  400642:	f8c7 5124 	str.w	r5, [r7, #292]	; 0x124
  400646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40064a:	bf00      	nop
  40064c:	400e0c00 	.word	0x400e0c00
  400650:	5a00080c 	.word	0x5a00080c
  400654:	e000ed00 	.word	0xe000ed00
  400658:	400e1400 	.word	0x400e1400
  40065c:	400e0e00 	.word	0x400e0e00
  400660:	400e1200 	.word	0x400e1200
  400664:	40088000 	.word	0x40088000
  400668:	400e1000 	.word	0x400e1000
  40066c:	00401e8d 	.word	0x00401e8d
  400670:	004021a9 	.word	0x004021a9

00400674 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400674:	4b28      	ldr	r3, [pc, #160]	; (400718 <twihs_set_speed+0xa4>)
  400676:	4299      	cmp	r1, r3
  400678:	d84b      	bhi.n	400712 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40067a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  40067e:	4299      	cmp	r1, r3
  400680:	d92d      	bls.n	4006de <twihs_set_speed+0x6a>
{
  400682:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400684:	4c25      	ldr	r4, [pc, #148]	; (40071c <twihs_set_speed+0xa8>)
  400686:	fba4 3402 	umull	r3, r4, r4, r2
  40068a:	0ba4      	lsrs	r4, r4, #14
  40068c:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40068e:	4b24      	ldr	r3, [pc, #144]	; (400720 <twihs_set_speed+0xac>)
  400690:	440b      	add	r3, r1
  400692:	009b      	lsls	r3, r3, #2
  400694:	fbb2 f2f3 	udiv	r2, r2, r3
  400698:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40069a:	2cff      	cmp	r4, #255	; 0xff
  40069c:	d91d      	bls.n	4006da <twihs_set_speed+0x66>
  40069e:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4006a0:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4006a2:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4006a4:	2cff      	cmp	r4, #255	; 0xff
  4006a6:	d901      	bls.n	4006ac <twihs_set_speed+0x38>
  4006a8:	2906      	cmp	r1, #6
  4006aa:	d9f9      	bls.n	4006a0 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4006ac:	2aff      	cmp	r2, #255	; 0xff
  4006ae:	d907      	bls.n	4006c0 <twihs_set_speed+0x4c>
  4006b0:	2906      	cmp	r1, #6
  4006b2:	d805      	bhi.n	4006c0 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4006b4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4006b6:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4006b8:	2aff      	cmp	r2, #255	; 0xff
  4006ba:	d901      	bls.n	4006c0 <twihs_set_speed+0x4c>
  4006bc:	2906      	cmp	r1, #6
  4006be:	d9f9      	bls.n	4006b4 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4006c0:	0213      	lsls	r3, r2, #8
  4006c2:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  4006c4:	0409      	lsls	r1, r1, #16
  4006c6:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4006ca:	430b      	orrs	r3, r1
  4006cc:	b2e4      	uxtb	r4, r4
  4006ce:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  4006d0:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4006d2:	2000      	movs	r0, #0
}
  4006d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006d8:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4006da:	2100      	movs	r1, #0
  4006dc:	e7e6      	b.n	4006ac <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4006de:	0049      	lsls	r1, r1, #1
  4006e0:	fbb2 f2f1 	udiv	r2, r2, r1
  4006e4:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4006e6:	2aff      	cmp	r2, #255	; 0xff
  4006e8:	d911      	bls.n	40070e <twihs_set_speed+0x9a>
  4006ea:	2300      	movs	r3, #0
			ckdiv++;
  4006ec:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  4006ee:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4006f0:	2aff      	cmp	r2, #255	; 0xff
  4006f2:	d901      	bls.n	4006f8 <twihs_set_speed+0x84>
  4006f4:	2b06      	cmp	r3, #6
  4006f6:	d9f9      	bls.n	4006ec <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4006f8:	0211      	lsls	r1, r2, #8
  4006fa:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  4006fc:	041b      	lsls	r3, r3, #16
  4006fe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400702:	430b      	orrs	r3, r1
  400704:	b2d2      	uxtb	r2, r2
  400706:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  400708:	6102      	str	r2, [r0, #16]
	return PASS;
  40070a:	2000      	movs	r0, #0
  40070c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40070e:	2300      	movs	r3, #0
  400710:	e7f2      	b.n	4006f8 <twihs_set_speed+0x84>
		return FAIL;
  400712:	2001      	movs	r0, #1
  400714:	4770      	bx	lr
  400716:	bf00      	nop
  400718:	00061a80 	.word	0x00061a80
  40071c:	057619f1 	.word	0x057619f1
  400720:	3ffd1200 	.word	0x3ffd1200

00400724 <twihs_master_init>:
{
  400724:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  400726:	f04f 32ff 	mov.w	r2, #4294967295
  40072a:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  40072c:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40072e:	2280      	movs	r2, #128	; 0x80
  400730:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  400732:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  400734:	2208      	movs	r2, #8
  400736:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  400738:	2220      	movs	r2, #32
  40073a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  40073c:	2204      	movs	r2, #4
  40073e:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  400740:	680a      	ldr	r2, [r1, #0]
  400742:	6849      	ldr	r1, [r1, #4]
  400744:	4b03      	ldr	r3, [pc, #12]	; (400754 <twihs_master_init+0x30>)
  400746:	4798      	blx	r3
}
  400748:	2801      	cmp	r0, #1
  40074a:	bf14      	ite	ne
  40074c:	2000      	movne	r0, #0
  40074e:	2001      	moveq	r0, #1
  400750:	bd08      	pop	{r3, pc}
  400752:	bf00      	nop
  400754:	00400675 	.word	0x00400675

00400758 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  400758:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  40075a:	2a00      	cmp	r2, #0
  40075c:	d04c      	beq.n	4007f8 <twihs_master_read+0xa0>
{
  40075e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400760:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400762:	2600      	movs	r6, #0
  400764:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400766:	684b      	ldr	r3, [r1, #4]
  400768:	021b      	lsls	r3, r3, #8
  40076a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  40076e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400772:	7c0d      	ldrb	r5, [r1, #16]
  400774:	042d      	lsls	r5, r5, #16
  400776:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  40077a:	432b      	orrs	r3, r5
  40077c:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40077e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400780:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400782:	b15d      	cbz	r5, 40079c <twihs_master_read+0x44>
	val = addr[0];
  400784:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  400786:	2d01      	cmp	r5, #1
  400788:	dd02      	ble.n	400790 <twihs_master_read+0x38>
		val |= addr[1];
  40078a:	784e      	ldrb	r6, [r1, #1]
  40078c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  400790:	2d02      	cmp	r5, #2
  400792:	dd04      	ble.n	40079e <twihs_master_read+0x46>
		val |= addr[2];
  400794:	7889      	ldrb	r1, [r1, #2]
  400796:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  40079a:	e000      	b.n	40079e <twihs_master_read+0x46>
		return 0;
  40079c:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40079e:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4007a0:	2301      	movs	r3, #1
  4007a2:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4007a4:	2502      	movs	r5, #2
  4007a6:	e012      	b.n	4007ce <twihs_master_read+0x76>
  4007a8:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4007aa:	f013 0f02 	tst.w	r3, #2
  4007ae:	d01b      	beq.n	4007e8 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  4007b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007b2:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4007b4:	6a03      	ldr	r3, [r0, #32]
  4007b6:	f013 0f01 	tst.w	r3, #1
  4007ba:	d0fb      	beq.n	4007b4 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  4007bc:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4007be:	2000      	movs	r0, #0
}
  4007c0:	bc70      	pop	{r4, r5, r6}
  4007c2:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  4007c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007c6:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  4007ca:	3a01      	subs	r2, #1
  4007cc:	d0f2      	beq.n	4007b4 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4007ce:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4007d0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4007d4:	d114      	bne.n	400800 <twihs_master_read+0xa8>
  4007d6:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  4007da:	2a01      	cmp	r2, #1
  4007dc:	d0e4      	beq.n	4007a8 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  4007de:	f013 0f02 	tst.w	r3, #2
  4007e2:	d1ef      	bne.n	4007c4 <twihs_master_read+0x6c>
	while (cnt > 0) {
  4007e4:	2a00      	cmp	r2, #0
  4007e6:	d0e5      	beq.n	4007b4 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4007e8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4007ea:	f413 7f80 	tst.w	r3, #256	; 0x100
  4007ee:	d105      	bne.n	4007fc <twihs_master_read+0xa4>
		if (!timeout--) {
  4007f0:	3901      	subs	r1, #1
  4007f2:	d1f2      	bne.n	4007da <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  4007f4:	2009      	movs	r0, #9
  4007f6:	e7e3      	b.n	4007c0 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  4007f8:	2001      	movs	r0, #1
  4007fa:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4007fc:	2005      	movs	r0, #5
  4007fe:	e7df      	b.n	4007c0 <twihs_master_read+0x68>
  400800:	2005      	movs	r0, #5
  400802:	e7dd      	b.n	4007c0 <twihs_master_read+0x68>

00400804 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  400804:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  400806:	2b00      	cmp	r3, #0
  400808:	d043      	beq.n	400892 <twihs_master_write+0x8e>
{
  40080a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  40080c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40080e:	2600      	movs	r6, #0
  400810:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400812:	7c0a      	ldrb	r2, [r1, #16]
  400814:	0412      	lsls	r2, r2, #16
  400816:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40081a:	684d      	ldr	r5, [r1, #4]
  40081c:	022d      	lsls	r5, r5, #8
  40081e:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400822:	432a      	orrs	r2, r5
  400824:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  400826:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400828:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  40082a:	b15d      	cbz	r5, 400844 <twihs_master_write+0x40>
	val = addr[0];
  40082c:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  40082e:	2d01      	cmp	r5, #1
  400830:	dd02      	ble.n	400838 <twihs_master_write+0x34>
		val |= addr[1];
  400832:	784e      	ldrb	r6, [r1, #1]
  400834:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  400838:	2d02      	cmp	r5, #2
  40083a:	dd04      	ble.n	400846 <twihs_master_write+0x42>
		val |= addr[2];
  40083c:	7889      	ldrb	r1, [r1, #2]
  40083e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400842:	e000      	b.n	400846 <twihs_master_write+0x42>
		return 0;
  400844:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400846:	60c2      	str	r2, [r0, #12]
  400848:	e004      	b.n	400854 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  40084a:	f814 2b01 	ldrb.w	r2, [r4], #1
  40084e:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  400850:	3b01      	subs	r3, #1
  400852:	d00f      	beq.n	400874 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  400854:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400856:	f412 7f80 	tst.w	r2, #256	; 0x100
  40085a:	d11e      	bne.n	40089a <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  40085c:	f012 0f04 	tst.w	r2, #4
  400860:	d1f3      	bne.n	40084a <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  400862:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400864:	f412 7f80 	tst.w	r2, #256	; 0x100
  400868:	d115      	bne.n	400896 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  40086a:	f012 0f04 	tst.w	r2, #4
  40086e:	d1ec      	bne.n	40084a <twihs_master_write+0x46>
	while (cnt > 0) {
  400870:	2b00      	cmp	r3, #0
  400872:	d1f6      	bne.n	400862 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  400874:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400876:	f413 7f80 	tst.w	r3, #256	; 0x100
  40087a:	d111      	bne.n	4008a0 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  40087c:	f013 0f04 	tst.w	r3, #4
  400880:	d0f8      	beq.n	400874 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400882:	2302      	movs	r3, #2
  400884:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  400886:	6a03      	ldr	r3, [r0, #32]
  400888:	f013 0f01 	tst.w	r3, #1
  40088c:	d0fb      	beq.n	400886 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  40088e:	2000      	movs	r0, #0
  400890:	e004      	b.n	40089c <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  400892:	2001      	movs	r0, #1
  400894:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400896:	2005      	movs	r0, #5
  400898:	e000      	b.n	40089c <twihs_master_write+0x98>
  40089a:	2005      	movs	r0, #5
}
  40089c:	bc70      	pop	{r4, r5, r6}
  40089e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4008a0:	2005      	movs	r0, #5
  4008a2:	e7fb      	b.n	40089c <twihs_master_write+0x98>

004008a4 <write_scl_A_OLD>:
	
/*! \brief Writes SCL.
    \param x tristates SCL when x = 1, other wise 0
 */
void write_scl_A_OLD (char x)
{
  4008a4:	b508      	push	{r3, lr}
      if(x)
  4008a6:	b158      	cbz	r0, 4008c0 <write_scl_A_OLD+0x1c>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4008a8:	4b0a      	ldr	r3, [pc, #40]	; (4008d4 <write_scl_A_OLD+0x30>)
  4008aa:	f44f 7200 	mov.w	r2, #512	; 0x200
  4008ae:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4008b4:	461a      	mov	r2, r3
  4008b6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
      {
//             DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_A, IOPORT_DIR_INPUT);
 	    //check clock stretching
 	    while(!READ_SCL_A_OLD());
  4008b8:	f413 7f00 	tst.w	r3, #512	; 0x200
  4008bc:	d0fb      	beq.n	4008b6 <write_scl_A_OLD+0x12>
  4008be:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008c0:	4b04      	ldr	r3, [pc, #16]	; (4008d4 <write_scl_A_OLD+0x30>)
  4008c2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4008c6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      else
      {
//             DDR_SCL |= (1 << SCL); //output 
//             PORT_SCL &= ~(1 << SCL); //set it low
			ioport_set_pin_dir(SCL_A, IOPORT_DIR_OUTPUT);
			pio_set_pin_low(SCL_A);
  4008cc:	2049      	movs	r0, #73	; 0x49
  4008ce:	4b02      	ldr	r3, [pc, #8]	; (4008d8 <write_scl_A_OLD+0x34>)
  4008d0:	4798      	blx	r3
  4008d2:	bd08      	pop	{r3, pc}
  4008d4:	400e1200 	.word	0x400e1200
  4008d8:	00401e71 	.word	0x00401e71

004008dc <write_sda_A_OLD>:

/*! \brief Writes SDA.
    \param x tristates SDA when x = 1, other wise 0
 */
void write_sda_A_OLD (char x)
{
  4008dc:	b508      	push	{r3, lr}
	if(x)
  4008de:	b130      	cbz	r0, 4008ee <write_sda_A_OLD+0x12>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4008e0:	4b08      	ldr	r3, [pc, #32]	; (400904 <write_sda_A_OLD+0x28>)
  4008e2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4008e6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  4008ec:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008ee:	4b05      	ldr	r3, [pc, #20]	; (400904 <write_sda_A_OLD+0x28>)
  4008f0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4008f4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	else
	{
		///            DDR_SDA |= (1 << SDA); //output
		///            PORT_SDA &= ~(1 << SDA); //set it low
		ioport_set_pin_dir(SDA_A, IOPORT_DIR_OUTPUT);
		pio_set_pin_low(SDA_A);
  4008fa:	2048      	movs	r0, #72	; 0x48
  4008fc:	4b02      	ldr	r3, [pc, #8]	; (400908 <write_sda_A_OLD+0x2c>)
  4008fe:	4798      	blx	r3
  400900:	bd08      	pop	{r3, pc}
  400902:	bf00      	nop
  400904:	400e1200 	.word	0x400e1200
  400908:	00401e71 	.word	0x00401e71

0040090c <twi_start_cond_A_OLD>:
{
  40090c:	b510      	push	{r4, lr}
        write_sda_A_OLD(0);
  40090e:	2000      	movs	r0, #0
  400910:	4b05      	ldr	r3, [pc, #20]	; (400928 <twi_start_cond_A_OLD+0x1c>)
  400912:	4798      	blx	r3
	delay_us(DELAY_A_OLD);
  400914:	20cb      	movs	r0, #203	; 0xcb
  400916:	4c05      	ldr	r4, [pc, #20]	; (40092c <twi_start_cond_A_OLD+0x20>)
  400918:	47a0      	blx	r4
	write_scl_A_OLD(0);	
  40091a:	2000      	movs	r0, #0
  40091c:	4b04      	ldr	r3, [pc, #16]	; (400930 <twi_start_cond_A_OLD+0x24>)
  40091e:	4798      	blx	r3
	delay_us(DELAY_A_OLD);
  400920:	20cb      	movs	r0, #203	; 0xcb
  400922:	47a0      	blx	r4
}
  400924:	2001      	movs	r0, #1
  400926:	bd10      	pop	{r4, pc}
  400928:	004008dd 	.word	0x004008dd
  40092c:	20400001 	.word	0x20400001
  400930:	004008a5 	.word	0x004008a5

00400934 <toggle_scl_A_OLD>:
		
	}
}

void toggle_scl_A_OLD() 
{
  400934:	b508      	push	{r3, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400936:	4b0d      	ldr	r3, [pc, #52]	; (40096c <toggle_scl_A_OLD+0x38>)
  400938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(SCL_A))
  40093a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40093e:	d10b      	bne.n	400958 <toggle_scl_A_OLD+0x24>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400940:	4b0a      	ldr	r3, [pc, #40]	; (40096c <toggle_scl_A_OLD+0x38>)
  400942:	f44f 7200 	mov.w	r2, #512	; 0x200
  400946:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400948:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40094c:	461a      	mov	r2, r3
  40094e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	}
	else
	{
// 		DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_A, IOPORT_DIR_INPUT);
 		while(!READ_SCL_A_OLD());
  400950:	f413 7f00 	tst.w	r3, #512	; 0x200
  400954:	d0fb      	beq.n	40094e <toggle_scl_A_OLD+0x1a>
  400956:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400958:	4b04      	ldr	r3, [pc, #16]	; (40096c <toggle_scl_A_OLD+0x38>)
  40095a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40095e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400960:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pio_set_pin_low(SCL_A);
  400964:	2049      	movs	r0, #73	; 0x49
  400966:	4b02      	ldr	r3, [pc, #8]	; (400970 <toggle_scl_A_OLD+0x3c>)
  400968:	4798      	blx	r3
  40096a:	bd08      	pop	{r3, pc}
  40096c:	400e1200 	.word	0x400e1200
  400970:	00401e71 	.word	0x00401e71

00400974 <i2c_write_byte_A_OLD>:
{
  400974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400978:	4604      	mov	r4, r0
  40097a:	2708      	movs	r7, #8
            write_sda_A_OLD((byte & 0x80) != 0);
  40097c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 4009f0 <i2c_write_byte_A_OLD+0x7c>
            delay_us(DELAY_A_OLD);
  400980:	26cb      	movs	r6, #203	; 0xcb
  400982:	4d19      	ldr	r5, [pc, #100]	; (4009e8 <i2c_write_byte_A_OLD+0x74>)
            write_sda_A_OLD((byte & 0x80) != 0);
  400984:	09e0      	lsrs	r0, r4, #7
  400986:	47c8      	blx	r9
            delay_us(DELAY_A_OLD);
  400988:	4630      	mov	r0, r6
  40098a:	47a8      	blx	r5
            toggle_scl_A_OLD();//goes high
  40098c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4009f4 <i2c_write_byte_A_OLD+0x80>
  400990:	47c0      	blx	r8
            delay_us(DELAY_A_OLD);
  400992:	4630      	mov	r0, r6
  400994:	47a8      	blx	r5
            toggle_scl_A_OLD();//goes low
  400996:	47c0      	blx	r8
            byte <<= 1;
  400998:	0064      	lsls	r4, r4, #1
  40099a:	b2e4      	uxtb	r4, r4
            delay_us(DELAY_A_OLD);
  40099c:	4630      	mov	r0, r6
  40099e:	47a8      	blx	r5
  4009a0:	1e78      	subs	r0, r7, #1
	for (bit = 0; bit < 8; bit++) 
  4009a2:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
  4009a6:	d1ed      	bne.n	400984 <i2c_write_byte_A_OLD+0x10>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4009a8:	4c10      	ldr	r4, [pc, #64]	; (4009ec <i2c_write_byte_A_OLD+0x78>)
  4009aa:	f44f 7380 	mov.w	r3, #256	; 0x100
  4009ae:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009b0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	toggle_scl_A_OLD(); //goes high for the 9th clock
  4009b4:	47c0      	blx	r8
	delay_us(4);
  4009b6:	20cb      	movs	r0, #203	; 0xcb
  4009b8:	4b0b      	ldr	r3, [pc, #44]	; (4009e8 <i2c_write_byte_A_OLD+0x74>)
  4009ba:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4009bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if(READ_SDA_A_OLD())
  4009be:	f413 7f80 	tst.w	r3, #256	; 0x100
  4009c2:	d002      	beq.n	4009ca <i2c_write_byte_A_OLD+0x56>
}	
  4009c4:	4638      	mov	r0, r7
  4009c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	delay_us(DELAY_A_OLD);
  4009ca:	20cb      	movs	r0, #203	; 0xcb
  4009cc:	4c06      	ldr	r4, [pc, #24]	; (4009e8 <i2c_write_byte_A_OLD+0x74>)
  4009ce:	47a0      	blx	r4
	toggle_scl_A_OLD(); //end of byte with acknowledgment. 
  4009d0:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009d2:	4b06      	ldr	r3, [pc, #24]	; (4009ec <i2c_write_byte_A_OLD+0x78>)
  4009d4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4009d8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	delay_us(DELAY_A_OLD); 
  4009de:	20cb      	movs	r0, #203	; 0xcb
  4009e0:	47a0      	blx	r4
	return 1;
  4009e2:	2701      	movs	r7, #1
  4009e4:	e7ee      	b.n	4009c4 <i2c_write_byte_A_OLD+0x50>
  4009e6:	bf00      	nop
  4009e8:	20400001 	.word	0x20400001
  4009ec:	400e1200 	.word	0x400e1200
  4009f0:	004008dd 	.word	0x004008dd
  4009f4:	00400935 	.word	0x00400935

004009f8 <write_data_A_OLD>:
{
  4009f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009fa:	4607      	mov	r7, r0
  4009fc:	460e      	mov	r6, r1
	if(!twi_start_cond_A_OLD())
  4009fe:	4b12      	ldr	r3, [pc, #72]	; (400a48 <write_data_A_OLD+0x50>)
  400a00:	4798      	blx	r3
  400a02:	4605      	mov	r5, r0
  400a04:	b908      	cbnz	r0, 400a0a <write_data_A_OLD+0x12>
}
  400a06:	4628      	mov	r0, r5
  400a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 	return i2c_write_byte_A_OLD(SLAVE_ADDRESS_A_OLD | read );
  400a0a:	20ee      	movs	r0, #238	; 0xee
  400a0c:	4b0f      	ldr	r3, [pc, #60]	; (400a4c <write_data_A_OLD+0x54>)
  400a0e:	4798      	blx	r3
	if(!send_slave_address_A_OLD(WRITE_A_OLD))
  400a10:	4605      	mov	r5, r0
  400a12:	2800      	cmp	r0, #0
  400a14:	d0f7      	beq.n	400a06 <write_data_A_OLD+0xe>
	for(index = 0; index < bytes; index++)
  400a16:	b1ae      	cbz	r6, 400a44 <write_data_A_OLD+0x4c>
  400a18:	1e7c      	subs	r4, r7, #1
  400a1a:	3e01      	subs	r6, #1
  400a1c:	fa57 f686 	uxtab	r6, r7, r6
		 ack = i2c_write_byte_A_OLD(indata[index]);
  400a20:	4f0a      	ldr	r7, [pc, #40]	; (400a4c <write_data_A_OLD+0x54>)
  400a22:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  400a26:	47b8      	blx	r7
		 if(!ack)
  400a28:	4605      	mov	r5, r0
  400a2a:	b108      	cbz	r0, 400a30 <write_data_A_OLD+0x38>
	for(index = 0; index < bytes; index++)
  400a2c:	42b4      	cmp	r4, r6
  400a2e:	d1f8      	bne.n	400a22 <write_data_A_OLD+0x2a>
	write_scl_A_OLD(1);
  400a30:	2001      	movs	r0, #1
  400a32:	4b07      	ldr	r3, [pc, #28]	; (400a50 <write_data_A_OLD+0x58>)
  400a34:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_A_OLD);
  400a36:	2066      	movs	r0, #102	; 0x66
  400a38:	4b06      	ldr	r3, [pc, #24]	; (400a54 <write_data_A_OLD+0x5c>)
  400a3a:	4798      	blx	r3
	write_sda_A_OLD(1);
  400a3c:	2001      	movs	r0, #1
  400a3e:	4b06      	ldr	r3, [pc, #24]	; (400a58 <write_data_A_OLD+0x60>)
  400a40:	4798      	blx	r3
	return ack;
  400a42:	e7e0      	b.n	400a06 <write_data_A_OLD+0xe>
	for(index = 0; index < bytes; index++)
  400a44:	2500      	movs	r5, #0
  400a46:	e7f3      	b.n	400a30 <write_data_A_OLD+0x38>
  400a48:	0040090d 	.word	0x0040090d
  400a4c:	00400975 	.word	0x00400975
  400a50:	004008a5 	.word	0x004008a5
  400a54:	20400001 	.word	0x20400001
  400a58:	004008dd 	.word	0x004008dd

00400a5c <i2c_read_byte_A_OLD>:
{
  400a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a60:	b083      	sub	sp, #12
  400a62:	4683      	mov	fp, r0
  400a64:	9101      	str	r1, [sp, #4]
  400a66:	4692      	mov	sl, r2
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400a68:	4b26      	ldr	r3, [pc, #152]	; (400b04 <i2c_read_byte_A_OLD+0xa8>)
  400a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
  400a6e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  400a74:	2407      	movs	r4, #7
        unsigned char byte = 0;
  400a76:	f04f 0800 	mov.w	r8, #0
             toggle_scl_A_OLD();//goes high
  400a7a:	4f23      	ldr	r7, [pc, #140]	; (400b08 <i2c_read_byte_A_OLD+0xac>)
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400a7c:	4699      	mov	r9, r3
              delay_us(DELAY_A_OLD);
  400a7e:	26cb      	movs	r6, #203	; 0xcb
  400a80:	e009      	b.n	400a96 <i2c_read_byte_A_OLD+0x3a>
  400a82:	4630      	mov	r0, r6
  400a84:	4d21      	ldr	r5, [pc, #132]	; (400b0c <i2c_read_byte_A_OLD+0xb0>)
  400a86:	47a8      	blx	r5
              toggle_scl_A_OLD();//goes low
  400a88:	47b8      	blx	r7
              delay_us(DELAY_A_OLD);
  400a8a:	4630      	mov	r0, r6
  400a8c:	47a8      	blx	r5
  400a8e:	3c01      	subs	r4, #1
	for (bit = 0; bit < 8; bit++) 
  400a90:	f1b4 3fff 	cmp.w	r4, #4294967295
  400a94:	d00c      	beq.n	400ab0 <i2c_read_byte_A_OLD+0x54>
             toggle_scl_A_OLD();//goes high
  400a96:	47b8      	blx	r7
  400a98:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
             if(READ_SDA_A_OLD())
  400a9c:	f413 7f80 	tst.w	r3, #256	; 0x100
  400aa0:	d0ef      	beq.n	400a82 <i2c_read_byte_A_OLD+0x26>
                     byte|= (1 << (7- bit));
  400aa2:	2301      	movs	r3, #1
  400aa4:	40a3      	lsls	r3, r4
  400aa6:	ea43 0808 	orr.w	r8, r3, r8
  400aaa:	fa5f f888 	uxtb.w	r8, r8
  400aae:	e7e8      	b.n	400a82 <i2c_read_byte_A_OLD+0x26>
	rcvdata[index] = byte;
  400ab0:	f80b 800a 	strb.w	r8, [fp, sl]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ab4:	4b13      	ldr	r3, [pc, #76]	; (400b04 <i2c_read_byte_A_OLD+0xa8>)
  400ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
  400aba:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400abc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if(index < (bytes-1))
  400ac0:	9b01      	ldr	r3, [sp, #4]
  400ac2:	3b01      	subs	r3, #1
  400ac4:	459a      	cmp	sl, r3
  400ac6:	db0e      	blt.n	400ae6 <i2c_read_byte_A_OLD+0x8a>
		write_sda_A_OLD(1);
  400ac8:	2001      	movs	r0, #1
  400aca:	4b11      	ldr	r3, [pc, #68]	; (400b10 <i2c_read_byte_A_OLD+0xb4>)
  400acc:	4798      	blx	r3
		toggle_scl_A_OLD(); //goes high for the 9th clock
  400ace:	4d0e      	ldr	r5, [pc, #56]	; (400b08 <i2c_read_byte_A_OLD+0xac>)
  400ad0:	47a8      	blx	r5
		delay_us(DELAY_A_OLD);
  400ad2:	20cb      	movs	r0, #203	; 0xcb
  400ad4:	4c0d      	ldr	r4, [pc, #52]	; (400b0c <i2c_read_byte_A_OLD+0xb0>)
  400ad6:	47a0      	blx	r4
		toggle_scl_A_OLD(); //end of byte with acknowledgment. 
  400ad8:	47a8      	blx	r5
		delay_us(DELAY_A_OLD);
  400ada:	20cb      	movs	r0, #203	; 0xcb
  400adc:	47a0      	blx	r4
}	
  400ade:	2001      	movs	r0, #1
  400ae0:	b003      	add	sp, #12
  400ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		write_sda_A_OLD(0);
  400ae6:	2000      	movs	r0, #0
  400ae8:	4d09      	ldr	r5, [pc, #36]	; (400b10 <i2c_read_byte_A_OLD+0xb4>)
  400aea:	47a8      	blx	r5
		toggle_scl_A_OLD(); //goes high for the 9th clock
  400aec:	4e06      	ldr	r6, [pc, #24]	; (400b08 <i2c_read_byte_A_OLD+0xac>)
  400aee:	47b0      	blx	r6
		delay_us(DELAY_A_OLD);
  400af0:	20cb      	movs	r0, #203	; 0xcb
  400af2:	4c06      	ldr	r4, [pc, #24]	; (400b0c <i2c_read_byte_A_OLD+0xb0>)
  400af4:	47a0      	blx	r4
		toggle_scl_A_OLD(); //end of byte with acknowledgment. 
  400af6:	47b0      	blx	r6
		write_sda_A_OLD(1);
  400af8:	2001      	movs	r0, #1
  400afa:	47a8      	blx	r5
		delay_us(DELAY_A_OLD);
  400afc:	20cb      	movs	r0, #203	; 0xcb
  400afe:	47a0      	blx	r4
  400b00:	e7ed      	b.n	400ade <i2c_read_byte_A_OLD+0x82>
  400b02:	bf00      	nop
  400b04:	400e1200 	.word	0x400e1200
  400b08:	00400935 	.word	0x00400935
  400b0c:	20400001 	.word	0x20400001
  400b10:	004008dd 	.word	0x004008dd

00400b14 <read_bytes_A_OLD>:
{
  400b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b18:	4607      	mov	r7, r0
  400b1a:	460d      	mov	r5, r1
	if(!twi_start_cond_A_OLD())
  400b1c:	4b13      	ldr	r3, [pc, #76]	; (400b6c <read_bytes_A_OLD+0x58>)
  400b1e:	4798      	blx	r3
  400b20:	4606      	mov	r6, r0
  400b22:	b910      	cbnz	r0, 400b2a <read_bytes_A_OLD+0x16>
}	
  400b24:	4630      	mov	r0, r6
  400b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 	return i2c_write_byte_A_OLD(SLAVE_ADDRESS_A_OLD | read );
  400b2a:	20ef      	movs	r0, #239	; 0xef
  400b2c:	4b10      	ldr	r3, [pc, #64]	; (400b70 <read_bytes_A_OLD+0x5c>)
  400b2e:	4798      	blx	r3
	if(!send_slave_address_A_OLD(READ_A_OLD))
  400b30:	4606      	mov	r6, r0
  400b32:	2800      	cmp	r0, #0
  400b34:	d0f6      	beq.n	400b24 <read_bytes_A_OLD+0x10>
	for(index = 0; index < bytes; index++)
  400b36:	b1b5      	cbz	r5, 400b66 <read_bytes_A_OLD+0x52>
  400b38:	2400      	movs	r4, #0
		success = i2c_read_byte_A_OLD(data, bytes, index);//db: always returns 1?
  400b3a:	4e0e      	ldr	r6, [pc, #56]	; (400b74 <read_bytes_A_OLD+0x60>)
  400b3c:	4622      	mov	r2, r4
  400b3e:	4629      	mov	r1, r5
  400b40:	4638      	mov	r0, r7
  400b42:	47b0      	blx	r6
		if(!success)
  400b44:	4680      	mov	r8, r0
  400b46:	b118      	cbz	r0, 400b50 <read_bytes_A_OLD+0x3c>
	for(index = 0; index < bytes; index++)
  400b48:	3401      	adds	r4, #1
  400b4a:	b2e4      	uxtb	r4, r4
  400b4c:	42a5      	cmp	r5, r4
  400b4e:	d1f5      	bne.n	400b3c <read_bytes_A_OLD+0x28>
	write_scl_A_OLD(1);
  400b50:	2001      	movs	r0, #1
  400b52:	4b09      	ldr	r3, [pc, #36]	; (400b78 <read_bytes_A_OLD+0x64>)
  400b54:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_A_OLD);
  400b56:	2066      	movs	r0, #102	; 0x66
  400b58:	4b08      	ldr	r3, [pc, #32]	; (400b7c <read_bytes_A_OLD+0x68>)
  400b5a:	4798      	blx	r3
	write_sda_A_OLD(1);
  400b5c:	2001      	movs	r0, #1
  400b5e:	4b08      	ldr	r3, [pc, #32]	; (400b80 <read_bytes_A_OLD+0x6c>)
  400b60:	4798      	blx	r3
	return success;
  400b62:	4646      	mov	r6, r8
  400b64:	e7de      	b.n	400b24 <read_bytes_A_OLD+0x10>
	for(index = 0; index < bytes; index++)
  400b66:	f04f 0800 	mov.w	r8, #0
  400b6a:	e7f1      	b.n	400b50 <read_bytes_A_OLD+0x3c>
  400b6c:	0040090d 	.word	0x0040090d
  400b70:	00400975 	.word	0x00400975
  400b74:	00400a5d 	.word	0x00400a5d
  400b78:	004008a5 	.word	0x004008a5
  400b7c:	20400001 	.word	0x20400001
  400b80:	004008dd 	.word	0x004008dd

00400b84 <write_scl_H>:
	
/*! \brief Writes SCL.
    \param x tristates SCL when x = 1, other wise 0
 */
void write_scl_H (char x)
{
  400b84:	b508      	push	{r3, lr}
      if(x)
  400b86:	b158      	cbz	r0, 400ba0 <write_scl_H+0x1c>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b88:	4b0a      	ldr	r3, [pc, #40]	; (400bb4 <write_scl_H+0x30>)
  400b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
  400b8e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400b94:	461a      	mov	r2, r3
  400b96:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
      {
//             DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_H, IOPORT_DIR_INPUT);
 	    //check clock stretching
 	    while(!READ_SCL_H());
  400b98:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b9c:	d0fb      	beq.n	400b96 <write_scl_H+0x12>
  400b9e:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ba0:	4b04      	ldr	r3, [pc, #16]	; (400bb4 <write_scl_H+0x30>)
  400ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ba6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ba8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      else
      {
//             DDR_SCL |= (1 << SCL); //output 
//             PORT_SCL &= ~(1 << SCL); //set it low
			ioport_set_pin_dir(SCL_H, IOPORT_DIR_OUTPUT);
			pio_set_pin_low(SCL_H);
  400bac:	2049      	movs	r0, #73	; 0x49
  400bae:	4b02      	ldr	r3, [pc, #8]	; (400bb8 <write_scl_H+0x34>)
  400bb0:	4798      	blx	r3
  400bb2:	bd08      	pop	{r3, pc}
  400bb4:	400e1200 	.word	0x400e1200
  400bb8:	00401e71 	.word	0x00401e71

00400bbc <write_sda_H>:

/*! \brief Writes SDA.
    \param x tristates SDA when x = 1, other wise 0
 */
void write_sda_H (char x)
{
  400bbc:	b508      	push	{r3, lr}
	if(x)
  400bbe:	b130      	cbz	r0, 400bce <write_sda_H+0x12>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400bc0:	4b08      	ldr	r3, [pc, #32]	; (400be4 <write_sda_H+0x28>)
  400bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
  400bc6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bc8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  400bcc:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bce:	4b05      	ldr	r3, [pc, #20]	; (400be4 <write_sda_H+0x28>)
  400bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
  400bd4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bd6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	else
	{
		///            DDR_SDA |= (1 << SDA); //output
		///            PORT_SDA &= ~(1 << SDA); //set it low
		ioport_set_pin_dir(SDA_H, IOPORT_DIR_OUTPUT);
		pio_set_pin_low(SDA_H);
  400bda:	2048      	movs	r0, #72	; 0x48
  400bdc:	4b02      	ldr	r3, [pc, #8]	; (400be8 <write_sda_H+0x2c>)
  400bde:	4798      	blx	r3
  400be0:	bd08      	pop	{r3, pc}
  400be2:	bf00      	nop
  400be4:	400e1200 	.word	0x400e1200
  400be8:	00401e71 	.word	0x00401e71

00400bec <twi_start_cond_H>:
{
  400bec:	b510      	push	{r4, lr}
        write_sda_H(0);
  400bee:	2000      	movs	r0, #0
  400bf0:	4b05      	ldr	r3, [pc, #20]	; (400c08 <twi_start_cond_H+0x1c>)
  400bf2:	4798      	blx	r3
	delay_us(DELAY_H);
  400bf4:	20cb      	movs	r0, #203	; 0xcb
  400bf6:	4c05      	ldr	r4, [pc, #20]	; (400c0c <twi_start_cond_H+0x20>)
  400bf8:	47a0      	blx	r4
	write_scl_H(0);	
  400bfa:	2000      	movs	r0, #0
  400bfc:	4b04      	ldr	r3, [pc, #16]	; (400c10 <twi_start_cond_H+0x24>)
  400bfe:	4798      	blx	r3
	delay_us(DELAY_H);
  400c00:	20cb      	movs	r0, #203	; 0xcb
  400c02:	47a0      	blx	r4
}
  400c04:	2001      	movs	r0, #1
  400c06:	bd10      	pop	{r4, pc}
  400c08:	00400bbd 	.word	0x00400bbd
  400c0c:	20400001 	.word	0x20400001
  400c10:	00400b85 	.word	0x00400b85

00400c14 <toggle_scl_H>:
		
	}
}

void toggle_scl_H() 
{
  400c14:	b508      	push	{r3, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400c16:	4b0d      	ldr	r3, [pc, #52]	; (400c4c <toggle_scl_H+0x38>)
  400c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(SCL_H))
  400c1a:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c1e:	d10b      	bne.n	400c38 <toggle_scl_H+0x24>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400c20:	4b0a      	ldr	r3, [pc, #40]	; (400c4c <toggle_scl_H+0x38>)
  400c22:	f44f 7200 	mov.w	r2, #512	; 0x200
  400c26:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400c2c:	461a      	mov	r2, r3
  400c2e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	}
	else
	{
// 		DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_H, IOPORT_DIR_INPUT);
 		while(!READ_SCL_H());
  400c30:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c34:	d0fb      	beq.n	400c2e <toggle_scl_H+0x1a>
  400c36:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c38:	4b04      	ldr	r3, [pc, #16]	; (400c4c <toggle_scl_H+0x38>)
  400c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
  400c3e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pio_set_pin_low(SCL_H);
  400c44:	2049      	movs	r0, #73	; 0x49
  400c46:	4b02      	ldr	r3, [pc, #8]	; (400c50 <toggle_scl_H+0x3c>)
  400c48:	4798      	blx	r3
  400c4a:	bd08      	pop	{r3, pc}
  400c4c:	400e1200 	.word	0x400e1200
  400c50:	00401e71 	.word	0x00401e71

00400c54 <i2c_write_byte_H>:
{
  400c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c58:	4604      	mov	r4, r0
  400c5a:	2708      	movs	r7, #8
            write_sda_H((byte & 0x80) != 0);
  400c5c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400cd0 <i2c_write_byte_H+0x7c>
            delay_us(DELAY_H);
  400c60:	26cb      	movs	r6, #203	; 0xcb
  400c62:	4d19      	ldr	r5, [pc, #100]	; (400cc8 <i2c_write_byte_H+0x74>)
            write_sda_H((byte & 0x80) != 0);
  400c64:	09e0      	lsrs	r0, r4, #7
  400c66:	47c8      	blx	r9
            delay_us(DELAY_H);
  400c68:	4630      	mov	r0, r6
  400c6a:	47a8      	blx	r5
            toggle_scl_H();//goes high
  400c6c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 400cd4 <i2c_write_byte_H+0x80>
  400c70:	47c0      	blx	r8
            delay_us(DELAY_H);
  400c72:	4630      	mov	r0, r6
  400c74:	47a8      	blx	r5
            toggle_scl_H();//goes low
  400c76:	47c0      	blx	r8
            byte <<= 1;
  400c78:	0064      	lsls	r4, r4, #1
  400c7a:	b2e4      	uxtb	r4, r4
            delay_us(DELAY_H);
  400c7c:	4630      	mov	r0, r6
  400c7e:	47a8      	blx	r5
  400c80:	1e78      	subs	r0, r7, #1
	for (bit = 0; bit < 8; bit++) 
  400c82:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
  400c86:	d1ed      	bne.n	400c64 <i2c_write_byte_H+0x10>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400c88:	4c10      	ldr	r4, [pc, #64]	; (400ccc <i2c_write_byte_H+0x78>)
  400c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
  400c8e:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c90:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	toggle_scl_H(); //goes high for the 9th clock
  400c94:	47c0      	blx	r8
	delay_us(4);
  400c96:	20cb      	movs	r0, #203	; 0xcb
  400c98:	4b0b      	ldr	r3, [pc, #44]	; (400cc8 <i2c_write_byte_H+0x74>)
  400c9a:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400c9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if(READ_SDA_H())
  400c9e:	f413 7f80 	tst.w	r3, #256	; 0x100
  400ca2:	d002      	beq.n	400caa <i2c_write_byte_H+0x56>
}	
  400ca4:	4638      	mov	r0, r7
  400ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	delay_us(DELAY_H);
  400caa:	20cb      	movs	r0, #203	; 0xcb
  400cac:	4c06      	ldr	r4, [pc, #24]	; (400cc8 <i2c_write_byte_H+0x74>)
  400cae:	47a0      	blx	r4
	toggle_scl_H(); //end of byte with acknowledgment. 
  400cb0:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400cb2:	4b06      	ldr	r3, [pc, #24]	; (400ccc <i2c_write_byte_H+0x78>)
  400cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
  400cb8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	delay_us(DELAY_H); 
  400cbe:	20cb      	movs	r0, #203	; 0xcb
  400cc0:	47a0      	blx	r4
	return 1;
  400cc2:	2701      	movs	r7, #1
  400cc4:	e7ee      	b.n	400ca4 <i2c_write_byte_H+0x50>
  400cc6:	bf00      	nop
  400cc8:	20400001 	.word	0x20400001
  400ccc:	400e1200 	.word	0x400e1200
  400cd0:	00400bbd 	.word	0x00400bbd
  400cd4:	00400c15 	.word	0x00400c15

00400cd8 <write_data_H>:
{
  400cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400cda:	4607      	mov	r7, r0
  400cdc:	460e      	mov	r6, r1
	if(!twi_start_cond_H())
  400cde:	4b12      	ldr	r3, [pc, #72]	; (400d28 <write_data_H+0x50>)
  400ce0:	4798      	blx	r3
  400ce2:	4605      	mov	r5, r0
  400ce4:	b908      	cbnz	r0, 400cea <write_data_H+0x12>
}
  400ce6:	4628      	mov	r0, r5
  400ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 	return i2c_write_byte_H(SLAVE_ADDRESS_H | read );
  400cea:	2080      	movs	r0, #128	; 0x80
  400cec:	4b0f      	ldr	r3, [pc, #60]	; (400d2c <write_data_H+0x54>)
  400cee:	4798      	blx	r3
	if(!send_slave_Address_H(WRITE_H))
  400cf0:	4605      	mov	r5, r0
  400cf2:	2800      	cmp	r0, #0
  400cf4:	d0f7      	beq.n	400ce6 <write_data_H+0xe>
	for(index = 0; index < bytes; index++)
  400cf6:	b1ae      	cbz	r6, 400d24 <write_data_H+0x4c>
  400cf8:	1e7c      	subs	r4, r7, #1
  400cfa:	3e01      	subs	r6, #1
  400cfc:	fa57 f686 	uxtab	r6, r7, r6
		 ack = i2c_write_byte_H(indata[index]);
  400d00:	4f0a      	ldr	r7, [pc, #40]	; (400d2c <write_data_H+0x54>)
  400d02:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  400d06:	47b8      	blx	r7
		 if(!ack)
  400d08:	4605      	mov	r5, r0
  400d0a:	b108      	cbz	r0, 400d10 <write_data_H+0x38>
	for(index = 0; index < bytes; index++)
  400d0c:	42b4      	cmp	r4, r6
  400d0e:	d1f8      	bne.n	400d02 <write_data_H+0x2a>
	write_scl_H(1);
  400d10:	2001      	movs	r0, #1
  400d12:	4b07      	ldr	r3, [pc, #28]	; (400d30 <write_data_H+0x58>)
  400d14:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_H);
  400d16:	2066      	movs	r0, #102	; 0x66
  400d18:	4b06      	ldr	r3, [pc, #24]	; (400d34 <write_data_H+0x5c>)
  400d1a:	4798      	blx	r3
	write_sda_H(1);
  400d1c:	2001      	movs	r0, #1
  400d1e:	4b06      	ldr	r3, [pc, #24]	; (400d38 <write_data_H+0x60>)
  400d20:	4798      	blx	r3
	return ack;
  400d22:	e7e0      	b.n	400ce6 <write_data_H+0xe>
	for(index = 0; index < bytes; index++)
  400d24:	2500      	movs	r5, #0
  400d26:	e7f3      	b.n	400d10 <write_data_H+0x38>
  400d28:	00400bed 	.word	0x00400bed
  400d2c:	00400c55 	.word	0x00400c55
  400d30:	00400b85 	.word	0x00400b85
  400d34:	20400001 	.word	0x20400001
  400d38:	00400bbd 	.word	0x00400bbd

00400d3c <i2c_read_byte_H>:
{
  400d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d40:	b083      	sub	sp, #12
  400d42:	4683      	mov	fp, r0
  400d44:	9101      	str	r1, [sp, #4]
  400d46:	4692      	mov	sl, r2
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400d48:	4b26      	ldr	r3, [pc, #152]	; (400de4 <i2c_read_byte_H+0xa8>)
  400d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
  400d4e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d50:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  400d54:	2407      	movs	r4, #7
        unsigned char byte = 0;
  400d56:	f04f 0800 	mov.w	r8, #0
             toggle_scl_H();//goes high
  400d5a:	4f23      	ldr	r7, [pc, #140]	; (400de8 <i2c_read_byte_H+0xac>)
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400d5c:	4699      	mov	r9, r3
              delay_us(DELAY_H);
  400d5e:	26cb      	movs	r6, #203	; 0xcb
  400d60:	e009      	b.n	400d76 <i2c_read_byte_H+0x3a>
  400d62:	4630      	mov	r0, r6
  400d64:	4d21      	ldr	r5, [pc, #132]	; (400dec <i2c_read_byte_H+0xb0>)
  400d66:	47a8      	blx	r5
              toggle_scl_H();//goes low
  400d68:	47b8      	blx	r7
              delay_us(DELAY_H);
  400d6a:	4630      	mov	r0, r6
  400d6c:	47a8      	blx	r5
  400d6e:	3c01      	subs	r4, #1
	for (bit = 0; bit < 8; bit++) 
  400d70:	f1b4 3fff 	cmp.w	r4, #4294967295
  400d74:	d00c      	beq.n	400d90 <i2c_read_byte_H+0x54>
             toggle_scl_H();//goes high
  400d76:	47b8      	blx	r7
  400d78:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
             if(READ_SDA_H())
  400d7c:	f413 7f80 	tst.w	r3, #256	; 0x100
  400d80:	d0ef      	beq.n	400d62 <i2c_read_byte_H+0x26>
                     byte|= (1 << (7- bit));
  400d82:	2301      	movs	r3, #1
  400d84:	40a3      	lsls	r3, r4
  400d86:	ea43 0808 	orr.w	r8, r3, r8
  400d8a:	fa5f f888 	uxtb.w	r8, r8
  400d8e:	e7e8      	b.n	400d62 <i2c_read_byte_H+0x26>
	rcvdata[index] = byte;
  400d90:	f80b 800a 	strb.w	r8, [fp, sl]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d94:	4b13      	ldr	r3, [pc, #76]	; (400de4 <i2c_read_byte_H+0xa8>)
  400d96:	f44f 7280 	mov.w	r2, #256	; 0x100
  400d9a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if(index < (bytes-1))
  400da0:	9b01      	ldr	r3, [sp, #4]
  400da2:	3b01      	subs	r3, #1
  400da4:	459a      	cmp	sl, r3
  400da6:	db0e      	blt.n	400dc6 <i2c_read_byte_H+0x8a>
		write_sda_H(1);
  400da8:	2001      	movs	r0, #1
  400daa:	4b11      	ldr	r3, [pc, #68]	; (400df0 <i2c_read_byte_H+0xb4>)
  400dac:	4798      	blx	r3
		toggle_scl_H(); //goes high for the 9th clock
  400dae:	4d0e      	ldr	r5, [pc, #56]	; (400de8 <i2c_read_byte_H+0xac>)
  400db0:	47a8      	blx	r5
		delay_us(DELAY_H);
  400db2:	20cb      	movs	r0, #203	; 0xcb
  400db4:	4c0d      	ldr	r4, [pc, #52]	; (400dec <i2c_read_byte_H+0xb0>)
  400db6:	47a0      	blx	r4
		toggle_scl_H(); //end of byte with acknowledgment. 
  400db8:	47a8      	blx	r5
		delay_us(DELAY_H);
  400dba:	20cb      	movs	r0, #203	; 0xcb
  400dbc:	47a0      	blx	r4
}	
  400dbe:	2001      	movs	r0, #1
  400dc0:	b003      	add	sp, #12
  400dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		write_sda_H(0);
  400dc6:	2000      	movs	r0, #0
  400dc8:	4d09      	ldr	r5, [pc, #36]	; (400df0 <i2c_read_byte_H+0xb4>)
  400dca:	47a8      	blx	r5
		toggle_scl_H(); //goes high for the 9th clock
  400dcc:	4e06      	ldr	r6, [pc, #24]	; (400de8 <i2c_read_byte_H+0xac>)
  400dce:	47b0      	blx	r6
		delay_us(DELAY_H);
  400dd0:	20cb      	movs	r0, #203	; 0xcb
  400dd2:	4c06      	ldr	r4, [pc, #24]	; (400dec <i2c_read_byte_H+0xb0>)
  400dd4:	47a0      	blx	r4
		toggle_scl_H(); //end of byte with acknowledgment. 
  400dd6:	47b0      	blx	r6
		write_sda_H(1);
  400dd8:	2001      	movs	r0, #1
  400dda:	47a8      	blx	r5
		delay_us(DELAY_H);
  400ddc:	20cb      	movs	r0, #203	; 0xcb
  400dde:	47a0      	blx	r4
  400de0:	e7ed      	b.n	400dbe <i2c_read_byte_H+0x82>
  400de2:	bf00      	nop
  400de4:	400e1200 	.word	0x400e1200
  400de8:	00400c15 	.word	0x00400c15
  400dec:	20400001 	.word	0x20400001
  400df0:	00400bbd 	.word	0x00400bbd

00400df4 <read_bytes_H>:
{
  400df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400df8:	4607      	mov	r7, r0
  400dfa:	460d      	mov	r5, r1
	if(!twi_start_cond_H())
  400dfc:	4b13      	ldr	r3, [pc, #76]	; (400e4c <read_bytes_H+0x58>)
  400dfe:	4798      	blx	r3
  400e00:	4606      	mov	r6, r0
  400e02:	b910      	cbnz	r0, 400e0a <read_bytes_H+0x16>
}	
  400e04:	4630      	mov	r0, r6
  400e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 	return i2c_write_byte_H(SLAVE_ADDRESS_H | read );
  400e0a:	2081      	movs	r0, #129	; 0x81
  400e0c:	4b10      	ldr	r3, [pc, #64]	; (400e50 <read_bytes_H+0x5c>)
  400e0e:	4798      	blx	r3
	if(!send_slave_Address_H(READ_H))
  400e10:	4606      	mov	r6, r0
  400e12:	2800      	cmp	r0, #0
  400e14:	d0f6      	beq.n	400e04 <read_bytes_H+0x10>
	for(index = 0; index < bytes; index++)
  400e16:	b1b5      	cbz	r5, 400e46 <read_bytes_H+0x52>
  400e18:	2400      	movs	r4, #0
		success = i2c_read_byte_H(data, bytes, index);//db: always returns 1?
  400e1a:	4e0e      	ldr	r6, [pc, #56]	; (400e54 <read_bytes_H+0x60>)
  400e1c:	4622      	mov	r2, r4
  400e1e:	4629      	mov	r1, r5
  400e20:	4638      	mov	r0, r7
  400e22:	47b0      	blx	r6
		if(!success)
  400e24:	4680      	mov	r8, r0
  400e26:	b118      	cbz	r0, 400e30 <read_bytes_H+0x3c>
	for(index = 0; index < bytes; index++)
  400e28:	3401      	adds	r4, #1
  400e2a:	b2e4      	uxtb	r4, r4
  400e2c:	42a5      	cmp	r5, r4
  400e2e:	d1f5      	bne.n	400e1c <read_bytes_H+0x28>
	write_scl_H(1);
  400e30:	2001      	movs	r0, #1
  400e32:	4b09      	ldr	r3, [pc, #36]	; (400e58 <read_bytes_H+0x64>)
  400e34:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_H);
  400e36:	2066      	movs	r0, #102	; 0x66
  400e38:	4b08      	ldr	r3, [pc, #32]	; (400e5c <read_bytes_H+0x68>)
  400e3a:	4798      	blx	r3
	write_sda_H(1);
  400e3c:	2001      	movs	r0, #1
  400e3e:	4b08      	ldr	r3, [pc, #32]	; (400e60 <read_bytes_H+0x6c>)
  400e40:	4798      	blx	r3
	return success;
  400e42:	4646      	mov	r6, r8
  400e44:	e7de      	b.n	400e04 <read_bytes_H+0x10>
	for(index = 0; index < bytes; index++)
  400e46:	f04f 0800 	mov.w	r8, #0
  400e4a:	e7f1      	b.n	400e30 <read_bytes_H+0x3c>
  400e4c:	00400bed 	.word	0x00400bed
  400e50:	00400c55 	.word	0x00400c55
  400e54:	00400d3d 	.word	0x00400d3d
  400e58:	00400b85 	.word	0x00400b85
  400e5c:	20400001 	.word	0x20400001
  400e60:	00400bbd 	.word	0x00400bbd

00400e64 <write_SCL_RTC>:
	
/*! \brief Writes SCL.
    \param x tristates SCL when x = 1, other wise 0
 */
void write_SCL_RTC (char x)
{
  400e64:	b508      	push	{r3, lr}
      if(x)
  400e66:	b158      	cbz	r0, 400e80 <write_SCL_RTC+0x1c>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400e68:	4b0a      	ldr	r3, [pc, #40]	; (400e94 <write_SCL_RTC+0x30>)
  400e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400e6e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400e74:	461a      	mov	r2, r3
  400e76:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
      {
//             DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_RTC, IOPORT_DIR_INPUT);
 	    //check clock stretching
 	    while(!READ_SCL_RTC());
  400e78:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  400e7c:	d0fb      	beq.n	400e76 <write_SCL_RTC+0x12>
  400e7e:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e80:	4b04      	ldr	r3, [pc, #16]	; (400e94 <write_SCL_RTC+0x30>)
  400e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400e86:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e88:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      else
      {
//             DDR_SCL |= (1 << SCL); //output 
//             PORT_SCL &= ~(1 << SCL); //set it low
			ioport_set_pin_dir(SCL_RTC, IOPORT_DIR_OUTPUT);
			pio_set_pin_low(SCL_RTC);
  400e8c:	204d      	movs	r0, #77	; 0x4d
  400e8e:	4b02      	ldr	r3, [pc, #8]	; (400e98 <write_SCL_RTC+0x34>)
  400e90:	4798      	blx	r3
  400e92:	bd08      	pop	{r3, pc}
  400e94:	400e1200 	.word	0x400e1200
  400e98:	00401e71 	.word	0x00401e71

00400e9c <write_SDA_RTC>:

/*! \brief Writes SDA.
    \param x tristates SDA when x = 1, other wise 0
 */
void write_SDA_RTC (char x)
{
  400e9c:	b508      	push	{r3, lr}
	if(x)
  400e9e:	b130      	cbz	r0, 400eae <write_SDA_RTC+0x12>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ea0:	4b08      	ldr	r3, [pc, #32]	; (400ec4 <write_SDA_RTC+0x28>)
  400ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400ea6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ea8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  400eac:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400eae:	4b05      	ldr	r3, [pc, #20]	; (400ec4 <write_SDA_RTC+0x28>)
  400eb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400eb4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400eb6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	else
	{
		///            DDR_SDA |= (1 << SDA); //output
		///            PORT_SDA &= ~(1 << SDA); //set it low
		ioport_set_pin_dir(SDA_RTC, IOPORT_DIR_OUTPUT);
		pio_set_pin_low(SDA_RTC);
  400eba:	204a      	movs	r0, #74	; 0x4a
  400ebc:	4b02      	ldr	r3, [pc, #8]	; (400ec8 <write_SDA_RTC+0x2c>)
  400ebe:	4798      	blx	r3
  400ec0:	bd08      	pop	{r3, pc}
  400ec2:	bf00      	nop
  400ec4:	400e1200 	.word	0x400e1200
  400ec8:	00401e71 	.word	0x00401e71

00400ecc <twi_init_RTC>:
{
  400ecc:	b508      	push	{r3, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ece:	4b09      	ldr	r3, [pc, #36]	; (400ef4 <twi_init_RTC+0x28>)
  400ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400ed4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ed6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400ede:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ee0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	write_SDA_RTC(1);
  400ee4:	2001      	movs	r0, #1
  400ee6:	4b04      	ldr	r3, [pc, #16]	; (400ef8 <twi_init_RTC+0x2c>)
  400ee8:	4798      	blx	r3
    write_SCL_RTC(1);
  400eea:	2001      	movs	r0, #1
  400eec:	4b03      	ldr	r3, [pc, #12]	; (400efc <twi_init_RTC+0x30>)
  400eee:	4798      	blx	r3
  400ef0:	bd08      	pop	{r3, pc}
  400ef2:	bf00      	nop
  400ef4:	400e1200 	.word	0x400e1200
  400ef8:	00400e9d 	.word	0x00400e9d
  400efc:	00400e65 	.word	0x00400e65

00400f00 <twi_start_cond_RTC>:
{
  400f00:	b510      	push	{r4, lr}
    write_SDA_RTC(0);
  400f02:	2000      	movs	r0, #0
  400f04:	4b06      	ldr	r3, [pc, #24]	; (400f20 <twi_start_cond_RTC+0x20>)
  400f06:	4798      	blx	r3
	delay_us(DELAY_RTC);
  400f08:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  400f0c:	4c05      	ldr	r4, [pc, #20]	; (400f24 <twi_start_cond_RTC+0x24>)
  400f0e:	47a0      	blx	r4
	write_SCL_RTC(0);	
  400f10:	2000      	movs	r0, #0
  400f12:	4b05      	ldr	r3, [pc, #20]	; (400f28 <twi_start_cond_RTC+0x28>)
  400f14:	4798      	blx	r3
	delay_us(DELAY_RTC);
  400f16:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  400f1a:	47a0      	blx	r4
}
  400f1c:	2001      	movs	r0, #1
  400f1e:	bd10      	pop	{r4, pc}
  400f20:	00400e9d 	.word	0x00400e9d
  400f24:	20400001 	.word	0x20400001
  400f28:	00400e65 	.word	0x00400e65

00400f2c <toggle_SCL_RTC>:
		
	}
}

void toggle_SCL_RTC() 
{
  400f2c:	b508      	push	{r3, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400f2e:	4b0d      	ldr	r3, [pc, #52]	; (400f64 <toggle_SCL_RTC+0x38>)
  400f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(SCL_RTC))
  400f32:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  400f36:	d10b      	bne.n	400f50 <toggle_SCL_RTC+0x24>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400f38:	4b0a      	ldr	r3, [pc, #40]	; (400f64 <toggle_SCL_RTC+0x38>)
  400f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400f3e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400f44:	461a      	mov	r2, r3
  400f46:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	}
	else
	{
// 		DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_RTC, IOPORT_DIR_INPUT);
 		while(!READ_SCL_RTC());
  400f48:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  400f4c:	d0fb      	beq.n	400f46 <toggle_SCL_RTC+0x1a>
  400f4e:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f50:	4b04      	ldr	r3, [pc, #16]	; (400f64 <toggle_SCL_RTC+0x38>)
  400f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400f56:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f58:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pio_set_pin_low(SCL_RTC);
  400f5c:	204d      	movs	r0, #77	; 0x4d
  400f5e:	4b02      	ldr	r3, [pc, #8]	; (400f68 <toggle_SCL_RTC+0x3c>)
  400f60:	4798      	blx	r3
  400f62:	bd08      	pop	{r3, pc}
  400f64:	400e1200 	.word	0x400e1200
  400f68:	00401e71 	.word	0x00401e71

00400f6c <i2c_write_byte_RTC>:
{
  400f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400f70:	4604      	mov	r4, r0
  400f72:	2708      	movs	r7, #8
            write_SDA_RTC((byte & 0x80) != 0);
  400f74:	f8df 9078 	ldr.w	r9, [pc, #120]	; 400ff0 <i2c_write_byte_RTC+0x84>
            delay_us(DELAY_RTC);
  400f78:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
  400f7c:	4d1a      	ldr	r5, [pc, #104]	; (400fe8 <i2c_write_byte_RTC+0x7c>)
            write_SDA_RTC((byte & 0x80) != 0);
  400f7e:	09e0      	lsrs	r0, r4, #7
  400f80:	47c8      	blx	r9
            delay_us(DELAY_RTC);
  400f82:	4630      	mov	r0, r6
  400f84:	47a8      	blx	r5
            toggle_SCL_RTC();//goes high
  400f86:	f8df 806c 	ldr.w	r8, [pc, #108]	; 400ff4 <i2c_write_byte_RTC+0x88>
  400f8a:	47c0      	blx	r8
            delay_us(DELAY_RTC);
  400f8c:	4630      	mov	r0, r6
  400f8e:	47a8      	blx	r5
            toggle_SCL_RTC();//goes low
  400f90:	47c0      	blx	r8
            byte <<= 1;
  400f92:	0064      	lsls	r4, r4, #1
  400f94:	b2e4      	uxtb	r4, r4
            delay_us(DELAY_RTC);
  400f96:	4630      	mov	r0, r6
  400f98:	47a8      	blx	r5
  400f9a:	1e78      	subs	r0, r7, #1
	for (bit = 0; bit < 8; bit++) 
  400f9c:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
  400fa0:	d1ed      	bne.n	400f7e <i2c_write_byte_RTC+0x12>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400fa2:	4c12      	ldr	r4, [pc, #72]	; (400fec <i2c_write_byte_RTC+0x80>)
  400fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400fa8:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400faa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	toggle_SCL_RTC(); //goes high for the 9th clock
  400fae:	47c0      	blx	r8
	delay_us(16);
  400fb0:	f240 302a 	movw	r0, #810	; 0x32a
  400fb4:	4b0c      	ldr	r3, [pc, #48]	; (400fe8 <i2c_write_byte_RTC+0x7c>)
  400fb6:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400fb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if(READ_SDA_RTC())
  400fba:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400fbe:	d002      	beq.n	400fc6 <i2c_write_byte_RTC+0x5a>
}	
  400fc0:	4638      	mov	r0, r7
  400fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	delay_us(DELAY_RTC);
  400fc6:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  400fca:	4c07      	ldr	r4, [pc, #28]	; (400fe8 <i2c_write_byte_RTC+0x7c>)
  400fcc:	47a0      	blx	r4
	toggle_SCL_RTC(); //end of byte with acknowledgment. SCL LOW.
  400fce:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400fd0:	4b06      	ldr	r3, [pc, #24]	; (400fec <i2c_write_byte_RTC+0x80>)
  400fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400fd6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400fd8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	delay_us(DELAY_RTC); 
  400fdc:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  400fe0:	47a0      	blx	r4
	return 1;
  400fe2:	2701      	movs	r7, #1
  400fe4:	e7ec      	b.n	400fc0 <i2c_write_byte_RTC+0x54>
  400fe6:	bf00      	nop
  400fe8:	20400001 	.word	0x20400001
  400fec:	400e1200 	.word	0x400e1200
  400ff0:	00400e9d 	.word	0x00400e9d
  400ff4:	00400f2d 	.word	0x00400f2d

00400ff8 <write_data_RTC>:
{
  400ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ffa:	4607      	mov	r7, r0
  400ffc:	460e      	mov	r6, r1
	if(!twi_start_cond_RTC())
  400ffe:	4b13      	ldr	r3, [pc, #76]	; (40104c <write_data_RTC+0x54>)
  401000:	4798      	blx	r3
  401002:	4605      	mov	r5, r0
  401004:	b908      	cbnz	r0, 40100a <write_data_RTC+0x12>
}
  401006:	4628      	mov	r0, r5
  401008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 	return i2c_write_byte_RTC(SLAVE_ADDRESS_RTC | read );
  40100a:	20a2      	movs	r0, #162	; 0xa2
  40100c:	4b10      	ldr	r3, [pc, #64]	; (401050 <write_data_RTC+0x58>)
  40100e:	4798      	blx	r3
	if(!send_slave_address_RTC(WRITE_RTC))
  401010:	4605      	mov	r5, r0
  401012:	2800      	cmp	r0, #0
  401014:	d0f7      	beq.n	401006 <write_data_RTC+0xe>
	for(index = 0; index < bytes; index++)
  401016:	b1b6      	cbz	r6, 401046 <write_data_RTC+0x4e>
  401018:	1e7c      	subs	r4, r7, #1
  40101a:	3e01      	subs	r6, #1
  40101c:	fa57 f686 	uxtab	r6, r7, r6
		 ack = i2c_write_byte_RTC(indata[index]);
  401020:	4f0b      	ldr	r7, [pc, #44]	; (401050 <write_data_RTC+0x58>)
  401022:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  401026:	47b8      	blx	r7
		 if(!ack)
  401028:	4605      	mov	r5, r0
  40102a:	b108      	cbz	r0, 401030 <write_data_RTC+0x38>
	for(index = 0; index < bytes; index++)
  40102c:	42b4      	cmp	r4, r6
  40102e:	d1f8      	bne.n	401022 <write_data_RTC+0x2a>
	write_SCL_RTC(1);
  401030:	2001      	movs	r0, #1
  401032:	4b08      	ldr	r3, [pc, #32]	; (401054 <write_data_RTC+0x5c>)
  401034:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_RTC);
  401036:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  40103a:	4b07      	ldr	r3, [pc, #28]	; (401058 <write_data_RTC+0x60>)
  40103c:	4798      	blx	r3
	write_SDA_RTC(1);
  40103e:	2001      	movs	r0, #1
  401040:	4b06      	ldr	r3, [pc, #24]	; (40105c <write_data_RTC+0x64>)
  401042:	4798      	blx	r3
	return ack;
  401044:	e7df      	b.n	401006 <write_data_RTC+0xe>
	for(index = 0; index < bytes; index++)
  401046:	2500      	movs	r5, #0
  401048:	e7f2      	b.n	401030 <write_data_RTC+0x38>
  40104a:	bf00      	nop
  40104c:	00400f01 	.word	0x00400f01
  401050:	00400f6d 	.word	0x00400f6d
  401054:	00400e65 	.word	0x00400e65
  401058:	20400001 	.word	0x20400001
  40105c:	00400e9d 	.word	0x00400e9d

00401060 <i2c_read_byte_RTC>:
{
  401060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401064:	b083      	sub	sp, #12
  401066:	4683      	mov	fp, r0
  401068:	9101      	str	r1, [sp, #4]
  40106a:	4692      	mov	sl, r2
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40106c:	4b28      	ldr	r3, [pc, #160]	; (401110 <i2c_read_byte_RTC+0xb0>)
  40106e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401072:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401074:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401078:	2407      	movs	r4, #7
        unsigned char byte = 0;
  40107a:	f04f 0800 	mov.w	r8, #0
             toggle_SCL_RTC();//goes high
  40107e:	4f25      	ldr	r7, [pc, #148]	; (401114 <i2c_read_byte_RTC+0xb4>)
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401080:	4699      	mov	r9, r3
              delay_us(DELAY_RTC);
  401082:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
  401086:	e009      	b.n	40109c <i2c_read_byte_RTC+0x3c>
  401088:	4630      	mov	r0, r6
  40108a:	4d23      	ldr	r5, [pc, #140]	; (401118 <i2c_read_byte_RTC+0xb8>)
  40108c:	47a8      	blx	r5
              toggle_SCL_RTC();//goes low
  40108e:	47b8      	blx	r7
              delay_us(DELAY_RTC);
  401090:	4630      	mov	r0, r6
  401092:	47a8      	blx	r5
  401094:	3c01      	subs	r4, #1
	for (bit = 0; bit < 8; bit++) 
  401096:	f1b4 3fff 	cmp.w	r4, #4294967295
  40109a:	d00c      	beq.n	4010b6 <i2c_read_byte_RTC+0x56>
             toggle_SCL_RTC();//goes high
  40109c:	47b8      	blx	r7
  40109e:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
             if(READ_SDA_RTC())
  4010a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4010a6:	d0ef      	beq.n	401088 <i2c_read_byte_RTC+0x28>
                     byte|= (1 << (7- bit));
  4010a8:	2301      	movs	r3, #1
  4010aa:	40a3      	lsls	r3, r4
  4010ac:	ea43 0808 	orr.w	r8, r3, r8
  4010b0:	fa5f f888 	uxtb.w	r8, r8
  4010b4:	e7e8      	b.n	401088 <i2c_read_byte_RTC+0x28>
	rcvdata[index] = byte;
  4010b6:	f80b 800a 	strb.w	r8, [fp, sl]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4010ba:	4b15      	ldr	r3, [pc, #84]	; (401110 <i2c_read_byte_RTC+0xb0>)
  4010bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4010c0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4010c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if(index < (bytes-1))
  4010c6:	9b01      	ldr	r3, [sp, #4]
  4010c8:	3b01      	subs	r3, #1
  4010ca:	459a      	cmp	sl, r3
  4010cc:	db10      	blt.n	4010f0 <i2c_read_byte_RTC+0x90>
		write_SDA_RTC(1);
  4010ce:	2001      	movs	r0, #1
  4010d0:	4b12      	ldr	r3, [pc, #72]	; (40111c <i2c_read_byte_RTC+0xbc>)
  4010d2:	4798      	blx	r3
		toggle_SCL_RTC(); //goes high for the 9th clock
  4010d4:	4d0f      	ldr	r5, [pc, #60]	; (401114 <i2c_read_byte_RTC+0xb4>)
  4010d6:	47a8      	blx	r5
		delay_us(DELAY_RTC);
  4010d8:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  4010dc:	4c0e      	ldr	r4, [pc, #56]	; (401118 <i2c_read_byte_RTC+0xb8>)
  4010de:	47a0      	blx	r4
		toggle_SCL_RTC(); //end of byte with acknowledgment. 
  4010e0:	47a8      	blx	r5
		delay_us(DELAY_RTC);
  4010e2:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  4010e6:	47a0      	blx	r4
}	
  4010e8:	2001      	movs	r0, #1
  4010ea:	b003      	add	sp, #12
  4010ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		write_SDA_RTC(0);
  4010f0:	2000      	movs	r0, #0
  4010f2:	4d0a      	ldr	r5, [pc, #40]	; (40111c <i2c_read_byte_RTC+0xbc>)
  4010f4:	47a8      	blx	r5
		toggle_SCL_RTC(); //goes high for the 9th clock
  4010f6:	4e07      	ldr	r6, [pc, #28]	; (401114 <i2c_read_byte_RTC+0xb4>)
  4010f8:	47b0      	blx	r6
		delay_us(DELAY_RTC);
  4010fa:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  4010fe:	4c06      	ldr	r4, [pc, #24]	; (401118 <i2c_read_byte_RTC+0xb8>)
  401100:	47a0      	blx	r4
		toggle_SCL_RTC(); //end of byte with acknowledgment. 
  401102:	47b0      	blx	r6
		write_SDA_RTC(1);
  401104:	2001      	movs	r0, #1
  401106:	47a8      	blx	r5
		delay_us(DELAY_RTC);
  401108:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  40110c:	47a0      	blx	r4
  40110e:	e7eb      	b.n	4010e8 <i2c_read_byte_RTC+0x88>
  401110:	400e1200 	.word	0x400e1200
  401114:	00400f2d 	.word	0x00400f2d
  401118:	20400001 	.word	0x20400001
  40111c:	00400e9d 	.word	0x00400e9d

00401120 <read_bytes_RTC>:
{
  401120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401124:	4607      	mov	r7, r0
  401126:	460d      	mov	r5, r1
	if(!twi_start_cond_RTC())
  401128:	4b18      	ldr	r3, [pc, #96]	; (40118c <read_bytes_RTC+0x6c>)
  40112a:	4798      	blx	r3
  40112c:	4606      	mov	r6, r0
  40112e:	b910      	cbnz	r0, 401136 <read_bytes_RTC+0x16>
}	
  401130:	4630      	mov	r0, r6
  401132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 	return i2c_write_byte_RTC(SLAVE_ADDRESS_RTC | read );
  401136:	20a3      	movs	r0, #163	; 0xa3
  401138:	4b15      	ldr	r3, [pc, #84]	; (401190 <read_bytes_RTC+0x70>)
  40113a:	4798      	blx	r3
	if(!send_slave_address_RTC(READ_RTC))
  40113c:	4606      	mov	r6, r0
  40113e:	2800      	cmp	r0, #0
  401140:	d0f6      	beq.n	401130 <read_bytes_RTC+0x10>
	for(index = 0; index < bytes; index++)
  401142:	b1fd      	cbz	r5, 401184 <read_bytes_RTC+0x64>
  401144:	2400      	movs	r4, #0
		success = i2c_read_byte_RTC(data, bytes, index);//db: always returns 1?
  401146:	4e13      	ldr	r6, [pc, #76]	; (401194 <read_bytes_RTC+0x74>)
  401148:	4622      	mov	r2, r4
  40114a:	4629      	mov	r1, r5
  40114c:	4638      	mov	r0, r7
  40114e:	47b0      	blx	r6
		if(!success)
  401150:	4680      	mov	r8, r0
  401152:	b118      	cbz	r0, 40115c <read_bytes_RTC+0x3c>
	for(index = 0; index < bytes; index++)
  401154:	3401      	adds	r4, #1
  401156:	b2e4      	uxtb	r4, r4
  401158:	42a5      	cmp	r5, r4
  40115a:	d1f5      	bne.n	401148 <read_bytes_RTC+0x28>
	delay_us(SCL_SDA_DELAY_RTC);
  40115c:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401160:	4c0d      	ldr	r4, [pc, #52]	; (401198 <read_bytes_RTC+0x78>)
  401162:	47a0      	blx	r4
	write_SDA_RTC(0);
  401164:	2000      	movs	r0, #0
  401166:	4d0d      	ldr	r5, [pc, #52]	; (40119c <read_bytes_RTC+0x7c>)
  401168:	47a8      	blx	r5
	delay_us(SCL_SDA_DELAY_RTC);
  40116a:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  40116e:	47a0      	blx	r4
	write_SCL_RTC(1);
  401170:	2001      	movs	r0, #1
  401172:	4b0b      	ldr	r3, [pc, #44]	; (4011a0 <read_bytes_RTC+0x80>)
  401174:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_RTC);
  401176:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  40117a:	47a0      	blx	r4
	write_SDA_RTC(1);
  40117c:	2001      	movs	r0, #1
  40117e:	47a8      	blx	r5
	return success;
  401180:	4646      	mov	r6, r8
  401182:	e7d5      	b.n	401130 <read_bytes_RTC+0x10>
	for(index = 0; index < bytes; index++)
  401184:	f04f 0800 	mov.w	r8, #0
  401188:	e7e8      	b.n	40115c <read_bytes_RTC+0x3c>
  40118a:	bf00      	nop
  40118c:	00400f01 	.word	0x00400f01
  401190:	00400f6d 	.word	0x00400f6d
  401194:	00401061 	.word	0x00401061
  401198:	20400001 	.word	0x20400001
  40119c:	00400e9d 	.word	0x00400e9d
  4011a0:	00400e65 	.word	0x00400e65

004011a4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4011a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4011a8:	b980      	cbnz	r0, 4011cc <_read+0x28>
  4011aa:	460c      	mov	r4, r1
  4011ac:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4011ae:	2a00      	cmp	r2, #0
  4011b0:	dd0f      	ble.n	4011d2 <_read+0x2e>
  4011b2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4011b4:	4e08      	ldr	r6, [pc, #32]	; (4011d8 <_read+0x34>)
  4011b6:	4d09      	ldr	r5, [pc, #36]	; (4011dc <_read+0x38>)
  4011b8:	6830      	ldr	r0, [r6, #0]
  4011ba:	4621      	mov	r1, r4
  4011bc:	682b      	ldr	r3, [r5, #0]
  4011be:	4798      	blx	r3
		ptr++;
  4011c0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4011c2:	42bc      	cmp	r4, r7
  4011c4:	d1f8      	bne.n	4011b8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4011c6:	4640      	mov	r0, r8
  4011c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4011cc:	f04f 38ff 	mov.w	r8, #4294967295
  4011d0:	e7f9      	b.n	4011c6 <_read+0x22>
	for (; len > 0; --len) {
  4011d2:	4680      	mov	r8, r0
  4011d4:	e7f7      	b.n	4011c6 <_read+0x22>
  4011d6:	bf00      	nop
  4011d8:	20401030 	.word	0x20401030
  4011dc:	20401028 	.word	0x20401028

004011e0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4011e0:	3801      	subs	r0, #1
  4011e2:	2802      	cmp	r0, #2
  4011e4:	d815      	bhi.n	401212 <_write+0x32>
{
  4011e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011ea:	460e      	mov	r6, r1
  4011ec:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4011ee:	b19a      	cbz	r2, 401218 <_write+0x38>
  4011f0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4011f2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40122c <_write+0x4c>
  4011f6:	4f0c      	ldr	r7, [pc, #48]	; (401228 <_write+0x48>)
  4011f8:	f8d8 0000 	ldr.w	r0, [r8]
  4011fc:	f815 1b01 	ldrb.w	r1, [r5], #1
  401200:	683b      	ldr	r3, [r7, #0]
  401202:	4798      	blx	r3
  401204:	2800      	cmp	r0, #0
  401206:	db0a      	blt.n	40121e <_write+0x3e>
  401208:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40120a:	3c01      	subs	r4, #1
  40120c:	d1f4      	bne.n	4011f8 <_write+0x18>
  40120e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401212:	f04f 30ff 	mov.w	r0, #4294967295
  401216:	4770      	bx	lr
	for (; len != 0; --len) {
  401218:	4610      	mov	r0, r2
  40121a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40121e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401226:	bf00      	nop
  401228:	2040102c 	.word	0x2040102c
  40122c:	20401030 	.word	0x20401030

00401230 <isi_init>:
 *
 * \param p_isi  Pointer to a ISI instance.
 * \param isi_cfg   Configuration for the ISI
 */
void isi_init(Isi *p_isi, struct isi_config_t *isi_cfg)
{
  401230:	b410      	push	{r4}
	uint32_t reg = 0;

	if(isi_cfg->hpol) {
  401232:	780b      	ldrb	r3, [r1, #0]
		reg |= ISI_CFG1_HSYNC_POL;
  401234:	2b00      	cmp	r3, #0
  401236:	bf0c      	ite	eq
  401238:	2200      	moveq	r2, #0
  40123a:	2204      	movne	r2, #4
	}
	if(isi_cfg->vpol) {
  40123c:	784b      	ldrb	r3, [r1, #1]
  40123e:	b10b      	cbz	r3, 401244 <isi_init+0x14>
		reg |= ISI_CFG1_VSYNC_POL;
  401240:	f042 0208 	orr.w	r2, r2, #8
	}
	if(isi_cfg->pck_pol) {
  401244:	788b      	ldrb	r3, [r1, #2]
  401246:	b10b      	cbz	r3, 40124c <isi_init+0x1c>
		reg |= ISI_CFG1_PIXCLK_POL;
  401248:	f042 0210 	orr.w	r2, r2, #16
	}
	if(isi_cfg->emb_sync) {
  40124c:	78cb      	ldrb	r3, [r1, #3]
  40124e:	b10b      	cbz	r3, 401254 <isi_init+0x24>
		reg |= ISI_CFG1_EMB_SYNC;
  401250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	}
	if(isi_cfg->crc_sync) {
  401254:	790b      	ldrb	r3, [r1, #4]
  401256:	b10b      	cbz	r3, 40125c <isi_init+0x2c>
		reg |= ISI_CFG1_CRC_SYNC;
  401258:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  40125c:	794b      	ldrb	r3, [r1, #5]
  40125e:	035b      	lsls	r3, r3, #13
  401260:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
  401264:	798c      	ldrb	r4, [r1, #6]
  401266:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		| ISI_CFG1_SFD(isi_cfg->sfd);
  40126a:	79cc      	ldrb	r4, [r1, #7]
  40126c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  401270:	4313      	orrs	r3, r2
	p_isi->ISI_CFG1 = reg;
  401272:	6003      	str	r3, [r0, #0]
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  401274:	4b18      	ldr	r3, [pc, #96]	; (4012d8 <isi_init+0xa8>)
  401276:	685a      	ldr	r2, [r3, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  401278:	685b      	ldr	r3, [r3, #4]
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  40127a:	0ed2      	lsrs	r2, r2, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40127c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
  401280:	ea43 7302 	orr.w	r3, r3, r2, lsl #28

	reg = _isi_get_CFG2_workaround();
	switch(isi_cfg->image_fmt) {
  401284:	7a0a      	ldrb	r2, [r1, #8]
  401286:	2a04      	cmp	r2, #4
  401288:	d806      	bhi.n	401298 <isi_init+0x68>
  40128a:	e8df f002 	tbb	[pc, r2]
  40128e:	1403      	.short	0x1403
  401290:	1c17      	.short	0x1c17
  401292:	1f          	.byte	0x1f
  401293:	00          	.byte	0x00
		case ISI_INPUT_YUV:
			reg &= ~ISI_CFG2_COL_SPACE;
  401294:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  401298:	68ca      	ldr	r2, [r1, #12]
  40129a:	1e54      	subs	r4, r2, #1
  40129c:	4a0f      	ldr	r2, [pc, #60]	; (4012dc <isi_init+0xac>)
  40129e:	ea02 4204 	and.w	r2, r2, r4, lsl #16
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  4012a2:	6909      	ldr	r1, [r1, #16]
  4012a4:	3901      	subs	r1, #1
  4012a6:	f3c1 010a 	ubfx	r1, r1, #0, #11
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  4012aa:	430a      	orrs	r2, r1
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  4012ac:	4313      	orrs	r3, r2
	p_isi->ISI_CFG2 = reg;
  4012ae:	6043      	str	r3, [r0, #4]
}
  4012b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012b4:	4770      	bx	lr
			reg |= ISI_CFG2_RGB_MODE;
  4012b6:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
			break;
  4012ba:	e7ed      	b.n	401298 <isi_init+0x68>
			reg &= ~ISI_CFG2_RGB_MODE;
  4012bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4012c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			break;
  4012c4:	e7e8      	b.n	401298 <isi_init+0x68>
			reg |= ISI_CFG2_GRAYSCALE;
  4012c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
			break;
  4012ca:	e7e5      	b.n	401298 <isi_init+0x68>
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
  4012cc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
  4012d0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
			break;
  4012d4:	e7e0      	b.n	401298 <isi_init+0x68>
  4012d6:	bf00      	nop
  4012d8:	4004c000 	.word	0x4004c000
  4012dc:	07ff0000 	.word	0x07ff0000

004012e0 <isi_set_dma_codec_path>:
 * \param frame_buf_start_addr  DMA codec base address.
 */
void isi_set_dma_codec_path(Isi *p_isi, uint8_t full_mode, uint8_t discr,
		uint32_t base_buf_desc, uint32_t dma_ctrl, uint32_t frame_buf_start_addr)
{
	if(full_mode) {
  4012e0:	b171      	cbz	r1, 401300 <isi_set_dma_codec_path+0x20>
		p_isi->ISI_CFG1 |= ISI_CFG1_FULL;
  4012e2:	6801      	ldr	r1, [r0, #0]
  4012e4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  4012e8:	6001      	str	r1, [r0, #0]
	} else {
		p_isi->ISI_CFG1 &= ~ISI_CFG1_FULL;
	}
	if(discr) {
  4012ea:	b972      	cbnz	r2, 40130a <isi_set_dma_codec_path+0x2a>
		p_isi->ISI_CFG1 |= ISI_CFG1_DISCR;
	} else {
		p_isi->ISI_CFG1 &= ~ISI_CFG1_DISCR;
  4012ec:	6802      	ldr	r2, [r0, #0]
  4012ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4012f2:	6002      	str	r2, [r0, #0]
	}

	p_isi->ISI_DMA_C_DSCR = base_buf_desc;
  4012f4:	6583      	str	r3, [r0, #88]	; 0x58
	p_isi->ISI_DMA_C_CTRL = dma_ctrl;
  4012f6:	9b00      	ldr	r3, [sp, #0]
  4012f8:	6543      	str	r3, [r0, #84]	; 0x54
	p_isi->ISI_DMA_C_ADDR = frame_buf_start_addr;
  4012fa:	9b01      	ldr	r3, [sp, #4]
  4012fc:	6503      	str	r3, [r0, #80]	; 0x50
  4012fe:	4770      	bx	lr
		p_isi->ISI_CFG1 &= ~ISI_CFG1_FULL;
  401300:	6801      	ldr	r1, [r0, #0]
  401302:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  401306:	6001      	str	r1, [r0, #0]
  401308:	e7ef      	b.n	4012ea <isi_set_dma_codec_path+0xa>
		p_isi->ISI_CFG1 |= ISI_CFG1_DISCR;
  40130a:	6802      	ldr	r2, [r0, #0]
  40130c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  401310:	6002      	str	r2, [r0, #0]
  401312:	e7ef      	b.n	4012f4 <isi_set_dma_codec_path+0x14>

00401314 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401314:	6943      	ldr	r3, [r0, #20]
  401316:	f013 0f02 	tst.w	r3, #2
  40131a:	d004      	beq.n	401326 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40131c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401320:	61c1      	str	r1, [r0, #28]
	return 0;
  401322:	2000      	movs	r0, #0
  401324:	4770      	bx	lr
		return 1;
  401326:	2001      	movs	r0, #1
}
  401328:	4770      	bx	lr

0040132a <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40132a:	6943      	ldr	r3, [r0, #20]
  40132c:	f013 0f01 	tst.w	r3, #1
  401330:	d005      	beq.n	40133e <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401332:	6983      	ldr	r3, [r0, #24]
  401334:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401338:	600b      	str	r3, [r1, #0]

	return 0;
  40133a:	2000      	movs	r0, #0
  40133c:	4770      	bx	lr
		return 1;
  40133e:	2001      	movs	r0, #1
}
  401340:	4770      	bx	lr
	...

00401344 <sdramc_init>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  401344:	4b51      	ldr	r3, [pc, #324]	; (40148c <sdramc_init+0x148>)
  401346:	781b      	ldrb	r3, [r3, #0]
  401348:	2bff      	cmp	r3, #255	; 0xff
  40134a:	f000 809d 	beq.w	401488 <sdramc_init+0x144>
 *
 * \param p_sdram  Pointer to the sdram memory structure.
 * \param ul_clk  SDRAM clock frequency.
 */
void sdramc_init(sdramc_memory_dev_t *p_sdram, uint32_t ul_clk)
{
  40134e:	b4f0      	push	{r4, r5, r6, r7}
  401350:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401352:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401356:	fab3 f383 	clz	r3, r3
  40135a:	095b      	lsrs	r3, r3, #5
  40135c:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40135e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401360:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401364:	2200      	movs	r2, #0
  401366:	4b4a      	ldr	r3, [pc, #296]	; (401490 <sdramc_init+0x14c>)
  401368:	701a      	strb	r2, [r3, #0]
	return flags;
  40136a:	9c00      	ldr	r4, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40136c:	4a47      	ldr	r2, [pc, #284]	; (40148c <sdramc_init+0x148>)
  40136e:	7813      	ldrb	r3, [r2, #0]
  401370:	3301      	adds	r3, #1
  401372:	7013      	strb	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401374:	b12c      	cbz	r4, 401382 <sdramc_init+0x3e>
		cpu_irq_enable();
  401376:	2201      	movs	r2, #1
  401378:	4b45      	ldr	r3, [pc, #276]	; (401490 <sdramc_init+0x14c>)
  40137a:	701a      	strb	r2, [r3, #0]
  40137c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401380:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);

	/* SDRAM device configuration */
	/* Step 1. */
	/* Set the features of SDRAM device into the Configuration Register */
	SDRAMC->SDRAMC_CR = p_sdram->cr.ul_cfg;
  401382:	6883      	ldr	r3, [r0, #8]
  401384:	4a43      	ldr	r2, [pc, #268]	; (401494 <sdramc_init+0x150>)
  401386:	6093      	str	r3, [r2, #8]
	/* Step 2. */

	/* For low-power SDRAM, Temperature-Compensated Self Refresh (TCSR),
	   Drive Strength (DS) and Partial Array Self Refresh (PASR) must be set
	   in the Low-power Register. */
	SDRAMC->SDRAMC_LPR = 0;
  401388:	2300      	movs	r3, #0
  40138a:	6113      	str	r3, [r2, #16]

	/* Step 3. */
	/* Program the memory device type into the Memory Device Register */
	SDRAMC->SDRAMC_MDR = SDRAMC_MDR_MD_SDRAM;
  40138c:	6253      	str	r3, [r2, #36]	; 0x24

	/* Step 4. */

	/* A minimum pause of 200 µs is provided to precede any signal toggle.
	   (6 core cycles per iteration) */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  40138e:	9301      	str	r3, [sp, #4]
  401390:	4b41      	ldr	r3, [pc, #260]	; (401498 <sdramc_init+0x154>)
  401392:	fba3 2301 	umull	r2, r3, r3, r1
  401396:	0c9a      	lsrs	r2, r3, #18
  401398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40139c:	fb03 f302 	mul.w	r3, r3, r2
  4013a0:	4a3e      	ldr	r2, [pc, #248]	; (40149c <sdramc_init+0x158>)
  4013a2:	fba2 2303 	umull	r2, r3, r2, r3
  4013a6:	089b      	lsrs	r3, r3, #2
  4013a8:	9a01      	ldr	r2, [sp, #4]
  4013aa:	4293      	cmp	r3, r2
  4013ac:	d905      	bls.n	4013ba <sdramc_init+0x76>
  4013ae:	9a01      	ldr	r2, [sp, #4]
  4013b0:	3201      	adds	r2, #1
  4013b2:	9201      	str	r2, [sp, #4]
  4013b4:	9a01      	ldr	r2, [sp, #4]
  4013b6:	429a      	cmp	r2, r3
  4013b8:	d3f9      	bcc.n	4013ae <sdramc_init+0x6a>
	/* A NOP command is issued to the SDR-SDRAM. Program NOP command into
	   Mode Register, and the application must set Mode to 1 in the Mode
	   Register. Perform a write access to any SDR-SDRAM address to
	   acknowledge this command. Now the clock which drives SDR-SDRAM
	   device is enabled. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NOP;
  4013ba:	4d36      	ldr	r5, [pc, #216]	; (401494 <sdramc_init+0x150>)
  4013bc:	2201      	movs	r2, #1
  4013be:	602a      	str	r2, [r5, #0]
	*pSdram = 0x0;
  4013c0:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  4013c4:	2200      	movs	r2, #0
  4013c6:	8022      	strh	r2, [r4, #0]

	/* An all banks precharge command is issued to the SDR-SDRAM. Program
	   all banks precharge command into Mode Register, and the application
	   must set Mode to 2 in the Mode Register. Perform a write access to
	   any SDRSDRAM address to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_ALLBANKS_PRECHARGE;
  4013c8:	2602      	movs	r6, #2
  4013ca:	602e      	str	r6, [r5, #0]
	*pSdram = 0x0;
  4013cc:	8022      	strh	r2, [r4, #0]

	/* Add some delays after precharge */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  4013ce:	9201      	str	r2, [sp, #4]
  4013d0:	9a01      	ldr	r2, [sp, #4]
  4013d2:	429a      	cmp	r2, r3
  4013d4:	d205      	bcs.n	4013e2 <sdramc_init+0x9e>
  4013d6:	9a01      	ldr	r2, [sp, #4]
  4013d8:	3201      	adds	r2, #1
  4013da:	9201      	str	r2, [sp, #4]
  4013dc:	9a01      	ldr	r2, [sp, #4]
  4013de:	429a      	cmp	r2, r3
  4013e0:	d3f9      	bcc.n	4013d6 <sdramc_init+0x92>
	/* Step 7. */
	/* Eight auto-refresh (CBR) cycles are provided. Program the auto
	   refresh command (CBR) into Mode Register, and the application
	   must set Mode to 4 in the Mode Register. Once in the idle state,
	   eight AUTO REFRESH cycles must be performed. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4013e2:	4a2c      	ldr	r2, [pc, #176]	; (401494 <sdramc_init+0x150>)
  4013e4:	2404      	movs	r4, #4
  4013e6:	6014      	str	r4, [r2, #0]
	*pSdram = 0x1;
  4013e8:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
  4013ec:	2601      	movs	r6, #1
  4013ee:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4013f0:	6014      	str	r4, [r2, #0]
	*pSdram = 0x2;
  4013f2:	2602      	movs	r6, #2
  4013f4:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4013f6:	6014      	str	r4, [r2, #0]
	*pSdram = 0x3;
  4013f8:	2603      	movs	r6, #3
  4013fa:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4013fc:	6014      	str	r4, [r2, #0]
	*pSdram = 0x4;
  4013fe:	802c      	strh	r4, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  401400:	6014      	str	r4, [r2, #0]
	*pSdram = 0x5;
  401402:	2705      	movs	r7, #5
  401404:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  401406:	6014      	str	r4, [r2, #0]
	*pSdram = 0x6;
  401408:	2706      	movs	r7, #6
  40140a:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40140c:	6014      	str	r4, [r2, #0]
	*pSdram = 0x7;
  40140e:	2707      	movs	r7, #7
  401410:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  401412:	6014      	str	r4, [r2, #0]
	*pSdram = 0x8;
  401414:	2408      	movs	r4, #8
  401416:	802c      	strh	r4, [r5, #0]

	/* Step 8. */
	/* A Mode Register Set (MRS) cycle is issued to program the parameters
	   of the SDRAM devices, in particular CAS latency and burst length. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_LOAD_MODEREG;
  401418:	6016      	str	r6, [r2, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  40141a:	6842      	ldr	r2, [r0, #4]
  40141c:	0052      	lsls	r2, r2, #1
  40141e:	442a      	add	r2, r5
  401420:	f64c 24fe 	movw	r4, #51966	; 0xcafe
  401424:	8014      	strh	r4, [r2, #0]
    
	/* Add some delays */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  401426:	2200      	movs	r2, #0
  401428:	9201      	str	r2, [sp, #4]
  40142a:	9a01      	ldr	r2, [sp, #4]
  40142c:	429a      	cmp	r2, r3
  40142e:	d205      	bcs.n	40143c <sdramc_init+0xf8>
  401430:	9a01      	ldr	r2, [sp, #4]
  401432:	3201      	adds	r2, #1
  401434:	9201      	str	r2, [sp, #4]
  401436:	9a01      	ldr	r2, [sp, #4]
  401438:	429a      	cmp	r2, r3
  40143a:	d3f9      	bcc.n	401430 <sdramc_init+0xec>

	/* For low-power SDR-SDRAM initialization, an Extended Mode Register Set
	   (EMRS) cycle is issued to program the SDR-SDRAM parameters (TCSR,
	   PASR, DS). The write address must be chosen so that BA[1] is set to
	   1 and BA[0] is set to 0. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_EXT_LOAD_MODEREG;
  40143c:	4a15      	ldr	r2, [pc, #84]	; (401494 <sdramc_init+0x150>)
  40143e:	2305      	movs	r3, #5
  401440:	6013      	str	r3, [r2, #0]
	*((uint16_t *)(pSdram + (1 << p_sdram->ul_bk1))) = 0x0;
  401442:	6800      	ldr	r0, [r0, #0]
  401444:	2302      	movs	r3, #2
  401446:	4083      	lsls	r3, r0
  401448:	f103 43e0 	add.w	r3, r3, #1879048192	; 0x70000000
  40144c:	2000      	movs	r0, #0
  40144e:	8018      	strh	r0, [r3, #0]

	/* Step 10. */
	/* The application must go into Normal Mode, setting Mode to 0 in the
	   Mode Register and perform a write access at any location in the\
	   SDRAM to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NORMAL;
  401450:	6010      	str	r0, [r2, #0]
	*pSdram = 0x0;
  401452:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  401456:	8018      	strh	r0, [r3, #0]

	/* Step 11. */

	/* Write the refresh rate into the count field in the SDRAMC Refresh
	   Timer register. Set Refresh timer to 15.625 us. */
	i = ul_clk / 1000u;
  401458:	4b11      	ldr	r3, [pc, #68]	; (4014a0 <sdramc_init+0x15c>)
  40145a:	fba3 1301 	umull	r1, r3, r3, r1
  40145e:	099b      	lsrs	r3, r3, #6
  401460:	9301      	str	r3, [sp, #4]
	i *= 15625u;
  401462:	9901      	ldr	r1, [sp, #4]
  401464:	f643 5309 	movw	r3, #15625	; 0x3d09
  401468:	fb03 f301 	mul.w	r3, r3, r1
  40146c:	9301      	str	r3, [sp, #4]
	i /= 1000000u;
  40146e:	9b01      	ldr	r3, [sp, #4]
  401470:	4909      	ldr	r1, [pc, #36]	; (401498 <sdramc_init+0x154>)
  401472:	fba1 1303 	umull	r1, r3, r1, r3
  401476:	0c9b      	lsrs	r3, r3, #18
  401478:	9301      	str	r3, [sp, #4]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  40147a:	9b01      	ldr	r3, [sp, #4]
  40147c:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401480:	6053      	str	r3, [r2, #4]
}
  401482:	b002      	add	sp, #8
  401484:	bcf0      	pop	{r4, r5, r6, r7}
  401486:	4770      	bx	lr
  401488:	e7fe      	b.n	401488 <sdramc_init+0x144>
  40148a:	bf00      	nop
  40148c:	20401034 	.word	0x20401034
  401490:	204000e7 	.word	0x204000e7
  401494:	40084000 	.word	0x40084000
  401498:	431bde83 	.word	0x431bde83
  40149c:	aaaaaaab 	.word	0xaaaaaaab
  4014a0:	10624dd3 	.word	0x10624dd3

004014a4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4014a4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4014a6:	23ac      	movs	r3, #172	; 0xac
  4014a8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4014aa:	680b      	ldr	r3, [r1, #0]
  4014ac:	684a      	ldr	r2, [r1, #4]
  4014ae:	fbb3 f3f2 	udiv	r3, r3, r2
  4014b2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4014b4:	1e5c      	subs	r4, r3, #1
  4014b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4014ba:	4294      	cmp	r4, r2
  4014bc:	d808      	bhi.n	4014d0 <uart_init+0x2c>
		return 1;

	p_uart->UART_BRGR = cd;
  4014be:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4014c0:	688b      	ldr	r3, [r1, #8]
  4014c2:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4014c4:	2350      	movs	r3, #80	; 0x50
  4014c6:	6003      	str	r3, [r0, #0]

	return 0;
  4014c8:	2000      	movs	r0, #0
}
  4014ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014ce:	4770      	bx	lr
		return 1;
  4014d0:	2001      	movs	r0, #1
  4014d2:	e7fa      	b.n	4014ca <uart_init+0x26>

004014d4 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  4014d4:	2340      	movs	r3, #64	; 0x40
  4014d6:	6003      	str	r3, [r0, #0]
  4014d8:	4770      	bx	lr

004014da <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4014da:	6943      	ldr	r3, [r0, #20]
  4014dc:	f013 0f02 	tst.w	r3, #2
  4014e0:	d002      	beq.n	4014e8 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4014e2:	61c1      	str	r1, [r0, #28]
	return 0;
  4014e4:	2000      	movs	r0, #0
  4014e6:	4770      	bx	lr
		return 1;
  4014e8:	2001      	movs	r0, #1
}
  4014ea:	4770      	bx	lr

004014ec <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4014ec:	6943      	ldr	r3, [r0, #20]
  4014ee:	f013 0f01 	tst.w	r3, #1
  4014f2:	d003      	beq.n	4014fc <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4014f4:	6983      	ldr	r3, [r0, #24]
  4014f6:	700b      	strb	r3, [r1, #0]
	return 0;
  4014f8:	2000      	movs	r0, #0
  4014fa:	4770      	bx	lr
		return 1;
  4014fc:	2001      	movs	r0, #1
}
  4014fe:	4770      	bx	lr

00401500 <ui_powerdown>:
{
	/* Initialize LEDs */
}

void ui_powerdown(void)
{
  401500:	4770      	bx	lr

00401502 <ui_wakeup>:
}

void ui_wakeup(void)
{
  401502:	4770      	bx	lr

00401504 <ui_loop_back_state>:
}

void ui_loop_back_state(bool b_started)
{
  401504:	4770      	bx	lr

00401506 <ui_process>:
}

void ui_process(uint16_t framenumber)
{
  401506:	4770      	bx	lr

00401508 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  401508:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
  40150a:	4b04      	ldr	r3, [pc, #16]	; (40151c <sysclk_enable_usb+0x14>)
  40150c:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
  40150e:	2000      	movs	r0, #0
  401510:	4b03      	ldr	r3, [pc, #12]	; (401520 <sysclk_enable_usb+0x18>)
  401512:	4798      	blx	r3
		pmc_enable_udpck();
  401514:	4b03      	ldr	r3, [pc, #12]	; (401524 <sysclk_enable_usb+0x1c>)
  401516:	4798      	blx	r3
  401518:	bd08      	pop	{r3, pc}
  40151a:	bf00      	nop
  40151c:	00402191 	.word	0x00402191
  401520:	004021c9 	.word	0x004021c9
  401524:	004021dd 	.word	0x004021dd

00401528 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401528:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  40152a:	4810      	ldr	r0, [pc, #64]	; (40156c <sysclk_init+0x44>)
  40152c:	4b10      	ldr	r3, [pc, #64]	; (401570 <sysclk_init+0x48>)
  40152e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401530:	213e      	movs	r1, #62	; 0x3e
  401532:	2000      	movs	r0, #0
  401534:	4b0f      	ldr	r3, [pc, #60]	; (401574 <sysclk_init+0x4c>)
  401536:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401538:	4c0f      	ldr	r4, [pc, #60]	; (401578 <sysclk_init+0x50>)
  40153a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40153c:	2800      	cmp	r0, #0
  40153e:	d0fc      	beq.n	40153a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401540:	4b0e      	ldr	r3, [pc, #56]	; (40157c <sysclk_init+0x54>)
  401542:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401544:	4a0e      	ldr	r2, [pc, #56]	; (401580 <sysclk_init+0x58>)
  401546:	4b0f      	ldr	r3, [pc, #60]	; (401584 <sysclk_init+0x5c>)
  401548:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40154a:	4c0f      	ldr	r4, [pc, #60]	; (401588 <sysclk_init+0x60>)
  40154c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40154e:	2800      	cmp	r0, #0
  401550:	d0fc      	beq.n	40154c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401552:	2002      	movs	r0, #2
  401554:	4b0d      	ldr	r3, [pc, #52]	; (40158c <sysclk_init+0x64>)
  401556:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401558:	2000      	movs	r0, #0
  40155a:	4b0d      	ldr	r3, [pc, #52]	; (401590 <sysclk_init+0x68>)
  40155c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40155e:	4b0d      	ldr	r3, [pc, #52]	; (401594 <sysclk_init+0x6c>)
  401560:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  401562:	4802      	ldr	r0, [pc, #8]	; (40156c <sysclk_init+0x44>)
  401564:	4b02      	ldr	r3, [pc, #8]	; (401570 <sysclk_init+0x48>)
  401566:	4798      	blx	r3
  401568:	bd10      	pop	{r4, pc}
  40156a:	bf00      	nop
  40156c:	08f0d180 	.word	0x08f0d180
  401570:	00403985 	.word	0x00403985
  401574:	0040210d 	.word	0x0040210d
  401578:	00402161 	.word	0x00402161
  40157c:	00402171 	.word	0x00402171
  401580:	20183f01 	.word	0x20183f01
  401584:	400e0600 	.word	0x400e0600
  401588:	00402181 	.word	0x00402181
  40158c:	00402071 	.word	0x00402071
  401590:	004020a9 	.word	0x004020a9
  401594:	00403879 	.word	0x00403879

00401598 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
  401598:	4b01      	ldr	r3, [pc, #4]	; (4015a0 <udi_vendor_getsetting+0x8>)
  40159a:	7818      	ldrb	r0, [r3, #0]
  40159c:	4770      	bx	lr
  40159e:	bf00      	nop
  4015a0:	20400abc 	.word	0x20400abc

004015a4 <udi_vendor_enable>:
{
  4015a4:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
  4015a6:	4b06      	ldr	r3, [pc, #24]	; (4015c0 <udi_vendor_enable+0x1c>)
  4015a8:	4798      	blx	r3
  4015aa:	78c3      	ldrb	r3, [r0, #3]
  4015ac:	4a05      	ldr	r2, [pc, #20]	; (4015c4 <udi_vendor_enable+0x20>)
  4015ae:	7013      	strb	r3, [r2, #0]
	if (1 == udi_vendor_alternate_setting) {
  4015b0:	2b01      	cmp	r3, #1
  4015b2:	d001      	beq.n	4015b8 <udi_vendor_enable+0x14>
	return true;
  4015b4:	2001      	movs	r0, #1
}
  4015b6:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
  4015b8:	4b03      	ldr	r3, [pc, #12]	; (4015c8 <udi_vendor_enable+0x24>)
  4015ba:	4798      	blx	r3
  4015bc:	bd08      	pop	{r3, pc}
  4015be:	bf00      	nop
  4015c0:	00401889 	.word	0x00401889
  4015c4:	20400abc 	.word	0x20400abc
  4015c8:	004066ad 	.word	0x004066ad

004015cc <udi_vendor_disable>:
{
  4015cc:	b508      	push	{r3, lr}
	if (1 == udi_vendor_alternate_setting) {
  4015ce:	4b04      	ldr	r3, [pc, #16]	; (4015e0 <udi_vendor_disable+0x14>)
  4015d0:	781b      	ldrb	r3, [r3, #0]
  4015d2:	2b01      	cmp	r3, #1
  4015d4:	d000      	beq.n	4015d8 <udi_vendor_disable+0xc>
  4015d6:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
  4015d8:	4b02      	ldr	r3, [pc, #8]	; (4015e4 <udi_vendor_disable+0x18>)
  4015da:	4798      	blx	r3
}
  4015dc:	e7fb      	b.n	4015d6 <udi_vendor_disable+0xa>
  4015de:	bf00      	nop
  4015e0:	20400abc 	.word	0x20400abc
  4015e4:	00404259 	.word	0x00404259

004015e8 <udi_vendor_setup>:
{
  4015e8:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
  4015ea:	4b13      	ldr	r3, [pc, #76]	; (401638 <udi_vendor_setup+0x50>)
  4015ec:	781b      	ldrb	r3, [r3, #0]
  4015ee:	f013 0f80 	tst.w	r3, #128	; 0x80
  4015f2:	d105      	bne.n	401600 <udi_vendor_setup+0x18>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
  4015f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4015f8:	2b40      	cmp	r3, #64	; 0x40
  4015fa:	d00f      	beq.n	40161c <udi_vendor_setup+0x34>
	return false; // Not supported request
  4015fc:	2000      	movs	r0, #0
  4015fe:	bd08      	pop	{r3, pc}
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
  401600:	f003 0360 	and.w	r3, r3, #96	; 0x60
  401604:	2b40      	cmp	r3, #64	; 0x40
  401606:	d001      	beq.n	40160c <udi_vendor_setup+0x24>
	return false; // Not supported request
  401608:	2000      	movs	r0, #0
  40160a:	bd08      	pop	{r3, pc}
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
  40160c:	4b0a      	ldr	r3, [pc, #40]	; (401638 <udi_vendor_setup+0x50>)
  40160e:	785b      	ldrb	r3, [r3, #1]
  401610:	b10b      	cbz	r3, 401616 <udi_vendor_setup+0x2e>
	return false; // Not supported request
  401612:	2000      	movs	r0, #0
  401614:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_IN_RECEIVED();
  401616:	4b09      	ldr	r3, [pc, #36]	; (40163c <udi_vendor_setup+0x54>)
  401618:	4798      	blx	r3
  40161a:	bd08      	pop	{r3, pc}
				&& (udd_g_ctrlreq.req.bRequest == 0)
  40161c:	4b06      	ldr	r3, [pc, #24]	; (401638 <udi_vendor_setup+0x50>)
  40161e:	785b      	ldrb	r3, [r3, #1]
  401620:	b93b      	cbnz	r3, 401632 <udi_vendor_setup+0x4a>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
  401622:	4b05      	ldr	r3, [pc, #20]	; (401638 <udi_vendor_setup+0x50>)
  401624:	88db      	ldrh	r3, [r3, #6]
  401626:	b90b      	cbnz	r3, 40162c <udi_vendor_setup+0x44>
	return false; // Not supported request
  401628:	2000      	movs	r0, #0
}
  40162a:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
  40162c:	4b04      	ldr	r3, [pc, #16]	; (401640 <udi_vendor_setup+0x58>)
  40162e:	4798      	blx	r3
  401630:	bd08      	pop	{r3, pc}
	return false; // Not supported request
  401632:	2000      	movs	r0, #0
  401634:	bd08      	pop	{r3, pc}
  401636:	bf00      	nop
  401638:	2040103c 	.word	0x2040103c
  40163c:	00404285 	.word	0x00404285
  401640:	00404265 	.word	0x00404265

00401644 <udi_vendor_interrupt_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  401644:	b510      	push	{r4, lr}
  401646:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_IN,
  401648:	9200      	str	r2, [sp, #0]
  40164a:	460b      	mov	r3, r1
  40164c:	4602      	mov	r2, r0
  40164e:	2100      	movs	r1, #0
  401650:	2081      	movs	r0, #129	; 0x81
  401652:	4c02      	ldr	r4, [pc, #8]	; (40165c <udi_vendor_interrupt_in_run+0x18>)
  401654:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  401656:	b002      	add	sp, #8
  401658:	bd10      	pop	{r4, pc}
  40165a:	bf00      	nop
  40165c:	00403421 	.word	0x00403421

00401660 <udi_vendor_interrupt_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  401660:	b510      	push	{r4, lr}
  401662:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_OUT,
  401664:	9200      	str	r2, [sp, #0]
  401666:	460b      	mov	r3, r1
  401668:	4602      	mov	r2, r0
  40166a:	2100      	movs	r1, #0
  40166c:	2002      	movs	r0, #2
  40166e:	4c02      	ldr	r4, [pc, #8]	; (401678 <udi_vendor_interrupt_out_run+0x18>)
  401670:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  401672:	b002      	add	sp, #8
  401674:	bd10      	pop	{r4, pc}
  401676:	bf00      	nop
  401678:	00403421 	.word	0x00403421

0040167c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  40167c:	b510      	push	{r4, lr}
  40167e:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
  401680:	9200      	str	r2, [sp, #0]
  401682:	460b      	mov	r3, r1
  401684:	4602      	mov	r2, r0
  401686:	2100      	movs	r1, #0
  401688:	2083      	movs	r0, #131	; 0x83
  40168a:	4c02      	ldr	r4, [pc, #8]	; (401694 <udi_vendor_bulk_in_run+0x18>)
  40168c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  40168e:	b002      	add	sp, #8
  401690:	bd10      	pop	{r4, pc}
  401692:	bf00      	nop
  401694:	00403421 	.word	0x00403421

00401698 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  401698:	b510      	push	{r4, lr}
  40169a:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
  40169c:	9200      	str	r2, [sp, #0]
  40169e:	460b      	mov	r3, r1
  4016a0:	4602      	mov	r2, r0
  4016a2:	2100      	movs	r1, #0
  4016a4:	2004      	movs	r0, #4
  4016a6:	4c02      	ldr	r4, [pc, #8]	; (4016b0 <udi_vendor_bulk_out_run+0x18>)
  4016a8:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  4016aa:	b002      	add	sp, #8
  4016ac:	bd10      	pop	{r4, pc}
  4016ae:	bf00      	nop
  4016b0:	00403421 	.word	0x00403421

004016b4 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  4016b4:	b510      	push	{r4, lr}
  4016b6:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
  4016b8:	9200      	str	r2, [sp, #0]
  4016ba:	460b      	mov	r3, r1
  4016bc:	4602      	mov	r2, r0
  4016be:	2100      	movs	r1, #0
  4016c0:	2085      	movs	r0, #133	; 0x85
  4016c2:	4c02      	ldr	r4, [pc, #8]	; (4016cc <udi_vendor_iso_in_run+0x18>)
  4016c4:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  4016c6:	b002      	add	sp, #8
  4016c8:	bd10      	pop	{r4, pc}
  4016ca:	bf00      	nop
  4016cc:	00403421 	.word	0x00403421

004016d0 <udi_vendor_iso_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  4016d0:	b510      	push	{r4, lr}
  4016d2:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_ISO_OUT,
  4016d4:	9200      	str	r2, [sp, #0]
  4016d6:	460b      	mov	r3, r1
  4016d8:	4602      	mov	r2, r0
  4016da:	2100      	movs	r1, #0
  4016dc:	2006      	movs	r0, #6
  4016de:	4c02      	ldr	r4, [pc, #8]	; (4016e8 <udi_vendor_iso_out_run+0x18>)
  4016e0:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  4016e2:	b002      	add	sp, #8
  4016e4:	bd10      	pop	{r4, pc}
  4016e6:	bf00      	nop
  4016e8:	00403421 	.word	0x00403421

004016ec <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  4016ec:	4b10      	ldr	r3, [pc, #64]	; (401730 <udc_next_desc_in_iface+0x44>)
  4016ee:	681b      	ldr	r3, [r3, #0]
  4016f0:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  4016f2:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  4016f4:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  4016f6:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4016f8:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  4016fa:	4290      	cmp	r0, r2
  4016fc:	d211      	bcs.n	401722 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  4016fe:	7843      	ldrb	r3, [r0, #1]
  401700:	2b04      	cmp	r3, #4
  401702:	d010      	beq.n	401726 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  401704:	428b      	cmp	r3, r1
  401706:	d009      	beq.n	40171c <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  401708:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  40170a:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  40170c:	4290      	cmp	r0, r2
  40170e:	d206      	bcs.n	40171e <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  401710:	7843      	ldrb	r3, [r0, #1]
  401712:	2b04      	cmp	r3, #4
  401714:	d009      	beq.n	40172a <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  401716:	428b      	cmp	r3, r1
  401718:	d1f6      	bne.n	401708 <udc_next_desc_in_iface+0x1c>
  40171a:	e007      	b.n	40172c <udc_next_desc_in_iface+0x40>
  40171c:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  40171e:	2000      	movs	r0, #0
  401720:	4770      	bx	lr
  401722:	2000      	movs	r0, #0
  401724:	4770      	bx	lr
  401726:	2000      	movs	r0, #0
  401728:	4770      	bx	lr
  40172a:	2000      	movs	r0, #0
}
  40172c:	4770      	bx	lr
  40172e:	bf00      	nop
  401730:	20400acc 	.word	0x20400acc

00401734 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  401734:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  401736:	4b03      	ldr	r3, [pc, #12]	; (401744 <udc_valid_address+0x10>)
  401738:	7898      	ldrb	r0, [r3, #2]
  40173a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40173e:	4b02      	ldr	r3, [pc, #8]	; (401748 <udc_valid_address+0x14>)
  401740:	4798      	blx	r3
  401742:	bd08      	pop	{r3, pc}
  401744:	2040103c 	.word	0x2040103c
  401748:	0040317d 	.word	0x0040317d

0040174c <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  40174c:	4b19      	ldr	r3, [pc, #100]	; (4017b4 <udc_update_iface_desc+0x68>)
  40174e:	781b      	ldrb	r3, [r3, #0]
  401750:	b34b      	cbz	r3, 4017a6 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401752:	4b19      	ldr	r3, [pc, #100]	; (4017b8 <udc_update_iface_desc+0x6c>)
  401754:	681b      	ldr	r3, [r3, #0]
  401756:	681b      	ldr	r3, [r3, #0]
  401758:	791a      	ldrb	r2, [r3, #4]
  40175a:	4282      	cmp	r2, r0
  40175c:	d925      	bls.n	4017aa <udc_update_iface_desc+0x5e>
{
  40175e:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  401760:	4a16      	ldr	r2, [pc, #88]	; (4017bc <udc_update_iface_desc+0x70>)
  401762:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  401764:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  401766:	441c      	add	r4, r3
	while (ptr_end_desc >
  401768:	42a3      	cmp	r3, r4
  40176a:	d220      	bcs.n	4017ae <udc_update_iface_desc+0x62>
  40176c:	2500      	movs	r5, #0
  40176e:	2601      	movs	r6, #1
  401770:	e007      	b.n	401782 <udc_update_iface_desc+0x36>
  401772:	4a12      	ldr	r2, [pc, #72]	; (4017bc <udc_update_iface_desc+0x70>)
  401774:	6013      	str	r3, [r2, #0]
  401776:	e00f      	b.n	401798 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  401778:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  40177a:	4413      	add	r3, r2
  40177c:	4635      	mov	r5, r6
	while (ptr_end_desc >
  40177e:	42a3      	cmp	r3, r4
  401780:	d20c      	bcs.n	40179c <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  401782:	785a      	ldrb	r2, [r3, #1]
  401784:	2a04      	cmp	r2, #4
  401786:	d1f7      	bne.n	401778 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  401788:	789a      	ldrb	r2, [r3, #2]
  40178a:	4282      	cmp	r2, r0
  40178c:	d1f4      	bne.n	401778 <udc_update_iface_desc+0x2c>
  40178e:	78da      	ldrb	r2, [r3, #3]
  401790:	428a      	cmp	r2, r1
  401792:	d1f1      	bne.n	401778 <udc_update_iface_desc+0x2c>
  401794:	2d00      	cmp	r5, #0
  401796:	d1ec      	bne.n	401772 <udc_update_iface_desc+0x26>
				return true; // Interface found
  401798:	2001      	movs	r0, #1
  40179a:	e002      	b.n	4017a2 <udc_update_iface_desc+0x56>
  40179c:	4a07      	ldr	r2, [pc, #28]	; (4017bc <udc_update_iface_desc+0x70>)
  40179e:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  4017a0:	2000      	movs	r0, #0
}
  4017a2:	bc70      	pop	{r4, r5, r6}
  4017a4:	4770      	bx	lr
		return false;
  4017a6:	2000      	movs	r0, #0
  4017a8:	4770      	bx	lr
		return false;
  4017aa:	2000      	movs	r0, #0
  4017ac:	4770      	bx	lr
	return false; // Interface not found
  4017ae:	2000      	movs	r0, #0
  4017b0:	e7f7      	b.n	4017a2 <udc_update_iface_desc+0x56>
  4017b2:	bf00      	nop
  4017b4:	20400ac8 	.word	0x20400ac8
  4017b8:	20400acc 	.word	0x20400acc
  4017bc:	20400ad0 	.word	0x20400ad0

004017c0 <udc_iface_disable>:
{
  4017c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4017c4:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  4017c6:	2100      	movs	r1, #0
  4017c8:	4b13      	ldr	r3, [pc, #76]	; (401818 <udc_iface_disable+0x58>)
  4017ca:	4798      	blx	r3
  4017cc:	4680      	mov	r8, r0
  4017ce:	b910      	cbnz	r0, 4017d6 <udc_iface_disable+0x16>
}
  4017d0:	4640      	mov	r0, r8
  4017d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4017d6:	4b11      	ldr	r3, [pc, #68]	; (40181c <udc_iface_disable+0x5c>)
  4017d8:	681b      	ldr	r3, [r3, #0]
  4017da:	685b      	ldr	r3, [r3, #4]
  4017dc:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4017e0:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4017e4:	4798      	blx	r3
  4017e6:	4601      	mov	r1, r0
  4017e8:	4620      	mov	r0, r4
  4017ea:	4b0b      	ldr	r3, [pc, #44]	; (401818 <udc_iface_disable+0x58>)
  4017ec:	4798      	blx	r3
  4017ee:	4680      	mov	r8, r0
  4017f0:	2800      	cmp	r0, #0
  4017f2:	d0ed      	beq.n	4017d0 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4017f4:	4b0a      	ldr	r3, [pc, #40]	; (401820 <udc_iface_disable+0x60>)
  4017f6:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4017f8:	2605      	movs	r6, #5
  4017fa:	4d0a      	ldr	r5, [pc, #40]	; (401824 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  4017fc:	4f0a      	ldr	r7, [pc, #40]	; (401828 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4017fe:	4631      	mov	r1, r6
  401800:	4620      	mov	r0, r4
  401802:	47a8      	blx	r5
			if (NULL == ep_desc) {
  401804:	4604      	mov	r4, r0
  401806:	b110      	cbz	r0, 40180e <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  401808:	7880      	ldrb	r0, [r0, #2]
  40180a:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40180c:	e7f7      	b.n	4017fe <udc_iface_disable+0x3e>
	udi_api->disable();
  40180e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  401812:	4798      	blx	r3
	return true;
  401814:	e7dc      	b.n	4017d0 <udc_iface_disable+0x10>
  401816:	bf00      	nop
  401818:	0040174d 	.word	0x0040174d
  40181c:	20400acc 	.word	0x20400acc
  401820:	20400ad0 	.word	0x20400ad0
  401824:	004016ed 	.word	0x004016ed
  401828:	004031d1 	.word	0x004031d1

0040182c <udc_iface_enable>:
{
  40182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401830:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  401832:	4b10      	ldr	r3, [pc, #64]	; (401874 <udc_iface_enable+0x48>)
  401834:	4798      	blx	r3
  401836:	4603      	mov	r3, r0
  401838:	b1c8      	cbz	r0, 40186e <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  40183a:	4b0f      	ldr	r3, [pc, #60]	; (401878 <udc_iface_enable+0x4c>)
  40183c:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40183e:	2605      	movs	r6, #5
  401840:	4d0e      	ldr	r5, [pc, #56]	; (40187c <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  401842:	4f0f      	ldr	r7, [pc, #60]	; (401880 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401844:	4631      	mov	r1, r6
  401846:	4620      	mov	r0, r4
  401848:	47a8      	blx	r5
		if (NULL == ep_desc)
  40184a:	4604      	mov	r4, r0
  40184c:	b138      	cbz	r0, 40185e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40184e:	8882      	ldrh	r2, [r0, #4]
  401850:	78c1      	ldrb	r1, [r0, #3]
  401852:	7880      	ldrb	r0, [r0, #2]
  401854:	47b8      	blx	r7
  401856:	4603      	mov	r3, r0
  401858:	2800      	cmp	r0, #0
  40185a:	d1f3      	bne.n	401844 <udc_iface_enable+0x18>
  40185c:	e007      	b.n	40186e <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40185e:	4b09      	ldr	r3, [pc, #36]	; (401884 <udc_iface_enable+0x58>)
  401860:	681b      	ldr	r3, [r3, #0]
  401862:	685b      	ldr	r3, [r3, #4]
  401864:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  401868:	681b      	ldr	r3, [r3, #0]
  40186a:	4798      	blx	r3
  40186c:	4603      	mov	r3, r0
}
  40186e:	4618      	mov	r0, r3
  401870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401874:	0040174d 	.word	0x0040174d
  401878:	20400ad0 	.word	0x20400ad0
  40187c:	004016ed 	.word	0x004016ed
  401880:	0040352d 	.word	0x0040352d
  401884:	20400acc 	.word	0x20400acc

00401888 <udc_get_interface_desc>:
}
  401888:	4b01      	ldr	r3, [pc, #4]	; (401890 <udc_get_interface_desc+0x8>)
  40188a:	6818      	ldr	r0, [r3, #0]
  40188c:	4770      	bx	lr
  40188e:	bf00      	nop
  401890:	20400ad0 	.word	0x20400ad0

00401894 <udc_start>:
{
  401894:	b508      	push	{r3, lr}
	udd_enable();
  401896:	4b01      	ldr	r3, [pc, #4]	; (40189c <udc_start+0x8>)
  401898:	4798      	blx	r3
  40189a:	bd08      	pop	{r3, pc}
  40189c:	00403031 	.word	0x00403031

004018a0 <udc_reset>:
{
  4018a0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  4018a2:	4b0d      	ldr	r3, [pc, #52]	; (4018d8 <udc_reset+0x38>)
  4018a4:	781b      	ldrb	r3, [r3, #0]
  4018a6:	b183      	cbz	r3, 4018ca <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4018a8:	4b0c      	ldr	r3, [pc, #48]	; (4018dc <udc_reset+0x3c>)
  4018aa:	681b      	ldr	r3, [r3, #0]
  4018ac:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4018ae:	791b      	ldrb	r3, [r3, #4]
  4018b0:	b15b      	cbz	r3, 4018ca <udc_reset+0x2a>
  4018b2:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  4018b4:	4e0a      	ldr	r6, [pc, #40]	; (4018e0 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4018b6:	4d09      	ldr	r5, [pc, #36]	; (4018dc <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  4018b8:	4620      	mov	r0, r4
  4018ba:	47b0      	blx	r6
				iface_num++) {
  4018bc:	3401      	adds	r4, #1
  4018be:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4018c0:	682b      	ldr	r3, [r5, #0]
  4018c2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4018c4:	791b      	ldrb	r3, [r3, #4]
  4018c6:	42a3      	cmp	r3, r4
  4018c8:	d8f6      	bhi.n	4018b8 <udc_reset+0x18>
	udc_num_configuration = 0;
  4018ca:	2200      	movs	r2, #0
  4018cc:	4b02      	ldr	r3, [pc, #8]	; (4018d8 <udc_reset+0x38>)
  4018ce:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  4018d0:	2201      	movs	r2, #1
  4018d2:	4b04      	ldr	r3, [pc, #16]	; (4018e4 <udc_reset+0x44>)
  4018d4:	801a      	strh	r2, [r3, #0]
  4018d6:	bd70      	pop	{r4, r5, r6, pc}
  4018d8:	20400ac8 	.word	0x20400ac8
  4018dc:	20400acc 	.word	0x20400acc
  4018e0:	004017c1 	.word	0x004017c1
  4018e4:	20400abe 	.word	0x20400abe

004018e8 <udc_sof_notify>:
{
  4018e8:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  4018ea:	4b0d      	ldr	r3, [pc, #52]	; (401920 <udc_sof_notify+0x38>)
  4018ec:	781b      	ldrb	r3, [r3, #0]
  4018ee:	b1b3      	cbz	r3, 40191e <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4018f0:	4b0c      	ldr	r3, [pc, #48]	; (401924 <udc_sof_notify+0x3c>)
  4018f2:	681b      	ldr	r3, [r3, #0]
  4018f4:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4018f6:	7912      	ldrb	r2, [r2, #4]
  4018f8:	b18a      	cbz	r2, 40191e <udc_sof_notify+0x36>
  4018fa:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4018fc:	4d09      	ldr	r5, [pc, #36]	; (401924 <udc_sof_notify+0x3c>)
  4018fe:	e006      	b.n	40190e <udc_sof_notify+0x26>
				iface_num++) {
  401900:	3401      	adds	r4, #1
  401902:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401904:	682b      	ldr	r3, [r5, #0]
  401906:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  401908:	7912      	ldrb	r2, [r2, #4]
  40190a:	42a2      	cmp	r2, r4
  40190c:	d907      	bls.n	40191e <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  40190e:	685b      	ldr	r3, [r3, #4]
  401910:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  401914:	691b      	ldr	r3, [r3, #16]
  401916:	2b00      	cmp	r3, #0
  401918:	d0f2      	beq.n	401900 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  40191a:	4798      	blx	r3
  40191c:	e7f0      	b.n	401900 <udc_sof_notify+0x18>
  40191e:	bd38      	pop	{r3, r4, r5, pc}
  401920:	20400ac8 	.word	0x20400ac8
  401924:	20400acc 	.word	0x20400acc

00401928 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  401928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  40192a:	4b88      	ldr	r3, [pc, #544]	; (401b4c <udc_process_setup+0x224>)
  40192c:	2200      	movs	r2, #0
  40192e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  401930:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401932:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  401934:	781b      	ldrb	r3, [r3, #0]
  401936:	f013 0f80 	tst.w	r3, #128	; 0x80
  40193a:	d114      	bne.n	401966 <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  40193c:	f013 0f60 	tst.w	r3, #96	; 0x60
  401940:	f000 80d5 	beq.w	401aee <udc_process_setup+0x1c6>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  401944:	4b81      	ldr	r3, [pc, #516]	; (401b4c <udc_process_setup+0x224>)
  401946:	781b      	ldrb	r3, [r3, #0]
  401948:	f003 031f 	and.w	r3, r3, #31
  40194c:	2b01      	cmp	r3, #1
  40194e:	f000 816c 	beq.w	401c2a <udc_process_setup+0x302>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  401952:	4b7e      	ldr	r3, [pc, #504]	; (401b4c <udc_process_setup+0x224>)
  401954:	781b      	ldrb	r3, [r3, #0]
  401956:	f003 031f 	and.w	r3, r3, #31
  40195a:	2b02      	cmp	r3, #2
  40195c:	f000 81c7 	beq.w	401cee <udc_process_setup+0x3c6>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  401960:	2300      	movs	r3, #0
#endif
}
  401962:	4618      	mov	r0, r3
  401964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  401966:	4a79      	ldr	r2, [pc, #484]	; (401b4c <udc_process_setup+0x224>)
  401968:	88d2      	ldrh	r2, [r2, #6]
  40196a:	2a00      	cmp	r2, #0
  40196c:	f000 81e8 	beq.w	401d40 <udc_process_setup+0x418>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  401970:	f013 0f60 	tst.w	r3, #96	; 0x60
  401974:	d1e6      	bne.n	401944 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  401976:	f013 031f 	ands.w	r3, r3, #31
  40197a:	d106      	bne.n	40198a <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  40197c:	4973      	ldr	r1, [pc, #460]	; (401b4c <udc_process_setup+0x224>)
  40197e:	7849      	ldrb	r1, [r1, #1]
  401980:	2906      	cmp	r1, #6
  401982:	d014      	beq.n	4019ae <udc_process_setup+0x86>
  401984:	2908      	cmp	r1, #8
  401986:	d074      	beq.n	401a72 <udc_process_setup+0x14a>
  401988:	b151      	cbz	r1, 4019a0 <udc_process_setup+0x78>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40198a:	2b01      	cmp	r3, #1
  40198c:	d079      	beq.n	401a82 <udc_process_setup+0x15a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  40198e:	2b02      	cmp	r3, #2
  401990:	d1d8      	bne.n	401944 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  401992:	4b6e      	ldr	r3, [pc, #440]	; (401b4c <udc_process_setup+0x224>)
  401994:	785b      	ldrb	r3, [r3, #1]
  401996:	2b00      	cmp	r3, #0
  401998:	f000 809b 	beq.w	401ad2 <udc_process_setup+0x1aa>
	return false;
  40199c:	2300      	movs	r3, #0
  40199e:	e188      	b.n	401cb2 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  4019a0:	2a02      	cmp	r2, #2
  4019a2:	d1d6      	bne.n	401952 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  4019a4:	2102      	movs	r1, #2
  4019a6:	486a      	ldr	r0, [pc, #424]	; (401b50 <udc_process_setup+0x228>)
  4019a8:	4b6a      	ldr	r3, [pc, #424]	; (401b54 <udc_process_setup+0x22c>)
  4019aa:	4798      	blx	r3
  4019ac:	e0bb      	b.n	401b26 <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4019ae:	4b67      	ldr	r3, [pc, #412]	; (401b4c <udc_process_setup+0x224>)
  4019b0:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4019b2:	0a13      	lsrs	r3, r2, #8
  4019b4:	3b01      	subs	r3, #1
  4019b6:	2b0e      	cmp	r3, #14
  4019b8:	f200 8178 	bhi.w	401cac <udc_process_setup+0x384>
  4019bc:	e8df f013 	tbh	[pc, r3, lsl #1]
  4019c0:	001d000f 	.word	0x001d000f
  4019c4:	01760037 	.word	0x01760037
  4019c8:	01760176 	.word	0x01760176
  4019cc:	01760176 	.word	0x01760176
  4019d0:	01760176 	.word	0x01760176
  4019d4:	01760176 	.word	0x01760176
  4019d8:	01760176 	.word	0x01760176
  4019dc:	002f      	.short	0x002f
				(uint8_t *) udc_config.confdev_lsfs,
  4019de:	4b5e      	ldr	r3, [pc, #376]	; (401b58 <udc_process_setup+0x230>)
  4019e0:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  4019e2:	7801      	ldrb	r1, [r0, #0]
  4019e4:	4b5b      	ldr	r3, [pc, #364]	; (401b54 <udc_process_setup+0x22c>)
  4019e6:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  4019e8:	4b58      	ldr	r3, [pc, #352]	; (401b4c <udc_process_setup+0x224>)
  4019ea:	88da      	ldrh	r2, [r3, #6]
  4019ec:	899b      	ldrh	r3, [r3, #12]
  4019ee:	4293      	cmp	r3, r2
  4019f0:	f240 8099 	bls.w	401b26 <udc_process_setup+0x1fe>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  4019f4:	4b55      	ldr	r3, [pc, #340]	; (401b4c <udc_process_setup+0x224>)
  4019f6:	819a      	strh	r2, [r3, #12]
  4019f8:	e095      	b.n	401b26 <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4019fa:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  4019fc:	4b56      	ldr	r3, [pc, #344]	; (401b58 <udc_process_setup+0x230>)
  4019fe:	681b      	ldr	r3, [r3, #0]
  401a00:	7c5b      	ldrb	r3, [r3, #17]
  401a02:	4293      	cmp	r3, r2
  401a04:	d9a5      	bls.n	401952 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  401a06:	4b54      	ldr	r3, [pc, #336]	; (401b58 <udc_process_setup+0x230>)
  401a08:	685b      	ldr	r3, [r3, #4]
  401a0a:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  401a0e:	8841      	ldrh	r1, [r0, #2]
  401a10:	4b50      	ldr	r3, [pc, #320]	; (401b54 <udc_process_setup+0x22c>)
  401a12:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  401a14:	4b4d      	ldr	r3, [pc, #308]	; (401b4c <udc_process_setup+0x224>)
  401a16:	689b      	ldr	r3, [r3, #8]
  401a18:	2202      	movs	r2, #2
  401a1a:	705a      	strb	r2, [r3, #1]
  401a1c:	e7e4      	b.n	4019e8 <udc_process_setup+0xc0>
		if (udc_config.conf_bos == NULL) {
  401a1e:	4b4e      	ldr	r3, [pc, #312]	; (401b58 <udc_process_setup+0x230>)
  401a20:	6898      	ldr	r0, [r3, #8]
  401a22:	2800      	cmp	r0, #0
  401a24:	d095      	beq.n	401952 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  401a26:	8841      	ldrh	r1, [r0, #2]
  401a28:	4b4a      	ldr	r3, [pc, #296]	; (401b54 <udc_process_setup+0x22c>)
  401a2a:	4798      	blx	r3
  401a2c:	e7dc      	b.n	4019e8 <udc_process_setup+0xc0>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  401a2e:	b2d2      	uxtb	r2, r2
  401a30:	2a01      	cmp	r2, #1
  401a32:	d01b      	beq.n	401a6c <udc_process_setup+0x144>
  401a34:	b1aa      	cbz	r2, 401a62 <udc_process_setup+0x13a>
  401a36:	2a02      	cmp	r2, #2
  401a38:	d184      	bne.n	401944 <udc_process_setup+0x1c>
		str = udc_string_product_name;
  401a3a:	4a48      	ldr	r2, [pc, #288]	; (401b5c <udc_process_setup+0x234>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  401a3c:	240a      	movs	r4, #10
  401a3e:	3a01      	subs	r2, #1
  401a40:	4947      	ldr	r1, [pc, #284]	; (401b60 <udc_process_setup+0x238>)
  401a42:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  401a44:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  401a48:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
  401a4c:	3301      	adds	r3, #1
  401a4e:	b2db      	uxtb	r3, r3
  401a50:	42a3      	cmp	r3, r4
  401a52:	d3f7      	bcc.n	401a44 <udc_process_setup+0x11c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  401a54:	0061      	lsls	r1, r4, #1
  401a56:	3102      	adds	r1, #2
  401a58:	4841      	ldr	r0, [pc, #260]	; (401b60 <udc_process_setup+0x238>)
  401a5a:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  401a5c:	4b3d      	ldr	r3, [pc, #244]	; (401b54 <udc_process_setup+0x22c>)
  401a5e:	4798      	blx	r3
  401a60:	e7c2      	b.n	4019e8 <udc_process_setup+0xc0>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  401a62:	2104      	movs	r1, #4
  401a64:	483f      	ldr	r0, [pc, #252]	; (401b64 <udc_process_setup+0x23c>)
  401a66:	4b3b      	ldr	r3, [pc, #236]	; (401b54 <udc_process_setup+0x22c>)
  401a68:	4798      	blx	r3
  401a6a:	e7bd      	b.n	4019e8 <udc_process_setup+0xc0>
		str = udc_string_manufacturer_name;
  401a6c:	4a3e      	ldr	r2, [pc, #248]	; (401b68 <udc_process_setup+0x240>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  401a6e:	2415      	movs	r4, #21
  401a70:	e7e5      	b.n	401a3e <udc_process_setup+0x116>
	if (udd_g_ctrlreq.req.wLength != 1) {
  401a72:	2a01      	cmp	r2, #1
  401a74:	f47f af6d 	bne.w	401952 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
  401a78:	2101      	movs	r1, #1
  401a7a:	483c      	ldr	r0, [pc, #240]	; (401b6c <udc_process_setup+0x244>)
  401a7c:	4b35      	ldr	r3, [pc, #212]	; (401b54 <udc_process_setup+0x22c>)
  401a7e:	4798      	blx	r3
  401a80:	e051      	b.n	401b26 <udc_process_setup+0x1fe>
			switch (udd_g_ctrlreq.req.bRequest) {
  401a82:	4932      	ldr	r1, [pc, #200]	; (401b4c <udc_process_setup+0x224>)
  401a84:	7849      	ldrb	r1, [r1, #1]
  401a86:	290a      	cmp	r1, #10
  401a88:	d181      	bne.n	40198e <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  401a8a:	2a01      	cmp	r2, #1
  401a8c:	f040 80cd 	bne.w	401c2a <udc_process_setup+0x302>
	if (!udc_num_configuration) {
  401a90:	4b36      	ldr	r3, [pc, #216]	; (401b6c <udc_process_setup+0x244>)
  401a92:	781b      	ldrb	r3, [r3, #0]
  401a94:	2b00      	cmp	r3, #0
  401a96:	f000 80c8 	beq.w	401c2a <udc_process_setup+0x302>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401a9a:	4b2c      	ldr	r3, [pc, #176]	; (401b4c <udc_process_setup+0x224>)
  401a9c:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401a9e:	4b34      	ldr	r3, [pc, #208]	; (401b70 <udc_process_setup+0x248>)
  401aa0:	681d      	ldr	r5, [r3, #0]
  401aa2:	682b      	ldr	r3, [r5, #0]
  401aa4:	791b      	ldrb	r3, [r3, #4]
  401aa6:	42a3      	cmp	r3, r4
  401aa8:	f240 80bf 	bls.w	401c2a <udc_process_setup+0x302>
	if (!udc_update_iface_desc(iface_num, 0)) {
  401aac:	2100      	movs	r1, #0
  401aae:	4620      	mov	r0, r4
  401ab0:	4b30      	ldr	r3, [pc, #192]	; (401b74 <udc_process_setup+0x24c>)
  401ab2:	4798      	blx	r3
  401ab4:	2800      	cmp	r0, #0
  401ab6:	f43f af45 	beq.w	401944 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401aba:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  401abc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  401ac0:	68db      	ldr	r3, [r3, #12]
  401ac2:	4798      	blx	r3
  401ac4:	4b2c      	ldr	r3, [pc, #176]	; (401b78 <udc_process_setup+0x250>)
  401ac6:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  401ac8:	2101      	movs	r1, #1
  401aca:	4618      	mov	r0, r3
  401acc:	4b21      	ldr	r3, [pc, #132]	; (401b54 <udc_process_setup+0x22c>)
  401ace:	4798      	blx	r3
  401ad0:	e029      	b.n	401b26 <udc_process_setup+0x1fe>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  401ad2:	2a02      	cmp	r2, #2
  401ad4:	f47f af3d 	bne.w	401952 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  401ad8:	4b1c      	ldr	r3, [pc, #112]	; (401b4c <udc_process_setup+0x224>)
  401ada:	7918      	ldrb	r0, [r3, #4]
  401adc:	4b27      	ldr	r3, [pc, #156]	; (401b7c <udc_process_setup+0x254>)
  401ade:	4798      	blx	r3
  401ae0:	4b27      	ldr	r3, [pc, #156]	; (401b80 <udc_process_setup+0x258>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  401ae2:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  401ae4:	2102      	movs	r1, #2
  401ae6:	4618      	mov	r0, r3
  401ae8:	4b1a      	ldr	r3, [pc, #104]	; (401b54 <udc_process_setup+0x22c>)
  401aea:	4798      	blx	r3
  401aec:	e01b      	b.n	401b26 <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  401aee:	f013 031f 	ands.w	r3, r3, #31
  401af2:	f040 8083 	bne.w	401bfc <udc_process_setup+0x2d4>
			switch (udd_g_ctrlreq.req.bRequest) {
  401af6:	4a15      	ldr	r2, [pc, #84]	; (401b4c <udc_process_setup+0x224>)
  401af8:	7852      	ldrb	r2, [r2, #1]
  401afa:	3a01      	subs	r2, #1
  401afc:	2a08      	cmp	r2, #8
  401afe:	d87d      	bhi.n	401bfc <udc_process_setup+0x2d4>
  401b00:	e8df f012 	tbh	[pc, r2, lsl #1]
  401b04:	007c0013 	.word	0x007c0013
  401b08:	007c00d6 	.word	0x007c00d6
  401b0c:	007c0009 	.word	0x007c0009
  401b10:	007c007c 	.word	0x007c007c
  401b14:	0042      	.short	0x0042
	if (udd_g_ctrlreq.req.wLength) {
  401b16:	4b0d      	ldr	r3, [pc, #52]	; (401b4c <udc_process_setup+0x224>)
  401b18:	88db      	ldrh	r3, [r3, #6]
  401b1a:	2b00      	cmp	r3, #0
  401b1c:	f47f af19 	bne.w	401952 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
  401b20:	4a18      	ldr	r2, [pc, #96]	; (401b84 <udc_process_setup+0x25c>)
  401b22:	4b0a      	ldr	r3, [pc, #40]	; (401b4c <udc_process_setup+0x224>)
  401b24:	611a      	str	r2, [r3, #16]
			return true;
  401b26:	2301      	movs	r3, #1
  401b28:	e71b      	b.n	401962 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  401b2a:	4b08      	ldr	r3, [pc, #32]	; (401b4c <udc_process_setup+0x224>)
  401b2c:	88db      	ldrh	r3, [r3, #6]
  401b2e:	2b00      	cmp	r3, #0
  401b30:	f47f af0f 	bne.w	401952 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  401b34:	4b05      	ldr	r3, [pc, #20]	; (401b4c <udc_process_setup+0x224>)
  401b36:	885b      	ldrh	r3, [r3, #2]
  401b38:	2b01      	cmp	r3, #1
  401b3a:	f47f af0a 	bne.w	401952 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  401b3e:	4a04      	ldr	r2, [pc, #16]	; (401b50 <udc_process_setup+0x228>)
  401b40:	8813      	ldrh	r3, [r2, #0]
  401b42:	f023 0302 	bic.w	r3, r3, #2
  401b46:	8013      	strh	r3, [r2, #0]
  401b48:	e7ed      	b.n	401b26 <udc_process_setup+0x1fe>
  401b4a:	bf00      	nop
  401b4c:	2040103c 	.word	0x2040103c
  401b50:	20400abe 	.word	0x20400abe
  401b54:	004031c5 	.word	0x004031c5
  401b58:	20400020 	.word	0x20400020
  401b5c:	204000dc 	.word	0x204000dc
  401b60:	20400094 	.word	0x20400094
  401b64:	204000c0 	.word	0x204000c0
  401b68:	204000c4 	.word	0x204000c4
  401b6c:	20400ac8 	.word	0x20400ac8
  401b70:	20400acc 	.word	0x20400acc
  401b74:	0040174d 	.word	0x0040174d
  401b78:	20400ac4 	.word	0x20400ac4
  401b7c:	0040322d 	.word	0x0040322d
  401b80:	20400ac0 	.word	0x20400ac0
  401b84:	00401735 	.word	0x00401735
	if (udd_g_ctrlreq.req.wLength) {
  401b88:	4b6f      	ldr	r3, [pc, #444]	; (401d48 <udc_process_setup+0x420>)
  401b8a:	88db      	ldrh	r3, [r3, #6]
  401b8c:	2b00      	cmp	r3, #0
  401b8e:	f47f aee0 	bne.w	401952 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
  401b92:	4b6e      	ldr	r3, [pc, #440]	; (401d4c <udc_process_setup+0x424>)
  401b94:	4798      	blx	r3
  401b96:	2800      	cmp	r0, #0
  401b98:	f43f aed4 	beq.w	401944 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401b9c:	4b6a      	ldr	r3, [pc, #424]	; (401d48 <udc_process_setup+0x420>)
  401b9e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  401ba0:	4b6b      	ldr	r3, [pc, #428]	; (401d50 <udc_process_setup+0x428>)
  401ba2:	681b      	ldr	r3, [r3, #0]
  401ba4:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401ba6:	429a      	cmp	r2, r3
  401ba8:	f73f aecc 	bgt.w	401944 <udc_process_setup+0x1c>
	udc_reset();
  401bac:	4b69      	ldr	r3, [pc, #420]	; (401d54 <udc_process_setup+0x42c>)
  401bae:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  401bb0:	4b65      	ldr	r3, [pc, #404]	; (401d48 <udc_process_setup+0x420>)
  401bb2:	789a      	ldrb	r2, [r3, #2]
  401bb4:	4b68      	ldr	r3, [pc, #416]	; (401d58 <udc_process_setup+0x430>)
  401bb6:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  401bb8:	2a00      	cmp	r2, #0
  401bba:	d0b4      	beq.n	401b26 <udc_process_setup+0x1fe>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  401bbc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  401bc0:	4413      	add	r3, r2
  401bc2:	4a63      	ldr	r2, [pc, #396]	; (401d50 <udc_process_setup+0x428>)
  401bc4:	6852      	ldr	r2, [r2, #4]
  401bc6:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  401bca:	4964      	ldr	r1, [pc, #400]	; (401d5c <udc_process_setup+0x434>)
  401bcc:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401bce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  401bd2:	791b      	ldrb	r3, [r3, #4]
  401bd4:	2b00      	cmp	r3, #0
  401bd6:	d0a6      	beq.n	401b26 <udc_process_setup+0x1fe>
  401bd8:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  401bda:	4626      	mov	r6, r4
  401bdc:	4d60      	ldr	r5, [pc, #384]	; (401d60 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401bde:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  401be0:	4631      	mov	r1, r6
  401be2:	4620      	mov	r0, r4
  401be4:	47a8      	blx	r5
  401be6:	2800      	cmp	r0, #0
  401be8:	f43f aeac 	beq.w	401944 <udc_process_setup+0x1c>
			iface_num++) {
  401bec:	3401      	adds	r4, #1
  401bee:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401bf0:	683b      	ldr	r3, [r7, #0]
  401bf2:	681b      	ldr	r3, [r3, #0]
  401bf4:	791b      	ldrb	r3, [r3, #4]
  401bf6:	42a3      	cmp	r3, r4
  401bf8:	d8f2      	bhi.n	401be0 <udc_process_setup+0x2b8>
  401bfa:	e794      	b.n	401b26 <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  401bfc:	2b01      	cmp	r3, #1
  401bfe:	d00a      	beq.n	401c16 <udc_process_setup+0x2ee>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  401c00:	2b02      	cmp	r3, #2
  401c02:	f47f ae9f 	bne.w	401944 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  401c06:	4b50      	ldr	r3, [pc, #320]	; (401d48 <udc_process_setup+0x420>)
  401c08:	785b      	ldrb	r3, [r3, #1]
  401c0a:	2b01      	cmp	r3, #1
  401c0c:	d02b      	beq.n	401c66 <udc_process_setup+0x33e>
  401c0e:	2b03      	cmp	r3, #3
  401c10:	d039      	beq.n	401c86 <udc_process_setup+0x35e>
	return false;
  401c12:	2300      	movs	r3, #0
  401c14:	e04d      	b.n	401cb2 <udc_process_setup+0x38a>
			switch (udd_g_ctrlreq.req.bRequest) {
  401c16:	4a4c      	ldr	r2, [pc, #304]	; (401d48 <udc_process_setup+0x420>)
  401c18:	7852      	ldrb	r2, [r2, #1]
  401c1a:	2a0b      	cmp	r2, #11
  401c1c:	d1f0      	bne.n	401c00 <udc_process_setup+0x2d8>
	if (udd_g_ctrlreq.req.wLength) {
  401c1e:	4b4a      	ldr	r3, [pc, #296]	; (401d48 <udc_process_setup+0x420>)
  401c20:	88db      	ldrh	r3, [r3, #6]
  401c22:	b913      	cbnz	r3, 401c2a <udc_process_setup+0x302>
	if (!udc_num_configuration) {
  401c24:	4b4c      	ldr	r3, [pc, #304]	; (401d58 <udc_process_setup+0x430>)
  401c26:	781b      	ldrb	r3, [r3, #0]
  401c28:	b973      	cbnz	r3, 401c48 <udc_process_setup+0x320>
	if (0 == udc_num_configuration) {
  401c2a:	4b4b      	ldr	r3, [pc, #300]	; (401d58 <udc_process_setup+0x430>)
  401c2c:	781b      	ldrb	r3, [r3, #0]
  401c2e:	2b00      	cmp	r3, #0
  401c30:	f000 8088 	beq.w	401d44 <udc_process_setup+0x41c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401c34:	4b44      	ldr	r3, [pc, #272]	; (401d48 <udc_process_setup+0x420>)
  401c36:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401c38:	4b48      	ldr	r3, [pc, #288]	; (401d5c <udc_process_setup+0x434>)
  401c3a:	681d      	ldr	r5, [r3, #0]
  401c3c:	682b      	ldr	r3, [r5, #0]
  401c3e:	791b      	ldrb	r3, [r3, #4]
  401c40:	42a3      	cmp	r3, r4
  401c42:	d83a      	bhi.n	401cba <udc_process_setup+0x392>
	return false;
  401c44:	2300      	movs	r3, #0
  401c46:	e68c      	b.n	401962 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401c48:	4b3f      	ldr	r3, [pc, #252]	; (401d48 <udc_process_setup+0x420>)
  401c4a:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  401c4c:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  401c4e:	4620      	mov	r0, r4
  401c50:	4b44      	ldr	r3, [pc, #272]	; (401d64 <udc_process_setup+0x43c>)
  401c52:	4798      	blx	r3
  401c54:	2800      	cmp	r0, #0
  401c56:	f43f ae75 	beq.w	401944 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  401c5a:	b2e9      	uxtb	r1, r5
  401c5c:	4620      	mov	r0, r4
  401c5e:	4b40      	ldr	r3, [pc, #256]	; (401d60 <udc_process_setup+0x438>)
  401c60:	4798      	blx	r3
  401c62:	4603      	mov	r3, r0
  401c64:	e025      	b.n	401cb2 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength) {
  401c66:	4b38      	ldr	r3, [pc, #224]	; (401d48 <udc_process_setup+0x420>)
  401c68:	88db      	ldrh	r3, [r3, #6]
  401c6a:	2b00      	cmp	r3, #0
  401c6c:	f47f ae71 	bne.w	401952 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401c70:	4b35      	ldr	r3, [pc, #212]	; (401d48 <udc_process_setup+0x420>)
  401c72:	885b      	ldrh	r3, [r3, #2]
  401c74:	2b00      	cmp	r3, #0
  401c76:	f47f ae6c 	bne.w	401952 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401c7a:	4b33      	ldr	r3, [pc, #204]	; (401d48 <udc_process_setup+0x420>)
  401c7c:	7918      	ldrb	r0, [r3, #4]
  401c7e:	4b3a      	ldr	r3, [pc, #232]	; (401d68 <udc_process_setup+0x440>)
  401c80:	4798      	blx	r3
  401c82:	4603      	mov	r3, r0
  401c84:	e015      	b.n	401cb2 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength) {
  401c86:	4b30      	ldr	r3, [pc, #192]	; (401d48 <udc_process_setup+0x420>)
  401c88:	88db      	ldrh	r3, [r3, #6]
  401c8a:	2b00      	cmp	r3, #0
  401c8c:	f47f ae61 	bne.w	401952 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401c90:	4b2d      	ldr	r3, [pc, #180]	; (401d48 <udc_process_setup+0x420>)
  401c92:	885b      	ldrh	r3, [r3, #2]
  401c94:	2b00      	cmp	r3, #0
  401c96:	f47f ae5c 	bne.w	401952 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  401c9a:	4c2b      	ldr	r4, [pc, #172]	; (401d48 <udc_process_setup+0x420>)
  401c9c:	7920      	ldrb	r0, [r4, #4]
  401c9e:	4b33      	ldr	r3, [pc, #204]	; (401d6c <udc_process_setup+0x444>)
  401ca0:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401ca2:	7920      	ldrb	r0, [r4, #4]
  401ca4:	4b32      	ldr	r3, [pc, #200]	; (401d70 <udc_process_setup+0x448>)
  401ca6:	4798      	blx	r3
  401ca8:	4603      	mov	r3, r0
  401caa:	e002      	b.n	401cb2 <udc_process_setup+0x38a>
		return false;
  401cac:	2300      	movs	r3, #0
  401cae:	e000      	b.n	401cb2 <udc_process_setup+0x38a>
				return udc_req_std_dev_set_feature();
  401cb0:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  401cb2:	2b00      	cmp	r3, #0
  401cb4:	f47f ae55 	bne.w	401962 <udc_process_setup+0x3a>
  401cb8:	e644      	b.n	401944 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  401cba:	2100      	movs	r1, #0
  401cbc:	4620      	mov	r0, r4
  401cbe:	4b2d      	ldr	r3, [pc, #180]	; (401d74 <udc_process_setup+0x44c>)
  401cc0:	4798      	blx	r3
  401cc2:	2800      	cmp	r0, #0
  401cc4:	f43f ae45 	beq.w	401952 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401cc8:	686b      	ldr	r3, [r5, #4]
  401cca:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401cce:	68eb      	ldr	r3, [r5, #12]
  401cd0:	4798      	blx	r3
  401cd2:	4601      	mov	r1, r0
  401cd4:	4620      	mov	r0, r4
  401cd6:	4b27      	ldr	r3, [pc, #156]	; (401d74 <udc_process_setup+0x44c>)
  401cd8:	4798      	blx	r3
  401cda:	2800      	cmp	r0, #0
  401cdc:	f43f ae39 	beq.w	401952 <udc_process_setup+0x2a>
	return udi_api->setup();
  401ce0:	68ab      	ldr	r3, [r5, #8]
  401ce2:	4798      	blx	r3
		if (udc_req_iface()) {
  401ce4:	4603      	mov	r3, r0
  401ce6:	2800      	cmp	r0, #0
  401ce8:	f47f ae3b 	bne.w	401962 <udc_process_setup+0x3a>
  401cec:	e631      	b.n	401952 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  401cee:	4b1a      	ldr	r3, [pc, #104]	; (401d58 <udc_process_setup+0x430>)
  401cf0:	781b      	ldrb	r3, [r3, #0]
  401cf2:	b30b      	cbz	r3, 401d38 <udc_process_setup+0x410>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401cf4:	4b19      	ldr	r3, [pc, #100]	; (401d5c <udc_process_setup+0x434>)
  401cf6:	681a      	ldr	r2, [r3, #0]
  401cf8:	6813      	ldr	r3, [r2, #0]
  401cfa:	791b      	ldrb	r3, [r3, #4]
  401cfc:	b1f3      	cbz	r3, 401d3c <udc_process_setup+0x414>
  401cfe:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401d00:	4e1c      	ldr	r6, [pc, #112]	; (401d74 <udc_process_setup+0x44c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401d02:	4f16      	ldr	r7, [pc, #88]	; (401d5c <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  401d04:	6853      	ldr	r3, [r2, #4]
  401d06:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401d0a:	68eb      	ldr	r3, [r5, #12]
  401d0c:	4798      	blx	r3
  401d0e:	4601      	mov	r1, r0
  401d10:	4620      	mov	r0, r4
  401d12:	47b0      	blx	r6
  401d14:	4603      	mov	r3, r0
  401d16:	2800      	cmp	r0, #0
  401d18:	f43f ae23 	beq.w	401962 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  401d1c:	68ab      	ldr	r3, [r5, #8]
  401d1e:	4798      	blx	r3
  401d20:	4603      	mov	r3, r0
  401d22:	2800      	cmp	r0, #0
  401d24:	f47f ae1d 	bne.w	401962 <udc_process_setup+0x3a>
			iface_num++) {
  401d28:	3401      	adds	r4, #1
  401d2a:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401d2c:	683a      	ldr	r2, [r7, #0]
  401d2e:	6811      	ldr	r1, [r2, #0]
  401d30:	7909      	ldrb	r1, [r1, #4]
  401d32:	42a1      	cmp	r1, r4
  401d34:	d8e6      	bhi.n	401d04 <udc_process_setup+0x3dc>
  401d36:	e614      	b.n	401962 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  401d38:	2300      	movs	r3, #0
  401d3a:	e612      	b.n	401962 <udc_process_setup+0x3a>
	return false;
  401d3c:	2300      	movs	r3, #0
  401d3e:	e610      	b.n	401962 <udc_process_setup+0x3a>
			return false; // Error from USB host
  401d40:	2300      	movs	r3, #0
  401d42:	e60e      	b.n	401962 <udc_process_setup+0x3a>
	return false;
  401d44:	2300      	movs	r3, #0
  401d46:	e60c      	b.n	401962 <udc_process_setup+0x3a>
  401d48:	2040103c 	.word	0x2040103c
  401d4c:	004031a5 	.word	0x004031a5
  401d50:	20400020 	.word	0x20400020
  401d54:	004018a1 	.word	0x004018a1
  401d58:	20400ac8 	.word	0x20400ac8
  401d5c:	20400acc 	.word	0x20400acc
  401d60:	0040182d 	.word	0x0040182d
  401d64:	004017c1 	.word	0x004017c1
  401d68:	00403345 	.word	0x00403345
  401d6c:	00403725 	.word	0x00403725
  401d70:	00403241 	.word	0x00403241
  401d74:	0040174d 	.word	0x0040174d

00401d78 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401d78:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401d7a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401d7e:	d03a      	beq.n	401df6 <pio_set_peripheral+0x7e>
  401d80:	d813      	bhi.n	401daa <pio_set_peripheral+0x32>
  401d82:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401d86:	d025      	beq.n	401dd4 <pio_set_peripheral+0x5c>
  401d88:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401d8c:	d10a      	bne.n	401da4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d8e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401d90:	4313      	orrs	r3, r2
  401d92:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401d94:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401d96:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401d98:	400b      	ands	r3, r1
  401d9a:	ea23 0302 	bic.w	r3, r3, r2
  401d9e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401da0:	6042      	str	r2, [r0, #4]
  401da2:	4770      	bx	lr
	switch (ul_type) {
  401da4:	2900      	cmp	r1, #0
  401da6:	d1fb      	bne.n	401da0 <pio_set_peripheral+0x28>
  401da8:	4770      	bx	lr
  401daa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401dae:	d021      	beq.n	401df4 <pio_set_peripheral+0x7c>
  401db0:	d809      	bhi.n	401dc6 <pio_set_peripheral+0x4e>
  401db2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401db6:	d1f3      	bne.n	401da0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401db8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401dba:	4313      	orrs	r3, r2
  401dbc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401dbe:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401dc0:	4313      	orrs	r3, r2
  401dc2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401dc4:	e7ec      	b.n	401da0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  401dc6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401dca:	d013      	beq.n	401df4 <pio_set_peripheral+0x7c>
  401dcc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401dd0:	d010      	beq.n	401df4 <pio_set_peripheral+0x7c>
  401dd2:	e7e5      	b.n	401da0 <pio_set_peripheral+0x28>
{
  401dd4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dd6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401dd8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401dda:	43d3      	mvns	r3, r2
  401ddc:	4021      	ands	r1, r4
  401dde:	461c      	mov	r4, r3
  401de0:	4019      	ands	r1, r3
  401de2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401de4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401de6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401de8:	400b      	ands	r3, r1
  401dea:	4023      	ands	r3, r4
  401dec:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401dee:	6042      	str	r2, [r0, #4]
}
  401df0:	f85d 4b04 	ldr.w	r4, [sp], #4
  401df4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401df6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401df8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401dfa:	400b      	ands	r3, r1
  401dfc:	ea23 0302 	bic.w	r3, r3, r2
  401e00:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401e02:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e04:	4313      	orrs	r3, r2
  401e06:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401e08:	e7ca      	b.n	401da0 <pio_set_peripheral+0x28>

00401e0a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401e0a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401e0c:	f012 0f01 	tst.w	r2, #1
  401e10:	d10d      	bne.n	401e2e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401e12:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401e14:	f012 0f0a 	tst.w	r2, #10
  401e18:	d00b      	beq.n	401e32 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401e1a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401e1c:	f012 0f02 	tst.w	r2, #2
  401e20:	d109      	bne.n	401e36 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401e22:	f012 0f08 	tst.w	r2, #8
  401e26:	d008      	beq.n	401e3a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401e28:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401e2c:	e005      	b.n	401e3a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401e2e:	6641      	str	r1, [r0, #100]	; 0x64
  401e30:	e7f0      	b.n	401e14 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401e32:	6241      	str	r1, [r0, #36]	; 0x24
  401e34:	e7f2      	b.n	401e1c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401e36:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401e3a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401e3c:	6001      	str	r1, [r0, #0]
  401e3e:	4770      	bx	lr

00401e40 <pio_set_output>:
{
  401e40:	b410      	push	{r4}
  401e42:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401e44:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401e46:	b94c      	cbnz	r4, 401e5c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401e48:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401e4a:	b14b      	cbz	r3, 401e60 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401e4c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401e4e:	b94a      	cbnz	r2, 401e64 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401e50:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401e52:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401e54:	6001      	str	r1, [r0, #0]
}
  401e56:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e5a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401e5c:	6641      	str	r1, [r0, #100]	; 0x64
  401e5e:	e7f4      	b.n	401e4a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401e60:	6541      	str	r1, [r0, #84]	; 0x54
  401e62:	e7f4      	b.n	401e4e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401e64:	6301      	str	r1, [r0, #48]	; 0x30
  401e66:	e7f4      	b.n	401e52 <pio_set_output+0x12>

00401e68 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401e68:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401e6a:	4770      	bx	lr

00401e6c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401e6c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401e6e:	4770      	bx	lr

00401e70 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401e70:	4b05      	ldr	r3, [pc, #20]	; (401e88 <pio_set_pin_low+0x18>)
  401e72:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  401e76:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  401e78:	f000 001f 	and.w	r0, r0, #31
  401e7c:	2201      	movs	r2, #1
  401e7e:	fa02 f000 	lsl.w	r0, r2, r0
  401e82:	6358      	str	r0, [r3, #52]	; 0x34
  401e84:	4770      	bx	lr
  401e86:	bf00      	nop
  401e88:	00200707 	.word	0x00200707

00401e8c <pio_configure_pin>:
{
  401e8c:	b570      	push	{r4, r5, r6, lr}
  401e8e:	b082      	sub	sp, #8
  401e90:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401e92:	4c46      	ldr	r4, [pc, #280]	; (401fac <pio_configure_pin+0x120>)
  401e94:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  401e98:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401e9a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401ea2:	d059      	beq.n	401f58 <pio_configure_pin+0xcc>
  401ea4:	d80a      	bhi.n	401ebc <pio_configure_pin+0x30>
  401ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401eaa:	d02f      	beq.n	401f0c <pio_configure_pin+0x80>
  401eac:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401eb0:	d03f      	beq.n	401f32 <pio_configure_pin+0xa6>
  401eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401eb6:	d016      	beq.n	401ee6 <pio_configure_pin+0x5a>
		return 0;
  401eb8:	2000      	movs	r0, #0
  401eba:	e012      	b.n	401ee2 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  401ebc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401ec0:	d05d      	beq.n	401f7e <pio_configure_pin+0xf2>
  401ec2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401ec6:	d05a      	beq.n	401f7e <pio_configure_pin+0xf2>
  401ec8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401ecc:	d1f4      	bne.n	401eb8 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401ece:	f000 011f 	and.w	r1, r0, #31
  401ed2:	2601      	movs	r6, #1
  401ed4:	462a      	mov	r2, r5
  401ed6:	fa06 f101 	lsl.w	r1, r6, r1
  401eda:	4620      	mov	r0, r4
  401edc:	4b34      	ldr	r3, [pc, #208]	; (401fb0 <pio_configure_pin+0x124>)
  401ede:	4798      	blx	r3
	return 1;
  401ee0:	4630      	mov	r0, r6
}
  401ee2:	b002      	add	sp, #8
  401ee4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401ee6:	f000 001f 	and.w	r0, r0, #31
  401eea:	2601      	movs	r6, #1
  401eec:	4086      	lsls	r6, r0
  401eee:	4632      	mov	r2, r6
  401ef0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401ef4:	4620      	mov	r0, r4
  401ef6:	4b2f      	ldr	r3, [pc, #188]	; (401fb4 <pio_configure_pin+0x128>)
  401ef8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401efa:	f015 0f01 	tst.w	r5, #1
  401efe:	d102      	bne.n	401f06 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  401f00:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401f02:	2001      	movs	r0, #1
  401f04:	e7ed      	b.n	401ee2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401f06:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401f08:	2001      	movs	r0, #1
  401f0a:	e7ea      	b.n	401ee2 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401f0c:	f000 001f 	and.w	r0, r0, #31
  401f10:	2601      	movs	r6, #1
  401f12:	4086      	lsls	r6, r0
  401f14:	4632      	mov	r2, r6
  401f16:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401f1a:	4620      	mov	r0, r4
  401f1c:	4b25      	ldr	r3, [pc, #148]	; (401fb4 <pio_configure_pin+0x128>)
  401f1e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401f20:	f015 0f01 	tst.w	r5, #1
  401f24:	d102      	bne.n	401f2c <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  401f26:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401f28:	2001      	movs	r0, #1
  401f2a:	e7da      	b.n	401ee2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401f2c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401f2e:	2001      	movs	r0, #1
  401f30:	e7d7      	b.n	401ee2 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401f32:	f000 001f 	and.w	r0, r0, #31
  401f36:	2601      	movs	r6, #1
  401f38:	4086      	lsls	r6, r0
  401f3a:	4632      	mov	r2, r6
  401f3c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401f40:	4620      	mov	r0, r4
  401f42:	4b1c      	ldr	r3, [pc, #112]	; (401fb4 <pio_configure_pin+0x128>)
  401f44:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401f46:	f015 0f01 	tst.w	r5, #1
  401f4a:	d102      	bne.n	401f52 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  401f4c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401f4e:	2001      	movs	r0, #1
  401f50:	e7c7      	b.n	401ee2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401f52:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401f54:	2001      	movs	r0, #1
  401f56:	e7c4      	b.n	401ee2 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401f58:	f000 001f 	and.w	r0, r0, #31
  401f5c:	2601      	movs	r6, #1
  401f5e:	4086      	lsls	r6, r0
  401f60:	4632      	mov	r2, r6
  401f62:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401f66:	4620      	mov	r0, r4
  401f68:	4b12      	ldr	r3, [pc, #72]	; (401fb4 <pio_configure_pin+0x128>)
  401f6a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401f6c:	f015 0f01 	tst.w	r5, #1
  401f70:	d102      	bne.n	401f78 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  401f72:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401f74:	2001      	movs	r0, #1
  401f76:	e7b4      	b.n	401ee2 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401f78:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401f7a:	2001      	movs	r0, #1
  401f7c:	e7b1      	b.n	401ee2 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401f7e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401f82:	f000 011f 	and.w	r1, r0, #31
  401f86:	2601      	movs	r6, #1
  401f88:	ea05 0306 	and.w	r3, r5, r6
  401f8c:	9300      	str	r3, [sp, #0]
  401f8e:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401f92:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401f96:	bf14      	ite	ne
  401f98:	2200      	movne	r2, #0
  401f9a:	2201      	moveq	r2, #1
  401f9c:	fa06 f101 	lsl.w	r1, r6, r1
  401fa0:	4620      	mov	r0, r4
  401fa2:	4c05      	ldr	r4, [pc, #20]	; (401fb8 <pio_configure_pin+0x12c>)
  401fa4:	47a0      	blx	r4
	return 1;
  401fa6:	4630      	mov	r0, r6
		break;
  401fa8:	e79b      	b.n	401ee2 <pio_configure_pin+0x56>
  401faa:	bf00      	nop
  401fac:	00200707 	.word	0x00200707
  401fb0:	00401e0b 	.word	0x00401e0b
  401fb4:	00401d79 	.word	0x00401d79
  401fb8:	00401e41 	.word	0x00401e41

00401fbc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401fc0:	4604      	mov	r4, r0
  401fc2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401fc4:	4b0e      	ldr	r3, [pc, #56]	; (402000 <pio_handler_process+0x44>)
  401fc6:	4798      	blx	r3
  401fc8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401fca:	4620      	mov	r0, r4
  401fcc:	4b0d      	ldr	r3, [pc, #52]	; (402004 <pio_handler_process+0x48>)
  401fce:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401fd0:	4005      	ands	r5, r0
  401fd2:	d013      	beq.n	401ffc <pio_handler_process+0x40>
  401fd4:	4c0c      	ldr	r4, [pc, #48]	; (402008 <pio_handler_process+0x4c>)
  401fd6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401fda:	e003      	b.n	401fe4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401fdc:	42b4      	cmp	r4, r6
  401fde:	d00d      	beq.n	401ffc <pio_handler_process+0x40>
  401fe0:	3410      	adds	r4, #16
		while (status != 0) {
  401fe2:	b15d      	cbz	r5, 401ffc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401fe4:	6820      	ldr	r0, [r4, #0]
  401fe6:	4540      	cmp	r0, r8
  401fe8:	d1f8      	bne.n	401fdc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fea:	6861      	ldr	r1, [r4, #4]
  401fec:	4229      	tst	r1, r5
  401fee:	d0f5      	beq.n	401fdc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ff0:	68e3      	ldr	r3, [r4, #12]
  401ff2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401ff4:	6863      	ldr	r3, [r4, #4]
  401ff6:	ea25 0503 	bic.w	r5, r5, r3
  401ffa:	e7ef      	b.n	401fdc <pio_handler_process+0x20>
  401ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402000:	00401e69 	.word	0x00401e69
  402004:	00401e6d 	.word	0x00401e6d
  402008:	20400ad4 	.word	0x20400ad4

0040200c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40200c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40200e:	210a      	movs	r1, #10
  402010:	4801      	ldr	r0, [pc, #4]	; (402018 <PIOA_Handler+0xc>)
  402012:	4b02      	ldr	r3, [pc, #8]	; (40201c <PIOA_Handler+0x10>)
  402014:	4798      	blx	r3
  402016:	bd08      	pop	{r3, pc}
  402018:	400e0e00 	.word	0x400e0e00
  40201c:	00401fbd 	.word	0x00401fbd

00402020 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402020:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  402022:	210b      	movs	r1, #11
  402024:	4801      	ldr	r0, [pc, #4]	; (40202c <PIOB_Handler+0xc>)
  402026:	4b02      	ldr	r3, [pc, #8]	; (402030 <PIOB_Handler+0x10>)
  402028:	4798      	blx	r3
  40202a:	bd08      	pop	{r3, pc}
  40202c:	400e1000 	.word	0x400e1000
  402030:	00401fbd 	.word	0x00401fbd

00402034 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402034:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  402036:	210c      	movs	r1, #12
  402038:	4801      	ldr	r0, [pc, #4]	; (402040 <PIOC_Handler+0xc>)
  40203a:	4b02      	ldr	r3, [pc, #8]	; (402044 <PIOC_Handler+0x10>)
  40203c:	4798      	blx	r3
  40203e:	bd08      	pop	{r3, pc}
  402040:	400e1200 	.word	0x400e1200
  402044:	00401fbd 	.word	0x00401fbd

00402048 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402048:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40204a:	2110      	movs	r1, #16
  40204c:	4801      	ldr	r0, [pc, #4]	; (402054 <PIOD_Handler+0xc>)
  40204e:	4b02      	ldr	r3, [pc, #8]	; (402058 <PIOD_Handler+0x10>)
  402050:	4798      	blx	r3
  402052:	bd08      	pop	{r3, pc}
  402054:	400e1400 	.word	0x400e1400
  402058:	00401fbd 	.word	0x00401fbd

0040205c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40205c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40205e:	2111      	movs	r1, #17
  402060:	4801      	ldr	r0, [pc, #4]	; (402068 <PIOE_Handler+0xc>)
  402062:	4b02      	ldr	r3, [pc, #8]	; (40206c <PIOE_Handler+0x10>)
  402064:	4798      	blx	r3
  402066:	bd08      	pop	{r3, pc}
  402068:	400e1600 	.word	0x400e1600
  40206c:	00401fbd 	.word	0x00401fbd

00402070 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  402070:	2803      	cmp	r0, #3
  402072:	d011      	beq.n	402098 <pmc_mck_set_division+0x28>
  402074:	2804      	cmp	r0, #4
  402076:	d012      	beq.n	40209e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402078:	2802      	cmp	r0, #2
  40207a:	bf0c      	ite	eq
  40207c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  402080:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402082:	4a08      	ldr	r2, [pc, #32]	; (4020a4 <pmc_mck_set_division+0x34>)
  402084:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40208a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40208c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40208e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402090:	f013 0f08 	tst.w	r3, #8
  402094:	d0fb      	beq.n	40208e <pmc_mck_set_division+0x1e>
}
  402096:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402098:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40209c:	e7f1      	b.n	402082 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40209e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4020a2:	e7ee      	b.n	402082 <pmc_mck_set_division+0x12>
  4020a4:	400e0600 	.word	0x400e0600

004020a8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4020a8:	4a17      	ldr	r2, [pc, #92]	; (402108 <pmc_switch_mck_to_pllack+0x60>)
  4020aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4020ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4020b0:	4318      	orrs	r0, r3
  4020b2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4020b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4020b6:	f013 0f08 	tst.w	r3, #8
  4020ba:	d10a      	bne.n	4020d2 <pmc_switch_mck_to_pllack+0x2a>
  4020bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4020c0:	4911      	ldr	r1, [pc, #68]	; (402108 <pmc_switch_mck_to_pllack+0x60>)
  4020c2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4020c4:	f012 0f08 	tst.w	r2, #8
  4020c8:	d103      	bne.n	4020d2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4020ca:	3b01      	subs	r3, #1
  4020cc:	d1f9      	bne.n	4020c2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4020ce:	2001      	movs	r0, #1
  4020d0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4020d2:	4a0d      	ldr	r2, [pc, #52]	; (402108 <pmc_switch_mck_to_pllack+0x60>)
  4020d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4020d6:	f023 0303 	bic.w	r3, r3, #3
  4020da:	f043 0302 	orr.w	r3, r3, #2
  4020de:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4020e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4020e2:	f013 0f08 	tst.w	r3, #8
  4020e6:	d10a      	bne.n	4020fe <pmc_switch_mck_to_pllack+0x56>
  4020e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4020ec:	4906      	ldr	r1, [pc, #24]	; (402108 <pmc_switch_mck_to_pllack+0x60>)
  4020ee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4020f0:	f012 0f08 	tst.w	r2, #8
  4020f4:	d105      	bne.n	402102 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4020f6:	3b01      	subs	r3, #1
  4020f8:	d1f9      	bne.n	4020ee <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4020fa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4020fc:	4770      	bx	lr
	return 0;
  4020fe:	2000      	movs	r0, #0
  402100:	4770      	bx	lr
  402102:	2000      	movs	r0, #0
  402104:	4770      	bx	lr
  402106:	bf00      	nop
  402108:	400e0600 	.word	0x400e0600

0040210c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40210c:	b9a0      	cbnz	r0, 402138 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40210e:	480e      	ldr	r0, [pc, #56]	; (402148 <pmc_switch_mainck_to_xtal+0x3c>)
  402110:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402112:	0209      	lsls	r1, r1, #8
  402114:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402116:	4a0d      	ldr	r2, [pc, #52]	; (40214c <pmc_switch_mainck_to_xtal+0x40>)
  402118:	401a      	ands	r2, r3
  40211a:	4b0d      	ldr	r3, [pc, #52]	; (402150 <pmc_switch_mainck_to_xtal+0x44>)
  40211c:	4313      	orrs	r3, r2
  40211e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402120:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402122:	4602      	mov	r2, r0
  402124:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402126:	f013 0f01 	tst.w	r3, #1
  40212a:	d0fb      	beq.n	402124 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40212c:	4a06      	ldr	r2, [pc, #24]	; (402148 <pmc_switch_mainck_to_xtal+0x3c>)
  40212e:	6a11      	ldr	r1, [r2, #32]
  402130:	4b08      	ldr	r3, [pc, #32]	; (402154 <pmc_switch_mainck_to_xtal+0x48>)
  402132:	430b      	orrs	r3, r1
  402134:	6213      	str	r3, [r2, #32]
  402136:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402138:	4903      	ldr	r1, [pc, #12]	; (402148 <pmc_switch_mainck_to_xtal+0x3c>)
  40213a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40213c:	4a06      	ldr	r2, [pc, #24]	; (402158 <pmc_switch_mainck_to_xtal+0x4c>)
  40213e:	401a      	ands	r2, r3
  402140:	4b06      	ldr	r3, [pc, #24]	; (40215c <pmc_switch_mainck_to_xtal+0x50>)
  402142:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402144:	620b      	str	r3, [r1, #32]
  402146:	4770      	bx	lr
  402148:	400e0600 	.word	0x400e0600
  40214c:	ffc8fffc 	.word	0xffc8fffc
  402150:	00370001 	.word	0x00370001
  402154:	01370000 	.word	0x01370000
  402158:	fec8fffc 	.word	0xfec8fffc
  40215c:	01370002 	.word	0x01370002

00402160 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402160:	4b02      	ldr	r3, [pc, #8]	; (40216c <pmc_osc_is_ready_mainck+0xc>)
  402162:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402164:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402168:	4770      	bx	lr
  40216a:	bf00      	nop
  40216c:	400e0600 	.word	0x400e0600

00402170 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402170:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402174:	4b01      	ldr	r3, [pc, #4]	; (40217c <pmc_disable_pllack+0xc>)
  402176:	629a      	str	r2, [r3, #40]	; 0x28
  402178:	4770      	bx	lr
  40217a:	bf00      	nop
  40217c:	400e0600 	.word	0x400e0600

00402180 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402180:	4b02      	ldr	r3, [pc, #8]	; (40218c <pmc_is_locked_pllack+0xc>)
  402182:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402184:	f000 0002 	and.w	r0, r0, #2
  402188:	4770      	bx	lr
  40218a:	bf00      	nop
  40218c:	400e0600 	.word	0x400e0600

00402190 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
  402190:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
  402194:	4b03      	ldr	r3, [pc, #12]	; (4021a4 <pmc_enable_upll_clock+0x14>)
  402196:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
  402198:	461a      	mov	r2, r3
  40219a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40219c:	f013 0f40 	tst.w	r3, #64	; 0x40
  4021a0:	d0fb      	beq.n	40219a <pmc_enable_upll_clock+0xa>
}
  4021a2:	4770      	bx	lr
  4021a4:	400e0600 	.word	0x400e0600

004021a8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4021a8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4021ac:	4b05      	ldr	r3, [pc, #20]	; (4021c4 <pmc_enable_periph_clk+0x1c>)
  4021ae:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4021b2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4021b6:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4021ba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4021be:	2000      	movs	r0, #0
  4021c0:	4770      	bx	lr
  4021c2:	bf00      	nop
  4021c4:	400e0600 	.word	0x400e0600

004021c8 <pmc_switch_udpck_to_upllck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
  4021c8:	0200      	lsls	r0, r0, #8
  4021ca:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  4021ce:	f040 0001 	orr.w	r0, r0, #1
  4021d2:	4b01      	ldr	r3, [pc, #4]	; (4021d8 <pmc_switch_udpck_to_upllck+0x10>)
  4021d4:	6398      	str	r0, [r3, #56]	; 0x38
  4021d6:	4770      	bx	lr
  4021d8:	400e0600 	.word	0x400e0600

004021dc <pmc_enable_udpck>:
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
  4021dc:	2220      	movs	r2, #32
  4021de:	4b01      	ldr	r3, [pc, #4]	; (4021e4 <pmc_enable_udpck+0x8>)
  4021e0:	601a      	str	r2, [r3, #0]
  4021e2:	4770      	bx	lr
  4021e4:	400e0600 	.word	0x400e0600

004021e8 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4021e8:	4b03      	ldr	r3, [pc, #12]	; (4021f8 <pmc_set_fast_startup_input+0x10>)
  4021ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4021ec:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4021f0:	4310      	orrs	r0, r2
  4021f2:	6718      	str	r0, [r3, #112]	; 0x70
  4021f4:	4770      	bx	lr
  4021f6:	bf00      	nop
  4021f8:	400e0600 	.word	0x400e0600

004021fc <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4021fc:	4770      	bx	lr
	...

00402200 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  402200:	4a10      	ldr	r2, [pc, #64]	; (402244 <pmc_enable_waitmode+0x44>)
  402202:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  402204:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  402208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  40220c:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  40220e:	6a11      	ldr	r1, [r2, #32]
  402210:	4b0d      	ldr	r3, [pc, #52]	; (402248 <pmc_enable_waitmode+0x48>)
  402212:	430b      	orrs	r3, r1
  402214:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402216:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402218:	f013 0f08 	tst.w	r3, #8
  40221c:	d0fb      	beq.n	402216 <pmc_enable_waitmode+0x16>
  40221e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  402222:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  402224:	3b01      	subs	r3, #1
  402226:	d1fc      	bne.n	402222 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  402228:	4a06      	ldr	r2, [pc, #24]	; (402244 <pmc_enable_waitmode+0x44>)
  40222a:	6a13      	ldr	r3, [r2, #32]
  40222c:	f013 0f08 	tst.w	r3, #8
  402230:	d0fb      	beq.n	40222a <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  402232:	4a04      	ldr	r2, [pc, #16]	; (402244 <pmc_enable_waitmode+0x44>)
  402234:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  402236:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40223a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  40223e:	6713      	str	r3, [r2, #112]	; 0x70
  402240:	4770      	bx	lr
  402242:	bf00      	nop
  402244:	400e0600 	.word	0x400e0600
  402248:	00370004 	.word	0x00370004

0040224c <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  40224c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  402250:	1e43      	subs	r3, r0, #1
  402252:	2b04      	cmp	r3, #4
  402254:	f200 8107 	bhi.w	402466 <pmc_sleep+0x21a>
  402258:	e8df f013 	tbh	[pc, r3, lsl #1]
  40225c:	00050005 	.word	0x00050005
  402260:	00150015 	.word	0x00150015
  402264:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  402266:	4a81      	ldr	r2, [pc, #516]	; (40246c <pmc_sleep+0x220>)
  402268:	6913      	ldr	r3, [r2, #16]
  40226a:	f023 0304 	bic.w	r3, r3, #4
  40226e:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  402270:	2201      	movs	r2, #1
  402272:	4b7f      	ldr	r3, [pc, #508]	; (402470 <pmc_sleep+0x224>)
  402274:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402276:	f3bf 8f5f 	dmb	sy
  40227a:	b662      	cpsie	i
  __ASM volatile ("dsb");
  40227c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  402280:	bf30      	wfi
  402282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402286:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  402288:	2803      	cmp	r0, #3
  40228a:	bf0c      	ite	eq
  40228c:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40228e:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  402292:	4b78      	ldr	r3, [pc, #480]	; (402474 <pmc_sleep+0x228>)
  402294:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  402296:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402298:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40229c:	2200      	movs	r2, #0
  40229e:	4b74      	ldr	r3, [pc, #464]	; (402470 <pmc_sleep+0x224>)
  4022a0:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  4022a2:	2201      	movs	r2, #1
  4022a4:	4b74      	ldr	r3, [pc, #464]	; (402478 <pmc_sleep+0x22c>)
  4022a6:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  4022a8:	4b74      	ldr	r3, [pc, #464]	; (40247c <pmc_sleep+0x230>)
  4022aa:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  4022ac:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  4022ae:	4a74      	ldr	r2, [pc, #464]	; (402480 <pmc_sleep+0x234>)
  4022b0:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  4022b4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  4022b6:	4a73      	ldr	r2, [pc, #460]	; (402484 <pmc_sleep+0x238>)
  4022b8:	433a      	orrs	r2, r7
  4022ba:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  4022bc:	f005 0903 	and.w	r9, r5, #3
  4022c0:	f1b9 0f01 	cmp.w	r9, #1
  4022c4:	f240 8089 	bls.w	4023da <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  4022c8:	f025 0103 	bic.w	r1, r5, #3
  4022cc:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  4022d0:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4022d2:	461a      	mov	r2, r3
  4022d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4022d6:	f013 0f08 	tst.w	r3, #8
  4022da:	d0fb      	beq.n	4022d4 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  4022dc:	f011 0f70 	tst.w	r1, #112	; 0x70
  4022e0:	d008      	beq.n	4022f4 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  4022e2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  4022e6:	4b65      	ldr	r3, [pc, #404]	; (40247c <pmc_sleep+0x230>)
  4022e8:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4022ea:	461a      	mov	r2, r3
  4022ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4022ee:	f013 0f08 	tst.w	r3, #8
  4022f2:	d0fb      	beq.n	4022ec <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4022f4:	4b64      	ldr	r3, [pc, #400]	; (402488 <pmc_sleep+0x23c>)
  4022f6:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4022f8:	4a60      	ldr	r2, [pc, #384]	; (40247c <pmc_sleep+0x230>)
  4022fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4022fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  402300:	d0fb      	beq.n	4022fa <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402302:	4a5e      	ldr	r2, [pc, #376]	; (40247c <pmc_sleep+0x230>)
  402304:	6a11      	ldr	r1, [r2, #32]
  402306:	4b61      	ldr	r3, [pc, #388]	; (40248c <pmc_sleep+0x240>)
  402308:	400b      	ands	r3, r1
  40230a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40230e:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  402310:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402312:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402316:	d0fb      	beq.n	402310 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  402318:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  40231c:	4a58      	ldr	r2, [pc, #352]	; (402480 <pmc_sleep+0x234>)
  40231e:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  402320:	2c04      	cmp	r4, #4
  402322:	d05c      	beq.n	4023de <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  402324:	4c52      	ldr	r4, [pc, #328]	; (402470 <pmc_sleep+0x224>)
  402326:	2301      	movs	r3, #1
  402328:	7023      	strb	r3, [r4, #0]
  40232a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40232e:	b662      	cpsie	i

		pmc_enable_waitmode();
  402330:	4b57      	ldr	r3, [pc, #348]	; (402490 <pmc_sleep+0x244>)
  402332:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  402334:	b672      	cpsid	i
  402336:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  40233a:	2300      	movs	r3, #0
  40233c:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  40233e:	f017 0f02 	tst.w	r7, #2
  402342:	d055      	beq.n	4023f0 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402344:	4a4d      	ldr	r2, [pc, #308]	; (40247c <pmc_sleep+0x230>)
  402346:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402348:	4952      	ldr	r1, [pc, #328]	; (402494 <pmc_sleep+0x248>)
  40234a:	4019      	ands	r1, r3
  40234c:	4b52      	ldr	r3, [pc, #328]	; (402498 <pmc_sleep+0x24c>)
  40234e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402350:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402352:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  402354:	4b51      	ldr	r3, [pc, #324]	; (40249c <pmc_sleep+0x250>)
  402356:	400b      	ands	r3, r1
  402358:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40235c:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40235e:	4b50      	ldr	r3, [pc, #320]	; (4024a0 <pmc_sleep+0x254>)
  402360:	4033      	ands	r3, r6
  402362:	2b00      	cmp	r3, #0
  402364:	d06e      	beq.n	402444 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  402366:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40236a:	4b44      	ldr	r3, [pc, #272]	; (40247c <pmc_sleep+0x230>)
  40236c:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40236e:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  402370:	f1b9 0f02 	cmp.w	r9, #2
  402374:	d104      	bne.n	402380 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  402376:	4a41      	ldr	r2, [pc, #260]	; (40247c <pmc_sleep+0x230>)
  402378:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40237a:	f013 0f02 	tst.w	r3, #2
  40237e:	d0fb      	beq.n	402378 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  402380:	4a3e      	ldr	r2, [pc, #248]	; (40247c <pmc_sleep+0x230>)
  402382:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  402384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  402388:	f005 0070 	and.w	r0, r5, #112	; 0x70
  40238c:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40238e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402390:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402392:	f013 0f08 	tst.w	r3, #8
  402396:	d0fb      	beq.n	402390 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  402398:	4b39      	ldr	r3, [pc, #228]	; (402480 <pmc_sleep+0x234>)
  40239a:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40239e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4023a2:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4023a4:	461a      	mov	r2, r3
  4023a6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4023a8:	f013 0f08 	tst.w	r3, #8
  4023ac:	d0fb      	beq.n	4023a6 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  4023ae:	4a33      	ldr	r2, [pc, #204]	; (40247c <pmc_sleep+0x230>)
  4023b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4023b2:	420b      	tst	r3, r1
  4023b4:	d0fc      	beq.n	4023b0 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  4023b6:	2200      	movs	r2, #0
  4023b8:	4b2f      	ldr	r3, [pc, #188]	; (402478 <pmc_sleep+0x22c>)
  4023ba:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  4023bc:	4b39      	ldr	r3, [pc, #228]	; (4024a4 <pmc_sleep+0x258>)
  4023be:	681b      	ldr	r3, [r3, #0]
  4023c0:	b11b      	cbz	r3, 4023ca <pmc_sleep+0x17e>
			callback_clocks_restored();
  4023c2:	4798      	blx	r3
			callback_clocks_restored = NULL;
  4023c4:	2200      	movs	r2, #0
  4023c6:	4b37      	ldr	r3, [pc, #220]	; (4024a4 <pmc_sleep+0x258>)
  4023c8:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  4023ca:	2201      	movs	r2, #1
  4023cc:	4b28      	ldr	r3, [pc, #160]	; (402470 <pmc_sleep+0x224>)
  4023ce:	701a      	strb	r2, [r3, #0]
  4023d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4023d4:	b662      	cpsie	i
  4023d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  4023da:	4629      	mov	r1, r5
  4023dc:	e77e      	b.n	4022dc <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4023de:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4023e2:	6a11      	ldr	r1, [r2, #32]
  4023e4:	4b30      	ldr	r3, [pc, #192]	; (4024a8 <pmc_sleep+0x25c>)
  4023e6:	400b      	ands	r3, r1
  4023e8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4023ec:	6213      	str	r3, [r2, #32]
  4023ee:	e799      	b.n	402324 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4023f0:	f017 0f01 	tst.w	r7, #1
  4023f4:	d0b3      	beq.n	40235e <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4023f6:	4b21      	ldr	r3, [pc, #132]	; (40247c <pmc_sleep+0x230>)
  4023f8:	6a1b      	ldr	r3, [r3, #32]
  4023fa:	f013 0f01 	tst.w	r3, #1
  4023fe:	d10b      	bne.n	402418 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402400:	491e      	ldr	r1, [pc, #120]	; (40247c <pmc_sleep+0x230>)
  402402:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  402404:	4a29      	ldr	r2, [pc, #164]	; (4024ac <pmc_sleep+0x260>)
  402406:	401a      	ands	r2, r3
  402408:	4b29      	ldr	r3, [pc, #164]	; (4024b0 <pmc_sleep+0x264>)
  40240a:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40240c:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40240e:	460a      	mov	r2, r1
  402410:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402412:	f013 0f01 	tst.w	r3, #1
  402416:	d0fb      	beq.n	402410 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  402418:	4b18      	ldr	r3, [pc, #96]	; (40247c <pmc_sleep+0x230>)
  40241a:	6a1b      	ldr	r3, [r3, #32]
  40241c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402420:	d108      	bne.n	402434 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402422:	4a16      	ldr	r2, [pc, #88]	; (40247c <pmc_sleep+0x230>)
  402424:	6a11      	ldr	r1, [r2, #32]
  402426:	4b23      	ldr	r3, [pc, #140]	; (4024b4 <pmc_sleep+0x268>)
  402428:	430b      	orrs	r3, r1
  40242a:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40242c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40242e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402432:	d0fb      	beq.n	40242c <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402434:	4a11      	ldr	r2, [pc, #68]	; (40247c <pmc_sleep+0x230>)
  402436:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  402438:	4b18      	ldr	r3, [pc, #96]	; (40249c <pmc_sleep+0x250>)
  40243a:	400b      	ands	r3, r1
  40243c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402440:	6213      	str	r3, [r2, #32]
  402442:	e78c      	b.n	40235e <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  402444:	2100      	movs	r1, #0
  402446:	e793      	b.n	402370 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  402448:	4a08      	ldr	r2, [pc, #32]	; (40246c <pmc_sleep+0x220>)
  40244a:	6913      	ldr	r3, [r2, #16]
  40244c:	f043 0304 	orr.w	r3, r3, #4
  402450:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  402452:	4a19      	ldr	r2, [pc, #100]	; (4024b8 <pmc_sleep+0x26c>)
  402454:	4b19      	ldr	r3, [pc, #100]	; (4024bc <pmc_sleep+0x270>)
  402456:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  402458:	2201      	movs	r2, #1
  40245a:	4b05      	ldr	r3, [pc, #20]	; (402470 <pmc_sleep+0x224>)
  40245c:	701a      	strb	r2, [r3, #0]
  40245e:	f3bf 8f5f 	dmb	sy
  402462:	b662      	cpsie	i
  __ASM volatile ("wfi");
  402464:	bf30      	wfi
  402466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40246a:	bf00      	nop
  40246c:	e000ed00 	.word	0xe000ed00
  402470:	204000e7 	.word	0x204000e7
  402474:	004021fd 	.word	0x004021fd
  402478:	20400b44 	.word	0x20400b44
  40247c:	400e0600 	.word	0x400e0600
  402480:	400e0c00 	.word	0x400e0c00
  402484:	00370008 	.word	0x00370008
  402488:	00402171 	.word	0x00402171
  40248c:	fec8ffff 	.word	0xfec8ffff
  402490:	00402201 	.word	0x00402201
  402494:	fec8fffc 	.word	0xfec8fffc
  402498:	01370002 	.word	0x01370002
  40249c:	ffc8ff87 	.word	0xffc8ff87
  4024a0:	07ff0000 	.word	0x07ff0000
  4024a4:	20400b48 	.word	0x20400b48
  4024a8:	ffc8fffe 	.word	0xffc8fffe
  4024ac:	ffc8fffc 	.word	0xffc8fffc
  4024b0:	00370001 	.word	0x00370001
  4024b4:	01370000 	.word	0x01370000
  4024b8:	a5000004 	.word	0xa5000004
  4024bc:	400e1810 	.word	0x400e1810

004024c0 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  4024c0:	4b02      	ldr	r3, [pc, #8]	; (4024cc <pmc_is_wakeup_clocks_restored+0xc>)
  4024c2:	7818      	ldrb	r0, [r3, #0]
}
  4024c4:	f080 0001 	eor.w	r0, r0, #1
  4024c8:	4770      	bx	lr
  4024ca:	bf00      	nop
  4024cc:	20400b44 	.word	0x20400b44

004024d0 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_idle true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  4024d0:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  4024d2:	4601      	mov	r1, r0
  4024d4:	bb28      	cbnz	r0, 402522 <udd_sleep_mode+0x52>
  4024d6:	4b24      	ldr	r3, [pc, #144]	; (402568 <udd_sleep_mode+0x98>)
  4024d8:	781b      	ldrb	r3, [r3, #0]
  4024da:	b91b      	cbnz	r3, 4024e4 <udd_sleep_mode+0x14>
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(USBHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  4024dc:	4b22      	ldr	r3, [pc, #136]	; (402568 <udd_sleep_mode+0x98>)
  4024de:	7019      	strb	r1, [r3, #0]
}
  4024e0:	b002      	add	sp, #8
  4024e2:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  4024e4:	4b21      	ldr	r3, [pc, #132]	; (40256c <udd_sleep_mode+0x9c>)
  4024e6:	789b      	ldrb	r3, [r3, #2]
  4024e8:	b903      	cbnz	r3, 4024ec <udd_sleep_mode+0x1c>
  4024ea:	e7fe      	b.n	4024ea <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4024ec:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4024f0:	fab3 f383 	clz	r3, r3
  4024f4:	095b      	lsrs	r3, r3, #5
  4024f6:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4024f8:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4024fa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4024fe:	2200      	movs	r2, #0
  402500:	4b1b      	ldr	r3, [pc, #108]	; (402570 <udd_sleep_mode+0xa0>)
  402502:	701a      	strb	r2, [r3, #0]
	return flags;
  402504:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  402506:	4a19      	ldr	r2, [pc, #100]	; (40256c <udd_sleep_mode+0x9c>)
  402508:	7893      	ldrb	r3, [r2, #2]
  40250a:	3b01      	subs	r3, #1
  40250c:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  40250e:	2800      	cmp	r0, #0
  402510:	d0e4      	beq.n	4024dc <udd_sleep_mode+0xc>
		cpu_irq_enable();
  402512:	2201      	movs	r2, #1
  402514:	4b16      	ldr	r3, [pc, #88]	; (402570 <udd_sleep_mode+0xa0>)
  402516:	701a      	strb	r2, [r3, #0]
  402518:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40251c:	b662      	cpsie	i
  40251e:	e7dd      	b.n	4024dc <udd_sleep_mode+0xc>
  402520:	e7fe      	b.n	402520 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  402522:	4b11      	ldr	r3, [pc, #68]	; (402568 <udd_sleep_mode+0x98>)
  402524:	781b      	ldrb	r3, [r3, #0]
  402526:	2b00      	cmp	r3, #0
  402528:	d1d8      	bne.n	4024dc <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  40252a:	4b10      	ldr	r3, [pc, #64]	; (40256c <udd_sleep_mode+0x9c>)
  40252c:	789b      	ldrb	r3, [r3, #2]
  40252e:	2bff      	cmp	r3, #255	; 0xff
  402530:	d0f6      	beq.n	402520 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402532:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402536:	fab3 f383 	clz	r3, r3
  40253a:	095b      	lsrs	r3, r3, #5
  40253c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40253e:	b672      	cpsid	i
  402540:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402544:	2200      	movs	r2, #0
  402546:	4b0a      	ldr	r3, [pc, #40]	; (402570 <udd_sleep_mode+0xa0>)
  402548:	701a      	strb	r2, [r3, #0]
	return flags;
  40254a:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  40254c:	4a07      	ldr	r2, [pc, #28]	; (40256c <udd_sleep_mode+0x9c>)
  40254e:	7893      	ldrb	r3, [r2, #2]
  402550:	3301      	adds	r3, #1
  402552:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  402554:	2800      	cmp	r0, #0
  402556:	d0c1      	beq.n	4024dc <udd_sleep_mode+0xc>
		cpu_irq_enable();
  402558:	2201      	movs	r2, #1
  40255a:	4b05      	ldr	r3, [pc, #20]	; (402570 <udd_sleep_mode+0xa0>)
  40255c:	701a      	strb	r2, [r3, #0]
  40255e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402562:	b662      	cpsie	i
  402564:	e7ba      	b.n	4024dc <udd_sleep_mode+0xc>
  402566:	bf00      	nop
  402568:	20400b4d 	.word	0x20400b4d
  40256c:	20401034 	.word	0x20401034
  402570:	204000e7 	.word	0x204000e7

00402574 <udd_ctrl_init>:
	udd_enable_endpoint_interrupt(0);
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
  402574:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402576:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40257a:	fab3 f383 	clz	r3, r3
  40257e:	095b      	lsrs	r3, r3, #5
  402580:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402582:	b672      	cpsid	i
  402584:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402588:	2200      	movs	r2, #0
  40258a:	4b0c      	ldr	r3, [pc, #48]	; (4025bc <udd_ctrl_init+0x48>)
  40258c:	701a      	strb	r2, [r3, #0]
	return flags;
  40258e:	9b01      	ldr	r3, [sp, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
  402590:	2101      	movs	r1, #1
  402592:	4a0b      	ldr	r2, [pc, #44]	; (4025c0 <udd_ctrl_init+0x4c>)
  402594:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  402596:	b123      	cbz	r3, 4025a2 <udd_ctrl_init+0x2e>
		cpu_irq_enable();
  402598:	4b08      	ldr	r3, [pc, #32]	; (4025bc <udd_ctrl_init+0x48>)
  40259a:	7019      	strb	r1, [r3, #0]
  40259c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4025a0:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
  4025a2:	2202      	movs	r2, #2
  4025a4:	4b07      	ldr	r3, [pc, #28]	; (4025c4 <udd_ctrl_init+0x50>)
  4025a6:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
  4025a8:	4a07      	ldr	r2, [pc, #28]	; (4025c8 <udd_ctrl_init+0x54>)
  4025aa:	2300      	movs	r3, #0
  4025ac:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4025ae:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  4025b0:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  4025b2:	4a06      	ldr	r2, [pc, #24]	; (4025cc <udd_ctrl_init+0x58>)
  4025b4:	7013      	strb	r3, [r2, #0]
}
  4025b6:	b002      	add	sp, #8
  4025b8:	4770      	bx	lr
  4025ba:	bf00      	nop
  4025bc:	204000e7 	.word	0x204000e7
  4025c0:	40038220 	.word	0x40038220
  4025c4:	40038160 	.word	0x40038160
  4025c8:	2040103c 	.word	0x2040103c
  4025cc:	20400b54 	.word	0x20400b54

004025d0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4025d0:	2205      	movs	r2, #5
  4025d2:	4b03      	ldr	r3, [pc, #12]	; (4025e0 <udd_ctrl_stall_data+0x10>)
  4025d4:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  4025d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4025da:	4b02      	ldr	r3, [pc, #8]	; (4025e4 <udd_ctrl_stall_data+0x14>)
  4025dc:	601a      	str	r2, [r3, #0]
  4025de:	4770      	bx	lr
  4025e0:	20400b54 	.word	0x20400b54
  4025e4:	400381f0 	.word	0x400381f0

004025e8 <udd_ctrl_send_zlp_in>:
}


static void udd_ctrl_send_zlp_in(void)
{
  4025e8:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  4025ea:	2203      	movs	r2, #3
  4025ec:	4b0f      	ldr	r3, [pc, #60]	; (40262c <udd_ctrl_send_zlp_in+0x44>)
  4025ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4025f0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4025f4:	fab3 f383 	clz	r3, r3
  4025f8:	095b      	lsrs	r3, r3, #5
  4025fa:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4025fc:	b672      	cpsid	i
  4025fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402602:	2200      	movs	r2, #0
  402604:	4b0a      	ldr	r3, [pc, #40]	; (402630 <udd_ctrl_send_zlp_in+0x48>)
  402606:	701a      	strb	r2, [r3, #0]
	return flags;
  402608:	9801      	ldr	r0, [sp, #4]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
  40260a:	490a      	ldr	r1, [pc, #40]	; (402634 <udd_ctrl_send_zlp_in+0x4c>)
  40260c:	2201      	movs	r2, #1
  40260e:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
  402610:	4b09      	ldr	r3, [pc, #36]	; (402638 <udd_ctrl_send_zlp_in+0x50>)
  402612:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
  402614:	2208      	movs	r2, #8
  402616:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
  402618:	601a      	str	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
  40261a:	b128      	cbz	r0, 402628 <udd_ctrl_send_zlp_in+0x40>
		cpu_irq_enable();
  40261c:	2201      	movs	r2, #1
  40261e:	4b04      	ldr	r3, [pc, #16]	; (402630 <udd_ctrl_send_zlp_in+0x48>)
  402620:	701a      	strb	r2, [r3, #0]
  402622:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402626:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
  402628:	b002      	add	sp, #8
  40262a:	4770      	bx	lr
  40262c:	20400b54 	.word	0x20400b54
  402630:	204000e7 	.word	0x204000e7
  402634:	40038160 	.word	0x40038160
  402638:	400381f0 	.word	0x400381f0

0040263c <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
  40263c:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  40263e:	4b02      	ldr	r3, [pc, #8]	; (402648 <udd_ctrl_endofrequest+0xc>)
  402640:	691b      	ldr	r3, [r3, #16]
  402642:	b103      	cbz	r3, 402646 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  402644:	4798      	blx	r3
  402646:	bd08      	pop	{r3, pc}
  402648:	2040103c 	.word	0x2040103c

0040264c <udd_ctrl_in_sent>:
{
  40264c:	b530      	push	{r4, r5, lr}
  40264e:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402650:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402654:	fab3 f383 	clz	r3, r3
  402658:	095b      	lsrs	r3, r3, #5
  40265a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40265c:	b672      	cpsid	i
  40265e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402662:	2200      	movs	r2, #0
  402664:	4b4f      	ldr	r3, [pc, #316]	; (4027a4 <udd_ctrl_in_sent+0x158>)
  402666:	701a      	strb	r2, [r3, #0]
	return flags;
  402668:	9b01      	ldr	r3, [sp, #4]
	udd_disable_in_send_interrupt(0);
  40266a:	2101      	movs	r1, #1
  40266c:	4a4e      	ldr	r2, [pc, #312]	; (4027a8 <udd_ctrl_in_sent+0x15c>)
  40266e:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  402670:	b123      	cbz	r3, 40267c <udd_ctrl_in_sent+0x30>
		cpu_irq_enable();
  402672:	4b4c      	ldr	r3, [pc, #304]	; (4027a4 <udd_ctrl_in_sent+0x158>)
  402674:	7019      	strb	r1, [r3, #0]
  402676:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40267a:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  40267c:	4b4b      	ldr	r3, [pc, #300]	; (4027ac <udd_ctrl_in_sent+0x160>)
  40267e:	781b      	ldrb	r3, [r3, #0]
  402680:	2b03      	cmp	r3, #3
  402682:	d05d      	beq.n	402740 <udd_ctrl_in_sent+0xf4>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
  402684:	4b4a      	ldr	r3, [pc, #296]	; (4027b0 <udd_ctrl_in_sent+0x164>)
  402686:	881b      	ldrh	r3, [r3, #0]
  402688:	4a4a      	ldr	r2, [pc, #296]	; (4027b4 <udd_ctrl_in_sent+0x168>)
  40268a:	8994      	ldrh	r4, [r2, #12]
  40268c:	1ae4      	subs	r4, r4, r3
  40268e:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  402690:	b9c4      	cbnz	r4, 4026c4 <udd_ctrl_in_sent+0x78>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
  402692:	4a49      	ldr	r2, [pc, #292]	; (4027b8 <udd_ctrl_in_sent+0x16c>)
  402694:	8811      	ldrh	r1, [r2, #0]
  402696:	440b      	add	r3, r1
  402698:	b29b      	uxth	r3, r3
  40269a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
  40269c:	4a45      	ldr	r2, [pc, #276]	; (4027b4 <udd_ctrl_in_sent+0x168>)
  40269e:	88d2      	ldrh	r2, [r2, #6]
  4026a0:	429a      	cmp	r2, r3
  4026a2:	d052      	beq.n	40274a <udd_ctrl_in_sent+0xfe>
					|| b_shortpacket) {
  4026a4:	4b45      	ldr	r3, [pc, #276]	; (4027bc <udd_ctrl_in_sent+0x170>)
  4026a6:	781b      	ldrb	r3, [r3, #0]
  4026a8:	2b00      	cmp	r3, #0
  4026aa:	d14e      	bne.n	40274a <udd_ctrl_in_sent+0xfe>
		if ((!udd_g_ctrlreq.over_under_run)
  4026ac:	4b41      	ldr	r3, [pc, #260]	; (4027b4 <udd_ctrl_in_sent+0x168>)
  4026ae:	695b      	ldr	r3, [r3, #20]
  4026b0:	2b00      	cmp	r3, #0
  4026b2:	d067      	beq.n	402784 <udd_ctrl_in_sent+0x138>
				|| (!udd_g_ctrlreq.over_under_run())) {
  4026b4:	4798      	blx	r3
  4026b6:	2800      	cmp	r0, #0
  4026b8:	d064      	beq.n	402784 <udd_ctrl_in_sent+0x138>
			udd_ctrl_payload_buf_cnt = 0;
  4026ba:	2200      	movs	r2, #0
  4026bc:	4b3c      	ldr	r3, [pc, #240]	; (4027b0 <udd_ctrl_in_sent+0x164>)
  4026be:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  4026c0:	4b3c      	ldr	r3, [pc, #240]	; (4027b4 <udd_ctrl_in_sent+0x168>)
  4026c2:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  4026c4:	2c3f      	cmp	r4, #63	; 0x3f
  4026c6:	d95d      	bls.n	402784 <udd_ctrl_in_sent+0x138>
		b_shortpacket = false;
  4026c8:	2200      	movs	r2, #0
  4026ca:	4b3c      	ldr	r3, [pc, #240]	; (4027bc <udd_ctrl_in_sent+0x170>)
  4026cc:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  4026ce:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  4026d0:	4b38      	ldr	r3, [pc, #224]	; (4027b4 <udd_ctrl_in_sent+0x168>)
  4026d2:	6899      	ldr	r1, [r3, #8]
  4026d4:	4b36      	ldr	r3, [pc, #216]	; (4027b0 <udd_ctrl_in_sent+0x164>)
  4026d6:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4026d8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4026dc:	fab3 f383 	clz	r3, r3
  4026e0:	095b      	lsrs	r3, r3, #5
  4026e2:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  4026e4:	b672      	cpsid	i
  4026e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4026ea:	2200      	movs	r2, #0
  4026ec:	4b2d      	ldr	r3, [pc, #180]	; (4027a4 <udd_ctrl_in_sent+0x158>)
  4026ee:	701a      	strb	r2, [r3, #0]
	return flags;
  4026f0:	9d02      	ldr	r5, [sp, #8]
	if (Is_udd_out_received(0)) {
  4026f2:	4b33      	ldr	r3, [pc, #204]	; (4027c0 <udd_ctrl_in_sent+0x174>)
  4026f4:	681b      	ldr	r3, [r3, #0]
  4026f6:	f013 0f02 	tst.w	r3, #2
  4026fa:	d147      	bne.n	40278c <udd_ctrl_in_sent+0x140>
	for (i = 0; i < nb_remain; i++) {
  4026fc:	b154      	cbz	r4, 402714 <udd_ctrl_in_sent+0xc8>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  4026fe:	4401      	add	r1, r0
  402700:	4830      	ldr	r0, [pc, #192]	; (4027c4 <udd_ctrl_in_sent+0x178>)
		*ptr_dest++ = *ptr_src++;
  402702:	1c43      	adds	r3, r0, #1
  402704:	780a      	ldrb	r2, [r1, #0]
  402706:	b2d2      	uxtb	r2, r2
  402708:	7002      	strb	r2, [r0, #0]
  40270a:	4618      	mov	r0, r3
  40270c:	3101      	adds	r1, #1
	for (i = 0; i < nb_remain; i++) {
  40270e:	b2db      	uxtb	r3, r3
  402710:	42a3      	cmp	r3, r4
  402712:	d3f6      	bcc.n	402702 <udd_ctrl_in_sent+0xb6>
	udd_ctrl_payload_buf_cnt += nb_remain;
  402714:	4b26      	ldr	r3, [pc, #152]	; (4027b0 <udd_ctrl_in_sent+0x164>)
  402716:	881a      	ldrh	r2, [r3, #0]
  402718:	4414      	add	r4, r2
  40271a:	801c      	strh	r4, [r3, #0]
  __ASM volatile ("dsb");
  40271c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402720:	f3bf 8f6f 	isb	sy
	udd_ack_in_send(0);
  402724:	2301      	movs	r3, #1
  402726:	4a28      	ldr	r2, [pc, #160]	; (4027c8 <udd_ctrl_in_sent+0x17c>)
  402728:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
  40272a:	3290      	adds	r2, #144	; 0x90
  40272c:	6013      	str	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  40272e:	2d00      	cmp	r5, #0
  402730:	d036      	beq.n	4027a0 <udd_ctrl_in_sent+0x154>
		cpu_irq_enable();
  402732:	461a      	mov	r2, r3
  402734:	4b1b      	ldr	r3, [pc, #108]	; (4027a4 <udd_ctrl_in_sent+0x158>)
  402736:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402738:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40273c:	b662      	cpsie	i
  40273e:	e02f      	b.n	4027a0 <udd_ctrl_in_sent+0x154>
		udd_ctrl_endofrequest();
  402740:	4b22      	ldr	r3, [pc, #136]	; (4027cc <udd_ctrl_in_sent+0x180>)
  402742:	4798      	blx	r3
		udd_ctrl_init();
  402744:	4b22      	ldr	r3, [pc, #136]	; (4027d0 <udd_ctrl_in_sent+0x184>)
  402746:	4798      	blx	r3
		return;
  402748:	e02a      	b.n	4027a0 <udd_ctrl_in_sent+0x154>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  40274a:	2204      	movs	r2, #4
  40274c:	4b17      	ldr	r3, [pc, #92]	; (4027ac <udd_ctrl_in_sent+0x160>)
  40274e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402750:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402754:	fab3 f383 	clz	r3, r3
  402758:	095b      	lsrs	r3, r3, #5
  40275a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  40275c:	b672      	cpsid	i
  40275e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402762:	2200      	movs	r2, #0
  402764:	4b0f      	ldr	r3, [pc, #60]	; (4027a4 <udd_ctrl_in_sent+0x158>)
  402766:	701a      	strb	r2, [r3, #0]
	return flags;
  402768:	9a03      	ldr	r2, [sp, #12]
	udd_ack_nak_in(0);
  40276a:	2310      	movs	r3, #16
  40276c:	4916      	ldr	r1, [pc, #88]	; (4027c8 <udd_ctrl_in_sent+0x17c>)
  40276e:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
  402770:	3190      	adds	r1, #144	; 0x90
  402772:	600b      	str	r3, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  402774:	b1a2      	cbz	r2, 4027a0 <udd_ctrl_in_sent+0x154>
		cpu_irq_enable();
  402776:	2201      	movs	r2, #1
  402778:	4b0a      	ldr	r3, [pc, #40]	; (4027a4 <udd_ctrl_in_sent+0x158>)
  40277a:	701a      	strb	r2, [r3, #0]
  40277c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402780:	b662      	cpsie	i
  402782:	e00d      	b.n	4027a0 <udd_ctrl_in_sent+0x154>
		b_shortpacket = true;
  402784:	2201      	movs	r2, #1
  402786:	4b0d      	ldr	r3, [pc, #52]	; (4027bc <udd_ctrl_in_sent+0x170>)
  402788:	701a      	strb	r2, [r3, #0]
  40278a:	e7a1      	b.n	4026d0 <udd_ctrl_in_sent+0x84>
	if (cpu_irq_is_enabled_flags(flags))
  40278c:	b12d      	cbz	r5, 40279a <udd_ctrl_in_sent+0x14e>
		cpu_irq_enable();
  40278e:	2201      	movs	r2, #1
  402790:	4b04      	ldr	r3, [pc, #16]	; (4027a4 <udd_ctrl_in_sent+0x158>)
  402792:	701a      	strb	r2, [r3, #0]
  402794:	f3bf 8f5f 	dmb	sy
  402798:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  40279a:	2204      	movs	r2, #4
  40279c:	4b03      	ldr	r3, [pc, #12]	; (4027ac <udd_ctrl_in_sent+0x160>)
  40279e:	701a      	strb	r2, [r3, #0]
}
  4027a0:	b005      	add	sp, #20
  4027a2:	bd30      	pop	{r4, r5, pc}
  4027a4:	204000e7 	.word	0x204000e7
  4027a8:	40038220 	.word	0x40038220
  4027ac:	20400b54 	.word	0x20400b54
  4027b0:	20400b50 	.word	0x20400b50
  4027b4:	2040103c 	.word	0x2040103c
  4027b8:	20400b52 	.word	0x20400b52
  4027bc:	20400b4c 	.word	0x20400b4c
  4027c0:	40038130 	.word	0x40038130
  4027c4:	a0100000 	.word	0xa0100000
  4027c8:	40038160 	.word	0x40038160
  4027cc:	0040263d 	.word	0x0040263d
  4027d0:	00402575 	.word	0x00402575

004027d4 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
  4027d4:	7d03      	ldrb	r3, [r0, #20]
  4027d6:	f013 0f01 	tst.w	r3, #1
  4027da:	d013      	beq.n	402804 <udd_ep_finish_job+0x30>
{
  4027dc:	b510      	push	{r4, lr}
  4027de:	460c      	mov	r4, r1
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
  4027e0:	7d03      	ldrb	r3, [r0, #20]
  4027e2:	f36f 0300 	bfc	r3, #0, #1
  4027e6:	7503      	strb	r3, [r0, #20]
	if (NULL == ptr_job->call_trans) {
  4027e8:	6803      	ldr	r3, [r0, #0]
  4027ea:	b153      	cbz	r3, 402802 <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
  4027ec:	4906      	ldr	r1, [pc, #24]	; (402808 <udd_ep_finish_job+0x34>)
  4027ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  4027f2:	f411 7f80 	tst.w	r1, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
  4027f6:	bf18      	it	ne
  4027f8:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
  4027fc:	6881      	ldr	r1, [r0, #8]
  4027fe:	4620      	mov	r0, r4
  402800:	4798      	blx	r3
  402802:	bd10      	pop	{r4, pc}
  402804:	4770      	bx	lr
  402806:	bf00      	nop
  402808:	40038100 	.word	0x40038100

0040280c <udd_ep_trans_done>:
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
  40280c:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
  40280e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402812:	4a5f      	ldr	r2, [pc, #380]	; (402990 <udd_ep_trans_done+0x184>)
  402814:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  402818:	7d12      	ldrb	r2, [r2, #20]
  40281a:	f012 0f01 	tst.w	r2, #1
  40281e:	f000 80b6 	beq.w	40298e <udd_ep_trans_done+0x182>
{
  402822:	b5f0      	push	{r4, r5, r6, r7, lr}
  402824:	b083      	sub	sp, #12
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
  402826:	460a      	mov	r2, r1
  402828:	4959      	ldr	r1, [pc, #356]	; (402990 <udd_ep_trans_done+0x184>)
  40282a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40282e:	68d1      	ldr	r1, [r2, #12]
  402830:	6892      	ldr	r2, [r2, #8]
  402832:	4291      	cmp	r1, r2
  402834:	d078      	beq.n	402928 <udd_ep_trans_done+0x11c>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
  402836:	1a52      	subs	r2, r2, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
  402838:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  40283c:	d81b      	bhi.n	402876 <udd_ep_trans_done+0x6a>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
  40283e:	0417      	lsls	r7, r2, #16
		}
		if (Is_udd_endpoint_in(ep)) {
  402840:	4c54      	ldr	r4, [pc, #336]	; (402994 <udd_ep_trans_done+0x188>)
  402842:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  402846:	f415 7f80 	tst.w	r5, #256	; 0x100
  40284a:	d018      	beq.n	40287e <udd_ep_trans_done+0x72>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
  40284c:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  402850:	f3c5 1502 	ubfx	r5, r5, #4, #3
  402854:	2408      	movs	r4, #8
  402856:	40ac      	lsls	r4, r5
  402858:	3c01      	subs	r4, #1
  40285a:	4214      	tst	r4, r2
  40285c:	d017      	beq.n	40288e <udd_ep_trans_done+0x82>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  40285e:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
  402862:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  402866:	4d4a      	ldr	r5, [pc, #296]	; (402990 <udd_ep_trans_done+0x184>)
  402868:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
  40286c:	7d25      	ldrb	r5, [r4, #20]
  40286e:	f36f 0541 	bfc	r5, #1, #1
  402872:	7525      	strb	r5, [r4, #20]
  402874:	e00b      	b.n	40288e <udd_ep_trans_done+0x82>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
  402876:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  40287a:	2700      	movs	r7, #0
  40287c:	e7e0      	b.n	402840 <udd_ep_trans_done+0x34>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
  40287e:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  402882:	f3c5 25c1 	ubfx	r5, r5, #11, #2
  402886:	2d01      	cmp	r5, #1
  402888:	d037      	beq.n	4028fa <udd_ep_trans_done+0xee>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT
  40288a:	f047 0714 	orr.w	r7, r7, #20
						| USBHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
  40288e:	4c42      	ldr	r4, [pc, #264]	; (402998 <udd_ep_trans_done+0x18c>)
  402890:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  402894:	eb03 0543 	add.w	r5, r3, r3, lsl #1
  402898:	4e3d      	ldr	r6, [pc, #244]	; (402990 <udd_ep_trans_done+0x184>)
  40289a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  40289e:	686d      	ldr	r5, [r5, #4]
  4028a0:	4429      	add	r1, r5
  4028a2:	6061      	str	r1, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4028a4:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4028a8:	fab1 f181 	clz	r1, r1
  4028ac:	0949      	lsrs	r1, r1, #5
  4028ae:	9101      	str	r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4028b0:	b672      	cpsid	i
  4028b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4028b6:	2500      	movs	r5, #0
  4028b8:	4938      	ldr	r1, [pc, #224]	; (40299c <udd_ep_trans_done+0x190>)
  4028ba:	700d      	strb	r5, [r1, #0]
	return flags;
  4028bc:	9d01      	ldr	r5, [sp, #4]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
  4028be:	68e1      	ldr	r1, [r4, #12]
  4028c0:	f011 0f10 	tst.w	r1, #16
  4028c4:	d122      	bne.n	40290c <udd_ep_trans_done+0x100>
		udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT |
  4028c6:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& USBHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
  4028ca:	60a7      	str	r7, [r4, #8]
			ptr_job->buf_cnt += next_trans;
  4028cc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4028d0:	eb06 01c0 	add.w	r1, r6, r0, lsl #3
  4028d4:	68c8      	ldr	r0, [r1, #12]
  4028d6:	4410      	add	r0, r2
  4028d8:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
  4028da:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
  4028dc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  4028e0:	fa00 f303 	lsl.w	r3, r0, r3
  4028e4:	4a2e      	ldr	r2, [pc, #184]	; (4029a0 <udd_ep_trans_done+0x194>)
  4028e6:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
  4028e8:	2d00      	cmp	r5, #0
  4028ea:	d04e      	beq.n	40298a <udd_ep_trans_done+0x17e>
		cpu_irq_enable();
  4028ec:	2201      	movs	r2, #1
  4028ee:	4b2b      	ldr	r3, [pc, #172]	; (40299c <udd_ep_trans_done+0x190>)
  4028f0:	701a      	strb	r2, [r3, #0]
  4028f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4028f6:	b662      	cpsie	i
  4028f8:	e047      	b.n	40298a <udd_ep_trans_done+0x17e>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
  4028fa:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  4028fe:	f3c5 1502 	ubfx	r5, r5, #4, #3
  402902:	2408      	movs	r4, #8
  402904:	40ac      	lsls	r4, r5
  402906:	42a2      	cmp	r2, r4
  402908:	d8c1      	bhi.n	40288e <udd_ep_trans_done+0x82>
  40290a:	e7be      	b.n	40288a <udd_ep_trans_done+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
  40290c:	b12d      	cbz	r5, 40291a <udd_ep_trans_done+0x10e>
		cpu_irq_enable();
  40290e:	2101      	movs	r1, #1
  402910:	4a22      	ldr	r2, [pc, #136]	; (40299c <udd_ep_trans_done+0x190>)
  402912:	7011      	strb	r1, [r2, #0]
  402914:	f3bf 8f5f 	dmb	sy
  402918:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
  40291a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  40291e:	491c      	ldr	r1, [pc, #112]	; (402990 <udd_ep_trans_done+0x184>)
  402920:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  402924:	68d1      	ldr	r1, [r2, #12]
  402926:	6091      	str	r1, [r2, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
  402928:	4a1a      	ldr	r2, [pc, #104]	; (402994 <udd_ep_trans_done+0x188>)
  40292a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  40292e:	f412 7f80 	tst.w	r2, #256	; 0x100
  402932:	d021      	beq.n	402978 <udd_ep_trans_done+0x16c>
		if (ptr_job->b_shortpacket) {
  402934:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  402938:	4915      	ldr	r1, [pc, #84]	; (402990 <udd_ep_trans_done+0x184>)
  40293a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40293e:	7d12      	ldrb	r2, [r2, #20]
  402940:	f012 0f02 	tst.w	r2, #2
  402944:	d018      	beq.n	402978 <udd_ep_trans_done+0x16c>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
  402946:	2201      	movs	r2, #1
  402948:	4b16      	ldr	r3, [pc, #88]	; (4029a4 <udd_ep_trans_done+0x198>)
  40294a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (Is_udd_write_enabled(ep)) {
  40294e:	3b30      	subs	r3, #48	; 0x30
  402950:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  402954:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402958:	d002      	beq.n	402960 <udd_ep_trans_done+0x154>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
  40295a:	4b13      	ldr	r3, [pc, #76]	; (4029a8 <udd_ep_trans_done+0x19c>)
  40295c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
  402960:	2201      	movs	r2, #1
  402962:	4b12      	ldr	r3, [pc, #72]	; (4029ac <udd_ep_trans_done+0x1a0>)
  402964:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_enable_endpoint_interrupt(ep);
  402968:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40296c:	fa02 f000 	lsl.w	r0, r2, r0
  402970:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
  402974:	6198      	str	r0, [r3, #24]
			return;
  402976:	e008      	b.n	40298a <udd_ep_trans_done+0x17e>
  402978:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
  40297a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	} else {
		_dcache_invalidate(ptr_job->buf, ptr_job->buf_size);
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
  40297e:	2100      	movs	r1, #0
  402980:	4803      	ldr	r0, [pc, #12]	; (402990 <udd_ep_trans_done+0x184>)
  402982:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
  402986:	4b0a      	ldr	r3, [pc, #40]	; (4029b0 <udd_ep_trans_done+0x1a4>)
  402988:	4798      	blx	r3
}
  40298a:	b003      	add	sp, #12
  40298c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40298e:	4770      	bx	lr
  402990:	20400b58 	.word	0x20400b58
  402994:	40038100 	.word	0x40038100
  402998:	40038300 	.word	0x40038300
  40299c:	204000e7 	.word	0x204000e7
  4029a0:	40038000 	.word	0x40038000
  4029a4:	40038160 	.word	0x40038160
  4029a8:	40038190 	.word	0x40038190
  4029ac:	400381f0 	.word	0x400381f0
  4029b0:	004027d5 	.word	0x004027d5

004029b4 <USBHS_Handler>:
{
  4029b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4029b8:	b085      	sub	sp, #20
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  4029ba:	4b87      	ldr	r3, [pc, #540]	; (402bd8 <USBHS_Handler+0x224>)
  4029bc:	4798      	blx	r3
  4029be:	b920      	cbnz	r0, 4029ca <USBHS_Handler+0x16>
  4029c0:	4b86      	ldr	r3, [pc, #536]	; (402bdc <USBHS_Handler+0x228>)
  4029c2:	685b      	ldr	r3, [r3, #4]
  4029c4:	f013 0f01 	tst.w	r3, #1
  4029c8:	d011      	beq.n	4029ee <USBHS_Handler+0x3a>
	if (Is_udd_sof()) {
  4029ca:	4b84      	ldr	r3, [pc, #528]	; (402bdc <USBHS_Handler+0x228>)
  4029cc:	685b      	ldr	r3, [r3, #4]
  4029ce:	f013 0f04 	tst.w	r3, #4
  4029d2:	d016      	beq.n	402a02 <USBHS_Handler+0x4e>
		udd_ack_sof();
  4029d4:	4b81      	ldr	r3, [pc, #516]	; (402bdc <USBHS_Handler+0x228>)
  4029d6:	2204      	movs	r2, #4
  4029d8:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
  4029da:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
  4029de:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  4029e2:	d00b      	beq.n	4029fc <USBHS_Handler+0x48>
		UDC_SOF_EVENT();
  4029e4:	4b7e      	ldr	r3, [pc, #504]	; (402be0 <USBHS_Handler+0x22c>)
  4029e6:	4798      	blx	r3
}
  4029e8:	b005      	add	sp, #20
  4029ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("cpsid i" : : : "memory");
  4029ee:	b672      	cpsid	i
  4029f0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  4029f4:	2200      	movs	r2, #0
  4029f6:	4b7b      	ldr	r3, [pc, #492]	; (402be4 <USBHS_Handler+0x230>)
  4029f8:	701a      	strb	r2, [r3, #0]
		return;
  4029fa:	e7f5      	b.n	4029e8 <USBHS_Handler+0x34>
			udc_sof_notify();
  4029fc:	4b7a      	ldr	r3, [pc, #488]	; (402be8 <USBHS_Handler+0x234>)
  4029fe:	4798      	blx	r3
  402a00:	e7f0      	b.n	4029e4 <USBHS_Handler+0x30>
	if (Is_udd_msof()) {
  402a02:	4b76      	ldr	r3, [pc, #472]	; (402bdc <USBHS_Handler+0x228>)
  402a04:	685b      	ldr	r3, [r3, #4]
  402a06:	f013 0f02 	tst.w	r3, #2
  402a0a:	d133      	bne.n	402a74 <USBHS_Handler+0xc0>
	if (!Is_udd_endpoint_interrupt(0)) {
  402a0c:	4b73      	ldr	r3, [pc, #460]	; (402bdc <USBHS_Handler+0x228>)
  402a0e:	685b      	ldr	r3, [r3, #4]
  402a10:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  402a14:	d026      	beq.n	402a64 <USBHS_Handler+0xb0>
	udd_disable_nak_in_interrupt(0);
  402a16:	4b75      	ldr	r3, [pc, #468]	; (402bec <USBHS_Handler+0x238>)
  402a18:	2210      	movs	r2, #16
  402a1a:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
  402a1c:	2208      	movs	r2, #8
  402a1e:	601a      	str	r2, [r3, #0]
	if (Is_udd_setup_received(0)) {
  402a20:	3bf0      	subs	r3, #240	; 0xf0
  402a22:	681b      	ldr	r3, [r3, #0]
  402a24:	f013 0f04 	tst.w	r3, #4
  402a28:	d12a      	bne.n	402a80 <USBHS_Handler+0xcc>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
  402a2a:	4b71      	ldr	r3, [pc, #452]	; (402bf0 <USBHS_Handler+0x23c>)
  402a2c:	681b      	ldr	r3, [r3, #0]
  402a2e:	f013 0f01 	tst.w	r3, #1
  402a32:	d005      	beq.n	402a40 <USBHS_Handler+0x8c>
  402a34:	4b6f      	ldr	r3, [pc, #444]	; (402bf4 <USBHS_Handler+0x240>)
  402a36:	681b      	ldr	r3, [r3, #0]
  402a38:	f013 0f01 	tst.w	r3, #1
  402a3c:	f040 808b 	bne.w	402b56 <USBHS_Handler+0x1a2>
	if (Is_udd_out_received(0)) {
  402a40:	4b6b      	ldr	r3, [pc, #428]	; (402bf0 <USBHS_Handler+0x23c>)
  402a42:	681b      	ldr	r3, [r3, #0]
  402a44:	f013 0f02 	tst.w	r3, #2
  402a48:	f040 8088 	bne.w	402b5c <USBHS_Handler+0x1a8>
	if (Is_udd_nak_out(0)) {
  402a4c:	4b68      	ldr	r3, [pc, #416]	; (402bf0 <USBHS_Handler+0x23c>)
  402a4e:	681b      	ldr	r3, [r3, #0]
  402a50:	f013 0f08 	tst.w	r3, #8
  402a54:	f040 8135 	bne.w	402cc2 <USBHS_Handler+0x30e>
	if (Is_udd_nak_in(0)) {
  402a58:	4b65      	ldr	r3, [pc, #404]	; (402bf0 <USBHS_Handler+0x23c>)
  402a5a:	681b      	ldr	r3, [r3, #0]
  402a5c:	f013 0f10 	tst.w	r3, #16
  402a60:	f040 8142 	bne.w	402ce8 <USBHS_Handler+0x334>
	for (i = 0; i < nb_data; i++) {
  402a64:	4e64      	ldr	r6, [pc, #400]	; (402bf8 <USBHS_Handler+0x244>)
  402a66:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  402a68:	4a5c      	ldr	r2, [pc, #368]	; (402bdc <USBHS_Handler+0x228>)
  402a6a:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  402a6e:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  402a72:	e184      	b.n	402d7e <USBHS_Handler+0x3ca>
		udd_ack_msof();
  402a74:	2202      	movs	r2, #2
  402a76:	4b59      	ldr	r3, [pc, #356]	; (402bdc <USBHS_Handler+0x228>)
  402a78:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
  402a7a:	4b5b      	ldr	r3, [pc, #364]	; (402be8 <USBHS_Handler+0x234>)
  402a7c:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  402a7e:	e7b3      	b.n	4029e8 <USBHS_Handler+0x34>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  402a80:	4b5e      	ldr	r3, [pc, #376]	; (402bfc <USBHS_Handler+0x248>)
  402a82:	781b      	ldrb	r3, [r3, #0]
  402a84:	2b00      	cmp	r3, #0
  402a86:	d147      	bne.n	402b18 <USBHS_Handler+0x164>
	if (8 != udd_byte_count(0)) {
  402a88:	4b59      	ldr	r3, [pc, #356]	; (402bf0 <USBHS_Handler+0x23c>)
  402a8a:	681b      	ldr	r3, [r3, #0]
  402a8c:	f3c3 530a 	ubfx	r3, r3, #20, #11
  402a90:	2b08      	cmp	r3, #8
  402a92:	d146      	bne.n	402b22 <USBHS_Handler+0x16e>
	uint16_t nb_data = udd_byte_count(0);
  402a94:	4b56      	ldr	r3, [pc, #344]	; (402bf0 <USBHS_Handler+0x23c>)
  402a96:	6818      	ldr	r0, [r3, #0]
  402a98:	f3c0 500a 	ubfx	r0, r0, #20, #11
	for (i = 0; i < nb_data; i++) {
  402a9c:	b148      	cbz	r0, 402ab2 <USBHS_Handler+0xfe>
  402a9e:	4b58      	ldr	r3, [pc, #352]	; (402c00 <USBHS_Handler+0x24c>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
  402aa0:	4c58      	ldr	r4, [pc, #352]	; (402c04 <USBHS_Handler+0x250>)
  402aa2:	1c5a      	adds	r2, r3, #1
  402aa4:	7819      	ldrb	r1, [r3, #0]
  402aa6:	b2db      	uxtb	r3, r3
  402aa8:	5519      	strb	r1, [r3, r4]
  402aaa:	4613      	mov	r3, r2
	for (i = 0; i < nb_data; i++) {
  402aac:	b2d2      	uxtb	r2, r2
  402aae:	4282      	cmp	r2, r0
  402ab0:	d3f7      	bcc.n	402aa2 <USBHS_Handler+0xee>
	if (udc_process_setup() == false) {
  402ab2:	4b55      	ldr	r3, [pc, #340]	; (402c08 <USBHS_Handler+0x254>)
  402ab4:	4798      	blx	r3
  402ab6:	2800      	cmp	r0, #0
  402ab8:	d039      	beq.n	402b2e <USBHS_Handler+0x17a>
	udd_ack_setup_received(0);
  402aba:	2204      	movs	r2, #4
  402abc:	4b53      	ldr	r3, [pc, #332]	; (402c0c <USBHS_Handler+0x258>)
  402abe:	601a      	str	r2, [r3, #0]
	if (Udd_setup_is_in()) {
  402ac0:	4b50      	ldr	r3, [pc, #320]	; (402c04 <USBHS_Handler+0x250>)
  402ac2:	f993 3000 	ldrsb.w	r3, [r3]
  402ac6:	2b00      	cmp	r3, #0
  402ac8:	db37      	blt.n	402b3a <USBHS_Handler+0x186>
		if (0 == udd_g_ctrlreq.req.wLength) {
  402aca:	4b4e      	ldr	r3, [pc, #312]	; (402c04 <USBHS_Handler+0x250>)
  402acc:	88db      	ldrh	r3, [r3, #6]
  402ace:	2b00      	cmp	r3, #0
  402ad0:	d03e      	beq.n	402b50 <USBHS_Handler+0x19c>
		udd_ctrl_prev_payload_buf_cnt = 0;
  402ad2:	2200      	movs	r2, #0
  402ad4:	4b4e      	ldr	r3, [pc, #312]	; (402c10 <USBHS_Handler+0x25c>)
  402ad6:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
  402ad8:	4b4e      	ldr	r3, [pc, #312]	; (402c14 <USBHS_Handler+0x260>)
  402ada:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  402adc:	2101      	movs	r1, #1
  402ade:	4b47      	ldr	r3, [pc, #284]	; (402bfc <USBHS_Handler+0x248>)
  402ae0:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
  402ae2:	2110      	movs	r1, #16
  402ae4:	4b49      	ldr	r3, [pc, #292]	; (402c0c <USBHS_Handler+0x258>)
  402ae6:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402ae8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402aec:	fab3 f383 	clz	r3, r3
  402af0:	095b      	lsrs	r3, r3, #5
  402af2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402af4:	b672      	cpsid	i
  402af6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402afa:	4b3a      	ldr	r3, [pc, #232]	; (402be4 <USBHS_Handler+0x230>)
  402afc:	701a      	strb	r2, [r3, #0]
	return flags;
  402afe:	9b01      	ldr	r3, [sp, #4]
		udd_enable_nak_in_interrupt(0);
  402b00:	4a45      	ldr	r2, [pc, #276]	; (402c18 <USBHS_Handler+0x264>)
  402b02:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  402b04:	2b00      	cmp	r3, #0
  402b06:	f43f af6f 	beq.w	4029e8 <USBHS_Handler+0x34>
		cpu_irq_enable();
  402b0a:	2201      	movs	r2, #1
  402b0c:	4b35      	ldr	r3, [pc, #212]	; (402be4 <USBHS_Handler+0x230>)
  402b0e:	701a      	strb	r2, [r3, #0]
  402b10:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402b14:	b662      	cpsie	i
  402b16:	e767      	b.n	4029e8 <USBHS_Handler+0x34>
		udd_ctrl_endofrequest();
  402b18:	4b40      	ldr	r3, [pc, #256]	; (402c1c <USBHS_Handler+0x268>)
  402b1a:	4798      	blx	r3
		udd_ctrl_init();
  402b1c:	4b40      	ldr	r3, [pc, #256]	; (402c20 <USBHS_Handler+0x26c>)
  402b1e:	4798      	blx	r3
  402b20:	e7b2      	b.n	402a88 <USBHS_Handler+0xd4>
		udd_ctrl_stall_data();
  402b22:	4b40      	ldr	r3, [pc, #256]	; (402c24 <USBHS_Handler+0x270>)
  402b24:	4798      	blx	r3
		udd_ack_setup_received(0);
  402b26:	2204      	movs	r2, #4
  402b28:	4b38      	ldr	r3, [pc, #224]	; (402c0c <USBHS_Handler+0x258>)
  402b2a:	601a      	str	r2, [r3, #0]
  402b2c:	e75c      	b.n	4029e8 <USBHS_Handler+0x34>
		udd_ctrl_stall_data();
  402b2e:	4b3d      	ldr	r3, [pc, #244]	; (402c24 <USBHS_Handler+0x270>)
  402b30:	4798      	blx	r3
		udd_ack_setup_received(0);
  402b32:	2204      	movs	r2, #4
  402b34:	4b35      	ldr	r3, [pc, #212]	; (402c0c <USBHS_Handler+0x258>)
  402b36:	601a      	str	r2, [r3, #0]
  402b38:	e756      	b.n	4029e8 <USBHS_Handler+0x34>
		udd_ctrl_prev_payload_buf_cnt = 0;
  402b3a:	2300      	movs	r3, #0
  402b3c:	4a34      	ldr	r2, [pc, #208]	; (402c10 <USBHS_Handler+0x25c>)
  402b3e:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
  402b40:	4a34      	ldr	r2, [pc, #208]	; (402c14 <USBHS_Handler+0x260>)
  402b42:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  402b44:	2202      	movs	r2, #2
  402b46:	4b2d      	ldr	r3, [pc, #180]	; (402bfc <USBHS_Handler+0x248>)
  402b48:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  402b4a:	4b37      	ldr	r3, [pc, #220]	; (402c28 <USBHS_Handler+0x274>)
  402b4c:	4798      	blx	r3
  402b4e:	e74b      	b.n	4029e8 <USBHS_Handler+0x34>
			udd_ctrl_send_zlp_in();
  402b50:	4b36      	ldr	r3, [pc, #216]	; (402c2c <USBHS_Handler+0x278>)
  402b52:	4798      	blx	r3
  402b54:	e748      	b.n	4029e8 <USBHS_Handler+0x34>
		udd_ctrl_in_sent();
  402b56:	4b34      	ldr	r3, [pc, #208]	; (402c28 <USBHS_Handler+0x274>)
  402b58:	4798      	blx	r3
  402b5a:	e745      	b.n	4029e8 <USBHS_Handler+0x34>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  402b5c:	4b27      	ldr	r3, [pc, #156]	; (402bfc <USBHS_Handler+0x248>)
  402b5e:	781b      	ldrb	r3, [r3, #0]
  402b60:	2b01      	cmp	r3, #1
  402b62:	d00b      	beq.n	402b7c <USBHS_Handler+0x1c8>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  402b64:	2b02      	cmp	r3, #2
  402b66:	d004      	beq.n	402b72 <USBHS_Handler+0x1be>
  402b68:	2b04      	cmp	r3, #4
  402b6a:	d002      	beq.n	402b72 <USBHS_Handler+0x1be>
			udd_ctrl_stall_data();
  402b6c:	4b2d      	ldr	r3, [pc, #180]	; (402c24 <USBHS_Handler+0x270>)
  402b6e:	4798      	blx	r3
  402b70:	e001      	b.n	402b76 <USBHS_Handler+0x1c2>
			udd_ctrl_endofrequest();
  402b72:	4b2a      	ldr	r3, [pc, #168]	; (402c1c <USBHS_Handler+0x268>)
  402b74:	4798      	blx	r3
		udd_ctrl_init();
  402b76:	4b2a      	ldr	r3, [pc, #168]	; (402c20 <USBHS_Handler+0x26c>)
  402b78:	4798      	blx	r3
  402b7a:	e735      	b.n	4029e8 <USBHS_Handler+0x34>
	nb_data = udd_byte_count(0);
  402b7c:	4b1c      	ldr	r3, [pc, #112]	; (402bf0 <USBHS_Handler+0x23c>)
  402b7e:	6818      	ldr	r0, [r3, #0]
  402b80:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
  402b84:	4b1f      	ldr	r3, [pc, #124]	; (402c04 <USBHS_Handler+0x250>)
  402b86:	899b      	ldrh	r3, [r3, #12]
  402b88:	4a22      	ldr	r2, [pc, #136]	; (402c14 <USBHS_Handler+0x260>)
  402b8a:	8814      	ldrh	r4, [r2, #0]
  402b8c:	1822      	adds	r2, r4, r0
  402b8e:	4293      	cmp	r3, r2
  402b90:	da01      	bge.n	402b96 <USBHS_Handler+0x1e2>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
  402b92:	1b1b      	subs	r3, r3, r4
  402b94:	b298      	uxth	r0, r3
	volatile uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  402b96:	4b1b      	ldr	r3, [pc, #108]	; (402c04 <USBHS_Handler+0x250>)
  402b98:	6899      	ldr	r1, [r3, #8]
  402b9a:	4421      	add	r1, r4
	for (i = 0; i < nb_data; i++) {
  402b9c:	b178      	cbz	r0, 402bbe <USBHS_Handler+0x20a>
  402b9e:	4a18      	ldr	r2, [pc, #96]	; (402c00 <USBHS_Handler+0x24c>)
		*ptr_dest++ = *ptr_src++;
  402ba0:	1c53      	adds	r3, r2, #1
  402ba2:	7812      	ldrb	r2, [r2, #0]
  402ba4:	b2d2      	uxtb	r2, r2
  402ba6:	700a      	strb	r2, [r1, #0]
  402ba8:	3101      	adds	r1, #1
  402baa:	461a      	mov	r2, r3
	for (i = 0; i < nb_data; i++) {
  402bac:	b2db      	uxtb	r3, r3
  402bae:	4283      	cmp	r3, r0
  402bb0:	d3f6      	bcc.n	402ba0 <USBHS_Handler+0x1ec>
	udd_ctrl_payload_buf_cnt += nb_data;
  402bb2:	4404      	add	r4, r0
  402bb4:	b2a4      	uxth	r4, r4
  402bb6:	4b17      	ldr	r3, [pc, #92]	; (402c14 <USBHS_Handler+0x260>)
  402bb8:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  402bba:	2840      	cmp	r0, #64	; 0x40
  402bbc:	d038      	beq.n	402c30 <USBHS_Handler+0x27c>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
  402bbe:	4b11      	ldr	r3, [pc, #68]	; (402c04 <USBHS_Handler+0x250>)
  402bc0:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  402bc2:	695b      	ldr	r3, [r3, #20]
  402bc4:	b113      	cbz	r3, 402bcc <USBHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
  402bc6:	4798      	blx	r3
  402bc8:	2800      	cmp	r0, #0
  402bca:	d05a      	beq.n	402c82 <USBHS_Handler+0x2ce>
		udd_ack_out_received(0);
  402bcc:	2202      	movs	r2, #2
  402bce:	4b0f      	ldr	r3, [pc, #60]	; (402c0c <USBHS_Handler+0x258>)
  402bd0:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
  402bd2:	4b16      	ldr	r3, [pc, #88]	; (402c2c <USBHS_Handler+0x278>)
  402bd4:	4798      	blx	r3
  402bd6:	e707      	b.n	4029e8 <USBHS_Handler+0x34>
  402bd8:	004024c1 	.word	0x004024c1
  402bdc:	40038000 	.word	0x40038000
  402be0:	00404239 	.word	0x00404239
  402be4:	204000e7 	.word	0x204000e7
  402be8:	004018e9 	.word	0x004018e9
  402bec:	40038220 	.word	0x40038220
  402bf0:	40038130 	.word	0x40038130
  402bf4:	400381c0 	.word	0x400381c0
  402bf8:	40038134 	.word	0x40038134
  402bfc:	20400b54 	.word	0x20400b54
  402c00:	a0100000 	.word	0xa0100000
  402c04:	2040103c 	.word	0x2040103c
  402c08:	00401929 	.word	0x00401929
  402c0c:	40038160 	.word	0x40038160
  402c10:	20400b52 	.word	0x20400b52
  402c14:	20400b50 	.word	0x20400b50
  402c18:	400381f0 	.word	0x400381f0
  402c1c:	0040263d 	.word	0x0040263d
  402c20:	00402575 	.word	0x00402575
  402c24:	004025d1 	.word	0x004025d1
  402c28:	0040264d 	.word	0x0040264d
  402c2c:	004025e9 	.word	0x004025e9
			|| (udd_g_ctrlreq.req.wLength <=
  402c30:	4ba8      	ldr	r3, [pc, #672]	; (402ed4 <USBHS_Handler+0x520>)
  402c32:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
  402c34:	4ba8      	ldr	r3, [pc, #672]	; (402ed8 <USBHS_Handler+0x524>)
  402c36:	881b      	ldrh	r3, [r3, #0]
  402c38:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
  402c3a:	429a      	cmp	r2, r3
  402c3c:	ddbf      	ble.n	402bbe <USBHS_Handler+0x20a>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
  402c3e:	4ba5      	ldr	r3, [pc, #660]	; (402ed4 <USBHS_Handler+0x520>)
  402c40:	899b      	ldrh	r3, [r3, #12]
  402c42:	42a3      	cmp	r3, r4
  402c44:	d023      	beq.n	402c8e <USBHS_Handler+0x2da>
	udd_ack_out_received(0);
  402c46:	4ba5      	ldr	r3, [pc, #660]	; (402edc <USBHS_Handler+0x528>)
  402c48:	2202      	movs	r2, #2
  402c4a:	601a      	str	r2, [r3, #0]
	udd_ack_nak_in(0);
  402c4c:	2210      	movs	r2, #16
  402c4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402c50:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402c54:	fab3 f383 	clz	r3, r3
  402c58:	095b      	lsrs	r3, r3, #5
  402c5a:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  402c5c:	b672      	cpsid	i
  402c5e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402c62:	2100      	movs	r1, #0
  402c64:	4b9e      	ldr	r3, [pc, #632]	; (402ee0 <USBHS_Handler+0x52c>)
  402c66:	7019      	strb	r1, [r3, #0]
	return flags;
  402c68:	9b02      	ldr	r3, [sp, #8]
	udd_enable_nak_in_interrupt(0);
  402c6a:	499e      	ldr	r1, [pc, #632]	; (402ee4 <USBHS_Handler+0x530>)
  402c6c:	600a      	str	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  402c6e:	2b00      	cmp	r3, #0
  402c70:	f43f aeba 	beq.w	4029e8 <USBHS_Handler+0x34>
		cpu_irq_enable();
  402c74:	2201      	movs	r2, #1
  402c76:	4b9a      	ldr	r3, [pc, #616]	; (402ee0 <USBHS_Handler+0x52c>)
  402c78:	701a      	strb	r2, [r3, #0]
  402c7a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402c7e:	b662      	cpsie	i
  402c80:	e6b2      	b.n	4029e8 <USBHS_Handler+0x34>
				udd_ctrl_stall_data();
  402c82:	4b99      	ldr	r3, [pc, #612]	; (402ee8 <USBHS_Handler+0x534>)
  402c84:	4798      	blx	r3
				udd_ack_out_received(0);
  402c86:	2202      	movs	r2, #2
  402c88:	4b94      	ldr	r3, [pc, #592]	; (402edc <USBHS_Handler+0x528>)
  402c8a:	601a      	str	r2, [r3, #0]
  402c8c:	e6ac      	b.n	4029e8 <USBHS_Handler+0x34>
		if (!udd_g_ctrlreq.over_under_run) {
  402c8e:	4b91      	ldr	r3, [pc, #580]	; (402ed4 <USBHS_Handler+0x520>)
  402c90:	695b      	ldr	r3, [r3, #20]
  402c92:	b153      	cbz	r3, 402caa <USBHS_Handler+0x2f6>
		if (!udd_g_ctrlreq.over_under_run()) {
  402c94:	4798      	blx	r3
  402c96:	b170      	cbz	r0, 402cb6 <USBHS_Handler+0x302>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
  402c98:	498f      	ldr	r1, [pc, #572]	; (402ed8 <USBHS_Handler+0x524>)
  402c9a:	4a94      	ldr	r2, [pc, #592]	; (402eec <USBHS_Handler+0x538>)
  402c9c:	880b      	ldrh	r3, [r1, #0]
  402c9e:	8810      	ldrh	r0, [r2, #0]
  402ca0:	4403      	add	r3, r0
  402ca2:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
  402ca4:	2300      	movs	r3, #0
  402ca6:	8013      	strh	r3, [r2, #0]
  402ca8:	e7cd      	b.n	402c46 <USBHS_Handler+0x292>
			udd_ctrl_stall_data();
  402caa:	4b8f      	ldr	r3, [pc, #572]	; (402ee8 <USBHS_Handler+0x534>)
  402cac:	4798      	blx	r3
			udd_ack_out_received(0);
  402cae:	2202      	movs	r2, #2
  402cb0:	4b8a      	ldr	r3, [pc, #552]	; (402edc <USBHS_Handler+0x528>)
  402cb2:	601a      	str	r2, [r3, #0]
  402cb4:	e698      	b.n	4029e8 <USBHS_Handler+0x34>
			udd_ctrl_stall_data();
  402cb6:	4b8c      	ldr	r3, [pc, #560]	; (402ee8 <USBHS_Handler+0x534>)
  402cb8:	4798      	blx	r3
			udd_ack_out_received(0);
  402cba:	2202      	movs	r2, #2
  402cbc:	4b87      	ldr	r3, [pc, #540]	; (402edc <USBHS_Handler+0x528>)
  402cbe:	601a      	str	r2, [r3, #0]
  402cc0:	e692      	b.n	4029e8 <USBHS_Handler+0x34>
		udd_ack_nak_out(0);
  402cc2:	2208      	movs	r2, #8
  402cc4:	4b85      	ldr	r3, [pc, #532]	; (402edc <USBHS_Handler+0x528>)
  402cc6:	601a      	str	r2, [r3, #0]
	if (Is_udd_in_send(0))
  402cc8:	3b30      	subs	r3, #48	; 0x30
  402cca:	681b      	ldr	r3, [r3, #0]
  402ccc:	f013 0f01 	tst.w	r3, #1
  402cd0:	f47f ae8a 	bne.w	4029e8 <USBHS_Handler+0x34>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  402cd4:	4b86      	ldr	r3, [pc, #536]	; (402ef0 <USBHS_Handler+0x53c>)
  402cd6:	781b      	ldrb	r3, [r3, #0]
  402cd8:	2b03      	cmp	r3, #3
  402cda:	f47f ae85 	bne.w	4029e8 <USBHS_Handler+0x34>
		udd_enable_stall_handshake(0);
  402cde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402ce2:	4b80      	ldr	r3, [pc, #512]	; (402ee4 <USBHS_Handler+0x530>)
  402ce4:	601a      	str	r2, [r3, #0]
  402ce6:	e67f      	b.n	4029e8 <USBHS_Handler+0x34>
		udd_ack_nak_in(0);
  402ce8:	2210      	movs	r2, #16
  402cea:	4b7c      	ldr	r3, [pc, #496]	; (402edc <USBHS_Handler+0x528>)
  402cec:	601a      	str	r2, [r3, #0]
	if (Is_udd_out_received(0))
  402cee:	3b30      	subs	r3, #48	; 0x30
  402cf0:	681b      	ldr	r3, [r3, #0]
  402cf2:	f013 0f02 	tst.w	r3, #2
  402cf6:	f47f ae77 	bne.w	4029e8 <USBHS_Handler+0x34>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
  402cfa:	4b7d      	ldr	r3, [pc, #500]	; (402ef0 <USBHS_Handler+0x53c>)
  402cfc:	781b      	ldrb	r3, [r3, #0]
  402cfe:	2b01      	cmp	r3, #1
  402d00:	d007      	beq.n	402d12 <USBHS_Handler+0x35e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
  402d02:	2b04      	cmp	r3, #4
  402d04:	f47f ae70 	bne.w	4029e8 <USBHS_Handler+0x34>
		udd_enable_stall_handshake(0);
  402d08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402d0c:	4b75      	ldr	r3, [pc, #468]	; (402ee4 <USBHS_Handler+0x530>)
  402d0e:	601a      	str	r2, [r3, #0]
  402d10:	e66a      	b.n	4029e8 <USBHS_Handler+0x34>
		udd_ctrl_send_zlp_in();
  402d12:	4b78      	ldr	r3, [pc, #480]	; (402ef4 <USBHS_Handler+0x540>)
  402d14:	4798      	blx	r3
  402d16:	e667      	b.n	4029e8 <USBHS_Handler+0x34>
			if (udd_endpoint_dma_get_status(ep)
  402d18:	4b77      	ldr	r3, [pc, #476]	; (402ef8 <USBHS_Handler+0x544>)
  402d1a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402d1e:	68da      	ldr	r2, [r3, #12]
  402d20:	f012 0f01 	tst.w	r2, #1
  402d24:	f47f ae60 	bne.w	4029e8 <USBHS_Handler+0x34>
			udd_disable_endpoint_dma_interrupt(ep);
  402d28:	4a74      	ldr	r2, [pc, #464]	; (402efc <USBHS_Handler+0x548>)
  402d2a:	6151      	str	r1, [r2, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
  402d2c:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
  402d2e:	0c1b      	lsrs	r3, r3, #16
  402d30:	d008      	beq.n	402d44 <USBHS_Handler+0x390>
				ptr_job->buf_cnt -= nb_remaining;
  402d32:	4a73      	ldr	r2, [pc, #460]	; (402f00 <USBHS_Handler+0x54c>)
  402d34:	007c      	lsls	r4, r7, #1
  402d36:	19e5      	adds	r5, r4, r7
  402d38:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
  402d3c:	68e9      	ldr	r1, [r5, #12]
  402d3e:	1acb      	subs	r3, r1, r3
  402d40:	60eb      	str	r3, [r5, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
  402d42:	60ab      	str	r3, [r5, #8]
			udd_ep_trans_done(ep);
  402d44:	4b6f      	ldr	r3, [pc, #444]	; (402f04 <USBHS_Handler+0x550>)
  402d46:	4798      	blx	r3
  402d48:	e64e      	b.n	4029e8 <USBHS_Handler+0x34>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
  402d4a:	4b6f      	ldr	r3, [pc, #444]	; (402f08 <USBHS_Handler+0x554>)
  402d4c:	2201      	movs	r2, #1
  402d4e:	f849 2003 	str.w	r2, [r9, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
  402d52:	4962      	ldr	r1, [pc, #392]	; (402edc <USBHS_Handler+0x528>)
  402d54:	f849 2001 	str.w	r2, [r9, r1]
				udd_ack_fifocon(ep);
  402d58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  402d5c:	f849 2003 	str.w	r2, [r9, r3]
		ptr_job = &udd_ep_job[ep - 1];
  402d60:	eb07 0747 	add.w	r7, r7, r7, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
  402d64:	4602      	mov	r2, r0
  402d66:	2100      	movs	r1, #0
  402d68:	4865      	ldr	r0, [pc, #404]	; (402f00 <USBHS_Handler+0x54c>)
  402d6a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
  402d6e:	4b67      	ldr	r3, [pc, #412]	; (402f0c <USBHS_Handler+0x558>)
  402d70:	4798      	blx	r3
  402d72:	e639      	b.n	4029e8 <USBHS_Handler+0x34>
  402d74:	3301      	adds	r3, #1
  402d76:	3604      	adds	r6, #4
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  402d78:	2b07      	cmp	r3, #7
  402d7a:	f000 80d5 	beq.w	402f28 <USBHS_Handler+0x574>
  402d7e:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
  402d80:	461d      	mov	r5, r3
  402d82:	1e5f      	subs	r7, r3, #1
  402d84:	46b8      	mov	r8, r7
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  402d86:	6914      	ldr	r4, [r2, #16]
  402d88:	fa0e f107 	lsl.w	r1, lr, r7
  402d8c:	420c      	tst	r4, r1
  402d8e:	d002      	beq.n	402d96 <USBHS_Handler+0x3e2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
  402d90:	6854      	ldr	r4, [r2, #4]
  402d92:	4221      	tst	r1, r4
  402d94:	d1c0      	bne.n	402d18 <USBHS_Handler+0x364>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  402d96:	6911      	ldr	r1, [r2, #16]
  402d98:	fa0c f505 	lsl.w	r5, ip, r5
  402d9c:	4229      	tst	r1, r5
  402d9e:	d0e9      	beq.n	402d74 <USBHS_Handler+0x3c0>
  402da0:	ea4f 0983 	mov.w	r9, r3, lsl #2
  402da4:	f106 0490 	add.w	r4, r6, #144	; 0x90
			if (Is_udd_in_send_interrupt_enabled(ep)
  402da8:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
  402dac:	f011 0f01 	tst.w	r1, #1
  402db0:	d003      	beq.n	402dba <USBHS_Handler+0x406>
					&& Is_udd_in_send(ep)) {
  402db2:	6831      	ldr	r1, [r6, #0]
  402db4:	f011 0f01 	tst.w	r1, #1
  402db8:	d1c7      	bne.n	402d4a <USBHS_Handler+0x396>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
  402dba:	6821      	ldr	r1, [r4, #0]
  402dbc:	f411 5f80 	tst.w	r1, #4096	; 0x1000
  402dc0:	d0d8      	beq.n	402d74 <USBHS_Handler+0x3c0>
					&& (0 == udd_nb_busy_bank(ep))) {
  402dc2:	6831      	ldr	r1, [r6, #0]
  402dc4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
  402dc8:	d1d4      	bne.n	402d74 <USBHS_Handler+0x3c0>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
  402dca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402dce:	4b4e      	ldr	r3, [pc, #312]	; (402f08 <USBHS_Handler+0x554>)
  402dd0:	f849 2003 	str.w	r2, [r9, r3]
				udd_disable_endpoint_interrupt(ep);
  402dd4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
  402dd8:	615d      	str	r5, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
  402dda:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  402dde:	4b48      	ldr	r3, [pc, #288]	; (402f00 <USBHS_Handler+0x54c>)
  402de0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
  402de4:	f898 2014 	ldrb.w	r2, [r8, #20]
  402de8:	f36f 0282 	bfc	r2, #2, #1
  402dec:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
  402df0:	4a47      	ldr	r2, [pc, #284]	; (402f10 <USBHS_Handler+0x55c>)
  402df2:	f859 3002 	ldr.w	r3, [r9, r2]
  402df6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  402dfa:	f849 3002 	str.w	r3, [r9, r2]
				udd_enable_stall_handshake(ep);
  402dfe:	4b39      	ldr	r3, [pc, #228]	; (402ee4 <USBHS_Handler+0x530>)
  402e00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402e04:	f849 2003 	str.w	r2, [r9, r3]
				udd_reset_data_toggle(ep);
  402e08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  402e0c:	f849 2003 	str.w	r2, [r9, r3]
  402e10:	e5ea      	b.n	4029e8 <USBHS_Handler+0x34>
		udd_ack_reset();
  402e12:	2208      	movs	r2, #8
  402e14:	4b39      	ldr	r3, [pc, #228]	; (402efc <USBHS_Handler+0x548>)
  402e16:	609a      	str	r2, [r3, #8]
  402e18:	4d39      	ldr	r5, [pc, #228]	; (402f00 <USBHS_Handler+0x54c>)
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402e1a:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
  402e1c:	2701      	movs	r7, #1
  402e1e:	4e3b      	ldr	r6, [pc, #236]	; (402f0c <USBHS_Handler+0x558>)
  402e20:	3401      	adds	r4, #1
  402e22:	b2e4      	uxtb	r4, r4
  402e24:	4622      	mov	r2, r4
  402e26:	4639      	mov	r1, r7
  402e28:	4628      	mov	r0, r5
  402e2a:	47b0      	blx	r6
  402e2c:	3518      	adds	r5, #24
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402e2e:	2c06      	cmp	r4, #6
  402e30:	d1f6      	bne.n	402e20 <USBHS_Handler+0x46c>
		udc_reset();
  402e32:	4b38      	ldr	r3, [pc, #224]	; (402f14 <USBHS_Handler+0x560>)
  402e34:	4798      	blx	r3
	udd_configure_address(0);
  402e36:	4b31      	ldr	r3, [pc, #196]	; (402efc <USBHS_Handler+0x548>)
  402e38:	681a      	ldr	r2, [r3, #0]
  402e3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  402e3e:	601a      	str	r2, [r3, #0]
	udd_enable_address();
  402e40:	681a      	ldr	r2, [r3, #0]
  402e42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  402e46:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
  402e48:	4931      	ldr	r1, [pc, #196]	; (402f10 <USBHS_Handler+0x55c>)
  402e4a:	6808      	ldr	r0, [r1, #0]
  402e4c:	4a32      	ldr	r2, [pc, #200]	; (402f18 <USBHS_Handler+0x564>)
  402e4e:	4002      	ands	r2, r0
  402e50:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  402e54:	600a      	str	r2, [r1, #0]
	udd_allocate_memory(0);
  402e56:	680a      	ldr	r2, [r1, #0]
  402e58:	f042 0202 	orr.w	r2, r2, #2
  402e5c:	600a      	str	r2, [r1, #0]
	udd_enable_endpoint(0);
  402e5e:	69da      	ldr	r2, [r3, #28]
  402e60:	f042 0201 	orr.w	r2, r2, #1
  402e64:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402e66:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402e6a:	fab2 f282 	clz	r2, r2
  402e6e:	0952      	lsrs	r2, r2, #5
  402e70:	9203      	str	r2, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  402e72:	b672      	cpsid	i
  402e74:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402e78:	2100      	movs	r1, #0
  402e7a:	4a19      	ldr	r2, [pc, #100]	; (402ee0 <USBHS_Handler+0x52c>)
  402e7c:	7011      	strb	r1, [r2, #0]
	return flags;
  402e7e:	9903      	ldr	r1, [sp, #12]
	udd_enable_setup_received_interrupt(0);
  402e80:	4a18      	ldr	r2, [pc, #96]	; (402ee4 <USBHS_Handler+0x530>)
  402e82:	2004      	movs	r0, #4
  402e84:	6010      	str	r0, [r2, #0]
	udd_enable_out_received_interrupt(0);
  402e86:	2002      	movs	r0, #2
  402e88:	6010      	str	r0, [r2, #0]
	udd_enable_endpoint_interrupt(0);
  402e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402e8e:	619a      	str	r2, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
  402e90:	b129      	cbz	r1, 402e9e <USBHS_Handler+0x4ea>
		cpu_irq_enable();
  402e92:	2201      	movs	r2, #1
  402e94:	4b12      	ldr	r3, [pc, #72]	; (402ee0 <USBHS_Handler+0x52c>)
  402e96:	701a      	strb	r2, [r3, #0]
  402e98:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402e9c:	b662      	cpsie	i
		udd_ctrl_init();
  402e9e:	4b1f      	ldr	r3, [pc, #124]	; (402f1c <USBHS_Handler+0x568>)
  402ea0:	4798      	blx	r3
		goto udd_interrupt_end;
  402ea2:	e5a1      	b.n	4029e8 <USBHS_Handler+0x34>
		otg_unfreeze_clock();
  402ea4:	4b15      	ldr	r3, [pc, #84]	; (402efc <USBHS_Handler+0x548>)
  402ea6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  402eaa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  402eae:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_disable_suspend_interrupt();
  402eb2:	2201      	movs	r2, #1
  402eb4:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  402eb6:	2210      	movs	r2, #16
  402eb8:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
  402eba:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  402ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  402ec2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
  402ec6:	2000      	movs	r0, #0
  402ec8:	4b15      	ldr	r3, [pc, #84]	; (402f20 <USBHS_Handler+0x56c>)
  402eca:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
  402ecc:	4b15      	ldr	r3, [pc, #84]	; (402f24 <USBHS_Handler+0x570>)
  402ece:	4798      	blx	r3
		goto udd_interrupt_end;
  402ed0:	e58a      	b.n	4029e8 <USBHS_Handler+0x34>
  402ed2:	bf00      	nop
  402ed4:	2040103c 	.word	0x2040103c
  402ed8:	20400b52 	.word	0x20400b52
  402edc:	40038160 	.word	0x40038160
  402ee0:	204000e7 	.word	0x204000e7
  402ee4:	400381f0 	.word	0x400381f0
  402ee8:	004025d1 	.word	0x004025d1
  402eec:	20400b50 	.word	0x20400b50
  402ef0:	20400b54 	.word	0x20400b54
  402ef4:	004025e9 	.word	0x004025e9
  402ef8:	40038300 	.word	0x40038300
  402efc:	40038000 	.word	0x40038000
  402f00:	20400b58 	.word	0x20400b58
  402f04:	0040280d 	.word	0x0040280d
  402f08:	40038220 	.word	0x40038220
  402f0c:	004027d5 	.word	0x004027d5
  402f10:	40038100 	.word	0x40038100
  402f14:	004018a1 	.word	0x004018a1
  402f18:	ffffe683 	.word	0xffffe683
  402f1c:	00402575 	.word	0x00402575
  402f20:	004024d1 	.word	0x004024d1
  402f24:	00404209 	.word	0x00404209
	if (Is_udd_reset()) {
  402f28:	4b1b      	ldr	r3, [pc, #108]	; (402f98 <USBHS_Handler+0x5e4>)
  402f2a:	685b      	ldr	r3, [r3, #4]
  402f2c:	f013 0f08 	tst.w	r3, #8
  402f30:	f47f af6f 	bne.w	402e12 <USBHS_Handler+0x45e>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  402f34:	4b18      	ldr	r3, [pc, #96]	; (402f98 <USBHS_Handler+0x5e4>)
  402f36:	691b      	ldr	r3, [r3, #16]
  402f38:	f013 0f01 	tst.w	r3, #1
  402f3c:	d004      	beq.n	402f48 <USBHS_Handler+0x594>
  402f3e:	4b16      	ldr	r3, [pc, #88]	; (402f98 <USBHS_Handler+0x5e4>)
  402f40:	685b      	ldr	r3, [r3, #4]
  402f42:	f013 0f01 	tst.w	r3, #1
  402f46:	d1ad      	bne.n	402ea4 <USBHS_Handler+0x4f0>
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
  402f48:	4b13      	ldr	r3, [pc, #76]	; (402f98 <USBHS_Handler+0x5e4>)
  402f4a:	691b      	ldr	r3, [r3, #16]
  402f4c:	f013 0f10 	tst.w	r3, #16
  402f50:	f43f ad4a 	beq.w	4029e8 <USBHS_Handler+0x34>
  402f54:	4b10      	ldr	r3, [pc, #64]	; (402f98 <USBHS_Handler+0x5e4>)
  402f56:	685b      	ldr	r3, [r3, #4]
  402f58:	f013 0f10 	tst.w	r3, #16
  402f5c:	f43f ad44 	beq.w	4029e8 <USBHS_Handler+0x34>
		otg_unfreeze_clock();
  402f60:	4a0d      	ldr	r2, [pc, #52]	; (402f98 <USBHS_Handler+0x5e4>)
  402f62:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  402f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  402f6a:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
  402f6e:	4613      	mov	r3, r2
  402f70:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
  402f74:	f412 4f80 	tst.w	r2, #16384	; 0x4000
  402f78:	d103      	bne.n	402f82 <USBHS_Handler+0x5ce>
			if (Is_udd_suspend()) {
  402f7a:	685a      	ldr	r2, [r3, #4]
  402f7c:	f012 0f01 	tst.w	r2, #1
  402f80:	d0f6      	beq.n	402f70 <USBHS_Handler+0x5bc>
		udd_disable_wake_up_interrupt();
  402f82:	4b05      	ldr	r3, [pc, #20]	; (402f98 <USBHS_Handler+0x5e4>)
  402f84:	2210      	movs	r2, #16
  402f86:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
  402f88:	2001      	movs	r0, #1
  402f8a:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
  402f8c:	4b03      	ldr	r3, [pc, #12]	; (402f9c <USBHS_Handler+0x5e8>)
  402f8e:	4798      	blx	r3
		UDC_RESUME_EVENT();
  402f90:	4b03      	ldr	r3, [pc, #12]	; (402fa0 <USBHS_Handler+0x5ec>)
  402f92:	4798      	blx	r3
		goto udd_interrupt_end;
  402f94:	e528      	b.n	4029e8 <USBHS_Handler+0x34>
  402f96:	bf00      	nop
  402f98:	40038000 	.word	0x40038000
  402f9c:	004024d1 	.word	0x004024d1
  402fa0:	00404221 	.word	0x00404221

00402fa4 <udd_attach>:
{
  402fa4:	b530      	push	{r4, r5, lr}
  402fa6:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402fa8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402fac:	fab3 f383 	clz	r3, r3
  402fb0:	095b      	lsrs	r3, r3, #5
  402fb2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402fb4:	b672      	cpsid	i
  402fb6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402fba:	2200      	movs	r2, #0
  402fbc:	4b19      	ldr	r3, [pc, #100]	; (403024 <udd_attach+0x80>)
  402fbe:	701a      	strb	r2, [r3, #0]
	return flags;
  402fc0:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  402fc2:	2001      	movs	r0, #1
  402fc4:	4b18      	ldr	r3, [pc, #96]	; (403028 <udd_attach+0x84>)
  402fc6:	4798      	blx	r3
	otg_unfreeze_clock();
  402fc8:	4a18      	ldr	r2, [pc, #96]	; (40302c <udd_attach+0x88>)
  402fca:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  402fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  402fd2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	while (!Is_otg_clock_usable());
  402fd6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
  402fda:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  402fde:	d0fa      	beq.n	402fd6 <udd_attach+0x32>
	udd_attach_device();
  402fe0:	4b12      	ldr	r3, [pc, #72]	; (40302c <udd_attach+0x88>)
  402fe2:	681a      	ldr	r2, [r3, #0]
  402fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402fe8:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
  402fea:	2508      	movs	r5, #8
  402fec:	619d      	str	r5, [r3, #24]
	udd_enable_suspend_interrupt();
  402fee:	2101      	movs	r1, #1
  402ff0:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
  402ff2:	2210      	movs	r2, #16
  402ff4:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
  402ff6:	2004      	movs	r0, #4
  402ff8:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
  402ffa:	609d      	str	r5, [r3, #8]
	udd_ack_sof();
  402ffc:	6098      	str	r0, [r3, #8]
	udd_ack_msof();
  402ffe:	2002      	movs	r0, #2
  403000:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
  403002:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
  403004:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
  403006:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  40300a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40300e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
  403012:	b124      	cbz	r4, 40301e <udd_attach+0x7a>
		cpu_irq_enable();
  403014:	4b03      	ldr	r3, [pc, #12]	; (403024 <udd_attach+0x80>)
  403016:	7019      	strb	r1, [r3, #0]
  403018:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40301c:	b662      	cpsie	i
}
  40301e:	b003      	add	sp, #12
  403020:	bd30      	pop	{r4, r5, pc}
  403022:	bf00      	nop
  403024:	204000e7 	.word	0x204000e7
  403028:	004024d1 	.word	0x004024d1
  40302c:	40038000 	.word	0x40038000

00403030 <udd_enable>:
{
  403030:	b510      	push	{r4, lr}
  403032:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403034:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403038:	fab3 f383 	clz	r3, r3
  40303c:	095b      	lsrs	r3, r3, #5
  40303e:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  403040:	b672      	cpsid	i
  403042:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403046:	2200      	movs	r2, #0
  403048:	4b3f      	ldr	r3, [pc, #252]	; (403148 <udd_enable+0x118>)
  40304a:	701a      	strb	r2, [r3, #0]
	return flags;
  40304c:	9c00      	ldr	r4, [sp, #0]
	pmc_enable_periph_clk(ID_USBHS);
  40304e:	2022      	movs	r0, #34	; 0x22
  403050:	4b3e      	ldr	r3, [pc, #248]	; (40314c <udd_enable+0x11c>)
  403052:	4798      	blx	r3
	sysclk_enable_usb();
  403054:	4b3e      	ldr	r3, [pc, #248]	; (403150 <udd_enable+0x120>)
  403056:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403058:	4b3e      	ldr	r3, [pc, #248]	; (403154 <udd_enable+0x124>)
  40305a:	22a0      	movs	r2, #160	; 0xa0
  40305c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403060:	2204      	movs	r2, #4
  403062:	605a      	str	r2, [r3, #4]
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  403064:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  403068:	4b3b      	ldr	r3, [pc, #236]	; (403158 <udd_enable+0x128>)
  40306a:	4798      	blx	r3
	USBHS->USBHS_CTRL = USBHS_CTRL_UIMOD_DEVICE;
  40306c:	4b3b      	ldr	r3, [pc, #236]	; (40315c <udd_enable+0x12c>)
  40306e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  403072:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
  403076:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  40307a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  40307e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_low_speed_disable();
  403082:	681a      	ldr	r2, [r3, #0]
  403084:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403088:	601a      	str	r2, [r3, #0]
	udd_high_speed_disable();
  40308a:	681a      	ldr	r2, [r3, #0]
  40308c:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
  403090:	601a      	str	r2, [r3, #0]
	otg_unfreeze_clock();
  403092:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  403096:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  40309a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
  40309e:	461a      	mov	r2, r3
  4030a0:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
  4030a4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4030a8:	d0fa      	beq.n	4030a0 <udd_enable+0x70>
  4030aa:	2200      	movs	r2, #0
		udd_ep_job[i].busy = false;
  4030ac:	482c      	ldr	r0, [pc, #176]	; (403160 <udd_enable+0x130>)
  4030ae:	0053      	lsls	r3, r2, #1
  4030b0:	1899      	adds	r1, r3, r2
  4030b2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  4030b6:	7d09      	ldrb	r1, [r1, #20]
		udd_ep_job[i].stall_requested = false;
  4030b8:	4413      	add	r3, r2
  4030ba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  4030be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  4030c2:	f36f 0182 	bfc	r1, #2, #1
  4030c6:	7519      	strb	r1, [r3, #20]
  4030c8:	3201      	adds	r2, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4030ca:	2a06      	cmp	r2, #6
  4030cc:	d1ef      	bne.n	4030ae <udd_enable+0x7e>
	otg_freeze_clock();
  4030ce:	4a23      	ldr	r2, [pc, #140]	; (40315c <udd_enable+0x12c>)
  4030d0:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  4030d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4030d8:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	if (!udd_b_sleep_initialized) {
  4030dc:	4b21      	ldr	r3, [pc, #132]	; (403164 <udd_enable+0x134>)
  4030de:	781b      	ldrb	r3, [r3, #0]
  4030e0:	bb1b      	cbnz	r3, 40312a <udd_enable+0xfa>
		udd_b_sleep_initialized = true;
  4030e2:	2201      	movs	r2, #1
  4030e4:	4b1f      	ldr	r3, [pc, #124]	; (403164 <udd_enable+0x134>)
  4030e6:	701a      	strb	r2, [r3, #0]
		udd_b_idle = false;
  4030e8:	2200      	movs	r2, #0
  4030ea:	4b1f      	ldr	r3, [pc, #124]	; (403168 <udd_enable+0x138>)
  4030ec:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  4030ee:	4b1f      	ldr	r3, [pc, #124]	; (40316c <udd_enable+0x13c>)
  4030f0:	78db      	ldrb	r3, [r3, #3]
  4030f2:	2bff      	cmp	r3, #255	; 0xff
  4030f4:	d018      	beq.n	403128 <udd_enable+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4030f6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4030fa:	fab3 f383 	clz	r3, r3
  4030fe:	095b      	lsrs	r3, r3, #5
  403100:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403102:	b672      	cpsid	i
  403104:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403108:	2200      	movs	r2, #0
  40310a:	4b0f      	ldr	r3, [pc, #60]	; (403148 <udd_enable+0x118>)
  40310c:	701a      	strb	r2, [r3, #0]
	return flags;
  40310e:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  403110:	4a16      	ldr	r2, [pc, #88]	; (40316c <udd_enable+0x13c>)
  403112:	78d3      	ldrb	r3, [r2, #3]
  403114:	3301      	adds	r3, #1
  403116:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
  403118:	b151      	cbz	r1, 403130 <udd_enable+0x100>
		cpu_irq_enable();
  40311a:	2201      	movs	r2, #1
  40311c:	4b0a      	ldr	r3, [pc, #40]	; (403148 <udd_enable+0x118>)
  40311e:	701a      	strb	r2, [r3, #0]
  403120:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403124:	b662      	cpsie	i
  403126:	e003      	b.n	403130 <udd_enable+0x100>
  403128:	e7fe      	b.n	403128 <udd_enable+0xf8>
		udd_sleep_mode(false); // Enter idle mode
  40312a:	2000      	movs	r0, #0
  40312c:	4b10      	ldr	r3, [pc, #64]	; (403170 <udd_enable+0x140>)
  40312e:	4798      	blx	r3
	udd_attach();
  403130:	4b10      	ldr	r3, [pc, #64]	; (403174 <udd_enable+0x144>)
  403132:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  403134:	b12c      	cbz	r4, 403142 <udd_enable+0x112>
		cpu_irq_enable();
  403136:	2201      	movs	r2, #1
  403138:	4b03      	ldr	r3, [pc, #12]	; (403148 <udd_enable+0x118>)
  40313a:	701a      	strb	r2, [r3, #0]
  40313c:	f3bf 8f5f 	dmb	sy
  403140:	b662      	cpsie	i
}
  403142:	b002      	add	sp, #8
  403144:	bd10      	pop	{r4, pc}
  403146:	bf00      	nop
  403148:	204000e7 	.word	0x204000e7
  40314c:	004021a9 	.word	0x004021a9
  403150:	00401509 	.word	0x00401509
  403154:	e000e100 	.word	0xe000e100
  403158:	004021e9 	.word	0x004021e9
  40315c:	40038000 	.word	0x40038000
  403160:	20400b58 	.word	0x20400b58
  403164:	20400b4e 	.word	0x20400b4e
  403168:	20400b4d 	.word	0x20400b4d
  40316c:	20401034 	.word	0x20401034
  403170:	004024d1 	.word	0x004024d1
  403174:	00402fa5 	.word	0x00402fa5

00403178 <udd_is_high_speed>:
}
  403178:	2000      	movs	r0, #0
  40317a:	4770      	bx	lr

0040317c <udd_set_address>:
	udd_disable_address();
  40317c:	4b08      	ldr	r3, [pc, #32]	; (4031a0 <udd_set_address+0x24>)
  40317e:	681a      	ldr	r2, [r3, #0]
  403180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  403184:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
  403186:	681a      	ldr	r2, [r3, #0]
  403188:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  40318c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  403190:	4302      	orrs	r2, r0
  403192:	601a      	str	r2, [r3, #0]
	udd_enable_address();
  403194:	681a      	ldr	r2, [r3, #0]
  403196:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40319a:	601a      	str	r2, [r3, #0]
  40319c:	4770      	bx	lr
  40319e:	bf00      	nop
  4031a0:	40038000 	.word	0x40038000

004031a4 <udd_getaddress>:
	return udd_get_configured_address();
  4031a4:	4b02      	ldr	r3, [pc, #8]	; (4031b0 <udd_getaddress+0xc>)
  4031a6:	6818      	ldr	r0, [r3, #0]
}
  4031a8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4031ac:	4770      	bx	lr
  4031ae:	bf00      	nop
  4031b0:	40038000 	.word	0x40038000

004031b4 <udd_get_frame_number>:
	return udd_frame_number();
  4031b4:	4b02      	ldr	r3, [pc, #8]	; (4031c0 <udd_get_frame_number+0xc>)
  4031b6:	6a18      	ldr	r0, [r3, #32]
}
  4031b8:	f3c0 00ca 	ubfx	r0, r0, #3, #11
  4031bc:	4770      	bx	lr
  4031be:	bf00      	nop
  4031c0:	40038000 	.word	0x40038000

004031c4 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  4031c4:	4b01      	ldr	r3, [pc, #4]	; (4031cc <udd_set_setup_payload+0x8>)
  4031c6:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  4031c8:	8199      	strh	r1, [r3, #12]
  4031ca:	4770      	bx	lr
  4031cc:	2040103c 	.word	0x2040103c

004031d0 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4031d0:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4031d4:	2a06      	cmp	r2, #6
  4031d6:	d900      	bls.n	4031da <udd_ep_free+0xa>
  4031d8:	4770      	bx	lr
{
  4031da:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
  4031dc:	4810      	ldr	r0, [pc, #64]	; (403220 <udd_ep_free+0x50>)
  4031de:	69c3      	ldr	r3, [r0, #28]
  4031e0:	2101      	movs	r1, #1
  4031e2:	fa01 f402 	lsl.w	r4, r1, r2
  4031e6:	ea23 0304 	bic.w	r3, r3, r4
  4031ea:	61c3      	str	r3, [r0, #28]
	udd_unallocate_memory(ep_index);
  4031ec:	f500 7080 	add.w	r0, r0, #256	; 0x100
  4031f0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
  4031f4:	f023 0302 	bic.w	r3, r3, #2
  4031f8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
  4031fc:	1e56      	subs	r6, r2, #1
  4031fe:	4c09      	ldr	r4, [pc, #36]	; (403224 <udd_ep_free+0x54>)
  403200:	fa06 f501 	lsl.w	r5, r6, r1
  403204:	19a8      	adds	r0, r5, r6
  403206:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  40320a:	4b07      	ldr	r3, [pc, #28]	; (403228 <udd_ep_free+0x58>)
  40320c:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
  40320e:	4435      	add	r5, r6
  403210:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  403214:	7d23      	ldrb	r3, [r4, #20]
  403216:	f36f 0382 	bfc	r3, #2, #1
  40321a:	7523      	strb	r3, [r4, #20]
  40321c:	bd70      	pop	{r4, r5, r6, pc}
  40321e:	bf00      	nop
  403220:	40038000 	.word	0x40038000
  403224:	20400b58 	.word	0x20400b58
  403228:	004027d5 	.word	0x004027d5

0040322c <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
  40322c:	f000 000f 	and.w	r0, r0, #15
  403230:	4b02      	ldr	r3, [pc, #8]	; (40323c <udd_ep_is_halted+0x10>)
  403232:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
  403236:	f3c0 40c0 	ubfx	r0, r0, #19, #1
  40323a:	4770      	bx	lr
  40323c:	400381c0 	.word	0x400381c0

00403240 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  403240:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  403244:	2b06      	cmp	r3, #6
  403246:	d85d      	bhi.n	403304 <udd_ep_set_halt+0xc4>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
  403248:	4a36      	ldr	r2, [pc, #216]	; (403324 <udd_ep_set_halt+0xe4>)
  40324a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40324e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
  403252:	d159      	bne.n	403308 <udd_ep_set_halt+0xc8>
{
  403254:	b410      	push	{r4}
  403256:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  403258:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
  40325a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
  40325e:	4a32      	ldr	r2, [pc, #200]	; (403328 <udd_ep_set_halt+0xe8>)
  403260:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  403264:	7d12      	ldrb	r2, [r2, #20]
  403266:	f012 0f04 	tst.w	r2, #4
  40326a:	d14f      	bne.n	40330c <udd_ep_set_halt+0xcc>
	if (ptr_job->busy == true) {
  40326c:	f012 0f01 	tst.w	r2, #1
  403270:	d151      	bne.n	403316 <udd_ep_set_halt+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403272:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403276:	fab2 f282 	clz	r2, r2
  40327a:	0952      	lsrs	r2, r2, #5
  40327c:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40327e:	b672      	cpsid	i
  403280:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403284:	2400      	movs	r4, #0
  403286:	4a29      	ldr	r2, [pc, #164]	; (40332c <udd_ep_set_halt+0xec>)
  403288:	7014      	strb	r4, [r2, #0]
	return flags;
  40328a:	9c01      	ldr	r4, [sp, #4]
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
  40328c:	f010 0f80 	tst.w	r0, #128	; 0x80
  403290:	d118      	bne.n	4032c4 <udd_ep_set_halt+0x84>
	udd_disable_endpoint_bank_autoswitch(ep_index);
  403292:	4927      	ldr	r1, [pc, #156]	; (403330 <udd_ep_set_halt+0xf0>)
  403294:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
  403298:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  40329c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_ack_stall(ep_index);
  4032a0:	2140      	movs	r1, #64	; 0x40
  4032a2:	4a24      	ldr	r2, [pc, #144]	; (403334 <udd_ep_set_halt+0xf4>)
  4032a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
  4032a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4032ac:	3290      	adds	r2, #144	; 0x90
  4032ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
  4032b2:	2c00      	cmp	r4, #0
  4032b4:	d033      	beq.n	40331e <udd_ep_set_halt+0xde>
		cpu_irq_enable();
  4032b6:	2001      	movs	r0, #1
  4032b8:	4b1c      	ldr	r3, [pc, #112]	; (40332c <udd_ep_set_halt+0xec>)
  4032ba:	7018      	strb	r0, [r3, #0]
  4032bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4032c0:	b662      	cpsie	i
  4032c2:	e024      	b.n	40330e <udd_ep_set_halt+0xce>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
  4032c4:	4a1c      	ldr	r2, [pc, #112]	; (403338 <udd_ep_set_halt+0xf8>)
  4032c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4032ca:	f412 5f40 	tst.w	r2, #12288	; 0x3000
  4032ce:	d0e0      	beq.n	403292 <udd_ep_set_halt+0x52>
		ptr_job->stall_requested = true;
  4032d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4032d4:	4a14      	ldr	r2, [pc, #80]	; (403328 <udd_ep_set_halt+0xe8>)
  4032d6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
  4032da:	7d0a      	ldrb	r2, [r1, #20]
  4032dc:	f042 0204 	orr.w	r2, r2, #4
  4032e0:	750a      	strb	r2, [r1, #20]
		udd_enable_bank_interrupt(ep_index);
  4032e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4032e6:	4915      	ldr	r1, [pc, #84]	; (40333c <udd_ep_set_halt+0xfc>)
  4032e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
  4032ec:	fa02 f303 	lsl.w	r3, r2, r3
  4032f0:	4a13      	ldr	r2, [pc, #76]	; (403340 <udd_ep_set_halt+0x100>)
  4032f2:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
  4032f4:	b18c      	cbz	r4, 40331a <udd_ep_set_halt+0xda>
		cpu_irq_enable();
  4032f6:	2001      	movs	r0, #1
  4032f8:	4b0c      	ldr	r3, [pc, #48]	; (40332c <udd_ep_set_halt+0xec>)
  4032fa:	7018      	strb	r0, [r3, #0]
  4032fc:	f3bf 8f5f 	dmb	sy
  403300:	b662      	cpsie	i
  403302:	e004      	b.n	40330e <udd_ep_set_halt+0xce>
		return false;
  403304:	2000      	movs	r0, #0
  403306:	4770      	bx	lr
		return true; // Already STALL
  403308:	2001      	movs	r0, #1
  40330a:	4770      	bx	lr
  40330c:	2001      	movs	r0, #1
}
  40330e:	b003      	add	sp, #12
  403310:	f85d 4b04 	ldr.w	r4, [sp], #4
  403314:	4770      	bx	lr
		return false; // Job on going, stall impossible
  403316:	2000      	movs	r0, #0
  403318:	e7f9      	b.n	40330e <udd_ep_set_halt+0xce>
		return true;
  40331a:	2001      	movs	r0, #1
  40331c:	e7f7      	b.n	40330e <udd_ep_set_halt+0xce>
	return true;
  40331e:	2001      	movs	r0, #1
  403320:	e7f5      	b.n	40330e <udd_ep_set_halt+0xce>
  403322:	bf00      	nop
  403324:	400381c0 	.word	0x400381c0
  403328:	20400b58 	.word	0x20400b58
  40332c:	204000e7 	.word	0x204000e7
  403330:	40038100 	.word	0x40038100
  403334:	40038160 	.word	0x40038160
  403338:	40038130 	.word	0x40038130
  40333c:	400381f0 	.word	0x400381f0
  403340:	40038000 	.word	0x40038000

00403344 <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  403344:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
  403348:	2806      	cmp	r0, #6
  40334a:	d851      	bhi.n	4033f0 <udd_ep_clear_halt+0xac>
{
  40334c:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40334e:	1e43      	subs	r3, r0, #1
	if (ptr_job->stall_requested) {
  403350:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  403354:	4a2c      	ldr	r2, [pc, #176]	; (403408 <udd_ep_clear_halt+0xc4>)
  403356:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40335a:	7d12      	ldrb	r2, [r2, #20]
  40335c:	f012 0f04 	tst.w	r2, #4
  403360:	d048      	beq.n	4033f4 <udd_ep_clear_halt+0xb0>
		ptr_job->stall_requested = false;
  403362:	460a      	mov	r2, r1
  403364:	4928      	ldr	r1, [pc, #160]	; (403408 <udd_ep_clear_halt+0xc4>)
  403366:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40336a:	7d11      	ldrb	r1, [r2, #20]
  40336c:	f36f 0182 	bfc	r1, #2, #1
  403370:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
  403372:	0082      	lsls	r2, r0, #2
  403374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403378:	4c24      	ldr	r4, [pc, #144]	; (40340c <udd_ep_clear_halt+0xc8>)
  40337a:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
  40337e:	4081      	lsls	r1, r0
  403380:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
  403384:	6161      	str	r1, [r4, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
  403386:	4922      	ldr	r1, [pc, #136]	; (403410 <udd_ep_clear_halt+0xcc>)
  403388:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40338c:	f411 2f00 	tst.w	r1, #524288	; 0x80000
  403390:	d014      	beq.n	4033bc <udd_ep_clear_halt+0x78>
		if (Is_udd_stall(ep_index)) {
  403392:	4920      	ldr	r1, [pc, #128]	; (403414 <udd_ep_clear_halt+0xd0>)
  403394:	5851      	ldr	r1, [r2, r1]
  403396:	f011 0f40 	tst.w	r1, #64	; 0x40
  40339a:	d006      	beq.n	4033aa <udd_ep_clear_halt+0x66>
			udd_ack_stall(ep_index);
  40339c:	2040      	movs	r0, #64	; 0x40
  40339e:	491e      	ldr	r1, [pc, #120]	; (403418 <udd_ep_clear_halt+0xd4>)
  4033a0:	5050      	str	r0, [r2, r1]
			udd_reset_data_toggle(ep_index);
  4033a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4033a6:	3190      	adds	r1, #144	; 0x90
  4033a8:	5050      	str	r0, [r2, r1]
		udd_disable_stall_handshake(ep_index);
  4033aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  4033ae:	4917      	ldr	r1, [pc, #92]	; (40340c <udd_ep_clear_halt+0xc8>)
  4033b0:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
  4033b2:	481a      	ldr	r0, [pc, #104]	; (40341c <udd_ep_clear_halt+0xd8>)
  4033b4:	5811      	ldr	r1, [r2, r0]
  4033b6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  4033ba:	5011      	str	r1, [r2, r0]
		if (ptr_job->busy == true) {
  4033bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  4033c0:	4911      	ldr	r1, [pc, #68]	; (403408 <udd_ep_clear_halt+0xc4>)
  4033c2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4033c6:	7d12      	ldrb	r2, [r2, #20]
  4033c8:	f012 0f01 	tst.w	r2, #1
  4033cc:	d101      	bne.n	4033d2 <udd_ep_clear_halt+0x8e>
	return true;
  4033ce:	2001      	movs	r0, #1
  4033d0:	bd10      	pop	{r4, pc}
			ptr_job->busy = false;
  4033d2:	4608      	mov	r0, r1
  4033d4:	0059      	lsls	r1, r3, #1
  4033d6:	18ca      	adds	r2, r1, r3
  4033d8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  4033dc:	7d14      	ldrb	r4, [r2, #20]
  4033de:	f36f 0400 	bfc	r4, #0, #1
  4033e2:	7514      	strb	r4, [r2, #20]
			ptr_job->call_nohalt();
  4033e4:	440b      	add	r3, r1
  4033e6:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
  4033ea:	4798      	blx	r3
	return true;
  4033ec:	2001      	movs	r0, #1
  4033ee:	bd10      	pop	{r4, pc}
		return false;
  4033f0:	2000      	movs	r0, #0
  4033f2:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep_index)) {
  4033f4:	0082      	lsls	r2, r0, #2
  4033f6:	4906      	ldr	r1, [pc, #24]	; (403410 <udd_ep_clear_halt+0xcc>)
  4033f8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4033fc:	f411 2f00 	tst.w	r1, #524288	; 0x80000
  403400:	d1c7      	bne.n	403392 <udd_ep_clear_halt+0x4e>
	return true;
  403402:	2001      	movs	r0, #1
}
  403404:	bd10      	pop	{r4, pc}
  403406:	bf00      	nop
  403408:	20400b58 	.word	0x20400b58
  40340c:	40038220 	.word	0x40038220
  403410:	400381c0 	.word	0x400381c0
  403414:	40038130 	.word	0x40038130
  403418:	40038160 	.word	0x40038160
  40341c:	40038100 	.word	0x40038100

00403420 <udd_ep_run>:
{
  403420:	b5f0      	push	{r4, r5, r6, r7, lr}
  403422:	b083      	sub	sp, #12
  403424:	f000 000f 	and.w	r0, r0, #15
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
  403428:	4c3a      	ldr	r4, [pc, #232]	; (403514 <udd_ep_run+0xf4>)
  40342a:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
	if (USB_DEVICE_MAX_EP < ep) {
  40342e:	2806      	cmp	r0, #6
  403430:	d864      	bhi.n	4034fc <udd_ep_run+0xdc>
	if ((!Is_udd_endpoint_enabled(ep))
  403432:	4c39      	ldr	r4, [pc, #228]	; (403518 <udd_ep_run+0xf8>)
  403434:	69e5      	ldr	r5, [r4, #28]
  403436:	2401      	movs	r4, #1
  403438:	4084      	lsls	r4, r0
  40343a:	422c      	tst	r4, r5
  40343c:	d061      	beq.n	403502 <udd_ep_run+0xe2>
			|| Is_udd_endpoint_stall_requested(ep)
  40343e:	4c37      	ldr	r4, [pc, #220]	; (40351c <udd_ep_run+0xfc>)
  403440:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
  403444:	f414 2f00 	tst.w	r4, #524288	; 0x80000
  403448:	d15d      	bne.n	403506 <udd_ep_run+0xe6>
	ptr_job = &udd_ep_job[ep - 1];
  40344a:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
  40344c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
  403450:	4d33      	ldr	r5, [pc, #204]	; (403520 <udd_ep_run+0x100>)
  403452:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
  403456:	7d2d      	ldrb	r5, [r5, #20]
  403458:	f015 0f04 	tst.w	r5, #4
  40345c:	d155      	bne.n	40350a <udd_ep_run+0xea>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40345e:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403462:	fab5 f585 	clz	r5, r5
  403466:	096d      	lsrs	r5, r5, #5
  403468:	9501      	str	r5, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40346a:	b672      	cpsid	i
  40346c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403470:	2600      	movs	r6, #0
  403472:	4d2c      	ldr	r5, [pc, #176]	; (403524 <udd_ep_run+0x104>)
  403474:	702e      	strb	r6, [r5, #0]
	return flags;
  403476:	9f01      	ldr	r7, [sp, #4]
	if (ptr_job->busy == true) {
  403478:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  40347c:	4e28      	ldr	r6, [pc, #160]	; (403520 <udd_ep_run+0x100>)
  40347e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  403482:	7d2d      	ldrb	r5, [r5, #20]
  403484:	f015 0f01 	tst.w	r5, #1
  403488:	d009      	beq.n	40349e <udd_ep_run+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
  40348a:	2f00      	cmp	r7, #0
  40348c:	d03f      	beq.n	40350e <udd_ep_run+0xee>
		cpu_irq_enable();
  40348e:	2201      	movs	r2, #1
  403490:	4b24      	ldr	r3, [pc, #144]	; (403524 <udd_ep_run+0x104>)
  403492:	701a      	strb	r2, [r3, #0]
  403494:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403498:	b662      	cpsie	i
		return false; // Job already on going
  40349a:	2000      	movs	r0, #0
  40349c:	e02f      	b.n	4034fe <udd_ep_run+0xde>
	ptr_job->busy = true;
  40349e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  4034a2:	4e1f      	ldr	r6, [pc, #124]	; (403520 <udd_ep_run+0x100>)
  4034a4:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  4034a8:	7d2e      	ldrb	r6, [r5, #20]
  4034aa:	f046 0601 	orr.w	r6, r6, #1
  4034ae:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
  4034b0:	b12f      	cbz	r7, 4034be <udd_ep_run+0x9e>
		cpu_irq_enable();
  4034b2:	2601      	movs	r6, #1
  4034b4:	4d1b      	ldr	r5, [pc, #108]	; (403524 <udd_ep_run+0x104>)
  4034b6:	702e      	strb	r6, [r5, #0]
  4034b8:	f3bf 8f5f 	dmb	sy
  4034bc:	b662      	cpsie	i
	ptr_job->buf = buf;
  4034be:	4d18      	ldr	r5, [pc, #96]	; (403520 <udd_ep_run+0x100>)
  4034c0:	0066      	lsls	r6, r4, #1
  4034c2:	1937      	adds	r7, r6, r4
  4034c4:	00ff      	lsls	r7, r7, #3
  4034c6:	eb05 0e07 	add.w	lr, r5, r7
  4034ca:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  4034ce:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  4034d2:	2200      	movs	r2, #0
  4034d4:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->buf_load = 0;
  4034d8:	f8ce 2010 	str.w	r2, [lr, #16]
	ptr_job->call_trans = callback;
  4034dc:	9a08      	ldr	r2, [sp, #32]
  4034de:	51ea      	str	r2, [r5, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4034e0:	2b00      	cmp	r3, #0
  4034e2:	bf08      	it	eq
  4034e4:	f041 0101 	orreq.w	r1, r1, #1
  4034e8:	f89e 3014 	ldrb.w	r3, [lr, #20]
  4034ec:	f361 0341 	bfi	r3, r1, #1, #1
  4034f0:	f88e 3014 	strb.w	r3, [lr, #20]
	udd_ep_trans_done(ep);
  4034f4:	4b0c      	ldr	r3, [pc, #48]	; (403528 <udd_ep_run+0x108>)
  4034f6:	4798      	blx	r3
	return true;
  4034f8:	2001      	movs	r0, #1
  4034fa:	e000      	b.n	4034fe <udd_ep_run+0xde>
		return false;
  4034fc:	2000      	movs	r0, #0
}
  4034fe:	b003      	add	sp, #12
  403500:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  403502:	2000      	movs	r0, #0
  403504:	e7fb      	b.n	4034fe <udd_ep_run+0xde>
  403506:	2000      	movs	r0, #0
  403508:	e7f9      	b.n	4034fe <udd_ep_run+0xde>
  40350a:	2000      	movs	r0, #0
  40350c:	e7f7      	b.n	4034fe <udd_ep_run+0xde>
		return false; // Job already on going
  40350e:	2000      	movs	r0, #0
  403510:	e7f5      	b.n	4034fe <udd_ep_run+0xde>
  403512:	bf00      	nop
  403514:	40038100 	.word	0x40038100
  403518:	40038000 	.word	0x40038000
  40351c:	400381c0 	.word	0x400381c0
  403520:	20400b58 	.word	0x20400b58
  403524:	204000e7 	.word	0x204000e7
  403528:	0040280d 	.word	0x0040280d

0040352c <udd_ep_alloc>:
{
  40352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403530:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  403532:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  403536:	2c06      	cmp	r4, #6
  403538:	f200 80df 	bhi.w	4036fa <udd_ep_alloc+0x1ce>
	if (Is_udd_endpoint_enabled(ep)) {
  40353c:	4b73      	ldr	r3, [pc, #460]	; (40370c <udd_ep_alloc+0x1e0>)
  40353e:	69dd      	ldr	r5, [r3, #28]
  403540:	2301      	movs	r3, #1
  403542:	40a3      	lsls	r3, r4
  403544:	402b      	ands	r3, r5
  403546:	f040 80dd 	bne.w	403704 <udd_ep_alloc+0x1d8>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
  40354a:	f001 0503 	and.w	r5, r1, #3
  40354e:	2d02      	cmp	r5, #2
  403550:	d005      	beq.n	40355e <udd_ep_alloc+0x32>
  403552:	2d03      	cmp	r5, #3
  403554:	d020      	beq.n	403598 <udd_ep_alloc+0x6c>
  403556:	2d01      	cmp	r5, #1
  403558:	d01e      	beq.n	403598 <udd_ep_alloc+0x6c>
		return false;
  40355a:	2300      	movs	r3, #0
  40355c:	e0ce      	b.n	4036fc <udd_ep_alloc+0x1d0>
		bank = USBHS_DEVEPTCFG_EPBK_2_BANK >>
  40355e:	f04f 0e01 	mov.w	lr, #1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  403562:	4e6b      	ldr	r6, [pc, #428]	; (403710 <udd_ep_alloc+0x1e4>)
  403564:	eb06 0584 	add.w	r5, r6, r4, lsl #2
  403568:	f856 c024 	ldr.w	ip, [r6, r4, lsl #2]
  40356c:	4f69      	ldr	r7, [pc, #420]	; (403714 <udd_ep_alloc+0x1e8>)
  40356e:	ea0c 0707 	and.w	r7, ip, r7
  403572:	02c9      	lsls	r1, r1, #11
  403574:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
  403578:	b240      	sxtb	r0, r0
  40357a:	2800      	cmp	r0, #0
  40357c:	bfb8      	it	lt
  40357e:	f44f 7380 	movlt.w	r3, #256	; 0x100
  403582:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
  403586:	b280      	uxth	r0, r0
  403588:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
  40358c:	d307      	bcc.n	40359e <udd_ep_alloc+0x72>
  40358e:	2a08      	cmp	r2, #8
  403590:	d924      	bls.n	4035dc <udd_ep_alloc+0xb0>
  403592:	0052      	lsls	r2, r2, #1
  403594:	3a01      	subs	r2, #1
  403596:	e004      	b.n	4035a2 <udd_ep_alloc+0x76>
		bank = USBHS_DEVEPTCFG_EPBK_1_BANK >>
  403598:	f04f 0e00 	mov.w	lr, #0
  40359c:	e7e1      	b.n	403562 <udd_ep_alloc+0x36>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  40359e:	f240 72ff 	movw	r2, #2047	; 0x7ff
  4035a2:	fab2 f282 	clz	r2, r2
  4035a6:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
  4035aa:	430b      	orrs	r3, r1
  4035ac:	f1c2 021c 	rsb	r2, r2, #28
  4035b0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  4035b4:	f423 63d0 	bic.w	r3, r3, #1664	; 0x680
  4035b8:	f023 0303 	bic.w	r3, r3, #3
  4035bc:	04db      	lsls	r3, r3, #19
  4035be:	0cdb      	lsrs	r3, r3, #19
  4035c0:	433b      	orrs	r3, r7
  4035c2:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	ep_allocated = 1 << ep;
  4035c6:	2701      	movs	r7, #1
  4035c8:	40a7      	lsls	r7, r4
  4035ca:	b2bf      	uxth	r7, r7
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
  4035cc:	2c05      	cmp	r4, #5
  4035ce:	d81c      	bhi.n	40360a <udd_ep_alloc+0xde>
  4035d0:	4a51      	ldr	r2, [pc, #324]	; (403718 <udd_ep_alloc+0x1ec>)
  4035d2:	2306      	movs	r3, #6
		if (Is_udd_endpoint_enabled(i)) {
  4035d4:	484d      	ldr	r0, [pc, #308]	; (40370c <udd_ep_alloc+0x1e0>)
  4035d6:	f04f 0e01 	mov.w	lr, #1
  4035da:	e006      	b.n	4035ea <udd_ep_alloc+0xbe>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  4035dc:	220f      	movs	r2, #15
  4035de:	e7e0      	b.n	4035a2 <udd_ep_alloc+0x76>
  4035e0:	3b01      	subs	r3, #1
  4035e2:	3a04      	subs	r2, #4
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
  4035e4:	b2d9      	uxtb	r1, r3
  4035e6:	428c      	cmp	r4, r1
  4035e8:	d20f      	bcs.n	40360a <udd_ep_alloc+0xde>
		if (Is_udd_endpoint_enabled(i)) {
  4035ea:	69c6      	ldr	r6, [r0, #28]
  4035ec:	fa0e f103 	lsl.w	r1, lr, r3
  4035f0:	420e      	tst	r6, r1
  4035f2:	d0f5      	beq.n	4035e0 <udd_ep_alloc+0xb4>
			ep_allocated |= 1 << i;
  4035f4:	430f      	orrs	r7, r1
  4035f6:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
  4035f8:	69c6      	ldr	r6, [r0, #28]
  4035fa:	ea26 0101 	bic.w	r1, r6, r1
  4035fe:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
  403600:	6811      	ldr	r1, [r2, #0]
  403602:	f021 0102 	bic.w	r1, r1, #2
  403606:	6011      	str	r1, [r2, #0]
  403608:	e7ea      	b.n	4035e0 <udd_ep_alloc+0xb4>
  40360a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  40360e:	4e43      	ldr	r6, [pc, #268]	; (40371c <udd_ep_alloc+0x1f0>)
  403610:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
			bool b_restart = ptr_job->busy;
  403614:	f8df 9104 	ldr.w	r9, [pc, #260]	; 40371c <udd_ep_alloc+0x1f0>
			udd_enable_endpoint(i);
  403618:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 40370c <udd_ep_alloc+0x1e0>
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  40361c:	f8df a100 	ldr.w	sl, [pc, #256]	; 403720 <udd_ep_alloc+0x1f4>
  403620:	e01d      	b.n	40365e <udd_ep_alloc+0x132>
				if (NULL == ptr_job->call_trans) {
  403622:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  403626:	4a3d      	ldr	r2, [pc, #244]	; (40371c <udd_ep_alloc+0x1f0>)
  403628:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
  40362c:	2c00      	cmp	r4, #0
  40362e:	d06b      	beq.n	403708 <udd_ep_alloc+0x1dc>
				if (Is_udd_endpoint_in(i)) {
  403630:	682b      	ldr	r3, [r5, #0]
  403632:	f413 7f80 	tst.w	r3, #256	; 0x100
					i |= USB_EP_DIR_IN;
  403636:	bf18      	it	ne
  403638:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
  40363c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  403640:	4b36      	ldr	r3, [pc, #216]	; (40371c <udd_ep_alloc+0x1f0>)
  403642:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  403646:	4602      	mov	r2, r0
  403648:	68c9      	ldr	r1, [r1, #12]
  40364a:	2001      	movs	r0, #1
  40364c:	47a0      	blx	r4
				return false;
  40364e:	2300      	movs	r3, #0
  403650:	e054      	b.n	4036fc <udd_ep_alloc+0x1d0>
  403652:	3401      	adds	r4, #1
  403654:	3504      	adds	r5, #4
  403656:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
  403658:	b2e3      	uxtb	r3, r4
  40365a:	2b06      	cmp	r3, #6
  40365c:	d84b      	bhi.n	4036f6 <udd_ep_alloc+0x1ca>
  40365e:	b2e0      	uxtb	r0, r4
		if (ep_allocated & (1 << i)) {
  403660:	fa47 f304 	asr.w	r3, r7, r4
  403664:	f013 0f01 	tst.w	r3, #1
  403668:	d0f3      	beq.n	403652 <udd_ep_alloc+0x126>
  40366a:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
  40366c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  403670:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
  403674:	f893 e014 	ldrb.w	lr, [r3, #20]
  403678:	f00e 0201 	and.w	r2, lr, #1
			ptr_job->busy = false;
  40367c:	f36f 0e00 	bfc	lr, #0, #1
  403680:	f883 e014 	strb.w	lr, [r3, #20]
			udd_allocate_memory(i);
  403684:	682b      	ldr	r3, [r5, #0]
  403686:	f043 0302 	orr.w	r3, r3, #2
  40368a:	602b      	str	r3, [r5, #0]
			udd_enable_endpoint(i);
  40368c:	f8d8 e01c 	ldr.w	lr, [r8, #28]
  403690:	2301      	movs	r3, #1
  403692:	40a3      	lsls	r3, r4
  403694:	ea43 030e 	orr.w	r3, r3, lr
  403698:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
  40369c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40369e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  4036a2:	d0be      	beq.n	403622 <udd_ep_alloc+0xf6>
			udd_enable_endpoint_bank_autoswitch(i);
  4036a4:	682b      	ldr	r3, [r5, #0]
  4036a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4036aa:	602b      	str	r3, [r5, #0]
			if (b_restart) {
  4036ac:	2a00      	cmp	r2, #0
  4036ae:	d0d0      	beq.n	403652 <udd_ep_alloc+0x126>
				ptr_job->buf_cnt -= ptr_job->buf_load;
  4036b0:	f856 3c0c 	ldr.w	r3, [r6, #-12]
  4036b4:	f856 2c08 	ldr.w	r2, [r6, #-8]
  4036b8:	1a9a      	subs	r2, r3, r2
  4036ba:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  4036be:	682b      	ldr	r3, [r5, #0]
  4036c0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4036c4:	bf18      	it	ne
  4036c6:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
  4036ca:	f856 bc10 	ldr.w	fp, [r6, #-16]
  4036ce:	f856 cc14 	ldr.w	ip, [r6, #-20]
						ptr_job->b_shortpacket,
  4036d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4036d6:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
  4036da:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  4036dc:	f856 3c18 	ldr.w	r3, [r6, #-24]
  4036e0:	9300      	str	r3, [sp, #0]
  4036e2:	ebab 0302 	sub.w	r3, fp, r2
  4036e6:	4462      	add	r2, ip
  4036e8:	f3c1 0140 	ubfx	r1, r1, #1, #1
  4036ec:	47d0      	blx	sl
				if (!b_restart) {
  4036ee:	4603      	mov	r3, r0
  4036f0:	2800      	cmp	r0, #0
  4036f2:	d1ae      	bne.n	403652 <udd_ep_alloc+0x126>
  4036f4:	e002      	b.n	4036fc <udd_ep_alloc+0x1d0>
	return true;
  4036f6:	2301      	movs	r3, #1
  4036f8:	e000      	b.n	4036fc <udd_ep_alloc+0x1d0>
		return false;
  4036fa:	2300      	movs	r3, #0
}
  4036fc:	4618      	mov	r0, r3
  4036fe:	b003      	add	sp, #12
  403700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
  403704:	2300      	movs	r3, #0
  403706:	e7f9      	b.n	4036fc <udd_ep_alloc+0x1d0>
					return false;
  403708:	2300      	movs	r3, #0
  40370a:	e7f7      	b.n	4036fc <udd_ep_alloc+0x1d0>
  40370c:	40038000 	.word	0x40038000
  403710:	40038100 	.word	0x40038100
  403714:	ffffe683 	.word	0xffffe683
  403718:	40038118 	.word	0x40038118
  40371c:	20400b58 	.word	0x20400b58
  403720:	00403421 	.word	0x00403421

00403724 <udd_ep_abort>:
{
  403724:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  403726:	f000 020f 	and.w	r2, r0, #15
		udd_disable_endpoint_dma_interrupt(ep_index);
  40372a:	1e54      	subs	r4, r2, #1
  40372c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  403730:	40a3      	lsls	r3, r4
  403732:	4918      	ldr	r1, [pc, #96]	; (403794 <udd_ep_abort+0x70>)
  403734:	614b      	str	r3, [r1, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
  403736:	4b18      	ldr	r3, [pc, #96]	; (403798 <udd_ep_abort+0x74>)
  403738:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  40373c:	2500      	movs	r5, #0
  40373e:	609d      	str	r5, [r3, #8]
	udd_disable_endpoint_interrupt(ep_index);
  403740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403744:	4093      	lsls	r3, r2
  403746:	614b      	str	r3, [r1, #20]
  __ASM volatile ("dsb");
  403748:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40374c:	f3bf 8f6f 	isb	sy
	if (ep & USB_EP_DIR_IN) {
  403750:	f010 0f80 	tst.w	r0, #128	; 0x80
  403754:	d108      	bne.n	403768 <udd_ep_abort+0x44>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
  403756:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  40375a:	2101      	movs	r1, #1
  40375c:	480f      	ldr	r0, [pc, #60]	; (40379c <udd_ep_abort+0x78>)
  40375e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  403762:	4b0f      	ldr	r3, [pc, #60]	; (4037a0 <udd_ep_abort+0x7c>)
  403764:	4798      	blx	r3
  403766:	bd70      	pop	{r4, r5, r6, pc}
		while(udd_nb_busy_bank(ep_index)) {
  403768:	0093      	lsls	r3, r2, #2
  40376a:	480e      	ldr	r0, [pc, #56]	; (4037a4 <udd_ep_abort+0x80>)
  40376c:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
  40376e:	4d0e      	ldr	r5, [pc, #56]	; (4037a8 <udd_ep_abort+0x84>)
  403770:	441d      	add	r5, r3
  403772:	f44f 5600 	mov.w	r6, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
  403776:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
  40377a:	4419      	add	r1, r3
  40377c:	e004      	b.n	403788 <udd_ep_abort+0x64>
			udd_kill_last_in_bank(ep_index);
  40377e:	602e      	str	r6, [r5, #0]
			while(Is_udd_kill_last(ep_index));
  403780:	680b      	ldr	r3, [r1, #0]
  403782:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  403786:	d1fb      	bne.n	403780 <udd_ep_abort+0x5c>
		while(udd_nb_busy_bank(ep_index)) {
  403788:	6803      	ldr	r3, [r0, #0]
  40378a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  40378e:	d1f6      	bne.n	40377e <udd_ep_abort+0x5a>
  403790:	e7e1      	b.n	403756 <udd_ep_abort+0x32>
  403792:	bf00      	nop
  403794:	40038000 	.word	0x40038000
  403798:	40038300 	.word	0x40038300
  40379c:	20400b58 	.word	0x20400b58
  4037a0:	004027d5 	.word	0x004027d5
  4037a4:	40038130 	.word	0x40038130
  4037a8:	400381f0 	.word	0x400381f0

004037ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4037ac:	e7fe      	b.n	4037ac <Dummy_Handler>
	...

004037b0 <Reset_Handler>:
{
  4037b0:	b500      	push	{lr}
  4037b2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4037b4:	4b25      	ldr	r3, [pc, #148]	; (40384c <Reset_Handler+0x9c>)
  4037b6:	4a26      	ldr	r2, [pc, #152]	; (403850 <Reset_Handler+0xa0>)
  4037b8:	429a      	cmp	r2, r3
  4037ba:	d010      	beq.n	4037de <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4037bc:	4b25      	ldr	r3, [pc, #148]	; (403854 <Reset_Handler+0xa4>)
  4037be:	4a23      	ldr	r2, [pc, #140]	; (40384c <Reset_Handler+0x9c>)
  4037c0:	429a      	cmp	r2, r3
  4037c2:	d20c      	bcs.n	4037de <Reset_Handler+0x2e>
  4037c4:	3b01      	subs	r3, #1
  4037c6:	1a9b      	subs	r3, r3, r2
  4037c8:	f023 0303 	bic.w	r3, r3, #3
  4037cc:	3304      	adds	r3, #4
  4037ce:	4413      	add	r3, r2
  4037d0:	491f      	ldr	r1, [pc, #124]	; (403850 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4037d2:	f851 0b04 	ldr.w	r0, [r1], #4
  4037d6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4037da:	429a      	cmp	r2, r3
  4037dc:	d1f9      	bne.n	4037d2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4037de:	4b1e      	ldr	r3, [pc, #120]	; (403858 <Reset_Handler+0xa8>)
  4037e0:	4a1e      	ldr	r2, [pc, #120]	; (40385c <Reset_Handler+0xac>)
  4037e2:	429a      	cmp	r2, r3
  4037e4:	d20a      	bcs.n	4037fc <Reset_Handler+0x4c>
  4037e6:	3b01      	subs	r3, #1
  4037e8:	1a9b      	subs	r3, r3, r2
  4037ea:	f023 0303 	bic.w	r3, r3, #3
  4037ee:	3304      	adds	r3, #4
  4037f0:	4413      	add	r3, r2
                *pDest++ = 0;
  4037f2:	2100      	movs	r1, #0
  4037f4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4037f8:	4293      	cmp	r3, r2
  4037fa:	d1fb      	bne.n	4037f4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4037fc:	4a18      	ldr	r2, [pc, #96]	; (403860 <Reset_Handler+0xb0>)
  4037fe:	4b19      	ldr	r3, [pc, #100]	; (403864 <Reset_Handler+0xb4>)
  403800:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403804:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403806:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40380a:	fab3 f383 	clz	r3, r3
  40380e:	095b      	lsrs	r3, r3, #5
  403810:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403812:	b672      	cpsid	i
  __ASM volatile ("dmb");
  403814:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403818:	2200      	movs	r2, #0
  40381a:	4b13      	ldr	r3, [pc, #76]	; (403868 <Reset_Handler+0xb8>)
  40381c:	701a      	strb	r2, [r3, #0]
	return flags;
  40381e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403820:	4a12      	ldr	r2, [pc, #72]	; (40386c <Reset_Handler+0xbc>)
  403822:	6813      	ldr	r3, [r2, #0]
  403824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403828:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40382a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40382e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  403832:	b129      	cbz	r1, 403840 <Reset_Handler+0x90>
		cpu_irq_enable();
  403834:	2201      	movs	r2, #1
  403836:	4b0c      	ldr	r3, [pc, #48]	; (403868 <Reset_Handler+0xb8>)
  403838:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40383a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40383e:	b662      	cpsie	i
        __libc_init_array();
  403840:	4b0b      	ldr	r3, [pc, #44]	; (403870 <Reset_Handler+0xc0>)
  403842:	4798      	blx	r3
        main();
  403844:	4b0b      	ldr	r3, [pc, #44]	; (403874 <Reset_Handler+0xc4>)
  403846:	4798      	blx	r3
  403848:	e7fe      	b.n	403848 <Reset_Handler+0x98>
  40384a:	bf00      	nop
  40384c:	20400000 	.word	0x20400000
  403850:	0040b108 	.word	0x0040b108
  403854:	20400aa0 	.word	0x20400aa0
  403858:	20402148 	.word	0x20402148
  40385c:	20400aa0 	.word	0x20400aa0
  403860:	e000ed00 	.word	0xe000ed00
  403864:	00400000 	.word	0x00400000
  403868:	204000e7 	.word	0x204000e7
  40386c:	e000ed88 	.word	0xe000ed88
  403870:	00407961 	.word	0x00407961
  403874:	00407495 	.word	0x00407495

00403878 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403878:	4b3b      	ldr	r3, [pc, #236]	; (403968 <SystemCoreClockUpdate+0xf0>)
  40387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40387c:	f003 0303 	and.w	r3, r3, #3
  403880:	2b01      	cmp	r3, #1
  403882:	d01d      	beq.n	4038c0 <SystemCoreClockUpdate+0x48>
  403884:	b183      	cbz	r3, 4038a8 <SystemCoreClockUpdate+0x30>
  403886:	2b02      	cmp	r3, #2
  403888:	d036      	beq.n	4038f8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40388a:	4b37      	ldr	r3, [pc, #220]	; (403968 <SystemCoreClockUpdate+0xf0>)
  40388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40388e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403892:	2b70      	cmp	r3, #112	; 0x70
  403894:	d05f      	beq.n	403956 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403896:	4b34      	ldr	r3, [pc, #208]	; (403968 <SystemCoreClockUpdate+0xf0>)
  403898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40389a:	4934      	ldr	r1, [pc, #208]	; (40396c <SystemCoreClockUpdate+0xf4>)
  40389c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4038a0:	680b      	ldr	r3, [r1, #0]
  4038a2:	40d3      	lsrs	r3, r2
  4038a4:	600b      	str	r3, [r1, #0]
  4038a6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4038a8:	4b31      	ldr	r3, [pc, #196]	; (403970 <SystemCoreClockUpdate+0xf8>)
  4038aa:	695b      	ldr	r3, [r3, #20]
  4038ac:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4038b0:	bf14      	ite	ne
  4038b2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4038b6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4038ba:	4b2c      	ldr	r3, [pc, #176]	; (40396c <SystemCoreClockUpdate+0xf4>)
  4038bc:	601a      	str	r2, [r3, #0]
  4038be:	e7e4      	b.n	40388a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4038c0:	4b29      	ldr	r3, [pc, #164]	; (403968 <SystemCoreClockUpdate+0xf0>)
  4038c2:	6a1b      	ldr	r3, [r3, #32]
  4038c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4038c8:	d003      	beq.n	4038d2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4038ca:	4a2a      	ldr	r2, [pc, #168]	; (403974 <SystemCoreClockUpdate+0xfc>)
  4038cc:	4b27      	ldr	r3, [pc, #156]	; (40396c <SystemCoreClockUpdate+0xf4>)
  4038ce:	601a      	str	r2, [r3, #0]
  4038d0:	e7db      	b.n	40388a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4038d2:	4a29      	ldr	r2, [pc, #164]	; (403978 <SystemCoreClockUpdate+0x100>)
  4038d4:	4b25      	ldr	r3, [pc, #148]	; (40396c <SystemCoreClockUpdate+0xf4>)
  4038d6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4038d8:	4b23      	ldr	r3, [pc, #140]	; (403968 <SystemCoreClockUpdate+0xf0>)
  4038da:	6a1b      	ldr	r3, [r3, #32]
  4038dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4038e0:	2b10      	cmp	r3, #16
  4038e2:	d005      	beq.n	4038f0 <SystemCoreClockUpdate+0x78>
  4038e4:	2b20      	cmp	r3, #32
  4038e6:	d1d0      	bne.n	40388a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4038e8:	4a22      	ldr	r2, [pc, #136]	; (403974 <SystemCoreClockUpdate+0xfc>)
  4038ea:	4b20      	ldr	r3, [pc, #128]	; (40396c <SystemCoreClockUpdate+0xf4>)
  4038ec:	601a      	str	r2, [r3, #0]
          break;
  4038ee:	e7cc      	b.n	40388a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4038f0:	4a22      	ldr	r2, [pc, #136]	; (40397c <SystemCoreClockUpdate+0x104>)
  4038f2:	4b1e      	ldr	r3, [pc, #120]	; (40396c <SystemCoreClockUpdate+0xf4>)
  4038f4:	601a      	str	r2, [r3, #0]
          break;
  4038f6:	e7c8      	b.n	40388a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4038f8:	4b1b      	ldr	r3, [pc, #108]	; (403968 <SystemCoreClockUpdate+0xf0>)
  4038fa:	6a1b      	ldr	r3, [r3, #32]
  4038fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403900:	d016      	beq.n	403930 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  403902:	4a1c      	ldr	r2, [pc, #112]	; (403974 <SystemCoreClockUpdate+0xfc>)
  403904:	4b19      	ldr	r3, [pc, #100]	; (40396c <SystemCoreClockUpdate+0xf4>)
  403906:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403908:	4b17      	ldr	r3, [pc, #92]	; (403968 <SystemCoreClockUpdate+0xf0>)
  40390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40390c:	f003 0303 	and.w	r3, r3, #3
  403910:	2b02      	cmp	r3, #2
  403912:	d1ba      	bne.n	40388a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403914:	4a14      	ldr	r2, [pc, #80]	; (403968 <SystemCoreClockUpdate+0xf0>)
  403916:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403918:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40391a:	4814      	ldr	r0, [pc, #80]	; (40396c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40391c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  403920:	6803      	ldr	r3, [r0, #0]
  403922:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403926:	b2d2      	uxtb	r2, r2
  403928:	fbb3 f3f2 	udiv	r3, r3, r2
  40392c:	6003      	str	r3, [r0, #0]
  40392e:	e7ac      	b.n	40388a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403930:	4a11      	ldr	r2, [pc, #68]	; (403978 <SystemCoreClockUpdate+0x100>)
  403932:	4b0e      	ldr	r3, [pc, #56]	; (40396c <SystemCoreClockUpdate+0xf4>)
  403934:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403936:	4b0c      	ldr	r3, [pc, #48]	; (403968 <SystemCoreClockUpdate+0xf0>)
  403938:	6a1b      	ldr	r3, [r3, #32]
  40393a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40393e:	2b10      	cmp	r3, #16
  403940:	d005      	beq.n	40394e <SystemCoreClockUpdate+0xd6>
  403942:	2b20      	cmp	r3, #32
  403944:	d1e0      	bne.n	403908 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  403946:	4a0b      	ldr	r2, [pc, #44]	; (403974 <SystemCoreClockUpdate+0xfc>)
  403948:	4b08      	ldr	r3, [pc, #32]	; (40396c <SystemCoreClockUpdate+0xf4>)
  40394a:	601a      	str	r2, [r3, #0]
          break;
  40394c:	e7dc      	b.n	403908 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40394e:	4a0b      	ldr	r2, [pc, #44]	; (40397c <SystemCoreClockUpdate+0x104>)
  403950:	4b06      	ldr	r3, [pc, #24]	; (40396c <SystemCoreClockUpdate+0xf4>)
  403952:	601a      	str	r2, [r3, #0]
          break;
  403954:	e7d8      	b.n	403908 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  403956:	4a05      	ldr	r2, [pc, #20]	; (40396c <SystemCoreClockUpdate+0xf4>)
  403958:	6813      	ldr	r3, [r2, #0]
  40395a:	4909      	ldr	r1, [pc, #36]	; (403980 <SystemCoreClockUpdate+0x108>)
  40395c:	fba1 1303 	umull	r1, r3, r1, r3
  403960:	085b      	lsrs	r3, r3, #1
  403962:	6013      	str	r3, [r2, #0]
  403964:	4770      	bx	lr
  403966:	bf00      	nop
  403968:	400e0600 	.word	0x400e0600
  40396c:	204000e8 	.word	0x204000e8
  403970:	400e1810 	.word	0x400e1810
  403974:	00b71b00 	.word	0x00b71b00
  403978:	003d0900 	.word	0x003d0900
  40397c:	007a1200 	.word	0x007a1200
  403980:	aaaaaaab 	.word	0xaaaaaaab

00403984 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403984:	4b16      	ldr	r3, [pc, #88]	; (4039e0 <system_init_flash+0x5c>)
  403986:	4298      	cmp	r0, r3
  403988:	d913      	bls.n	4039b2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40398a:	4b16      	ldr	r3, [pc, #88]	; (4039e4 <system_init_flash+0x60>)
  40398c:	4298      	cmp	r0, r3
  40398e:	d915      	bls.n	4039bc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403990:	4b15      	ldr	r3, [pc, #84]	; (4039e8 <system_init_flash+0x64>)
  403992:	4298      	cmp	r0, r3
  403994:	d916      	bls.n	4039c4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403996:	4b15      	ldr	r3, [pc, #84]	; (4039ec <system_init_flash+0x68>)
  403998:	4298      	cmp	r0, r3
  40399a:	d917      	bls.n	4039cc <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40399c:	4b14      	ldr	r3, [pc, #80]	; (4039f0 <system_init_flash+0x6c>)
  40399e:	4298      	cmp	r0, r3
  4039a0:	d918      	bls.n	4039d4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4039a2:	4b14      	ldr	r3, [pc, #80]	; (4039f4 <system_init_flash+0x70>)
  4039a4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4039a6:	bf94      	ite	ls
  4039a8:	4a13      	ldrls	r2, [pc, #76]	; (4039f8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4039aa:	4a14      	ldrhi	r2, [pc, #80]	; (4039fc <system_init_flash+0x78>)
  4039ac:	4b14      	ldr	r3, [pc, #80]	; (403a00 <system_init_flash+0x7c>)
  4039ae:	601a      	str	r2, [r3, #0]
  4039b0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4039b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4039b6:	4b12      	ldr	r3, [pc, #72]	; (403a00 <system_init_flash+0x7c>)
  4039b8:	601a      	str	r2, [r3, #0]
  4039ba:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4039bc:	4a11      	ldr	r2, [pc, #68]	; (403a04 <system_init_flash+0x80>)
  4039be:	4b10      	ldr	r3, [pc, #64]	; (403a00 <system_init_flash+0x7c>)
  4039c0:	601a      	str	r2, [r3, #0]
  4039c2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4039c4:	4a10      	ldr	r2, [pc, #64]	; (403a08 <system_init_flash+0x84>)
  4039c6:	4b0e      	ldr	r3, [pc, #56]	; (403a00 <system_init_flash+0x7c>)
  4039c8:	601a      	str	r2, [r3, #0]
  4039ca:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4039cc:	4a0f      	ldr	r2, [pc, #60]	; (403a0c <system_init_flash+0x88>)
  4039ce:	4b0c      	ldr	r3, [pc, #48]	; (403a00 <system_init_flash+0x7c>)
  4039d0:	601a      	str	r2, [r3, #0]
  4039d2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4039d4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4039d8:	4b09      	ldr	r3, [pc, #36]	; (403a00 <system_init_flash+0x7c>)
  4039da:	601a      	str	r2, [r3, #0]
  4039dc:	4770      	bx	lr
  4039de:	bf00      	nop
  4039e0:	015ef3bf 	.word	0x015ef3bf
  4039e4:	02bde77f 	.word	0x02bde77f
  4039e8:	041cdb3f 	.word	0x041cdb3f
  4039ec:	057bceff 	.word	0x057bceff
  4039f0:	06dac2bf 	.word	0x06dac2bf
  4039f4:	0839b67f 	.word	0x0839b67f
  4039f8:	04000500 	.word	0x04000500
  4039fc:	04000600 	.word	0x04000600
  403a00:	400e0c00 	.word	0x400e0c00
  403a04:	04000100 	.word	0x04000100
  403a08:	04000200 	.word	0x04000200
  403a0c:	04000300 	.word	0x04000300

00403a10 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403a10:	4b0a      	ldr	r3, [pc, #40]	; (403a3c <_sbrk+0x2c>)
  403a12:	681b      	ldr	r3, [r3, #0]
  403a14:	b153      	cbz	r3, 403a2c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  403a16:	4b09      	ldr	r3, [pc, #36]	; (403a3c <_sbrk+0x2c>)
  403a18:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403a1a:	181a      	adds	r2, r3, r0
  403a1c:	4908      	ldr	r1, [pc, #32]	; (403a40 <_sbrk+0x30>)
  403a1e:	4291      	cmp	r1, r2
  403a20:	db08      	blt.n	403a34 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  403a22:	4610      	mov	r0, r2
  403a24:	4a05      	ldr	r2, [pc, #20]	; (403a3c <_sbrk+0x2c>)
  403a26:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403a28:	4618      	mov	r0, r3
  403a2a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403a2c:	4a05      	ldr	r2, [pc, #20]	; (403a44 <_sbrk+0x34>)
  403a2e:	4b03      	ldr	r3, [pc, #12]	; (403a3c <_sbrk+0x2c>)
  403a30:	601a      	str	r2, [r3, #0]
  403a32:	e7f0      	b.n	403a16 <_sbrk+0x6>
		return (caddr_t) -1;	
  403a34:	f04f 30ff 	mov.w	r0, #4294967295
}
  403a38:	4770      	bx	lr
  403a3a:	bf00      	nop
  403a3c:	20400be8 	.word	0x20400be8
  403a40:	2045fffc 	.word	0x2045fffc
  403a44:	20404348 	.word	0x20404348

00403a48 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403a48:	f04f 30ff 	mov.w	r0, #4294967295
  403a4c:	4770      	bx	lr

00403a4e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403a52:	604b      	str	r3, [r1, #4]

	return 0;
}
  403a54:	2000      	movs	r0, #0
  403a56:	4770      	bx	lr

00403a58 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403a58:	2001      	movs	r0, #1
  403a5a:	4770      	bx	lr

00403a5c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403a5c:	2000      	movs	r0, #0
  403a5e:	4770      	bx	lr

00403a60 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  403a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  403a62:	4b1b      	ldr	r3, [pc, #108]	; (403ad0 <SCB_EnableDCache+0x70>)
  403a64:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  403a68:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  403a6c:	f007 0007 	and.w	r0, r7, #7
  403a70:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403a72:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403a76:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  403a7a:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  403a7e:	f3bf 8f4f 	dsb	sy
  403a82:	f04f 34ff 	mov.w	r4, #4294967295
  403a86:	fa04 fc00 	lsl.w	ip, r4, r0
  403a8a:	fa06 f000 	lsl.w	r0, r6, r0
  403a8e:	fa04 f40e 	lsl.w	r4, r4, lr
  403a92:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  403a96:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  403a98:	463a      	mov	r2, r7
  403a9a:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  403a9c:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  403aa0:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  403aa4:	3a01      	subs	r2, #1
  403aa6:	4423      	add	r3, r4
  403aa8:	f1b2 3fff 	cmp.w	r2, #4294967295
  403aac:	d1f6      	bne.n	403a9c <SCB_EnableDCache+0x3c>
        } while(sets--);
  403aae:	3e01      	subs	r6, #1
  403ab0:	4460      	add	r0, ip
  403ab2:	f1b6 3fff 	cmp.w	r6, #4294967295
  403ab6:	d1ef      	bne.n	403a98 <SCB_EnableDCache+0x38>
  403ab8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  403abc:	4a04      	ldr	r2, [pc, #16]	; (403ad0 <SCB_EnableDCache+0x70>)
  403abe:	6953      	ldr	r3, [r2, #20]
  403ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403ac4:	6153      	str	r3, [r2, #20]
  403ac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403aca:	f3bf 8f6f 	isb	sy
  403ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403ad0:	e000ed00 	.word	0xe000ed00

00403ad4 <SCB_DisableDCache>:
/** \brief Disable D-Cache

    The function turns off D-Cache
  */
__STATIC_INLINE void SCB_DisableDCache(void)
{
  403ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  403ad6:	4b1a      	ldr	r3, [pc, #104]	; (403b40 <SCB_DisableDCache+0x6c>)
  403ad8:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  403adc:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  403ae0:	f007 0007 	and.w	r0, r7, #7
  403ae4:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403ae6:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403aea:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  403aee:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  403af2:	f3bf 8f4f 	dsb	sy

    __DSB();

    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  403af6:	695a      	ldr	r2, [r3, #20]
  403af8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  403afc:	615a      	str	r2, [r3, #20]
  403afe:	f04f 34ff 	mov.w	r4, #4294967295
  403b02:	fa04 fc00 	lsl.w	ip, r4, r0
  403b06:	fa06 f000 	lsl.w	r0, r6, r0
  403b0a:	fa04 f40e 	lsl.w	r4, r4, lr
  403b0e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  403b12:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  403b14:	463a      	mov	r2, r7
  403b16:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  403b18:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  403b1c:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  403b20:	3a01      	subs	r2, #1
  403b22:	4423      	add	r3, r4
  403b24:	f1b2 3fff 	cmp.w	r2, #4294967295
  403b28:	d1f6      	bne.n	403b18 <SCB_DisableDCache+0x44>
        } while(sets--);
  403b2a:	3e01      	subs	r6, #1
  403b2c:	4460      	add	r0, ip
  403b2e:	f1b6 3fff 	cmp.w	r6, #4294967295
  403b32:	d1ef      	bne.n	403b14 <SCB_DisableDCache+0x40>
  403b34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403b38:	f3bf 8f6f 	isb	sy
  403b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b3e:	bf00      	nop
  403b40:	e000ed00 	.word	0xe000ed00

00403b44 <SCB_CleanInvalidateDCache>:
/** \brief Clean & Invalidate D-Cache

    The function cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache(void)
{
  403b44:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  403b46:	4b18      	ldr	r3, [pc, #96]	; (403ba8 <SCB_CleanInvalidateDCache+0x64>)
  403b48:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  403b4c:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  403b50:	f007 0007 	and.w	r0, r7, #7
  403b54:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403b56:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403b5a:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  403b5e:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  403b62:	f3bf 8f4f 	dsb	sy
  403b66:	f04f 34ff 	mov.w	r4, #4294967295
  403b6a:	fa04 fc00 	lsl.w	ip, r4, r0
  403b6e:	fa06 f000 	lsl.w	r0, r6, r0
  403b72:	fa04 f40e 	lsl.w	r4, r4, lr
  403b76:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  403b7a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  403b7c:	463a      	mov	r2, r7
  403b7e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  403b80:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  403b84:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  403b88:	3a01      	subs	r2, #1
  403b8a:	4423      	add	r3, r4
  403b8c:	f1b2 3fff 	cmp.w	r2, #4294967295
  403b90:	d1f6      	bne.n	403b80 <SCB_CleanInvalidateDCache+0x3c>
        } while(sets--);
  403b92:	3e01      	subs	r6, #1
  403b94:	4460      	add	r0, ip
  403b96:	f1b6 3fff 	cmp.w	r6, #4294967295
  403b9a:	d1ef      	bne.n	403b7c <SCB_CleanInvalidateDCache+0x38>
  403b9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403ba0:	f3bf 8f6f 	isb	sy
  403ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403ba6:	bf00      	nop
  403ba8:	e000ed00 	.word	0xe000ed00

00403bac <hexToBCD>:
return inHex;
}
/***********************************************************************/
/*  Converts Hex to BCD. Works up to 99,999.
/***********************************************************************/
static int hexToBCD (int toConvert){
  403bac:	b410      	push	{r4}
	int inBCD;
	char tenThous=0;
	char thousands=0;
	char hundreds=0;
	char tens=0;
	if(toConvert>89999){tenThous=9;toConvert-=90000;}
  403bae:	4b8c      	ldr	r3, [pc, #560]	; (403de0 <hexToBCD+0x234>)
  403bb0:	4298      	cmp	r0, r3
  403bb2:	dd31      	ble.n	403c18 <hexToBCD+0x6c>
  403bb4:	f5a0 30af 	sub.w	r0, r0, #89600	; 0x15e00
  403bb8:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
  403bbc:	2409      	movs	r4, #9
	else if(toConvert>39999){tenThous=4;toConvert-=40000;}
	else if(toConvert>29999){tenThous=3;toConvert-=30000;}
	else if(toConvert>19999){tenThous=2;toConvert-=20000;}
	else if(toConvert>9999){tenThous=1;toConvert-=10000;}

	if(toConvert>8999){thousands=9;toConvert-=9000;}
  403bbe:	f242 3127 	movw	r1, #8999	; 0x2327
  403bc2:	4288      	cmp	r0, r1
  403bc4:	dd71      	ble.n	403caa <hexToBCD+0xfe>
  403bc6:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
  403bca:	3828      	subs	r0, #40	; 0x28
  403bcc:	2209      	movs	r2, #9
	else if(toConvert>3999){thousands=4;toConvert-=4000;}
	else if(toConvert>2999){thousands=3;toConvert-=3000;}
	else if(toConvert>1999){thousands=2;toConvert-=2000;}
	else if(toConvert>999){thousands=1;toConvert-=1000;}

	if(toConvert>899){hundreds=9;toConvert-=900;}
  403bce:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
  403bd2:	f2c0 80ab 	blt.w	403d2c <hexToBCD+0x180>
  403bd6:	f5a0 7061 	sub.w	r0, r0, #900	; 0x384
  403bda:	2309      	movs	r3, #9
	else if(toConvert>399){hundreds=4;toConvert-=400;}
	else if(toConvert>299){hundreds=3;toConvert-=300;}
	else if(toConvert>199){hundreds=2;toConvert-=200;}
	else if(toConvert>99){hundreds=1;toConvert-=100;}

	if(toConvert>89){tens=9;toConvert-=90;}
  403bdc:	2859      	cmp	r0, #89	; 0x59
  403bde:	f300 80db 	bgt.w	403d98 <hexToBCD+0x1ec>
	else if(toConvert>79){tens=8;toConvert-=80;}
  403be2:	284f      	cmp	r0, #79	; 0x4f
  403be4:	f300 80e5 	bgt.w	403db2 <hexToBCD+0x206>
	else if(toConvert>69){tens=7;toConvert-=70;}
  403be8:	2845      	cmp	r0, #69	; 0x45
  403bea:	f300 80e5 	bgt.w	403db8 <hexToBCD+0x20c>
	else if(toConvert>59){tens=6;toConvert-=60;}
  403bee:	283b      	cmp	r0, #59	; 0x3b
  403bf0:	f300 80e5 	bgt.w	403dbe <hexToBCD+0x212>
	else if(toConvert>49){tens=5;toConvert-=50;}
  403bf4:	2831      	cmp	r0, #49	; 0x31
  403bf6:	f300 80e5 	bgt.w	403dc4 <hexToBCD+0x218>
	else if(toConvert>39){tens=4;toConvert-=40;}
  403bfa:	2827      	cmp	r0, #39	; 0x27
  403bfc:	f300 80e5 	bgt.w	403dca <hexToBCD+0x21e>
	else if(toConvert>29){tens=3;toConvert-=30;}
  403c00:	281d      	cmp	r0, #29
  403c02:	f300 80e5 	bgt.w	403dd0 <hexToBCD+0x224>
	else if(toConvert>19){tens=2;toConvert-=20;}
  403c06:	2813      	cmp	r0, #19
  403c08:	f300 80e5 	bgt.w	403dd6 <hexToBCD+0x22a>
	else if(toConvert>9){tens=1;toConvert-=10;}
  403c0c:	2809      	cmp	r0, #9
  403c0e:	f340 80e5 	ble.w	403ddc <hexToBCD+0x230>
  403c12:	380a      	subs	r0, #10
  403c14:	2101      	movs	r1, #1
  403c16:	e0c1      	b.n	403d9c <hexToBCD+0x1f0>
	else if(toConvert>79999){tenThous=8;toConvert-=80000;}
  403c18:	4b72      	ldr	r3, [pc, #456]	; (403de4 <hexToBCD+0x238>)
  403c1a:	4298      	cmp	r0, r3
  403c1c:	dd04      	ble.n	403c28 <hexToBCD+0x7c>
  403c1e:	f5a0 309c 	sub.w	r0, r0, #79872	; 0x13800
  403c22:	3880      	subs	r0, #128	; 0x80
  403c24:	2408      	movs	r4, #8
  403c26:	e7ca      	b.n	403bbe <hexToBCD+0x12>
	else if(toConvert>69999){tenThous=7;toConvert-=70000;}
  403c28:	4b6f      	ldr	r3, [pc, #444]	; (403de8 <hexToBCD+0x23c>)
  403c2a:	4298      	cmp	r0, r3
  403c2c:	dd05      	ble.n	403c3a <hexToBCD+0x8e>
  403c2e:	f5a0 3088 	sub.w	r0, r0, #69632	; 0x11000
  403c32:	f5a0 70b8 	sub.w	r0, r0, #368	; 0x170
  403c36:	2407      	movs	r4, #7
  403c38:	e7c1      	b.n	403bbe <hexToBCD+0x12>
	else if(toConvert>59999){tenThous=6;toConvert-=60000;}
  403c3a:	f64e 235f 	movw	r3, #59999	; 0xea5f
  403c3e:	4298      	cmp	r0, r3
  403c40:	dd04      	ble.n	403c4c <hexToBCD+0xa0>
  403c42:	f5a0 406a 	sub.w	r0, r0, #59904	; 0xea00
  403c46:	3860      	subs	r0, #96	; 0x60
  403c48:	2406      	movs	r4, #6
  403c4a:	e7b8      	b.n	403bbe <hexToBCD+0x12>
	else if(toConvert>49999){tenThous=5;toConvert-=50000;}
  403c4c:	f24c 334f 	movw	r3, #49999	; 0xc34f
  403c50:	4298      	cmp	r0, r3
  403c52:	dd04      	ble.n	403c5e <hexToBCD+0xb2>
  403c54:	f5a0 4043 	sub.w	r0, r0, #49920	; 0xc300
  403c58:	3850      	subs	r0, #80	; 0x50
  403c5a:	2405      	movs	r4, #5
  403c5c:	e7af      	b.n	403bbe <hexToBCD+0x12>
	else if(toConvert>39999){tenThous=4;toConvert-=40000;}
  403c5e:	f649 433f 	movw	r3, #39999	; 0x9c3f
  403c62:	4298      	cmp	r0, r3
  403c64:	dd04      	ble.n	403c70 <hexToBCD+0xc4>
  403c66:	f5a0 401c 	sub.w	r0, r0, #39936	; 0x9c00
  403c6a:	3840      	subs	r0, #64	; 0x40
  403c6c:	2404      	movs	r4, #4
  403c6e:	e7a6      	b.n	403bbe <hexToBCD+0x12>
	else if(toConvert>29999){tenThous=3;toConvert-=30000;}
  403c70:	f247 532f 	movw	r3, #29999	; 0x752f
  403c74:	4298      	cmp	r0, r3
  403c76:	dd04      	ble.n	403c82 <hexToBCD+0xd6>
  403c78:	f5a0 40ea 	sub.w	r0, r0, #29952	; 0x7500
  403c7c:	3830      	subs	r0, #48	; 0x30
  403c7e:	2403      	movs	r4, #3
  403c80:	e79d      	b.n	403bbe <hexToBCD+0x12>
	else if(toConvert>19999){tenThous=2;toConvert-=20000;}
  403c82:	f644 631f 	movw	r3, #19999	; 0x4e1f
  403c86:	4298      	cmp	r0, r3
  403c88:	dd04      	ble.n	403c94 <hexToBCD+0xe8>
  403c8a:	f5a0 409c 	sub.w	r0, r0, #19968	; 0x4e00
  403c8e:	3820      	subs	r0, #32
  403c90:	2402      	movs	r4, #2
  403c92:	e794      	b.n	403bbe <hexToBCD+0x12>
	else if(toConvert>9999){tenThous=1;toConvert-=10000;}
  403c94:	f242 730f 	movw	r3, #9999	; 0x270f
  403c98:	4298      	cmp	r0, r3
  403c9a:	dd04      	ble.n	403ca6 <hexToBCD+0xfa>
  403c9c:	f5a0 501c 	sub.w	r0, r0, #9984	; 0x2700
  403ca0:	3810      	subs	r0, #16
  403ca2:	2401      	movs	r4, #1
  403ca4:	e78b      	b.n	403bbe <hexToBCD+0x12>
	char tenThous=0;
  403ca6:	2400      	movs	r4, #0
  403ca8:	e789      	b.n	403bbe <hexToBCD+0x12>
	else if(toConvert>7999){thousands=8;toConvert-=8000;}
  403caa:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
  403cae:	db03      	blt.n	403cb8 <hexToBCD+0x10c>
  403cb0:	f5a0 50fa 	sub.w	r0, r0, #8000	; 0x1f40
  403cb4:	2208      	movs	r2, #8
  403cb6:	e78a      	b.n	403bce <hexToBCD+0x22>
	else if(toConvert>6999){thousands=7;toConvert-=7000;}
  403cb8:	f641 3357 	movw	r3, #6999	; 0x1b57
  403cbc:	4298      	cmp	r0, r3
  403cbe:	dd04      	ble.n	403cca <hexToBCD+0x11e>
  403cc0:	f5a0 50da 	sub.w	r0, r0, #6976	; 0x1b40
  403cc4:	3818      	subs	r0, #24
  403cc6:	2207      	movs	r2, #7
  403cc8:	e781      	b.n	403bce <hexToBCD+0x22>
	else if(toConvert>5999){thousands=6;toConvert-=6000;}
  403cca:	f241 736f 	movw	r3, #5999	; 0x176f
  403cce:	4298      	cmp	r0, r3
  403cd0:	dd04      	ble.n	403cdc <hexToBCD+0x130>
  403cd2:	f5a0 50bb 	sub.w	r0, r0, #5984	; 0x1760
  403cd6:	3810      	subs	r0, #16
  403cd8:	2206      	movs	r2, #6
  403cda:	e778      	b.n	403bce <hexToBCD+0x22>
	else if(toConvert>4999){thousands=5;toConvert-=5000;}
  403cdc:	f241 3387 	movw	r3, #4999	; 0x1387
  403ce0:	4298      	cmp	r0, r3
  403ce2:	dd04      	ble.n	403cee <hexToBCD+0x142>
  403ce4:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
  403ce8:	3808      	subs	r0, #8
  403cea:	2205      	movs	r2, #5
  403cec:	e76f      	b.n	403bce <hexToBCD+0x22>
	else if(toConvert>3999){thousands=4;toConvert-=4000;}
  403cee:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
  403cf2:	db03      	blt.n	403cfc <hexToBCD+0x150>
  403cf4:	f5a0 607a 	sub.w	r0, r0, #4000	; 0xfa0
  403cf8:	2204      	movs	r2, #4
  403cfa:	e768      	b.n	403bce <hexToBCD+0x22>
	else if(toConvert>2999){thousands=3;toConvert-=3000;}
  403cfc:	f640 33b7 	movw	r3, #2999	; 0xbb7
  403d00:	4298      	cmp	r0, r3
  403d02:	dd03      	ble.n	403d0c <hexToBCD+0x160>
  403d04:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
  403d08:	2203      	movs	r2, #3
  403d0a:	e760      	b.n	403bce <hexToBCD+0x22>
	else if(toConvert>1999){thousands=2;toConvert-=2000;}
  403d0c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
  403d10:	db03      	blt.n	403d1a <hexToBCD+0x16e>
  403d12:	f5a0 60fa 	sub.w	r0, r0, #2000	; 0x7d0
  403d16:	2202      	movs	r2, #2
  403d18:	e759      	b.n	403bce <hexToBCD+0x22>
	else if(toConvert>999){thousands=1;toConvert-=1000;}
  403d1a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  403d1e:	db03      	blt.n	403d28 <hexToBCD+0x17c>
  403d20:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
  403d24:	2201      	movs	r2, #1
  403d26:	e752      	b.n	403bce <hexToBCD+0x22>
	char thousands=0;
  403d28:	2200      	movs	r2, #0
  403d2a:	e750      	b.n	403bce <hexToBCD+0x22>
	else if(toConvert>799){hundreds=8;toConvert-=800;}
  403d2c:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
  403d30:	db03      	blt.n	403d3a <hexToBCD+0x18e>
  403d32:	f5a0 7048 	sub.w	r0, r0, #800	; 0x320
  403d36:	2308      	movs	r3, #8
  403d38:	e750      	b.n	403bdc <hexToBCD+0x30>
	else if(toConvert>699){hundreds=7;toConvert-=700;}
  403d3a:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
  403d3e:	db03      	blt.n	403d48 <hexToBCD+0x19c>
  403d40:	f5a0 702f 	sub.w	r0, r0, #700	; 0x2bc
  403d44:	2307      	movs	r3, #7
  403d46:	e749      	b.n	403bdc <hexToBCD+0x30>
	else if(toConvert>599){hundreds=6;toConvert-=600;}
  403d48:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
  403d4c:	db03      	blt.n	403d56 <hexToBCD+0x1aa>
  403d4e:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
  403d52:	2306      	movs	r3, #6
  403d54:	e742      	b.n	403bdc <hexToBCD+0x30>
	else if(toConvert>499){hundreds=5;toConvert-=500;}
  403d56:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  403d5a:	db03      	blt.n	403d64 <hexToBCD+0x1b8>
  403d5c:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
  403d60:	2305      	movs	r3, #5
  403d62:	e73b      	b.n	403bdc <hexToBCD+0x30>
	else if(toConvert>399){hundreds=4;toConvert-=400;}
  403d64:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
  403d68:	db03      	blt.n	403d72 <hexToBCD+0x1c6>
  403d6a:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
  403d6e:	2304      	movs	r3, #4
  403d70:	e734      	b.n	403bdc <hexToBCD+0x30>
	else if(toConvert>299){hundreds=3;toConvert-=300;}
  403d72:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
  403d76:	db03      	blt.n	403d80 <hexToBCD+0x1d4>
  403d78:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
  403d7c:	2303      	movs	r3, #3
  403d7e:	e72d      	b.n	403bdc <hexToBCD+0x30>
	else if(toConvert>199){hundreds=2;toConvert-=200;}
  403d80:	28c7      	cmp	r0, #199	; 0xc7
  403d82:	dd02      	ble.n	403d8a <hexToBCD+0x1de>
  403d84:	38c8      	subs	r0, #200	; 0xc8
  403d86:	2302      	movs	r3, #2
  403d88:	e728      	b.n	403bdc <hexToBCD+0x30>
	else if(toConvert>99){hundreds=1;toConvert-=100;}
  403d8a:	2863      	cmp	r0, #99	; 0x63
  403d8c:	dd02      	ble.n	403d94 <hexToBCD+0x1e8>
  403d8e:	3864      	subs	r0, #100	; 0x64
  403d90:	2301      	movs	r3, #1
  403d92:	e723      	b.n	403bdc <hexToBCD+0x30>
	char hundreds=0;
  403d94:	2300      	movs	r3, #0
  403d96:	e721      	b.n	403bdc <hexToBCD+0x30>
	if(toConvert>89){tens=9;toConvert-=90;}
  403d98:	385a      	subs	r0, #90	; 0x5a
  403d9a:	2109      	movs	r1, #9

	return (tenThous*65536)+(thousands*4096)+(hundreds*256)+(tens*16)+toConvert;
  403d9c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
  403da0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403da4:	eb01 1303 	add.w	r3, r1, r3, lsl #4
}
  403da8:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403dac:	f85d 4b04 	ldr.w	r4, [sp], #4
  403db0:	4770      	bx	lr
	else if(toConvert>79){tens=8;toConvert-=80;}
  403db2:	3850      	subs	r0, #80	; 0x50
  403db4:	2108      	movs	r1, #8
  403db6:	e7f1      	b.n	403d9c <hexToBCD+0x1f0>
	else if(toConvert>69){tens=7;toConvert-=70;}
  403db8:	3846      	subs	r0, #70	; 0x46
  403dba:	2107      	movs	r1, #7
  403dbc:	e7ee      	b.n	403d9c <hexToBCD+0x1f0>
	else if(toConvert>59){tens=6;toConvert-=60;}
  403dbe:	383c      	subs	r0, #60	; 0x3c
  403dc0:	2106      	movs	r1, #6
  403dc2:	e7eb      	b.n	403d9c <hexToBCD+0x1f0>
	else if(toConvert>49){tens=5;toConvert-=50;}
  403dc4:	3832      	subs	r0, #50	; 0x32
  403dc6:	2105      	movs	r1, #5
  403dc8:	e7e8      	b.n	403d9c <hexToBCD+0x1f0>
	else if(toConvert>39){tens=4;toConvert-=40;}
  403dca:	3828      	subs	r0, #40	; 0x28
  403dcc:	2104      	movs	r1, #4
  403dce:	e7e5      	b.n	403d9c <hexToBCD+0x1f0>
	else if(toConvert>29){tens=3;toConvert-=30;}
  403dd0:	381e      	subs	r0, #30
  403dd2:	2103      	movs	r1, #3
  403dd4:	e7e2      	b.n	403d9c <hexToBCD+0x1f0>
	else if(toConvert>19){tens=2;toConvert-=20;}
  403dd6:	3814      	subs	r0, #20
  403dd8:	2102      	movs	r1, #2
  403dda:	e7df      	b.n	403d9c <hexToBCD+0x1f0>
	char tens=0;
  403ddc:	2100      	movs	r1, #0
  403dde:	e7dd      	b.n	403d9c <hexToBCD+0x1f0>
  403de0:	00015f8f 	.word	0x00015f8f
  403de4:	0001387f 	.word	0x0001387f
  403de8:	0001116f 	.word	0x0001116f

00403dec <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403dec:	b5f0      	push	{r4, r5, r6, r7, lr}
  403dee:	b083      	sub	sp, #12
  403df0:	4605      	mov	r5, r0
  403df2:	460c      	mov	r4, r1
	uint32_t val = 0;
  403df4:	2300      	movs	r3, #0
  403df6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403df8:	4b2a      	ldr	r3, [pc, #168]	; (403ea4 <usart_serial_getchar+0xb8>)
  403dfa:	4298      	cmp	r0, r3
  403dfc:	d013      	beq.n	403e26 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403dfe:	4b2a      	ldr	r3, [pc, #168]	; (403ea8 <usart_serial_getchar+0xbc>)
  403e00:	4298      	cmp	r0, r3
  403e02:	d018      	beq.n	403e36 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403e04:	4b29      	ldr	r3, [pc, #164]	; (403eac <usart_serial_getchar+0xc0>)
  403e06:	4298      	cmp	r0, r3
  403e08:	d01d      	beq.n	403e46 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403e0a:	4b29      	ldr	r3, [pc, #164]	; (403eb0 <usart_serial_getchar+0xc4>)
  403e0c:	429d      	cmp	r5, r3
  403e0e:	d022      	beq.n	403e56 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403e10:	4b28      	ldr	r3, [pc, #160]	; (403eb4 <usart_serial_getchar+0xc8>)
  403e12:	429d      	cmp	r5, r3
  403e14:	d027      	beq.n	403e66 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403e16:	4b28      	ldr	r3, [pc, #160]	; (403eb8 <usart_serial_getchar+0xcc>)
  403e18:	429d      	cmp	r5, r3
  403e1a:	d02e      	beq.n	403e7a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403e1c:	4b27      	ldr	r3, [pc, #156]	; (403ebc <usart_serial_getchar+0xd0>)
  403e1e:	429d      	cmp	r5, r3
  403e20:	d035      	beq.n	403e8e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403e22:	b003      	add	sp, #12
  403e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403e26:	461f      	mov	r7, r3
  403e28:	4e25      	ldr	r6, [pc, #148]	; (403ec0 <usart_serial_getchar+0xd4>)
  403e2a:	4621      	mov	r1, r4
  403e2c:	4638      	mov	r0, r7
  403e2e:	47b0      	blx	r6
  403e30:	2800      	cmp	r0, #0
  403e32:	d1fa      	bne.n	403e2a <usart_serial_getchar+0x3e>
  403e34:	e7e9      	b.n	403e0a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403e36:	461f      	mov	r7, r3
  403e38:	4e21      	ldr	r6, [pc, #132]	; (403ec0 <usart_serial_getchar+0xd4>)
  403e3a:	4621      	mov	r1, r4
  403e3c:	4638      	mov	r0, r7
  403e3e:	47b0      	blx	r6
  403e40:	2800      	cmp	r0, #0
  403e42:	d1fa      	bne.n	403e3a <usart_serial_getchar+0x4e>
  403e44:	e7e4      	b.n	403e10 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403e46:	461f      	mov	r7, r3
  403e48:	4e1d      	ldr	r6, [pc, #116]	; (403ec0 <usart_serial_getchar+0xd4>)
  403e4a:	4621      	mov	r1, r4
  403e4c:	4638      	mov	r0, r7
  403e4e:	47b0      	blx	r6
  403e50:	2800      	cmp	r0, #0
  403e52:	d1fa      	bne.n	403e4a <usart_serial_getchar+0x5e>
  403e54:	e7df      	b.n	403e16 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403e56:	461f      	mov	r7, r3
  403e58:	4e19      	ldr	r6, [pc, #100]	; (403ec0 <usart_serial_getchar+0xd4>)
  403e5a:	4621      	mov	r1, r4
  403e5c:	4638      	mov	r0, r7
  403e5e:	47b0      	blx	r6
  403e60:	2800      	cmp	r0, #0
  403e62:	d1fa      	bne.n	403e5a <usart_serial_getchar+0x6e>
  403e64:	e7da      	b.n	403e1c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403e66:	461e      	mov	r6, r3
  403e68:	4d16      	ldr	r5, [pc, #88]	; (403ec4 <usart_serial_getchar+0xd8>)
  403e6a:	a901      	add	r1, sp, #4
  403e6c:	4630      	mov	r0, r6
  403e6e:	47a8      	blx	r5
  403e70:	2800      	cmp	r0, #0
  403e72:	d1fa      	bne.n	403e6a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403e74:	9b01      	ldr	r3, [sp, #4]
  403e76:	7023      	strb	r3, [r4, #0]
  403e78:	e7d3      	b.n	403e22 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403e7a:	461e      	mov	r6, r3
  403e7c:	4d11      	ldr	r5, [pc, #68]	; (403ec4 <usart_serial_getchar+0xd8>)
  403e7e:	a901      	add	r1, sp, #4
  403e80:	4630      	mov	r0, r6
  403e82:	47a8      	blx	r5
  403e84:	2800      	cmp	r0, #0
  403e86:	d1fa      	bne.n	403e7e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403e88:	9b01      	ldr	r3, [sp, #4]
  403e8a:	7023      	strb	r3, [r4, #0]
  403e8c:	e7c9      	b.n	403e22 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403e8e:	461e      	mov	r6, r3
  403e90:	4d0c      	ldr	r5, [pc, #48]	; (403ec4 <usart_serial_getchar+0xd8>)
  403e92:	a901      	add	r1, sp, #4
  403e94:	4630      	mov	r0, r6
  403e96:	47a8      	blx	r5
  403e98:	2800      	cmp	r0, #0
  403e9a:	d1fa      	bne.n	403e92 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403e9c:	9b01      	ldr	r3, [sp, #4]
  403e9e:	7023      	strb	r3, [r4, #0]
}
  403ea0:	e7bf      	b.n	403e22 <usart_serial_getchar+0x36>
  403ea2:	bf00      	nop
  403ea4:	400e0800 	.word	0x400e0800
  403ea8:	400e0a00 	.word	0x400e0a00
  403eac:	400e1a00 	.word	0x400e1a00
  403eb0:	400e1c00 	.word	0x400e1c00
  403eb4:	40024000 	.word	0x40024000
  403eb8:	40028000 	.word	0x40028000
  403ebc:	4002c000 	.word	0x4002c000
  403ec0:	004014ed 	.word	0x004014ed
  403ec4:	0040132b 	.word	0x0040132b

00403ec8 <usart_serial_putchar>:
{
  403ec8:	b570      	push	{r4, r5, r6, lr}
  403eca:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403ecc:	4b2a      	ldr	r3, [pc, #168]	; (403f78 <usart_serial_putchar+0xb0>)
  403ece:	4298      	cmp	r0, r3
  403ed0:	d013      	beq.n	403efa <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403ed2:	4b2a      	ldr	r3, [pc, #168]	; (403f7c <usart_serial_putchar+0xb4>)
  403ed4:	4298      	cmp	r0, r3
  403ed6:	d019      	beq.n	403f0c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403ed8:	4b29      	ldr	r3, [pc, #164]	; (403f80 <usart_serial_putchar+0xb8>)
  403eda:	4298      	cmp	r0, r3
  403edc:	d01f      	beq.n	403f1e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403ede:	4b29      	ldr	r3, [pc, #164]	; (403f84 <usart_serial_putchar+0xbc>)
  403ee0:	4298      	cmp	r0, r3
  403ee2:	d025      	beq.n	403f30 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403ee4:	4b28      	ldr	r3, [pc, #160]	; (403f88 <usart_serial_putchar+0xc0>)
  403ee6:	4298      	cmp	r0, r3
  403ee8:	d02b      	beq.n	403f42 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403eea:	4b28      	ldr	r3, [pc, #160]	; (403f8c <usart_serial_putchar+0xc4>)
  403eec:	4298      	cmp	r0, r3
  403eee:	d031      	beq.n	403f54 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403ef0:	4b27      	ldr	r3, [pc, #156]	; (403f90 <usart_serial_putchar+0xc8>)
  403ef2:	4298      	cmp	r0, r3
  403ef4:	d037      	beq.n	403f66 <usart_serial_putchar+0x9e>
	return 0;
  403ef6:	2000      	movs	r0, #0
}
  403ef8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403efa:	461e      	mov	r6, r3
  403efc:	4d25      	ldr	r5, [pc, #148]	; (403f94 <usart_serial_putchar+0xcc>)
  403efe:	4621      	mov	r1, r4
  403f00:	4630      	mov	r0, r6
  403f02:	47a8      	blx	r5
  403f04:	2800      	cmp	r0, #0
  403f06:	d1fa      	bne.n	403efe <usart_serial_putchar+0x36>
		return 1;
  403f08:	2001      	movs	r0, #1
  403f0a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403f0c:	461e      	mov	r6, r3
  403f0e:	4d21      	ldr	r5, [pc, #132]	; (403f94 <usart_serial_putchar+0xcc>)
  403f10:	4621      	mov	r1, r4
  403f12:	4630      	mov	r0, r6
  403f14:	47a8      	blx	r5
  403f16:	2800      	cmp	r0, #0
  403f18:	d1fa      	bne.n	403f10 <usart_serial_putchar+0x48>
		return 1;
  403f1a:	2001      	movs	r0, #1
  403f1c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403f1e:	461e      	mov	r6, r3
  403f20:	4d1c      	ldr	r5, [pc, #112]	; (403f94 <usart_serial_putchar+0xcc>)
  403f22:	4621      	mov	r1, r4
  403f24:	4630      	mov	r0, r6
  403f26:	47a8      	blx	r5
  403f28:	2800      	cmp	r0, #0
  403f2a:	d1fa      	bne.n	403f22 <usart_serial_putchar+0x5a>
		return 1;
  403f2c:	2001      	movs	r0, #1
  403f2e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403f30:	461e      	mov	r6, r3
  403f32:	4d18      	ldr	r5, [pc, #96]	; (403f94 <usart_serial_putchar+0xcc>)
  403f34:	4621      	mov	r1, r4
  403f36:	4630      	mov	r0, r6
  403f38:	47a8      	blx	r5
  403f3a:	2800      	cmp	r0, #0
  403f3c:	d1fa      	bne.n	403f34 <usart_serial_putchar+0x6c>
		return 1;
  403f3e:	2001      	movs	r0, #1
  403f40:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403f42:	461e      	mov	r6, r3
  403f44:	4d14      	ldr	r5, [pc, #80]	; (403f98 <usart_serial_putchar+0xd0>)
  403f46:	4621      	mov	r1, r4
  403f48:	4630      	mov	r0, r6
  403f4a:	47a8      	blx	r5
  403f4c:	2800      	cmp	r0, #0
  403f4e:	d1fa      	bne.n	403f46 <usart_serial_putchar+0x7e>
		return 1;
  403f50:	2001      	movs	r0, #1
  403f52:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403f54:	461e      	mov	r6, r3
  403f56:	4d10      	ldr	r5, [pc, #64]	; (403f98 <usart_serial_putchar+0xd0>)
  403f58:	4621      	mov	r1, r4
  403f5a:	4630      	mov	r0, r6
  403f5c:	47a8      	blx	r5
  403f5e:	2800      	cmp	r0, #0
  403f60:	d1fa      	bne.n	403f58 <usart_serial_putchar+0x90>
		return 1;
  403f62:	2001      	movs	r0, #1
  403f64:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403f66:	461e      	mov	r6, r3
  403f68:	4d0b      	ldr	r5, [pc, #44]	; (403f98 <usart_serial_putchar+0xd0>)
  403f6a:	4621      	mov	r1, r4
  403f6c:	4630      	mov	r0, r6
  403f6e:	47a8      	blx	r5
  403f70:	2800      	cmp	r0, #0
  403f72:	d1fa      	bne.n	403f6a <usart_serial_putchar+0xa2>
		return 1;
  403f74:	2001      	movs	r0, #1
  403f76:	bd70      	pop	{r4, r5, r6, pc}
  403f78:	400e0800 	.word	0x400e0800
  403f7c:	400e0a00 	.word	0x400e0a00
  403f80:	400e1a00 	.word	0x400e1a00
  403f84:	400e1c00 	.word	0x400e1c00
  403f88:	40024000 	.word	0x40024000
  403f8c:	40028000 	.word	0x40028000
  403f90:	4002c000 	.word	0x4002c000
  403f94:	004014db 	.word	0x004014db
  403f98:	00401315 	.word	0x00401315

00403f9c <main_vendor_int_out_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  403f9c:	b100      	cbz	r0, 403fa0 <main_vendor_int_out_received+0x4>
  403f9e:	4770      	bx	lr
{
  403fa0:	b510      	push	{r4, lr}
  403fa2:	b084      	sub	sp, #16
	udi_vendor_interrupt_in_run(
  403fa4:	4c0a      	ldr	r4, [pc, #40]	; (403fd0 <main_vendor_int_out_received+0x34>)
  403fa6:	4a0b      	ldr	r2, [pc, #44]	; (403fd4 <main_vendor_int_out_received+0x38>)
  403fa8:	4620      	mov	r0, r4
  403faa:	4b0b      	ldr	r3, [pc, #44]	; (403fd8 <main_vendor_int_out_received+0x3c>)
  403fac:	4798      	blx	r3
	printf("OUT: %d %d %d %d %d %d %d\r\n",main_buf_loopback[0],main_buf_loopback[1],main_buf_loopback[2],main_buf_loopback[3],main_buf_loopback[4],main_buf_loopback[5],main_buf_loopback[6]);
  403fae:	78a3      	ldrb	r3, [r4, #2]
  403fb0:	7862      	ldrb	r2, [r4, #1]
  403fb2:	7821      	ldrb	r1, [r4, #0]
  403fb4:	79a0      	ldrb	r0, [r4, #6]
  403fb6:	9003      	str	r0, [sp, #12]
  403fb8:	7960      	ldrb	r0, [r4, #5]
  403fba:	9002      	str	r0, [sp, #8]
  403fbc:	7920      	ldrb	r0, [r4, #4]
  403fbe:	9001      	str	r0, [sp, #4]
  403fc0:	78e0      	ldrb	r0, [r4, #3]
  403fc2:	9000      	str	r0, [sp, #0]
  403fc4:	4805      	ldr	r0, [pc, #20]	; (403fdc <main_vendor_int_out_received+0x40>)
  403fc6:	4c06      	ldr	r4, [pc, #24]	; (403fe0 <main_vendor_int_out_received+0x44>)
  403fc8:	47a0      	blx	r4
}
  403fca:	b004      	add	sp, #16
  403fcc:	bd10      	pop	{r4, pc}
  403fce:	bf00      	nop
  403fd0:	20400bf4 	.word	0x20400bf4
  403fd4:	00406615 	.word	0x00406615
  403fd8:	00401645 	.word	0x00401645
  403fdc:	0040ae00 	.word	0x0040ae00
  403fe0:	004079b1 	.word	0x004079b1

00403fe4 <main_vendor_bulk_in_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  403fe4:	b100      	cbz	r0, 403fe8 <main_vendor_bulk_in_received+0x4>
  403fe6:	4770      	bx	lr
{
  403fe8:	b510      	push	{r4, lr}
  403fea:	b086      	sub	sp, #24
	udi_vendor_bulk_out_run(
  403fec:	4c0b      	ldr	r4, [pc, #44]	; (40401c <main_vendor_bulk_in_received+0x38>)
  403fee:	4a0c      	ldr	r2, [pc, #48]	; (404020 <main_vendor_bulk_in_received+0x3c>)
  403ff0:	2114      	movs	r1, #20
  403ff2:	4620      	mov	r0, r4
  403ff4:	4b0b      	ldr	r3, [pc, #44]	; (404024 <main_vendor_bulk_in_received+0x40>)
  403ff6:	4798      	blx	r3
	 printf("BULK OUT RCVD: %x %x %x %x %x %x %x %x\r\n",crapBuf[0],crapBuf[1],crapBuf[2],crapBuf[3],crapBuf[4],crapBuf[5],crapBuf[6],crapBuf[7]);
  403ff8:	78a3      	ldrb	r3, [r4, #2]
  403ffa:	7862      	ldrb	r2, [r4, #1]
  403ffc:	7821      	ldrb	r1, [r4, #0]
  403ffe:	79e0      	ldrb	r0, [r4, #7]
  404000:	9004      	str	r0, [sp, #16]
  404002:	79a0      	ldrb	r0, [r4, #6]
  404004:	9003      	str	r0, [sp, #12]
  404006:	7960      	ldrb	r0, [r4, #5]
  404008:	9002      	str	r0, [sp, #8]
  40400a:	7920      	ldrb	r0, [r4, #4]
  40400c:	9001      	str	r0, [sp, #4]
  40400e:	78e0      	ldrb	r0, [r4, #3]
  404010:	9000      	str	r0, [sp, #0]
  404012:	4805      	ldr	r0, [pc, #20]	; (404028 <main_vendor_bulk_in_received+0x44>)
  404014:	4c05      	ldr	r4, [pc, #20]	; (40402c <main_vendor_bulk_in_received+0x48>)
  404016:	47a0      	blx	r4
}
  404018:	b006      	add	sp, #24
  40401a:	bd10      	pop	{r4, pc}
  40401c:	204020ec 	.word	0x204020ec
  404020:	00404031 	.word	0x00404031
  404024:	00401699 	.word	0x00401699
  404028:	0040ad7c 	.word	0x0040ad7c
  40402c:	004079b1 	.word	0x004079b1

00404030 <main_vendor_bulk_out_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  404030:	b100      	cbz	r0, 404034 <main_vendor_bulk_out_received+0x4>
  404032:	4770      	bx	lr
{
  404034:	b510      	push	{r4, lr}
  404036:	b086      	sub	sp, #24
	udi_vendor_bulk_in_run(
  404038:	4c0c      	ldr	r4, [pc, #48]	; (40406c <main_vendor_bulk_out_received+0x3c>)
  40403a:	4a0d      	ldr	r2, [pc, #52]	; (404070 <main_vendor_bulk_out_received+0x40>)
  40403c:	490d      	ldr	r1, [pc, #52]	; (404074 <main_vendor_bulk_out_received+0x44>)
  40403e:	6820      	ldr	r0, [r4, #0]
  404040:	4b0d      	ldr	r3, [pc, #52]	; (404078 <main_vendor_bulk_out_received+0x48>)
  404042:	4798      	blx	r3
 	 printf("BULK IN DATA SENT: %x %x %x %x %x %x %x %x\r\n",picBuff[0],picBuff[1],picBuff[2],picBuff[3],picBuff[4],picBuff[5],picBuff[6],picBuff[7]);
  404044:	6820      	ldr	r0, [r4, #0]
  404046:	7883      	ldrb	r3, [r0, #2]
  404048:	7842      	ldrb	r2, [r0, #1]
  40404a:	7801      	ldrb	r1, [r0, #0]
  40404c:	79c4      	ldrb	r4, [r0, #7]
  40404e:	9404      	str	r4, [sp, #16]
  404050:	7984      	ldrb	r4, [r0, #6]
  404052:	9403      	str	r4, [sp, #12]
  404054:	7944      	ldrb	r4, [r0, #5]
  404056:	9402      	str	r4, [sp, #8]
  404058:	7904      	ldrb	r4, [r0, #4]
  40405a:	9401      	str	r4, [sp, #4]
  40405c:	78c0      	ldrb	r0, [r0, #3]
  40405e:	9000      	str	r0, [sp, #0]
  404060:	4806      	ldr	r0, [pc, #24]	; (40407c <main_vendor_bulk_out_received+0x4c>)
  404062:	4c07      	ldr	r4, [pc, #28]	; (404080 <main_vendor_bulk_out_received+0x50>)
  404064:	47a0      	blx	r4
}
  404066:	b006      	add	sp, #24
  404068:	bd10      	pop	{r4, pc}
  40406a:	bf00      	nop
  40406c:	204000ec 	.word	0x204000ec
  404070:	00403fe5 	.word	0x00403fe5
  404074:	003a9800 	.word	0x003a9800
  404078:	0040167d 	.word	0x0040167d
  40407c:	0040ada8 	.word	0x0040ada8
  404080:	004079b1 	.word	0x004079b1

00404084 <main_vendor_iso_in_received>:
{
  404084:	b508      	push	{r3, lr}
	ui_loop_back_state(false);
  404086:	2000      	movs	r0, #0
  404088:	4b01      	ldr	r3, [pc, #4]	; (404090 <main_vendor_iso_in_received+0xc>)
  40408a:	4798      	blx	r3
  40408c:	bd08      	pop	{r3, pc}
  40408e:	bf00      	nop
  404090:	00401505 	.word	0x00401505

00404094 <main_vendor_iso_out_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  404094:	bb20      	cbnz	r0, 4040e0 <main_vendor_iso_out_received+0x4c>
{
  404096:	b510      	push	{r4, lr}
  404098:	460c      	mov	r4, r1
	if (nb_transfered) {
  40409a:	b9a1      	cbnz	r1, 4040c6 <main_vendor_iso_out_received+0x32>
	main_buf_iso_sel = main_buf_iso_sel? 0:1;
  40409c:	4a11      	ldr	r2, [pc, #68]	; (4040e4 <main_vendor_iso_out_received+0x50>)
  40409e:	7813      	ldrb	r3, [r2, #0]
  4040a0:	fab3 f383 	clz	r3, r3
  4040a4:	095b      	lsrs	r3, r3, #5
  4040a6:	7013      	strb	r3, [r2, #0]
	buf_ptr = &main_buf_loopback[ main_buf_iso_sel
  4040a8:	4c0f      	ldr	r4, [pc, #60]	; (4040e8 <main_vendor_iso_out_received+0x54>)
  4040aa:	eb04 2443 	add.w	r4, r4, r3, lsl #9
			udd_is_high_speed()?
  4040ae:	4b0f      	ldr	r3, [pc, #60]	; (4040ec <main_vendor_iso_out_received+0x58>)
  4040b0:	4798      	blx	r3
	udi_vendor_iso_out_run(
  4040b2:	2800      	cmp	r0, #0
  4040b4:	4a0e      	ldr	r2, [pc, #56]	; (4040f0 <main_vendor_iso_out_received+0x5c>)
  4040b6:	bf14      	ite	ne
  4040b8:	2140      	movne	r1, #64	; 0x40
  4040ba:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4040be:	4620      	mov	r0, r4
  4040c0:	4b0c      	ldr	r3, [pc, #48]	; (4040f4 <main_vendor_iso_out_received+0x60>)
  4040c2:	4798      	blx	r3
  4040c4:	bd10      	pop	{r4, pc}
		ui_loop_back_state(true);
  4040c6:	2001      	movs	r0, #1
  4040c8:	4b0b      	ldr	r3, [pc, #44]	; (4040f8 <main_vendor_iso_out_received+0x64>)
  4040ca:	4798      	blx	r3
				*(sizeof(main_buf_loopback)/2) ];
  4040cc:	4b05      	ldr	r3, [pc, #20]	; (4040e4 <main_vendor_iso_out_received+0x50>)
  4040ce:	7818      	ldrb	r0, [r3, #0]
		udi_vendor_iso_in_run(
  4040d0:	4a0a      	ldr	r2, [pc, #40]	; (4040fc <main_vendor_iso_out_received+0x68>)
  4040d2:	4621      	mov	r1, r4
  4040d4:	4b04      	ldr	r3, [pc, #16]	; (4040e8 <main_vendor_iso_out_received+0x54>)
  4040d6:	eb03 2040 	add.w	r0, r3, r0, lsl #9
  4040da:	4b09      	ldr	r3, [pc, #36]	; (404100 <main_vendor_iso_out_received+0x6c>)
  4040dc:	4798      	blx	r3
  4040de:	e7dd      	b.n	40409c <main_vendor_iso_out_received+0x8>
  4040e0:	4770      	bx	lr
  4040e2:	bf00      	nop
  4040e4:	20400bf1 	.word	0x20400bf1
  4040e8:	20400bf4 	.word	0x20400bf4
  4040ec:	00403179 	.word	0x00403179
  4040f0:	00404095 	.word	0x00404095
  4040f4:	004016d1 	.word	0x004016d1
  4040f8:	00401505 	.word	0x00401505
  4040fc:	00404085 	.word	0x00404085
  404100:	004016b5 	.word	0x004016b5

00404104 <configure_console>:
{
  404104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404108:	b086      	sub	sp, #24
		base->PIO_PUDR = mask;
  40410a:	4b25      	ldr	r3, [pc, #148]	; (4041a0 <configure_console+0x9c>)
  40410c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  404110:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404112:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404116:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404118:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40411a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40411e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404120:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  404124:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404126:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404128:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  40412c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40412e:	605a      	str	r2, [r3, #4]
  404130:	202d      	movs	r0, #45	; 0x2d
  404132:	4d1c      	ldr	r5, [pc, #112]	; (4041a4 <configure_console+0xa0>)
  404134:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404136:	4c1c      	ldr	r4, [pc, #112]	; (4041a8 <configure_console+0xa4>)
  404138:	4b1c      	ldr	r3, [pc, #112]	; (4041ac <configure_console+0xa8>)
  40413a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40413c:	4a1c      	ldr	r2, [pc, #112]	; (4041b0 <configure_console+0xac>)
  40413e:	4b1d      	ldr	r3, [pc, #116]	; (4041b4 <configure_console+0xb0>)
  404140:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404142:	4a1d      	ldr	r2, [pc, #116]	; (4041b8 <configure_console+0xb4>)
  404144:	4b1d      	ldr	r3, [pc, #116]	; (4041bc <configure_console+0xb8>)
  404146:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  404148:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4041c8 <configure_console+0xc4>
  40414c:	f8cd 8000 	str.w	r8, [sp]
	uart_settings.ul_baudrate = opt->baudrate;
  404150:	f44f 5716 	mov.w	r7, #9600	; 0x2580
  404154:	9701      	str	r7, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  404156:	f44f 6600 	mov.w	r6, #2048	; 0x800
  40415a:	9602      	str	r6, [sp, #8]
  40415c:	202d      	movs	r0, #45	; 0x2d
  40415e:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  404160:	4669      	mov	r1, sp
  404162:	4620      	mov	r0, r4
  404164:	4d16      	ldr	r5, [pc, #88]	; (4041c0 <configure_console+0xbc>)
  404166:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404168:	f8df a060 	ldr.w	sl, [pc, #96]	; 4041cc <configure_console+0xc8>
  40416c:	f8da 3000 	ldr.w	r3, [sl]
  404170:	2100      	movs	r1, #0
  404172:	6898      	ldr	r0, [r3, #8]
  404174:	f8df 9058 	ldr.w	r9, [pc, #88]	; 4041d0 <configure_console+0xcc>
  404178:	47c8      	blx	r9
	setbuf(stdin, NULL);
  40417a:	f8da 3000 	ldr.w	r3, [sl]
  40417e:	2100      	movs	r1, #0
  404180:	6858      	ldr	r0, [r3, #4]
  404182:	47c8      	blx	r9
   uart_enable_tx(CONF_UART);
  404184:	4620      	mov	r0, r4
  404186:	4b0f      	ldr	r3, [pc, #60]	; (4041c4 <configure_console+0xc0>)
  404188:	4798      	blx	r3
   uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40418a:	f8cd 800c 	str.w	r8, [sp, #12]
   uart_settings.ul_baudrate = CONF_UART_BAUDRATE;
  40418e:	9704      	str	r7, [sp, #16]
   uart_settings.ul_mode = CONF_UART_PARITY;
  404190:	9605      	str	r6, [sp, #20]
   uart_init(CONF_UART, &uart_settings);
  404192:	a903      	add	r1, sp, #12
  404194:	4620      	mov	r0, r4
  404196:	47a8      	blx	r5
}
  404198:	b006      	add	sp, #24
  40419a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40419e:	bf00      	nop
  4041a0:	400e1400 	.word	0x400e1400
  4041a4:	004021a9 	.word	0x004021a9
  4041a8:	400e1c00 	.word	0x400e1c00
  4041ac:	20401030 	.word	0x20401030
  4041b0:	00403ec9 	.word	0x00403ec9
  4041b4:	2040102c 	.word	0x2040102c
  4041b8:	00403ded 	.word	0x00403ded
  4041bc:	20401028 	.word	0x20401028
  4041c0:	004014a5 	.word	0x004014a5
  4041c4:	004014d5 	.word	0x004014d5
  4041c8:	08f0d180 	.word	0x08f0d180
  4041cc:	204000f0 	.word	0x204000f0
  4041d0:	00407ba9 	.word	0x00407ba9

004041d4 <ISI_Handler>:
	status = ISI->ISI_SR;
  4041d4:	4b0b      	ldr	r3, [pc, #44]	; (404204 <ISI_Handler+0x30>)
  4041d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	imr = ISI->ISI_IMR;
  4041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	if ((status & ISI_SR_CXFR_DONE) && (imr & ISI_IMR_CXFR_DONE)) {
  4041da:	f412 3f00 	tst.w	r2, #131072	; 0x20000
  4041de:	d00f      	beq.n	404200 <ISI_Handler+0x2c>
  4041e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4041e4:	d00c      	beq.n	404200 <ISI_Handler+0x2c>
		ISI->ISI_DMA_CHDR |= ISI_DMA_CHDR_C_CH_DIS;
  4041e6:	4b07      	ldr	r3, [pc, #28]	; (404204 <ISI_Handler+0x30>)
  4041e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4041ea:	f042 0202 	orr.w	r2, r2, #2
  4041ee:	63da      	str	r2, [r3, #60]	; 0x3c
		ISI->ISI_IDR = ISI_IDR_CXFR_DONE;
  4041f0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4041f4:	6319      	str	r1, [r3, #48]	; 0x30
		ISI->ISI_DMA_CHER |= ISI_DMA_CHER_C_CH_EN;
  4041f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4041f8:	f042 0202 	orr.w	r2, r2, #2
  4041fc:	639a      	str	r2, [r3, #56]	; 0x38
		ISI->ISI_IER = ISI_IER_CXFR_DONE;
  4041fe:	62d9      	str	r1, [r3, #44]	; 0x2c
  404200:	4770      	bx	lr
  404202:	bf00      	nop
  404204:	4004c000 	.word	0x4004c000

00404208 <main_suspend_action>:
{
  404208:	b508      	push	{r3, lr}
	ui_powerdown();
  40420a:	4b03      	ldr	r3, [pc, #12]	; (404218 <main_suspend_action+0x10>)
  40420c:	4798      	blx	r3
	g_usbFlagA=1;
  40420e:	2201      	movs	r2, #1
  404210:	4b02      	ldr	r3, [pc, #8]	; (40421c <main_suspend_action+0x14>)
  404212:	701a      	strb	r2, [r3, #0]
  404214:	bd08      	pop	{r3, pc}
  404216:	bf00      	nop
  404218:	00401501 	.word	0x00401501
  40421c:	20400bec 	.word	0x20400bec

00404220 <main_resume_action>:
{
  404220:	b508      	push	{r3, lr}
	ui_wakeup();
  404222:	4b03      	ldr	r3, [pc, #12]	; (404230 <main_resume_action+0x10>)
  404224:	4798      	blx	r3
	g_usbFlagB=2;
  404226:	2202      	movs	r2, #2
  404228:	4b02      	ldr	r3, [pc, #8]	; (404234 <main_resume_action+0x14>)
  40422a:	701a      	strb	r2, [r3, #0]
  40422c:	bd08      	pop	{r3, pc}
  40422e:	bf00      	nop
  404230:	00401503 	.word	0x00401503
  404234:	20400bed 	.word	0x20400bed

00404238 <main_sof_action>:
{
  404238:	b508      	push	{r3, lr}
	if (!main_b_vendor_enable)
  40423a:	4b04      	ldr	r3, [pc, #16]	; (40424c <main_sof_action+0x14>)
  40423c:	781b      	ldrb	r3, [r3, #0]
  40423e:	b903      	cbnz	r3, 404242 <main_sof_action+0xa>
  404240:	bd08      	pop	{r3, pc}
	ui_process(udd_get_frame_number());
  404242:	4b03      	ldr	r3, [pc, #12]	; (404250 <main_sof_action+0x18>)
  404244:	4798      	blx	r3
  404246:	4b03      	ldr	r3, [pc, #12]	; (404254 <main_sof_action+0x1c>)
  404248:	4798      	blx	r3
  40424a:	e7f9      	b.n	404240 <main_sof_action+0x8>
  40424c:	20400bf0 	.word	0x20400bf0
  404250:	004031b5 	.word	0x004031b5
  404254:	00401507 	.word	0x00401507

00404258 <main_vendor_disable>:
	main_b_vendor_enable = false;
  404258:	2200      	movs	r2, #0
  40425a:	4b01      	ldr	r3, [pc, #4]	; (404260 <main_vendor_disable+0x8>)
  40425c:	701a      	strb	r2, [r3, #0]
  40425e:	4770      	bx	lr
  404260:	20400bf0 	.word	0x20400bf0

00404264 <main_setup_out_received>:
	udd_g_ctrlreq.payload = main_buf_loopback;
  404264:	4b05      	ldr	r3, [pc, #20]	; (40427c <main_setup_out_received+0x18>)
  404266:	4a06      	ldr	r2, [pc, #24]	; (404280 <main_setup_out_received+0x1c>)
  404268:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = min(
  40426a:	88da      	ldrh	r2, [r3, #6]
  40426c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
  404270:	bf28      	it	cs
  404272:	f44f 6280 	movcs.w	r2, #1024	; 0x400
  404276:	819a      	strh	r2, [r3, #12]
}
  404278:	2001      	movs	r0, #1
  40427a:	4770      	bx	lr
  40427c:	2040103c 	.word	0x2040103c
  404280:	20400bf4 	.word	0x20400bf4

00404284 <main_setup_in_received>:
	udd_g_ctrlreq.payload = main_buf_loopback;
  404284:	4b05      	ldr	r3, [pc, #20]	; (40429c <main_setup_in_received+0x18>)
  404286:	4a06      	ldr	r2, [pc, #24]	; (4042a0 <main_setup_in_received+0x1c>)
  404288:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size =
  40428a:	88da      	ldrh	r2, [r3, #6]
  40428c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
  404290:	bf28      	it	cs
  404292:	f44f 6280 	movcs.w	r2, #1024	; 0x400
  404296:	819a      	strh	r2, [r3, #12]
}
  404298:	2001      	movs	r0, #1
  40429a:	4770      	bx	lr
  40429c:	2040103c 	.word	0x2040103c
  4042a0:	20400bf4 	.word	0x20400bf4

004042a4 <receiveUSBcamConfig>:
void receiveUSBcamConfig(void){
  4042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4042a6:	4d06      	ldr	r5, [pc, #24]	; (4042c0 <receiveUSBcamConfig+0x1c>)
  4042a8:	1e6c      	subs	r4, r5, #1
  4042aa:	3577      	adds	r5, #119	; 0x77
		printf("%x",main_buf_loopback[iters]);
  4042ac:	4f05      	ldr	r7, [pc, #20]	; (4042c4 <receiveUSBcamConfig+0x20>)
  4042ae:	4e06      	ldr	r6, [pc, #24]	; (4042c8 <receiveUSBcamConfig+0x24>)
  4042b0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  4042b4:	4638      	mov	r0, r7
  4042b6:	47b0      	blx	r6
	for(iters=0;iters<120;iters++){
  4042b8:	42ac      	cmp	r4, r5
  4042ba:	d1f9      	bne.n	4042b0 <receiveUSBcamConfig+0xc>
}
  4042bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042be:	bf00      	nop
  4042c0:	20400bf4 	.word	0x20400bf4
  4042c4:	0040af68 	.word	0x0040af68
  4042c8:	004079b1 	.word	0x004079b1

004042cc <sendCmdToTiny>:
 void sendCmdToTiny(char cmdToSend){
  4042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4042ce:	4604      	mov	r4, r0
	 if((cmdToSend&0x80)==0)ioport_set_pin_level(BigTiny_DAT,0);
  4042d0:	f010 0f80 	tst.w	r0, #128	; 0x80
  4042d4:	f040 8086 	bne.w	4043e4 <sendCmdToTiny+0x118>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4042d8:	2201      	movs	r2, #1
  4042da:	4b52      	ldr	r3, [pc, #328]	; (404424 <sendCmdToTiny+0x158>)
  4042dc:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  4042de:	f240 302a 	movw	r0, #810	; 0x32a
  4042e2:	4f51      	ldr	r7, [pc, #324]	; (404428 <sendCmdToTiny+0x15c>)
  4042e4:	47b8      	blx	r7
  4042e6:	4d51      	ldr	r5, [pc, #324]	; (40442c <sendCmdToTiny+0x160>)
  4042e8:	2608      	movs	r6, #8
  4042ea:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  4042ec:	f240 302a 	movw	r0, #810	; 0x32a
  4042f0:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4042f2:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x40)==0)ioport_set_pin_level(BigTiny_DAT,0);
  4042f4:	f014 0f40 	tst.w	r4, #64	; 0x40
  4042f8:	d178      	bne.n	4043ec <sendCmdToTiny+0x120>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4042fa:	2201      	movs	r2, #1
  4042fc:	4b49      	ldr	r3, [pc, #292]	; (404424 <sendCmdToTiny+0x158>)
  4042fe:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  404300:	f240 302a 	movw	r0, #810	; 0x32a
  404304:	4f48      	ldr	r7, [pc, #288]	; (404428 <sendCmdToTiny+0x15c>)
  404306:	47b8      	blx	r7
  404308:	4d48      	ldr	r5, [pc, #288]	; (40442c <sendCmdToTiny+0x160>)
  40430a:	2608      	movs	r6, #8
  40430c:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  40430e:	f240 302a 	movw	r0, #810	; 0x32a
  404312:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404314:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x20)==0)ioport_set_pin_level(BigTiny_DAT,0);
  404316:	f014 0f20 	tst.w	r4, #32
  40431a:	d16b      	bne.n	4043f4 <sendCmdToTiny+0x128>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40431c:	2201      	movs	r2, #1
  40431e:	4b41      	ldr	r3, [pc, #260]	; (404424 <sendCmdToTiny+0x158>)
  404320:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  404322:	f240 302a 	movw	r0, #810	; 0x32a
  404326:	4f40      	ldr	r7, [pc, #256]	; (404428 <sendCmdToTiny+0x15c>)
  404328:	47b8      	blx	r7
  40432a:	4d40      	ldr	r5, [pc, #256]	; (40442c <sendCmdToTiny+0x160>)
  40432c:	2608      	movs	r6, #8
  40432e:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  404330:	f240 302a 	movw	r0, #810	; 0x32a
  404334:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404336:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x10)==0)ioport_set_pin_level(BigTiny_DAT,0);
  404338:	f014 0f10 	tst.w	r4, #16
  40433c:	d15e      	bne.n	4043fc <sendCmdToTiny+0x130>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40433e:	2201      	movs	r2, #1
  404340:	4b38      	ldr	r3, [pc, #224]	; (404424 <sendCmdToTiny+0x158>)
  404342:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  404344:	f240 302a 	movw	r0, #810	; 0x32a
  404348:	4f37      	ldr	r7, [pc, #220]	; (404428 <sendCmdToTiny+0x15c>)
  40434a:	47b8      	blx	r7
  40434c:	4d37      	ldr	r5, [pc, #220]	; (40442c <sendCmdToTiny+0x160>)
  40434e:	2608      	movs	r6, #8
  404350:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  404352:	f240 302a 	movw	r0, #810	; 0x32a
  404356:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404358:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x08)==0)ioport_set_pin_level(BigTiny_DAT,0);
  40435a:	f014 0f08 	tst.w	r4, #8
  40435e:	d151      	bne.n	404404 <sendCmdToTiny+0x138>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404360:	2201      	movs	r2, #1
  404362:	4b30      	ldr	r3, [pc, #192]	; (404424 <sendCmdToTiny+0x158>)
  404364:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  404366:	f240 302a 	movw	r0, #810	; 0x32a
  40436a:	4f2f      	ldr	r7, [pc, #188]	; (404428 <sendCmdToTiny+0x15c>)
  40436c:	47b8      	blx	r7
  40436e:	4d2f      	ldr	r5, [pc, #188]	; (40442c <sendCmdToTiny+0x160>)
  404370:	2608      	movs	r6, #8
  404372:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  404374:	f240 302a 	movw	r0, #810	; 0x32a
  404378:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40437a:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x04)==0)ioport_set_pin_level(BigTiny_DAT,0);
  40437c:	f014 0f04 	tst.w	r4, #4
  404380:	d144      	bne.n	40440c <sendCmdToTiny+0x140>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404382:	2201      	movs	r2, #1
  404384:	4b27      	ldr	r3, [pc, #156]	; (404424 <sendCmdToTiny+0x158>)
  404386:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  404388:	f240 302a 	movw	r0, #810	; 0x32a
  40438c:	4f26      	ldr	r7, [pc, #152]	; (404428 <sendCmdToTiny+0x15c>)
  40438e:	47b8      	blx	r7
  404390:	4d26      	ldr	r5, [pc, #152]	; (40442c <sendCmdToTiny+0x160>)
  404392:	2608      	movs	r6, #8
  404394:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  404396:	f240 302a 	movw	r0, #810	; 0x32a
  40439a:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40439c:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x02)==0)ioport_set_pin_level(BigTiny_DAT,0);
  40439e:	f014 0f02 	tst.w	r4, #2
  4043a2:	d137      	bne.n	404414 <sendCmdToTiny+0x148>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4043a4:	2201      	movs	r2, #1
  4043a6:	4b1f      	ldr	r3, [pc, #124]	; (404424 <sendCmdToTiny+0x158>)
  4043a8:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  4043aa:	f240 302a 	movw	r0, #810	; 0x32a
  4043ae:	4f1e      	ldr	r7, [pc, #120]	; (404428 <sendCmdToTiny+0x15c>)
  4043b0:	47b8      	blx	r7
  4043b2:	4d1e      	ldr	r5, [pc, #120]	; (40442c <sendCmdToTiny+0x160>)
  4043b4:	2608      	movs	r6, #8
  4043b6:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  4043b8:	f240 302a 	movw	r0, #810	; 0x32a
  4043bc:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4043be:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x01)==0)ioport_set_pin_level(BigTiny_DAT,0);
  4043c0:	f014 0f01 	tst.w	r4, #1
  4043c4:	d02a      	beq.n	40441c <sendCmdToTiny+0x150>
  4043c6:	2201      	movs	r2, #1
  4043c8:	4b16      	ldr	r3, [pc, #88]	; (404424 <sendCmdToTiny+0x158>)
  4043ca:	631a      	str	r2, [r3, #48]	; 0x30
	 delay_us(TINY_CLK_DELAY);
  4043cc:	f240 302a 	movw	r0, #810	; 0x32a
  4043d0:	4e15      	ldr	r6, [pc, #84]	; (404428 <sendCmdToTiny+0x15c>)
  4043d2:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4043d4:	4c15      	ldr	r4, [pc, #84]	; (40442c <sendCmdToTiny+0x160>)
  4043d6:	2508      	movs	r5, #8
  4043d8:	6365      	str	r5, [r4, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  4043da:	f240 302a 	movw	r0, #810	; 0x32a
  4043de:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4043e0:	6325      	str	r5, [r4, #48]	; 0x30
  4043e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4043e4:	2201      	movs	r2, #1
  4043e6:	4b0f      	ldr	r3, [pc, #60]	; (404424 <sendCmdToTiny+0x158>)
  4043e8:	631a      	str	r2, [r3, #48]	; 0x30
  4043ea:	e778      	b.n	4042de <sendCmdToTiny+0x12>
  4043ec:	2201      	movs	r2, #1
  4043ee:	4b0d      	ldr	r3, [pc, #52]	; (404424 <sendCmdToTiny+0x158>)
  4043f0:	631a      	str	r2, [r3, #48]	; 0x30
  4043f2:	e785      	b.n	404300 <sendCmdToTiny+0x34>
  4043f4:	2201      	movs	r2, #1
  4043f6:	4b0b      	ldr	r3, [pc, #44]	; (404424 <sendCmdToTiny+0x158>)
  4043f8:	631a      	str	r2, [r3, #48]	; 0x30
  4043fa:	e792      	b.n	404322 <sendCmdToTiny+0x56>
  4043fc:	2201      	movs	r2, #1
  4043fe:	4b09      	ldr	r3, [pc, #36]	; (404424 <sendCmdToTiny+0x158>)
  404400:	631a      	str	r2, [r3, #48]	; 0x30
  404402:	e79f      	b.n	404344 <sendCmdToTiny+0x78>
  404404:	2201      	movs	r2, #1
  404406:	4b07      	ldr	r3, [pc, #28]	; (404424 <sendCmdToTiny+0x158>)
  404408:	631a      	str	r2, [r3, #48]	; 0x30
  40440a:	e7ac      	b.n	404366 <sendCmdToTiny+0x9a>
  40440c:	2201      	movs	r2, #1
  40440e:	4b05      	ldr	r3, [pc, #20]	; (404424 <sendCmdToTiny+0x158>)
  404410:	631a      	str	r2, [r3, #48]	; 0x30
  404412:	e7b9      	b.n	404388 <sendCmdToTiny+0xbc>
  404414:	2201      	movs	r2, #1
  404416:	4b03      	ldr	r3, [pc, #12]	; (404424 <sendCmdToTiny+0x158>)
  404418:	631a      	str	r2, [r3, #48]	; 0x30
  40441a:	e7c6      	b.n	4043aa <sendCmdToTiny+0xde>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40441c:	2201      	movs	r2, #1
  40441e:	4b01      	ldr	r3, [pc, #4]	; (404424 <sendCmdToTiny+0x158>)
  404420:	635a      	str	r2, [r3, #52]	; 0x34
  404422:	e7d3      	b.n	4043cc <sendCmdToTiny+0x100>
  404424:	400e1000 	.word	0x400e1000
  404428:	20400001 	.word	0x20400001
  40442c:	400e1400 	.word	0x400e1400

00404430 <getByteFromTiny>:
char getByteFromTiny(void){
  404430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404432:	4c48      	ldr	r4, [pc, #288]	; (404554 <getByteFromTiny+0x124>)
  404434:	2508      	movs	r5, #8
  404436:	6325      	str	r5, [r4, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep. Making only this one longer doesn't help.
  404438:	f240 302a 	movw	r0, #810	; 0x32a
  40443c:	4b46      	ldr	r3, [pc, #280]	; (404558 <getByteFromTiny+0x128>)
  40443e:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404440:	6365      	str	r5, [r4, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  404442:	4b46      	ldr	r3, [pc, #280]	; (40455c <getByteFromTiny+0x12c>)
  404444:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  404446:	f004 0401 	and.w	r4, r4, #1
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x80;
  40444a:	01e4      	lsls	r4, r4, #7
	delay_us(TINY_CLK_DELAY);
  40444c:	f240 302a 	movw	r0, #810	; 0x32a
  404450:	4f41      	ldr	r7, [pc, #260]	; (404558 <getByteFromTiny+0x128>)
  404452:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404454:	4d3f      	ldr	r5, [pc, #252]	; (404554 <getByteFromTiny+0x124>)
  404456:	2608      	movs	r6, #8
  404458:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  40445a:	f240 302a 	movw	r0, #810	; 0x32a
  40445e:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404460:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  404462:	4b3e      	ldr	r3, [pc, #248]	; (40455c <getByteFromTiny+0x12c>)
  404464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x40;
  404466:	f013 0f01 	tst.w	r3, #1
  40446a:	bf18      	it	ne
  40446c:	f044 0440 	orrne.w	r4, r4, #64	; 0x40
	delay_us(TINY_CLK_DELAY);
  404470:	f240 302a 	movw	r0, #810	; 0x32a
  404474:	4f38      	ldr	r7, [pc, #224]	; (404558 <getByteFromTiny+0x128>)
  404476:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404478:	4d36      	ldr	r5, [pc, #216]	; (404554 <getByteFromTiny+0x124>)
  40447a:	2608      	movs	r6, #8
  40447c:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  40447e:	f240 302a 	movw	r0, #810	; 0x32a
  404482:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404484:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  404486:	4b35      	ldr	r3, [pc, #212]	; (40455c <getByteFromTiny+0x12c>)
  404488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x20;
  40448a:	f013 0f01 	tst.w	r3, #1
  40448e:	bf18      	it	ne
  404490:	f044 0420 	orrne.w	r4, r4, #32
	delay_us(TINY_CLK_DELAY);
  404494:	f240 302a 	movw	r0, #810	; 0x32a
  404498:	4f2f      	ldr	r7, [pc, #188]	; (404558 <getByteFromTiny+0x128>)
  40449a:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40449c:	4d2d      	ldr	r5, [pc, #180]	; (404554 <getByteFromTiny+0x124>)
  40449e:	2608      	movs	r6, #8
  4044a0:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  4044a2:	f240 302a 	movw	r0, #810	; 0x32a
  4044a6:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4044a8:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4044aa:	4b2c      	ldr	r3, [pc, #176]	; (40455c <getByteFromTiny+0x12c>)
  4044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x10;
  4044ae:	f013 0f01 	tst.w	r3, #1
  4044b2:	bf18      	it	ne
  4044b4:	f044 0410 	orrne.w	r4, r4, #16
	delay_us(TINY_CLK_DELAY);
  4044b8:	f240 302a 	movw	r0, #810	; 0x32a
  4044bc:	4f26      	ldr	r7, [pc, #152]	; (404558 <getByteFromTiny+0x128>)
  4044be:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4044c0:	4d24      	ldr	r5, [pc, #144]	; (404554 <getByteFromTiny+0x124>)
  4044c2:	2608      	movs	r6, #8
  4044c4:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  4044c6:	f240 302a 	movw	r0, #810	; 0x32a
  4044ca:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4044cc:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4044ce:	4b23      	ldr	r3, [pc, #140]	; (40455c <getByteFromTiny+0x12c>)
  4044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x08;
  4044d2:	f013 0f01 	tst.w	r3, #1
  4044d6:	bf18      	it	ne
  4044d8:	4334      	orrne	r4, r6
	delay_us(TINY_CLK_DELAY);
  4044da:	f240 302a 	movw	r0, #810	; 0x32a
  4044de:	4f1e      	ldr	r7, [pc, #120]	; (404558 <getByteFromTiny+0x128>)
  4044e0:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4044e2:	4d1c      	ldr	r5, [pc, #112]	; (404554 <getByteFromTiny+0x124>)
  4044e4:	2608      	movs	r6, #8
  4044e6:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  4044e8:	f240 302a 	movw	r0, #810	; 0x32a
  4044ec:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4044ee:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4044f0:	4b1a      	ldr	r3, [pc, #104]	; (40455c <getByteFromTiny+0x12c>)
  4044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x04;
  4044f4:	f013 0f01 	tst.w	r3, #1
  4044f8:	bf18      	it	ne
  4044fa:	f044 0404 	orrne.w	r4, r4, #4
	delay_us(TINY_CLK_DELAY);
  4044fe:	f240 302a 	movw	r0, #810	; 0x32a
  404502:	4f15      	ldr	r7, [pc, #84]	; (404558 <getByteFromTiny+0x128>)
  404504:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404506:	4d13      	ldr	r5, [pc, #76]	; (404554 <getByteFromTiny+0x124>)
  404508:	2608      	movs	r6, #8
  40450a:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  40450c:	f240 302a 	movw	r0, #810	; 0x32a
  404510:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404512:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  404514:	4b11      	ldr	r3, [pc, #68]	; (40455c <getByteFromTiny+0x12c>)
  404516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x02;
  404518:	f013 0f01 	tst.w	r3, #1
  40451c:	bf18      	it	ne
  40451e:	f044 0402 	orrne.w	r4, r4, #2
	delay_us(TINY_CLK_DELAY);
  404522:	f240 302a 	movw	r0, #810	; 0x32a
  404526:	4f0c      	ldr	r7, [pc, #48]	; (404558 <getByteFromTiny+0x128>)
  404528:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40452a:	4d0a      	ldr	r5, [pc, #40]	; (404554 <getByteFromTiny+0x124>)
  40452c:	2608      	movs	r6, #8
  40452e:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  404530:	f240 302a 	movw	r0, #810	; 0x32a
  404534:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404536:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  404538:	4b08      	ldr	r3, [pc, #32]	; (40455c <getByteFromTiny+0x12c>)
  40453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x01;
  40453c:	f013 0f01 	tst.w	r3, #1
  404540:	bf18      	it	ne
  404542:	f044 0401 	orrne.w	r4, r4, #1
	delay_us(TINY_CLK_DELAY);
  404546:	f240 302a 	movw	r0, #810	; 0x32a
  40454a:	4b03      	ldr	r3, [pc, #12]	; (404558 <getByteFromTiny+0x128>)
  40454c:	4798      	blx	r3
}
  40454e:	4620      	mov	r0, r4
  404550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404552:	bf00      	nop
  404554:	400e1400 	.word	0x400e1400
  404558:	20400001 	.word	0x20400001
  40455c:	400e1000 	.word	0x400e1000

00404560 <calcCRC>:
   for (i=0;i<LEN;i++){       //for each element
  404560:	2900      	cmp	r1, #0
  404562:	dd20      	ble.n	4045a6 <calcCRC+0x46>
unsigned short calcCRC(char cbuff[], int LEN) {
  404564:	b5f0      	push	{r4, r5, r6, r7, lr}
  404566:	4605      	mov	r5, r0
  404568:	1847      	adds	r7, r0, r1
   for (i=0;i<LEN;i++){       //for each element
  40456a:	f64f 70ff 	movw	r0, #65535	; 0xffff
       if((Y & cbuff[i]) != 0){ X++;};
  40456e:	f04f 0e80 	mov.w	lr, #128	; 0x80
       if ((Z & 0x8000) != 0) {X ^= 0x1021; };
  404572:	f241 0621 	movw	r6, #4129	; 0x1021
  404576:	e011      	b.n	40459c <calcCRC+0x3c>
       Y >>= 1;
  404578:	0849      	lsrs	r1, r1, #1
       if ((Z & 0x8000) != 0) {X ^= 0x1021; };
  40457a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40457e:	bf14      	ite	ne
  404580:	ea83 0006 	eorne.w	r0, r3, r6
  404584:	4618      	moveq	r0, r3
     for (j=0;j<8;j++){
  404586:	3a01      	subs	r2, #1
  404588:	d006      	beq.n	404598 <calcCRC+0x38>
       X <<= 1;
  40458a:	0043      	lsls	r3, r0, #1
  40458c:	b29b      	uxth	r3, r3
       if((Y & cbuff[i]) != 0){ X++;};
  40458e:	4221      	tst	r1, r4
  404590:	d0f2      	beq.n	404578 <calcCRC+0x18>
  404592:	3301      	adds	r3, #1
  404594:	b29b      	uxth	r3, r3
  404596:	e7ef      	b.n	404578 <calcCRC+0x18>
   for (i=0;i<LEN;i++){       //for each element
  404598:	42bd      	cmp	r5, r7
  40459a:	d013      	beq.n	4045c4 <calcCRC+0x64>
       if((Y & cbuff[i]) != 0){ X++;};
  40459c:	f815 4b01 	ldrb.w	r4, [r5], #1
  4045a0:	2208      	movs	r2, #8
  4045a2:	4671      	mov	r1, lr
  4045a4:	e7f1      	b.n	40458a <calcCRC+0x2a>
   unsigned short X = 0xFFFF;
  4045a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4045aa:	2310      	movs	r3, #16
    if ((X & 0x8000) != 0) { X<<=1; X ^= 0x1021; } else X <<= 1;
  4045ac:	f241 0221 	movw	r2, #4129	; 0x1021
  4045b0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  4045b4:	ea4f 0040 	mov.w	r0, r0, lsl #1
  4045b8:	b280      	uxth	r0, r0
  4045ba:	bf18      	it	ne
  4045bc:	4050      	eorne	r0, r2
  for (i=0;i<16;i++){
  4045be:	3b01      	subs	r3, #1
  4045c0:	d1f6      	bne.n	4045b0 <calcCRC+0x50>
  4045c2:	4770      	bx	lr
   unsigned short X = 0xFFFF;
  4045c4:	2310      	movs	r3, #16
    if ((X & 0x8000) != 0) { X<<=1; X ^= 0x1021; } else X <<= 1;
  4045c6:	f241 0221 	movw	r2, #4129	; 0x1021
  4045ca:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  4045ce:	ea4f 0040 	mov.w	r0, r0, lsl #1
  4045d2:	b280      	uxth	r0, r0
  4045d4:	bf18      	it	ne
  4045d6:	4050      	eorne	r0, r2
  for (i=0;i<16;i++){
  4045d8:	3b01      	subs	r3, #1
  4045da:	d1f6      	bne.n	4045ca <calcCRC+0x6a>
}
  4045dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

004045e0 <getGPSdateTimeFrmTiny>:
/***********************************************************************/
/*  Interrupt from Tiny
/***********************************************************************/
void getGPSdateTimeFrmTiny(void){
  4045e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045e4:	b09b      	sub	sp, #108	; 0x6c
	char iters;
	unsigned short crcrc;
	int yearNow,LatFract,LongFract;
	unsigned int params[4];

	pmc_enable_periph_clk(ID_PIOB);
  4045e6:	200b      	movs	r0, #11
  4045e8:	4c97      	ldr	r4, [pc, #604]	; (404848 <getGPSdateTimeFrmTiny+0x268>)
  4045ea:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  4045ec:	2010      	movs	r0, #16
  4045ee:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4045f0:	4b96      	ldr	r3, [pc, #600]	; (40484c <getGPSdateTimeFrmTiny+0x26c>)
  4045f2:	2208      	movs	r2, #8
  4045f4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4045f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4045fa:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4045fc:	4994      	ldr	r1, [pc, #592]	; (404850 <getGPSdateTimeFrmTiny+0x270>)
  4045fe:	2001      	movs	r0, #1
  404600:	6148      	str	r0, [r1, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404602:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404606:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(BigTiny_CLK, 1);
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_INPUT);
	ioport_set_pin_level(BigTiny_CLK, 0);//start condition for big-to-tiny
	delay_us(150);
  404608:	f641 50a2 	movw	r0, #7586	; 0x1da2
  40460c:	4b91      	ldr	r3, [pc, #580]	; (404854 <getGPSdateTimeFrmTiny+0x274>)
  40460e:	4798      	blx	r3
  404610:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
  404614:	ae12      	add	r6, sp, #72	; 0x48
	for(iters=0;iters<25;iters++){
		rcvFromTinyGG[iters]=getByteFromTiny();
  404616:	4d90      	ldr	r5, [pc, #576]	; (404858 <getGPSdateTimeFrmTiny+0x278>)
  404618:	47a8      	blx	r5
  40461a:	f804 0f01 	strb.w	r0, [r4, #1]!
	for(iters=0;iters<25;iters++){
  40461e:	42a6      	cmp	r6, r4
  404620:	d1fa      	bne.n	404618 <getGPSdateTimeFrmTiny+0x38>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404622:	2208      	movs	r2, #8
  404624:	4b89      	ldr	r3, [pc, #548]	; (40484c <getGPSdateTimeFrmTiny+0x26c>)
  404626:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ioport_set_pin_level(BigTiny_CLK, 1);//start condition for tiny-to-big
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  404628:	4a8c      	ldr	r2, [pc, #560]	; (40485c <getGPSdateTimeFrmTiny+0x27c>)
  40462a:	f503 638a 	add.w	r3, r3, #1104	; 0x450
  40462e:	601a      	str	r2, [r3, #0]
	crcrc=calcCRC(rcvFromTinyGG,23);
  404630:	2117      	movs	r1, #23
  404632:	a80c      	add	r0, sp, #48	; 0x30
  404634:	4b8a      	ldr	r3, [pc, #552]	; (404860 <getGPSdateTimeFrmTiny+0x280>)
  404636:	4798      	blx	r3
	if(((crcrc>>8)!=rcvFromTinyGG[23])||((crcrc&0x00FF)!=rcvFromTinyGG[24])){
  404638:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
  40463c:	f3c0 230f 	ubfx	r3, r0, #8, #16
  404640:	429a      	cmp	r2, r3
  404642:	d104      	bne.n	40464e <getGPSdateTimeFrmTiny+0x6e>
  404644:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
  404648:	b2c0      	uxtb	r0, r0
  40464a:	4283      	cmp	r3, r0
  40464c:	d02e      	beq.n	4046ac <getGPSdateTimeFrmTiny+0xcc>
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40464e:	4b7f      	ldr	r3, [pc, #508]	; (40484c <getGPSdateTimeFrmTiny+0x26c>)
  404650:	2208      	movs	r2, #8
  404652:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404654:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404658:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40465a:	4c7d      	ldr	r4, [pc, #500]	; (404850 <getGPSdateTimeFrmTiny+0x270>)
  40465c:	2501      	movs	r5, #1
  40465e:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404660:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);//WakeUp Tiny
		ioport_set_pin_level(BigTiny_CLK, 1);//start condition
		ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);//WakeUp Tiny
		sendCmdToTiny('b');//potential addition tshoooooooooooot
  404664:	2062      	movs	r0, #98	; 0x62
  404666:	4b7f      	ldr	r3, [pc, #508]	; (404864 <getGPSdateTimeFrmTiny+0x284>)
  404668:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40466a:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40466c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_INPUT);//WakeUp Tiny
#ifdef DO_DIAGS
		configure_console();  //TSHOOOOOOOOOOOOOOT
  404670:	4b7d      	ldr	r3, [pc, #500]	; (404868 <getGPSdateTimeFrmTiny+0x288>)
  404672:	4798      	blx	r3
		printf("\r\nFAIL CRC TO TINY\r\n");
  404674:	487d      	ldr	r0, [pc, #500]	; (40486c <getGPSdateTimeFrmTiny+0x28c>)
  404676:	4b7e      	ldr	r3, [pc, #504]	; (404870 <getGPSdateTimeFrmTiny+0x290>)
  404678:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40467a:	4b74      	ldr	r3, [pc, #464]	; (40484c <getGPSdateTimeFrmTiny+0x26c>)
  40467c:	2208      	movs	r2, #8
  40467e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404680:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404684:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404686:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40468a:	2201      	movs	r2, #1
  40468c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40468e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404692:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404694:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
	ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);//WakeUp Tiny
	ioport_set_pin_level(BigTiny_CLK, 1);//start condition for tiny-to-big
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);//WakeUp Tiny
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_INPUT);//WakeUp Tiny
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  404698:	4c76      	ldr	r4, [pc, #472]	; (404874 <getGPSdateTimeFrmTiny+0x294>)
  40469a:	4d70      	ldr	r5, [pc, #448]	; (40485c <getGPSdateTimeFrmTiny+0x27c>)
  40469c:	6025      	str	r5, [r4, #0]
	delay_ms(1000);
  40469e:	4876      	ldr	r0, [pc, #472]	; (404878 <getGPSdateTimeFrmTiny+0x298>)
  4046a0:	4b6c      	ldr	r3, [pc, #432]	; (404854 <getGPSdateTimeFrmTiny+0x274>)
  4046a2:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4046a4:	6025      	str	r5, [r4, #0]
}
  4046a6:	b01b      	add	sp, #108	; 0x6c
  4046a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4046ac:	4b67      	ldr	r3, [pc, #412]	; (40484c <getGPSdateTimeFrmTiny+0x26c>)
  4046ae:	2208      	movs	r2, #8
  4046b0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4046b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4046b6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4046b8:	4c65      	ldr	r4, [pc, #404]	; (404850 <getGPSdateTimeFrmTiny+0x270>)
  4046ba:	2501      	movs	r5, #1
  4046bc:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4046be:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		sendCmdToTiny('G');//potential addition tshoooooooooooot
  4046c2:	2047      	movs	r0, #71	; 0x47
  4046c4:	4b67      	ldr	r3, [pc, #412]	; (404864 <getGPSdateTimeFrmTiny+0x284>)
  4046c6:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4046c8:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4046ca:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		yearNow = rcvFromTinyGG[9];
  4046ce:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
  4046d2:	9303      	str	r3, [sp, #12]
		monthNow = rcvFromTinyGG[10];
  4046d4:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 4048a0 <getGPSdateTimeFrmTiny+0x2c0>
  4046d8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
  4046dc:	f8ca 3000 	str.w	r3, [sl]
		dayNow = rcvFromTinyGG[11];
  4046e0:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 4048a4 <getGPSdateTimeFrmTiny+0x2c4>
  4046e4:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
  4046e8:	f8cb 3000 	str.w	r3, [fp]
		hourNow = rcvFromTinyGG[12];
  4046ec:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 4048a8 <getGPSdateTimeFrmTiny+0x2c8>
  4046f0:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  4046f4:	f8c8 3000 	str.w	r3, [r8]
		minsNow = rcvFromTinyGG[13];
  4046f8:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 4048ac <getGPSdateTimeFrmTiny+0x2cc>
  4046fc:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
  404700:	f8c9 3000 	str.w	r3, [r9]
		secNow = rcvFromTinyGG[14];
  404704:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
  404708:	4a5c      	ldr	r2, [pc, #368]	; (40487c <getGPSdateTimeFrmTiny+0x29c>)
  40470a:	6013      	str	r3, [r2, #0]
	pmc_enable_periph_clk(ID_PIOC);
  40470c:	200c      	movs	r0, #12
  40470e:	4b4e      	ldr	r3, [pc, #312]	; (404848 <getGPSdateTimeFrmTiny+0x268>)
  404710:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404712:	4b5b      	ldr	r3, [pc, #364]	; (404880 <getGPSdateTimeFrmTiny+0x2a0>)
  404714:	2204      	movs	r2, #4
  404716:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404718:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40471c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40471e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404722:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404724:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40472a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40472c:	f022 0204 	bic.w	r2, r2, #4
  404730:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404732:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404734:	f022 0204 	bic.w	r2, r2, #4
  404738:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40473a:	f504 7400 	add.w	r4, r4, #512	; 0x200
  40473e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  404742:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404744:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404748:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40474c:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40474e:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404752:	6323      	str	r3, [r4, #48]	; 0x30
  404754:	6326      	str	r6, [r4, #48]	; 0x30
	delay_ms(200);//looked fine even at only 1ms (when repeated every 500ms);
  404756:	484b      	ldr	r0, [pc, #300]	; (404884 <getGPSdateTimeFrmTiny+0x2a4>)
  404758:	4f3e      	ldr	r7, [pc, #248]	; (404854 <getGPSdateTimeFrmTiny+0x274>)
  40475a:	47b8      	blx	r7
	twi_init_RTC();
  40475c:	4b4a      	ldr	r3, [pc, #296]	; (404888 <getGPSdateTimeFrmTiny+0x2a8>)
  40475e:	4798      	blx	r3
	delay_ms(500);//
  404760:	484a      	ldr	r0, [pc, #296]	; (40488c <getGPSdateTimeFrmTiny+0x2ac>)
  404762:	47b8      	blx	r7
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404764:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404766:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  40476a:	6666      	str	r6, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40476c:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  404770:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  404772:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404774:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404778:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40477a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  40477e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404780:	6f63      	ldr	r3, [r4, #116]	; 0x74
  404782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  404786:	6763      	str	r3, [r4, #116]	; 0x74
	rtcData[0]=0x00;//write to Address 0x00  SET ALL
  404788:	2600      	movs	r6, #0
  40478a:	f88d 6014 	strb.w	r6, [sp, #20]
	rtcData[1]=0x02;//contents of Addr 0x00 CTL1
  40478e:	f04f 0202 	mov.w	r2, #2
  404792:	f88d 2015 	strb.w	r2, [sp, #21]
	rtcData[2]=0x00;//contents of Addr 0x01 CTL2
  404796:	f88d 6016 	strb.w	r6, [sp, #22]
	rtcData[3]=0x00;//contents of Addr 0x02 CTL3
  40479a:	f88d 6017 	strb.w	r6, [sp, #23]
	rtcData[4]=hexToBCD(secNow);//contents of Addr 0x03 SECONDS works
  40479e:	4a37      	ldr	r2, [pc, #220]	; (40487c <getGPSdateTimeFrmTiny+0x29c>)
  4047a0:	6810      	ldr	r0, [r2, #0]
  4047a2:	4c3b      	ldr	r4, [pc, #236]	; (404890 <getGPSdateTimeFrmTiny+0x2b0>)
  4047a4:	47a0      	blx	r4
  4047a6:	f88d 0018 	strb.w	r0, [sp, #24]
	rtcData[5]=hexToBCD(minsNow);//contents of Addr 0x04 MINUTES works
  4047aa:	f8d9 0000 	ldr.w	r0, [r9]
  4047ae:	47a0      	blx	r4
  4047b0:	f88d 0019 	strb.w	r0, [sp, #25]
	rtcData[6]=hexToBCD(hourNow);//contents of Addr 0x05 HOURS works
  4047b4:	f8d8 0000 	ldr.w	r0, [r8]
  4047b8:	47a0      	blx	r4
  4047ba:	f88d 001a 	strb.w	r0, [sp, #26]
	rtcData[7]=hexToBCD(dayNow);//contents of Addr 0x06 DAYS
  4047be:	f8db 0000 	ldr.w	r0, [fp]
  4047c2:	47a0      	blx	r4
  4047c4:	f88d 001b 	strb.w	r0, [sp, #27]
	rtcData[8]=0x02;//contents of Addr 0x07 WEEKDAY
  4047c8:	f04f 0202 	mov.w	r2, #2
  4047cc:	f88d 201c 	strb.w	r2, [sp, #28]
	rtcData[9]=hexToBCD(monthNow);//contents of Addr 0x08 MONTH
  4047d0:	f8da 0000 	ldr.w	r0, [sl]
  4047d4:	47a0      	blx	r4
  4047d6:	f88d 001d 	strb.w	r0, [sp, #29]
	rtcData[0x0A]=hexToBCD(yearNow);//contents of Addr 0x09 YEAR
  4047da:	9803      	ldr	r0, [sp, #12]
  4047dc:	47a0      	blx	r4
  4047de:	f88d 001e 	strb.w	r0, [sp, #30]
	rtcData[0x0B]=0x80;//contents of Addr 0x0A  0x80 = second alarm disabled
  4047e2:	2380      	movs	r3, #128	; 0x80
  4047e4:	f88d 301f 	strb.w	r3, [sp, #31]
	rtcData[0x0C]=0x80;//contents of Addr 0x0B  0x80 = minute alarm disabled
  4047e8:	f88d 3020 	strb.w	r3, [sp, #32]
	rtcData[0x0D]=0x80;//contents of Addr 0x0C  0x80 = Hour alarm disabled
  4047ec:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	rtcData[0x0E]=0x80;//contents of Addr 0x0D  0x80 = day alarm disabled
  4047f0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	rtcData[0x0F]=0x80;//contents of Addr 0x0E  0x80 = weekday alarm disabled
  4047f4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	rtcData[0x10]=0x00;//contents of Addr 0x0F  0x00 = temperature clockout period 4 minutes
  4047f8:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	rtcData[0x11]=0x00;//contents of Addr 0x10  20=PULSED INTERRUPT
  4047fc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
	writeRet = write_data_RTC(rtcData,18);//!< write sequentially to the slave "1" sends addr plus data[0].
  404800:	2112      	movs	r1, #18
  404802:	a805      	add	r0, sp, #20
  404804:	4c23      	ldr	r4, [pc, #140]	; (404894 <getGPSdateTimeFrmTiny+0x2b4>)
  404806:	47a0      	blx	r4
	delay_ms(200);//
  404808:	481e      	ldr	r0, [pc, #120]	; (404884 <getGPSdateTimeFrmTiny+0x2a4>)
  40480a:	47b8      	blx	r7
	rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40480c:	f88d 5014 	strb.w	r5, [sp, #20]
	rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  404810:	2330      	movs	r3, #48	; 0x30
  404812:	f88d 3015 	strb.w	r3, [sp, #21]
	write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  404816:	2102      	movs	r1, #2
  404818:	a805      	add	r0, sp, #20
  40481a:	47a0      	blx	r4
		configure_console();  //TSHOOOOOOOOOOOOOOT
  40481c:	4b12      	ldr	r3, [pc, #72]	; (404868 <getGPSdateTimeFrmTiny+0x288>)
  40481e:	4798      	blx	r3
		printf("\r\nGOOD FROM TINY: %d-%d-%d %d:%d \r\n",yearNow, monthNow, dayNow, hourNow, minsNow);
  404820:	f8db 3000 	ldr.w	r3, [fp]
  404824:	f8da 2000 	ldr.w	r2, [sl]
  404828:	f8d9 1000 	ldr.w	r1, [r9]
  40482c:	9101      	str	r1, [sp, #4]
  40482e:	f8d8 1000 	ldr.w	r1, [r8]
  404832:	9100      	str	r1, [sp, #0]
  404834:	9903      	ldr	r1, [sp, #12]
  404836:	4818      	ldr	r0, [pc, #96]	; (404898 <getGPSdateTimeFrmTiny+0x2b8>)
  404838:	4c0d      	ldr	r4, [pc, #52]	; (404870 <getGPSdateTimeFrmTiny+0x290>)
  40483a:	47a0      	blx	r4
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40483c:	4a07      	ldr	r2, [pc, #28]	; (40485c <getGPSdateTimeFrmTiny+0x27c>)
  40483e:	4b0d      	ldr	r3, [pc, #52]	; (404874 <getGPSdateTimeFrmTiny+0x294>)
  404840:	601a      	str	r2, [r3, #0]
		delay_s(2);
  404842:	4816      	ldr	r0, [pc, #88]	; (40489c <getGPSdateTimeFrmTiny+0x2bc>)
  404844:	47b8      	blx	r7
  404846:	e718      	b.n	40467a <getGPSdateTimeFrmTiny+0x9a>
  404848:	004021a9 	.word	0x004021a9
  40484c:	400e1400 	.word	0x400e1400
  404850:	400e1000 	.word	0x400e1000
  404854:	20400001 	.word	0x20400001
  404858:	00404431 	.word	0x00404431
  40485c:	a5000001 	.word	0xa5000001
  404860:	00404561 	.word	0x00404561
  404864:	004042cd 	.word	0x004042cd
  404868:	00404105 	.word	0x00404105
  40486c:	0040ac8c 	.word	0x0040ac8c
  404870:	004079b1 	.word	0x004079b1
  404874:	400e1850 	.word	0x400e1850
  404878:	0303af6b 	.word	0x0303af6b
  40487c:	20401094 	.word	0x20401094
  404880:	400e0e00 	.word	0x400e0e00
  404884:	009a5649 	.word	0x009a5649
  404888:	00400ecd 	.word	0x00400ecd
  40488c:	0181d7b6 	.word	0x0181d7b6
  404890:	00403bad 	.word	0x00403bad
  404894:	00400ff9 	.word	0x00400ff9
  404898:	0040aca4 	.word	0x0040aca4
  40489c:	06075ed6 	.word	0x06075ed6
  4048a0:	20401064 	.word	0x20401064
  4048a4:	20401084 	.word	0x20401084
  4048a8:	204018dc 	.word	0x204018dc
  4048ac:	204018b0 	.word	0x204018b0

004048b0 <getHumidity>:
 /***********************************************************************/
 /*  Get Humidity
 /***********************************************************************/
unsigned int getHumidity(void){
  4048b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4048b2:	b083      	sub	sp, #12
	unsigned char data[3];
	unsigned char readRet,writeRet = 0;
	unsigned short humidityMeasurement;
	char errCtr;
	pmc_enable_periph_clk(ID_PIOD);
  4048b4:	2010      	movs	r0, #16
  4048b6:	4b39      	ldr	r3, [pc, #228]	; (40499c <getHumidity+0xec>)
  4048b8:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4048ba:	4b39      	ldr	r3, [pc, #228]	; (4049a0 <getHumidity+0xf0>)
  4048bc:	2240      	movs	r2, #64	; 0x40
  4048be:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4048c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4048c4:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4048c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4048ca:	f44f 7100 	mov.w	r1, #512	; 0x200
  4048ce:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4048d0:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4048d4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4048d8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4048da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4048de:	6319      	str	r1, [r3, #48]	; 0x30
  4048e0:	631a      	str	r2, [r3, #48]	; 0x30
	ALTPWR_ON;
	ioport_set_pin_dir(ALT_CLK, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(ALT_DAT, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(ALT_CLK, 1);
	ioport_set_pin_level(ALT_DAT, 1);
	delay_ms(20);//looked fine even at only 1ms (when repeated every 500ms);
  4048e2:	4830      	ldr	r0, [pc, #192]	; (4049a4 <getHumidity+0xf4>)
  4048e4:	4b30      	ldr	r3, [pc, #192]	; (4049a8 <getHumidity+0xf8>)
  4048e6:	4798      	blx	r3
		data[0]=0xF5;//F5=Humidity,F3=Temperature measurement, No Hold Master
  4048e8:	a802      	add	r0, sp, #8
  4048ea:	23f5      	movs	r3, #245	; 0xf5
  4048ec:	f800 3d04 	strb.w	r3, [r0, #-4]!
		writeRet = write_data_H(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  4048f0:	2101      	movs	r1, #1
  4048f2:	4b2e      	ldr	r3, [pc, #184]	; (4049ac <getHumidity+0xfc>)
  4048f4:	4798      	blx	r3
		errCtr=100;
		data[0]=0;data[1]=0;data[2]=0;
  4048f6:	2300      	movs	r3, #0
  4048f8:	f88d 3004 	strb.w	r3, [sp, #4]
  4048fc:	f88d 3005 	strb.w	r3, [sp, #5]
  404900:	f88d 3006 	strb.w	r3, [sp, #6]
  404904:	2464      	movs	r4, #100	; 0x64
		while((errCtr>0)&&(read_bytes_H(data,3)==0)){
  404906:	4d2a      	ldr	r5, [pc, #168]	; (4049b0 <getHumidity+0x100>)
			errCtr--;
 			delay_ms(2);
  404908:	4f2a      	ldr	r7, [pc, #168]	; (4049b4 <getHumidity+0x104>)
  40490a:	4e27      	ldr	r6, [pc, #156]	; (4049a8 <getHumidity+0xf8>)
		while((errCtr>0)&&(read_bytes_H(data,3)==0)){
  40490c:	2103      	movs	r1, #3
  40490e:	a801      	add	r0, sp, #4
  404910:	47a8      	blx	r5
  404912:	b928      	cbnz	r0, 404920 <getHumidity+0x70>
 			delay_ms(2);
  404914:	4638      	mov	r0, r7
  404916:	47b0      	blx	r6
  404918:	1e63      	subs	r3, r4, #1
		while((errCtr>0)&&(read_bytes_H(data,3)==0)){
  40491a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40491e:	d1f5      	bne.n	40490c <getHumidity+0x5c>
		}
		humidityMeasurement=(((unsigned int)data[0])<<2)+(((unsigned int)data[1])>>6);//only want the upper ten bits
  404920:	f89d 3004 	ldrb.w	r3, [sp, #4]
  404924:	f89d 4005 	ldrb.w	r4, [sp, #5]
  404928:	09a4      	lsrs	r4, r4, #6
  40492a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		delay_ms(4);//
  40492e:	4822      	ldr	r0, [pc, #136]	; (4049b8 <getHumidity+0x108>)
  404930:	4b1d      	ldr	r3, [pc, #116]	; (4049a8 <getHumidity+0xf8>)
  404932:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404934:	4b21      	ldr	r3, [pc, #132]	; (4049bc <getHumidity+0x10c>)
  404936:	f44f 7180 	mov.w	r1, #256	; 0x100
  40493a:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40493c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404940:	f44f 7200 	mov.w	r2, #512	; 0x200
  404944:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404946:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40494a:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40494c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404950:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404952:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404954:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404958:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40495a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  40495e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404960:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404962:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  404966:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  404968:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40496a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40496e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404970:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404976:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  404978:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  40497c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40497e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404980:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  404984:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404986:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40498a:	2240      	movs	r2, #64	; 0x40
  40498c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40498e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404992:	631a      	str	r2, [r3, #48]	; 0x30
 	ioport_set_pin_mode(ALT_DAT, IOPORT_MODE_PULLUP);//ALT_DAT
 	ioport_set_pin_mode(ALT_CLK, IOPORT_MODE_PULLUP);//ATL_CLK
	ALTPWR_OUTPUT;
	ALTPWR_OFF;
	return(humidityMeasurement);
}
  404994:	4620      	mov	r0, r4
  404996:	b003      	add	sp, #12
  404998:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40499a:	bf00      	nop
  40499c:	004021a9 	.word	0x004021a9
  4049a0:	400e0e00 	.word	0x400e0e00
  4049a4:	000f6f08 	.word	0x000f6f08
  4049a8:	20400001 	.word	0x20400001
  4049ac:	00400cd9 	.word	0x00400cd9
  4049b0:	00400df5 	.word	0x00400df5
  4049b4:	00018b1b 	.word	0x00018b1b
  4049b8:	00031635 	.word	0x00031635
  4049bc:	400e1200 	.word	0x400e1200

004049c0 <mult64bit>:
		return (((compTemperature<<16)&0xFFFF0000)+(compPressure&0x0000FFFF));
 }
/***********************************************************************/
/*  32 x 32 = 64 bit MULTIPLY
/***********************************************************************/
void mult64bit (unsigned int A32,unsigned int B32,unsigned int* resultHigh, unsigned int* resultLow) {
  4049c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int Ahigh,Alow,Bhigh,Blow,BLALL,BLALH,BLAHL,BLAHH,BHALL,BHALH,BHAH,carry;
	Ahigh=(A32>>16)&0x0000FFFF;
  4049c2:	0c04      	lsrs	r4, r0, #16
	Alow=A32&0x0000FFFF;
  4049c4:	b280      	uxth	r0, r0
	Bhigh=(B32>>16)&0x0000FFFF;
  4049c6:	0c0e      	lsrs	r6, r1, #16
	Blow=B32&0x0000FFFF;
  4049c8:	b289      	uxth	r1, r1

	BLALH=Blow*Alow;
  4049ca:	fb01 f700 	mul.w	r7, r1, r0
	BLALL=BLALH;
	BLALH=(BLALH>>16)&0x0000FFFF;
	BLALL&=0x0000FFFF;

	BLAHH=Blow*Ahigh;
  4049ce:	fb01 f104 	mul.w	r1, r1, r4
	BLAHL=BLAHH;
	BLAHH=(BLAHH>>16)&0x0000FFFF;
	BLAHL&=0x0000FFFF;
	BHALH=Bhigh*Alow;
  4049d2:	fb06 f000 	mul.w	r0, r6, r0
	BLAHL&=0x0000FFFF;
  4049d6:	b28d      	uxth	r5, r1
	BHALL=BHALH;
	BHALH=(BHALH>>16)&0x0000FFFF;
	BHALL&=0x0000FFFF;
	BHAH=Bhigh*Ahigh;
	carry=((BLALH+BLAHL+BHALL)&0xFFFF0000)>>16;
  4049d8:	eb05 4517 	add.w	r5, r5, r7, lsr #16
  4049dc:	fa15 f580 	uxtah	r5, r5, r0

	*resultLow=((BLALH+BLAHL+BHALL)<<16)+BLALL;
  4049e0:	ea4f 4e05 	mov.w	lr, r5, lsl #16
  4049e4:	fa1e f787 	uxtah	r7, lr, r7
  4049e8:	601f      	str	r7, [r3, #0]
	BHALH=(BHALH>>16)&0x0000FFFF;
  4049ea:	0c00      	lsrs	r0, r0, #16
	*resultHigh=BLAHH+BHALH+BHAH + carry;
  4049ec:	eb00 4011 	add.w	r0, r0, r1, lsr #16
  4049f0:	fb06 0004 	mla	r0, r6, r4, r0
  4049f4:	eb00 4015 	add.w	r0, r0, r5, lsr #16
  4049f8:	6010      	str	r0, [r2, #0]
  4049fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

004049fc <getAltimeterTemperatureOLD>:
unsigned int getAltimeterTemperatureOLD(void){
  4049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a00:	b08f      	sub	sp, #60	; 0x3c
		pmc_enable_periph_clk(ID_PIOD);
  404a02:	2010      	movs	r0, #16
  404a04:	4bb8      	ldr	r3, [pc, #736]	; (404ce8 <getAltimeterTemperatureOLD+0x2ec>)
  404a06:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404a08:	f8df b304 	ldr.w	fp, [pc, #772]	; 404d10 <getAltimeterTemperatureOLD+0x314>
  404a0c:	2340      	movs	r3, #64	; 0x40
  404a0e:	f8cb 3010 	str.w	r3, [fp, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404a12:	f8cb 30a0 	str.w	r3, [fp, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404a16:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404a1a:	4cb4      	ldr	r4, [pc, #720]	; (404cec <getAltimeterTemperatureOLD+0x2f0>)
  404a1c:	f44f 7800 	mov.w	r8, #512	; 0x200
  404a20:	f8c4 8010 	str.w	r8, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404a24:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404a28:	f44f 7980 	mov.w	r9, #256	; 0x100
  404a2c:	f8c4 9010 	str.w	r9, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404a30:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404a34:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  404a38:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		delay_ms(20);//looked fine even at only 1ms (when repeated every 500ms);
  404a3c:	48ac      	ldr	r0, [pc, #688]	; (404cf0 <getAltimeterTemperatureOLD+0x2f4>)
  404a3e:	4dad      	ldr	r5, [pc, #692]	; (404cf4 <getAltimeterTemperatureOLD+0x2f8>)
  404a40:	47a8      	blx	r5
		data[0]=0x1E;//Altimeter RESET
  404a42:	ab0e      	add	r3, sp, #56	; 0x38
  404a44:	461a      	mov	r2, r3
  404a46:	231e      	movs	r3, #30
  404a48:	f802 3d18 	strb.w	r3, [r2, #-24]!
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  404a4c:	2101      	movs	r1, #1
  404a4e:	4692      	mov	sl, r2
  404a50:	4610      	mov	r0, r2
  404a52:	4fa9      	ldr	r7, [pc, #676]	; (404cf8 <getAltimeterTemperatureOLD+0x2fc>)
  404a54:	47b8      	blx	r7
		delay_ms(4);//datasheet says 2.8ms needed after reset
  404a56:	48a9      	ldr	r0, [pc, #676]	; (404cfc <getAltimeterTemperatureOLD+0x300>)
  404a58:	47a8      	blx	r5
		data[0]=0xA2;//Ax=read PROM
  404a5a:	23a2      	movs	r3, #162	; 0xa2
  404a5c:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  404a60:	2101      	movs	r1, #1
  404a62:	4650      	mov	r0, sl
  404a64:	47b8      	blx	r7
		data[0]=0;data[1]=0;
  404a66:	2600      	movs	r6, #0
  404a68:	f88d 6020 	strb.w	r6, [sp, #32]
  404a6c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
		readRet = read_bytes_A_OLD(data,2);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  404a70:	2102      	movs	r1, #2
  404a72:	f8cd a000 	str.w	sl, [sp]
  404a76:	4650      	mov	r0, sl
  404a78:	f8df a298 	ldr.w	sl, [pc, #664]	; 404d14 <getAltimeterTemperatureOLD+0x318>
  404a7c:	47d0      	blx	sl
		C1=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  404a7e:	f89d 3020 	ldrb.w	r3, [sp, #32]
  404a82:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
  404a86:	eb01 2303 	add.w	r3, r1, r3, lsl #8
  404a8a:	9301      	str	r3, [sp, #4]
		data[0]=0xA4;//Ax=read PROM
  404a8c:	23a4      	movs	r3, #164	; 0xa4
  404a8e:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  404a92:	2101      	movs	r1, #1
  404a94:	9800      	ldr	r0, [sp, #0]
  404a96:	47b8      	blx	r7
		data[0]=0;data[1]=0;
  404a98:	f88d 6020 	strb.w	r6, [sp, #32]
  404a9c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
		readRet = read_bytes_A_OLD(data,2);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  404aa0:	2102      	movs	r1, #2
  404aa2:	9800      	ldr	r0, [sp, #0]
  404aa4:	47d0      	blx	sl
		C2=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  404aa6:	f89d 2020 	ldrb.w	r2, [sp, #32]
  404aaa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  404aae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  404ab2:	9302      	str	r3, [sp, #8]
		data[0]=0xA6;//Ax=read PROM
  404ab4:	23a6      	movs	r3, #166	; 0xa6
  404ab6:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  404aba:	2101      	movs	r1, #1
  404abc:	9800      	ldr	r0, [sp, #0]
  404abe:	47b8      	blx	r7
		data[0]=0;data[1]=0;
  404ac0:	f88d 6020 	strb.w	r6, [sp, #32]
  404ac4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
		readRet = read_bytes_A_OLD(data,2);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  404ac8:	2102      	movs	r1, #2
  404aca:	9800      	ldr	r0, [sp, #0]
  404acc:	47d0      	blx	sl
		C3=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  404ace:	f89d 2020 	ldrb.w	r2, [sp, #32]
  404ad2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  404ad6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  404ada:	9303      	str	r3, [sp, #12]
		data[0]=0xA8;//Ax=read PROM
  404adc:	23a8      	movs	r3, #168	; 0xa8
  404ade:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  404ae2:	2101      	movs	r1, #1
  404ae4:	9800      	ldr	r0, [sp, #0]
  404ae6:	47b8      	blx	r7
		data[0]=0;data[1]=0;
  404ae8:	f88d 6020 	strb.w	r6, [sp, #32]
  404aec:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
		readRet = read_bytes_A_OLD(data,2);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  404af0:	2102      	movs	r1, #2
  404af2:	9800      	ldr	r0, [sp, #0]
  404af4:	47d0      	blx	sl
		C4=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  404af6:	f89d 2020 	ldrb.w	r2, [sp, #32]
  404afa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  404afe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  404b02:	9304      	str	r3, [sp, #16]
		data[0]=0xAA;//Ax=read PROM
  404b04:	23aa      	movs	r3, #170	; 0xaa
  404b06:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  404b0a:	2101      	movs	r1, #1
  404b0c:	9800      	ldr	r0, [sp, #0]
  404b0e:	47b8      	blx	r7
		data[0]=0;data[1]=0;
  404b10:	f88d 6020 	strb.w	r6, [sp, #32]
  404b14:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
		readRet = read_bytes_A_OLD(data,2);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  404b18:	2102      	movs	r1, #2
  404b1a:	9800      	ldr	r0, [sp, #0]
  404b1c:	47d0      	blx	sl
		C5=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  404b1e:	f89d 2020 	ldrb.w	r2, [sp, #32]
  404b22:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  404b26:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  404b2a:	9305      	str	r3, [sp, #20]
		data[0]=0xAC;//Ax=read PROM
  404b2c:	23ac      	movs	r3, #172	; 0xac
  404b2e:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  404b32:	2101      	movs	r1, #1
  404b34:	9800      	ldr	r0, [sp, #0]
  404b36:	47b8      	blx	r7
		data[0]=0;data[1]=0;
  404b38:	f88d 6020 	strb.w	r6, [sp, #32]
  404b3c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
		readRet = read_bytes_A_OLD(data,2);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  404b40:	2102      	movs	r1, #2
  404b42:	9800      	ldr	r0, [sp, #0]
  404b44:	47d0      	blx	sl
		C6=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  404b46:	f89d 2020 	ldrb.w	r2, [sp, #32]
  404b4a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  404b4e:	eb03 2102 	add.w	r1, r3, r2, lsl #8
  404b52:	9106      	str	r1, [sp, #24]
			data[0]=0x48;//48=start conversion of 24 bit pressure
  404b54:	2348      	movs	r3, #72	; 0x48
  404b56:	f88d 3020 	strb.w	r3, [sp, #32]
			writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  404b5a:	2101      	movs	r1, #1
  404b5c:	9800      	ldr	r0, [sp, #0]
  404b5e:	47b8      	blx	r7
			delay_ms(9);//datasheet says 8ms delay for 4096 OverSampling (OSR) bits
  404b60:	4867      	ldr	r0, [pc, #412]	; (404d00 <getAltimeterTemperatureOLD+0x304>)
  404b62:	47a8      	blx	r5
			data[0]=0x00;//00=Read Command
  404b64:	f88d 6020 	strb.w	r6, [sp, #32]
			writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  404b68:	2101      	movs	r1, #1
  404b6a:	9800      	ldr	r0, [sp, #0]
  404b6c:	47b8      	blx	r7
			data[0]=0;data[1]=0;data[2]=0;
  404b6e:	f88d 6020 	strb.w	r6, [sp, #32]
  404b72:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
  404b76:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
			readRet = read_bytes_A_OLD(data,3);//!< write sequentially to the slave "1" sends addr plus data[0].
  404b7a:	2103      	movs	r1, #3
  404b7c:	9800      	ldr	r0, [sp, #0]
  404b7e:	47d0      	blx	sl
			rawPressure+=(((int)data[0])<<16)+(((int)data[1])<<8)+(((int)data[2]));
  404b80:	f89d 2020 	ldrb.w	r2, [sp, #32]
  404b84:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  404b88:	021b      	lsls	r3, r3, #8
  404b8a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
  404b8e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
  404b92:	1899      	adds	r1, r3, r2
  404b94:	9107      	str	r1, [sp, #28]
			data[0]=0x58;//58=start conversion of 24 bit temperature
  404b96:	2358      	movs	r3, #88	; 0x58
  404b98:	f88d 3020 	strb.w	r3, [sp, #32]
			writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  404b9c:	2101      	movs	r1, #1
  404b9e:	9800      	ldr	r0, [sp, #0]
  404ba0:	47b8      	blx	r7
			delay_ms(9);
  404ba2:	4857      	ldr	r0, [pc, #348]	; (404d00 <getAltimeterTemperatureOLD+0x304>)
  404ba4:	47a8      	blx	r5
			data[0]=0x00;//00=Read Command
  404ba6:	f88d 6020 	strb.w	r6, [sp, #32]
			writeRet = write_data_A_OLD(data,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  404baa:	2101      	movs	r1, #1
  404bac:	9d00      	ldr	r5, [sp, #0]
  404bae:	4628      	mov	r0, r5
  404bb0:	47b8      	blx	r7
			data[0]=0;data[1]=0;data[2]=0;
  404bb2:	f88d 6020 	strb.w	r6, [sp, #32]
  404bb6:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
  404bba:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
			readRet = read_bytes_A_OLD(data,3);//!< write sequentially to the slave "1" sends addr plus data[0].
  404bbe:	2103      	movs	r1, #3
  404bc0:	4628      	mov	r0, r5
  404bc2:	47d0      	blx	sl
			rawTemperature+=(((unsigned int)data[0])<<16)+(((unsigned int)data[1])<<8)+(((unsigned int)data[2]));
  404bc4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  404bc8:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
  404bcc:	022d      	lsls	r5, r5, #8
  404bce:	eb05 4503 	add.w	r5, r5, r3, lsl #16
  404bd2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
  404bd6:	442b      	add	r3, r5
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404bd8:	f8c4 9014 	str.w	r9, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404bdc:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404be0:	f8c4 8014 	str.w	r8, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404be4:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  404be8:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  404bec:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  404bf0:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  404bf4:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404bf8:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404bfc:	6f22      	ldr	r2, [r4, #112]	; 0x70
  404bfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  404c02:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404c04:	6f62      	ldr	r2, [r4, #116]	; 0x74
  404c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  404c0a:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  404c0c:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  404c10:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  404c14:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  404c18:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404c1c:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404c20:	6f22      	ldr	r2, [r4, #112]	; 0x70
  404c22:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  404c26:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404c28:	6f62      	ldr	r2, [r4, #116]	; 0x74
  404c2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  404c2e:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404c30:	2140      	movs	r1, #64	; 0x40
  404c32:	f8cb 1010 	str.w	r1, [fp, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404c36:	f8cb 10a0 	str.w	r1, [fp, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404c3a:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
			C5=C5<<8;
  404c3e:	9a05      	ldr	r2, [sp, #20]
  404c40:	0215      	lsls	r5, r2, #8
			if(rawTemperature>C5){
  404c42:	42ab      	cmp	r3, r5
  404c44:	d868      	bhi.n	404d18 <getAltimeterTemperatureOLD+0x31c>
					dT=C5-rawTemperature;//dT is negative
  404c46:	1aed      	subs	r5, r5, r3
					mult64bit(dT,C6,&HH64,&LL64);//28325
  404c48:	ab0c      	add	r3, sp, #48	; 0x30
  404c4a:	aa0d      	add	r2, sp, #52	; 0x34
  404c4c:	9906      	ldr	r1, [sp, #24]
  404c4e:	4628      	mov	r0, r5
  404c50:	4c2c      	ldr	r4, [pc, #176]	; (404d04 <getAltimeterTemperatureOLD+0x308>)
  404c52:	47a0      	blx	r4
					below20 = ((int)((LL64>>23)+(HH64<<9)));
  404c54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  404c56:	0264      	lsls	r4, r4, #9
  404c58:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c5a:	eb04 54d0 	add.w	r4, r4, r0, lsr #23
						compTemperature = 0-(below20-2000);
  404c5e:	f5c4 64fa 	rsb	r4, r4, #2000	; 0x7d0
						mult64bit(C4,dT,&HH64,&LL64);
  404c62:	ab0c      	add	r3, sp, #48	; 0x30
  404c64:	aa0d      	add	r2, sp, #52	; 0x34
  404c66:	4629      	mov	r1, r5
  404c68:	9804      	ldr	r0, [sp, #16]
  404c6a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 404d04 <getAltimeterTemperatureOLD+0x308>
  404c6e:	47c0      	blx	r8
						OFF_L+=(HH64<<25);
  404c70:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  404c72:	067e      	lsls	r6, r7, #25
  404c74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404c76:	eb06 16d3 	add.w	r6, r6, r3, lsr #7
						mult64bit(C3,dT,&HH64,&LL64);
  404c7a:	ab0c      	add	r3, sp, #48	; 0x30
  404c7c:	aa0d      	add	r2, sp, #52	; 0x34
  404c7e:	4629      	mov	r1, r5
  404c80:	9803      	ldr	r0, [sp, #12]
  404c82:	47c0      	blx	r8
						SENS_L+=(HH64<<24);
  404c84:	990d      	ldr	r1, [sp, #52]	; 0x34
  404c86:	060b      	lsls	r3, r1, #24
  404c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404c8a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
						SENS_LL=SENS_L&0x00007FFF;
  404c8e:	f3c3 000e 	ubfx	r0, r3, #0, #15
						SENS_H=(HH64>>8)&0x00FFFFFF;
  404c92:	0a09      	lsrs	r1, r1, #8
						SENS_M=C1-SENS_M;
  404c94:	9a01      	ldr	r2, [sp, #4]
  404c96:	eba2 4141 	sub.w	r1, r2, r1, lsl #17
  404c9a:	eba1 31d3 	sub.w	r1, r1, r3, lsr #15
						mult64bit(rawPressure,SENS_L,&HH64,&LL64);
  404c9e:	ab0c      	add	r3, sp, #48	; 0x30
  404ca0:	aa0d      	add	r2, sp, #52	; 0x34
  404ca2:	eb00 31c1 	add.w	r1, r0, r1, lsl #15
  404ca6:	9807      	ldr	r0, [sp, #28]
  404ca8:	47c0      	blx	r8
						compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  404caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404cac:	02db      	lsls	r3, r3, #11
  404cae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404cb0:	eb03 5352 	add.w	r3, r3, r2, lsr #21
						OFF_LL=OFF_L&0x0000FFFF;
  404cb4:	b2b2      	uxth	r2, r6
						compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  404cb6:	1a9b      	subs	r3, r3, r2
						OFF_H=(HH64>>7)&0x01FFFFFF;
  404cb8:	09ff      	lsrs	r7, r7, #7
						OFF_M=C2-OFF_M;
  404cba:	9a02      	ldr	r2, [sp, #8]
  404cbc:	eba2 4707 	sub.w	r7, r2, r7, lsl #16
  404cc0:	eba7 4616 	sub.w	r6, r7, r6, lsr #16
						compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  404cc4:	eba3 4306 	sub.w	r3, r3, r6, lsl #16
  404cc8:	0bdb      	lsrs	r3, r3, #15
		compTemperature/=10;
  404cca:	480f      	ldr	r0, [pc, #60]	; (404d08 <getAltimeterTemperatureOLD+0x30c>)
  404ccc:	fb80 2004 	smull	r2, r0, r0, r4
  404cd0:	17e4      	asrs	r4, r4, #31
  404cd2:	ebc4 00a0 	rsb	r0, r4, r0, asr #2
		compPressure/=10;
  404cd6:	4e0d      	ldr	r6, [pc, #52]	; (404d0c <getAltimeterTemperatureOLD+0x310>)
  404cd8:	fba6 2303 	umull	r2, r3, r6, r3
		return (((compTemperature<<16)&0xFFFF0000)+(compPressure&0x0000FFFF));
  404cdc:	08db      	lsrs	r3, r3, #3
 }
  404cde:	eb03 4000 	add.w	r0, r3, r0, lsl #16
  404ce2:	b00f      	add	sp, #60	; 0x3c
  404ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ce8:	004021a9 	.word	0x004021a9
  404cec:	400e1200 	.word	0x400e1200
  404cf0:	000f6f08 	.word	0x000f6f08
  404cf4:	20400001 	.word	0x20400001
  404cf8:	004009f9 	.word	0x004009f9
  404cfc:	00031635 	.word	0x00031635
  404d00:	0006f1f7 	.word	0x0006f1f7
  404d04:	004049c1 	.word	0x004049c1
  404d08:	66666667 	.word	0x66666667
  404d0c:	cccccccd 	.word	0xcccccccd
  404d10:	400e0e00 	.word	0x400e0e00
  404d14:	00400b15 	.word	0x00400b15
				dT=rawTemperature-C5;//dT is positive
  404d18:	1b5d      	subs	r5, r3, r5
				mult64bit(dT,C6,&HH64,&LL64);
  404d1a:	ab0c      	add	r3, sp, #48	; 0x30
  404d1c:	aa0d      	add	r2, sp, #52	; 0x34
  404d1e:	9906      	ldr	r1, [sp, #24]
  404d20:	4628      	mov	r0, r5
  404d22:	4e1b      	ldr	r6, [pc, #108]	; (404d90 <getAltimeterTemperatureOLD+0x394>)
  404d24:	47b0      	blx	r6
				compTemperature=((int)((LL64>>23)+(HH64<<9)))+2000;
  404d26:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  404d28:	0264      	lsls	r4, r4, #9
  404d2a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d2c:	eb04 54d0 	add.w	r4, r4, r0, lsr #23
  404d30:	f504 64fa 	add.w	r4, r4, #2000	; 0x7d0
				mult64bit(C4,dT,&HH64,&LL64);
  404d34:	ab0c      	add	r3, sp, #48	; 0x30
  404d36:	aa0d      	add	r2, sp, #52	; 0x34
  404d38:	4629      	mov	r1, r5
  404d3a:	9804      	ldr	r0, [sp, #16]
  404d3c:	47b0      	blx	r6
				OFF_L+=(HH64<<25);
  404d3e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  404d40:	067f      	lsls	r7, r7, #25
  404d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404d44:	eb07 17d3 	add.w	r7, r7, r3, lsr #7
				mult64bit(C3,dT,&HH64,&LL64);
  404d48:	ab0c      	add	r3, sp, #48	; 0x30
  404d4a:	aa0d      	add	r2, sp, #52	; 0x34
  404d4c:	4629      	mov	r1, r5
  404d4e:	9803      	ldr	r0, [sp, #12]
  404d50:	47b0      	blx	r6
				SENS_L+=(HH64<<24);
  404d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404d54:	061b      	lsls	r3, r3, #24
  404d56:	990c      	ldr	r1, [sp, #48]	; 0x30
  404d58:	eb03 2311 	add.w	r3, r3, r1, lsr #8
				SENS_LL=SENS_L&0x00007FFF;
  404d5c:	f3c3 000e 	ubfx	r0, r3, #0, #15
				SENS_M=(SENS_H<<17)+(SENS_L>>15)+C1;
  404d60:	9a01      	ldr	r2, [sp, #4]
  404d62:	eb02 31d3 	add.w	r1, r2, r3, lsr #15
				mult64bit(rawPressure,SENS_L,&HH64,&LL64);
  404d66:	ab0c      	add	r3, sp, #48	; 0x30
  404d68:	aa0d      	add	r2, sp, #52	; 0x34
  404d6a:	eb00 31c1 	add.w	r1, r0, r1, lsl #15
  404d6e:	9807      	ldr	r0, [sp, #28]
  404d70:	47b0      	blx	r6
				compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  404d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404d74:	02db      	lsls	r3, r3, #11
  404d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404d78:	eb03 5352 	add.w	r3, r3, r2, lsr #21
				OFF_LL=OFF_L&0x0000FFFF;
  404d7c:	b2ba      	uxth	r2, r7
				compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  404d7e:	1a9b      	subs	r3, r3, r2
				OFF_M=(OFF_H<<16)+(OFF_L>>16)+C2;
  404d80:	9a02      	ldr	r2, [sp, #8]
  404d82:	eb02 4717 	add.w	r7, r2, r7, lsr #16
				compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  404d86:	eba3 4307 	sub.w	r3, r3, r7, lsl #16
  404d8a:	0bdb      	lsrs	r3, r3, #15
  404d8c:	e79d      	b.n	404cca <getAltimeterTemperatureOLD+0x2ce>
  404d8e:	bf00      	nop
  404d90:	004049c1 	.word	0x004049c1

00404d94 <configPinsSDRAM>:
	}
}
/***********************************************************************
 *    CONFIGURE SDRAM PINS
 ***********************************************************************/
void configPinsSDRAM(void){
  404d94:	b510      	push	{r4, lr}
	pio_configure_pin(SDRAM_A0_PIO, SDRAM_A_FLAGS);	//V71 A2
  404d96:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404d9a:	2054      	movs	r0, #84	; 0x54
  404d9c:	4c4d      	ldr	r4, [pc, #308]	; (404ed4 <configPinsSDRAM+0x140>)
  404d9e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A1_PIO, SDRAM_A_FLAGS);	//V71 A3
  404da0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404da4:	2055      	movs	r0, #85	; 0x55
  404da6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);	//V71 A4
  404da8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404dac:	2056      	movs	r0, #86	; 0x56
  404dae:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  //V71 A5
  404db0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404db4:	2057      	movs	r0, #87	; 0x57
  404db6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  //V71 A6
  404db8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404dbc:	2058      	movs	r0, #88	; 0x58
  404dbe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  //V71 A7
  404dc0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404dc4:	2059      	movs	r0, #89	; 0x59
  404dc6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  //V71 A8
  404dc8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404dcc:	205a      	movs	r0, #90	; 0x5a
  404dce:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  //V71 A9
  404dd0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404dd4:	205b      	movs	r0, #91	; 0x5b
  404dd6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);	 //V71 A10
  404dd8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404ddc:	205c      	movs	r0, #92	; 0x5c
  404dde:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  //V71 A11
  404de0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404de4:	205d      	movs	r0, #93	; 0x5d
  404de6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS); //V71 SDA10
  404de8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404dec:	206d      	movs	r0, #109	; 0x6d
  404dee:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A13_FLAGS); //V71 A13
  404df0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404df4:	205f      	movs	r0, #95	; 0x5f
  404df6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A12_PIO, SDRAM_A14_FLAGS); //V71 A14
  404df8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404dfc:	2012      	movs	r0, #18
  404dfe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  404e00:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404e04:	2014      	movs	r0, #20
  404e06:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA1_PIO, SDRAM_BA1_FLAGS);
  404e08:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404e0c:	2000      	movs	r0, #0
  404e0e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  404e10:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404e14:	2077      	movs	r0, #119	; 0x77
  404e16:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  404e18:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404e1c:	206e      	movs	r0, #110	; 0x6e
  404e1e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  404e20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404e24:	204f      	movs	r0, #79	; 0x4f
  404e26:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  404e28:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404e2c:	2070      	movs	r0, #112	; 0x70
  404e2e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  404e30:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404e34:	2071      	movs	r0, #113	; 0x71
  404e36:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  404e38:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404e3c:	207d      	movs	r0, #125	; 0x7d
  404e3e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  404e40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404e44:	2052      	movs	r0, #82	; 0x52
  404e46:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  404e48:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404e4c:	206f      	movs	r0, #111	; 0x6f
  404e4e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);
  404e50:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404e54:	2040      	movs	r0, #64	; 0x40
  404e56:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);
  404e58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404e5c:	2041      	movs	r0, #65	; 0x41
  404e5e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);
  404e60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404e64:	2042      	movs	r0, #66	; 0x42
  404e66:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);
  404e68:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404e6c:	2043      	movs	r0, #67	; 0x43
  404e6e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);
  404e70:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404e74:	2044      	movs	r0, #68	; 0x44
  404e76:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);
  404e78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404e7c:	2045      	movs	r0, #69	; 0x45
  404e7e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);
  404e80:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404e84:	2046      	movs	r0, #70	; 0x46
  404e86:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);
  404e88:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404e8c:	2047      	movs	r0, #71	; 0x47
  404e8e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);
  404e90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404e94:	2080      	movs	r0, #128	; 0x80
  404e96:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);
  404e98:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404e9c:	2081      	movs	r0, #129	; 0x81
  404e9e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS);
  404ea0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404ea4:	2082      	movs	r0, #130	; 0x82
  404ea6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS);
  404ea8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404eac:	2083      	movs	r0, #131	; 0x83
  404eae:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS);
  404eb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404eb4:	2084      	movs	r0, #132	; 0x84
  404eb6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS);
  404eb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404ebc:	2085      	movs	r0, #133	; 0x85
  404ebe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS);
  404ec0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404ec4:	200f      	movs	r0, #15
  404ec6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS);
  404ec8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404ecc:	2010      	movs	r0, #16
  404ece:	47a0      	blx	r4
  404ed0:	bd10      	pop	{r4, pc}
  404ed2:	bf00      	nop
  404ed4:	00401e8d 	.word	0x00401e8d

00404ed8 <SDRAMtest>:
void SDRAMtest (void){
  404ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404edc:	b095      	sub	sp, #84	; 0x54
    ccsidr  = SCB->CCSIDR;
  404ede:	4bc3      	ldr	r3, [pc, #780]	; (4051ec <SDRAMtest+0x314>)
  404ee0:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  404ee4:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404ee8:	f006 0007 	and.w	r0, r6, #7
  404eec:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  404eee:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404ef2:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  404ef6:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  404efa:	f3bf 8f4f 	dsb	sy
  404efe:	f04f 34ff 	mov.w	r4, #4294967295
  404f02:	fa04 fc00 	lsl.w	ip, r4, r0
  404f06:	fa0e f000 	lsl.w	r0, lr, r0
  404f0a:	409c      	lsls	r4, r3
  404f0c:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCISW = sw;
  404f10:	4db6      	ldr	r5, [pc, #728]	; (4051ec <SDRAMtest+0x314>)
         int32_t tmpways = ways;
  404f12:	4632      	mov	r2, r6
  404f14:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  404f16:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  404f1a:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  404f1e:	3a01      	subs	r2, #1
  404f20:	4423      	add	r3, r4
  404f22:	f1b2 3fff 	cmp.w	r2, #4294967295
  404f26:	d1f6      	bne.n	404f16 <SDRAMtest+0x3e>
        } while(sets--);
  404f28:	f10e 3eff 	add.w	lr, lr, #4294967295
  404f2c:	4460      	add	r0, ip
  404f2e:	f1be 3fff 	cmp.w	lr, #4294967295
  404f32:	d1ee      	bne.n	404f12 <SDRAMtest+0x3a>
  404f34:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  404f38:	4bac      	ldr	r3, [pc, #688]	; (4051ec <SDRAMtest+0x314>)
  404f3a:	695a      	ldr	r2, [r3, #20]
  404f3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  404f40:	615a      	str	r2, [r3, #20]
  404f42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404f46:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  404f4a:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  404f4e:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404f52:	f006 0007 	and.w	r0, r6, #7
  404f56:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  404f58:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404f5c:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  404f60:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  404f64:	f3bf 8f4f 	dsb	sy
  404f68:	f04f 34ff 	mov.w	r4, #4294967295
  404f6c:	fa04 fc00 	lsl.w	ip, r4, r0
  404f70:	fa0e f000 	lsl.w	r0, lr, r0
  404f74:	409c      	lsls	r4, r3
  404f76:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCCISW = sw;
  404f7a:	4d9c      	ldr	r5, [pc, #624]	; (4051ec <SDRAMtest+0x314>)
         int32_t tmpways = ways;
  404f7c:	4632      	mov	r2, r6
  404f7e:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  404f80:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  404f84:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  404f88:	3a01      	subs	r2, #1
  404f8a:	4423      	add	r3, r4
  404f8c:	f1b2 3fff 	cmp.w	r2, #4294967295
  404f90:	d1f6      	bne.n	404f80 <SDRAMtest+0xa8>
        } while(sets--);
  404f92:	f10e 3eff 	add.w	lr, lr, #4294967295
  404f96:	4460      	add	r0, ip
  404f98:	f1be 3fff 	cmp.w	lr, #4294967295
  404f9c:	d1ee      	bne.n	404f7c <SDRAMtest+0xa4>
  404f9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404fa2:	f3bf 8f6f 	isb	sy
  404fa6:	4c92      	ldr	r4, [pc, #584]	; (4051f0 <SDRAMtest+0x318>)
  404fa8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  404fac:	6323      	str	r3, [r4, #48]	; 0x30
	pmc_enable_periph_clk(ID_SDRAMC);
  404fae:	203e      	movs	r0, #62	; 0x3e
  404fb0:	4b90      	ldr	r3, [pc, #576]	; (4051f4 <SDRAMtest+0x31c>)
  404fb2:	4798      	blx	r3
	configPinsSDRAM();
  404fb4:	4b90      	ldr	r3, [pc, #576]	; (4051f8 <SDRAMtest+0x320>)
  404fb6:	4798      	blx	r3
	printf("SRAM\r\n");
  404fb8:	4890      	ldr	r0, [pc, #576]	; (4051fc <SDRAMtest+0x324>)
  404fba:	4d91      	ldr	r5, [pc, #580]	; (405200 <SDRAMtest+0x328>)
  404fbc:	47a8      	blx	r5
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
  404fc2:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404fc4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404fc8:	6323      	str	r3, [r4, #48]	; 0x30
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_INSIGNIS_16M,	sysclk_get_cpu_hz());
  404fca:	498e      	ldr	r1, [pc, #568]	; (405204 <SDRAMtest+0x32c>)
  404fcc:	488e      	ldr	r0, [pc, #568]	; (405208 <SDRAMtest+0x330>)
  404fce:	4b8f      	ldr	r3, [pc, #572]	; (40520c <SDRAMtest+0x334>)
  404fd0:	4798      	blx	r3
/**
 * \brief Unaligned access is supported.
 */
static inline void sdram_enable_unaligned_support(void)
{
	SDRAMC->SDRAMC_CFR1 |= SDRAMC_CFR1_UNAL;
  404fd2:	4a8f      	ldr	r2, [pc, #572]	; (405210 <SDRAMtest+0x338>)
  404fd4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  404fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404fda:	6293      	str	r3, [r2, #40]	; 0x28
	printf("SRAM COMPLETE\r\n");
  404fdc:	488d      	ldr	r0, [pc, #564]	; (405214 <SDRAMtest+0x33c>)
  404fde:	47a8      	blx	r5
	delay_ms(200);
  404fe0:	488d      	ldr	r0, [pc, #564]	; (405218 <SDRAMtest+0x340>)
  404fe2:	4b8e      	ldr	r3, [pc, #568]	; (40521c <SDRAMtest+0x344>)
  404fe4:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  404fe6:	4b81      	ldr	r3, [pc, #516]	; (4051ec <SDRAMtest+0x314>)
  404fe8:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  404fec:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404ff0:	f006 0007 	and.w	r0, r6, #7
  404ff4:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  404ff6:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404ffa:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  404ffe:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  405002:	f3bf 8f4f 	dsb	sy
  405006:	f04f 34ff 	mov.w	r4, #4294967295
  40500a:	fa04 fc00 	lsl.w	ip, r4, r0
  40500e:	fa0e f000 	lsl.w	r0, lr, r0
  405012:	409c      	lsls	r4, r3
  405014:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCCISW = sw;
  405018:	4d74      	ldr	r5, [pc, #464]	; (4051ec <SDRAMtest+0x314>)
         int32_t tmpways = ways;
  40501a:	4632      	mov	r2, r6
  40501c:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40501e:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  405022:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  405026:	3a01      	subs	r2, #1
  405028:	4423      	add	r3, r4
  40502a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40502e:	d1f6      	bne.n	40501e <SDRAMtest+0x146>
        } while(sets--);
  405030:	f10e 3eff 	add.w	lr, lr, #4294967295
  405034:	4460      	add	r0, ip
  405036:	f1be 3fff 	cmp.w	lr, #4294967295
  40503a:	d1ee      	bne.n	40501a <SDRAMtest+0x142>
  40503c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405040:	f3bf 8f6f 	isb	sy
  405044:	f8df a238 	ldr.w	sl, [pc, #568]	; 405280 <SDRAMtest+0x3a8>
  405048:	f8df 9238 	ldr.w	r9, [pc, #568]	; 405284 <SDRAMtest+0x3ac>
  40504c:	f8df 8238 	ldr.w	r8, [pc, #568]	; 405288 <SDRAMtest+0x3b0>
  405050:	f8df c238 	ldr.w	ip, [pc, #568]	; 40528c <SDRAMtest+0x3b4>
  405054:	f8df e238 	ldr.w	lr, [pc, #568]	; 405290 <SDRAMtest+0x3b8>
  405058:	f8df b238 	ldr.w	fp, [pc, #568]	; 405294 <SDRAMtest+0x3bc>
  40505c:	4f70      	ldr	r7, [pc, #448]	; (405220 <SDRAMtest+0x348>)
		*camBuffPtr++=0xFF;//WHITE
  40505e:	21ff      	movs	r1, #255	; 0xff
		*camBuffPtr++=0x07;//YEL
  405060:	2607      	movs	r6, #7
		*camBuffPtr++=0xE0;
  405062:	25e0      	movs	r5, #224	; 0xe0
		*camBuffPtr++=0xF8;//MAGENTA
  405064:	24f8      	movs	r4, #248	; 0xf8
		*camBuffPtr++=0x1F;
  405066:	201f      	movs	r0, #31
		*camBuffPtr++=0x00;//RED
  405068:	2200      	movs	r2, #0
  40506a:	f5a7 632f 	sub.w	r3, r7, #2800	; 0xaf0
		*camBuffPtr++=0xFF;//WHITE
  40506e:	f803 1c02 	strb.w	r1, [r3, #-2]
		*camBuffPtr++=0xFF;
  405072:	f803 1c01 	strb.w	r1, [r3, #-1]
  405076:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  405078:	4553      	cmp	r3, sl
  40507a:	d1f8      	bne.n	40506e <SDRAMtest+0x196>
		*camBuffPtr++=0x07;//YEL
  40507c:	f803 6c02 	strb.w	r6, [r3, #-2]
		*camBuffPtr++=0xFF;
  405080:	f803 1c01 	strb.w	r1, [r3, #-1]
  405084:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  405086:	454b      	cmp	r3, r9
  405088:	d1f8      	bne.n	40507c <SDRAMtest+0x1a4>
		*camBuffPtr++=0xFF;//CYAN
  40508a:	f803 1c02 	strb.w	r1, [r3, #-2]
		*camBuffPtr++=0xE0;
  40508e:	f803 5c01 	strb.w	r5, [r3, #-1]
  405092:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  405094:	4543      	cmp	r3, r8
  405096:	d1f8      	bne.n	40508a <SDRAMtest+0x1b2>
		*camBuffPtr++=0x07;//GREEN
  405098:	f803 6c02 	strb.w	r6, [r3, #-2]
		*camBuffPtr++=0xE0;
  40509c:	f803 5c01 	strb.w	r5, [r3, #-1]
  4050a0:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  4050a2:	4563      	cmp	r3, ip
  4050a4:	d1f8      	bne.n	405098 <SDRAMtest+0x1c0>
		*camBuffPtr++=0xF8;//MAGENTA
  4050a6:	f803 4c02 	strb.w	r4, [r3, #-2]
		*camBuffPtr++=0x1F;
  4050aa:	f803 0c01 	strb.w	r0, [r3, #-1]
  4050ae:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  4050b0:	4573      	cmp	r3, lr
  4050b2:	d1f8      	bne.n	4050a6 <SDRAMtest+0x1ce>
		*camBuffPtr++=0x00;//RED
  4050b4:	f803 2c02 	strb.w	r2, [r3, #-2]
		*camBuffPtr++=0x1F;
  4050b8:	f803 0c01 	strb.w	r0, [r3, #-1]
  4050bc:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  4050be:	455b      	cmp	r3, fp
  4050c0:	d1f8      	bne.n	4050b4 <SDRAMtest+0x1dc>
		*camBuffPtr++=0xF8;//BLUE
  4050c2:	f803 4c02 	strb.w	r4, [r3, #-2]
		*camBuffPtr++=0x00;
  4050c6:	f803 2c01 	strb.w	r2, [r3, #-1]
  4050ca:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  4050cc:	42bb      	cmp	r3, r7
  4050ce:	d1f8      	bne.n	4050c2 <SDRAMtest+0x1ea>
  4050d0:	9312      	str	r3, [sp, #72]	; 0x48
  4050d2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
  4050d6:	9313      	str	r3, [sp, #76]	; 0x4c
  4050d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4050da:	9712      	str	r7, [sp, #72]	; 0x48
  4050dc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
		*camBuffPtr++=0x00;//BLACK
  4050de:	f803 2c02 	strb.w	r2, [r3, #-2]
		*camBuffPtr++=0x00;
  4050e2:	f803 2c01 	strb.w	r2, [r3, #-1]
  4050e6:	3302      	adds	r3, #2
	for(barCtr=0;barCtr<400;barCtr+=2){
  4050e8:	42bb      	cmp	r3, r7
  4050ea:	d1f8      	bne.n	4050de <SDRAMtest+0x206>
  4050ec:	9f12      	ldr	r7, [sp, #72]	; 0x48
  4050ee:	f507 6748 	add.w	r7, r7, #3200	; 0xc80
  4050f2:	f50b 6b48 	add.w	fp, fp, #3200	; 0xc80
  4050f6:	f50e 6e48 	add.w	lr, lr, #3200	; 0xc80
  4050fa:	f50c 6c48 	add.w	ip, ip, #3200	; 0xc80
  4050fe:	f508 6848 	add.w	r8, r8, #3200	; 0xc80
  405102:	f509 6948 	add.w	r9, r9, #3200	; 0xc80
  405106:	f50a 6a48 	add.w	sl, sl, #3200	; 0xc80
 	for(rowCtr=0;rowCtr<1200;rowCtr++){
  40510a:	4b46      	ldr	r3, [pc, #280]	; (405224 <SDRAMtest+0x34c>)
  40510c:	429f      	cmp	r7, r3
  40510e:	d1ac      	bne.n	40506a <SDRAMtest+0x192>
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  405110:	4a45      	ldr	r2, [pc, #276]	; (405228 <SDRAMtest+0x350>)
  405112:	4b46      	ldr	r3, [pc, #280]	; (40522c <SDRAMtest+0x354>)
  405114:	601a      	str	r2, [r3, #0]
    ccsidr  = SCB->CCSIDR;
  405116:	4b35      	ldr	r3, [pc, #212]	; (4051ec <SDRAMtest+0x314>)
  405118:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40511c:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  405120:	f006 0007 	and.w	r0, r6, #7
  405124:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  405126:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40512a:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  40512e:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  405132:	f3bf 8f4f 	dsb	sy
  405136:	f04f 34ff 	mov.w	r4, #4294967295
  40513a:	fa04 fc00 	lsl.w	ip, r4, r0
  40513e:	fa0e f000 	lsl.w	r0, lr, r0
  405142:	409c      	lsls	r4, r3
  405144:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCCISW = sw;
  405148:	4d28      	ldr	r5, [pc, #160]	; (4051ec <SDRAMtest+0x314>)
         int32_t tmpways = ways;
  40514a:	4632      	mov	r2, r6
  40514c:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40514e:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  405152:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  405156:	3a01      	subs	r2, #1
  405158:	4423      	add	r3, r4
  40515a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40515e:	d1f6      	bne.n	40514e <SDRAMtest+0x276>
        } while(sets--);
  405160:	f10e 3eff 	add.w	lr, lr, #4294967295
  405164:	4460      	add	r0, ip
  405166:	f1be 3fff 	cmp.w	lr, #4294967295
  40516a:	d1ee      	bne.n	40514a <SDRAMtest+0x272>
  40516c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405170:	f3bf 8f6f 	isb	sy
	printf("%X %X\r\n",camBuffPtr,*camBuffPtr++);
  405174:	4d2e      	ldr	r5, [pc, #184]	; (405230 <SDRAMtest+0x358>)
  405176:	4e2f      	ldr	r6, [pc, #188]	; (405234 <SDRAMtest+0x35c>)
  405178:	782a      	ldrb	r2, [r5, #0]
  40517a:	4631      	mov	r1, r6
  40517c:	482e      	ldr	r0, [pc, #184]	; (405238 <SDRAMtest+0x360>)
  40517e:	4c20      	ldr	r4, [pc, #128]	; (405200 <SDRAMtest+0x328>)
  405180:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  405182:	7833      	ldrb	r3, [r6, #0]
  405184:	782a      	ldrb	r2, [r5, #0]
  405186:	4d2d      	ldr	r5, [pc, #180]	; (40523c <SDRAMtest+0x364>)
  405188:	492d      	ldr	r1, [pc, #180]	; (405240 <SDRAMtest+0x368>)
  40518a:	7809      	ldrb	r1, [r1, #0]
  40518c:	9111      	str	r1, [sp, #68]	; 0x44
  40518e:	492d      	ldr	r1, [pc, #180]	; (405244 <SDRAMtest+0x36c>)
  405190:	7809      	ldrb	r1, [r1, #0]
  405192:	9110      	str	r1, [sp, #64]	; 0x40
  405194:	492c      	ldr	r1, [pc, #176]	; (405248 <SDRAMtest+0x370>)
  405196:	7809      	ldrb	r1, [r1, #0]
  405198:	910f      	str	r1, [sp, #60]	; 0x3c
  40519a:	492c      	ldr	r1, [pc, #176]	; (40524c <SDRAMtest+0x374>)
  40519c:	7809      	ldrb	r1, [r1, #0]
  40519e:	910e      	str	r1, [sp, #56]	; 0x38
  4051a0:	492b      	ldr	r1, [pc, #172]	; (405250 <SDRAMtest+0x378>)
  4051a2:	7809      	ldrb	r1, [r1, #0]
  4051a4:	910d      	str	r1, [sp, #52]	; 0x34
  4051a6:	492b      	ldr	r1, [pc, #172]	; (405254 <SDRAMtest+0x37c>)
  4051a8:	7809      	ldrb	r1, [r1, #0]
  4051aa:	910c      	str	r1, [sp, #48]	; 0x30
  4051ac:	492a      	ldr	r1, [pc, #168]	; (405258 <SDRAMtest+0x380>)
  4051ae:	7809      	ldrb	r1, [r1, #0]
  4051b0:	910b      	str	r1, [sp, #44]	; 0x2c
  4051b2:	492a      	ldr	r1, [pc, #168]	; (40525c <SDRAMtest+0x384>)
  4051b4:	7809      	ldrb	r1, [r1, #0]
  4051b6:	910a      	str	r1, [sp, #40]	; 0x28
  4051b8:	4929      	ldr	r1, [pc, #164]	; (405260 <SDRAMtest+0x388>)
  4051ba:	7809      	ldrb	r1, [r1, #0]
  4051bc:	9109      	str	r1, [sp, #36]	; 0x24
  4051be:	4929      	ldr	r1, [pc, #164]	; (405264 <SDRAMtest+0x38c>)
  4051c0:	7809      	ldrb	r1, [r1, #0]
  4051c2:	9108      	str	r1, [sp, #32]
  4051c4:	4928      	ldr	r1, [pc, #160]	; (405268 <SDRAMtest+0x390>)
  4051c6:	7809      	ldrb	r1, [r1, #0]
  4051c8:	9107      	str	r1, [sp, #28]
  4051ca:	4928      	ldr	r1, [pc, #160]	; (40526c <SDRAMtest+0x394>)
  4051cc:	7809      	ldrb	r1, [r1, #0]
  4051ce:	9106      	str	r1, [sp, #24]
  4051d0:	4927      	ldr	r1, [pc, #156]	; (405270 <SDRAMtest+0x398>)
  4051d2:	7809      	ldrb	r1, [r1, #0]
  4051d4:	9105      	str	r1, [sp, #20]
  4051d6:	4927      	ldr	r1, [pc, #156]	; (405274 <SDRAMtest+0x39c>)
  4051d8:	7809      	ldrb	r1, [r1, #0]
  4051da:	9104      	str	r1, [sp, #16]
  4051dc:	4926      	ldr	r1, [pc, #152]	; (405278 <SDRAMtest+0x3a0>)
  4051de:	7809      	ldrb	r1, [r1, #0]
  4051e0:	9103      	str	r1, [sp, #12]
  4051e2:	4926      	ldr	r1, [pc, #152]	; (40527c <SDRAMtest+0x3a4>)
  4051e4:	7809      	ldrb	r1, [r1, #0]
  4051e6:	9102      	str	r1, [sp, #8]
  4051e8:	e056      	b.n	405298 <SDRAMtest+0x3c0>
  4051ea:	bf00      	nop
  4051ec:	e000ed00 	.word	0xe000ed00
  4051f0:	400e0e00 	.word	0x400e0e00
  4051f4:	004021a9 	.word	0x004021a9
  4051f8:	00404d95 	.word	0x00404d95
  4051fc:	0040ab64 	.word	0x0040ab64
  405200:	004079b1 	.word	0x004079b1
  405204:	11e1a300 	.word	0x11e1a300
  405208:	0040ab58 	.word	0x0040ab58
  40520c:	00401345 	.word	0x00401345
  405210:	40084000 	.word	0x40084000
  405214:	0040ab6c 	.word	0x0040ab6c
  405218:	009a5649 	.word	0x009a5649
  40521c:	20400001 	.word	0x20400001
  405220:	70000af2 	.word	0x70000af2
  405224:	703aa2f2 	.word	0x703aa2f2
  405228:	a5000001 	.word	0xa5000001
  40522c:	400e1850 	.word	0x400e1850
  405230:	710000ee 	.word	0x710000ee
  405234:	710000ef 	.word	0x710000ef
  405238:	0040ab7c 	.word	0x0040ab7c
  40523c:	0040ab84 	.word	0x0040ab84
  405240:	71000101 	.word	0x71000101
  405244:	71000100 	.word	0x71000100
  405248:	710000ff 	.word	0x710000ff
  40524c:	710000fe 	.word	0x710000fe
  405250:	710000fd 	.word	0x710000fd
  405254:	710000fc 	.word	0x710000fc
  405258:	710000fb 	.word	0x710000fb
  40525c:	710000fa 	.word	0x710000fa
  405260:	710000f9 	.word	0x710000f9
  405264:	710000f8 	.word	0x710000f8
  405268:	710000f7 	.word	0x710000f7
  40526c:	710000f6 	.word	0x710000f6
  405270:	710000f5 	.word	0x710000f5
  405274:	710000f4 	.word	0x710000f4
  405278:	710000f3 	.word	0x710000f3
  40527c:	710000f2 	.word	0x710000f2
  405280:	70000192 	.word	0x70000192
  405284:	70000322 	.word	0x70000322
  405288:	700004b2 	.word	0x700004b2
  40528c:	70000642 	.word	0x70000642
  405290:	700007d2 	.word	0x700007d2
  405294:	70000962 	.word	0x70000962
  405298:	4980      	ldr	r1, [pc, #512]	; (40549c <SDRAMtest+0x5c4>)
  40529a:	7809      	ldrb	r1, [r1, #0]
  40529c:	9101      	str	r1, [sp, #4]
  40529e:	4980      	ldr	r1, [pc, #512]	; (4054a0 <SDRAMtest+0x5c8>)
  4052a0:	7809      	ldrb	r1, [r1, #0]
  4052a2:	9100      	str	r1, [sp, #0]
  4052a4:	497f      	ldr	r1, [pc, #508]	; (4054a4 <SDRAMtest+0x5cc>)
  4052a6:	4628      	mov	r0, r5
  4052a8:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  4052aa:	4b7f      	ldr	r3, [pc, #508]	; (4054a8 <SDRAMtest+0x5d0>)
  4052ac:	781b      	ldrb	r3, [r3, #0]
  4052ae:	4a7f      	ldr	r2, [pc, #508]	; (4054ac <SDRAMtest+0x5d4>)
  4052b0:	7812      	ldrb	r2, [r2, #0]
  4052b2:	497f      	ldr	r1, [pc, #508]	; (4054b0 <SDRAMtest+0x5d8>)
  4052b4:	7809      	ldrb	r1, [r1, #0]
  4052b6:	9111      	str	r1, [sp, #68]	; 0x44
  4052b8:	497e      	ldr	r1, [pc, #504]	; (4054b4 <SDRAMtest+0x5dc>)
  4052ba:	7809      	ldrb	r1, [r1, #0]
  4052bc:	9110      	str	r1, [sp, #64]	; 0x40
  4052be:	497e      	ldr	r1, [pc, #504]	; (4054b8 <SDRAMtest+0x5e0>)
  4052c0:	7809      	ldrb	r1, [r1, #0]
  4052c2:	910f      	str	r1, [sp, #60]	; 0x3c
  4052c4:	497d      	ldr	r1, [pc, #500]	; (4054bc <SDRAMtest+0x5e4>)
  4052c6:	7809      	ldrb	r1, [r1, #0]
  4052c8:	910e      	str	r1, [sp, #56]	; 0x38
  4052ca:	497d      	ldr	r1, [pc, #500]	; (4054c0 <SDRAMtest+0x5e8>)
  4052cc:	7809      	ldrb	r1, [r1, #0]
  4052ce:	910d      	str	r1, [sp, #52]	; 0x34
  4052d0:	497c      	ldr	r1, [pc, #496]	; (4054c4 <SDRAMtest+0x5ec>)
  4052d2:	7809      	ldrb	r1, [r1, #0]
  4052d4:	910c      	str	r1, [sp, #48]	; 0x30
  4052d6:	497c      	ldr	r1, [pc, #496]	; (4054c8 <SDRAMtest+0x5f0>)
  4052d8:	7809      	ldrb	r1, [r1, #0]
  4052da:	910b      	str	r1, [sp, #44]	; 0x2c
  4052dc:	497b      	ldr	r1, [pc, #492]	; (4054cc <SDRAMtest+0x5f4>)
  4052de:	7809      	ldrb	r1, [r1, #0]
  4052e0:	910a      	str	r1, [sp, #40]	; 0x28
  4052e2:	497b      	ldr	r1, [pc, #492]	; (4054d0 <SDRAMtest+0x5f8>)
  4052e4:	7809      	ldrb	r1, [r1, #0]
  4052e6:	9109      	str	r1, [sp, #36]	; 0x24
  4052e8:	497a      	ldr	r1, [pc, #488]	; (4054d4 <SDRAMtest+0x5fc>)
  4052ea:	7809      	ldrb	r1, [r1, #0]
  4052ec:	9108      	str	r1, [sp, #32]
  4052ee:	497a      	ldr	r1, [pc, #488]	; (4054d8 <SDRAMtest+0x600>)
  4052f0:	7809      	ldrb	r1, [r1, #0]
  4052f2:	9107      	str	r1, [sp, #28]
  4052f4:	4979      	ldr	r1, [pc, #484]	; (4054dc <SDRAMtest+0x604>)
  4052f6:	7809      	ldrb	r1, [r1, #0]
  4052f8:	9106      	str	r1, [sp, #24]
  4052fa:	4979      	ldr	r1, [pc, #484]	; (4054e0 <SDRAMtest+0x608>)
  4052fc:	7809      	ldrb	r1, [r1, #0]
  4052fe:	9105      	str	r1, [sp, #20]
  405300:	4978      	ldr	r1, [pc, #480]	; (4054e4 <SDRAMtest+0x60c>)
  405302:	7809      	ldrb	r1, [r1, #0]
  405304:	9104      	str	r1, [sp, #16]
  405306:	4978      	ldr	r1, [pc, #480]	; (4054e8 <SDRAMtest+0x610>)
  405308:	7809      	ldrb	r1, [r1, #0]
  40530a:	9103      	str	r1, [sp, #12]
  40530c:	4977      	ldr	r1, [pc, #476]	; (4054ec <SDRAMtest+0x614>)
  40530e:	7809      	ldrb	r1, [r1, #0]
  405310:	9102      	str	r1, [sp, #8]
  405312:	4977      	ldr	r1, [pc, #476]	; (4054f0 <SDRAMtest+0x618>)
  405314:	7809      	ldrb	r1, [r1, #0]
  405316:	9101      	str	r1, [sp, #4]
  405318:	4976      	ldr	r1, [pc, #472]	; (4054f4 <SDRAMtest+0x61c>)
  40531a:	7809      	ldrb	r1, [r1, #0]
  40531c:	9100      	str	r1, [sp, #0]
  40531e:	4976      	ldr	r1, [pc, #472]	; (4054f8 <SDRAMtest+0x620>)
  405320:	4628      	mov	r0, r5
  405322:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  405324:	4b75      	ldr	r3, [pc, #468]	; (4054fc <SDRAMtest+0x624>)
  405326:	781b      	ldrb	r3, [r3, #0]
  405328:	4a75      	ldr	r2, [pc, #468]	; (405500 <SDRAMtest+0x628>)
  40532a:	7812      	ldrb	r2, [r2, #0]
  40532c:	4975      	ldr	r1, [pc, #468]	; (405504 <SDRAMtest+0x62c>)
  40532e:	7809      	ldrb	r1, [r1, #0]
  405330:	9111      	str	r1, [sp, #68]	; 0x44
  405332:	4975      	ldr	r1, [pc, #468]	; (405508 <SDRAMtest+0x630>)
  405334:	7809      	ldrb	r1, [r1, #0]
  405336:	9110      	str	r1, [sp, #64]	; 0x40
  405338:	4974      	ldr	r1, [pc, #464]	; (40550c <SDRAMtest+0x634>)
  40533a:	7809      	ldrb	r1, [r1, #0]
  40533c:	910f      	str	r1, [sp, #60]	; 0x3c
  40533e:	4974      	ldr	r1, [pc, #464]	; (405510 <SDRAMtest+0x638>)
  405340:	7809      	ldrb	r1, [r1, #0]
  405342:	910e      	str	r1, [sp, #56]	; 0x38
  405344:	4973      	ldr	r1, [pc, #460]	; (405514 <SDRAMtest+0x63c>)
  405346:	7809      	ldrb	r1, [r1, #0]
  405348:	910d      	str	r1, [sp, #52]	; 0x34
  40534a:	4973      	ldr	r1, [pc, #460]	; (405518 <SDRAMtest+0x640>)
  40534c:	7809      	ldrb	r1, [r1, #0]
  40534e:	910c      	str	r1, [sp, #48]	; 0x30
  405350:	4972      	ldr	r1, [pc, #456]	; (40551c <SDRAMtest+0x644>)
  405352:	7809      	ldrb	r1, [r1, #0]
  405354:	910b      	str	r1, [sp, #44]	; 0x2c
  405356:	4972      	ldr	r1, [pc, #456]	; (405520 <SDRAMtest+0x648>)
  405358:	7809      	ldrb	r1, [r1, #0]
  40535a:	910a      	str	r1, [sp, #40]	; 0x28
  40535c:	4971      	ldr	r1, [pc, #452]	; (405524 <SDRAMtest+0x64c>)
  40535e:	7809      	ldrb	r1, [r1, #0]
  405360:	9109      	str	r1, [sp, #36]	; 0x24
  405362:	4971      	ldr	r1, [pc, #452]	; (405528 <SDRAMtest+0x650>)
  405364:	7809      	ldrb	r1, [r1, #0]
  405366:	9108      	str	r1, [sp, #32]
  405368:	4970      	ldr	r1, [pc, #448]	; (40552c <SDRAMtest+0x654>)
  40536a:	7809      	ldrb	r1, [r1, #0]
  40536c:	9107      	str	r1, [sp, #28]
  40536e:	4970      	ldr	r1, [pc, #448]	; (405530 <SDRAMtest+0x658>)
  405370:	7809      	ldrb	r1, [r1, #0]
  405372:	9106      	str	r1, [sp, #24]
  405374:	496f      	ldr	r1, [pc, #444]	; (405534 <SDRAMtest+0x65c>)
  405376:	7809      	ldrb	r1, [r1, #0]
  405378:	9105      	str	r1, [sp, #20]
  40537a:	496f      	ldr	r1, [pc, #444]	; (405538 <SDRAMtest+0x660>)
  40537c:	7809      	ldrb	r1, [r1, #0]
  40537e:	9104      	str	r1, [sp, #16]
  405380:	496e      	ldr	r1, [pc, #440]	; (40553c <SDRAMtest+0x664>)
  405382:	7809      	ldrb	r1, [r1, #0]
  405384:	9103      	str	r1, [sp, #12]
  405386:	496e      	ldr	r1, [pc, #440]	; (405540 <SDRAMtest+0x668>)
  405388:	7809      	ldrb	r1, [r1, #0]
  40538a:	9102      	str	r1, [sp, #8]
  40538c:	496d      	ldr	r1, [pc, #436]	; (405544 <SDRAMtest+0x66c>)
  40538e:	7809      	ldrb	r1, [r1, #0]
  405390:	9101      	str	r1, [sp, #4]
  405392:	496d      	ldr	r1, [pc, #436]	; (405548 <SDRAMtest+0x670>)
  405394:	7809      	ldrb	r1, [r1, #0]
  405396:	9100      	str	r1, [sp, #0]
  405398:	496c      	ldr	r1, [pc, #432]	; (40554c <SDRAMtest+0x674>)
  40539a:	4628      	mov	r0, r5
  40539c:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  40539e:	4b6c      	ldr	r3, [pc, #432]	; (405550 <SDRAMtest+0x678>)
  4053a0:	781b      	ldrb	r3, [r3, #0]
  4053a2:	4a6c      	ldr	r2, [pc, #432]	; (405554 <SDRAMtest+0x67c>)
  4053a4:	7812      	ldrb	r2, [r2, #0]
  4053a6:	496c      	ldr	r1, [pc, #432]	; (405558 <SDRAMtest+0x680>)
  4053a8:	7809      	ldrb	r1, [r1, #0]
  4053aa:	9111      	str	r1, [sp, #68]	; 0x44
  4053ac:	496b      	ldr	r1, [pc, #428]	; (40555c <SDRAMtest+0x684>)
  4053ae:	7809      	ldrb	r1, [r1, #0]
  4053b0:	9110      	str	r1, [sp, #64]	; 0x40
  4053b2:	496b      	ldr	r1, [pc, #428]	; (405560 <SDRAMtest+0x688>)
  4053b4:	7809      	ldrb	r1, [r1, #0]
  4053b6:	910f      	str	r1, [sp, #60]	; 0x3c
  4053b8:	496a      	ldr	r1, [pc, #424]	; (405564 <SDRAMtest+0x68c>)
  4053ba:	7809      	ldrb	r1, [r1, #0]
  4053bc:	910e      	str	r1, [sp, #56]	; 0x38
  4053be:	496a      	ldr	r1, [pc, #424]	; (405568 <SDRAMtest+0x690>)
  4053c0:	7809      	ldrb	r1, [r1, #0]
  4053c2:	910d      	str	r1, [sp, #52]	; 0x34
  4053c4:	4969      	ldr	r1, [pc, #420]	; (40556c <SDRAMtest+0x694>)
  4053c6:	7809      	ldrb	r1, [r1, #0]
  4053c8:	910c      	str	r1, [sp, #48]	; 0x30
  4053ca:	4969      	ldr	r1, [pc, #420]	; (405570 <SDRAMtest+0x698>)
  4053cc:	7809      	ldrb	r1, [r1, #0]
  4053ce:	910b      	str	r1, [sp, #44]	; 0x2c
  4053d0:	4968      	ldr	r1, [pc, #416]	; (405574 <SDRAMtest+0x69c>)
  4053d2:	7809      	ldrb	r1, [r1, #0]
  4053d4:	910a      	str	r1, [sp, #40]	; 0x28
  4053d6:	4968      	ldr	r1, [pc, #416]	; (405578 <SDRAMtest+0x6a0>)
  4053d8:	7809      	ldrb	r1, [r1, #0]
  4053da:	9109      	str	r1, [sp, #36]	; 0x24
  4053dc:	4967      	ldr	r1, [pc, #412]	; (40557c <SDRAMtest+0x6a4>)
  4053de:	7809      	ldrb	r1, [r1, #0]
  4053e0:	9108      	str	r1, [sp, #32]
  4053e2:	4967      	ldr	r1, [pc, #412]	; (405580 <SDRAMtest+0x6a8>)
  4053e4:	7809      	ldrb	r1, [r1, #0]
  4053e6:	9107      	str	r1, [sp, #28]
  4053e8:	4966      	ldr	r1, [pc, #408]	; (405584 <SDRAMtest+0x6ac>)
  4053ea:	7809      	ldrb	r1, [r1, #0]
  4053ec:	9106      	str	r1, [sp, #24]
  4053ee:	4966      	ldr	r1, [pc, #408]	; (405588 <SDRAMtest+0x6b0>)
  4053f0:	7809      	ldrb	r1, [r1, #0]
  4053f2:	9105      	str	r1, [sp, #20]
  4053f4:	4965      	ldr	r1, [pc, #404]	; (40558c <SDRAMtest+0x6b4>)
  4053f6:	7809      	ldrb	r1, [r1, #0]
  4053f8:	9104      	str	r1, [sp, #16]
  4053fa:	4965      	ldr	r1, [pc, #404]	; (405590 <SDRAMtest+0x6b8>)
  4053fc:	7809      	ldrb	r1, [r1, #0]
  4053fe:	9103      	str	r1, [sp, #12]
  405400:	4964      	ldr	r1, [pc, #400]	; (405594 <SDRAMtest+0x6bc>)
  405402:	7809      	ldrb	r1, [r1, #0]
  405404:	9102      	str	r1, [sp, #8]
  405406:	4964      	ldr	r1, [pc, #400]	; (405598 <SDRAMtest+0x6c0>)
  405408:	7809      	ldrb	r1, [r1, #0]
  40540a:	9101      	str	r1, [sp, #4]
  40540c:	4963      	ldr	r1, [pc, #396]	; (40559c <SDRAMtest+0x6c4>)
  40540e:	7809      	ldrb	r1, [r1, #0]
  405410:	9100      	str	r1, [sp, #0]
  405412:	4963      	ldr	r1, [pc, #396]	; (4055a0 <SDRAMtest+0x6c8>)
  405414:	4628      	mov	r0, r5
  405416:	47a0      	blx	r4
	printf("%X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\r\n",camBuffPtr,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++,*camBuffPtr++);
  405418:	4b62      	ldr	r3, [pc, #392]	; (4055a4 <SDRAMtest+0x6cc>)
  40541a:	781b      	ldrb	r3, [r3, #0]
  40541c:	4a62      	ldr	r2, [pc, #392]	; (4055a8 <SDRAMtest+0x6d0>)
  40541e:	7812      	ldrb	r2, [r2, #0]
  405420:	4962      	ldr	r1, [pc, #392]	; (4055ac <SDRAMtest+0x6d4>)
  405422:	7809      	ldrb	r1, [r1, #0]
  405424:	9111      	str	r1, [sp, #68]	; 0x44
  405426:	4962      	ldr	r1, [pc, #392]	; (4055b0 <SDRAMtest+0x6d8>)
  405428:	7809      	ldrb	r1, [r1, #0]
  40542a:	9110      	str	r1, [sp, #64]	; 0x40
  40542c:	4961      	ldr	r1, [pc, #388]	; (4055b4 <SDRAMtest+0x6dc>)
  40542e:	7809      	ldrb	r1, [r1, #0]
  405430:	910f      	str	r1, [sp, #60]	; 0x3c
  405432:	4961      	ldr	r1, [pc, #388]	; (4055b8 <SDRAMtest+0x6e0>)
  405434:	7809      	ldrb	r1, [r1, #0]
  405436:	910e      	str	r1, [sp, #56]	; 0x38
  405438:	4960      	ldr	r1, [pc, #384]	; (4055bc <SDRAMtest+0x6e4>)
  40543a:	7809      	ldrb	r1, [r1, #0]
  40543c:	910d      	str	r1, [sp, #52]	; 0x34
  40543e:	4960      	ldr	r1, [pc, #384]	; (4055c0 <SDRAMtest+0x6e8>)
  405440:	7809      	ldrb	r1, [r1, #0]
  405442:	910c      	str	r1, [sp, #48]	; 0x30
  405444:	495f      	ldr	r1, [pc, #380]	; (4055c4 <SDRAMtest+0x6ec>)
  405446:	7809      	ldrb	r1, [r1, #0]
  405448:	910b      	str	r1, [sp, #44]	; 0x2c
  40544a:	495f      	ldr	r1, [pc, #380]	; (4055c8 <SDRAMtest+0x6f0>)
  40544c:	7809      	ldrb	r1, [r1, #0]
  40544e:	910a      	str	r1, [sp, #40]	; 0x28
  405450:	495e      	ldr	r1, [pc, #376]	; (4055cc <SDRAMtest+0x6f4>)
  405452:	7809      	ldrb	r1, [r1, #0]
  405454:	9109      	str	r1, [sp, #36]	; 0x24
  405456:	495e      	ldr	r1, [pc, #376]	; (4055d0 <SDRAMtest+0x6f8>)
  405458:	7809      	ldrb	r1, [r1, #0]
  40545a:	9108      	str	r1, [sp, #32]
  40545c:	495d      	ldr	r1, [pc, #372]	; (4055d4 <SDRAMtest+0x6fc>)
  40545e:	7809      	ldrb	r1, [r1, #0]
  405460:	9107      	str	r1, [sp, #28]
  405462:	495d      	ldr	r1, [pc, #372]	; (4055d8 <SDRAMtest+0x700>)
  405464:	7809      	ldrb	r1, [r1, #0]
  405466:	9106      	str	r1, [sp, #24]
  405468:	495c      	ldr	r1, [pc, #368]	; (4055dc <SDRAMtest+0x704>)
  40546a:	7809      	ldrb	r1, [r1, #0]
  40546c:	9105      	str	r1, [sp, #20]
  40546e:	495c      	ldr	r1, [pc, #368]	; (4055e0 <SDRAMtest+0x708>)
  405470:	7809      	ldrb	r1, [r1, #0]
  405472:	9104      	str	r1, [sp, #16]
  405474:	495b      	ldr	r1, [pc, #364]	; (4055e4 <SDRAMtest+0x70c>)
  405476:	7809      	ldrb	r1, [r1, #0]
  405478:	9103      	str	r1, [sp, #12]
  40547a:	495b      	ldr	r1, [pc, #364]	; (4055e8 <SDRAMtest+0x710>)
  40547c:	7809      	ldrb	r1, [r1, #0]
  40547e:	9102      	str	r1, [sp, #8]
  405480:	495a      	ldr	r1, [pc, #360]	; (4055ec <SDRAMtest+0x714>)
  405482:	7809      	ldrb	r1, [r1, #0]
  405484:	9101      	str	r1, [sp, #4]
  405486:	495a      	ldr	r1, [pc, #360]	; (4055f0 <SDRAMtest+0x718>)
  405488:	7809      	ldrb	r1, [r1, #0]
  40548a:	9100      	str	r1, [sp, #0]
  40548c:	4959      	ldr	r1, [pc, #356]	; (4055f4 <SDRAMtest+0x71c>)
  40548e:	4628      	mov	r0, r5
  405490:	47a0      	blx	r4
	delay_ms(100);//
  405492:	4859      	ldr	r0, [pc, #356]	; (4055f8 <SDRAMtest+0x720>)
  405494:	4b59      	ldr	r3, [pc, #356]	; (4055fc <SDRAMtest+0x724>)
  405496:	4798      	blx	r3
  405498:	e0b2      	b.n	405600 <SDRAMtest+0x728>
  40549a:	bf00      	nop
  40549c:	710000f1 	.word	0x710000f1
  4054a0:	710000f0 	.word	0x710000f0
  4054a4:	71000102 	.word	0x71000102
  4054a8:	711000ef 	.word	0x711000ef
  4054ac:	711000ee 	.word	0x711000ee
  4054b0:	71100101 	.word	0x71100101
  4054b4:	71100100 	.word	0x71100100
  4054b8:	711000ff 	.word	0x711000ff
  4054bc:	711000fe 	.word	0x711000fe
  4054c0:	711000fd 	.word	0x711000fd
  4054c4:	711000fc 	.word	0x711000fc
  4054c8:	711000fb 	.word	0x711000fb
  4054cc:	711000fa 	.word	0x711000fa
  4054d0:	711000f9 	.word	0x711000f9
  4054d4:	711000f8 	.word	0x711000f8
  4054d8:	711000f7 	.word	0x711000f7
  4054dc:	711000f6 	.word	0x711000f6
  4054e0:	711000f5 	.word	0x711000f5
  4054e4:	711000f4 	.word	0x711000f4
  4054e8:	711000f3 	.word	0x711000f3
  4054ec:	711000f2 	.word	0x711000f2
  4054f0:	711000f1 	.word	0x711000f1
  4054f4:	711000f0 	.word	0x711000f0
  4054f8:	71100102 	.word	0x71100102
  4054fc:	712000ef 	.word	0x712000ef
  405500:	712000ee 	.word	0x712000ee
  405504:	71200101 	.word	0x71200101
  405508:	71200100 	.word	0x71200100
  40550c:	712000ff 	.word	0x712000ff
  405510:	712000fe 	.word	0x712000fe
  405514:	712000fd 	.word	0x712000fd
  405518:	712000fc 	.word	0x712000fc
  40551c:	712000fb 	.word	0x712000fb
  405520:	712000fa 	.word	0x712000fa
  405524:	712000f9 	.word	0x712000f9
  405528:	712000f8 	.word	0x712000f8
  40552c:	712000f7 	.word	0x712000f7
  405530:	712000f6 	.word	0x712000f6
  405534:	712000f5 	.word	0x712000f5
  405538:	712000f4 	.word	0x712000f4
  40553c:	712000f3 	.word	0x712000f3
  405540:	712000f2 	.word	0x712000f2
  405544:	712000f1 	.word	0x712000f1
  405548:	712000f0 	.word	0x712000f0
  40554c:	71200102 	.word	0x71200102
  405550:	713000ef 	.word	0x713000ef
  405554:	713000ee 	.word	0x713000ee
  405558:	71300101 	.word	0x71300101
  40555c:	71300100 	.word	0x71300100
  405560:	713000ff 	.word	0x713000ff
  405564:	713000fe 	.word	0x713000fe
  405568:	713000fd 	.word	0x713000fd
  40556c:	713000fc 	.word	0x713000fc
  405570:	713000fb 	.word	0x713000fb
  405574:	713000fa 	.word	0x713000fa
  405578:	713000f9 	.word	0x713000f9
  40557c:	713000f8 	.word	0x713000f8
  405580:	713000f7 	.word	0x713000f7
  405584:	713000f6 	.word	0x713000f6
  405588:	713000f5 	.word	0x713000f5
  40558c:	713000f4 	.word	0x713000f4
  405590:	713000f3 	.word	0x713000f3
  405594:	713000f2 	.word	0x713000f2
  405598:	713000f1 	.word	0x713000f1
  40559c:	713000f0 	.word	0x713000f0
  4055a0:	71300102 	.word	0x71300102
  4055a4:	714000ef 	.word	0x714000ef
  4055a8:	714000ee 	.word	0x714000ee
  4055ac:	71400101 	.word	0x71400101
  4055b0:	71400100 	.word	0x71400100
  4055b4:	714000ff 	.word	0x714000ff
  4055b8:	714000fe 	.word	0x714000fe
  4055bc:	714000fd 	.word	0x714000fd
  4055c0:	714000fc 	.word	0x714000fc
  4055c4:	714000fb 	.word	0x714000fb
  4055c8:	714000fa 	.word	0x714000fa
  4055cc:	714000f9 	.word	0x714000f9
  4055d0:	714000f8 	.word	0x714000f8
  4055d4:	714000f7 	.word	0x714000f7
  4055d8:	714000f6 	.word	0x714000f6
  4055dc:	714000f5 	.word	0x714000f5
  4055e0:	714000f4 	.word	0x714000f4
  4055e4:	714000f3 	.word	0x714000f3
  4055e8:	714000f2 	.word	0x714000f2
  4055ec:	714000f1 	.word	0x714000f1
  4055f0:	714000f0 	.word	0x714000f0
  4055f4:	71400102 	.word	0x71400102
  4055f8:	004d2b25 	.word	0x004d2b25
  4055fc:	20400001 	.word	0x20400001
    ccsidr  = SCB->CCSIDR;
  405600:	4a1c      	ldr	r2, [pc, #112]	; (405674 <SDRAMtest+0x79c>)
  405602:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  405606:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40560a:	f006 0007 	and.w	r0, r6, #7
  40560e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  405610:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  405614:	fab6 f386 	clz	r3, r6
    wshift  = __CLZ(ways) & 0x1f;
  405618:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  40561c:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  405620:	6951      	ldr	r1, [r2, #20]
  405622:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  405626:	6151      	str	r1, [r2, #20]
  405628:	f04f 34ff 	mov.w	r4, #4294967295
  40562c:	fa04 fc00 	lsl.w	ip, r4, r0
  405630:	fa0e f000 	lsl.w	r0, lr, r0
  405634:	409c      	lsls	r4, r3
  405636:	fa06 f703 	lsl.w	r7, r6, r3
              SCB->DCCISW = sw;
  40563a:	4615      	mov	r5, r2
         int32_t tmpways = ways;
  40563c:	4632      	mov	r2, r6
  40563e:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  405640:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  405644:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  405648:	3a01      	subs	r2, #1
  40564a:	4423      	add	r3, r4
  40564c:	f1b2 3fff 	cmp.w	r2, #4294967295
  405650:	d1f6      	bne.n	405640 <SDRAMtest+0x768>
        } while(sets--);
  405652:	f10e 3eff 	add.w	lr, lr, #4294967295
  405656:	4460      	add	r0, ip
  405658:	f1be 3fff 	cmp.w	lr, #4294967295
  40565c:	d1ee      	bne.n	40563c <SDRAMtest+0x764>
  40565e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405662:	f3bf 8f6f 	isb	sy
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  405666:	4a04      	ldr	r2, [pc, #16]	; (405678 <SDRAMtest+0x7a0>)
  405668:	4b04      	ldr	r3, [pc, #16]	; (40567c <SDRAMtest+0x7a4>)
  40566a:	601a      	str	r2, [r3, #0]
}
  40566c:	b015      	add	sp, #84	; 0x54
  40566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405672:	bf00      	nop
  405674:	e000ed00 	.word	0xe000ed00
  405678:	a5000001 	.word	0xa5000001
  40567c:	400e1850 	.word	0x400e1850

00405680 <redBlink>:
}
 /***********************************************************************/
 /*    YELLOW BLINK ATSAM
 ***********************************************************************/
 void redBlink (int numBlinks) {
  405680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405684:	4b0f      	ldr	r3, [pc, #60]	; (4056c4 <redBlink+0x44>)
  405686:	2201      	movs	r2, #1
  405688:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40568a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 int i;
	 ioport_set_pin_dir(LED_RED_GPIO, IOPORT_DIR_OUTPUT);
	 for (i=numBlinks; i>0; i--){
  40568e:	1e04      	subs	r4, r0, #0
  405690:	dd10      	ble.n	4056b4 <redBlink+0x34>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  405692:	461e      	mov	r6, r3
  405694:	4617      	mov	r7, r2
  405696:	4692      	mov	sl, r2
		 ioport_set_pin_level(LED_RED_GPIO, LED_ACTIVE_LEVEL); //LED ON
		 delay_ms(20);
  405698:	f8df 9030 	ldr.w	r9, [pc, #48]	; 4056cc <redBlink+0x4c>
  40569c:	4d0a      	ldr	r5, [pc, #40]	; (4056c8 <redBlink+0x48>)
		 ioport_set_pin_level(LED_RED_GPIO, LED_INACTIVE_LEVEL); //LED OFF
		 delay_ms(50);
  40569e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4056d0 <redBlink+0x50>
  4056a2:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		 delay_ms(20);
  4056a6:	4648      	mov	r0, r9
  4056a8:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4056aa:	6337      	str	r7, [r6, #48]	; 0x30
		 delay_ms(50);
  4056ac:	4640      	mov	r0, r8
  4056ae:	47a8      	blx	r5
	 for (i=numBlinks; i>0; i--){
  4056b0:	3c01      	subs	r4, #1
  4056b2:	d1f6      	bne.n	4056a2 <redBlink+0x22>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4056b4:	4b03      	ldr	r3, [pc, #12]	; (4056c4 <redBlink+0x44>)
  4056b6:	2201      	movs	r2, #1
  4056b8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4056ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  4056be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4056c2:	bf00      	nop
  4056c4:	400e1400 	.word	0x400e1400
  4056c8:	20400001 	.word	0x20400001
  4056cc:	000f6f08 	.word	0x000f6f08
  4056d0:	00269593 	.word	0x00269593

004056d4 <resetPinsSDRAM>:
	printf("\r\n    %d MB\r\n", (uint16_t)(sd_mmc_get_capacity(slot) / 1024));
}
/***********************************************************************
 *    RESET SDRAM PINS
 ***********************************************************************/
void resetPinsSDRAM(void){
  4056d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		base->PIO_PUDR = mask;
  4056d8:	4bcb      	ldr	r3, [pc, #812]	; (405a08 <resetPinsSDRAM+0x334>)
  4056da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4056de:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4056e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4056e4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4056e6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4056e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4056ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4056ee:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  4056f2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4056f4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4056f6:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  4056fa:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4056fc:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  4056fe:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  405702:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405704:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405708:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40570a:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40570c:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405710:	6f19      	ldr	r1, [r3, #112]	; 0x70
  405712:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  405716:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405718:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40571a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  40571e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405720:	601f      	str	r7, [r3, #0]
		base->PIO_PUDR = mask;
  405722:	f44f 2680 	mov.w	r6, #262144	; 0x40000
  405726:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405728:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40572c:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40572e:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405730:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405734:	6f19      	ldr	r1, [r3, #112]	; 0x70
  405736:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
  40573a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40573c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40573e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
  405742:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405744:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  405746:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
  40574a:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40574c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405750:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405752:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405754:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405758:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40575a:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  40575e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405760:	6f59      	ldr	r1, [r3, #116]	; 0x74
  405762:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  405766:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405768:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  40576a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40576e:	2401      	movs	r4, #1
  405770:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405772:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405776:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405778:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40577a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40577e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  405780:	f021 0101 	bic.w	r1, r1, #1
  405784:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405786:	6f59      	ldr	r1, [r3, #116]	; 0x74
  405788:	f021 0101 	bic.w	r1, r1, #1
  40578c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40578e:	601c      	str	r4, [r3, #0]
		base->PIO_PUDR = mask;
  405790:	2002      	movs	r0, #2
  405792:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405794:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405798:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40579a:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40579c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4057a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4057a2:	f021 0102 	bic.w	r1, r1, #2
  4057a6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4057a8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4057aa:	f021 0102 	bic.w	r1, r1, #2
  4057ae:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4057b0:	6018      	str	r0, [r3, #0]
		base->PIO_PUDR = mask;
  4057b2:	2104      	movs	r1, #4
  4057b4:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4057b6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4057ba:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4057bc:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4057be:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4057c2:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  4057c6:	f02e 0e04 	bic.w	lr, lr, #4
  4057ca:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4057ce:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  4057d2:	f02e 0e04 	bic.w	lr, lr, #4
  4057d6:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4057da:	6019      	str	r1, [r3, #0]
		base->PIO_PUDR = mask;
  4057dc:	f04f 0e08 	mov.w	lr, #8
  4057e0:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4057e4:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4057e8:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4057ec:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4057f0:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4057f4:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  4057f8:	f02c 0c08 	bic.w	ip, ip, #8
  4057fc:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405800:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  405804:	f02c 0c08 	bic.w	ip, ip, #8
  405808:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40580c:	f8c3 e000 	str.w	lr, [r3]
		base->PIO_PUDR = mask;
  405810:	f04f 0c10 	mov.w	ip, #16
  405814:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405818:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40581c:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405820:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405824:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405828:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  40582c:	f028 0810 	bic.w	r8, r8, #16
  405830:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405834:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  405838:	f028 0810 	bic.w	r8, r8, #16
  40583c:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405840:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  405844:	f04f 0c20 	mov.w	ip, #32
  405848:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40584c:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405850:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405854:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405858:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40585c:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  405860:	f028 0820 	bic.w	r8, r8, #32
  405864:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405868:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  40586c:	f028 0820 	bic.w	r8, r8, #32
  405870:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405874:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  405878:	f04f 0c40 	mov.w	ip, #64	; 0x40
  40587c:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405880:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405884:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405888:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40588c:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405890:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  405894:	f028 0840 	bic.w	r8, r8, #64	; 0x40
  405898:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40589c:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  4058a0:	f028 0840 	bic.w	r8, r8, #64	; 0x40
  4058a4:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4058a8:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  4058ac:	f04f 0c80 	mov.w	ip, #128	; 0x80
  4058b0:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4058b4:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4058b8:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4058bc:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4058c0:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4058c4:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  4058c8:	f028 0880 	bic.w	r8, r8, #128	; 0x80
  4058cc:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4058d0:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  4058d4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
  4058d8:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4058dc:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  4058e0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4058e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4058e6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4058e8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4058ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4058ee:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  4058f2:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  4058f6:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4058fa:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  4058fe:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  405902:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405906:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  405908:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40590a:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40590e:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405910:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405912:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405916:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  40591a:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  40591e:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405922:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  405926:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  40592a:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40592e:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  405930:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405932:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405936:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405938:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40593a:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40593e:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  405940:	f426 1680 	bic.w	r6, r6, #1048576	; 0x100000
  405944:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405946:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  405948:	f426 1680 	bic.w	r6, r6, #1048576	; 0x100000
  40594c:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40594e:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  405950:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
  405954:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405956:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40595a:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40595c:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40595e:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405962:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  405964:	f426 1600 	bic.w	r6, r6, #2097152	; 0x200000
  405968:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40596a:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40596c:	f426 1600 	bic.w	r6, r6, #2097152	; 0x200000
  405970:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405972:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  405974:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  405978:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40597a:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40597e:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405980:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405982:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405986:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  405988:	f426 0680 	bic.w	r6, r6, #4194304	; 0x400000
  40598c:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40598e:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  405990:	f426 0680 	bic.w	r6, r6, #4194304	; 0x400000
  405994:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405996:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  405998:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
  40599c:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40599e:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4059a2:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4059a4:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4059a6:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4059aa:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  4059ac:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
  4059b0:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4059b2:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  4059b4:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
  4059b8:	675d      	str	r5, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4059ba:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  4059bc:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  4059c0:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4059c2:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4059c6:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4059c8:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4059ca:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4059ce:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  4059d2:	f02c 7c80 	bic.w	ip, ip, #16777216	; 0x1000000
  4059d6:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4059da:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  4059de:	f02c 7c80 	bic.w	ip, ip, #16777216	; 0x1000000
  4059e2:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4059e6:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  4059e8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  4059ec:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4059ee:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4059f2:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4059f4:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4059f6:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4059fa:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  4059fe:	f02c 7c00 	bic.w	ip, ip, #33554432	; 0x2000000
  405a02:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
  405a06:	e001      	b.n	405a0c <resetPinsSDRAM+0x338>
  405a08:	400e0e00 	.word	0x400e0e00
		base->PIO_ABCDSR[1] &= ~mask;
  405a0c:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  405a10:	f02c 7c00 	bic.w	ip, ip, #33554432	; 0x2000000
  405a14:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405a18:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  405a1a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  405a1e:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405a20:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405a24:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405a26:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405a28:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405a2c:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  405a30:	f02c 6c80 	bic.w	ip, ip, #67108864	; 0x4000000
  405a34:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405a38:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  405a3c:	f02c 6c80 	bic.w	ip, ip, #67108864	; 0x4000000
  405a40:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405a44:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  405a46:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  405a4a:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405a4c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405a50:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405a52:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405a54:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405a58:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  405a5c:	f02c 6c00 	bic.w	ip, ip, #134217728	; 0x8000000
  405a60:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405a64:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  405a68:	f02c 6c00 	bic.w	ip, ip, #134217728	; 0x8000000
  405a6c:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405a70:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  405a72:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405a76:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405a78:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405a7c:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405a7e:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405a80:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405a84:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  405a88:	f02c 5c80 	bic.w	ip, ip, #268435456	; 0x10000000
  405a8c:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405a90:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  405a94:	f02c 5c80 	bic.w	ip, ip, #268435456	; 0x10000000
  405a98:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405a9c:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  405a9e:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  405aa2:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405aa4:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405aa8:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405aaa:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405aac:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405ab0:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  405ab4:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  405ab8:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405abc:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  405ac0:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  405ac4:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405ac8:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  405aca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405ace:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405ad2:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405ad6:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405ada:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405ade:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405ae2:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  405ae6:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
  405aea:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405aee:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  405af2:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
  405af6:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405afa:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  405afe:	f503 7300 	add.w	r3, r3, #512	; 0x200
  405b02:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  405b06:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405b0a:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405b0e:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405b12:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405b16:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405b1a:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  405b1e:	f428 5800 	bic.w	r8, r8, #8192	; 0x2000
  405b22:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405b26:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  405b2a:	f428 5800 	bic.w	r8, r8, #8192	; 0x2000
  405b2e:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405b32:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  405b36:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  405b3a:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405b3e:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405b42:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405b46:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405b4a:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405b4e:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  405b52:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
  405b56:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405b5a:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  405b5e:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
  405b62:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405b66:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  405b6a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405b6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405b70:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405b72:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405b78:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  405b7c:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  405b80:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405b84:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  405b88:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  405b8c:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405b90:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  405b92:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405b94:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405b98:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405b9a:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405b9c:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405ba0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405ba2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  405ba6:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405ba8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405baa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  405bae:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405bb0:	601f      	str	r7, [r3, #0]
		base->PIO_PUDR = mask;
  405bb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  405bb6:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405bb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405bbc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405bbe:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405bc4:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  405bc6:	f427 3700 	bic.w	r7, r7, #131072	; 0x20000
  405bca:	671f      	str	r7, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405bcc:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  405bce:	f427 3700 	bic.w	r7, r7, #131072	; 0x20000
  405bd2:	675f      	str	r7, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405bd4:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  405bd6:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405bd8:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405bdc:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405bde:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405be0:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405be4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405be6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  405bea:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405bec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405bee:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  405bf2:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405bf4:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  405bf6:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405bf8:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405bfc:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405bfe:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405c00:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405c04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405c06:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  405c0a:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405c0c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405c0e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  405c12:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405c14:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  405c16:	f503 7300 	add.w	r3, r3, #512	; 0x200
  405c1a:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405c1c:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405c20:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405c22:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405c24:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405c28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405c2a:	f022 0201 	bic.w	r2, r2, #1
  405c2e:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405c30:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405c32:	f022 0201 	bic.w	r2, r2, #1
  405c36:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405c38:	601c      	str	r4, [r3, #0]
		base->PIO_PUDR = mask;
  405c3a:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405c3c:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405c40:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405c42:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405c44:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405c48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405c4a:	f022 0202 	bic.w	r2, r2, #2
  405c4e:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405c50:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405c52:	f022 0202 	bic.w	r2, r2, #2
  405c56:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405c58:	6018      	str	r0, [r3, #0]
		base->PIO_PUDR = mask;
  405c5a:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405c5c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405c60:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405c62:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405c64:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405c68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405c6a:	f022 0204 	bic.w	r2, r2, #4
  405c6e:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405c70:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405c72:	f022 0204 	bic.w	r2, r2, #4
  405c76:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405c78:	6019      	str	r1, [r3, #0]
		base->PIO_PUDR = mask;
  405c7a:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405c7e:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405c82:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405c86:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405c8a:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405c8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405c90:	f022 0208 	bic.w	r2, r2, #8
  405c94:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405c96:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405c98:	f022 0208 	bic.w	r2, r2, #8
  405c9c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405c9e:	f8c3 e000 	str.w	lr, [r3]
		base->PIO_PUDR = mask;
  405ca2:	2210      	movs	r2, #16
  405ca4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405ca6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405caa:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405cac:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405cb2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  405cb4:	f021 0110 	bic.w	r1, r1, #16
  405cb8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405cba:	6f59      	ldr	r1, [r3, #116]	; 0x74
  405cbc:	f021 0110 	bic.w	r1, r1, #16
  405cc0:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405cc2:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  405cc4:	2220      	movs	r2, #32
  405cc6:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405cc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405ccc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405cce:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405cd4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  405cd6:	f021 0120 	bic.w	r1, r1, #32
  405cda:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405cdc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  405cde:	f021 0120 	bic.w	r1, r1, #32
  405ce2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405ce4:	601a      	str	r2, [r3, #0]
  405ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405cea:	bf00      	nop

00405cec <resetPinsISI>:
	pio_set_pin_high(SDCARDPWRC_GPIO);
}
/***********************************************************************
 *    RESET ISI PINS
 ***********************************************************************/
void resetPinsISI(void){
  405cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		base->PIO_PUDR = mask;
  405cf0:	4b7c      	ldr	r3, [pc, #496]	; (405ee4 <resetPinsISI+0x1f8>)
  405cf2:	f44f 0a80 	mov.w	sl, #4194304	; 0x400000
  405cf6:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405cfa:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405cfe:	f8c3 a054 	str.w	sl, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405d02:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405d06:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405d0c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  405d10:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405d12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405d14:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  405d18:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  405d1a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  405d1e:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405d20:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405d24:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405d26:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405d28:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405d2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405d2e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  405d32:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405d34:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405d36:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  405d3a:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  405d3c:	4c6a      	ldr	r4, [pc, #424]	; (405ee8 <resetPinsISI+0x1fc>)
  405d3e:	f04f 0908 	mov.w	r9, #8
  405d42:	f8c4 9060 	str.w	r9, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405d46:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  405d4a:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  405d4e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405d52:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405d56:	6f22      	ldr	r2, [r4, #112]	; 0x70
  405d58:	f022 0208 	bic.w	r2, r2, #8
  405d5c:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405d5e:	6f62      	ldr	r2, [r4, #116]	; 0x74
  405d60:	f022 0208 	bic.w	r2, r2, #8
  405d64:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  405d66:	4a61      	ldr	r2, [pc, #388]	; (405eec <resetPinsISI+0x200>)
  405d68:	f44f 7800 	mov.w	r8, #512	; 0x200
  405d6c:	f8c2 8060 	str.w	r8, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405d70:	f8c2 8090 	str.w	r8, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  405d74:	f8c2 8054 	str.w	r8, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  405d78:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405d7c:	f8c2 8080 	str.w	r8, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405d80:	6f11      	ldr	r1, [r2, #112]	; 0x70
  405d82:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  405d86:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405d88:	6f51      	ldr	r1, [r2, #116]	; 0x74
  405d8a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  405d8e:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  405d90:	f04f 0c20 	mov.w	ip, #32
  405d94:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405d98:	f8c2 c090 	str.w	ip, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  405d9c:	f8c2 c054 	str.w	ip, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  405da0:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405da4:	f8c2 c080 	str.w	ip, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405da8:	6f11      	ldr	r1, [r2, #112]	; 0x70
  405daa:	f021 0120 	bic.w	r1, r1, #32
  405dae:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405db0:	6f51      	ldr	r1, [r2, #116]	; 0x74
  405db2:	f021 0120 	bic.w	r1, r1, #32
  405db6:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  405db8:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  405dbc:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405dc0:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405dc4:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405dc8:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405dcc:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405dd0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  405dd2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  405dd6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405dd8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  405dda:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  405dde:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  405de0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  405de4:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405de6:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405dea:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405dec:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405dee:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405df2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  405df4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  405df8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405dfa:	6f59      	ldr	r1, [r3, #116]	; 0x74
  405dfc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  405e00:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  405e02:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  405e06:	6616      	str	r6, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405e08:	f8c2 6090 	str.w	r6, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  405e0c:	6556      	str	r6, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  405e0e:	6256      	str	r6, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405e10:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405e14:	6f11      	ldr	r1, [r2, #112]	; 0x70
  405e16:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  405e1a:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405e1c:	6f51      	ldr	r1, [r2, #116]	; 0x74
  405e1e:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  405e22:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  405e24:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  405e28:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405e2a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405e2e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405e30:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405e32:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405e36:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  405e38:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
  405e3c:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405e3e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  405e40:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
  405e44:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  405e46:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  405e4a:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405e4c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405e50:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405e52:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405e54:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405e58:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  405e5c:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
  405e60:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405e64:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  405e68:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
  405e6c:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  405e70:	6610      	str	r0, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405e72:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  405e76:	6550      	str	r0, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  405e78:	6250      	str	r0, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405e7a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405e7e:	f8d2 b070 	ldr.w	fp, [r2, #112]	; 0x70
  405e82:	f42b 1b00 	bic.w	fp, fp, #2097152	; 0x200000
  405e86:	f8c2 b070 	str.w	fp, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405e8a:	f8d2 b074 	ldr.w	fp, [r2, #116]	; 0x74
  405e8e:	f42b 1b00 	bic.w	fp, fp, #2097152	; 0x200000
  405e92:	f8c2 b074 	str.w	fp, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  405e96:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405e98:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  405e9c:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  405e9e:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405ea0:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405ea4:	f8d2 b070 	ldr.w	fp, [r2, #112]	; 0x70
  405ea8:	f02b 7b80 	bic.w	fp, fp, #16777216	; 0x1000000
  405eac:	f8c2 b070 	str.w	fp, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405eb0:	f8d2 b074 	ldr.w	fp, [r2, #116]	; 0x74
  405eb4:	f02b 7b80 	bic.w	fp, fp, #16777216	; 0x1000000
  405eb8:	f8c2 b074 	str.w	fp, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  405ebc:	f8c3 a000 	str.w	sl, [r3]
  405ec0:	6018      	str	r0, [r3, #0]
  405ec2:	f8c4 9000 	str.w	r9, [r4]
  405ec6:	f8c2 8000 	str.w	r8, [r2]
  405eca:	f8c2 c000 	str.w	ip, [r2]
  405ece:	f8c3 e000 	str.w	lr, [r3]
  405ed2:	601f      	str	r7, [r3, #0]
  405ed4:	6016      	str	r6, [r2, #0]
  405ed6:	6019      	str	r1, [r3, #0]
  405ed8:	601d      	str	r5, [r3, #0]
  405eda:	6010      	str	r0, [r2, #0]
  405edc:	6011      	str	r1, [r2, #0]
  405ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ee2:	bf00      	nop
  405ee4:	400e1400 	.word	0x400e1400
  405ee8:	400e1000 	.word	0x400e1000
  405eec:	400e0e00 	.word	0x400e0e00

00405ef0 <camTest>:
char camTest(char testReg){
  405ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405ef4:	b08a      	sub	sp, #40	; 0x28
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405ef6:	4b90      	ldr	r3, [pc, #576]	; (406138 <camTest+0x248>)
  405ef8:	2280      	movs	r2, #128	; 0x80
  405efa:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405efc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	printf("BEGIN CAM TEST \r\n");
  405f00:	488e      	ldr	r0, [pc, #568]	; (40613c <camTest+0x24c>)
  405f02:	4b8f      	ldr	r3, [pc, #572]	; (406140 <camTest+0x250>)
  405f04:	4798      	blx	r3
  __ASM volatile ("dsb");
  405f06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405f0a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  405f0e:	4b8d      	ldr	r3, [pc, #564]	; (406144 <camTest+0x254>)
  405f10:	2200      	movs	r2, #0
  405f12:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  405f16:	695a      	ldr	r2, [r3, #20]
  405f18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  405f1c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  405f1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405f22:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  405f26:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  405f2a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  405f2e:	f007 0007 	and.w	r0, r7, #7
  405f32:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  405f34:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  405f38:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  405f3c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  405f40:	f3bf 8f4f 	dsb	sy
  405f44:	f04f 34ff 	mov.w	r4, #4294967295
  405f48:	fa04 fc00 	lsl.w	ip, r4, r0
  405f4c:	fa06 f000 	lsl.w	r0, r6, r0
  405f50:	fa04 f40e 	lsl.w	r4, r4, lr
  405f54:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCISW = sw;
  405f58:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  405f5a:	463a      	mov	r2, r7
  405f5c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  405f5e:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  405f62:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  405f66:	3a01      	subs	r2, #1
  405f68:	4423      	add	r3, r4
  405f6a:	f1b2 3fff 	cmp.w	r2, #4294967295
  405f6e:	d1f6      	bne.n	405f5e <camTest+0x6e>
        } while(sets--);
  405f70:	3e01      	subs	r6, #1
  405f72:	4460      	add	r0, ip
  405f74:	f1b6 3fff 	cmp.w	r6, #4294967295
  405f78:	d1ef      	bne.n	405f5a <camTest+0x6a>
  405f7a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  405f7e:	4a71      	ldr	r2, [pc, #452]	; (406144 <camTest+0x254>)
  405f80:	6953      	ldr	r3, [r2, #20]
  405f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  405f86:	6153      	str	r3, [r2, #20]
  405f88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405f8c:	f3bf 8f6f 	isb	sy
	configPinsSDRAM();
  405f90:	4b6d      	ldr	r3, [pc, #436]	; (406148 <camTest+0x258>)
  405f92:	4798      	blx	r3
	pmc_enable_periph_clk(ID_SDRAMC);
  405f94:	203e      	movs	r0, #62	; 0x3e
  405f96:	4b6d      	ldr	r3, [pc, #436]	; (40614c <camTest+0x25c>)
  405f98:	4798      	blx	r3
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_INSIGNIS_16M,	sysclk_get_cpu_hz());
  405f9a:	496d      	ldr	r1, [pc, #436]	; (406150 <camTest+0x260>)
  405f9c:	486d      	ldr	r0, [pc, #436]	; (406154 <camTest+0x264>)
  405f9e:	4b6e      	ldr	r3, [pc, #440]	; (406158 <camTest+0x268>)
  405fa0:	4798      	blx	r3
  405fa2:	4a6e      	ldr	r2, [pc, #440]	; (40615c <camTest+0x26c>)
  405fa4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  405fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  405faa:	6293      	str	r3, [r2, #40]	; 0x28
	printf("SRAM COMPLETE\r\n");
  405fac:	486c      	ldr	r0, [pc, #432]	; (406160 <camTest+0x270>)
  405fae:	4b64      	ldr	r3, [pc, #400]	; (406140 <camTest+0x250>)
  405fb0:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  405fb2:	2210      	movs	r2, #16
  405fb4:	4b6b      	ldr	r3, [pc, #428]	; (406164 <camTest+0x274>)
  405fb6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405fba:	4c6b      	ldr	r4, [pc, #428]	; (406168 <camTest+0x278>)
  405fbc:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
  405fc0:	f8c4 a010 	str.w	sl, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405fc4:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405fc8:	4e5b      	ldr	r6, [pc, #364]	; (406138 <camTest+0x248>)
  405fca:	f44f 7780 	mov.w	r7, #256	; 0x100
  405fce:	6137      	str	r7, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405fd0:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405fd4:	f44f 6580 	mov.w	r5, #1024	; 0x400
  405fd8:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405fda:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405fde:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405fe0:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  405fe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  405fe8:	6173      	str	r3, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405fea:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  405fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  405ff2:	6173      	str	r3, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405ff4:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405ff8:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405ffa:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  405ffe:	6325      	str	r5, [r4, #48]	; 0x30
  406000:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(100);
  406002:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 4061b4 <camTest+0x2c4>
  406006:	4648      	mov	r0, r9
  406008:	f8df 8180 	ldr.w	r8, [pc, #384]	; 40618c <camTest+0x29c>
  40600c:	47c0      	blx	r8
  40600e:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
  406012:	6337      	str	r7, [r6, #48]	; 0x30
  406014:	6327      	str	r7, [r4, #48]	; 0x30
	delay_ms(100);
  406016:	4648      	mov	r0, r9
  406018:	47c0      	blx	r8
	delay_ms(6);//OV2710 datasheet says minimum 5ms between applying power an allowing CPWDN to go low.
  40601a:	4854      	ldr	r0, [pc, #336]	; (40616c <camTest+0x27c>)
  40601c:	47c0      	blx	r8
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40601e:	6365      	str	r5, [r4, #52]	; 0x34
	delay_ms(2);
  406020:	4853      	ldr	r0, [pc, #332]	; (406170 <camTest+0x280>)
  406022:	47c0      	blx	r8
	delay_ms(100);
  406024:	4648      	mov	r0, r9
  406026:	47c0      	blx	r8
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  406028:	4a52      	ldr	r2, [pc, #328]	; (406174 <camTest+0x284>)
  40602a:	4b53      	ldr	r3, [pc, #332]	; (406178 <camTest+0x288>)
  40602c:	601a      	str	r2, [r3, #0]
	gpio_configure_pin(ISI_MCLK_GPIO, ISI_MCLK_FLAGS);
  40602e:	4953      	ldr	r1, [pc, #332]	; (40617c <camTest+0x28c>)
  406030:	2015      	movs	r0, #21
  406032:	4b53      	ldr	r3, [pc, #332]	; (406180 <camTest+0x290>)
  406034:	4798      	blx	r3
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  406036:	4b53      	ldr	r3, [pc, #332]	; (406184 <camTest+0x294>)
  406038:	f44f 7281 	mov.w	r2, #258	; 0x102
  40603c:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  40603e:	f44f 7200 	mov.w	r2, #512	; 0x200
  406042:	601a      	str	r2, [r3, #0]
	while ((!(PMC->PMC_SCSR & PMC_SCSR_PCK1))&&(iters>0)) {
  406044:	689b      	ldr	r3, [r3, #8]
  406046:	f413 7f00 	tst.w	r3, #512	; 0x200
  40604a:	d118      	bne.n	40607e <camTest+0x18e>
  40604c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  406050:	494c      	ldr	r1, [pc, #304]	; (406184 <camTest+0x294>)
		iters--;
  406052:	3b01      	subs	r3, #1
	while ((!(PMC->PMC_SCSR & PMC_SCSR_PCK1))&&(iters>0)) {
  406054:	688a      	ldr	r2, [r1, #8]
  406056:	f412 7f00 	tst.w	r2, #512	; 0x200
  40605a:	d101      	bne.n	406060 <camTest+0x170>
  40605c:	2b00      	cmp	r3, #0
  40605e:	dcf8      	bgt.n	406052 <camTest+0x162>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  406060:	b96b      	cbnz	r3, 40607e <camTest+0x18e>
  406062:	2401      	movs	r4, #1
	resetPinsISI();
  406064:	4b48      	ldr	r3, [pc, #288]	; (406188 <camTest+0x298>)
  406066:	4798      	blx	r3
	delay_ms(1);
  406068:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40606c:	4b47      	ldr	r3, [pc, #284]	; (40618c <camTest+0x29c>)
  40606e:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  406070:	4a40      	ldr	r2, [pc, #256]	; (406174 <camTest+0x284>)
  406072:	4b41      	ldr	r3, [pc, #260]	; (406178 <camTest+0x288>)
  406074:	601a      	str	r2, [r3, #0]
}
  406076:	4620      	mov	r0, r4
  406078:	b00a      	add	sp, #40	; 0x28
  40607a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	printf("MCLK OKAY\r\n");//tshooooooooooooooooooooooooooooooooooooooooooooot
  40607e:	4844      	ldr	r0, [pc, #272]	; (406190 <camTest+0x2a0>)
  406080:	4b2f      	ldr	r3, [pc, #188]	; (406140 <camTest+0x250>)
  406082:	4798      	blx	r3
	delay_ms(1);
  406084:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406088:	4e40      	ldr	r6, [pc, #256]	; (40618c <camTest+0x29c>)
  40608a:	47b0      	blx	r6
	opt.master_clk = sysclk_get_cpu_hz();
  40608c:	4b30      	ldr	r3, [pc, #192]	; (406150 <camTest+0x260>)
  40608e:	9307      	str	r3, [sp, #28]
	opt.speed      = TWIHS_CLK;
  406090:	4b40      	ldr	r3, [pc, #256]	; (406194 <camTest+0x2a4>)
  406092:	9308      	str	r3, [sp, #32]
	twihs_master_init(BOARD_TWIHS, &opt);
  406094:	a907      	add	r1, sp, #28
  406096:	4840      	ldr	r0, [pc, #256]	; (406198 <camTest+0x2a8>)
  406098:	4b40      	ldr	r3, [pc, #256]	; (40619c <camTest+0x2ac>)
  40609a:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40609c:	4b40      	ldr	r3, [pc, #256]	; (4061a0 <camTest+0x2b0>)
  40609e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4060a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4060a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4060aa:	2100      	movs	r1, #0
  4060ac:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4060b0:	601a      	str	r2, [r3, #0]
	pmc_enable_periph_clk(ID_BOARD_TWIHS);
  4060b2:	2013      	movs	r0, #19
  4060b4:	4b25      	ldr	r3, [pc, #148]	; (40614c <camTest+0x25c>)
  4060b6:	4798      	blx	r3
	pio_configure_pin(ISI_D0_GPIO, ISI_D0_FLAGS);
  4060b8:	4d3a      	ldr	r5, [pc, #232]	; (4061a4 <camTest+0x2b4>)
  4060ba:	4629      	mov	r1, r5
  4060bc:	2076      	movs	r0, #118	; 0x76
  4060be:	4c30      	ldr	r4, [pc, #192]	; (406180 <camTest+0x290>)
  4060c0:	47a0      	blx	r4
	pio_configure_pin(ISI_D1_GPIO, ISI_D1_FLAGS);
  4060c2:	4629      	mov	r1, r5
  4060c4:	2075      	movs	r0, #117	; 0x75
  4060c6:	47a0      	blx	r4
	pio_configure_pin(ISI_D2_GPIO, ISI_D2_FLAGS);
  4060c8:	4629      	mov	r1, r5
  4060ca:	2023      	movs	r0, #35	; 0x23
  4060cc:	47a0      	blx	r4
	pio_configure_pin(ISI_D3_GPIO, ISI_D3_FLAGS);
  4060ce:	4f2b      	ldr	r7, [pc, #172]	; (40617c <camTest+0x28c>)
  4060d0:	4639      	mov	r1, r7
  4060d2:	2009      	movs	r0, #9
  4060d4:	47a0      	blx	r4
	pio_configure_pin(ISI_D4_GPIO, ISI_D4_FLAGS);
  4060d6:	4639      	mov	r1, r7
  4060d8:	2005      	movs	r0, #5
  4060da:	47a0      	blx	r4
	pio_configure_pin(ISI_D5_GPIO, ISI_D5_FLAGS);
  4060dc:	4629      	mov	r1, r5
  4060de:	206b      	movs	r0, #107	; 0x6b
  4060e0:	47a0      	blx	r4
	pio_configure_pin(ISI_D6_GPIO, ISI_D6_FLAGS);
  4060e2:	4629      	mov	r1, r5
  4060e4:	206c      	movs	r0, #108	; 0x6c
  4060e6:	47a0      	blx	r4
	pio_configure_pin(ISI_D7_GPIO, ISI_D7_FLAGS);
  4060e8:	4629      	mov	r1, r5
  4060ea:	201b      	movs	r0, #27
  4060ec:	47a0      	blx	r4
	pio_configure_pin(ISI_HSYNC_GPIO, ISI_HSYNC_FLAGS);
  4060ee:	4629      	mov	r1, r5
  4060f0:	2078      	movs	r0, #120	; 0x78
  4060f2:	47a0      	blx	r4
	pio_configure_pin(ISI_VSYNC_GPIO, ISI_VSYNC_FLAGS);
  4060f4:	4629      	mov	r1, r5
  4060f6:	2079      	movs	r0, #121	; 0x79
  4060f8:	47a0      	blx	r4
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
  4060fa:	4629      	mov	r1, r5
  4060fc:	2018      	movs	r0, #24
  4060fe:	47a0      	blx	r4
	delay_ms(200);
  406100:	4829      	ldr	r0, [pc, #164]	; (4061a8 <camTest+0x2b8>)
  406102:	47b0      	blx	r6
	iters=10;
  406104:	240a      	movs	r4, #10
	while ((ov_init(BOARD_TWIHS)==1)&&(iters>0)) {
  406106:	4d24      	ldr	r5, [pc, #144]	; (406198 <camTest+0x2a8>)
		delay_ms(200);
  406108:	4f27      	ldr	r7, [pc, #156]	; (4061a8 <camTest+0x2b8>)
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40610a:	4e1b      	ldr	r6, [pc, #108]	; (406178 <camTest+0x288>)
	while ((ov_init(BOARD_TWIHS)==1)&&(iters>0)) {
  40610c:	4628      	mov	r0, r5
  40610e:	4b27      	ldr	r3, [pc, #156]	; (4061ac <camTest+0x2bc>)
  406110:	4798      	blx	r3
  406112:	2c00      	cmp	r4, #0
  406114:	dd0b      	ble.n	40612e <camTest+0x23e>
  406116:	2801      	cmp	r0, #1
  406118:	d109      	bne.n	40612e <camTest+0x23e>
		delay_ms(200);
  40611a:	4638      	mov	r0, r7
  40611c:	4b1b      	ldr	r3, [pc, #108]	; (40618c <camTest+0x29c>)
  40611e:	4798      	blx	r3
		printf(".");
  406120:	4823      	ldr	r0, [pc, #140]	; (4061b0 <camTest+0x2c0>)
  406122:	4b07      	ldr	r3, [pc, #28]	; (406140 <camTest+0x250>)
  406124:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  406126:	4b13      	ldr	r3, [pc, #76]	; (406174 <camTest+0x284>)
  406128:	6033      	str	r3, [r6, #0]
	iters--;	}	//WORKS for OV2655 (after changing one address byte for OV7692 to two address bytes for OV2655)
  40612a:	3c01      	subs	r4, #1
  40612c:	e7ee      	b.n	40610c <camTest+0x21c>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  40612e:	2c00      	cmp	r4, #0
  406130:	d142      	bne.n	4061b8 <camTest+0x2c8>
  406132:	2401      	movs	r4, #1
  406134:	e796      	b.n	406064 <camTest+0x174>
  406136:	bf00      	nop
  406138:	400e1400 	.word	0x400e1400
  40613c:	0040abc8 	.word	0x0040abc8
  406140:	004079b1 	.word	0x004079b1
  406144:	e000ed00 	.word	0xe000ed00
  406148:	00404d95 	.word	0x00404d95
  40614c:	004021a9 	.word	0x004021a9
  406150:	11e1a300 	.word	0x11e1a300
  406154:	0040ab58 	.word	0x0040ab58
  406158:	00401345 	.word	0x00401345
  40615c:	40084000 	.word	0x40084000
  406160:	0040ab6c 	.word	0x0040ab6c
  406164:	40088000 	.word	0x40088000
  406168:	400e0e00 	.word	0x400e0e00
  40616c:	0004a14f 	.word	0x0004a14f
  406170:	00018b1b 	.word	0x00018b1b
  406174:	a5000001 	.word	0xa5000001
  406178:	400e1850 	.word	0x400e1850
  40617c:	10000001 	.word	0x10000001
  406180:	00401e8d 	.word	0x00401e8d
  406184:	400e0600 	.word	0x400e0600
  406188:	00405ced 	.word	0x00405ced
  40618c:	20400001 	.word	0x20400001
  406190:	0040abdc 	.word	0x0040abdc
  406194:	00061a80 	.word	0x00061a80
  406198:	40018000 	.word	0x40018000
  40619c:	00400725 	.word	0x00400725
  4061a0:	e000e100 	.word	0xe000e100
  4061a4:	20000001 	.word	0x20000001
  4061a8:	009a5649 	.word	0x009a5649
  4061ac:	00400259 	.word	0x00400259
  4061b0:	0040af40 	.word	0x0040af40
  4061b4:	004d2b25 	.word	0x004d2b25
	delay_ms(100);//CRITICAL DELAY, THIS NEEDS TO BE HERE OR OV_CONFIG() HANGS when no DO_DIAGS. March 2020. 50 seemed to work at least most of the time.
  4061b8:	4860      	ldr	r0, [pc, #384]	; (40633c <camTest+0x44c>)
  4061ba:	4e61      	ldr	r6, [pc, #388]	; (406340 <camTest+0x450>)
  4061bc:	47b0      	blx	r6
	printf("CAM INIT OKAY\r\n");
  4061be:	4861      	ldr	r0, [pc, #388]	; (406344 <camTest+0x454>)
  4061c0:	4f61      	ldr	r7, [pc, #388]	; (406348 <camTest+0x458>)
  4061c2:	47b8      	blx	r7
	ov_configure(BOARD_TWIHS, 4);//OV2655 RESET=4
  4061c4:	4d61      	ldr	r5, [pc, #388]	; (40634c <camTest+0x45c>)
  4061c6:	2104      	movs	r1, #4
  4061c8:	4628      	mov	r0, r5
  4061ca:	4c61      	ldr	r4, [pc, #388]	; (406350 <camTest+0x460>)
  4061cc:	47a0      	blx	r4
	printf("CAM RESET OKAY\r\n");
  4061ce:	4861      	ldr	r0, [pc, #388]	; (406354 <camTest+0x464>)
  4061d0:	47b8      	blx	r7
	ov_configure(BOARD_TWIHS, 2);//OV2655 CONFIG=2
  4061d2:	2102      	movs	r1, #2
  4061d4:	4628      	mov	r0, r5
  4061d6:	47a0      	blx	r4
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4061d8:	4c5f      	ldr	r4, [pc, #380]	; (406358 <camTest+0x468>)
  4061da:	4d60      	ldr	r5, [pc, #384]	; (40635c <camTest+0x46c>)
  4061dc:	6025      	str	r5, [r4, #0]
	printf("CAM CONFIG OKAY\r\n");
  4061de:	4860      	ldr	r0, [pc, #384]	; (406360 <camTest+0x470>)
  4061e0:	47b8      	blx	r7
	delay_ms(2000);			// IMAGE SENSOR DELAY TO ADJUST TO LIGHT 500ms,200ms get bad.
  4061e2:	4860      	ldr	r0, [pc, #384]	; (406364 <camTest+0x474>)
  4061e4:	47b0      	blx	r6
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  4061e6:	6025      	str	r5, [r4, #0]
	delay_ms(1000);			// IMAGE SENSOR DELAY TO ADJUST TO LIGHT 500ms,200ms get bad.
  4061e8:	485f      	ldr	r0, [pc, #380]	; (406368 <camTest+0x478>)
  4061ea:	47b0      	blx	r6
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  4061ec:	6025      	str	r5, [r4, #0]
    ccsidr  = SCB->CCSIDR;
  4061ee:	4b5f      	ldr	r3, [pc, #380]	; (40636c <camTest+0x47c>)
  4061f0:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4061f4:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4061f8:	f007 0007 	and.w	r0, r7, #7
  4061fc:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4061fe:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  406202:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  406206:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40620a:	f3bf 8f4f 	dsb	sy
  40620e:	f04f 34ff 	mov.w	r4, #4294967295
  406212:	fa04 fc00 	lsl.w	ip, r4, r0
  406216:	fa06 f000 	lsl.w	r0, r6, r0
  40621a:	fa04 f40e 	lsl.w	r4, r4, lr
  40621e:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  406222:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  406224:	463a      	mov	r2, r7
  406226:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  406228:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40622c:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  406230:	3a01      	subs	r2, #1
  406232:	4423      	add	r3, r4
  406234:	f1b2 3fff 	cmp.w	r2, #4294967295
  406238:	d1f6      	bne.n	406228 <camTest+0x338>
        } while(sets--);
  40623a:	3e01      	subs	r6, #1
  40623c:	4460      	add	r0, ip
  40623e:	f1b6 3fff 	cmp.w	r6, #4294967295
  406242:	d1ef      	bne.n	406224 <camTest+0x334>
  406244:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  406248:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40624c:	4b47      	ldr	r3, [pc, #284]	; (40636c <camTest+0x47c>)
  40624e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  406252:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  406256:	f007 0007 	and.w	r0, r7, #7
  40625a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40625c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  406260:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  406264:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  406268:	f3bf 8f4f 	dsb	sy
  40626c:	f04f 34ff 	mov.w	r4, #4294967295
  406270:	fa04 fc00 	lsl.w	ip, r4, r0
  406274:	fa06 f000 	lsl.w	r0, r6, r0
  406278:	fa04 f40e 	lsl.w	r4, r4, lr
  40627c:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  406280:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  406282:	463a      	mov	r2, r7
  406284:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  406286:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  40628a:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40628e:	3a01      	subs	r2, #1
  406290:	4423      	add	r3, r4
  406292:	f1b2 3fff 	cmp.w	r2, #4294967295
  406296:	d1f6      	bne.n	406286 <camTest+0x396>
        } while(sets--);
  406298:	3e01      	subs	r6, #1
  40629a:	4460      	add	r0, ip
  40629c:	f1b6 3fff 	cmp.w	r6, #4294967295
  4062a0:	d1ef      	bne.n	406282 <camTest+0x392>
  4062a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4062a6:	f3bf 8f6f 	isb	sy
	pmc_enable_periph_clk(ID_ISI);//
  4062aa:	203b      	movs	r0, #59	; 0x3b
  4062ac:	4b30      	ldr	r3, [pc, #192]	; (406370 <camTest+0x480>)
  4062ae:	4798      	blx	r3
preBufDescList[i].Current = (uint32_t)SRAM_BASE;
  4062b0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 406380 <camTest+0x490>
  4062b4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  4062b8:	f8c8 3000 	str.w	r3, [r8]
preBufDescList[i].Control = ISI_DMA_C_CTRL_C_FETCH;
  4062bc:	2301      	movs	r3, #1
  4062be:	f8c8 3004 	str.w	r3, [r8, #4]
preBufDescList[i].Next = (uint32_t)&preBufDescList[0];
  4062c2:	f8c8 8008 	str.w	r8, [r8, #8]
	printf("ISI ALLOCATE COMPLETE\r\n");
  4062c6:	482b      	ldr	r0, [pc, #172]	; (406374 <camTest+0x484>)
  4062c8:	4b1f      	ldr	r3, [pc, #124]	; (406348 <camTest+0x458>)
  4062ca:	4798      	blx	r3
	ISI->ISI_CR = ISI_CR_ISI_SRST | ISI_CR_ISI_DIS;
  4062cc:	4b2a      	ldr	r3, [pc, #168]	; (406378 <camTest+0x488>)
  4062ce:	2206      	movs	r2, #6
  4062d0:	625a      	str	r2, [r3, #36]	; 0x24
	while (((ISI->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST)&&(iters>0)) {  //early boards stalled here
  4062d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4062d4:	f013 0f04 	tst.w	r3, #4
  4062d8:	d111      	bne.n	4062fe <camTest+0x40e>
  4062da:	f240 54dc 	movw	r4, #1500	; 0x5dc
		delay_ms(1);
  4062de:	f24c 578e 	movw	r7, #50574	; 0xc58e
  4062e2:	4e17      	ldr	r6, [pc, #92]	; (406340 <camTest+0x450>)
	while (((ISI->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST)&&(iters>0)) {  //early boards stalled here
  4062e4:	4d24      	ldr	r5, [pc, #144]	; (406378 <camTest+0x488>)
		delay_ms(1);
  4062e6:	4638      	mov	r0, r7
  4062e8:	47b0      	blx	r6
		iters--;
  4062ea:	3c01      	subs	r4, #1
	while (((ISI->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST)&&(iters>0)) {  //early boards stalled here
  4062ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4062ee:	f013 0f04 	tst.w	r3, #4
  4062f2:	d101      	bne.n	4062f8 <camTest+0x408>
  4062f4:	2c00      	cmp	r4, #0
  4062f6:	dcf6      	bgt.n	4062e6 <camTest+0x3f6>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  4062f8:	b90c      	cbnz	r4, 4062fe <camTest+0x40e>
  4062fa:	2401      	movs	r4, #1
  4062fc:	e6b2      	b.n	406064 <camTest+0x174>
	ISI->ISI_CR |= ISI_CR_ISI_EN;
  4062fe:	4c1e      	ldr	r4, [pc, #120]	; (406378 <camTest+0x488>)
  406300:	6a63      	ldr	r3, [r4, #36]	; 0x24
  406302:	f043 0301 	orr.w	r3, r3, #1
  406306:	6263      	str	r3, [r4, #36]	; 0x24
	delay_ms(10);
  406308:	481c      	ldr	r0, [pc, #112]	; (40637c <camTest+0x48c>)
  40630a:	4b0d      	ldr	r3, [pc, #52]	; (406340 <camTest+0x450>)
  40630c:	4798      	blx	r3
	while (((ISI->ISI_SR & ISI_SR_ENABLE) != ISI_SR_ENABLE)&&(iters>0)) {  //early boards stalled here
  40630e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  406310:	f013 0f01 	tst.w	r3, #1
  406314:	d136      	bne.n	406384 <camTest+0x494>
  406316:	f240 54dc 	movw	r4, #1500	; 0x5dc
		delay_ms(1);
  40631a:	f24c 578e 	movw	r7, #50574	; 0xc58e
  40631e:	4e08      	ldr	r6, [pc, #32]	; (406340 <camTest+0x450>)
	while (((ISI->ISI_SR & ISI_SR_ENABLE) != ISI_SR_ENABLE)&&(iters>0)) {  //early boards stalled here
  406320:	4d15      	ldr	r5, [pc, #84]	; (406378 <camTest+0x488>)
		delay_ms(1);
  406322:	4638      	mov	r0, r7
  406324:	47b0      	blx	r6
		iters--;
  406326:	3c01      	subs	r4, #1
	while (((ISI->ISI_SR & ISI_SR_ENABLE) != ISI_SR_ENABLE)&&(iters>0)) {  //early boards stalled here
  406328:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40632a:	f013 0f01 	tst.w	r3, #1
  40632e:	d101      	bne.n	406334 <camTest+0x444>
  406330:	2c00      	cmp	r4, #0
  406332:	dcf6      	bgt.n	406322 <camTest+0x432>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  406334:	bb34      	cbnz	r4, 406384 <camTest+0x494>
  406336:	2401      	movs	r4, #1
  406338:	e694      	b.n	406064 <camTest+0x174>
  40633a:	bf00      	nop
  40633c:	004d2b25 	.word	0x004d2b25
  406340:	20400001 	.word	0x20400001
  406344:	0040abe8 	.word	0x0040abe8
  406348:	004079b1 	.word	0x004079b1
  40634c:	40018000 	.word	0x40018000
  406350:	00400335 	.word	0x00400335
  406354:	0040abf8 	.word	0x0040abf8
  406358:	400e1850 	.word	0x400e1850
  40635c:	a5000001 	.word	0xa5000001
  406360:	0040ac0c 	.word	0x0040ac0c
  406364:	06075ed6 	.word	0x06075ed6
  406368:	0303af6b 	.word	0x0303af6b
  40636c:	e000ed00 	.word	0xe000ed00
  406370:	004021a9 	.word	0x004021a9
  406374:	0040ac20 	.word	0x0040ac20
  406378:	4004c000 	.word	0x4004c000
  40637c:	0007b784 	.word	0x0007b784
  406380:	204018a0 	.word	0x204018a0
	printf("ISI ENABLED\r\n");
  406384:	4888      	ldr	r0, [pc, #544]	; (4065a8 <camTest+0x6b8>)
  406386:	4b89      	ldr	r3, [pc, #548]	; (4065ac <camTest+0x6bc>)
  406388:	4798      	blx	r3
	adsIsiConfig.crc_sync=0;//0=no crc on embedded sync
  40638a:	2300      	movs	r3, #0
  40638c:	f88d 300c 	strb.w	r3, [sp, #12]
	adsIsiConfig.emb_sync=0;//0=sync on vsync/hsync signals
  406390:	f88d 300b 	strb.w	r3, [sp, #11]
	adsIsiConfig.hpol=0;//0=sync active high
  406394:	f88d 3008 	strb.w	r3, [sp, #8]
	adsIsiConfig.vpol=0;//0=sync active high
  406398:	f88d 3009 	strb.w	r3, [sp, #9]
	adsIsiConfig.image_fmt=ISI_INPUT_YUV;//ISI_INPUT_GS_8BIT;//need 8-bit "grayscale" ("grayscale is deceiving term, it means raw unprocessed, it can mean color)
  40639c:	f88d 3010 	strb.w	r3, [sp, #16]
	adsIsiConfig.image_hsize=1600;//OV2655 color bar ~works with 1600.
  4063a0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  4063a4:	9205      	str	r2, [sp, #20]
	adsIsiConfig.image_vsize=1200;//480;//960;//480;
  4063a6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
  4063aa:	9206      	str	r2, [sp, #24]
	adsIsiConfig.sld=0;//h blanking
  4063ac:	f88d 300e 	strb.w	r3, [sp, #14]
	adsIsiConfig.sfd=0;//v blanking
  4063b0:	f88d 300f 	strb.w	r3, [sp, #15]
	adsIsiConfig.pck_pol=0;//0=data sampled on rising edge
  4063b4:	f88d 300a 	strb.w	r3, [sp, #10]
	adsIsiConfig.thmask=0;//only four beats of AHB burst allowed
  4063b8:	f88d 300d 	strb.w	r3, [sp, #13]
	isi_init(ISI, &adsIsiConfig);
  4063bc:	4d7c      	ldr	r5, [pc, #496]	; (4065b0 <camTest+0x6c0>)
  4063be:	a902      	add	r1, sp, #8
  4063c0:	4628      	mov	r0, r5
  4063c2:	4b7c      	ldr	r3, [pc, #496]	; (4065b4 <camTest+0x6c4>)
  4063c4:	4798      	blx	r3
	isi_set_dma_codec_path(ISI,1, 1000,&preBufDescList[0], 1, SRAM_BASE);//Use codec path for capturing in "grayscale" (raw color) mode.
  4063c6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  4063ca:	9301      	str	r3, [sp, #4]
  4063cc:	2101      	movs	r1, #1
  4063ce:	9100      	str	r1, [sp, #0]
  4063d0:	4643      	mov	r3, r8
  4063d2:	22e8      	movs	r2, #232	; 0xe8
  4063d4:	4628      	mov	r0, r5
  4063d6:	4c78      	ldr	r4, [pc, #480]	; (4065b8 <camTest+0x6c8>)
  4063d8:	47a0      	blx	r4
	ISI->ISI_IDR = 0xFFFFFFFF;
  4063da:	f04f 34ff 	mov.w	r4, #4294967295
  4063de:	632c      	str	r4, [r5, #48]	; 0x30
	ISI->ISI_IER = ISI_IER_CXFR_DONE;
  4063e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4063e4:	62eb      	str	r3, [r5, #44]	; 0x2c
	ISI->ISI_DMA_CHDR |= ISI_DMA_CHDR_P_CH_DIS;//disable Preview Mode
  4063e6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4063e8:	f043 0301 	orr.w	r3, r3, #1
  4063ec:	63eb      	str	r3, [r5, #60]	; 0x3c
	ISI->ISI_DMA_CHDR |= ISI_DMA_CHDR_C_CH_DIS;//disable Codec Mode
  4063ee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4063f0:	f043 0302 	orr.w	r3, r3, #2
  4063f4:	63eb      	str	r3, [r5, #60]	; 0x3c
    ccsidr  = SCB->CCSIDR;
  4063f6:	4b71      	ldr	r3, [pc, #452]	; (4065bc <camTest+0x6cc>)
  4063f8:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4063fc:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  406400:	f006 0007 	and.w	r0, r6, #7
  406404:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  406406:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40640a:	fab6 f786 	clz	r7, r6
    wshift  = __CLZ(ways) & 0x1f;
  40640e:	f007 071f 	and.w	r7, r7, #31
  __ASM volatile ("dsb");
  406412:	f3bf 8f4f 	dsb	sy
  406416:	fa04 fc00 	lsl.w	ip, r4, r0
  40641a:	fa0e f000 	lsl.w	r0, lr, r0
  40641e:	40bc      	lsls	r4, r7
  406420:	fa06 f707 	lsl.w	r7, r6, r7
              SCB->DCCSW = sw;
  406424:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  406426:	4632      	mov	r2, r6
  406428:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  40642a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCSW = sw;
  40642e:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
            } while(tmpways--);
  406432:	3a01      	subs	r2, #1
  406434:	4423      	add	r3, r4
  406436:	f1b2 3fff 	cmp.w	r2, #4294967295
  40643a:	d1f6      	bne.n	40642a <camTest+0x53a>
        } while(sets--);
  40643c:	f10e 3eff 	add.w	lr, lr, #4294967295
  406440:	4460      	add	r0, ip
  406442:	f1be 3fff 	cmp.w	lr, #4294967295
  406446:	d1ee      	bne.n	406426 <camTest+0x536>
  406448:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40644c:	f3bf 8f6f 	isb	sy
	ISI->ISI_DMA_CHER |= ISI_DMA_CHER_C_CH_EN;//enable Codec Mode. MUST USE CODEC PATH BECAUSE PREVIEW IS ONLY 640 X 480
  406450:	4a57      	ldr	r2, [pc, #348]	; (4065b0 <camTest+0x6c0>)
  406452:	6b93      	ldr	r3, [r2, #56]	; 0x38
  406454:	f043 0302 	orr.w	r3, r3, #2
  406458:	6393      	str	r3, [r2, #56]	; 0x38
	printf("ISI INIT DONE A\r\n");
  40645a:	4859      	ldr	r0, [pc, #356]	; (4065c0 <camTest+0x6d0>)
  40645c:	4b53      	ldr	r3, [pc, #332]	; (4065ac <camTest+0x6bc>)
  40645e:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406460:	4b58      	ldr	r3, [pc, #352]	; (4065c4 <camTest+0x6d4>)
  406462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  406466:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406468:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40646c:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(5);
  40646e:	4856      	ldr	r0, [pc, #344]	; (4065c8 <camTest+0x6d8>)
  406470:	4b56      	ldr	r3, [pc, #344]	; (4065cc <camTest+0x6dc>)
  406472:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  406474:	4b56      	ldr	r3, [pc, #344]	; (4065d0 <camTest+0x6e0>)
  406476:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40647a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40647e:	21e0      	movs	r1, #224	; 0xe0
  406480:	f883 133b 	strb.w	r1, [r3, #827]	; 0x33b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  406484:	605a      	str	r2, [r3, #4]
 */
static inline char isi_capture(Isi *p_isi)
{
	char captureIters = 0;
	/* A new request cannot be taken into account while CDC_PND bit is active */
	while((p_isi->ISI_SR & ISI_SR_CDC_PND) == ISI_SR_CDC_PND);
  406486:	4a4a      	ldr	r2, [pc, #296]	; (4065b0 <camTest+0x6c0>)
  406488:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40648a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40648e:	d1fb      	bne.n	406488 <camTest+0x598>
	p_isi->ISI_CR = ISI_CR_ISI_CDC;
  406490:	f44f 7280 	mov.w	r2, #256	; 0x100
  406494:	4b46      	ldr	r3, [pc, #280]	; (4065b0 <camTest+0x6c0>)
  406496:	625a      	str	r2, [r3, #36]	; 0x24
	printf("ISI CAPTURE DONE. CapIters = %d   ",capIters);
  406498:	2100      	movs	r1, #0
  40649a:	484e      	ldr	r0, [pc, #312]	; (4065d4 <camTest+0x6e4>)
  40649c:	4b43      	ldr	r3, [pc, #268]	; (4065ac <camTest+0x6bc>)
  40649e:	4798      	blx	r3
	delay_ms(1200);//100ms left first row of memory wrong. Need even longer delay if use slower PLL divide on camera.
  4064a0:	484d      	ldr	r0, [pc, #308]	; (4065d8 <camTest+0x6e8>)
  4064a2:	4b4a      	ldr	r3, [pc, #296]	; (4065cc <camTest+0x6dc>)
  4064a4:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  4064a6:	4b45      	ldr	r3, [pc, #276]	; (4065bc <camTest+0x6cc>)
  4064a8:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4064ac:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4064b0:	f006 0007 	and.w	r0, r6, #7
  4064b4:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4064b6:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4064ba:	fab6 f786 	clz	r7, r6
    wshift  = __CLZ(ways) & 0x1f;
  4064be:	f007 071f 	and.w	r7, r7, #31
  __ASM volatile ("dsb");
  4064c2:	f3bf 8f4f 	dsb	sy
  4064c6:	f04f 34ff 	mov.w	r4, #4294967295
  4064ca:	fa04 fc00 	lsl.w	ip, r4, r0
  4064ce:	fa0e f000 	lsl.w	r0, lr, r0
  4064d2:	40bc      	lsls	r4, r7
  4064d4:	fa06 f707 	lsl.w	r7, r6, r7
              SCB->DCCISW = sw;
  4064d8:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4064da:	4632      	mov	r2, r6
  4064dc:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  4064de:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  4064e2:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  4064e6:	3a01      	subs	r2, #1
  4064e8:	4423      	add	r3, r4
  4064ea:	f1b2 3fff 	cmp.w	r2, #4294967295
  4064ee:	d1f6      	bne.n	4064de <camTest+0x5ee>
        } while(sets--);
  4064f0:	f10e 3eff 	add.w	lr, lr, #4294967295
  4064f4:	4460      	add	r0, ip
  4064f6:	f1be 3fff 	cmp.w	lr, #4294967295
  4064fa:	d1ee      	bne.n	4064da <camTest+0x5ea>
  4064fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  406500:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  406504:	4b2d      	ldr	r3, [pc, #180]	; (4065bc <camTest+0x6cc>)
  406506:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40650a:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40650e:	f006 0007 	and.w	r0, r6, #7
  406512:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  406514:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  406518:	fab6 f786 	clz	r7, r6
    wshift  = __CLZ(ways) & 0x1f;
  40651c:	f007 071f 	and.w	r7, r7, #31
  __ASM volatile ("dsb");
  406520:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  406524:	695a      	ldr	r2, [r3, #20]
  406526:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  40652a:	615a      	str	r2, [r3, #20]
  40652c:	f04f 34ff 	mov.w	r4, #4294967295
  406530:	fa04 fc00 	lsl.w	ip, r4, r0
  406534:	fa0e f000 	lsl.w	r0, lr, r0
  406538:	40bc      	lsls	r4, r7
  40653a:	fa06 f707 	lsl.w	r7, r6, r7
              SCB->DCCISW = sw;
  40653e:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  406540:	4632      	mov	r2, r6
  406542:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  406544:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  406548:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40654c:	3a01      	subs	r2, #1
  40654e:	4423      	add	r3, r4
  406550:	f1b2 3fff 	cmp.w	r2, #4294967295
  406554:	d1f6      	bne.n	406544 <camTest+0x654>
        } while(sets--);
  406556:	f10e 3eff 	add.w	lr, lr, #4294967295
  40655a:	4460      	add	r0, ip
  40655c:	f1be 3fff 	cmp.w	lr, #4294967295
  406560:	d1ee      	bne.n	406540 <camTest+0x650>
  406562:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  406566:	f3bf 8f6f 	isb	sy
	ov_configure(BOARD_TWIHS, 2);//OV2710 RESET. Required to free up ISID7_SDdat3 for SDcard to work.  OV2655 = 2 for Reset (not needed for 2655??)
  40656a:	2102      	movs	r1, #2
  40656c:	481b      	ldr	r0, [pc, #108]	; (4065dc <camTest+0x6ec>)
  40656e:	4b1c      	ldr	r3, [pc, #112]	; (4065e0 <camTest+0x6f0>)
  406570:	4798      	blx	r3
  406572:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  406576:	4b13      	ldr	r3, [pc, #76]	; (4065c4 <camTest+0x6d4>)
  406578:	631a      	str	r2, [r3, #48]	; 0x30
	delay_ms(1000);
  40657a:	481a      	ldr	r0, [pc, #104]	; (4065e4 <camTest+0x6f4>)
  40657c:	4e13      	ldr	r6, [pc, #76]	; (4065cc <camTest+0x6dc>)
  40657e:	47b0      	blx	r6
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  406580:	4a19      	ldr	r2, [pc, #100]	; (4065e8 <camTest+0x6f8>)
  406582:	4b1a      	ldr	r3, [pc, #104]	; (4065ec <camTest+0x6fc>)
  406584:	601a      	str	r2, [r3, #0]
  406586:	4c1a      	ldr	r4, [pc, #104]	; (4065f0 <camTest+0x700>)
  406588:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40658c:	6325      	str	r5, [r4, #48]	; 0x30
  40658e:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(1);
  406590:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406594:	47b0      	blx	r6
  406596:	6325      	str	r5, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406598:	f44f 7380 	mov.w	r3, #256	; 0x100
  40659c:	6363      	str	r3, [r4, #52]	; 0x34
	printf("CAM OFF\r\n");
  40659e:	4815      	ldr	r0, [pc, #84]	; (4065f4 <camTest+0x704>)
  4065a0:	4b02      	ldr	r3, [pc, #8]	; (4065ac <camTest+0x6bc>)
  4065a2:	4798      	blx	r3
	char ret=0;
  4065a4:	2400      	movs	r4, #0
  4065a6:	e55d      	b.n	406064 <camTest+0x174>
  4065a8:	0040ac38 	.word	0x0040ac38
  4065ac:	004079b1 	.word	0x004079b1
  4065b0:	4004c000 	.word	0x4004c000
  4065b4:	00401231 	.word	0x00401231
  4065b8:	004012e1 	.word	0x004012e1
  4065bc:	e000ed00 	.word	0xe000ed00
  4065c0:	0040ac48 	.word	0x0040ac48
  4065c4:	400e1200 	.word	0x400e1200
  4065c8:	0003dbc2 	.word	0x0003dbc2
  4065cc:	20400001 	.word	0x20400001
  4065d0:	e000e100 	.word	0xe000e100
  4065d4:	0040ac5c 	.word	0x0040ac5c
  4065d8:	039e05b4 	.word	0x039e05b4
  4065dc:	40018000 	.word	0x40018000
  4065e0:	00400335 	.word	0x00400335
  4065e4:	0303af6b 	.word	0x0303af6b
  4065e8:	a5000001 	.word	0xa5000001
  4065ec:	400e1850 	.word	0x400e1850
  4065f0:	400e0e00 	.word	0x400e0e00
  4065f4:	0040ac80 	.word	0x0040ac80

004065f8 <sendPic>:
void sendPic(void){
  4065f8:	b508      	push	{r3, lr}
	camTest(0);
  4065fa:	2000      	movs	r0, #0
  4065fc:	4b02      	ldr	r3, [pc, #8]	; (406608 <sendPic+0x10>)
  4065fe:	4798      	blx	r3
	printf("SENT PIC\r\n");
  406600:	4802      	ldr	r0, [pc, #8]	; (40660c <sendPic+0x14>)
  406602:	4b03      	ldr	r3, [pc, #12]	; (406610 <sendPic+0x18>)
  406604:	4798      	blx	r3
  406606:	bd08      	pop	{r3, pc}
  406608:	00405ef1 	.word	0x00405ef1
  40660c:	0040af6c 	.word	0x0040af6c
  406610:	004079b1 	.word	0x004079b1

00406614 <main_vendor_int_in_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  406614:	b100      	cbz	r0, 406618 <main_vendor_int_in_received+0x4>
  406616:	4770      	bx	lr
{
  406618:	b510      	push	{r4, lr}
  40661a:	b084      	sub	sp, #16
	udi_vendor_interrupt_out_run(
  40661c:	4c1a      	ldr	r4, [pc, #104]	; (406688 <main_vendor_int_in_received+0x74>)
  40661e:	4a1b      	ldr	r2, [pc, #108]	; (40668c <main_vendor_int_in_received+0x78>)
  406620:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406624:	4620      	mov	r0, r4
  406626:	4b1a      	ldr	r3, [pc, #104]	; (406690 <main_vendor_int_in_received+0x7c>)
  406628:	4798      	blx	r3
	if((main_buf_loopback[0]=='W')&&(main_buf_loopback[1]=='D')&&(main_buf_loopback[2]=='S')){
  40662a:	7823      	ldrb	r3, [r4, #0]
  40662c:	2b57      	cmp	r3, #87	; 0x57
  40662e:	d010      	beq.n	406652 <main_vendor_int_in_received+0x3e>
	printf("IN: %d %d %d %d %d %d %d\r\n",main_buf_loopback[0],main_buf_loopback[1],main_buf_loopback[2],main_buf_loopback[3],main_buf_loopback[4],main_buf_loopback[5],main_buf_loopback[6]);
  406630:	4815      	ldr	r0, [pc, #84]	; (406688 <main_vendor_int_in_received+0x74>)
  406632:	7883      	ldrb	r3, [r0, #2]
  406634:	7842      	ldrb	r2, [r0, #1]
  406636:	7801      	ldrb	r1, [r0, #0]
  406638:	7984      	ldrb	r4, [r0, #6]
  40663a:	9403      	str	r4, [sp, #12]
  40663c:	7944      	ldrb	r4, [r0, #5]
  40663e:	9402      	str	r4, [sp, #8]
  406640:	7904      	ldrb	r4, [r0, #4]
  406642:	9401      	str	r4, [sp, #4]
  406644:	78c0      	ldrb	r0, [r0, #3]
  406646:	9000      	str	r0, [sp, #0]
  406648:	4812      	ldr	r0, [pc, #72]	; (406694 <main_vendor_int_in_received+0x80>)
  40664a:	4c13      	ldr	r4, [pc, #76]	; (406698 <main_vendor_int_in_received+0x84>)
  40664c:	47a0      	blx	r4
}
  40664e:	b004      	add	sp, #16
  406650:	bd10      	pop	{r4, pc}
	if((main_buf_loopback[0]=='W')&&(main_buf_loopback[1]=='D')&&(main_buf_loopback[2]=='S')){
  406652:	7863      	ldrb	r3, [r4, #1]
  406654:	2b44      	cmp	r3, #68	; 0x44
  406656:	d1eb      	bne.n	406630 <main_vendor_int_in_received+0x1c>
  406658:	78a3      	ldrb	r3, [r4, #2]
  40665a:	2b53      	cmp	r3, #83	; 0x53
  40665c:	d1e8      	bne.n	406630 <main_vendor_int_in_received+0x1c>
		switch(main_buf_loopback[5]){
  40665e:	7963      	ldrb	r3, [r4, #5]
  406660:	2b02      	cmp	r3, #2
  406662:	d006      	beq.n	406672 <main_vendor_int_in_received+0x5e>
  406664:	2b05      	cmp	r3, #5
  406666:	d00c      	beq.n	406682 <main_vendor_int_in_received+0x6e>
  406668:	2b01      	cmp	r3, #1
  40666a:	d1e1      	bne.n	406630 <main_vendor_int_in_received+0x1c>
			sendPic();
  40666c:	4b0b      	ldr	r3, [pc, #44]	; (40669c <main_vendor_int_in_received+0x88>)
  40666e:	4798      	blx	r3
			break;
  406670:	e7de      	b.n	406630 <main_vendor_int_in_received+0x1c>
			redBlink(main_buf_loopback[17]);
  406672:	4b05      	ldr	r3, [pc, #20]	; (406688 <main_vendor_int_in_received+0x74>)
  406674:	7c58      	ldrb	r0, [r3, #17]
  406676:	4b0a      	ldr	r3, [pc, #40]	; (4066a0 <main_vendor_int_in_received+0x8c>)
  406678:	4798      	blx	r3
			printf("Blinked\r\n");
  40667a:	480a      	ldr	r0, [pc, #40]	; (4066a4 <main_vendor_int_in_received+0x90>)
  40667c:	4b06      	ldr	r3, [pc, #24]	; (406698 <main_vendor_int_in_received+0x84>)
  40667e:	4798      	blx	r3
			break;
  406680:	e7d6      	b.n	406630 <main_vendor_int_in_received+0x1c>
			receiveUSBcamConfig();
  406682:	4b09      	ldr	r3, [pc, #36]	; (4066a8 <main_vendor_int_in_received+0x94>)
  406684:	4798      	blx	r3
			break;
  406686:	e7d3      	b.n	406630 <main_vendor_int_in_received+0x1c>
  406688:	20400bf4 	.word	0x20400bf4
  40668c:	00403f9d 	.word	0x00403f9d
  406690:	00401661 	.word	0x00401661
  406694:	0040ade4 	.word	0x0040ade4
  406698:	004079b1 	.word	0x004079b1
  40669c:	004065f9 	.word	0x004065f9
  4066a0:	00405681 	.word	0x00405681
  4066a4:	0040add8 	.word	0x0040add8
  4066a8:	004042a5 	.word	0x004042a5

004066ac <main_vendor_enable>:
{
  4066ac:	b510      	push	{r4, lr}
	main_b_vendor_enable = true;
  4066ae:	2401      	movs	r4, #1
  4066b0:	4b0d      	ldr	r3, [pc, #52]	; (4066e8 <main_vendor_enable+0x3c>)
  4066b2:	701c      	strb	r4, [r3, #0]
	main_vendor_int_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  4066b4:	2200      	movs	r2, #0
  4066b6:	4611      	mov	r1, r2
  4066b8:	4610      	mov	r0, r2
  4066ba:	4b0c      	ldr	r3, [pc, #48]	; (4066ec <main_vendor_enable+0x40>)
  4066bc:	4798      	blx	r3
	g_usbFlagC=3;
  4066be:	2203      	movs	r2, #3
  4066c0:	4b0b      	ldr	r3, [pc, #44]	; (4066f0 <main_vendor_enable+0x44>)
  4066c2:	701a      	strb	r2, [r3, #0]
	main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  4066c4:	2200      	movs	r2, #0
  4066c6:	4611      	mov	r1, r2
  4066c8:	4610      	mov	r0, r2
  4066ca:	4b0a      	ldr	r3, [pc, #40]	; (4066f4 <main_vendor_enable+0x48>)
  4066cc:	4798      	blx	r3
	g_usbFlagD=4;
  4066ce:	2204      	movs	r2, #4
  4066d0:	4b09      	ldr	r3, [pc, #36]	; (4066f8 <main_vendor_enable+0x4c>)
  4066d2:	701a      	strb	r2, [r3, #0]
	main_buf_iso_sel=0;
  4066d4:	2000      	movs	r0, #0
  4066d6:	4b09      	ldr	r3, [pc, #36]	; (4066fc <main_vendor_enable+0x50>)
  4066d8:	7018      	strb	r0, [r3, #0]
	main_vendor_iso_out_received(UDD_EP_TRANSFER_OK, 0, 0);
  4066da:	4602      	mov	r2, r0
  4066dc:	4601      	mov	r1, r0
  4066de:	4b08      	ldr	r3, [pc, #32]	; (406700 <main_vendor_enable+0x54>)
  4066e0:	4798      	blx	r3
}
  4066e2:	4620      	mov	r0, r4
  4066e4:	bd10      	pop	{r4, pc}
  4066e6:	bf00      	nop
  4066e8:	20400bf0 	.word	0x20400bf0
  4066ec:	00406615 	.word	0x00406615
  4066f0:	20400bee 	.word	0x20400bee
  4066f4:	00403fe5 	.word	0x00403fe5
  4066f8:	20400bef 	.word	0x20400bef
  4066fc:	20400bf1 	.word	0x20400bf1
  406700:	00404095 	.word	0x00404095

00406704 <sleepPins>:
void sleepPins(void){
  406704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pmc_enable_periph_clk(ID_PIOA);
  406708:	200a      	movs	r0, #10
  40670a:	4ce1      	ldr	r4, [pc, #900]	; (406a90 <sleepPins+0x38c>)
  40670c:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  40670e:	200b      	movs	r0, #11
  406710:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOC);
  406712:	200c      	movs	r0, #12
  406714:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  406716:	2010      	movs	r0, #16
  406718:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOE);
  40671a:	2011      	movs	r0, #17
  40671c:	47a0      	blx	r4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40671e:	4bdd      	ldr	r3, [pc, #884]	; (406a94 <sleepPins+0x390>)
  406720:	2701      	movs	r7, #1
  406722:	615f      	str	r7, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406724:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406728:	2602      	movs	r6, #2
  40672a:	615e      	str	r6, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40672c:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406730:	2504      	movs	r5, #4
  406732:	615d      	str	r5, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406734:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406738:	2440      	movs	r4, #64	; 0x40
  40673a:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40673c:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406740:	f04f 0a80 	mov.w	sl, #128	; 0x80
  406744:	f8c3 a014 	str.w	sl, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406748:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40674c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  406750:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406752:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406756:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40675a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40675c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406764:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406766:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40676a:	f44f 4980 	mov.w	r9, #16384	; 0x4000
  40676e:	f8c3 9014 	str.w	r9, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406772:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406776:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  40677a:	f8c3 8014 	str.w	r8, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40677e:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406782:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  406786:	f8c3 c014 	str.w	ip, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40678a:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40678e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  406792:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406794:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406798:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  40679c:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40679e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4067a2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  4067a6:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4067a8:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4067ac:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  4067b0:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4067b2:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4067b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  4067ba:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4067bc:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4067c0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  4067c4:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4067c6:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4067ca:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
  4067ce:	f8c3 e010 	str.w	lr, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4067d2:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4067d6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  4067da:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4067dc:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4067e0:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4067e2:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4067e6:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4067e8:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4067ea:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4067ee:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  4067f2:	f02b 0b01 	bic.w	fp, fp, #1
  4067f6:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4067fa:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  4067fe:	f02b 0b01 	bic.w	fp, fp, #1
  406802:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  406806:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  406808:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDER = mask;
  40680c:	651e      	str	r6, [r3, #80]	; 0x50
		base->PIO_IFER = mask;
  40680e:	621e      	str	r6, [r3, #32]
		base->PIO_IFSCDR = mask;
  406810:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406814:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  406818:	f02b 0b02 	bic.w	fp, fp, #2
  40681c:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406820:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  406824:	f02b 0b02 	bic.w	fp, fp, #2
  406828:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40682c:	665d      	str	r5, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40682e:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406832:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406834:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406836:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40683a:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  40683e:	f02b 0b04 	bic.w	fp, fp, #4
  406842:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406846:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  40684a:	f02b 0b04 	bic.w	fp, fp, #4
  40684e:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  406852:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  406854:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDER = mask;
  406858:	651c      	str	r4, [r3, #80]	; 0x50
		base->PIO_IFDR = mask;
  40685a:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40685c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406860:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  406864:	f02b 0b40 	bic.w	fp, fp, #64	; 0x40
  406868:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40686c:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  406870:	f02b 0b40 	bic.w	fp, fp, #64	; 0x40
  406874:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  406878:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40687c:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDER = mask;
  406880:	f8c3 a050 	str.w	sl, [r3, #80]	; 0x50
		base->PIO_IFDR = mask;
  406884:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406888:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40688c:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  406890:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
  406894:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406898:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  40689c:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
  4068a0:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  4068a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4068a8:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4068aa:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4068ae:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4068b0:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4068b2:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4068b6:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  4068ba:	f42a 6a00 	bic.w	sl, sl, #2048	; 0x800
  4068be:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4068c2:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  4068c6:	f42a 6a00 	bic.w	sl, sl, #2048	; 0x800
  4068ca:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  4068ce:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4068d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4068d4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4068d6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4068d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4068dc:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  4068e0:	f42a 5a80 	bic.w	sl, sl, #4096	; 0x1000
  4068e4:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4068e8:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  4068ec:	f42a 5a80 	bic.w	sl, sl, #4096	; 0x1000
  4068f0:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  4068f4:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4068f6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4068fa:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4068fc:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4068fe:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406902:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  406906:	f42a 5a00 	bic.w	sl, sl, #8192	; 0x2000
  40690a:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40690e:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  406912:	f42a 5a00 	bic.w	sl, sl, #8192	; 0x2000
  406916:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40691a:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40691e:	f8c3 9090 	str.w	r9, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406922:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406926:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40692a:	f8c3 9080 	str.w	r9, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40692e:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  406932:	f429 4980 	bic.w	r9, r9, #16384	; 0x4000
  406936:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40693a:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40693e:	f429 4980 	bic.w	r9, r9, #16384	; 0x4000
  406942:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  406946:	f8c3 8064 	str.w	r8, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40694a:	f8c3 8090 	str.w	r8, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40694e:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406952:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406956:	f8c3 8080 	str.w	r8, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40695a:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40695e:	f429 3900 	bic.w	r9, r9, #131072	; 0x20000
  406962:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406966:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  40696a:	f429 3900 	bic.w	r9, r9, #131072	; 0x20000
  40696e:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  406972:	f8c3 c064 	str.w	ip, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406976:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40697a:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40697e:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406982:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406986:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  40698a:	f429 2900 	bic.w	r9, r9, #524288	; 0x80000
  40698e:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406992:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  406996:	f429 2900 	bic.w	r9, r9, #524288	; 0x80000
  40699a:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40699e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  4069a2:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4069a4:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4069a8:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4069aa:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4069ac:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4069b0:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  4069b4:	f429 0980 	bic.w	r9, r9, #4194304	; 0x400000
  4069b8:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4069bc:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  4069c0:	f429 0980 	bic.w	r9, r9, #4194304	; 0x400000
  4069c4:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  4069c8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  4069cc:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4069ce:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4069d2:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4069d4:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4069d6:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4069da:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  4069de:	f029 7900 	bic.w	r9, r9, #33554432	; 0x2000000
  4069e2:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4069e6:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  4069ea:	f029 7900 	bic.w	r9, r9, #33554432	; 0x2000000
  4069ee:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  4069f2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  4069f6:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4069f8:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4069fc:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4069fe:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406a00:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406a04:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  406a08:	f029 6980 	bic.w	r9, r9, #67108864	; 0x4000000
  406a0c:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406a10:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  406a14:	f029 6980 	bic.w	r9, r9, #67108864	; 0x4000000
  406a18:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  406a1c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  406a20:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  406a22:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406a26:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406a28:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406a2a:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406a2e:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  406a32:	f029 6900 	bic.w	r9, r9, #134217728	; 0x8000000
  406a36:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406a3a:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  406a3e:	f029 6900 	bic.w	r9, r9, #134217728	; 0x8000000
  406a42:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406a46:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  406a4a:	6358      	str	r0, [r3, #52]	; 0x34
		base->PIO_PUER = mask;
  406a4c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  406a50:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406a52:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406a56:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406a58:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406a5a:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406a5e:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  406a62:	f029 5900 	bic.w	r9, r9, #536870912	; 0x20000000
  406a66:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406a6a:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  406a6e:	f029 5900 	bic.w	r9, r9, #536870912	; 0x20000000
  406a72:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  406a76:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  406a7a:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406a7e:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406a82:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406a86:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406a8a:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  406a8e:	e003      	b.n	406a98 <sleepPins+0x394>
  406a90:	004021a9 	.word	0x004021a9
  406a94:	400e0e00 	.word	0x400e0e00
  406a98:	f029 4980 	bic.w	r9, r9, #1073741824	; 0x40000000
  406a9c:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406aa0:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  406aa4:	f029 4980 	bic.w	r9, r9, #1073741824	; 0x40000000
  406aa8:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  406aac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  406ab0:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  406ab2:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406ab6:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406ab8:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406aba:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406abe:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  406ac2:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
  406ac6:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406aca:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  406ace:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
  406ad2:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406ad6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  406ada:	615f      	str	r7, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406adc:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406ae0:	615e      	str	r6, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406ae2:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406ae6:	615d      	str	r5, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406ae8:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406aec:	f04f 0b10 	mov.w	fp, #16
  406af0:	f8c3 b014 	str.w	fp, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406af4:	f8c3 b0a0 	str.w	fp, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406af8:	f04f 0a20 	mov.w	sl, #32
  406afc:	f8c3 a014 	str.w	sl, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406b00:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406b04:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406b06:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406b0a:	f44f 7900 	mov.w	r9, #512	; 0x200
  406b0e:	f8c3 9014 	str.w	r9, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406b12:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406b16:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406b18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406b1c:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406b1e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  406b22:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406b24:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406b28:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406b2a:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406b2c:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406b30:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  406b32:	f027 0701 	bic.w	r7, r7, #1
  406b36:	671f      	str	r7, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406b38:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  406b3a:	f027 0701 	bic.w	r7, r7, #1
  406b3e:	675f      	str	r7, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  406b40:	665e      	str	r6, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406b42:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406b46:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406b48:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406b4a:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406b4e:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  406b50:	f026 0602 	bic.w	r6, r6, #2
  406b54:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406b56:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  406b58:	f026 0602 	bic.w	r6, r6, #2
  406b5c:	675e      	str	r6, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  406b5e:	665d      	str	r5, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406b60:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406b64:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406b66:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406b68:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406b6c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  406b6e:	f025 0504 	bic.w	r5, r5, #4
  406b72:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406b74:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  406b76:	f025 0504 	bic.w	r5, r5, #4
  406b7a:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  406b7c:	f8c3 b064 	str.w	fp, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406b80:	f8c3 b090 	str.w	fp, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406b84:	f8c3 b054 	str.w	fp, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406b88:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406b8c:	f8c3 b080 	str.w	fp, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406b90:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  406b92:	f025 0510 	bic.w	r5, r5, #16
  406b96:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406b98:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  406b9a:	f025 0510 	bic.w	r5, r5, #16
  406b9e:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  406ba0:	f8c3 a064 	str.w	sl, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406ba4:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406ba8:	f8c3 a054 	str.w	sl, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406bac:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406bb0:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406bb4:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  406bb6:	f025 0520 	bic.w	r5, r5, #32
  406bba:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406bbc:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  406bbe:	f025 0520 	bic.w	r5, r5, #32
  406bc2:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  406bc4:	665c      	str	r4, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406bc6:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406bca:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406bcc:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406bce:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406bd2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  406bd4:	f024 0440 	bic.w	r4, r4, #64	; 0x40
  406bd8:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406bda:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  406bdc:	f024 0440 	bic.w	r4, r4, #64	; 0x40
  406be0:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  406be2:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406be6:	f8c3 9090 	str.w	r9, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406bea:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406bee:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406bf2:	f8c3 9080 	str.w	r9, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406bf6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  406bf8:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  406bfc:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406bfe:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  406c00:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  406c04:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  406c06:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  406c08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  406c0c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406c0e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406c14:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  406c16:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  406c1a:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406c1c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  406c1e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  406c22:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  406c24:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406c26:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406c2a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406c2c:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406c2e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406c32:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  406c34:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  406c38:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406c3a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  406c3c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  406c40:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406c42:	f503 7300 	add.w	r3, r3, #512	; 0x200
  406c46:	f44f 7580 	mov.w	r5, #256	; 0x100
  406c4a:	611d      	str	r5, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406c4c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406c50:	f8c3 9010 	str.w	r9, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406c54:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406c58:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406c5c:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406c5e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406c62:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406c66:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406c68:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406c6c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406c6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406c72:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406c74:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406c78:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  406c7c:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406c7e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406c82:	f8c3 8014 	str.w	r8, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406c86:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406c8a:	f8c3 c014 	str.w	ip, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406c8e:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406c92:	f8c3 e014 	str.w	lr, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406c96:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406c9a:	635d      	str	r5, [r3, #52]	; 0x34
  406c9c:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
		base->PIO_PUDR = mask;
  406ca0:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  406ca2:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406ca6:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406ca8:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406caa:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406cae:	6f19      	ldr	r1, [r3, #112]	; 0x70
  406cb0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  406cb4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406cb6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  406cb8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  406cbc:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  406cbe:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406cc0:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406cc4:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406cc6:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406cc8:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406ccc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  406cce:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  406cd2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406cd4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  406cd6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  406cda:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  406cdc:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406cde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406ce2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406ce4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406cea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  406cec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406cf0:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406cf2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  406cf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406cf8:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  406cfa:	461d      	mov	r5, r3
  406cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  406d00:	662b      	str	r3, [r5, #96]	; 0x60
		base->PIO_PPDDR = mask;
  406d02:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  406d06:	656b      	str	r3, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  406d08:	626b      	str	r3, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406d0a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406d0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  406d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  406d14:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406d16:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  406d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  406d1c:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  406d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  406d22:	666b      	str	r3, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406d24:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  406d28:	656b      	str	r3, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  406d2a:	626b      	str	r3, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406d2c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406d30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  406d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  406d36:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406d38:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  406d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  406d3e:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  406d40:	f8c5 8064 	str.w	r8, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406d44:	f8c5 8090 	str.w	r8, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  406d48:	f8c5 8054 	str.w	r8, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  406d4c:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406d50:	f8c5 8080 	str.w	r8, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406d54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  406d56:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  406d5a:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406d5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  406d5e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  406d62:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  406d64:	4662      	mov	r2, ip
  406d66:	f8c5 c064 	str.w	ip, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406d6a:	f8c5 c090 	str.w	ip, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  406d6e:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  406d72:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406d76:	f8c5 c080 	str.w	ip, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406d7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  406d7c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  406d80:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406d82:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  406d84:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  406d88:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  406d8a:	4673      	mov	r3, lr
  406d8c:	f8c5 e064 	str.w	lr, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406d90:	f8c5 e090 	str.w	lr, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  406d94:	f8c5 e054 	str.w	lr, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  406d98:	f8c5 e024 	str.w	lr, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406d9c:	f8c5 e080 	str.w	lr, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406da0:	6f29      	ldr	r1, [r5, #112]	; 0x70
  406da2:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  406da6:	6729      	str	r1, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406da8:	6f69      	ldr	r1, [r5, #116]	; 0x74
  406daa:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  406dae:	6769      	str	r1, [r5, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406db0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
  406db4:	f504 2461 	add.w	r4, r4, #921600	; 0xe1000
  406db8:	2101      	movs	r1, #1
  406dba:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406dbc:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406dc0:	2102      	movs	r1, #2
  406dc2:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406dc4:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406dc8:	2104      	movs	r1, #4
  406dca:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406dcc:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406dd0:	2708      	movs	r7, #8
  406dd2:	6167      	str	r7, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406dd4:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406dd8:	46d8      	mov	r8, fp
  406dda:	f8c4 b014 	str.w	fp, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406dde:	f8c4 b0a0 	str.w	fp, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406de2:	46d1      	mov	r9, sl
  406de4:	f8c4 a014 	str.w	sl, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406de8:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406dec:	2140      	movs	r1, #64	; 0x40
  406dee:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406df0:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406df4:	2180      	movs	r1, #128	; 0x80
  406df6:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406df8:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
  406e00:	6121      	str	r1, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e02:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406e06:	f44f 7b00 	mov.w	fp, #512	; 0x200
  406e0a:	f8c4 b014 	str.w	fp, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e0e:	f8c4 b0a0 	str.w	fp, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406e12:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  406e16:	f8c4 a014 	str.w	sl, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e1a:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406e1e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  406e22:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e24:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406e28:	f8c4 c014 	str.w	ip, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e2c:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406e30:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  406e34:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e36:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406e3a:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
  406e3e:	f8c4 e014 	str.w	lr, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e42:	f8c4 e0a0 	str.w	lr, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406e46:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  406e4a:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e4c:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406e50:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  406e54:	6160      	str	r0, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e56:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406e5a:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e5c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406e60:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406e64:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e66:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  406e6a:	2101      	movs	r1, #1
  406e6c:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406e6e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  406e72:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  406e74:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406e76:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406e7a:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  406e7e:	f02c 0c01 	bic.w	ip, ip, #1
  406e82:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406e86:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  406e8a:	f02c 0c01 	bic.w	ip, ip, #1
  406e8e:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  406e92:	2102      	movs	r1, #2
  406e94:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406e96:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  406e9a:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  406e9c:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406e9e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406ea2:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  406ea6:	f02c 0c02 	bic.w	ip, ip, #2
  406eaa:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406eae:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  406eb2:	f02c 0c02 	bic.w	ip, ip, #2
  406eb6:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  406eba:	2104      	movs	r1, #4
  406ebc:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406ebe:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  406ec2:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  406ec4:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406ec6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406eca:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  406ece:	f02c 0c04 	bic.w	ip, ip, #4
  406ed2:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406ed6:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  406eda:	f02c 0c04 	bic.w	ip, ip, #4
  406ede:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  406ee2:	6667      	str	r7, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406ee4:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  406ee8:	6567      	str	r7, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  406eea:	6267      	str	r7, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406eec:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406ef0:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  406ef4:	f02c 0c08 	bic.w	ip, ip, #8
  406ef8:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406efc:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  406f00:	f02c 0c08 	bic.w	ip, ip, #8
  406f04:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  406f08:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406f0c:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  406f10:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  406f14:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406f18:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406f1c:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  406f20:	f02c 0c10 	bic.w	ip, ip, #16
  406f24:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406f28:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  406f2c:	f02c 0c10 	bic.w	ip, ip, #16
  406f30:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  406f34:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406f38:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  406f3c:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  406f40:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406f44:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406f48:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  406f4c:	f02c 0c20 	bic.w	ip, ip, #32
  406f50:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406f54:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  406f58:	f02c 0c20 	bic.w	ip, ip, #32
  406f5c:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  406f60:	2140      	movs	r1, #64	; 0x40
  406f62:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406f64:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  406f68:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  406f6a:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406f6c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406f70:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  406f74:	f02c 0c40 	bic.w	ip, ip, #64	; 0x40
  406f78:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406f7c:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  406f80:	f02c 0c40 	bic.w	ip, ip, #64	; 0x40
  406f84:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  406f88:	2180      	movs	r1, #128	; 0x80
  406f8a:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406f8c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  406f90:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  406f92:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406f94:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406f98:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  406f9c:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  406fa0:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406fa4:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  406fa8:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  406fac:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
  406fb4:	6361      	str	r1, [r4, #52]	; 0x34
		base->PIO_PUER = mask;
  406fb6:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406fba:	f8c4 b090 	str.w	fp, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  406fbe:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  406fc2:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406fc6:	f8c4 b080 	str.w	fp, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406fca:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  406fce:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  406fd2:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406fd6:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  406fda:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  406fde:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  406fe2:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  406fe6:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  406fea:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  406fee:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406ff2:	f8c4 a080 	str.w	sl, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406ff6:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  406ffa:	f42c 6c80 	bic.w	ip, ip, #1024	; 0x400
  406ffe:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407002:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  407006:	f42c 6c80 	bic.w	ip, ip, #1024	; 0x400
  40700a:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40700e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  407012:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  407014:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  407018:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40701a:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40701c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407020:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  407024:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  407028:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40702c:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  407030:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  407034:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  407038:	6662      	str	r2, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40703a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40703e:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  407040:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407042:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407046:	6f22      	ldr	r2, [r4, #112]	; 0x70
  407048:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  40704c:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40704e:	6f62      	ldr	r2, [r4, #116]	; 0x74
  407050:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  407054:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  407056:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40705a:	6662      	str	r2, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40705c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  407060:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  407062:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407064:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407068:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40706a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40706e:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407070:	6f62      	ldr	r2, [r4, #116]	; 0x74
  407072:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  407076:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  407078:	f8c4 e064 	str.w	lr, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40707c:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  407080:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  407084:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407088:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40708c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40708e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  407092:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407094:	6f62      	ldr	r2, [r4, #116]	; 0x74
  407096:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  40709a:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40709c:	6666      	str	r6, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40709e:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4070a2:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4070a4:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4070a6:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4070aa:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4070ac:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  4070b0:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4070b2:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4070b4:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  4070b8:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  4070ba:	6660      	str	r0, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4070bc:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4070c0:	6560      	str	r0, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4070c2:	6260      	str	r0, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4070c4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4070c8:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4070ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
  4070ce:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4070d0:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4070d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
  4070d6:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  4070d8:	6663      	str	r3, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4070da:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4070de:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4070e0:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4070e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4070e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4070e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  4070ec:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4070ee:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4070f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  4070f4:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  4070f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  4070fa:	6663      	str	r3, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4070fc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  407100:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  407102:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407104:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407108:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40710a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40710e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407110:	6f63      	ldr	r3, [r4, #116]	; 0x74
  407112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  407116:	6763      	str	r3, [r4, #116]	; 0x74
 	resetPinsISI();
  407118:	4bcc      	ldr	r3, [pc, #816]	; (40744c <sleepPins+0xd48>)
  40711a:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40711c:	4ecc      	ldr	r6, [pc, #816]	; (407450 <sleepPins+0xd4c>)
  40711e:	6177      	str	r7, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407120:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407124:	f8c6 8014 	str.w	r8, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407128:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40712c:	f8c6 9010 	str.w	r9, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407130:	f8c6 90a0 	str.w	r9, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407134:	f8c6 b010 	str.w	fp, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407138:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40713c:	f8c6 a010 	str.w	sl, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407140:	f8c6 a0a0 	str.w	sl, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407144:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  407148:	6131      	str	r1, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40714a:	f8c6 10a0 	str.w	r1, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40714e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  407152:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407154:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_PUDR = mask;
  407158:	6637      	str	r7, [r6, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40715a:	f8c6 7090 	str.w	r7, [r6, #144]	; 0x90
		base->PIO_MDER = mask;
  40715e:	6537      	str	r7, [r6, #80]	; 0x50
		base->PIO_IFDR = mask;
  407160:	6277      	str	r7, [r6, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407162:	f8c6 7080 	str.w	r7, [r6, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407166:	6f33      	ldr	r3, [r6, #112]	; 0x70
  407168:	f023 0308 	bic.w	r3, r3, #8
  40716c:	6733      	str	r3, [r6, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40716e:	6f73      	ldr	r3, [r6, #116]	; 0x74
  407170:	f023 0308 	bic.w	r3, r3, #8
  407174:	6773      	str	r3, [r6, #116]	; 0x74
		base->PIO_PUDR = mask;
  407176:	f8c6 8060 	str.w	r8, [r6, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40717a:	f8c6 8090 	str.w	r8, [r6, #144]	; 0x90
		base->PIO_MDER = mask;
  40717e:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
		base->PIO_IFDR = mask;
  407182:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407186:	f8c6 8080 	str.w	r8, [r6, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40718a:	6f33      	ldr	r3, [r6, #112]	; 0x70
  40718c:	f023 0310 	bic.w	r3, r3, #16
  407190:	6733      	str	r3, [r6, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407192:	6f73      	ldr	r3, [r6, #116]	; 0x74
  407194:	f023 0310 	bic.w	r3, r3, #16
  407198:	6773      	str	r3, [r6, #116]	; 0x74
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40719a:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
  40719e:	f8c6 b034 	str.w	fp, [r6, #52]	; 0x34
  4071a2:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
  4071a6:	6371      	str	r1, [r6, #52]	; 0x34
  4071a8:	6372      	str	r2, [r6, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4071aa:	4baa      	ldr	r3, [pc, #680]	; (407454 <sleepPins+0xd50>)
  4071ac:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4071ae:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4071b2:	635f      	str	r7, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4071b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4071b8:	616b      	str	r3, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4071ba:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4071be:	662b      	str	r3, [r5, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4071c0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
		base->PIO_MDER = mask;
  4071c4:	652b      	str	r3, [r5, #80]	; 0x50
		base->PIO_IFDR = mask;
  4071c6:	626b      	str	r3, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4071c8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4071cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  4071ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  4071d2:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4071d4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  4071d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  4071da:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4071dc:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  4071e0:	f8c4 c010 	str.w	ip, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4071e4:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4071e8:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  4071ec:	f8c4 e010 	str.w	lr, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4071f0:	f8c4 e0a0 	str.w	lr, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4071f4:	6121      	str	r1, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4071f6:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4071fa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  4071fe:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407200:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407204:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407206:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40720a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  40720e:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407210:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407214:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
  407218:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  40721c:	6361      	str	r1, [r4, #52]	; 0x34
  40721e:	6360      	str	r0, [r4, #52]	; 0x34
  407220:	6362      	str	r2, [r4, #52]	; 0x34
  407222:	6363      	str	r3, [r4, #52]	; 0x34
	resetPinsSDRAM();
  407224:	4b8c      	ldr	r3, [pc, #560]	; (407458 <sleepPins+0xd54>)
  407226:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407228:	f44f 7380 	mov.w	r3, #256	; 0x100
  40722c:	6133      	str	r3, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40722e:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407236:	6133      	str	r3, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407238:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40723c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  407240:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407242:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407246:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40724a:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40724c:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407250:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  407254:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407256:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40725a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40725e:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407260:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407264:	f44f 7180 	mov.w	r1, #256	; 0x100
  407268:	6371      	str	r1, [r6, #52]	; 0x34
  40726a:	6373      	str	r3, [r6, #52]	; 0x34
  40726c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  407270:	6371      	str	r1, [r6, #52]	; 0x34
  407272:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  407276:	6371      	str	r1, [r6, #52]	; 0x34
  407278:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40727c:	6371      	str	r1, [r6, #52]	; 0x34
  40727e:	6372      	str	r2, [r6, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407280:	2201      	movs	r2, #1
  407282:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407284:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407288:	2202      	movs	r2, #2
  40728a:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40728c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407290:	2204      	movs	r2, #4
  407292:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407294:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407298:	612f      	str	r7, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40729a:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40729e:	f8c5 8010 	str.w	r8, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072a2:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072a6:	f8c5 9010 	str.w	r9, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072aa:	f8c5 90a0 	str.w	r9, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072ae:	2240      	movs	r2, #64	; 0x40
  4072b0:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072b2:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072b6:	2280      	movs	r2, #128	; 0x80
  4072b8:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072ba:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072be:	612b      	str	r3, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072c0:	462b      	mov	r3, r5
  4072c2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  4072c6:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072ca:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  4072ce:	f8c5 a010 	str.w	sl, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072d2:	f8c5 a0a0 	str.w	sl, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072d6:	4689      	mov	r9, r1
  4072d8:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072da:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072de:	f44f 1800 	mov.w	r8, #2097152	; 0x200000
  4072e2:	f8c5 8010 	str.w	r8, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072e6:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4072ee:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072f0:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  4072f8:	6128      	str	r0, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072fa:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  407302:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407304:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407308:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40730c:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40730e:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407312:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  407316:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407318:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40731c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  407320:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407322:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40732a:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40732c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407330:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  407334:	6129      	str	r1, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407336:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40733a:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
  40733e:	f8c5 b010 	str.w	fp, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407342:	f8c5 b0a0 	str.w	fp, [r5, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407346:	2201      	movs	r2, #1
  407348:	636a      	str	r2, [r5, #52]	; 0x34
  40734a:	f04f 0c02 	mov.w	ip, #2
  40734e:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
  407352:	f04f 0e04 	mov.w	lr, #4
  407356:	f8c5 e034 	str.w	lr, [r5, #52]	; 0x34
  40735a:	636f      	str	r7, [r5, #52]	; 0x34
  40735c:	2610      	movs	r6, #16
  40735e:	636e      	str	r6, [r5, #52]	; 0x34
  407360:	2520      	movs	r5, #32
  407362:	635d      	str	r5, [r3, #52]	; 0x34
  407364:	2540      	movs	r5, #64	; 0x40
  407366:	635d      	str	r5, [r3, #52]	; 0x34
  407368:	2580      	movs	r5, #128	; 0x80
  40736a:	635d      	str	r5, [r3, #52]	; 0x34
  40736c:	635c      	str	r4, [r3, #52]	; 0x34
  40736e:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
  407372:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  407376:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  40737a:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  40737e:	635d      	str	r5, [r3, #52]	; 0x34
  407380:	6358      	str	r0, [r3, #52]	; 0x34
  407382:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  407386:	635d      	str	r5, [r3, #52]	; 0x34
  407388:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  40738c:	635d      	str	r5, [r3, #52]	; 0x34
  40738e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  407392:	635d      	str	r5, [r3, #52]	; 0x34
  407394:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  407398:	635d      	str	r5, [r3, #52]	; 0x34
  40739a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40739e:	635d      	str	r5, [r3, #52]	; 0x34
  4073a0:	6359      	str	r1, [r3, #52]	; 0x34
  4073a2:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4073a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4073aa:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  4073ae:	f8c3 b010 	str.w	fp, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4073b2:	f8c3 b0a0 	str.w	fp, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4073b6:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
  4073ba:	f8c3 a010 	str.w	sl, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4073be:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4073c2:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4073c4:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4073c8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  4073cc:	f8c3 9010 	str.w	r9, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4073d0:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4073d4:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4073d8:	f8c3 8010 	str.w	r8, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4073dc:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4073e0:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4073e2:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4073e6:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4073e8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4073ec:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
  4073f0:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
  4073f4:	635c      	str	r4, [r3, #52]	; 0x34
  4073f6:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  4073fa:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  4073fe:	6358      	str	r0, [r3, #52]	; 0x34
  407400:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_PUDR = mask;
  407402:	f503 7300 	add.w	r3, r3, #512	; 0x200
  407406:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407408:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40740c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40740e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407414:	6f19      	ldr	r1, [r3, #112]	; 0x70
  407416:	f021 0101 	bic.w	r1, r1, #1
  40741a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40741c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40741e:	f021 0101 	bic.w	r1, r1, #1
  407422:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407424:	601a      	str	r2, [r3, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407426:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407428:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40742c:	f8c3 c010 	str.w	ip, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407430:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407434:	f8c3 e010 	str.w	lr, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407438:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40743c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40743e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407442:	611e      	str	r6, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407444:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  407448:	e008      	b.n	40745c <sleepPins+0xd58>
  40744a:	bf00      	nop
  40744c:	00405ced 	.word	0x00405ced
  407450:	400e0e00 	.word	0x400e0e00
  407454:	400e1000 	.word	0x400e1000
  407458:	004056d5 	.word	0x004056d5
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40745c:	2120      	movs	r1, #32
  40745e:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407460:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407464:	635a      	str	r2, [r3, #52]	; 0x34
  407466:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
  40746a:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
  40746e:	635f      	str	r7, [r3, #52]	; 0x34
  407470:	635e      	str	r6, [r3, #52]	; 0x34
  407472:	6359      	str	r1, [r3, #52]	; 0x34
  407474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407478 <wdt_init>:
/***********************************************************************
 *    WATCHDOG INIT
 ***********************************************************************/
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
uint16_t us_delta)
{
  407478:	b410      	push	{r4}
	p_wdt->WDT_MR = ul_mode |
	WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
  40747a:	4c05      	ldr	r4, [pc, #20]	; (407490 <wdt_init+0x18>)
  40747c:	ea04 4303 	and.w	r3, r4, r3, lsl #16
  407480:	f3c2 020b 	ubfx	r2, r2, #0, #12
  407484:	4313      	orrs	r3, r2
  407486:	430b      	orrs	r3, r1
	p_wdt->WDT_MR = ul_mode |
  407488:	6043      	str	r3, [r0, #4]
}
  40748a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40748e:	4770      	bx	lr
  407490:	0fff0000 	.word	0x0fff0000

00407494 <main>:
{
  407494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407498:	b08d      	sub	sp, #52	; 0x34
	bootSource = (RSTC->RSTC_SR & RSTC_SR_RSTTYP_Msk);
  40749a:	4b94      	ldr	r3, [pc, #592]	; (4076ec <main+0x258>)
  40749c:	685e      	ldr	r6, [r3, #4]
	char supplyStatus=(char)(SUPC->SUPC_SR & 0x0000007C);
  40749e:	3310      	adds	r3, #16
  4074a0:	695b      	ldr	r3, [r3, #20]
	cpu_irq_enable();//
  4074a2:	f04f 0801 	mov.w	r8, #1
  4074a6:	4b92      	ldr	r3, [pc, #584]	; (4076f0 <main+0x25c>)
  4074a8:	f883 8000 	strb.w	r8, [r3]
  __ASM volatile ("dmb");
  4074ac:	f3bf 8f5f 	dmb	sy
  4074b0:	b662      	cpsie	i
	sysclk_init();
  4074b2:	4f90      	ldr	r7, [pc, #576]	; (4076f4 <main+0x260>)
  4074b4:	47b8      	blx	r7
	board_init();
  4074b6:	4d90      	ldr	r5, [pc, #576]	; (4076f8 <main+0x264>)
  4074b8:	47a8      	blx	r5
		sleepmgr_locks[i] = 0;
  4074ba:	4b90      	ldr	r3, [pc, #576]	; (4076fc <main+0x268>)
  4074bc:	2400      	movs	r4, #0
  4074be:	701c      	strb	r4, [r3, #0]
  4074c0:	705c      	strb	r4, [r3, #1]
  4074c2:	709c      	strb	r4, [r3, #2]
  4074c4:	70dc      	strb	r4, [r3, #3]
  4074c6:	711c      	strb	r4, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  4074c8:	f883 8005 	strb.w	r8, [r3, #5]
	sysclk_init();
  4074cc:	47b8      	blx	r7
	board_init();
  4074ce:	47a8      	blx	r5
	wdt_init(WDT, wdt_mode, timeout_value, timeout_value);
  4074d0:	4f8b      	ldr	r7, [pc, #556]	; (407700 <main+0x26c>)
  4074d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4074d6:	461a      	mov	r2, r3
  4074d8:	498a      	ldr	r1, [pc, #552]	; (407704 <main+0x270>)
  4074da:	4638      	mov	r0, r7
  4074dc:	4d8a      	ldr	r5, [pc, #552]	; (407708 <main+0x274>)
  4074de:	47a8      	blx	r5
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4074e0:	4b8a      	ldr	r3, [pc, #552]	; (40770c <main+0x278>)
  4074e2:	2510      	movs	r5, #16
  4074e4:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4074e8:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4074ec:	f883 4304 	strb.w	r4, [r3, #772]	; 0x304
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4074f0:	601d      	str	r5, [r3, #0]
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4074f2:	4b87      	ldr	r3, [pc, #540]	; (407710 <main+0x27c>)
  4074f4:	603b      	str	r3, [r7, #0]
  4074f6:	200a      	movs	r0, #10
  4074f8:	4c86      	ldr	r4, [pc, #536]	; (407714 <main+0x280>)
  4074fa:	47a0      	blx	r4
  4074fc:	200b      	movs	r0, #11
  4074fe:	47a0      	blx	r4
  407500:	200c      	movs	r0, #12
  407502:	47a0      	blx	r4
  407504:	4628      	mov	r0, r5
  407506:	47a0      	blx	r4
	configure_console();  //pmc_enable_pllack messes up the console speed
  407508:	4c83      	ldr	r4, [pc, #524]	; (407718 <main+0x284>)
  40750a:	47a0      	blx	r4
	configure_console();  //pmc_enable_pllack messes up the console speed
  40750c:	47a0      	blx	r4
	printf("\r\nBOOT GOOD ");
  40750e:	4883      	ldr	r0, [pc, #524]	; (40771c <main+0x288>)
  407510:	4b83      	ldr	r3, [pc, #524]	; (407720 <main+0x28c>)
  407512:	4798      	blx	r3
	bootSource = (RSTC->RSTC_SR & RSTC_SR_RSTTYP_Msk);
  407514:	f406 66e0 	and.w	r6, r6, #1792	; 0x700
	if(bootSource!=RSTC_SR_RSTTYP_BACKUP_RST){//Assume POWER-UP RESET  STAKE_EEE
  407518:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
  40751c:	f000 8126 	beq.w	40776c <main+0x2d8>
		pmc_enable_periph_clk(ID_PIOC);
  407520:	200c      	movs	r0, #12
  407522:	4b7c      	ldr	r3, [pc, #496]	; (407714 <main+0x280>)
  407524:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407526:	4c7f      	ldr	r4, [pc, #508]	; (407724 <main+0x290>)
  407528:	2304      	movs	r3, #4
  40752a:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40752c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  407530:	6663      	str	r3, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  407532:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  407536:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  407538:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40753a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40753e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  407540:	f023 0304 	bic.w	r3, r3, #4
  407544:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407546:	6f63      	ldr	r3, [r4, #116]	; 0x74
  407548:	f023 0304 	bic.w	r3, r3, #4
  40754c:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40754e:	4e76      	ldr	r6, [pc, #472]	; (407728 <main+0x294>)
  407550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  407554:	6133      	str	r3, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407556:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40755a:	f44f 6780 	mov.w	r7, #1024	; 0x400
  40755e:	6137      	str	r7, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407560:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
		delay_ms(200);//looked fine even at only 1ms (when repeated every 500ms);
  407564:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 407764 <main+0x2d0>
  407568:	4640      	mov	r0, r8
  40756a:	4d70      	ldr	r5, [pc, #448]	; (40772c <main+0x298>)
  40756c:	47a8      	blx	r5
		twi_init_RTC();
  40756e:	4b70      	ldr	r3, [pc, #448]	; (407730 <main+0x29c>)
  407570:	4798      	blx	r3
		delay_ms(500);//
  407572:	4870      	ldr	r0, [pc, #448]	; (407734 <main+0x2a0>)
  407574:	47a8      	blx	r5
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407576:	6177      	str	r7, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407578:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
		base->PIO_PUER = mask;
  40757c:	6677      	str	r7, [r6, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40757e:	f8c6 7090 	str.w	r7, [r6, #144]	; 0x90
		base->PIO_MDDR = mask;
  407582:	6577      	str	r7, [r6, #84]	; 0x54
		base->PIO_IFDR = mask;
  407584:	6277      	str	r7, [r6, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407586:	f8c6 7080 	str.w	r7, [r6, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40758a:	6f33      	ldr	r3, [r6, #112]	; 0x70
  40758c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  407590:	6733      	str	r3, [r6, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407592:	6f73      	ldr	r3, [r6, #116]	; 0x74
  407594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  407598:	6773      	str	r3, [r6, #116]	; 0x74
		rtcData[0]=0x00;//write to Address 0x00  SET ALL
  40759a:	2300      	movs	r3, #0
  40759c:	f88d 3014 	strb.w	r3, [sp, #20]
		rtcData[1]=0x02;//contents of Addr 0x00 CTL1
  4075a0:	2702      	movs	r7, #2
  4075a2:	f88d 7015 	strb.w	r7, [sp, #21]
		rtcData[2]=0x00;//contents of Addr 0x01 CTL2
  4075a6:	f88d 3016 	strb.w	r3, [sp, #22]
		rtcData[3]=0x00;//contents of Addr 0x02 CTL3
  4075aa:	f88d 3017 	strb.w	r3, [sp, #23]
		rtcData[4]=SET_SECOND;//contents of Addr 0x03 SECONDS works
  4075ae:	f88d 3018 	strb.w	r3, [sp, #24]
		rtcData[5]=SET_MINUTE;//contents of Addr 0x04 MINUTES works
  4075b2:	f88d 3019 	strb.w	r3, [sp, #25]
		rtcData[6]=SET_HOUR;//contents of Addr 0x05 HOURS works
  4075b6:	2208      	movs	r2, #8
  4075b8:	f88d 201a 	strb.w	r2, [sp, #26]
		rtcData[7]=SET_DAY;//contents of Addr 0x06 DAYS
  4075bc:	f88d 701b 	strb.w	r7, [sp, #27]
		rtcData[8]=0x02;//contents of Addr 0x07 WEEKDAY
  4075c0:	f88d 701c 	strb.w	r7, [sp, #28]
		rtcData[9]=SET_MONTH;//contents of Addr 0x08 MONTH
  4075c4:	2601      	movs	r6, #1
  4075c6:	f88d 601d 	strb.w	r6, [sp, #29]
		rtcData[0x0A]=SET_YEAR;//contents of Addr 0x09 YEAR
  4075ca:	2215      	movs	r2, #21
  4075cc:	f88d 201e 	strb.w	r2, [sp, #30]
		rtcData[0x0B]=0x80;//contents of Addr 0x0A  0x80 = second alarm disabled
  4075d0:	2280      	movs	r2, #128	; 0x80
  4075d2:	f88d 201f 	strb.w	r2, [sp, #31]
		rtcData[0x0C]=0x80;//contents of Addr 0x0B  0x80 = minute alarm disabled
  4075d6:	f88d 2020 	strb.w	r2, [sp, #32]
		rtcData[0x0D]=0x80;//contents of Addr 0x0C  0x80 = Hour alarm disabled
  4075da:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
		rtcData[0x0E]=0x80;//contents of Addr 0x0D  0x80 = day alarm disabled
  4075de:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		rtcData[0x0F]=0x80;//contents of Addr 0x0E  0x80 = weekday alarm disabled
  4075e2:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
		rtcData[0x10]=0x00;//contents of Addr 0x0F  0x00 = temperature clockout period 4 minutes
  4075e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		rtcData[0x11]=0x00;//contents of Addr 0x10  20=PULSED INTERRUPT
  4075ea:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		writeRet = write_data_RTC(rtcData,18);//!< write sequentially to the slave "1" sends addr plus data[0].
  4075ee:	2112      	movs	r1, #18
  4075f0:	a805      	add	r0, sp, #20
  4075f2:	f8df a174 	ldr.w	sl, [pc, #372]	; 407768 <main+0x2d4>
  4075f6:	47d0      	blx	sl
		delay_ms(200);//
  4075f8:	4640      	mov	r0, r8
  4075fa:	47a8      	blx	r5
		rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  4075fc:	f88d 6014 	strb.w	r6, [sp, #20]
		rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  407600:	f04f 0b30 	mov.w	fp, #48	; 0x30
  407604:	f88d b015 	strb.w	fp, [sp, #21]
		write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  407608:	4639      	mov	r1, r7
  40760a:	a805      	add	r0, sp, #20
  40760c:	47d0      	blx	sl
		delay_ms(1000);
  40760e:	484a      	ldr	r0, [pc, #296]	; (407738 <main+0x2a4>)
  407610:	47a8      	blx	r5
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  407612:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 407700 <main+0x26c>
  407616:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 407710 <main+0x27c>
  40761a:	f8c8 9000 	str.w	r9, [r8]
		rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40761e:	f88d 6014 	strb.w	r6, [sp, #20]
		rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  407622:	f88d b015 	strb.w	fp, [sp, #21]
		write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  407626:	4639      	mov	r1, r7
  407628:	a805      	add	r0, sp, #20
  40762a:	47d0      	blx	sl
		rtcData[0]=0x03;//
  40762c:	2303      	movs	r3, #3
  40762e:	f88d 3014 	strb.w	r3, [sp, #20]
		write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  407632:	4631      	mov	r1, r6
  407634:	a805      	add	r0, sp, #20
  407636:	47d0      	blx	sl
		delay_ms(1);//
  407638:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40763c:	47a8      	blx	r5
		read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  40763e:	2107      	movs	r1, #7
  407640:	a805      	add	r0, sp, #20
  407642:	4b3e      	ldr	r3, [pc, #248]	; (40773c <main+0x2a8>)
  407644:	4798      	blx	r3
		delay_ms(1000);
  407646:	483c      	ldr	r0, [pc, #240]	; (407738 <main+0x2a4>)
  407648:	47a8      	blx	r5
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40764a:	f8c8 9000 	str.w	r9, [r8]
		printf("  %X-%X-%X  %X:%X:%X %X \r\n",rtcData[5],rtcData[3],rtcData[6],rtcData[2],rtcData[1],rtcData[0],rtcData[7]);
  40764e:	f89d 301a 	ldrb.w	r3, [sp, #26]
  407652:	f89d 2017 	ldrb.w	r2, [sp, #23]
  407656:	f89d 1019 	ldrb.w	r1, [sp, #25]
  40765a:	f89d 001b 	ldrb.w	r0, [sp, #27]
  40765e:	9003      	str	r0, [sp, #12]
  407660:	f89d 0014 	ldrb.w	r0, [sp, #20]
  407664:	9002      	str	r0, [sp, #8]
  407666:	f89d 0015 	ldrb.w	r0, [sp, #21]
  40766a:	9001      	str	r0, [sp, #4]
  40766c:	f89d 0016 	ldrb.w	r0, [sp, #22]
  407670:	9000      	str	r0, [sp, #0]
  407672:	4833      	ldr	r0, [pc, #204]	; (407740 <main+0x2ac>)
  407674:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 407720 <main+0x28c>
  407678:	47d0      	blx	sl
 		sleepPins();
  40767a:	4b32      	ldr	r3, [pc, #200]	; (407744 <main+0x2b0>)
  40767c:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40767e:	f44f 7780 	mov.w	r7, #256	; 0x100
  407682:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407684:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407688:	6367      	str	r7, [r4, #52]	; 0x34
		configure_console();  //pmc_enable_pllack messes up the console speed
  40768a:	f8df b08c 	ldr.w	fp, [pc, #140]	; 407718 <main+0x284>
  40768e:	47d8      	blx	fp
		configure_console();  //pmc_enable_pllack messes up the console speed
  407690:	47d8      	blx	fp
		printf("\r\nTEST GOOD\r\n");
  407692:	482d      	ldr	r0, [pc, #180]	; (407748 <main+0x2b4>)
  407694:	47d0      	blx	sl
		SCB_EnableDCache();//for SD to work twice in a row, have to enable DCache before cleanInvalidate,disable.
  407696:	4b2d      	ldr	r3, [pc, #180]	; (40774c <main+0x2b8>)
  407698:	4798      	blx	r3
		SCB_CleanInvalidateDCache();
  40769a:	4b2d      	ldr	r3, [pc, #180]	; (407750 <main+0x2bc>)
  40769c:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40769e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4076a2:	6323      	str	r3, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4076a4:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4076a6:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4076aa:	6327      	str	r7, [r4, #48]	; 0x30
		delay_ms(1);
  4076ac:	f24c 508e 	movw	r0, #50574	; 0xc58e
  4076b0:	47a8      	blx	r5
		SCB_DisableDCache();//for SD to work twice in a row, have to enable DCache before cleanInvalidate,disable.
  4076b2:	4b28      	ldr	r3, [pc, #160]	; (407754 <main+0x2c0>)
  4076b4:	4798      	blx	r3
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4076b6:	f8c8 9000 	str.w	r9, [r8]
		cpu_irq_enable();
  4076ba:	4b0d      	ldr	r3, [pc, #52]	; (4076f0 <main+0x25c>)
  4076bc:	701e      	strb	r6, [r3, #0]
  4076be:	f3bf 8f5f 	dmb	sy
  4076c2:	b662      	cpsie	i
		udc_start();
  4076c4:	4b24      	ldr	r3, [pc, #144]	; (407758 <main+0x2c4>)
  4076c6:	4798      	blx	r3
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4076c8:	f8c8 9000 	str.w	r9, [r8]
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4076cc:	4647      	mov	r7, r8
  4076ce:	464e      	mov	r6, r9
		printf("y");
  4076d0:	4d22      	ldr	r5, [pc, #136]	; (40775c <main+0x2c8>)
		delay_ms(1000);
  4076d2:	4c19      	ldr	r4, [pc, #100]	; (407738 <main+0x2a4>)
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4076d4:	603e      	str	r6, [r7, #0]
		printf("y");
  4076d6:	4628      	mov	r0, r5
  4076d8:	4b11      	ldr	r3, [pc, #68]	; (407720 <main+0x28c>)
  4076da:	4798      	blx	r3
		main_buf_loopback[0]	=0;	
  4076dc:	2200      	movs	r2, #0
  4076de:	4b20      	ldr	r3, [pc, #128]	; (407760 <main+0x2cc>)
  4076e0:	701a      	strb	r2, [r3, #0]
		delay_ms(1000);
  4076e2:	4620      	mov	r0, r4
  4076e4:	4b11      	ldr	r3, [pc, #68]	; (40772c <main+0x298>)
  4076e6:	4798      	blx	r3
  4076e8:	e7f4      	b.n	4076d4 <main+0x240>
  4076ea:	bf00      	nop
  4076ec:	400e1800 	.word	0x400e1800
  4076f0:	204000e7 	.word	0x204000e7
  4076f4:	00401529 	.word	0x00401529
  4076f8:	0040039d 	.word	0x0040039d
  4076fc:	20401034 	.word	0x20401034
  407700:	400e1850 	.word	0x400e1850
  407704:	30002000 	.word	0x30002000
  407708:	00407479 	.word	0x00407479
  40770c:	e000e100 	.word	0xe000e100
  407710:	a5000001 	.word	0xa5000001
  407714:	004021a9 	.word	0x004021a9
  407718:	00404105 	.word	0x00404105
  40771c:	0040acc8 	.word	0x0040acc8
  407720:	004079b1 	.word	0x004079b1
  407724:	400e0e00 	.word	0x400e0e00
  407728:	400e1200 	.word	0x400e1200
  40772c:	20400001 	.word	0x20400001
  407730:	00400ecd 	.word	0x00400ecd
  407734:	0181d7b6 	.word	0x0181d7b6
  407738:	0303af6b 	.word	0x0303af6b
  40773c:	00401121 	.word	0x00401121
  407740:	0040acd8 	.word	0x0040acd8
  407744:	00406705 	.word	0x00406705
  407748:	0040acf4 	.word	0x0040acf4
  40774c:	00403a61 	.word	0x00403a61
  407750:	00403b45 	.word	0x00403b45
  407754:	00403ad5 	.word	0x00403ad5
  407758:	00401895 	.word	0x00401895
  40775c:	0040ad04 	.word	0x0040ad04
  407760:	20400bf4 	.word	0x20400bf4
  407764:	009a5649 	.word	0x009a5649
  407768:	00400ff9 	.word	0x00400ff9
	pmc_enable_periph_clk(ID_PIOB);
  40776c:	200b      	movs	r0, #11
  40776e:	4c60      	ldr	r4, [pc, #384]	; (4078f0 <main+0x45c>)
  407770:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  407772:	2010      	movs	r0, #16
  407774:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOA);//for RTC INT pin
  407776:	200a      	movs	r0, #10
  407778:	47a0      	blx	r4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40777a:	4c5e      	ldr	r4, [pc, #376]	; (4078f4 <main+0x460>)
  40777c:	2302      	movs	r3, #2
  40777e:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407780:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	delay_us(1);
  407784:	2033      	movs	r0, #51	; 0x33
  407786:	4b5c      	ldr	r3, [pc, #368]	; (4078f8 <main+0x464>)
  407788:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40778a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if(ioport_get_pin_level(ToBigWU)==0){//STAKE_DDD IF THIS WAKEUP IS FROM TINY WITH A GPS DATE/TIME
  40778c:	f013 0f02 	tst.w	r3, #2
  407790:	d142      	bne.n	407818 <main+0x384>
	getGPSdateTimeFrmTiny();	//RUN TINY STUFF
  407792:	4b5a      	ldr	r3, [pc, #360]	; (4078fc <main+0x468>)
  407794:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  407796:	4a5a      	ldr	r2, [pc, #360]	; (407900 <main+0x46c>)
  407798:	4b5a      	ldr	r3, [pc, #360]	; (407904 <main+0x470>)
  40779a:	601a      	str	r2, [r3, #0]
	configure_console();
  40779c:	4b5a      	ldr	r3, [pc, #360]	; (407908 <main+0x474>)
  40779e:	4798      	blx	r3
	delay_ms(1);
  4077a0:	f24c 508e 	movw	r0, #50574	; 0xc58e
  4077a4:	4b54      	ldr	r3, [pc, #336]	; (4078f8 <main+0x464>)
  4077a6:	4798      	blx	r3
	printf("INT FROM TINY\r\n");
  4077a8:	4858      	ldr	r0, [pc, #352]	; (40790c <main+0x478>)
  4077aa:	4b59      	ldr	r3, [pc, #356]	; (407910 <main+0x47c>)
  4077ac:	4798      	blx	r3
	printf("ALL\r\n");
  4077ae:	4859      	ldr	r0, [pc, #356]	; (407914 <main+0x480>)
  4077b0:	4f57      	ldr	r7, [pc, #348]	; (407910 <main+0x47c>)
  4077b2:	47b8      	blx	r7
	delay_ms(100);
  4077b4:	4858      	ldr	r0, [pc, #352]	; (407918 <main+0x484>)
  4077b6:	4e50      	ldr	r6, [pc, #320]	; (4078f8 <main+0x464>)
  4077b8:	47b0      	blx	r6
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4077ba:	4c4e      	ldr	r4, [pc, #312]	; (4078f4 <main+0x460>)
  4077bc:	f44f 7580 	mov.w	r5, #256	; 0x100
  4077c0:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4077c2:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4077c6:	6365      	str	r5, [r4, #52]	; 0x34
	configure_console();  //pmc_enable_pllack messes up the console speed
  4077c8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 407908 <main+0x474>
  4077cc:	47c0      	blx	r8
	configure_console();  //pmc_enable_pllack messes up the console speed
  4077ce:	47c0      	blx	r8
	printf("\r\nBOOT GOOD\r\n");
  4077d0:	4852      	ldr	r0, [pc, #328]	; (40791c <main+0x488>)
  4077d2:	47b8      	blx	r7
	SDRAMtest();
  4077d4:	4b52      	ldr	r3, [pc, #328]	; (407920 <main+0x48c>)
  4077d6:	4798      	blx	r3
	redBlink(20);
  4077d8:	2014      	movs	r0, #20
  4077da:	4b52      	ldr	r3, [pc, #328]	; (407924 <main+0x490>)
  4077dc:	4798      	blx	r3
	SCB_EnableDCache();//for SD to work twice in a row, have to enable DCache before cleanInvalidate,disable.
  4077de:	4b52      	ldr	r3, [pc, #328]	; (407928 <main+0x494>)
  4077e0:	4798      	blx	r3
	SCB_CleanInvalidateDCache();
  4077e2:	4b52      	ldr	r3, [pc, #328]	; (40792c <main+0x498>)
  4077e4:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4077e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4077ea:	6323      	str	r3, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4077ec:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4077ee:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4077f2:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(1);
  4077f4:	f24c 508e 	movw	r0, #50574	; 0xc58e
  4077f8:	47b0      	blx	r6
	SCB_DisableDCache();//for SD to work twice in a row, have to enable DCache before cleanInvalidate,disable.
  4077fa:	4b4d      	ldr	r3, [pc, #308]	; (407930 <main+0x49c>)
  4077fc:	4798      	blx	r3
	cpu_irq_enable();
  4077fe:	2201      	movs	r2, #1
  407800:	4b4c      	ldr	r3, [pc, #304]	; (407934 <main+0x4a0>)
  407802:	701a      	strb	r2, [r3, #0]
  407804:	f3bf 8f5f 	dmb	sy
  407808:	b662      	cpsie	i
	udc_start();// Start USB stack to authorize VBus monitoring
  40780a:	4b4b      	ldr	r3, [pc, #300]	; (407938 <main+0x4a4>)
  40780c:	4798      	blx	r3
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40780e:	4f3d      	ldr	r7, [pc, #244]	; (407904 <main+0x470>)
  407810:	4e3b      	ldr	r6, [pc, #236]	; (407900 <main+0x46c>)
		printf("x");
  407812:	4d4a      	ldr	r5, [pc, #296]	; (40793c <main+0x4a8>)
		delay_ms(100);
  407814:	4c40      	ldr	r4, [pc, #256]	; (407918 <main+0x484>)
  407816:	e046      	b.n	4078a6 <main+0x412>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407818:	4b36      	ldr	r3, [pc, #216]	; (4078f4 <main+0x460>)
  40781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}else if (ioport_get_pin_level(RTC_INT)==0)	{
  40781c:	f013 0f04 	tst.w	r3, #4
  407820:	d1c5      	bne.n	4077ae <main+0x31a>
		pmc_enable_periph_clk(ID_PIOC);
  407822:	200c      	movs	r0, #12
  407824:	4c32      	ldr	r4, [pc, #200]	; (4078f0 <main+0x45c>)
  407826:	47a0      	blx	r4
		configure_console();
  407828:	4b37      	ldr	r3, [pc, #220]	; (407908 <main+0x474>)
  40782a:	4798      	blx	r3
		delay_ms(1);
  40782c:	f24c 508e 	movw	r0, #50574	; 0xc58e
  407830:	4d31      	ldr	r5, [pc, #196]	; (4078f8 <main+0x464>)
  407832:	47a8      	blx	r5
		printf("\r\nRTC INTERRUPT\r\n");
  407834:	4842      	ldr	r0, [pc, #264]	; (407940 <main+0x4ac>)
  407836:	4e36      	ldr	r6, [pc, #216]	; (407910 <main+0x47c>)
  407838:	47b0      	blx	r6
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40783a:	4a31      	ldr	r2, [pc, #196]	; (407900 <main+0x46c>)
  40783c:	4b31      	ldr	r3, [pc, #196]	; (407904 <main+0x470>)
  40783e:	601a      	str	r2, [r3, #0]
	pmc_enable_periph_clk(ID_PIOA);
  407840:	200a      	movs	r0, #10
  407842:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  407844:	200b      	movs	r0, #11
  407846:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  407848:	2010      	movs	r0, #16
  40784a:	47a0      	blx	r4
	rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40784c:	2401      	movs	r4, #1
  40784e:	f88d 4014 	strb.w	r4, [sp, #20]
	rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  407852:	2330      	movs	r3, #48	; 0x30
  407854:	f88d 3015 	strb.w	r3, [sp, #21]
	write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  407858:	2102      	movs	r1, #2
  40785a:	a805      	add	r0, sp, #20
  40785c:	4f39      	ldr	r7, [pc, #228]	; (407944 <main+0x4b0>)
  40785e:	47b8      	blx	r7
	rtcData[0]=0x03;//
  407860:	2303      	movs	r3, #3
  407862:	f88d 3014 	strb.w	r3, [sp, #20]
	write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  407866:	4621      	mov	r1, r4
  407868:	a805      	add	r0, sp, #20
  40786a:	47b8      	blx	r7
	delay_ms(1);//
  40786c:	f24c 508e 	movw	r0, #50574	; 0xc58e
  407870:	47a8      	blx	r5
	read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  407872:	2107      	movs	r1, #7
  407874:	a805      	add	r0, sp, #20
  407876:	4b34      	ldr	r3, [pc, #208]	; (407948 <main+0x4b4>)
  407878:	4798      	blx	r3
		gotAltitudeTemperature=getAltimeterTemperatureOLD();
  40787a:	4b34      	ldr	r3, [pc, #208]	; (40794c <main+0x4b8>)
  40787c:	4798      	blx	r3
  40787e:	4607      	mov	r7, r0
		gotHumidity=getHumidity();
  407880:	4b33      	ldr	r3, [pc, #204]	; (407950 <main+0x4bc>)
  407882:	4798      	blx	r3
		printf("TEMP %X BAROM %X HUMIDITY %X LIGHT %X MOTION %X\r\n",(gotAltitudeTemperature>>16),(gotAltitudeTemperature&0x0000FFFF),gotHumidity,gotLight,1);
  407884:	9401      	str	r4, [sp, #4]
  407886:	2300      	movs	r3, #0
  407888:	9300      	str	r3, [sp, #0]
  40788a:	4603      	mov	r3, r0
  40788c:	b2ba      	uxth	r2, r7
  40788e:	0c39      	lsrs	r1, r7, #16
  407890:	4830      	ldr	r0, [pc, #192]	; (407954 <main+0x4c0>)
  407892:	47b0      	blx	r6
		delay_ms(100);
  407894:	4820      	ldr	r0, [pc, #128]	; (407918 <main+0x484>)
  407896:	47a8      	blx	r5
  407898:	e789      	b.n	4077ae <main+0x31a>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
  40789a:	2201      	movs	r2, #1
  40789c:	4b25      	ldr	r3, [pc, #148]	; (407934 <main+0x4a0>)
  40789e:	701a      	strb	r2, [r3, #0]
  4078a0:	f3bf 8f5f 	dmb	sy
  4078a4:	b662      	cpsie	i
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4078a6:	603e      	str	r6, [r7, #0]
		printf("x");
  4078a8:	4628      	mov	r0, r5
  4078aa:	4b19      	ldr	r3, [pc, #100]	; (407910 <main+0x47c>)
  4078ac:	4798      	blx	r3
		delay_ms(100);
  4078ae:	4620      	mov	r0, r4
  4078b0:	4b11      	ldr	r3, [pc, #68]	; (4078f8 <main+0x464>)
  4078b2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4078b4:	b672      	cpsid	i
  4078b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4078ba:	2200      	movs	r2, #0
  4078bc:	4b1d      	ldr	r3, [pc, #116]	; (407934 <main+0x4a0>)
  4078be:	701a      	strb	r2, [r3, #0]
	while (!(*lock_ptr)) {
  4078c0:	4b25      	ldr	r3, [pc, #148]	; (407958 <main+0x4c4>)
  4078c2:	781b      	ldrb	r3, [r3, #0]
  4078c4:	2b00      	cmp	r3, #0
  4078c6:	d1e8      	bne.n	40789a <main+0x406>
  4078c8:	4b23      	ldr	r3, [pc, #140]	; (407958 <main+0x4c4>)
  4078ca:	4610      	mov	r0, r2
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
  4078cc:	3001      	adds	r0, #1
  4078ce:	b2c0      	uxtb	r0, r0
	while (!(*lock_ptr)) {
  4078d0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  4078d4:	2a00      	cmp	r2, #0
  4078d6:	d0f9      	beq.n	4078cc <main+0x438>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
  4078d8:	2800      	cmp	r0, #0
  4078da:	d0de      	beq.n	40789a <main+0x406>
  4078dc:	b672      	cpsid	i
  4078de:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
  4078e2:	2200      	movs	r2, #0
  4078e4:	4b13      	ldr	r3, [pc, #76]	; (407934 <main+0x4a0>)
  4078e6:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
  4078e8:	4b1c      	ldr	r3, [pc, #112]	; (40795c <main+0x4c8>)
  4078ea:	4798      	blx	r3
  4078ec:	e7db      	b.n	4078a6 <main+0x412>
  4078ee:	bf00      	nop
  4078f0:	004021a9 	.word	0x004021a9
  4078f4:	400e0e00 	.word	0x400e0e00
  4078f8:	20400001 	.word	0x20400001
  4078fc:	004045e1 	.word	0x004045e1
  407900:	a5000001 	.word	0xa5000001
  407904:	400e1850 	.word	0x400e1850
  407908:	00404105 	.word	0x00404105
  40790c:	0040ad08 	.word	0x0040ad08
  407910:	004079b1 	.word	0x004079b1
  407914:	0040ad60 	.word	0x0040ad60
  407918:	004d2b25 	.word	0x004d2b25
  40791c:	0040ad68 	.word	0x0040ad68
  407920:	00404ed9 	.word	0x00404ed9
  407924:	00405681 	.word	0x00405681
  407928:	00403a61 	.word	0x00403a61
  40792c:	00403b45 	.word	0x00403b45
  407930:	00403ad5 	.word	0x00403ad5
  407934:	204000e7 	.word	0x204000e7
  407938:	00401895 	.word	0x00401895
  40793c:	0040ad78 	.word	0x0040ad78
  407940:	0040ad18 	.word	0x0040ad18
  407944:	00400ff9 	.word	0x00400ff9
  407948:	00401121 	.word	0x00401121
  40794c:	004049fd 	.word	0x004049fd
  407950:	004048b1 	.word	0x004048b1
  407954:	0040ad2c 	.word	0x0040ad2c
  407958:	20401034 	.word	0x20401034
  40795c:	0040224d 	.word	0x0040224d

00407960 <__libc_init_array>:
  407960:	b570      	push	{r4, r5, r6, lr}
  407962:	4e0f      	ldr	r6, [pc, #60]	; (4079a0 <__libc_init_array+0x40>)
  407964:	4d0f      	ldr	r5, [pc, #60]	; (4079a4 <__libc_init_array+0x44>)
  407966:	1b76      	subs	r6, r6, r5
  407968:	10b6      	asrs	r6, r6, #2
  40796a:	bf18      	it	ne
  40796c:	2400      	movne	r4, #0
  40796e:	d005      	beq.n	40797c <__libc_init_array+0x1c>
  407970:	3401      	adds	r4, #1
  407972:	f855 3b04 	ldr.w	r3, [r5], #4
  407976:	4798      	blx	r3
  407978:	42a6      	cmp	r6, r4
  40797a:	d1f9      	bne.n	407970 <__libc_init_array+0x10>
  40797c:	4e0a      	ldr	r6, [pc, #40]	; (4079a8 <__libc_init_array+0x48>)
  40797e:	4d0b      	ldr	r5, [pc, #44]	; (4079ac <__libc_init_array+0x4c>)
  407980:	1b76      	subs	r6, r6, r5
  407982:	f003 fbab 	bl	40b0dc <_init>
  407986:	10b6      	asrs	r6, r6, #2
  407988:	bf18      	it	ne
  40798a:	2400      	movne	r4, #0
  40798c:	d006      	beq.n	40799c <__libc_init_array+0x3c>
  40798e:	3401      	adds	r4, #1
  407990:	f855 3b04 	ldr.w	r3, [r5], #4
  407994:	4798      	blx	r3
  407996:	42a6      	cmp	r6, r4
  407998:	d1f9      	bne.n	40798e <__libc_init_array+0x2e>
  40799a:	bd70      	pop	{r4, r5, r6, pc}
  40799c:	bd70      	pop	{r4, r5, r6, pc}
  40799e:	bf00      	nop
  4079a0:	0040b0e8 	.word	0x0040b0e8
  4079a4:	0040b0e8 	.word	0x0040b0e8
  4079a8:	0040b0f0 	.word	0x0040b0f0
  4079ac:	0040b0e8 	.word	0x0040b0e8

004079b0 <iprintf>:
  4079b0:	b40f      	push	{r0, r1, r2, r3}
  4079b2:	b500      	push	{lr}
  4079b4:	4907      	ldr	r1, [pc, #28]	; (4079d4 <iprintf+0x24>)
  4079b6:	b083      	sub	sp, #12
  4079b8:	ab04      	add	r3, sp, #16
  4079ba:	6808      	ldr	r0, [r1, #0]
  4079bc:	f853 2b04 	ldr.w	r2, [r3], #4
  4079c0:	6881      	ldr	r1, [r0, #8]
  4079c2:	9301      	str	r3, [sp, #4]
  4079c4:	f000 fa00 	bl	407dc8 <_vfiprintf_r>
  4079c8:	b003      	add	sp, #12
  4079ca:	f85d eb04 	ldr.w	lr, [sp], #4
  4079ce:	b004      	add	sp, #16
  4079d0:	4770      	bx	lr
  4079d2:	bf00      	nop
  4079d4:	204000f0 	.word	0x204000f0

004079d8 <memcpy>:
  4079d8:	4684      	mov	ip, r0
  4079da:	ea41 0300 	orr.w	r3, r1, r0
  4079de:	f013 0303 	ands.w	r3, r3, #3
  4079e2:	d16d      	bne.n	407ac0 <memcpy+0xe8>
  4079e4:	3a40      	subs	r2, #64	; 0x40
  4079e6:	d341      	bcc.n	407a6c <memcpy+0x94>
  4079e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4079ec:	f840 3b04 	str.w	r3, [r0], #4
  4079f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4079f4:	f840 3b04 	str.w	r3, [r0], #4
  4079f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4079fc:	f840 3b04 	str.w	r3, [r0], #4
  407a00:	f851 3b04 	ldr.w	r3, [r1], #4
  407a04:	f840 3b04 	str.w	r3, [r0], #4
  407a08:	f851 3b04 	ldr.w	r3, [r1], #4
  407a0c:	f840 3b04 	str.w	r3, [r0], #4
  407a10:	f851 3b04 	ldr.w	r3, [r1], #4
  407a14:	f840 3b04 	str.w	r3, [r0], #4
  407a18:	f851 3b04 	ldr.w	r3, [r1], #4
  407a1c:	f840 3b04 	str.w	r3, [r0], #4
  407a20:	f851 3b04 	ldr.w	r3, [r1], #4
  407a24:	f840 3b04 	str.w	r3, [r0], #4
  407a28:	f851 3b04 	ldr.w	r3, [r1], #4
  407a2c:	f840 3b04 	str.w	r3, [r0], #4
  407a30:	f851 3b04 	ldr.w	r3, [r1], #4
  407a34:	f840 3b04 	str.w	r3, [r0], #4
  407a38:	f851 3b04 	ldr.w	r3, [r1], #4
  407a3c:	f840 3b04 	str.w	r3, [r0], #4
  407a40:	f851 3b04 	ldr.w	r3, [r1], #4
  407a44:	f840 3b04 	str.w	r3, [r0], #4
  407a48:	f851 3b04 	ldr.w	r3, [r1], #4
  407a4c:	f840 3b04 	str.w	r3, [r0], #4
  407a50:	f851 3b04 	ldr.w	r3, [r1], #4
  407a54:	f840 3b04 	str.w	r3, [r0], #4
  407a58:	f851 3b04 	ldr.w	r3, [r1], #4
  407a5c:	f840 3b04 	str.w	r3, [r0], #4
  407a60:	f851 3b04 	ldr.w	r3, [r1], #4
  407a64:	f840 3b04 	str.w	r3, [r0], #4
  407a68:	3a40      	subs	r2, #64	; 0x40
  407a6a:	d2bd      	bcs.n	4079e8 <memcpy+0x10>
  407a6c:	3230      	adds	r2, #48	; 0x30
  407a6e:	d311      	bcc.n	407a94 <memcpy+0xbc>
  407a70:	f851 3b04 	ldr.w	r3, [r1], #4
  407a74:	f840 3b04 	str.w	r3, [r0], #4
  407a78:	f851 3b04 	ldr.w	r3, [r1], #4
  407a7c:	f840 3b04 	str.w	r3, [r0], #4
  407a80:	f851 3b04 	ldr.w	r3, [r1], #4
  407a84:	f840 3b04 	str.w	r3, [r0], #4
  407a88:	f851 3b04 	ldr.w	r3, [r1], #4
  407a8c:	f840 3b04 	str.w	r3, [r0], #4
  407a90:	3a10      	subs	r2, #16
  407a92:	d2ed      	bcs.n	407a70 <memcpy+0x98>
  407a94:	320c      	adds	r2, #12
  407a96:	d305      	bcc.n	407aa4 <memcpy+0xcc>
  407a98:	f851 3b04 	ldr.w	r3, [r1], #4
  407a9c:	f840 3b04 	str.w	r3, [r0], #4
  407aa0:	3a04      	subs	r2, #4
  407aa2:	d2f9      	bcs.n	407a98 <memcpy+0xc0>
  407aa4:	3204      	adds	r2, #4
  407aa6:	d008      	beq.n	407aba <memcpy+0xe2>
  407aa8:	07d2      	lsls	r2, r2, #31
  407aaa:	bf1c      	itt	ne
  407aac:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407ab0:	f800 3b01 	strbne.w	r3, [r0], #1
  407ab4:	d301      	bcc.n	407aba <memcpy+0xe2>
  407ab6:	880b      	ldrh	r3, [r1, #0]
  407ab8:	8003      	strh	r3, [r0, #0]
  407aba:	4660      	mov	r0, ip
  407abc:	4770      	bx	lr
  407abe:	bf00      	nop
  407ac0:	2a08      	cmp	r2, #8
  407ac2:	d313      	bcc.n	407aec <memcpy+0x114>
  407ac4:	078b      	lsls	r3, r1, #30
  407ac6:	d08d      	beq.n	4079e4 <memcpy+0xc>
  407ac8:	f010 0303 	ands.w	r3, r0, #3
  407acc:	d08a      	beq.n	4079e4 <memcpy+0xc>
  407ace:	f1c3 0304 	rsb	r3, r3, #4
  407ad2:	1ad2      	subs	r2, r2, r3
  407ad4:	07db      	lsls	r3, r3, #31
  407ad6:	bf1c      	itt	ne
  407ad8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407adc:	f800 3b01 	strbne.w	r3, [r0], #1
  407ae0:	d380      	bcc.n	4079e4 <memcpy+0xc>
  407ae2:	f831 3b02 	ldrh.w	r3, [r1], #2
  407ae6:	f820 3b02 	strh.w	r3, [r0], #2
  407aea:	e77b      	b.n	4079e4 <memcpy+0xc>
  407aec:	3a04      	subs	r2, #4
  407aee:	d3d9      	bcc.n	407aa4 <memcpy+0xcc>
  407af0:	3a01      	subs	r2, #1
  407af2:	f811 3b01 	ldrb.w	r3, [r1], #1
  407af6:	f800 3b01 	strb.w	r3, [r0], #1
  407afa:	d2f9      	bcs.n	407af0 <memcpy+0x118>
  407afc:	780b      	ldrb	r3, [r1, #0]
  407afe:	7003      	strb	r3, [r0, #0]
  407b00:	784b      	ldrb	r3, [r1, #1]
  407b02:	7043      	strb	r3, [r0, #1]
  407b04:	788b      	ldrb	r3, [r1, #2]
  407b06:	7083      	strb	r3, [r0, #2]
  407b08:	4660      	mov	r0, ip
  407b0a:	4770      	bx	lr

00407b0c <memset>:
  407b0c:	b470      	push	{r4, r5, r6}
  407b0e:	0786      	lsls	r6, r0, #30
  407b10:	d046      	beq.n	407ba0 <memset+0x94>
  407b12:	1e54      	subs	r4, r2, #1
  407b14:	2a00      	cmp	r2, #0
  407b16:	d041      	beq.n	407b9c <memset+0x90>
  407b18:	b2ca      	uxtb	r2, r1
  407b1a:	4603      	mov	r3, r0
  407b1c:	e002      	b.n	407b24 <memset+0x18>
  407b1e:	f114 34ff 	adds.w	r4, r4, #4294967295
  407b22:	d33b      	bcc.n	407b9c <memset+0x90>
  407b24:	f803 2b01 	strb.w	r2, [r3], #1
  407b28:	079d      	lsls	r5, r3, #30
  407b2a:	d1f8      	bne.n	407b1e <memset+0x12>
  407b2c:	2c03      	cmp	r4, #3
  407b2e:	d92e      	bls.n	407b8e <memset+0x82>
  407b30:	b2cd      	uxtb	r5, r1
  407b32:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  407b36:	2c0f      	cmp	r4, #15
  407b38:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407b3c:	d919      	bls.n	407b72 <memset+0x66>
  407b3e:	f103 0210 	add.w	r2, r3, #16
  407b42:	4626      	mov	r6, r4
  407b44:	3e10      	subs	r6, #16
  407b46:	2e0f      	cmp	r6, #15
  407b48:	f842 5c10 	str.w	r5, [r2, #-16]
  407b4c:	f842 5c0c 	str.w	r5, [r2, #-12]
  407b50:	f842 5c08 	str.w	r5, [r2, #-8]
  407b54:	f842 5c04 	str.w	r5, [r2, #-4]
  407b58:	f102 0210 	add.w	r2, r2, #16
  407b5c:	d8f2      	bhi.n	407b44 <memset+0x38>
  407b5e:	f1a4 0210 	sub.w	r2, r4, #16
  407b62:	f022 020f 	bic.w	r2, r2, #15
  407b66:	f004 040f 	and.w	r4, r4, #15
  407b6a:	3210      	adds	r2, #16
  407b6c:	2c03      	cmp	r4, #3
  407b6e:	4413      	add	r3, r2
  407b70:	d90d      	bls.n	407b8e <memset+0x82>
  407b72:	461e      	mov	r6, r3
  407b74:	4622      	mov	r2, r4
  407b76:	3a04      	subs	r2, #4
  407b78:	2a03      	cmp	r2, #3
  407b7a:	f846 5b04 	str.w	r5, [r6], #4
  407b7e:	d8fa      	bhi.n	407b76 <memset+0x6a>
  407b80:	1f22      	subs	r2, r4, #4
  407b82:	f022 0203 	bic.w	r2, r2, #3
  407b86:	3204      	adds	r2, #4
  407b88:	4413      	add	r3, r2
  407b8a:	f004 0403 	and.w	r4, r4, #3
  407b8e:	b12c      	cbz	r4, 407b9c <memset+0x90>
  407b90:	b2c9      	uxtb	r1, r1
  407b92:	441c      	add	r4, r3
  407b94:	f803 1b01 	strb.w	r1, [r3], #1
  407b98:	429c      	cmp	r4, r3
  407b9a:	d1fb      	bne.n	407b94 <memset+0x88>
  407b9c:	bc70      	pop	{r4, r5, r6}
  407b9e:	4770      	bx	lr
  407ba0:	4614      	mov	r4, r2
  407ba2:	4603      	mov	r3, r0
  407ba4:	e7c2      	b.n	407b2c <memset+0x20>
  407ba6:	bf00      	nop

00407ba8 <setbuf>:
  407ba8:	2900      	cmp	r1, #0
  407baa:	bf0c      	ite	eq
  407bac:	2202      	moveq	r2, #2
  407bae:	2200      	movne	r2, #0
  407bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407bb4:	f000 b800 	b.w	407bb8 <setvbuf>

00407bb8 <setvbuf>:
  407bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407bbc:	4c61      	ldr	r4, [pc, #388]	; (407d44 <setvbuf+0x18c>)
  407bbe:	6825      	ldr	r5, [r4, #0]
  407bc0:	b083      	sub	sp, #12
  407bc2:	4604      	mov	r4, r0
  407bc4:	460f      	mov	r7, r1
  407bc6:	4690      	mov	r8, r2
  407bc8:	461e      	mov	r6, r3
  407bca:	b115      	cbz	r5, 407bd2 <setvbuf+0x1a>
  407bcc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407bce:	2b00      	cmp	r3, #0
  407bd0:	d064      	beq.n	407c9c <setvbuf+0xe4>
  407bd2:	f1b8 0f02 	cmp.w	r8, #2
  407bd6:	d006      	beq.n	407be6 <setvbuf+0x2e>
  407bd8:	f1b8 0f01 	cmp.w	r8, #1
  407bdc:	f200 809f 	bhi.w	407d1e <setvbuf+0x166>
  407be0:	2e00      	cmp	r6, #0
  407be2:	f2c0 809c 	blt.w	407d1e <setvbuf+0x166>
  407be6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407be8:	07d8      	lsls	r0, r3, #31
  407bea:	d534      	bpl.n	407c56 <setvbuf+0x9e>
  407bec:	4621      	mov	r1, r4
  407bee:	4628      	mov	r0, r5
  407bf0:	f001 f888 	bl	408d04 <_fflush_r>
  407bf4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407bf6:	b141      	cbz	r1, 407c0a <setvbuf+0x52>
  407bf8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407bfc:	4299      	cmp	r1, r3
  407bfe:	d002      	beq.n	407c06 <setvbuf+0x4e>
  407c00:	4628      	mov	r0, r5
  407c02:	f001 f9fd 	bl	409000 <_free_r>
  407c06:	2300      	movs	r3, #0
  407c08:	6323      	str	r3, [r4, #48]	; 0x30
  407c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407c0e:	2200      	movs	r2, #0
  407c10:	61a2      	str	r2, [r4, #24]
  407c12:	6062      	str	r2, [r4, #4]
  407c14:	061a      	lsls	r2, r3, #24
  407c16:	d43a      	bmi.n	407c8e <setvbuf+0xd6>
  407c18:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  407c1c:	f023 0303 	bic.w	r3, r3, #3
  407c20:	f1b8 0f02 	cmp.w	r8, #2
  407c24:	81a3      	strh	r3, [r4, #12]
  407c26:	d01d      	beq.n	407c64 <setvbuf+0xac>
  407c28:	ab01      	add	r3, sp, #4
  407c2a:	466a      	mov	r2, sp
  407c2c:	4621      	mov	r1, r4
  407c2e:	4628      	mov	r0, r5
  407c30:	f001 fc84 	bl	40953c <__swhatbuf_r>
  407c34:	89a3      	ldrh	r3, [r4, #12]
  407c36:	4318      	orrs	r0, r3
  407c38:	81a0      	strh	r0, [r4, #12]
  407c3a:	2e00      	cmp	r6, #0
  407c3c:	d132      	bne.n	407ca4 <setvbuf+0xec>
  407c3e:	9e00      	ldr	r6, [sp, #0]
  407c40:	4630      	mov	r0, r6
  407c42:	f001 fcf3 	bl	40962c <malloc>
  407c46:	4607      	mov	r7, r0
  407c48:	2800      	cmp	r0, #0
  407c4a:	d06b      	beq.n	407d24 <setvbuf+0x16c>
  407c4c:	89a3      	ldrh	r3, [r4, #12]
  407c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407c52:	81a3      	strh	r3, [r4, #12]
  407c54:	e028      	b.n	407ca8 <setvbuf+0xf0>
  407c56:	89a3      	ldrh	r3, [r4, #12]
  407c58:	0599      	lsls	r1, r3, #22
  407c5a:	d4c7      	bmi.n	407bec <setvbuf+0x34>
  407c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407c5e:	f001 fc69 	bl	409534 <__retarget_lock_acquire_recursive>
  407c62:	e7c3      	b.n	407bec <setvbuf+0x34>
  407c64:	2500      	movs	r5, #0
  407c66:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407c68:	2600      	movs	r6, #0
  407c6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407c6e:	f043 0302 	orr.w	r3, r3, #2
  407c72:	2001      	movs	r0, #1
  407c74:	60a6      	str	r6, [r4, #8]
  407c76:	07ce      	lsls	r6, r1, #31
  407c78:	81a3      	strh	r3, [r4, #12]
  407c7a:	6022      	str	r2, [r4, #0]
  407c7c:	6122      	str	r2, [r4, #16]
  407c7e:	6160      	str	r0, [r4, #20]
  407c80:	d401      	bmi.n	407c86 <setvbuf+0xce>
  407c82:	0598      	lsls	r0, r3, #22
  407c84:	d53e      	bpl.n	407d04 <setvbuf+0x14c>
  407c86:	4628      	mov	r0, r5
  407c88:	b003      	add	sp, #12
  407c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407c8e:	6921      	ldr	r1, [r4, #16]
  407c90:	4628      	mov	r0, r5
  407c92:	f001 f9b5 	bl	409000 <_free_r>
  407c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407c9a:	e7bd      	b.n	407c18 <setvbuf+0x60>
  407c9c:	4628      	mov	r0, r5
  407c9e:	f001 f889 	bl	408db4 <__sinit>
  407ca2:	e796      	b.n	407bd2 <setvbuf+0x1a>
  407ca4:	2f00      	cmp	r7, #0
  407ca6:	d0cb      	beq.n	407c40 <setvbuf+0x88>
  407ca8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407caa:	2b00      	cmp	r3, #0
  407cac:	d033      	beq.n	407d16 <setvbuf+0x15e>
  407cae:	9b00      	ldr	r3, [sp, #0]
  407cb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407cb4:	6027      	str	r7, [r4, #0]
  407cb6:	429e      	cmp	r6, r3
  407cb8:	bf1c      	itt	ne
  407cba:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  407cbe:	81a2      	strhne	r2, [r4, #12]
  407cc0:	f1b8 0f01 	cmp.w	r8, #1
  407cc4:	bf04      	itt	eq
  407cc6:	f042 0201 	orreq.w	r2, r2, #1
  407cca:	81a2      	strheq	r2, [r4, #12]
  407ccc:	b292      	uxth	r2, r2
  407cce:	f012 0308 	ands.w	r3, r2, #8
  407cd2:	6127      	str	r7, [r4, #16]
  407cd4:	6166      	str	r6, [r4, #20]
  407cd6:	d00e      	beq.n	407cf6 <setvbuf+0x13e>
  407cd8:	07d1      	lsls	r1, r2, #31
  407cda:	d51a      	bpl.n	407d12 <setvbuf+0x15a>
  407cdc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  407cde:	4276      	negs	r6, r6
  407ce0:	2300      	movs	r3, #0
  407ce2:	f015 0501 	ands.w	r5, r5, #1
  407ce6:	61a6      	str	r6, [r4, #24]
  407ce8:	60a3      	str	r3, [r4, #8]
  407cea:	d009      	beq.n	407d00 <setvbuf+0x148>
  407cec:	2500      	movs	r5, #0
  407cee:	4628      	mov	r0, r5
  407cf0:	b003      	add	sp, #12
  407cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407cf6:	60a3      	str	r3, [r4, #8]
  407cf8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  407cfa:	f015 0501 	ands.w	r5, r5, #1
  407cfe:	d1f5      	bne.n	407cec <setvbuf+0x134>
  407d00:	0593      	lsls	r3, r2, #22
  407d02:	d4c0      	bmi.n	407c86 <setvbuf+0xce>
  407d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407d06:	f001 fc17 	bl	409538 <__retarget_lock_release_recursive>
  407d0a:	4628      	mov	r0, r5
  407d0c:	b003      	add	sp, #12
  407d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407d12:	60a6      	str	r6, [r4, #8]
  407d14:	e7f0      	b.n	407cf8 <setvbuf+0x140>
  407d16:	4628      	mov	r0, r5
  407d18:	f001 f84c 	bl	408db4 <__sinit>
  407d1c:	e7c7      	b.n	407cae <setvbuf+0xf6>
  407d1e:	f04f 35ff 	mov.w	r5, #4294967295
  407d22:	e7b0      	b.n	407c86 <setvbuf+0xce>
  407d24:	f8dd 9000 	ldr.w	r9, [sp]
  407d28:	45b1      	cmp	r9, r6
  407d2a:	d004      	beq.n	407d36 <setvbuf+0x17e>
  407d2c:	4648      	mov	r0, r9
  407d2e:	f001 fc7d 	bl	40962c <malloc>
  407d32:	4607      	mov	r7, r0
  407d34:	b920      	cbnz	r0, 407d40 <setvbuf+0x188>
  407d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407d3a:	f04f 35ff 	mov.w	r5, #4294967295
  407d3e:	e792      	b.n	407c66 <setvbuf+0xae>
  407d40:	464e      	mov	r6, r9
  407d42:	e783      	b.n	407c4c <setvbuf+0x94>
  407d44:	204000f0 	.word	0x204000f0

00407d48 <__sprint_r.part.0>:
  407d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d4c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  407d4e:	049c      	lsls	r4, r3, #18
  407d50:	4693      	mov	fp, r2
  407d52:	d52f      	bpl.n	407db4 <__sprint_r.part.0+0x6c>
  407d54:	6893      	ldr	r3, [r2, #8]
  407d56:	6812      	ldr	r2, [r2, #0]
  407d58:	b353      	cbz	r3, 407db0 <__sprint_r.part.0+0x68>
  407d5a:	460e      	mov	r6, r1
  407d5c:	4607      	mov	r7, r0
  407d5e:	f102 0908 	add.w	r9, r2, #8
  407d62:	e919 0420 	ldmdb	r9, {r5, sl}
  407d66:	ea5f 089a 	movs.w	r8, sl, lsr #2
  407d6a:	d017      	beq.n	407d9c <__sprint_r.part.0+0x54>
  407d6c:	3d04      	subs	r5, #4
  407d6e:	2400      	movs	r4, #0
  407d70:	e001      	b.n	407d76 <__sprint_r.part.0+0x2e>
  407d72:	45a0      	cmp	r8, r4
  407d74:	d010      	beq.n	407d98 <__sprint_r.part.0+0x50>
  407d76:	4632      	mov	r2, r6
  407d78:	f855 1f04 	ldr.w	r1, [r5, #4]!
  407d7c:	4638      	mov	r0, r7
  407d7e:	f001 f8bb 	bl	408ef8 <_fputwc_r>
  407d82:	1c43      	adds	r3, r0, #1
  407d84:	f104 0401 	add.w	r4, r4, #1
  407d88:	d1f3      	bne.n	407d72 <__sprint_r.part.0+0x2a>
  407d8a:	2300      	movs	r3, #0
  407d8c:	f8cb 3008 	str.w	r3, [fp, #8]
  407d90:	f8cb 3004 	str.w	r3, [fp, #4]
  407d94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d98:	f8db 3008 	ldr.w	r3, [fp, #8]
  407d9c:	f02a 0a03 	bic.w	sl, sl, #3
  407da0:	eba3 030a 	sub.w	r3, r3, sl
  407da4:	f8cb 3008 	str.w	r3, [fp, #8]
  407da8:	f109 0908 	add.w	r9, r9, #8
  407dac:	2b00      	cmp	r3, #0
  407dae:	d1d8      	bne.n	407d62 <__sprint_r.part.0+0x1a>
  407db0:	2000      	movs	r0, #0
  407db2:	e7ea      	b.n	407d8a <__sprint_r.part.0+0x42>
  407db4:	f001 fa0a 	bl	4091cc <__sfvwrite_r>
  407db8:	2300      	movs	r3, #0
  407dba:	f8cb 3008 	str.w	r3, [fp, #8]
  407dbe:	f8cb 3004 	str.w	r3, [fp, #4]
  407dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407dc6:	bf00      	nop

00407dc8 <_vfiprintf_r>:
  407dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407dcc:	b0ad      	sub	sp, #180	; 0xb4
  407dce:	461d      	mov	r5, r3
  407dd0:	468b      	mov	fp, r1
  407dd2:	4690      	mov	r8, r2
  407dd4:	9307      	str	r3, [sp, #28]
  407dd6:	9006      	str	r0, [sp, #24]
  407dd8:	b118      	cbz	r0, 407de2 <_vfiprintf_r+0x1a>
  407dda:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407ddc:	2b00      	cmp	r3, #0
  407dde:	f000 80f3 	beq.w	407fc8 <_vfiprintf_r+0x200>
  407de2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407de6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  407dea:	07df      	lsls	r7, r3, #31
  407dec:	b281      	uxth	r1, r0
  407dee:	d402      	bmi.n	407df6 <_vfiprintf_r+0x2e>
  407df0:	058e      	lsls	r6, r1, #22
  407df2:	f140 80fc 	bpl.w	407fee <_vfiprintf_r+0x226>
  407df6:	048c      	lsls	r4, r1, #18
  407df8:	d40a      	bmi.n	407e10 <_vfiprintf_r+0x48>
  407dfa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407dfe:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  407e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  407e06:	f8ab 100c 	strh.w	r1, [fp, #12]
  407e0a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  407e0e:	b289      	uxth	r1, r1
  407e10:	0708      	lsls	r0, r1, #28
  407e12:	f140 80b3 	bpl.w	407f7c <_vfiprintf_r+0x1b4>
  407e16:	f8db 3010 	ldr.w	r3, [fp, #16]
  407e1a:	2b00      	cmp	r3, #0
  407e1c:	f000 80ae 	beq.w	407f7c <_vfiprintf_r+0x1b4>
  407e20:	f001 031a 	and.w	r3, r1, #26
  407e24:	2b0a      	cmp	r3, #10
  407e26:	f000 80b5 	beq.w	407f94 <_vfiprintf_r+0x1cc>
  407e2a:	2300      	movs	r3, #0
  407e2c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  407e30:	930b      	str	r3, [sp, #44]	; 0x2c
  407e32:	9311      	str	r3, [sp, #68]	; 0x44
  407e34:	9310      	str	r3, [sp, #64]	; 0x40
  407e36:	9303      	str	r3, [sp, #12]
  407e38:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  407e3c:	46ca      	mov	sl, r9
  407e3e:	f8cd b010 	str.w	fp, [sp, #16]
  407e42:	f898 3000 	ldrb.w	r3, [r8]
  407e46:	4644      	mov	r4, r8
  407e48:	b1fb      	cbz	r3, 407e8a <_vfiprintf_r+0xc2>
  407e4a:	2b25      	cmp	r3, #37	; 0x25
  407e4c:	d102      	bne.n	407e54 <_vfiprintf_r+0x8c>
  407e4e:	e01c      	b.n	407e8a <_vfiprintf_r+0xc2>
  407e50:	2b25      	cmp	r3, #37	; 0x25
  407e52:	d003      	beq.n	407e5c <_vfiprintf_r+0x94>
  407e54:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  407e58:	2b00      	cmp	r3, #0
  407e5a:	d1f9      	bne.n	407e50 <_vfiprintf_r+0x88>
  407e5c:	eba4 0508 	sub.w	r5, r4, r8
  407e60:	b19d      	cbz	r5, 407e8a <_vfiprintf_r+0xc2>
  407e62:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407e64:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407e66:	f8ca 8000 	str.w	r8, [sl]
  407e6a:	3301      	adds	r3, #1
  407e6c:	442a      	add	r2, r5
  407e6e:	2b07      	cmp	r3, #7
  407e70:	f8ca 5004 	str.w	r5, [sl, #4]
  407e74:	9211      	str	r2, [sp, #68]	; 0x44
  407e76:	9310      	str	r3, [sp, #64]	; 0x40
  407e78:	dd7a      	ble.n	407f70 <_vfiprintf_r+0x1a8>
  407e7a:	2a00      	cmp	r2, #0
  407e7c:	f040 84b0 	bne.w	4087e0 <_vfiprintf_r+0xa18>
  407e80:	9b03      	ldr	r3, [sp, #12]
  407e82:	9210      	str	r2, [sp, #64]	; 0x40
  407e84:	442b      	add	r3, r5
  407e86:	46ca      	mov	sl, r9
  407e88:	9303      	str	r3, [sp, #12]
  407e8a:	7823      	ldrb	r3, [r4, #0]
  407e8c:	2b00      	cmp	r3, #0
  407e8e:	f000 83e0 	beq.w	408652 <_vfiprintf_r+0x88a>
  407e92:	2000      	movs	r0, #0
  407e94:	f04f 0300 	mov.w	r3, #0
  407e98:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  407e9c:	f104 0801 	add.w	r8, r4, #1
  407ea0:	7862      	ldrb	r2, [r4, #1]
  407ea2:	4605      	mov	r5, r0
  407ea4:	4606      	mov	r6, r0
  407ea6:	4603      	mov	r3, r0
  407ea8:	f04f 34ff 	mov.w	r4, #4294967295
  407eac:	f108 0801 	add.w	r8, r8, #1
  407eb0:	f1a2 0120 	sub.w	r1, r2, #32
  407eb4:	2958      	cmp	r1, #88	; 0x58
  407eb6:	f200 82de 	bhi.w	408476 <_vfiprintf_r+0x6ae>
  407eba:	e8df f011 	tbh	[pc, r1, lsl #1]
  407ebe:	0221      	.short	0x0221
  407ec0:	02dc02dc 	.word	0x02dc02dc
  407ec4:	02dc0229 	.word	0x02dc0229
  407ec8:	02dc02dc 	.word	0x02dc02dc
  407ecc:	02dc02dc 	.word	0x02dc02dc
  407ed0:	028902dc 	.word	0x028902dc
  407ed4:	02dc0295 	.word	0x02dc0295
  407ed8:	02bd00a2 	.word	0x02bd00a2
  407edc:	019f02dc 	.word	0x019f02dc
  407ee0:	01a401a4 	.word	0x01a401a4
  407ee4:	01a401a4 	.word	0x01a401a4
  407ee8:	01a401a4 	.word	0x01a401a4
  407eec:	01a401a4 	.word	0x01a401a4
  407ef0:	02dc01a4 	.word	0x02dc01a4
  407ef4:	02dc02dc 	.word	0x02dc02dc
  407ef8:	02dc02dc 	.word	0x02dc02dc
  407efc:	02dc02dc 	.word	0x02dc02dc
  407f00:	02dc02dc 	.word	0x02dc02dc
  407f04:	01b202dc 	.word	0x01b202dc
  407f08:	02dc02dc 	.word	0x02dc02dc
  407f0c:	02dc02dc 	.word	0x02dc02dc
  407f10:	02dc02dc 	.word	0x02dc02dc
  407f14:	02dc02dc 	.word	0x02dc02dc
  407f18:	02dc02dc 	.word	0x02dc02dc
  407f1c:	02dc0197 	.word	0x02dc0197
  407f20:	02dc02dc 	.word	0x02dc02dc
  407f24:	02dc02dc 	.word	0x02dc02dc
  407f28:	02dc019b 	.word	0x02dc019b
  407f2c:	025302dc 	.word	0x025302dc
  407f30:	02dc02dc 	.word	0x02dc02dc
  407f34:	02dc02dc 	.word	0x02dc02dc
  407f38:	02dc02dc 	.word	0x02dc02dc
  407f3c:	02dc02dc 	.word	0x02dc02dc
  407f40:	02dc02dc 	.word	0x02dc02dc
  407f44:	021b025a 	.word	0x021b025a
  407f48:	02dc02dc 	.word	0x02dc02dc
  407f4c:	026e02dc 	.word	0x026e02dc
  407f50:	02dc021b 	.word	0x02dc021b
  407f54:	027302dc 	.word	0x027302dc
  407f58:	01f502dc 	.word	0x01f502dc
  407f5c:	02090182 	.word	0x02090182
  407f60:	02dc02d7 	.word	0x02dc02d7
  407f64:	02dc029a 	.word	0x02dc029a
  407f68:	02dc00a7 	.word	0x02dc00a7
  407f6c:	022e02dc 	.word	0x022e02dc
  407f70:	f10a 0a08 	add.w	sl, sl, #8
  407f74:	9b03      	ldr	r3, [sp, #12]
  407f76:	442b      	add	r3, r5
  407f78:	9303      	str	r3, [sp, #12]
  407f7a:	e786      	b.n	407e8a <_vfiprintf_r+0xc2>
  407f7c:	4659      	mov	r1, fp
  407f7e:	9806      	ldr	r0, [sp, #24]
  407f80:	f000 fdac 	bl	408adc <__swsetup_r>
  407f84:	bb18      	cbnz	r0, 407fce <_vfiprintf_r+0x206>
  407f86:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  407f8a:	f001 031a 	and.w	r3, r1, #26
  407f8e:	2b0a      	cmp	r3, #10
  407f90:	f47f af4b 	bne.w	407e2a <_vfiprintf_r+0x62>
  407f94:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  407f98:	2b00      	cmp	r3, #0
  407f9a:	f6ff af46 	blt.w	407e2a <_vfiprintf_r+0x62>
  407f9e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407fa2:	07db      	lsls	r3, r3, #31
  407fa4:	d405      	bmi.n	407fb2 <_vfiprintf_r+0x1ea>
  407fa6:	058f      	lsls	r7, r1, #22
  407fa8:	d403      	bmi.n	407fb2 <_vfiprintf_r+0x1ea>
  407faa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407fae:	f001 fac3 	bl	409538 <__retarget_lock_release_recursive>
  407fb2:	462b      	mov	r3, r5
  407fb4:	4642      	mov	r2, r8
  407fb6:	4659      	mov	r1, fp
  407fb8:	9806      	ldr	r0, [sp, #24]
  407fba:	f000 fd4d 	bl	408a58 <__sbprintf>
  407fbe:	9003      	str	r0, [sp, #12]
  407fc0:	9803      	ldr	r0, [sp, #12]
  407fc2:	b02d      	add	sp, #180	; 0xb4
  407fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407fc8:	f000 fef4 	bl	408db4 <__sinit>
  407fcc:	e709      	b.n	407de2 <_vfiprintf_r+0x1a>
  407fce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407fd2:	07d9      	lsls	r1, r3, #31
  407fd4:	d404      	bmi.n	407fe0 <_vfiprintf_r+0x218>
  407fd6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407fda:	059a      	lsls	r2, r3, #22
  407fdc:	f140 84aa 	bpl.w	408934 <_vfiprintf_r+0xb6c>
  407fe0:	f04f 33ff 	mov.w	r3, #4294967295
  407fe4:	9303      	str	r3, [sp, #12]
  407fe6:	9803      	ldr	r0, [sp, #12]
  407fe8:	b02d      	add	sp, #180	; 0xb4
  407fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407fee:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407ff2:	f001 fa9f 	bl	409534 <__retarget_lock_acquire_recursive>
  407ff6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  407ffa:	b281      	uxth	r1, r0
  407ffc:	e6fb      	b.n	407df6 <_vfiprintf_r+0x2e>
  407ffe:	4276      	negs	r6, r6
  408000:	9207      	str	r2, [sp, #28]
  408002:	f043 0304 	orr.w	r3, r3, #4
  408006:	f898 2000 	ldrb.w	r2, [r8]
  40800a:	e74f      	b.n	407eac <_vfiprintf_r+0xe4>
  40800c:	9608      	str	r6, [sp, #32]
  40800e:	069e      	lsls	r6, r3, #26
  408010:	f100 8450 	bmi.w	4088b4 <_vfiprintf_r+0xaec>
  408014:	9907      	ldr	r1, [sp, #28]
  408016:	06dd      	lsls	r5, r3, #27
  408018:	460a      	mov	r2, r1
  40801a:	f100 83ef 	bmi.w	4087fc <_vfiprintf_r+0xa34>
  40801e:	0658      	lsls	r0, r3, #25
  408020:	f140 83ec 	bpl.w	4087fc <_vfiprintf_r+0xa34>
  408024:	880e      	ldrh	r6, [r1, #0]
  408026:	3104      	adds	r1, #4
  408028:	2700      	movs	r7, #0
  40802a:	2201      	movs	r2, #1
  40802c:	9107      	str	r1, [sp, #28]
  40802e:	f04f 0100 	mov.w	r1, #0
  408032:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  408036:	2500      	movs	r5, #0
  408038:	1c61      	adds	r1, r4, #1
  40803a:	f000 8116 	beq.w	40826a <_vfiprintf_r+0x4a2>
  40803e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  408042:	9102      	str	r1, [sp, #8]
  408044:	ea56 0107 	orrs.w	r1, r6, r7
  408048:	f040 8114 	bne.w	408274 <_vfiprintf_r+0x4ac>
  40804c:	2c00      	cmp	r4, #0
  40804e:	f040 835c 	bne.w	40870a <_vfiprintf_r+0x942>
  408052:	2a00      	cmp	r2, #0
  408054:	f040 83b7 	bne.w	4087c6 <_vfiprintf_r+0x9fe>
  408058:	f013 0301 	ands.w	r3, r3, #1
  40805c:	9305      	str	r3, [sp, #20]
  40805e:	f000 8457 	beq.w	408910 <_vfiprintf_r+0xb48>
  408062:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  408066:	2330      	movs	r3, #48	; 0x30
  408068:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40806c:	9b05      	ldr	r3, [sp, #20]
  40806e:	42a3      	cmp	r3, r4
  408070:	bfb8      	it	lt
  408072:	4623      	movlt	r3, r4
  408074:	9301      	str	r3, [sp, #4]
  408076:	b10d      	cbz	r5, 40807c <_vfiprintf_r+0x2b4>
  408078:	3301      	adds	r3, #1
  40807a:	9301      	str	r3, [sp, #4]
  40807c:	9b02      	ldr	r3, [sp, #8]
  40807e:	f013 0302 	ands.w	r3, r3, #2
  408082:	9309      	str	r3, [sp, #36]	; 0x24
  408084:	d002      	beq.n	40808c <_vfiprintf_r+0x2c4>
  408086:	9b01      	ldr	r3, [sp, #4]
  408088:	3302      	adds	r3, #2
  40808a:	9301      	str	r3, [sp, #4]
  40808c:	9b02      	ldr	r3, [sp, #8]
  40808e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  408092:	930a      	str	r3, [sp, #40]	; 0x28
  408094:	f040 8217 	bne.w	4084c6 <_vfiprintf_r+0x6fe>
  408098:	9b08      	ldr	r3, [sp, #32]
  40809a:	9a01      	ldr	r2, [sp, #4]
  40809c:	1a9d      	subs	r5, r3, r2
  40809e:	2d00      	cmp	r5, #0
  4080a0:	f340 8211 	ble.w	4084c6 <_vfiprintf_r+0x6fe>
  4080a4:	2d10      	cmp	r5, #16
  4080a6:	f340 8490 	ble.w	4089ca <_vfiprintf_r+0xc02>
  4080aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4080ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4080ae:	4ec4      	ldr	r6, [pc, #784]	; (4083c0 <_vfiprintf_r+0x5f8>)
  4080b0:	46d6      	mov	lr, sl
  4080b2:	2710      	movs	r7, #16
  4080b4:	46a2      	mov	sl, r4
  4080b6:	4619      	mov	r1, r3
  4080b8:	9c06      	ldr	r4, [sp, #24]
  4080ba:	e007      	b.n	4080cc <_vfiprintf_r+0x304>
  4080bc:	f101 0c02 	add.w	ip, r1, #2
  4080c0:	f10e 0e08 	add.w	lr, lr, #8
  4080c4:	4601      	mov	r1, r0
  4080c6:	3d10      	subs	r5, #16
  4080c8:	2d10      	cmp	r5, #16
  4080ca:	dd11      	ble.n	4080f0 <_vfiprintf_r+0x328>
  4080cc:	1c48      	adds	r0, r1, #1
  4080ce:	3210      	adds	r2, #16
  4080d0:	2807      	cmp	r0, #7
  4080d2:	9211      	str	r2, [sp, #68]	; 0x44
  4080d4:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4080d8:	9010      	str	r0, [sp, #64]	; 0x40
  4080da:	ddef      	ble.n	4080bc <_vfiprintf_r+0x2f4>
  4080dc:	2a00      	cmp	r2, #0
  4080de:	f040 81e4 	bne.w	4084aa <_vfiprintf_r+0x6e2>
  4080e2:	3d10      	subs	r5, #16
  4080e4:	2d10      	cmp	r5, #16
  4080e6:	4611      	mov	r1, r2
  4080e8:	f04f 0c01 	mov.w	ip, #1
  4080ec:	46ce      	mov	lr, r9
  4080ee:	dced      	bgt.n	4080cc <_vfiprintf_r+0x304>
  4080f0:	4654      	mov	r4, sl
  4080f2:	4661      	mov	r1, ip
  4080f4:	46f2      	mov	sl, lr
  4080f6:	442a      	add	r2, r5
  4080f8:	2907      	cmp	r1, #7
  4080fa:	9211      	str	r2, [sp, #68]	; 0x44
  4080fc:	f8ca 6000 	str.w	r6, [sl]
  408100:	f8ca 5004 	str.w	r5, [sl, #4]
  408104:	9110      	str	r1, [sp, #64]	; 0x40
  408106:	f300 82ec 	bgt.w	4086e2 <_vfiprintf_r+0x91a>
  40810a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40810e:	f10a 0a08 	add.w	sl, sl, #8
  408112:	1c48      	adds	r0, r1, #1
  408114:	2d00      	cmp	r5, #0
  408116:	f040 81de 	bne.w	4084d6 <_vfiprintf_r+0x70e>
  40811a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40811c:	2b00      	cmp	r3, #0
  40811e:	f000 81f8 	beq.w	408512 <_vfiprintf_r+0x74a>
  408122:	3202      	adds	r2, #2
  408124:	a90e      	add	r1, sp, #56	; 0x38
  408126:	2302      	movs	r3, #2
  408128:	2807      	cmp	r0, #7
  40812a:	9211      	str	r2, [sp, #68]	; 0x44
  40812c:	9010      	str	r0, [sp, #64]	; 0x40
  40812e:	e88a 000a 	stmia.w	sl, {r1, r3}
  408132:	f340 81ea 	ble.w	40850a <_vfiprintf_r+0x742>
  408136:	2a00      	cmp	r2, #0
  408138:	f040 838c 	bne.w	408854 <_vfiprintf_r+0xa8c>
  40813c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40813e:	2b80      	cmp	r3, #128	; 0x80
  408140:	f04f 0001 	mov.w	r0, #1
  408144:	4611      	mov	r1, r2
  408146:	46ca      	mov	sl, r9
  408148:	f040 81e7 	bne.w	40851a <_vfiprintf_r+0x752>
  40814c:	9b08      	ldr	r3, [sp, #32]
  40814e:	9d01      	ldr	r5, [sp, #4]
  408150:	1b5e      	subs	r6, r3, r5
  408152:	2e00      	cmp	r6, #0
  408154:	f340 81e1 	ble.w	40851a <_vfiprintf_r+0x752>
  408158:	2e10      	cmp	r6, #16
  40815a:	4d9a      	ldr	r5, [pc, #616]	; (4083c4 <_vfiprintf_r+0x5fc>)
  40815c:	f340 8450 	ble.w	408a00 <_vfiprintf_r+0xc38>
  408160:	46d4      	mov	ip, sl
  408162:	2710      	movs	r7, #16
  408164:	46a2      	mov	sl, r4
  408166:	9c06      	ldr	r4, [sp, #24]
  408168:	e007      	b.n	40817a <_vfiprintf_r+0x3b2>
  40816a:	f101 0e02 	add.w	lr, r1, #2
  40816e:	f10c 0c08 	add.w	ip, ip, #8
  408172:	4601      	mov	r1, r0
  408174:	3e10      	subs	r6, #16
  408176:	2e10      	cmp	r6, #16
  408178:	dd11      	ble.n	40819e <_vfiprintf_r+0x3d6>
  40817a:	1c48      	adds	r0, r1, #1
  40817c:	3210      	adds	r2, #16
  40817e:	2807      	cmp	r0, #7
  408180:	9211      	str	r2, [sp, #68]	; 0x44
  408182:	e88c 00a0 	stmia.w	ip, {r5, r7}
  408186:	9010      	str	r0, [sp, #64]	; 0x40
  408188:	ddef      	ble.n	40816a <_vfiprintf_r+0x3a2>
  40818a:	2a00      	cmp	r2, #0
  40818c:	f040 829d 	bne.w	4086ca <_vfiprintf_r+0x902>
  408190:	3e10      	subs	r6, #16
  408192:	2e10      	cmp	r6, #16
  408194:	f04f 0e01 	mov.w	lr, #1
  408198:	4611      	mov	r1, r2
  40819a:	46cc      	mov	ip, r9
  40819c:	dced      	bgt.n	40817a <_vfiprintf_r+0x3b2>
  40819e:	4654      	mov	r4, sl
  4081a0:	46e2      	mov	sl, ip
  4081a2:	4432      	add	r2, r6
  4081a4:	f1be 0f07 	cmp.w	lr, #7
  4081a8:	9211      	str	r2, [sp, #68]	; 0x44
  4081aa:	e88a 0060 	stmia.w	sl, {r5, r6}
  4081ae:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4081b2:	f300 8369 	bgt.w	408888 <_vfiprintf_r+0xac0>
  4081b6:	f10a 0a08 	add.w	sl, sl, #8
  4081ba:	f10e 0001 	add.w	r0, lr, #1
  4081be:	4671      	mov	r1, lr
  4081c0:	e1ab      	b.n	40851a <_vfiprintf_r+0x752>
  4081c2:	9608      	str	r6, [sp, #32]
  4081c4:	f013 0220 	ands.w	r2, r3, #32
  4081c8:	f040 838c 	bne.w	4088e4 <_vfiprintf_r+0xb1c>
  4081cc:	f013 0110 	ands.w	r1, r3, #16
  4081d0:	f040 831a 	bne.w	408808 <_vfiprintf_r+0xa40>
  4081d4:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4081d8:	f000 8316 	beq.w	408808 <_vfiprintf_r+0xa40>
  4081dc:	9807      	ldr	r0, [sp, #28]
  4081de:	460a      	mov	r2, r1
  4081e0:	4601      	mov	r1, r0
  4081e2:	3104      	adds	r1, #4
  4081e4:	8806      	ldrh	r6, [r0, #0]
  4081e6:	9107      	str	r1, [sp, #28]
  4081e8:	2700      	movs	r7, #0
  4081ea:	e720      	b.n	40802e <_vfiprintf_r+0x266>
  4081ec:	9608      	str	r6, [sp, #32]
  4081ee:	f043 0310 	orr.w	r3, r3, #16
  4081f2:	e7e7      	b.n	4081c4 <_vfiprintf_r+0x3fc>
  4081f4:	9608      	str	r6, [sp, #32]
  4081f6:	f043 0310 	orr.w	r3, r3, #16
  4081fa:	e708      	b.n	40800e <_vfiprintf_r+0x246>
  4081fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408200:	f898 2000 	ldrb.w	r2, [r8]
  408204:	e652      	b.n	407eac <_vfiprintf_r+0xe4>
  408206:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40820a:	2600      	movs	r6, #0
  40820c:	f818 2b01 	ldrb.w	r2, [r8], #1
  408210:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  408214:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  408218:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40821c:	2909      	cmp	r1, #9
  40821e:	d9f5      	bls.n	40820c <_vfiprintf_r+0x444>
  408220:	e646      	b.n	407eb0 <_vfiprintf_r+0xe8>
  408222:	9608      	str	r6, [sp, #32]
  408224:	2800      	cmp	r0, #0
  408226:	f040 8408 	bne.w	408a3a <_vfiprintf_r+0xc72>
  40822a:	f043 0310 	orr.w	r3, r3, #16
  40822e:	069e      	lsls	r6, r3, #26
  408230:	f100 834c 	bmi.w	4088cc <_vfiprintf_r+0xb04>
  408234:	06dd      	lsls	r5, r3, #27
  408236:	f100 82f3 	bmi.w	408820 <_vfiprintf_r+0xa58>
  40823a:	0658      	lsls	r0, r3, #25
  40823c:	f140 82f0 	bpl.w	408820 <_vfiprintf_r+0xa58>
  408240:	9d07      	ldr	r5, [sp, #28]
  408242:	f9b5 6000 	ldrsh.w	r6, [r5]
  408246:	462a      	mov	r2, r5
  408248:	17f7      	asrs	r7, r6, #31
  40824a:	3204      	adds	r2, #4
  40824c:	4630      	mov	r0, r6
  40824e:	4639      	mov	r1, r7
  408250:	9207      	str	r2, [sp, #28]
  408252:	2800      	cmp	r0, #0
  408254:	f171 0200 	sbcs.w	r2, r1, #0
  408258:	f2c0 835d 	blt.w	408916 <_vfiprintf_r+0xb4e>
  40825c:	1c61      	adds	r1, r4, #1
  40825e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408262:	f04f 0201 	mov.w	r2, #1
  408266:	f47f aeea 	bne.w	40803e <_vfiprintf_r+0x276>
  40826a:	ea56 0107 	orrs.w	r1, r6, r7
  40826e:	f000 824d 	beq.w	40870c <_vfiprintf_r+0x944>
  408272:	9302      	str	r3, [sp, #8]
  408274:	2a01      	cmp	r2, #1
  408276:	f000 828c 	beq.w	408792 <_vfiprintf_r+0x9ca>
  40827a:	2a02      	cmp	r2, #2
  40827c:	f040 825c 	bne.w	408738 <_vfiprintf_r+0x970>
  408280:	980b      	ldr	r0, [sp, #44]	; 0x2c
  408282:	46cb      	mov	fp, r9
  408284:	0933      	lsrs	r3, r6, #4
  408286:	f006 010f 	and.w	r1, r6, #15
  40828a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40828e:	093a      	lsrs	r2, r7, #4
  408290:	461e      	mov	r6, r3
  408292:	4617      	mov	r7, r2
  408294:	5c43      	ldrb	r3, [r0, r1]
  408296:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40829a:	ea56 0307 	orrs.w	r3, r6, r7
  40829e:	d1f1      	bne.n	408284 <_vfiprintf_r+0x4bc>
  4082a0:	eba9 030b 	sub.w	r3, r9, fp
  4082a4:	9305      	str	r3, [sp, #20]
  4082a6:	e6e1      	b.n	40806c <_vfiprintf_r+0x2a4>
  4082a8:	2800      	cmp	r0, #0
  4082aa:	f040 83c0 	bne.w	408a2e <_vfiprintf_r+0xc66>
  4082ae:	0699      	lsls	r1, r3, #26
  4082b0:	f100 8367 	bmi.w	408982 <_vfiprintf_r+0xbba>
  4082b4:	06da      	lsls	r2, r3, #27
  4082b6:	f100 80f1 	bmi.w	40849c <_vfiprintf_r+0x6d4>
  4082ba:	065b      	lsls	r3, r3, #25
  4082bc:	f140 80ee 	bpl.w	40849c <_vfiprintf_r+0x6d4>
  4082c0:	9a07      	ldr	r2, [sp, #28]
  4082c2:	6813      	ldr	r3, [r2, #0]
  4082c4:	3204      	adds	r2, #4
  4082c6:	9207      	str	r2, [sp, #28]
  4082c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4082cc:	801a      	strh	r2, [r3, #0]
  4082ce:	e5b8      	b.n	407e42 <_vfiprintf_r+0x7a>
  4082d0:	9807      	ldr	r0, [sp, #28]
  4082d2:	4a3d      	ldr	r2, [pc, #244]	; (4083c8 <_vfiprintf_r+0x600>)
  4082d4:	9608      	str	r6, [sp, #32]
  4082d6:	920b      	str	r2, [sp, #44]	; 0x2c
  4082d8:	6806      	ldr	r6, [r0, #0]
  4082da:	2278      	movs	r2, #120	; 0x78
  4082dc:	2130      	movs	r1, #48	; 0x30
  4082de:	3004      	adds	r0, #4
  4082e0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4082e4:	f043 0302 	orr.w	r3, r3, #2
  4082e8:	9007      	str	r0, [sp, #28]
  4082ea:	2700      	movs	r7, #0
  4082ec:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4082f0:	2202      	movs	r2, #2
  4082f2:	e69c      	b.n	40802e <_vfiprintf_r+0x266>
  4082f4:	9608      	str	r6, [sp, #32]
  4082f6:	2800      	cmp	r0, #0
  4082f8:	d099      	beq.n	40822e <_vfiprintf_r+0x466>
  4082fa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4082fe:	e796      	b.n	40822e <_vfiprintf_r+0x466>
  408300:	f898 2000 	ldrb.w	r2, [r8]
  408304:	2d00      	cmp	r5, #0
  408306:	f47f add1 	bne.w	407eac <_vfiprintf_r+0xe4>
  40830a:	2001      	movs	r0, #1
  40830c:	2520      	movs	r5, #32
  40830e:	e5cd      	b.n	407eac <_vfiprintf_r+0xe4>
  408310:	f043 0301 	orr.w	r3, r3, #1
  408314:	f898 2000 	ldrb.w	r2, [r8]
  408318:	e5c8      	b.n	407eac <_vfiprintf_r+0xe4>
  40831a:	9608      	str	r6, [sp, #32]
  40831c:	2800      	cmp	r0, #0
  40831e:	f040 8393 	bne.w	408a48 <_vfiprintf_r+0xc80>
  408322:	4929      	ldr	r1, [pc, #164]	; (4083c8 <_vfiprintf_r+0x600>)
  408324:	910b      	str	r1, [sp, #44]	; 0x2c
  408326:	069f      	lsls	r7, r3, #26
  408328:	f100 82e8 	bmi.w	4088fc <_vfiprintf_r+0xb34>
  40832c:	9807      	ldr	r0, [sp, #28]
  40832e:	06de      	lsls	r6, r3, #27
  408330:	4601      	mov	r1, r0
  408332:	f100 8270 	bmi.w	408816 <_vfiprintf_r+0xa4e>
  408336:	065d      	lsls	r5, r3, #25
  408338:	f140 826d 	bpl.w	408816 <_vfiprintf_r+0xa4e>
  40833c:	3104      	adds	r1, #4
  40833e:	8806      	ldrh	r6, [r0, #0]
  408340:	9107      	str	r1, [sp, #28]
  408342:	2700      	movs	r7, #0
  408344:	07d8      	lsls	r0, r3, #31
  408346:	f140 8222 	bpl.w	40878e <_vfiprintf_r+0x9c6>
  40834a:	ea56 0107 	orrs.w	r1, r6, r7
  40834e:	f000 821e 	beq.w	40878e <_vfiprintf_r+0x9c6>
  408352:	2130      	movs	r1, #48	; 0x30
  408354:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  408358:	f043 0302 	orr.w	r3, r3, #2
  40835c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  408360:	2202      	movs	r2, #2
  408362:	e664      	b.n	40802e <_vfiprintf_r+0x266>
  408364:	9608      	str	r6, [sp, #32]
  408366:	2800      	cmp	r0, #0
  408368:	f040 836b 	bne.w	408a42 <_vfiprintf_r+0xc7a>
  40836c:	4917      	ldr	r1, [pc, #92]	; (4083cc <_vfiprintf_r+0x604>)
  40836e:	910b      	str	r1, [sp, #44]	; 0x2c
  408370:	e7d9      	b.n	408326 <_vfiprintf_r+0x55e>
  408372:	9907      	ldr	r1, [sp, #28]
  408374:	9608      	str	r6, [sp, #32]
  408376:	680a      	ldr	r2, [r1, #0]
  408378:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40837c:	f04f 0000 	mov.w	r0, #0
  408380:	460a      	mov	r2, r1
  408382:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  408386:	3204      	adds	r2, #4
  408388:	2001      	movs	r0, #1
  40838a:	9001      	str	r0, [sp, #4]
  40838c:	9207      	str	r2, [sp, #28]
  40838e:	9005      	str	r0, [sp, #20]
  408390:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  408394:	9302      	str	r3, [sp, #8]
  408396:	2400      	movs	r4, #0
  408398:	e670      	b.n	40807c <_vfiprintf_r+0x2b4>
  40839a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40839e:	f898 2000 	ldrb.w	r2, [r8]
  4083a2:	e583      	b.n	407eac <_vfiprintf_r+0xe4>
  4083a4:	f898 2000 	ldrb.w	r2, [r8]
  4083a8:	2a6c      	cmp	r2, #108	; 0x6c
  4083aa:	bf03      	ittte	eq
  4083ac:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4083b0:	f043 0320 	orreq.w	r3, r3, #32
  4083b4:	f108 0801 	addeq.w	r8, r8, #1
  4083b8:	f043 0310 	orrne.w	r3, r3, #16
  4083bc:	e576      	b.n	407eac <_vfiprintf_r+0xe4>
  4083be:	bf00      	nop
  4083c0:	0040afac 	.word	0x0040afac
  4083c4:	0040afbc 	.word	0x0040afbc
  4083c8:	0040af90 	.word	0x0040af90
  4083cc:	0040af7c 	.word	0x0040af7c
  4083d0:	9907      	ldr	r1, [sp, #28]
  4083d2:	680e      	ldr	r6, [r1, #0]
  4083d4:	460a      	mov	r2, r1
  4083d6:	2e00      	cmp	r6, #0
  4083d8:	f102 0204 	add.w	r2, r2, #4
  4083dc:	f6ff ae0f 	blt.w	407ffe <_vfiprintf_r+0x236>
  4083e0:	9207      	str	r2, [sp, #28]
  4083e2:	f898 2000 	ldrb.w	r2, [r8]
  4083e6:	e561      	b.n	407eac <_vfiprintf_r+0xe4>
  4083e8:	f898 2000 	ldrb.w	r2, [r8]
  4083ec:	2001      	movs	r0, #1
  4083ee:	252b      	movs	r5, #43	; 0x2b
  4083f0:	e55c      	b.n	407eac <_vfiprintf_r+0xe4>
  4083f2:	9907      	ldr	r1, [sp, #28]
  4083f4:	9608      	str	r6, [sp, #32]
  4083f6:	f8d1 b000 	ldr.w	fp, [r1]
  4083fa:	f04f 0200 	mov.w	r2, #0
  4083fe:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  408402:	1d0e      	adds	r6, r1, #4
  408404:	f1bb 0f00 	cmp.w	fp, #0
  408408:	f000 82e5 	beq.w	4089d6 <_vfiprintf_r+0xc0e>
  40840c:	1c67      	adds	r7, r4, #1
  40840e:	f000 82c4 	beq.w	40899a <_vfiprintf_r+0xbd2>
  408412:	4622      	mov	r2, r4
  408414:	2100      	movs	r1, #0
  408416:	4658      	mov	r0, fp
  408418:	9301      	str	r3, [sp, #4]
  40841a:	f001 fbd9 	bl	409bd0 <memchr>
  40841e:	9b01      	ldr	r3, [sp, #4]
  408420:	2800      	cmp	r0, #0
  408422:	f000 82e5 	beq.w	4089f0 <_vfiprintf_r+0xc28>
  408426:	eba0 020b 	sub.w	r2, r0, fp
  40842a:	9205      	str	r2, [sp, #20]
  40842c:	9607      	str	r6, [sp, #28]
  40842e:	9302      	str	r3, [sp, #8]
  408430:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408434:	2400      	movs	r4, #0
  408436:	e619      	b.n	40806c <_vfiprintf_r+0x2a4>
  408438:	f898 2000 	ldrb.w	r2, [r8]
  40843c:	2a2a      	cmp	r2, #42	; 0x2a
  40843e:	f108 0701 	add.w	r7, r8, #1
  408442:	f000 82e9 	beq.w	408a18 <_vfiprintf_r+0xc50>
  408446:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40844a:	2909      	cmp	r1, #9
  40844c:	46b8      	mov	r8, r7
  40844e:	f04f 0400 	mov.w	r4, #0
  408452:	f63f ad2d 	bhi.w	407eb0 <_vfiprintf_r+0xe8>
  408456:	f818 2b01 	ldrb.w	r2, [r8], #1
  40845a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40845e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  408462:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408466:	2909      	cmp	r1, #9
  408468:	d9f5      	bls.n	408456 <_vfiprintf_r+0x68e>
  40846a:	e521      	b.n	407eb0 <_vfiprintf_r+0xe8>
  40846c:	f043 0320 	orr.w	r3, r3, #32
  408470:	f898 2000 	ldrb.w	r2, [r8]
  408474:	e51a      	b.n	407eac <_vfiprintf_r+0xe4>
  408476:	9608      	str	r6, [sp, #32]
  408478:	2800      	cmp	r0, #0
  40847a:	f040 82db 	bne.w	408a34 <_vfiprintf_r+0xc6c>
  40847e:	2a00      	cmp	r2, #0
  408480:	f000 80e7 	beq.w	408652 <_vfiprintf_r+0x88a>
  408484:	2101      	movs	r1, #1
  408486:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40848a:	f04f 0200 	mov.w	r2, #0
  40848e:	9101      	str	r1, [sp, #4]
  408490:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  408494:	9105      	str	r1, [sp, #20]
  408496:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40849a:	e77b      	b.n	408394 <_vfiprintf_r+0x5cc>
  40849c:	9a07      	ldr	r2, [sp, #28]
  40849e:	6813      	ldr	r3, [r2, #0]
  4084a0:	3204      	adds	r2, #4
  4084a2:	9207      	str	r2, [sp, #28]
  4084a4:	9a03      	ldr	r2, [sp, #12]
  4084a6:	601a      	str	r2, [r3, #0]
  4084a8:	e4cb      	b.n	407e42 <_vfiprintf_r+0x7a>
  4084aa:	aa0f      	add	r2, sp, #60	; 0x3c
  4084ac:	9904      	ldr	r1, [sp, #16]
  4084ae:	4620      	mov	r0, r4
  4084b0:	f7ff fc4a 	bl	407d48 <__sprint_r.part.0>
  4084b4:	2800      	cmp	r0, #0
  4084b6:	f040 8139 	bne.w	40872c <_vfiprintf_r+0x964>
  4084ba:	9910      	ldr	r1, [sp, #64]	; 0x40
  4084bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4084be:	f101 0c01 	add.w	ip, r1, #1
  4084c2:	46ce      	mov	lr, r9
  4084c4:	e5ff      	b.n	4080c6 <_vfiprintf_r+0x2fe>
  4084c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4084c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4084ca:	1c48      	adds	r0, r1, #1
  4084cc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4084d0:	2d00      	cmp	r5, #0
  4084d2:	f43f ae22 	beq.w	40811a <_vfiprintf_r+0x352>
  4084d6:	3201      	adds	r2, #1
  4084d8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4084dc:	2101      	movs	r1, #1
  4084de:	2807      	cmp	r0, #7
  4084e0:	9211      	str	r2, [sp, #68]	; 0x44
  4084e2:	9010      	str	r0, [sp, #64]	; 0x40
  4084e4:	f8ca 5000 	str.w	r5, [sl]
  4084e8:	f8ca 1004 	str.w	r1, [sl, #4]
  4084ec:	f340 8108 	ble.w	408700 <_vfiprintf_r+0x938>
  4084f0:	2a00      	cmp	r2, #0
  4084f2:	f040 81bc 	bne.w	40886e <_vfiprintf_r+0xaa6>
  4084f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4084f8:	2b00      	cmp	r3, #0
  4084fa:	f43f ae1f 	beq.w	40813c <_vfiprintf_r+0x374>
  4084fe:	ab0e      	add	r3, sp, #56	; 0x38
  408500:	2202      	movs	r2, #2
  408502:	4608      	mov	r0, r1
  408504:	931c      	str	r3, [sp, #112]	; 0x70
  408506:	921d      	str	r2, [sp, #116]	; 0x74
  408508:	46ca      	mov	sl, r9
  40850a:	4601      	mov	r1, r0
  40850c:	f10a 0a08 	add.w	sl, sl, #8
  408510:	3001      	adds	r0, #1
  408512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408514:	2b80      	cmp	r3, #128	; 0x80
  408516:	f43f ae19 	beq.w	40814c <_vfiprintf_r+0x384>
  40851a:	9b05      	ldr	r3, [sp, #20]
  40851c:	1ae4      	subs	r4, r4, r3
  40851e:	2c00      	cmp	r4, #0
  408520:	dd2e      	ble.n	408580 <_vfiprintf_r+0x7b8>
  408522:	2c10      	cmp	r4, #16
  408524:	4db3      	ldr	r5, [pc, #716]	; (4087f4 <_vfiprintf_r+0xa2c>)
  408526:	dd1e      	ble.n	408566 <_vfiprintf_r+0x79e>
  408528:	46d6      	mov	lr, sl
  40852a:	2610      	movs	r6, #16
  40852c:	9f06      	ldr	r7, [sp, #24]
  40852e:	f8dd a010 	ldr.w	sl, [sp, #16]
  408532:	e006      	b.n	408542 <_vfiprintf_r+0x77a>
  408534:	1c88      	adds	r0, r1, #2
  408536:	f10e 0e08 	add.w	lr, lr, #8
  40853a:	4619      	mov	r1, r3
  40853c:	3c10      	subs	r4, #16
  40853e:	2c10      	cmp	r4, #16
  408540:	dd10      	ble.n	408564 <_vfiprintf_r+0x79c>
  408542:	1c4b      	adds	r3, r1, #1
  408544:	3210      	adds	r2, #16
  408546:	2b07      	cmp	r3, #7
  408548:	9211      	str	r2, [sp, #68]	; 0x44
  40854a:	e88e 0060 	stmia.w	lr, {r5, r6}
  40854e:	9310      	str	r3, [sp, #64]	; 0x40
  408550:	ddf0      	ble.n	408534 <_vfiprintf_r+0x76c>
  408552:	2a00      	cmp	r2, #0
  408554:	d165      	bne.n	408622 <_vfiprintf_r+0x85a>
  408556:	3c10      	subs	r4, #16
  408558:	2c10      	cmp	r4, #16
  40855a:	f04f 0001 	mov.w	r0, #1
  40855e:	4611      	mov	r1, r2
  408560:	46ce      	mov	lr, r9
  408562:	dcee      	bgt.n	408542 <_vfiprintf_r+0x77a>
  408564:	46f2      	mov	sl, lr
  408566:	4422      	add	r2, r4
  408568:	2807      	cmp	r0, #7
  40856a:	9211      	str	r2, [sp, #68]	; 0x44
  40856c:	f8ca 5000 	str.w	r5, [sl]
  408570:	f8ca 4004 	str.w	r4, [sl, #4]
  408574:	9010      	str	r0, [sp, #64]	; 0x40
  408576:	f300 8085 	bgt.w	408684 <_vfiprintf_r+0x8bc>
  40857a:	f10a 0a08 	add.w	sl, sl, #8
  40857e:	3001      	adds	r0, #1
  408580:	9905      	ldr	r1, [sp, #20]
  408582:	f8ca b000 	str.w	fp, [sl]
  408586:	440a      	add	r2, r1
  408588:	2807      	cmp	r0, #7
  40858a:	9211      	str	r2, [sp, #68]	; 0x44
  40858c:	f8ca 1004 	str.w	r1, [sl, #4]
  408590:	9010      	str	r0, [sp, #64]	; 0x40
  408592:	f340 8082 	ble.w	40869a <_vfiprintf_r+0x8d2>
  408596:	2a00      	cmp	r2, #0
  408598:	f040 8118 	bne.w	4087cc <_vfiprintf_r+0xa04>
  40859c:	9b02      	ldr	r3, [sp, #8]
  40859e:	9210      	str	r2, [sp, #64]	; 0x40
  4085a0:	0758      	lsls	r0, r3, #29
  4085a2:	d535      	bpl.n	408610 <_vfiprintf_r+0x848>
  4085a4:	9b08      	ldr	r3, [sp, #32]
  4085a6:	9901      	ldr	r1, [sp, #4]
  4085a8:	1a5c      	subs	r4, r3, r1
  4085aa:	2c00      	cmp	r4, #0
  4085ac:	f340 80e7 	ble.w	40877e <_vfiprintf_r+0x9b6>
  4085b0:	46ca      	mov	sl, r9
  4085b2:	2c10      	cmp	r4, #16
  4085b4:	f340 8218 	ble.w	4089e8 <_vfiprintf_r+0xc20>
  4085b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4085ba:	4e8f      	ldr	r6, [pc, #572]	; (4087f8 <_vfiprintf_r+0xa30>)
  4085bc:	9f06      	ldr	r7, [sp, #24]
  4085be:	f8dd b010 	ldr.w	fp, [sp, #16]
  4085c2:	2510      	movs	r5, #16
  4085c4:	e006      	b.n	4085d4 <_vfiprintf_r+0x80c>
  4085c6:	1c88      	adds	r0, r1, #2
  4085c8:	f10a 0a08 	add.w	sl, sl, #8
  4085cc:	4619      	mov	r1, r3
  4085ce:	3c10      	subs	r4, #16
  4085d0:	2c10      	cmp	r4, #16
  4085d2:	dd11      	ble.n	4085f8 <_vfiprintf_r+0x830>
  4085d4:	1c4b      	adds	r3, r1, #1
  4085d6:	3210      	adds	r2, #16
  4085d8:	2b07      	cmp	r3, #7
  4085da:	9211      	str	r2, [sp, #68]	; 0x44
  4085dc:	f8ca 6000 	str.w	r6, [sl]
  4085e0:	f8ca 5004 	str.w	r5, [sl, #4]
  4085e4:	9310      	str	r3, [sp, #64]	; 0x40
  4085e6:	ddee      	ble.n	4085c6 <_vfiprintf_r+0x7fe>
  4085e8:	bb42      	cbnz	r2, 40863c <_vfiprintf_r+0x874>
  4085ea:	3c10      	subs	r4, #16
  4085ec:	2c10      	cmp	r4, #16
  4085ee:	f04f 0001 	mov.w	r0, #1
  4085f2:	4611      	mov	r1, r2
  4085f4:	46ca      	mov	sl, r9
  4085f6:	dced      	bgt.n	4085d4 <_vfiprintf_r+0x80c>
  4085f8:	4422      	add	r2, r4
  4085fa:	2807      	cmp	r0, #7
  4085fc:	9211      	str	r2, [sp, #68]	; 0x44
  4085fe:	f8ca 6000 	str.w	r6, [sl]
  408602:	f8ca 4004 	str.w	r4, [sl, #4]
  408606:	9010      	str	r0, [sp, #64]	; 0x40
  408608:	dd51      	ble.n	4086ae <_vfiprintf_r+0x8e6>
  40860a:	2a00      	cmp	r2, #0
  40860c:	f040 819b 	bne.w	408946 <_vfiprintf_r+0xb7e>
  408610:	9b03      	ldr	r3, [sp, #12]
  408612:	9a08      	ldr	r2, [sp, #32]
  408614:	9901      	ldr	r1, [sp, #4]
  408616:	428a      	cmp	r2, r1
  408618:	bfac      	ite	ge
  40861a:	189b      	addge	r3, r3, r2
  40861c:	185b      	addlt	r3, r3, r1
  40861e:	9303      	str	r3, [sp, #12]
  408620:	e04e      	b.n	4086c0 <_vfiprintf_r+0x8f8>
  408622:	aa0f      	add	r2, sp, #60	; 0x3c
  408624:	4651      	mov	r1, sl
  408626:	4638      	mov	r0, r7
  408628:	f7ff fb8e 	bl	407d48 <__sprint_r.part.0>
  40862c:	2800      	cmp	r0, #0
  40862e:	f040 813f 	bne.w	4088b0 <_vfiprintf_r+0xae8>
  408632:	9910      	ldr	r1, [sp, #64]	; 0x40
  408634:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408636:	1c48      	adds	r0, r1, #1
  408638:	46ce      	mov	lr, r9
  40863a:	e77f      	b.n	40853c <_vfiprintf_r+0x774>
  40863c:	aa0f      	add	r2, sp, #60	; 0x3c
  40863e:	4659      	mov	r1, fp
  408640:	4638      	mov	r0, r7
  408642:	f7ff fb81 	bl	407d48 <__sprint_r.part.0>
  408646:	b960      	cbnz	r0, 408662 <_vfiprintf_r+0x89a>
  408648:	9910      	ldr	r1, [sp, #64]	; 0x40
  40864a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40864c:	1c48      	adds	r0, r1, #1
  40864e:	46ca      	mov	sl, r9
  408650:	e7bd      	b.n	4085ce <_vfiprintf_r+0x806>
  408652:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408654:	f8dd b010 	ldr.w	fp, [sp, #16]
  408658:	2b00      	cmp	r3, #0
  40865a:	f040 81d4 	bne.w	408a06 <_vfiprintf_r+0xc3e>
  40865e:	2300      	movs	r3, #0
  408660:	9310      	str	r3, [sp, #64]	; 0x40
  408662:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408666:	f013 0f01 	tst.w	r3, #1
  40866a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40866e:	d102      	bne.n	408676 <_vfiprintf_r+0x8ae>
  408670:	059a      	lsls	r2, r3, #22
  408672:	f140 80de 	bpl.w	408832 <_vfiprintf_r+0xa6a>
  408676:	065b      	lsls	r3, r3, #25
  408678:	f53f acb2 	bmi.w	407fe0 <_vfiprintf_r+0x218>
  40867c:	9803      	ldr	r0, [sp, #12]
  40867e:	b02d      	add	sp, #180	; 0xb4
  408680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408684:	2a00      	cmp	r2, #0
  408686:	f040 8106 	bne.w	408896 <_vfiprintf_r+0xace>
  40868a:	9a05      	ldr	r2, [sp, #20]
  40868c:	921d      	str	r2, [sp, #116]	; 0x74
  40868e:	2301      	movs	r3, #1
  408690:	9211      	str	r2, [sp, #68]	; 0x44
  408692:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  408696:	9310      	str	r3, [sp, #64]	; 0x40
  408698:	46ca      	mov	sl, r9
  40869a:	f10a 0a08 	add.w	sl, sl, #8
  40869e:	9b02      	ldr	r3, [sp, #8]
  4086a0:	0759      	lsls	r1, r3, #29
  4086a2:	d504      	bpl.n	4086ae <_vfiprintf_r+0x8e6>
  4086a4:	9b08      	ldr	r3, [sp, #32]
  4086a6:	9901      	ldr	r1, [sp, #4]
  4086a8:	1a5c      	subs	r4, r3, r1
  4086aa:	2c00      	cmp	r4, #0
  4086ac:	dc81      	bgt.n	4085b2 <_vfiprintf_r+0x7ea>
  4086ae:	9b03      	ldr	r3, [sp, #12]
  4086b0:	9908      	ldr	r1, [sp, #32]
  4086b2:	9801      	ldr	r0, [sp, #4]
  4086b4:	4281      	cmp	r1, r0
  4086b6:	bfac      	ite	ge
  4086b8:	185b      	addge	r3, r3, r1
  4086ba:	181b      	addlt	r3, r3, r0
  4086bc:	9303      	str	r3, [sp, #12]
  4086be:	bb72      	cbnz	r2, 40871e <_vfiprintf_r+0x956>
  4086c0:	2300      	movs	r3, #0
  4086c2:	9310      	str	r3, [sp, #64]	; 0x40
  4086c4:	46ca      	mov	sl, r9
  4086c6:	f7ff bbbc 	b.w	407e42 <_vfiprintf_r+0x7a>
  4086ca:	aa0f      	add	r2, sp, #60	; 0x3c
  4086cc:	9904      	ldr	r1, [sp, #16]
  4086ce:	4620      	mov	r0, r4
  4086d0:	f7ff fb3a 	bl	407d48 <__sprint_r.part.0>
  4086d4:	bb50      	cbnz	r0, 40872c <_vfiprintf_r+0x964>
  4086d6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4086d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4086da:	f101 0e01 	add.w	lr, r1, #1
  4086de:	46cc      	mov	ip, r9
  4086e0:	e548      	b.n	408174 <_vfiprintf_r+0x3ac>
  4086e2:	2a00      	cmp	r2, #0
  4086e4:	f040 8140 	bne.w	408968 <_vfiprintf_r+0xba0>
  4086e8:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4086ec:	2900      	cmp	r1, #0
  4086ee:	f000 811b 	beq.w	408928 <_vfiprintf_r+0xb60>
  4086f2:	2201      	movs	r2, #1
  4086f4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4086f8:	4610      	mov	r0, r2
  4086fa:	921d      	str	r2, [sp, #116]	; 0x74
  4086fc:	911c      	str	r1, [sp, #112]	; 0x70
  4086fe:	46ca      	mov	sl, r9
  408700:	4601      	mov	r1, r0
  408702:	f10a 0a08 	add.w	sl, sl, #8
  408706:	3001      	adds	r0, #1
  408708:	e507      	b.n	40811a <_vfiprintf_r+0x352>
  40870a:	9b02      	ldr	r3, [sp, #8]
  40870c:	2a01      	cmp	r2, #1
  40870e:	f000 8098 	beq.w	408842 <_vfiprintf_r+0xa7a>
  408712:	2a02      	cmp	r2, #2
  408714:	d10d      	bne.n	408732 <_vfiprintf_r+0x96a>
  408716:	9302      	str	r3, [sp, #8]
  408718:	2600      	movs	r6, #0
  40871a:	2700      	movs	r7, #0
  40871c:	e5b0      	b.n	408280 <_vfiprintf_r+0x4b8>
  40871e:	aa0f      	add	r2, sp, #60	; 0x3c
  408720:	9904      	ldr	r1, [sp, #16]
  408722:	9806      	ldr	r0, [sp, #24]
  408724:	f7ff fb10 	bl	407d48 <__sprint_r.part.0>
  408728:	2800      	cmp	r0, #0
  40872a:	d0c9      	beq.n	4086c0 <_vfiprintf_r+0x8f8>
  40872c:	f8dd b010 	ldr.w	fp, [sp, #16]
  408730:	e797      	b.n	408662 <_vfiprintf_r+0x89a>
  408732:	9302      	str	r3, [sp, #8]
  408734:	2600      	movs	r6, #0
  408736:	2700      	movs	r7, #0
  408738:	4649      	mov	r1, r9
  40873a:	e000      	b.n	40873e <_vfiprintf_r+0x976>
  40873c:	4659      	mov	r1, fp
  40873e:	08f2      	lsrs	r2, r6, #3
  408740:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  408744:	08f8      	lsrs	r0, r7, #3
  408746:	f006 0307 	and.w	r3, r6, #7
  40874a:	4607      	mov	r7, r0
  40874c:	4616      	mov	r6, r2
  40874e:	3330      	adds	r3, #48	; 0x30
  408750:	ea56 0207 	orrs.w	r2, r6, r7
  408754:	f801 3c01 	strb.w	r3, [r1, #-1]
  408758:	f101 3bff 	add.w	fp, r1, #4294967295
  40875c:	d1ee      	bne.n	40873c <_vfiprintf_r+0x974>
  40875e:	9a02      	ldr	r2, [sp, #8]
  408760:	07d6      	lsls	r6, r2, #31
  408762:	f57f ad9d 	bpl.w	4082a0 <_vfiprintf_r+0x4d8>
  408766:	2b30      	cmp	r3, #48	; 0x30
  408768:	f43f ad9a 	beq.w	4082a0 <_vfiprintf_r+0x4d8>
  40876c:	3902      	subs	r1, #2
  40876e:	2330      	movs	r3, #48	; 0x30
  408770:	f80b 3c01 	strb.w	r3, [fp, #-1]
  408774:	eba9 0301 	sub.w	r3, r9, r1
  408778:	9305      	str	r3, [sp, #20]
  40877a:	468b      	mov	fp, r1
  40877c:	e476      	b.n	40806c <_vfiprintf_r+0x2a4>
  40877e:	9b03      	ldr	r3, [sp, #12]
  408780:	9a08      	ldr	r2, [sp, #32]
  408782:	428a      	cmp	r2, r1
  408784:	bfac      	ite	ge
  408786:	189b      	addge	r3, r3, r2
  408788:	185b      	addlt	r3, r3, r1
  40878a:	9303      	str	r3, [sp, #12]
  40878c:	e798      	b.n	4086c0 <_vfiprintf_r+0x8f8>
  40878e:	2202      	movs	r2, #2
  408790:	e44d      	b.n	40802e <_vfiprintf_r+0x266>
  408792:	2f00      	cmp	r7, #0
  408794:	bf08      	it	eq
  408796:	2e0a      	cmpeq	r6, #10
  408798:	d352      	bcc.n	408840 <_vfiprintf_r+0xa78>
  40879a:	46cb      	mov	fp, r9
  40879c:	4630      	mov	r0, r6
  40879e:	4639      	mov	r1, r7
  4087a0:	220a      	movs	r2, #10
  4087a2:	2300      	movs	r3, #0
  4087a4:	f001 ff28 	bl	40a5f8 <__aeabi_uldivmod>
  4087a8:	3230      	adds	r2, #48	; 0x30
  4087aa:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4087ae:	4630      	mov	r0, r6
  4087b0:	4639      	mov	r1, r7
  4087b2:	2300      	movs	r3, #0
  4087b4:	220a      	movs	r2, #10
  4087b6:	f001 ff1f 	bl	40a5f8 <__aeabi_uldivmod>
  4087ba:	4606      	mov	r6, r0
  4087bc:	460f      	mov	r7, r1
  4087be:	ea56 0307 	orrs.w	r3, r6, r7
  4087c2:	d1eb      	bne.n	40879c <_vfiprintf_r+0x9d4>
  4087c4:	e56c      	b.n	4082a0 <_vfiprintf_r+0x4d8>
  4087c6:	9405      	str	r4, [sp, #20]
  4087c8:	46cb      	mov	fp, r9
  4087ca:	e44f      	b.n	40806c <_vfiprintf_r+0x2a4>
  4087cc:	aa0f      	add	r2, sp, #60	; 0x3c
  4087ce:	9904      	ldr	r1, [sp, #16]
  4087d0:	9806      	ldr	r0, [sp, #24]
  4087d2:	f7ff fab9 	bl	407d48 <__sprint_r.part.0>
  4087d6:	2800      	cmp	r0, #0
  4087d8:	d1a8      	bne.n	40872c <_vfiprintf_r+0x964>
  4087da:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4087dc:	46ca      	mov	sl, r9
  4087de:	e75e      	b.n	40869e <_vfiprintf_r+0x8d6>
  4087e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4087e2:	9904      	ldr	r1, [sp, #16]
  4087e4:	9806      	ldr	r0, [sp, #24]
  4087e6:	f7ff faaf 	bl	407d48 <__sprint_r.part.0>
  4087ea:	2800      	cmp	r0, #0
  4087ec:	d19e      	bne.n	40872c <_vfiprintf_r+0x964>
  4087ee:	46ca      	mov	sl, r9
  4087f0:	f7ff bbc0 	b.w	407f74 <_vfiprintf_r+0x1ac>
  4087f4:	0040afbc 	.word	0x0040afbc
  4087f8:	0040afac 	.word	0x0040afac
  4087fc:	3104      	adds	r1, #4
  4087fe:	6816      	ldr	r6, [r2, #0]
  408800:	9107      	str	r1, [sp, #28]
  408802:	2201      	movs	r2, #1
  408804:	2700      	movs	r7, #0
  408806:	e412      	b.n	40802e <_vfiprintf_r+0x266>
  408808:	9807      	ldr	r0, [sp, #28]
  40880a:	4601      	mov	r1, r0
  40880c:	3104      	adds	r1, #4
  40880e:	6806      	ldr	r6, [r0, #0]
  408810:	9107      	str	r1, [sp, #28]
  408812:	2700      	movs	r7, #0
  408814:	e40b      	b.n	40802e <_vfiprintf_r+0x266>
  408816:	680e      	ldr	r6, [r1, #0]
  408818:	3104      	adds	r1, #4
  40881a:	9107      	str	r1, [sp, #28]
  40881c:	2700      	movs	r7, #0
  40881e:	e591      	b.n	408344 <_vfiprintf_r+0x57c>
  408820:	9907      	ldr	r1, [sp, #28]
  408822:	680e      	ldr	r6, [r1, #0]
  408824:	460a      	mov	r2, r1
  408826:	17f7      	asrs	r7, r6, #31
  408828:	3204      	adds	r2, #4
  40882a:	9207      	str	r2, [sp, #28]
  40882c:	4630      	mov	r0, r6
  40882e:	4639      	mov	r1, r7
  408830:	e50f      	b.n	408252 <_vfiprintf_r+0x48a>
  408832:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408836:	f000 fe7f 	bl	409538 <__retarget_lock_release_recursive>
  40883a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40883e:	e71a      	b.n	408676 <_vfiprintf_r+0x8ae>
  408840:	9b02      	ldr	r3, [sp, #8]
  408842:	9302      	str	r3, [sp, #8]
  408844:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  408848:	3630      	adds	r6, #48	; 0x30
  40884a:	2301      	movs	r3, #1
  40884c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  408850:	9305      	str	r3, [sp, #20]
  408852:	e40b      	b.n	40806c <_vfiprintf_r+0x2a4>
  408854:	aa0f      	add	r2, sp, #60	; 0x3c
  408856:	9904      	ldr	r1, [sp, #16]
  408858:	9806      	ldr	r0, [sp, #24]
  40885a:	f7ff fa75 	bl	407d48 <__sprint_r.part.0>
  40885e:	2800      	cmp	r0, #0
  408860:	f47f af64 	bne.w	40872c <_vfiprintf_r+0x964>
  408864:	9910      	ldr	r1, [sp, #64]	; 0x40
  408866:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408868:	1c48      	adds	r0, r1, #1
  40886a:	46ca      	mov	sl, r9
  40886c:	e651      	b.n	408512 <_vfiprintf_r+0x74a>
  40886e:	aa0f      	add	r2, sp, #60	; 0x3c
  408870:	9904      	ldr	r1, [sp, #16]
  408872:	9806      	ldr	r0, [sp, #24]
  408874:	f7ff fa68 	bl	407d48 <__sprint_r.part.0>
  408878:	2800      	cmp	r0, #0
  40887a:	f47f af57 	bne.w	40872c <_vfiprintf_r+0x964>
  40887e:	9910      	ldr	r1, [sp, #64]	; 0x40
  408880:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408882:	1c48      	adds	r0, r1, #1
  408884:	46ca      	mov	sl, r9
  408886:	e448      	b.n	40811a <_vfiprintf_r+0x352>
  408888:	2a00      	cmp	r2, #0
  40888a:	f040 8091 	bne.w	4089b0 <_vfiprintf_r+0xbe8>
  40888e:	2001      	movs	r0, #1
  408890:	4611      	mov	r1, r2
  408892:	46ca      	mov	sl, r9
  408894:	e641      	b.n	40851a <_vfiprintf_r+0x752>
  408896:	aa0f      	add	r2, sp, #60	; 0x3c
  408898:	9904      	ldr	r1, [sp, #16]
  40889a:	9806      	ldr	r0, [sp, #24]
  40889c:	f7ff fa54 	bl	407d48 <__sprint_r.part.0>
  4088a0:	2800      	cmp	r0, #0
  4088a2:	f47f af43 	bne.w	40872c <_vfiprintf_r+0x964>
  4088a6:	9810      	ldr	r0, [sp, #64]	; 0x40
  4088a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4088aa:	3001      	adds	r0, #1
  4088ac:	46ca      	mov	sl, r9
  4088ae:	e667      	b.n	408580 <_vfiprintf_r+0x7b8>
  4088b0:	46d3      	mov	fp, sl
  4088b2:	e6d6      	b.n	408662 <_vfiprintf_r+0x89a>
  4088b4:	9e07      	ldr	r6, [sp, #28]
  4088b6:	3607      	adds	r6, #7
  4088b8:	f026 0207 	bic.w	r2, r6, #7
  4088bc:	f102 0108 	add.w	r1, r2, #8
  4088c0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4088c4:	9107      	str	r1, [sp, #28]
  4088c6:	2201      	movs	r2, #1
  4088c8:	f7ff bbb1 	b.w	40802e <_vfiprintf_r+0x266>
  4088cc:	9e07      	ldr	r6, [sp, #28]
  4088ce:	3607      	adds	r6, #7
  4088d0:	f026 0607 	bic.w	r6, r6, #7
  4088d4:	e9d6 0100 	ldrd	r0, r1, [r6]
  4088d8:	f106 0208 	add.w	r2, r6, #8
  4088dc:	9207      	str	r2, [sp, #28]
  4088de:	4606      	mov	r6, r0
  4088e0:	460f      	mov	r7, r1
  4088e2:	e4b6      	b.n	408252 <_vfiprintf_r+0x48a>
  4088e4:	9e07      	ldr	r6, [sp, #28]
  4088e6:	3607      	adds	r6, #7
  4088e8:	f026 0207 	bic.w	r2, r6, #7
  4088ec:	f102 0108 	add.w	r1, r2, #8
  4088f0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4088f4:	9107      	str	r1, [sp, #28]
  4088f6:	2200      	movs	r2, #0
  4088f8:	f7ff bb99 	b.w	40802e <_vfiprintf_r+0x266>
  4088fc:	9e07      	ldr	r6, [sp, #28]
  4088fe:	3607      	adds	r6, #7
  408900:	f026 0107 	bic.w	r1, r6, #7
  408904:	f101 0008 	add.w	r0, r1, #8
  408908:	9007      	str	r0, [sp, #28]
  40890a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40890e:	e519      	b.n	408344 <_vfiprintf_r+0x57c>
  408910:	46cb      	mov	fp, r9
  408912:	f7ff bbab 	b.w	40806c <_vfiprintf_r+0x2a4>
  408916:	252d      	movs	r5, #45	; 0x2d
  408918:	4276      	negs	r6, r6
  40891a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40891e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408922:	2201      	movs	r2, #1
  408924:	f7ff bb88 	b.w	408038 <_vfiprintf_r+0x270>
  408928:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40892a:	b9b3      	cbnz	r3, 40895a <_vfiprintf_r+0xb92>
  40892c:	4611      	mov	r1, r2
  40892e:	2001      	movs	r0, #1
  408930:	46ca      	mov	sl, r9
  408932:	e5f2      	b.n	40851a <_vfiprintf_r+0x752>
  408934:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408938:	f000 fdfe 	bl	409538 <__retarget_lock_release_recursive>
  40893c:	f04f 33ff 	mov.w	r3, #4294967295
  408940:	9303      	str	r3, [sp, #12]
  408942:	f7ff bb50 	b.w	407fe6 <_vfiprintf_r+0x21e>
  408946:	aa0f      	add	r2, sp, #60	; 0x3c
  408948:	9904      	ldr	r1, [sp, #16]
  40894a:	9806      	ldr	r0, [sp, #24]
  40894c:	f7ff f9fc 	bl	407d48 <__sprint_r.part.0>
  408950:	2800      	cmp	r0, #0
  408952:	f47f aeeb 	bne.w	40872c <_vfiprintf_r+0x964>
  408956:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408958:	e6a9      	b.n	4086ae <_vfiprintf_r+0x8e6>
  40895a:	ab0e      	add	r3, sp, #56	; 0x38
  40895c:	2202      	movs	r2, #2
  40895e:	931c      	str	r3, [sp, #112]	; 0x70
  408960:	921d      	str	r2, [sp, #116]	; 0x74
  408962:	2001      	movs	r0, #1
  408964:	46ca      	mov	sl, r9
  408966:	e5d0      	b.n	40850a <_vfiprintf_r+0x742>
  408968:	aa0f      	add	r2, sp, #60	; 0x3c
  40896a:	9904      	ldr	r1, [sp, #16]
  40896c:	9806      	ldr	r0, [sp, #24]
  40896e:	f7ff f9eb 	bl	407d48 <__sprint_r.part.0>
  408972:	2800      	cmp	r0, #0
  408974:	f47f aeda 	bne.w	40872c <_vfiprintf_r+0x964>
  408978:	9910      	ldr	r1, [sp, #64]	; 0x40
  40897a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40897c:	1c48      	adds	r0, r1, #1
  40897e:	46ca      	mov	sl, r9
  408980:	e5a4      	b.n	4084cc <_vfiprintf_r+0x704>
  408982:	9a07      	ldr	r2, [sp, #28]
  408984:	9903      	ldr	r1, [sp, #12]
  408986:	6813      	ldr	r3, [r2, #0]
  408988:	17cd      	asrs	r5, r1, #31
  40898a:	4608      	mov	r0, r1
  40898c:	3204      	adds	r2, #4
  40898e:	4629      	mov	r1, r5
  408990:	9207      	str	r2, [sp, #28]
  408992:	e9c3 0100 	strd	r0, r1, [r3]
  408996:	f7ff ba54 	b.w	407e42 <_vfiprintf_r+0x7a>
  40899a:	4658      	mov	r0, fp
  40899c:	9607      	str	r6, [sp, #28]
  40899e:	9302      	str	r3, [sp, #8]
  4089a0:	f001 fbee 	bl	40a180 <strlen>
  4089a4:	2400      	movs	r4, #0
  4089a6:	9005      	str	r0, [sp, #20]
  4089a8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4089ac:	f7ff bb5e 	b.w	40806c <_vfiprintf_r+0x2a4>
  4089b0:	aa0f      	add	r2, sp, #60	; 0x3c
  4089b2:	9904      	ldr	r1, [sp, #16]
  4089b4:	9806      	ldr	r0, [sp, #24]
  4089b6:	f7ff f9c7 	bl	407d48 <__sprint_r.part.0>
  4089ba:	2800      	cmp	r0, #0
  4089bc:	f47f aeb6 	bne.w	40872c <_vfiprintf_r+0x964>
  4089c0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4089c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4089c4:	1c48      	adds	r0, r1, #1
  4089c6:	46ca      	mov	sl, r9
  4089c8:	e5a7      	b.n	40851a <_vfiprintf_r+0x752>
  4089ca:	9910      	ldr	r1, [sp, #64]	; 0x40
  4089cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4089ce:	4e20      	ldr	r6, [pc, #128]	; (408a50 <_vfiprintf_r+0xc88>)
  4089d0:	3101      	adds	r1, #1
  4089d2:	f7ff bb90 	b.w	4080f6 <_vfiprintf_r+0x32e>
  4089d6:	2c06      	cmp	r4, #6
  4089d8:	bf28      	it	cs
  4089da:	2406      	movcs	r4, #6
  4089dc:	9405      	str	r4, [sp, #20]
  4089de:	9607      	str	r6, [sp, #28]
  4089e0:	9401      	str	r4, [sp, #4]
  4089e2:	f8df b070 	ldr.w	fp, [pc, #112]	; 408a54 <_vfiprintf_r+0xc8c>
  4089e6:	e4d5      	b.n	408394 <_vfiprintf_r+0x5cc>
  4089e8:	9810      	ldr	r0, [sp, #64]	; 0x40
  4089ea:	4e19      	ldr	r6, [pc, #100]	; (408a50 <_vfiprintf_r+0xc88>)
  4089ec:	3001      	adds	r0, #1
  4089ee:	e603      	b.n	4085f8 <_vfiprintf_r+0x830>
  4089f0:	9405      	str	r4, [sp, #20]
  4089f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4089f6:	9607      	str	r6, [sp, #28]
  4089f8:	9302      	str	r3, [sp, #8]
  4089fa:	4604      	mov	r4, r0
  4089fc:	f7ff bb36 	b.w	40806c <_vfiprintf_r+0x2a4>
  408a00:	4686      	mov	lr, r0
  408a02:	f7ff bbce 	b.w	4081a2 <_vfiprintf_r+0x3da>
  408a06:	9806      	ldr	r0, [sp, #24]
  408a08:	aa0f      	add	r2, sp, #60	; 0x3c
  408a0a:	4659      	mov	r1, fp
  408a0c:	f7ff f99c 	bl	407d48 <__sprint_r.part.0>
  408a10:	2800      	cmp	r0, #0
  408a12:	f43f ae24 	beq.w	40865e <_vfiprintf_r+0x896>
  408a16:	e624      	b.n	408662 <_vfiprintf_r+0x89a>
  408a18:	9907      	ldr	r1, [sp, #28]
  408a1a:	f898 2001 	ldrb.w	r2, [r8, #1]
  408a1e:	680c      	ldr	r4, [r1, #0]
  408a20:	3104      	adds	r1, #4
  408a22:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  408a26:	46b8      	mov	r8, r7
  408a28:	9107      	str	r1, [sp, #28]
  408a2a:	f7ff ba3f 	b.w	407eac <_vfiprintf_r+0xe4>
  408a2e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408a32:	e43c      	b.n	4082ae <_vfiprintf_r+0x4e6>
  408a34:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408a38:	e521      	b.n	40847e <_vfiprintf_r+0x6b6>
  408a3a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408a3e:	f7ff bbf4 	b.w	40822a <_vfiprintf_r+0x462>
  408a42:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408a46:	e491      	b.n	40836c <_vfiprintf_r+0x5a4>
  408a48:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408a4c:	e469      	b.n	408322 <_vfiprintf_r+0x55a>
  408a4e:	bf00      	nop
  408a50:	0040afac 	.word	0x0040afac
  408a54:	0040afa4 	.word	0x0040afa4

00408a58 <__sbprintf>:
  408a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408a5c:	460c      	mov	r4, r1
  408a5e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  408a62:	8989      	ldrh	r1, [r1, #12]
  408a64:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408a66:	89e5      	ldrh	r5, [r4, #14]
  408a68:	9619      	str	r6, [sp, #100]	; 0x64
  408a6a:	f021 0102 	bic.w	r1, r1, #2
  408a6e:	4606      	mov	r6, r0
  408a70:	69e0      	ldr	r0, [r4, #28]
  408a72:	f8ad 100c 	strh.w	r1, [sp, #12]
  408a76:	4617      	mov	r7, r2
  408a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
  408a7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  408a7e:	f8ad 500e 	strh.w	r5, [sp, #14]
  408a82:	4698      	mov	r8, r3
  408a84:	ad1a      	add	r5, sp, #104	; 0x68
  408a86:	2300      	movs	r3, #0
  408a88:	9007      	str	r0, [sp, #28]
  408a8a:	a816      	add	r0, sp, #88	; 0x58
  408a8c:	9209      	str	r2, [sp, #36]	; 0x24
  408a8e:	9306      	str	r3, [sp, #24]
  408a90:	9500      	str	r5, [sp, #0]
  408a92:	9504      	str	r5, [sp, #16]
  408a94:	9102      	str	r1, [sp, #8]
  408a96:	9105      	str	r1, [sp, #20]
  408a98:	f000 fd48 	bl	40952c <__retarget_lock_init_recursive>
  408a9c:	4643      	mov	r3, r8
  408a9e:	463a      	mov	r2, r7
  408aa0:	4669      	mov	r1, sp
  408aa2:	4630      	mov	r0, r6
  408aa4:	f7ff f990 	bl	407dc8 <_vfiprintf_r>
  408aa8:	1e05      	subs	r5, r0, #0
  408aaa:	db07      	blt.n	408abc <__sbprintf+0x64>
  408aac:	4630      	mov	r0, r6
  408aae:	4669      	mov	r1, sp
  408ab0:	f000 f928 	bl	408d04 <_fflush_r>
  408ab4:	2800      	cmp	r0, #0
  408ab6:	bf18      	it	ne
  408ab8:	f04f 35ff 	movne.w	r5, #4294967295
  408abc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  408ac0:	065b      	lsls	r3, r3, #25
  408ac2:	d503      	bpl.n	408acc <__sbprintf+0x74>
  408ac4:	89a3      	ldrh	r3, [r4, #12]
  408ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408aca:	81a3      	strh	r3, [r4, #12]
  408acc:	9816      	ldr	r0, [sp, #88]	; 0x58
  408ace:	f000 fd2f 	bl	409530 <__retarget_lock_close_recursive>
  408ad2:	4628      	mov	r0, r5
  408ad4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  408ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408adc <__swsetup_r>:
  408adc:	b538      	push	{r3, r4, r5, lr}
  408ade:	4b30      	ldr	r3, [pc, #192]	; (408ba0 <__swsetup_r+0xc4>)
  408ae0:	681b      	ldr	r3, [r3, #0]
  408ae2:	4605      	mov	r5, r0
  408ae4:	460c      	mov	r4, r1
  408ae6:	b113      	cbz	r3, 408aee <__swsetup_r+0x12>
  408ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408aea:	2a00      	cmp	r2, #0
  408aec:	d038      	beq.n	408b60 <__swsetup_r+0x84>
  408aee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408af2:	b293      	uxth	r3, r2
  408af4:	0718      	lsls	r0, r3, #28
  408af6:	d50c      	bpl.n	408b12 <__swsetup_r+0x36>
  408af8:	6920      	ldr	r0, [r4, #16]
  408afa:	b1a8      	cbz	r0, 408b28 <__swsetup_r+0x4c>
  408afc:	f013 0201 	ands.w	r2, r3, #1
  408b00:	d01e      	beq.n	408b40 <__swsetup_r+0x64>
  408b02:	6963      	ldr	r3, [r4, #20]
  408b04:	2200      	movs	r2, #0
  408b06:	425b      	negs	r3, r3
  408b08:	61a3      	str	r3, [r4, #24]
  408b0a:	60a2      	str	r2, [r4, #8]
  408b0c:	b1f0      	cbz	r0, 408b4c <__swsetup_r+0x70>
  408b0e:	2000      	movs	r0, #0
  408b10:	bd38      	pop	{r3, r4, r5, pc}
  408b12:	06d9      	lsls	r1, r3, #27
  408b14:	d53c      	bpl.n	408b90 <__swsetup_r+0xb4>
  408b16:	0758      	lsls	r0, r3, #29
  408b18:	d426      	bmi.n	408b68 <__swsetup_r+0x8c>
  408b1a:	6920      	ldr	r0, [r4, #16]
  408b1c:	f042 0308 	orr.w	r3, r2, #8
  408b20:	81a3      	strh	r3, [r4, #12]
  408b22:	b29b      	uxth	r3, r3
  408b24:	2800      	cmp	r0, #0
  408b26:	d1e9      	bne.n	408afc <__swsetup_r+0x20>
  408b28:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408b2c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408b30:	d0e4      	beq.n	408afc <__swsetup_r+0x20>
  408b32:	4628      	mov	r0, r5
  408b34:	4621      	mov	r1, r4
  408b36:	f000 fd2f 	bl	409598 <__smakebuf_r>
  408b3a:	89a3      	ldrh	r3, [r4, #12]
  408b3c:	6920      	ldr	r0, [r4, #16]
  408b3e:	e7dd      	b.n	408afc <__swsetup_r+0x20>
  408b40:	0799      	lsls	r1, r3, #30
  408b42:	bf58      	it	pl
  408b44:	6962      	ldrpl	r2, [r4, #20]
  408b46:	60a2      	str	r2, [r4, #8]
  408b48:	2800      	cmp	r0, #0
  408b4a:	d1e0      	bne.n	408b0e <__swsetup_r+0x32>
  408b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408b50:	061a      	lsls	r2, r3, #24
  408b52:	d5dd      	bpl.n	408b10 <__swsetup_r+0x34>
  408b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408b58:	81a3      	strh	r3, [r4, #12]
  408b5a:	f04f 30ff 	mov.w	r0, #4294967295
  408b5e:	bd38      	pop	{r3, r4, r5, pc}
  408b60:	4618      	mov	r0, r3
  408b62:	f000 f927 	bl	408db4 <__sinit>
  408b66:	e7c2      	b.n	408aee <__swsetup_r+0x12>
  408b68:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408b6a:	b151      	cbz	r1, 408b82 <__swsetup_r+0xa6>
  408b6c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408b70:	4299      	cmp	r1, r3
  408b72:	d004      	beq.n	408b7e <__swsetup_r+0xa2>
  408b74:	4628      	mov	r0, r5
  408b76:	f000 fa43 	bl	409000 <_free_r>
  408b7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408b7e:	2300      	movs	r3, #0
  408b80:	6323      	str	r3, [r4, #48]	; 0x30
  408b82:	2300      	movs	r3, #0
  408b84:	6920      	ldr	r0, [r4, #16]
  408b86:	6063      	str	r3, [r4, #4]
  408b88:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  408b8c:	6020      	str	r0, [r4, #0]
  408b8e:	e7c5      	b.n	408b1c <__swsetup_r+0x40>
  408b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  408b94:	2309      	movs	r3, #9
  408b96:	602b      	str	r3, [r5, #0]
  408b98:	f04f 30ff 	mov.w	r0, #4294967295
  408b9c:	81a2      	strh	r2, [r4, #12]
  408b9e:	bd38      	pop	{r3, r4, r5, pc}
  408ba0:	204000f0 	.word	0x204000f0

00408ba4 <register_fini>:
  408ba4:	4b02      	ldr	r3, [pc, #8]	; (408bb0 <register_fini+0xc>)
  408ba6:	b113      	cbz	r3, 408bae <register_fini+0xa>
  408ba8:	4802      	ldr	r0, [pc, #8]	; (408bb4 <register_fini+0x10>)
  408baa:	f000 b805 	b.w	408bb8 <atexit>
  408bae:	4770      	bx	lr
  408bb0:	00000000 	.word	0x00000000
  408bb4:	00408e25 	.word	0x00408e25

00408bb8 <atexit>:
  408bb8:	2300      	movs	r3, #0
  408bba:	4601      	mov	r1, r0
  408bbc:	461a      	mov	r2, r3
  408bbe:	4618      	mov	r0, r3
  408bc0:	f001 bbf2 	b.w	40a3a8 <__register_exitproc>

00408bc4 <__sflush_r>:
  408bc4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  408bc8:	b29a      	uxth	r2, r3
  408bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408bce:	460d      	mov	r5, r1
  408bd0:	0711      	lsls	r1, r2, #28
  408bd2:	4680      	mov	r8, r0
  408bd4:	d43a      	bmi.n	408c4c <__sflush_r+0x88>
  408bd6:	686a      	ldr	r2, [r5, #4]
  408bd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  408bdc:	2a00      	cmp	r2, #0
  408bde:	81ab      	strh	r3, [r5, #12]
  408be0:	dd6f      	ble.n	408cc2 <__sflush_r+0xfe>
  408be2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408be4:	2c00      	cmp	r4, #0
  408be6:	d049      	beq.n	408c7c <__sflush_r+0xb8>
  408be8:	2200      	movs	r2, #0
  408bea:	b29b      	uxth	r3, r3
  408bec:	f8d8 6000 	ldr.w	r6, [r8]
  408bf0:	f8c8 2000 	str.w	r2, [r8]
  408bf4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  408bf8:	d067      	beq.n	408cca <__sflush_r+0x106>
  408bfa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  408bfc:	075f      	lsls	r7, r3, #29
  408bfe:	d505      	bpl.n	408c0c <__sflush_r+0x48>
  408c00:	6869      	ldr	r1, [r5, #4]
  408c02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  408c04:	1a52      	subs	r2, r2, r1
  408c06:	b10b      	cbz	r3, 408c0c <__sflush_r+0x48>
  408c08:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  408c0a:	1ad2      	subs	r2, r2, r3
  408c0c:	2300      	movs	r3, #0
  408c0e:	69e9      	ldr	r1, [r5, #28]
  408c10:	4640      	mov	r0, r8
  408c12:	47a0      	blx	r4
  408c14:	1c44      	adds	r4, r0, #1
  408c16:	d03c      	beq.n	408c92 <__sflush_r+0xce>
  408c18:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408c1c:	692a      	ldr	r2, [r5, #16]
  408c1e:	602a      	str	r2, [r5, #0]
  408c20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  408c24:	2200      	movs	r2, #0
  408c26:	81ab      	strh	r3, [r5, #12]
  408c28:	04db      	lsls	r3, r3, #19
  408c2a:	606a      	str	r2, [r5, #4]
  408c2c:	d447      	bmi.n	408cbe <__sflush_r+0xfa>
  408c2e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408c30:	f8c8 6000 	str.w	r6, [r8]
  408c34:	b311      	cbz	r1, 408c7c <__sflush_r+0xb8>
  408c36:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408c3a:	4299      	cmp	r1, r3
  408c3c:	d002      	beq.n	408c44 <__sflush_r+0x80>
  408c3e:	4640      	mov	r0, r8
  408c40:	f000 f9de 	bl	409000 <_free_r>
  408c44:	2000      	movs	r0, #0
  408c46:	6328      	str	r0, [r5, #48]	; 0x30
  408c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408c4c:	692e      	ldr	r6, [r5, #16]
  408c4e:	b1ae      	cbz	r6, 408c7c <__sflush_r+0xb8>
  408c50:	682c      	ldr	r4, [r5, #0]
  408c52:	602e      	str	r6, [r5, #0]
  408c54:	0791      	lsls	r1, r2, #30
  408c56:	bf0c      	ite	eq
  408c58:	696b      	ldreq	r3, [r5, #20]
  408c5a:	2300      	movne	r3, #0
  408c5c:	1ba4      	subs	r4, r4, r6
  408c5e:	60ab      	str	r3, [r5, #8]
  408c60:	e00a      	b.n	408c78 <__sflush_r+0xb4>
  408c62:	4623      	mov	r3, r4
  408c64:	4632      	mov	r2, r6
  408c66:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408c68:	69e9      	ldr	r1, [r5, #28]
  408c6a:	4640      	mov	r0, r8
  408c6c:	47b8      	blx	r7
  408c6e:	2800      	cmp	r0, #0
  408c70:	eba4 0400 	sub.w	r4, r4, r0
  408c74:	4406      	add	r6, r0
  408c76:	dd04      	ble.n	408c82 <__sflush_r+0xbe>
  408c78:	2c00      	cmp	r4, #0
  408c7a:	dcf2      	bgt.n	408c62 <__sflush_r+0x9e>
  408c7c:	2000      	movs	r0, #0
  408c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408c82:	89ab      	ldrh	r3, [r5, #12]
  408c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408c88:	81ab      	strh	r3, [r5, #12]
  408c8a:	f04f 30ff 	mov.w	r0, #4294967295
  408c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408c92:	f8d8 4000 	ldr.w	r4, [r8]
  408c96:	2c1d      	cmp	r4, #29
  408c98:	d8f3      	bhi.n	408c82 <__sflush_r+0xbe>
  408c9a:	4b19      	ldr	r3, [pc, #100]	; (408d00 <__sflush_r+0x13c>)
  408c9c:	40e3      	lsrs	r3, r4
  408c9e:	43db      	mvns	r3, r3
  408ca0:	f013 0301 	ands.w	r3, r3, #1
  408ca4:	d1ed      	bne.n	408c82 <__sflush_r+0xbe>
  408ca6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  408caa:	606b      	str	r3, [r5, #4]
  408cac:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  408cb0:	6929      	ldr	r1, [r5, #16]
  408cb2:	81ab      	strh	r3, [r5, #12]
  408cb4:	04da      	lsls	r2, r3, #19
  408cb6:	6029      	str	r1, [r5, #0]
  408cb8:	d5b9      	bpl.n	408c2e <__sflush_r+0x6a>
  408cba:	2c00      	cmp	r4, #0
  408cbc:	d1b7      	bne.n	408c2e <__sflush_r+0x6a>
  408cbe:	6528      	str	r0, [r5, #80]	; 0x50
  408cc0:	e7b5      	b.n	408c2e <__sflush_r+0x6a>
  408cc2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  408cc4:	2a00      	cmp	r2, #0
  408cc6:	dc8c      	bgt.n	408be2 <__sflush_r+0x1e>
  408cc8:	e7d8      	b.n	408c7c <__sflush_r+0xb8>
  408cca:	2301      	movs	r3, #1
  408ccc:	69e9      	ldr	r1, [r5, #28]
  408cce:	4640      	mov	r0, r8
  408cd0:	47a0      	blx	r4
  408cd2:	1c43      	adds	r3, r0, #1
  408cd4:	4602      	mov	r2, r0
  408cd6:	d002      	beq.n	408cde <__sflush_r+0x11a>
  408cd8:	89ab      	ldrh	r3, [r5, #12]
  408cda:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408cdc:	e78e      	b.n	408bfc <__sflush_r+0x38>
  408cde:	f8d8 3000 	ldr.w	r3, [r8]
  408ce2:	2b00      	cmp	r3, #0
  408ce4:	d0f8      	beq.n	408cd8 <__sflush_r+0x114>
  408ce6:	2b1d      	cmp	r3, #29
  408ce8:	d001      	beq.n	408cee <__sflush_r+0x12a>
  408cea:	2b16      	cmp	r3, #22
  408cec:	d102      	bne.n	408cf4 <__sflush_r+0x130>
  408cee:	f8c8 6000 	str.w	r6, [r8]
  408cf2:	e7c3      	b.n	408c7c <__sflush_r+0xb8>
  408cf4:	89ab      	ldrh	r3, [r5, #12]
  408cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408cfa:	81ab      	strh	r3, [r5, #12]
  408cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408d00:	20400001 	.word	0x20400001

00408d04 <_fflush_r>:
  408d04:	b538      	push	{r3, r4, r5, lr}
  408d06:	460d      	mov	r5, r1
  408d08:	4604      	mov	r4, r0
  408d0a:	b108      	cbz	r0, 408d10 <_fflush_r+0xc>
  408d0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408d0e:	b1bb      	cbz	r3, 408d40 <_fflush_r+0x3c>
  408d10:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  408d14:	b188      	cbz	r0, 408d3a <_fflush_r+0x36>
  408d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408d18:	07db      	lsls	r3, r3, #31
  408d1a:	d401      	bmi.n	408d20 <_fflush_r+0x1c>
  408d1c:	0581      	lsls	r1, r0, #22
  408d1e:	d517      	bpl.n	408d50 <_fflush_r+0x4c>
  408d20:	4620      	mov	r0, r4
  408d22:	4629      	mov	r1, r5
  408d24:	f7ff ff4e 	bl	408bc4 <__sflush_r>
  408d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408d2a:	07da      	lsls	r2, r3, #31
  408d2c:	4604      	mov	r4, r0
  408d2e:	d402      	bmi.n	408d36 <_fflush_r+0x32>
  408d30:	89ab      	ldrh	r3, [r5, #12]
  408d32:	059b      	lsls	r3, r3, #22
  408d34:	d507      	bpl.n	408d46 <_fflush_r+0x42>
  408d36:	4620      	mov	r0, r4
  408d38:	bd38      	pop	{r3, r4, r5, pc}
  408d3a:	4604      	mov	r4, r0
  408d3c:	4620      	mov	r0, r4
  408d3e:	bd38      	pop	{r3, r4, r5, pc}
  408d40:	f000 f838 	bl	408db4 <__sinit>
  408d44:	e7e4      	b.n	408d10 <_fflush_r+0xc>
  408d46:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408d48:	f000 fbf6 	bl	409538 <__retarget_lock_release_recursive>
  408d4c:	4620      	mov	r0, r4
  408d4e:	bd38      	pop	{r3, r4, r5, pc}
  408d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408d52:	f000 fbef 	bl	409534 <__retarget_lock_acquire_recursive>
  408d56:	e7e3      	b.n	408d20 <_fflush_r+0x1c>

00408d58 <_cleanup_r>:
  408d58:	4901      	ldr	r1, [pc, #4]	; (408d60 <_cleanup_r+0x8>)
  408d5a:	f000 bbaf 	b.w	4094bc <_fwalk_reent>
  408d5e:	bf00      	nop
  408d60:	0040a491 	.word	0x0040a491

00408d64 <std.isra.0>:
  408d64:	b510      	push	{r4, lr}
  408d66:	2300      	movs	r3, #0
  408d68:	4604      	mov	r4, r0
  408d6a:	8181      	strh	r1, [r0, #12]
  408d6c:	81c2      	strh	r2, [r0, #14]
  408d6e:	6003      	str	r3, [r0, #0]
  408d70:	6043      	str	r3, [r0, #4]
  408d72:	6083      	str	r3, [r0, #8]
  408d74:	6643      	str	r3, [r0, #100]	; 0x64
  408d76:	6103      	str	r3, [r0, #16]
  408d78:	6143      	str	r3, [r0, #20]
  408d7a:	6183      	str	r3, [r0, #24]
  408d7c:	4619      	mov	r1, r3
  408d7e:	2208      	movs	r2, #8
  408d80:	305c      	adds	r0, #92	; 0x5c
  408d82:	f7fe fec3 	bl	407b0c <memset>
  408d86:	4807      	ldr	r0, [pc, #28]	; (408da4 <std.isra.0+0x40>)
  408d88:	4907      	ldr	r1, [pc, #28]	; (408da8 <std.isra.0+0x44>)
  408d8a:	4a08      	ldr	r2, [pc, #32]	; (408dac <std.isra.0+0x48>)
  408d8c:	4b08      	ldr	r3, [pc, #32]	; (408db0 <std.isra.0+0x4c>)
  408d8e:	6220      	str	r0, [r4, #32]
  408d90:	61e4      	str	r4, [r4, #28]
  408d92:	6261      	str	r1, [r4, #36]	; 0x24
  408d94:	62a2      	str	r2, [r4, #40]	; 0x28
  408d96:	62e3      	str	r3, [r4, #44]	; 0x2c
  408d98:	f104 0058 	add.w	r0, r4, #88	; 0x58
  408d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408da0:	f000 bbc4 	b.w	40952c <__retarget_lock_init_recursive>
  408da4:	0040a0c1 	.word	0x0040a0c1
  408da8:	0040a0e5 	.word	0x0040a0e5
  408dac:	0040a121 	.word	0x0040a121
  408db0:	0040a141 	.word	0x0040a141

00408db4 <__sinit>:
  408db4:	b510      	push	{r4, lr}
  408db6:	4604      	mov	r4, r0
  408db8:	4812      	ldr	r0, [pc, #72]	; (408e04 <__sinit+0x50>)
  408dba:	f000 fbbb 	bl	409534 <__retarget_lock_acquire_recursive>
  408dbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  408dc0:	b9d2      	cbnz	r2, 408df8 <__sinit+0x44>
  408dc2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  408dc6:	4810      	ldr	r0, [pc, #64]	; (408e08 <__sinit+0x54>)
  408dc8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  408dcc:	2103      	movs	r1, #3
  408dce:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  408dd2:	63e0      	str	r0, [r4, #60]	; 0x3c
  408dd4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  408dd8:	6860      	ldr	r0, [r4, #4]
  408dda:	2104      	movs	r1, #4
  408ddc:	f7ff ffc2 	bl	408d64 <std.isra.0>
  408de0:	2201      	movs	r2, #1
  408de2:	2109      	movs	r1, #9
  408de4:	68a0      	ldr	r0, [r4, #8]
  408de6:	f7ff ffbd 	bl	408d64 <std.isra.0>
  408dea:	2202      	movs	r2, #2
  408dec:	2112      	movs	r1, #18
  408dee:	68e0      	ldr	r0, [r4, #12]
  408df0:	f7ff ffb8 	bl	408d64 <std.isra.0>
  408df4:	2301      	movs	r3, #1
  408df6:	63a3      	str	r3, [r4, #56]	; 0x38
  408df8:	4802      	ldr	r0, [pc, #8]	; (408e04 <__sinit+0x50>)
  408dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408dfe:	f000 bb9b 	b.w	409538 <__retarget_lock_release_recursive>
  408e02:	bf00      	nop
  408e04:	2040212c 	.word	0x2040212c
  408e08:	00408d59 	.word	0x00408d59

00408e0c <__sfp_lock_acquire>:
  408e0c:	4801      	ldr	r0, [pc, #4]	; (408e14 <__sfp_lock_acquire+0x8>)
  408e0e:	f000 bb91 	b.w	409534 <__retarget_lock_acquire_recursive>
  408e12:	bf00      	nop
  408e14:	20402140 	.word	0x20402140

00408e18 <__sfp_lock_release>:
  408e18:	4801      	ldr	r0, [pc, #4]	; (408e20 <__sfp_lock_release+0x8>)
  408e1a:	f000 bb8d 	b.w	409538 <__retarget_lock_release_recursive>
  408e1e:	bf00      	nop
  408e20:	20402140 	.word	0x20402140

00408e24 <__libc_fini_array>:
  408e24:	b538      	push	{r3, r4, r5, lr}
  408e26:	4c0a      	ldr	r4, [pc, #40]	; (408e50 <__libc_fini_array+0x2c>)
  408e28:	4d0a      	ldr	r5, [pc, #40]	; (408e54 <__libc_fini_array+0x30>)
  408e2a:	1b64      	subs	r4, r4, r5
  408e2c:	10a4      	asrs	r4, r4, #2
  408e2e:	d00a      	beq.n	408e46 <__libc_fini_array+0x22>
  408e30:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408e34:	3b01      	subs	r3, #1
  408e36:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408e3a:	3c01      	subs	r4, #1
  408e3c:	f855 3904 	ldr.w	r3, [r5], #-4
  408e40:	4798      	blx	r3
  408e42:	2c00      	cmp	r4, #0
  408e44:	d1f9      	bne.n	408e3a <__libc_fini_array+0x16>
  408e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408e4a:	f002 b951 	b.w	40b0f0 <_fini>
  408e4e:	bf00      	nop
  408e50:	0040b100 	.word	0x0040b100
  408e54:	0040b0fc 	.word	0x0040b0fc

00408e58 <__fputwc>:
  408e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408e5c:	b082      	sub	sp, #8
  408e5e:	4680      	mov	r8, r0
  408e60:	4689      	mov	r9, r1
  408e62:	4614      	mov	r4, r2
  408e64:	f000 fb54 	bl	409510 <__locale_mb_cur_max>
  408e68:	2801      	cmp	r0, #1
  408e6a:	d036      	beq.n	408eda <__fputwc+0x82>
  408e6c:	464a      	mov	r2, r9
  408e6e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408e72:	a901      	add	r1, sp, #4
  408e74:	4640      	mov	r0, r8
  408e76:	f001 fa49 	bl	40a30c <_wcrtomb_r>
  408e7a:	1c42      	adds	r2, r0, #1
  408e7c:	4606      	mov	r6, r0
  408e7e:	d025      	beq.n	408ecc <__fputwc+0x74>
  408e80:	b3a8      	cbz	r0, 408eee <__fputwc+0x96>
  408e82:	f89d e004 	ldrb.w	lr, [sp, #4]
  408e86:	2500      	movs	r5, #0
  408e88:	f10d 0a04 	add.w	sl, sp, #4
  408e8c:	e009      	b.n	408ea2 <__fputwc+0x4a>
  408e8e:	6823      	ldr	r3, [r4, #0]
  408e90:	1c5a      	adds	r2, r3, #1
  408e92:	6022      	str	r2, [r4, #0]
  408e94:	f883 e000 	strb.w	lr, [r3]
  408e98:	3501      	adds	r5, #1
  408e9a:	42b5      	cmp	r5, r6
  408e9c:	d227      	bcs.n	408eee <__fputwc+0x96>
  408e9e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  408ea2:	68a3      	ldr	r3, [r4, #8]
  408ea4:	3b01      	subs	r3, #1
  408ea6:	2b00      	cmp	r3, #0
  408ea8:	60a3      	str	r3, [r4, #8]
  408eaa:	daf0      	bge.n	408e8e <__fputwc+0x36>
  408eac:	69a7      	ldr	r7, [r4, #24]
  408eae:	42bb      	cmp	r3, r7
  408eb0:	4671      	mov	r1, lr
  408eb2:	4622      	mov	r2, r4
  408eb4:	4640      	mov	r0, r8
  408eb6:	db02      	blt.n	408ebe <__fputwc+0x66>
  408eb8:	f1be 0f0a 	cmp.w	lr, #10
  408ebc:	d1e7      	bne.n	408e8e <__fputwc+0x36>
  408ebe:	f001 f9cd 	bl	40a25c <__swbuf_r>
  408ec2:	1c43      	adds	r3, r0, #1
  408ec4:	d1e8      	bne.n	408e98 <__fputwc+0x40>
  408ec6:	b002      	add	sp, #8
  408ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ecc:	89a3      	ldrh	r3, [r4, #12]
  408ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408ed2:	81a3      	strh	r3, [r4, #12]
  408ed4:	b002      	add	sp, #8
  408ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408eda:	f109 33ff 	add.w	r3, r9, #4294967295
  408ede:	2bfe      	cmp	r3, #254	; 0xfe
  408ee0:	d8c4      	bhi.n	408e6c <__fputwc+0x14>
  408ee2:	fa5f fe89 	uxtb.w	lr, r9
  408ee6:	4606      	mov	r6, r0
  408ee8:	f88d e004 	strb.w	lr, [sp, #4]
  408eec:	e7cb      	b.n	408e86 <__fputwc+0x2e>
  408eee:	4648      	mov	r0, r9
  408ef0:	b002      	add	sp, #8
  408ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ef6:	bf00      	nop

00408ef8 <_fputwc_r>:
  408ef8:	b530      	push	{r4, r5, lr}
  408efa:	6e53      	ldr	r3, [r2, #100]	; 0x64
  408efc:	f013 0f01 	tst.w	r3, #1
  408f00:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408f04:	4614      	mov	r4, r2
  408f06:	b083      	sub	sp, #12
  408f08:	4605      	mov	r5, r0
  408f0a:	b29a      	uxth	r2, r3
  408f0c:	d101      	bne.n	408f12 <_fputwc_r+0x1a>
  408f0e:	0590      	lsls	r0, r2, #22
  408f10:	d51c      	bpl.n	408f4c <_fputwc_r+0x54>
  408f12:	0490      	lsls	r0, r2, #18
  408f14:	d406      	bmi.n	408f24 <_fputwc_r+0x2c>
  408f16:	6e62      	ldr	r2, [r4, #100]	; 0x64
  408f18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408f20:	81a3      	strh	r3, [r4, #12]
  408f22:	6662      	str	r2, [r4, #100]	; 0x64
  408f24:	4628      	mov	r0, r5
  408f26:	4622      	mov	r2, r4
  408f28:	f7ff ff96 	bl	408e58 <__fputwc>
  408f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408f2e:	07da      	lsls	r2, r3, #31
  408f30:	4605      	mov	r5, r0
  408f32:	d402      	bmi.n	408f3a <_fputwc_r+0x42>
  408f34:	89a3      	ldrh	r3, [r4, #12]
  408f36:	059b      	lsls	r3, r3, #22
  408f38:	d502      	bpl.n	408f40 <_fputwc_r+0x48>
  408f3a:	4628      	mov	r0, r5
  408f3c:	b003      	add	sp, #12
  408f3e:	bd30      	pop	{r4, r5, pc}
  408f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408f42:	f000 faf9 	bl	409538 <__retarget_lock_release_recursive>
  408f46:	4628      	mov	r0, r5
  408f48:	b003      	add	sp, #12
  408f4a:	bd30      	pop	{r4, r5, pc}
  408f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408f4e:	9101      	str	r1, [sp, #4]
  408f50:	f000 faf0 	bl	409534 <__retarget_lock_acquire_recursive>
  408f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408f58:	9901      	ldr	r1, [sp, #4]
  408f5a:	b29a      	uxth	r2, r3
  408f5c:	e7d9      	b.n	408f12 <_fputwc_r+0x1a>
  408f5e:	bf00      	nop

00408f60 <_malloc_trim_r>:
  408f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408f62:	4f24      	ldr	r7, [pc, #144]	; (408ff4 <_malloc_trim_r+0x94>)
  408f64:	460c      	mov	r4, r1
  408f66:	4606      	mov	r6, r0
  408f68:	f000 fee6 	bl	409d38 <__malloc_lock>
  408f6c:	68bb      	ldr	r3, [r7, #8]
  408f6e:	685d      	ldr	r5, [r3, #4]
  408f70:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408f74:	310f      	adds	r1, #15
  408f76:	f025 0503 	bic.w	r5, r5, #3
  408f7a:	4429      	add	r1, r5
  408f7c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408f80:	f021 010f 	bic.w	r1, r1, #15
  408f84:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408f88:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408f8c:	db07      	blt.n	408f9e <_malloc_trim_r+0x3e>
  408f8e:	2100      	movs	r1, #0
  408f90:	4630      	mov	r0, r6
  408f92:	f001 f883 	bl	40a09c <_sbrk_r>
  408f96:	68bb      	ldr	r3, [r7, #8]
  408f98:	442b      	add	r3, r5
  408f9a:	4298      	cmp	r0, r3
  408f9c:	d004      	beq.n	408fa8 <_malloc_trim_r+0x48>
  408f9e:	4630      	mov	r0, r6
  408fa0:	f000 fed0 	bl	409d44 <__malloc_unlock>
  408fa4:	2000      	movs	r0, #0
  408fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408fa8:	4261      	negs	r1, r4
  408faa:	4630      	mov	r0, r6
  408fac:	f001 f876 	bl	40a09c <_sbrk_r>
  408fb0:	3001      	adds	r0, #1
  408fb2:	d00d      	beq.n	408fd0 <_malloc_trim_r+0x70>
  408fb4:	4b10      	ldr	r3, [pc, #64]	; (408ff8 <_malloc_trim_r+0x98>)
  408fb6:	68ba      	ldr	r2, [r7, #8]
  408fb8:	6819      	ldr	r1, [r3, #0]
  408fba:	1b2d      	subs	r5, r5, r4
  408fbc:	f045 0501 	orr.w	r5, r5, #1
  408fc0:	4630      	mov	r0, r6
  408fc2:	1b09      	subs	r1, r1, r4
  408fc4:	6055      	str	r5, [r2, #4]
  408fc6:	6019      	str	r1, [r3, #0]
  408fc8:	f000 febc 	bl	409d44 <__malloc_unlock>
  408fcc:	2001      	movs	r0, #1
  408fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408fd0:	2100      	movs	r1, #0
  408fd2:	4630      	mov	r0, r6
  408fd4:	f001 f862 	bl	40a09c <_sbrk_r>
  408fd8:	68ba      	ldr	r2, [r7, #8]
  408fda:	1a83      	subs	r3, r0, r2
  408fdc:	2b0f      	cmp	r3, #15
  408fde:	ddde      	ble.n	408f9e <_malloc_trim_r+0x3e>
  408fe0:	4c06      	ldr	r4, [pc, #24]	; (408ffc <_malloc_trim_r+0x9c>)
  408fe2:	4905      	ldr	r1, [pc, #20]	; (408ff8 <_malloc_trim_r+0x98>)
  408fe4:	6824      	ldr	r4, [r4, #0]
  408fe6:	f043 0301 	orr.w	r3, r3, #1
  408fea:	1b00      	subs	r0, r0, r4
  408fec:	6053      	str	r3, [r2, #4]
  408fee:	6008      	str	r0, [r1, #0]
  408ff0:	e7d5      	b.n	408f9e <_malloc_trim_r+0x3e>
  408ff2:	bf00      	nop
  408ff4:	20400690 	.word	0x20400690
  408ff8:	20400ff4 	.word	0x20400ff4
  408ffc:	20400a98 	.word	0x20400a98

00409000 <_free_r>:
  409000:	2900      	cmp	r1, #0
  409002:	d044      	beq.n	40908e <_free_r+0x8e>
  409004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409008:	460d      	mov	r5, r1
  40900a:	4680      	mov	r8, r0
  40900c:	f000 fe94 	bl	409d38 <__malloc_lock>
  409010:	f855 7c04 	ldr.w	r7, [r5, #-4]
  409014:	4969      	ldr	r1, [pc, #420]	; (4091bc <_free_r+0x1bc>)
  409016:	f027 0301 	bic.w	r3, r7, #1
  40901a:	f1a5 0408 	sub.w	r4, r5, #8
  40901e:	18e2      	adds	r2, r4, r3
  409020:	688e      	ldr	r6, [r1, #8]
  409022:	6850      	ldr	r0, [r2, #4]
  409024:	42b2      	cmp	r2, r6
  409026:	f020 0003 	bic.w	r0, r0, #3
  40902a:	d05e      	beq.n	4090ea <_free_r+0xea>
  40902c:	07fe      	lsls	r6, r7, #31
  40902e:	6050      	str	r0, [r2, #4]
  409030:	d40b      	bmi.n	40904a <_free_r+0x4a>
  409032:	f855 7c08 	ldr.w	r7, [r5, #-8]
  409036:	1be4      	subs	r4, r4, r7
  409038:	f101 0e08 	add.w	lr, r1, #8
  40903c:	68a5      	ldr	r5, [r4, #8]
  40903e:	4575      	cmp	r5, lr
  409040:	443b      	add	r3, r7
  409042:	d06d      	beq.n	409120 <_free_r+0x120>
  409044:	68e7      	ldr	r7, [r4, #12]
  409046:	60ef      	str	r7, [r5, #12]
  409048:	60bd      	str	r5, [r7, #8]
  40904a:	1815      	adds	r5, r2, r0
  40904c:	686d      	ldr	r5, [r5, #4]
  40904e:	07ed      	lsls	r5, r5, #31
  409050:	d53e      	bpl.n	4090d0 <_free_r+0xd0>
  409052:	f043 0201 	orr.w	r2, r3, #1
  409056:	6062      	str	r2, [r4, #4]
  409058:	50e3      	str	r3, [r4, r3]
  40905a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40905e:	d217      	bcs.n	409090 <_free_r+0x90>
  409060:	08db      	lsrs	r3, r3, #3
  409062:	1c58      	adds	r0, r3, #1
  409064:	109a      	asrs	r2, r3, #2
  409066:	684d      	ldr	r5, [r1, #4]
  409068:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40906c:	60a7      	str	r7, [r4, #8]
  40906e:	2301      	movs	r3, #1
  409070:	4093      	lsls	r3, r2
  409072:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  409076:	432b      	orrs	r3, r5
  409078:	3a08      	subs	r2, #8
  40907a:	60e2      	str	r2, [r4, #12]
  40907c:	604b      	str	r3, [r1, #4]
  40907e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  409082:	60fc      	str	r4, [r7, #12]
  409084:	4640      	mov	r0, r8
  409086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40908a:	f000 be5b 	b.w	409d44 <__malloc_unlock>
  40908e:	4770      	bx	lr
  409090:	0a5a      	lsrs	r2, r3, #9
  409092:	2a04      	cmp	r2, #4
  409094:	d852      	bhi.n	40913c <_free_r+0x13c>
  409096:	099a      	lsrs	r2, r3, #6
  409098:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40909c:	00ff      	lsls	r7, r7, #3
  40909e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4090a2:	19c8      	adds	r0, r1, r7
  4090a4:	59ca      	ldr	r2, [r1, r7]
  4090a6:	3808      	subs	r0, #8
  4090a8:	4290      	cmp	r0, r2
  4090aa:	d04f      	beq.n	40914c <_free_r+0x14c>
  4090ac:	6851      	ldr	r1, [r2, #4]
  4090ae:	f021 0103 	bic.w	r1, r1, #3
  4090b2:	428b      	cmp	r3, r1
  4090b4:	d232      	bcs.n	40911c <_free_r+0x11c>
  4090b6:	6892      	ldr	r2, [r2, #8]
  4090b8:	4290      	cmp	r0, r2
  4090ba:	d1f7      	bne.n	4090ac <_free_r+0xac>
  4090bc:	68c3      	ldr	r3, [r0, #12]
  4090be:	60a0      	str	r0, [r4, #8]
  4090c0:	60e3      	str	r3, [r4, #12]
  4090c2:	609c      	str	r4, [r3, #8]
  4090c4:	60c4      	str	r4, [r0, #12]
  4090c6:	4640      	mov	r0, r8
  4090c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4090cc:	f000 be3a 	b.w	409d44 <__malloc_unlock>
  4090d0:	6895      	ldr	r5, [r2, #8]
  4090d2:	4f3b      	ldr	r7, [pc, #236]	; (4091c0 <_free_r+0x1c0>)
  4090d4:	42bd      	cmp	r5, r7
  4090d6:	4403      	add	r3, r0
  4090d8:	d040      	beq.n	40915c <_free_r+0x15c>
  4090da:	68d0      	ldr	r0, [r2, #12]
  4090dc:	60e8      	str	r0, [r5, #12]
  4090de:	f043 0201 	orr.w	r2, r3, #1
  4090e2:	6085      	str	r5, [r0, #8]
  4090e4:	6062      	str	r2, [r4, #4]
  4090e6:	50e3      	str	r3, [r4, r3]
  4090e8:	e7b7      	b.n	40905a <_free_r+0x5a>
  4090ea:	07ff      	lsls	r7, r7, #31
  4090ec:	4403      	add	r3, r0
  4090ee:	d407      	bmi.n	409100 <_free_r+0x100>
  4090f0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4090f4:	1aa4      	subs	r4, r4, r2
  4090f6:	4413      	add	r3, r2
  4090f8:	68a0      	ldr	r0, [r4, #8]
  4090fa:	68e2      	ldr	r2, [r4, #12]
  4090fc:	60c2      	str	r2, [r0, #12]
  4090fe:	6090      	str	r0, [r2, #8]
  409100:	4a30      	ldr	r2, [pc, #192]	; (4091c4 <_free_r+0x1c4>)
  409102:	6812      	ldr	r2, [r2, #0]
  409104:	f043 0001 	orr.w	r0, r3, #1
  409108:	4293      	cmp	r3, r2
  40910a:	6060      	str	r0, [r4, #4]
  40910c:	608c      	str	r4, [r1, #8]
  40910e:	d3b9      	bcc.n	409084 <_free_r+0x84>
  409110:	4b2d      	ldr	r3, [pc, #180]	; (4091c8 <_free_r+0x1c8>)
  409112:	4640      	mov	r0, r8
  409114:	6819      	ldr	r1, [r3, #0]
  409116:	f7ff ff23 	bl	408f60 <_malloc_trim_r>
  40911a:	e7b3      	b.n	409084 <_free_r+0x84>
  40911c:	4610      	mov	r0, r2
  40911e:	e7cd      	b.n	4090bc <_free_r+0xbc>
  409120:	1811      	adds	r1, r2, r0
  409122:	6849      	ldr	r1, [r1, #4]
  409124:	07c9      	lsls	r1, r1, #31
  409126:	d444      	bmi.n	4091b2 <_free_r+0x1b2>
  409128:	6891      	ldr	r1, [r2, #8]
  40912a:	68d2      	ldr	r2, [r2, #12]
  40912c:	60ca      	str	r2, [r1, #12]
  40912e:	4403      	add	r3, r0
  409130:	f043 0001 	orr.w	r0, r3, #1
  409134:	6091      	str	r1, [r2, #8]
  409136:	6060      	str	r0, [r4, #4]
  409138:	50e3      	str	r3, [r4, r3]
  40913a:	e7a3      	b.n	409084 <_free_r+0x84>
  40913c:	2a14      	cmp	r2, #20
  40913e:	d816      	bhi.n	40916e <_free_r+0x16e>
  409140:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  409144:	00ff      	lsls	r7, r7, #3
  409146:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40914a:	e7aa      	b.n	4090a2 <_free_r+0xa2>
  40914c:	10aa      	asrs	r2, r5, #2
  40914e:	2301      	movs	r3, #1
  409150:	684d      	ldr	r5, [r1, #4]
  409152:	4093      	lsls	r3, r2
  409154:	432b      	orrs	r3, r5
  409156:	604b      	str	r3, [r1, #4]
  409158:	4603      	mov	r3, r0
  40915a:	e7b0      	b.n	4090be <_free_r+0xbe>
  40915c:	f043 0201 	orr.w	r2, r3, #1
  409160:	614c      	str	r4, [r1, #20]
  409162:	610c      	str	r4, [r1, #16]
  409164:	60e5      	str	r5, [r4, #12]
  409166:	60a5      	str	r5, [r4, #8]
  409168:	6062      	str	r2, [r4, #4]
  40916a:	50e3      	str	r3, [r4, r3]
  40916c:	e78a      	b.n	409084 <_free_r+0x84>
  40916e:	2a54      	cmp	r2, #84	; 0x54
  409170:	d806      	bhi.n	409180 <_free_r+0x180>
  409172:	0b1a      	lsrs	r2, r3, #12
  409174:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  409178:	00ff      	lsls	r7, r7, #3
  40917a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40917e:	e790      	b.n	4090a2 <_free_r+0xa2>
  409180:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409184:	d806      	bhi.n	409194 <_free_r+0x194>
  409186:	0bda      	lsrs	r2, r3, #15
  409188:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40918c:	00ff      	lsls	r7, r7, #3
  40918e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  409192:	e786      	b.n	4090a2 <_free_r+0xa2>
  409194:	f240 5054 	movw	r0, #1364	; 0x554
  409198:	4282      	cmp	r2, r0
  40919a:	d806      	bhi.n	4091aa <_free_r+0x1aa>
  40919c:	0c9a      	lsrs	r2, r3, #18
  40919e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4091a2:	00ff      	lsls	r7, r7, #3
  4091a4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4091a8:	e77b      	b.n	4090a2 <_free_r+0xa2>
  4091aa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4091ae:	257e      	movs	r5, #126	; 0x7e
  4091b0:	e777      	b.n	4090a2 <_free_r+0xa2>
  4091b2:	f043 0101 	orr.w	r1, r3, #1
  4091b6:	6061      	str	r1, [r4, #4]
  4091b8:	6013      	str	r3, [r2, #0]
  4091ba:	e763      	b.n	409084 <_free_r+0x84>
  4091bc:	20400690 	.word	0x20400690
  4091c0:	20400698 	.word	0x20400698
  4091c4:	20400a9c 	.word	0x20400a9c
  4091c8:	20401024 	.word	0x20401024

004091cc <__sfvwrite_r>:
  4091cc:	6893      	ldr	r3, [r2, #8]
  4091ce:	2b00      	cmp	r3, #0
  4091d0:	d073      	beq.n	4092ba <__sfvwrite_r+0xee>
  4091d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4091d6:	898b      	ldrh	r3, [r1, #12]
  4091d8:	b083      	sub	sp, #12
  4091da:	460c      	mov	r4, r1
  4091dc:	0719      	lsls	r1, r3, #28
  4091de:	9000      	str	r0, [sp, #0]
  4091e0:	4616      	mov	r6, r2
  4091e2:	d526      	bpl.n	409232 <__sfvwrite_r+0x66>
  4091e4:	6922      	ldr	r2, [r4, #16]
  4091e6:	b322      	cbz	r2, 409232 <__sfvwrite_r+0x66>
  4091e8:	f013 0002 	ands.w	r0, r3, #2
  4091ec:	6835      	ldr	r5, [r6, #0]
  4091ee:	d02c      	beq.n	40924a <__sfvwrite_r+0x7e>
  4091f0:	f04f 0900 	mov.w	r9, #0
  4091f4:	4fb0      	ldr	r7, [pc, #704]	; (4094b8 <__sfvwrite_r+0x2ec>)
  4091f6:	46c8      	mov	r8, r9
  4091f8:	46b2      	mov	sl, r6
  4091fa:	45b8      	cmp	r8, r7
  4091fc:	4643      	mov	r3, r8
  4091fe:	464a      	mov	r2, r9
  409200:	bf28      	it	cs
  409202:	463b      	movcs	r3, r7
  409204:	9800      	ldr	r0, [sp, #0]
  409206:	f1b8 0f00 	cmp.w	r8, #0
  40920a:	d050      	beq.n	4092ae <__sfvwrite_r+0xe2>
  40920c:	69e1      	ldr	r1, [r4, #28]
  40920e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  409210:	47b0      	blx	r6
  409212:	2800      	cmp	r0, #0
  409214:	dd58      	ble.n	4092c8 <__sfvwrite_r+0xfc>
  409216:	f8da 3008 	ldr.w	r3, [sl, #8]
  40921a:	1a1b      	subs	r3, r3, r0
  40921c:	4481      	add	r9, r0
  40921e:	eba8 0800 	sub.w	r8, r8, r0
  409222:	f8ca 3008 	str.w	r3, [sl, #8]
  409226:	2b00      	cmp	r3, #0
  409228:	d1e7      	bne.n	4091fa <__sfvwrite_r+0x2e>
  40922a:	2000      	movs	r0, #0
  40922c:	b003      	add	sp, #12
  40922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409232:	4621      	mov	r1, r4
  409234:	9800      	ldr	r0, [sp, #0]
  409236:	f7ff fc51 	bl	408adc <__swsetup_r>
  40923a:	2800      	cmp	r0, #0
  40923c:	f040 8133 	bne.w	4094a6 <__sfvwrite_r+0x2da>
  409240:	89a3      	ldrh	r3, [r4, #12]
  409242:	6835      	ldr	r5, [r6, #0]
  409244:	f013 0002 	ands.w	r0, r3, #2
  409248:	d1d2      	bne.n	4091f0 <__sfvwrite_r+0x24>
  40924a:	f013 0901 	ands.w	r9, r3, #1
  40924e:	d145      	bne.n	4092dc <__sfvwrite_r+0x110>
  409250:	464f      	mov	r7, r9
  409252:	9601      	str	r6, [sp, #4]
  409254:	b337      	cbz	r7, 4092a4 <__sfvwrite_r+0xd8>
  409256:	059a      	lsls	r2, r3, #22
  409258:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40925c:	f140 8083 	bpl.w	409366 <__sfvwrite_r+0x19a>
  409260:	4547      	cmp	r7, r8
  409262:	46c3      	mov	fp, r8
  409264:	f0c0 80ab 	bcc.w	4093be <__sfvwrite_r+0x1f2>
  409268:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40926c:	f040 80ac 	bne.w	4093c8 <__sfvwrite_r+0x1fc>
  409270:	6820      	ldr	r0, [r4, #0]
  409272:	46ba      	mov	sl, r7
  409274:	465a      	mov	r2, fp
  409276:	4649      	mov	r1, r9
  409278:	f000 fcfa 	bl	409c70 <memmove>
  40927c:	68a2      	ldr	r2, [r4, #8]
  40927e:	6823      	ldr	r3, [r4, #0]
  409280:	eba2 0208 	sub.w	r2, r2, r8
  409284:	445b      	add	r3, fp
  409286:	60a2      	str	r2, [r4, #8]
  409288:	6023      	str	r3, [r4, #0]
  40928a:	9a01      	ldr	r2, [sp, #4]
  40928c:	6893      	ldr	r3, [r2, #8]
  40928e:	eba3 030a 	sub.w	r3, r3, sl
  409292:	44d1      	add	r9, sl
  409294:	eba7 070a 	sub.w	r7, r7, sl
  409298:	6093      	str	r3, [r2, #8]
  40929a:	2b00      	cmp	r3, #0
  40929c:	d0c5      	beq.n	40922a <__sfvwrite_r+0x5e>
  40929e:	89a3      	ldrh	r3, [r4, #12]
  4092a0:	2f00      	cmp	r7, #0
  4092a2:	d1d8      	bne.n	409256 <__sfvwrite_r+0x8a>
  4092a4:	f8d5 9000 	ldr.w	r9, [r5]
  4092a8:	686f      	ldr	r7, [r5, #4]
  4092aa:	3508      	adds	r5, #8
  4092ac:	e7d2      	b.n	409254 <__sfvwrite_r+0x88>
  4092ae:	f8d5 9000 	ldr.w	r9, [r5]
  4092b2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4092b6:	3508      	adds	r5, #8
  4092b8:	e79f      	b.n	4091fa <__sfvwrite_r+0x2e>
  4092ba:	2000      	movs	r0, #0
  4092bc:	4770      	bx	lr
  4092be:	4621      	mov	r1, r4
  4092c0:	9800      	ldr	r0, [sp, #0]
  4092c2:	f7ff fd1f 	bl	408d04 <_fflush_r>
  4092c6:	b370      	cbz	r0, 409326 <__sfvwrite_r+0x15a>
  4092c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4092cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4092d0:	f04f 30ff 	mov.w	r0, #4294967295
  4092d4:	81a3      	strh	r3, [r4, #12]
  4092d6:	b003      	add	sp, #12
  4092d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092dc:	4681      	mov	r9, r0
  4092de:	4633      	mov	r3, r6
  4092e0:	464e      	mov	r6, r9
  4092e2:	46a8      	mov	r8, r5
  4092e4:	469a      	mov	sl, r3
  4092e6:	464d      	mov	r5, r9
  4092e8:	b34e      	cbz	r6, 40933e <__sfvwrite_r+0x172>
  4092ea:	b380      	cbz	r0, 40934e <__sfvwrite_r+0x182>
  4092ec:	6820      	ldr	r0, [r4, #0]
  4092ee:	6923      	ldr	r3, [r4, #16]
  4092f0:	6962      	ldr	r2, [r4, #20]
  4092f2:	45b1      	cmp	r9, r6
  4092f4:	46cb      	mov	fp, r9
  4092f6:	bf28      	it	cs
  4092f8:	46b3      	movcs	fp, r6
  4092fa:	4298      	cmp	r0, r3
  4092fc:	465f      	mov	r7, fp
  4092fe:	d904      	bls.n	40930a <__sfvwrite_r+0x13e>
  409300:	68a3      	ldr	r3, [r4, #8]
  409302:	4413      	add	r3, r2
  409304:	459b      	cmp	fp, r3
  409306:	f300 80a6 	bgt.w	409456 <__sfvwrite_r+0x28a>
  40930a:	4593      	cmp	fp, r2
  40930c:	db4b      	blt.n	4093a6 <__sfvwrite_r+0x1da>
  40930e:	4613      	mov	r3, r2
  409310:	6a67      	ldr	r7, [r4, #36]	; 0x24
  409312:	69e1      	ldr	r1, [r4, #28]
  409314:	9800      	ldr	r0, [sp, #0]
  409316:	462a      	mov	r2, r5
  409318:	47b8      	blx	r7
  40931a:	1e07      	subs	r7, r0, #0
  40931c:	ddd4      	ble.n	4092c8 <__sfvwrite_r+0xfc>
  40931e:	ebb9 0907 	subs.w	r9, r9, r7
  409322:	d0cc      	beq.n	4092be <__sfvwrite_r+0xf2>
  409324:	2001      	movs	r0, #1
  409326:	f8da 3008 	ldr.w	r3, [sl, #8]
  40932a:	1bdb      	subs	r3, r3, r7
  40932c:	443d      	add	r5, r7
  40932e:	1bf6      	subs	r6, r6, r7
  409330:	f8ca 3008 	str.w	r3, [sl, #8]
  409334:	2b00      	cmp	r3, #0
  409336:	f43f af78 	beq.w	40922a <__sfvwrite_r+0x5e>
  40933a:	2e00      	cmp	r6, #0
  40933c:	d1d5      	bne.n	4092ea <__sfvwrite_r+0x11e>
  40933e:	f108 0308 	add.w	r3, r8, #8
  409342:	e913 0060 	ldmdb	r3, {r5, r6}
  409346:	4698      	mov	r8, r3
  409348:	3308      	adds	r3, #8
  40934a:	2e00      	cmp	r6, #0
  40934c:	d0f9      	beq.n	409342 <__sfvwrite_r+0x176>
  40934e:	4632      	mov	r2, r6
  409350:	210a      	movs	r1, #10
  409352:	4628      	mov	r0, r5
  409354:	f000 fc3c 	bl	409bd0 <memchr>
  409358:	2800      	cmp	r0, #0
  40935a:	f000 80a1 	beq.w	4094a0 <__sfvwrite_r+0x2d4>
  40935e:	3001      	adds	r0, #1
  409360:	eba0 0905 	sub.w	r9, r0, r5
  409364:	e7c2      	b.n	4092ec <__sfvwrite_r+0x120>
  409366:	6820      	ldr	r0, [r4, #0]
  409368:	6923      	ldr	r3, [r4, #16]
  40936a:	4298      	cmp	r0, r3
  40936c:	d802      	bhi.n	409374 <__sfvwrite_r+0x1a8>
  40936e:	6963      	ldr	r3, [r4, #20]
  409370:	429f      	cmp	r7, r3
  409372:	d25d      	bcs.n	409430 <__sfvwrite_r+0x264>
  409374:	45b8      	cmp	r8, r7
  409376:	bf28      	it	cs
  409378:	46b8      	movcs	r8, r7
  40937a:	4642      	mov	r2, r8
  40937c:	4649      	mov	r1, r9
  40937e:	f000 fc77 	bl	409c70 <memmove>
  409382:	68a3      	ldr	r3, [r4, #8]
  409384:	6822      	ldr	r2, [r4, #0]
  409386:	eba3 0308 	sub.w	r3, r3, r8
  40938a:	4442      	add	r2, r8
  40938c:	60a3      	str	r3, [r4, #8]
  40938e:	6022      	str	r2, [r4, #0]
  409390:	b10b      	cbz	r3, 409396 <__sfvwrite_r+0x1ca>
  409392:	46c2      	mov	sl, r8
  409394:	e779      	b.n	40928a <__sfvwrite_r+0xbe>
  409396:	4621      	mov	r1, r4
  409398:	9800      	ldr	r0, [sp, #0]
  40939a:	f7ff fcb3 	bl	408d04 <_fflush_r>
  40939e:	2800      	cmp	r0, #0
  4093a0:	d192      	bne.n	4092c8 <__sfvwrite_r+0xfc>
  4093a2:	46c2      	mov	sl, r8
  4093a4:	e771      	b.n	40928a <__sfvwrite_r+0xbe>
  4093a6:	465a      	mov	r2, fp
  4093a8:	4629      	mov	r1, r5
  4093aa:	f000 fc61 	bl	409c70 <memmove>
  4093ae:	68a2      	ldr	r2, [r4, #8]
  4093b0:	6823      	ldr	r3, [r4, #0]
  4093b2:	eba2 020b 	sub.w	r2, r2, fp
  4093b6:	445b      	add	r3, fp
  4093b8:	60a2      	str	r2, [r4, #8]
  4093ba:	6023      	str	r3, [r4, #0]
  4093bc:	e7af      	b.n	40931e <__sfvwrite_r+0x152>
  4093be:	6820      	ldr	r0, [r4, #0]
  4093c0:	46b8      	mov	r8, r7
  4093c2:	46ba      	mov	sl, r7
  4093c4:	46bb      	mov	fp, r7
  4093c6:	e755      	b.n	409274 <__sfvwrite_r+0xa8>
  4093c8:	6962      	ldr	r2, [r4, #20]
  4093ca:	6820      	ldr	r0, [r4, #0]
  4093cc:	6921      	ldr	r1, [r4, #16]
  4093ce:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4093d2:	eba0 0a01 	sub.w	sl, r0, r1
  4093d6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4093da:	f10a 0001 	add.w	r0, sl, #1
  4093de:	ea4f 0868 	mov.w	r8, r8, asr #1
  4093e2:	4438      	add	r0, r7
  4093e4:	4540      	cmp	r0, r8
  4093e6:	4642      	mov	r2, r8
  4093e8:	bf84      	itt	hi
  4093ea:	4680      	movhi	r8, r0
  4093ec:	4642      	movhi	r2, r8
  4093ee:	055b      	lsls	r3, r3, #21
  4093f0:	d544      	bpl.n	40947c <__sfvwrite_r+0x2b0>
  4093f2:	4611      	mov	r1, r2
  4093f4:	9800      	ldr	r0, [sp, #0]
  4093f6:	f000 f921 	bl	40963c <_malloc_r>
  4093fa:	4683      	mov	fp, r0
  4093fc:	2800      	cmp	r0, #0
  4093fe:	d055      	beq.n	4094ac <__sfvwrite_r+0x2e0>
  409400:	4652      	mov	r2, sl
  409402:	6921      	ldr	r1, [r4, #16]
  409404:	f7fe fae8 	bl	4079d8 <memcpy>
  409408:	89a3      	ldrh	r3, [r4, #12]
  40940a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40940e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  409412:	81a3      	strh	r3, [r4, #12]
  409414:	eb0b 000a 	add.w	r0, fp, sl
  409418:	eba8 030a 	sub.w	r3, r8, sl
  40941c:	f8c4 b010 	str.w	fp, [r4, #16]
  409420:	f8c4 8014 	str.w	r8, [r4, #20]
  409424:	6020      	str	r0, [r4, #0]
  409426:	60a3      	str	r3, [r4, #8]
  409428:	46b8      	mov	r8, r7
  40942a:	46ba      	mov	sl, r7
  40942c:	46bb      	mov	fp, r7
  40942e:	e721      	b.n	409274 <__sfvwrite_r+0xa8>
  409430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  409434:	42b9      	cmp	r1, r7
  409436:	bf28      	it	cs
  409438:	4639      	movcs	r1, r7
  40943a:	464a      	mov	r2, r9
  40943c:	fb91 f1f3 	sdiv	r1, r1, r3
  409440:	9800      	ldr	r0, [sp, #0]
  409442:	6a66      	ldr	r6, [r4, #36]	; 0x24
  409444:	fb03 f301 	mul.w	r3, r3, r1
  409448:	69e1      	ldr	r1, [r4, #28]
  40944a:	47b0      	blx	r6
  40944c:	f1b0 0a00 	subs.w	sl, r0, #0
  409450:	f73f af1b 	bgt.w	40928a <__sfvwrite_r+0xbe>
  409454:	e738      	b.n	4092c8 <__sfvwrite_r+0xfc>
  409456:	461a      	mov	r2, r3
  409458:	4629      	mov	r1, r5
  40945a:	9301      	str	r3, [sp, #4]
  40945c:	f000 fc08 	bl	409c70 <memmove>
  409460:	6822      	ldr	r2, [r4, #0]
  409462:	9b01      	ldr	r3, [sp, #4]
  409464:	9800      	ldr	r0, [sp, #0]
  409466:	441a      	add	r2, r3
  409468:	6022      	str	r2, [r4, #0]
  40946a:	4621      	mov	r1, r4
  40946c:	f7ff fc4a 	bl	408d04 <_fflush_r>
  409470:	9b01      	ldr	r3, [sp, #4]
  409472:	2800      	cmp	r0, #0
  409474:	f47f af28 	bne.w	4092c8 <__sfvwrite_r+0xfc>
  409478:	461f      	mov	r7, r3
  40947a:	e750      	b.n	40931e <__sfvwrite_r+0x152>
  40947c:	9800      	ldr	r0, [sp, #0]
  40947e:	f000 fc67 	bl	409d50 <_realloc_r>
  409482:	4683      	mov	fp, r0
  409484:	2800      	cmp	r0, #0
  409486:	d1c5      	bne.n	409414 <__sfvwrite_r+0x248>
  409488:	9d00      	ldr	r5, [sp, #0]
  40948a:	6921      	ldr	r1, [r4, #16]
  40948c:	4628      	mov	r0, r5
  40948e:	f7ff fdb7 	bl	409000 <_free_r>
  409492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409496:	220c      	movs	r2, #12
  409498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40949c:	602a      	str	r2, [r5, #0]
  40949e:	e715      	b.n	4092cc <__sfvwrite_r+0x100>
  4094a0:	f106 0901 	add.w	r9, r6, #1
  4094a4:	e722      	b.n	4092ec <__sfvwrite_r+0x120>
  4094a6:	f04f 30ff 	mov.w	r0, #4294967295
  4094aa:	e6bf      	b.n	40922c <__sfvwrite_r+0x60>
  4094ac:	9a00      	ldr	r2, [sp, #0]
  4094ae:	230c      	movs	r3, #12
  4094b0:	6013      	str	r3, [r2, #0]
  4094b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4094b6:	e709      	b.n	4092cc <__sfvwrite_r+0x100>
  4094b8:	7ffffc00 	.word	0x7ffffc00

004094bc <_fwalk_reent>:
  4094bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4094c0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4094c4:	d01f      	beq.n	409506 <_fwalk_reent+0x4a>
  4094c6:	4688      	mov	r8, r1
  4094c8:	4606      	mov	r6, r0
  4094ca:	f04f 0900 	mov.w	r9, #0
  4094ce:	687d      	ldr	r5, [r7, #4]
  4094d0:	68bc      	ldr	r4, [r7, #8]
  4094d2:	3d01      	subs	r5, #1
  4094d4:	d411      	bmi.n	4094fa <_fwalk_reent+0x3e>
  4094d6:	89a3      	ldrh	r3, [r4, #12]
  4094d8:	2b01      	cmp	r3, #1
  4094da:	f105 35ff 	add.w	r5, r5, #4294967295
  4094de:	d908      	bls.n	4094f2 <_fwalk_reent+0x36>
  4094e0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4094e4:	3301      	adds	r3, #1
  4094e6:	4621      	mov	r1, r4
  4094e8:	4630      	mov	r0, r6
  4094ea:	d002      	beq.n	4094f2 <_fwalk_reent+0x36>
  4094ec:	47c0      	blx	r8
  4094ee:	ea49 0900 	orr.w	r9, r9, r0
  4094f2:	1c6b      	adds	r3, r5, #1
  4094f4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4094f8:	d1ed      	bne.n	4094d6 <_fwalk_reent+0x1a>
  4094fa:	683f      	ldr	r7, [r7, #0]
  4094fc:	2f00      	cmp	r7, #0
  4094fe:	d1e6      	bne.n	4094ce <_fwalk_reent+0x12>
  409500:	4648      	mov	r0, r9
  409502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409506:	46b9      	mov	r9, r7
  409508:	4648      	mov	r0, r9
  40950a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40950e:	bf00      	nop

00409510 <__locale_mb_cur_max>:
  409510:	4b04      	ldr	r3, [pc, #16]	; (409524 <__locale_mb_cur_max+0x14>)
  409512:	4a05      	ldr	r2, [pc, #20]	; (409528 <__locale_mb_cur_max+0x18>)
  409514:	681b      	ldr	r3, [r3, #0]
  409516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  409518:	2b00      	cmp	r3, #0
  40951a:	bf08      	it	eq
  40951c:	4613      	moveq	r3, r2
  40951e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  409522:	4770      	bx	lr
  409524:	204000f0 	.word	0x204000f0
  409528:	20400524 	.word	0x20400524

0040952c <__retarget_lock_init_recursive>:
  40952c:	4770      	bx	lr
  40952e:	bf00      	nop

00409530 <__retarget_lock_close_recursive>:
  409530:	4770      	bx	lr
  409532:	bf00      	nop

00409534 <__retarget_lock_acquire_recursive>:
  409534:	4770      	bx	lr
  409536:	bf00      	nop

00409538 <__retarget_lock_release_recursive>:
  409538:	4770      	bx	lr
  40953a:	bf00      	nop

0040953c <__swhatbuf_r>:
  40953c:	b570      	push	{r4, r5, r6, lr}
  40953e:	460c      	mov	r4, r1
  409540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409544:	2900      	cmp	r1, #0
  409546:	b090      	sub	sp, #64	; 0x40
  409548:	4615      	mov	r5, r2
  40954a:	461e      	mov	r6, r3
  40954c:	db14      	blt.n	409578 <__swhatbuf_r+0x3c>
  40954e:	aa01      	add	r2, sp, #4
  409550:	f001 f800 	bl	40a554 <_fstat_r>
  409554:	2800      	cmp	r0, #0
  409556:	db0f      	blt.n	409578 <__swhatbuf_r+0x3c>
  409558:	9a02      	ldr	r2, [sp, #8]
  40955a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40955e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  409562:	fab2 f282 	clz	r2, r2
  409566:	0952      	lsrs	r2, r2, #5
  409568:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40956c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  409570:	6032      	str	r2, [r6, #0]
  409572:	602b      	str	r3, [r5, #0]
  409574:	b010      	add	sp, #64	; 0x40
  409576:	bd70      	pop	{r4, r5, r6, pc}
  409578:	89a2      	ldrh	r2, [r4, #12]
  40957a:	2300      	movs	r3, #0
  40957c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  409580:	6033      	str	r3, [r6, #0]
  409582:	d004      	beq.n	40958e <__swhatbuf_r+0x52>
  409584:	2240      	movs	r2, #64	; 0x40
  409586:	4618      	mov	r0, r3
  409588:	602a      	str	r2, [r5, #0]
  40958a:	b010      	add	sp, #64	; 0x40
  40958c:	bd70      	pop	{r4, r5, r6, pc}
  40958e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  409592:	602b      	str	r3, [r5, #0]
  409594:	b010      	add	sp, #64	; 0x40
  409596:	bd70      	pop	{r4, r5, r6, pc}

00409598 <__smakebuf_r>:
  409598:	898a      	ldrh	r2, [r1, #12]
  40959a:	0792      	lsls	r2, r2, #30
  40959c:	460b      	mov	r3, r1
  40959e:	d506      	bpl.n	4095ae <__smakebuf_r+0x16>
  4095a0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4095a4:	2101      	movs	r1, #1
  4095a6:	601a      	str	r2, [r3, #0]
  4095a8:	611a      	str	r2, [r3, #16]
  4095aa:	6159      	str	r1, [r3, #20]
  4095ac:	4770      	bx	lr
  4095ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  4095b0:	b083      	sub	sp, #12
  4095b2:	ab01      	add	r3, sp, #4
  4095b4:	466a      	mov	r2, sp
  4095b6:	460c      	mov	r4, r1
  4095b8:	4606      	mov	r6, r0
  4095ba:	f7ff ffbf 	bl	40953c <__swhatbuf_r>
  4095be:	9900      	ldr	r1, [sp, #0]
  4095c0:	4605      	mov	r5, r0
  4095c2:	4630      	mov	r0, r6
  4095c4:	f000 f83a 	bl	40963c <_malloc_r>
  4095c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4095cc:	b1d8      	cbz	r0, 409606 <__smakebuf_r+0x6e>
  4095ce:	9a01      	ldr	r2, [sp, #4]
  4095d0:	4f15      	ldr	r7, [pc, #84]	; (409628 <__smakebuf_r+0x90>)
  4095d2:	9900      	ldr	r1, [sp, #0]
  4095d4:	63f7      	str	r7, [r6, #60]	; 0x3c
  4095d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4095da:	81a3      	strh	r3, [r4, #12]
  4095dc:	6020      	str	r0, [r4, #0]
  4095de:	6120      	str	r0, [r4, #16]
  4095e0:	6161      	str	r1, [r4, #20]
  4095e2:	b91a      	cbnz	r2, 4095ec <__smakebuf_r+0x54>
  4095e4:	432b      	orrs	r3, r5
  4095e6:	81a3      	strh	r3, [r4, #12]
  4095e8:	b003      	add	sp, #12
  4095ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4095ec:	4630      	mov	r0, r6
  4095ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4095f2:	f000 ffc3 	bl	40a57c <_isatty_r>
  4095f6:	b1a0      	cbz	r0, 409622 <__smakebuf_r+0x8a>
  4095f8:	89a3      	ldrh	r3, [r4, #12]
  4095fa:	f023 0303 	bic.w	r3, r3, #3
  4095fe:	f043 0301 	orr.w	r3, r3, #1
  409602:	b21b      	sxth	r3, r3
  409604:	e7ee      	b.n	4095e4 <__smakebuf_r+0x4c>
  409606:	059a      	lsls	r2, r3, #22
  409608:	d4ee      	bmi.n	4095e8 <__smakebuf_r+0x50>
  40960a:	f023 0303 	bic.w	r3, r3, #3
  40960e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  409612:	f043 0302 	orr.w	r3, r3, #2
  409616:	2101      	movs	r1, #1
  409618:	81a3      	strh	r3, [r4, #12]
  40961a:	6022      	str	r2, [r4, #0]
  40961c:	6122      	str	r2, [r4, #16]
  40961e:	6161      	str	r1, [r4, #20]
  409620:	e7e2      	b.n	4095e8 <__smakebuf_r+0x50>
  409622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409626:	e7dd      	b.n	4095e4 <__smakebuf_r+0x4c>
  409628:	00408d59 	.word	0x00408d59

0040962c <malloc>:
  40962c:	4b02      	ldr	r3, [pc, #8]	; (409638 <malloc+0xc>)
  40962e:	4601      	mov	r1, r0
  409630:	6818      	ldr	r0, [r3, #0]
  409632:	f000 b803 	b.w	40963c <_malloc_r>
  409636:	bf00      	nop
  409638:	204000f0 	.word	0x204000f0

0040963c <_malloc_r>:
  40963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409640:	f101 060b 	add.w	r6, r1, #11
  409644:	2e16      	cmp	r6, #22
  409646:	b083      	sub	sp, #12
  409648:	4605      	mov	r5, r0
  40964a:	f240 809e 	bls.w	40978a <_malloc_r+0x14e>
  40964e:	f036 0607 	bics.w	r6, r6, #7
  409652:	f100 80bd 	bmi.w	4097d0 <_malloc_r+0x194>
  409656:	42b1      	cmp	r1, r6
  409658:	f200 80ba 	bhi.w	4097d0 <_malloc_r+0x194>
  40965c:	f000 fb6c 	bl	409d38 <__malloc_lock>
  409660:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  409664:	f0c0 8293 	bcc.w	409b8e <_malloc_r+0x552>
  409668:	0a73      	lsrs	r3, r6, #9
  40966a:	f000 80b8 	beq.w	4097de <_malloc_r+0x1a2>
  40966e:	2b04      	cmp	r3, #4
  409670:	f200 8179 	bhi.w	409966 <_malloc_r+0x32a>
  409674:	09b3      	lsrs	r3, r6, #6
  409676:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40967a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40967e:	00c3      	lsls	r3, r0, #3
  409680:	4fbf      	ldr	r7, [pc, #764]	; (409980 <_malloc_r+0x344>)
  409682:	443b      	add	r3, r7
  409684:	f1a3 0108 	sub.w	r1, r3, #8
  409688:	685c      	ldr	r4, [r3, #4]
  40968a:	42a1      	cmp	r1, r4
  40968c:	d106      	bne.n	40969c <_malloc_r+0x60>
  40968e:	e00c      	b.n	4096aa <_malloc_r+0x6e>
  409690:	2a00      	cmp	r2, #0
  409692:	f280 80aa 	bge.w	4097ea <_malloc_r+0x1ae>
  409696:	68e4      	ldr	r4, [r4, #12]
  409698:	42a1      	cmp	r1, r4
  40969a:	d006      	beq.n	4096aa <_malloc_r+0x6e>
  40969c:	6863      	ldr	r3, [r4, #4]
  40969e:	f023 0303 	bic.w	r3, r3, #3
  4096a2:	1b9a      	subs	r2, r3, r6
  4096a4:	2a0f      	cmp	r2, #15
  4096a6:	ddf3      	ble.n	409690 <_malloc_r+0x54>
  4096a8:	4670      	mov	r0, lr
  4096aa:	693c      	ldr	r4, [r7, #16]
  4096ac:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 409994 <_malloc_r+0x358>
  4096b0:	4574      	cmp	r4, lr
  4096b2:	f000 81ab 	beq.w	409a0c <_malloc_r+0x3d0>
  4096b6:	6863      	ldr	r3, [r4, #4]
  4096b8:	f023 0303 	bic.w	r3, r3, #3
  4096bc:	1b9a      	subs	r2, r3, r6
  4096be:	2a0f      	cmp	r2, #15
  4096c0:	f300 8190 	bgt.w	4099e4 <_malloc_r+0x3a8>
  4096c4:	2a00      	cmp	r2, #0
  4096c6:	f8c7 e014 	str.w	lr, [r7, #20]
  4096ca:	f8c7 e010 	str.w	lr, [r7, #16]
  4096ce:	f280 809d 	bge.w	40980c <_malloc_r+0x1d0>
  4096d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4096d6:	f080 8161 	bcs.w	40999c <_malloc_r+0x360>
  4096da:	08db      	lsrs	r3, r3, #3
  4096dc:	f103 0c01 	add.w	ip, r3, #1
  4096e0:	1099      	asrs	r1, r3, #2
  4096e2:	687a      	ldr	r2, [r7, #4]
  4096e4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4096e8:	f8c4 8008 	str.w	r8, [r4, #8]
  4096ec:	2301      	movs	r3, #1
  4096ee:	408b      	lsls	r3, r1
  4096f0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4096f4:	4313      	orrs	r3, r2
  4096f6:	3908      	subs	r1, #8
  4096f8:	60e1      	str	r1, [r4, #12]
  4096fa:	607b      	str	r3, [r7, #4]
  4096fc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  409700:	f8c8 400c 	str.w	r4, [r8, #12]
  409704:	1082      	asrs	r2, r0, #2
  409706:	2401      	movs	r4, #1
  409708:	4094      	lsls	r4, r2
  40970a:	429c      	cmp	r4, r3
  40970c:	f200 808b 	bhi.w	409826 <_malloc_r+0x1ea>
  409710:	421c      	tst	r4, r3
  409712:	d106      	bne.n	409722 <_malloc_r+0xe6>
  409714:	f020 0003 	bic.w	r0, r0, #3
  409718:	0064      	lsls	r4, r4, #1
  40971a:	421c      	tst	r4, r3
  40971c:	f100 0004 	add.w	r0, r0, #4
  409720:	d0fa      	beq.n	409718 <_malloc_r+0xdc>
  409722:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  409726:	46cc      	mov	ip, r9
  409728:	4680      	mov	r8, r0
  40972a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40972e:	459c      	cmp	ip, r3
  409730:	d107      	bne.n	409742 <_malloc_r+0x106>
  409732:	e16d      	b.n	409a10 <_malloc_r+0x3d4>
  409734:	2a00      	cmp	r2, #0
  409736:	f280 817b 	bge.w	409a30 <_malloc_r+0x3f4>
  40973a:	68db      	ldr	r3, [r3, #12]
  40973c:	459c      	cmp	ip, r3
  40973e:	f000 8167 	beq.w	409a10 <_malloc_r+0x3d4>
  409742:	6859      	ldr	r1, [r3, #4]
  409744:	f021 0103 	bic.w	r1, r1, #3
  409748:	1b8a      	subs	r2, r1, r6
  40974a:	2a0f      	cmp	r2, #15
  40974c:	ddf2      	ble.n	409734 <_malloc_r+0xf8>
  40974e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  409752:	f8d3 8008 	ldr.w	r8, [r3, #8]
  409756:	9300      	str	r3, [sp, #0]
  409758:	199c      	adds	r4, r3, r6
  40975a:	4628      	mov	r0, r5
  40975c:	f046 0601 	orr.w	r6, r6, #1
  409760:	f042 0501 	orr.w	r5, r2, #1
  409764:	605e      	str	r6, [r3, #4]
  409766:	f8c8 c00c 	str.w	ip, [r8, #12]
  40976a:	f8cc 8008 	str.w	r8, [ip, #8]
  40976e:	617c      	str	r4, [r7, #20]
  409770:	613c      	str	r4, [r7, #16]
  409772:	f8c4 e00c 	str.w	lr, [r4, #12]
  409776:	f8c4 e008 	str.w	lr, [r4, #8]
  40977a:	6065      	str	r5, [r4, #4]
  40977c:	505a      	str	r2, [r3, r1]
  40977e:	f000 fae1 	bl	409d44 <__malloc_unlock>
  409782:	9b00      	ldr	r3, [sp, #0]
  409784:	f103 0408 	add.w	r4, r3, #8
  409788:	e01e      	b.n	4097c8 <_malloc_r+0x18c>
  40978a:	2910      	cmp	r1, #16
  40978c:	d820      	bhi.n	4097d0 <_malloc_r+0x194>
  40978e:	f000 fad3 	bl	409d38 <__malloc_lock>
  409792:	2610      	movs	r6, #16
  409794:	2318      	movs	r3, #24
  409796:	2002      	movs	r0, #2
  409798:	4f79      	ldr	r7, [pc, #484]	; (409980 <_malloc_r+0x344>)
  40979a:	443b      	add	r3, r7
  40979c:	f1a3 0208 	sub.w	r2, r3, #8
  4097a0:	685c      	ldr	r4, [r3, #4]
  4097a2:	4294      	cmp	r4, r2
  4097a4:	f000 813d 	beq.w	409a22 <_malloc_r+0x3e6>
  4097a8:	6863      	ldr	r3, [r4, #4]
  4097aa:	68e1      	ldr	r1, [r4, #12]
  4097ac:	68a6      	ldr	r6, [r4, #8]
  4097ae:	f023 0303 	bic.w	r3, r3, #3
  4097b2:	4423      	add	r3, r4
  4097b4:	4628      	mov	r0, r5
  4097b6:	685a      	ldr	r2, [r3, #4]
  4097b8:	60f1      	str	r1, [r6, #12]
  4097ba:	f042 0201 	orr.w	r2, r2, #1
  4097be:	608e      	str	r6, [r1, #8]
  4097c0:	605a      	str	r2, [r3, #4]
  4097c2:	f000 fabf 	bl	409d44 <__malloc_unlock>
  4097c6:	3408      	adds	r4, #8
  4097c8:	4620      	mov	r0, r4
  4097ca:	b003      	add	sp, #12
  4097cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4097d0:	2400      	movs	r4, #0
  4097d2:	230c      	movs	r3, #12
  4097d4:	4620      	mov	r0, r4
  4097d6:	602b      	str	r3, [r5, #0]
  4097d8:	b003      	add	sp, #12
  4097da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4097de:	2040      	movs	r0, #64	; 0x40
  4097e0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4097e4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4097e8:	e74a      	b.n	409680 <_malloc_r+0x44>
  4097ea:	4423      	add	r3, r4
  4097ec:	68e1      	ldr	r1, [r4, #12]
  4097ee:	685a      	ldr	r2, [r3, #4]
  4097f0:	68a6      	ldr	r6, [r4, #8]
  4097f2:	f042 0201 	orr.w	r2, r2, #1
  4097f6:	60f1      	str	r1, [r6, #12]
  4097f8:	4628      	mov	r0, r5
  4097fa:	608e      	str	r6, [r1, #8]
  4097fc:	605a      	str	r2, [r3, #4]
  4097fe:	f000 faa1 	bl	409d44 <__malloc_unlock>
  409802:	3408      	adds	r4, #8
  409804:	4620      	mov	r0, r4
  409806:	b003      	add	sp, #12
  409808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40980c:	4423      	add	r3, r4
  40980e:	4628      	mov	r0, r5
  409810:	685a      	ldr	r2, [r3, #4]
  409812:	f042 0201 	orr.w	r2, r2, #1
  409816:	605a      	str	r2, [r3, #4]
  409818:	f000 fa94 	bl	409d44 <__malloc_unlock>
  40981c:	3408      	adds	r4, #8
  40981e:	4620      	mov	r0, r4
  409820:	b003      	add	sp, #12
  409822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409826:	68bc      	ldr	r4, [r7, #8]
  409828:	6863      	ldr	r3, [r4, #4]
  40982a:	f023 0803 	bic.w	r8, r3, #3
  40982e:	45b0      	cmp	r8, r6
  409830:	d304      	bcc.n	40983c <_malloc_r+0x200>
  409832:	eba8 0306 	sub.w	r3, r8, r6
  409836:	2b0f      	cmp	r3, #15
  409838:	f300 8085 	bgt.w	409946 <_malloc_r+0x30a>
  40983c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 409998 <_malloc_r+0x35c>
  409840:	4b50      	ldr	r3, [pc, #320]	; (409984 <_malloc_r+0x348>)
  409842:	f8d9 2000 	ldr.w	r2, [r9]
  409846:	681b      	ldr	r3, [r3, #0]
  409848:	3201      	adds	r2, #1
  40984a:	4433      	add	r3, r6
  40984c:	eb04 0a08 	add.w	sl, r4, r8
  409850:	f000 8155 	beq.w	409afe <_malloc_r+0x4c2>
  409854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  409858:	330f      	adds	r3, #15
  40985a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40985e:	f02b 0b0f 	bic.w	fp, fp, #15
  409862:	4659      	mov	r1, fp
  409864:	4628      	mov	r0, r5
  409866:	f000 fc19 	bl	40a09c <_sbrk_r>
  40986a:	1c41      	adds	r1, r0, #1
  40986c:	4602      	mov	r2, r0
  40986e:	f000 80fc 	beq.w	409a6a <_malloc_r+0x42e>
  409872:	4582      	cmp	sl, r0
  409874:	f200 80f7 	bhi.w	409a66 <_malloc_r+0x42a>
  409878:	4b43      	ldr	r3, [pc, #268]	; (409988 <_malloc_r+0x34c>)
  40987a:	6819      	ldr	r1, [r3, #0]
  40987c:	4459      	add	r1, fp
  40987e:	6019      	str	r1, [r3, #0]
  409880:	f000 814d 	beq.w	409b1e <_malloc_r+0x4e2>
  409884:	f8d9 0000 	ldr.w	r0, [r9]
  409888:	3001      	adds	r0, #1
  40988a:	bf1b      	ittet	ne
  40988c:	eba2 0a0a 	subne.w	sl, r2, sl
  409890:	4451      	addne	r1, sl
  409892:	f8c9 2000 	streq.w	r2, [r9]
  409896:	6019      	strne	r1, [r3, #0]
  409898:	f012 0107 	ands.w	r1, r2, #7
  40989c:	f000 8115 	beq.w	409aca <_malloc_r+0x48e>
  4098a0:	f1c1 0008 	rsb	r0, r1, #8
  4098a4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4098a8:	4402      	add	r2, r0
  4098aa:	3108      	adds	r1, #8
  4098ac:	eb02 090b 	add.w	r9, r2, fp
  4098b0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4098b4:	eba1 0909 	sub.w	r9, r1, r9
  4098b8:	4649      	mov	r1, r9
  4098ba:	4628      	mov	r0, r5
  4098bc:	9301      	str	r3, [sp, #4]
  4098be:	9200      	str	r2, [sp, #0]
  4098c0:	f000 fbec 	bl	40a09c <_sbrk_r>
  4098c4:	1c43      	adds	r3, r0, #1
  4098c6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4098ca:	f000 8143 	beq.w	409b54 <_malloc_r+0x518>
  4098ce:	1a80      	subs	r0, r0, r2
  4098d0:	4448      	add	r0, r9
  4098d2:	f040 0001 	orr.w	r0, r0, #1
  4098d6:	6819      	ldr	r1, [r3, #0]
  4098d8:	60ba      	str	r2, [r7, #8]
  4098da:	4449      	add	r1, r9
  4098dc:	42bc      	cmp	r4, r7
  4098de:	6050      	str	r0, [r2, #4]
  4098e0:	6019      	str	r1, [r3, #0]
  4098e2:	d017      	beq.n	409914 <_malloc_r+0x2d8>
  4098e4:	f1b8 0f0f 	cmp.w	r8, #15
  4098e8:	f240 80fb 	bls.w	409ae2 <_malloc_r+0x4a6>
  4098ec:	6860      	ldr	r0, [r4, #4]
  4098ee:	f1a8 020c 	sub.w	r2, r8, #12
  4098f2:	f022 0207 	bic.w	r2, r2, #7
  4098f6:	eb04 0e02 	add.w	lr, r4, r2
  4098fa:	f000 0001 	and.w	r0, r0, #1
  4098fe:	f04f 0c05 	mov.w	ip, #5
  409902:	4310      	orrs	r0, r2
  409904:	2a0f      	cmp	r2, #15
  409906:	6060      	str	r0, [r4, #4]
  409908:	f8ce c004 	str.w	ip, [lr, #4]
  40990c:	f8ce c008 	str.w	ip, [lr, #8]
  409910:	f200 8117 	bhi.w	409b42 <_malloc_r+0x506>
  409914:	4b1d      	ldr	r3, [pc, #116]	; (40998c <_malloc_r+0x350>)
  409916:	68bc      	ldr	r4, [r7, #8]
  409918:	681a      	ldr	r2, [r3, #0]
  40991a:	4291      	cmp	r1, r2
  40991c:	bf88      	it	hi
  40991e:	6019      	strhi	r1, [r3, #0]
  409920:	4b1b      	ldr	r3, [pc, #108]	; (409990 <_malloc_r+0x354>)
  409922:	681a      	ldr	r2, [r3, #0]
  409924:	4291      	cmp	r1, r2
  409926:	6862      	ldr	r2, [r4, #4]
  409928:	bf88      	it	hi
  40992a:	6019      	strhi	r1, [r3, #0]
  40992c:	f022 0203 	bic.w	r2, r2, #3
  409930:	4296      	cmp	r6, r2
  409932:	eba2 0306 	sub.w	r3, r2, r6
  409936:	d801      	bhi.n	40993c <_malloc_r+0x300>
  409938:	2b0f      	cmp	r3, #15
  40993a:	dc04      	bgt.n	409946 <_malloc_r+0x30a>
  40993c:	4628      	mov	r0, r5
  40993e:	f000 fa01 	bl	409d44 <__malloc_unlock>
  409942:	2400      	movs	r4, #0
  409944:	e740      	b.n	4097c8 <_malloc_r+0x18c>
  409946:	19a2      	adds	r2, r4, r6
  409948:	f043 0301 	orr.w	r3, r3, #1
  40994c:	f046 0601 	orr.w	r6, r6, #1
  409950:	6066      	str	r6, [r4, #4]
  409952:	4628      	mov	r0, r5
  409954:	60ba      	str	r2, [r7, #8]
  409956:	6053      	str	r3, [r2, #4]
  409958:	f000 f9f4 	bl	409d44 <__malloc_unlock>
  40995c:	3408      	adds	r4, #8
  40995e:	4620      	mov	r0, r4
  409960:	b003      	add	sp, #12
  409962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409966:	2b14      	cmp	r3, #20
  409968:	d971      	bls.n	409a4e <_malloc_r+0x412>
  40996a:	2b54      	cmp	r3, #84	; 0x54
  40996c:	f200 80a3 	bhi.w	409ab6 <_malloc_r+0x47a>
  409970:	0b33      	lsrs	r3, r6, #12
  409972:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  409976:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40997a:	00c3      	lsls	r3, r0, #3
  40997c:	e680      	b.n	409680 <_malloc_r+0x44>
  40997e:	bf00      	nop
  409980:	20400690 	.word	0x20400690
  409984:	20401024 	.word	0x20401024
  409988:	20400ff4 	.word	0x20400ff4
  40998c:	2040101c 	.word	0x2040101c
  409990:	20401020 	.word	0x20401020
  409994:	20400698 	.word	0x20400698
  409998:	20400a98 	.word	0x20400a98
  40999c:	0a5a      	lsrs	r2, r3, #9
  40999e:	2a04      	cmp	r2, #4
  4099a0:	d95b      	bls.n	409a5a <_malloc_r+0x41e>
  4099a2:	2a14      	cmp	r2, #20
  4099a4:	f200 80ae 	bhi.w	409b04 <_malloc_r+0x4c8>
  4099a8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4099ac:	00c9      	lsls	r1, r1, #3
  4099ae:	325b      	adds	r2, #91	; 0x5b
  4099b0:	eb07 0c01 	add.w	ip, r7, r1
  4099b4:	5879      	ldr	r1, [r7, r1]
  4099b6:	f1ac 0c08 	sub.w	ip, ip, #8
  4099ba:	458c      	cmp	ip, r1
  4099bc:	f000 8088 	beq.w	409ad0 <_malloc_r+0x494>
  4099c0:	684a      	ldr	r2, [r1, #4]
  4099c2:	f022 0203 	bic.w	r2, r2, #3
  4099c6:	4293      	cmp	r3, r2
  4099c8:	d273      	bcs.n	409ab2 <_malloc_r+0x476>
  4099ca:	6889      	ldr	r1, [r1, #8]
  4099cc:	458c      	cmp	ip, r1
  4099ce:	d1f7      	bne.n	4099c0 <_malloc_r+0x384>
  4099d0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4099d4:	687b      	ldr	r3, [r7, #4]
  4099d6:	60e2      	str	r2, [r4, #12]
  4099d8:	f8c4 c008 	str.w	ip, [r4, #8]
  4099dc:	6094      	str	r4, [r2, #8]
  4099de:	f8cc 400c 	str.w	r4, [ip, #12]
  4099e2:	e68f      	b.n	409704 <_malloc_r+0xc8>
  4099e4:	19a1      	adds	r1, r4, r6
  4099e6:	f046 0c01 	orr.w	ip, r6, #1
  4099ea:	f042 0601 	orr.w	r6, r2, #1
  4099ee:	f8c4 c004 	str.w	ip, [r4, #4]
  4099f2:	4628      	mov	r0, r5
  4099f4:	6179      	str	r1, [r7, #20]
  4099f6:	6139      	str	r1, [r7, #16]
  4099f8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4099fc:	f8c1 e008 	str.w	lr, [r1, #8]
  409a00:	604e      	str	r6, [r1, #4]
  409a02:	50e2      	str	r2, [r4, r3]
  409a04:	f000 f99e 	bl	409d44 <__malloc_unlock>
  409a08:	3408      	adds	r4, #8
  409a0a:	e6dd      	b.n	4097c8 <_malloc_r+0x18c>
  409a0c:	687b      	ldr	r3, [r7, #4]
  409a0e:	e679      	b.n	409704 <_malloc_r+0xc8>
  409a10:	f108 0801 	add.w	r8, r8, #1
  409a14:	f018 0f03 	tst.w	r8, #3
  409a18:	f10c 0c08 	add.w	ip, ip, #8
  409a1c:	f47f ae85 	bne.w	40972a <_malloc_r+0xee>
  409a20:	e02d      	b.n	409a7e <_malloc_r+0x442>
  409a22:	68dc      	ldr	r4, [r3, #12]
  409a24:	42a3      	cmp	r3, r4
  409a26:	bf08      	it	eq
  409a28:	3002      	addeq	r0, #2
  409a2a:	f43f ae3e 	beq.w	4096aa <_malloc_r+0x6e>
  409a2e:	e6bb      	b.n	4097a8 <_malloc_r+0x16c>
  409a30:	4419      	add	r1, r3
  409a32:	461c      	mov	r4, r3
  409a34:	684a      	ldr	r2, [r1, #4]
  409a36:	68db      	ldr	r3, [r3, #12]
  409a38:	f854 6f08 	ldr.w	r6, [r4, #8]!
  409a3c:	f042 0201 	orr.w	r2, r2, #1
  409a40:	604a      	str	r2, [r1, #4]
  409a42:	4628      	mov	r0, r5
  409a44:	60f3      	str	r3, [r6, #12]
  409a46:	609e      	str	r6, [r3, #8]
  409a48:	f000 f97c 	bl	409d44 <__malloc_unlock>
  409a4c:	e6bc      	b.n	4097c8 <_malloc_r+0x18c>
  409a4e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  409a52:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  409a56:	00c3      	lsls	r3, r0, #3
  409a58:	e612      	b.n	409680 <_malloc_r+0x44>
  409a5a:	099a      	lsrs	r2, r3, #6
  409a5c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  409a60:	00c9      	lsls	r1, r1, #3
  409a62:	3238      	adds	r2, #56	; 0x38
  409a64:	e7a4      	b.n	4099b0 <_malloc_r+0x374>
  409a66:	42bc      	cmp	r4, r7
  409a68:	d054      	beq.n	409b14 <_malloc_r+0x4d8>
  409a6a:	68bc      	ldr	r4, [r7, #8]
  409a6c:	6862      	ldr	r2, [r4, #4]
  409a6e:	f022 0203 	bic.w	r2, r2, #3
  409a72:	e75d      	b.n	409930 <_malloc_r+0x2f4>
  409a74:	f859 3908 	ldr.w	r3, [r9], #-8
  409a78:	4599      	cmp	r9, r3
  409a7a:	f040 8086 	bne.w	409b8a <_malloc_r+0x54e>
  409a7e:	f010 0f03 	tst.w	r0, #3
  409a82:	f100 30ff 	add.w	r0, r0, #4294967295
  409a86:	d1f5      	bne.n	409a74 <_malloc_r+0x438>
  409a88:	687b      	ldr	r3, [r7, #4]
  409a8a:	ea23 0304 	bic.w	r3, r3, r4
  409a8e:	607b      	str	r3, [r7, #4]
  409a90:	0064      	lsls	r4, r4, #1
  409a92:	429c      	cmp	r4, r3
  409a94:	f63f aec7 	bhi.w	409826 <_malloc_r+0x1ea>
  409a98:	2c00      	cmp	r4, #0
  409a9a:	f43f aec4 	beq.w	409826 <_malloc_r+0x1ea>
  409a9e:	421c      	tst	r4, r3
  409aa0:	4640      	mov	r0, r8
  409aa2:	f47f ae3e 	bne.w	409722 <_malloc_r+0xe6>
  409aa6:	0064      	lsls	r4, r4, #1
  409aa8:	421c      	tst	r4, r3
  409aaa:	f100 0004 	add.w	r0, r0, #4
  409aae:	d0fa      	beq.n	409aa6 <_malloc_r+0x46a>
  409ab0:	e637      	b.n	409722 <_malloc_r+0xe6>
  409ab2:	468c      	mov	ip, r1
  409ab4:	e78c      	b.n	4099d0 <_malloc_r+0x394>
  409ab6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  409aba:	d815      	bhi.n	409ae8 <_malloc_r+0x4ac>
  409abc:	0bf3      	lsrs	r3, r6, #15
  409abe:	f103 0078 	add.w	r0, r3, #120	; 0x78
  409ac2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  409ac6:	00c3      	lsls	r3, r0, #3
  409ac8:	e5da      	b.n	409680 <_malloc_r+0x44>
  409aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  409ace:	e6ed      	b.n	4098ac <_malloc_r+0x270>
  409ad0:	687b      	ldr	r3, [r7, #4]
  409ad2:	1092      	asrs	r2, r2, #2
  409ad4:	2101      	movs	r1, #1
  409ad6:	fa01 f202 	lsl.w	r2, r1, r2
  409ada:	4313      	orrs	r3, r2
  409adc:	607b      	str	r3, [r7, #4]
  409ade:	4662      	mov	r2, ip
  409ae0:	e779      	b.n	4099d6 <_malloc_r+0x39a>
  409ae2:	2301      	movs	r3, #1
  409ae4:	6053      	str	r3, [r2, #4]
  409ae6:	e729      	b.n	40993c <_malloc_r+0x300>
  409ae8:	f240 5254 	movw	r2, #1364	; 0x554
  409aec:	4293      	cmp	r3, r2
  409aee:	d822      	bhi.n	409b36 <_malloc_r+0x4fa>
  409af0:	0cb3      	lsrs	r3, r6, #18
  409af2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  409af6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  409afa:	00c3      	lsls	r3, r0, #3
  409afc:	e5c0      	b.n	409680 <_malloc_r+0x44>
  409afe:	f103 0b10 	add.w	fp, r3, #16
  409b02:	e6ae      	b.n	409862 <_malloc_r+0x226>
  409b04:	2a54      	cmp	r2, #84	; 0x54
  409b06:	d829      	bhi.n	409b5c <_malloc_r+0x520>
  409b08:	0b1a      	lsrs	r2, r3, #12
  409b0a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  409b0e:	00c9      	lsls	r1, r1, #3
  409b10:	326e      	adds	r2, #110	; 0x6e
  409b12:	e74d      	b.n	4099b0 <_malloc_r+0x374>
  409b14:	4b20      	ldr	r3, [pc, #128]	; (409b98 <_malloc_r+0x55c>)
  409b16:	6819      	ldr	r1, [r3, #0]
  409b18:	4459      	add	r1, fp
  409b1a:	6019      	str	r1, [r3, #0]
  409b1c:	e6b2      	b.n	409884 <_malloc_r+0x248>
  409b1e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  409b22:	2800      	cmp	r0, #0
  409b24:	f47f aeae 	bne.w	409884 <_malloc_r+0x248>
  409b28:	eb08 030b 	add.w	r3, r8, fp
  409b2c:	68ba      	ldr	r2, [r7, #8]
  409b2e:	f043 0301 	orr.w	r3, r3, #1
  409b32:	6053      	str	r3, [r2, #4]
  409b34:	e6ee      	b.n	409914 <_malloc_r+0x2d8>
  409b36:	207f      	movs	r0, #127	; 0x7f
  409b38:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  409b3c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  409b40:	e59e      	b.n	409680 <_malloc_r+0x44>
  409b42:	f104 0108 	add.w	r1, r4, #8
  409b46:	4628      	mov	r0, r5
  409b48:	9300      	str	r3, [sp, #0]
  409b4a:	f7ff fa59 	bl	409000 <_free_r>
  409b4e:	9b00      	ldr	r3, [sp, #0]
  409b50:	6819      	ldr	r1, [r3, #0]
  409b52:	e6df      	b.n	409914 <_malloc_r+0x2d8>
  409b54:	2001      	movs	r0, #1
  409b56:	f04f 0900 	mov.w	r9, #0
  409b5a:	e6bc      	b.n	4098d6 <_malloc_r+0x29a>
  409b5c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409b60:	d805      	bhi.n	409b6e <_malloc_r+0x532>
  409b62:	0bda      	lsrs	r2, r3, #15
  409b64:	f102 0178 	add.w	r1, r2, #120	; 0x78
  409b68:	00c9      	lsls	r1, r1, #3
  409b6a:	3277      	adds	r2, #119	; 0x77
  409b6c:	e720      	b.n	4099b0 <_malloc_r+0x374>
  409b6e:	f240 5154 	movw	r1, #1364	; 0x554
  409b72:	428a      	cmp	r2, r1
  409b74:	d805      	bhi.n	409b82 <_malloc_r+0x546>
  409b76:	0c9a      	lsrs	r2, r3, #18
  409b78:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  409b7c:	00c9      	lsls	r1, r1, #3
  409b7e:	327c      	adds	r2, #124	; 0x7c
  409b80:	e716      	b.n	4099b0 <_malloc_r+0x374>
  409b82:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  409b86:	227e      	movs	r2, #126	; 0x7e
  409b88:	e712      	b.n	4099b0 <_malloc_r+0x374>
  409b8a:	687b      	ldr	r3, [r7, #4]
  409b8c:	e780      	b.n	409a90 <_malloc_r+0x454>
  409b8e:	08f0      	lsrs	r0, r6, #3
  409b90:	f106 0308 	add.w	r3, r6, #8
  409b94:	e600      	b.n	409798 <_malloc_r+0x15c>
  409b96:	bf00      	nop
  409b98:	20400ff4 	.word	0x20400ff4

00409b9c <__ascii_mbtowc>:
  409b9c:	b082      	sub	sp, #8
  409b9e:	b149      	cbz	r1, 409bb4 <__ascii_mbtowc+0x18>
  409ba0:	b15a      	cbz	r2, 409bba <__ascii_mbtowc+0x1e>
  409ba2:	b16b      	cbz	r3, 409bc0 <__ascii_mbtowc+0x24>
  409ba4:	7813      	ldrb	r3, [r2, #0]
  409ba6:	600b      	str	r3, [r1, #0]
  409ba8:	7812      	ldrb	r2, [r2, #0]
  409baa:	1c10      	adds	r0, r2, #0
  409bac:	bf18      	it	ne
  409bae:	2001      	movne	r0, #1
  409bb0:	b002      	add	sp, #8
  409bb2:	4770      	bx	lr
  409bb4:	a901      	add	r1, sp, #4
  409bb6:	2a00      	cmp	r2, #0
  409bb8:	d1f3      	bne.n	409ba2 <__ascii_mbtowc+0x6>
  409bba:	4610      	mov	r0, r2
  409bbc:	b002      	add	sp, #8
  409bbe:	4770      	bx	lr
  409bc0:	f06f 0001 	mvn.w	r0, #1
  409bc4:	e7f4      	b.n	409bb0 <__ascii_mbtowc+0x14>
  409bc6:	bf00      	nop
	...

00409bd0 <memchr>:
  409bd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409bd4:	2a10      	cmp	r2, #16
  409bd6:	db2b      	blt.n	409c30 <memchr+0x60>
  409bd8:	f010 0f07 	tst.w	r0, #7
  409bdc:	d008      	beq.n	409bf0 <memchr+0x20>
  409bde:	f810 3b01 	ldrb.w	r3, [r0], #1
  409be2:	3a01      	subs	r2, #1
  409be4:	428b      	cmp	r3, r1
  409be6:	d02d      	beq.n	409c44 <memchr+0x74>
  409be8:	f010 0f07 	tst.w	r0, #7
  409bec:	b342      	cbz	r2, 409c40 <memchr+0x70>
  409bee:	d1f6      	bne.n	409bde <memchr+0xe>
  409bf0:	b4f0      	push	{r4, r5, r6, r7}
  409bf2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409bf6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  409bfa:	f022 0407 	bic.w	r4, r2, #7
  409bfe:	f07f 0700 	mvns.w	r7, #0
  409c02:	2300      	movs	r3, #0
  409c04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409c08:	3c08      	subs	r4, #8
  409c0a:	ea85 0501 	eor.w	r5, r5, r1
  409c0e:	ea86 0601 	eor.w	r6, r6, r1
  409c12:	fa85 f547 	uadd8	r5, r5, r7
  409c16:	faa3 f587 	sel	r5, r3, r7
  409c1a:	fa86 f647 	uadd8	r6, r6, r7
  409c1e:	faa5 f687 	sel	r6, r5, r7
  409c22:	b98e      	cbnz	r6, 409c48 <memchr+0x78>
  409c24:	d1ee      	bne.n	409c04 <memchr+0x34>
  409c26:	bcf0      	pop	{r4, r5, r6, r7}
  409c28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409c2c:	f002 0207 	and.w	r2, r2, #7
  409c30:	b132      	cbz	r2, 409c40 <memchr+0x70>
  409c32:	f810 3b01 	ldrb.w	r3, [r0], #1
  409c36:	3a01      	subs	r2, #1
  409c38:	ea83 0301 	eor.w	r3, r3, r1
  409c3c:	b113      	cbz	r3, 409c44 <memchr+0x74>
  409c3e:	d1f8      	bne.n	409c32 <memchr+0x62>
  409c40:	2000      	movs	r0, #0
  409c42:	4770      	bx	lr
  409c44:	3801      	subs	r0, #1
  409c46:	4770      	bx	lr
  409c48:	2d00      	cmp	r5, #0
  409c4a:	bf06      	itte	eq
  409c4c:	4635      	moveq	r5, r6
  409c4e:	3803      	subeq	r0, #3
  409c50:	3807      	subne	r0, #7
  409c52:	f015 0f01 	tst.w	r5, #1
  409c56:	d107      	bne.n	409c68 <memchr+0x98>
  409c58:	3001      	adds	r0, #1
  409c5a:	f415 7f80 	tst.w	r5, #256	; 0x100
  409c5e:	bf02      	ittt	eq
  409c60:	3001      	addeq	r0, #1
  409c62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409c66:	3001      	addeq	r0, #1
  409c68:	bcf0      	pop	{r4, r5, r6, r7}
  409c6a:	3801      	subs	r0, #1
  409c6c:	4770      	bx	lr
  409c6e:	bf00      	nop

00409c70 <memmove>:
  409c70:	4288      	cmp	r0, r1
  409c72:	b5f0      	push	{r4, r5, r6, r7, lr}
  409c74:	d90d      	bls.n	409c92 <memmove+0x22>
  409c76:	188b      	adds	r3, r1, r2
  409c78:	4298      	cmp	r0, r3
  409c7a:	d20a      	bcs.n	409c92 <memmove+0x22>
  409c7c:	1884      	adds	r4, r0, r2
  409c7e:	2a00      	cmp	r2, #0
  409c80:	d051      	beq.n	409d26 <memmove+0xb6>
  409c82:	4622      	mov	r2, r4
  409c84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409c88:	f802 4d01 	strb.w	r4, [r2, #-1]!
  409c8c:	4299      	cmp	r1, r3
  409c8e:	d1f9      	bne.n	409c84 <memmove+0x14>
  409c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409c92:	2a0f      	cmp	r2, #15
  409c94:	d948      	bls.n	409d28 <memmove+0xb8>
  409c96:	ea41 0300 	orr.w	r3, r1, r0
  409c9a:	079b      	lsls	r3, r3, #30
  409c9c:	d146      	bne.n	409d2c <memmove+0xbc>
  409c9e:	f100 0410 	add.w	r4, r0, #16
  409ca2:	f101 0310 	add.w	r3, r1, #16
  409ca6:	4615      	mov	r5, r2
  409ca8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  409cac:	f844 6c10 	str.w	r6, [r4, #-16]
  409cb0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409cb4:	f844 6c0c 	str.w	r6, [r4, #-12]
  409cb8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  409cbc:	f844 6c08 	str.w	r6, [r4, #-8]
  409cc0:	3d10      	subs	r5, #16
  409cc2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  409cc6:	f844 6c04 	str.w	r6, [r4, #-4]
  409cca:	2d0f      	cmp	r5, #15
  409ccc:	f103 0310 	add.w	r3, r3, #16
  409cd0:	f104 0410 	add.w	r4, r4, #16
  409cd4:	d8e8      	bhi.n	409ca8 <memmove+0x38>
  409cd6:	f1a2 0310 	sub.w	r3, r2, #16
  409cda:	f023 030f 	bic.w	r3, r3, #15
  409cde:	f002 0e0f 	and.w	lr, r2, #15
  409ce2:	3310      	adds	r3, #16
  409ce4:	f1be 0f03 	cmp.w	lr, #3
  409ce8:	4419      	add	r1, r3
  409cea:	4403      	add	r3, r0
  409cec:	d921      	bls.n	409d32 <memmove+0xc2>
  409cee:	1f1e      	subs	r6, r3, #4
  409cf0:	460d      	mov	r5, r1
  409cf2:	4674      	mov	r4, lr
  409cf4:	3c04      	subs	r4, #4
  409cf6:	f855 7b04 	ldr.w	r7, [r5], #4
  409cfa:	f846 7f04 	str.w	r7, [r6, #4]!
  409cfe:	2c03      	cmp	r4, #3
  409d00:	d8f8      	bhi.n	409cf4 <memmove+0x84>
  409d02:	f1ae 0404 	sub.w	r4, lr, #4
  409d06:	f024 0403 	bic.w	r4, r4, #3
  409d0a:	3404      	adds	r4, #4
  409d0c:	4421      	add	r1, r4
  409d0e:	4423      	add	r3, r4
  409d10:	f002 0203 	and.w	r2, r2, #3
  409d14:	b162      	cbz	r2, 409d30 <memmove+0xc0>
  409d16:	3b01      	subs	r3, #1
  409d18:	440a      	add	r2, r1
  409d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
  409d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
  409d22:	428a      	cmp	r2, r1
  409d24:	d1f9      	bne.n	409d1a <memmove+0xaa>
  409d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409d28:	4603      	mov	r3, r0
  409d2a:	e7f3      	b.n	409d14 <memmove+0xa4>
  409d2c:	4603      	mov	r3, r0
  409d2e:	e7f2      	b.n	409d16 <memmove+0xa6>
  409d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409d32:	4672      	mov	r2, lr
  409d34:	e7ee      	b.n	409d14 <memmove+0xa4>
  409d36:	bf00      	nop

00409d38 <__malloc_lock>:
  409d38:	4801      	ldr	r0, [pc, #4]	; (409d40 <__malloc_lock+0x8>)
  409d3a:	f7ff bbfb 	b.w	409534 <__retarget_lock_acquire_recursive>
  409d3e:	bf00      	nop
  409d40:	20402130 	.word	0x20402130

00409d44 <__malloc_unlock>:
  409d44:	4801      	ldr	r0, [pc, #4]	; (409d4c <__malloc_unlock+0x8>)
  409d46:	f7ff bbf7 	b.w	409538 <__retarget_lock_release_recursive>
  409d4a:	bf00      	nop
  409d4c:	20402130 	.word	0x20402130

00409d50 <_realloc_r>:
  409d50:	2900      	cmp	r1, #0
  409d52:	f000 8095 	beq.w	409e80 <_realloc_r+0x130>
  409d56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409d5a:	460d      	mov	r5, r1
  409d5c:	4616      	mov	r6, r2
  409d5e:	b083      	sub	sp, #12
  409d60:	4680      	mov	r8, r0
  409d62:	f106 070b 	add.w	r7, r6, #11
  409d66:	f7ff ffe7 	bl	409d38 <__malloc_lock>
  409d6a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  409d6e:	2f16      	cmp	r7, #22
  409d70:	f02e 0403 	bic.w	r4, lr, #3
  409d74:	f1a5 0908 	sub.w	r9, r5, #8
  409d78:	d83c      	bhi.n	409df4 <_realloc_r+0xa4>
  409d7a:	2210      	movs	r2, #16
  409d7c:	4617      	mov	r7, r2
  409d7e:	42be      	cmp	r6, r7
  409d80:	d83d      	bhi.n	409dfe <_realloc_r+0xae>
  409d82:	4294      	cmp	r4, r2
  409d84:	da43      	bge.n	409e0e <_realloc_r+0xbe>
  409d86:	4bc4      	ldr	r3, [pc, #784]	; (40a098 <_realloc_r+0x348>)
  409d88:	6899      	ldr	r1, [r3, #8]
  409d8a:	eb09 0004 	add.w	r0, r9, r4
  409d8e:	4288      	cmp	r0, r1
  409d90:	f000 80b4 	beq.w	409efc <_realloc_r+0x1ac>
  409d94:	6843      	ldr	r3, [r0, #4]
  409d96:	f023 0101 	bic.w	r1, r3, #1
  409d9a:	4401      	add	r1, r0
  409d9c:	6849      	ldr	r1, [r1, #4]
  409d9e:	07c9      	lsls	r1, r1, #31
  409da0:	d54c      	bpl.n	409e3c <_realloc_r+0xec>
  409da2:	f01e 0f01 	tst.w	lr, #1
  409da6:	f000 809b 	beq.w	409ee0 <_realloc_r+0x190>
  409daa:	4631      	mov	r1, r6
  409dac:	4640      	mov	r0, r8
  409dae:	f7ff fc45 	bl	40963c <_malloc_r>
  409db2:	4606      	mov	r6, r0
  409db4:	2800      	cmp	r0, #0
  409db6:	d03a      	beq.n	409e2e <_realloc_r+0xde>
  409db8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409dbc:	f023 0301 	bic.w	r3, r3, #1
  409dc0:	444b      	add	r3, r9
  409dc2:	f1a0 0208 	sub.w	r2, r0, #8
  409dc6:	429a      	cmp	r2, r3
  409dc8:	f000 8121 	beq.w	40a00e <_realloc_r+0x2be>
  409dcc:	1f22      	subs	r2, r4, #4
  409dce:	2a24      	cmp	r2, #36	; 0x24
  409dd0:	f200 8107 	bhi.w	409fe2 <_realloc_r+0x292>
  409dd4:	2a13      	cmp	r2, #19
  409dd6:	f200 80db 	bhi.w	409f90 <_realloc_r+0x240>
  409dda:	4603      	mov	r3, r0
  409ddc:	462a      	mov	r2, r5
  409dde:	6811      	ldr	r1, [r2, #0]
  409de0:	6019      	str	r1, [r3, #0]
  409de2:	6851      	ldr	r1, [r2, #4]
  409de4:	6059      	str	r1, [r3, #4]
  409de6:	6892      	ldr	r2, [r2, #8]
  409de8:	609a      	str	r2, [r3, #8]
  409dea:	4629      	mov	r1, r5
  409dec:	4640      	mov	r0, r8
  409dee:	f7ff f907 	bl	409000 <_free_r>
  409df2:	e01c      	b.n	409e2e <_realloc_r+0xde>
  409df4:	f027 0707 	bic.w	r7, r7, #7
  409df8:	2f00      	cmp	r7, #0
  409dfa:	463a      	mov	r2, r7
  409dfc:	dabf      	bge.n	409d7e <_realloc_r+0x2e>
  409dfe:	2600      	movs	r6, #0
  409e00:	230c      	movs	r3, #12
  409e02:	4630      	mov	r0, r6
  409e04:	f8c8 3000 	str.w	r3, [r8]
  409e08:	b003      	add	sp, #12
  409e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e0e:	462e      	mov	r6, r5
  409e10:	1be3      	subs	r3, r4, r7
  409e12:	2b0f      	cmp	r3, #15
  409e14:	d81e      	bhi.n	409e54 <_realloc_r+0x104>
  409e16:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409e1a:	f003 0301 	and.w	r3, r3, #1
  409e1e:	4323      	orrs	r3, r4
  409e20:	444c      	add	r4, r9
  409e22:	f8c9 3004 	str.w	r3, [r9, #4]
  409e26:	6863      	ldr	r3, [r4, #4]
  409e28:	f043 0301 	orr.w	r3, r3, #1
  409e2c:	6063      	str	r3, [r4, #4]
  409e2e:	4640      	mov	r0, r8
  409e30:	f7ff ff88 	bl	409d44 <__malloc_unlock>
  409e34:	4630      	mov	r0, r6
  409e36:	b003      	add	sp, #12
  409e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e3c:	f023 0303 	bic.w	r3, r3, #3
  409e40:	18e1      	adds	r1, r4, r3
  409e42:	4291      	cmp	r1, r2
  409e44:	db1f      	blt.n	409e86 <_realloc_r+0x136>
  409e46:	68c3      	ldr	r3, [r0, #12]
  409e48:	6882      	ldr	r2, [r0, #8]
  409e4a:	462e      	mov	r6, r5
  409e4c:	60d3      	str	r3, [r2, #12]
  409e4e:	460c      	mov	r4, r1
  409e50:	609a      	str	r2, [r3, #8]
  409e52:	e7dd      	b.n	409e10 <_realloc_r+0xc0>
  409e54:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409e58:	eb09 0107 	add.w	r1, r9, r7
  409e5c:	f002 0201 	and.w	r2, r2, #1
  409e60:	444c      	add	r4, r9
  409e62:	f043 0301 	orr.w	r3, r3, #1
  409e66:	4317      	orrs	r7, r2
  409e68:	f8c9 7004 	str.w	r7, [r9, #4]
  409e6c:	604b      	str	r3, [r1, #4]
  409e6e:	6863      	ldr	r3, [r4, #4]
  409e70:	f043 0301 	orr.w	r3, r3, #1
  409e74:	3108      	adds	r1, #8
  409e76:	6063      	str	r3, [r4, #4]
  409e78:	4640      	mov	r0, r8
  409e7a:	f7ff f8c1 	bl	409000 <_free_r>
  409e7e:	e7d6      	b.n	409e2e <_realloc_r+0xde>
  409e80:	4611      	mov	r1, r2
  409e82:	f7ff bbdb 	b.w	40963c <_malloc_r>
  409e86:	f01e 0f01 	tst.w	lr, #1
  409e8a:	d18e      	bne.n	409daa <_realloc_r+0x5a>
  409e8c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409e90:	eba9 0a01 	sub.w	sl, r9, r1
  409e94:	f8da 1004 	ldr.w	r1, [sl, #4]
  409e98:	f021 0103 	bic.w	r1, r1, #3
  409e9c:	440b      	add	r3, r1
  409e9e:	4423      	add	r3, r4
  409ea0:	4293      	cmp	r3, r2
  409ea2:	db25      	blt.n	409ef0 <_realloc_r+0x1a0>
  409ea4:	68c2      	ldr	r2, [r0, #12]
  409ea6:	6881      	ldr	r1, [r0, #8]
  409ea8:	4656      	mov	r6, sl
  409eaa:	60ca      	str	r2, [r1, #12]
  409eac:	6091      	str	r1, [r2, #8]
  409eae:	f8da 100c 	ldr.w	r1, [sl, #12]
  409eb2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409eb6:	1f22      	subs	r2, r4, #4
  409eb8:	2a24      	cmp	r2, #36	; 0x24
  409eba:	60c1      	str	r1, [r0, #12]
  409ebc:	6088      	str	r0, [r1, #8]
  409ebe:	f200 8094 	bhi.w	409fea <_realloc_r+0x29a>
  409ec2:	2a13      	cmp	r2, #19
  409ec4:	d96f      	bls.n	409fa6 <_realloc_r+0x256>
  409ec6:	6829      	ldr	r1, [r5, #0]
  409ec8:	f8ca 1008 	str.w	r1, [sl, #8]
  409ecc:	6869      	ldr	r1, [r5, #4]
  409ece:	f8ca 100c 	str.w	r1, [sl, #12]
  409ed2:	2a1b      	cmp	r2, #27
  409ed4:	f200 80a2 	bhi.w	40a01c <_realloc_r+0x2cc>
  409ed8:	3508      	adds	r5, #8
  409eda:	f10a 0210 	add.w	r2, sl, #16
  409ede:	e063      	b.n	409fa8 <_realloc_r+0x258>
  409ee0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  409ee4:	eba9 0a03 	sub.w	sl, r9, r3
  409ee8:	f8da 1004 	ldr.w	r1, [sl, #4]
  409eec:	f021 0103 	bic.w	r1, r1, #3
  409ef0:	1863      	adds	r3, r4, r1
  409ef2:	4293      	cmp	r3, r2
  409ef4:	f6ff af59 	blt.w	409daa <_realloc_r+0x5a>
  409ef8:	4656      	mov	r6, sl
  409efa:	e7d8      	b.n	409eae <_realloc_r+0x15e>
  409efc:	6841      	ldr	r1, [r0, #4]
  409efe:	f021 0b03 	bic.w	fp, r1, #3
  409f02:	44a3      	add	fp, r4
  409f04:	f107 0010 	add.w	r0, r7, #16
  409f08:	4583      	cmp	fp, r0
  409f0a:	da56      	bge.n	409fba <_realloc_r+0x26a>
  409f0c:	f01e 0f01 	tst.w	lr, #1
  409f10:	f47f af4b 	bne.w	409daa <_realloc_r+0x5a>
  409f14:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409f18:	eba9 0a01 	sub.w	sl, r9, r1
  409f1c:	f8da 1004 	ldr.w	r1, [sl, #4]
  409f20:	f021 0103 	bic.w	r1, r1, #3
  409f24:	448b      	add	fp, r1
  409f26:	4558      	cmp	r0, fp
  409f28:	dce2      	bgt.n	409ef0 <_realloc_r+0x1a0>
  409f2a:	4656      	mov	r6, sl
  409f2c:	f8da 100c 	ldr.w	r1, [sl, #12]
  409f30:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409f34:	1f22      	subs	r2, r4, #4
  409f36:	2a24      	cmp	r2, #36	; 0x24
  409f38:	60c1      	str	r1, [r0, #12]
  409f3a:	6088      	str	r0, [r1, #8]
  409f3c:	f200 808f 	bhi.w	40a05e <_realloc_r+0x30e>
  409f40:	2a13      	cmp	r2, #19
  409f42:	f240 808a 	bls.w	40a05a <_realloc_r+0x30a>
  409f46:	6829      	ldr	r1, [r5, #0]
  409f48:	f8ca 1008 	str.w	r1, [sl, #8]
  409f4c:	6869      	ldr	r1, [r5, #4]
  409f4e:	f8ca 100c 	str.w	r1, [sl, #12]
  409f52:	2a1b      	cmp	r2, #27
  409f54:	f200 808a 	bhi.w	40a06c <_realloc_r+0x31c>
  409f58:	3508      	adds	r5, #8
  409f5a:	f10a 0210 	add.w	r2, sl, #16
  409f5e:	6829      	ldr	r1, [r5, #0]
  409f60:	6011      	str	r1, [r2, #0]
  409f62:	6869      	ldr	r1, [r5, #4]
  409f64:	6051      	str	r1, [r2, #4]
  409f66:	68a9      	ldr	r1, [r5, #8]
  409f68:	6091      	str	r1, [r2, #8]
  409f6a:	eb0a 0107 	add.w	r1, sl, r7
  409f6e:	ebab 0207 	sub.w	r2, fp, r7
  409f72:	f042 0201 	orr.w	r2, r2, #1
  409f76:	6099      	str	r1, [r3, #8]
  409f78:	604a      	str	r2, [r1, #4]
  409f7a:	f8da 3004 	ldr.w	r3, [sl, #4]
  409f7e:	f003 0301 	and.w	r3, r3, #1
  409f82:	431f      	orrs	r7, r3
  409f84:	4640      	mov	r0, r8
  409f86:	f8ca 7004 	str.w	r7, [sl, #4]
  409f8a:	f7ff fedb 	bl	409d44 <__malloc_unlock>
  409f8e:	e751      	b.n	409e34 <_realloc_r+0xe4>
  409f90:	682b      	ldr	r3, [r5, #0]
  409f92:	6003      	str	r3, [r0, #0]
  409f94:	686b      	ldr	r3, [r5, #4]
  409f96:	6043      	str	r3, [r0, #4]
  409f98:	2a1b      	cmp	r2, #27
  409f9a:	d82d      	bhi.n	409ff8 <_realloc_r+0x2a8>
  409f9c:	f100 0308 	add.w	r3, r0, #8
  409fa0:	f105 0208 	add.w	r2, r5, #8
  409fa4:	e71b      	b.n	409dde <_realloc_r+0x8e>
  409fa6:	4632      	mov	r2, r6
  409fa8:	6829      	ldr	r1, [r5, #0]
  409faa:	6011      	str	r1, [r2, #0]
  409fac:	6869      	ldr	r1, [r5, #4]
  409fae:	6051      	str	r1, [r2, #4]
  409fb0:	68a9      	ldr	r1, [r5, #8]
  409fb2:	6091      	str	r1, [r2, #8]
  409fb4:	461c      	mov	r4, r3
  409fb6:	46d1      	mov	r9, sl
  409fb8:	e72a      	b.n	409e10 <_realloc_r+0xc0>
  409fba:	eb09 0107 	add.w	r1, r9, r7
  409fbe:	ebab 0b07 	sub.w	fp, fp, r7
  409fc2:	f04b 0201 	orr.w	r2, fp, #1
  409fc6:	6099      	str	r1, [r3, #8]
  409fc8:	604a      	str	r2, [r1, #4]
  409fca:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409fce:	f003 0301 	and.w	r3, r3, #1
  409fd2:	431f      	orrs	r7, r3
  409fd4:	4640      	mov	r0, r8
  409fd6:	f845 7c04 	str.w	r7, [r5, #-4]
  409fda:	f7ff feb3 	bl	409d44 <__malloc_unlock>
  409fde:	462e      	mov	r6, r5
  409fe0:	e728      	b.n	409e34 <_realloc_r+0xe4>
  409fe2:	4629      	mov	r1, r5
  409fe4:	f7ff fe44 	bl	409c70 <memmove>
  409fe8:	e6ff      	b.n	409dea <_realloc_r+0x9a>
  409fea:	4629      	mov	r1, r5
  409fec:	4630      	mov	r0, r6
  409fee:	461c      	mov	r4, r3
  409ff0:	46d1      	mov	r9, sl
  409ff2:	f7ff fe3d 	bl	409c70 <memmove>
  409ff6:	e70b      	b.n	409e10 <_realloc_r+0xc0>
  409ff8:	68ab      	ldr	r3, [r5, #8]
  409ffa:	6083      	str	r3, [r0, #8]
  409ffc:	68eb      	ldr	r3, [r5, #12]
  409ffe:	60c3      	str	r3, [r0, #12]
  40a000:	2a24      	cmp	r2, #36	; 0x24
  40a002:	d017      	beq.n	40a034 <_realloc_r+0x2e4>
  40a004:	f100 0310 	add.w	r3, r0, #16
  40a008:	f105 0210 	add.w	r2, r5, #16
  40a00c:	e6e7      	b.n	409dde <_realloc_r+0x8e>
  40a00e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40a012:	f023 0303 	bic.w	r3, r3, #3
  40a016:	441c      	add	r4, r3
  40a018:	462e      	mov	r6, r5
  40a01a:	e6f9      	b.n	409e10 <_realloc_r+0xc0>
  40a01c:	68a9      	ldr	r1, [r5, #8]
  40a01e:	f8ca 1010 	str.w	r1, [sl, #16]
  40a022:	68e9      	ldr	r1, [r5, #12]
  40a024:	f8ca 1014 	str.w	r1, [sl, #20]
  40a028:	2a24      	cmp	r2, #36	; 0x24
  40a02a:	d00c      	beq.n	40a046 <_realloc_r+0x2f6>
  40a02c:	3510      	adds	r5, #16
  40a02e:	f10a 0218 	add.w	r2, sl, #24
  40a032:	e7b9      	b.n	409fa8 <_realloc_r+0x258>
  40a034:	692b      	ldr	r3, [r5, #16]
  40a036:	6103      	str	r3, [r0, #16]
  40a038:	696b      	ldr	r3, [r5, #20]
  40a03a:	6143      	str	r3, [r0, #20]
  40a03c:	f105 0218 	add.w	r2, r5, #24
  40a040:	f100 0318 	add.w	r3, r0, #24
  40a044:	e6cb      	b.n	409dde <_realloc_r+0x8e>
  40a046:	692a      	ldr	r2, [r5, #16]
  40a048:	f8ca 2018 	str.w	r2, [sl, #24]
  40a04c:	696a      	ldr	r2, [r5, #20]
  40a04e:	f8ca 201c 	str.w	r2, [sl, #28]
  40a052:	3518      	adds	r5, #24
  40a054:	f10a 0220 	add.w	r2, sl, #32
  40a058:	e7a6      	b.n	409fa8 <_realloc_r+0x258>
  40a05a:	4632      	mov	r2, r6
  40a05c:	e77f      	b.n	409f5e <_realloc_r+0x20e>
  40a05e:	4629      	mov	r1, r5
  40a060:	4630      	mov	r0, r6
  40a062:	9301      	str	r3, [sp, #4]
  40a064:	f7ff fe04 	bl	409c70 <memmove>
  40a068:	9b01      	ldr	r3, [sp, #4]
  40a06a:	e77e      	b.n	409f6a <_realloc_r+0x21a>
  40a06c:	68a9      	ldr	r1, [r5, #8]
  40a06e:	f8ca 1010 	str.w	r1, [sl, #16]
  40a072:	68e9      	ldr	r1, [r5, #12]
  40a074:	f8ca 1014 	str.w	r1, [sl, #20]
  40a078:	2a24      	cmp	r2, #36	; 0x24
  40a07a:	d003      	beq.n	40a084 <_realloc_r+0x334>
  40a07c:	3510      	adds	r5, #16
  40a07e:	f10a 0218 	add.w	r2, sl, #24
  40a082:	e76c      	b.n	409f5e <_realloc_r+0x20e>
  40a084:	692a      	ldr	r2, [r5, #16]
  40a086:	f8ca 2018 	str.w	r2, [sl, #24]
  40a08a:	696a      	ldr	r2, [r5, #20]
  40a08c:	f8ca 201c 	str.w	r2, [sl, #28]
  40a090:	3518      	adds	r5, #24
  40a092:	f10a 0220 	add.w	r2, sl, #32
  40a096:	e762      	b.n	409f5e <_realloc_r+0x20e>
  40a098:	20400690 	.word	0x20400690

0040a09c <_sbrk_r>:
  40a09c:	b538      	push	{r3, r4, r5, lr}
  40a09e:	4c07      	ldr	r4, [pc, #28]	; (40a0bc <_sbrk_r+0x20>)
  40a0a0:	2300      	movs	r3, #0
  40a0a2:	4605      	mov	r5, r0
  40a0a4:	4608      	mov	r0, r1
  40a0a6:	6023      	str	r3, [r4, #0]
  40a0a8:	f7f9 fcb2 	bl	403a10 <_sbrk>
  40a0ac:	1c43      	adds	r3, r0, #1
  40a0ae:	d000      	beq.n	40a0b2 <_sbrk_r+0x16>
  40a0b0:	bd38      	pop	{r3, r4, r5, pc}
  40a0b2:	6823      	ldr	r3, [r4, #0]
  40a0b4:	2b00      	cmp	r3, #0
  40a0b6:	d0fb      	beq.n	40a0b0 <_sbrk_r+0x14>
  40a0b8:	602b      	str	r3, [r5, #0]
  40a0ba:	bd38      	pop	{r3, r4, r5, pc}
  40a0bc:	20402144 	.word	0x20402144

0040a0c0 <__sread>:
  40a0c0:	b510      	push	{r4, lr}
  40a0c2:	460c      	mov	r4, r1
  40a0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a0c8:	f000 fa80 	bl	40a5cc <_read_r>
  40a0cc:	2800      	cmp	r0, #0
  40a0ce:	db03      	blt.n	40a0d8 <__sread+0x18>
  40a0d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40a0d2:	4403      	add	r3, r0
  40a0d4:	6523      	str	r3, [r4, #80]	; 0x50
  40a0d6:	bd10      	pop	{r4, pc}
  40a0d8:	89a3      	ldrh	r3, [r4, #12]
  40a0da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40a0de:	81a3      	strh	r3, [r4, #12]
  40a0e0:	bd10      	pop	{r4, pc}
  40a0e2:	bf00      	nop

0040a0e4 <__swrite>:
  40a0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a0e8:	4616      	mov	r6, r2
  40a0ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40a0ee:	461f      	mov	r7, r3
  40a0f0:	05d3      	lsls	r3, r2, #23
  40a0f2:	460c      	mov	r4, r1
  40a0f4:	4605      	mov	r5, r0
  40a0f6:	d507      	bpl.n	40a108 <__swrite+0x24>
  40a0f8:	2200      	movs	r2, #0
  40a0fa:	2302      	movs	r3, #2
  40a0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a100:	f000 fa4e 	bl	40a5a0 <_lseek_r>
  40a104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a10c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40a110:	81a2      	strh	r2, [r4, #12]
  40a112:	463b      	mov	r3, r7
  40a114:	4632      	mov	r2, r6
  40a116:	4628      	mov	r0, r5
  40a118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a11c:	f000 b92e 	b.w	40a37c <_write_r>

0040a120 <__sseek>:
  40a120:	b510      	push	{r4, lr}
  40a122:	460c      	mov	r4, r1
  40a124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a128:	f000 fa3a 	bl	40a5a0 <_lseek_r>
  40a12c:	89a3      	ldrh	r3, [r4, #12]
  40a12e:	1c42      	adds	r2, r0, #1
  40a130:	bf0e      	itee	eq
  40a132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40a136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40a13a:	6520      	strne	r0, [r4, #80]	; 0x50
  40a13c:	81a3      	strh	r3, [r4, #12]
  40a13e:	bd10      	pop	{r4, pc}

0040a140 <__sclose>:
  40a140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a144:	f000 b992 	b.w	40a46c <_close_r>
	...

0040a180 <strlen>:
  40a180:	f890 f000 	pld	[r0]
  40a184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40a188:	f020 0107 	bic.w	r1, r0, #7
  40a18c:	f06f 0c00 	mvn.w	ip, #0
  40a190:	f010 0407 	ands.w	r4, r0, #7
  40a194:	f891 f020 	pld	[r1, #32]
  40a198:	f040 8049 	bne.w	40a22e <strlen+0xae>
  40a19c:	f04f 0400 	mov.w	r4, #0
  40a1a0:	f06f 0007 	mvn.w	r0, #7
  40a1a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  40a1a8:	f891 f040 	pld	[r1, #64]	; 0x40
  40a1ac:	f100 0008 	add.w	r0, r0, #8
  40a1b0:	fa82 f24c 	uadd8	r2, r2, ip
  40a1b4:	faa4 f28c 	sel	r2, r4, ip
  40a1b8:	fa83 f34c 	uadd8	r3, r3, ip
  40a1bc:	faa2 f38c 	sel	r3, r2, ip
  40a1c0:	bb4b      	cbnz	r3, 40a216 <strlen+0x96>
  40a1c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40a1c6:	fa82 f24c 	uadd8	r2, r2, ip
  40a1ca:	f100 0008 	add.w	r0, r0, #8
  40a1ce:	faa4 f28c 	sel	r2, r4, ip
  40a1d2:	fa83 f34c 	uadd8	r3, r3, ip
  40a1d6:	faa2 f38c 	sel	r3, r2, ip
  40a1da:	b9e3      	cbnz	r3, 40a216 <strlen+0x96>
  40a1dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40a1e0:	fa82 f24c 	uadd8	r2, r2, ip
  40a1e4:	f100 0008 	add.w	r0, r0, #8
  40a1e8:	faa4 f28c 	sel	r2, r4, ip
  40a1ec:	fa83 f34c 	uadd8	r3, r3, ip
  40a1f0:	faa2 f38c 	sel	r3, r2, ip
  40a1f4:	b97b      	cbnz	r3, 40a216 <strlen+0x96>
  40a1f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40a1fa:	f101 0120 	add.w	r1, r1, #32
  40a1fe:	fa82 f24c 	uadd8	r2, r2, ip
  40a202:	f100 0008 	add.w	r0, r0, #8
  40a206:	faa4 f28c 	sel	r2, r4, ip
  40a20a:	fa83 f34c 	uadd8	r3, r3, ip
  40a20e:	faa2 f38c 	sel	r3, r2, ip
  40a212:	2b00      	cmp	r3, #0
  40a214:	d0c6      	beq.n	40a1a4 <strlen+0x24>
  40a216:	2a00      	cmp	r2, #0
  40a218:	bf04      	itt	eq
  40a21a:	3004      	addeq	r0, #4
  40a21c:	461a      	moveq	r2, r3
  40a21e:	ba12      	rev	r2, r2
  40a220:	fab2 f282 	clz	r2, r2
  40a224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40a228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40a22c:	4770      	bx	lr
  40a22e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40a232:	f004 0503 	and.w	r5, r4, #3
  40a236:	f1c4 0000 	rsb	r0, r4, #0
  40a23a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40a23e:	f014 0f04 	tst.w	r4, #4
  40a242:	f891 f040 	pld	[r1, #64]	; 0x40
  40a246:	fa0c f505 	lsl.w	r5, ip, r5
  40a24a:	ea62 0205 	orn	r2, r2, r5
  40a24e:	bf1c      	itt	ne
  40a250:	ea63 0305 	ornne	r3, r3, r5
  40a254:	4662      	movne	r2, ip
  40a256:	f04f 0400 	mov.w	r4, #0
  40a25a:	e7a9      	b.n	40a1b0 <strlen+0x30>

0040a25c <__swbuf_r>:
  40a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a25e:	460d      	mov	r5, r1
  40a260:	4614      	mov	r4, r2
  40a262:	4606      	mov	r6, r0
  40a264:	b110      	cbz	r0, 40a26c <__swbuf_r+0x10>
  40a266:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a268:	2b00      	cmp	r3, #0
  40a26a:	d04b      	beq.n	40a304 <__swbuf_r+0xa8>
  40a26c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a270:	69a3      	ldr	r3, [r4, #24]
  40a272:	60a3      	str	r3, [r4, #8]
  40a274:	b291      	uxth	r1, r2
  40a276:	0708      	lsls	r0, r1, #28
  40a278:	d539      	bpl.n	40a2ee <__swbuf_r+0x92>
  40a27a:	6923      	ldr	r3, [r4, #16]
  40a27c:	2b00      	cmp	r3, #0
  40a27e:	d036      	beq.n	40a2ee <__swbuf_r+0x92>
  40a280:	b2ed      	uxtb	r5, r5
  40a282:	0489      	lsls	r1, r1, #18
  40a284:	462f      	mov	r7, r5
  40a286:	d515      	bpl.n	40a2b4 <__swbuf_r+0x58>
  40a288:	6822      	ldr	r2, [r4, #0]
  40a28a:	6961      	ldr	r1, [r4, #20]
  40a28c:	1ad3      	subs	r3, r2, r3
  40a28e:	428b      	cmp	r3, r1
  40a290:	da1c      	bge.n	40a2cc <__swbuf_r+0x70>
  40a292:	3301      	adds	r3, #1
  40a294:	68a1      	ldr	r1, [r4, #8]
  40a296:	1c50      	adds	r0, r2, #1
  40a298:	3901      	subs	r1, #1
  40a29a:	60a1      	str	r1, [r4, #8]
  40a29c:	6020      	str	r0, [r4, #0]
  40a29e:	7015      	strb	r5, [r2, #0]
  40a2a0:	6962      	ldr	r2, [r4, #20]
  40a2a2:	429a      	cmp	r2, r3
  40a2a4:	d01a      	beq.n	40a2dc <__swbuf_r+0x80>
  40a2a6:	89a3      	ldrh	r3, [r4, #12]
  40a2a8:	07db      	lsls	r3, r3, #31
  40a2aa:	d501      	bpl.n	40a2b0 <__swbuf_r+0x54>
  40a2ac:	2d0a      	cmp	r5, #10
  40a2ae:	d015      	beq.n	40a2dc <__swbuf_r+0x80>
  40a2b0:	4638      	mov	r0, r7
  40a2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a2b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40a2b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a2ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40a2be:	81a2      	strh	r2, [r4, #12]
  40a2c0:	6822      	ldr	r2, [r4, #0]
  40a2c2:	6661      	str	r1, [r4, #100]	; 0x64
  40a2c4:	6961      	ldr	r1, [r4, #20]
  40a2c6:	1ad3      	subs	r3, r2, r3
  40a2c8:	428b      	cmp	r3, r1
  40a2ca:	dbe2      	blt.n	40a292 <__swbuf_r+0x36>
  40a2cc:	4621      	mov	r1, r4
  40a2ce:	4630      	mov	r0, r6
  40a2d0:	f7fe fd18 	bl	408d04 <_fflush_r>
  40a2d4:	b940      	cbnz	r0, 40a2e8 <__swbuf_r+0x8c>
  40a2d6:	6822      	ldr	r2, [r4, #0]
  40a2d8:	2301      	movs	r3, #1
  40a2da:	e7db      	b.n	40a294 <__swbuf_r+0x38>
  40a2dc:	4621      	mov	r1, r4
  40a2de:	4630      	mov	r0, r6
  40a2e0:	f7fe fd10 	bl	408d04 <_fflush_r>
  40a2e4:	2800      	cmp	r0, #0
  40a2e6:	d0e3      	beq.n	40a2b0 <__swbuf_r+0x54>
  40a2e8:	f04f 37ff 	mov.w	r7, #4294967295
  40a2ec:	e7e0      	b.n	40a2b0 <__swbuf_r+0x54>
  40a2ee:	4621      	mov	r1, r4
  40a2f0:	4630      	mov	r0, r6
  40a2f2:	f7fe fbf3 	bl	408adc <__swsetup_r>
  40a2f6:	2800      	cmp	r0, #0
  40a2f8:	d1f6      	bne.n	40a2e8 <__swbuf_r+0x8c>
  40a2fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a2fe:	6923      	ldr	r3, [r4, #16]
  40a300:	b291      	uxth	r1, r2
  40a302:	e7bd      	b.n	40a280 <__swbuf_r+0x24>
  40a304:	f7fe fd56 	bl	408db4 <__sinit>
  40a308:	e7b0      	b.n	40a26c <__swbuf_r+0x10>
  40a30a:	bf00      	nop

0040a30c <_wcrtomb_r>:
  40a30c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a30e:	4606      	mov	r6, r0
  40a310:	b085      	sub	sp, #20
  40a312:	461f      	mov	r7, r3
  40a314:	b189      	cbz	r1, 40a33a <_wcrtomb_r+0x2e>
  40a316:	4c10      	ldr	r4, [pc, #64]	; (40a358 <_wcrtomb_r+0x4c>)
  40a318:	4d10      	ldr	r5, [pc, #64]	; (40a35c <_wcrtomb_r+0x50>)
  40a31a:	6824      	ldr	r4, [r4, #0]
  40a31c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40a31e:	2c00      	cmp	r4, #0
  40a320:	bf08      	it	eq
  40a322:	462c      	moveq	r4, r5
  40a324:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40a328:	47a0      	blx	r4
  40a32a:	1c43      	adds	r3, r0, #1
  40a32c:	d103      	bne.n	40a336 <_wcrtomb_r+0x2a>
  40a32e:	2200      	movs	r2, #0
  40a330:	238a      	movs	r3, #138	; 0x8a
  40a332:	603a      	str	r2, [r7, #0]
  40a334:	6033      	str	r3, [r6, #0]
  40a336:	b005      	add	sp, #20
  40a338:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a33a:	460c      	mov	r4, r1
  40a33c:	4906      	ldr	r1, [pc, #24]	; (40a358 <_wcrtomb_r+0x4c>)
  40a33e:	4a07      	ldr	r2, [pc, #28]	; (40a35c <_wcrtomb_r+0x50>)
  40a340:	6809      	ldr	r1, [r1, #0]
  40a342:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40a344:	2900      	cmp	r1, #0
  40a346:	bf08      	it	eq
  40a348:	4611      	moveq	r1, r2
  40a34a:	4622      	mov	r2, r4
  40a34c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40a350:	a901      	add	r1, sp, #4
  40a352:	47a0      	blx	r4
  40a354:	e7e9      	b.n	40a32a <_wcrtomb_r+0x1e>
  40a356:	bf00      	nop
  40a358:	204000f0 	.word	0x204000f0
  40a35c:	20400524 	.word	0x20400524

0040a360 <__ascii_wctomb>:
  40a360:	b121      	cbz	r1, 40a36c <__ascii_wctomb+0xc>
  40a362:	2aff      	cmp	r2, #255	; 0xff
  40a364:	d804      	bhi.n	40a370 <__ascii_wctomb+0x10>
  40a366:	700a      	strb	r2, [r1, #0]
  40a368:	2001      	movs	r0, #1
  40a36a:	4770      	bx	lr
  40a36c:	4608      	mov	r0, r1
  40a36e:	4770      	bx	lr
  40a370:	238a      	movs	r3, #138	; 0x8a
  40a372:	6003      	str	r3, [r0, #0]
  40a374:	f04f 30ff 	mov.w	r0, #4294967295
  40a378:	4770      	bx	lr
  40a37a:	bf00      	nop

0040a37c <_write_r>:
  40a37c:	b570      	push	{r4, r5, r6, lr}
  40a37e:	460d      	mov	r5, r1
  40a380:	4c08      	ldr	r4, [pc, #32]	; (40a3a4 <_write_r+0x28>)
  40a382:	4611      	mov	r1, r2
  40a384:	4606      	mov	r6, r0
  40a386:	461a      	mov	r2, r3
  40a388:	4628      	mov	r0, r5
  40a38a:	2300      	movs	r3, #0
  40a38c:	6023      	str	r3, [r4, #0]
  40a38e:	f7f6 ff27 	bl	4011e0 <_write>
  40a392:	1c43      	adds	r3, r0, #1
  40a394:	d000      	beq.n	40a398 <_write_r+0x1c>
  40a396:	bd70      	pop	{r4, r5, r6, pc}
  40a398:	6823      	ldr	r3, [r4, #0]
  40a39a:	2b00      	cmp	r3, #0
  40a39c:	d0fb      	beq.n	40a396 <_write_r+0x1a>
  40a39e:	6033      	str	r3, [r6, #0]
  40a3a0:	bd70      	pop	{r4, r5, r6, pc}
  40a3a2:	bf00      	nop
  40a3a4:	20402144 	.word	0x20402144

0040a3a8 <__register_exitproc>:
  40a3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a3ac:	4d2c      	ldr	r5, [pc, #176]	; (40a460 <__register_exitproc+0xb8>)
  40a3ae:	4606      	mov	r6, r0
  40a3b0:	6828      	ldr	r0, [r5, #0]
  40a3b2:	4698      	mov	r8, r3
  40a3b4:	460f      	mov	r7, r1
  40a3b6:	4691      	mov	r9, r2
  40a3b8:	f7ff f8bc 	bl	409534 <__retarget_lock_acquire_recursive>
  40a3bc:	4b29      	ldr	r3, [pc, #164]	; (40a464 <__register_exitproc+0xbc>)
  40a3be:	681c      	ldr	r4, [r3, #0]
  40a3c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40a3c4:	2b00      	cmp	r3, #0
  40a3c6:	d03e      	beq.n	40a446 <__register_exitproc+0x9e>
  40a3c8:	685a      	ldr	r2, [r3, #4]
  40a3ca:	2a1f      	cmp	r2, #31
  40a3cc:	dc1c      	bgt.n	40a408 <__register_exitproc+0x60>
  40a3ce:	f102 0e01 	add.w	lr, r2, #1
  40a3d2:	b176      	cbz	r6, 40a3f2 <__register_exitproc+0x4a>
  40a3d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40a3d8:	2401      	movs	r4, #1
  40a3da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40a3de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40a3e2:	4094      	lsls	r4, r2
  40a3e4:	4320      	orrs	r0, r4
  40a3e6:	2e02      	cmp	r6, #2
  40a3e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40a3ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40a3f0:	d023      	beq.n	40a43a <__register_exitproc+0x92>
  40a3f2:	3202      	adds	r2, #2
  40a3f4:	f8c3 e004 	str.w	lr, [r3, #4]
  40a3f8:	6828      	ldr	r0, [r5, #0]
  40a3fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40a3fe:	f7ff f89b 	bl	409538 <__retarget_lock_release_recursive>
  40a402:	2000      	movs	r0, #0
  40a404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a408:	4b17      	ldr	r3, [pc, #92]	; (40a468 <__register_exitproc+0xc0>)
  40a40a:	b30b      	cbz	r3, 40a450 <__register_exitproc+0xa8>
  40a40c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40a410:	f7ff f90c 	bl	40962c <malloc>
  40a414:	4603      	mov	r3, r0
  40a416:	b1d8      	cbz	r0, 40a450 <__register_exitproc+0xa8>
  40a418:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40a41c:	6002      	str	r2, [r0, #0]
  40a41e:	2100      	movs	r1, #0
  40a420:	6041      	str	r1, [r0, #4]
  40a422:	460a      	mov	r2, r1
  40a424:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40a428:	f04f 0e01 	mov.w	lr, #1
  40a42c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40a430:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40a434:	2e00      	cmp	r6, #0
  40a436:	d0dc      	beq.n	40a3f2 <__register_exitproc+0x4a>
  40a438:	e7cc      	b.n	40a3d4 <__register_exitproc+0x2c>
  40a43a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40a43e:	430c      	orrs	r4, r1
  40a440:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40a444:	e7d5      	b.n	40a3f2 <__register_exitproc+0x4a>
  40a446:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40a44a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40a44e:	e7bb      	b.n	40a3c8 <__register_exitproc+0x20>
  40a450:	6828      	ldr	r0, [r5, #0]
  40a452:	f7ff f871 	bl	409538 <__retarget_lock_release_recursive>
  40a456:	f04f 30ff 	mov.w	r0, #4294967295
  40a45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a45e:	bf00      	nop
  40a460:	20400520 	.word	0x20400520
  40a464:	0040af78 	.word	0x0040af78
  40a468:	0040962d 	.word	0x0040962d

0040a46c <_close_r>:
  40a46c:	b538      	push	{r3, r4, r5, lr}
  40a46e:	4c07      	ldr	r4, [pc, #28]	; (40a48c <_close_r+0x20>)
  40a470:	2300      	movs	r3, #0
  40a472:	4605      	mov	r5, r0
  40a474:	4608      	mov	r0, r1
  40a476:	6023      	str	r3, [r4, #0]
  40a478:	f7f9 fae6 	bl	403a48 <_close>
  40a47c:	1c43      	adds	r3, r0, #1
  40a47e:	d000      	beq.n	40a482 <_close_r+0x16>
  40a480:	bd38      	pop	{r3, r4, r5, pc}
  40a482:	6823      	ldr	r3, [r4, #0]
  40a484:	2b00      	cmp	r3, #0
  40a486:	d0fb      	beq.n	40a480 <_close_r+0x14>
  40a488:	602b      	str	r3, [r5, #0]
  40a48a:	bd38      	pop	{r3, r4, r5, pc}
  40a48c:	20402144 	.word	0x20402144

0040a490 <_fclose_r>:
  40a490:	b570      	push	{r4, r5, r6, lr}
  40a492:	b159      	cbz	r1, 40a4ac <_fclose_r+0x1c>
  40a494:	4605      	mov	r5, r0
  40a496:	460c      	mov	r4, r1
  40a498:	b110      	cbz	r0, 40a4a0 <_fclose_r+0x10>
  40a49a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a49c:	2b00      	cmp	r3, #0
  40a49e:	d03c      	beq.n	40a51a <_fclose_r+0x8a>
  40a4a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a4a2:	07d8      	lsls	r0, r3, #31
  40a4a4:	d505      	bpl.n	40a4b2 <_fclose_r+0x22>
  40a4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a4aa:	b92b      	cbnz	r3, 40a4b8 <_fclose_r+0x28>
  40a4ac:	2600      	movs	r6, #0
  40a4ae:	4630      	mov	r0, r6
  40a4b0:	bd70      	pop	{r4, r5, r6, pc}
  40a4b2:	89a3      	ldrh	r3, [r4, #12]
  40a4b4:	0599      	lsls	r1, r3, #22
  40a4b6:	d53c      	bpl.n	40a532 <_fclose_r+0xa2>
  40a4b8:	4621      	mov	r1, r4
  40a4ba:	4628      	mov	r0, r5
  40a4bc:	f7fe fb82 	bl	408bc4 <__sflush_r>
  40a4c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a4c2:	4606      	mov	r6, r0
  40a4c4:	b133      	cbz	r3, 40a4d4 <_fclose_r+0x44>
  40a4c6:	69e1      	ldr	r1, [r4, #28]
  40a4c8:	4628      	mov	r0, r5
  40a4ca:	4798      	blx	r3
  40a4cc:	2800      	cmp	r0, #0
  40a4ce:	bfb8      	it	lt
  40a4d0:	f04f 36ff 	movlt.w	r6, #4294967295
  40a4d4:	89a3      	ldrh	r3, [r4, #12]
  40a4d6:	061a      	lsls	r2, r3, #24
  40a4d8:	d422      	bmi.n	40a520 <_fclose_r+0x90>
  40a4da:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a4dc:	b141      	cbz	r1, 40a4f0 <_fclose_r+0x60>
  40a4de:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a4e2:	4299      	cmp	r1, r3
  40a4e4:	d002      	beq.n	40a4ec <_fclose_r+0x5c>
  40a4e6:	4628      	mov	r0, r5
  40a4e8:	f7fe fd8a 	bl	409000 <_free_r>
  40a4ec:	2300      	movs	r3, #0
  40a4ee:	6323      	str	r3, [r4, #48]	; 0x30
  40a4f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40a4f2:	b121      	cbz	r1, 40a4fe <_fclose_r+0x6e>
  40a4f4:	4628      	mov	r0, r5
  40a4f6:	f7fe fd83 	bl	409000 <_free_r>
  40a4fa:	2300      	movs	r3, #0
  40a4fc:	6463      	str	r3, [r4, #68]	; 0x44
  40a4fe:	f7fe fc85 	bl	408e0c <__sfp_lock_acquire>
  40a502:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a504:	2200      	movs	r2, #0
  40a506:	07db      	lsls	r3, r3, #31
  40a508:	81a2      	strh	r2, [r4, #12]
  40a50a:	d50e      	bpl.n	40a52a <_fclose_r+0x9a>
  40a50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a50e:	f7ff f80f 	bl	409530 <__retarget_lock_close_recursive>
  40a512:	f7fe fc81 	bl	408e18 <__sfp_lock_release>
  40a516:	4630      	mov	r0, r6
  40a518:	bd70      	pop	{r4, r5, r6, pc}
  40a51a:	f7fe fc4b 	bl	408db4 <__sinit>
  40a51e:	e7bf      	b.n	40a4a0 <_fclose_r+0x10>
  40a520:	6921      	ldr	r1, [r4, #16]
  40a522:	4628      	mov	r0, r5
  40a524:	f7fe fd6c 	bl	409000 <_free_r>
  40a528:	e7d7      	b.n	40a4da <_fclose_r+0x4a>
  40a52a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a52c:	f7ff f804 	bl	409538 <__retarget_lock_release_recursive>
  40a530:	e7ec      	b.n	40a50c <_fclose_r+0x7c>
  40a532:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a534:	f7fe fffe 	bl	409534 <__retarget_lock_acquire_recursive>
  40a538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a53c:	2b00      	cmp	r3, #0
  40a53e:	d1bb      	bne.n	40a4b8 <_fclose_r+0x28>
  40a540:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40a542:	f016 0601 	ands.w	r6, r6, #1
  40a546:	d1b1      	bne.n	40a4ac <_fclose_r+0x1c>
  40a548:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a54a:	f7fe fff5 	bl	409538 <__retarget_lock_release_recursive>
  40a54e:	4630      	mov	r0, r6
  40a550:	bd70      	pop	{r4, r5, r6, pc}
  40a552:	bf00      	nop

0040a554 <_fstat_r>:
  40a554:	b538      	push	{r3, r4, r5, lr}
  40a556:	460b      	mov	r3, r1
  40a558:	4c07      	ldr	r4, [pc, #28]	; (40a578 <_fstat_r+0x24>)
  40a55a:	4605      	mov	r5, r0
  40a55c:	4611      	mov	r1, r2
  40a55e:	4618      	mov	r0, r3
  40a560:	2300      	movs	r3, #0
  40a562:	6023      	str	r3, [r4, #0]
  40a564:	f7f9 fa73 	bl	403a4e <_fstat>
  40a568:	1c43      	adds	r3, r0, #1
  40a56a:	d000      	beq.n	40a56e <_fstat_r+0x1a>
  40a56c:	bd38      	pop	{r3, r4, r5, pc}
  40a56e:	6823      	ldr	r3, [r4, #0]
  40a570:	2b00      	cmp	r3, #0
  40a572:	d0fb      	beq.n	40a56c <_fstat_r+0x18>
  40a574:	602b      	str	r3, [r5, #0]
  40a576:	bd38      	pop	{r3, r4, r5, pc}
  40a578:	20402144 	.word	0x20402144

0040a57c <_isatty_r>:
  40a57c:	b538      	push	{r3, r4, r5, lr}
  40a57e:	4c07      	ldr	r4, [pc, #28]	; (40a59c <_isatty_r+0x20>)
  40a580:	2300      	movs	r3, #0
  40a582:	4605      	mov	r5, r0
  40a584:	4608      	mov	r0, r1
  40a586:	6023      	str	r3, [r4, #0]
  40a588:	f7f9 fa66 	bl	403a58 <_isatty>
  40a58c:	1c43      	adds	r3, r0, #1
  40a58e:	d000      	beq.n	40a592 <_isatty_r+0x16>
  40a590:	bd38      	pop	{r3, r4, r5, pc}
  40a592:	6823      	ldr	r3, [r4, #0]
  40a594:	2b00      	cmp	r3, #0
  40a596:	d0fb      	beq.n	40a590 <_isatty_r+0x14>
  40a598:	602b      	str	r3, [r5, #0]
  40a59a:	bd38      	pop	{r3, r4, r5, pc}
  40a59c:	20402144 	.word	0x20402144

0040a5a0 <_lseek_r>:
  40a5a0:	b570      	push	{r4, r5, r6, lr}
  40a5a2:	460d      	mov	r5, r1
  40a5a4:	4c08      	ldr	r4, [pc, #32]	; (40a5c8 <_lseek_r+0x28>)
  40a5a6:	4611      	mov	r1, r2
  40a5a8:	4606      	mov	r6, r0
  40a5aa:	461a      	mov	r2, r3
  40a5ac:	4628      	mov	r0, r5
  40a5ae:	2300      	movs	r3, #0
  40a5b0:	6023      	str	r3, [r4, #0]
  40a5b2:	f7f9 fa53 	bl	403a5c <_lseek>
  40a5b6:	1c43      	adds	r3, r0, #1
  40a5b8:	d000      	beq.n	40a5bc <_lseek_r+0x1c>
  40a5ba:	bd70      	pop	{r4, r5, r6, pc}
  40a5bc:	6823      	ldr	r3, [r4, #0]
  40a5be:	2b00      	cmp	r3, #0
  40a5c0:	d0fb      	beq.n	40a5ba <_lseek_r+0x1a>
  40a5c2:	6033      	str	r3, [r6, #0]
  40a5c4:	bd70      	pop	{r4, r5, r6, pc}
  40a5c6:	bf00      	nop
  40a5c8:	20402144 	.word	0x20402144

0040a5cc <_read_r>:
  40a5cc:	b570      	push	{r4, r5, r6, lr}
  40a5ce:	460d      	mov	r5, r1
  40a5d0:	4c08      	ldr	r4, [pc, #32]	; (40a5f4 <_read_r+0x28>)
  40a5d2:	4611      	mov	r1, r2
  40a5d4:	4606      	mov	r6, r0
  40a5d6:	461a      	mov	r2, r3
  40a5d8:	4628      	mov	r0, r5
  40a5da:	2300      	movs	r3, #0
  40a5dc:	6023      	str	r3, [r4, #0]
  40a5de:	f7f6 fde1 	bl	4011a4 <_read>
  40a5e2:	1c43      	adds	r3, r0, #1
  40a5e4:	d000      	beq.n	40a5e8 <_read_r+0x1c>
  40a5e6:	bd70      	pop	{r4, r5, r6, pc}
  40a5e8:	6823      	ldr	r3, [r4, #0]
  40a5ea:	2b00      	cmp	r3, #0
  40a5ec:	d0fb      	beq.n	40a5e6 <_read_r+0x1a>
  40a5ee:	6033      	str	r3, [r6, #0]
  40a5f0:	bd70      	pop	{r4, r5, r6, pc}
  40a5f2:	bf00      	nop
  40a5f4:	20402144 	.word	0x20402144

0040a5f8 <__aeabi_uldivmod>:
  40a5f8:	b953      	cbnz	r3, 40a610 <__aeabi_uldivmod+0x18>
  40a5fa:	b94a      	cbnz	r2, 40a610 <__aeabi_uldivmod+0x18>
  40a5fc:	2900      	cmp	r1, #0
  40a5fe:	bf08      	it	eq
  40a600:	2800      	cmpeq	r0, #0
  40a602:	bf1c      	itt	ne
  40a604:	f04f 31ff 	movne.w	r1, #4294967295
  40a608:	f04f 30ff 	movne.w	r0, #4294967295
  40a60c:	f000 b97a 	b.w	40a904 <__aeabi_idiv0>
  40a610:	f1ad 0c08 	sub.w	ip, sp, #8
  40a614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40a618:	f000 f806 	bl	40a628 <__udivmoddi4>
  40a61c:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a624:	b004      	add	sp, #16
  40a626:	4770      	bx	lr

0040a628 <__udivmoddi4>:
  40a628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a62c:	468c      	mov	ip, r1
  40a62e:	460d      	mov	r5, r1
  40a630:	4604      	mov	r4, r0
  40a632:	9e08      	ldr	r6, [sp, #32]
  40a634:	2b00      	cmp	r3, #0
  40a636:	d151      	bne.n	40a6dc <__udivmoddi4+0xb4>
  40a638:	428a      	cmp	r2, r1
  40a63a:	4617      	mov	r7, r2
  40a63c:	d96d      	bls.n	40a71a <__udivmoddi4+0xf2>
  40a63e:	fab2 fe82 	clz	lr, r2
  40a642:	f1be 0f00 	cmp.w	lr, #0
  40a646:	d00b      	beq.n	40a660 <__udivmoddi4+0x38>
  40a648:	f1ce 0c20 	rsb	ip, lr, #32
  40a64c:	fa01 f50e 	lsl.w	r5, r1, lr
  40a650:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a654:	fa02 f70e 	lsl.w	r7, r2, lr
  40a658:	ea4c 0c05 	orr.w	ip, ip, r5
  40a65c:	fa00 f40e 	lsl.w	r4, r0, lr
  40a660:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40a664:	0c25      	lsrs	r5, r4, #16
  40a666:	fbbc f8fa 	udiv	r8, ip, sl
  40a66a:	fa1f f987 	uxth.w	r9, r7
  40a66e:	fb0a cc18 	mls	ip, sl, r8, ip
  40a672:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40a676:	fb08 f309 	mul.w	r3, r8, r9
  40a67a:	42ab      	cmp	r3, r5
  40a67c:	d90a      	bls.n	40a694 <__udivmoddi4+0x6c>
  40a67e:	19ed      	adds	r5, r5, r7
  40a680:	f108 32ff 	add.w	r2, r8, #4294967295
  40a684:	f080 8123 	bcs.w	40a8ce <__udivmoddi4+0x2a6>
  40a688:	42ab      	cmp	r3, r5
  40a68a:	f240 8120 	bls.w	40a8ce <__udivmoddi4+0x2a6>
  40a68e:	f1a8 0802 	sub.w	r8, r8, #2
  40a692:	443d      	add	r5, r7
  40a694:	1aed      	subs	r5, r5, r3
  40a696:	b2a4      	uxth	r4, r4
  40a698:	fbb5 f0fa 	udiv	r0, r5, sl
  40a69c:	fb0a 5510 	mls	r5, sl, r0, r5
  40a6a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40a6a4:	fb00 f909 	mul.w	r9, r0, r9
  40a6a8:	45a1      	cmp	r9, r4
  40a6aa:	d909      	bls.n	40a6c0 <__udivmoddi4+0x98>
  40a6ac:	19e4      	adds	r4, r4, r7
  40a6ae:	f100 33ff 	add.w	r3, r0, #4294967295
  40a6b2:	f080 810a 	bcs.w	40a8ca <__udivmoddi4+0x2a2>
  40a6b6:	45a1      	cmp	r9, r4
  40a6b8:	f240 8107 	bls.w	40a8ca <__udivmoddi4+0x2a2>
  40a6bc:	3802      	subs	r0, #2
  40a6be:	443c      	add	r4, r7
  40a6c0:	eba4 0409 	sub.w	r4, r4, r9
  40a6c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a6c8:	2100      	movs	r1, #0
  40a6ca:	2e00      	cmp	r6, #0
  40a6cc:	d061      	beq.n	40a792 <__udivmoddi4+0x16a>
  40a6ce:	fa24 f40e 	lsr.w	r4, r4, lr
  40a6d2:	2300      	movs	r3, #0
  40a6d4:	6034      	str	r4, [r6, #0]
  40a6d6:	6073      	str	r3, [r6, #4]
  40a6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a6dc:	428b      	cmp	r3, r1
  40a6de:	d907      	bls.n	40a6f0 <__udivmoddi4+0xc8>
  40a6e0:	2e00      	cmp	r6, #0
  40a6e2:	d054      	beq.n	40a78e <__udivmoddi4+0x166>
  40a6e4:	2100      	movs	r1, #0
  40a6e6:	e886 0021 	stmia.w	r6, {r0, r5}
  40a6ea:	4608      	mov	r0, r1
  40a6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a6f0:	fab3 f183 	clz	r1, r3
  40a6f4:	2900      	cmp	r1, #0
  40a6f6:	f040 808e 	bne.w	40a816 <__udivmoddi4+0x1ee>
  40a6fa:	42ab      	cmp	r3, r5
  40a6fc:	d302      	bcc.n	40a704 <__udivmoddi4+0xdc>
  40a6fe:	4282      	cmp	r2, r0
  40a700:	f200 80fa 	bhi.w	40a8f8 <__udivmoddi4+0x2d0>
  40a704:	1a84      	subs	r4, r0, r2
  40a706:	eb65 0503 	sbc.w	r5, r5, r3
  40a70a:	2001      	movs	r0, #1
  40a70c:	46ac      	mov	ip, r5
  40a70e:	2e00      	cmp	r6, #0
  40a710:	d03f      	beq.n	40a792 <__udivmoddi4+0x16a>
  40a712:	e886 1010 	stmia.w	r6, {r4, ip}
  40a716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a71a:	b912      	cbnz	r2, 40a722 <__udivmoddi4+0xfa>
  40a71c:	2701      	movs	r7, #1
  40a71e:	fbb7 f7f2 	udiv	r7, r7, r2
  40a722:	fab7 fe87 	clz	lr, r7
  40a726:	f1be 0f00 	cmp.w	lr, #0
  40a72a:	d134      	bne.n	40a796 <__udivmoddi4+0x16e>
  40a72c:	1beb      	subs	r3, r5, r7
  40a72e:	0c3a      	lsrs	r2, r7, #16
  40a730:	fa1f fc87 	uxth.w	ip, r7
  40a734:	2101      	movs	r1, #1
  40a736:	fbb3 f8f2 	udiv	r8, r3, r2
  40a73a:	0c25      	lsrs	r5, r4, #16
  40a73c:	fb02 3318 	mls	r3, r2, r8, r3
  40a740:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a744:	fb0c f308 	mul.w	r3, ip, r8
  40a748:	42ab      	cmp	r3, r5
  40a74a:	d907      	bls.n	40a75c <__udivmoddi4+0x134>
  40a74c:	19ed      	adds	r5, r5, r7
  40a74e:	f108 30ff 	add.w	r0, r8, #4294967295
  40a752:	d202      	bcs.n	40a75a <__udivmoddi4+0x132>
  40a754:	42ab      	cmp	r3, r5
  40a756:	f200 80d1 	bhi.w	40a8fc <__udivmoddi4+0x2d4>
  40a75a:	4680      	mov	r8, r0
  40a75c:	1aed      	subs	r5, r5, r3
  40a75e:	b2a3      	uxth	r3, r4
  40a760:	fbb5 f0f2 	udiv	r0, r5, r2
  40a764:	fb02 5510 	mls	r5, r2, r0, r5
  40a768:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40a76c:	fb0c fc00 	mul.w	ip, ip, r0
  40a770:	45a4      	cmp	ip, r4
  40a772:	d907      	bls.n	40a784 <__udivmoddi4+0x15c>
  40a774:	19e4      	adds	r4, r4, r7
  40a776:	f100 33ff 	add.w	r3, r0, #4294967295
  40a77a:	d202      	bcs.n	40a782 <__udivmoddi4+0x15a>
  40a77c:	45a4      	cmp	ip, r4
  40a77e:	f200 80b8 	bhi.w	40a8f2 <__udivmoddi4+0x2ca>
  40a782:	4618      	mov	r0, r3
  40a784:	eba4 040c 	sub.w	r4, r4, ip
  40a788:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a78c:	e79d      	b.n	40a6ca <__udivmoddi4+0xa2>
  40a78e:	4631      	mov	r1, r6
  40a790:	4630      	mov	r0, r6
  40a792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a796:	f1ce 0420 	rsb	r4, lr, #32
  40a79a:	fa05 f30e 	lsl.w	r3, r5, lr
  40a79e:	fa07 f70e 	lsl.w	r7, r7, lr
  40a7a2:	fa20 f804 	lsr.w	r8, r0, r4
  40a7a6:	0c3a      	lsrs	r2, r7, #16
  40a7a8:	fa25 f404 	lsr.w	r4, r5, r4
  40a7ac:	ea48 0803 	orr.w	r8, r8, r3
  40a7b0:	fbb4 f1f2 	udiv	r1, r4, r2
  40a7b4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40a7b8:	fb02 4411 	mls	r4, r2, r1, r4
  40a7bc:	fa1f fc87 	uxth.w	ip, r7
  40a7c0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40a7c4:	fb01 f30c 	mul.w	r3, r1, ip
  40a7c8:	42ab      	cmp	r3, r5
  40a7ca:	fa00 f40e 	lsl.w	r4, r0, lr
  40a7ce:	d909      	bls.n	40a7e4 <__udivmoddi4+0x1bc>
  40a7d0:	19ed      	adds	r5, r5, r7
  40a7d2:	f101 30ff 	add.w	r0, r1, #4294967295
  40a7d6:	f080 808a 	bcs.w	40a8ee <__udivmoddi4+0x2c6>
  40a7da:	42ab      	cmp	r3, r5
  40a7dc:	f240 8087 	bls.w	40a8ee <__udivmoddi4+0x2c6>
  40a7e0:	3902      	subs	r1, #2
  40a7e2:	443d      	add	r5, r7
  40a7e4:	1aeb      	subs	r3, r5, r3
  40a7e6:	fa1f f588 	uxth.w	r5, r8
  40a7ea:	fbb3 f0f2 	udiv	r0, r3, r2
  40a7ee:	fb02 3310 	mls	r3, r2, r0, r3
  40a7f2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a7f6:	fb00 f30c 	mul.w	r3, r0, ip
  40a7fa:	42ab      	cmp	r3, r5
  40a7fc:	d907      	bls.n	40a80e <__udivmoddi4+0x1e6>
  40a7fe:	19ed      	adds	r5, r5, r7
  40a800:	f100 38ff 	add.w	r8, r0, #4294967295
  40a804:	d26f      	bcs.n	40a8e6 <__udivmoddi4+0x2be>
  40a806:	42ab      	cmp	r3, r5
  40a808:	d96d      	bls.n	40a8e6 <__udivmoddi4+0x2be>
  40a80a:	3802      	subs	r0, #2
  40a80c:	443d      	add	r5, r7
  40a80e:	1aeb      	subs	r3, r5, r3
  40a810:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40a814:	e78f      	b.n	40a736 <__udivmoddi4+0x10e>
  40a816:	f1c1 0720 	rsb	r7, r1, #32
  40a81a:	fa22 f807 	lsr.w	r8, r2, r7
  40a81e:	408b      	lsls	r3, r1
  40a820:	fa05 f401 	lsl.w	r4, r5, r1
  40a824:	ea48 0303 	orr.w	r3, r8, r3
  40a828:	fa20 fe07 	lsr.w	lr, r0, r7
  40a82c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40a830:	40fd      	lsrs	r5, r7
  40a832:	ea4e 0e04 	orr.w	lr, lr, r4
  40a836:	fbb5 f9fc 	udiv	r9, r5, ip
  40a83a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40a83e:	fb0c 5519 	mls	r5, ip, r9, r5
  40a842:	fa1f f883 	uxth.w	r8, r3
  40a846:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40a84a:	fb09 f408 	mul.w	r4, r9, r8
  40a84e:	42ac      	cmp	r4, r5
  40a850:	fa02 f201 	lsl.w	r2, r2, r1
  40a854:	fa00 fa01 	lsl.w	sl, r0, r1
  40a858:	d908      	bls.n	40a86c <__udivmoddi4+0x244>
  40a85a:	18ed      	adds	r5, r5, r3
  40a85c:	f109 30ff 	add.w	r0, r9, #4294967295
  40a860:	d243      	bcs.n	40a8ea <__udivmoddi4+0x2c2>
  40a862:	42ac      	cmp	r4, r5
  40a864:	d941      	bls.n	40a8ea <__udivmoddi4+0x2c2>
  40a866:	f1a9 0902 	sub.w	r9, r9, #2
  40a86a:	441d      	add	r5, r3
  40a86c:	1b2d      	subs	r5, r5, r4
  40a86e:	fa1f fe8e 	uxth.w	lr, lr
  40a872:	fbb5 f0fc 	udiv	r0, r5, ip
  40a876:	fb0c 5510 	mls	r5, ip, r0, r5
  40a87a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40a87e:	fb00 f808 	mul.w	r8, r0, r8
  40a882:	45a0      	cmp	r8, r4
  40a884:	d907      	bls.n	40a896 <__udivmoddi4+0x26e>
  40a886:	18e4      	adds	r4, r4, r3
  40a888:	f100 35ff 	add.w	r5, r0, #4294967295
  40a88c:	d229      	bcs.n	40a8e2 <__udivmoddi4+0x2ba>
  40a88e:	45a0      	cmp	r8, r4
  40a890:	d927      	bls.n	40a8e2 <__udivmoddi4+0x2ba>
  40a892:	3802      	subs	r0, #2
  40a894:	441c      	add	r4, r3
  40a896:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40a89a:	eba4 0408 	sub.w	r4, r4, r8
  40a89e:	fba0 8902 	umull	r8, r9, r0, r2
  40a8a2:	454c      	cmp	r4, r9
  40a8a4:	46c6      	mov	lr, r8
  40a8a6:	464d      	mov	r5, r9
  40a8a8:	d315      	bcc.n	40a8d6 <__udivmoddi4+0x2ae>
  40a8aa:	d012      	beq.n	40a8d2 <__udivmoddi4+0x2aa>
  40a8ac:	b156      	cbz	r6, 40a8c4 <__udivmoddi4+0x29c>
  40a8ae:	ebba 030e 	subs.w	r3, sl, lr
  40a8b2:	eb64 0405 	sbc.w	r4, r4, r5
  40a8b6:	fa04 f707 	lsl.w	r7, r4, r7
  40a8ba:	40cb      	lsrs	r3, r1
  40a8bc:	431f      	orrs	r7, r3
  40a8be:	40cc      	lsrs	r4, r1
  40a8c0:	6037      	str	r7, [r6, #0]
  40a8c2:	6074      	str	r4, [r6, #4]
  40a8c4:	2100      	movs	r1, #0
  40a8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a8ca:	4618      	mov	r0, r3
  40a8cc:	e6f8      	b.n	40a6c0 <__udivmoddi4+0x98>
  40a8ce:	4690      	mov	r8, r2
  40a8d0:	e6e0      	b.n	40a694 <__udivmoddi4+0x6c>
  40a8d2:	45c2      	cmp	sl, r8
  40a8d4:	d2ea      	bcs.n	40a8ac <__udivmoddi4+0x284>
  40a8d6:	ebb8 0e02 	subs.w	lr, r8, r2
  40a8da:	eb69 0503 	sbc.w	r5, r9, r3
  40a8de:	3801      	subs	r0, #1
  40a8e0:	e7e4      	b.n	40a8ac <__udivmoddi4+0x284>
  40a8e2:	4628      	mov	r0, r5
  40a8e4:	e7d7      	b.n	40a896 <__udivmoddi4+0x26e>
  40a8e6:	4640      	mov	r0, r8
  40a8e8:	e791      	b.n	40a80e <__udivmoddi4+0x1e6>
  40a8ea:	4681      	mov	r9, r0
  40a8ec:	e7be      	b.n	40a86c <__udivmoddi4+0x244>
  40a8ee:	4601      	mov	r1, r0
  40a8f0:	e778      	b.n	40a7e4 <__udivmoddi4+0x1bc>
  40a8f2:	3802      	subs	r0, #2
  40a8f4:	443c      	add	r4, r7
  40a8f6:	e745      	b.n	40a784 <__udivmoddi4+0x15c>
  40a8f8:	4608      	mov	r0, r1
  40a8fa:	e708      	b.n	40a70e <__udivmoddi4+0xe6>
  40a8fc:	f1a8 0802 	sub.w	r8, r8, #2
  40a900:	443d      	add	r5, r7
  40a902:	e72b      	b.n	40a75c <__udivmoddi4+0x134>

0040a904 <__aeabi_idiv0>:
  40a904:	4770      	bx	lr
  40a906:	bf00      	nop

0040a908 <MY_OV2655_BASIC_CONFIG>:
  40a908:	308c 0080 308d 0010 360b 0000 30b0 00fc     .0...0...6...0..
  40a918:	30b1 002f 30b2 0024 3601 0000 3308 0000     .0/..0$..6...3..
  40a928:	3012 0010 3011 0002 3093 0000 3013 00f7     .0...0...0...0..
  40a938:	3014 008c 3018 0088 3019 0070 301a 00d4     .0...0...0p..0..
  40a948:	3020 0001 3021 0018 3022 0000 3023 000a      0..!0.."0..#0..
  40a958:	3024 0006 3025 0040 3026 0002 3027 0058     $0..%0@.&0..'0X.
  40a968:	3028 0007 3029 0093 302a 0004 302b 00d4     (0..)0..*0..+0..
  40a978:	3088 0006 3089 0040 308a 0002 308b 0058     .0...0@..0...0X.
  40a988:	3316 0064 3317 0025 3318 0080 3319 0008     .3d..3%..3...3..
  40a998:	331a 0064 331b 004b 331c 0000 331d 0038     .3d..3K..3...38.
  40a9a8:	3320 00fa 3321 0011 3322 0092 3323 0001      3..!3.."3..#3..
  40a9b8:	3324 0097 3325 0002 3326 00ff 3327 000c     $3..%3..&3..'3..
  40a9c8:	3328 0010 3329 0010 332a 0058 332b 0056     (3..)3..*3X.+3V.
  40a9d8:	332c 00be 332d 00e1 332e 003a 332f 0036     ,3..-3...3:./36.
  40a9e8:	3330 004d 3331 0044 3332 00f8 3333 000a     03M.13D.23..33..
  40a9f8:	3334 00f0 3335 00f0 3336 00f0 3337 0040     43..53..63..73@.
  40aa08:	3338 0040 3339 0040 333a 0000 333b 0000     83@.93@.:3..;3..
  40aa18:	3380 0028 3381 0048 3382 0010 3383 0018     .3(..3H..3...3..
  40aa28:	3384 0028 3385 0040 3386 0040 3387 0034     .3(..3@..3@..34.
  40aa38:	3388 000c 3389 0098 338a 0001 3340 0004     .3...3...3..@3..
  40aa48:	3341 0007 3342 0019 3343 0034 3344 004a     A3..B3..C34.D3J.
  40aa58:	3345 005a 3346 006a 3347 0071 3348 007c     E3Z.F3j.G3q.H3|.
  40aa68:	3349 008c 334a 009b 334b 00a9 334c 00c0     I3..J3..K3..L3..
  40aa78:	334d 00d5 334e 00e8 334f 0020 3090 0041     M3..N3..O3 ..0A.
  40aa88:	3300 00b0 3301 00ff 338b 0011 338c 0010     .3...3...3...3..
  40aa98:	338d 0040 3370 00ff 3371 0000 3372 0017     .3@.p3..q3..r3..
  40aaa8:	3373 0020 3374 0000 3375 0010 3376 0010     s3 .t3..u3..v3..
  40aab8:	3377 0000 3378 0010 3379 0080 3069 0086     w3..x3..y3..i0..
  40aac8:	3087 0002 307c 0010 307a 0000 3100 0002     .0..|0..z0...1..
  40aad8:	3400 0040 3601 0000 30f3 0083 304e 0088     .4@..6...0..N0..
  40aae8:	3015 0002 302d 0000 302e 0000 3306 0000     .0..-0...0...3..
  40aaf8:	363b 0001 363c 00f2 30a1 0041 30a3 0080     ;6..<6...0A..0..
  40ab08:	30a8 0056 30aa 0072 30af 0010 30b2 002c     .0V..0r..0...0,.
  40ab18:	30d9 008c 3000 0000 ffff 00ff               .0...0......

0040ab24 <MY_OV2655_BASIC_FALLBACK>:
  40ab24:	ffff 00ff                                   ....

0040ab28 <MY_OV2655_BASIC_RESET>:
  40ab28:	3012 0080 ffff 00ff                         .0......

0040ab30 <MY_OV2655_BASIC_TESTPATTERN33>:
  40ab30:	3308 0001 ffff 00ff                         .3......

0040ab38 <MY_OV2710_BASIC_CONFIG>:
  40ab38:	ffff 00ff                                   ....

0040ab3c <MY_OV2710_BASIC_RESET>:
  40ab3c:	3008 0082 3017 0000 3018 0000 ffff 00ff     .0...0...0......

0040ab4c <OV7740_TEST_PATTERN>:
  40ab4c:	000e 0000 00ff 00ff                         ........

0040ab54 <OV7740_VGA_YUV422_20FPS>:
  40ab54:	00ff 00ff                                   ....

0040ab58 <SDRAM_INSIGNIS_16M>:
  40ab58:	0016 0000 0030 0000 d5f9 f955 5253 4d41     ....0.....U.SRAM
  40ab68:	0a0d 0000 5253 4d41 4320 4d4f 4c50 5445     ....SRAM COMPLET
  40ab78:	0d45 000a 5825 2520 0d58 000a 5825 2520     E...%X %X...%X %
  40ab88:	2058 5825 2520 2058 5825 2520 2058 5825     X %X %X %X %X %X
  40ab98:	2520 2058 5825 2520 2058 5825 2520 2058      %X %X %X %X %X 
  40aba8:	5825 2520 2058 5825 2520 2058 5825 2520     %X %X %X %X %X %
  40abb8:	2058 5825 2520 2058 5825 0a0d 0000 0000     X %X %X %X......
  40abc8:	4542 4947 204e 4143 204d 4554 5453 0d20     BEGIN CAM TEST .
  40abd8:	000a 0000 434d 4b4c 4f20 414b 0d59 000a     ....MCLK OKAY...
  40abe8:	4143 204d 4e49 5449 4f20 414b 0d59 000a     CAM INIT OKAY...
  40abf8:	4143 204d 4552 4553 2054 4b4f 5941 0a0d     CAM RESET OKAY..
  40ac08:	0000 0000 4143 204d 4f43 464e 4749 4f20     ....CAM CONFIG O
  40ac18:	414b 0d59 000a 0000 5349 2049 4c41 4f4c     KAY.....ISI ALLO
  40ac28:	4143 4554 4320 4d4f 4c50 5445 0d45 000a     CATE COMPLETE...
  40ac38:	5349 2049 4e45 4241 454c 0d44 000a 0000     ISI ENABLED.....
  40ac48:	5349 2049 4e49 5449 4420 4e4f 2045 0d41     ISI INIT DONE A.
  40ac58:	000a 0000 5349 2049 4143 5450 5255 2045     ....ISI CAPTURE 
  40ac68:	4f44 454e 202e 6143 4970 6574 7372 3d20     DONE. CapIters =
  40ac78:	2520 2064 2020 0000 4143 204d 464f 0d46      %d   ..CAM OFF.
  40ac88:	000a 0000 0a0d 4146 4c49 4320 4352 5420     ......FAIL CRC T
  40ac98:	204f 4954 594e 0a0d 0000 0000 0a0d 4f47     O TINY........GO
  40aca8:	444f 4620 4f52 204d 4954 594e 203a 6425     OD FROM TINY: %d
  40acb8:	252d 2d64 6425 2520 3a64 6425 0d20 000a     -%d-%d %d:%d ...
  40acc8:	0a0d 4f42 544f 4720 4f4f 2044 0000 0000     ..BOOT GOOD ....
  40acd8:	2020 5825 252d 2d58 5825 2020 5825 253a       %X-%X-%X  %X:%
  40ace8:	3a58 5825 2520 2058 0a0d 0000 0a0d 4554     X:%X %X ......TE
  40acf8:	5453 4720 4f4f 0d44 000a 0000 0079 0000     ST GOOD.....y...
  40ad08:	4e49 2054 5246 4d4f 5420 4e49 0d59 000a     INT FROM TINY...
  40ad18:	0a0d 5452 2043 4e49 4554 5252 5055 0d54     ..RTC INTERRUPT.
  40ad28:	000a 0000 4554 504d 2520 2058 4142 4f52     ....TEMP %X BARO
  40ad38:	204d 5825 4820 4d55 4449 5449 2059 5825     M %X HUMIDITY %X
  40ad48:	4c20 4749 5448 2520 2058 4f4d 4954 4e4f      LIGHT %X MOTION
  40ad58:	2520 0d58 000a 0000 4c41 0d4c 000a 0000      %X.....ALL.....
  40ad68:	0a0d 4f42 544f 4720 4f4f 0d44 000a 0000     ..BOOT GOOD.....
  40ad78:	0078 0000 5542 4b4c 4f20 5455 5220 5643     x...BULK OUT RCV
  40ad88:	3a44 2520 2078 7825 2520 2078 7825 2520     D: %x %x %x %x %
  40ad98:	2078 7825 2520 2078 7825 0a0d 0000 0000     x %x %x %x......
  40ada8:	5542 4b4c 4920 204e 4144 4154 5320 4e45     BULK IN DATA SEN
  40adb8:	3a54 2520 2078 7825 2520 2078 7825 2520     T: %x %x %x %x %
  40adc8:	2078 7825 2520 2078 7825 0a0d 0000 0000     x %x %x %x......
  40add8:	6c42 6e69 656b 0d64 000a 0000 4e49 203a     Blinked.....IN: 
  40ade8:	6425 2520 2064 6425 2520 2064 6425 2520     %d %d %d %d %d %
  40adf8:	2064 6425 0a0d 0000 554f 3a54 2520 2064     d %d....OUT: %d 
  40ae08:	6425 2520 2064 6425 2520 2064 6425 2520     %d %d %d %d %d %
  40ae18:	0d64 000a 4542 4947 204e 4e4f 2045 4144     d...BEGIN ONE DA
  40ae28:	2059 5041 4550 444e 5420 204f 5343 2056     Y APPEND TO CSV 
  40ae38:	5825 0d2e 000a 0000 6f4d 6e75 2074 6964     %X......Mount di
  40ae48:	6b73 2820 5f66 6f6d 6e75 2974 2e2e 0d2e     sk (f_mount)....
  40ae58:	000a 0000 4f46 4e55 2044 4457 2053 4f46     ....FOUND WDS FO
  40ae68:	444c 5245 0a0d 0000 5243 4145 4954 474e     LDER....CREATING
  40ae78:	5720 5344 4620 4c4f 4544 0d52 000a 0000      WDS FOLDER.....
  40ae88:	6f73 656d 6f20 6874 7265 6420 7269 6365     some other direc
  40ae98:	6f74 7972 6520 7272 726f 2520 2058 0a0d     tory error %X ..
  40aea8:	0000 0000 5f66 6f6d 6e75 2074 4f47 444f     ....f_mount GOOD
  40aeb8:	5720 5344 0a0d 0000 5343 2056 4552 3a53      WDS....CSV RES:
  40aec8:	2520 2e64 5320 5a49 3a45 2520 2e64 4420      %d. SIZE: %d. D
  40aed8:	5441 3a45 2520 2e64 5420 4d49 3a45 2520     ATE: %d. TIME: %
  40aee8:	2e64 0a0d 0000 0000 5f66 706f 6e65 4120     d.......f_open A
  40aef8:	4620 4941 204c 6572 2073 6425 0a0d 0000      FAIL res %d....
  40af08:	5243 4145 4954 474e 4f20 2052 504f 4e45     CREATING OR OPEN
  40af18:	4e49 2047 5343 2056 4946 454c 2e2e 0d2e     ING CSV FILE....
  40af28:	000a 0000 7241 6863 7669 2065 7266 6d6f     ....Archive from
  40af38:	203a 5825 0a0d 0000 002e 0000 0a0d 614d     : %X..........Ma
  40af48:	6e69 4220 6172 636e 2e68 4720 4f4f 2e44     in Branch. GOOD.
  40af58:	4620 4c49 2045 4c43 534f 4445 0d2e 000a      FILE CLOSED....
  40af68:	7825 0000 4553 544e 5020 4349 0a0d 0000     %x..SENT PIC....

0040af78 <_global_impure_ptr>:
  40af78:	00f8 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  40af88:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40af98:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40afa8:	296c 0000                                   l)..

0040afac <blanks.7217>:
  40afac:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040afbc <zeroes.7218>:
  40afbc:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40afcc:	0043 0000 4f50 4953 0058 0000               C...POSIX...

0040afd8 <_ctype_>:
  40afd8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40afe8:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40aff8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40b008:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40b018:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40b028:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40b038:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40b048:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40b058:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040b0dc <_init>:
  40b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b0de:	bf00      	nop
  40b0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b0e2:	bc08      	pop	{r3}
  40b0e4:	469e      	mov	lr, r3
  40b0e6:	4770      	bx	lr

0040b0e8 <__init_array_start>:
  40b0e8:	00408ba5 	.word	0x00408ba5

0040b0ec <__frame_dummy_init_array_entry>:
  40b0ec:	0040018d                                ..@.

0040b0f0 <_fini>:
  40b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b0f2:	bf00      	nop
  40b0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b0f6:	bc08      	pop	{r3}
  40b0f8:	469e      	mov	lr, r3
  40b0fa:	4770      	bx	lr

0040b0fc <__fini_array_start>:
  40b0fc:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <udi_api_vendor>:
2040000c:	15a5 0040 15cd 0040 15e9 0040 1599 0040     ..@...@...@...@.
2040001c:	0000 0000                                   ....

20400020 <udc_config>:
20400020:	007c 2040 002c 2040 0000 0000               |.@ ,.@ ....

2040002c <udc_config_lsfs>:
2040002c:	0034 2040 0090 2040                         4.@ ..@ 

20400034 <udc_desc_fs>:
20400034:	0209 0045 0101 c000 0932 0004 0000 ffff     ..E.....2.......
20400044:	00ff 0409 0100 ff06 ffff 0700 8105 4003     ...............@
20400054:	0100 0507 0302 0040 0701 8305 4002 0000     ......@......@..
20400064:	0507 0204 0040 0700 8505 0001 0101 0507     ....@...........
20400074:	0106 0100 0001 0000                         ........

2040007c <udc_device_desc>:
2040007c:	0112 0200 0000 4000 03eb 2423 0100 0201     .......@..#$....
2040008c:	0100 0000                                   ....

20400090 <udi_apis>:
20400090:	000c 2040                                   ..@ 

20400094 <udc_string_desc>:
20400094:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

204000c0 <udc_string_desc_languageid>:
204000c0:	0304 0409                                   ....

204000c4 <udc_string_manufacturer_name>:
204000c4:	6957 646c 696c 6566 4420 7461 2061 6353     Wildlife Data Sc
204000d4:	6569 636e 0065 0000                         ience...

204000dc <udc_string_product_name>:
204000dc:	4457 2053 6544 6976 6563 0100                    WDS Device.

204000e7 <g_interrupt_enabled>:
204000e7:	0001                                             .

204000e8 <SystemCoreClock>:
204000e8:	0900 003d                                   ..=.

204000ec <picBuff>:
204000ec:	0000 7000                                   ...p

204000f0 <_impure_ptr>:
204000f0:	00f8 2040 0000 0000                         ..@ ....

204000f8 <impure_data>:
204000f8:	0000 0000 03e4 2040 044c 2040 04b4 2040     ......@ L.@ ..@ 
	...
204001a0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204001b0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400520 <__atexit_recursive_mutex>:
20400520:	2120 2040                                    !@ 

20400524 <__global_locale>:
20400524:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400544:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400564:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400584:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400604:	a361 0040 9b9d 0040 0000 0000 afd8 0040     a.@...@.......@.
20400614:	af40 0040 aea8 0040 aea8 0040 aea8 0040     @.@...@...@...@.
20400624:	aea8 0040 aea8 0040 aea8 0040 aea8 0040     ..@...@...@...@.
20400634:	aea8 0040 aea8 0040 ffff ffff ffff ffff     ..@...@.........
20400644:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040066c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20400690 <__malloc_av_>:
	...
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 
204009c8:	09c0 2040 09c0 2040 09c8 2040 09c8 2040     ..@ ..@ ..@ ..@ 
204009d8:	09d0 2040 09d0 2040 09d8 2040 09d8 2040     ..@ ..@ ..@ ..@ 
204009e8:	09e0 2040 09e0 2040 09e8 2040 09e8 2040     ..@ ..@ ..@ ..@ 
204009f8:	09f0 2040 09f0 2040 09f8 2040 09f8 2040     ..@ ..@ ..@ ..@ 
20400a08:	0a00 2040 0a00 2040 0a08 2040 0a08 2040     ..@ ..@ ..@ ..@ 
20400a18:	0a10 2040 0a10 2040 0a18 2040 0a18 2040     ..@ ..@ ..@ ..@ 
20400a28:	0a20 2040 0a20 2040 0a28 2040 0a28 2040      .@  .@ (.@ (.@ 
20400a38:	0a30 2040 0a30 2040 0a38 2040 0a38 2040     0.@ 0.@ 8.@ 8.@ 
20400a48:	0a40 2040 0a40 2040 0a48 2040 0a48 2040     @.@ @.@ H.@ H.@ 
20400a58:	0a50 2040 0a50 2040 0a58 2040 0a58 2040     P.@ P.@ X.@ X.@ 
20400a68:	0a60 2040 0a60 2040 0a68 2040 0a68 2040     `.@ `.@ h.@ h.@ 
20400a78:	0a70 2040 0a70 2040 0a78 2040 0a78 2040     p.@ p.@ x.@ x.@ 
20400a88:	0a80 2040 0a80 2040 0a88 2040 0a88 2040     ..@ ..@ ..@ ..@ 

20400a98 <__malloc_sbrk_base>:
20400a98:	ffff ffff                                   ....

20400a9c <__malloc_trim_threshold>:
20400a9c:	0000 0002                                   ....
