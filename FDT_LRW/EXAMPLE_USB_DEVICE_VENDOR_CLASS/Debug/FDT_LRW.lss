
FDT_LRW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f664  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040f664  0040f664  0001f664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b30  20400000  0040f66c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004e4  20400b40  004101c0  00020b40  2**5
                  ALLOC
  4 .stack        00008004  20401024  004106a4  00020b40  2**0
                  ALLOC
  5 .heap         00000200  20409028  004186a8  00020b40  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020b30  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020b5e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00052d75  00000000  00000000  00020bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007b32  00000000  00000000  0007392c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000210f0  00000000  00000000  0007b45e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001888  00000000  00000000  0009c54e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001c40  00000000  00000000  0009ddd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002e8d9  00000000  00000000  0009fa16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00022e71  00000000  00000000  000ce2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a7c84  00000000  00000000  000f1160  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004d1c  00000000  00000000  00198de4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	28 90 40 20 3d 47 40 00 39 47 40 00 39 47 40 00     (.@ =G@.9G@.9G@.
  400010:	39 47 40 00 39 47 40 00 39 47 40 00 00 00 00 00     9G@.9G@.9G@.....
	...
  40002c:	39 47 40 00 39 47 40 00 00 00 00 00 39 47 40 00     9G@.9G@.....9G@.
  40003c:	39 47 40 00 39 47 40 00 39 47 40 00 39 47 40 00     9G@.9G@.9G@.9G@.
  40004c:	39 47 40 00 39 47 40 00 39 47 40 00 39 47 40 00     9G@.9G@.9G@.9G@.
  40005c:	39 47 40 00 39 47 40 00 00 00 00 00 f1 33 40 00     9G@.9G@......3@.
  40006c:	05 34 40 00 19 34 40 00 39 47 40 00 39 47 40 00     .4@..4@.9G@.9G@.
  40007c:	39 47 40 00 2d 34 40 00 41 34 40 00 39 47 40 00     9G@.-4@.A4@.9G@.
  40008c:	39 47 40 00 39 47 40 00 39 47 40 00 39 47 40 00     9G@.9G@.9G@.9G@.
  40009c:	39 47 40 00 39 47 40 00 39 47 40 00 39 47 40 00     9G@.9G@.9G@.9G@.
  4000ac:	39 47 40 00 39 47 40 00 39 47 40 00 39 47 40 00     9G@.9G@.9G@.9G@.
  4000bc:	39 47 40 00 39 47 40 00 39 47 40 00 89 3a 40 00     9G@.9G@.9G@..:@.
  4000cc:	39 47 40 00 39 47 40 00 39 47 40 00 39 47 40 00     9G@.9G@.9G@.9G@.
  4000dc:	39 47 40 00 39 47 40 00 39 47 40 00 39 47 40 00     9G@.9G@.9G@.9G@.
  4000ec:	39 47 40 00 39 47 40 00 39 47 40 00 39 47 40 00     9G@.9G@.9G@.9G@.
  4000fc:	39 47 40 00 39 47 40 00 39 47 40 00 39 47 40 00     9G@.9G@.9G@.9G@.
  40010c:	39 47 40 00 39 47 40 00 39 47 40 00 00 00 00 00     9G@.9G@.9G@.....
  40011c:	00 00 00 00 39 47 40 00 39 47 40 00 39 47 40 00     ....9G@.9G@.9G@.
  40012c:	39 6d 40 00 39 47 40 00 39 47 40 00 39 47 40 00     9m@.9G@.9G@.9G@.
  40013c:	39 47 40 00 39 47 40 00 39 47 40 00 39 47 40 00     9G@.9G@.9G@.9G@.
  40014c:	39 47 40 00 39 47 40 00 00 00 00 00 00 00 00 00     9G@.9G@.........
	...

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400b40 	.word	0x20400b40
  400184:	00000000 	.word	0x00000000
  400188:	0040f66c 	.word	0x0040f66c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040f66c 	.word	0x0040f66c
  4001c8:	20400b44 	.word	0x20400b44
  4001cc:	0040f66c 	.word	0x0040f66c
  4001d0:	00000000 	.word	0x00000000

004001d4 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twihs* const p_twi, twihs_packet_t* const p_packet)
{
  4001d4:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twihs_master_read(p_twi, p_packet);
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <ov_read_reg+0x8>)
  4001d8:	4798      	blx	r3

	return ul_status;
}
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	00401569 	.word	0x00401569

004001e0 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twihs* const p_twi, twihs_packet_t* const p_packet)
{
  4001e0:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twihs_master_write(p_twi, p_packet);
  4001e2:	4b01      	ldr	r3, [pc, #4]	; (4001e8 <ov_write_reg+0x8>)
  4001e4:	4798      	blx	r3

	return ul_status;
}
  4001e6:	bd08      	pop	{r3, pc}
  4001e8:	00401615 	.word	0x00401615

004001ec <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twihs* const p_twi, const ov_reg *p_reg_list)
{
  4001ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001f0:	b086      	sub	sp, #24
  4001f2:	4606      	mov	r6, r0
  4001f4:	1c8c      	adds	r4, r1, #2
			twi_packet_regs.addr_length = 2;
			twi_packet_regs.chip = OV_I2C_2655_ADDRESS;
			twi_packet_regs.length = 1;
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  4001f6:	4d15      	ldr	r5, [pc, #84]	; (40024c <ov_write_regs+0x60>)
			delay_ms(5);
  4001f8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400254 <ov_write_regs+0x68>
  4001fc:	4f14      	ldr	r7, [pc, #80]	; (400250 <ov_write_regs+0x64>)
	while (!((p_next->reg == OV_REG_TERM) &&
  4001fe:	e015      	b.n	40022c <ov_write_regs+0x40>
  400200:	7822      	ldrb	r2, [r4, #0]
  400202:	2aff      	cmp	r2, #255	; 0xff
  400204:	d01e      	beq.n	400244 <ov_write_regs+0x58>
			twi_packet_regs.addr[0] = (p_next->reg)>>8;
  400206:	0a1a      	lsrs	r2, r3, #8
  400208:	f88d 2004 	strb.w	r2, [sp, #4]
			twi_packet_regs.addr[1] = (p_next->reg)&0x00FF;
  40020c:	f88d 3005 	strb.w	r3, [sp, #5]
			twi_packet_regs.addr_length = 2;
  400210:	2302      	movs	r3, #2
  400212:	9302      	str	r3, [sp, #8]
			twi_packet_regs.chip = OV_I2C_2655_ADDRESS;
  400214:	2330      	movs	r3, #48	; 0x30
  400216:	f88d 3014 	strb.w	r3, [sp, #20]
			twi_packet_regs.length = 1;
  40021a:	2301      	movs	r3, #1
  40021c:	9304      	str	r3, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  40021e:	9103      	str	r1, [sp, #12]
			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400220:	a901      	add	r1, sp, #4
  400222:	4630      	mov	r0, r6
  400224:	47a8      	blx	r5
			ul_size++;

			if (ul_err == TWIHS_BUSY) {
  400226:	2808      	cmp	r0, #8
  400228:	d00d      	beq.n	400246 <ov_write_regs+0x5a>
  40022a:	3404      	adds	r4, #4
  40022c:	4621      	mov	r1, r4
	while (!((p_next->reg == OV_REG_TERM) &&
  40022e:	f834 3c02 	ldrh.w	r3, [r4, #-2]
  400232:	f64f 72ff 	movw	r2, #65535	; 0xffff
  400236:	4293      	cmp	r3, r2
  400238:	d0e2      	beq.n	400200 <ov_write_regs+0x14>
		if (p_next->reg == 0xFE) {
  40023a:	2bfe      	cmp	r3, #254	; 0xfe
  40023c:	d1e3      	bne.n	400206 <ov_write_regs+0x1a>
			delay_ms(5);
  40023e:	4640      	mov	r0, r8
  400240:	47b8      	blx	r7
  400242:	e7f2      	b.n	40022a <ov_write_regs+0x3e>
			}
		}

		p_next++;
	}
	return 0;
  400244:	2000      	movs	r0, #0
			ov_read_reg(p_twi, &twi_packet_regs);
			printf("%c%c%c%c%c%c%c%c",0xFE,0x46,0xFE,0x48,0xFE,0x4C,0xFE,0x51);//clear display, cursor home
			delay_ms(10);
			printf("%x:%x ",twi_packet_regs.addr[0],ul_value);
			delay_ms(2000);*/
}
  400246:	b006      	add	sp, #24
  400248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40024c:	004001e1 	.word	0x004001e1
  400250:	2040008d 	.word	0x2040008d
  400254:	0003dbc2 	.word	0x0003dbc2

00400258 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twihs* const p_twi)
{
  400258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40025c:	b08c      	sub	sp, #48	; 0x30
  40025e:	4680      	mov	r8, r0
	uint32_t ul_id = 0;
  400260:	2300      	movs	r3, #0
  400262:	9300      	str	r3, [sp, #0]
	uint32_t ul_ver = 0;
  400264:	9301      	str	r3, [sp, #4]
	packet_pid.chip = OV_I2C_2655_ADDRESS;  //BC WORKS!! (0x78>>1) OV7692was 0x78 for CamCube.  0x60 for OV2655
  400266:	2430      	movs	r4, #48	; 0x30
  400268:	f88d 4018 	strb.w	r4, [sp, #24]
	packet_pid.addr[0] = 0x30;
  40026c:	f88d 4008 	strb.w	r4, [sp, #8]
	packet_pid.addr[1] = OV2655_PIDH;
  400270:	230a      	movs	r3, #10
  400272:	f88d 3009 	strb.w	r3, [sp, #9]
	packet_pid.addr_length = 2;
  400276:	2702      	movs	r7, #2
  400278:	9703      	str	r7, [sp, #12]
	packet_pid.buffer = &ul_id;
  40027a:	f8cd d010 	str.w	sp, [sp, #16]
	packet_pid.length = 1;
  40027e:	2601      	movs	r6, #1
  400280:	9605      	str	r6, [sp, #20]
	ov_read_reg(p_twi, &packet_pid);
  400282:	a902      	add	r1, sp, #8
  400284:	4d29      	ldr	r5, [pc, #164]	; (40032c <ov_init+0xd4>)
  400286:	47a8      	blx	r5
	packet_ver.chip = OV_I2C_2655_ADDRESS;//was 0x78 for CamCube.  0x60 for OV2655
  400288:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	packet_ver.addr[0] = 0x30;
  40028c:	f88d 401c 	strb.w	r4, [sp, #28]
	packet_ver.addr[1] = OV2655_PIDL;
  400290:	230b      	movs	r3, #11
  400292:	f88d 301d 	strb.w	r3, [sp, #29]
	packet_ver.addr_length = 2;
  400296:	9708      	str	r7, [sp, #32]
	packet_ver.buffer = &ul_ver;
  400298:	ab01      	add	r3, sp, #4
  40029a:	9309      	str	r3, [sp, #36]	; 0x24
	packet_ver.length = 1;
  40029c:	960a      	str	r6, [sp, #40]	; 0x28
	ov_read_reg(p_twi, &packet_ver);
  40029e:	a907      	add	r1, sp, #28
  4002a0:	4640      	mov	r0, r8
  4002a2:	47a8      	blx	r5
	return ((uint32_t)(ul_id << 8) | ul_ver);
  4002a4:	9b01      	ldr	r3, [sp, #4]
  4002a6:	9a00      	ldr	r2, [sp, #0]
  4002a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	uint32_t ul_id = 0;

	ul_id = ov_id(p_twi);

//	if (((ul_id >> 8) & 0xff)  == OV2710_PIDH_DEFAULT) {
	if (((ul_id >> 8) & 0xff)  == OV2655_PIDH_DEFAULT) {
  4002ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4002b0:	2b26      	cmp	r3, #38	; 0x26
  4002b2:	d003      	beq.n	4002bc <ov_init+0x64>
				return 0;
			}
//		}
	}

	return 1;
  4002b4:	2001      	movs	r0, #1
}
  4002b6:	b00c      	add	sp, #48	; 0x30
  4002b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t ul_value = 0;
  4002bc:	2300      	movs	r3, #0
  4002be:	9300      	str	r3, [sp, #0]
	uint32_t ul_oldvalue = 0;
  4002c0:	9301      	str	r3, [sp, #4]
	uint32_t ul_entervalue = 0;
  4002c2:	9302      	str	r3, [sp, #8]
	twi_packet.addr[0] = 0x30;
  4002c4:	f88d 401c 	strb.w	r4, [sp, #28]
	twi_packet.addr[1] = 0x04;
  4002c8:	2204      	movs	r2, #4
  4002ca:	f88d 201d 	strb.w	r2, [sp, #29]
	twi_packet.addr_length = 2;
  4002ce:	9708      	str	r7, [sp, #32]
	twi_packet.chip = OV_I2C_2655_ADDRESS;
  4002d0:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	twi_packet.length = 1;
  4002d4:	960a      	str	r6, [sp, #40]	; 0x28
	twi_packet.buffer = &ul_oldvalue;
  4002d6:	ab01      	add	r3, sp, #4
  4002d8:	9309      	str	r3, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4002da:	a907      	add	r1, sp, #28
  4002dc:	4640      	mov	r0, r8
  4002de:	47a8      	blx	r5
	ul_entervalue = 0x11;
  4002e0:	ab0c      	add	r3, sp, #48	; 0x30
  4002e2:	2211      	movs	r2, #17
  4002e4:	f843 2d28 	str.w	r2, [r3, #-40]!
	twi_packet.buffer = &ul_entervalue;
  4002e8:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  4002ea:	a907      	add	r1, sp, #28
  4002ec:	4640      	mov	r0, r8
  4002ee:	4b10      	ldr	r3, [pc, #64]	; (400330 <ov_init+0xd8>)
  4002f0:	4798      	blx	r3
	twi_packet.buffer = &ul_value;
  4002f2:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4002f6:	a907      	add	r1, sp, #28
  4002f8:	4640      	mov	r0, r8
  4002fa:	47a8      	blx	r5
	if (ul_value != ul_entervalue) {
  4002fc:	9b02      	ldr	r3, [sp, #8]
  4002fe:	9a00      	ldr	r2, [sp, #0]
  400300:	429a      	cmp	r2, r3
  400302:	d001      	beq.n	400308 <ov_init+0xb0>
		return 1;
  400304:	2001      	movs	r0, #1
  400306:	e7d6      	b.n	4002b6 <ov_init+0x5e>
	twi_packet.buffer = &ul_oldvalue;
  400308:	ab01      	add	r3, sp, #4
  40030a:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  40030c:	a907      	add	r1, sp, #28
  40030e:	4640      	mov	r0, r8
  400310:	4b07      	ldr	r3, [pc, #28]	; (400330 <ov_init+0xd8>)
  400312:	4798      	blx	r3
	twi_packet.buffer = &ul_value;
  400314:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400318:	a907      	add	r1, sp, #28
  40031a:	4640      	mov	r0, r8
  40031c:	47a8      	blx	r5
	if (ul_value != ul_oldvalue) {
  40031e:	9b01      	ldr	r3, [sp, #4]
  400320:	9800      	ldr	r0, [sp, #0]
  400322:	1ac0      	subs	r0, r0, r3
  400324:	bf18      	it	ne
  400326:	2001      	movne	r0, #1
  400328:	e7c5      	b.n	4002b6 <ov_init+0x5e>
  40032a:	bf00      	nop
  40032c:	004001d5 	.word	0x004001d5
  400330:	004001e1 	.word	0x004001e1

00400334 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twihs* const p_twi, const e_ov7740_format format)
{
  400334:	b508      	push	{r3, lr}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
  400336:	2908      	cmp	r1, #8
  400338:	d814      	bhi.n	400364 <ov_configure+0x30>
  40033a:	e8df f001 	tbb	[pc, r1]
  40033e:	0515      	.short	0x0515
  400340:	0b090717 	.word	0x0b090717
  400344:	0f0d      	.short	0x0f0d
  400346:	11          	.byte	0x11
  400347:	00          	.byte	0x00
	case MY_OV2710_RESET:
		p_regs_conf = MY_OV2710_BASIC_RESET;
		break;

	case MY_OV2710_CONFIG:
		p_regs_conf = MY_OV2710_BASIC_CONFIG;
  400348:	490b      	ldr	r1, [pc, #44]	; (400378 <ov_configure+0x44>)
  40034a:	e010      	b.n	40036e <ov_configure+0x3a>
	case MY_OV2655_CONFIG:
		p_regs_conf = MY_OV2655_BASIC_CONFIG;
		break;

	case MY_OV2655_FALLBACK:
		p_regs_conf = MY_OV2655_BASIC_FALLBACK;
  40034c:	490b      	ldr	r1, [pc, #44]	; (40037c <ov_configure+0x48>)
		break;
  40034e:	e00e      	b.n	40036e <ov_configure+0x3a>

	case MY_OV2655_RESET:
		p_regs_conf = MY_OV2655_BASIC_RESET;
  400350:	490b      	ldr	r1, [pc, #44]	; (400380 <ov_configure+0x4c>)
		break;
  400352:	e00c      	b.n	40036e <ov_configure+0x3a>

	case MY_OV2655_FromUSB:
		p_regs_conf = MY_OV2655_BASIC_RESET;
  400354:	490a      	ldr	r1, [pc, #40]	; (400380 <ov_configure+0x4c>)
		break;
  400356:	e00a      	b.n	40036e <ov_configure+0x3a>

	case MY_OV2655_36:
		p_regs_conf = MY_OV2655_BASIC_FALLBACK;
  400358:	4908      	ldr	r1, [pc, #32]	; (40037c <ov_configure+0x48>)
		break;
  40035a:	e008      	b.n	40036e <ov_configure+0x3a>

	case TEST_PATTERN:
		p_regs_conf = OV7740_TEST_PATTERN;
  40035c:	4909      	ldr	r1, [pc, #36]	; (400384 <ov_configure+0x50>)
		break;
  40035e:	e006      	b.n	40036e <ov_configure+0x3a>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV7740_VGA_YUV422_20FPS;
  400360:	4909      	ldr	r1, [pc, #36]	; (400388 <ov_configure+0x54>)
		break;
  400362:	e004      	b.n	40036e <ov_configure+0x3a>
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf);
		return 0;
	}

	return 1;
  400364:	2001      	movs	r0, #1
  400366:	bd08      	pop	{r3, pc}
		p_regs_conf = MY_OV2710_BASIC_RESET;
  400368:	4908      	ldr	r1, [pc, #32]	; (40038c <ov_configure+0x58>)
  40036a:	e000      	b.n	40036e <ov_configure+0x3a>
		p_regs_conf = MY_OV2655_BASIC_CONFIG;
  40036c:	4908      	ldr	r1, [pc, #32]	; (400390 <ov_configure+0x5c>)
		ov_write_regs( p_twi, p_regs_conf);
  40036e:	4b09      	ldr	r3, [pc, #36]	; (400394 <ov_configure+0x60>)
  400370:	4798      	blx	r3
		return 0;
  400372:	2000      	movs	r0, #0
}
  400374:	bd08      	pop	{r3, pc}
  400376:	bf00      	nop
  400378:	0040e4e0 	.word	0x0040e4e0
  40037c:	0040e4d4 	.word	0x0040e4d4
  400380:	0040e4d8 	.word	0x0040e4d8
  400384:	0040e4f4 	.word	0x0040e4f4
  400388:	0040e4fc 	.word	0x0040e4fc
  40038c:	0040e4e4 	.word	0x0040e4e4
  400390:	0040e2b8 	.word	0x0040e2b8
  400394:	004001ed 	.word	0x004001ed

00400398 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  400398:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40039a:	4b06      	ldr	r3, [pc, #24]	; (4003b4 <sd_mmc_configure_slot+0x1c>)
  40039c:	6819      	ldr	r1, [r3, #0]
  40039e:	7f8b      	ldrb	r3, [r1, #30]
  4003a0:	3300      	adds	r3, #0
  4003a2:	bf18      	it	ne
  4003a4:	2301      	movne	r3, #1
  4003a6:	7b4a      	ldrb	r2, [r1, #13]
  4003a8:	6809      	ldr	r1, [r1, #0]
  4003aa:	4803      	ldr	r0, [pc, #12]	; (4003b8 <sd_mmc_configure_slot+0x20>)
  4003ac:	7800      	ldrb	r0, [r0, #0]
  4003ae:	4c03      	ldr	r4, [pc, #12]	; (4003bc <sd_mmc_configure_slot+0x24>)
  4003b0:	47a0      	blx	r4
  4003b2:	bd10      	pop	{r4, pc}
  4003b4:	20400b5c 	.word	0x20400b5c
  4003b8:	20400b84 	.word	0x20400b84
  4003bc:	00401f79 	.word	0x00401f79

004003c0 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4003c0:	b108      	cbz	r0, 4003c6 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4003c2:	2004      	movs	r0, #4
  4003c4:	4770      	bx	lr
{
  4003c6:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4003c8:	4b0e      	ldr	r3, [pc, #56]	; (400404 <sd_mmc_select_slot+0x44>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  4003ca:	7a9b      	ldrb	r3, [r3, #10]
  4003cc:	3b03      	subs	r3, #3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4003ce:	b2db      	uxtb	r3, r3
  4003d0:	2b01      	cmp	r3, #1
  4003d2:	d90d      	bls.n	4003f0 <sd_mmc_select_slot+0x30>
	sd_mmc_slot_sel = slot;
  4003d4:	2200      	movs	r2, #0
  4003d6:	4b0c      	ldr	r3, [pc, #48]	; (400408 <sd_mmc_select_slot+0x48>)
  4003d8:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  4003da:	4c0a      	ldr	r4, [pc, #40]	; (400404 <sd_mmc_select_slot+0x44>)
  4003dc:	4b0b      	ldr	r3, [pc, #44]	; (40040c <sd_mmc_select_slot+0x4c>)
  4003de:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  4003e0:	4b0b      	ldr	r3, [pc, #44]	; (400410 <sd_mmc_select_slot+0x50>)
  4003e2:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  4003e4:	7aa0      	ldrb	r0, [r4, #10]
  4003e6:	2802      	cmp	r0, #2
  4003e8:	bf14      	ite	ne
  4003ea:	2000      	movne	r0, #0
  4003ec:	2001      	moveq	r0, #1
  4003ee:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  4003f0:	4b04      	ldr	r3, [pc, #16]	; (400404 <sd_mmc_select_slot+0x44>)
  4003f2:	2202      	movs	r2, #2
  4003f4:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  4003f6:	4a07      	ldr	r2, [pc, #28]	; (400414 <sd_mmc_select_slot+0x54>)
  4003f8:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  4003fa:	2201      	movs	r2, #1
  4003fc:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  4003fe:	2200      	movs	r2, #0
  400400:	779a      	strb	r2, [r3, #30]
  400402:	e7e7      	b.n	4003d4 <sd_mmc_select_slot+0x14>
  400404:	20400b60 	.word	0x20400b60
  400408:	20400b84 	.word	0x20400b84
  40040c:	20400b5c 	.word	0x20400b5c
  400410:	00400399 	.word	0x00400399
  400414:	00061a80 	.word	0x00061a80

00400418 <sdio_cmd52>:
{
  400418:	b538      	push	{r3, r4, r5, lr}
  40041a:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  40041c:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  40041e:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  400422:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  400426:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  40042a:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  40042c:	4311      	orrs	r1, r2
  40042e:	f241 3034 	movw	r0, #4916	; 0x1334
  400432:	4b05      	ldr	r3, [pc, #20]	; (400448 <sdio_cmd52+0x30>)
  400434:	4798      	blx	r3
  400436:	4605      	mov	r5, r0
  400438:	b908      	cbnz	r0, 40043e <sdio_cmd52+0x26>
}
  40043a:	4628      	mov	r0, r5
  40043c:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  40043e:	4b03      	ldr	r3, [pc, #12]	; (40044c <sdio_cmd52+0x34>)
  400440:	4798      	blx	r3
  400442:	7020      	strb	r0, [r4, #0]
	return true;
  400444:	e7f9      	b.n	40043a <sdio_cmd52+0x22>
  400446:	bf00      	nop
  400448:	00402061 	.word	0x00402061
  40044c:	00402085 	.word	0x00402085

00400450 <sd_mmc_cmd9_mci>:
{
  400450:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  400452:	4b09      	ldr	r3, [pc, #36]	; (400478 <sd_mmc_cmd9_mci+0x28>)
  400454:	681b      	ldr	r3, [r3, #0]
  400456:	8919      	ldrh	r1, [r3, #8]
  400458:	0409      	lsls	r1, r1, #16
  40045a:	f641 3009 	movw	r0, #6921	; 0x1b09
  40045e:	4b07      	ldr	r3, [pc, #28]	; (40047c <sd_mmc_cmd9_mci+0x2c>)
  400460:	4798      	blx	r3
  400462:	4604      	mov	r4, r0
  400464:	b908      	cbnz	r0, 40046a <sd_mmc_cmd9_mci+0x1a>
}
  400466:	4620      	mov	r0, r4
  400468:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  40046a:	4b03      	ldr	r3, [pc, #12]	; (400478 <sd_mmc_cmd9_mci+0x28>)
  40046c:	6818      	ldr	r0, [r3, #0]
  40046e:	300e      	adds	r0, #14
  400470:	4b03      	ldr	r3, [pc, #12]	; (400480 <sd_mmc_cmd9_mci+0x30>)
  400472:	4798      	blx	r3
	return true;
  400474:	e7f7      	b.n	400466 <sd_mmc_cmd9_mci+0x16>
  400476:	bf00      	nop
  400478:	20400b5c 	.word	0x20400b5c
  40047c:	00402061 	.word	0x00402061
  400480:	0040208d 	.word	0x0040208d

00400484 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400484:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400486:	4b04      	ldr	r3, [pc, #16]	; (400498 <sd_mmc_deselect_slot+0x14>)
  400488:	781b      	ldrb	r3, [r3, #0]
  40048a:	b103      	cbz	r3, 40048e <sd_mmc_deselect_slot+0xa>
  40048c:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40048e:	2000      	movs	r0, #0
  400490:	4b02      	ldr	r3, [pc, #8]	; (40049c <sd_mmc_deselect_slot+0x18>)
  400492:	4798      	blx	r3
	}
}
  400494:	e7fa      	b.n	40048c <sd_mmc_deselect_slot+0x8>
  400496:	bf00      	nop
  400498:	20400b84 	.word	0x20400b84
  40049c:	0040203d 	.word	0x0040203d

004004a0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  4004a0:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4004a2:	2204      	movs	r2, #4
  4004a4:	4b03      	ldr	r3, [pc, #12]	; (4004b4 <sd_mmc_init+0x14>)
  4004a6:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4004a8:	22ff      	movs	r2, #255	; 0xff
  4004aa:	4b03      	ldr	r3, [pc, #12]	; (4004b8 <sd_mmc_init+0x18>)
  4004ac:	701a      	strb	r2, [r3, #0]
	driver_init();
  4004ae:	4b03      	ldr	r3, [pc, #12]	; (4004bc <sd_mmc_init+0x1c>)
  4004b0:	4798      	blx	r3
  4004b2:	bd08      	pop	{r3, pc}
  4004b4:	20400b60 	.word	0x20400b60
  4004b8:	20400b84 	.word	0x20400b84
  4004bc:	00401f3d 	.word	0x00401f3d

004004c0 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  4004c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4004c4:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4004c6:	4ba7      	ldr	r3, [pc, #668]	; (400764 <sd_mmc_check+0x2a4>)
  4004c8:	4798      	blx	r3
  4004ca:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4004cc:	2801      	cmp	r0, #1
  4004ce:	d005      	beq.n	4004dc <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  4004d0:	4ba5      	ldr	r3, [pc, #660]	; (400768 <sd_mmc_check+0x2a8>)
  4004d2:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  4004d4:	4620      	mov	r0, r4
  4004d6:	b015      	add	sp, #84	; 0x54
  4004d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  4004dc:	ae14      	add	r6, sp, #80	; 0x50
  4004de:	2308      	movs	r3, #8
  4004e0:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  4004e4:	4ba1      	ldr	r3, [pc, #644]	; (40076c <sd_mmc_check+0x2ac>)
  4004e6:	681b      	ldr	r3, [r3, #0]
  4004e8:	2701      	movs	r7, #1
  4004ea:	72df      	strb	r7, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4004ec:	2500      	movs	r5, #0
  4004ee:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
  4004f0:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
  4004f2:	4b9f      	ldr	r3, [pc, #636]	; (400770 <sd_mmc_check+0x2b0>)
  4004f4:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4004f6:	9600      	str	r6, [sp, #0]
  4004f8:	462b      	mov	r3, r5
  4004fa:	2206      	movs	r2, #6
  4004fc:	4629      	mov	r1, r5
  4004fe:	4638      	mov	r0, r7
  400500:	4e9c      	ldr	r6, [pc, #624]	; (400774 <sd_mmc_check+0x2b4>)
  400502:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400504:	4629      	mov	r1, r5
  400506:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40050a:	4b9b      	ldr	r3, [pc, #620]	; (400778 <sd_mmc_check+0x2b8>)
  40050c:	4798      	blx	r3
  40050e:	b930      	cbnz	r0, 40051e <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  400510:	4b96      	ldr	r3, [pc, #600]	; (40076c <sd_mmc_check+0x2ac>)
  400512:	681b      	ldr	r3, [r3, #0]
  400514:	2403      	movs	r4, #3
  400516:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  400518:	4b93      	ldr	r3, [pc, #588]	; (400768 <sd_mmc_check+0x2a8>)
  40051a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  40051c:	e7da      	b.n	4004d4 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  40051e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  400522:	f245 5008 	movw	r0, #21768	; 0x5508
  400526:	4b94      	ldr	r3, [pc, #592]	; (400778 <sd_mmc_check+0x2b8>)
  400528:	4798      	blx	r3
  40052a:	2800      	cmp	r0, #0
  40052c:	f040 8093 	bne.w	400656 <sd_mmc_check+0x196>
	*v2 = 0;
  400530:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  400534:	2100      	movs	r1, #0
  400536:	f244 5005 	movw	r0, #17669	; 0x4505
  40053a:	4b8f      	ldr	r3, [pc, #572]	; (400778 <sd_mmc_check+0x2b8>)
  40053c:	4798      	blx	r3
  40053e:	2800      	cmp	r0, #0
  400540:	f040 8097 	bne.w	400672 <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400544:	4b89      	ldr	r3, [pc, #548]	; (40076c <sd_mmc_check+0x2ac>)
  400546:	681b      	ldr	r3, [r3, #0]
  400548:	7adb      	ldrb	r3, [r3, #11]
  40054a:	f013 0f01 	tst.w	r3, #1
  40054e:	f040 80b5 	bne.w	4006bc <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400552:	2100      	movs	r1, #0
  400554:	f245 1003 	movw	r0, #20739	; 0x5103
  400558:	4b87      	ldr	r3, [pc, #540]	; (400778 <sd_mmc_check+0x2b8>)
  40055a:	4798      	blx	r3
  40055c:	2800      	cmp	r0, #0
  40055e:	d0d7      	beq.n	400510 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400560:	4d82      	ldr	r5, [pc, #520]	; (40076c <sd_mmc_check+0x2ac>)
  400562:	682e      	ldr	r6, [r5, #0]
  400564:	4b85      	ldr	r3, [pc, #532]	; (40077c <sd_mmc_check+0x2bc>)
  400566:	4798      	blx	r3
  400568:	0c00      	lsrs	r0, r0, #16
  40056a:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40056c:	682b      	ldr	r3, [r5, #0]
  40056e:	7adb      	ldrb	r3, [r3, #11]
  400570:	f013 0f01 	tst.w	r3, #1
  400574:	d034      	beq.n	4005e0 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  400576:	4b82      	ldr	r3, [pc, #520]	; (400780 <sd_mmc_check+0x2c0>)
  400578:	4798      	blx	r3
  40057a:	2800      	cmp	r0, #0
  40057c:	d0c8      	beq.n	400510 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  40057e:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400580:	7c5a      	ldrb	r2, [r3, #17]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400582:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400586:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40058a:	497e      	ldr	r1, [pc, #504]	; (400784 <sd_mmc_check+0x2c4>)
  40058c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400594:	fb02 f201 	mul.w	r2, r2, r1
  400598:	497b      	ldr	r1, [pc, #492]	; (400788 <sd_mmc_check+0x2c8>)
  40059a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40059e:	fb02 f201 	mul.w	r2, r2, r1
  4005a2:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  4005a4:	7b9a      	ldrb	r2, [r3, #14]
  4005a6:	0992      	lsrs	r2, r2, #6
  4005a8:	f040 820b 	bne.w	4009c2 <sd_mmc_check+0x502>
  4005ac:	7d99      	ldrb	r1, [r3, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005ae:	7d58      	ldrb	r0, [r3, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005b0:	7d1a      	ldrb	r2, [r3, #20]
  4005b2:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005b4:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  4005b8:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005bc:	7e18      	ldrb	r0, [r3, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005be:	7dd9      	ldrb	r1, [r3, #23]
  4005c0:	0049      	lsls	r1, r1, #1
  4005c2:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  4005c6:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4005ca:	3201      	adds	r2, #1
  4005cc:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  4005d0:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4005d2:	408a      	lsls	r2, r1
  4005d4:	7cd9      	ldrb	r1, [r3, #19]
  4005d6:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4005da:	408a      	lsls	r2, r1
				/ 1024;
  4005dc:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4005de:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4005e0:	4b62      	ldr	r3, [pc, #392]	; (40076c <sd_mmc_check+0x2ac>)
  4005e2:	681b      	ldr	r3, [r3, #0]
  4005e4:	8919      	ldrh	r1, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4005e6:	0409      	lsls	r1, r1, #16
  4005e8:	f243 1007 	movw	r0, #12551	; 0x3107
  4005ec:	4b62      	ldr	r3, [pc, #392]	; (400778 <sd_mmc_check+0x2b8>)
  4005ee:	4798      	blx	r3
  4005f0:	2800      	cmp	r0, #0
  4005f2:	d08d      	beq.n	400510 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4005f4:	4b5d      	ldr	r3, [pc, #372]	; (40076c <sd_mmc_check+0x2ac>)
  4005f6:	681b      	ldr	r3, [r3, #0]
  4005f8:	7ada      	ldrb	r2, [r3, #11]
  4005fa:	f012 0f01 	tst.w	r2, #1
  4005fe:	f040 81ed 	bne.w	4009dc <sd_mmc_check+0x51c>
	if (IS_SDIO()) {
  400602:	4b5a      	ldr	r3, [pc, #360]	; (40076c <sd_mmc_check+0x2ac>)
  400604:	681b      	ldr	r3, [r3, #0]
  400606:	7adb      	ldrb	r3, [r3, #11]
  400608:	f013 0f04 	tst.w	r3, #4
  40060c:	f000 829c 	beq.w	400b48 <sd_mmc_check+0x688>
  400610:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  400612:	2700      	movs	r7, #0
  400614:	4e57      	ldr	r6, [pc, #348]	; (400774 <sd_mmc_check+0x2b4>)
  400616:	f1a5 0309 	sub.w	r3, r5, #9
  40061a:	aa03      	add	r2, sp, #12
  40061c:	4413      	add	r3, r2
  40061e:	9300      	str	r3, [sp, #0]
  400620:	463b      	mov	r3, r7
  400622:	462a      	mov	r2, r5
  400624:	4639      	mov	r1, r7
  400626:	4638      	mov	r0, r7
  400628:	47b0      	blx	r6
		addr_old++;
  40062a:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  40062c:	2d0d      	cmp	r5, #13
  40062e:	d1f2      	bne.n	400616 <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400630:	f89d 300d 	ldrb.w	r3, [sp, #13]
  400634:	f89d 900c 	ldrb.w	r9, [sp, #12]
  400638:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40063c:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400640:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400644:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400648:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  40064c:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40064e:	f04f 0800 	mov.w	r8, #0
  400652:	4f48      	ldr	r7, [pc, #288]	; (400774 <sd_mmc_check+0x2b4>)
  400654:	e239      	b.n	400aca <sd_mmc_check+0x60a>
	resp = driver_get_response();
  400656:	4b49      	ldr	r3, [pc, #292]	; (40077c <sd_mmc_check+0x2bc>)
  400658:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  40065a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40065e:	f000 8347 	beq.w	400cf0 <sd_mmc_check+0x830>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400662:	f3c0 000b 	ubfx	r0, r0, #0, #12
  400666:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40066a:	f47f af51 	bne.w	400510 <sd_mmc_check+0x50>
	*v2 = 1;
  40066e:	46b9      	mov	r9, r7
  400670:	e760      	b.n	400534 <sd_mmc_check+0x74>
	resp = driver_get_response();
  400672:	4b42      	ldr	r3, [pc, #264]	; (40077c <sd_mmc_check+0x2bc>)
  400674:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  400676:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  40067a:	f43f af63 	beq.w	400544 <sd_mmc_check+0x84>
  40067e:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400682:	f244 5805 	movw	r8, #17669	; 0x4505
  400686:	4e3c      	ldr	r6, [pc, #240]	; (400778 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400688:	4f3c      	ldr	r7, [pc, #240]	; (40077c <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40068a:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  40068e:	4640      	mov	r0, r8
  400690:	47b0      	blx	r6
  400692:	2800      	cmp	r0, #0
  400694:	f43f af3c 	beq.w	400510 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400698:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  40069a:	2800      	cmp	r0, #0
  40069c:	db02      	blt.n	4006a4 <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  40069e:	3d01      	subs	r5, #1
  4006a0:	d1f3      	bne.n	40068a <sd_mmc_check+0x1ca>
  4006a2:	e735      	b.n	400510 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  4006a4:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  4006a8:	d104      	bne.n	4006b4 <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  4006aa:	4b30      	ldr	r3, [pc, #192]	; (40076c <sd_mmc_check+0x2ac>)
  4006ac:	681b      	ldr	r3, [r3, #0]
  4006ae:	2204      	movs	r2, #4
  4006b0:	72da      	strb	r2, [r3, #11]
  4006b2:	e74e      	b.n	400552 <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  4006b4:	4b2d      	ldr	r3, [pc, #180]	; (40076c <sd_mmc_check+0x2ac>)
  4006b6:	681b      	ldr	r3, [r3, #0]
  4006b8:	2205      	movs	r2, #5
  4006ba:	72da      	strb	r2, [r3, #11]
  4006bc:	f1b9 0f00 	cmp.w	r9, #0
  4006c0:	4f32      	ldr	r7, [pc, #200]	; (40078c <sd_mmc_check+0x2cc>)
  4006c2:	bf14      	ite	ne
  4006c4:	46b9      	movne	r9, r7
  4006c6:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  4006ca:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4006ce:	f04f 0800 	mov.w	r8, #0
  4006d2:	4e29      	ldr	r6, [pc, #164]	; (400778 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4006d4:	4f29      	ldr	r7, [pc, #164]	; (40077c <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4006d6:	4641      	mov	r1, r8
  4006d8:	f241 1037 	movw	r0, #4407	; 0x1137
  4006dc:	47b0      	blx	r6
  4006de:	b148      	cbz	r0, 4006f4 <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4006e0:	4649      	mov	r1, r9
  4006e2:	f244 5029 	movw	r0, #17705	; 0x4529
  4006e6:	47b0      	blx	r6
  4006e8:	b120      	cbz	r0, 4006f4 <sd_mmc_check+0x234>
		resp = driver_get_response();
  4006ea:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4006ec:	2800      	cmp	r0, #0
  4006ee:	db20      	blt.n	400732 <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4006f0:	3d01      	subs	r5, #1
  4006f2:	d1f0      	bne.n	4006d6 <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4006f4:	4b1d      	ldr	r3, [pc, #116]	; (40076c <sd_mmc_check+0x2ac>)
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	2202      	movs	r2, #2
  4006fa:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4006fc:	2100      	movs	r1, #0
  4006fe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400702:	4b1d      	ldr	r3, [pc, #116]	; (400778 <sd_mmc_check+0x2b8>)
  400704:	4798      	blx	r3
  400706:	2800      	cmp	r0, #0
  400708:	f43f af02 	beq.w	400510 <sd_mmc_check+0x50>
  40070c:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400710:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40078c <sd_mmc_check+0x2cc>
  400714:	4e18      	ldr	r6, [pc, #96]	; (400778 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400716:	4f19      	ldr	r7, [pc, #100]	; (40077c <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400718:	4641      	mov	r1, r8
  40071a:	f244 5001 	movw	r0, #17665	; 0x4501
  40071e:	47b0      	blx	r6
  400720:	2800      	cmp	r0, #0
  400722:	f43f aef5 	beq.w	400510 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400726:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  400728:	2800      	cmp	r0, #0
  40072a:	db31      	blt.n	400790 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  40072c:	3d01      	subs	r5, #1
  40072e:	d1f3      	bne.n	400718 <sd_mmc_check+0x258>
  400730:	e6ee      	b.n	400510 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  400732:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400736:	d005      	beq.n	400744 <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400738:	4b0c      	ldr	r3, [pc, #48]	; (40076c <sd_mmc_check+0x2ac>)
  40073a:	681a      	ldr	r2, [r3, #0]
  40073c:	7ad3      	ldrb	r3, [r2, #11]
  40073e:	f043 0308 	orr.w	r3, r3, #8
  400742:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400744:	4b09      	ldr	r3, [pc, #36]	; (40076c <sd_mmc_check+0x2ac>)
  400746:	681b      	ldr	r3, [r3, #0]
  400748:	7adb      	ldrb	r3, [r3, #11]
  40074a:	f013 0f01 	tst.w	r3, #1
  40074e:	f43f af00 	beq.w	400552 <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400752:	2100      	movs	r1, #0
  400754:	f645 3002 	movw	r0, #23298	; 0x5b02
  400758:	4b07      	ldr	r3, [pc, #28]	; (400778 <sd_mmc_check+0x2b8>)
  40075a:	4798      	blx	r3
  40075c:	2800      	cmp	r0, #0
  40075e:	f47f aef8 	bne.w	400552 <sd_mmc_check+0x92>
  400762:	e6d5      	b.n	400510 <sd_mmc_check+0x50>
  400764:	004003c1 	.word	0x004003c1
  400768:	00400485 	.word	0x00400485
  40076c:	20400b5c 	.word	0x20400b5c
  400770:	0040203f 	.word	0x0040203f
  400774:	00400419 	.word	0x00400419
  400778:	00402061 	.word	0x00402061
  40077c:	00402085 	.word	0x00402085
  400780:	00400451 	.word	0x00400451
  400784:	0040e540 	.word	0x0040e540
  400788:	0040e55c 	.word	0x0040e55c
  40078c:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  400790:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  400794:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400798:	d027      	beq.n	4007ea <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40079a:	2100      	movs	r1, #0
  40079c:	f645 3002 	movw	r0, #23298	; 0x5b02
  4007a0:	4ba7      	ldr	r3, [pc, #668]	; (400a40 <sd_mmc_check+0x580>)
  4007a2:	4798      	blx	r3
  4007a4:	2800      	cmp	r0, #0
  4007a6:	f43f aeb3 	beq.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  4007aa:	4ba6      	ldr	r3, [pc, #664]	; (400a44 <sd_mmc_check+0x584>)
  4007ac:	681b      	ldr	r3, [r3, #0]
  4007ae:	2201      	movs	r2, #1
  4007b0:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4007b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4007b6:	f241 1003 	movw	r0, #4355	; 0x1103
  4007ba:	4ba1      	ldr	r3, [pc, #644]	; (400a40 <sd_mmc_check+0x580>)
  4007bc:	4798      	blx	r3
  4007be:	2800      	cmp	r0, #0
  4007c0:	f43f aea6 	beq.w	400510 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  4007c4:	4ba0      	ldr	r3, [pc, #640]	; (400a48 <sd_mmc_check+0x588>)
  4007c6:	4798      	blx	r3
  4007c8:	2800      	cmp	r0, #0
  4007ca:	f43f aea1 	beq.w	400510 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4007ce:	4b9d      	ldr	r3, [pc, #628]	; (400a44 <sd_mmc_check+0x584>)
  4007d0:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4007d2:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
  4007d4:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4007d8:	3b01      	subs	r3, #1
  4007da:	2b03      	cmp	r3, #3
  4007dc:	d80c      	bhi.n	4007f8 <sd_mmc_check+0x338>
  4007de:	e8df f013 	tbh	[pc, r3, lsl #1]
  4007e2:	00cc      	.short	0x00cc
  4007e4:	00d200cf 	.word	0x00d200cf
  4007e8:	00d5      	.short	0x00d5
				sd_mmc_card->type |= CARD_TYPE_HC;
  4007ea:	4b96      	ldr	r3, [pc, #600]	; (400a44 <sd_mmc_check+0x584>)
  4007ec:	681a      	ldr	r2, [r3, #0]
  4007ee:	7ad3      	ldrb	r3, [r2, #11]
  4007f0:	f043 0308 	orr.w	r3, r3, #8
  4007f4:	72d3      	strb	r3, [r2, #11]
  4007f6:	e7d0      	b.n	40079a <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4007f8:	2312      	movs	r3, #18
  4007fa:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4007fc:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4007fe:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400802:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400806:	4991      	ldr	r1, [pc, #580]	; (400a4c <sd_mmc_check+0x58c>)
  400808:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  40080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400810:	fb03 f301 	mul.w	r3, r3, r1
  400814:	498e      	ldr	r1, [pc, #568]	; (400a50 <sd_mmc_check+0x590>)
  400816:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40081a:	fb03 f301 	mul.w	r3, r3, r1
  40081e:	6013      	str	r3, [r2, #0]
  400820:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400822:	7d50      	ldrb	r0, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400824:	7d13      	ldrb	r3, [r2, #20]
  400826:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400828:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  40082c:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400830:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  400834:	f640 71ff 	movw	r1, #4095	; 0xfff
  400838:	428b      	cmp	r3, r1
  40083a:	d00f      	beq.n	40085c <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40083c:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40083e:	7dd1      	ldrb	r1, [r2, #23]
  400840:	0049      	lsls	r1, r1, #1
  400842:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400846:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400848:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  40084c:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40084e:	408b      	lsls	r3, r1
  400850:	7cd1      	ldrb	r1, [r2, #19]
  400852:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  400856:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400858:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  40085a:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  40085c:	8911      	ldrh	r1, [r2, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40085e:	0409      	lsls	r1, r1, #16
  400860:	f243 1007 	movw	r0, #12551	; 0x3107
  400864:	4b76      	ldr	r3, [pc, #472]	; (400a40 <sd_mmc_check+0x580>)
  400866:	4798      	blx	r3
  400868:	2800      	cmp	r0, #0
  40086a:	f43f ae51 	beq.w	400510 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  40086e:	4b75      	ldr	r3, [pc, #468]	; (400a44 <sd_mmc_check+0x584>)
  400870:	681b      	ldr	r3, [r3, #0]
  400872:	7b1b      	ldrb	r3, [r3, #12]
  400874:	2b3f      	cmp	r3, #63	; 0x3f
  400876:	f240 8096 	bls.w	4009a6 <sd_mmc_check+0x4e6>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  40087a:	2100      	movs	r1, #0
  40087c:	9100      	str	r1, [sp, #0]
  40087e:	2301      	movs	r3, #1
  400880:	f44f 7200 	mov.w	r2, #512	; 0x200
  400884:	4873      	ldr	r0, [pc, #460]	; (400a54 <sd_mmc_check+0x594>)
  400886:	4d74      	ldr	r5, [pc, #464]	; (400a58 <sd_mmc_check+0x598>)
  400888:	47a8      	blx	r5
  40088a:	2800      	cmp	r0, #0
  40088c:	f43f ae40 	beq.w	400510 <sd_mmc_check+0x50>
  400890:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  400892:	4e72      	ldr	r6, [pc, #456]	; (400a5c <sd_mmc_check+0x59c>)
  400894:	a803      	add	r0, sp, #12
  400896:	47b0      	blx	r6
  400898:	2800      	cmp	r0, #0
  40089a:	f43f ae39 	beq.w	400510 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  40089e:	3501      	adds	r5, #1
  4008a0:	b2ad      	uxth	r5, r5
  4008a2:	2d32      	cmp	r5, #50	; 0x32
  4008a4:	d1f6      	bne.n	400894 <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  4008a6:	9e03      	ldr	r6, [sp, #12]
  4008a8:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4008ac:	4b65      	ldr	r3, [pc, #404]	; (400a44 <sd_mmc_check+0x584>)
  4008ae:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4008b0:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4008b2:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008b4:	7d1b      	ldrb	r3, [r3, #20]
  4008b6:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008b8:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  4008bc:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4008c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4008c4:	f640 72ff 	movw	r2, #4095	; 0xfff
  4008c8:	4293      	cmp	r3, r2
  4008ca:	d10e      	bne.n	4008ea <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  4008cc:	4f63      	ldr	r7, [pc, #396]	; (400a5c <sd_mmc_check+0x59c>)
  4008ce:	a804      	add	r0, sp, #16
  4008d0:	47b8      	blx	r7
  4008d2:	2800      	cmp	r0, #0
  4008d4:	f43f ae1c 	beq.w	400510 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4008d8:	3501      	adds	r5, #1
  4008da:	b2ad      	uxth	r5, r5
  4008dc:	2d35      	cmp	r5, #53	; 0x35
  4008de:	d9f6      	bls.n	4008ce <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  4008e0:	4b58      	ldr	r3, [pc, #352]	; (400a44 <sd_mmc_check+0x584>)
  4008e2:	681a      	ldr	r2, [r3, #0]
  4008e4:	9b04      	ldr	r3, [sp, #16]
  4008e6:	085b      	lsrs	r3, r3, #1
  4008e8:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4008ea:	4f5c      	ldr	r7, [pc, #368]	; (400a5c <sd_mmc_check+0x59c>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4008ec:	2d7f      	cmp	r5, #127	; 0x7f
  4008ee:	d950      	bls.n	400992 <sd_mmc_check+0x4d2>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4008f0:	4b5b      	ldr	r3, [pc, #364]	; (400a60 <sd_mmc_check+0x5a0>)
  4008f2:	7818      	ldrb	r0, [r3, #0]
  4008f4:	4b5b      	ldr	r3, [pc, #364]	; (400a64 <sd_mmc_check+0x5a4>)
  4008f6:	4798      	blx	r3
  4008f8:	2803      	cmp	r0, #3
  4008fa:	d91d      	bls.n	400938 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4008fc:	4b58      	ldr	r3, [pc, #352]	; (400a60 <sd_mmc_check+0x5a0>)
  4008fe:	7818      	ldrb	r0, [r3, #0]
  400900:	4b58      	ldr	r3, [pc, #352]	; (400a64 <sd_mmc_check+0x5a4>)
  400902:	4798      	blx	r3
  400904:	4605      	mov	r5, r0
	switch (bus_width) {
  400906:	2804      	cmp	r0, #4
  400908:	d04b      	beq.n	4009a2 <sd_mmc_check+0x4e2>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40090a:	4b57      	ldr	r3, [pc, #348]	; (400a68 <sd_mmc_check+0x5a8>)
  40090c:	4957      	ldr	r1, [pc, #348]	; (400a6c <sd_mmc_check+0x5ac>)
  40090e:	2808      	cmp	r0, #8
  400910:	bf18      	it	ne
  400912:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  400914:	f243 1006 	movw	r0, #12550	; 0x3106
  400918:	4b49      	ldr	r3, [pc, #292]	; (400a40 <sd_mmc_check+0x580>)
  40091a:	4798      	blx	r3
  40091c:	2800      	cmp	r0, #0
  40091e:	f43f adf7 	beq.w	400510 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400922:	4b53      	ldr	r3, [pc, #332]	; (400a70 <sd_mmc_check+0x5b0>)
  400924:	4798      	blx	r3
  400926:	f010 0f80 	tst.w	r0, #128	; 0x80
  40092a:	f47f adf1 	bne.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  40092e:	4b45      	ldr	r3, [pc, #276]	; (400a44 <sd_mmc_check+0x584>)
  400930:	681b      	ldr	r3, [r3, #0]
  400932:	735d      	strb	r5, [r3, #13]
			sd_mmc_configure_slot();
  400934:	4b4f      	ldr	r3, [pc, #316]	; (400a74 <sd_mmc_check+0x5b4>)
  400936:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400938:	4b4f      	ldr	r3, [pc, #316]	; (400a78 <sd_mmc_check+0x5b8>)
  40093a:	4798      	blx	r3
  40093c:	b1b6      	cbz	r6, 40096c <sd_mmc_check+0x4ac>
  40093e:	b1a8      	cbz	r0, 40096c <sd_mmc_check+0x4ac>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400940:	494e      	ldr	r1, [pc, #312]	; (400a7c <sd_mmc_check+0x5bc>)
  400942:	f243 1006 	movw	r0, #12550	; 0x3106
  400946:	4b3e      	ldr	r3, [pc, #248]	; (400a40 <sd_mmc_check+0x580>)
  400948:	4798      	blx	r3
  40094a:	2800      	cmp	r0, #0
  40094c:	f43f ade0 	beq.w	400510 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400950:	4b47      	ldr	r3, [pc, #284]	; (400a70 <sd_mmc_check+0x5b0>)
  400952:	4798      	blx	r3
  400954:	f010 0f80 	tst.w	r0, #128	; 0x80
  400958:	f47f adda 	bne.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  40095c:	4b39      	ldr	r3, [pc, #228]	; (400a44 <sd_mmc_check+0x584>)
  40095e:	681b      	ldr	r3, [r3, #0]
  400960:	2201      	movs	r2, #1
  400962:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  400964:	4a46      	ldr	r2, [pc, #280]	; (400a80 <sd_mmc_check+0x5c0>)
  400966:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400968:	4b42      	ldr	r3, [pc, #264]	; (400a74 <sd_mmc_check+0x5b4>)
  40096a:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  40096c:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40096e:	f44f 7800 	mov.w	r8, #512	; 0x200
  400972:	f241 1710 	movw	r7, #4368	; 0x1110
  400976:	4e32      	ldr	r6, [pc, #200]	; (400a40 <sd_mmc_check+0x580>)
  400978:	e01d      	b.n	4009b6 <sd_mmc_check+0x4f6>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  40097a:	2314      	movs	r3, #20
  40097c:	7313      	strb	r3, [r2, #12]
  40097e:	e73d      	b.n	4007fc <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  400980:	2322      	movs	r3, #34	; 0x22
  400982:	7313      	strb	r3, [r2, #12]
  400984:	e73a      	b.n	4007fc <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  400986:	2330      	movs	r3, #48	; 0x30
  400988:	7313      	strb	r3, [r2, #12]
  40098a:	e737      	b.n	4007fc <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  40098c:	2340      	movs	r3, #64	; 0x40
  40098e:	7313      	strb	r3, [r2, #12]
  400990:	e734      	b.n	4007fc <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  400992:	a804      	add	r0, sp, #16
  400994:	47b8      	blx	r7
  400996:	2800      	cmp	r0, #0
  400998:	f43f adba 	beq.w	400510 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  40099c:	3501      	adds	r5, #1
  40099e:	b2ad      	uxth	r5, r5
  4009a0:	e7a4      	b.n	4008ec <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4009a2:	4938      	ldr	r1, [pc, #224]	; (400a84 <sd_mmc_check+0x5c4>)
  4009a4:	e7b6      	b.n	400914 <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  4009a6:	4b33      	ldr	r3, [pc, #204]	; (400a74 <sd_mmc_check+0x5b4>)
  4009a8:	4798      	blx	r3
  4009aa:	e7df      	b.n	40096c <sd_mmc_check+0x4ac>
  4009ac:	3d01      	subs	r5, #1
	while (retry--) {
  4009ae:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  4009b2:	f43f adad 	beq.w	400510 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4009b6:	4641      	mov	r1, r8
  4009b8:	4638      	mov	r0, r7
  4009ba:	47b0      	blx	r6
  4009bc:	2800      	cmp	r0, #0
  4009be:	d0f5      	beq.n	4009ac <sd_mmc_check+0x4ec>
  4009c0:	e10e      	b.n	400be0 <sd_mmc_check+0x720>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4009c2:	7dd9      	ldrb	r1, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4009c4:	7d98      	ldrb	r0, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4009c6:	7d5a      	ldrb	r2, [r3, #21]
  4009c8:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4009ca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  4009ce:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  4009d0:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  4009d4:	3201      	adds	r2, #1
  4009d6:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4009d8:	605a      	str	r2, [r3, #4]
  4009da:	e601      	b.n	4005e0 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4009dc:	8919      	ldrh	r1, [r3, #8]
  4009de:	0409      	lsls	r1, r1, #16
  4009e0:	f241 1037 	movw	r0, #4407	; 0x1137
  4009e4:	4b16      	ldr	r3, [pc, #88]	; (400a40 <sd_mmc_check+0x580>)
  4009e6:	4798      	blx	r3
  4009e8:	2800      	cmp	r0, #0
  4009ea:	f43f ad91 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4009ee:	2301      	movs	r3, #1
  4009f0:	9300      	str	r3, [sp, #0]
  4009f2:	2208      	movs	r2, #8
  4009f4:	2100      	movs	r1, #0
  4009f6:	4824      	ldr	r0, [pc, #144]	; (400a88 <sd_mmc_check+0x5c8>)
  4009f8:	4d17      	ldr	r5, [pc, #92]	; (400a58 <sd_mmc_check+0x598>)
  4009fa:	47a8      	blx	r5
  4009fc:	2800      	cmp	r0, #0
  4009fe:	f43f ad87 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  400a02:	2101      	movs	r1, #1
  400a04:	a804      	add	r0, sp, #16
  400a06:	4b21      	ldr	r3, [pc, #132]	; (400a8c <sd_mmc_check+0x5cc>)
  400a08:	4798      	blx	r3
  400a0a:	2800      	cmp	r0, #0
  400a0c:	f43f ad80 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400a10:	4b1f      	ldr	r3, [pc, #124]	; (400a90 <sd_mmc_check+0x5d0>)
  400a12:	4798      	blx	r3
  400a14:	2800      	cmp	r0, #0
  400a16:	f43f ad7b 	beq.w	400510 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  400a1a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a1e:	f003 030f 	and.w	r3, r3, #15
  400a22:	2b01      	cmp	r3, #1
  400a24:	d036      	beq.n	400a94 <sd_mmc_check+0x5d4>
  400a26:	b133      	cbz	r3, 400a36 <sd_mmc_check+0x576>
  400a28:	2b02      	cmp	r3, #2
  400a2a:	d038      	beq.n	400a9e <sd_mmc_check+0x5de>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400a2c:	4b05      	ldr	r3, [pc, #20]	; (400a44 <sd_mmc_check+0x584>)
  400a2e:	681b      	ldr	r3, [r3, #0]
  400a30:	2210      	movs	r2, #16
  400a32:	731a      	strb	r2, [r3, #12]
  400a34:	e5e5      	b.n	400602 <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400a36:	4b03      	ldr	r3, [pc, #12]	; (400a44 <sd_mmc_check+0x584>)
  400a38:	681b      	ldr	r3, [r3, #0]
  400a3a:	2210      	movs	r2, #16
  400a3c:	731a      	strb	r2, [r3, #12]
  400a3e:	e5e0      	b.n	400602 <sd_mmc_check+0x142>
  400a40:	00402061 	.word	0x00402061
  400a44:	20400b5c 	.word	0x20400b5c
  400a48:	00400451 	.word	0x00400451
  400a4c:	0040e540 	.word	0x0040e540
  400a50:	0040e500 	.word	0x0040e500
  400a54:	00081108 	.word	0x00081108
  400a58:	004020bd 	.word	0x004020bd
  400a5c:	00402185 	.word	0x00402185
  400a60:	20400b84 	.word	0x20400b84
  400a64:	00401f69 	.word	0x00401f69
  400a68:	01b70000 	.word	0x01b70000
  400a6c:	01b70200 	.word	0x01b70200
  400a70:	00402085 	.word	0x00402085
  400a74:	00400399 	.word	0x00400399
  400a78:	00401f73 	.word	0x00401f73
  400a7c:	03b90100 	.word	0x03b90100
  400a80:	03197500 	.word	0x03197500
  400a84:	01b70100 	.word	0x01b70100
  400a88:	00081133 	.word	0x00081133
  400a8c:	004021f9 	.word	0x004021f9
  400a90:	00402289 	.word	0x00402289
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400a94:	4b98      	ldr	r3, [pc, #608]	; (400cf8 <sd_mmc_check+0x838>)
  400a96:	681b      	ldr	r3, [r3, #0]
  400a98:	221a      	movs	r2, #26
  400a9a:	731a      	strb	r2, [r3, #12]
  400a9c:	e5b1      	b.n	400602 <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400a9e:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400aa2:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400aa4:	4b94      	ldr	r3, [pc, #592]	; (400cf8 <sd_mmc_check+0x838>)
  400aa6:	681b      	ldr	r3, [r3, #0]
  400aa8:	bf14      	ite	ne
  400aaa:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400aac:	2220      	moveq	r2, #32
  400aae:	731a      	strb	r2, [r3, #12]
  400ab0:	e5a7      	b.n	400602 <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  400ab2:	f89d 3011 	ldrb.w	r3, [sp, #17]
  400ab6:	2b00      	cmp	r3, #0
  400ab8:	f43f ad2a 	beq.w	400510 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400abc:	3302      	adds	r3, #2
  400abe:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  400ac0:	f509 7380 	add.w	r3, r9, #256	; 0x100
  400ac4:	429e      	cmp	r6, r3
  400ac6:	f63f ad23 	bhi.w	400510 <sd_mmc_check+0x50>
	addr_new = addr_old;
  400aca:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400acc:	ab04      	add	r3, sp, #16
  400ace:	442b      	add	r3, r5
  400ad0:	9300      	str	r3, [sp, #0]
  400ad2:	4643      	mov	r3, r8
  400ad4:	1972      	adds	r2, r6, r5
  400ad6:	4641      	mov	r1, r8
  400ad8:	4640      	mov	r0, r8
  400ada:	47b8      	blx	r7
  400adc:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  400ade:	2d03      	cmp	r5, #3
  400ae0:	d1f4      	bne.n	400acc <sd_mmc_check+0x60c>
		if (buf[0] == SDIO_CISTPL_END) {
  400ae2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400ae6:	2bff      	cmp	r3, #255	; 0xff
  400ae8:	f43f ad12 	beq.w	400510 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  400aec:	2b22      	cmp	r3, #34	; 0x22
  400aee:	d1e0      	bne.n	400ab2 <sd_mmc_check+0x5f2>
  400af0:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400af4:	2b00      	cmp	r3, #0
  400af6:	d1dc      	bne.n	400ab2 <sd_mmc_check+0x5f2>
  400af8:	ad04      	add	r5, sp, #16
  400afa:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400afe:	f04f 0800 	mov.w	r8, #0
  400b02:	4f7e      	ldr	r7, [pc, #504]	; (400cfc <sd_mmc_check+0x83c>)
  400b04:	9500      	str	r5, [sp, #0]
  400b06:	4643      	mov	r3, r8
  400b08:	4632      	mov	r2, r6
  400b0a:	4641      	mov	r1, r8
  400b0c:	4640      	mov	r0, r8
  400b0e:	47b8      	blx	r7
		addr_new++;
  400b10:	3601      	adds	r6, #1
  400b12:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  400b14:	454e      	cmp	r6, r9
  400b16:	d1f5      	bne.n	400b04 <sd_mmc_check+0x644>
	tplfe_max_tran_speed = buf[5];
  400b18:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400b1c:	2b32      	cmp	r3, #50	; 0x32
  400b1e:	bf28      	it	cs
  400b20:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  400b22:	4a75      	ldr	r2, [pc, #468]	; (400cf8 <sd_mmc_check+0x838>)
  400b24:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  400b26:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  400b2a:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400b2e:	4974      	ldr	r1, [pc, #464]	; (400d00 <sd_mmc_check+0x840>)
  400b30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  400b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400b38:	fb03 f301 	mul.w	r3, r3, r1
  400b3c:	4971      	ldr	r1, [pc, #452]	; (400d04 <sd_mmc_check+0x844>)
  400b3e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400b42:	fb03 f301 	mul.w	r3, r3, r1
  400b46:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400b48:	4b6f      	ldr	r3, [pc, #444]	; (400d08 <sd_mmc_check+0x848>)
  400b4a:	7818      	ldrb	r0, [r3, #0]
  400b4c:	4b6f      	ldr	r3, [pc, #444]	; (400d0c <sd_mmc_check+0x84c>)
  400b4e:	4798      	blx	r3
  400b50:	2803      	cmp	r0, #3
  400b52:	d922      	bls.n	400b9a <sd_mmc_check+0x6da>
		if (IS_SDIO()) {
  400b54:	4b68      	ldr	r3, [pc, #416]	; (400cf8 <sd_mmc_check+0x838>)
  400b56:	681b      	ldr	r3, [r3, #0]
  400b58:	7adb      	ldrb	r3, [r3, #11]
  400b5a:	f013 0f04 	tst.w	r3, #4
  400b5e:	d146      	bne.n	400bee <sd_mmc_check+0x72e>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b60:	4b65      	ldr	r3, [pc, #404]	; (400cf8 <sd_mmc_check+0x838>)
  400b62:	681b      	ldr	r3, [r3, #0]
  400b64:	7ada      	ldrb	r2, [r3, #11]
  400b66:	f012 0f01 	tst.w	r2, #1
  400b6a:	d014      	beq.n	400b96 <sd_mmc_check+0x6d6>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400b6c:	8919      	ldrh	r1, [r3, #8]
  400b6e:	0409      	lsls	r1, r1, #16
  400b70:	f241 1037 	movw	r0, #4407	; 0x1137
  400b74:	4b66      	ldr	r3, [pc, #408]	; (400d10 <sd_mmc_check+0x850>)
  400b76:	4798      	blx	r3
  400b78:	2800      	cmp	r0, #0
  400b7a:	f43f acc9 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400b7e:	2102      	movs	r1, #2
  400b80:	f241 1006 	movw	r0, #4358	; 0x1106
  400b84:	4b62      	ldr	r3, [pc, #392]	; (400d10 <sd_mmc_check+0x850>)
  400b86:	4798      	blx	r3
  400b88:	2800      	cmp	r0, #0
  400b8a:	f43f acc1 	beq.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400b8e:	4b5a      	ldr	r3, [pc, #360]	; (400cf8 <sd_mmc_check+0x838>)
  400b90:	681b      	ldr	r3, [r3, #0]
  400b92:	2204      	movs	r2, #4
  400b94:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
  400b96:	4b5f      	ldr	r3, [pc, #380]	; (400d14 <sd_mmc_check+0x854>)
  400b98:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400b9a:	4b5f      	ldr	r3, [pc, #380]	; (400d18 <sd_mmc_check+0x858>)
  400b9c:	4798      	blx	r3
  400b9e:	b180      	cbz	r0, 400bc2 <sd_mmc_check+0x702>
		if (IS_SDIO()) {
  400ba0:	4b55      	ldr	r3, [pc, #340]	; (400cf8 <sd_mmc_check+0x838>)
  400ba2:	681b      	ldr	r3, [r3, #0]
  400ba4:	7adb      	ldrb	r3, [r3, #11]
  400ba6:	f013 0f04 	tst.w	r3, #4
  400baa:	d141      	bne.n	400c30 <sd_mmc_check+0x770>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400bac:	4b52      	ldr	r3, [pc, #328]	; (400cf8 <sd_mmc_check+0x838>)
  400bae:	681b      	ldr	r3, [r3, #0]
  400bb0:	7ada      	ldrb	r2, [r3, #11]
  400bb2:	f012 0f01 	tst.w	r2, #1
  400bb6:	d002      	beq.n	400bbe <sd_mmc_check+0x6fe>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400bb8:	7b1b      	ldrb	r3, [r3, #12]
  400bba:	2b10      	cmp	r3, #16
  400bbc:	d85d      	bhi.n	400c7a <sd_mmc_check+0x7ba>
		sd_mmc_configure_slot();
  400bbe:	4b55      	ldr	r3, [pc, #340]	; (400d14 <sd_mmc_check+0x854>)
  400bc0:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400bc2:	4b4d      	ldr	r3, [pc, #308]	; (400cf8 <sd_mmc_check+0x838>)
  400bc4:	681b      	ldr	r3, [r3, #0]
  400bc6:	7adb      	ldrb	r3, [r3, #11]
  400bc8:	f013 0f01 	tst.w	r3, #1
  400bcc:	d008      	beq.n	400be0 <sd_mmc_check+0x720>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400bce:	f44f 7100 	mov.w	r1, #512	; 0x200
  400bd2:	f241 1010 	movw	r0, #4368	; 0x1110
  400bd6:	4b4e      	ldr	r3, [pc, #312]	; (400d10 <sd_mmc_check+0x850>)
  400bd8:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400bda:	2800      	cmp	r0, #0
  400bdc:	f43f ac98 	beq.w	400510 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400be0:	4b45      	ldr	r3, [pc, #276]	; (400cf8 <sd_mmc_check+0x838>)
  400be2:	681b      	ldr	r3, [r3, #0]
  400be4:	2200      	movs	r2, #0
  400be6:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  400be8:	4b4c      	ldr	r3, [pc, #304]	; (400d1c <sd_mmc_check+0x85c>)
  400bea:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400bec:	e472      	b.n	4004d4 <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400bee:	ab04      	add	r3, sp, #16
  400bf0:	9300      	str	r3, [sp, #0]
  400bf2:	2300      	movs	r3, #0
  400bf4:	2208      	movs	r2, #8
  400bf6:	4619      	mov	r1, r3
  400bf8:	4618      	mov	r0, r3
  400bfa:	4d40      	ldr	r5, [pc, #256]	; (400cfc <sd_mmc_check+0x83c>)
  400bfc:	47a8      	blx	r5
  400bfe:	2800      	cmp	r0, #0
  400c00:	f43f ac86 	beq.w	400510 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400c04:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400c08:	2b00      	cmp	r3, #0
  400c0a:	daa9      	bge.n	400b60 <sd_mmc_check+0x6a0>
	u8_value = SDIO_BUSWIDTH_4B;
  400c0c:	ab14      	add	r3, sp, #80	; 0x50
  400c0e:	2202      	movs	r2, #2
  400c10:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400c14:	9300      	str	r3, [sp, #0]
  400c16:	2301      	movs	r3, #1
  400c18:	2207      	movs	r2, #7
  400c1a:	2100      	movs	r1, #0
  400c1c:	4618      	mov	r0, r3
  400c1e:	47a8      	blx	r5
  400c20:	2800      	cmp	r0, #0
  400c22:	f43f ac75 	beq.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400c26:	4b34      	ldr	r3, [pc, #208]	; (400cf8 <sd_mmc_check+0x838>)
  400c28:	681b      	ldr	r3, [r3, #0]
  400c2a:	2204      	movs	r2, #4
  400c2c:	735a      	strb	r2, [r3, #13]
  400c2e:	e797      	b.n	400b60 <sd_mmc_check+0x6a0>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400c30:	ab04      	add	r3, sp, #16
  400c32:	9300      	str	r3, [sp, #0]
  400c34:	2300      	movs	r3, #0
  400c36:	2213      	movs	r2, #19
  400c38:	4619      	mov	r1, r3
  400c3a:	4618      	mov	r0, r3
  400c3c:	4d2f      	ldr	r5, [pc, #188]	; (400cfc <sd_mmc_check+0x83c>)
  400c3e:	47a8      	blx	r5
  400c40:	2800      	cmp	r0, #0
  400c42:	f43f ac65 	beq.w	400510 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400c46:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400c4a:	f013 0f01 	tst.w	r3, #1
  400c4e:	d0ad      	beq.n	400bac <sd_mmc_check+0x6ec>
	u8_value = SDIO_EHS;
  400c50:	ab14      	add	r3, sp, #80	; 0x50
  400c52:	2202      	movs	r2, #2
  400c54:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400c58:	9300      	str	r3, [sp, #0]
  400c5a:	2301      	movs	r3, #1
  400c5c:	2213      	movs	r2, #19
  400c5e:	2100      	movs	r1, #0
  400c60:	4618      	mov	r0, r3
  400c62:	47a8      	blx	r5
  400c64:	2800      	cmp	r0, #0
  400c66:	f43f ac53 	beq.w	400510 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400c6a:	4b23      	ldr	r3, [pc, #140]	; (400cf8 <sd_mmc_check+0x838>)
  400c6c:	681b      	ldr	r3, [r3, #0]
  400c6e:	2201      	movs	r2, #1
  400c70:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400c72:	681a      	ldr	r2, [r3, #0]
  400c74:	0052      	lsls	r2, r2, #1
  400c76:	601a      	str	r2, [r3, #0]
  400c78:	e798      	b.n	400bac <sd_mmc_check+0x6ec>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400c7a:	2540      	movs	r5, #64	; 0x40
  400c7c:	462a      	mov	r2, r5
  400c7e:	2100      	movs	r1, #0
  400c80:	a804      	add	r0, sp, #16
  400c82:	4b27      	ldr	r3, [pc, #156]	; (400d20 <sd_mmc_check+0x860>)
  400c84:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400c86:	2301      	movs	r3, #1
  400c88:	9300      	str	r3, [sp, #0]
  400c8a:	462a      	mov	r2, r5
  400c8c:	4925      	ldr	r1, [pc, #148]	; (400d24 <sd_mmc_check+0x864>)
  400c8e:	4826      	ldr	r0, [pc, #152]	; (400d28 <sd_mmc_check+0x868>)
  400c90:	4d26      	ldr	r5, [pc, #152]	; (400d2c <sd_mmc_check+0x86c>)
  400c92:	47a8      	blx	r5
  400c94:	2800      	cmp	r0, #0
  400c96:	f43f ac3b 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400c9a:	2101      	movs	r1, #1
  400c9c:	a804      	add	r0, sp, #16
  400c9e:	4b24      	ldr	r3, [pc, #144]	; (400d30 <sd_mmc_check+0x870>)
  400ca0:	4798      	blx	r3
  400ca2:	2800      	cmp	r0, #0
  400ca4:	f43f ac34 	beq.w	400510 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400ca8:	4b22      	ldr	r3, [pc, #136]	; (400d34 <sd_mmc_check+0x874>)
  400caa:	4798      	blx	r3
  400cac:	2800      	cmp	r0, #0
  400cae:	f43f ac2f 	beq.w	400510 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400cb2:	4b21      	ldr	r3, [pc, #132]	; (400d38 <sd_mmc_check+0x878>)
  400cb4:	4798      	blx	r3
  400cb6:	f010 0f80 	tst.w	r0, #128	; 0x80
  400cba:	f47f ac29 	bne.w	400510 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400cbe:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400cc2:	f003 030f 	and.w	r3, r3, #15
  400cc6:	2b0f      	cmp	r3, #15
  400cc8:	f43f af79 	beq.w	400bbe <sd_mmc_check+0x6fe>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400ccc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400cd0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400cd4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400cd8:	f47f ac1a 	bne.w	400510 <sd_mmc_check+0x50>
	driver_send_clock();
  400cdc:	4b17      	ldr	r3, [pc, #92]	; (400d3c <sd_mmc_check+0x87c>)
  400cde:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400ce0:	4b05      	ldr	r3, [pc, #20]	; (400cf8 <sd_mmc_check+0x838>)
  400ce2:	681b      	ldr	r3, [r3, #0]
  400ce4:	2201      	movs	r2, #1
  400ce6:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400ce8:	681a      	ldr	r2, [r3, #0]
  400cea:	0052      	lsls	r2, r2, #1
  400cec:	601a      	str	r2, [r3, #0]
  400cee:	e766      	b.n	400bbe <sd_mmc_check+0x6fe>
	*v2 = 0;
  400cf0:	f04f 0900 	mov.w	r9, #0
  400cf4:	e41e      	b.n	400534 <sd_mmc_check+0x74>
  400cf6:	bf00      	nop
  400cf8:	20400b5c 	.word	0x20400b5c
  400cfc:	00400419 	.word	0x00400419
  400d00:	0040e540 	.word	0x0040e540
  400d04:	0040e55c 	.word	0x0040e55c
  400d08:	20400b84 	.word	0x20400b84
  400d0c:	00401f69 	.word	0x00401f69
  400d10:	00402061 	.word	0x00402061
  400d14:	00400399 	.word	0x00400399
  400d18:	00401f73 	.word	0x00401f73
  400d1c:	00400485 	.word	0x00400485
  400d20:	0040b7cd 	.word	0x0040b7cd
  400d24:	80ffff01 	.word	0x80ffff01
  400d28:	00081106 	.word	0x00081106
  400d2c:	004020bd 	.word	0x004020bd
  400d30:	004021f9 	.word	0x004021f9
  400d34:	00402289 	.word	0x00402289
  400d38:	00402085 	.word	0x00402085
  400d3c:	0040203f 	.word	0x0040203f

00400d40 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400d40:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400d42:	4b05      	ldr	r3, [pc, #20]	; (400d58 <sd_mmc_get_type+0x18>)
  400d44:	4798      	blx	r3
  400d46:	b108      	cbz	r0, 400d4c <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400d48:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400d4a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400d4c:	4b03      	ldr	r3, [pc, #12]	; (400d5c <sd_mmc_get_type+0x1c>)
  400d4e:	4798      	blx	r3
	return sd_mmc_card->type;
  400d50:	4b03      	ldr	r3, [pc, #12]	; (400d60 <sd_mmc_get_type+0x20>)
  400d52:	681b      	ldr	r3, [r3, #0]
  400d54:	7ad8      	ldrb	r0, [r3, #11]
  400d56:	bd08      	pop	{r3, pc}
  400d58:	004003c1 	.word	0x004003c1
  400d5c:	00400485 	.word	0x00400485
  400d60:	20400b5c 	.word	0x20400b5c

00400d64 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400d64:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400d66:	4b05      	ldr	r3, [pc, #20]	; (400d7c <sd_mmc_get_capacity+0x18>)
  400d68:	4798      	blx	r3
  400d6a:	b108      	cbz	r0, 400d70 <sd_mmc_get_capacity+0xc>
		return 0;
  400d6c:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400d6e:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400d70:	4b03      	ldr	r3, [pc, #12]	; (400d80 <sd_mmc_get_capacity+0x1c>)
  400d72:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400d74:	4b03      	ldr	r3, [pc, #12]	; (400d84 <sd_mmc_get_capacity+0x20>)
  400d76:	681b      	ldr	r3, [r3, #0]
  400d78:	6858      	ldr	r0, [r3, #4]
  400d7a:	bd08      	pop	{r3, pc}
  400d7c:	004003c1 	.word	0x004003c1
  400d80:	00400485 	.word	0x00400485
  400d84:	20400b5c 	.word	0x20400b5c

00400d88 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400d88:	2000      	movs	r0, #0
  400d8a:	4770      	bx	lr

00400d8c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400d90:	b082      	sub	sp, #8
  400d92:	468a      	mov	sl, r1
  400d94:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400d96:	4b26      	ldr	r3, [pc, #152]	; (400e30 <sd_mmc_init_read_blocks+0xa4>)
  400d98:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400d9a:	4680      	mov	r8, r0
  400d9c:	b118      	cbz	r0, 400da6 <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400d9e:	4640      	mov	r0, r8
  400da0:	b002      	add	sp, #8
  400da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400da6:	4c23      	ldr	r4, [pc, #140]	; (400e34 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400da8:	4e23      	ldr	r6, [pc, #140]	; (400e38 <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400daa:	4d24      	ldr	r5, [pc, #144]	; (400e3c <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400dac:	4f24      	ldr	r7, [pc, #144]	; (400e40 <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400dae:	6833      	ldr	r3, [r6, #0]
  400db0:	8919      	ldrh	r1, [r3, #8]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400db2:	0409      	lsls	r1, r1, #16
  400db4:	f241 100d 	movw	r0, #4365	; 0x110d
  400db8:	47a8      	blx	r5
  400dba:	b128      	cbz	r0, 400dc8 <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400dbc:	47b8      	blx	r7
  400dbe:	f410 7f80 	tst.w	r0, #256	; 0x100
  400dc2:	d117      	bne.n	400df4 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400dc4:	3c01      	subs	r4, #1
  400dc6:	d1f2      	bne.n	400dae <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  400dc8:	4b1e      	ldr	r3, [pc, #120]	; (400e44 <sd_mmc_init_read_blocks+0xb8>)
  400dca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400dcc:	f04f 0805 	mov.w	r8, #5
  400dd0:	e7e5      	b.n	400d9e <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400dd2:	4b1b      	ldr	r3, [pc, #108]	; (400e40 <sd_mmc_init_read_blocks+0xb4>)
  400dd4:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400dd6:	4b1c      	ldr	r3, [pc, #112]	; (400e48 <sd_mmc_init_read_blocks+0xbc>)
  400dd8:	4003      	ands	r3, r0
  400dda:	b933      	cbnz	r3, 400dea <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400ddc:	4b1b      	ldr	r3, [pc, #108]	; (400e4c <sd_mmc_init_read_blocks+0xc0>)
  400dde:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400de2:	4b1b      	ldr	r3, [pc, #108]	; (400e50 <sd_mmc_init_read_blocks+0xc4>)
  400de4:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400de8:	e7d9      	b.n	400d9e <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  400dea:	4b16      	ldr	r3, [pc, #88]	; (400e44 <sd_mmc_init_read_blocks+0xb8>)
  400dec:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400dee:	f04f 0805 	mov.w	r8, #5
  400df2:	e7d4      	b.n	400d9e <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400df4:	4b17      	ldr	r3, [pc, #92]	; (400e54 <sd_mmc_init_read_blocks+0xc8>)
  400df6:	4818      	ldr	r0, [pc, #96]	; (400e58 <sd_mmc_init_read_blocks+0xcc>)
  400df8:	f1b9 0f01 	cmp.w	r9, #1
  400dfc:	bf98      	it	ls
  400dfe:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400e00:	4b0d      	ldr	r3, [pc, #52]	; (400e38 <sd_mmc_init_read_blocks+0xac>)
  400e02:	681b      	ldr	r3, [r3, #0]
  400e04:	7adb      	ldrb	r3, [r3, #11]
  400e06:	f013 0f08 	tst.w	r3, #8
  400e0a:	d101      	bne.n	400e10 <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400e0c:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400e10:	2301      	movs	r3, #1
  400e12:	9300      	str	r3, [sp, #0]
  400e14:	464b      	mov	r3, r9
  400e16:	f44f 7200 	mov.w	r2, #512	; 0x200
  400e1a:	4651      	mov	r1, sl
  400e1c:	4c0f      	ldr	r4, [pc, #60]	; (400e5c <sd_mmc_init_read_blocks+0xd0>)
  400e1e:	47a0      	blx	r4
  400e20:	2800      	cmp	r0, #0
  400e22:	d1d6      	bne.n	400dd2 <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  400e24:	4b07      	ldr	r3, [pc, #28]	; (400e44 <sd_mmc_init_read_blocks+0xb8>)
  400e26:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400e28:	f04f 0805 	mov.w	r8, #5
  400e2c:	e7b7      	b.n	400d9e <sd_mmc_init_read_blocks+0x12>
  400e2e:	bf00      	nop
  400e30:	004003c1 	.word	0x004003c1
  400e34:	00030d41 	.word	0x00030d41
  400e38:	20400b5c 	.word	0x20400b5c
  400e3c:	00402061 	.word	0x00402061
  400e40:	00402085 	.word	0x00402085
  400e44:	00400485 	.word	0x00400485
  400e48:	e4580000 	.word	0xe4580000
  400e4c:	20400b80 	.word	0x20400b80
  400e50:	20400b82 	.word	0x20400b82
  400e54:	00081111 	.word	0x00081111
  400e58:	00101112 	.word	0x00101112
  400e5c:	004020bd 	.word	0x004020bd

00400e60 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400e60:	b510      	push	{r4, lr}
  400e62:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400e64:	4b06      	ldr	r3, [pc, #24]	; (400e80 <sd_mmc_start_read_blocks+0x20>)
  400e66:	4798      	blx	r3
  400e68:	b920      	cbnz	r0, 400e74 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e6a:	2200      	movs	r2, #0
  400e6c:	4b05      	ldr	r3, [pc, #20]	; (400e84 <sd_mmc_start_read_blocks+0x24>)
  400e6e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e70:	2005      	movs	r0, #5
  400e72:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e74:	4a03      	ldr	r2, [pc, #12]	; (400e84 <sd_mmc_start_read_blocks+0x24>)
  400e76:	8813      	ldrh	r3, [r2, #0]
  400e78:	1b1c      	subs	r4, r3, r4
  400e7a:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e7c:	2000      	movs	r0, #0
}
  400e7e:	bd10      	pop	{r4, pc}
  400e80:	004021f9 	.word	0x004021f9
  400e84:	20400b80 	.word	0x20400b80

00400e88 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400e88:	b510      	push	{r4, lr}
  400e8a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400e8c:	4b13      	ldr	r3, [pc, #76]	; (400edc <sd_mmc_wait_end_of_read_blocks+0x54>)
  400e8e:	4798      	blx	r3
  400e90:	b908      	cbnz	r0, 400e96 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400e92:	2005      	movs	r0, #5
  400e94:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400e96:	b184      	cbz	r4, 400eba <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400e98:	2200      	movs	r2, #0
  400e9a:	4b11      	ldr	r3, [pc, #68]	; (400ee0 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400e9c:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e9e:	4b11      	ldr	r3, [pc, #68]	; (400ee4 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400ea0:	881b      	ldrh	r3, [r3, #0]
  400ea2:	2b01      	cmp	r3, #1
  400ea4:	d00f      	beq.n	400ec6 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400ea6:	2100      	movs	r1, #0
  400ea8:	f243 100c 	movw	r0, #12556	; 0x310c
  400eac:	4b0e      	ldr	r3, [pc, #56]	; (400ee8 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400eae:	4798      	blx	r3
  400eb0:	b168      	cbz	r0, 400ece <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400eb2:	4b0e      	ldr	r3, [pc, #56]	; (400eec <sd_mmc_wait_end_of_read_blocks+0x64>)
  400eb4:	4798      	blx	r3
	return SD_MMC_OK;
  400eb6:	2000      	movs	r0, #0
  400eb8:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400eba:	4b09      	ldr	r3, [pc, #36]	; (400ee0 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400ebc:	881b      	ldrh	r3, [r3, #0]
  400ebe:	2b00      	cmp	r3, #0
  400ec0:	d0ed      	beq.n	400e9e <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400ec2:	2000      	movs	r0, #0
}
  400ec4:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400ec6:	4b09      	ldr	r3, [pc, #36]	; (400eec <sd_mmc_wait_end_of_read_blocks+0x64>)
  400ec8:	4798      	blx	r3
		return SD_MMC_OK;
  400eca:	2000      	movs	r0, #0
  400ecc:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400ece:	2100      	movs	r1, #0
  400ed0:	f243 100c 	movw	r0, #12556	; 0x310c
  400ed4:	4b04      	ldr	r3, [pc, #16]	; (400ee8 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400ed6:	4798      	blx	r3
  400ed8:	e7eb      	b.n	400eb2 <sd_mmc_wait_end_of_read_blocks+0x2a>
  400eda:	bf00      	nop
  400edc:	00402289 	.word	0x00402289
  400ee0:	20400b80 	.word	0x20400b80
  400ee4:	20400b82 	.word	0x20400b82
  400ee8:	00402061 	.word	0x00402061
  400eec:	00400485 	.word	0x00400485

00400ef0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400ef0:	b570      	push	{r4, r5, r6, lr}
  400ef2:	b082      	sub	sp, #8
  400ef4:	460e      	mov	r6, r1
  400ef6:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400ef8:	4b16      	ldr	r3, [pc, #88]	; (400f54 <sd_mmc_init_write_blocks+0x64>)
  400efa:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400efc:	4604      	mov	r4, r0
  400efe:	b9b8      	cbnz	r0, 400f30 <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400f00:	4b15      	ldr	r3, [pc, #84]	; (400f58 <sd_mmc_init_write_blocks+0x68>)
  400f02:	4816      	ldr	r0, [pc, #88]	; (400f5c <sd_mmc_init_write_blocks+0x6c>)
  400f04:	2d01      	cmp	r5, #1
  400f06:	bf98      	it	ls
  400f08:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400f0a:	4b15      	ldr	r3, [pc, #84]	; (400f60 <sd_mmc_init_write_blocks+0x70>)
  400f0c:	681b      	ldr	r3, [r3, #0]
  400f0e:	7adb      	ldrb	r3, [r3, #11]
  400f10:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400f14:	bf08      	it	eq
  400f16:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400f18:	2301      	movs	r3, #1
  400f1a:	9300      	str	r3, [sp, #0]
  400f1c:	462b      	mov	r3, r5
  400f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400f22:	4631      	mov	r1, r6
  400f24:	4e0f      	ldr	r6, [pc, #60]	; (400f64 <sd_mmc_init_write_blocks+0x74>)
  400f26:	47b0      	blx	r6
  400f28:	b928      	cbnz	r0, 400f36 <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400f2a:	4b0f      	ldr	r3, [pc, #60]	; (400f68 <sd_mmc_init_write_blocks+0x78>)
  400f2c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400f2e:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400f30:	4620      	mov	r0, r4
  400f32:	b002      	add	sp, #8
  400f34:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400f36:	4b0d      	ldr	r3, [pc, #52]	; (400f6c <sd_mmc_init_write_blocks+0x7c>)
  400f38:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400f3a:	4b0d      	ldr	r3, [pc, #52]	; (400f70 <sd_mmc_init_write_blocks+0x80>)
  400f3c:	4003      	ands	r3, r0
  400f3e:	b923      	cbnz	r3, 400f4a <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400f40:	4b0c      	ldr	r3, [pc, #48]	; (400f74 <sd_mmc_init_write_blocks+0x84>)
  400f42:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400f44:	4b0c      	ldr	r3, [pc, #48]	; (400f78 <sd_mmc_init_write_blocks+0x88>)
  400f46:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400f48:	e7f2      	b.n	400f30 <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400f4a:	4b07      	ldr	r3, [pc, #28]	; (400f68 <sd_mmc_init_write_blocks+0x78>)
  400f4c:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400f4e:	2405      	movs	r4, #5
  400f50:	e7ee      	b.n	400f30 <sd_mmc_init_write_blocks+0x40>
  400f52:	bf00      	nop
  400f54:	004003c1 	.word	0x004003c1
  400f58:	00089118 	.word	0x00089118
  400f5c:	00109119 	.word	0x00109119
  400f60:	20400b5c 	.word	0x20400b5c
  400f64:	004020bd 	.word	0x004020bd
  400f68:	00400485 	.word	0x00400485
  400f6c:	00402085 	.word	0x00402085
  400f70:	e4580000 	.word	0xe4580000
  400f74:	20400b80 	.word	0x20400b80
  400f78:	20400b82 	.word	0x20400b82

00400f7c <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400f7c:	b510      	push	{r4, lr}
  400f7e:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400f80:	4b06      	ldr	r3, [pc, #24]	; (400f9c <sd_mmc_start_write_blocks+0x20>)
  400f82:	4798      	blx	r3
  400f84:	b920      	cbnz	r0, 400f90 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400f86:	2200      	movs	r2, #0
  400f88:	4b05      	ldr	r3, [pc, #20]	; (400fa0 <sd_mmc_start_write_blocks+0x24>)
  400f8a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400f8c:	2005      	movs	r0, #5
  400f8e:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400f90:	4a03      	ldr	r2, [pc, #12]	; (400fa0 <sd_mmc_start_write_blocks+0x24>)
  400f92:	8813      	ldrh	r3, [r2, #0]
  400f94:	1b1c      	subs	r4, r3, r4
  400f96:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400f98:	2000      	movs	r0, #0
}
  400f9a:	bd10      	pop	{r4, pc}
  400f9c:	004022ed 	.word	0x004022ed
  400fa0:	20400b80 	.word	0x20400b80

00400fa4 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400fa4:	b510      	push	{r4, lr}
  400fa6:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400fa8:	4b12      	ldr	r3, [pc, #72]	; (400ff4 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400faa:	4798      	blx	r3
  400fac:	b908      	cbnz	r0, 400fb2 <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400fae:	2005      	movs	r0, #5
  400fb0:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400fb2:	b184      	cbz	r4, 400fd6 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400fb4:	2200      	movs	r2, #0
  400fb6:	4b10      	ldr	r3, [pc, #64]	; (400ff8 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400fb8:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400fba:	4b10      	ldr	r3, [pc, #64]	; (400ffc <sd_mmc_wait_end_of_write_blocks+0x58>)
  400fbc:	881b      	ldrh	r3, [r3, #0]
  400fbe:	2b01      	cmp	r3, #1
  400fc0:	d00f      	beq.n	400fe2 <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400fc2:	2100      	movs	r1, #0
  400fc4:	f243 100c 	movw	r0, #12556	; 0x310c
  400fc8:	4b0d      	ldr	r3, [pc, #52]	; (401000 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400fca:	4798      	blx	r3
  400fcc:	b968      	cbnz	r0, 400fea <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400fce:	4b0d      	ldr	r3, [pc, #52]	; (401004 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400fd0:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400fd2:	2005      	movs	r0, #5
  400fd4:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400fd6:	4b08      	ldr	r3, [pc, #32]	; (400ff8 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400fd8:	881b      	ldrh	r3, [r3, #0]
  400fda:	2b00      	cmp	r3, #0
  400fdc:	d0ed      	beq.n	400fba <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400fde:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400fe0:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400fe2:	4b08      	ldr	r3, [pc, #32]	; (401004 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400fe4:	4798      	blx	r3
		return SD_MMC_OK;
  400fe6:	2000      	movs	r0, #0
  400fe8:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400fea:	4b06      	ldr	r3, [pc, #24]	; (401004 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400fec:	4798      	blx	r3
	return SD_MMC_OK;
  400fee:	2000      	movs	r0, #0
  400ff0:	bd10      	pop	{r4, pc}
  400ff2:	bf00      	nop
  400ff4:	0040237d 	.word	0x0040237d
  400ff8:	20400b80 	.word	0x20400b80
  400ffc:	20400b82 	.word	0x20400b82
  401000:	00402061 	.word	0x00402061
  401004:	00400485 	.word	0x00400485

00401008 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  401008:	b510      	push	{r4, lr}
  40100a:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  40100c:	4b0f      	ldr	r3, [pc, #60]	; (40104c <sd_mmc_test_unit_ready+0x44>)
  40100e:	4798      	blx	r3
  401010:	2801      	cmp	r0, #1
  401012:	d018      	beq.n	401046 <sd_mmc_test_unit_ready+0x3e>
  401014:	b118      	cbz	r0, 40101e <sd_mmc_test_unit_ready+0x16>
  401016:	2802      	cmp	r0, #2
  401018:	d010      	beq.n	40103c <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  40101a:	2001      	movs	r0, #1
  40101c:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  40101e:	4b0c      	ldr	r3, [pc, #48]	; (401050 <sd_mmc_test_unit_ready+0x48>)
  401020:	5d1b      	ldrb	r3, [r3, r4]
  401022:	b10b      	cbz	r3, 401028 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  401024:	2002      	movs	r0, #2
	}
}
  401026:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  401028:	4620      	mov	r0, r4
  40102a:	4b0a      	ldr	r3, [pc, #40]	; (401054 <sd_mmc_test_unit_ready+0x4c>)
  40102c:	4798      	blx	r3
  40102e:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  401032:	2800      	cmp	r0, #0
  401034:	bf14      	ite	ne
  401036:	2000      	movne	r0, #0
  401038:	2002      	moveq	r0, #2
  40103a:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  40103c:	2200      	movs	r2, #0
  40103e:	4b04      	ldr	r3, [pc, #16]	; (401050 <sd_mmc_test_unit_ready+0x48>)
  401040:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  401042:	2002      	movs	r0, #2
  401044:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  401046:	2003      	movs	r0, #3
  401048:	bd10      	pop	{r4, pc}
  40104a:	bf00      	nop
  40104c:	004004c1 	.word	0x004004c1
  401050:	20400b88 	.word	0x20400b88
  401054:	00400d41 	.word	0x00400d41

00401058 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  401058:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  40105a:	2000      	movs	r0, #0
  40105c:	4b01      	ldr	r3, [pc, #4]	; (401064 <sd_mmc_test_unit_ready_0+0xc>)
  40105e:	4798      	blx	r3
}
  401060:	bd08      	pop	{r3, pc}
  401062:	bf00      	nop
  401064:	00401009 	.word	0x00401009

00401068 <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
  401068:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(1);
  40106a:	2001      	movs	r0, #1
  40106c:	4b01      	ldr	r3, [pc, #4]	; (401074 <sd_mmc_test_unit_ready_1+0xc>)
  40106e:	4798      	blx	r3
}
  401070:	bd08      	pop	{r3, pc}
  401072:	bf00      	nop
  401074:	00401009 	.word	0x00401009

00401078 <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  401078:	b538      	push	{r3, r4, r5, lr}
  40107a:	4604      	mov	r4, r0
  40107c:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  40107e:	4b04      	ldr	r3, [pc, #16]	; (401090 <sd_mmc_read_capacity+0x18>)
  401080:	4798      	blx	r3
  401082:	0040      	lsls	r0, r0, #1
  401084:	3801      	subs	r0, #1
  401086:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  401088:	4620      	mov	r0, r4
  40108a:	4b02      	ldr	r3, [pc, #8]	; (401094 <sd_mmc_read_capacity+0x1c>)
  40108c:	4798      	blx	r3
}
  40108e:	bd38      	pop	{r3, r4, r5, pc}
  401090:	00400d65 	.word	0x00400d65
  401094:	00401009 	.word	0x00401009

00401098 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  401098:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  40109a:	4601      	mov	r1, r0
  40109c:	2000      	movs	r0, #0
  40109e:	4b01      	ldr	r3, [pc, #4]	; (4010a4 <sd_mmc_read_capacity_0+0xc>)
  4010a0:	4798      	blx	r3
}
  4010a2:	bd08      	pop	{r3, pc}
  4010a4:	00401079 	.word	0x00401079

004010a8 <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
  4010a8:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(1, nb_sector);
  4010aa:	4601      	mov	r1, r0
  4010ac:	2001      	movs	r0, #1
  4010ae:	4b01      	ldr	r3, [pc, #4]	; (4010b4 <sd_mmc_read_capacity_1+0xc>)
  4010b0:	4798      	blx	r3
}
  4010b2:	bd08      	pop	{r3, pc}
  4010b4:	00401079 	.word	0x00401079

004010b8 <sd_mmc_unload_0>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
  4010b8:	4b01      	ldr	r3, [pc, #4]	; (4010c0 <sd_mmc_unload_0+0x8>)
  4010ba:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
  4010bc:	2001      	movs	r0, #1
  4010be:	4770      	bx	lr
  4010c0:	20400b88 	.word	0x20400b88

004010c4 <sd_mmc_unload_1>:
	sd_mmc_ejected[slot] = unload;
  4010c4:	4b01      	ldr	r3, [pc, #4]	; (4010cc <sd_mmc_unload_1+0x8>)
  4010c6:	7058      	strb	r0, [r3, #1]

bool sd_mmc_unload_1(bool unload)
{
	return sd_mmc_unload(1, unload);
}
  4010c8:	2001      	movs	r0, #1
  4010ca:	4770      	bx	lr
  4010cc:	20400b88 	.word	0x20400b88

004010d0 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  4010d0:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  4010d2:	2000      	movs	r0, #0
  4010d4:	4b01      	ldr	r3, [pc, #4]	; (4010dc <sd_mmc_wr_protect_0+0xc>)
  4010d6:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  4010d8:	bd08      	pop	{r3, pc}
  4010da:	bf00      	nop
  4010dc:	00400d89 	.word	0x00400d89

004010e0 <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
  4010e0:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  4010e2:	2001      	movs	r0, #1
  4010e4:	4b01      	ldr	r3, [pc, #4]	; (4010ec <sd_mmc_wr_protect_1+0xc>)
  4010e6:	4798      	blx	r3
	return sd_mmc_wr_protect(1);
}
  4010e8:	bd08      	pop	{r3, pc}
  4010ea:	bf00      	nop
  4010ec:	00400d89 	.word	0x00400d89

004010f0 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
  4010f0:	2001      	movs	r0, #1
  4010f2:	4770      	bx	lr

004010f4 <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
	return sd_mmc_removal(1);
}
  4010f4:	2001      	movs	r0, #1
  4010f6:	4770      	bx	lr

004010f8 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  4010f8:	b510      	push	{r4, lr}
  4010fa:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  4010fc:	2201      	movs	r2, #1
  4010fe:	4b0a      	ldr	r3, [pc, #40]	; (401128 <sd_mmc_mem_2_ram+0x30>)
  401100:	4798      	blx	r3
  401102:	b120      	cbz	r0, 40110e <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  401104:	2802      	cmp	r0, #2
  401106:	bf0c      	ite	eq
  401108:	2002      	moveq	r0, #2
  40110a:	2001      	movne	r0, #1
  40110c:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  40110e:	2101      	movs	r1, #1
  401110:	4620      	mov	r0, r4
  401112:	4b06      	ldr	r3, [pc, #24]	; (40112c <sd_mmc_mem_2_ram+0x34>)
  401114:	4798      	blx	r3
  401116:	b108      	cbz	r0, 40111c <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  401118:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  40111a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  40111c:	4b04      	ldr	r3, [pc, #16]	; (401130 <sd_mmc_mem_2_ram+0x38>)
  40111e:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  401120:	3000      	adds	r0, #0
  401122:	bf18      	it	ne
  401124:	2001      	movne	r0, #1
  401126:	bd10      	pop	{r4, pc}
  401128:	00400d8d 	.word	0x00400d8d
  40112c:	00400e61 	.word	0x00400e61
  401130:	00400e89 	.word	0x00400e89

00401134 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  401134:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  401136:	460a      	mov	r2, r1
  401138:	4601      	mov	r1, r0
  40113a:	2000      	movs	r0, #0
  40113c:	4b01      	ldr	r3, [pc, #4]	; (401144 <sd_mmc_mem_2_ram_0+0x10>)
  40113e:	4798      	blx	r3
}
  401140:	bd08      	pop	{r3, pc}
  401142:	bf00      	nop
  401144:	004010f9 	.word	0x004010f9

00401148 <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
  401148:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(1, addr, ram);
  40114a:	460a      	mov	r2, r1
  40114c:	4601      	mov	r1, r0
  40114e:	2001      	movs	r0, #1
  401150:	4b01      	ldr	r3, [pc, #4]	; (401158 <sd_mmc_mem_2_ram_1+0x10>)
  401152:	4798      	blx	r3
}
  401154:	bd08      	pop	{r3, pc}
  401156:	bf00      	nop
  401158:	004010f9 	.word	0x004010f9

0040115c <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  40115c:	b510      	push	{r4, lr}
  40115e:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  401160:	2201      	movs	r2, #1
  401162:	4b0a      	ldr	r3, [pc, #40]	; (40118c <sd_mmc_ram_2_mem+0x30>)
  401164:	4798      	blx	r3
  401166:	b120      	cbz	r0, 401172 <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  401168:	2802      	cmp	r0, #2
  40116a:	bf0c      	ite	eq
  40116c:	2002      	moveq	r0, #2
  40116e:	2001      	movne	r0, #1
  401170:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  401172:	2101      	movs	r1, #1
  401174:	4620      	mov	r0, r4
  401176:	4b06      	ldr	r3, [pc, #24]	; (401190 <sd_mmc_ram_2_mem+0x34>)
  401178:	4798      	blx	r3
  40117a:	b108      	cbz	r0, 401180 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  40117c:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  40117e:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  401180:	4b04      	ldr	r3, [pc, #16]	; (401194 <sd_mmc_ram_2_mem+0x38>)
  401182:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  401184:	3000      	adds	r0, #0
  401186:	bf18      	it	ne
  401188:	2001      	movne	r0, #1
  40118a:	bd10      	pop	{r4, pc}
  40118c:	00400ef1 	.word	0x00400ef1
  401190:	00400f7d 	.word	0x00400f7d
  401194:	00400fa5 	.word	0x00400fa5

00401198 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  401198:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  40119a:	460a      	mov	r2, r1
  40119c:	4601      	mov	r1, r0
  40119e:	2000      	movs	r0, #0
  4011a0:	4b01      	ldr	r3, [pc, #4]	; (4011a8 <sd_mmc_ram_2_mem_0+0x10>)
  4011a2:	4798      	blx	r3
}
  4011a4:	bd08      	pop	{r3, pc}
  4011a6:	bf00      	nop
  4011a8:	0040115d 	.word	0x0040115d

004011ac <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
  4011ac:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(1, addr, ram);
  4011ae:	460a      	mov	r2, r1
  4011b0:	4601      	mov	r1, r0
  4011b2:	2001      	movs	r0, #1
  4011b4:	4b01      	ldr	r3, [pc, #4]	; (4011bc <sd_mmc_ram_2_mem_1+0x10>)
  4011b6:	4798      	blx	r3
}
  4011b8:	bd08      	pop	{r3, pc}
  4011ba:	bf00      	nop
  4011bc:	0040115d 	.word	0x0040115d

004011c0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4011c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4011c4:	4ba6      	ldr	r3, [pc, #664]	; (401460 <board_init+0x2a0>)
  4011c6:	4aa7      	ldr	r2, [pc, #668]	; (401464 <board_init+0x2a4>)
  4011c8:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4011ca:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  4011ce:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4011d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4011d4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4011d8:	4ba3      	ldr	r3, [pc, #652]	; (401468 <board_init+0x2a8>)
  4011da:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4011de:	f022 0201 	bic.w	r2, r2, #1
  4011e2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4011e6:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4011ea:	f022 0201 	bic.w	r2, r2, #1
  4011ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4011f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4011f6:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4011fa:	200a      	movs	r0, #10
  4011fc:	f8df 8280 	ldr.w	r8, [pc, #640]	; 401480 <board_init+0x2c0>
  401200:	47c0      	blx	r8
  401202:	200b      	movs	r0, #11
  401204:	47c0      	blx	r8
  401206:	200c      	movs	r0, #12
  401208:	47c0      	blx	r8
  40120a:	2010      	movs	r0, #16
  40120c:	47c0      	blx	r8
  40120e:	2011      	movs	r0, #17
  401210:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401212:	4b96      	ldr	r3, [pc, #600]	; (40146c <board_init+0x2ac>)
  401214:	f04f 0e01 	mov.w	lr, #1
  401218:	f8c3 e010 	str.w	lr, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40121c:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401220:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401224:	4c92      	ldr	r4, [pc, #584]	; (401470 <board_init+0x2b0>)
  401226:	2204      	movs	r2, #4
  401228:	6162      	str	r2, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40122a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  40122e:	6662      	str	r2, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401230:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401234:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401236:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401238:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40123c:	6f21      	ldr	r1, [r4, #112]	; 0x70
  40123e:	f021 0104 	bic.w	r1, r1, #4
  401242:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401244:	6f61      	ldr	r1, [r4, #116]	; 0x74
  401246:	f021 0104 	bic.w	r1, r1, #4
  40124a:	6761      	str	r1, [r4, #116]	; 0x74
#define UART3_TXD_GPIO   PIO_PD30_IDX
   
#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
//	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40124c:	4f89      	ldr	r7, [pc, #548]	; (401474 <board_init+0x2b4>)
  40124e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
  401252:	f041 0110 	orr.w	r1, r1, #16
  401256:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
		base->PIO_PUDR = mask;
  40125a:	2108      	movs	r1, #8
  40125c:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40125e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401262:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401264:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401266:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40126a:	6f20      	ldr	r0, [r4, #112]	; 0x70
  40126c:	f020 0008 	bic.w	r0, r0, #8
  401270:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401272:	6f60      	ldr	r0, [r4, #116]	; 0x74
  401274:	f020 0008 	bic.w	r0, r0, #8
  401278:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40127a:	6061      	str	r1, [r4, #4]
		base->PIO_PUDR = mask;
  40127c:	2510      	movs	r5, #16
  40127e:	6625      	str	r5, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401280:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401284:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401286:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401288:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40128c:	6f20      	ldr	r0, [r4, #112]	; 0x70
  40128e:	f020 0010 	bic.w	r0, r0, #16
  401292:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401294:	6f60      	ldr	r0, [r4, #116]	; 0x74
  401296:	f020 0010 	bic.w	r0, r0, #16
  40129a:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40129c:	6065      	str	r5, [r4, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40129e:	2680      	movs	r6, #128	; 0x80
  4012a0:	611e      	str	r6, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012a2:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012a6:	631e      	str	r6, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012a8:	f44f 7080 	mov.w	r0, #256	; 0x100
  4012ac:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012ae:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4012b2:	6360      	str	r0, [r4, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  4012b8:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012ba:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4012be:	6360      	str	r0, [r4, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4012c4:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012c6:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012ca:	6320      	str	r0, [r4, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4012cc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  4012d0:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012d2:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4012d6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  4012da:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012dc:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012e0:	4865      	ldr	r0, [pc, #404]	; (401478 <board_init+0x2b8>)
  4012e2:	6102      	str	r2, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012e4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012e8:	6302      	str	r2, [r0, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012ea:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012ec:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012f0:	6319      	str	r1, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012f2:	f8c0 e010 	str.w	lr, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012f6:	f8c0 e0a0 	str.w	lr, [r0, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012fa:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
	ioport_set_pin_level(BigTiny_CLK, HIGH);
	/* DAT to Tiny.*/
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(BigTiny_DAT, HIGH);
	/* WU Tiny to Big. */
	pmc_enable_periph_clk(ID_PIOA);
  4012fe:	200a      	movs	r0, #10
  401300:	47c0      	blx	r8
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401302:	2302      	movs	r3, #2
  401304:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401306:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40130a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40130e:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401310:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401314:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  401318:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40131a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	ioport_set_pin_dir(USB_ID_PIN, IOPORT_DIR_INPUT);
# endif
#endif

#ifdef CONF_BOARD_SDRAMC
	pio_configure_pin(SDRAM_A0_PIO, SDRAM_A_FLAGS);	//V71 A2
  40131e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401322:	2054      	movs	r0, #84	; 0x54
  401324:	4c55      	ldr	r4, [pc, #340]	; (40147c <board_init+0x2bc>)
  401326:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A1_PIO, SDRAM_A_FLAGS);	//V71 A3
  401328:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40132c:	2055      	movs	r0, #85	; 0x55
  40132e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);	//V71 A4
  401330:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401334:	2056      	movs	r0, #86	; 0x56
  401336:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  //V71 A5
  401338:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40133c:	2057      	movs	r0, #87	; 0x57
  40133e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  //V71 A6
  401340:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401344:	2058      	movs	r0, #88	; 0x58
  401346:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  //V71 A7
  401348:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40134c:	2059      	movs	r0, #89	; 0x59
  40134e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  //V71 A8
  401350:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401354:	205a      	movs	r0, #90	; 0x5a
  401356:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  //V71 A9
  401358:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40135c:	205b      	movs	r0, #91	; 0x5b
  40135e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);	 //V71 A10
  401360:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401364:	205c      	movs	r0, #92	; 0x5c
  401366:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  //V71 A11
  401368:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40136c:	205d      	movs	r0, #93	; 0x5d
  40136e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS); //V71 SDA10
  401370:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401374:	206d      	movs	r0, #109	; 0x6d
  401376:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A13_FLAGS); //V71 A13
  401378:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40137c:	205f      	movs	r0, #95	; 0x5f
  40137e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A12_PIO, SDRAM_A14_FLAGS); //V71 A14
  401380:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401384:	2012      	movs	r0, #18
  401386:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  401388:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40138c:	2014      	movs	r0, #20
  40138e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA1_PIO, SDRAM_BA1_FLAGS);
  401390:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401394:	2000      	movs	r0, #0
  401396:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  401398:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40139c:	2077      	movs	r0, #119	; 0x77
  40139e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  4013a0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013a4:	206e      	movs	r0, #110	; 0x6e
  4013a6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  4013a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013ac:	204f      	movs	r0, #79	; 0x4f
  4013ae:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  4013b0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013b4:	2070      	movs	r0, #112	; 0x70
  4013b6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  4013b8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013bc:	2071      	movs	r0, #113	; 0x71
  4013be:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  4013c0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013c4:	207d      	movs	r0, #125	; 0x7d
  4013c6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  4013c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013cc:	2052      	movs	r0, #82	; 0x52
  4013ce:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  4013d0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013d4:	206f      	movs	r0, #111	; 0x6f
  4013d6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);
  4013d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013dc:	2040      	movs	r0, #64	; 0x40
  4013de:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);
  4013e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013e4:	2041      	movs	r0, #65	; 0x41
  4013e6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);
  4013e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013ec:	2042      	movs	r0, #66	; 0x42
  4013ee:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);
  4013f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013f4:	2043      	movs	r0, #67	; 0x43
  4013f6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);
  4013f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013fc:	2044      	movs	r0, #68	; 0x44
  4013fe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);
  401400:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401404:	2045      	movs	r0, #69	; 0x45
  401406:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);
  401408:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40140c:	2046      	movs	r0, #70	; 0x46
  40140e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);
  401410:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401414:	2047      	movs	r0, #71	; 0x47
  401416:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);
  401418:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40141c:	4630      	mov	r0, r6
  40141e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);
  401420:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401424:	2081      	movs	r0, #129	; 0x81
  401426:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS);
  401428:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40142c:	2082      	movs	r0, #130	; 0x82
  40142e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS);
  401430:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401434:	2083      	movs	r0, #131	; 0x83
  401436:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS);
  401438:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40143c:	2084      	movs	r0, #132	; 0x84
  40143e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS);
  401440:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401444:	2085      	movs	r0, #133	; 0x85
  401446:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS);
  401448:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40144c:	200f      	movs	r0, #15
  40144e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS);
  401450:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401454:	4628      	mov	r0, r5
  401456:	47a0      	blx	r4

	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  401458:	f8c7 5124 	str.w	r5, [r7, #292]	; 0x124
  40145c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401460:	400e0c00 	.word	0x400e0c00
  401464:	5a00080c 	.word	0x5a00080c
  401468:	e000ed00 	.word	0xe000ed00
  40146c:	400e1400 	.word	0x400e1400
  401470:	400e0e00 	.word	0x400e0e00
  401474:	40088000 	.word	0x40088000
  401478:	400e1000 	.word	0x400e1000
  40147c:	00403271 	.word	0x00403271
  401480:	00403575 	.word	0x00403575

00401484 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401484:	4b28      	ldr	r3, [pc, #160]	; (401528 <twihs_set_speed+0xa4>)
  401486:	4299      	cmp	r1, r3
  401488:	d84b      	bhi.n	401522 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40148a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  40148e:	4299      	cmp	r1, r3
  401490:	d92d      	bls.n	4014ee <twihs_set_speed+0x6a>
{
  401492:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401494:	4c25      	ldr	r4, [pc, #148]	; (40152c <twihs_set_speed+0xa8>)
  401496:	fba4 3402 	umull	r3, r4, r4, r2
  40149a:	0ba4      	lsrs	r4, r4, #14
  40149c:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40149e:	4b24      	ldr	r3, [pc, #144]	; (401530 <twihs_set_speed+0xac>)
  4014a0:	440b      	add	r3, r1
  4014a2:	009b      	lsls	r3, r3, #2
  4014a4:	fbb2 f2f3 	udiv	r2, r2, r3
  4014a8:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014aa:	2cff      	cmp	r4, #255	; 0xff
  4014ac:	d91d      	bls.n	4014ea <twihs_set_speed+0x66>
  4014ae:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4014b0:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4014b2:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014b4:	2cff      	cmp	r4, #255	; 0xff
  4014b6:	d901      	bls.n	4014bc <twihs_set_speed+0x38>
  4014b8:	2906      	cmp	r1, #6
  4014ba:	d9f9      	bls.n	4014b0 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014bc:	2aff      	cmp	r2, #255	; 0xff
  4014be:	d907      	bls.n	4014d0 <twihs_set_speed+0x4c>
  4014c0:	2906      	cmp	r1, #6
  4014c2:	d805      	bhi.n	4014d0 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4014c4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4014c6:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014c8:	2aff      	cmp	r2, #255	; 0xff
  4014ca:	d901      	bls.n	4014d0 <twihs_set_speed+0x4c>
  4014cc:	2906      	cmp	r1, #6
  4014ce:	d9f9      	bls.n	4014c4 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4014d0:	0213      	lsls	r3, r2, #8
  4014d2:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  4014d4:	0409      	lsls	r1, r1, #16
  4014d6:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4014da:	430b      	orrs	r3, r1
  4014dc:	b2e4      	uxtb	r4, r4
  4014de:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  4014e0:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4014e2:	2000      	movs	r0, #0
}
  4014e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014e8:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4014ea:	2100      	movs	r1, #0
  4014ec:	e7e6      	b.n	4014bc <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4014ee:	0049      	lsls	r1, r1, #1
  4014f0:	fbb2 f2f1 	udiv	r2, r2, r1
  4014f4:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4014f6:	2aff      	cmp	r2, #255	; 0xff
  4014f8:	d911      	bls.n	40151e <twihs_set_speed+0x9a>
  4014fa:	2300      	movs	r3, #0
			ckdiv++;
  4014fc:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  4014fe:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401500:	2aff      	cmp	r2, #255	; 0xff
  401502:	d901      	bls.n	401508 <twihs_set_speed+0x84>
  401504:	2b06      	cmp	r3, #6
  401506:	d9f9      	bls.n	4014fc <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401508:	0211      	lsls	r1, r2, #8
  40150a:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  40150c:	041b      	lsls	r3, r3, #16
  40150e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401512:	430b      	orrs	r3, r1
  401514:	b2d2      	uxtb	r2, r2
  401516:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401518:	6102      	str	r2, [r0, #16]
	return PASS;
  40151a:	2000      	movs	r0, #0
  40151c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40151e:	2300      	movs	r3, #0
  401520:	e7f2      	b.n	401508 <twihs_set_speed+0x84>
		return FAIL;
  401522:	2001      	movs	r0, #1
  401524:	4770      	bx	lr
  401526:	bf00      	nop
  401528:	00061a80 	.word	0x00061a80
  40152c:	057619f1 	.word	0x057619f1
  401530:	3ffd1200 	.word	0x3ffd1200

00401534 <twihs_master_init>:
{
  401534:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401536:	f04f 32ff 	mov.w	r2, #4294967295
  40153a:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  40153c:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40153e:	2280      	movs	r2, #128	; 0x80
  401540:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401542:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401544:	2208      	movs	r2, #8
  401546:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401548:	2220      	movs	r2, #32
  40154a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  40154c:	2204      	movs	r2, #4
  40154e:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401550:	680a      	ldr	r2, [r1, #0]
  401552:	6849      	ldr	r1, [r1, #4]
  401554:	4b03      	ldr	r3, [pc, #12]	; (401564 <twihs_master_init+0x30>)
  401556:	4798      	blx	r3
}
  401558:	2801      	cmp	r0, #1
  40155a:	bf14      	ite	ne
  40155c:	2000      	movne	r0, #0
  40155e:	2001      	moveq	r0, #1
  401560:	bd08      	pop	{r3, pc}
  401562:	bf00      	nop
  401564:	00401485 	.word	0x00401485

00401568 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401568:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  40156a:	2a00      	cmp	r2, #0
  40156c:	d04c      	beq.n	401608 <twihs_master_read+0xa0>
{
  40156e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401570:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401572:	2600      	movs	r6, #0
  401574:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401576:	684b      	ldr	r3, [r1, #4]
  401578:	021b      	lsls	r3, r3, #8
  40157a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  40157e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401582:	7c0d      	ldrb	r5, [r1, #16]
  401584:	042d      	lsls	r5, r5, #16
  401586:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  40158a:	432b      	orrs	r3, r5
  40158c:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40158e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401590:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401592:	b15d      	cbz	r5, 4015ac <twihs_master_read+0x44>
	val = addr[0];
  401594:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401596:	2d01      	cmp	r5, #1
  401598:	dd02      	ble.n	4015a0 <twihs_master_read+0x38>
		val |= addr[1];
  40159a:	784e      	ldrb	r6, [r1, #1]
  40159c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  4015a0:	2d02      	cmp	r5, #2
  4015a2:	dd04      	ble.n	4015ae <twihs_master_read+0x46>
		val |= addr[2];
  4015a4:	7889      	ldrb	r1, [r1, #2]
  4015a6:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  4015aa:	e000      	b.n	4015ae <twihs_master_read+0x46>
		return 0;
  4015ac:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4015ae:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4015b0:	2301      	movs	r3, #1
  4015b2:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4015b4:	2502      	movs	r5, #2
  4015b6:	e012      	b.n	4015de <twihs_master_read+0x76>
  4015b8:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4015ba:	f013 0f02 	tst.w	r3, #2
  4015be:	d01b      	beq.n	4015f8 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  4015c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015c2:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4015c4:	6a03      	ldr	r3, [r0, #32]
  4015c6:	f013 0f01 	tst.w	r3, #1
  4015ca:	d0fb      	beq.n	4015c4 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  4015cc:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4015ce:	2000      	movs	r0, #0
}
  4015d0:	bc70      	pop	{r4, r5, r6}
  4015d2:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  4015d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015d6:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  4015da:	3a01      	subs	r2, #1
  4015dc:	d0f2      	beq.n	4015c4 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4015de:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4015e0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4015e4:	d114      	bne.n	401610 <twihs_master_read+0xa8>
  4015e6:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  4015ea:	2a01      	cmp	r2, #1
  4015ec:	d0e4      	beq.n	4015b8 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  4015ee:	f013 0f02 	tst.w	r3, #2
  4015f2:	d1ef      	bne.n	4015d4 <twihs_master_read+0x6c>
	while (cnt > 0) {
  4015f4:	2a00      	cmp	r2, #0
  4015f6:	d0e5      	beq.n	4015c4 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4015f8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4015fa:	f413 7f80 	tst.w	r3, #256	; 0x100
  4015fe:	d105      	bne.n	40160c <twihs_master_read+0xa4>
		if (!timeout--) {
  401600:	3901      	subs	r1, #1
  401602:	d1f2      	bne.n	4015ea <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401604:	2009      	movs	r0, #9
  401606:	e7e3      	b.n	4015d0 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401608:	2001      	movs	r0, #1
  40160a:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40160c:	2005      	movs	r0, #5
  40160e:	e7df      	b.n	4015d0 <twihs_master_read+0x68>
  401610:	2005      	movs	r0, #5
  401612:	e7dd      	b.n	4015d0 <twihs_master_read+0x68>

00401614 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401614:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401616:	2b00      	cmp	r3, #0
  401618:	d043      	beq.n	4016a2 <twihs_master_write+0x8e>
{
  40161a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  40161c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40161e:	2600      	movs	r6, #0
  401620:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401622:	7c0a      	ldrb	r2, [r1, #16]
  401624:	0412      	lsls	r2, r2, #16
  401626:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40162a:	684d      	ldr	r5, [r1, #4]
  40162c:	022d      	lsls	r5, r5, #8
  40162e:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401632:	432a      	orrs	r2, r5
  401634:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401636:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401638:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  40163a:	b15d      	cbz	r5, 401654 <twihs_master_write+0x40>
	val = addr[0];
  40163c:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  40163e:	2d01      	cmp	r5, #1
  401640:	dd02      	ble.n	401648 <twihs_master_write+0x34>
		val |= addr[1];
  401642:	784e      	ldrb	r6, [r1, #1]
  401644:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401648:	2d02      	cmp	r5, #2
  40164a:	dd04      	ble.n	401656 <twihs_master_write+0x42>
		val |= addr[2];
  40164c:	7889      	ldrb	r1, [r1, #2]
  40164e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401652:	e000      	b.n	401656 <twihs_master_write+0x42>
		return 0;
  401654:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401656:	60c2      	str	r2, [r0, #12]
  401658:	e004      	b.n	401664 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  40165a:	f814 2b01 	ldrb.w	r2, [r4], #1
  40165e:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401660:	3b01      	subs	r3, #1
  401662:	d00f      	beq.n	401684 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401664:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401666:	f412 7f80 	tst.w	r2, #256	; 0x100
  40166a:	d11e      	bne.n	4016aa <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  40166c:	f012 0f04 	tst.w	r2, #4
  401670:	d1f3      	bne.n	40165a <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401672:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401674:	f412 7f80 	tst.w	r2, #256	; 0x100
  401678:	d115      	bne.n	4016a6 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  40167a:	f012 0f04 	tst.w	r2, #4
  40167e:	d1ec      	bne.n	40165a <twihs_master_write+0x46>
	while (cnt > 0) {
  401680:	2b00      	cmp	r3, #0
  401682:	d1f6      	bne.n	401672 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401684:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401686:	f413 7f80 	tst.w	r3, #256	; 0x100
  40168a:	d111      	bne.n	4016b0 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  40168c:	f013 0f04 	tst.w	r3, #4
  401690:	d0f8      	beq.n	401684 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401692:	2302      	movs	r3, #2
  401694:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401696:	6a03      	ldr	r3, [r0, #32]
  401698:	f013 0f01 	tst.w	r3, #1
  40169c:	d0fb      	beq.n	401696 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  40169e:	2000      	movs	r0, #0
  4016a0:	e004      	b.n	4016ac <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  4016a2:	2001      	movs	r0, #1
  4016a4:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4016a6:	2005      	movs	r0, #5
  4016a8:	e000      	b.n	4016ac <twihs_master_write+0x98>
  4016aa:	2005      	movs	r0, #5
}
  4016ac:	bc70      	pop	{r4, r5, r6}
  4016ae:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4016b0:	2005      	movs	r0, #5
  4016b2:	e7fb      	b.n	4016ac <twihs_master_write+0x98>

004016b4 <twi_start_cond_L>:
	SENS_SDA_FLOAT;
}

/*! \brief Sends start condition */
char twi_start_cond_L(void)
{
  4016b4:	b570      	push	{r4, r5, r6, lr}
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4016b6:	4c0b      	ldr	r4, [pc, #44]	; (4016e4 <twi_start_cond_L+0x30>)
  4016b8:	f44f 7500 	mov.w	r5, #512	; 0x200
  4016bc:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4016be:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4016c2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4016c6:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4016c8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	SENS_SCL_FLOAT;
	SENS_SDA_DRIVE;
	delay_us(DELAY_L);
  4016cc:	f240 40be 	movw	r0, #1214	; 0x4be
  4016d0:	4e05      	ldr	r6, [pc, #20]	; (4016e8 <twi_start_cond_L+0x34>)
  4016d2:	47b0      	blx	r6
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4016d4:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4016d6:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	SENS_SCL_DRIVE;
	delay_us(DELAY_L);
  4016da:	f240 40be 	movw	r0, #1214	; 0x4be
  4016de:	47b0      	blx	r6
	return 1;
}
  4016e0:	2001      	movs	r0, #1
  4016e2:	bd70      	pop	{r4, r5, r6, pc}
  4016e4:	400e1200 	.word	0x400e1200
  4016e8:	2040008d 	.word	0x2040008d

004016ec <twi_stop_cond_L>:

/*! \brief Sends stop condition */
char twi_stop_cond_L(void)
{
  4016ec:	b538      	push	{r3, r4, r5, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4016ee:	4c0a      	ldr	r4, [pc, #40]	; (401718 <twi_stop_cond_L+0x2c>)
  4016f0:	f44f 7380 	mov.w	r3, #256	; 0x100
  4016f4:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4016f6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	SENS_SDA_DRIVE;
	delay_us(DELAY_L);
  4016fa:	f240 40be 	movw	r0, #1214	; 0x4be
  4016fe:	4d07      	ldr	r5, [pc, #28]	; (40171c <twi_stop_cond_L+0x30>)
  401700:	47a8      	blx	r5
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401702:	f44f 7300 	mov.w	r3, #512	; 0x200
  401706:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401708:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	SENS_SCL_FLOAT;
	delay_us(DELAY_L);
  40170c:	f240 40be 	movw	r0, #1214	; 0x4be
  401710:	47a8      	blx	r5
	return 1;
}
  401712:	2001      	movs	r0, #1
  401714:	bd38      	pop	{r3, r4, r5, pc}
  401716:	bf00      	nop
  401718:	400e1200 	.word	0x400e1200
  40171c:	2040008d 	.word	0x2040008d

00401720 <i2c_read_byte_L>:
    \param bytes  Number of bytes to read
    \param index Position of the incoming byte in hte receive buffer 
    \return 1 if successful, otherwise 0
 */
char i2c_read_byte_L(unsigned char* rcvdata, unsigned char bytes, unsigned char index)
{
  401720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401724:	b085      	sub	sp, #20
  401726:	9001      	str	r0, [sp, #4]
  401728:	9102      	str	r1, [sp, #8]
  40172a:	9203      	str	r2, [sp, #12]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40172c:	4b39      	ldr	r3, [pc, #228]	; (401814 <i2c_read_byte_L+0xf4>)
  40172e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401732:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401734:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401738:	2507      	movs	r5, #7
    unsigned char byte = 0;
  40173a:	f04f 0a00 	mov.w	sl, #0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40173e:	461c      	mov	r4, r3
  401740:	f44f 7600 	mov.w	r6, #512	; 0x200
  401744:	46b1      	mov	r9, r6
	//release SDA
	SENS_SDA_FLOAT;
	for (bit = 0; bit < 8; bit++) 
	{
           SENS_SCL_FLOAT;//goes high
           delay_us(DELAY_L);
  401746:	f240 48be 	movw	r8, #1214	; 0x4be
  40174a:	4f33      	ldr	r7, [pc, #204]	; (401818 <i2c_read_byte_L+0xf8>)
           if(READ_SDA_L())
                     byte|= (1 << (7- bit));
  40174c:	f04f 0b01 	mov.w	fp, #1
  401750:	e008      	b.n	401764 <i2c_read_byte_L+0x44>
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401752:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401754:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
			SENS_SCL_DRIVE;//goes low
//			if(bit!=7)	
			delay_us(DELAY_L);
  401758:	4640      	mov	r0, r8
  40175a:	47b8      	blx	r7
  40175c:	3d01      	subs	r5, #1
	for (bit = 0; bit < 8; bit++) 
  40175e:	f1b5 3fff 	cmp.w	r5, #4294967295
  401762:	d010      	beq.n	401786 <i2c_read_byte_L+0x66>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401764:	f8c4 9014 	str.w	r9, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401768:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
           delay_us(DELAY_L);
  40176c:	4640      	mov	r0, r8
  40176e:	47b8      	blx	r7
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401770:	6be3      	ldr	r3, [r4, #60]	; 0x3c
           if(READ_SDA_L())
  401772:	f413 7f80 	tst.w	r3, #256	; 0x100
  401776:	d0ec      	beq.n	401752 <i2c_read_byte_L+0x32>
                     byte|= (1 << (7- bit));
  401778:	fa0b f305 	lsl.w	r3, fp, r5
  40177c:	ea43 0a0a 	orr.w	sl, r3, sl
  401780:	fa5f fa8a 	uxtb.w	sl, sl
  401784:	e7e5      	b.n	401752 <i2c_read_byte_L+0x32>
        }
	rcvdata[index] = byte;
  401786:	9b01      	ldr	r3, [sp, #4]
  401788:	4619      	mov	r1, r3
  40178a:	9a03      	ldr	r2, [sp, #12]
  40178c:	f801 a002 	strb.w	sl, [r1, r2]
	if(index < (bytes-1))//if not the last byte, ACK the slave
  401790:	9b02      	ldr	r3, [sp, #8]
  401792:	3b01      	subs	r3, #1
  401794:	429a      	cmp	r2, r3
  401796:	db23      	blt.n	4017e0 <i2c_read_byte_L+0xc0>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401798:	4c1e      	ldr	r4, [pc, #120]	; (401814 <i2c_read_byte_L+0xf4>)
  40179a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40179e:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017a0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4017a4:	f44f 7500 	mov.w	r5, #512	; 0x200
  4017a8:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017aa:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	}
	else //send NACK on the last byte
	{
		SENS_SDA_FLOAT; //NACK
		SENS_SCL_FLOAT; //SCL high for the 9th clock
		delay_us(DELAY_L);
  4017ae:	f240 40be 	movw	r0, #1214	; 0x4be
  4017b2:	4e19      	ldr	r6, [pc, #100]	; (401818 <i2c_read_byte_L+0xf8>)
  4017b4:	47b0      	blx	r6
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4017b6:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017b8:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		//Pull SCL low
		SENS_SCL_DRIVE; //SCL low after 9th clock 
		//release SDA
		delay_us(DELAY_L);
  4017bc:	f240 40be 	movw	r0, #1214	; 0x4be
  4017c0:	47b0      	blx	r6
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4017c2:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017c4:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		SENS_SCL_FLOAT; //goes high for the 9th clock
		delay_us(DELAY_L);
  4017c8:	f240 40be 	movw	r0, #1214	; 0x4be
  4017cc:	47b0      	blx	r6
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4017ce:	4622      	mov	r2, r4
  4017d0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
		while(!READ_SCL_L()){}
  4017d2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4017d6:	d0fb      	beq.n	4017d0 <i2c_read_byte_L+0xb0>
	}		
	return 1;
		
}	
  4017d8:	2001      	movs	r0, #1
  4017da:	b005      	add	sp, #20
  4017dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4017e0:	4c0c      	ldr	r4, [pc, #48]	; (401814 <i2c_read_byte_L+0xf4>)
  4017e2:	f44f 7580 	mov.w	r5, #256	; 0x100
  4017e6:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017e8:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4017ec:	f44f 7600 	mov.w	r6, #512	; 0x200
  4017f0:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4017f2:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		delay_us(DELAY_L);
  4017f6:	f240 40be 	movw	r0, #1214	; 0x4be
  4017fa:	4f07      	ldr	r7, [pc, #28]	; (401818 <i2c_read_byte_L+0xf8>)
  4017fc:	47b8      	blx	r7
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4017fe:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401800:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		delay_us(DELAY_L);
  401804:	f240 40be 	movw	r0, #1214	; 0x4be
  401808:	47b8      	blx	r7
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40180a:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40180c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
  401810:	e7e2      	b.n	4017d8 <i2c_read_byte_L+0xb8>
  401812:	bf00      	nop
  401814:	400e1200 	.word	0x400e1200
  401818:	2040008d 	.word	0x2040008d

0040181c <write_sda_L>:
/*! \brief Writes SDA.
    \param x tristates SDA when x = 1, other wise 0
 */
void write_sda_L (char x)
{
	if(x)
  40181c:	b930      	cbnz	r0, 40182c <write_sda_L+0x10>
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40181e:	4b07      	ldr	r3, [pc, #28]	; (40183c <write_sda_L+0x20>)
  401820:	f44f 7280 	mov.w	r2, #256	; 0x100
  401824:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401826:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  40182a:	4770      	bx	lr
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40182c:	4b03      	ldr	r3, [pc, #12]	; (40183c <write_sda_L+0x20>)
  40182e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401832:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401834:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401838:	4770      	bx	lr
  40183a:	bf00      	nop
  40183c:	400e1200 	.word	0x400e1200

00401840 <i2c_write_byte_L>:
{
  401840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401844:	4606      	mov	r6, r0
  401846:	468a      	mov	sl, r1
  401848:	2508      	movs	r5, #8
            write_sda_L((byte & 0x80) != 0);
  40184a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4018ec <i2c_write_byte_L+0xac>
            delay_us(DELAY_L);
  40184e:	f240 48be 	movw	r8, #1214	; 0x4be
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401852:	4f25      	ldr	r7, [pc, #148]	; (4018e8 <i2c_write_byte_L+0xa8>)
            write_sda_L((byte & 0x80) != 0);
  401854:	09f0      	lsrs	r0, r6, #7
  401856:	47c8      	blx	r9
            delay_us(DELAY_L);
  401858:	4640      	mov	r0, r8
  40185a:	f8df b094 	ldr.w	fp, [pc, #148]	; 4018f0 <i2c_write_byte_L+0xb0>
  40185e:	47d8      	blx	fp
  401860:	f44f 7400 	mov.w	r4, #512	; 0x200
  401864:	617c      	str	r4, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401866:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
            delay_us(DELAY_L);
  40186a:	4640      	mov	r0, r8
  40186c:	47d8      	blx	fp
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40186e:	613c      	str	r4, [r7, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401870:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
            byte <<= 1;
  401874:	0076      	lsls	r6, r6, #1
  401876:	b2f6      	uxtb	r6, r6
            delay_us(DELAY_L);
  401878:	4640      	mov	r0, r8
  40187a:	47d8      	blx	fp
  40187c:	1e68      	subs	r0, r5, #1
	for (bit = 0; bit < 8; bit++) 
  40187e:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
  401882:	d1e7      	bne.n	401854 <i2c_write_byte_L+0x14>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401884:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
  401888:	f504 2461 	add.w	r4, r4, #921600	; 0xe1000
  40188c:	f44f 7380 	mov.w	r3, #256	; 0x100
  401890:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401892:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401896:	f44f 7300 	mov.w	r3, #512	; 0x200
  40189a:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40189c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    delay_us(DELAY_L);
  4018a0:	f240 40be 	movw	r0, #1214	; 0x4be
  4018a4:	47d8      	blx	fp
	delay_us(4);
  4018a6:	20cb      	movs	r0, #203	; 0xcb
  4018a8:	47d8      	blx	fp
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4018aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if(READ_SDA_L())
  4018ac:	f413 7f80 	tst.w	r3, #256	; 0x100
  4018b0:	d002      	beq.n	4018b8 <i2c_write_byte_L+0x78>
}	
  4018b2:	4628      	mov	r0, r5
  4018b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4018b8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4018bc:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018be:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4018c2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4018c6:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018c8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
	delay_us(DELAY_L);
  4018cc:	f240 40be 	movw	r0, #1214	; 0x4be
  4018d0:	47d8      	blx	fp
	if(stretch)delay_ms(1);
  4018d2:	f1ba 0f00 	cmp.w	sl, #0
  4018d6:	d101      	bne.n	4018dc <i2c_write_byte_L+0x9c>
	return 1;
  4018d8:	2501      	movs	r5, #1
  4018da:	e7ea      	b.n	4018b2 <i2c_write_byte_L+0x72>
	if(stretch)delay_ms(1);
  4018dc:	f24c 508e 	movw	r0, #50574	; 0xc58e
  4018e0:	47d8      	blx	fp
	return 1;
  4018e2:	2501      	movs	r5, #1
  4018e4:	e7e5      	b.n	4018b2 <i2c_write_byte_L+0x72>
  4018e6:	bf00      	nop
  4018e8:	400e1200 	.word	0x400e1200
  4018ec:	0040181d 	.word	0x0040181d
  4018f0:	2040008d 	.word	0x2040008d

004018f4 <send_slave_Address_L>:
{
  4018f4:	b508      	push	{r3, lr}
 	return i2c_write_byte_L(slaveAddress | read, 0 );
  4018f6:	4308      	orrs	r0, r1
  4018f8:	2100      	movs	r1, #0
  4018fa:	4b01      	ldr	r3, [pc, #4]	; (401900 <send_slave_Address_L+0xc>)
  4018fc:	4798      	blx	r3
} 
  4018fe:	bd08      	pop	{r3, pc}
  401900:	00401841 	.word	0x00401841

00401904 <read_bytes_L>:
{
  401904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401908:	4607      	mov	r7, r0
  40190a:	460d      	mov	r5, r1
  40190c:	4614      	mov	r4, r2
	if(!twi_start_cond_L())
  40190e:	4b11      	ldr	r3, [pc, #68]	; (401954 <read_bytes_L+0x50>)
  401910:	4798      	blx	r3
  401912:	4606      	mov	r6, r0
  401914:	b910      	cbnz	r0, 40191c <read_bytes_L+0x18>
}	
  401916:	4630      	mov	r0, r6
  401918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!send_slave_Address_L(READ_L, slaveAddress))
  40191c:	4621      	mov	r1, r4
  40191e:	2001      	movs	r0, #1
  401920:	4b0d      	ldr	r3, [pc, #52]	; (401958 <read_bytes_L+0x54>)
  401922:	4798      	blx	r3
  401924:	4606      	mov	r6, r0
  401926:	2800      	cmp	r0, #0
  401928:	d0f5      	beq.n	401916 <read_bytes_L+0x12>
	for(index = 0; index < bytes; index++)
  40192a:	b17d      	cbz	r5, 40194c <read_bytes_L+0x48>
  40192c:	2400      	movs	r4, #0
		success = i2c_read_byte_L(data, bytes, index);//db: always returns 1?
  40192e:	4e0b      	ldr	r6, [pc, #44]	; (40195c <read_bytes_L+0x58>)
  401930:	4622      	mov	r2, r4
  401932:	4629      	mov	r1, r5
  401934:	4638      	mov	r0, r7
  401936:	47b0      	blx	r6
		if(!success)
  401938:	4680      	mov	r8, r0
  40193a:	b118      	cbz	r0, 401944 <read_bytes_L+0x40>
	for(index = 0; index < bytes; index++)
  40193c:	3401      	adds	r4, #1
  40193e:	b2e4      	uxtb	r4, r4
  401940:	42a5      	cmp	r5, r4
  401942:	d1f5      	bne.n	401930 <read_bytes_L+0x2c>
	twi_stop_cond_L();
  401944:	4b06      	ldr	r3, [pc, #24]	; (401960 <read_bytes_L+0x5c>)
  401946:	4798      	blx	r3
	return success;
  401948:	4646      	mov	r6, r8
  40194a:	e7e4      	b.n	401916 <read_bytes_L+0x12>
	for(index = 0; index < bytes; index++)
  40194c:	f04f 0800 	mov.w	r8, #0
  401950:	e7f8      	b.n	401944 <read_bytes_L+0x40>
  401952:	bf00      	nop
  401954:	004016b5 	.word	0x004016b5
  401958:	004018f5 	.word	0x004018f5
  40195c:	00401721 	.word	0x00401721
  401960:	004016ed 	.word	0x004016ed

00401964 <write_data_L>:
{
  401964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401968:	4605      	mov	r5, r0
  40196a:	460f      	mov	r7, r1
  40196c:	4614      	mov	r4, r2
  40196e:	4699      	mov	r9, r3
	if(!twi_start_cond_L())
  401970:	4b1d      	ldr	r3, [pc, #116]	; (4019e8 <write_data_L+0x84>)
  401972:	4798      	blx	r3
  401974:	4606      	mov	r6, r0
  401976:	b910      	cbnz	r0, 40197e <write_data_L+0x1a>
}
  401978:	4630      	mov	r0, r6
  40197a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!send_slave_Address_L(WRITE_L, slaveAddress))
  40197e:	4621      	mov	r1, r4
  401980:	2000      	movs	r0, #0
  401982:	4b1a      	ldr	r3, [pc, #104]	; (4019ec <write_data_L+0x88>)
  401984:	4798      	blx	r3
  401986:	4606      	mov	r6, r0
  401988:	2800      	cmp	r0, #0
  40198a:	d0f5      	beq.n	401978 <write_data_L+0x14>
	for(index = 0; index < bytes; index++)
  40198c:	b357      	cbz	r7, 4019e4 <write_data_L+0x80>
  40198e:	f107 38ff 	add.w	r8, r7, #4294967295
  401992:	fa5f f888 	uxtb.w	r8, r8
  401996:	f108 0801 	add.w	r8, r8, #1
  40199a:	2400      	movs	r4, #0
		if(index==(bytes-1))ack = i2c_write_byte_L(indata[index], stretch);
  40199c:	3f01      	subs	r7, #1
		 else ack = i2c_write_byte_L(indata[index], 0);
  40199e:	46a3      	mov	fp, r4
  4019a0:	f8df a054 	ldr.w	sl, [pc, #84]	; 4019f8 <write_data_L+0x94>
		if(index==(bytes-1))ack = i2c_write_byte_L(indata[index], stretch);
  4019a4:	42bc      	cmp	r4, r7
  4019a6:	bf0c      	ite	eq
  4019a8:	4649      	moveq	r1, r9
		 else ack = i2c_write_byte_L(indata[index], 0);
  4019aa:	4659      	movne	r1, fp
  4019ac:	7828      	ldrb	r0, [r5, #0]
  4019ae:	47d0      	blx	sl
  4019b0:	4606      	mov	r6, r0
		 if(!ack)
  4019b2:	b118      	cbz	r0, 4019bc <write_data_L+0x58>
  4019b4:	3401      	adds	r4, #1
  4019b6:	3501      	adds	r5, #1
	for(index = 0; index < bytes; index++)
  4019b8:	4544      	cmp	r4, r8
  4019ba:	d1f3      	bne.n	4019a4 <write_data_L+0x40>
	if(stretch==0)SENS_SCL_FLOAT;
  4019bc:	f1b9 0f00 	cmp.w	r9, #0
  4019c0:	d105      	bne.n	4019ce <write_data_L+0x6a>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4019c2:	4b0b      	ldr	r3, [pc, #44]	; (4019f0 <write_data_L+0x8c>)
  4019c4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4019c8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	delay_us(SCL_SDA_DELAY_L);
  4019ce:	f240 205f 	movw	r0, #607	; 0x25f
  4019d2:	4b08      	ldr	r3, [pc, #32]	; (4019f4 <write_data_L+0x90>)
  4019d4:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4019d6:	4b06      	ldr	r3, [pc, #24]	; (4019f0 <write_data_L+0x8c>)
  4019d8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4019dc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4019de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return ack;
  4019e2:	e7c9      	b.n	401978 <write_data_L+0x14>
	for(index = 0; index < bytes; index++)
  4019e4:	2600      	movs	r6, #0
  4019e6:	e7e9      	b.n	4019bc <write_data_L+0x58>
  4019e8:	004016b5 	.word	0x004016b5
  4019ec:	004018f5 	.word	0x004018f5
  4019f0:	400e1200 	.word	0x400e1200
  4019f4:	2040008d 	.word	0x2040008d
  4019f8:	00401841 	.word	0x00401841

004019fc <write_SCL_RTC>:
	
/*! \brief Writes SCL.
    \param x tristates SCL when x = 1, other wise 0
 */
void write_SCL_RTC (char x)
{
  4019fc:	b508      	push	{r3, lr}
      if(x)
  4019fe:	b158      	cbz	r0, 401a18 <write_SCL_RTC+0x1c>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401a00:	4b0a      	ldr	r3, [pc, #40]	; (401a2c <write_SCL_RTC+0x30>)
  401a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401a06:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401a0c:	461a      	mov	r2, r3
  401a0e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
      {
//             DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_RTC, IOPORT_DIR_INPUT);
 	    //check clock stretching
 	    while(!READ_SCL_RTC());
  401a10:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401a14:	d0fb      	beq.n	401a0e <write_SCL_RTC+0x12>
  401a16:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401a18:	4b04      	ldr	r3, [pc, #16]	; (401a2c <write_SCL_RTC+0x30>)
  401a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401a1e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      else
      {
//             DDR_SCL |= (1 << SCL); //output 
//             PORT_SCL &= ~(1 << SCL); //set it low
			ioport_set_pin_dir(SCL_RTC, IOPORT_DIR_OUTPUT);
			pio_set_pin_low(SCL_RTC);
  401a24:	204d      	movs	r0, #77	; 0x4d
  401a26:	4b02      	ldr	r3, [pc, #8]	; (401a30 <write_SCL_RTC+0x34>)
  401a28:	4798      	blx	r3
  401a2a:	bd08      	pop	{r3, pc}
  401a2c:	400e1200 	.word	0x400e1200
  401a30:	00403255 	.word	0x00403255

00401a34 <write_SDA_RTC>:

/*! \brief Writes SDA.
    \param x tristates SDA when x = 1, other wise 0
 */
void write_SDA_RTC (char x)
{
  401a34:	b508      	push	{r3, lr}
	if(x)
  401a36:	b130      	cbz	r0, 401a46 <write_SDA_RTC+0x12>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401a38:	4b08      	ldr	r3, [pc, #32]	; (401a5c <write_SDA_RTC+0x28>)
  401a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401a3e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401a44:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401a46:	4b05      	ldr	r3, [pc, #20]	; (401a5c <write_SDA_RTC+0x28>)
  401a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401a4c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a4e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	else
	{
		///            DDR_SDA |= (1 << SDA); //output
		///            PORT_SDA &= ~(1 << SDA); //set it low
		ioport_set_pin_dir(SDA_RTC, IOPORT_DIR_OUTPUT);
		pio_set_pin_low(SDA_RTC);
  401a52:	204a      	movs	r0, #74	; 0x4a
  401a54:	4b02      	ldr	r3, [pc, #8]	; (401a60 <write_SDA_RTC+0x2c>)
  401a56:	4798      	blx	r3
  401a58:	bd08      	pop	{r3, pc}
  401a5a:	bf00      	nop
  401a5c:	400e1200 	.word	0x400e1200
  401a60:	00403255 	.word	0x00403255

00401a64 <twi_init_RTC>:
{
  401a64:	b508      	push	{r3, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401a66:	4b09      	ldr	r3, [pc, #36]	; (401a8c <twi_init_RTC+0x28>)
  401a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401a6c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401a76:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401a78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	write_SDA_RTC(1);
  401a7c:	2001      	movs	r0, #1
  401a7e:	4b04      	ldr	r3, [pc, #16]	; (401a90 <twi_init_RTC+0x2c>)
  401a80:	4798      	blx	r3
    write_SCL_RTC(1);
  401a82:	2001      	movs	r0, #1
  401a84:	4b03      	ldr	r3, [pc, #12]	; (401a94 <twi_init_RTC+0x30>)
  401a86:	4798      	blx	r3
  401a88:	bd08      	pop	{r3, pc}
  401a8a:	bf00      	nop
  401a8c:	400e1200 	.word	0x400e1200
  401a90:	00401a35 	.word	0x00401a35
  401a94:	004019fd 	.word	0x004019fd

00401a98 <twi_start_cond_RTC>:
{
  401a98:	b510      	push	{r4, lr}
    write_SDA_RTC(0);
  401a9a:	2000      	movs	r0, #0
  401a9c:	4b06      	ldr	r3, [pc, #24]	; (401ab8 <twi_start_cond_RTC+0x20>)
  401a9e:	4798      	blx	r3
	delay_us(DELAY_RTC);
  401aa0:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401aa4:	4c05      	ldr	r4, [pc, #20]	; (401abc <twi_start_cond_RTC+0x24>)
  401aa6:	47a0      	blx	r4
	write_SCL_RTC(0);	
  401aa8:	2000      	movs	r0, #0
  401aaa:	4b05      	ldr	r3, [pc, #20]	; (401ac0 <twi_start_cond_RTC+0x28>)
  401aac:	4798      	blx	r3
	delay_us(DELAY_RTC);
  401aae:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401ab2:	47a0      	blx	r4
}
  401ab4:	2001      	movs	r0, #1
  401ab6:	bd10      	pop	{r4, pc}
  401ab8:	00401a35 	.word	0x00401a35
  401abc:	2040008d 	.word	0x2040008d
  401ac0:	004019fd 	.word	0x004019fd

00401ac4 <toggle_SCL_RTC>:
		
	}
}

void toggle_SCL_RTC() 
{
  401ac4:	b508      	push	{r3, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401ac6:	4b0d      	ldr	r3, [pc, #52]	; (401afc <toggle_SCL_RTC+0x38>)
  401ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(SCL_RTC))
  401aca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401ace:	d10b      	bne.n	401ae8 <toggle_SCL_RTC+0x24>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401ad0:	4b0a      	ldr	r3, [pc, #40]	; (401afc <toggle_SCL_RTC+0x38>)
  401ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401ad6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ad8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401adc:	461a      	mov	r2, r3
  401ade:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	}
	else
	{
// 		DDR_SCL &= ~(1 << SCL); //tristate it
		ioport_set_pin_dir(SCL_RTC, IOPORT_DIR_INPUT);
 		while(!READ_SCL_RTC());
  401ae0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401ae4:	d0fb      	beq.n	401ade <toggle_SCL_RTC+0x1a>
  401ae6:	bd08      	pop	{r3, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401ae8:	4b04      	ldr	r3, [pc, #16]	; (401afc <toggle_SCL_RTC+0x38>)
  401aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401aee:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401af0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pio_set_pin_low(SCL_RTC);
  401af4:	204d      	movs	r0, #77	; 0x4d
  401af6:	4b02      	ldr	r3, [pc, #8]	; (401b00 <toggle_SCL_RTC+0x3c>)
  401af8:	4798      	blx	r3
  401afa:	bd08      	pop	{r3, pc}
  401afc:	400e1200 	.word	0x400e1200
  401b00:	00403255 	.word	0x00403255

00401b04 <i2c_write_byte_RTC>:
{
  401b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401b08:	4604      	mov	r4, r0
  401b0a:	2708      	movs	r7, #8
            write_SDA_RTC((byte & 0x80) != 0);
  401b0c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 401b88 <i2c_write_byte_RTC+0x84>
            delay_us(DELAY_RTC);
  401b10:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
  401b14:	4d1a      	ldr	r5, [pc, #104]	; (401b80 <i2c_write_byte_RTC+0x7c>)
            write_SDA_RTC((byte & 0x80) != 0);
  401b16:	09e0      	lsrs	r0, r4, #7
  401b18:	47c8      	blx	r9
            delay_us(DELAY_RTC);
  401b1a:	4630      	mov	r0, r6
  401b1c:	47a8      	blx	r5
            toggle_SCL_RTC();//goes high
  401b1e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401b8c <i2c_write_byte_RTC+0x88>
  401b22:	47c0      	blx	r8
            delay_us(DELAY_RTC);
  401b24:	4630      	mov	r0, r6
  401b26:	47a8      	blx	r5
            toggle_SCL_RTC();//goes low
  401b28:	47c0      	blx	r8
            byte <<= 1;
  401b2a:	0064      	lsls	r4, r4, #1
  401b2c:	b2e4      	uxtb	r4, r4
            delay_us(DELAY_RTC);
  401b2e:	4630      	mov	r0, r6
  401b30:	47a8      	blx	r5
  401b32:	1e78      	subs	r0, r7, #1
	for (bit = 0; bit < 8; bit++) 
  401b34:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
  401b38:	d1ed      	bne.n	401b16 <i2c_write_byte_RTC+0x12>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401b3a:	4c12      	ldr	r4, [pc, #72]	; (401b84 <i2c_write_byte_RTC+0x80>)
  401b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401b40:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b42:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	toggle_SCL_RTC(); //goes high for the 9th clock
  401b46:	47c0      	blx	r8
	delay_us(16);
  401b48:	f240 302a 	movw	r0, #810	; 0x32a
  401b4c:	4b0c      	ldr	r3, [pc, #48]	; (401b80 <i2c_write_byte_RTC+0x7c>)
  401b4e:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401b50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if(READ_SDA_RTC())
  401b52:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401b56:	d002      	beq.n	401b5e <i2c_write_byte_RTC+0x5a>
}	
  401b58:	4638      	mov	r0, r7
  401b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	delay_us(DELAY_RTC);
  401b5e:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401b62:	4c07      	ldr	r4, [pc, #28]	; (401b80 <i2c_write_byte_RTC+0x7c>)
  401b64:	47a0      	blx	r4
	toggle_SCL_RTC(); //end of byte with acknowledgment. SCL LOW.
  401b66:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401b68:	4b06      	ldr	r3, [pc, #24]	; (401b84 <i2c_write_byte_RTC+0x80>)
  401b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401b6e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	delay_us(DELAY_RTC); 
  401b74:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401b78:	47a0      	blx	r4
	return 1;
  401b7a:	2701      	movs	r7, #1
  401b7c:	e7ec      	b.n	401b58 <i2c_write_byte_RTC+0x54>
  401b7e:	bf00      	nop
  401b80:	2040008d 	.word	0x2040008d
  401b84:	400e1200 	.word	0x400e1200
  401b88:	00401a35 	.word	0x00401a35
  401b8c:	00401ac5 	.word	0x00401ac5

00401b90 <write_data_RTC>:
{
  401b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401b92:	4607      	mov	r7, r0
  401b94:	460e      	mov	r6, r1
	if(!twi_start_cond_RTC())
  401b96:	4b13      	ldr	r3, [pc, #76]	; (401be4 <write_data_RTC+0x54>)
  401b98:	4798      	blx	r3
  401b9a:	4605      	mov	r5, r0
  401b9c:	b908      	cbnz	r0, 401ba2 <write_data_RTC+0x12>
}
  401b9e:	4628      	mov	r0, r5
  401ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 	return i2c_write_byte_RTC(SLAVE_ADDRESS_RTC | read );
  401ba2:	20a2      	movs	r0, #162	; 0xa2
  401ba4:	4b10      	ldr	r3, [pc, #64]	; (401be8 <write_data_RTC+0x58>)
  401ba6:	4798      	blx	r3
	if(!send_slave_address_RTC(WRITE_RTC))
  401ba8:	4605      	mov	r5, r0
  401baa:	2800      	cmp	r0, #0
  401bac:	d0f7      	beq.n	401b9e <write_data_RTC+0xe>
	for(index = 0; index < bytes; index++)
  401bae:	b1b6      	cbz	r6, 401bde <write_data_RTC+0x4e>
  401bb0:	1e7c      	subs	r4, r7, #1
  401bb2:	3e01      	subs	r6, #1
  401bb4:	fa57 f686 	uxtab	r6, r7, r6
		 ack = i2c_write_byte_RTC(indata[index]);
  401bb8:	4f0b      	ldr	r7, [pc, #44]	; (401be8 <write_data_RTC+0x58>)
  401bba:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  401bbe:	47b8      	blx	r7
		 if(!ack)
  401bc0:	4605      	mov	r5, r0
  401bc2:	b108      	cbz	r0, 401bc8 <write_data_RTC+0x38>
	for(index = 0; index < bytes; index++)
  401bc4:	42b4      	cmp	r4, r6
  401bc6:	d1f8      	bne.n	401bba <write_data_RTC+0x2a>
	write_SCL_RTC(1);
  401bc8:	2001      	movs	r0, #1
  401bca:	4b08      	ldr	r3, [pc, #32]	; (401bec <write_data_RTC+0x5c>)
  401bcc:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_RTC);
  401bce:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401bd2:	4b07      	ldr	r3, [pc, #28]	; (401bf0 <write_data_RTC+0x60>)
  401bd4:	4798      	blx	r3
	write_SDA_RTC(1);
  401bd6:	2001      	movs	r0, #1
  401bd8:	4b06      	ldr	r3, [pc, #24]	; (401bf4 <write_data_RTC+0x64>)
  401bda:	4798      	blx	r3
	return ack;
  401bdc:	e7df      	b.n	401b9e <write_data_RTC+0xe>
	for(index = 0; index < bytes; index++)
  401bde:	2500      	movs	r5, #0
  401be0:	e7f2      	b.n	401bc8 <write_data_RTC+0x38>
  401be2:	bf00      	nop
  401be4:	00401a99 	.word	0x00401a99
  401be8:	00401b05 	.word	0x00401b05
  401bec:	004019fd 	.word	0x004019fd
  401bf0:	2040008d 	.word	0x2040008d
  401bf4:	00401a35 	.word	0x00401a35

00401bf8 <i2c_read_byte_RTC>:
{
  401bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401bfc:	b083      	sub	sp, #12
  401bfe:	4683      	mov	fp, r0
  401c00:	9101      	str	r1, [sp, #4]
  401c02:	4692      	mov	sl, r2
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401c04:	4b28      	ldr	r3, [pc, #160]	; (401ca8 <i2c_read_byte_RTC+0xb0>)
  401c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401c0a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c0c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401c10:	2407      	movs	r4, #7
        unsigned char byte = 0;
  401c12:	f04f 0800 	mov.w	r8, #0
             toggle_SCL_RTC();//goes high
  401c16:	4f25      	ldr	r7, [pc, #148]	; (401cac <i2c_read_byte_RTC+0xb4>)
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401c18:	4699      	mov	r9, r3
              delay_us(DELAY_RTC);
  401c1a:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
  401c1e:	e009      	b.n	401c34 <i2c_read_byte_RTC+0x3c>
  401c20:	4630      	mov	r0, r6
  401c22:	4d23      	ldr	r5, [pc, #140]	; (401cb0 <i2c_read_byte_RTC+0xb8>)
  401c24:	47a8      	blx	r5
              toggle_SCL_RTC();//goes low
  401c26:	47b8      	blx	r7
              delay_us(DELAY_RTC);
  401c28:	4630      	mov	r0, r6
  401c2a:	47a8      	blx	r5
  401c2c:	3c01      	subs	r4, #1
	for (bit = 0; bit < 8; bit++) 
  401c2e:	f1b4 3fff 	cmp.w	r4, #4294967295
  401c32:	d00c      	beq.n	401c4e <i2c_read_byte_RTC+0x56>
             toggle_SCL_RTC();//goes high
  401c34:	47b8      	blx	r7
  401c36:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
             if(READ_SDA_RTC())
  401c3a:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401c3e:	d0ef      	beq.n	401c20 <i2c_read_byte_RTC+0x28>
                     byte|= (1 << (7- bit));
  401c40:	2301      	movs	r3, #1
  401c42:	40a3      	lsls	r3, r4
  401c44:	ea43 0808 	orr.w	r8, r3, r8
  401c48:	fa5f f888 	uxtb.w	r8, r8
  401c4c:	e7e8      	b.n	401c20 <i2c_read_byte_RTC+0x28>
	rcvdata[index] = byte;
  401c4e:	f80b 800a 	strb.w	r8, [fp, sl]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401c52:	4b15      	ldr	r3, [pc, #84]	; (401ca8 <i2c_read_byte_RTC+0xb0>)
  401c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401c58:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c5a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if(index < (bytes-1))
  401c5e:	9b01      	ldr	r3, [sp, #4]
  401c60:	3b01      	subs	r3, #1
  401c62:	459a      	cmp	sl, r3
  401c64:	db10      	blt.n	401c88 <i2c_read_byte_RTC+0x90>
		write_SDA_RTC(1);
  401c66:	2001      	movs	r0, #1
  401c68:	4b12      	ldr	r3, [pc, #72]	; (401cb4 <i2c_read_byte_RTC+0xbc>)
  401c6a:	4798      	blx	r3
		toggle_SCL_RTC(); //goes high for the 9th clock
  401c6c:	4d0f      	ldr	r5, [pc, #60]	; (401cac <i2c_read_byte_RTC+0xb4>)
  401c6e:	47a8      	blx	r5
		delay_us(DELAY_RTC);
  401c70:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401c74:	4c0e      	ldr	r4, [pc, #56]	; (401cb0 <i2c_read_byte_RTC+0xb8>)
  401c76:	47a0      	blx	r4
		toggle_SCL_RTC(); //end of byte with acknowledgment. 
  401c78:	47a8      	blx	r5
		delay_us(DELAY_RTC);
  401c7a:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401c7e:	47a0      	blx	r4
}	
  401c80:	2001      	movs	r0, #1
  401c82:	b003      	add	sp, #12
  401c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		write_SDA_RTC(0);
  401c88:	2000      	movs	r0, #0
  401c8a:	4d0a      	ldr	r5, [pc, #40]	; (401cb4 <i2c_read_byte_RTC+0xbc>)
  401c8c:	47a8      	blx	r5
		toggle_SCL_RTC(); //goes high for the 9th clock
  401c8e:	4e07      	ldr	r6, [pc, #28]	; (401cac <i2c_read_byte_RTC+0xb4>)
  401c90:	47b0      	blx	r6
		delay_us(DELAY_RTC);
  401c92:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401c96:	4c06      	ldr	r4, [pc, #24]	; (401cb0 <i2c_read_byte_RTC+0xb8>)
  401c98:	47a0      	blx	r4
		toggle_SCL_RTC(); //end of byte with acknowledgment. 
  401c9a:	47b0      	blx	r6
		write_SDA_RTC(1);
  401c9c:	2001      	movs	r0, #1
  401c9e:	47a8      	blx	r5
		delay_us(DELAY_RTC);
  401ca0:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401ca4:	47a0      	blx	r4
  401ca6:	e7eb      	b.n	401c80 <i2c_read_byte_RTC+0x88>
  401ca8:	400e1200 	.word	0x400e1200
  401cac:	00401ac5 	.word	0x00401ac5
  401cb0:	2040008d 	.word	0x2040008d
  401cb4:	00401a35 	.word	0x00401a35

00401cb8 <read_bytes_RTC>:
{
  401cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401cbc:	4607      	mov	r7, r0
  401cbe:	460d      	mov	r5, r1
	if(!twi_start_cond_RTC())
  401cc0:	4b18      	ldr	r3, [pc, #96]	; (401d24 <read_bytes_RTC+0x6c>)
  401cc2:	4798      	blx	r3
  401cc4:	4606      	mov	r6, r0
  401cc6:	b910      	cbnz	r0, 401cce <read_bytes_RTC+0x16>
}	
  401cc8:	4630      	mov	r0, r6
  401cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 	return i2c_write_byte_RTC(SLAVE_ADDRESS_RTC | read );
  401cce:	20a3      	movs	r0, #163	; 0xa3
  401cd0:	4b15      	ldr	r3, [pc, #84]	; (401d28 <read_bytes_RTC+0x70>)
  401cd2:	4798      	blx	r3
	if(!send_slave_address_RTC(READ_RTC))
  401cd4:	4606      	mov	r6, r0
  401cd6:	2800      	cmp	r0, #0
  401cd8:	d0f6      	beq.n	401cc8 <read_bytes_RTC+0x10>
	for(index = 0; index < bytes; index++)
  401cda:	b1fd      	cbz	r5, 401d1c <read_bytes_RTC+0x64>
  401cdc:	2400      	movs	r4, #0
		success = i2c_read_byte_RTC(data, bytes, index);//db: always returns 1?
  401cde:	4e13      	ldr	r6, [pc, #76]	; (401d2c <read_bytes_RTC+0x74>)
  401ce0:	4622      	mov	r2, r4
  401ce2:	4629      	mov	r1, r5
  401ce4:	4638      	mov	r0, r7
  401ce6:	47b0      	blx	r6
		if(!success)
  401ce8:	4680      	mov	r8, r0
  401cea:	b118      	cbz	r0, 401cf4 <read_bytes_RTC+0x3c>
	for(index = 0; index < bytes; index++)
  401cec:	3401      	adds	r4, #1
  401cee:	b2e4      	uxtb	r4, r4
  401cf0:	42a5      	cmp	r5, r4
  401cf2:	d1f5      	bne.n	401ce0 <read_bytes_RTC+0x28>
	delay_us(SCL_SDA_DELAY_RTC);
  401cf4:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401cf8:	4c0d      	ldr	r4, [pc, #52]	; (401d30 <read_bytes_RTC+0x78>)
  401cfa:	47a0      	blx	r4
	write_SDA_RTC(0);
  401cfc:	2000      	movs	r0, #0
  401cfe:	4d0d      	ldr	r5, [pc, #52]	; (401d34 <read_bytes_RTC+0x7c>)
  401d00:	47a8      	blx	r5
	delay_us(SCL_SDA_DELAY_RTC);
  401d02:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401d06:	47a0      	blx	r4
	write_SCL_RTC(1);
  401d08:	2001      	movs	r0, #1
  401d0a:	4b0b      	ldr	r3, [pc, #44]	; (401d38 <read_bytes_RTC+0x80>)
  401d0c:	4798      	blx	r3
	delay_us(SCL_SDA_DELAY_RTC);
  401d0e:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
  401d12:	47a0      	blx	r4
	write_SDA_RTC(1);
  401d14:	2001      	movs	r0, #1
  401d16:	47a8      	blx	r5
	return success;
  401d18:	4646      	mov	r6, r8
  401d1a:	e7d5      	b.n	401cc8 <read_bytes_RTC+0x10>
	for(index = 0; index < bytes; index++)
  401d1c:	f04f 0800 	mov.w	r8, #0
  401d20:	e7e8      	b.n	401cf4 <read_bytes_RTC+0x3c>
  401d22:	bf00      	nop
  401d24:	00401a99 	.word	0x00401a99
  401d28:	00401b05 	.word	0x00401b05
  401d2c:	00401bf9 	.word	0x00401bf9
  401d30:	2040008d 	.word	0x2040008d
  401d34:	00401a35 	.word	0x00401a35
  401d38:	004019fd 	.word	0x004019fd

00401d3c <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401d3c:	2801      	cmp	r0, #1
  401d3e:	d901      	bls.n	401d44 <mem_test_unit_ready+0x8>
  401d40:	2001      	movs	r0, #1
  401d42:	4770      	bx	lr
{
  401d44:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401d46:	0140      	lsls	r0, r0, #5
  401d48:	4b01      	ldr	r3, [pc, #4]	; (401d50 <mem_test_unit_ready+0x14>)
  401d4a:	581b      	ldr	r3, [r3, r0]
  401d4c:	4798      	blx	r3
  401d4e:	bd08      	pop	{r3, pc}
  401d50:	0040e59c 	.word	0x0040e59c

00401d54 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401d54:	2801      	cmp	r0, #1
  401d56:	d901      	bls.n	401d5c <mem_read_capacity+0x8>
  401d58:	2001      	movs	r0, #1
  401d5a:	4770      	bx	lr
{
  401d5c:	b508      	push	{r3, lr}
  401d5e:	4603      	mov	r3, r0
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401d60:	4803      	ldr	r0, [pc, #12]	; (401d70 <mem_read_capacity+0x1c>)
  401d62:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401d66:	6843      	ldr	r3, [r0, #4]
  401d68:	4608      	mov	r0, r1
  401d6a:	4798      	blx	r3
  401d6c:	bd08      	pop	{r3, pc}
  401d6e:	bf00      	nop
  401d70:	0040e59c 	.word	0x0040e59c

00401d74 <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  401d74:	2801      	cmp	r0, #1
  401d76:	bf8c      	ite	hi
  401d78:	2000      	movhi	r0, #0
  401d7a:	2001      	movls	r0, #1
  401d7c:	4770      	bx	lr
	...

00401d80 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401d80:	2801      	cmp	r0, #1
  401d82:	d901      	bls.n	401d88 <mem_wr_protect+0x8>
  401d84:	2001      	movs	r0, #1
  401d86:	4770      	bx	lr
{
  401d88:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401d8a:	4b03      	ldr	r3, [pc, #12]	; (401d98 <mem_wr_protect+0x18>)
  401d8c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  401d90:	68c3      	ldr	r3, [r0, #12]
  401d92:	4798      	blx	r3
  401d94:	bd08      	pop	{r3, pc}
  401d96:	bf00      	nop
  401d98:	0040e59c 	.word	0x0040e59c

00401d9c <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  401d9c:	2801      	cmp	r0, #1
  401d9e:	d901      	bls.n	401da4 <memory_2_ram+0x8>
  401da0:	2001      	movs	r0, #1
  401da2:	4770      	bx	lr
{
  401da4:	b510      	push	{r4, lr}
  401da6:	460c      	mov	r4, r1
  401da8:	4603      	mov	r3, r0
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  401daa:	4804      	ldr	r0, [pc, #16]	; (401dbc <memory_2_ram+0x20>)
  401dac:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401db0:	6943      	ldr	r3, [r0, #20]
  401db2:	4611      	mov	r1, r2
  401db4:	4620      	mov	r0, r4
  401db6:	4798      	blx	r3
  401db8:	bd10      	pop	{r4, pc}
  401dba:	bf00      	nop
  401dbc:	0040e59c 	.word	0x0040e59c

00401dc0 <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  401dc0:	2801      	cmp	r0, #1
  401dc2:	d901      	bls.n	401dc8 <ram_2_memory+0x8>
  401dc4:	2001      	movs	r0, #1
  401dc6:	4770      	bx	lr
{
  401dc8:	b510      	push	{r4, lr}
  401dca:	460c      	mov	r4, r1
  401dcc:	4603      	mov	r3, r0
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  401dce:	4804      	ldr	r0, [pc, #16]	; (401de0 <ram_2_memory+0x20>)
  401dd0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401dd4:	6983      	ldr	r3, [r0, #24]
  401dd6:	4611      	mov	r1, r2
  401dd8:	4620      	mov	r0, r4
  401dda:	4798      	blx	r3
  401ddc:	bd10      	pop	{r4, pc}
  401dde:	bf00      	nop
  401de0:	0040e59c 	.word	0x0040e59c

00401de4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401de8:	b980      	cbnz	r0, 401e0c <_read+0x28>
  401dea:	460c      	mov	r4, r1
  401dec:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  401dee:	2a00      	cmp	r2, #0
  401df0:	dd0f      	ble.n	401e12 <_read+0x2e>
  401df2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  401df4:	4e08      	ldr	r6, [pc, #32]	; (401e18 <_read+0x34>)
  401df6:	4d09      	ldr	r5, [pc, #36]	; (401e1c <_read+0x38>)
  401df8:	6830      	ldr	r0, [r6, #0]
  401dfa:	4621      	mov	r1, r4
  401dfc:	682b      	ldr	r3, [r5, #0]
  401dfe:	4798      	blx	r3
		ptr++;
  401e00:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  401e02:	42bc      	cmp	r4, r7
  401e04:	d1f8      	bne.n	401df8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  401e06:	4640      	mov	r0, r8
  401e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401e0c:	f04f 38ff 	mov.w	r8, #4294967295
  401e10:	e7f9      	b.n	401e06 <_read+0x22>
	for (; len > 0; --len) {
  401e12:	4680      	mov	r8, r0
  401e14:	e7f7      	b.n	401e06 <_read+0x22>
  401e16:	bf00      	nop
  401e18:	20400f04 	.word	0x20400f04
  401e1c:	20400efc 	.word	0x20400efc

00401e20 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401e20:	3801      	subs	r0, #1
  401e22:	2802      	cmp	r0, #2
  401e24:	d815      	bhi.n	401e52 <_write+0x32>
{
  401e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e2a:	460e      	mov	r6, r1
  401e2c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  401e2e:	b19a      	cbz	r2, 401e58 <_write+0x38>
  401e30:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401e32:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401e6c <_write+0x4c>
  401e36:	4f0c      	ldr	r7, [pc, #48]	; (401e68 <_write+0x48>)
  401e38:	f8d8 0000 	ldr.w	r0, [r8]
  401e3c:	f815 1b01 	ldrb.w	r1, [r5], #1
  401e40:	683b      	ldr	r3, [r7, #0]
  401e42:	4798      	blx	r3
  401e44:	2800      	cmp	r0, #0
  401e46:	db0a      	blt.n	401e5e <_write+0x3e>
  401e48:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  401e4a:	3c01      	subs	r4, #1
  401e4c:	d1f4      	bne.n	401e38 <_write+0x18>
  401e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401e52:	f04f 30ff 	mov.w	r0, #4294967295
  401e56:	4770      	bx	lr
	for (; len != 0; --len) {
  401e58:	4610      	mov	r0, r2
  401e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  401e5e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401e66:	bf00      	nop
  401e68:	20400f00 	.word	0x20400f00
  401e6c:	20400f04 	.word	0x20400f04

00401e70 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  401e70:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  401e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401e76:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401e78:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401e7a:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401e7c:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401e7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401e80:	2680      	movs	r6, #128	; 0x80
  401e82:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  401e84:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401e86:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401e88:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401e8a:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  401e8c:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  401e8e:	2200      	movs	r2, #0
  401e90:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401e92:	2205      	movs	r2, #5
  401e94:	601a      	str	r2, [r3, #0]
}
  401e96:	bc70      	pop	{r4, r5, r6}
  401e98:	4770      	bx	lr
	...

00401e9c <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  401e9c:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  401e9e:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  401ea2:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  401ea4:	f411 7f80 	tst.w	r1, #256	; 0x100
  401ea8:	d004      	beq.n	401eb4 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  401eaa:	f411 6f00 	tst.w	r1, #2048	; 0x800
  401eae:	d00e      	beq.n	401ece <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  401eb0:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  401eb4:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  401eb8:	bf18      	it	ne
  401eba:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  401ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401ec2:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  401ec4:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  401ec6:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  401ec8:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  401ecc:	e00d      	b.n	401eea <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  401ece:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  401ed2:	bf14      	ite	ne
  401ed4:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  401ed8:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  401edc:	e7ea      	b.n	401eb4 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401ede:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  401ee2:	d10c      	bne.n	401efe <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  401ee4:	f013 0f01 	tst.w	r3, #1
  401ee8:	d10d      	bne.n	401f06 <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  401eea:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  401eec:	2a00      	cmp	r2, #0
  401eee:	d0f6      	beq.n	401ede <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401ef0:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  401ef4:	d0f6      	beq.n	401ee4 <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  401ef6:	4b10      	ldr	r3, [pc, #64]	; (401f38 <hsmci_send_cmd_execute+0x9c>)
  401ef8:	4798      	blx	r3
				return false;
  401efa:	2000      	movs	r0, #0
  401efc:	bd08      	pop	{r3, pc}
				hsmci_reset();
  401efe:	4b0e      	ldr	r3, [pc, #56]	; (401f38 <hsmci_send_cmd_execute+0x9c>)
  401f00:	4798      	blx	r3
				return false;
  401f02:	2000      	movs	r0, #0
  401f04:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  401f06:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  401f0a:	d103      	bne.n	401f14 <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  401f0c:	2001      	movs	r0, #1
  401f0e:	bd08      	pop	{r3, pc}
	return true;
  401f10:	2001      	movs	r0, #1
  401f12:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  401f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401f1a:	f04f 32ff 	mov.w	r2, #4294967295
  401f1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  401f22:	f003 0330 	and.w	r3, r3, #48	; 0x30
  401f26:	2b20      	cmp	r3, #32
  401f28:	d0f2      	beq.n	401f10 <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  401f2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  401f2c:	3a01      	subs	r2, #1
  401f2e:	d1f8      	bne.n	401f22 <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  401f30:	4b01      	ldr	r3, [pc, #4]	; (401f38 <hsmci_send_cmd_execute+0x9c>)
  401f32:	4798      	blx	r3
			return false;
  401f34:	2000      	movs	r0, #0
  401f36:	bd08      	pop	{r3, pc}
  401f38:	00401e71 	.word	0x00401e71

00401f3c <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  401f3c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  401f3e:	2012      	movs	r0, #18
  401f40:	4c08      	ldr	r4, [pc, #32]	; (401f64 <hsmci_init+0x28>)
  401f42:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  401f44:	203a      	movs	r0, #58	; 0x3a
  401f46:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401f4c:	2272      	movs	r2, #114	; 0x72
  401f4e:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  401f50:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  401f52:	2211      	movs	r2, #17
  401f54:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  401f56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  401f5a:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401f5c:	2205      	movs	r2, #5
  401f5e:	601a      	str	r2, [r3, #0]
  401f60:	bd10      	pop	{r4, pc}
  401f62:	bf00      	nop
  401f64:	00403575 	.word	0x00403575

00401f68 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  401f68:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  401f6a:	bf0c      	ite	eq
  401f6c:	2004      	moveq	r0, #4
  401f6e:	2000      	movne	r0, #0
  401f70:	4770      	bx	lr

00401f72 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  401f72:	2001      	movs	r0, #1
  401f74:	4770      	bx	lr
	...

00401f78 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  401f78:	b37b      	cbz	r3, 401fda <hsmci_select_device+0x62>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401f7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401f7e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401f84:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  401f86:	4b2b      	ldr	r3, [pc, #172]	; (402034 <hsmci_select_device+0xbc>)
  401f88:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  401f8c:	d337      	bcc.n	401ffe <hsmci_select_device+0x86>
{
  401f8e:	b410      	push	{r4}
		div = (mck / speed) - 2;
  401f90:	4829      	ldr	r0, [pc, #164]	; (402038 <hsmci_select_device+0xc0>)
  401f92:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  401f96:	fb01 0113 	mls	r1, r1, r3, r0
  401f9a:	bb29      	cbnz	r1, 401fe8 <hsmci_select_device+0x70>
		div = (mck / speed) - 2;
  401f9c:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401f9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401fa2:	6848      	ldr	r0, [r1, #4]
  401fa4:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  401fa8:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401faa:	684c      	ldr	r4, [r1, #4]
  401fac:	f3c3 0047 	ubfx	r0, r3, #1, #8
  401fb0:	4320      	orrs	r0, r4
  401fb2:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  401fb4:	f013 0f01 	tst.w	r3, #1
  401fb8:	d018      	beq.n	401fec <hsmci_select_device+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  401fba:	684b      	ldr	r3, [r1, #4]
  401fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401fc0:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  401fc2:	2a04      	cmp	r2, #4
  401fc4:	d019      	beq.n	401ffa <hsmci_select_device+0x82>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  401fc6:	2a08      	cmp	r2, #8
  401fc8:	bf0c      	ite	eq
  401fca:	22c0      	moveq	r2, #192	; 0xc0
  401fcc:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  401fce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401fd2:	60da      	str	r2, [r3, #12]
}
  401fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  401fd8:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  401fda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401fde:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401fe4:	6543      	str	r3, [r0, #84]	; 0x54
  401fe6:	e7ce      	b.n	401f86 <hsmci_select_device+0xe>
			div++;
  401fe8:	3b01      	subs	r3, #1
  401fea:	e7d8      	b.n	401f9e <hsmci_select_device+0x26>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  401fec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401ff0:	684b      	ldr	r3, [r1, #4]
  401ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401ff6:	604b      	str	r3, [r1, #4]
  401ff8:	e7e3      	b.n	401fc2 <hsmci_select_device+0x4a>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401ffa:	2280      	movs	r2, #128	; 0x80
  401ffc:	e7e7      	b.n	401fce <hsmci_select_device+0x56>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402002:	6859      	ldr	r1, [r3, #4]
  402004:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  402008:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  40200a:	6859      	ldr	r1, [r3, #4]
  40200c:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  40200e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402012:	684b      	ldr	r3, [r1, #4]
  402014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  402018:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  40201a:	2a04      	cmp	r2, #4
  40201c:	d007      	beq.n	40202e <hsmci_select_device+0xb6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  40201e:	2a08      	cmp	r2, #8
  402020:	bf0c      	ite	eq
  402022:	22c0      	moveq	r2, #192	; 0xc0
  402024:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  402026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40202a:	60da      	str	r2, [r3, #12]
  40202c:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  40202e:	2280      	movs	r2, #128	; 0x80
  402030:	e7f9      	b.n	402026 <hsmci_select_device+0xae>
  402032:	bf00      	nop
  402034:	08f0d17f 	.word	0x08f0d17f
  402038:	08f0d180 	.word	0x08f0d180

0040203c <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  40203c:	4770      	bx	lr

0040203e <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40203e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402042:	685a      	ldr	r2, [r3, #4]
  402044:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  402048:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  40204a:	2200      	movs	r2, #0
  40204c:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  40204e:	f44f 6210 	mov.w	r2, #2304	; 0x900
  402052:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  402054:	461a      	mov	r2, r3
  402056:	6c13      	ldr	r3, [r2, #64]	; 0x40
  402058:	f013 0f01 	tst.w	r3, #1
  40205c:	d0fb      	beq.n	402056 <hsmci_send_clock+0x18>
}
  40205e:	4770      	bx	lr

00402060 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  402060:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  402062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402066:	685a      	ldr	r2, [r3, #4]
  402068:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  40206c:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  40206e:	2400      	movs	r4, #0
  402070:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  402072:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  402074:	460a      	mov	r2, r1
  402076:	4601      	mov	r1, r0
  402078:	4620      	mov	r0, r4
  40207a:	4b01      	ldr	r3, [pc, #4]	; (402080 <hsmci_send_cmd+0x20>)
  40207c:	4798      	blx	r3
}
  40207e:	bd10      	pop	{r4, pc}
  402080:	00401e9d 	.word	0x00401e9d

00402084 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  402084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402088:	6a18      	ldr	r0, [r3, #32]
}
  40208a:	4770      	bx	lr

0040208c <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  40208c:	b410      	push	{r4}
  40208e:	1d03      	adds	r3, r0, #4
  402090:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  402092:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  402096:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  402098:	0e11      	lsrs	r1, r2, #24
  40209a:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  40209e:	0c11      	lsrs	r1, r2, #16
  4020a0:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  4020a4:	0a11      	lsrs	r1, r2, #8
  4020a6:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  4020aa:	f803 2c01 	strb.w	r2, [r3, #-1]
  4020ae:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  4020b0:	4283      	cmp	r3, r0
  4020b2:	d1f0      	bne.n	402096 <hsmci_get_response_128+0xa>
		response++;
	}
}
  4020b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4020b8:	4770      	bx	lr
	...

004020bc <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4020bc:	b570      	push	{r4, r5, r6, lr}
  4020be:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  4020c2:	b384      	cbz	r4, 402126 <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  4020c4:	f44f 7580 	mov.w	r5, #256	; 0x100
  4020c8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4020cc:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  4020ce:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4020d2:	686c      	ldr	r4, [r5, #4]
  4020d4:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  4020d8:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  4020da:	f012 0f03 	tst.w	r2, #3
  4020de:	d027      	beq.n	402130 <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4020e0:	686c      	ldr	r4, [r5, #4]
  4020e2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4020e6:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  4020e8:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  4020ec:	2c00      	cmp	r4, #0
  4020ee:	bf14      	ite	ne
  4020f0:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  4020f4:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  4020f8:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  4020fc:	d11f      	bne.n	40213e <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  4020fe:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  402102:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  402106:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  402108:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  40210c:	d12b      	bne.n	402166 <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  40210e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  402112:	d12b      	bne.n	40216c <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  402114:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  402118:	d118      	bne.n	40214c <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  40211a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  40211e:	bf18      	it	ne
  402120:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  402124:	e012      	b.n	40214c <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  402126:	2500      	movs	r5, #0
  402128:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  40212c:	6525      	str	r5, [r4, #80]	; 0x50
  40212e:	e7ce      	b.n	4020ce <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  402130:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  402134:	686c      	ldr	r4, [r5, #4]
  402136:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  40213a:	606c      	str	r4, [r5, #4]
  40213c:	e7d4      	b.n	4020e8 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  40213e:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  402142:	f3c2 0508 	ubfx	r5, r2, #0, #9
  402146:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  40214a:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  40214c:	2600      	movs	r6, #0
  40214e:	4d09      	ldr	r5, [pc, #36]	; (402174 <hsmci_adtc_start+0xb8>)
  402150:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  402152:	4d09      	ldr	r5, [pc, #36]	; (402178 <hsmci_adtc_start+0xbc>)
  402154:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  402156:	4a09      	ldr	r2, [pc, #36]	; (40217c <hsmci_adtc_start+0xc0>)
  402158:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  40215a:	460a      	mov	r2, r1
  40215c:	4601      	mov	r1, r0
  40215e:	4620      	mov	r0, r4
  402160:	4b07      	ldr	r3, [pc, #28]	; (402180 <hsmci_adtc_start+0xc4>)
  402162:	4798      	blx	r3
}
  402164:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  402166:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  40216a:	e7ef      	b.n	40214c <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  40216c:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  402170:	e7ec      	b.n	40214c <hsmci_adtc_start+0x90>
  402172:	bf00      	nop
  402174:	20400b90 	.word	0x20400b90
  402178:	20400b8a 	.word	0x20400b8a
  40217c:	20400b8c 	.word	0x20400b8c
  402180:	00401e9d 	.word	0x00401e9d

00402184 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  402184:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  402186:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40218a:	4a16      	ldr	r2, [pc, #88]	; (4021e4 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  40218c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40218e:	4213      	tst	r3, r2
  402190:	d11d      	bne.n	4021ce <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  402192:	f013 0f02 	tst.w	r3, #2
  402196:	d0f9      	beq.n	40218c <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  402198:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40219e:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  4021a0:	4a11      	ldr	r2, [pc, #68]	; (4021e8 <hsmci_read_word+0x64>)
  4021a2:	6813      	ldr	r3, [r2, #0]
  4021a4:	3304      	adds	r3, #4
  4021a6:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4021a8:	4a10      	ldr	r2, [pc, #64]	; (4021ec <hsmci_read_word+0x68>)
  4021aa:	8811      	ldrh	r1, [r2, #0]
  4021ac:	4a10      	ldr	r2, [pc, #64]	; (4021f0 <hsmci_read_word+0x6c>)
  4021ae:	8812      	ldrh	r2, [r2, #0]
  4021b0:	fb02 f201 	mul.w	r2, r2, r1
  4021b4:	4293      	cmp	r3, r2
  4021b6:	d312      	bcc.n	4021de <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4021b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4021bc:	4a09      	ldr	r2, [pc, #36]	; (4021e4 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  4021be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4021c0:	4213      	tst	r3, r2
  4021c2:	d108      	bne.n	4021d6 <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4021c4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4021c8:	d0f9      	beq.n	4021be <hsmci_read_word+0x3a>
	return true;
  4021ca:	2001      	movs	r0, #1
  4021cc:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4021ce:	4b09      	ldr	r3, [pc, #36]	; (4021f4 <hsmci_read_word+0x70>)
  4021d0:	4798      	blx	r3
			return false;
  4021d2:	2000      	movs	r0, #0
  4021d4:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4021d6:	4b07      	ldr	r3, [pc, #28]	; (4021f4 <hsmci_read_word+0x70>)
  4021d8:	4798      	blx	r3
			return false;
  4021da:	2000      	movs	r0, #0
  4021dc:	bd08      	pop	{r3, pc}
		return true;
  4021de:	2001      	movs	r0, #1
}
  4021e0:	bd08      	pop	{r3, pc}
  4021e2:	bf00      	nop
  4021e4:	c0600000 	.word	0xc0600000
  4021e8:	20400b90 	.word	0x20400b90
  4021ec:	20400b8a 	.word	0x20400b8a
  4021f0:	20400b8c 	.word	0x20400b8c
  4021f4:	00401e71 	.word	0x00401e71

004021f8 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  4021f8:	b530      	push	{r4, r5, lr}
  4021fa:	b089      	sub	sp, #36	; 0x24
  4021fc:	4605      	mov	r5, r0
  4021fe:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  402200:	2220      	movs	r2, #32
  402202:	2100      	movs	r1, #0
  402204:	4668      	mov	r0, sp
  402206:	4b18      	ldr	r3, [pc, #96]	; (402268 <hsmci_start_read_blocks+0x70>)
  402208:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40220a:	2201      	movs	r2, #1
  40220c:	4b17      	ldr	r3, [pc, #92]	; (40226c <hsmci_start_read_blocks+0x74>)
  40220e:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  402210:	4b17      	ldr	r3, [pc, #92]	; (402270 <hsmci_start_read_blocks+0x78>)
  402212:	881b      	ldrh	r3, [r3, #0]
  402214:	fb04 f403 	mul.w	r4, r4, r3

	if((uint32_t)dest & 3) {
  402218:	f015 0f03 	tst.w	r5, #3
  40221c:	d11a      	bne.n	402254 <hsmci_start_read_blocks+0x5c>
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40221e:	4b15      	ldr	r3, [pc, #84]	; (402274 <hsmci_start_read_blocks+0x7c>)
  402220:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF1
						| XDMAC_CC_DIF_AHB_IF0
						| XDMAC_CC_SAM_FIXED_AM
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  402222:	08a3      	lsrs	r3, r4, #2
  402224:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  402226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40222a:	6853      	ldr	r3, [r2, #4]
  40222c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402230:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  402232:	4b11      	ldr	r3, [pc, #68]	; (402278 <hsmci_start_read_blocks+0x80>)
  402234:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  402236:	9502      	str	r5, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  402238:	4d0c      	ldr	r5, [pc, #48]	; (40226c <hsmci_start_read_blocks+0x74>)
  40223a:	466a      	mov	r2, sp
  40223c:	2100      	movs	r1, #0
  40223e:	4628      	mov	r0, r5
  402240:	4b0e      	ldr	r3, [pc, #56]	; (40227c <hsmci_start_read_blocks+0x84>)
  402242:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  402244:	2001      	movs	r0, #1
  402246:	61e8      	str	r0, [r5, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  402248:	4a0d      	ldr	r2, [pc, #52]	; (402280 <hsmci_start_read_blocks+0x88>)
  40224a:	6813      	ldr	r3, [r2, #0]
  40224c:	441c      	add	r4, r3
  40224e:	6014      	str	r4, [r2, #0]
	return true;
}
  402250:	b009      	add	sp, #36	; 0x24
  402252:	bd30      	pop	{r4, r5, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  402254:	4b0b      	ldr	r3, [pc, #44]	; (402284 <hsmci_start_read_blocks+0x8c>)
  402256:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  402258:	9400      	str	r4, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  40225a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40225e:	6853      	ldr	r3, [r2, #4]
  402260:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402264:	6053      	str	r3, [r2, #4]
  402266:	e7e4      	b.n	402232 <hsmci_start_read_blocks+0x3a>
  402268:	0040b7cd 	.word	0x0040b7cd
  40226c:	40078000 	.word	0x40078000
  402270:	20400b8a 	.word	0x20400b8a
  402274:	00043001 	.word	0x00043001
  402278:	40000200 	.word	0x40000200
  40227c:	004046ad 	.word	0x004046ad
  402280:	20400b90 	.word	0x20400b90
  402284:	00042001 	.word	0x00042001

00402288 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  402288:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40228a:	4b12      	ldr	r3, [pc, #72]	; (4022d4 <hsmci_wait_end_of_read_blocks+0x4c>)
  40228c:	881b      	ldrh	r3, [r3, #0]
  40228e:	4a12      	ldr	r2, [pc, #72]	; (4022d8 <hsmci_wait_end_of_read_blocks+0x50>)
  402290:	8812      	ldrh	r2, [r2, #0]
  402292:	fb02 f203 	mul.w	r2, r2, r3
  402296:	4b11      	ldr	r3, [pc, #68]	; (4022dc <hsmci_wait_end_of_read_blocks+0x54>)
  402298:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  40229a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40229e:	4910      	ldr	r1, [pc, #64]	; (4022e0 <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4022a0:	4e10      	ldr	r6, [pc, #64]	; (4022e4 <hsmci_wait_end_of_read_blocks+0x5c>)
  4022a2:	e009      	b.n	4022b8 <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  4022a4:	4b10      	ldr	r3, [pc, #64]	; (4022e8 <hsmci_wait_end_of_read_blocks+0x60>)
  4022a6:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4022a8:	2201      	movs	r2, #1
  4022aa:	4b0e      	ldr	r3, [pc, #56]	; (4022e4 <hsmci_wait_end_of_read_blocks+0x5c>)
  4022ac:	621a      	str	r2, [r3, #32]
			return false;
  4022ae:	2000      	movs	r0, #0
  4022b0:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4022b2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4022b6:	d10a      	bne.n	4022ce <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  4022b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4022ba:	420b      	tst	r3, r1
  4022bc:	d1f2      	bne.n	4022a4 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4022be:	42a2      	cmp	r2, r4
  4022c0:	d9f7      	bls.n	4022b2 <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4022c2:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  4022c4:	f015 0f01 	tst.w	r5, #1
  4022c8:	d0f3      	beq.n	4022b2 <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  4022ca:	2001      	movs	r0, #1
	return true;
}
  4022cc:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  4022ce:	2001      	movs	r0, #1
  4022d0:	bd70      	pop	{r4, r5, r6, pc}
  4022d2:	bf00      	nop
  4022d4:	20400b8a 	.word	0x20400b8a
  4022d8:	20400b8c 	.word	0x20400b8c
  4022dc:	20400b90 	.word	0x20400b90
  4022e0:	c0600000 	.word	0xc0600000
  4022e4:	40078000 	.word	0x40078000
  4022e8:	00401e71 	.word	0x00401e71

004022ec <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  4022ec:	b530      	push	{r4, r5, lr}
  4022ee:	b089      	sub	sp, #36	; 0x24
  4022f0:	4605      	mov	r5, r0
  4022f2:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  4022f4:	2220      	movs	r2, #32
  4022f6:	2100      	movs	r1, #0
  4022f8:	4668      	mov	r0, sp
  4022fa:	4b18      	ldr	r3, [pc, #96]	; (40235c <hsmci_start_write_blocks+0x70>)
  4022fc:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4022fe:	2201      	movs	r2, #1
  402300:	4b17      	ldr	r3, [pc, #92]	; (402360 <hsmci_start_write_blocks+0x74>)
  402302:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  402304:	4b17      	ldr	r3, [pc, #92]	; (402364 <hsmci_start_write_blocks+0x78>)
  402306:	881b      	ldrh	r3, [r3, #0]
  402308:	fb04 f403 	mul.w	r4, r4, r3

	if((uint32_t)src & 3) {
  40230c:	f015 0f03 	tst.w	r5, #3
  402310:	d11a      	bne.n	402348 <hsmci_start_write_blocks+0x5c>
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  402312:	4b15      	ldr	r3, [pc, #84]	; (402368 <hsmci_start_write_blocks+0x7c>)
  402314:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF0
						| XDMAC_CC_DIF_AHB_IF1
						| XDMAC_CC_SAM_INCREMENTED_AM
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  402316:	08a3      	lsrs	r3, r4, #2
  402318:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  40231a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40231e:	6853      	ldr	r3, [r2, #4]
  402320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402324:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)src;
  402326:	9501      	str	r5, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  402328:	4b10      	ldr	r3, [pc, #64]	; (40236c <hsmci_start_write_blocks+0x80>)
  40232a:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  40232c:	4d0c      	ldr	r5, [pc, #48]	; (402360 <hsmci_start_write_blocks+0x74>)
  40232e:	466a      	mov	r2, sp
  402330:	2100      	movs	r1, #0
  402332:	4628      	mov	r0, r5
  402334:	4b0e      	ldr	r3, [pc, #56]	; (402370 <hsmci_start_write_blocks+0x84>)
  402336:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  402338:	2001      	movs	r0, #1
  40233a:	61e8      	str	r0, [r5, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  40233c:	4a0d      	ldr	r2, [pc, #52]	; (402374 <hsmci_start_write_blocks+0x88>)
  40233e:	6813      	ldr	r3, [r2, #0]
  402340:	441c      	add	r4, r3
  402342:	6014      	str	r4, [r2, #0]
	return true;
}
  402344:	b009      	add	sp, #36	; 0x24
  402346:	bd30      	pop	{r4, r5, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  402348:	4b0b      	ldr	r3, [pc, #44]	; (402378 <hsmci_start_write_blocks+0x8c>)
  40234a:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  40234c:	9400      	str	r4, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  40234e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402352:	6853      	ldr	r3, [r2, #4]
  402354:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402358:	6053      	str	r3, [r2, #4]
  40235a:	e7e4      	b.n	402326 <hsmci_start_write_blocks+0x3a>
  40235c:	0040b7cd 	.word	0x0040b7cd
  402360:	40078000 	.word	0x40078000
  402364:	20400b8a 	.word	0x20400b8a
  402368:	00015011 	.word	0x00015011
  40236c:	40000200 	.word	0x40000200
  402370:	004046ad 	.word	0x004046ad
  402374:	20400b90 	.word	0x20400b90
  402378:	00014011 	.word	0x00014011

0040237c <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  40237c:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40237e:	4b12      	ldr	r3, [pc, #72]	; (4023c8 <hsmci_wait_end_of_write_blocks+0x4c>)
  402380:	881b      	ldrh	r3, [r3, #0]
  402382:	4a12      	ldr	r2, [pc, #72]	; (4023cc <hsmci_wait_end_of_write_blocks+0x50>)
  402384:	8812      	ldrh	r2, [r2, #0]
  402386:	fb02 f203 	mul.w	r2, r2, r3
  40238a:	4b11      	ldr	r3, [pc, #68]	; (4023d0 <hsmci_wait_end_of_write_blocks+0x54>)
  40238c:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  40238e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  402392:	4910      	ldr	r1, [pc, #64]	; (4023d4 <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  402394:	4e10      	ldr	r6, [pc, #64]	; (4023d8 <hsmci_wait_end_of_write_blocks+0x5c>)
  402396:	e009      	b.n	4023ac <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  402398:	4b10      	ldr	r3, [pc, #64]	; (4023dc <hsmci_wait_end_of_write_blocks+0x60>)
  40239a:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40239c:	2201      	movs	r2, #1
  40239e:	4b0e      	ldr	r3, [pc, #56]	; (4023d8 <hsmci_wait_end_of_write_blocks+0x5c>)
  4023a0:	621a      	str	r2, [r3, #32]
			return false;
  4023a2:	2000      	movs	r0, #0
  4023a4:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4023a6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4023aa:	d10a      	bne.n	4023c2 <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  4023ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4023ae:	420b      	tst	r3, r1
  4023b0:	d1f2      	bne.n	402398 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4023b2:	42a2      	cmp	r2, r4
  4023b4:	d9f7      	bls.n	4023a6 <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4023b6:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  4023b8:	f015 0f01 	tst.w	r5, #1
  4023bc:	d0f3      	beq.n	4023a6 <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  4023be:	2001      	movs	r0, #1

	return true;
}
  4023c0:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  4023c2:	2001      	movs	r0, #1
  4023c4:	bd70      	pop	{r4, r5, r6, pc}
  4023c6:	bf00      	nop
  4023c8:	20400b8a 	.word	0x20400b8a
  4023cc:	20400b8c 	.word	0x20400b8c
  4023d0:	20400b90 	.word	0x20400b90
  4023d4:	c0600000 	.word	0xc0600000
  4023d8:	40078000 	.word	0x40078000
  4023dc:	00401e71 	.word	0x00401e71

004023e0 <isi_init>:
 *
 * \param p_isi  Pointer to a ISI instance.
 * \param isi_cfg   Configuration for the ISI
 */
void isi_init(Isi *p_isi, struct isi_config_t *isi_cfg)
{
  4023e0:	b410      	push	{r4}
	uint32_t reg = 0;

	if(isi_cfg->hpol) {
  4023e2:	780b      	ldrb	r3, [r1, #0]
		reg |= ISI_CFG1_HSYNC_POL;
  4023e4:	2b00      	cmp	r3, #0
  4023e6:	bf0c      	ite	eq
  4023e8:	2200      	moveq	r2, #0
  4023ea:	2204      	movne	r2, #4
	}
	if(isi_cfg->vpol) {
  4023ec:	784b      	ldrb	r3, [r1, #1]
  4023ee:	b10b      	cbz	r3, 4023f4 <isi_init+0x14>
		reg |= ISI_CFG1_VSYNC_POL;
  4023f0:	f042 0208 	orr.w	r2, r2, #8
	}
	if(isi_cfg->pck_pol) {
  4023f4:	788b      	ldrb	r3, [r1, #2]
  4023f6:	b10b      	cbz	r3, 4023fc <isi_init+0x1c>
		reg |= ISI_CFG1_PIXCLK_POL;
  4023f8:	f042 0210 	orr.w	r2, r2, #16
	}
	if(isi_cfg->emb_sync) {
  4023fc:	78cb      	ldrb	r3, [r1, #3]
  4023fe:	b10b      	cbz	r3, 402404 <isi_init+0x24>
		reg |= ISI_CFG1_EMB_SYNC;
  402400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	}
	if(isi_cfg->crc_sync) {
  402404:	790b      	ldrb	r3, [r1, #4]
  402406:	b10b      	cbz	r3, 40240c <isi_init+0x2c>
		reg |= ISI_CFG1_CRC_SYNC;
  402408:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  40240c:	794b      	ldrb	r3, [r1, #5]
  40240e:	035b      	lsls	r3, r3, #13
  402410:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
  402414:	798c      	ldrb	r4, [r1, #6]
  402416:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		| ISI_CFG1_SFD(isi_cfg->sfd);
  40241a:	79cc      	ldrb	r4, [r1, #7]
  40241c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  402420:	4313      	orrs	r3, r2
	p_isi->ISI_CFG1 = reg;
  402422:	6003      	str	r3, [r0, #0]
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  402424:	4b18      	ldr	r3, [pc, #96]	; (402488 <isi_init+0xa8>)
  402426:	685a      	ldr	r2, [r3, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  402428:	685b      	ldr	r3, [r3, #4]
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  40242a:	0ed2      	lsrs	r2, r2, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40242c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
  402430:	ea43 7302 	orr.w	r3, r3, r2, lsl #28

	reg = _isi_get_CFG2_workaround();
	switch(isi_cfg->image_fmt) {
  402434:	7a0a      	ldrb	r2, [r1, #8]
  402436:	2a04      	cmp	r2, #4
  402438:	d806      	bhi.n	402448 <isi_init+0x68>
  40243a:	e8df f002 	tbb	[pc, r2]
  40243e:	1403      	.short	0x1403
  402440:	1c17      	.short	0x1c17
  402442:	1f          	.byte	0x1f
  402443:	00          	.byte	0x00
		case ISI_INPUT_YUV:
			reg &= ~ISI_CFG2_COL_SPACE;
  402444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  402448:	68ca      	ldr	r2, [r1, #12]
  40244a:	1e54      	subs	r4, r2, #1
  40244c:	4a0f      	ldr	r2, [pc, #60]	; (40248c <isi_init+0xac>)
  40244e:	ea02 4204 	and.w	r2, r2, r4, lsl #16
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  402452:	6909      	ldr	r1, [r1, #16]
  402454:	3901      	subs	r1, #1
  402456:	f3c1 010a 	ubfx	r1, r1, #0, #11
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  40245a:	430a      	orrs	r2, r1
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  40245c:	4313      	orrs	r3, r2
	p_isi->ISI_CFG2 = reg;
  40245e:	6043      	str	r3, [r0, #4]
}
  402460:	f85d 4b04 	ldr.w	r4, [sp], #4
  402464:	4770      	bx	lr
			reg |= ISI_CFG2_RGB_MODE;
  402466:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
			break;
  40246a:	e7ed      	b.n	402448 <isi_init+0x68>
			reg &= ~ISI_CFG2_RGB_MODE;
  40246c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			break;
  402474:	e7e8      	b.n	402448 <isi_init+0x68>
			reg |= ISI_CFG2_GRAYSCALE;
  402476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
			break;
  40247a:	e7e5      	b.n	402448 <isi_init+0x68>
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
  40247c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
  402480:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
			break;
  402484:	e7e0      	b.n	402448 <isi_init+0x68>
  402486:	bf00      	nop
  402488:	4004c000 	.word	0x4004c000
  40248c:	07ff0000 	.word	0x07ff0000

00402490 <isi_set_dma_codec_path>:
 * \param frame_buf_start_addr  DMA codec base address.
 */
void isi_set_dma_codec_path(Isi *p_isi, uint8_t full_mode, uint8_t discr,
		uint32_t base_buf_desc, uint32_t dma_ctrl, uint32_t frame_buf_start_addr)
{
	if(full_mode) {
  402490:	b171      	cbz	r1, 4024b0 <isi_set_dma_codec_path+0x20>
		p_isi->ISI_CFG1 |= ISI_CFG1_FULL;
  402492:	6801      	ldr	r1, [r0, #0]
  402494:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  402498:	6001      	str	r1, [r0, #0]
	} else {
		p_isi->ISI_CFG1 &= ~ISI_CFG1_FULL;
	}
	if(discr) {
  40249a:	b972      	cbnz	r2, 4024ba <isi_set_dma_codec_path+0x2a>
		p_isi->ISI_CFG1 |= ISI_CFG1_DISCR;
	} else {
		p_isi->ISI_CFG1 &= ~ISI_CFG1_DISCR;
  40249c:	6802      	ldr	r2, [r0, #0]
  40249e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4024a2:	6002      	str	r2, [r0, #0]
	}

	p_isi->ISI_DMA_C_DSCR = base_buf_desc;
  4024a4:	6583      	str	r3, [r0, #88]	; 0x58
	p_isi->ISI_DMA_C_CTRL = dma_ctrl;
  4024a6:	9b00      	ldr	r3, [sp, #0]
  4024a8:	6543      	str	r3, [r0, #84]	; 0x54
	p_isi->ISI_DMA_C_ADDR = frame_buf_start_addr;
  4024aa:	9b01      	ldr	r3, [sp, #4]
  4024ac:	6503      	str	r3, [r0, #80]	; 0x50
  4024ae:	4770      	bx	lr
		p_isi->ISI_CFG1 &= ~ISI_CFG1_FULL;
  4024b0:	6801      	ldr	r1, [r0, #0]
  4024b2:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4024b6:	6001      	str	r1, [r0, #0]
  4024b8:	e7ef      	b.n	40249a <isi_set_dma_codec_path+0xa>
		p_isi->ISI_CFG1 |= ISI_CFG1_DISCR;
  4024ba:	6802      	ldr	r2, [r0, #0]
  4024bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4024c0:	6002      	str	r2, [r0, #0]
  4024c2:	e7ef      	b.n	4024a4 <isi_set_dma_codec_path+0x14>

004024c4 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4024c4:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4024c6:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4024c8:	6884      	ldr	r4, [r0, #8]
  4024ca:	42a5      	cmp	r5, r4
  4024cc:	d003      	beq.n	4024d6 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4024ce:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4024d0:	6884      	ldr	r4, [r0, #8]
  4024d2:	42ac      	cmp	r4, r5
  4024d4:	d1fb      	bne.n	4024ce <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4024d6:	b161      	cbz	r1, 4024f2 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4024d8:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4024dc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4024e0:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4024e4:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4024e8:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4024ec:	bf18      	it	ne
  4024ee:	300c      	addne	r0, #12
  4024f0:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4024f2:	b142      	cbz	r2, 402506 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4024f4:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4024f8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4024fc:	f3c4 2003 	ubfx	r0, r4, #8, #4
  402500:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  402504:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  402506:	b143      	cbz	r3, 40251a <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402508:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40250c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402510:	f004 040f 	and.w	r4, r4, #15
  402514:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  402518:	601c      	str	r4, [r3, #0]
	}
}
  40251a:	bc30      	pop	{r4, r5}
  40251c:	4770      	bx	lr
	...

00402520 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  402520:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  402522:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  402524:	f014 0f01 	tst.w	r4, #1
  402528:	d005      	beq.n	402536 <rtc_set_time+0x16>
  40252a:	290c      	cmp	r1, #12
  40252c:	d903      	bls.n	402536 <rtc_set_time+0x16>
			ul_hour -= 12;
  40252e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  402530:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  402534:	e000      	b.n	402538 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  402536:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  402538:	4c1c      	ldr	r4, [pc, #112]	; (4025ac <rtc_set_time+0x8c>)
  40253a:	fba4 5603 	umull	r5, r6, r4, r3
  40253e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  402540:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  402544:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  402548:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40254c:	fba4 6502 	umull	r6, r5, r4, r2
  402550:	08ed      	lsrs	r5, r5, #3
  402552:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  402556:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40255a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40255e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  402562:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  402564:	fba4 4201 	umull	r4, r2, r4, r1
  402568:	08d2      	lsrs	r2, r2, #3
  40256a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40256e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402572:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  402576:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40257a:	6983      	ldr	r3, [r0, #24]
  40257c:	f013 0f04 	tst.w	r3, #4
  402580:	d0fb      	beq.n	40257a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  402582:	6803      	ldr	r3, [r0, #0]
  402584:	f043 0301 	orr.w	r3, r3, #1
  402588:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40258a:	6983      	ldr	r3, [r0, #24]
  40258c:	f013 0f01 	tst.w	r3, #1
  402590:	d0fb      	beq.n	40258a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  402592:	2301      	movs	r3, #1
  402594:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  402596:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  402598:	6803      	ldr	r3, [r0, #0]
  40259a:	f023 0301 	bic.w	r3, r3, #1
  40259e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4025a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4025a2:	f000 0001 	and.w	r0, r0, #1
  4025a6:	bcf0      	pop	{r4, r5, r6, r7}
  4025a8:	4770      	bx	lr
  4025aa:	bf00      	nop
  4025ac:	cccccccd 	.word	0xcccccccd

004025b0 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4025b0:	b4f0      	push	{r4, r5, r6, r7}
  4025b2:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4025b4:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4025b6:	68c4      	ldr	r4, [r0, #12]
  4025b8:	42a5      	cmp	r5, r4
  4025ba:	d003      	beq.n	4025c4 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  4025bc:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4025be:	68c4      	ldr	r4, [r0, #12]
  4025c0:	42ac      	cmp	r4, r5
  4025c2:	d1fb      	bne.n	4025bc <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  4025c4:	b199      	cbz	r1, 4025ee <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4025c6:	f3c4 3003 	ubfx	r0, r4, #12, #4
  4025ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4025ce:	f3c4 2703 	ubfx	r7, r4, #8, #4
  4025d2:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4025d6:	f3c4 1002 	ubfx	r0, r4, #4, #3
  4025da:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4025de:	f004 000f 	and.w	r0, r4, #15
  4025e2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4025e6:	2564      	movs	r5, #100	; 0x64
  4025e8:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  4025ec:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  4025ee:	b142      	cbz	r2, 402602 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4025f0:	f3c4 5000 	ubfx	r0, r4, #20, #1
  4025f4:	0081      	lsls	r1, r0, #2
  4025f6:	4408      	add	r0, r1
  4025f8:	f3c4 4103 	ubfx	r1, r4, #16, #4
  4025fc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  402600:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  402602:	b143      	cbz	r3, 402616 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402604:	f3c4 7201 	ubfx	r2, r4, #28, #2
  402608:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40260c:	f3c4 6103 	ubfx	r1, r4, #24, #4
  402610:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  402614:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  402616:	b116      	cbz	r6, 40261e <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  402618:	f3c4 5442 	ubfx	r4, r4, #21, #3
  40261c:	6034      	str	r4, [r6, #0]
	}
}
  40261e:	bcf0      	pop	{r4, r5, r6, r7}
  402620:	4770      	bx	lr
	...

00402624 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  402624:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402626:	4d2a      	ldr	r5, [pc, #168]	; (4026d0 <rtc_set_date+0xac>)
  402628:	fba5 4603 	umull	r4, r6, r5, r3
  40262c:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40262e:	9c03      	ldr	r4, [sp, #12]
  402630:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402632:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  402636:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40263a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40263e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  402642:	fba5 6402 	umull	r6, r4, r5, r2
  402646:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402648:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40264c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402650:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402654:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  402658:	4b1e      	ldr	r3, [pc, #120]	; (4026d4 <rtc_set_date+0xb0>)
  40265a:	fba3 4301 	umull	r4, r3, r3, r1
  40265e:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  402660:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  402664:	4b1c      	ldr	r3, [pc, #112]	; (4026d8 <rtc_set_date+0xb4>)
  402666:	fba3 4301 	umull	r4, r3, r3, r1
  40266a:	095b      	lsrs	r3, r3, #5
  40266c:	fba5 6403 	umull	r6, r4, r5, r3
  402670:	08e4      	lsrs	r4, r4, #3
  402672:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402676:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40267a:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  40267c:	fba5 4301 	umull	r4, r3, r5, r1
  402680:	08db      	lsrs	r3, r3, #3
  402682:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  402686:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40268a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40268e:	fba5 1503 	umull	r1, r5, r5, r3
  402692:	08ed      	lsrs	r5, r5, #3
  402694:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402698:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40269c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4026a0:	6983      	ldr	r3, [r0, #24]
  4026a2:	f013 0f04 	tst.w	r3, #4
  4026a6:	d0fb      	beq.n	4026a0 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4026a8:	6803      	ldr	r3, [r0, #0]
  4026aa:	f043 0302 	orr.w	r3, r3, #2
  4026ae:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4026b0:	6983      	ldr	r3, [r0, #24]
  4026b2:	f013 0f01 	tst.w	r3, #1
  4026b6:	d0fb      	beq.n	4026b0 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4026b8:	2301      	movs	r3, #1
  4026ba:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4026bc:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4026be:	6803      	ldr	r3, [r0, #0]
  4026c0:	f023 0302 	bic.w	r3, r3, #2
  4026c4:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4026c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4026c8:	f000 0002 	and.w	r0, r0, #2
  4026cc:	bc70      	pop	{r4, r5, r6}
  4026ce:	4770      	bx	lr
  4026d0:	cccccccd 	.word	0xcccccccd
  4026d4:	10624dd3 	.word	0x10624dd3
  4026d8:	51eb851f 	.word	0x51eb851f

004026dc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4026dc:	6943      	ldr	r3, [r0, #20]
  4026de:	f013 0f02 	tst.w	r3, #2
  4026e2:	d004      	beq.n	4026ee <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4026e4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4026e8:	61c1      	str	r1, [r0, #28]
	return 0;
  4026ea:	2000      	movs	r0, #0
  4026ec:	4770      	bx	lr
		return 1;
  4026ee:	2001      	movs	r0, #1
}
  4026f0:	4770      	bx	lr

004026f2 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4026f2:	6943      	ldr	r3, [r0, #20]
  4026f4:	f013 0f01 	tst.w	r3, #1
  4026f8:	d005      	beq.n	402706 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4026fa:	6983      	ldr	r3, [r0, #24]
  4026fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402700:	600b      	str	r3, [r1, #0]

	return 0;
  402702:	2000      	movs	r0, #0
  402704:	4770      	bx	lr
		return 1;
  402706:	2001      	movs	r0, #1
}
  402708:	4770      	bx	lr
	...

0040270c <sdramc_init>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40270c:	4b51      	ldr	r3, [pc, #324]	; (402854 <sdramc_init+0x148>)
  40270e:	781b      	ldrb	r3, [r3, #0]
  402710:	2bff      	cmp	r3, #255	; 0xff
  402712:	f000 809d 	beq.w	402850 <sdramc_init+0x144>
 *
 * \param p_sdram  Pointer to the sdram memory structure.
 * \param ul_clk  SDRAM clock frequency.
 */
void sdramc_init(sdramc_memory_dev_t *p_sdram, uint32_t ul_clk)
{
  402716:	b4f0      	push	{r4, r5, r6, r7}
  402718:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40271a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40271e:	fab3 f383 	clz	r3, r3
  402722:	095b      	lsrs	r3, r3, #5
  402724:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402726:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402728:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40272c:	2200      	movs	r2, #0
  40272e:	4b4a      	ldr	r3, [pc, #296]	; (402858 <sdramc_init+0x14c>)
  402730:	701a      	strb	r2, [r3, #0]
	return flags;
  402732:	9c00      	ldr	r4, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  402734:	4a47      	ldr	r2, [pc, #284]	; (402854 <sdramc_init+0x148>)
  402736:	7813      	ldrb	r3, [r2, #0]
  402738:	3301      	adds	r3, #1
  40273a:	7013      	strb	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40273c:	b12c      	cbz	r4, 40274a <sdramc_init+0x3e>
		cpu_irq_enable();
  40273e:	2201      	movs	r2, #1
  402740:	4b45      	ldr	r3, [pc, #276]	; (402858 <sdramc_init+0x14c>)
  402742:	701a      	strb	r2, [r3, #0]
  402744:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402748:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);

	/* SDRAM device configuration */
	/* Step 1. */
	/* Set the features of SDRAM device into the Configuration Register */
	SDRAMC->SDRAMC_CR = p_sdram->cr.ul_cfg;
  40274a:	6883      	ldr	r3, [r0, #8]
  40274c:	4a43      	ldr	r2, [pc, #268]	; (40285c <sdramc_init+0x150>)
  40274e:	6093      	str	r3, [r2, #8]
	/* Step 2. */

	/* For low-power SDRAM, Temperature-Compensated Self Refresh (TCSR),
	   Drive Strength (DS) and Partial Array Self Refresh (PASR) must be set
	   in the Low-power Register. */
	SDRAMC->SDRAMC_LPR = 0;
  402750:	2300      	movs	r3, #0
  402752:	6113      	str	r3, [r2, #16]

	/* Step 3. */
	/* Program the memory device type into the Memory Device Register */
	SDRAMC->SDRAMC_MDR = SDRAMC_MDR_MD_SDRAM;
  402754:	6253      	str	r3, [r2, #36]	; 0x24

	/* Step 4. */

	/* A minimum pause of 200 µs is provided to precede any signal toggle.
	   (6 core cycles per iteration) */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  402756:	9301      	str	r3, [sp, #4]
  402758:	4b41      	ldr	r3, [pc, #260]	; (402860 <sdramc_init+0x154>)
  40275a:	fba3 2301 	umull	r2, r3, r3, r1
  40275e:	0c9a      	lsrs	r2, r3, #18
  402760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  402764:	fb03 f302 	mul.w	r3, r3, r2
  402768:	4a3e      	ldr	r2, [pc, #248]	; (402864 <sdramc_init+0x158>)
  40276a:	fba2 2303 	umull	r2, r3, r2, r3
  40276e:	089b      	lsrs	r3, r3, #2
  402770:	9a01      	ldr	r2, [sp, #4]
  402772:	4293      	cmp	r3, r2
  402774:	d905      	bls.n	402782 <sdramc_init+0x76>
  402776:	9a01      	ldr	r2, [sp, #4]
  402778:	3201      	adds	r2, #1
  40277a:	9201      	str	r2, [sp, #4]
  40277c:	9a01      	ldr	r2, [sp, #4]
  40277e:	429a      	cmp	r2, r3
  402780:	d3f9      	bcc.n	402776 <sdramc_init+0x6a>
	/* A NOP command is issued to the SDR-SDRAM. Program NOP command into
	   Mode Register, and the application must set Mode to 1 in the Mode
	   Register. Perform a write access to any SDR-SDRAM address to
	   acknowledge this command. Now the clock which drives SDR-SDRAM
	   device is enabled. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NOP;
  402782:	4d36      	ldr	r5, [pc, #216]	; (40285c <sdramc_init+0x150>)
  402784:	2201      	movs	r2, #1
  402786:	602a      	str	r2, [r5, #0]
	*pSdram = 0x0;
  402788:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  40278c:	2200      	movs	r2, #0
  40278e:	8022      	strh	r2, [r4, #0]

	/* An all banks precharge command is issued to the SDR-SDRAM. Program
	   all banks precharge command into Mode Register, and the application
	   must set Mode to 2 in the Mode Register. Perform a write access to
	   any SDRSDRAM address to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_ALLBANKS_PRECHARGE;
  402790:	2602      	movs	r6, #2
  402792:	602e      	str	r6, [r5, #0]
	*pSdram = 0x0;
  402794:	8022      	strh	r2, [r4, #0]

	/* Add some delays after precharge */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  402796:	9201      	str	r2, [sp, #4]
  402798:	9a01      	ldr	r2, [sp, #4]
  40279a:	429a      	cmp	r2, r3
  40279c:	d205      	bcs.n	4027aa <sdramc_init+0x9e>
  40279e:	9a01      	ldr	r2, [sp, #4]
  4027a0:	3201      	adds	r2, #1
  4027a2:	9201      	str	r2, [sp, #4]
  4027a4:	9a01      	ldr	r2, [sp, #4]
  4027a6:	429a      	cmp	r2, r3
  4027a8:	d3f9      	bcc.n	40279e <sdramc_init+0x92>
	/* Step 7. */
	/* Eight auto-refresh (CBR) cycles are provided. Program the auto
	   refresh command (CBR) into Mode Register, and the application
	   must set Mode to 4 in the Mode Register. Once in the idle state,
	   eight AUTO REFRESH cycles must be performed. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4027aa:	4a2c      	ldr	r2, [pc, #176]	; (40285c <sdramc_init+0x150>)
  4027ac:	2404      	movs	r4, #4
  4027ae:	6014      	str	r4, [r2, #0]
	*pSdram = 0x1;
  4027b0:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
  4027b4:	2601      	movs	r6, #1
  4027b6:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4027b8:	6014      	str	r4, [r2, #0]
	*pSdram = 0x2;
  4027ba:	2602      	movs	r6, #2
  4027bc:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4027be:	6014      	str	r4, [r2, #0]
	*pSdram = 0x3;
  4027c0:	2603      	movs	r6, #3
  4027c2:	802e      	strh	r6, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4027c4:	6014      	str	r4, [r2, #0]
	*pSdram = 0x4;
  4027c6:	802c      	strh	r4, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4027c8:	6014      	str	r4, [r2, #0]
	*pSdram = 0x5;
  4027ca:	2705      	movs	r7, #5
  4027cc:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4027ce:	6014      	str	r4, [r2, #0]
	*pSdram = 0x6;
  4027d0:	2706      	movs	r7, #6
  4027d2:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4027d4:	6014      	str	r4, [r2, #0]
	*pSdram = 0x7;
  4027d6:	2707      	movs	r7, #7
  4027d8:	802f      	strh	r7, [r5, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4027da:	6014      	str	r4, [r2, #0]
	*pSdram = 0x8;
  4027dc:	2408      	movs	r4, #8
  4027de:	802c      	strh	r4, [r5, #0]

	/* Step 8. */
	/* A Mode Register Set (MRS) cycle is issued to program the parameters
	   of the SDRAM devices, in particular CAS latency and burst length. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_LOAD_MODEREG;
  4027e0:	6016      	str	r6, [r2, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  4027e2:	6842      	ldr	r2, [r0, #4]
  4027e4:	0052      	lsls	r2, r2, #1
  4027e6:	442a      	add	r2, r5
  4027e8:	f64c 24fe 	movw	r4, #51966	; 0xcafe
  4027ec:	8014      	strh	r4, [r2, #0]
    
	/* Add some delays */
	for (i = 0; i < ((ul_clk / 1000000) * 1000 / 6); i++) {
  4027ee:	2200      	movs	r2, #0
  4027f0:	9201      	str	r2, [sp, #4]
  4027f2:	9a01      	ldr	r2, [sp, #4]
  4027f4:	429a      	cmp	r2, r3
  4027f6:	d205      	bcs.n	402804 <sdramc_init+0xf8>
  4027f8:	9a01      	ldr	r2, [sp, #4]
  4027fa:	3201      	adds	r2, #1
  4027fc:	9201      	str	r2, [sp, #4]
  4027fe:	9a01      	ldr	r2, [sp, #4]
  402800:	429a      	cmp	r2, r3
  402802:	d3f9      	bcc.n	4027f8 <sdramc_init+0xec>

	/* For low-power SDR-SDRAM initialization, an Extended Mode Register Set
	   (EMRS) cycle is issued to program the SDR-SDRAM parameters (TCSR,
	   PASR, DS). The write address must be chosen so that BA[1] is set to
	   1 and BA[0] is set to 0. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_EXT_LOAD_MODEREG;
  402804:	4a15      	ldr	r2, [pc, #84]	; (40285c <sdramc_init+0x150>)
  402806:	2305      	movs	r3, #5
  402808:	6013      	str	r3, [r2, #0]
	*((uint16_t *)(pSdram + (1 << p_sdram->ul_bk1))) = 0x0;
  40280a:	6800      	ldr	r0, [r0, #0]
  40280c:	2302      	movs	r3, #2
  40280e:	4083      	lsls	r3, r0
  402810:	f103 43e0 	add.w	r3, r3, #1879048192	; 0x70000000
  402814:	2000      	movs	r0, #0
  402816:	8018      	strh	r0, [r3, #0]

	/* Step 10. */
	/* The application must go into Normal Mode, setting Mode to 0 in the
	   Mode Register and perform a write access at any location in the\
	   SDRAM to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NORMAL;
  402818:	6010      	str	r0, [r2, #0]
	*pSdram = 0x0;
  40281a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  40281e:	8018      	strh	r0, [r3, #0]

	/* Step 11. */

	/* Write the refresh rate into the count field in the SDRAMC Refresh
	   Timer register. Set Refresh timer to 15.625 us. */
	i = ul_clk / 1000u;
  402820:	4b11      	ldr	r3, [pc, #68]	; (402868 <sdramc_init+0x15c>)
  402822:	fba3 1301 	umull	r1, r3, r3, r1
  402826:	099b      	lsrs	r3, r3, #6
  402828:	9301      	str	r3, [sp, #4]
	i *= 15625u;
  40282a:	9901      	ldr	r1, [sp, #4]
  40282c:	f643 5309 	movw	r3, #15625	; 0x3d09
  402830:	fb03 f301 	mul.w	r3, r3, r1
  402834:	9301      	str	r3, [sp, #4]
	i /= 1000000u;
  402836:	9b01      	ldr	r3, [sp, #4]
  402838:	4909      	ldr	r1, [pc, #36]	; (402860 <sdramc_init+0x154>)
  40283a:	fba1 1303 	umull	r1, r3, r1, r3
  40283e:	0c9b      	lsrs	r3, r3, #18
  402840:	9301      	str	r3, [sp, #4]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  402842:	9b01      	ldr	r3, [sp, #4]
  402844:	f3c3 030b 	ubfx	r3, r3, #0, #12
  402848:	6053      	str	r3, [r2, #4]
}
  40284a:	b002      	add	sp, #8
  40284c:	bcf0      	pop	{r4, r5, r6, r7}
  40284e:	4770      	bx	lr
  402850:	e7fe      	b.n	402850 <sdramc_init+0x144>
  402852:	bf00      	nop
  402854:	20400f08 	.word	0x20400f08
  402858:	20400177 	.word	0x20400177
  40285c:	40084000 	.word	0x40084000
  402860:	431bde83 	.word	0x431bde83
  402864:	aaaaaaab 	.word	0xaaaaaaab
  402868:	10624dd3 	.word	0x10624dd3

0040286c <sdramc_deinit>:
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  40286c:	4b0f      	ldr	r3, [pc, #60]	; (4028ac <sdramc_deinit+0x40>)
  40286e:	781b      	ldrb	r3, [r3, #0]
  402870:	b903      	cbnz	r3, 402874 <sdramc_deinit+0x8>
  402872:	e7fe      	b.n	402872 <sdramc_deinit+0x6>

/**
 * \brief De-initialize the SDRAM controller.
 */
void sdramc_deinit( void )
{
  402874:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402876:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40287a:	fab3 f383 	clz	r3, r3
  40287e:	095b      	lsrs	r3, r3, #5
  402880:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402882:	b672      	cpsid	i
  402884:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402888:	2200      	movs	r2, #0
  40288a:	4b09      	ldr	r3, [pc, #36]	; (4028b0 <sdramc_deinit+0x44>)
  40288c:	701a      	strb	r2, [r3, #0]
	return flags;
  40288e:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  402890:	4a06      	ldr	r2, [pc, #24]	; (4028ac <sdramc_deinit+0x40>)
  402892:	7813      	ldrb	r3, [r2, #0]
  402894:	3b01      	subs	r3, #1
  402896:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  402898:	b129      	cbz	r1, 4028a6 <sdramc_deinit+0x3a>
		cpu_irq_enable();
  40289a:	2201      	movs	r2, #1
  40289c:	4b04      	ldr	r3, [pc, #16]	; (4028b0 <sdramc_deinit+0x44>)
  40289e:	701a      	strb	r2, [r3, #0]
  4028a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4028a4:	b662      	cpsie	i
	/* Allow the SDRAMC entering to the sleep mode */
	sleepmgr_unlock_mode(SLEEPMGR_ACTIVE);
}
  4028a6:	b002      	add	sp, #8
  4028a8:	4770      	bx	lr
  4028aa:	bf00      	nop
  4028ac:	20400f08 	.word	0x20400f08
  4028b0:	20400177 	.word	0x20400177

004028b4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4028b4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4028b6:	23ac      	movs	r3, #172	; 0xac
  4028b8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4028ba:	680b      	ldr	r3, [r1, #0]
  4028bc:	684a      	ldr	r2, [r1, #4]
  4028be:	fbb3 f3f2 	udiv	r3, r3, r2
  4028c2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4028c4:	1e5c      	subs	r4, r3, #1
  4028c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4028ca:	4294      	cmp	r4, r2
  4028cc:	d808      	bhi.n	4028e0 <uart_init+0x2c>
		return 1;

	p_uart->UART_BRGR = cd;
  4028ce:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4028d0:	688b      	ldr	r3, [r1, #8]
  4028d2:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4028d4:	2350      	movs	r3, #80	; 0x50
  4028d6:	6003      	str	r3, [r0, #0]

	return 0;
  4028d8:	2000      	movs	r0, #0
}
  4028da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4028de:	4770      	bx	lr
		return 1;
  4028e0:	2001      	movs	r0, #1
  4028e2:	e7fa      	b.n	4028da <uart_init+0x26>

004028e4 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  4028e4:	2340      	movs	r3, #64	; 0x40
  4028e6:	6003      	str	r3, [r0, #0]
  4028e8:	4770      	bx	lr

004028ea <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4028ea:	6943      	ldr	r3, [r0, #20]
  4028ec:	f013 0f02 	tst.w	r3, #2
  4028f0:	d002      	beq.n	4028f8 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4028f2:	61c1      	str	r1, [r0, #28]
	return 0;
  4028f4:	2000      	movs	r0, #0
  4028f6:	4770      	bx	lr
		return 1;
  4028f8:	2001      	movs	r0, #1
}
  4028fa:	4770      	bx	lr

004028fc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4028fc:	6943      	ldr	r3, [r0, #20]
  4028fe:	f013 0f01 	tst.w	r3, #1
  402902:	d003      	beq.n	40290c <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402904:	6983      	ldr	r3, [r0, #24]
  402906:	700b      	strb	r3, [r1, #0]
	return 0;
  402908:	2000      	movs	r0, #0
  40290a:	4770      	bx	lr
		return 1;
  40290c:	2001      	movs	r0, #1
}
  40290e:	4770      	bx	lr

00402910 <ui_powerdown>:
{
	/* Initialize LEDs */
}

void ui_powerdown(void)
{
  402910:	4770      	bx	lr

00402912 <ui_wakeup>:
}

void ui_wakeup(void)
{
  402912:	4770      	bx	lr

00402914 <ui_loop_back_state>:
}

void ui_loop_back_state(bool b_started)
{
  402914:	4770      	bx	lr

00402916 <ui_process>:
}

void ui_process(uint16_t framenumber)
{
  402916:	4770      	bx	lr

00402918 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402918:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  40291a:	4810      	ldr	r0, [pc, #64]	; (40295c <sysclk_init+0x44>)
  40291c:	4b10      	ldr	r3, [pc, #64]	; (402960 <sysclk_init+0x48>)
  40291e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402920:	211c      	movs	r1, #28
  402922:	2000      	movs	r0, #0
  402924:	4b0f      	ldr	r3, [pc, #60]	; (402964 <sysclk_init+0x4c>)
  402926:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402928:	4c0f      	ldr	r4, [pc, #60]	; (402968 <sysclk_init+0x50>)
  40292a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40292c:	2800      	cmp	r0, #0
  40292e:	d0fc      	beq.n	40292a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402930:	4b0e      	ldr	r3, [pc, #56]	; (40296c <sysclk_init+0x54>)
  402932:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402934:	4a0e      	ldr	r2, [pc, #56]	; (402970 <sysclk_init+0x58>)
  402936:	4b0f      	ldr	r3, [pc, #60]	; (402974 <sysclk_init+0x5c>)
  402938:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40293a:	4c0f      	ldr	r4, [pc, #60]	; (402978 <sysclk_init+0x60>)
  40293c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40293e:	2800      	cmp	r0, #0
  402940:	d0fc      	beq.n	40293c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402942:	2002      	movs	r0, #2
  402944:	4b0d      	ldr	r3, [pc, #52]	; (40297c <sysclk_init+0x64>)
  402946:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402948:	2000      	movs	r0, #0
  40294a:	4b0d      	ldr	r3, [pc, #52]	; (402980 <sysclk_init+0x68>)
  40294c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40294e:	4b0d      	ldr	r3, [pc, #52]	; (402984 <sysclk_init+0x6c>)
  402950:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  402952:	4802      	ldr	r0, [pc, #8]	; (40295c <sysclk_init+0x44>)
  402954:	4b02      	ldr	r3, [pc, #8]	; (402960 <sysclk_init+0x48>)
  402956:	4798      	blx	r3
  402958:	bd10      	pop	{r4, pc}
  40295a:	bf00      	nop
  40295c:	08f0d180 	.word	0x08f0d180
  402960:	00404911 	.word	0x00404911
  402964:	004034f1 	.word	0x004034f1
  402968:	00403545 	.word	0x00403545
  40296c:	00403555 	.word	0x00403555
  402970:	20183f01 	.word	0x20183f01
  402974:	400e0600 	.word	0x400e0600
  402978:	00403565 	.word	0x00403565
  40297c:	00403455 	.word	0x00403455
  402980:	0040348d 	.word	0x0040348d
  402984:	00404805 	.word	0x00404805

00402988 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
  402988:	4b01      	ldr	r3, [pc, #4]	; (402990 <udi_vendor_getsetting+0x8>)
  40298a:	7818      	ldrb	r0, [r3, #0]
  40298c:	4770      	bx	lr
  40298e:	bf00      	nop
  402990:	20400b94 	.word	0x20400b94

00402994 <udi_vendor_enable>:
{
  402994:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
  402996:	4b06      	ldr	r3, [pc, #24]	; (4029b0 <udi_vendor_enable+0x1c>)
  402998:	4798      	blx	r3
  40299a:	78c3      	ldrb	r3, [r0, #3]
  40299c:	4a05      	ldr	r2, [pc, #20]	; (4029b4 <udi_vendor_enable+0x20>)
  40299e:	7013      	strb	r3, [r2, #0]
	if (1 == udi_vendor_alternate_setting) {
  4029a0:	2b01      	cmp	r3, #1
  4029a2:	d001      	beq.n	4029a8 <udi_vendor_enable+0x14>
	return true;
  4029a4:	2001      	movs	r0, #1
}
  4029a6:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
  4029a8:	4b03      	ldr	r3, [pc, #12]	; (4029b8 <udi_vendor_enable+0x24>)
  4029aa:	4798      	blx	r3
  4029ac:	bd08      	pop	{r3, pc}
  4029ae:	bf00      	nop
  4029b0:	00402c79 	.word	0x00402c79
  4029b4:	20400b94 	.word	0x20400b94
  4029b8:	00409975 	.word	0x00409975

004029bc <udi_vendor_disable>:
{
  4029bc:	b508      	push	{r3, lr}
	if (1 == udi_vendor_alternate_setting) {
  4029be:	4b04      	ldr	r3, [pc, #16]	; (4029d0 <udi_vendor_disable+0x14>)
  4029c0:	781b      	ldrb	r3, [r3, #0]
  4029c2:	2b01      	cmp	r3, #1
  4029c4:	d000      	beq.n	4029c8 <udi_vendor_disable+0xc>
  4029c6:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
  4029c8:	4b02      	ldr	r3, [pc, #8]	; (4029d4 <udi_vendor_disable+0x18>)
  4029ca:	4798      	blx	r3
}
  4029cc:	e7fb      	b.n	4029c6 <udi_vendor_disable+0xa>
  4029ce:	bf00      	nop
  4029d0:	20400b94 	.word	0x20400b94
  4029d4:	00406dbd 	.word	0x00406dbd

004029d8 <udi_vendor_setup>:
{
  4029d8:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
  4029da:	4b13      	ldr	r3, [pc, #76]	; (402a28 <udi_vendor_setup+0x50>)
  4029dc:	781b      	ldrb	r3, [r3, #0]
  4029de:	f013 0f80 	tst.w	r3, #128	; 0x80
  4029e2:	d105      	bne.n	4029f0 <udi_vendor_setup+0x18>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
  4029e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4029e8:	2b40      	cmp	r3, #64	; 0x40
  4029ea:	d00f      	beq.n	402a0c <udi_vendor_setup+0x34>
	return false; // Not supported request
  4029ec:	2000      	movs	r0, #0
  4029ee:	bd08      	pop	{r3, pc}
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
  4029f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4029f4:	2b40      	cmp	r3, #64	; 0x40
  4029f6:	d001      	beq.n	4029fc <udi_vendor_setup+0x24>
	return false; // Not supported request
  4029f8:	2000      	movs	r0, #0
  4029fa:	bd08      	pop	{r3, pc}
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
  4029fc:	4b0a      	ldr	r3, [pc, #40]	; (402a28 <udi_vendor_setup+0x50>)
  4029fe:	785b      	ldrb	r3, [r3, #1]
  402a00:	b10b      	cbz	r3, 402a06 <udi_vendor_setup+0x2e>
	return false; // Not supported request
  402a02:	2000      	movs	r0, #0
  402a04:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_IN_RECEIVED();
  402a06:	4b09      	ldr	r3, [pc, #36]	; (402a2c <udi_vendor_setup+0x54>)
  402a08:	4798      	blx	r3
  402a0a:	bd08      	pop	{r3, pc}
				&& (udd_g_ctrlreq.req.bRequest == 0)
  402a0c:	4b06      	ldr	r3, [pc, #24]	; (402a28 <udi_vendor_setup+0x50>)
  402a0e:	785b      	ldrb	r3, [r3, #1]
  402a10:	b93b      	cbnz	r3, 402a22 <udi_vendor_setup+0x4a>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
  402a12:	4b05      	ldr	r3, [pc, #20]	; (402a28 <udi_vendor_setup+0x50>)
  402a14:	88db      	ldrh	r3, [r3, #6]
  402a16:	b90b      	cbnz	r3, 402a1c <udi_vendor_setup+0x44>
	return false; // Not supported request
  402a18:	2000      	movs	r0, #0
}
  402a1a:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
  402a1c:	4b04      	ldr	r3, [pc, #16]	; (402a30 <udi_vendor_setup+0x58>)
  402a1e:	4798      	blx	r3
  402a20:	bd08      	pop	{r3, pc}
	return false; // Not supported request
  402a22:	2000      	movs	r0, #0
  402a24:	bd08      	pop	{r3, pc}
  402a26:	bf00      	nop
  402a28:	20400f10 	.word	0x20400f10
  402a2c:	00406de9 	.word	0x00406de9
  402a30:	00406dc9 	.word	0x00406dc9

00402a34 <udi_vendor_interrupt_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402a34:	b510      	push	{r4, lr}
  402a36:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_IN,
  402a38:	9200      	str	r2, [sp, #0]
  402a3a:	460b      	mov	r3, r1
  402a3c:	4602      	mov	r2, r0
  402a3e:	2100      	movs	r1, #0
  402a40:	2081      	movs	r0, #129	; 0x81
  402a42:	4c02      	ldr	r4, [pc, #8]	; (402a4c <udi_vendor_interrupt_in_run+0x18>)
  402a44:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402a46:	b002      	add	sp, #8
  402a48:	bd10      	pop	{r4, pc}
  402a4a:	bf00      	nop
  402a4c:	00404321 	.word	0x00404321

00402a50 <udi_vendor_interrupt_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402a50:	b510      	push	{r4, lr}
  402a52:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_OUT,
  402a54:	9200      	str	r2, [sp, #0]
  402a56:	460b      	mov	r3, r1
  402a58:	4602      	mov	r2, r0
  402a5a:	2100      	movs	r1, #0
  402a5c:	2002      	movs	r0, #2
  402a5e:	4c02      	ldr	r4, [pc, #8]	; (402a68 <udi_vendor_interrupt_out_run+0x18>)
  402a60:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402a62:	b002      	add	sp, #8
  402a64:	bd10      	pop	{r4, pc}
  402a66:	bf00      	nop
  402a68:	00404321 	.word	0x00404321

00402a6c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(char * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402a6c:	b510      	push	{r4, lr}
  402a6e:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
  402a70:	9200      	str	r2, [sp, #0]
  402a72:	460b      	mov	r3, r1
  402a74:	4602      	mov	r2, r0
  402a76:	2100      	movs	r1, #0
  402a78:	2083      	movs	r0, #131	; 0x83
  402a7a:	4c02      	ldr	r4, [pc, #8]	; (402a84 <udi_vendor_bulk_in_run+0x18>)
  402a7c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402a7e:	b002      	add	sp, #8
  402a80:	bd10      	pop	{r4, pc}
  402a82:	bf00      	nop
  402a84:	00404321 	.word	0x00404321

00402a88 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402a88:	b510      	push	{r4, lr}
  402a8a:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
  402a8c:	9200      	str	r2, [sp, #0]
  402a8e:	460b      	mov	r3, r1
  402a90:	4602      	mov	r2, r0
  402a92:	2100      	movs	r1, #0
  402a94:	2004      	movs	r0, #4
  402a96:	4c02      	ldr	r4, [pc, #8]	; (402aa0 <udi_vendor_bulk_out_run+0x18>)
  402a98:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402a9a:	b002      	add	sp, #8
  402a9c:	bd10      	pop	{r4, pc}
  402a9e:	bf00      	nop
  402aa0:	00404321 	.word	0x00404321

00402aa4 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402aa4:	b510      	push	{r4, lr}
  402aa6:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
  402aa8:	9200      	str	r2, [sp, #0]
  402aaa:	460b      	mov	r3, r1
  402aac:	4602      	mov	r2, r0
  402aae:	2100      	movs	r1, #0
  402ab0:	2085      	movs	r0, #133	; 0x85
  402ab2:	4c02      	ldr	r4, [pc, #8]	; (402abc <udi_vendor_iso_in_run+0x18>)
  402ab4:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402ab6:	b002      	add	sp, #8
  402ab8:	bd10      	pop	{r4, pc}
  402aba:	bf00      	nop
  402abc:	00404321 	.word	0x00404321

00402ac0 <udi_vendor_iso_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402ac0:	b510      	push	{r4, lr}
  402ac2:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_ISO_OUT,
  402ac4:	9200      	str	r2, [sp, #0]
  402ac6:	460b      	mov	r3, r1
  402ac8:	4602      	mov	r2, r0
  402aca:	2100      	movs	r1, #0
  402acc:	2006      	movs	r0, #6
  402ace:	4c02      	ldr	r4, [pc, #8]	; (402ad8 <udi_vendor_iso_out_run+0x18>)
  402ad0:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402ad2:	b002      	add	sp, #8
  402ad4:	bd10      	pop	{r4, pc}
  402ad6:	bf00      	nop
  402ad8:	00404321 	.word	0x00404321

00402adc <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  402adc:	4b10      	ldr	r3, [pc, #64]	; (402b20 <udc_next_desc_in_iface+0x44>)
  402ade:	681b      	ldr	r3, [r3, #0]
  402ae0:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  402ae2:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  402ae4:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  402ae6:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  402ae8:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  402aea:	4290      	cmp	r0, r2
  402aec:	d211      	bcs.n	402b12 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  402aee:	7843      	ldrb	r3, [r0, #1]
  402af0:	2b04      	cmp	r3, #4
  402af2:	d010      	beq.n	402b16 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  402af4:	428b      	cmp	r3, r1
  402af6:	d009      	beq.n	402b0c <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  402af8:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  402afa:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  402afc:	4290      	cmp	r0, r2
  402afe:	d206      	bcs.n	402b0e <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  402b00:	7843      	ldrb	r3, [r0, #1]
  402b02:	2b04      	cmp	r3, #4
  402b04:	d009      	beq.n	402b1a <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  402b06:	428b      	cmp	r3, r1
  402b08:	d1f6      	bne.n	402af8 <udc_next_desc_in_iface+0x1c>
  402b0a:	e007      	b.n	402b1c <udc_next_desc_in_iface+0x40>
  402b0c:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  402b0e:	2000      	movs	r0, #0
  402b10:	4770      	bx	lr
  402b12:	2000      	movs	r0, #0
  402b14:	4770      	bx	lr
  402b16:	2000      	movs	r0, #0
  402b18:	4770      	bx	lr
  402b1a:	2000      	movs	r0, #0
}
  402b1c:	4770      	bx	lr
  402b1e:	bf00      	nop
  402b20:	20400ba4 	.word	0x20400ba4

00402b24 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  402b24:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  402b26:	4b03      	ldr	r3, [pc, #12]	; (402b34 <udc_valid_address+0x10>)
  402b28:	7898      	ldrb	r0, [r3, #2]
  402b2a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  402b2e:	4b02      	ldr	r3, [pc, #8]	; (402b38 <udc_valid_address+0x14>)
  402b30:	4798      	blx	r3
  402b32:	bd08      	pop	{r3, pc}
  402b34:	20400f10 	.word	0x20400f10
  402b38:	0040407d 	.word	0x0040407d

00402b3c <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  402b3c:	4b19      	ldr	r3, [pc, #100]	; (402ba4 <udc_update_iface_desc+0x68>)
  402b3e:	781b      	ldrb	r3, [r3, #0]
  402b40:	b34b      	cbz	r3, 402b96 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  402b42:	4b19      	ldr	r3, [pc, #100]	; (402ba8 <udc_update_iface_desc+0x6c>)
  402b44:	681b      	ldr	r3, [r3, #0]
  402b46:	681b      	ldr	r3, [r3, #0]
  402b48:	791a      	ldrb	r2, [r3, #4]
  402b4a:	4282      	cmp	r2, r0
  402b4c:	d925      	bls.n	402b9a <udc_update_iface_desc+0x5e>
{
  402b4e:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  402b50:	4a16      	ldr	r2, [pc, #88]	; (402bac <udc_update_iface_desc+0x70>)
  402b52:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  402b54:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  402b56:	441c      	add	r4, r3
	while (ptr_end_desc >
  402b58:	42a3      	cmp	r3, r4
  402b5a:	d220      	bcs.n	402b9e <udc_update_iface_desc+0x62>
  402b5c:	2500      	movs	r5, #0
  402b5e:	2601      	movs	r6, #1
  402b60:	e007      	b.n	402b72 <udc_update_iface_desc+0x36>
  402b62:	4a12      	ldr	r2, [pc, #72]	; (402bac <udc_update_iface_desc+0x70>)
  402b64:	6013      	str	r3, [r2, #0]
  402b66:	e00f      	b.n	402b88 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  402b68:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  402b6a:	4413      	add	r3, r2
  402b6c:	4635      	mov	r5, r6
	while (ptr_end_desc >
  402b6e:	42a3      	cmp	r3, r4
  402b70:	d20c      	bcs.n	402b8c <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  402b72:	785a      	ldrb	r2, [r3, #1]
  402b74:	2a04      	cmp	r2, #4
  402b76:	d1f7      	bne.n	402b68 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  402b78:	789a      	ldrb	r2, [r3, #2]
  402b7a:	4282      	cmp	r2, r0
  402b7c:	d1f4      	bne.n	402b68 <udc_update_iface_desc+0x2c>
  402b7e:	78da      	ldrb	r2, [r3, #3]
  402b80:	428a      	cmp	r2, r1
  402b82:	d1f1      	bne.n	402b68 <udc_update_iface_desc+0x2c>
  402b84:	2d00      	cmp	r5, #0
  402b86:	d1ec      	bne.n	402b62 <udc_update_iface_desc+0x26>
				return true; // Interface found
  402b88:	2001      	movs	r0, #1
  402b8a:	e002      	b.n	402b92 <udc_update_iface_desc+0x56>
  402b8c:	4a07      	ldr	r2, [pc, #28]	; (402bac <udc_update_iface_desc+0x70>)
  402b8e:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  402b90:	2000      	movs	r0, #0
}
  402b92:	bc70      	pop	{r4, r5, r6}
  402b94:	4770      	bx	lr
		return false;
  402b96:	2000      	movs	r0, #0
  402b98:	4770      	bx	lr
		return false;
  402b9a:	2000      	movs	r0, #0
  402b9c:	4770      	bx	lr
	return false; // Interface not found
  402b9e:	2000      	movs	r0, #0
  402ba0:	e7f7      	b.n	402b92 <udc_update_iface_desc+0x56>
  402ba2:	bf00      	nop
  402ba4:	20400ba0 	.word	0x20400ba0
  402ba8:	20400ba4 	.word	0x20400ba4
  402bac:	20400ba8 	.word	0x20400ba8

00402bb0 <udc_iface_disable>:
{
  402bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402bb4:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  402bb6:	2100      	movs	r1, #0
  402bb8:	4b13      	ldr	r3, [pc, #76]	; (402c08 <udc_iface_disable+0x58>)
  402bba:	4798      	blx	r3
  402bbc:	4680      	mov	r8, r0
  402bbe:	b910      	cbnz	r0, 402bc6 <udc_iface_disable+0x16>
}
  402bc0:	4640      	mov	r0, r8
  402bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  402bc6:	4b11      	ldr	r3, [pc, #68]	; (402c0c <udc_iface_disable+0x5c>)
  402bc8:	681b      	ldr	r3, [r3, #0]
  402bca:	685b      	ldr	r3, [r3, #4]
  402bcc:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  402bd0:	f8d9 300c 	ldr.w	r3, [r9, #12]
  402bd4:	4798      	blx	r3
  402bd6:	4601      	mov	r1, r0
  402bd8:	4620      	mov	r0, r4
  402bda:	4b0b      	ldr	r3, [pc, #44]	; (402c08 <udc_iface_disable+0x58>)
  402bdc:	4798      	blx	r3
  402bde:	4680      	mov	r8, r0
  402be0:	2800      	cmp	r0, #0
  402be2:	d0ed      	beq.n	402bc0 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  402be4:	4b0a      	ldr	r3, [pc, #40]	; (402c10 <udc_iface_disable+0x60>)
  402be6:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402be8:	2605      	movs	r6, #5
  402bea:	4d0a      	ldr	r5, [pc, #40]	; (402c14 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  402bec:	4f0a      	ldr	r7, [pc, #40]	; (402c18 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402bee:	4631      	mov	r1, r6
  402bf0:	4620      	mov	r0, r4
  402bf2:	47a8      	blx	r5
			if (NULL == ep_desc) {
  402bf4:	4604      	mov	r4, r0
  402bf6:	b110      	cbz	r0, 402bfe <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  402bf8:	7880      	ldrb	r0, [r0, #2]
  402bfa:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402bfc:	e7f7      	b.n	402bee <udc_iface_disable+0x3e>
	udi_api->disable();
  402bfe:	f8d9 3004 	ldr.w	r3, [r9, #4]
  402c02:	4798      	blx	r3
	return true;
  402c04:	e7dc      	b.n	402bc0 <udc_iface_disable+0x10>
  402c06:	bf00      	nop
  402c08:	00402b3d 	.word	0x00402b3d
  402c0c:	20400ba4 	.word	0x20400ba4
  402c10:	20400ba8 	.word	0x20400ba8
  402c14:	00402add 	.word	0x00402add
  402c18:	004040d1 	.word	0x004040d1

00402c1c <udc_iface_enable>:
{
  402c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402c20:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  402c22:	4b10      	ldr	r3, [pc, #64]	; (402c64 <udc_iface_enable+0x48>)
  402c24:	4798      	blx	r3
  402c26:	4603      	mov	r3, r0
  402c28:	b1c8      	cbz	r0, 402c5e <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  402c2a:	4b0f      	ldr	r3, [pc, #60]	; (402c68 <udc_iface_enable+0x4c>)
  402c2c:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402c2e:	2605      	movs	r6, #5
  402c30:	4d0e      	ldr	r5, [pc, #56]	; (402c6c <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  402c32:	4f0f      	ldr	r7, [pc, #60]	; (402c70 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402c34:	4631      	mov	r1, r6
  402c36:	4620      	mov	r0, r4
  402c38:	47a8      	blx	r5
		if (NULL == ep_desc)
  402c3a:	4604      	mov	r4, r0
  402c3c:	b138      	cbz	r0, 402c4e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  402c3e:	8882      	ldrh	r2, [r0, #4]
  402c40:	78c1      	ldrb	r1, [r0, #3]
  402c42:	7880      	ldrb	r0, [r0, #2]
  402c44:	47b8      	blx	r7
  402c46:	4603      	mov	r3, r0
  402c48:	2800      	cmp	r0, #0
  402c4a:	d1f3      	bne.n	402c34 <udc_iface_enable+0x18>
  402c4c:	e007      	b.n	402c5e <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  402c4e:	4b09      	ldr	r3, [pc, #36]	; (402c74 <udc_iface_enable+0x58>)
  402c50:	681b      	ldr	r3, [r3, #0]
  402c52:	685b      	ldr	r3, [r3, #4]
  402c54:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  402c58:	681b      	ldr	r3, [r3, #0]
  402c5a:	4798      	blx	r3
  402c5c:	4603      	mov	r3, r0
}
  402c5e:	4618      	mov	r0, r3
  402c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c64:	00402b3d 	.word	0x00402b3d
  402c68:	20400ba8 	.word	0x20400ba8
  402c6c:	00402add 	.word	0x00402add
  402c70:	0040442d 	.word	0x0040442d
  402c74:	20400ba4 	.word	0x20400ba4

00402c78 <udc_get_interface_desc>:
}
  402c78:	4b01      	ldr	r3, [pc, #4]	; (402c80 <udc_get_interface_desc+0x8>)
  402c7a:	6818      	ldr	r0, [r3, #0]
  402c7c:	4770      	bx	lr
  402c7e:	bf00      	nop
  402c80:	20400ba8 	.word	0x20400ba8

00402c84 <udc_reset>:
{
  402c84:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  402c86:	4b0d      	ldr	r3, [pc, #52]	; (402cbc <udc_reset+0x38>)
  402c88:	781b      	ldrb	r3, [r3, #0]
  402c8a:	b183      	cbz	r3, 402cae <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402c8c:	4b0c      	ldr	r3, [pc, #48]	; (402cc0 <udc_reset+0x3c>)
  402c8e:	681b      	ldr	r3, [r3, #0]
  402c90:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  402c92:	791b      	ldrb	r3, [r3, #4]
  402c94:	b15b      	cbz	r3, 402cae <udc_reset+0x2a>
  402c96:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  402c98:	4e0a      	ldr	r6, [pc, #40]	; (402cc4 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402c9a:	4d09      	ldr	r5, [pc, #36]	; (402cc0 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  402c9c:	4620      	mov	r0, r4
  402c9e:	47b0      	blx	r6
				iface_num++) {
  402ca0:	3401      	adds	r4, #1
  402ca2:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402ca4:	682b      	ldr	r3, [r5, #0]
  402ca6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  402ca8:	791b      	ldrb	r3, [r3, #4]
  402caa:	42a3      	cmp	r3, r4
  402cac:	d8f6      	bhi.n	402c9c <udc_reset+0x18>
	udc_num_configuration = 0;
  402cae:	2200      	movs	r2, #0
  402cb0:	4b02      	ldr	r3, [pc, #8]	; (402cbc <udc_reset+0x38>)
  402cb2:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  402cb4:	2201      	movs	r2, #1
  402cb6:	4b04      	ldr	r3, [pc, #16]	; (402cc8 <udc_reset+0x44>)
  402cb8:	801a      	strh	r2, [r3, #0]
  402cba:	bd70      	pop	{r4, r5, r6, pc}
  402cbc:	20400ba0 	.word	0x20400ba0
  402cc0:	20400ba4 	.word	0x20400ba4
  402cc4:	00402bb1 	.word	0x00402bb1
  402cc8:	20400b96 	.word	0x20400b96

00402ccc <udc_sof_notify>:
{
  402ccc:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  402cce:	4b0d      	ldr	r3, [pc, #52]	; (402d04 <udc_sof_notify+0x38>)
  402cd0:	781b      	ldrb	r3, [r3, #0]
  402cd2:	b1b3      	cbz	r3, 402d02 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402cd4:	4b0c      	ldr	r3, [pc, #48]	; (402d08 <udc_sof_notify+0x3c>)
  402cd6:	681b      	ldr	r3, [r3, #0]
  402cd8:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  402cda:	7912      	ldrb	r2, [r2, #4]
  402cdc:	b18a      	cbz	r2, 402d02 <udc_sof_notify+0x36>
  402cde:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402ce0:	4d09      	ldr	r5, [pc, #36]	; (402d08 <udc_sof_notify+0x3c>)
  402ce2:	e006      	b.n	402cf2 <udc_sof_notify+0x26>
				iface_num++) {
  402ce4:	3401      	adds	r4, #1
  402ce6:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402ce8:	682b      	ldr	r3, [r5, #0]
  402cea:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  402cec:	7912      	ldrb	r2, [r2, #4]
  402cee:	42a2      	cmp	r2, r4
  402cf0:	d907      	bls.n	402d02 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  402cf2:	685b      	ldr	r3, [r3, #4]
  402cf4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  402cf8:	691b      	ldr	r3, [r3, #16]
  402cfa:	2b00      	cmp	r3, #0
  402cfc:	d0f2      	beq.n	402ce4 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  402cfe:	4798      	blx	r3
  402d00:	e7f0      	b.n	402ce4 <udc_sof_notify+0x18>
  402d02:	bd38      	pop	{r3, r4, r5, pc}
  402d04:	20400ba0 	.word	0x20400ba0
  402d08:	20400ba4 	.word	0x20400ba4

00402d0c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  402d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  402d0e:	4b88      	ldr	r3, [pc, #544]	; (402f30 <udc_process_setup+0x224>)
  402d10:	2200      	movs	r2, #0
  402d12:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  402d14:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  402d16:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  402d18:	781b      	ldrb	r3, [r3, #0]
  402d1a:	f013 0f80 	tst.w	r3, #128	; 0x80
  402d1e:	d114      	bne.n	402d4a <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  402d20:	f013 0f60 	tst.w	r3, #96	; 0x60
  402d24:	f000 80d5 	beq.w	402ed2 <udc_process_setup+0x1c6>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  402d28:	4b81      	ldr	r3, [pc, #516]	; (402f30 <udc_process_setup+0x224>)
  402d2a:	781b      	ldrb	r3, [r3, #0]
  402d2c:	f003 031f 	and.w	r3, r3, #31
  402d30:	2b01      	cmp	r3, #1
  402d32:	f000 816c 	beq.w	40300e <udc_process_setup+0x302>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  402d36:	4b7e      	ldr	r3, [pc, #504]	; (402f30 <udc_process_setup+0x224>)
  402d38:	781b      	ldrb	r3, [r3, #0]
  402d3a:	f003 031f 	and.w	r3, r3, #31
  402d3e:	2b02      	cmp	r3, #2
  402d40:	f000 81c7 	beq.w	4030d2 <udc_process_setup+0x3c6>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  402d44:	2300      	movs	r3, #0
#endif
}
  402d46:	4618      	mov	r0, r3
  402d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  402d4a:	4a79      	ldr	r2, [pc, #484]	; (402f30 <udc_process_setup+0x224>)
  402d4c:	88d2      	ldrh	r2, [r2, #6]
  402d4e:	2a00      	cmp	r2, #0
  402d50:	f000 81e8 	beq.w	403124 <udc_process_setup+0x418>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  402d54:	f013 0f60 	tst.w	r3, #96	; 0x60
  402d58:	d1e6      	bne.n	402d28 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  402d5a:	f013 031f 	ands.w	r3, r3, #31
  402d5e:	d106      	bne.n	402d6e <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  402d60:	4973      	ldr	r1, [pc, #460]	; (402f30 <udc_process_setup+0x224>)
  402d62:	7849      	ldrb	r1, [r1, #1]
  402d64:	2906      	cmp	r1, #6
  402d66:	d014      	beq.n	402d92 <udc_process_setup+0x86>
  402d68:	2908      	cmp	r1, #8
  402d6a:	d074      	beq.n	402e56 <udc_process_setup+0x14a>
  402d6c:	b151      	cbz	r1, 402d84 <udc_process_setup+0x78>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  402d6e:	2b01      	cmp	r3, #1
  402d70:	d079      	beq.n	402e66 <udc_process_setup+0x15a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  402d72:	2b02      	cmp	r3, #2
  402d74:	d1d8      	bne.n	402d28 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  402d76:	4b6e      	ldr	r3, [pc, #440]	; (402f30 <udc_process_setup+0x224>)
  402d78:	785b      	ldrb	r3, [r3, #1]
  402d7a:	2b00      	cmp	r3, #0
  402d7c:	f000 809b 	beq.w	402eb6 <udc_process_setup+0x1aa>
	return false;
  402d80:	2300      	movs	r3, #0
  402d82:	e188      	b.n	403096 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  402d84:	2a02      	cmp	r2, #2
  402d86:	d1d6      	bne.n	402d36 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  402d88:	2102      	movs	r1, #2
  402d8a:	486a      	ldr	r0, [pc, #424]	; (402f34 <udc_process_setup+0x228>)
  402d8c:	4b6a      	ldr	r3, [pc, #424]	; (402f38 <udc_process_setup+0x22c>)
  402d8e:	4798      	blx	r3
  402d90:	e0bb      	b.n	402f0a <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  402d92:	4b67      	ldr	r3, [pc, #412]	; (402f30 <udc_process_setup+0x224>)
  402d94:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  402d96:	0a13      	lsrs	r3, r2, #8
  402d98:	3b01      	subs	r3, #1
  402d9a:	2b0e      	cmp	r3, #14
  402d9c:	f200 8178 	bhi.w	403090 <udc_process_setup+0x384>
  402da0:	e8df f013 	tbh	[pc, r3, lsl #1]
  402da4:	001d000f 	.word	0x001d000f
  402da8:	01760037 	.word	0x01760037
  402dac:	01760176 	.word	0x01760176
  402db0:	01760176 	.word	0x01760176
  402db4:	01760176 	.word	0x01760176
  402db8:	01760176 	.word	0x01760176
  402dbc:	01760176 	.word	0x01760176
  402dc0:	002f      	.short	0x002f
				(uint8_t *) udc_config.confdev_lsfs,
  402dc2:	4b5e      	ldr	r3, [pc, #376]	; (402f3c <udc_process_setup+0x230>)
  402dc4:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  402dc6:	7801      	ldrb	r1, [r0, #0]
  402dc8:	4b5b      	ldr	r3, [pc, #364]	; (402f38 <udc_process_setup+0x22c>)
  402dca:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  402dcc:	4b58      	ldr	r3, [pc, #352]	; (402f30 <udc_process_setup+0x224>)
  402dce:	88da      	ldrh	r2, [r3, #6]
  402dd0:	899b      	ldrh	r3, [r3, #12]
  402dd2:	4293      	cmp	r3, r2
  402dd4:	f240 8099 	bls.w	402f0a <udc_process_setup+0x1fe>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  402dd8:	4b55      	ldr	r3, [pc, #340]	; (402f30 <udc_process_setup+0x224>)
  402dda:	819a      	strh	r2, [r3, #12]
  402ddc:	e095      	b.n	402f0a <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  402dde:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  402de0:	4b56      	ldr	r3, [pc, #344]	; (402f3c <udc_process_setup+0x230>)
  402de2:	681b      	ldr	r3, [r3, #0]
  402de4:	7c5b      	ldrb	r3, [r3, #17]
  402de6:	4293      	cmp	r3, r2
  402de8:	d9a5      	bls.n	402d36 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  402dea:	4b54      	ldr	r3, [pc, #336]	; (402f3c <udc_process_setup+0x230>)
  402dec:	685b      	ldr	r3, [r3, #4]
  402dee:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  402df2:	8841      	ldrh	r1, [r0, #2]
  402df4:	4b50      	ldr	r3, [pc, #320]	; (402f38 <udc_process_setup+0x22c>)
  402df6:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  402df8:	4b4d      	ldr	r3, [pc, #308]	; (402f30 <udc_process_setup+0x224>)
  402dfa:	689b      	ldr	r3, [r3, #8]
  402dfc:	2202      	movs	r2, #2
  402dfe:	705a      	strb	r2, [r3, #1]
  402e00:	e7e4      	b.n	402dcc <udc_process_setup+0xc0>
		if (udc_config.conf_bos == NULL) {
  402e02:	4b4e      	ldr	r3, [pc, #312]	; (402f3c <udc_process_setup+0x230>)
  402e04:	6898      	ldr	r0, [r3, #8]
  402e06:	2800      	cmp	r0, #0
  402e08:	d095      	beq.n	402d36 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  402e0a:	8841      	ldrh	r1, [r0, #2]
  402e0c:	4b4a      	ldr	r3, [pc, #296]	; (402f38 <udc_process_setup+0x22c>)
  402e0e:	4798      	blx	r3
  402e10:	e7dc      	b.n	402dcc <udc_process_setup+0xc0>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  402e12:	b2d2      	uxtb	r2, r2
  402e14:	2a01      	cmp	r2, #1
  402e16:	d01b      	beq.n	402e50 <udc_process_setup+0x144>
  402e18:	b1aa      	cbz	r2, 402e46 <udc_process_setup+0x13a>
  402e1a:	2a02      	cmp	r2, #2
  402e1c:	d184      	bne.n	402d28 <udc_process_setup+0x1c>
		str = udc_string_product_name;
  402e1e:	4a48      	ldr	r2, [pc, #288]	; (402f40 <udc_process_setup+0x234>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  402e20:	240a      	movs	r4, #10
  402e22:	3a01      	subs	r2, #1
  402e24:	4947      	ldr	r1, [pc, #284]	; (402f44 <udc_process_setup+0x238>)
  402e26:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  402e28:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  402e2c:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
  402e30:	3301      	adds	r3, #1
  402e32:	b2db      	uxtb	r3, r3
  402e34:	42a3      	cmp	r3, r4
  402e36:	d3f7      	bcc.n	402e28 <udc_process_setup+0x11c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  402e38:	0061      	lsls	r1, r4, #1
  402e3a:	3102      	adds	r1, #2
  402e3c:	4841      	ldr	r0, [pc, #260]	; (402f44 <udc_process_setup+0x238>)
  402e3e:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  402e40:	4b3d      	ldr	r3, [pc, #244]	; (402f38 <udc_process_setup+0x22c>)
  402e42:	4798      	blx	r3
  402e44:	e7c2      	b.n	402dcc <udc_process_setup+0xc0>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  402e46:	2104      	movs	r1, #4
  402e48:	483f      	ldr	r0, [pc, #252]	; (402f48 <udc_process_setup+0x23c>)
  402e4a:	4b3b      	ldr	r3, [pc, #236]	; (402f38 <udc_process_setup+0x22c>)
  402e4c:	4798      	blx	r3
  402e4e:	e7bd      	b.n	402dcc <udc_process_setup+0xc0>
		str = udc_string_manufacturer_name;
  402e50:	4a3e      	ldr	r2, [pc, #248]	; (402f4c <udc_process_setup+0x240>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  402e52:	2417      	movs	r4, #23
  402e54:	e7e5      	b.n	402e22 <udc_process_setup+0x116>
	if (udd_g_ctrlreq.req.wLength != 1) {
  402e56:	2a01      	cmp	r2, #1
  402e58:	f47f af6d 	bne.w	402d36 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
  402e5c:	2101      	movs	r1, #1
  402e5e:	483c      	ldr	r0, [pc, #240]	; (402f50 <udc_process_setup+0x244>)
  402e60:	4b35      	ldr	r3, [pc, #212]	; (402f38 <udc_process_setup+0x22c>)
  402e62:	4798      	blx	r3
  402e64:	e051      	b.n	402f0a <udc_process_setup+0x1fe>
			switch (udd_g_ctrlreq.req.bRequest) {
  402e66:	4932      	ldr	r1, [pc, #200]	; (402f30 <udc_process_setup+0x224>)
  402e68:	7849      	ldrb	r1, [r1, #1]
  402e6a:	290a      	cmp	r1, #10
  402e6c:	d181      	bne.n	402d72 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  402e6e:	2a01      	cmp	r2, #1
  402e70:	f040 80cd 	bne.w	40300e <udc_process_setup+0x302>
	if (!udc_num_configuration) {
  402e74:	4b36      	ldr	r3, [pc, #216]	; (402f50 <udc_process_setup+0x244>)
  402e76:	781b      	ldrb	r3, [r3, #0]
  402e78:	2b00      	cmp	r3, #0
  402e7a:	f000 80c8 	beq.w	40300e <udc_process_setup+0x302>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  402e7e:	4b2c      	ldr	r3, [pc, #176]	; (402f30 <udc_process_setup+0x224>)
  402e80:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  402e82:	4b34      	ldr	r3, [pc, #208]	; (402f54 <udc_process_setup+0x248>)
  402e84:	681d      	ldr	r5, [r3, #0]
  402e86:	682b      	ldr	r3, [r5, #0]
  402e88:	791b      	ldrb	r3, [r3, #4]
  402e8a:	42a3      	cmp	r3, r4
  402e8c:	f240 80bf 	bls.w	40300e <udc_process_setup+0x302>
	if (!udc_update_iface_desc(iface_num, 0)) {
  402e90:	2100      	movs	r1, #0
  402e92:	4620      	mov	r0, r4
  402e94:	4b30      	ldr	r3, [pc, #192]	; (402f58 <udc_process_setup+0x24c>)
  402e96:	4798      	blx	r3
  402e98:	2800      	cmp	r0, #0
  402e9a:	f43f af45 	beq.w	402d28 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  402e9e:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  402ea0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  402ea4:	68db      	ldr	r3, [r3, #12]
  402ea6:	4798      	blx	r3
  402ea8:	4b2c      	ldr	r3, [pc, #176]	; (402f5c <udc_process_setup+0x250>)
  402eaa:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  402eac:	2101      	movs	r1, #1
  402eae:	4618      	mov	r0, r3
  402eb0:	4b21      	ldr	r3, [pc, #132]	; (402f38 <udc_process_setup+0x22c>)
  402eb2:	4798      	blx	r3
  402eb4:	e029      	b.n	402f0a <udc_process_setup+0x1fe>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  402eb6:	2a02      	cmp	r2, #2
  402eb8:	f47f af3d 	bne.w	402d36 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  402ebc:	4b1c      	ldr	r3, [pc, #112]	; (402f30 <udc_process_setup+0x224>)
  402ebe:	7918      	ldrb	r0, [r3, #4]
  402ec0:	4b27      	ldr	r3, [pc, #156]	; (402f60 <udc_process_setup+0x254>)
  402ec2:	4798      	blx	r3
  402ec4:	4b27      	ldr	r3, [pc, #156]	; (402f64 <udc_process_setup+0x258>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  402ec6:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  402ec8:	2102      	movs	r1, #2
  402eca:	4618      	mov	r0, r3
  402ecc:	4b1a      	ldr	r3, [pc, #104]	; (402f38 <udc_process_setup+0x22c>)
  402ece:	4798      	blx	r3
  402ed0:	e01b      	b.n	402f0a <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  402ed2:	f013 031f 	ands.w	r3, r3, #31
  402ed6:	f040 8083 	bne.w	402fe0 <udc_process_setup+0x2d4>
			switch (udd_g_ctrlreq.req.bRequest) {
  402eda:	4a15      	ldr	r2, [pc, #84]	; (402f30 <udc_process_setup+0x224>)
  402edc:	7852      	ldrb	r2, [r2, #1]
  402ede:	3a01      	subs	r2, #1
  402ee0:	2a08      	cmp	r2, #8
  402ee2:	d87d      	bhi.n	402fe0 <udc_process_setup+0x2d4>
  402ee4:	e8df f012 	tbh	[pc, r2, lsl #1]
  402ee8:	007c0013 	.word	0x007c0013
  402eec:	007c00d6 	.word	0x007c00d6
  402ef0:	007c0009 	.word	0x007c0009
  402ef4:	007c007c 	.word	0x007c007c
  402ef8:	0042      	.short	0x0042
	if (udd_g_ctrlreq.req.wLength) {
  402efa:	4b0d      	ldr	r3, [pc, #52]	; (402f30 <udc_process_setup+0x224>)
  402efc:	88db      	ldrh	r3, [r3, #6]
  402efe:	2b00      	cmp	r3, #0
  402f00:	f47f af19 	bne.w	402d36 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
  402f04:	4a18      	ldr	r2, [pc, #96]	; (402f68 <udc_process_setup+0x25c>)
  402f06:	4b0a      	ldr	r3, [pc, #40]	; (402f30 <udc_process_setup+0x224>)
  402f08:	611a      	str	r2, [r3, #16]
			return true;
  402f0a:	2301      	movs	r3, #1
  402f0c:	e71b      	b.n	402d46 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  402f0e:	4b08      	ldr	r3, [pc, #32]	; (402f30 <udc_process_setup+0x224>)
  402f10:	88db      	ldrh	r3, [r3, #6]
  402f12:	2b00      	cmp	r3, #0
  402f14:	f47f af0f 	bne.w	402d36 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  402f18:	4b05      	ldr	r3, [pc, #20]	; (402f30 <udc_process_setup+0x224>)
  402f1a:	885b      	ldrh	r3, [r3, #2]
  402f1c:	2b01      	cmp	r3, #1
  402f1e:	f47f af0a 	bne.w	402d36 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  402f22:	4a04      	ldr	r2, [pc, #16]	; (402f34 <udc_process_setup+0x228>)
  402f24:	8813      	ldrh	r3, [r2, #0]
  402f26:	f023 0302 	bic.w	r3, r3, #2
  402f2a:	8013      	strh	r3, [r2, #0]
  402f2c:	e7ed      	b.n	402f0a <udc_process_setup+0x1fe>
  402f2e:	bf00      	nop
  402f30:	20400f10 	.word	0x20400f10
  402f34:	20400b96 	.word	0x20400b96
  402f38:	004040c5 	.word	0x004040c5
  402f3c:	204000ac 	.word	0x204000ac
  402f40:	2040016c 	.word	0x2040016c
  402f44:	20400120 	.word	0x20400120
  402f48:	20400150 	.word	0x20400150
  402f4c:	20400154 	.word	0x20400154
  402f50:	20400ba0 	.word	0x20400ba0
  402f54:	20400ba4 	.word	0x20400ba4
  402f58:	00402b3d 	.word	0x00402b3d
  402f5c:	20400b9c 	.word	0x20400b9c
  402f60:	0040412d 	.word	0x0040412d
  402f64:	20400b98 	.word	0x20400b98
  402f68:	00402b25 	.word	0x00402b25
	if (udd_g_ctrlreq.req.wLength) {
  402f6c:	4b6f      	ldr	r3, [pc, #444]	; (40312c <udc_process_setup+0x420>)
  402f6e:	88db      	ldrh	r3, [r3, #6]
  402f70:	2b00      	cmp	r3, #0
  402f72:	f47f aee0 	bne.w	402d36 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
  402f76:	4b6e      	ldr	r3, [pc, #440]	; (403130 <udc_process_setup+0x424>)
  402f78:	4798      	blx	r3
  402f7a:	2800      	cmp	r0, #0
  402f7c:	f43f aed4 	beq.w	402d28 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  402f80:	4b6a      	ldr	r3, [pc, #424]	; (40312c <udc_process_setup+0x420>)
  402f82:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  402f84:	4b6b      	ldr	r3, [pc, #428]	; (403134 <udc_process_setup+0x428>)
  402f86:	681b      	ldr	r3, [r3, #0]
  402f88:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  402f8a:	429a      	cmp	r2, r3
  402f8c:	f73f aecc 	bgt.w	402d28 <udc_process_setup+0x1c>
	udc_reset();
  402f90:	4b69      	ldr	r3, [pc, #420]	; (403138 <udc_process_setup+0x42c>)
  402f92:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  402f94:	4b65      	ldr	r3, [pc, #404]	; (40312c <udc_process_setup+0x420>)
  402f96:	789a      	ldrb	r2, [r3, #2]
  402f98:	4b68      	ldr	r3, [pc, #416]	; (40313c <udc_process_setup+0x430>)
  402f9a:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  402f9c:	2a00      	cmp	r2, #0
  402f9e:	d0b4      	beq.n	402f0a <udc_process_setup+0x1fe>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  402fa0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  402fa4:	4413      	add	r3, r2
  402fa6:	4a63      	ldr	r2, [pc, #396]	; (403134 <udc_process_setup+0x428>)
  402fa8:	6852      	ldr	r2, [r2, #4]
  402faa:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  402fae:	4964      	ldr	r1, [pc, #400]	; (403140 <udc_process_setup+0x434>)
  402fb0:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402fb2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  402fb6:	791b      	ldrb	r3, [r3, #4]
  402fb8:	2b00      	cmp	r3, #0
  402fba:	d0a6      	beq.n	402f0a <udc_process_setup+0x1fe>
  402fbc:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  402fbe:	4626      	mov	r6, r4
  402fc0:	4d60      	ldr	r5, [pc, #384]	; (403144 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402fc2:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  402fc4:	4631      	mov	r1, r6
  402fc6:	4620      	mov	r0, r4
  402fc8:	47a8      	blx	r5
  402fca:	2800      	cmp	r0, #0
  402fcc:	f43f aeac 	beq.w	402d28 <udc_process_setup+0x1c>
			iface_num++) {
  402fd0:	3401      	adds	r4, #1
  402fd2:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402fd4:	683b      	ldr	r3, [r7, #0]
  402fd6:	681b      	ldr	r3, [r3, #0]
  402fd8:	791b      	ldrb	r3, [r3, #4]
  402fda:	42a3      	cmp	r3, r4
  402fdc:	d8f2      	bhi.n	402fc4 <udc_process_setup+0x2b8>
  402fde:	e794      	b.n	402f0a <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  402fe0:	2b01      	cmp	r3, #1
  402fe2:	d00a      	beq.n	402ffa <udc_process_setup+0x2ee>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  402fe4:	2b02      	cmp	r3, #2
  402fe6:	f47f ae9f 	bne.w	402d28 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  402fea:	4b50      	ldr	r3, [pc, #320]	; (40312c <udc_process_setup+0x420>)
  402fec:	785b      	ldrb	r3, [r3, #1]
  402fee:	2b01      	cmp	r3, #1
  402ff0:	d02b      	beq.n	40304a <udc_process_setup+0x33e>
  402ff2:	2b03      	cmp	r3, #3
  402ff4:	d039      	beq.n	40306a <udc_process_setup+0x35e>
	return false;
  402ff6:	2300      	movs	r3, #0
  402ff8:	e04d      	b.n	403096 <udc_process_setup+0x38a>
			switch (udd_g_ctrlreq.req.bRequest) {
  402ffa:	4a4c      	ldr	r2, [pc, #304]	; (40312c <udc_process_setup+0x420>)
  402ffc:	7852      	ldrb	r2, [r2, #1]
  402ffe:	2a0b      	cmp	r2, #11
  403000:	d1f0      	bne.n	402fe4 <udc_process_setup+0x2d8>
	if (udd_g_ctrlreq.req.wLength) {
  403002:	4b4a      	ldr	r3, [pc, #296]	; (40312c <udc_process_setup+0x420>)
  403004:	88db      	ldrh	r3, [r3, #6]
  403006:	b913      	cbnz	r3, 40300e <udc_process_setup+0x302>
	if (!udc_num_configuration) {
  403008:	4b4c      	ldr	r3, [pc, #304]	; (40313c <udc_process_setup+0x430>)
  40300a:	781b      	ldrb	r3, [r3, #0]
  40300c:	b973      	cbnz	r3, 40302c <udc_process_setup+0x320>
	if (0 == udc_num_configuration) {
  40300e:	4b4b      	ldr	r3, [pc, #300]	; (40313c <udc_process_setup+0x430>)
  403010:	781b      	ldrb	r3, [r3, #0]
  403012:	2b00      	cmp	r3, #0
  403014:	f000 8088 	beq.w	403128 <udc_process_setup+0x41c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  403018:	4b44      	ldr	r3, [pc, #272]	; (40312c <udc_process_setup+0x420>)
  40301a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40301c:	4b48      	ldr	r3, [pc, #288]	; (403140 <udc_process_setup+0x434>)
  40301e:	681d      	ldr	r5, [r3, #0]
  403020:	682b      	ldr	r3, [r5, #0]
  403022:	791b      	ldrb	r3, [r3, #4]
  403024:	42a3      	cmp	r3, r4
  403026:	d83a      	bhi.n	40309e <udc_process_setup+0x392>
	return false;
  403028:	2300      	movs	r3, #0
  40302a:	e68c      	b.n	402d46 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40302c:	4b3f      	ldr	r3, [pc, #252]	; (40312c <udc_process_setup+0x420>)
  40302e:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  403030:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  403032:	4620      	mov	r0, r4
  403034:	4b44      	ldr	r3, [pc, #272]	; (403148 <udc_process_setup+0x43c>)
  403036:	4798      	blx	r3
  403038:	2800      	cmp	r0, #0
  40303a:	f43f ae75 	beq.w	402d28 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  40303e:	b2e9      	uxtb	r1, r5
  403040:	4620      	mov	r0, r4
  403042:	4b40      	ldr	r3, [pc, #256]	; (403144 <udc_process_setup+0x438>)
  403044:	4798      	blx	r3
  403046:	4603      	mov	r3, r0
  403048:	e025      	b.n	403096 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength) {
  40304a:	4b38      	ldr	r3, [pc, #224]	; (40312c <udc_process_setup+0x420>)
  40304c:	88db      	ldrh	r3, [r3, #6]
  40304e:	2b00      	cmp	r3, #0
  403050:	f47f ae71 	bne.w	402d36 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  403054:	4b35      	ldr	r3, [pc, #212]	; (40312c <udc_process_setup+0x420>)
  403056:	885b      	ldrh	r3, [r3, #2]
  403058:	2b00      	cmp	r3, #0
  40305a:	f47f ae6c 	bne.w	402d36 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  40305e:	4b33      	ldr	r3, [pc, #204]	; (40312c <udc_process_setup+0x420>)
  403060:	7918      	ldrb	r0, [r3, #4]
  403062:	4b3a      	ldr	r3, [pc, #232]	; (40314c <udc_process_setup+0x440>)
  403064:	4798      	blx	r3
  403066:	4603      	mov	r3, r0
  403068:	e015      	b.n	403096 <udc_process_setup+0x38a>
	if (udd_g_ctrlreq.req.wLength) {
  40306a:	4b30      	ldr	r3, [pc, #192]	; (40312c <udc_process_setup+0x420>)
  40306c:	88db      	ldrh	r3, [r3, #6]
  40306e:	2b00      	cmp	r3, #0
  403070:	f47f ae61 	bne.w	402d36 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  403074:	4b2d      	ldr	r3, [pc, #180]	; (40312c <udc_process_setup+0x420>)
  403076:	885b      	ldrh	r3, [r3, #2]
  403078:	2b00      	cmp	r3, #0
  40307a:	f47f ae5c 	bne.w	402d36 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  40307e:	4c2b      	ldr	r4, [pc, #172]	; (40312c <udc_process_setup+0x420>)
  403080:	7920      	ldrb	r0, [r4, #4]
  403082:	4b33      	ldr	r3, [pc, #204]	; (403150 <udc_process_setup+0x444>)
  403084:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  403086:	7920      	ldrb	r0, [r4, #4]
  403088:	4b32      	ldr	r3, [pc, #200]	; (403154 <udc_process_setup+0x448>)
  40308a:	4798      	blx	r3
  40308c:	4603      	mov	r3, r0
  40308e:	e002      	b.n	403096 <udc_process_setup+0x38a>
		return false;
  403090:	2300      	movs	r3, #0
  403092:	e000      	b.n	403096 <udc_process_setup+0x38a>
				return udc_req_std_dev_set_feature();
  403094:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  403096:	2b00      	cmp	r3, #0
  403098:	f47f ae55 	bne.w	402d46 <udc_process_setup+0x3a>
  40309c:	e644      	b.n	402d28 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  40309e:	2100      	movs	r1, #0
  4030a0:	4620      	mov	r0, r4
  4030a2:	4b2d      	ldr	r3, [pc, #180]	; (403158 <udc_process_setup+0x44c>)
  4030a4:	4798      	blx	r3
  4030a6:	2800      	cmp	r0, #0
  4030a8:	f43f ae45 	beq.w	402d36 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4030ac:	686b      	ldr	r3, [r5, #4]
  4030ae:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4030b2:	68eb      	ldr	r3, [r5, #12]
  4030b4:	4798      	blx	r3
  4030b6:	4601      	mov	r1, r0
  4030b8:	4620      	mov	r0, r4
  4030ba:	4b27      	ldr	r3, [pc, #156]	; (403158 <udc_process_setup+0x44c>)
  4030bc:	4798      	blx	r3
  4030be:	2800      	cmp	r0, #0
  4030c0:	f43f ae39 	beq.w	402d36 <udc_process_setup+0x2a>
	return udi_api->setup();
  4030c4:	68ab      	ldr	r3, [r5, #8]
  4030c6:	4798      	blx	r3
		if (udc_req_iface()) {
  4030c8:	4603      	mov	r3, r0
  4030ca:	2800      	cmp	r0, #0
  4030cc:	f47f ae3b 	bne.w	402d46 <udc_process_setup+0x3a>
  4030d0:	e631      	b.n	402d36 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  4030d2:	4b1a      	ldr	r3, [pc, #104]	; (40313c <udc_process_setup+0x430>)
  4030d4:	781b      	ldrb	r3, [r3, #0]
  4030d6:	b30b      	cbz	r3, 40311c <udc_process_setup+0x410>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4030d8:	4b19      	ldr	r3, [pc, #100]	; (403140 <udc_process_setup+0x434>)
  4030da:	681a      	ldr	r2, [r3, #0]
  4030dc:	6813      	ldr	r3, [r2, #0]
  4030de:	791b      	ldrb	r3, [r3, #4]
  4030e0:	b1f3      	cbz	r3, 403120 <udc_process_setup+0x414>
  4030e2:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4030e4:	4e1c      	ldr	r6, [pc, #112]	; (403158 <udc_process_setup+0x44c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4030e6:	4f16      	ldr	r7, [pc, #88]	; (403140 <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  4030e8:	6853      	ldr	r3, [r2, #4]
  4030ea:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4030ee:	68eb      	ldr	r3, [r5, #12]
  4030f0:	4798      	blx	r3
  4030f2:	4601      	mov	r1, r0
  4030f4:	4620      	mov	r0, r4
  4030f6:	47b0      	blx	r6
  4030f8:	4603      	mov	r3, r0
  4030fa:	2800      	cmp	r0, #0
  4030fc:	f43f ae23 	beq.w	402d46 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  403100:	68ab      	ldr	r3, [r5, #8]
  403102:	4798      	blx	r3
  403104:	4603      	mov	r3, r0
  403106:	2800      	cmp	r0, #0
  403108:	f47f ae1d 	bne.w	402d46 <udc_process_setup+0x3a>
			iface_num++) {
  40310c:	3401      	adds	r4, #1
  40310e:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403110:	683a      	ldr	r2, [r7, #0]
  403112:	6811      	ldr	r1, [r2, #0]
  403114:	7909      	ldrb	r1, [r1, #4]
  403116:	42a1      	cmp	r1, r4
  403118:	d8e6      	bhi.n	4030e8 <udc_process_setup+0x3dc>
  40311a:	e614      	b.n	402d46 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  40311c:	2300      	movs	r3, #0
  40311e:	e612      	b.n	402d46 <udc_process_setup+0x3a>
	return false;
  403120:	2300      	movs	r3, #0
  403122:	e610      	b.n	402d46 <udc_process_setup+0x3a>
			return false; // Error from USB host
  403124:	2300      	movs	r3, #0
  403126:	e60e      	b.n	402d46 <udc_process_setup+0x3a>
	return false;
  403128:	2300      	movs	r3, #0
  40312a:	e60c      	b.n	402d46 <udc_process_setup+0x3a>
  40312c:	20400f10 	.word	0x20400f10
  403130:	004040a5 	.word	0x004040a5
  403134:	204000ac 	.word	0x204000ac
  403138:	00402c85 	.word	0x00402c85
  40313c:	20400ba0 	.word	0x20400ba0
  403140:	20400ba4 	.word	0x20400ba4
  403144:	00402c1d 	.word	0x00402c1d
  403148:	00402bb1 	.word	0x00402bb1
  40314c:	00404245 	.word	0x00404245
  403150:	00404625 	.word	0x00404625
  403154:	00404141 	.word	0x00404141
  403158:	00402b3d 	.word	0x00402b3d

0040315c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40315c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40315e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  403162:	d03a      	beq.n	4031da <pio_set_peripheral+0x7e>
  403164:	d813      	bhi.n	40318e <pio_set_peripheral+0x32>
  403166:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40316a:	d025      	beq.n	4031b8 <pio_set_peripheral+0x5c>
  40316c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  403170:	d10a      	bne.n	403188 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403172:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403174:	4313      	orrs	r3, r2
  403176:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403178:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40317a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40317c:	400b      	ands	r3, r1
  40317e:	ea23 0302 	bic.w	r3, r3, r2
  403182:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403184:	6042      	str	r2, [r0, #4]
  403186:	4770      	bx	lr
	switch (ul_type) {
  403188:	2900      	cmp	r1, #0
  40318a:	d1fb      	bne.n	403184 <pio_set_peripheral+0x28>
  40318c:	4770      	bx	lr
  40318e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  403192:	d021      	beq.n	4031d8 <pio_set_peripheral+0x7c>
  403194:	d809      	bhi.n	4031aa <pio_set_peripheral+0x4e>
  403196:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40319a:	d1f3      	bne.n	403184 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40319c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40319e:	4313      	orrs	r3, r2
  4031a0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4031a2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4031a4:	4313      	orrs	r3, r2
  4031a6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4031a8:	e7ec      	b.n	403184 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4031aa:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4031ae:	d013      	beq.n	4031d8 <pio_set_peripheral+0x7c>
  4031b0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4031b4:	d010      	beq.n	4031d8 <pio_set_peripheral+0x7c>
  4031b6:	e7e5      	b.n	403184 <pio_set_peripheral+0x28>
{
  4031b8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4031ba:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4031bc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4031be:	43d3      	mvns	r3, r2
  4031c0:	4021      	ands	r1, r4
  4031c2:	461c      	mov	r4, r3
  4031c4:	4019      	ands	r1, r3
  4031c6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4031c8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4031ca:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4031cc:	400b      	ands	r3, r1
  4031ce:	4023      	ands	r3, r4
  4031d0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4031d2:	6042      	str	r2, [r0, #4]
}
  4031d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4031d8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4031da:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4031dc:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4031de:	400b      	ands	r3, r1
  4031e0:	ea23 0302 	bic.w	r3, r3, r2
  4031e4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4031e6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4031e8:	4313      	orrs	r3, r2
  4031ea:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4031ec:	e7ca      	b.n	403184 <pio_set_peripheral+0x28>

004031ee <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4031ee:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4031f0:	f012 0f01 	tst.w	r2, #1
  4031f4:	d10d      	bne.n	403212 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4031f6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4031f8:	f012 0f0a 	tst.w	r2, #10
  4031fc:	d00b      	beq.n	403216 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4031fe:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  403200:	f012 0f02 	tst.w	r2, #2
  403204:	d109      	bne.n	40321a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  403206:	f012 0f08 	tst.w	r2, #8
  40320a:	d008      	beq.n	40321e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40320c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  403210:	e005      	b.n	40321e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  403212:	6641      	str	r1, [r0, #100]	; 0x64
  403214:	e7f0      	b.n	4031f8 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  403216:	6241      	str	r1, [r0, #36]	; 0x24
  403218:	e7f2      	b.n	403200 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40321a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40321e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  403220:	6001      	str	r1, [r0, #0]
  403222:	4770      	bx	lr

00403224 <pio_set_output>:
{
  403224:	b410      	push	{r4}
  403226:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  403228:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40322a:	b94c      	cbnz	r4, 403240 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40322c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40322e:	b14b      	cbz	r3, 403244 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  403230:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  403232:	b94a      	cbnz	r2, 403248 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  403234:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  403236:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  403238:	6001      	str	r1, [r0, #0]
}
  40323a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40323e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  403240:	6641      	str	r1, [r0, #100]	; 0x64
  403242:	e7f4      	b.n	40322e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  403244:	6541      	str	r1, [r0, #84]	; 0x54
  403246:	e7f4      	b.n	403232 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  403248:	6301      	str	r1, [r0, #48]	; 0x30
  40324a:	e7f4      	b.n	403236 <pio_set_output+0x12>

0040324c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40324c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40324e:	4770      	bx	lr

00403250 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403250:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  403252:	4770      	bx	lr

00403254 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403254:	4b05      	ldr	r3, [pc, #20]	; (40326c <pio_set_pin_low+0x18>)
  403256:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  40325a:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40325c:	f000 001f 	and.w	r0, r0, #31
  403260:	2201      	movs	r2, #1
  403262:	fa02 f000 	lsl.w	r0, r2, r0
  403266:	6358      	str	r0, [r3, #52]	; 0x34
  403268:	4770      	bx	lr
  40326a:	bf00      	nop
  40326c:	00200707 	.word	0x00200707

00403270 <pio_configure_pin>:
{
  403270:	b570      	push	{r4, r5, r6, lr}
  403272:	b082      	sub	sp, #8
  403274:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403276:	4c46      	ldr	r4, [pc, #280]	; (403390 <pio_configure_pin+0x120>)
  403278:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  40327c:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40327e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  403282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403286:	d059      	beq.n	40333c <pio_configure_pin+0xcc>
  403288:	d80a      	bhi.n	4032a0 <pio_configure_pin+0x30>
  40328a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40328e:	d02f      	beq.n	4032f0 <pio_configure_pin+0x80>
  403290:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403294:	d03f      	beq.n	403316 <pio_configure_pin+0xa6>
  403296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40329a:	d016      	beq.n	4032ca <pio_configure_pin+0x5a>
		return 0;
  40329c:	2000      	movs	r0, #0
  40329e:	e012      	b.n	4032c6 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  4032a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4032a4:	d05d      	beq.n	403362 <pio_configure_pin+0xf2>
  4032a6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4032aa:	d05a      	beq.n	403362 <pio_configure_pin+0xf2>
  4032ac:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4032b0:	d1f4      	bne.n	40329c <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4032b2:	f000 011f 	and.w	r1, r0, #31
  4032b6:	2601      	movs	r6, #1
  4032b8:	462a      	mov	r2, r5
  4032ba:	fa06 f101 	lsl.w	r1, r6, r1
  4032be:	4620      	mov	r0, r4
  4032c0:	4b34      	ldr	r3, [pc, #208]	; (403394 <pio_configure_pin+0x124>)
  4032c2:	4798      	blx	r3
	return 1;
  4032c4:	4630      	mov	r0, r6
}
  4032c6:	b002      	add	sp, #8
  4032c8:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4032ca:	f000 001f 	and.w	r0, r0, #31
  4032ce:	2601      	movs	r6, #1
  4032d0:	4086      	lsls	r6, r0
  4032d2:	4632      	mov	r2, r6
  4032d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032d8:	4620      	mov	r0, r4
  4032da:	4b2f      	ldr	r3, [pc, #188]	; (403398 <pio_configure_pin+0x128>)
  4032dc:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4032de:	f015 0f01 	tst.w	r5, #1
  4032e2:	d102      	bne.n	4032ea <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4032e4:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4032e6:	2001      	movs	r0, #1
  4032e8:	e7ed      	b.n	4032c6 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4032ea:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4032ec:	2001      	movs	r0, #1
  4032ee:	e7ea      	b.n	4032c6 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4032f0:	f000 001f 	and.w	r0, r0, #31
  4032f4:	2601      	movs	r6, #1
  4032f6:	4086      	lsls	r6, r0
  4032f8:	4632      	mov	r2, r6
  4032fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4032fe:	4620      	mov	r0, r4
  403300:	4b25      	ldr	r3, [pc, #148]	; (403398 <pio_configure_pin+0x128>)
  403302:	4798      	blx	r3
	if (ul_pull_up_enable) {
  403304:	f015 0f01 	tst.w	r5, #1
  403308:	d102      	bne.n	403310 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  40330a:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40330c:	2001      	movs	r0, #1
  40330e:	e7da      	b.n	4032c6 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  403310:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  403312:	2001      	movs	r0, #1
  403314:	e7d7      	b.n	4032c6 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  403316:	f000 001f 	and.w	r0, r0, #31
  40331a:	2601      	movs	r6, #1
  40331c:	4086      	lsls	r6, r0
  40331e:	4632      	mov	r2, r6
  403320:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403324:	4620      	mov	r0, r4
  403326:	4b1c      	ldr	r3, [pc, #112]	; (403398 <pio_configure_pin+0x128>)
  403328:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40332a:	f015 0f01 	tst.w	r5, #1
  40332e:	d102      	bne.n	403336 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  403330:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  403332:	2001      	movs	r0, #1
  403334:	e7c7      	b.n	4032c6 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  403336:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  403338:	2001      	movs	r0, #1
  40333a:	e7c4      	b.n	4032c6 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40333c:	f000 001f 	and.w	r0, r0, #31
  403340:	2601      	movs	r6, #1
  403342:	4086      	lsls	r6, r0
  403344:	4632      	mov	r2, r6
  403346:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40334a:	4620      	mov	r0, r4
  40334c:	4b12      	ldr	r3, [pc, #72]	; (403398 <pio_configure_pin+0x128>)
  40334e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  403350:	f015 0f01 	tst.w	r5, #1
  403354:	d102      	bne.n	40335c <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  403356:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  403358:	2001      	movs	r0, #1
  40335a:	e7b4      	b.n	4032c6 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40335c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40335e:	2001      	movs	r0, #1
  403360:	e7b1      	b.n	4032c6 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  403362:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  403366:	f000 011f 	and.w	r1, r0, #31
  40336a:	2601      	movs	r6, #1
  40336c:	ea05 0306 	and.w	r3, r5, r6
  403370:	9300      	str	r3, [sp, #0]
  403372:	f3c5 0380 	ubfx	r3, r5, #2, #1
  403376:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40337a:	bf14      	ite	ne
  40337c:	2200      	movne	r2, #0
  40337e:	2201      	moveq	r2, #1
  403380:	fa06 f101 	lsl.w	r1, r6, r1
  403384:	4620      	mov	r0, r4
  403386:	4c05      	ldr	r4, [pc, #20]	; (40339c <pio_configure_pin+0x12c>)
  403388:	47a0      	blx	r4
	return 1;
  40338a:	4630      	mov	r0, r6
		break;
  40338c:	e79b      	b.n	4032c6 <pio_configure_pin+0x56>
  40338e:	bf00      	nop
  403390:	00200707 	.word	0x00200707
  403394:	004031ef 	.word	0x004031ef
  403398:	0040315d 	.word	0x0040315d
  40339c:	00403225 	.word	0x00403225

004033a0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4033a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4033a4:	4604      	mov	r4, r0
  4033a6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4033a8:	4b0e      	ldr	r3, [pc, #56]	; (4033e4 <pio_handler_process+0x44>)
  4033aa:	4798      	blx	r3
  4033ac:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4033ae:	4620      	mov	r0, r4
  4033b0:	4b0d      	ldr	r3, [pc, #52]	; (4033e8 <pio_handler_process+0x48>)
  4033b2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4033b4:	4005      	ands	r5, r0
  4033b6:	d013      	beq.n	4033e0 <pio_handler_process+0x40>
  4033b8:	4c0c      	ldr	r4, [pc, #48]	; (4033ec <pio_handler_process+0x4c>)
  4033ba:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4033be:	e003      	b.n	4033c8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4033c0:	42b4      	cmp	r4, r6
  4033c2:	d00d      	beq.n	4033e0 <pio_handler_process+0x40>
  4033c4:	3410      	adds	r4, #16
		while (status != 0) {
  4033c6:	b15d      	cbz	r5, 4033e0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4033c8:	6820      	ldr	r0, [r4, #0]
  4033ca:	4540      	cmp	r0, r8
  4033cc:	d1f8      	bne.n	4033c0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4033ce:	6861      	ldr	r1, [r4, #4]
  4033d0:	4229      	tst	r1, r5
  4033d2:	d0f5      	beq.n	4033c0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4033d4:	68e3      	ldr	r3, [r4, #12]
  4033d6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4033d8:	6863      	ldr	r3, [r4, #4]
  4033da:	ea25 0503 	bic.w	r5, r5, r3
  4033de:	e7ef      	b.n	4033c0 <pio_handler_process+0x20>
  4033e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4033e4:	0040324d 	.word	0x0040324d
  4033e8:	00403251 	.word	0x00403251
  4033ec:	20400bac 	.word	0x20400bac

004033f0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4033f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4033f2:	210a      	movs	r1, #10
  4033f4:	4801      	ldr	r0, [pc, #4]	; (4033fc <PIOA_Handler+0xc>)
  4033f6:	4b02      	ldr	r3, [pc, #8]	; (403400 <PIOA_Handler+0x10>)
  4033f8:	4798      	blx	r3
  4033fa:	bd08      	pop	{r3, pc}
  4033fc:	400e0e00 	.word	0x400e0e00
  403400:	004033a1 	.word	0x004033a1

00403404 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403404:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  403406:	210b      	movs	r1, #11
  403408:	4801      	ldr	r0, [pc, #4]	; (403410 <PIOB_Handler+0xc>)
  40340a:	4b02      	ldr	r3, [pc, #8]	; (403414 <PIOB_Handler+0x10>)
  40340c:	4798      	blx	r3
  40340e:	bd08      	pop	{r3, pc}
  403410:	400e1000 	.word	0x400e1000
  403414:	004033a1 	.word	0x004033a1

00403418 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  403418:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40341a:	210c      	movs	r1, #12
  40341c:	4801      	ldr	r0, [pc, #4]	; (403424 <PIOC_Handler+0xc>)
  40341e:	4b02      	ldr	r3, [pc, #8]	; (403428 <PIOC_Handler+0x10>)
  403420:	4798      	blx	r3
  403422:	bd08      	pop	{r3, pc}
  403424:	400e1200 	.word	0x400e1200
  403428:	004033a1 	.word	0x004033a1

0040342c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40342c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40342e:	2110      	movs	r1, #16
  403430:	4801      	ldr	r0, [pc, #4]	; (403438 <PIOD_Handler+0xc>)
  403432:	4b02      	ldr	r3, [pc, #8]	; (40343c <PIOD_Handler+0x10>)
  403434:	4798      	blx	r3
  403436:	bd08      	pop	{r3, pc}
  403438:	400e1400 	.word	0x400e1400
  40343c:	004033a1 	.word	0x004033a1

00403440 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  403440:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  403442:	2111      	movs	r1, #17
  403444:	4801      	ldr	r0, [pc, #4]	; (40344c <PIOE_Handler+0xc>)
  403446:	4b02      	ldr	r3, [pc, #8]	; (403450 <PIOE_Handler+0x10>)
  403448:	4798      	blx	r3
  40344a:	bd08      	pop	{r3, pc}
  40344c:	400e1600 	.word	0x400e1600
  403450:	004033a1 	.word	0x004033a1

00403454 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  403454:	2803      	cmp	r0, #3
  403456:	d011      	beq.n	40347c <pmc_mck_set_division+0x28>
  403458:	2804      	cmp	r0, #4
  40345a:	d012      	beq.n	403482 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40345c:	2802      	cmp	r0, #2
  40345e:	bf0c      	ite	eq
  403460:	f44f 7180 	moveq.w	r1, #256	; 0x100
  403464:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  403466:	4a08      	ldr	r2, [pc, #32]	; (403488 <pmc_mck_set_division+0x34>)
  403468:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40346e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  403470:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403472:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403474:	f013 0f08 	tst.w	r3, #8
  403478:	d0fb      	beq.n	403472 <pmc_mck_set_division+0x1e>
}
  40347a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40347c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  403480:	e7f1      	b.n	403466 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  403482:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  403486:	e7ee      	b.n	403466 <pmc_mck_set_division+0x12>
  403488:	400e0600 	.word	0x400e0600

0040348c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40348c:	4a17      	ldr	r2, [pc, #92]	; (4034ec <pmc_switch_mck_to_pllack+0x60>)
  40348e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403494:	4318      	orrs	r0, r3
  403496:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403498:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40349a:	f013 0f08 	tst.w	r3, #8
  40349e:	d10a      	bne.n	4034b6 <pmc_switch_mck_to_pllack+0x2a>
  4034a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4034a4:	4911      	ldr	r1, [pc, #68]	; (4034ec <pmc_switch_mck_to_pllack+0x60>)
  4034a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4034a8:	f012 0f08 	tst.w	r2, #8
  4034ac:	d103      	bne.n	4034b6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4034ae:	3b01      	subs	r3, #1
  4034b0:	d1f9      	bne.n	4034a6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4034b2:	2001      	movs	r0, #1
  4034b4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4034b6:	4a0d      	ldr	r2, [pc, #52]	; (4034ec <pmc_switch_mck_to_pllack+0x60>)
  4034b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4034ba:	f023 0303 	bic.w	r3, r3, #3
  4034be:	f043 0302 	orr.w	r3, r3, #2
  4034c2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4034c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4034c6:	f013 0f08 	tst.w	r3, #8
  4034ca:	d10a      	bne.n	4034e2 <pmc_switch_mck_to_pllack+0x56>
  4034cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4034d0:	4906      	ldr	r1, [pc, #24]	; (4034ec <pmc_switch_mck_to_pllack+0x60>)
  4034d2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4034d4:	f012 0f08 	tst.w	r2, #8
  4034d8:	d105      	bne.n	4034e6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4034da:	3b01      	subs	r3, #1
  4034dc:	d1f9      	bne.n	4034d2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4034de:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4034e0:	4770      	bx	lr
	return 0;
  4034e2:	2000      	movs	r0, #0
  4034e4:	4770      	bx	lr
  4034e6:	2000      	movs	r0, #0
  4034e8:	4770      	bx	lr
  4034ea:	bf00      	nop
  4034ec:	400e0600 	.word	0x400e0600

004034f0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4034f0:	b9a0      	cbnz	r0, 40351c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4034f2:	480e      	ldr	r0, [pc, #56]	; (40352c <pmc_switch_mainck_to_xtal+0x3c>)
  4034f4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4034f6:	0209      	lsls	r1, r1, #8
  4034f8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4034fa:	4a0d      	ldr	r2, [pc, #52]	; (403530 <pmc_switch_mainck_to_xtal+0x40>)
  4034fc:	401a      	ands	r2, r3
  4034fe:	4b0d      	ldr	r3, [pc, #52]	; (403534 <pmc_switch_mainck_to_xtal+0x44>)
  403500:	4313      	orrs	r3, r2
  403502:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403504:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  403506:	4602      	mov	r2, r0
  403508:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40350a:	f013 0f01 	tst.w	r3, #1
  40350e:	d0fb      	beq.n	403508 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403510:	4a06      	ldr	r2, [pc, #24]	; (40352c <pmc_switch_mainck_to_xtal+0x3c>)
  403512:	6a11      	ldr	r1, [r2, #32]
  403514:	4b08      	ldr	r3, [pc, #32]	; (403538 <pmc_switch_mainck_to_xtal+0x48>)
  403516:	430b      	orrs	r3, r1
  403518:	6213      	str	r3, [r2, #32]
  40351a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40351c:	4903      	ldr	r1, [pc, #12]	; (40352c <pmc_switch_mainck_to_xtal+0x3c>)
  40351e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  403520:	4a06      	ldr	r2, [pc, #24]	; (40353c <pmc_switch_mainck_to_xtal+0x4c>)
  403522:	401a      	ands	r2, r3
  403524:	4b06      	ldr	r3, [pc, #24]	; (403540 <pmc_switch_mainck_to_xtal+0x50>)
  403526:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403528:	620b      	str	r3, [r1, #32]
  40352a:	4770      	bx	lr
  40352c:	400e0600 	.word	0x400e0600
  403530:	ffc8fffc 	.word	0xffc8fffc
  403534:	00370001 	.word	0x00370001
  403538:	01370000 	.word	0x01370000
  40353c:	fec8fffc 	.word	0xfec8fffc
  403540:	01370002 	.word	0x01370002

00403544 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  403544:	4b02      	ldr	r3, [pc, #8]	; (403550 <pmc_osc_is_ready_mainck+0xc>)
  403546:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403548:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40354c:	4770      	bx	lr
  40354e:	bf00      	nop
  403550:	400e0600 	.word	0x400e0600

00403554 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403554:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  403558:	4b01      	ldr	r3, [pc, #4]	; (403560 <pmc_disable_pllack+0xc>)
  40355a:	629a      	str	r2, [r3, #40]	; 0x28
  40355c:	4770      	bx	lr
  40355e:	bf00      	nop
  403560:	400e0600 	.word	0x400e0600

00403564 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403564:	4b02      	ldr	r3, [pc, #8]	; (403570 <pmc_is_locked_pllack+0xc>)
  403566:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403568:	f000 0002 	and.w	r0, r0, #2
  40356c:	4770      	bx	lr
  40356e:	bf00      	nop
  403570:	400e0600 	.word	0x400e0600

00403574 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  403574:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  403578:	4b05      	ldr	r3, [pc, #20]	; (403590 <pmc_enable_periph_clk+0x1c>)
  40357a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40357e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  403582:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  403586:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40358a:	2000      	movs	r0, #0
  40358c:	4770      	bx	lr
  40358e:	bf00      	nop
  403590:	400e0600 	.word	0x400e0600

00403594 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  403594:	4b02      	ldr	r3, [pc, #8]	; (4035a0 <pmc_is_wakeup_clocks_restored+0xc>)
  403596:	7818      	ldrb	r0, [r3, #0]
}
  403598:	f080 0001 	eor.w	r0, r0, #1
  40359c:	4770      	bx	lr
  40359e:	bf00      	nop
  4035a0:	20400c1c 	.word	0x20400c1c

004035a4 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_idle true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  4035a4:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  4035a6:	4601      	mov	r1, r0
  4035a8:	bb28      	cbnz	r0, 4035f6 <udd_sleep_mode+0x52>
  4035aa:	4b24      	ldr	r3, [pc, #144]	; (40363c <udd_sleep_mode+0x98>)
  4035ac:	781b      	ldrb	r3, [r3, #0]
  4035ae:	b91b      	cbnz	r3, 4035b8 <udd_sleep_mode+0x14>
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(USBHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  4035b0:	4b22      	ldr	r3, [pc, #136]	; (40363c <udd_sleep_mode+0x98>)
  4035b2:	7019      	strb	r1, [r3, #0]
}
  4035b4:	b002      	add	sp, #8
  4035b6:	4770      	bx	lr
	if(sleepmgr_locks[mode] == 0) {
  4035b8:	4b21      	ldr	r3, [pc, #132]	; (403640 <udd_sleep_mode+0x9c>)
  4035ba:	789b      	ldrb	r3, [r3, #2]
  4035bc:	b903      	cbnz	r3, 4035c0 <udd_sleep_mode+0x1c>
  4035be:	e7fe      	b.n	4035be <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4035c0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4035c4:	fab3 f383 	clz	r3, r3
  4035c8:	095b      	lsrs	r3, r3, #5
  4035ca:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4035cc:	b672      	cpsid	i
  4035ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4035d2:	2200      	movs	r2, #0
  4035d4:	4b1b      	ldr	r3, [pc, #108]	; (403644 <udd_sleep_mode+0xa0>)
  4035d6:	701a      	strb	r2, [r3, #0]
	return flags;
  4035d8:	9800      	ldr	r0, [sp, #0]
	--sleepmgr_locks[mode];
  4035da:	4a19      	ldr	r2, [pc, #100]	; (403640 <udd_sleep_mode+0x9c>)
  4035dc:	7893      	ldrb	r3, [r2, #2]
  4035de:	3b01      	subs	r3, #1
  4035e0:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  4035e2:	2800      	cmp	r0, #0
  4035e4:	d0e4      	beq.n	4035b0 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  4035e6:	2201      	movs	r2, #1
  4035e8:	4b16      	ldr	r3, [pc, #88]	; (403644 <udd_sleep_mode+0xa0>)
  4035ea:	701a      	strb	r2, [r3, #0]
  4035ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4035f0:	b662      	cpsie	i
  4035f2:	e7dd      	b.n	4035b0 <udd_sleep_mode+0xc>
  4035f4:	e7fe      	b.n	4035f4 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  4035f6:	4b11      	ldr	r3, [pc, #68]	; (40363c <udd_sleep_mode+0x98>)
  4035f8:	781b      	ldrb	r3, [r3, #0]
  4035fa:	2b00      	cmp	r3, #0
  4035fc:	d1d8      	bne.n	4035b0 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  4035fe:	4b10      	ldr	r3, [pc, #64]	; (403640 <udd_sleep_mode+0x9c>)
  403600:	789b      	ldrb	r3, [r3, #2]
  403602:	2bff      	cmp	r3, #255	; 0xff
  403604:	d0f6      	beq.n	4035f4 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403606:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40360a:	fab3 f383 	clz	r3, r3
  40360e:	095b      	lsrs	r3, r3, #5
  403610:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403612:	b672      	cpsid	i
  403614:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403618:	2200      	movs	r2, #0
  40361a:	4b0a      	ldr	r3, [pc, #40]	; (403644 <udd_sleep_mode+0xa0>)
  40361c:	701a      	strb	r2, [r3, #0]
	return flags;
  40361e:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  403620:	4a07      	ldr	r2, [pc, #28]	; (403640 <udd_sleep_mode+0x9c>)
  403622:	7893      	ldrb	r3, [r2, #2]
  403624:	3301      	adds	r3, #1
  403626:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  403628:	2800      	cmp	r0, #0
  40362a:	d0c1      	beq.n	4035b0 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  40362c:	2201      	movs	r2, #1
  40362e:	4b05      	ldr	r3, [pc, #20]	; (403644 <udd_sleep_mode+0xa0>)
  403630:	701a      	strb	r2, [r3, #0]
  403632:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403636:	b662      	cpsie	i
  403638:	e7ba      	b.n	4035b0 <udd_sleep_mode+0xc>
  40363a:	bf00      	nop
  40363c:	20400c1e 	.word	0x20400c1e
  403640:	20400f08 	.word	0x20400f08
  403644:	20400177 	.word	0x20400177

00403648 <udd_ctrl_init>:
	udd_enable_endpoint_interrupt(0);
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
  403648:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40364a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40364e:	fab3 f383 	clz	r3, r3
  403652:	095b      	lsrs	r3, r3, #5
  403654:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403656:	b672      	cpsid	i
  403658:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40365c:	2200      	movs	r2, #0
  40365e:	4b0c      	ldr	r3, [pc, #48]	; (403690 <udd_ctrl_init+0x48>)
  403660:	701a      	strb	r2, [r3, #0]
	return flags;
  403662:	9b01      	ldr	r3, [sp, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
  403664:	2101      	movs	r1, #1
  403666:	4a0b      	ldr	r2, [pc, #44]	; (403694 <udd_ctrl_init+0x4c>)
  403668:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  40366a:	b123      	cbz	r3, 403676 <udd_ctrl_init+0x2e>
		cpu_irq_enable();
  40366c:	4b08      	ldr	r3, [pc, #32]	; (403690 <udd_ctrl_init+0x48>)
  40366e:	7019      	strb	r1, [r3, #0]
  403670:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403674:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
  403676:	2202      	movs	r2, #2
  403678:	4b07      	ldr	r3, [pc, #28]	; (403698 <udd_ctrl_init+0x50>)
  40367a:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
  40367c:	4a07      	ldr	r2, [pc, #28]	; (40369c <udd_ctrl_init+0x54>)
  40367e:	2300      	movs	r3, #0
  403680:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  403682:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  403684:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  403686:	4a06      	ldr	r2, [pc, #24]	; (4036a0 <udd_ctrl_init+0x58>)
  403688:	7013      	strb	r3, [r2, #0]
}
  40368a:	b002      	add	sp, #8
  40368c:	4770      	bx	lr
  40368e:	bf00      	nop
  403690:	20400177 	.word	0x20400177
  403694:	40038220 	.word	0x40038220
  403698:	40038160 	.word	0x40038160
  40369c:	20400f10 	.word	0x20400f10
  4036a0:	20400c24 	.word	0x20400c24

004036a4 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4036a4:	2205      	movs	r2, #5
  4036a6:	4b03      	ldr	r3, [pc, #12]	; (4036b4 <udd_ctrl_stall_data+0x10>)
  4036a8:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  4036aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4036ae:	4b02      	ldr	r3, [pc, #8]	; (4036b8 <udd_ctrl_stall_data+0x14>)
  4036b0:	601a      	str	r2, [r3, #0]
  4036b2:	4770      	bx	lr
  4036b4:	20400c24 	.word	0x20400c24
  4036b8:	400381f0 	.word	0x400381f0

004036bc <udd_ctrl_send_zlp_in>:
}


static void udd_ctrl_send_zlp_in(void)
{
  4036bc:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  4036be:	2203      	movs	r2, #3
  4036c0:	4b0f      	ldr	r3, [pc, #60]	; (403700 <udd_ctrl_send_zlp_in+0x44>)
  4036c2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4036c4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4036c8:	fab3 f383 	clz	r3, r3
  4036cc:	095b      	lsrs	r3, r3, #5
  4036ce:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4036d0:	b672      	cpsid	i
  4036d2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4036d6:	2200      	movs	r2, #0
  4036d8:	4b0a      	ldr	r3, [pc, #40]	; (403704 <udd_ctrl_send_zlp_in+0x48>)
  4036da:	701a      	strb	r2, [r3, #0]
	return flags;
  4036dc:	9801      	ldr	r0, [sp, #4]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
  4036de:	490a      	ldr	r1, [pc, #40]	; (403708 <udd_ctrl_send_zlp_in+0x4c>)
  4036e0:	2201      	movs	r2, #1
  4036e2:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
  4036e4:	4b09      	ldr	r3, [pc, #36]	; (40370c <udd_ctrl_send_zlp_in+0x50>)
  4036e6:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
  4036e8:	2208      	movs	r2, #8
  4036ea:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
  4036ec:	601a      	str	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4036ee:	b128      	cbz	r0, 4036fc <udd_ctrl_send_zlp_in+0x40>
		cpu_irq_enable();
  4036f0:	2201      	movs	r2, #1
  4036f2:	4b04      	ldr	r3, [pc, #16]	; (403704 <udd_ctrl_send_zlp_in+0x48>)
  4036f4:	701a      	strb	r2, [r3, #0]
  4036f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4036fa:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
  4036fc:	b002      	add	sp, #8
  4036fe:	4770      	bx	lr
  403700:	20400c24 	.word	0x20400c24
  403704:	20400177 	.word	0x20400177
  403708:	40038160 	.word	0x40038160
  40370c:	400381f0 	.word	0x400381f0

00403710 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
  403710:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  403712:	4b02      	ldr	r3, [pc, #8]	; (40371c <udd_ctrl_endofrequest+0xc>)
  403714:	691b      	ldr	r3, [r3, #16]
  403716:	b103      	cbz	r3, 40371a <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  403718:	4798      	blx	r3
  40371a:	bd08      	pop	{r3, pc}
  40371c:	20400f10 	.word	0x20400f10

00403720 <udd_ctrl_in_sent>:
{
  403720:	b530      	push	{r4, r5, lr}
  403722:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403724:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403728:	fab3 f383 	clz	r3, r3
  40372c:	095b      	lsrs	r3, r3, #5
  40372e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403730:	b672      	cpsid	i
  403732:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403736:	2200      	movs	r2, #0
  403738:	4b4f      	ldr	r3, [pc, #316]	; (403878 <udd_ctrl_in_sent+0x158>)
  40373a:	701a      	strb	r2, [r3, #0]
	return flags;
  40373c:	9b01      	ldr	r3, [sp, #4]
	udd_disable_in_send_interrupt(0);
  40373e:	2101      	movs	r1, #1
  403740:	4a4e      	ldr	r2, [pc, #312]	; (40387c <udd_ctrl_in_sent+0x15c>)
  403742:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403744:	b123      	cbz	r3, 403750 <udd_ctrl_in_sent+0x30>
		cpu_irq_enable();
  403746:	4b4c      	ldr	r3, [pc, #304]	; (403878 <udd_ctrl_in_sent+0x158>)
  403748:	7019      	strb	r1, [r3, #0]
  40374a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40374e:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  403750:	4b4b      	ldr	r3, [pc, #300]	; (403880 <udd_ctrl_in_sent+0x160>)
  403752:	781b      	ldrb	r3, [r3, #0]
  403754:	2b03      	cmp	r3, #3
  403756:	d05d      	beq.n	403814 <udd_ctrl_in_sent+0xf4>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
  403758:	4b4a      	ldr	r3, [pc, #296]	; (403884 <udd_ctrl_in_sent+0x164>)
  40375a:	881b      	ldrh	r3, [r3, #0]
  40375c:	4a4a      	ldr	r2, [pc, #296]	; (403888 <udd_ctrl_in_sent+0x168>)
  40375e:	8994      	ldrh	r4, [r2, #12]
  403760:	1ae4      	subs	r4, r4, r3
  403762:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  403764:	b9c4      	cbnz	r4, 403798 <udd_ctrl_in_sent+0x78>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
  403766:	4a49      	ldr	r2, [pc, #292]	; (40388c <udd_ctrl_in_sent+0x16c>)
  403768:	8811      	ldrh	r1, [r2, #0]
  40376a:	440b      	add	r3, r1
  40376c:	b29b      	uxth	r3, r3
  40376e:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
  403770:	4a45      	ldr	r2, [pc, #276]	; (403888 <udd_ctrl_in_sent+0x168>)
  403772:	88d2      	ldrh	r2, [r2, #6]
  403774:	429a      	cmp	r2, r3
  403776:	d052      	beq.n	40381e <udd_ctrl_in_sent+0xfe>
					|| b_shortpacket) {
  403778:	4b45      	ldr	r3, [pc, #276]	; (403890 <udd_ctrl_in_sent+0x170>)
  40377a:	781b      	ldrb	r3, [r3, #0]
  40377c:	2b00      	cmp	r3, #0
  40377e:	d14e      	bne.n	40381e <udd_ctrl_in_sent+0xfe>
		if ((!udd_g_ctrlreq.over_under_run)
  403780:	4b41      	ldr	r3, [pc, #260]	; (403888 <udd_ctrl_in_sent+0x168>)
  403782:	695b      	ldr	r3, [r3, #20]
  403784:	2b00      	cmp	r3, #0
  403786:	d067      	beq.n	403858 <udd_ctrl_in_sent+0x138>
				|| (!udd_g_ctrlreq.over_under_run())) {
  403788:	4798      	blx	r3
  40378a:	2800      	cmp	r0, #0
  40378c:	d064      	beq.n	403858 <udd_ctrl_in_sent+0x138>
			udd_ctrl_payload_buf_cnt = 0;
  40378e:	2200      	movs	r2, #0
  403790:	4b3c      	ldr	r3, [pc, #240]	; (403884 <udd_ctrl_in_sent+0x164>)
  403792:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  403794:	4b3c      	ldr	r3, [pc, #240]	; (403888 <udd_ctrl_in_sent+0x168>)
  403796:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  403798:	2c3f      	cmp	r4, #63	; 0x3f
  40379a:	d95d      	bls.n	403858 <udd_ctrl_in_sent+0x138>
		b_shortpacket = false;
  40379c:	2200      	movs	r2, #0
  40379e:	4b3c      	ldr	r3, [pc, #240]	; (403890 <udd_ctrl_in_sent+0x170>)
  4037a0:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  4037a2:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  4037a4:	4b38      	ldr	r3, [pc, #224]	; (403888 <udd_ctrl_in_sent+0x168>)
  4037a6:	6899      	ldr	r1, [r3, #8]
  4037a8:	4b36      	ldr	r3, [pc, #216]	; (403884 <udd_ctrl_in_sent+0x164>)
  4037aa:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4037ac:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4037b0:	fab3 f383 	clz	r3, r3
  4037b4:	095b      	lsrs	r3, r3, #5
  4037b6:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  4037b8:	b672      	cpsid	i
  4037ba:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4037be:	2200      	movs	r2, #0
  4037c0:	4b2d      	ldr	r3, [pc, #180]	; (403878 <udd_ctrl_in_sent+0x158>)
  4037c2:	701a      	strb	r2, [r3, #0]
	return flags;
  4037c4:	9d02      	ldr	r5, [sp, #8]
	if (Is_udd_out_received(0)) {
  4037c6:	4b33      	ldr	r3, [pc, #204]	; (403894 <udd_ctrl_in_sent+0x174>)
  4037c8:	681b      	ldr	r3, [r3, #0]
  4037ca:	f013 0f02 	tst.w	r3, #2
  4037ce:	d147      	bne.n	403860 <udd_ctrl_in_sent+0x140>
	for (i = 0; i < nb_remain; i++) {
  4037d0:	b154      	cbz	r4, 4037e8 <udd_ctrl_in_sent+0xc8>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  4037d2:	4401      	add	r1, r0
  4037d4:	4830      	ldr	r0, [pc, #192]	; (403898 <udd_ctrl_in_sent+0x178>)
		*ptr_dest++ = *ptr_src++;
  4037d6:	1c43      	adds	r3, r0, #1
  4037d8:	780a      	ldrb	r2, [r1, #0]
  4037da:	b2d2      	uxtb	r2, r2
  4037dc:	7002      	strb	r2, [r0, #0]
  4037de:	4618      	mov	r0, r3
  4037e0:	3101      	adds	r1, #1
	for (i = 0; i < nb_remain; i++) {
  4037e2:	b2db      	uxtb	r3, r3
  4037e4:	42a3      	cmp	r3, r4
  4037e6:	d3f6      	bcc.n	4037d6 <udd_ctrl_in_sent+0xb6>
	udd_ctrl_payload_buf_cnt += nb_remain;
  4037e8:	4b26      	ldr	r3, [pc, #152]	; (403884 <udd_ctrl_in_sent+0x164>)
  4037ea:	881a      	ldrh	r2, [r3, #0]
  4037ec:	4414      	add	r4, r2
  4037ee:	801c      	strh	r4, [r3, #0]
  __ASM volatile ("dsb");
  4037f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4037f4:	f3bf 8f6f 	isb	sy
	udd_ack_in_send(0);
  4037f8:	2301      	movs	r3, #1
  4037fa:	4a28      	ldr	r2, [pc, #160]	; (40389c <udd_ctrl_in_sent+0x17c>)
  4037fc:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
  4037fe:	3290      	adds	r2, #144	; 0x90
  403800:	6013      	str	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403802:	2d00      	cmp	r5, #0
  403804:	d036      	beq.n	403874 <udd_ctrl_in_sent+0x154>
		cpu_irq_enable();
  403806:	461a      	mov	r2, r3
  403808:	4b1b      	ldr	r3, [pc, #108]	; (403878 <udd_ctrl_in_sent+0x158>)
  40380a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40380c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403810:	b662      	cpsie	i
  403812:	e02f      	b.n	403874 <udd_ctrl_in_sent+0x154>
		udd_ctrl_endofrequest();
  403814:	4b22      	ldr	r3, [pc, #136]	; (4038a0 <udd_ctrl_in_sent+0x180>)
  403816:	4798      	blx	r3
		udd_ctrl_init();
  403818:	4b22      	ldr	r3, [pc, #136]	; (4038a4 <udd_ctrl_in_sent+0x184>)
  40381a:	4798      	blx	r3
		return;
  40381c:	e02a      	b.n	403874 <udd_ctrl_in_sent+0x154>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  40381e:	2204      	movs	r2, #4
  403820:	4b17      	ldr	r3, [pc, #92]	; (403880 <udd_ctrl_in_sent+0x160>)
  403822:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403824:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403828:	fab3 f383 	clz	r3, r3
  40382c:	095b      	lsrs	r3, r3, #5
  40382e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  403830:	b672      	cpsid	i
  403832:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403836:	2200      	movs	r2, #0
  403838:	4b0f      	ldr	r3, [pc, #60]	; (403878 <udd_ctrl_in_sent+0x158>)
  40383a:	701a      	strb	r2, [r3, #0]
	return flags;
  40383c:	9a03      	ldr	r2, [sp, #12]
	udd_ack_nak_in(0);
  40383e:	2310      	movs	r3, #16
  403840:	4916      	ldr	r1, [pc, #88]	; (40389c <udd_ctrl_in_sent+0x17c>)
  403842:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
  403844:	3190      	adds	r1, #144	; 0x90
  403846:	600b      	str	r3, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403848:	b1a2      	cbz	r2, 403874 <udd_ctrl_in_sent+0x154>
		cpu_irq_enable();
  40384a:	2201      	movs	r2, #1
  40384c:	4b0a      	ldr	r3, [pc, #40]	; (403878 <udd_ctrl_in_sent+0x158>)
  40384e:	701a      	strb	r2, [r3, #0]
  403850:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403854:	b662      	cpsie	i
  403856:	e00d      	b.n	403874 <udd_ctrl_in_sent+0x154>
		b_shortpacket = true;
  403858:	2201      	movs	r2, #1
  40385a:	4b0d      	ldr	r3, [pc, #52]	; (403890 <udd_ctrl_in_sent+0x170>)
  40385c:	701a      	strb	r2, [r3, #0]
  40385e:	e7a1      	b.n	4037a4 <udd_ctrl_in_sent+0x84>
	if (cpu_irq_is_enabled_flags(flags))
  403860:	b12d      	cbz	r5, 40386e <udd_ctrl_in_sent+0x14e>
		cpu_irq_enable();
  403862:	2201      	movs	r2, #1
  403864:	4b04      	ldr	r3, [pc, #16]	; (403878 <udd_ctrl_in_sent+0x158>)
  403866:	701a      	strb	r2, [r3, #0]
  403868:	f3bf 8f5f 	dmb	sy
  40386c:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  40386e:	2204      	movs	r2, #4
  403870:	4b03      	ldr	r3, [pc, #12]	; (403880 <udd_ctrl_in_sent+0x160>)
  403872:	701a      	strb	r2, [r3, #0]
}
  403874:	b005      	add	sp, #20
  403876:	bd30      	pop	{r4, r5, pc}
  403878:	20400177 	.word	0x20400177
  40387c:	40038220 	.word	0x40038220
  403880:	20400c24 	.word	0x20400c24
  403884:	20400c20 	.word	0x20400c20
  403888:	20400f10 	.word	0x20400f10
  40388c:	20400c22 	.word	0x20400c22
  403890:	20400c1d 	.word	0x20400c1d
  403894:	40038130 	.word	0x40038130
  403898:	a0100000 	.word	0xa0100000
  40389c:	40038160 	.word	0x40038160
  4038a0:	00403711 	.word	0x00403711
  4038a4:	00403649 	.word	0x00403649

004038a8 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
  4038a8:	7d03      	ldrb	r3, [r0, #20]
  4038aa:	f013 0f01 	tst.w	r3, #1
  4038ae:	d013      	beq.n	4038d8 <udd_ep_finish_job+0x30>
{
  4038b0:	b510      	push	{r4, lr}
  4038b2:	460c      	mov	r4, r1
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
  4038b4:	7d03      	ldrb	r3, [r0, #20]
  4038b6:	f36f 0300 	bfc	r3, #0, #1
  4038ba:	7503      	strb	r3, [r0, #20]
	if (NULL == ptr_job->call_trans) {
  4038bc:	6803      	ldr	r3, [r0, #0]
  4038be:	b153      	cbz	r3, 4038d6 <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
  4038c0:	4906      	ldr	r1, [pc, #24]	; (4038dc <udd_ep_finish_job+0x34>)
  4038c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  4038c6:	f411 7f80 	tst.w	r1, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
  4038ca:	bf18      	it	ne
  4038cc:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
  4038d0:	6881      	ldr	r1, [r0, #8]
  4038d2:	4620      	mov	r0, r4
  4038d4:	4798      	blx	r3
  4038d6:	bd10      	pop	{r4, pc}
  4038d8:	4770      	bx	lr
  4038da:	bf00      	nop
  4038dc:	40038100 	.word	0x40038100

004038e0 <udd_ep_trans_done>:
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
  4038e0:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
  4038e2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4038e6:	4a5f      	ldr	r2, [pc, #380]	; (403a64 <udd_ep_trans_done+0x184>)
  4038e8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  4038ec:	7d12      	ldrb	r2, [r2, #20]
  4038ee:	f012 0f01 	tst.w	r2, #1
  4038f2:	f000 80b6 	beq.w	403a62 <udd_ep_trans_done+0x182>
{
  4038f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4038f8:	b083      	sub	sp, #12
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
  4038fa:	460a      	mov	r2, r1
  4038fc:	4959      	ldr	r1, [pc, #356]	; (403a64 <udd_ep_trans_done+0x184>)
  4038fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  403902:	68d1      	ldr	r1, [r2, #12]
  403904:	6892      	ldr	r2, [r2, #8]
  403906:	4291      	cmp	r1, r2
  403908:	d078      	beq.n	4039fc <udd_ep_trans_done+0x11c>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
  40390a:	1a52      	subs	r2, r2, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
  40390c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  403910:	d81b      	bhi.n	40394a <udd_ep_trans_done+0x6a>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
  403912:	0417      	lsls	r7, r2, #16
		}
		if (Is_udd_endpoint_in(ep)) {
  403914:	4c54      	ldr	r4, [pc, #336]	; (403a68 <udd_ep_trans_done+0x188>)
  403916:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  40391a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40391e:	d018      	beq.n	403952 <udd_ep_trans_done+0x72>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
  403920:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  403924:	f3c5 1502 	ubfx	r5, r5, #4, #3
  403928:	2408      	movs	r4, #8
  40392a:	40ac      	lsls	r4, r5
  40392c:	3c01      	subs	r4, #1
  40392e:	4214      	tst	r4, r2
  403930:	d017      	beq.n	403962 <udd_ep_trans_done+0x82>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  403932:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
  403936:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  40393a:	4d4a      	ldr	r5, [pc, #296]	; (403a64 <udd_ep_trans_done+0x184>)
  40393c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
  403940:	7d25      	ldrb	r5, [r4, #20]
  403942:	f36f 0541 	bfc	r5, #1, #1
  403946:	7525      	strb	r5, [r4, #20]
  403948:	e00b      	b.n	403962 <udd_ep_trans_done+0x82>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
  40394a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  40394e:	2700      	movs	r7, #0
  403950:	e7e0      	b.n	403914 <udd_ep_trans_done+0x34>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
  403952:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  403956:	f3c5 25c1 	ubfx	r5, r5, #11, #2
  40395a:	2d01      	cmp	r5, #1
  40395c:	d037      	beq.n	4039ce <udd_ep_trans_done+0xee>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT
  40395e:	f047 0714 	orr.w	r7, r7, #20
						| USBHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
  403962:	4c42      	ldr	r4, [pc, #264]	; (403a6c <udd_ep_trans_done+0x18c>)
  403964:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  403968:	eb03 0543 	add.w	r5, r3, r3, lsl #1
  40396c:	4e3d      	ldr	r6, [pc, #244]	; (403a64 <udd_ep_trans_done+0x184>)
  40396e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  403972:	686d      	ldr	r5, [r5, #4]
  403974:	4429      	add	r1, r5
  403976:	6061      	str	r1, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403978:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40397c:	fab1 f181 	clz	r1, r1
  403980:	0949      	lsrs	r1, r1, #5
  403982:	9101      	str	r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403984:	b672      	cpsid	i
  403986:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40398a:	2500      	movs	r5, #0
  40398c:	4938      	ldr	r1, [pc, #224]	; (403a70 <udd_ep_trans_done+0x190>)
  40398e:	700d      	strb	r5, [r1, #0]
	return flags;
  403990:	9d01      	ldr	r5, [sp, #4]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
  403992:	68e1      	ldr	r1, [r4, #12]
  403994:	f011 0f10 	tst.w	r1, #16
  403998:	d122      	bne.n	4039e0 <udd_ep_trans_done+0x100>
		udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT |
  40399a:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& USBHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
  40399e:	60a7      	str	r7, [r4, #8]
			ptr_job->buf_cnt += next_trans;
  4039a0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4039a4:	eb06 01c0 	add.w	r1, r6, r0, lsl #3
  4039a8:	68c8      	ldr	r0, [r1, #12]
  4039aa:	4410      	add	r0, r2
  4039ac:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
  4039ae:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
  4039b0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  4039b4:	fa00 f303 	lsl.w	r3, r0, r3
  4039b8:	4a2e      	ldr	r2, [pc, #184]	; (403a74 <udd_ep_trans_done+0x194>)
  4039ba:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
  4039bc:	2d00      	cmp	r5, #0
  4039be:	d04e      	beq.n	403a5e <udd_ep_trans_done+0x17e>
		cpu_irq_enable();
  4039c0:	2201      	movs	r2, #1
  4039c2:	4b2b      	ldr	r3, [pc, #172]	; (403a70 <udd_ep_trans_done+0x190>)
  4039c4:	701a      	strb	r2, [r3, #0]
  4039c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4039ca:	b662      	cpsie	i
  4039cc:	e047      	b.n	403a5e <udd_ep_trans_done+0x17e>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
  4039ce:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  4039d2:	f3c5 1502 	ubfx	r5, r5, #4, #3
  4039d6:	2408      	movs	r4, #8
  4039d8:	40ac      	lsls	r4, r5
  4039da:	42a2      	cmp	r2, r4
  4039dc:	d8c1      	bhi.n	403962 <udd_ep_trans_done+0x82>
  4039de:	e7be      	b.n	40395e <udd_ep_trans_done+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
  4039e0:	b12d      	cbz	r5, 4039ee <udd_ep_trans_done+0x10e>
		cpu_irq_enable();
  4039e2:	2101      	movs	r1, #1
  4039e4:	4a22      	ldr	r2, [pc, #136]	; (403a70 <udd_ep_trans_done+0x190>)
  4039e6:	7011      	strb	r1, [r2, #0]
  4039e8:	f3bf 8f5f 	dmb	sy
  4039ec:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
  4039ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  4039f2:	491c      	ldr	r1, [pc, #112]	; (403a64 <udd_ep_trans_done+0x184>)
  4039f4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4039f8:	68d1      	ldr	r1, [r2, #12]
  4039fa:	6091      	str	r1, [r2, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
  4039fc:	4a1a      	ldr	r2, [pc, #104]	; (403a68 <udd_ep_trans_done+0x188>)
  4039fe:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  403a02:	f412 7f80 	tst.w	r2, #256	; 0x100
  403a06:	d021      	beq.n	403a4c <udd_ep_trans_done+0x16c>
		if (ptr_job->b_shortpacket) {
  403a08:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  403a0c:	4915      	ldr	r1, [pc, #84]	; (403a64 <udd_ep_trans_done+0x184>)
  403a0e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  403a12:	7d12      	ldrb	r2, [r2, #20]
  403a14:	f012 0f02 	tst.w	r2, #2
  403a18:	d018      	beq.n	403a4c <udd_ep_trans_done+0x16c>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
  403a1a:	2201      	movs	r2, #1
  403a1c:	4b16      	ldr	r3, [pc, #88]	; (403a78 <udd_ep_trans_done+0x198>)
  403a1e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (Is_udd_write_enabled(ep)) {
  403a22:	3b30      	subs	r3, #48	; 0x30
  403a24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  403a28:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  403a2c:	d002      	beq.n	403a34 <udd_ep_trans_done+0x154>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
  403a2e:	4b13      	ldr	r3, [pc, #76]	; (403a7c <udd_ep_trans_done+0x19c>)
  403a30:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
  403a34:	2201      	movs	r2, #1
  403a36:	4b12      	ldr	r3, [pc, #72]	; (403a80 <udd_ep_trans_done+0x1a0>)
  403a38:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_enable_endpoint_interrupt(ep);
  403a3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403a40:	fa02 f000 	lsl.w	r0, r2, r0
  403a44:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
  403a48:	6198      	str	r0, [r3, #24]
			return;
  403a4a:	e008      	b.n	403a5e <udd_ep_trans_done+0x17e>
  403a4c:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
  403a4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	} else {
		_dcache_invalidate(ptr_job->buf, ptr_job->buf_size);
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
  403a52:	2100      	movs	r1, #0
  403a54:	4803      	ldr	r0, [pc, #12]	; (403a64 <udd_ep_trans_done+0x184>)
  403a56:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
  403a5a:	4b0a      	ldr	r3, [pc, #40]	; (403a84 <udd_ep_trans_done+0x1a4>)
  403a5c:	4798      	blx	r3
}
  403a5e:	b003      	add	sp, #12
  403a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403a62:	4770      	bx	lr
  403a64:	20400c28 	.word	0x20400c28
  403a68:	40038100 	.word	0x40038100
  403a6c:	40038300 	.word	0x40038300
  403a70:	20400177 	.word	0x20400177
  403a74:	40038000 	.word	0x40038000
  403a78:	40038160 	.word	0x40038160
  403a7c:	40038190 	.word	0x40038190
  403a80:	400381f0 	.word	0x400381f0
  403a84:	004038a9 	.word	0x004038a9

00403a88 <USBHS_Handler>:
{
  403a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403a8c:	b085      	sub	sp, #20
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  403a8e:	4b87      	ldr	r3, [pc, #540]	; (403cac <USBHS_Handler+0x224>)
  403a90:	4798      	blx	r3
  403a92:	b920      	cbnz	r0, 403a9e <USBHS_Handler+0x16>
  403a94:	4b86      	ldr	r3, [pc, #536]	; (403cb0 <USBHS_Handler+0x228>)
  403a96:	685b      	ldr	r3, [r3, #4]
  403a98:	f013 0f01 	tst.w	r3, #1
  403a9c:	d011      	beq.n	403ac2 <USBHS_Handler+0x3a>
	if (Is_udd_sof()) {
  403a9e:	4b84      	ldr	r3, [pc, #528]	; (403cb0 <USBHS_Handler+0x228>)
  403aa0:	685b      	ldr	r3, [r3, #4]
  403aa2:	f013 0f04 	tst.w	r3, #4
  403aa6:	d016      	beq.n	403ad6 <USBHS_Handler+0x4e>
		udd_ack_sof();
  403aa8:	4b81      	ldr	r3, [pc, #516]	; (403cb0 <USBHS_Handler+0x228>)
  403aaa:	2204      	movs	r2, #4
  403aac:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
  403aae:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
  403ab2:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  403ab6:	d00b      	beq.n	403ad0 <USBHS_Handler+0x48>
		UDC_SOF_EVENT();
  403ab8:	4b7e      	ldr	r3, [pc, #504]	; (403cb4 <USBHS_Handler+0x22c>)
  403aba:	4798      	blx	r3
}
  403abc:	b005      	add	sp, #20
  403abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("cpsid i" : : : "memory");
  403ac2:	b672      	cpsid	i
  403ac4:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  403ac8:	2200      	movs	r2, #0
  403aca:	4b7b      	ldr	r3, [pc, #492]	; (403cb8 <USBHS_Handler+0x230>)
  403acc:	701a      	strb	r2, [r3, #0]
		return;
  403ace:	e7f5      	b.n	403abc <USBHS_Handler+0x34>
			udc_sof_notify();
  403ad0:	4b7a      	ldr	r3, [pc, #488]	; (403cbc <USBHS_Handler+0x234>)
  403ad2:	4798      	blx	r3
  403ad4:	e7f0      	b.n	403ab8 <USBHS_Handler+0x30>
	if (Is_udd_msof()) {
  403ad6:	4b76      	ldr	r3, [pc, #472]	; (403cb0 <USBHS_Handler+0x228>)
  403ad8:	685b      	ldr	r3, [r3, #4]
  403ada:	f013 0f02 	tst.w	r3, #2
  403ade:	d133      	bne.n	403b48 <USBHS_Handler+0xc0>
	if (!Is_udd_endpoint_interrupt(0)) {
  403ae0:	4b73      	ldr	r3, [pc, #460]	; (403cb0 <USBHS_Handler+0x228>)
  403ae2:	685b      	ldr	r3, [r3, #4]
  403ae4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  403ae8:	d026      	beq.n	403b38 <USBHS_Handler+0xb0>
	udd_disable_nak_in_interrupt(0);
  403aea:	4b75      	ldr	r3, [pc, #468]	; (403cc0 <USBHS_Handler+0x238>)
  403aec:	2210      	movs	r2, #16
  403aee:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
  403af0:	2208      	movs	r2, #8
  403af2:	601a      	str	r2, [r3, #0]
	if (Is_udd_setup_received(0)) {
  403af4:	3bf0      	subs	r3, #240	; 0xf0
  403af6:	681b      	ldr	r3, [r3, #0]
  403af8:	f013 0f04 	tst.w	r3, #4
  403afc:	d12a      	bne.n	403b54 <USBHS_Handler+0xcc>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
  403afe:	4b71      	ldr	r3, [pc, #452]	; (403cc4 <USBHS_Handler+0x23c>)
  403b00:	681b      	ldr	r3, [r3, #0]
  403b02:	f013 0f01 	tst.w	r3, #1
  403b06:	d005      	beq.n	403b14 <USBHS_Handler+0x8c>
  403b08:	4b6f      	ldr	r3, [pc, #444]	; (403cc8 <USBHS_Handler+0x240>)
  403b0a:	681b      	ldr	r3, [r3, #0]
  403b0c:	f013 0f01 	tst.w	r3, #1
  403b10:	f040 808b 	bne.w	403c2a <USBHS_Handler+0x1a2>
	if (Is_udd_out_received(0)) {
  403b14:	4b6b      	ldr	r3, [pc, #428]	; (403cc4 <USBHS_Handler+0x23c>)
  403b16:	681b      	ldr	r3, [r3, #0]
  403b18:	f013 0f02 	tst.w	r3, #2
  403b1c:	f040 8088 	bne.w	403c30 <USBHS_Handler+0x1a8>
	if (Is_udd_nak_out(0)) {
  403b20:	4b68      	ldr	r3, [pc, #416]	; (403cc4 <USBHS_Handler+0x23c>)
  403b22:	681b      	ldr	r3, [r3, #0]
  403b24:	f013 0f08 	tst.w	r3, #8
  403b28:	f040 8135 	bne.w	403d96 <USBHS_Handler+0x30e>
	if (Is_udd_nak_in(0)) {
  403b2c:	4b65      	ldr	r3, [pc, #404]	; (403cc4 <USBHS_Handler+0x23c>)
  403b2e:	681b      	ldr	r3, [r3, #0]
  403b30:	f013 0f10 	tst.w	r3, #16
  403b34:	f040 8142 	bne.w	403dbc <USBHS_Handler+0x334>
	for (i = 0; i < nb_data; i++) {
  403b38:	4e64      	ldr	r6, [pc, #400]	; (403ccc <USBHS_Handler+0x244>)
  403b3a:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  403b3c:	4a5c      	ldr	r2, [pc, #368]	; (403cb0 <USBHS_Handler+0x228>)
  403b3e:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  403b42:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  403b46:	e184      	b.n	403e52 <USBHS_Handler+0x3ca>
		udd_ack_msof();
  403b48:	2202      	movs	r2, #2
  403b4a:	4b59      	ldr	r3, [pc, #356]	; (403cb0 <USBHS_Handler+0x228>)
  403b4c:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
  403b4e:	4b5b      	ldr	r3, [pc, #364]	; (403cbc <USBHS_Handler+0x234>)
  403b50:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  403b52:	e7b3      	b.n	403abc <USBHS_Handler+0x34>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  403b54:	4b5e      	ldr	r3, [pc, #376]	; (403cd0 <USBHS_Handler+0x248>)
  403b56:	781b      	ldrb	r3, [r3, #0]
  403b58:	2b00      	cmp	r3, #0
  403b5a:	d147      	bne.n	403bec <USBHS_Handler+0x164>
	if (8 != udd_byte_count(0)) {
  403b5c:	4b59      	ldr	r3, [pc, #356]	; (403cc4 <USBHS_Handler+0x23c>)
  403b5e:	681b      	ldr	r3, [r3, #0]
  403b60:	f3c3 530a 	ubfx	r3, r3, #20, #11
  403b64:	2b08      	cmp	r3, #8
  403b66:	d146      	bne.n	403bf6 <USBHS_Handler+0x16e>
	uint16_t nb_data = udd_byte_count(0);
  403b68:	4b56      	ldr	r3, [pc, #344]	; (403cc4 <USBHS_Handler+0x23c>)
  403b6a:	6818      	ldr	r0, [r3, #0]
  403b6c:	f3c0 500a 	ubfx	r0, r0, #20, #11
	for (i = 0; i < nb_data; i++) {
  403b70:	b148      	cbz	r0, 403b86 <USBHS_Handler+0xfe>
  403b72:	4b58      	ldr	r3, [pc, #352]	; (403cd4 <USBHS_Handler+0x24c>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
  403b74:	4c58      	ldr	r4, [pc, #352]	; (403cd8 <USBHS_Handler+0x250>)
  403b76:	1c5a      	adds	r2, r3, #1
  403b78:	7819      	ldrb	r1, [r3, #0]
  403b7a:	b2db      	uxtb	r3, r3
  403b7c:	5519      	strb	r1, [r3, r4]
  403b7e:	4613      	mov	r3, r2
	for (i = 0; i < nb_data; i++) {
  403b80:	b2d2      	uxtb	r2, r2
  403b82:	4282      	cmp	r2, r0
  403b84:	d3f7      	bcc.n	403b76 <USBHS_Handler+0xee>
	if (udc_process_setup() == false) {
  403b86:	4b55      	ldr	r3, [pc, #340]	; (403cdc <USBHS_Handler+0x254>)
  403b88:	4798      	blx	r3
  403b8a:	2800      	cmp	r0, #0
  403b8c:	d039      	beq.n	403c02 <USBHS_Handler+0x17a>
	udd_ack_setup_received(0);
  403b8e:	2204      	movs	r2, #4
  403b90:	4b53      	ldr	r3, [pc, #332]	; (403ce0 <USBHS_Handler+0x258>)
  403b92:	601a      	str	r2, [r3, #0]
	if (Udd_setup_is_in()) {
  403b94:	4b50      	ldr	r3, [pc, #320]	; (403cd8 <USBHS_Handler+0x250>)
  403b96:	f993 3000 	ldrsb.w	r3, [r3]
  403b9a:	2b00      	cmp	r3, #0
  403b9c:	db37      	blt.n	403c0e <USBHS_Handler+0x186>
		if (0 == udd_g_ctrlreq.req.wLength) {
  403b9e:	4b4e      	ldr	r3, [pc, #312]	; (403cd8 <USBHS_Handler+0x250>)
  403ba0:	88db      	ldrh	r3, [r3, #6]
  403ba2:	2b00      	cmp	r3, #0
  403ba4:	d03e      	beq.n	403c24 <USBHS_Handler+0x19c>
		udd_ctrl_prev_payload_buf_cnt = 0;
  403ba6:	2200      	movs	r2, #0
  403ba8:	4b4e      	ldr	r3, [pc, #312]	; (403ce4 <USBHS_Handler+0x25c>)
  403baa:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
  403bac:	4b4e      	ldr	r3, [pc, #312]	; (403ce8 <USBHS_Handler+0x260>)
  403bae:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  403bb0:	2101      	movs	r1, #1
  403bb2:	4b47      	ldr	r3, [pc, #284]	; (403cd0 <USBHS_Handler+0x248>)
  403bb4:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
  403bb6:	2110      	movs	r1, #16
  403bb8:	4b49      	ldr	r3, [pc, #292]	; (403ce0 <USBHS_Handler+0x258>)
  403bba:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403bbc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403bc0:	fab3 f383 	clz	r3, r3
  403bc4:	095b      	lsrs	r3, r3, #5
  403bc6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403bc8:	b672      	cpsid	i
  403bca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403bce:	4b3a      	ldr	r3, [pc, #232]	; (403cb8 <USBHS_Handler+0x230>)
  403bd0:	701a      	strb	r2, [r3, #0]
	return flags;
  403bd2:	9b01      	ldr	r3, [sp, #4]
		udd_enable_nak_in_interrupt(0);
  403bd4:	4a45      	ldr	r2, [pc, #276]	; (403cec <USBHS_Handler+0x264>)
  403bd6:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403bd8:	2b00      	cmp	r3, #0
  403bda:	f43f af6f 	beq.w	403abc <USBHS_Handler+0x34>
		cpu_irq_enable();
  403bde:	2201      	movs	r2, #1
  403be0:	4b35      	ldr	r3, [pc, #212]	; (403cb8 <USBHS_Handler+0x230>)
  403be2:	701a      	strb	r2, [r3, #0]
  403be4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403be8:	b662      	cpsie	i
  403bea:	e767      	b.n	403abc <USBHS_Handler+0x34>
		udd_ctrl_endofrequest();
  403bec:	4b40      	ldr	r3, [pc, #256]	; (403cf0 <USBHS_Handler+0x268>)
  403bee:	4798      	blx	r3
		udd_ctrl_init();
  403bf0:	4b40      	ldr	r3, [pc, #256]	; (403cf4 <USBHS_Handler+0x26c>)
  403bf2:	4798      	blx	r3
  403bf4:	e7b2      	b.n	403b5c <USBHS_Handler+0xd4>
		udd_ctrl_stall_data();
  403bf6:	4b40      	ldr	r3, [pc, #256]	; (403cf8 <USBHS_Handler+0x270>)
  403bf8:	4798      	blx	r3
		udd_ack_setup_received(0);
  403bfa:	2204      	movs	r2, #4
  403bfc:	4b38      	ldr	r3, [pc, #224]	; (403ce0 <USBHS_Handler+0x258>)
  403bfe:	601a      	str	r2, [r3, #0]
  403c00:	e75c      	b.n	403abc <USBHS_Handler+0x34>
		udd_ctrl_stall_data();
  403c02:	4b3d      	ldr	r3, [pc, #244]	; (403cf8 <USBHS_Handler+0x270>)
  403c04:	4798      	blx	r3
		udd_ack_setup_received(0);
  403c06:	2204      	movs	r2, #4
  403c08:	4b35      	ldr	r3, [pc, #212]	; (403ce0 <USBHS_Handler+0x258>)
  403c0a:	601a      	str	r2, [r3, #0]
  403c0c:	e756      	b.n	403abc <USBHS_Handler+0x34>
		udd_ctrl_prev_payload_buf_cnt = 0;
  403c0e:	2300      	movs	r3, #0
  403c10:	4a34      	ldr	r2, [pc, #208]	; (403ce4 <USBHS_Handler+0x25c>)
  403c12:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
  403c14:	4a34      	ldr	r2, [pc, #208]	; (403ce8 <USBHS_Handler+0x260>)
  403c16:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  403c18:	2202      	movs	r2, #2
  403c1a:	4b2d      	ldr	r3, [pc, #180]	; (403cd0 <USBHS_Handler+0x248>)
  403c1c:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  403c1e:	4b37      	ldr	r3, [pc, #220]	; (403cfc <USBHS_Handler+0x274>)
  403c20:	4798      	blx	r3
  403c22:	e74b      	b.n	403abc <USBHS_Handler+0x34>
			udd_ctrl_send_zlp_in();
  403c24:	4b36      	ldr	r3, [pc, #216]	; (403d00 <USBHS_Handler+0x278>)
  403c26:	4798      	blx	r3
  403c28:	e748      	b.n	403abc <USBHS_Handler+0x34>
		udd_ctrl_in_sent();
  403c2a:	4b34      	ldr	r3, [pc, #208]	; (403cfc <USBHS_Handler+0x274>)
  403c2c:	4798      	blx	r3
  403c2e:	e745      	b.n	403abc <USBHS_Handler+0x34>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  403c30:	4b27      	ldr	r3, [pc, #156]	; (403cd0 <USBHS_Handler+0x248>)
  403c32:	781b      	ldrb	r3, [r3, #0]
  403c34:	2b01      	cmp	r3, #1
  403c36:	d00b      	beq.n	403c50 <USBHS_Handler+0x1c8>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  403c38:	2b02      	cmp	r3, #2
  403c3a:	d004      	beq.n	403c46 <USBHS_Handler+0x1be>
  403c3c:	2b04      	cmp	r3, #4
  403c3e:	d002      	beq.n	403c46 <USBHS_Handler+0x1be>
			udd_ctrl_stall_data();
  403c40:	4b2d      	ldr	r3, [pc, #180]	; (403cf8 <USBHS_Handler+0x270>)
  403c42:	4798      	blx	r3
  403c44:	e001      	b.n	403c4a <USBHS_Handler+0x1c2>
			udd_ctrl_endofrequest();
  403c46:	4b2a      	ldr	r3, [pc, #168]	; (403cf0 <USBHS_Handler+0x268>)
  403c48:	4798      	blx	r3
		udd_ctrl_init();
  403c4a:	4b2a      	ldr	r3, [pc, #168]	; (403cf4 <USBHS_Handler+0x26c>)
  403c4c:	4798      	blx	r3
  403c4e:	e735      	b.n	403abc <USBHS_Handler+0x34>
	nb_data = udd_byte_count(0);
  403c50:	4b1c      	ldr	r3, [pc, #112]	; (403cc4 <USBHS_Handler+0x23c>)
  403c52:	6818      	ldr	r0, [r3, #0]
  403c54:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
  403c58:	4b1f      	ldr	r3, [pc, #124]	; (403cd8 <USBHS_Handler+0x250>)
  403c5a:	899b      	ldrh	r3, [r3, #12]
  403c5c:	4a22      	ldr	r2, [pc, #136]	; (403ce8 <USBHS_Handler+0x260>)
  403c5e:	8814      	ldrh	r4, [r2, #0]
  403c60:	1822      	adds	r2, r4, r0
  403c62:	4293      	cmp	r3, r2
  403c64:	da01      	bge.n	403c6a <USBHS_Handler+0x1e2>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
  403c66:	1b1b      	subs	r3, r3, r4
  403c68:	b298      	uxth	r0, r3
	volatile uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  403c6a:	4b1b      	ldr	r3, [pc, #108]	; (403cd8 <USBHS_Handler+0x250>)
  403c6c:	6899      	ldr	r1, [r3, #8]
  403c6e:	4421      	add	r1, r4
	for (i = 0; i < nb_data; i++) {
  403c70:	b178      	cbz	r0, 403c92 <USBHS_Handler+0x20a>
  403c72:	4a18      	ldr	r2, [pc, #96]	; (403cd4 <USBHS_Handler+0x24c>)
		*ptr_dest++ = *ptr_src++;
  403c74:	1c53      	adds	r3, r2, #1
  403c76:	7812      	ldrb	r2, [r2, #0]
  403c78:	b2d2      	uxtb	r2, r2
  403c7a:	700a      	strb	r2, [r1, #0]
  403c7c:	3101      	adds	r1, #1
  403c7e:	461a      	mov	r2, r3
	for (i = 0; i < nb_data; i++) {
  403c80:	b2db      	uxtb	r3, r3
  403c82:	4283      	cmp	r3, r0
  403c84:	d3f6      	bcc.n	403c74 <USBHS_Handler+0x1ec>
	udd_ctrl_payload_buf_cnt += nb_data;
  403c86:	4404      	add	r4, r0
  403c88:	b2a4      	uxth	r4, r4
  403c8a:	4b17      	ldr	r3, [pc, #92]	; (403ce8 <USBHS_Handler+0x260>)
  403c8c:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  403c8e:	2840      	cmp	r0, #64	; 0x40
  403c90:	d038      	beq.n	403d04 <USBHS_Handler+0x27c>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
  403c92:	4b11      	ldr	r3, [pc, #68]	; (403cd8 <USBHS_Handler+0x250>)
  403c94:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  403c96:	695b      	ldr	r3, [r3, #20]
  403c98:	b113      	cbz	r3, 403ca0 <USBHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
  403c9a:	4798      	blx	r3
  403c9c:	2800      	cmp	r0, #0
  403c9e:	d05a      	beq.n	403d56 <USBHS_Handler+0x2ce>
		udd_ack_out_received(0);
  403ca0:	2202      	movs	r2, #2
  403ca2:	4b0f      	ldr	r3, [pc, #60]	; (403ce0 <USBHS_Handler+0x258>)
  403ca4:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
  403ca6:	4b16      	ldr	r3, [pc, #88]	; (403d00 <USBHS_Handler+0x278>)
  403ca8:	4798      	blx	r3
  403caa:	e707      	b.n	403abc <USBHS_Handler+0x34>
  403cac:	00403595 	.word	0x00403595
  403cb0:	40038000 	.word	0x40038000
  403cb4:	00406d9d 	.word	0x00406d9d
  403cb8:	20400177 	.word	0x20400177
  403cbc:	00402ccd 	.word	0x00402ccd
  403cc0:	40038220 	.word	0x40038220
  403cc4:	40038130 	.word	0x40038130
  403cc8:	400381c0 	.word	0x400381c0
  403ccc:	40038134 	.word	0x40038134
  403cd0:	20400c24 	.word	0x20400c24
  403cd4:	a0100000 	.word	0xa0100000
  403cd8:	20400f10 	.word	0x20400f10
  403cdc:	00402d0d 	.word	0x00402d0d
  403ce0:	40038160 	.word	0x40038160
  403ce4:	20400c22 	.word	0x20400c22
  403ce8:	20400c20 	.word	0x20400c20
  403cec:	400381f0 	.word	0x400381f0
  403cf0:	00403711 	.word	0x00403711
  403cf4:	00403649 	.word	0x00403649
  403cf8:	004036a5 	.word	0x004036a5
  403cfc:	00403721 	.word	0x00403721
  403d00:	004036bd 	.word	0x004036bd
			|| (udd_g_ctrlreq.req.wLength <=
  403d04:	4ba8      	ldr	r3, [pc, #672]	; (403fa8 <USBHS_Handler+0x520>)
  403d06:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
  403d08:	4ba8      	ldr	r3, [pc, #672]	; (403fac <USBHS_Handler+0x524>)
  403d0a:	881b      	ldrh	r3, [r3, #0]
  403d0c:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
  403d0e:	429a      	cmp	r2, r3
  403d10:	ddbf      	ble.n	403c92 <USBHS_Handler+0x20a>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
  403d12:	4ba5      	ldr	r3, [pc, #660]	; (403fa8 <USBHS_Handler+0x520>)
  403d14:	899b      	ldrh	r3, [r3, #12]
  403d16:	42a3      	cmp	r3, r4
  403d18:	d023      	beq.n	403d62 <USBHS_Handler+0x2da>
	udd_ack_out_received(0);
  403d1a:	4ba5      	ldr	r3, [pc, #660]	; (403fb0 <USBHS_Handler+0x528>)
  403d1c:	2202      	movs	r2, #2
  403d1e:	601a      	str	r2, [r3, #0]
	udd_ack_nak_in(0);
  403d20:	2210      	movs	r2, #16
  403d22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403d24:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403d28:	fab3 f383 	clz	r3, r3
  403d2c:	095b      	lsrs	r3, r3, #5
  403d2e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  403d30:	b672      	cpsid	i
  403d32:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403d36:	2100      	movs	r1, #0
  403d38:	4b9e      	ldr	r3, [pc, #632]	; (403fb4 <USBHS_Handler+0x52c>)
  403d3a:	7019      	strb	r1, [r3, #0]
	return flags;
  403d3c:	9b02      	ldr	r3, [sp, #8]
	udd_enable_nak_in_interrupt(0);
  403d3e:	499e      	ldr	r1, [pc, #632]	; (403fb8 <USBHS_Handler+0x530>)
  403d40:	600a      	str	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403d42:	2b00      	cmp	r3, #0
  403d44:	f43f aeba 	beq.w	403abc <USBHS_Handler+0x34>
		cpu_irq_enable();
  403d48:	2201      	movs	r2, #1
  403d4a:	4b9a      	ldr	r3, [pc, #616]	; (403fb4 <USBHS_Handler+0x52c>)
  403d4c:	701a      	strb	r2, [r3, #0]
  403d4e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403d52:	b662      	cpsie	i
  403d54:	e6b2      	b.n	403abc <USBHS_Handler+0x34>
				udd_ctrl_stall_data();
  403d56:	4b99      	ldr	r3, [pc, #612]	; (403fbc <USBHS_Handler+0x534>)
  403d58:	4798      	blx	r3
				udd_ack_out_received(0);
  403d5a:	2202      	movs	r2, #2
  403d5c:	4b94      	ldr	r3, [pc, #592]	; (403fb0 <USBHS_Handler+0x528>)
  403d5e:	601a      	str	r2, [r3, #0]
  403d60:	e6ac      	b.n	403abc <USBHS_Handler+0x34>
		if (!udd_g_ctrlreq.over_under_run) {
  403d62:	4b91      	ldr	r3, [pc, #580]	; (403fa8 <USBHS_Handler+0x520>)
  403d64:	695b      	ldr	r3, [r3, #20]
  403d66:	b153      	cbz	r3, 403d7e <USBHS_Handler+0x2f6>
		if (!udd_g_ctrlreq.over_under_run()) {
  403d68:	4798      	blx	r3
  403d6a:	b170      	cbz	r0, 403d8a <USBHS_Handler+0x302>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
  403d6c:	498f      	ldr	r1, [pc, #572]	; (403fac <USBHS_Handler+0x524>)
  403d6e:	4a94      	ldr	r2, [pc, #592]	; (403fc0 <USBHS_Handler+0x538>)
  403d70:	880b      	ldrh	r3, [r1, #0]
  403d72:	8810      	ldrh	r0, [r2, #0]
  403d74:	4403      	add	r3, r0
  403d76:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
  403d78:	2300      	movs	r3, #0
  403d7a:	8013      	strh	r3, [r2, #0]
  403d7c:	e7cd      	b.n	403d1a <USBHS_Handler+0x292>
			udd_ctrl_stall_data();
  403d7e:	4b8f      	ldr	r3, [pc, #572]	; (403fbc <USBHS_Handler+0x534>)
  403d80:	4798      	blx	r3
			udd_ack_out_received(0);
  403d82:	2202      	movs	r2, #2
  403d84:	4b8a      	ldr	r3, [pc, #552]	; (403fb0 <USBHS_Handler+0x528>)
  403d86:	601a      	str	r2, [r3, #0]
  403d88:	e698      	b.n	403abc <USBHS_Handler+0x34>
			udd_ctrl_stall_data();
  403d8a:	4b8c      	ldr	r3, [pc, #560]	; (403fbc <USBHS_Handler+0x534>)
  403d8c:	4798      	blx	r3
			udd_ack_out_received(0);
  403d8e:	2202      	movs	r2, #2
  403d90:	4b87      	ldr	r3, [pc, #540]	; (403fb0 <USBHS_Handler+0x528>)
  403d92:	601a      	str	r2, [r3, #0]
  403d94:	e692      	b.n	403abc <USBHS_Handler+0x34>
		udd_ack_nak_out(0);
  403d96:	2208      	movs	r2, #8
  403d98:	4b85      	ldr	r3, [pc, #532]	; (403fb0 <USBHS_Handler+0x528>)
  403d9a:	601a      	str	r2, [r3, #0]
	if (Is_udd_in_send(0))
  403d9c:	3b30      	subs	r3, #48	; 0x30
  403d9e:	681b      	ldr	r3, [r3, #0]
  403da0:	f013 0f01 	tst.w	r3, #1
  403da4:	f47f ae8a 	bne.w	403abc <USBHS_Handler+0x34>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  403da8:	4b86      	ldr	r3, [pc, #536]	; (403fc4 <USBHS_Handler+0x53c>)
  403daa:	781b      	ldrb	r3, [r3, #0]
  403dac:	2b03      	cmp	r3, #3
  403dae:	f47f ae85 	bne.w	403abc <USBHS_Handler+0x34>
		udd_enable_stall_handshake(0);
  403db2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403db6:	4b80      	ldr	r3, [pc, #512]	; (403fb8 <USBHS_Handler+0x530>)
  403db8:	601a      	str	r2, [r3, #0]
  403dba:	e67f      	b.n	403abc <USBHS_Handler+0x34>
		udd_ack_nak_in(0);
  403dbc:	2210      	movs	r2, #16
  403dbe:	4b7c      	ldr	r3, [pc, #496]	; (403fb0 <USBHS_Handler+0x528>)
  403dc0:	601a      	str	r2, [r3, #0]
	if (Is_udd_out_received(0))
  403dc2:	3b30      	subs	r3, #48	; 0x30
  403dc4:	681b      	ldr	r3, [r3, #0]
  403dc6:	f013 0f02 	tst.w	r3, #2
  403dca:	f47f ae77 	bne.w	403abc <USBHS_Handler+0x34>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
  403dce:	4b7d      	ldr	r3, [pc, #500]	; (403fc4 <USBHS_Handler+0x53c>)
  403dd0:	781b      	ldrb	r3, [r3, #0]
  403dd2:	2b01      	cmp	r3, #1
  403dd4:	d007      	beq.n	403de6 <USBHS_Handler+0x35e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
  403dd6:	2b04      	cmp	r3, #4
  403dd8:	f47f ae70 	bne.w	403abc <USBHS_Handler+0x34>
		udd_enable_stall_handshake(0);
  403ddc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403de0:	4b75      	ldr	r3, [pc, #468]	; (403fb8 <USBHS_Handler+0x530>)
  403de2:	601a      	str	r2, [r3, #0]
  403de4:	e66a      	b.n	403abc <USBHS_Handler+0x34>
		udd_ctrl_send_zlp_in();
  403de6:	4b78      	ldr	r3, [pc, #480]	; (403fc8 <USBHS_Handler+0x540>)
  403de8:	4798      	blx	r3
  403dea:	e667      	b.n	403abc <USBHS_Handler+0x34>
			if (udd_endpoint_dma_get_status(ep)
  403dec:	4b77      	ldr	r3, [pc, #476]	; (403fcc <USBHS_Handler+0x544>)
  403dee:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403df2:	68da      	ldr	r2, [r3, #12]
  403df4:	f012 0f01 	tst.w	r2, #1
  403df8:	f47f ae60 	bne.w	403abc <USBHS_Handler+0x34>
			udd_disable_endpoint_dma_interrupt(ep);
  403dfc:	4a74      	ldr	r2, [pc, #464]	; (403fd0 <USBHS_Handler+0x548>)
  403dfe:	6151      	str	r1, [r2, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
  403e00:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
  403e02:	0c1b      	lsrs	r3, r3, #16
  403e04:	d008      	beq.n	403e18 <USBHS_Handler+0x390>
				ptr_job->buf_cnt -= nb_remaining;
  403e06:	4a73      	ldr	r2, [pc, #460]	; (403fd4 <USBHS_Handler+0x54c>)
  403e08:	007c      	lsls	r4, r7, #1
  403e0a:	19e5      	adds	r5, r4, r7
  403e0c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
  403e10:	68e9      	ldr	r1, [r5, #12]
  403e12:	1acb      	subs	r3, r1, r3
  403e14:	60eb      	str	r3, [r5, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
  403e16:	60ab      	str	r3, [r5, #8]
			udd_ep_trans_done(ep);
  403e18:	4b6f      	ldr	r3, [pc, #444]	; (403fd8 <USBHS_Handler+0x550>)
  403e1a:	4798      	blx	r3
  403e1c:	e64e      	b.n	403abc <USBHS_Handler+0x34>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
  403e1e:	4b6f      	ldr	r3, [pc, #444]	; (403fdc <USBHS_Handler+0x554>)
  403e20:	2201      	movs	r2, #1
  403e22:	f849 2003 	str.w	r2, [r9, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
  403e26:	4962      	ldr	r1, [pc, #392]	; (403fb0 <USBHS_Handler+0x528>)
  403e28:	f849 2001 	str.w	r2, [r9, r1]
				udd_ack_fifocon(ep);
  403e2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  403e30:	f849 2003 	str.w	r2, [r9, r3]
		ptr_job = &udd_ep_job[ep - 1];
  403e34:	eb07 0747 	add.w	r7, r7, r7, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
  403e38:	4602      	mov	r2, r0
  403e3a:	2100      	movs	r1, #0
  403e3c:	4865      	ldr	r0, [pc, #404]	; (403fd4 <USBHS_Handler+0x54c>)
  403e3e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
  403e42:	4b67      	ldr	r3, [pc, #412]	; (403fe0 <USBHS_Handler+0x558>)
  403e44:	4798      	blx	r3
  403e46:	e639      	b.n	403abc <USBHS_Handler+0x34>
  403e48:	3301      	adds	r3, #1
  403e4a:	3604      	adds	r6, #4
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  403e4c:	2b07      	cmp	r3, #7
  403e4e:	f000 80d5 	beq.w	403ffc <USBHS_Handler+0x574>
  403e52:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
  403e54:	461d      	mov	r5, r3
  403e56:	1e5f      	subs	r7, r3, #1
  403e58:	46b8      	mov	r8, r7
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  403e5a:	6914      	ldr	r4, [r2, #16]
  403e5c:	fa0e f107 	lsl.w	r1, lr, r7
  403e60:	420c      	tst	r4, r1
  403e62:	d002      	beq.n	403e6a <USBHS_Handler+0x3e2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
  403e64:	6854      	ldr	r4, [r2, #4]
  403e66:	4221      	tst	r1, r4
  403e68:	d1c0      	bne.n	403dec <USBHS_Handler+0x364>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  403e6a:	6911      	ldr	r1, [r2, #16]
  403e6c:	fa0c f505 	lsl.w	r5, ip, r5
  403e70:	4229      	tst	r1, r5
  403e72:	d0e9      	beq.n	403e48 <USBHS_Handler+0x3c0>
  403e74:	ea4f 0983 	mov.w	r9, r3, lsl #2
  403e78:	f106 0490 	add.w	r4, r6, #144	; 0x90
			if (Is_udd_in_send_interrupt_enabled(ep)
  403e7c:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
  403e80:	f011 0f01 	tst.w	r1, #1
  403e84:	d003      	beq.n	403e8e <USBHS_Handler+0x406>
					&& Is_udd_in_send(ep)) {
  403e86:	6831      	ldr	r1, [r6, #0]
  403e88:	f011 0f01 	tst.w	r1, #1
  403e8c:	d1c7      	bne.n	403e1e <USBHS_Handler+0x396>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
  403e8e:	6821      	ldr	r1, [r4, #0]
  403e90:	f411 5f80 	tst.w	r1, #4096	; 0x1000
  403e94:	d0d8      	beq.n	403e48 <USBHS_Handler+0x3c0>
					&& (0 == udd_nb_busy_bank(ep))) {
  403e96:	6831      	ldr	r1, [r6, #0]
  403e98:	f411 5f40 	tst.w	r1, #12288	; 0x3000
  403e9c:	d1d4      	bne.n	403e48 <USBHS_Handler+0x3c0>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
  403e9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403ea2:	4b4e      	ldr	r3, [pc, #312]	; (403fdc <USBHS_Handler+0x554>)
  403ea4:	f849 2003 	str.w	r2, [r9, r3]
				udd_disable_endpoint_interrupt(ep);
  403ea8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
  403eac:	615d      	str	r5, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
  403eae:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  403eb2:	4b48      	ldr	r3, [pc, #288]	; (403fd4 <USBHS_Handler+0x54c>)
  403eb4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
  403eb8:	f898 2014 	ldrb.w	r2, [r8, #20]
  403ebc:	f36f 0282 	bfc	r2, #2, #1
  403ec0:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
  403ec4:	4a47      	ldr	r2, [pc, #284]	; (403fe4 <USBHS_Handler+0x55c>)
  403ec6:	f859 3002 	ldr.w	r3, [r9, r2]
  403eca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  403ece:	f849 3002 	str.w	r3, [r9, r2]
				udd_enable_stall_handshake(ep);
  403ed2:	4b39      	ldr	r3, [pc, #228]	; (403fb8 <USBHS_Handler+0x530>)
  403ed4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403ed8:	f849 2003 	str.w	r2, [r9, r3]
				udd_reset_data_toggle(ep);
  403edc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  403ee0:	f849 2003 	str.w	r2, [r9, r3]
  403ee4:	e5ea      	b.n	403abc <USBHS_Handler+0x34>
		udd_ack_reset();
  403ee6:	2208      	movs	r2, #8
  403ee8:	4b39      	ldr	r3, [pc, #228]	; (403fd0 <USBHS_Handler+0x548>)
  403eea:	609a      	str	r2, [r3, #8]
  403eec:	4d39      	ldr	r5, [pc, #228]	; (403fd4 <USBHS_Handler+0x54c>)
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  403eee:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
  403ef0:	2701      	movs	r7, #1
  403ef2:	4e3b      	ldr	r6, [pc, #236]	; (403fe0 <USBHS_Handler+0x558>)
  403ef4:	3401      	adds	r4, #1
  403ef6:	b2e4      	uxtb	r4, r4
  403ef8:	4622      	mov	r2, r4
  403efa:	4639      	mov	r1, r7
  403efc:	4628      	mov	r0, r5
  403efe:	47b0      	blx	r6
  403f00:	3518      	adds	r5, #24
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  403f02:	2c06      	cmp	r4, #6
  403f04:	d1f6      	bne.n	403ef4 <USBHS_Handler+0x46c>
		udc_reset();
  403f06:	4b38      	ldr	r3, [pc, #224]	; (403fe8 <USBHS_Handler+0x560>)
  403f08:	4798      	blx	r3
	udd_configure_address(0);
  403f0a:	4b31      	ldr	r3, [pc, #196]	; (403fd0 <USBHS_Handler+0x548>)
  403f0c:	681a      	ldr	r2, [r3, #0]
  403f0e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  403f12:	601a      	str	r2, [r3, #0]
	udd_enable_address();
  403f14:	681a      	ldr	r2, [r3, #0]
  403f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  403f1a:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
  403f1c:	4931      	ldr	r1, [pc, #196]	; (403fe4 <USBHS_Handler+0x55c>)
  403f1e:	6808      	ldr	r0, [r1, #0]
  403f20:	4a32      	ldr	r2, [pc, #200]	; (403fec <USBHS_Handler+0x564>)
  403f22:	4002      	ands	r2, r0
  403f24:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  403f28:	600a      	str	r2, [r1, #0]
	udd_allocate_memory(0);
  403f2a:	680a      	ldr	r2, [r1, #0]
  403f2c:	f042 0202 	orr.w	r2, r2, #2
  403f30:	600a      	str	r2, [r1, #0]
	udd_enable_endpoint(0);
  403f32:	69da      	ldr	r2, [r3, #28]
  403f34:	f042 0201 	orr.w	r2, r2, #1
  403f38:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403f3a:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403f3e:	fab2 f282 	clz	r2, r2
  403f42:	0952      	lsrs	r2, r2, #5
  403f44:	9203      	str	r2, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  403f46:	b672      	cpsid	i
  403f48:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403f4c:	2100      	movs	r1, #0
  403f4e:	4a19      	ldr	r2, [pc, #100]	; (403fb4 <USBHS_Handler+0x52c>)
  403f50:	7011      	strb	r1, [r2, #0]
	return flags;
  403f52:	9903      	ldr	r1, [sp, #12]
	udd_enable_setup_received_interrupt(0);
  403f54:	4a18      	ldr	r2, [pc, #96]	; (403fb8 <USBHS_Handler+0x530>)
  403f56:	2004      	movs	r0, #4
  403f58:	6010      	str	r0, [r2, #0]
	udd_enable_out_received_interrupt(0);
  403f5a:	2002      	movs	r0, #2
  403f5c:	6010      	str	r0, [r2, #0]
	udd_enable_endpoint_interrupt(0);
  403f5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403f62:	619a      	str	r2, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
  403f64:	b129      	cbz	r1, 403f72 <USBHS_Handler+0x4ea>
		cpu_irq_enable();
  403f66:	2201      	movs	r2, #1
  403f68:	4b12      	ldr	r3, [pc, #72]	; (403fb4 <USBHS_Handler+0x52c>)
  403f6a:	701a      	strb	r2, [r3, #0]
  403f6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403f70:	b662      	cpsie	i
		udd_ctrl_init();
  403f72:	4b1f      	ldr	r3, [pc, #124]	; (403ff0 <USBHS_Handler+0x568>)
  403f74:	4798      	blx	r3
		goto udd_interrupt_end;
  403f76:	e5a1      	b.n	403abc <USBHS_Handler+0x34>
		otg_unfreeze_clock();
  403f78:	4b15      	ldr	r3, [pc, #84]	; (403fd0 <USBHS_Handler+0x548>)
  403f7a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  403f7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  403f82:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_disable_suspend_interrupt();
  403f86:	2201      	movs	r2, #1
  403f88:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  403f8a:	2210      	movs	r2, #16
  403f8c:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
  403f8e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  403f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  403f96:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
  403f9a:	2000      	movs	r0, #0
  403f9c:	4b15      	ldr	r3, [pc, #84]	; (403ff4 <USBHS_Handler+0x56c>)
  403f9e:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
  403fa0:	4b15      	ldr	r3, [pc, #84]	; (403ff8 <USBHS_Handler+0x570>)
  403fa2:	4798      	blx	r3
		goto udd_interrupt_end;
  403fa4:	e58a      	b.n	403abc <USBHS_Handler+0x34>
  403fa6:	bf00      	nop
  403fa8:	20400f10 	.word	0x20400f10
  403fac:	20400c22 	.word	0x20400c22
  403fb0:	40038160 	.word	0x40038160
  403fb4:	20400177 	.word	0x20400177
  403fb8:	400381f0 	.word	0x400381f0
  403fbc:	004036a5 	.word	0x004036a5
  403fc0:	20400c20 	.word	0x20400c20
  403fc4:	20400c24 	.word	0x20400c24
  403fc8:	004036bd 	.word	0x004036bd
  403fcc:	40038300 	.word	0x40038300
  403fd0:	40038000 	.word	0x40038000
  403fd4:	20400c28 	.word	0x20400c28
  403fd8:	004038e1 	.word	0x004038e1
  403fdc:	40038220 	.word	0x40038220
  403fe0:	004038a9 	.word	0x004038a9
  403fe4:	40038100 	.word	0x40038100
  403fe8:	00402c85 	.word	0x00402c85
  403fec:	ffffe683 	.word	0xffffe683
  403ff0:	00403649 	.word	0x00403649
  403ff4:	004035a5 	.word	0x004035a5
  403ff8:	00406d6d 	.word	0x00406d6d
	if (Is_udd_reset()) {
  403ffc:	4b1b      	ldr	r3, [pc, #108]	; (40406c <USBHS_Handler+0x5e4>)
  403ffe:	685b      	ldr	r3, [r3, #4]
  404000:	f013 0f08 	tst.w	r3, #8
  404004:	f47f af6f 	bne.w	403ee6 <USBHS_Handler+0x45e>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  404008:	4b18      	ldr	r3, [pc, #96]	; (40406c <USBHS_Handler+0x5e4>)
  40400a:	691b      	ldr	r3, [r3, #16]
  40400c:	f013 0f01 	tst.w	r3, #1
  404010:	d004      	beq.n	40401c <USBHS_Handler+0x594>
  404012:	4b16      	ldr	r3, [pc, #88]	; (40406c <USBHS_Handler+0x5e4>)
  404014:	685b      	ldr	r3, [r3, #4]
  404016:	f013 0f01 	tst.w	r3, #1
  40401a:	d1ad      	bne.n	403f78 <USBHS_Handler+0x4f0>
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
  40401c:	4b13      	ldr	r3, [pc, #76]	; (40406c <USBHS_Handler+0x5e4>)
  40401e:	691b      	ldr	r3, [r3, #16]
  404020:	f013 0f10 	tst.w	r3, #16
  404024:	f43f ad4a 	beq.w	403abc <USBHS_Handler+0x34>
  404028:	4b10      	ldr	r3, [pc, #64]	; (40406c <USBHS_Handler+0x5e4>)
  40402a:	685b      	ldr	r3, [r3, #4]
  40402c:	f013 0f10 	tst.w	r3, #16
  404030:	f43f ad44 	beq.w	403abc <USBHS_Handler+0x34>
		otg_unfreeze_clock();
  404034:	4a0d      	ldr	r2, [pc, #52]	; (40406c <USBHS_Handler+0x5e4>)
  404036:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  40403a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  40403e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
  404042:	4613      	mov	r3, r2
  404044:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
  404048:	f412 4f80 	tst.w	r2, #16384	; 0x4000
  40404c:	d103      	bne.n	404056 <USBHS_Handler+0x5ce>
			if (Is_udd_suspend()) {
  40404e:	685a      	ldr	r2, [r3, #4]
  404050:	f012 0f01 	tst.w	r2, #1
  404054:	d0f6      	beq.n	404044 <USBHS_Handler+0x5bc>
		udd_disable_wake_up_interrupt();
  404056:	4b05      	ldr	r3, [pc, #20]	; (40406c <USBHS_Handler+0x5e4>)
  404058:	2210      	movs	r2, #16
  40405a:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
  40405c:	2001      	movs	r0, #1
  40405e:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
  404060:	4b03      	ldr	r3, [pc, #12]	; (404070 <USBHS_Handler+0x5e8>)
  404062:	4798      	blx	r3
		UDC_RESUME_EVENT();
  404064:	4b03      	ldr	r3, [pc, #12]	; (404074 <USBHS_Handler+0x5ec>)
  404066:	4798      	blx	r3
		goto udd_interrupt_end;
  404068:	e528      	b.n	403abc <USBHS_Handler+0x34>
  40406a:	bf00      	nop
  40406c:	40038000 	.word	0x40038000
  404070:	004035a5 	.word	0x004035a5
  404074:	00406d85 	.word	0x00406d85

00404078 <udd_is_high_speed>:
}
  404078:	2000      	movs	r0, #0
  40407a:	4770      	bx	lr

0040407c <udd_set_address>:
	udd_disable_address();
  40407c:	4b08      	ldr	r3, [pc, #32]	; (4040a0 <udd_set_address+0x24>)
  40407e:	681a      	ldr	r2, [r3, #0]
  404080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  404084:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
  404086:	681a      	ldr	r2, [r3, #0]
  404088:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  40408c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  404090:	4302      	orrs	r2, r0
  404092:	601a      	str	r2, [r3, #0]
	udd_enable_address();
  404094:	681a      	ldr	r2, [r3, #0]
  404096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40409a:	601a      	str	r2, [r3, #0]
  40409c:	4770      	bx	lr
  40409e:	bf00      	nop
  4040a0:	40038000 	.word	0x40038000

004040a4 <udd_getaddress>:
	return udd_get_configured_address();
  4040a4:	4b02      	ldr	r3, [pc, #8]	; (4040b0 <udd_getaddress+0xc>)
  4040a6:	6818      	ldr	r0, [r3, #0]
}
  4040a8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4040ac:	4770      	bx	lr
  4040ae:	bf00      	nop
  4040b0:	40038000 	.word	0x40038000

004040b4 <udd_get_frame_number>:
	return udd_frame_number();
  4040b4:	4b02      	ldr	r3, [pc, #8]	; (4040c0 <udd_get_frame_number+0xc>)
  4040b6:	6a18      	ldr	r0, [r3, #32]
}
  4040b8:	f3c0 00ca 	ubfx	r0, r0, #3, #11
  4040bc:	4770      	bx	lr
  4040be:	bf00      	nop
  4040c0:	40038000 	.word	0x40038000

004040c4 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  4040c4:	4b01      	ldr	r3, [pc, #4]	; (4040cc <udd_set_setup_payload+0x8>)
  4040c6:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  4040c8:	8199      	strh	r1, [r3, #12]
  4040ca:	4770      	bx	lr
  4040cc:	20400f10 	.word	0x20400f10

004040d0 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4040d0:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4040d4:	2a06      	cmp	r2, #6
  4040d6:	d900      	bls.n	4040da <udd_ep_free+0xa>
  4040d8:	4770      	bx	lr
{
  4040da:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
  4040dc:	4810      	ldr	r0, [pc, #64]	; (404120 <udd_ep_free+0x50>)
  4040de:	69c3      	ldr	r3, [r0, #28]
  4040e0:	2101      	movs	r1, #1
  4040e2:	fa01 f402 	lsl.w	r4, r1, r2
  4040e6:	ea23 0304 	bic.w	r3, r3, r4
  4040ea:	61c3      	str	r3, [r0, #28]
	udd_unallocate_memory(ep_index);
  4040ec:	f500 7080 	add.w	r0, r0, #256	; 0x100
  4040f0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
  4040f4:	f023 0302 	bic.w	r3, r3, #2
  4040f8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
  4040fc:	1e56      	subs	r6, r2, #1
  4040fe:	4c09      	ldr	r4, [pc, #36]	; (404124 <udd_ep_free+0x54>)
  404100:	fa06 f501 	lsl.w	r5, r6, r1
  404104:	19a8      	adds	r0, r5, r6
  404106:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  40410a:	4b07      	ldr	r3, [pc, #28]	; (404128 <udd_ep_free+0x58>)
  40410c:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
  40410e:	4435      	add	r5, r6
  404110:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  404114:	7d23      	ldrb	r3, [r4, #20]
  404116:	f36f 0382 	bfc	r3, #2, #1
  40411a:	7523      	strb	r3, [r4, #20]
  40411c:	bd70      	pop	{r4, r5, r6, pc}
  40411e:	bf00      	nop
  404120:	40038000 	.word	0x40038000
  404124:	20400c28 	.word	0x20400c28
  404128:	004038a9 	.word	0x004038a9

0040412c <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
  40412c:	f000 000f 	and.w	r0, r0, #15
  404130:	4b02      	ldr	r3, [pc, #8]	; (40413c <udd_ep_is_halted+0x10>)
  404132:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
  404136:	f3c0 40c0 	ubfx	r0, r0, #19, #1
  40413a:	4770      	bx	lr
  40413c:	400381c0 	.word	0x400381c0

00404140 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404140:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  404144:	2b06      	cmp	r3, #6
  404146:	d85d      	bhi.n	404204 <udd_ep_set_halt+0xc4>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
  404148:	4a36      	ldr	r2, [pc, #216]	; (404224 <udd_ep_set_halt+0xe4>)
  40414a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40414e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
  404152:	d159      	bne.n	404208 <udd_ep_set_halt+0xc8>
{
  404154:	b410      	push	{r4}
  404156:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  404158:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
  40415a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
  40415e:	4a32      	ldr	r2, [pc, #200]	; (404228 <udd_ep_set_halt+0xe8>)
  404160:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  404164:	7d12      	ldrb	r2, [r2, #20]
  404166:	f012 0f04 	tst.w	r2, #4
  40416a:	d14f      	bne.n	40420c <udd_ep_set_halt+0xcc>
	if (ptr_job->busy == true) {
  40416c:	f012 0f01 	tst.w	r2, #1
  404170:	d151      	bne.n	404216 <udd_ep_set_halt+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404172:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404176:	fab2 f282 	clz	r2, r2
  40417a:	0952      	lsrs	r2, r2, #5
  40417c:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40417e:	b672      	cpsid	i
  404180:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404184:	2400      	movs	r4, #0
  404186:	4a29      	ldr	r2, [pc, #164]	; (40422c <udd_ep_set_halt+0xec>)
  404188:	7014      	strb	r4, [r2, #0]
	return flags;
  40418a:	9c01      	ldr	r4, [sp, #4]
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
  40418c:	f010 0f80 	tst.w	r0, #128	; 0x80
  404190:	d118      	bne.n	4041c4 <udd_ep_set_halt+0x84>
	udd_disable_endpoint_bank_autoswitch(ep_index);
  404192:	4927      	ldr	r1, [pc, #156]	; (404230 <udd_ep_set_halt+0xf0>)
  404194:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
  404198:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  40419c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_ack_stall(ep_index);
  4041a0:	2140      	movs	r1, #64	; 0x40
  4041a2:	4a24      	ldr	r2, [pc, #144]	; (404234 <udd_ep_set_halt+0xf4>)
  4041a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
  4041a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4041ac:	3290      	adds	r2, #144	; 0x90
  4041ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
  4041b2:	2c00      	cmp	r4, #0
  4041b4:	d033      	beq.n	40421e <udd_ep_set_halt+0xde>
		cpu_irq_enable();
  4041b6:	2001      	movs	r0, #1
  4041b8:	4b1c      	ldr	r3, [pc, #112]	; (40422c <udd_ep_set_halt+0xec>)
  4041ba:	7018      	strb	r0, [r3, #0]
  4041bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4041c0:	b662      	cpsie	i
  4041c2:	e024      	b.n	40420e <udd_ep_set_halt+0xce>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
  4041c4:	4a1c      	ldr	r2, [pc, #112]	; (404238 <udd_ep_set_halt+0xf8>)
  4041c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4041ca:	f412 5f40 	tst.w	r2, #12288	; 0x3000
  4041ce:	d0e0      	beq.n	404192 <udd_ep_set_halt+0x52>
		ptr_job->stall_requested = true;
  4041d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4041d4:	4a14      	ldr	r2, [pc, #80]	; (404228 <udd_ep_set_halt+0xe8>)
  4041d6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
  4041da:	7d0a      	ldrb	r2, [r1, #20]
  4041dc:	f042 0204 	orr.w	r2, r2, #4
  4041e0:	750a      	strb	r2, [r1, #20]
		udd_enable_bank_interrupt(ep_index);
  4041e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4041e6:	4915      	ldr	r1, [pc, #84]	; (40423c <udd_ep_set_halt+0xfc>)
  4041e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
  4041ec:	fa02 f303 	lsl.w	r3, r2, r3
  4041f0:	4a13      	ldr	r2, [pc, #76]	; (404240 <udd_ep_set_halt+0x100>)
  4041f2:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
  4041f4:	b18c      	cbz	r4, 40421a <udd_ep_set_halt+0xda>
		cpu_irq_enable();
  4041f6:	2001      	movs	r0, #1
  4041f8:	4b0c      	ldr	r3, [pc, #48]	; (40422c <udd_ep_set_halt+0xec>)
  4041fa:	7018      	strb	r0, [r3, #0]
  4041fc:	f3bf 8f5f 	dmb	sy
  404200:	b662      	cpsie	i
  404202:	e004      	b.n	40420e <udd_ep_set_halt+0xce>
		return false;
  404204:	2000      	movs	r0, #0
  404206:	4770      	bx	lr
		return true; // Already STALL
  404208:	2001      	movs	r0, #1
  40420a:	4770      	bx	lr
  40420c:	2001      	movs	r0, #1
}
  40420e:	b003      	add	sp, #12
  404210:	f85d 4b04 	ldr.w	r4, [sp], #4
  404214:	4770      	bx	lr
		return false; // Job on going, stall impossible
  404216:	2000      	movs	r0, #0
  404218:	e7f9      	b.n	40420e <udd_ep_set_halt+0xce>
		return true;
  40421a:	2001      	movs	r0, #1
  40421c:	e7f7      	b.n	40420e <udd_ep_set_halt+0xce>
	return true;
  40421e:	2001      	movs	r0, #1
  404220:	e7f5      	b.n	40420e <udd_ep_set_halt+0xce>
  404222:	bf00      	nop
  404224:	400381c0 	.word	0x400381c0
  404228:	20400c28 	.word	0x20400c28
  40422c:	20400177 	.word	0x20400177
  404230:	40038100 	.word	0x40038100
  404234:	40038160 	.word	0x40038160
  404238:	40038130 	.word	0x40038130
  40423c:	400381f0 	.word	0x400381f0
  404240:	40038000 	.word	0x40038000

00404244 <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404244:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
  404248:	2806      	cmp	r0, #6
  40424a:	d851      	bhi.n	4042f0 <udd_ep_clear_halt+0xac>
{
  40424c:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40424e:	1e43      	subs	r3, r0, #1
	if (ptr_job->stall_requested) {
  404250:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  404254:	4a2c      	ldr	r2, [pc, #176]	; (404308 <udd_ep_clear_halt+0xc4>)
  404256:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40425a:	7d12      	ldrb	r2, [r2, #20]
  40425c:	f012 0f04 	tst.w	r2, #4
  404260:	d048      	beq.n	4042f4 <udd_ep_clear_halt+0xb0>
		ptr_job->stall_requested = false;
  404262:	460a      	mov	r2, r1
  404264:	4928      	ldr	r1, [pc, #160]	; (404308 <udd_ep_clear_halt+0xc4>)
  404266:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40426a:	7d11      	ldrb	r1, [r2, #20]
  40426c:	f36f 0182 	bfc	r1, #2, #1
  404270:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
  404272:	0082      	lsls	r2, r0, #2
  404274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404278:	4c24      	ldr	r4, [pc, #144]	; (40430c <udd_ep_clear_halt+0xc8>)
  40427a:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
  40427e:	4081      	lsls	r1, r0
  404280:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
  404284:	6161      	str	r1, [r4, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
  404286:	4922      	ldr	r1, [pc, #136]	; (404310 <udd_ep_clear_halt+0xcc>)
  404288:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40428c:	f411 2f00 	tst.w	r1, #524288	; 0x80000
  404290:	d014      	beq.n	4042bc <udd_ep_clear_halt+0x78>
		if (Is_udd_stall(ep_index)) {
  404292:	4920      	ldr	r1, [pc, #128]	; (404314 <udd_ep_clear_halt+0xd0>)
  404294:	5851      	ldr	r1, [r2, r1]
  404296:	f011 0f40 	tst.w	r1, #64	; 0x40
  40429a:	d006      	beq.n	4042aa <udd_ep_clear_halt+0x66>
			udd_ack_stall(ep_index);
  40429c:	2040      	movs	r0, #64	; 0x40
  40429e:	491e      	ldr	r1, [pc, #120]	; (404318 <udd_ep_clear_halt+0xd4>)
  4042a0:	5050      	str	r0, [r2, r1]
			udd_reset_data_toggle(ep_index);
  4042a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4042a6:	3190      	adds	r1, #144	; 0x90
  4042a8:	5050      	str	r0, [r2, r1]
		udd_disable_stall_handshake(ep_index);
  4042aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  4042ae:	4917      	ldr	r1, [pc, #92]	; (40430c <udd_ep_clear_halt+0xc8>)
  4042b0:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
  4042b2:	481a      	ldr	r0, [pc, #104]	; (40431c <udd_ep_clear_halt+0xd8>)
  4042b4:	5811      	ldr	r1, [r2, r0]
  4042b6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  4042ba:	5011      	str	r1, [r2, r0]
		if (ptr_job->busy == true) {
  4042bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  4042c0:	4911      	ldr	r1, [pc, #68]	; (404308 <udd_ep_clear_halt+0xc4>)
  4042c2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4042c6:	7d12      	ldrb	r2, [r2, #20]
  4042c8:	f012 0f01 	tst.w	r2, #1
  4042cc:	d101      	bne.n	4042d2 <udd_ep_clear_halt+0x8e>
	return true;
  4042ce:	2001      	movs	r0, #1
  4042d0:	bd10      	pop	{r4, pc}
			ptr_job->busy = false;
  4042d2:	4608      	mov	r0, r1
  4042d4:	0059      	lsls	r1, r3, #1
  4042d6:	18ca      	adds	r2, r1, r3
  4042d8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  4042dc:	7d14      	ldrb	r4, [r2, #20]
  4042de:	f36f 0400 	bfc	r4, #0, #1
  4042e2:	7514      	strb	r4, [r2, #20]
			ptr_job->call_nohalt();
  4042e4:	440b      	add	r3, r1
  4042e6:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
  4042ea:	4798      	blx	r3
	return true;
  4042ec:	2001      	movs	r0, #1
  4042ee:	bd10      	pop	{r4, pc}
		return false;
  4042f0:	2000      	movs	r0, #0
  4042f2:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep_index)) {
  4042f4:	0082      	lsls	r2, r0, #2
  4042f6:	4906      	ldr	r1, [pc, #24]	; (404310 <udd_ep_clear_halt+0xcc>)
  4042f8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4042fc:	f411 2f00 	tst.w	r1, #524288	; 0x80000
  404300:	d1c7      	bne.n	404292 <udd_ep_clear_halt+0x4e>
	return true;
  404302:	2001      	movs	r0, #1
}
  404304:	bd10      	pop	{r4, pc}
  404306:	bf00      	nop
  404308:	20400c28 	.word	0x20400c28
  40430c:	40038220 	.word	0x40038220
  404310:	400381c0 	.word	0x400381c0
  404314:	40038130 	.word	0x40038130
  404318:	40038160 	.word	0x40038160
  40431c:	40038100 	.word	0x40038100

00404320 <udd_ep_run>:
{
  404320:	b5f0      	push	{r4, r5, r6, r7, lr}
  404322:	b083      	sub	sp, #12
  404324:	f000 000f 	and.w	r0, r0, #15
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
  404328:	4c3a      	ldr	r4, [pc, #232]	; (404414 <udd_ep_run+0xf4>)
  40432a:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
	if (USB_DEVICE_MAX_EP < ep) {
  40432e:	2806      	cmp	r0, #6
  404330:	d864      	bhi.n	4043fc <udd_ep_run+0xdc>
	if ((!Is_udd_endpoint_enabled(ep))
  404332:	4c39      	ldr	r4, [pc, #228]	; (404418 <udd_ep_run+0xf8>)
  404334:	69e5      	ldr	r5, [r4, #28]
  404336:	2401      	movs	r4, #1
  404338:	4084      	lsls	r4, r0
  40433a:	422c      	tst	r4, r5
  40433c:	d061      	beq.n	404402 <udd_ep_run+0xe2>
			|| Is_udd_endpoint_stall_requested(ep)
  40433e:	4c37      	ldr	r4, [pc, #220]	; (40441c <udd_ep_run+0xfc>)
  404340:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
  404344:	f414 2f00 	tst.w	r4, #524288	; 0x80000
  404348:	d15d      	bne.n	404406 <udd_ep_run+0xe6>
	ptr_job = &udd_ep_job[ep - 1];
  40434a:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
  40434c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
  404350:	4d33      	ldr	r5, [pc, #204]	; (404420 <udd_ep_run+0x100>)
  404352:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
  404356:	7d2d      	ldrb	r5, [r5, #20]
  404358:	f015 0f04 	tst.w	r5, #4
  40435c:	d155      	bne.n	40440a <udd_ep_run+0xea>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40435e:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404362:	fab5 f585 	clz	r5, r5
  404366:	096d      	lsrs	r5, r5, #5
  404368:	9501      	str	r5, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40436a:	b672      	cpsid	i
  40436c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404370:	2600      	movs	r6, #0
  404372:	4d2c      	ldr	r5, [pc, #176]	; (404424 <udd_ep_run+0x104>)
  404374:	702e      	strb	r6, [r5, #0]
	return flags;
  404376:	9f01      	ldr	r7, [sp, #4]
	if (ptr_job->busy == true) {
  404378:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  40437c:	4e28      	ldr	r6, [pc, #160]	; (404420 <udd_ep_run+0x100>)
  40437e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  404382:	7d2d      	ldrb	r5, [r5, #20]
  404384:	f015 0f01 	tst.w	r5, #1
  404388:	d009      	beq.n	40439e <udd_ep_run+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
  40438a:	2f00      	cmp	r7, #0
  40438c:	d03f      	beq.n	40440e <udd_ep_run+0xee>
		cpu_irq_enable();
  40438e:	2201      	movs	r2, #1
  404390:	4b24      	ldr	r3, [pc, #144]	; (404424 <udd_ep_run+0x104>)
  404392:	701a      	strb	r2, [r3, #0]
  404394:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404398:	b662      	cpsie	i
		return false; // Job already on going
  40439a:	2000      	movs	r0, #0
  40439c:	e02f      	b.n	4043fe <udd_ep_run+0xde>
	ptr_job->busy = true;
  40439e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  4043a2:	4e1f      	ldr	r6, [pc, #124]	; (404420 <udd_ep_run+0x100>)
  4043a4:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  4043a8:	7d2e      	ldrb	r6, [r5, #20]
  4043aa:	f046 0601 	orr.w	r6, r6, #1
  4043ae:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
  4043b0:	b12f      	cbz	r7, 4043be <udd_ep_run+0x9e>
		cpu_irq_enable();
  4043b2:	2601      	movs	r6, #1
  4043b4:	4d1b      	ldr	r5, [pc, #108]	; (404424 <udd_ep_run+0x104>)
  4043b6:	702e      	strb	r6, [r5, #0]
  4043b8:	f3bf 8f5f 	dmb	sy
  4043bc:	b662      	cpsie	i
	ptr_job->buf = buf;
  4043be:	4d18      	ldr	r5, [pc, #96]	; (404420 <udd_ep_run+0x100>)
  4043c0:	0066      	lsls	r6, r4, #1
  4043c2:	1937      	adds	r7, r6, r4
  4043c4:	00ff      	lsls	r7, r7, #3
  4043c6:	eb05 0e07 	add.w	lr, r5, r7
  4043ca:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  4043ce:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  4043d2:	2200      	movs	r2, #0
  4043d4:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->buf_load = 0;
  4043d8:	f8ce 2010 	str.w	r2, [lr, #16]
	ptr_job->call_trans = callback;
  4043dc:	9a08      	ldr	r2, [sp, #32]
  4043de:	51ea      	str	r2, [r5, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4043e0:	2b00      	cmp	r3, #0
  4043e2:	bf08      	it	eq
  4043e4:	f041 0101 	orreq.w	r1, r1, #1
  4043e8:	f89e 3014 	ldrb.w	r3, [lr, #20]
  4043ec:	f361 0341 	bfi	r3, r1, #1, #1
  4043f0:	f88e 3014 	strb.w	r3, [lr, #20]
	udd_ep_trans_done(ep);
  4043f4:	4b0c      	ldr	r3, [pc, #48]	; (404428 <udd_ep_run+0x108>)
  4043f6:	4798      	blx	r3
	return true;
  4043f8:	2001      	movs	r0, #1
  4043fa:	e000      	b.n	4043fe <udd_ep_run+0xde>
		return false;
  4043fc:	2000      	movs	r0, #0
}
  4043fe:	b003      	add	sp, #12
  404400:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  404402:	2000      	movs	r0, #0
  404404:	e7fb      	b.n	4043fe <udd_ep_run+0xde>
  404406:	2000      	movs	r0, #0
  404408:	e7f9      	b.n	4043fe <udd_ep_run+0xde>
  40440a:	2000      	movs	r0, #0
  40440c:	e7f7      	b.n	4043fe <udd_ep_run+0xde>
		return false; // Job already on going
  40440e:	2000      	movs	r0, #0
  404410:	e7f5      	b.n	4043fe <udd_ep_run+0xde>
  404412:	bf00      	nop
  404414:	40038100 	.word	0x40038100
  404418:	40038000 	.word	0x40038000
  40441c:	400381c0 	.word	0x400381c0
  404420:	20400c28 	.word	0x20400c28
  404424:	20400177 	.word	0x20400177
  404428:	004038e1 	.word	0x004038e1

0040442c <udd_ep_alloc>:
{
  40442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404430:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  404432:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  404436:	2c06      	cmp	r4, #6
  404438:	f200 80df 	bhi.w	4045fa <udd_ep_alloc+0x1ce>
	if (Is_udd_endpoint_enabled(ep)) {
  40443c:	4b73      	ldr	r3, [pc, #460]	; (40460c <udd_ep_alloc+0x1e0>)
  40443e:	69dd      	ldr	r5, [r3, #28]
  404440:	2301      	movs	r3, #1
  404442:	40a3      	lsls	r3, r4
  404444:	402b      	ands	r3, r5
  404446:	f040 80dd 	bne.w	404604 <udd_ep_alloc+0x1d8>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
  40444a:	f001 0503 	and.w	r5, r1, #3
  40444e:	2d02      	cmp	r5, #2
  404450:	d005      	beq.n	40445e <udd_ep_alloc+0x32>
  404452:	2d03      	cmp	r5, #3
  404454:	d020      	beq.n	404498 <udd_ep_alloc+0x6c>
  404456:	2d01      	cmp	r5, #1
  404458:	d01e      	beq.n	404498 <udd_ep_alloc+0x6c>
		return false;
  40445a:	2300      	movs	r3, #0
  40445c:	e0ce      	b.n	4045fc <udd_ep_alloc+0x1d0>
		bank = USBHS_DEVEPTCFG_EPBK_2_BANK >>
  40445e:	f04f 0e01 	mov.w	lr, #1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  404462:	4e6b      	ldr	r6, [pc, #428]	; (404610 <udd_ep_alloc+0x1e4>)
  404464:	eb06 0584 	add.w	r5, r6, r4, lsl #2
  404468:	f856 c024 	ldr.w	ip, [r6, r4, lsl #2]
  40446c:	4f69      	ldr	r7, [pc, #420]	; (404614 <udd_ep_alloc+0x1e8>)
  40446e:	ea0c 0707 	and.w	r7, ip, r7
  404472:	02c9      	lsls	r1, r1, #11
  404474:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
  404478:	b240      	sxtb	r0, r0
  40447a:	2800      	cmp	r0, #0
  40447c:	bfb8      	it	lt
  40447e:	f44f 7380 	movlt.w	r3, #256	; 0x100
  404482:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
  404486:	b280      	uxth	r0, r0
  404488:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
  40448c:	d307      	bcc.n	40449e <udd_ep_alloc+0x72>
  40448e:	2a08      	cmp	r2, #8
  404490:	d924      	bls.n	4044dc <udd_ep_alloc+0xb0>
  404492:	0052      	lsls	r2, r2, #1
  404494:	3a01      	subs	r2, #1
  404496:	e004      	b.n	4044a2 <udd_ep_alloc+0x76>
		bank = USBHS_DEVEPTCFG_EPBK_1_BANK >>
  404498:	f04f 0e00 	mov.w	lr, #0
  40449c:	e7e1      	b.n	404462 <udd_ep_alloc+0x36>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  40449e:	f240 72ff 	movw	r2, #2047	; 0x7ff
  4044a2:	fab2 f282 	clz	r2, r2
  4044a6:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
  4044aa:	430b      	orrs	r3, r1
  4044ac:	f1c2 021c 	rsb	r2, r2, #28
  4044b0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  4044b4:	f423 63d0 	bic.w	r3, r3, #1664	; 0x680
  4044b8:	f023 0303 	bic.w	r3, r3, #3
  4044bc:	04db      	lsls	r3, r3, #19
  4044be:	0cdb      	lsrs	r3, r3, #19
  4044c0:	433b      	orrs	r3, r7
  4044c2:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	ep_allocated = 1 << ep;
  4044c6:	2701      	movs	r7, #1
  4044c8:	40a7      	lsls	r7, r4
  4044ca:	b2bf      	uxth	r7, r7
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
  4044cc:	2c05      	cmp	r4, #5
  4044ce:	d81c      	bhi.n	40450a <udd_ep_alloc+0xde>
  4044d0:	4a51      	ldr	r2, [pc, #324]	; (404618 <udd_ep_alloc+0x1ec>)
  4044d2:	2306      	movs	r3, #6
		if (Is_udd_endpoint_enabled(i)) {
  4044d4:	484d      	ldr	r0, [pc, #308]	; (40460c <udd_ep_alloc+0x1e0>)
  4044d6:	f04f 0e01 	mov.w	lr, #1
  4044da:	e006      	b.n	4044ea <udd_ep_alloc+0xbe>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  4044dc:	220f      	movs	r2, #15
  4044de:	e7e0      	b.n	4044a2 <udd_ep_alloc+0x76>
  4044e0:	3b01      	subs	r3, #1
  4044e2:	3a04      	subs	r2, #4
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
  4044e4:	b2d9      	uxtb	r1, r3
  4044e6:	428c      	cmp	r4, r1
  4044e8:	d20f      	bcs.n	40450a <udd_ep_alloc+0xde>
		if (Is_udd_endpoint_enabled(i)) {
  4044ea:	69c6      	ldr	r6, [r0, #28]
  4044ec:	fa0e f103 	lsl.w	r1, lr, r3
  4044f0:	420e      	tst	r6, r1
  4044f2:	d0f5      	beq.n	4044e0 <udd_ep_alloc+0xb4>
			ep_allocated |= 1 << i;
  4044f4:	430f      	orrs	r7, r1
  4044f6:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
  4044f8:	69c6      	ldr	r6, [r0, #28]
  4044fa:	ea26 0101 	bic.w	r1, r6, r1
  4044fe:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
  404500:	6811      	ldr	r1, [r2, #0]
  404502:	f021 0102 	bic.w	r1, r1, #2
  404506:	6011      	str	r1, [r2, #0]
  404508:	e7ea      	b.n	4044e0 <udd_ep_alloc+0xb4>
  40450a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  40450e:	4e43      	ldr	r6, [pc, #268]	; (40461c <udd_ep_alloc+0x1f0>)
  404510:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
			bool b_restart = ptr_job->busy;
  404514:	f8df 9104 	ldr.w	r9, [pc, #260]	; 40461c <udd_ep_alloc+0x1f0>
			udd_enable_endpoint(i);
  404518:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 40460c <udd_ep_alloc+0x1e0>
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  40451c:	f8df a100 	ldr.w	sl, [pc, #256]	; 404620 <udd_ep_alloc+0x1f4>
  404520:	e01d      	b.n	40455e <udd_ep_alloc+0x132>
				if (NULL == ptr_job->call_trans) {
  404522:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  404526:	4a3d      	ldr	r2, [pc, #244]	; (40461c <udd_ep_alloc+0x1f0>)
  404528:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
  40452c:	2c00      	cmp	r4, #0
  40452e:	d06b      	beq.n	404608 <udd_ep_alloc+0x1dc>
				if (Is_udd_endpoint_in(i)) {
  404530:	682b      	ldr	r3, [r5, #0]
  404532:	f413 7f80 	tst.w	r3, #256	; 0x100
					i |= USB_EP_DIR_IN;
  404536:	bf18      	it	ne
  404538:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
  40453c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  404540:	4b36      	ldr	r3, [pc, #216]	; (40461c <udd_ep_alloc+0x1f0>)
  404542:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404546:	4602      	mov	r2, r0
  404548:	68c9      	ldr	r1, [r1, #12]
  40454a:	2001      	movs	r0, #1
  40454c:	47a0      	blx	r4
				return false;
  40454e:	2300      	movs	r3, #0
  404550:	e054      	b.n	4045fc <udd_ep_alloc+0x1d0>
  404552:	3401      	adds	r4, #1
  404554:	3504      	adds	r5, #4
  404556:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
  404558:	b2e3      	uxtb	r3, r4
  40455a:	2b06      	cmp	r3, #6
  40455c:	d84b      	bhi.n	4045f6 <udd_ep_alloc+0x1ca>
  40455e:	b2e0      	uxtb	r0, r4
		if (ep_allocated & (1 << i)) {
  404560:	fa47 f304 	asr.w	r3, r7, r4
  404564:	f013 0f01 	tst.w	r3, #1
  404568:	d0f3      	beq.n	404552 <udd_ep_alloc+0x126>
  40456a:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
  40456c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  404570:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
  404574:	f893 e014 	ldrb.w	lr, [r3, #20]
  404578:	f00e 0201 	and.w	r2, lr, #1
			ptr_job->busy = false;
  40457c:	f36f 0e00 	bfc	lr, #0, #1
  404580:	f883 e014 	strb.w	lr, [r3, #20]
			udd_allocate_memory(i);
  404584:	682b      	ldr	r3, [r5, #0]
  404586:	f043 0302 	orr.w	r3, r3, #2
  40458a:	602b      	str	r3, [r5, #0]
			udd_enable_endpoint(i);
  40458c:	f8d8 e01c 	ldr.w	lr, [r8, #28]
  404590:	2301      	movs	r3, #1
  404592:	40a3      	lsls	r3, r4
  404594:	ea43 030e 	orr.w	r3, r3, lr
  404598:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
  40459c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40459e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  4045a2:	d0be      	beq.n	404522 <udd_ep_alloc+0xf6>
			udd_enable_endpoint_bank_autoswitch(i);
  4045a4:	682b      	ldr	r3, [r5, #0]
  4045a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4045aa:	602b      	str	r3, [r5, #0]
			if (b_restart) {
  4045ac:	2a00      	cmp	r2, #0
  4045ae:	d0d0      	beq.n	404552 <udd_ep_alloc+0x126>
				ptr_job->buf_cnt -= ptr_job->buf_load;
  4045b0:	f856 3c0c 	ldr.w	r3, [r6, #-12]
  4045b4:	f856 2c08 	ldr.w	r2, [r6, #-8]
  4045b8:	1a9a      	subs	r2, r3, r2
  4045ba:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  4045be:	682b      	ldr	r3, [r5, #0]
  4045c0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4045c4:	bf18      	it	ne
  4045c6:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
  4045ca:	f856 bc10 	ldr.w	fp, [r6, #-16]
  4045ce:	f856 cc14 	ldr.w	ip, [r6, #-20]
						ptr_job->b_shortpacket,
  4045d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4045d6:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
  4045da:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  4045dc:	f856 3c18 	ldr.w	r3, [r6, #-24]
  4045e0:	9300      	str	r3, [sp, #0]
  4045e2:	ebab 0302 	sub.w	r3, fp, r2
  4045e6:	4462      	add	r2, ip
  4045e8:	f3c1 0140 	ubfx	r1, r1, #1, #1
  4045ec:	47d0      	blx	sl
				if (!b_restart) {
  4045ee:	4603      	mov	r3, r0
  4045f0:	2800      	cmp	r0, #0
  4045f2:	d1ae      	bne.n	404552 <udd_ep_alloc+0x126>
  4045f4:	e002      	b.n	4045fc <udd_ep_alloc+0x1d0>
	return true;
  4045f6:	2301      	movs	r3, #1
  4045f8:	e000      	b.n	4045fc <udd_ep_alloc+0x1d0>
		return false;
  4045fa:	2300      	movs	r3, #0
}
  4045fc:	4618      	mov	r0, r3
  4045fe:	b003      	add	sp, #12
  404600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
  404604:	2300      	movs	r3, #0
  404606:	e7f9      	b.n	4045fc <udd_ep_alloc+0x1d0>
					return false;
  404608:	2300      	movs	r3, #0
  40460a:	e7f7      	b.n	4045fc <udd_ep_alloc+0x1d0>
  40460c:	40038000 	.word	0x40038000
  404610:	40038100 	.word	0x40038100
  404614:	ffffe683 	.word	0xffffe683
  404618:	40038118 	.word	0x40038118
  40461c:	20400c28 	.word	0x20400c28
  404620:	00404321 	.word	0x00404321

00404624 <udd_ep_abort>:
{
  404624:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404626:	f000 020f 	and.w	r2, r0, #15
		udd_disable_endpoint_dma_interrupt(ep_index);
  40462a:	1e54      	subs	r4, r2, #1
  40462c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  404630:	40a3      	lsls	r3, r4
  404632:	4918      	ldr	r1, [pc, #96]	; (404694 <udd_ep_abort+0x70>)
  404634:	614b      	str	r3, [r1, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
  404636:	4b18      	ldr	r3, [pc, #96]	; (404698 <udd_ep_abort+0x74>)
  404638:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  40463c:	2500      	movs	r5, #0
  40463e:	609d      	str	r5, [r3, #8]
	udd_disable_endpoint_interrupt(ep_index);
  404640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404644:	4093      	lsls	r3, r2
  404646:	614b      	str	r3, [r1, #20]
  __ASM volatile ("dsb");
  404648:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40464c:	f3bf 8f6f 	isb	sy
	if (ep & USB_EP_DIR_IN) {
  404650:	f010 0f80 	tst.w	r0, #128	; 0x80
  404654:	d108      	bne.n	404668 <udd_ep_abort+0x44>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
  404656:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  40465a:	2101      	movs	r1, #1
  40465c:	480f      	ldr	r0, [pc, #60]	; (40469c <udd_ep_abort+0x78>)
  40465e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  404662:	4b0f      	ldr	r3, [pc, #60]	; (4046a0 <udd_ep_abort+0x7c>)
  404664:	4798      	blx	r3
  404666:	bd70      	pop	{r4, r5, r6, pc}
		while(udd_nb_busy_bank(ep_index)) {
  404668:	0093      	lsls	r3, r2, #2
  40466a:	480e      	ldr	r0, [pc, #56]	; (4046a4 <udd_ep_abort+0x80>)
  40466c:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
  40466e:	4d0e      	ldr	r5, [pc, #56]	; (4046a8 <udd_ep_abort+0x84>)
  404670:	441d      	add	r5, r3
  404672:	f44f 5600 	mov.w	r6, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
  404676:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
  40467a:	4419      	add	r1, r3
  40467c:	e004      	b.n	404688 <udd_ep_abort+0x64>
			udd_kill_last_in_bank(ep_index);
  40467e:	602e      	str	r6, [r5, #0]
			while(Is_udd_kill_last(ep_index));
  404680:	680b      	ldr	r3, [r1, #0]
  404682:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  404686:	d1fb      	bne.n	404680 <udd_ep_abort+0x5c>
		while(udd_nb_busy_bank(ep_index)) {
  404688:	6803      	ldr	r3, [r0, #0]
  40468a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  40468e:	d1f6      	bne.n	40467e <udd_ep_abort+0x5a>
  404690:	e7e1      	b.n	404656 <udd_ep_abort+0x32>
  404692:	bf00      	nop
  404694:	40038000 	.word	0x40038000
  404698:	40038300 	.word	0x40038300
  40469c:	20400c28 	.word	0x20400c28
  4046a0:	004038a9 	.word	0x004038a9
  4046a4:	40038130 	.word	0x40038130
  4046a8:	400381f0 	.word	0x400381f0

004046ac <xdmac_configure_transfer>:
  4046ac:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4046b0:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4046b2:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  4046b4:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  4046b6:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  4046b8:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  4046ba:	6813      	ldr	r3, [r2, #0]
  4046bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4046c0:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4046c2:	6913      	ldr	r3, [r2, #16]
  4046c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4046c8:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  4046ca:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  4046cc:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  4046ce:	6993      	ldr	r3, [r2, #24]
  4046d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4046d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4046d8:	69d3      	ldr	r3, [r2, #28]
  4046da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4046de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4046e2:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4046e4:	678b      	str	r3, [r1, #120]	; 0x78
  4046e6:	4770      	bx	lr

004046e8 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
  4046e8:	b570      	push	{r4, r5, r6, lr}
  4046ea:	b086      	sub	sp, #24
  4046ec:	4604      	mov	r4, r0
  4046ee:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
  4046f0:	2304      	movs	r3, #4
  4046f2:	9300      	str	r3, [sp, #0]
  4046f4:	ab02      	add	r3, sp, #8
  4046f6:	220f      	movs	r2, #15
  4046f8:	210e      	movs	r1, #14
  4046fa:	480d      	ldr	r0, [pc, #52]	; (404730 <flash_read_unique_id+0x48>)
  4046fc:	4d0d      	ldr	r5, [pc, #52]	; (404734 <flash_read_unique_id+0x4c>)
  4046fe:	47a8      	blx	r5
  404700:	b118      	cbz	r0, 40470a <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
  404702:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
  404704:	4628      	mov	r0, r5
  404706:	b006      	add	sp, #24
  404708:	bd70      	pop	{r4, r5, r6, pc}
  40470a:	4605      	mov	r5, r0
  40470c:	2e04      	cmp	r6, #4
  40470e:	bf28      	it	cs
  404710:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
  404712:	b156      	cbz	r6, 40472a <flash_read_unique_id+0x42>
  404714:	aa02      	add	r2, sp, #8
  404716:	4623      	mov	r3, r4
  404718:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
  40471c:	f852 0b04 	ldr.w	r0, [r2], #4
  404720:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
  404724:	428b      	cmp	r3, r1
  404726:	d1f9      	bne.n	40471c <flash_read_unique_id+0x34>
  404728:	e7ec      	b.n	404704 <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
  40472a:	4635      	mov	r5, r6
  40472c:	e7ea      	b.n	404704 <flash_read_unique_id+0x1c>
  40472e:	bf00      	nop
  404730:	400e0c00 	.word	0x400e0c00
  404734:	20400001 	.word	0x20400001

00404738 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  404738:	e7fe      	b.n	404738 <Dummy_Handler>
	...

0040473c <Reset_Handler>:
{
  40473c:	b500      	push	{lr}
  40473e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  404740:	4b25      	ldr	r3, [pc, #148]	; (4047d8 <Reset_Handler+0x9c>)
  404742:	4a26      	ldr	r2, [pc, #152]	; (4047dc <Reset_Handler+0xa0>)
  404744:	429a      	cmp	r2, r3
  404746:	d010      	beq.n	40476a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  404748:	4b25      	ldr	r3, [pc, #148]	; (4047e0 <Reset_Handler+0xa4>)
  40474a:	4a23      	ldr	r2, [pc, #140]	; (4047d8 <Reset_Handler+0x9c>)
  40474c:	429a      	cmp	r2, r3
  40474e:	d20c      	bcs.n	40476a <Reset_Handler+0x2e>
  404750:	3b01      	subs	r3, #1
  404752:	1a9b      	subs	r3, r3, r2
  404754:	f023 0303 	bic.w	r3, r3, #3
  404758:	3304      	adds	r3, #4
  40475a:	4413      	add	r3, r2
  40475c:	491f      	ldr	r1, [pc, #124]	; (4047dc <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40475e:	f851 0b04 	ldr.w	r0, [r1], #4
  404762:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  404766:	429a      	cmp	r2, r3
  404768:	d1f9      	bne.n	40475e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40476a:	4b1e      	ldr	r3, [pc, #120]	; (4047e4 <Reset_Handler+0xa8>)
  40476c:	4a1e      	ldr	r2, [pc, #120]	; (4047e8 <Reset_Handler+0xac>)
  40476e:	429a      	cmp	r2, r3
  404770:	d20a      	bcs.n	404788 <Reset_Handler+0x4c>
  404772:	3b01      	subs	r3, #1
  404774:	1a9b      	subs	r3, r3, r2
  404776:	f023 0303 	bic.w	r3, r3, #3
  40477a:	3304      	adds	r3, #4
  40477c:	4413      	add	r3, r2
                *pDest++ = 0;
  40477e:	2100      	movs	r1, #0
  404780:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  404784:	4293      	cmp	r3, r2
  404786:	d1fb      	bne.n	404780 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  404788:	4a18      	ldr	r2, [pc, #96]	; (4047ec <Reset_Handler+0xb0>)
  40478a:	4b19      	ldr	r3, [pc, #100]	; (4047f0 <Reset_Handler+0xb4>)
  40478c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  404790:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404792:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404796:	fab3 f383 	clz	r3, r3
  40479a:	095b      	lsrs	r3, r3, #5
  40479c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40479e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4047a0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4047a4:	2200      	movs	r2, #0
  4047a6:	4b13      	ldr	r3, [pc, #76]	; (4047f4 <Reset_Handler+0xb8>)
  4047a8:	701a      	strb	r2, [r3, #0]
	return flags;
  4047aa:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4047ac:	4a12      	ldr	r2, [pc, #72]	; (4047f8 <Reset_Handler+0xbc>)
  4047ae:	6813      	ldr	r3, [r2, #0]
  4047b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4047b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4047b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4047ba:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  4047be:	b129      	cbz	r1, 4047cc <Reset_Handler+0x90>
		cpu_irq_enable();
  4047c0:	2201      	movs	r2, #1
  4047c2:	4b0c      	ldr	r3, [pc, #48]	; (4047f4 <Reset_Handler+0xb8>)
  4047c4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4047c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4047ca:	b662      	cpsie	i
        __libc_init_array();
  4047cc:	4b0b      	ldr	r3, [pc, #44]	; (4047fc <Reset_Handler+0xc0>)
  4047ce:	4798      	blx	r3
        main();
  4047d0:	4b0b      	ldr	r3, [pc, #44]	; (404800 <Reset_Handler+0xc4>)
  4047d2:	4798      	blx	r3
  4047d4:	e7fe      	b.n	4047d4 <Reset_Handler+0x98>
  4047d6:	bf00      	nop
  4047d8:	20400000 	.word	0x20400000
  4047dc:	0040f66c 	.word	0x0040f66c
  4047e0:	20400b30 	.word	0x20400b30
  4047e4:	20401024 	.word	0x20401024
  4047e8:	20400b40 	.word	0x20400b40
  4047ec:	e000ed00 	.word	0xe000ed00
  4047f0:	00400000 	.word	0x00400000
  4047f4:	20400177 	.word	0x20400177
  4047f8:	e000ed88 	.word	0xe000ed88
  4047fc:	0040b621 	.word	0x0040b621
  404800:	0040a751 	.word	0x0040a751

00404804 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  404804:	4b3b      	ldr	r3, [pc, #236]	; (4048f4 <SystemCoreClockUpdate+0xf0>)
  404806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404808:	f003 0303 	and.w	r3, r3, #3
  40480c:	2b01      	cmp	r3, #1
  40480e:	d01d      	beq.n	40484c <SystemCoreClockUpdate+0x48>
  404810:	b183      	cbz	r3, 404834 <SystemCoreClockUpdate+0x30>
  404812:	2b02      	cmp	r3, #2
  404814:	d036      	beq.n	404884 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  404816:	4b37      	ldr	r3, [pc, #220]	; (4048f4 <SystemCoreClockUpdate+0xf0>)
  404818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40481a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40481e:	2b70      	cmp	r3, #112	; 0x70
  404820:	d05f      	beq.n	4048e2 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  404822:	4b34      	ldr	r3, [pc, #208]	; (4048f4 <SystemCoreClockUpdate+0xf0>)
  404824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  404826:	4934      	ldr	r1, [pc, #208]	; (4048f8 <SystemCoreClockUpdate+0xf4>)
  404828:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40482c:	680b      	ldr	r3, [r1, #0]
  40482e:	40d3      	lsrs	r3, r2
  404830:	600b      	str	r3, [r1, #0]
  404832:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  404834:	4b31      	ldr	r3, [pc, #196]	; (4048fc <SystemCoreClockUpdate+0xf8>)
  404836:	695b      	ldr	r3, [r3, #20]
  404838:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40483c:	bf14      	ite	ne
  40483e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  404842:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  404846:	4b2c      	ldr	r3, [pc, #176]	; (4048f8 <SystemCoreClockUpdate+0xf4>)
  404848:	601a      	str	r2, [r3, #0]
  40484a:	e7e4      	b.n	404816 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40484c:	4b29      	ldr	r3, [pc, #164]	; (4048f4 <SystemCoreClockUpdate+0xf0>)
  40484e:	6a1b      	ldr	r3, [r3, #32]
  404850:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404854:	d003      	beq.n	40485e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  404856:	4a2a      	ldr	r2, [pc, #168]	; (404900 <SystemCoreClockUpdate+0xfc>)
  404858:	4b27      	ldr	r3, [pc, #156]	; (4048f8 <SystemCoreClockUpdate+0xf4>)
  40485a:	601a      	str	r2, [r3, #0]
  40485c:	e7db      	b.n	404816 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40485e:	4a29      	ldr	r2, [pc, #164]	; (404904 <SystemCoreClockUpdate+0x100>)
  404860:	4b25      	ldr	r3, [pc, #148]	; (4048f8 <SystemCoreClockUpdate+0xf4>)
  404862:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  404864:	4b23      	ldr	r3, [pc, #140]	; (4048f4 <SystemCoreClockUpdate+0xf0>)
  404866:	6a1b      	ldr	r3, [r3, #32]
  404868:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40486c:	2b10      	cmp	r3, #16
  40486e:	d005      	beq.n	40487c <SystemCoreClockUpdate+0x78>
  404870:	2b20      	cmp	r3, #32
  404872:	d1d0      	bne.n	404816 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  404874:	4a22      	ldr	r2, [pc, #136]	; (404900 <SystemCoreClockUpdate+0xfc>)
  404876:	4b20      	ldr	r3, [pc, #128]	; (4048f8 <SystemCoreClockUpdate+0xf4>)
  404878:	601a      	str	r2, [r3, #0]
          break;
  40487a:	e7cc      	b.n	404816 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40487c:	4a22      	ldr	r2, [pc, #136]	; (404908 <SystemCoreClockUpdate+0x104>)
  40487e:	4b1e      	ldr	r3, [pc, #120]	; (4048f8 <SystemCoreClockUpdate+0xf4>)
  404880:	601a      	str	r2, [r3, #0]
          break;
  404882:	e7c8      	b.n	404816 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404884:	4b1b      	ldr	r3, [pc, #108]	; (4048f4 <SystemCoreClockUpdate+0xf0>)
  404886:	6a1b      	ldr	r3, [r3, #32]
  404888:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40488c:	d016      	beq.n	4048bc <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40488e:	4a1c      	ldr	r2, [pc, #112]	; (404900 <SystemCoreClockUpdate+0xfc>)
  404890:	4b19      	ldr	r3, [pc, #100]	; (4048f8 <SystemCoreClockUpdate+0xf4>)
  404892:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  404894:	4b17      	ldr	r3, [pc, #92]	; (4048f4 <SystemCoreClockUpdate+0xf0>)
  404896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404898:	f003 0303 	and.w	r3, r3, #3
  40489c:	2b02      	cmp	r3, #2
  40489e:	d1ba      	bne.n	404816 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4048a0:	4a14      	ldr	r2, [pc, #80]	; (4048f4 <SystemCoreClockUpdate+0xf0>)
  4048a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4048a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4048a6:	4814      	ldr	r0, [pc, #80]	; (4048f8 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4048a8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4048ac:	6803      	ldr	r3, [r0, #0]
  4048ae:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4048b2:	b2d2      	uxtb	r2, r2
  4048b4:	fbb3 f3f2 	udiv	r3, r3, r2
  4048b8:	6003      	str	r3, [r0, #0]
  4048ba:	e7ac      	b.n	404816 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4048bc:	4a11      	ldr	r2, [pc, #68]	; (404904 <SystemCoreClockUpdate+0x100>)
  4048be:	4b0e      	ldr	r3, [pc, #56]	; (4048f8 <SystemCoreClockUpdate+0xf4>)
  4048c0:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4048c2:	4b0c      	ldr	r3, [pc, #48]	; (4048f4 <SystemCoreClockUpdate+0xf0>)
  4048c4:	6a1b      	ldr	r3, [r3, #32]
  4048c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4048ca:	2b10      	cmp	r3, #16
  4048cc:	d005      	beq.n	4048da <SystemCoreClockUpdate+0xd6>
  4048ce:	2b20      	cmp	r3, #32
  4048d0:	d1e0      	bne.n	404894 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4048d2:	4a0b      	ldr	r2, [pc, #44]	; (404900 <SystemCoreClockUpdate+0xfc>)
  4048d4:	4b08      	ldr	r3, [pc, #32]	; (4048f8 <SystemCoreClockUpdate+0xf4>)
  4048d6:	601a      	str	r2, [r3, #0]
          break;
  4048d8:	e7dc      	b.n	404894 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4048da:	4a0b      	ldr	r2, [pc, #44]	; (404908 <SystemCoreClockUpdate+0x104>)
  4048dc:	4b06      	ldr	r3, [pc, #24]	; (4048f8 <SystemCoreClockUpdate+0xf4>)
  4048de:	601a      	str	r2, [r3, #0]
          break;
  4048e0:	e7d8      	b.n	404894 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4048e2:	4a05      	ldr	r2, [pc, #20]	; (4048f8 <SystemCoreClockUpdate+0xf4>)
  4048e4:	6813      	ldr	r3, [r2, #0]
  4048e6:	4909      	ldr	r1, [pc, #36]	; (40490c <SystemCoreClockUpdate+0x108>)
  4048e8:	fba1 1303 	umull	r1, r3, r1, r3
  4048ec:	085b      	lsrs	r3, r3, #1
  4048ee:	6013      	str	r3, [r2, #0]
  4048f0:	4770      	bx	lr
  4048f2:	bf00      	nop
  4048f4:	400e0600 	.word	0x400e0600
  4048f8:	20400178 	.word	0x20400178
  4048fc:	400e1810 	.word	0x400e1810
  404900:	00b71b00 	.word	0x00b71b00
  404904:	003d0900 	.word	0x003d0900
  404908:	007a1200 	.word	0x007a1200
  40490c:	aaaaaaab 	.word	0xaaaaaaab

00404910 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  404910:	4b16      	ldr	r3, [pc, #88]	; (40496c <system_init_flash+0x5c>)
  404912:	4298      	cmp	r0, r3
  404914:	d913      	bls.n	40493e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  404916:	4b16      	ldr	r3, [pc, #88]	; (404970 <system_init_flash+0x60>)
  404918:	4298      	cmp	r0, r3
  40491a:	d915      	bls.n	404948 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40491c:	4b15      	ldr	r3, [pc, #84]	; (404974 <system_init_flash+0x64>)
  40491e:	4298      	cmp	r0, r3
  404920:	d916      	bls.n	404950 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  404922:	4b15      	ldr	r3, [pc, #84]	; (404978 <system_init_flash+0x68>)
  404924:	4298      	cmp	r0, r3
  404926:	d917      	bls.n	404958 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  404928:	4b14      	ldr	r3, [pc, #80]	; (40497c <system_init_flash+0x6c>)
  40492a:	4298      	cmp	r0, r3
  40492c:	d918      	bls.n	404960 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40492e:	4b14      	ldr	r3, [pc, #80]	; (404980 <system_init_flash+0x70>)
  404930:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  404932:	bf94      	ite	ls
  404934:	4a13      	ldrls	r2, [pc, #76]	; (404984 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  404936:	4a14      	ldrhi	r2, [pc, #80]	; (404988 <system_init_flash+0x78>)
  404938:	4b14      	ldr	r3, [pc, #80]	; (40498c <system_init_flash+0x7c>)
  40493a:	601a      	str	r2, [r3, #0]
  40493c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40493e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  404942:	4b12      	ldr	r3, [pc, #72]	; (40498c <system_init_flash+0x7c>)
  404944:	601a      	str	r2, [r3, #0]
  404946:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  404948:	4a11      	ldr	r2, [pc, #68]	; (404990 <system_init_flash+0x80>)
  40494a:	4b10      	ldr	r3, [pc, #64]	; (40498c <system_init_flash+0x7c>)
  40494c:	601a      	str	r2, [r3, #0]
  40494e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  404950:	4a10      	ldr	r2, [pc, #64]	; (404994 <system_init_flash+0x84>)
  404952:	4b0e      	ldr	r3, [pc, #56]	; (40498c <system_init_flash+0x7c>)
  404954:	601a      	str	r2, [r3, #0]
  404956:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  404958:	4a0f      	ldr	r2, [pc, #60]	; (404998 <system_init_flash+0x88>)
  40495a:	4b0c      	ldr	r3, [pc, #48]	; (40498c <system_init_flash+0x7c>)
  40495c:	601a      	str	r2, [r3, #0]
  40495e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  404960:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  404964:	4b09      	ldr	r3, [pc, #36]	; (40498c <system_init_flash+0x7c>)
  404966:	601a      	str	r2, [r3, #0]
  404968:	4770      	bx	lr
  40496a:	bf00      	nop
  40496c:	015ef3bf 	.word	0x015ef3bf
  404970:	02bde77f 	.word	0x02bde77f
  404974:	041cdb3f 	.word	0x041cdb3f
  404978:	057bceff 	.word	0x057bceff
  40497c:	06dac2bf 	.word	0x06dac2bf
  404980:	0839b67f 	.word	0x0839b67f
  404984:	04000500 	.word	0x04000500
  404988:	04000600 	.word	0x04000600
  40498c:	400e0c00 	.word	0x400e0c00
  404990:	04000100 	.word	0x04000100
  404994:	04000200 	.word	0x04000200
  404998:	04000300 	.word	0x04000300

0040499c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40499c:	4b0a      	ldr	r3, [pc, #40]	; (4049c8 <_sbrk+0x2c>)
  40499e:	681b      	ldr	r3, [r3, #0]
  4049a0:	b153      	cbz	r3, 4049b8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4049a2:	4b09      	ldr	r3, [pc, #36]	; (4049c8 <_sbrk+0x2c>)
  4049a4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4049a6:	181a      	adds	r2, r3, r0
  4049a8:	4908      	ldr	r1, [pc, #32]	; (4049cc <_sbrk+0x30>)
  4049aa:	4291      	cmp	r1, r2
  4049ac:	db08      	blt.n	4049c0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4049ae:	4610      	mov	r0, r2
  4049b0:	4a05      	ldr	r2, [pc, #20]	; (4049c8 <_sbrk+0x2c>)
  4049b2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4049b4:	4618      	mov	r0, r3
  4049b6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4049b8:	4a05      	ldr	r2, [pc, #20]	; (4049d0 <_sbrk+0x34>)
  4049ba:	4b03      	ldr	r3, [pc, #12]	; (4049c8 <_sbrk+0x2c>)
  4049bc:	601a      	str	r2, [r3, #0]
  4049be:	e7f0      	b.n	4049a2 <_sbrk+0x6>
		return (caddr_t) -1;	
  4049c0:	f04f 30ff 	mov.w	r0, #4294967295
}
  4049c4:	4770      	bx	lr
  4049c6:	bf00      	nop
  4049c8:	20400cb8 	.word	0x20400cb8
  4049cc:	2045fffc 	.word	0x2045fffc
  4049d0:	20409228 	.word	0x20409228

004049d4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4049d4:	f04f 30ff 	mov.w	r0, #4294967295
  4049d8:	4770      	bx	lr

004049da <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4049da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4049de:	604b      	str	r3, [r1, #4]

	return 0;
}
  4049e0:	2000      	movs	r0, #0
  4049e2:	4770      	bx	lr

004049e4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4049e4:	2001      	movs	r0, #1
  4049e6:	4770      	bx	lr

004049e8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4049e8:	2000      	movs	r0, #0
  4049ea:	4770      	bx	lr

004049ec <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  4049ec:	2802      	cmp	r0, #2
  4049ee:	d815      	bhi.n	404a1c <disk_initialize+0x30>
{
  4049f0:	b510      	push	{r4, lr}
  4049f2:	4604      	mov	r4, r0
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  4049f4:	4b0b      	ldr	r3, [pc, #44]	; (404a24 <disk_initialize+0x38>)
  4049f6:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  4049f8:	2803      	cmp	r0, #3
  4049fa:	d106      	bne.n	404a0a <disk_initialize+0x1e>
		mem_status = mem_test_unit_ready(drv);
  4049fc:	4620      	mov	r0, r4
  4049fe:	4b09      	ldr	r3, [pc, #36]	; (404a24 <disk_initialize+0x38>)
  404a00:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  404a02:	2803      	cmp	r0, #3
  404a04:	d101      	bne.n	404a0a <disk_initialize+0x1e>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  404a06:	2001      	movs	r0, #1
  404a08:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  404a0a:	b948      	cbnz	r0, 404a20 <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  404a0c:	4620      	mov	r0, r4
  404a0e:	4b06      	ldr	r3, [pc, #24]	; (404a28 <disk_initialize+0x3c>)
  404a10:	4798      	blx	r3
  404a12:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  404a14:	bf14      	ite	ne
  404a16:	2004      	movne	r0, #4
  404a18:	2000      	moveq	r0, #0
  404a1a:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  404a1c:	2001      	movs	r0, #1
  404a1e:	4770      	bx	lr
		return STA_NOINIT;
  404a20:	2001      	movs	r0, #1
}
  404a22:	bd10      	pop	{r4, pc}
  404a24:	00401d3d 	.word	0x00401d3d
  404a28:	00401d81 	.word	0x00401d81

00404a2c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  404a2c:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  404a2e:	4b05      	ldr	r3, [pc, #20]	; (404a44 <disk_status+0x18>)
  404a30:	4798      	blx	r3
  404a32:	b120      	cbz	r0, 404a3e <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  404a34:	2802      	cmp	r0, #2
  404a36:	bf0c      	ite	eq
  404a38:	2003      	moveq	r0, #3
  404a3a:	2001      	movne	r0, #1
  404a3c:	bd08      	pop	{r3, pc}
		return 0;
  404a3e:	2000      	movs	r0, #0
	}
}
  404a40:	bd08      	pop	{r3, pc}
  404a42:	bf00      	nop
  404a44:	00401d3d 	.word	0x00401d3d

00404a48 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  404a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a4c:	b083      	sub	sp, #12
  404a4e:	4680      	mov	r8, r0
  404a50:	460d      	mov	r5, r1
  404a52:	4614      	mov	r4, r2
  404a54:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  404a56:	4b15      	ldr	r3, [pc, #84]	; (404aac <disk_read+0x64>)
  404a58:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  404a5a:	b918      	cbnz	r0, 404a64 <disk_read+0x1c>
		return RES_ERROR;
  404a5c:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  404a5e:	b003      	add	sp, #12
  404a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a64:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  404a66:	a901      	add	r1, sp, #4
  404a68:	4640      	mov	r0, r8
  404a6a:	4b11      	ldr	r3, [pc, #68]	; (404ab0 <disk_read+0x68>)
  404a6c:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  404a6e:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  404a70:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  404a74:	9b01      	ldr	r3, [sp, #4]
  404a76:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  404a7a:	429a      	cmp	r2, r3
  404a7c:	d901      	bls.n	404a82 <disk_read+0x3a>
		return RES_PARERR;
  404a7e:	2004      	movs	r0, #4
  404a80:	e7ed      	b.n	404a5e <disk_read+0x16>
	for (i = 0; i < count; i++) {
  404a82:	46ba      	mov	sl, r7
  404a84:	b177      	cbz	r7, 404aa4 <disk_read+0x5c>
  404a86:	0276      	lsls	r6, r6, #9
  404a88:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  404a8a:	f8df b028 	ldr.w	fp, [pc, #40]	; 404ab4 <disk_read+0x6c>
  404a8e:	462a      	mov	r2, r5
  404a90:	4621      	mov	r1, r4
  404a92:	4640      	mov	r0, r8
  404a94:	47d8      	blx	fp
  404a96:	b938      	cbnz	r0, 404aa8 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  404a98:	3701      	adds	r7, #1
  404a9a:	444c      	add	r4, r9
  404a9c:	4435      	add	r5, r6
  404a9e:	4557      	cmp	r7, sl
  404aa0:	d1f5      	bne.n	404a8e <disk_read+0x46>
  404aa2:	e7dc      	b.n	404a5e <disk_read+0x16>
	return RES_OK;
  404aa4:	2000      	movs	r0, #0
  404aa6:	e7da      	b.n	404a5e <disk_read+0x16>
			return RES_ERROR;
  404aa8:	2001      	movs	r0, #1
  404aaa:	e7d8      	b.n	404a5e <disk_read+0x16>
  404aac:	00401d75 	.word	0x00401d75
  404ab0:	00401d55 	.word	0x00401d55
  404ab4:	00401d9d 	.word	0x00401d9d

00404ab8 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  404ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404abc:	b083      	sub	sp, #12
  404abe:	4680      	mov	r8, r0
  404ac0:	460d      	mov	r5, r1
  404ac2:	4614      	mov	r4, r2
  404ac4:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  404ac6:	4b15      	ldr	r3, [pc, #84]	; (404b1c <disk_write+0x64>)
  404ac8:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  404aca:	b918      	cbnz	r0, 404ad4 <disk_write+0x1c>
		return RES_ERROR;
  404acc:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  404ace:	b003      	add	sp, #12
  404ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ad4:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  404ad6:	a901      	add	r1, sp, #4
  404ad8:	4640      	mov	r0, r8
  404ada:	4b11      	ldr	r3, [pc, #68]	; (404b20 <disk_write+0x68>)
  404adc:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  404ade:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  404ae0:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  404ae4:	9b01      	ldr	r3, [sp, #4]
  404ae6:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  404aea:	429a      	cmp	r2, r3
  404aec:	d901      	bls.n	404af2 <disk_write+0x3a>
		return RES_PARERR;
  404aee:	2004      	movs	r0, #4
  404af0:	e7ed      	b.n	404ace <disk_write+0x16>
	for (i = 0; i < count; i++) {
  404af2:	46ba      	mov	sl, r7
  404af4:	b177      	cbz	r7, 404b14 <disk_write+0x5c>
  404af6:	0276      	lsls	r6, r6, #9
  404af8:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  404afa:	f8df b028 	ldr.w	fp, [pc, #40]	; 404b24 <disk_write+0x6c>
  404afe:	462a      	mov	r2, r5
  404b00:	4621      	mov	r1, r4
  404b02:	4640      	mov	r0, r8
  404b04:	47d8      	blx	fp
  404b06:	b938      	cbnz	r0, 404b18 <disk_write+0x60>
	for (i = 0; i < count; i++) {
  404b08:	3701      	adds	r7, #1
  404b0a:	444c      	add	r4, r9
  404b0c:	4435      	add	r5, r6
  404b0e:	4557      	cmp	r7, sl
  404b10:	d1f5      	bne.n	404afe <disk_write+0x46>
  404b12:	e7dc      	b.n	404ace <disk_write+0x16>
	return RES_OK;
  404b14:	2000      	movs	r0, #0
  404b16:	e7da      	b.n	404ace <disk_write+0x16>
			return RES_ERROR;
  404b18:	2001      	movs	r0, #1
  404b1a:	e7d8      	b.n	404ace <disk_write+0x16>
  404b1c:	00401d75 	.word	0x00401d75
  404b20:	00401d55 	.word	0x00401d55
  404b24:	00401dc1 	.word	0x00401dc1

00404b28 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  404b28:	b510      	push	{r4, lr}
  404b2a:	b082      	sub	sp, #8
  404b2c:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  404b2e:	2903      	cmp	r1, #3
  404b30:	d825      	bhi.n	404b7e <disk_ioctl+0x56>
  404b32:	e8df f001 	tbb	[pc, r1]
  404b36:	071d      	.short	0x071d
  404b38:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  404b3a:	2301      	movs	r3, #1
  404b3c:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  404b3e:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  404b40:	b002      	add	sp, #8
  404b42:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  404b44:	a901      	add	r1, sp, #4
  404b46:	4b11      	ldr	r3, [pc, #68]	; (404b8c <disk_ioctl+0x64>)
  404b48:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  404b4a:	9b01      	ldr	r3, [sp, #4]
  404b4c:	3301      	adds	r3, #1
  404b4e:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  404b50:	2000      	movs	r0, #0
	break;
  404b52:	e7f5      	b.n	404b40 <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  404b54:	4b0e      	ldr	r3, [pc, #56]	; (404b90 <disk_ioctl+0x68>)
  404b56:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  404b58:	2808      	cmp	r0, #8
  404b5a:	d812      	bhi.n	404b82 <disk_ioctl+0x5a>
  404b5c:	f44f 738b 	mov.w	r3, #278	; 0x116
  404b60:	fa23 f000 	lsr.w	r0, r3, r0
				(uc_sector_size != SECTOR_SIZE_2048) &&
  404b64:	f010 0f01 	tst.w	r0, #1
  404b68:	d00d      	beq.n	404b86 <disk_ioctl+0x5e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  404b6a:	2000      	movs	r0, #0
  404b6c:	7020      	strb	r0, [r4, #0]
	break;
  404b6e:	e7e7      	b.n	404b40 <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  404b70:	4b08      	ldr	r3, [pc, #32]	; (404b94 <disk_ioctl+0x6c>)
  404b72:	4798      	blx	r3
  404b74:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  404b76:	bf0c      	ite	eq
  404b78:	2000      	moveq	r0, #0
  404b7a:	2003      	movne	r0, #3
  404b7c:	e7e0      	b.n	404b40 <disk_ioctl+0x18>
		res = RES_PARERR;
  404b7e:	2004      	movs	r0, #4
  404b80:	e7de      	b.n	404b40 <disk_ioctl+0x18>
			return RES_ERROR;
  404b82:	2001      	movs	r0, #1
  404b84:	e7dc      	b.n	404b40 <disk_ioctl+0x18>
  404b86:	2001      	movs	r0, #1
  404b88:	e7da      	b.n	404b40 <disk_ioctl+0x18>
  404b8a:	bf00      	nop
  404b8c:	00401d55 	.word	0x00401d55
  404b90:	00401d75 	.word	0x00401d75
  404b94:	00401d3d 	.word	0x00401d3d

00404b98 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  404b98:	b530      	push	{r4, r5, lr}
  404b9a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  404b9c:	4c11      	ldr	r4, [pc, #68]	; (404be4 <get_fattime+0x4c>)
  404b9e:	ab07      	add	r3, sp, #28
  404ba0:	aa08      	add	r2, sp, #32
  404ba2:	a909      	add	r1, sp, #36	; 0x24
  404ba4:	4620      	mov	r0, r4
  404ba6:	4d10      	ldr	r5, [pc, #64]	; (404be8 <get_fattime+0x50>)
  404ba8:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  404baa:	ab03      	add	r3, sp, #12
  404bac:	9300      	str	r3, [sp, #0]
  404bae:	ab04      	add	r3, sp, #16
  404bb0:	aa05      	add	r2, sp, #20
  404bb2:	a906      	add	r1, sp, #24
  404bb4:	4620      	mov	r0, r4
  404bb6:	4c0d      	ldr	r4, [pc, #52]	; (404bec <get_fattime+0x54>)
  404bb8:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  404bba:	9b04      	ldr	r3, [sp, #16]
  404bbc:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  404bbe:	9805      	ldr	r0, [sp, #20]
  404bc0:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  404bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
  404bc6:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  404bca:	9808      	ldr	r0, [sp, #32]
  404bcc:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  404bd0:	9807      	ldr	r0, [sp, #28]
  404bd2:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  404bd6:	9806      	ldr	r0, [sp, #24]
  404bd8:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  404bdc:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  404be0:	b00b      	add	sp, #44	; 0x2c
  404be2:	bd30      	pop	{r4, r5, pc}
  404be4:	400e1860 	.word	0x400e1860
  404be8:	004024c5 	.word	0x004024c5
  404bec:	004025b1 	.word	0x004025b1

00404bf0 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  404bf0:	b13a      	cbz	r2, 404c02 <mem_cpy+0x12>
  404bf2:	3801      	subs	r0, #1
  404bf4:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  404bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
  404bfa:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  404bfe:	4291      	cmp	r1, r2
  404c00:	d1f9      	bne.n	404bf6 <mem_cpy+0x6>
  404c02:	4770      	bx	lr

00404c04 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  404c04:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  404c06:	6983      	ldr	r3, [r0, #24]
  404c08:	3b02      	subs	r3, #2
  404c0a:	4299      	cmp	r1, r3
  404c0c:	d204      	bcs.n	404c18 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
  404c0e:	7883      	ldrb	r3, [r0, #2]
  404c10:	6a80      	ldr	r0, [r0, #40]	; 0x28
  404c12:	fb01 0003 	mla	r0, r1, r3, r0
  404c16:	4770      	bx	lr
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  404c18:	2000      	movs	r0, #0
}
  404c1a:	4770      	bx	lr

00404c1c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  404c1c:	4602      	mov	r2, r0
  404c1e:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  404c22:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  404c24:	01c3      	lsls	r3, r0, #7
  404c26:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  404c2a:	f812 0b01 	ldrb.w	r0, [r2], #1
  404c2e:	fa50 f383 	uxtab	r3, r0, r3
  404c32:	b2d8      	uxtb	r0, r3
  404c34:	428a      	cmp	r2, r1
  404c36:	d1f5      	bne.n	404c24 <sum_sfn+0x8>
	return sum;
}
  404c38:	4770      	bx	lr
	...

00404c3c <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  404c3c:	b198      	cbz	r0, 404c66 <validate+0x2a>
{
  404c3e:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  404c40:	7802      	ldrb	r2, [r0, #0]
  404c42:	b90a      	cbnz	r2, 404c48 <validate+0xc>
		return FR_INVALID_OBJECT;
  404c44:	2009      	movs	r0, #9
  404c46:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  404c48:	88c2      	ldrh	r2, [r0, #6]
  404c4a:	428a      	cmp	r2, r1
  404c4c:	d001      	beq.n	404c52 <validate+0x16>
		return FR_INVALID_OBJECT;
  404c4e:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  404c50:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  404c52:	7840      	ldrb	r0, [r0, #1]
  404c54:	4b05      	ldr	r3, [pc, #20]	; (404c6c <validate+0x30>)
  404c56:	4798      	blx	r3
  404c58:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  404c5c:	2800      	cmp	r0, #0
  404c5e:	bf14      	ite	ne
  404c60:	2003      	movne	r0, #3
  404c62:	2000      	moveq	r0, #0
  404c64:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  404c66:	2009      	movs	r0, #9
  404c68:	4770      	bx	lr
  404c6a:	bf00      	nop
  404c6c:	00404a2d 	.word	0x00404a2d

00404c70 <check_fs>:
{
  404c70:	b538      	push	{r3, r4, r5, lr}
  404c72:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  404c74:	2301      	movs	r3, #1
  404c76:	460a      	mov	r2, r1
  404c78:	f100 0130 	add.w	r1, r0, #48	; 0x30
  404c7c:	7840      	ldrb	r0, [r0, #1]
  404c7e:	4d1d      	ldr	r5, [pc, #116]	; (404cf4 <check_fs+0x84>)
  404c80:	47a8      	blx	r5
  404c82:	b108      	cbz	r0, 404c88 <check_fs+0x18>
		return 3;
  404c84:	2003      	movs	r0, #3
  404c86:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  404c88:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  404c8c:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  404c90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404c94:	b21b      	sxth	r3, r3
  404c96:	4a18      	ldr	r2, [pc, #96]	; (404cf8 <check_fs+0x88>)
  404c98:	4293      	cmp	r3, r2
  404c9a:	d001      	beq.n	404ca0 <check_fs+0x30>
		return 2;
  404c9c:	2002      	movs	r0, #2
  404c9e:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  404ca0:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  404ca4:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  404ca8:	041b      	lsls	r3, r3, #16
  404caa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404cae:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  404cb2:	4313      	orrs	r3, r2
  404cb4:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  404cb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404cbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  404cc0:	4a0e      	ldr	r2, [pc, #56]	; (404cfc <check_fs+0x8c>)
  404cc2:	4293      	cmp	r3, r2
  404cc4:	d013      	beq.n	404cee <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  404cc6:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  404cca:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  404cce:	0400      	lsls	r0, r0, #16
  404cd0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  404cd4:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  404cd8:	4318      	orrs	r0, r3
  404cda:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  404cde:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  404ce2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  404ce6:	1a80      	subs	r0, r0, r2
  404ce8:	bf18      	it	ne
  404cea:	2001      	movne	r0, #1
  404cec:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  404cee:	2000      	movs	r0, #0
}
  404cf0:	bd38      	pop	{r3, r4, r5, pc}
  404cf2:	bf00      	nop
  404cf4:	00404a49 	.word	0x00404a49
  404cf8:	ffffaa55 	.word	0xffffaa55
  404cfc:	00544146 	.word	0x00544146

00404d00 <chk_mounted>:
{
  404d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  404d02:	6804      	ldr	r4, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  404d04:	7823      	ldrb	r3, [r4, #0]
  404d06:	3b30      	subs	r3, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  404d08:	2b09      	cmp	r3, #9
  404d0a:	d802      	bhi.n	404d12 <chk_mounted+0x12>
  404d0c:	7865      	ldrb	r5, [r4, #1]
  404d0e:	2d3a      	cmp	r5, #58	; 0x3a
  404d10:	d018      	beq.n	404d44 <chk_mounted+0x44>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  404d12:	4bb0      	ldr	r3, [pc, #704]	; (404fd4 <chk_mounted+0x2d4>)
  404d14:	681c      	ldr	r4, [r3, #0]
  404d16:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  404d18:	2c00      	cmp	r4, #0
  404d1a:	f000 8143 	beq.w	404fa4 <chk_mounted+0x2a4>
  404d1e:	4615      	mov	r5, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  404d20:	7823      	ldrb	r3, [r4, #0]
  404d22:	b1ab      	cbz	r3, 404d50 <chk_mounted+0x50>
		stat = disk_status(fs->drv);
  404d24:	7860      	ldrb	r0, [r4, #1]
  404d26:	4bac      	ldr	r3, [pc, #688]	; (404fd8 <chk_mounted+0x2d8>)
  404d28:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  404d2a:	f010 0f01 	tst.w	r0, #1
  404d2e:	d10f      	bne.n	404d50 <chk_mounted+0x50>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  404d30:	2d00      	cmp	r5, #0
  404d32:	f000 8139 	beq.w	404fa8 <chk_mounted+0x2a8>
  404d36:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  404d3a:	2800      	cmp	r0, #0
  404d3c:	bf0c      	ite	eq
  404d3e:	2000      	moveq	r0, #0
  404d40:	200a      	movne	r0, #10
  404d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p += 2; *path = p;				/* Return pointer to the path name */
  404d44:	3402      	adds	r4, #2
  404d46:	6004      	str	r4, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  404d48:	2b00      	cmp	r3, #0
  404d4a:	d0e2      	beq.n	404d12 <chk_mounted+0x12>
		return FR_INVALID_DRIVE;
  404d4c:	200b      	movs	r0, #11
  404d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  404d50:	2000      	movs	r0, #0
  404d52:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  404d54:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  404d56:	4ba1      	ldr	r3, [pc, #644]	; (404fdc <chk_mounted+0x2dc>)
  404d58:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  404d5a:	f010 0f01 	tst.w	r0, #1
  404d5e:	d001      	beq.n	404d64 <chk_mounted+0x64>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  404d60:	2003      	movs	r0, #3
  404d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  404d64:	b125      	cbz	r5, 404d70 <chk_mounted+0x70>
  404d66:	f010 0f04 	tst.w	r0, #4
  404d6a:	d001      	beq.n	404d70 <chk_mounted+0x70>
		return FR_WRITE_PROTECTED;
  404d6c:	200a      	movs	r0, #10
  404d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  404d70:	2100      	movs	r1, #0
  404d72:	4620      	mov	r0, r4
  404d74:	4b9a      	ldr	r3, [pc, #616]	; (404fe0 <chk_mounted+0x2e0>)
  404d76:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  404d78:	2801      	cmp	r0, #1
  404d7a:	d006      	beq.n	404d8a <chk_mounted+0x8a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  404d7c:	2500      	movs	r5, #0
	if (fmt == 3) return FR_DISK_ERR;
  404d7e:	2803      	cmp	r0, #3
  404d80:	f000 8114 	beq.w	404fac <chk_mounted+0x2ac>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  404d84:	b1c8      	cbz	r0, 404dba <chk_mounted+0xba>
  404d86:	200d      	movs	r0, #13
  404d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  404d8a:	f894 31f2 	ldrb.w	r3, [r4, #498]	; 0x1f2
  404d8e:	b90b      	cbnz	r3, 404d94 <chk_mounted+0x94>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  404d90:	200d      	movs	r0, #13
  404d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  404d94:	f894 31f9 	ldrb.w	r3, [r4, #505]	; 0x1f9
  404d98:	f894 51f8 	ldrb.w	r5, [r4, #504]	; 0x1f8
  404d9c:	042d      	lsls	r5, r5, #16
  404d9e:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
  404da2:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
  404da6:	431d      	orrs	r5, r3
  404da8:	f894 31f7 	ldrb.w	r3, [r4, #503]	; 0x1f7
  404dac:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  404db0:	4629      	mov	r1, r5
  404db2:	4620      	mov	r0, r4
  404db4:	4b8a      	ldr	r3, [pc, #552]	; (404fe0 <chk_mounted+0x2e0>)
  404db6:	4798      	blx	r3
  404db8:	e7e1      	b.n	404d7e <chk_mounted+0x7e>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  404dba:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  404dbe:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
  404dc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404dc6:	b21b      	sxth	r3, r3
  404dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404dcc:	d001      	beq.n	404dd2 <chk_mounted+0xd2>
		return FR_NO_FILESYSTEM;
  404dce:	200d      	movs	r0, #13
  404dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  404dd2:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  404dd6:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  404dda:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  404dde:	d10d      	bne.n	404dfc <chk_mounted+0xfc>
  404de0:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
  404de4:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
  404de8:	0412      	lsls	r2, r2, #16
  404dea:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  404dee:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
  404df2:	431a      	orrs	r2, r3
  404df4:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
  404df8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  404dfc:	61e2      	str	r2, [r4, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  404dfe:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
  404e02:	f884 e003 	strb.w	lr, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  404e06:	f10e 33ff 	add.w	r3, lr, #4294967295
  404e0a:	b2db      	uxtb	r3, r3
  404e0c:	2b01      	cmp	r3, #1
  404e0e:	d901      	bls.n	404e14 <chk_mounted+0x114>
  404e10:	200d      	movs	r0, #13
  404e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  404e14:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
  404e18:	70a6      	strb	r6, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  404e1a:	2e00      	cmp	r6, #0
  404e1c:	f000 80c8 	beq.w	404fb0 <chk_mounted+0x2b0>
  404e20:	1e73      	subs	r3, r6, #1
  404e22:	4233      	tst	r3, r6
  404e24:	d001      	beq.n	404e2a <chk_mounted+0x12a>
  404e26:	200d      	movs	r0, #13
  404e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  404e2a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  404e2e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  404e32:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  404e36:	8121      	strh	r1, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  404e38:	f011 0f0f 	tst.w	r1, #15
  404e3c:	f040 80ba 	bne.w	404fb4 <chk_mounted+0x2b4>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  404e40:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  404e44:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  404e48:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  404e4c:	d10d      	bne.n	404e6a <chk_mounted+0x16a>
  404e4e:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
  404e52:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
  404e56:	041b      	lsls	r3, r3, #16
  404e58:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  404e5c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
  404e60:	4303      	orrs	r3, r0
  404e62:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  404e66:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  404e6a:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
  404e6e:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  404e72:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  404e76:	f000 809f 	beq.w	404fb8 <chk_mounted+0x2b8>
	fasize *= b;										/* Number of sectors for FAT area */
  404e7a:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  404e7e:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  404e82:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  404e84:	4283      	cmp	r3, r0
  404e86:	f0c0 8099 	bcc.w	404fbc <chk_mounted+0x2bc>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  404e8a:	1a1b      	subs	r3, r3, r0
  404e8c:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  404e90:	2b00      	cmp	r3, #0
  404e92:	f000 8095 	beq.w	404fc0 <chk_mounted+0x2c0>
	fmt = FS_FAT12;
  404e96:	f640 76f5 	movw	r6, #4085	; 0xff5
  404e9a:	42b3      	cmp	r3, r6
  404e9c:	bf8c      	ite	hi
  404e9e:	2602      	movhi	r6, #2
  404ea0:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  404ea2:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  404ea6:	4563      	cmp	r3, ip
  404ea8:	f200 80a4 	bhi.w	404ff4 <chk_mounted+0x2f4>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  404eac:	3302      	adds	r3, #2
  404eae:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  404eb0:	4428      	add	r0, r5
  404eb2:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  404eb4:	443d      	add	r5, r7
  404eb6:	6225      	str	r5, [r4, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  404eb8:	2900      	cmp	r1, #0
  404eba:	f000 8089 	beq.w	404fd0 <chk_mounted+0x2d0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  404ebe:	4475      	add	r5, lr
  404ec0:	6265      	str	r5, [r4, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  404ec2:	2e02      	cmp	r6, #2
  404ec4:	d10b      	bne.n	404ede <chk_mounted+0x1de>
  404ec6:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  404ec8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  404ecc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  404ed0:	d37c      	bcc.n	404fcc <chk_mounted+0x2cc>
	fs->free_clust = 0xFFFFFFFF;
  404ed2:	f04f 33ff 	mov.w	r3, #4294967295
  404ed6:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
  404ed8:	2300      	movs	r3, #0
  404eda:	60e3      	str	r3, [r4, #12]
  404edc:	e051      	b.n	404f82 <chk_mounted+0x282>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  404ede:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  404ee2:	f003 0301 	and.w	r3, r3, #1
  404ee6:	eb03 0351 	add.w	r3, r3, r1, lsr #1
  404eea:	e7ed      	b.n	404ec8 <chk_mounted+0x1c8>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  404eec:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  404ef0:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  404ef4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  404ef8:	b21b      	sxth	r3, r3
  404efa:	4a3a      	ldr	r2, [pc, #232]	; (404fe4 <chk_mounted+0x2e4>)
  404efc:	4293      	cmp	r3, r2
  404efe:	d14b      	bne.n	404f98 <chk_mounted+0x298>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  404f00:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  404f04:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  404f08:	041b      	lsls	r3, r3, #16
  404f0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404f0e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  404f12:	4313      	orrs	r3, r2
  404f14:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
  404f18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  404f1c:	4a32      	ldr	r2, [pc, #200]	; (404fe8 <chk_mounted+0x2e8>)
  404f1e:	4293      	cmp	r3, r2
  404f20:	d13c      	bne.n	404f9c <chk_mounted+0x29c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  404f22:	f894 2217 	ldrb.w	r2, [r4, #535]	; 0x217
  404f26:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
  404f2a:	041b      	lsls	r3, r3, #16
  404f2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404f30:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
  404f34:	4313      	orrs	r3, r2
  404f36:	f894 2215 	ldrb.w	r2, [r4, #533]	; 0x215
  404f3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  404f3e:	4a2b      	ldr	r2, [pc, #172]	; (404fec <chk_mounted+0x2ec>)
  404f40:	4293      	cmp	r3, r2
  404f42:	d12d      	bne.n	404fa0 <chk_mounted+0x2a0>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  404f44:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
  404f48:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
  404f4c:	041b      	lsls	r3, r3, #16
  404f4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404f52:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
  404f56:	4313      	orrs	r3, r2
  404f58:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
  404f5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404f60:	60e3      	str	r3, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  404f62:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
  404f66:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
  404f6a:	041b      	lsls	r3, r3, #16
  404f6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404f70:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
  404f74:	4313      	orrs	r3, r2
  404f76:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
  404f7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404f7e:	6123      	str	r3, [r4, #16]
  404f80:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  404f82:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  404f84:	4a1a      	ldr	r2, [pc, #104]	; (404ff0 <chk_mounted+0x2f0>)
  404f86:	8813      	ldrh	r3, [r2, #0]
  404f88:	3301      	adds	r3, #1
  404f8a:	b29b      	uxth	r3, r3
  404f8c:	8013      	strh	r3, [r2, #0]
  404f8e:	80e3      	strh	r3, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  404f90:	2000      	movs	r0, #0
  404f92:	62e0      	str	r0, [r4, #44]	; 0x2c
	fs->wflag = 0;
  404f94:	7120      	strb	r0, [r4, #4]
	return FR_OK;
  404f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f98:	2603      	movs	r6, #3
  404f9a:	e7f2      	b.n	404f82 <chk_mounted+0x282>
  404f9c:	2603      	movs	r6, #3
  404f9e:	e7f0      	b.n	404f82 <chk_mounted+0x282>
  404fa0:	2603      	movs	r6, #3
  404fa2:	e7ee      	b.n	404f82 <chk_mounted+0x282>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  404fa4:	200c      	movs	r0, #12
  404fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  404fa8:	2000      	movs	r0, #0
  404faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  404fac:	2001      	movs	r0, #1
  404fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  404fb0:	200d      	movs	r0, #13
  404fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  404fb4:	200d      	movs	r0, #13
  404fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  404fb8:	200d      	movs	r0, #13
  404fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  404fbc:	200d      	movs	r0, #13
  404fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  404fc0:	200d      	movs	r0, #13
  404fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  404fc4:	200d      	movs	r0, #13
  404fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  404fc8:	200d      	movs	r0, #13
  404fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  404fcc:	200d      	movs	r0, #13
  404fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  404fd0:	200d      	movs	r0, #13
  404fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404fd4:	20400cbc 	.word	0x20400cbc
  404fd8:	00404a2d 	.word	0x00404a2d
  404fdc:	004049ed 	.word	0x004049ed
  404fe0:	00404c71 	.word	0x00404c71
  404fe4:	ffffaa55 	.word	0xffffaa55
  404fe8:	41615252 	.word	0x41615252
  404fec:	61417272 	.word	0x61417272
  404ff0:	20400cc0 	.word	0x20400cc0
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  404ff4:	3302      	adds	r3, #2
  404ff6:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  404ff8:	4428      	add	r0, r5
  404ffa:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  404ffc:	442f      	add	r7, r5
  404ffe:	6227      	str	r7, [r4, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  405000:	2900      	cmp	r1, #0
  405002:	d1e1      	bne.n	404fc8 <chk_mounted+0x2c8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  405004:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
  405008:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
  40500c:	0409      	lsls	r1, r1, #16
  40500e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  405012:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  405016:	4301      	orrs	r1, r0
  405018:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  40501c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  405020:	6261      	str	r1, [r4, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  405022:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  405024:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  405028:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  40502c:	d3ca      	bcc.n	404fc4 <chk_mounted+0x2c4>
	fs->free_clust = 0xFFFFFFFF;
  40502e:	f04f 33ff 	mov.w	r3, #4294967295
  405032:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
  405034:	2300      	movs	r3, #0
  405036:	60e3      	str	r3, [r4, #12]
	 	fs->fsi_flag = 0;
  405038:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  40503a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
  40503e:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
  405042:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  405046:	442a      	add	r2, r5
  405048:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  40504a:	2301      	movs	r3, #1
  40504c:	f104 0130 	add.w	r1, r4, #48	; 0x30
  405050:	7860      	ldrb	r0, [r4, #1]
  405052:	4d03      	ldr	r5, [pc, #12]	; (405060 <chk_mounted+0x360>)
  405054:	47a8      	blx	r5
  405056:	2800      	cmp	r0, #0
  405058:	f43f af48 	beq.w	404eec <chk_mounted+0x1ec>
  40505c:	2603      	movs	r6, #3
  40505e:	e790      	b.n	404f82 <chk_mounted+0x282>
  405060:	00404a49 	.word	0x00404a49

00405064 <move_window>:
{
  405064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  405068:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  40506a:	428f      	cmp	r7, r1
  40506c:	d035      	beq.n	4050da <move_window+0x76>
  40506e:	460e      	mov	r6, r1
  405070:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  405072:	7903      	ldrb	r3, [r0, #4]
  405074:	b91b      	cbnz	r3, 40507e <move_window+0x1a>
		if (sector) {
  405076:	bb2e      	cbnz	r6, 4050c4 <move_window+0x60>
	return FR_OK;
  405078:	2000      	movs	r0, #0
  40507a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  40507e:	f100 0830 	add.w	r8, r0, #48	; 0x30
  405082:	2301      	movs	r3, #1
  405084:	463a      	mov	r2, r7
  405086:	4641      	mov	r1, r8
  405088:	7840      	ldrb	r0, [r0, #1]
  40508a:	4d18      	ldr	r5, [pc, #96]	; (4050ec <move_window+0x88>)
  40508c:	47a8      	blx	r5
  40508e:	bb38      	cbnz	r0, 4050e0 <move_window+0x7c>
			fs->wflag = 0;
  405090:	2300      	movs	r3, #0
  405092:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  405094:	6a23      	ldr	r3, [r4, #32]
  405096:	69e2      	ldr	r2, [r4, #28]
  405098:	4413      	add	r3, r2
  40509a:	429f      	cmp	r7, r3
  40509c:	d2eb      	bcs.n	405076 <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40509e:	78e5      	ldrb	r5, [r4, #3]
  4050a0:	2d01      	cmp	r5, #1
  4050a2:	d9e8      	bls.n	405076 <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  4050a4:	f04f 0a01 	mov.w	sl, #1
  4050a8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 4050ec <move_window+0x88>
					wsect += fs->fsize;
  4050ac:	69e3      	ldr	r3, [r4, #28]
  4050ae:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  4050b0:	4653      	mov	r3, sl
  4050b2:	463a      	mov	r2, r7
  4050b4:	4641      	mov	r1, r8
  4050b6:	7860      	ldrb	r0, [r4, #1]
  4050b8:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  4050ba:	3d01      	subs	r5, #1
  4050bc:	b2ed      	uxtb	r5, r5
  4050be:	2d01      	cmp	r5, #1
  4050c0:	d1f4      	bne.n	4050ac <move_window+0x48>
  4050c2:	e7d8      	b.n	405076 <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  4050c4:	2301      	movs	r3, #1
  4050c6:	4632      	mov	r2, r6
  4050c8:	f104 0130 	add.w	r1, r4, #48	; 0x30
  4050cc:	7860      	ldrb	r0, [r4, #1]
  4050ce:	4d08      	ldr	r5, [pc, #32]	; (4050f0 <move_window+0x8c>)
  4050d0:	47a8      	blx	r5
  4050d2:	b940      	cbnz	r0, 4050e6 <move_window+0x82>
			fs->winsect = sector;
  4050d4:	62e6      	str	r6, [r4, #44]	; 0x2c
  4050d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  4050da:	2000      	movs	r0, #0
  4050dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  4050e0:	2001      	movs	r0, #1
  4050e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  4050e6:	2001      	movs	r0, #1
}
  4050e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4050ec:	00404ab9 	.word	0x00404ab9
  4050f0:	00404a49 	.word	0x00404a49

004050f4 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4050f4:	2901      	cmp	r1, #1
  4050f6:	d96a      	bls.n	4051ce <get_fat+0xda>
{
  4050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4050fa:	6983      	ldr	r3, [r0, #24]
  4050fc:	4299      	cmp	r1, r3
  4050fe:	d268      	bcs.n	4051d2 <get_fat+0xde>
  405100:	460c      	mov	r4, r1
  405102:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  405104:	7803      	ldrb	r3, [r0, #0]
  405106:	2b02      	cmp	r3, #2
  405108:	d02f      	beq.n	40516a <get_fat+0x76>
  40510a:	2b03      	cmp	r3, #3
  40510c:	d041      	beq.n	405192 <get_fat+0x9e>
  40510e:	2b01      	cmp	r3, #1
  405110:	d002      	beq.n	405118 <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405112:	f04f 30ff 	mov.w	r0, #4294967295
  405116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  405118:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40511c:	6a01      	ldr	r1, [r0, #32]
  40511e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  405122:	4b2d      	ldr	r3, [pc, #180]	; (4051d8 <get_fat+0xe4>)
  405124:	4798      	blx	r3
  405126:	b110      	cbz	r0, 40512e <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405128:	f04f 30ff 	mov.w	r0, #4294967295
  40512c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  40512e:	f3c7 0308 	ubfx	r3, r7, #0, #9
  405132:	4433      	add	r3, r6
  405134:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  405138:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40513a:	6a31      	ldr	r1, [r6, #32]
  40513c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  405140:	4630      	mov	r0, r6
  405142:	4b25      	ldr	r3, [pc, #148]	; (4051d8 <get_fat+0xe4>)
  405144:	4798      	blx	r3
  405146:	b110      	cbz	r0, 40514e <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405148:	f04f 30ff 	mov.w	r0, #4294967295
  40514c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  40514e:	f3c7 0708 	ubfx	r7, r7, #0, #9
  405152:	19f0      	adds	r0, r6, r7
  405154:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  405158:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  40515c:	f014 0f01 	tst.w	r4, #1
  405160:	bf14      	ite	ne
  405162:	0900      	lsrne	r0, r0, #4
  405164:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  405168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  40516a:	6a01      	ldr	r1, [r0, #32]
  40516c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  405170:	4b19      	ldr	r3, [pc, #100]	; (4051d8 <get_fat+0xe4>)
  405172:	4798      	blx	r3
  405174:	b110      	cbz	r0, 40517c <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405176:	f04f 30ff 	mov.w	r0, #4294967295
  40517a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  40517c:	0060      	lsls	r0, r4, #1
  40517e:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  405182:	4430      	add	r0, r6
  405184:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  405188:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  40518c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  405190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  405192:	6a01      	ldr	r1, [r0, #32]
  405194:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  405198:	4b0f      	ldr	r3, [pc, #60]	; (4051d8 <get_fat+0xe4>)
  40519a:	4798      	blx	r3
  40519c:	b110      	cbz	r0, 4051a4 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40519e:	f04f 30ff 	mov.w	r0, #4294967295
}
  4051a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  4051a4:	00a0      	lsls	r0, r4, #2
  4051a6:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  4051aa:	f100 0230 	add.w	r2, r0, #48	; 0x30
  4051ae:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  4051b0:	78d1      	ldrb	r1, [r2, #3]
  4051b2:	7893      	ldrb	r3, [r2, #2]
  4051b4:	041b      	lsls	r3, r3, #16
  4051b6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4051ba:	4430      	add	r0, r6
  4051bc:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4051c0:	4318      	orrs	r0, r3
  4051c2:	7853      	ldrb	r3, [r2, #1]
  4051c4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4051c8:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  4051cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  4051ce:	2001      	movs	r0, #1
  4051d0:	4770      	bx	lr
  4051d2:	2001      	movs	r0, #1
  4051d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4051d6:	bf00      	nop
  4051d8:	00405065 	.word	0x00405065

004051dc <dir_sdi>:
{
  4051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4051de:	4605      	mov	r5, r0
  4051e0:	460c      	mov	r4, r1
	dj->index = idx;
  4051e2:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  4051e4:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  4051e6:	2901      	cmp	r1, #1
  4051e8:	d03d      	beq.n	405266 <dir_sdi+0x8a>
  4051ea:	6803      	ldr	r3, [r0, #0]
  4051ec:	699a      	ldr	r2, [r3, #24]
  4051ee:	4291      	cmp	r1, r2
  4051f0:	d301      	bcc.n	4051f6 <dir_sdi+0x1a>
		return FR_INT_ERR;
  4051f2:	2002      	movs	r0, #2
  4051f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  4051f6:	b961      	cbnz	r1, 405212 <dir_sdi+0x36>
  4051f8:	781a      	ldrb	r2, [r3, #0]
  4051fa:	2a03      	cmp	r2, #3
  4051fc:	d006      	beq.n	40520c <dir_sdi+0x30>
		dj->clust = clst;
  4051fe:	2200      	movs	r2, #0
  405200:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  405202:	891a      	ldrh	r2, [r3, #8]
  405204:	42a2      	cmp	r2, r4
  405206:	d821      	bhi.n	40524c <dir_sdi+0x70>
			return FR_INT_ERR;
  405208:	2002      	movs	r0, #2
  40520a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  40520c:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  40520e:	2900      	cmp	r1, #0
  405210:	d0f5      	beq.n	4051fe <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  405212:	789e      	ldrb	r6, [r3, #2]
  405214:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  405216:	42b4      	cmp	r4, r6
  405218:	d310      	bcc.n	40523c <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  40521a:	4f17      	ldr	r7, [pc, #92]	; (405278 <dir_sdi+0x9c>)
  40521c:	6828      	ldr	r0, [r5, #0]
  40521e:	47b8      	blx	r7
  405220:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  405222:	f1b0 3fff 	cmp.w	r0, #4294967295
  405226:	d020      	beq.n	40526a <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  405228:	2801      	cmp	r0, #1
  40522a:	d920      	bls.n	40526e <dir_sdi+0x92>
  40522c:	682b      	ldr	r3, [r5, #0]
  40522e:	699b      	ldr	r3, [r3, #24]
  405230:	4298      	cmp	r0, r3
  405232:	d21e      	bcs.n	405272 <dir_sdi+0x96>
			idx -= ic;
  405234:	1ba4      	subs	r4, r4, r6
  405236:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  405238:	42a6      	cmp	r6, r4
  40523a:	d9ef      	bls.n	40521c <dir_sdi+0x40>
		dj->clust = clst;
  40523c:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40523e:	6828      	ldr	r0, [r5, #0]
  405240:	4b0e      	ldr	r3, [pc, #56]	; (40527c <dir_sdi+0xa0>)
  405242:	4798      	blx	r3
  405244:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  405248:	6128      	str	r0, [r5, #16]
  40524a:	e003      	b.n	405254 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40524e:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  405252:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  405254:	682b      	ldr	r3, [r5, #0]
  405256:	3330      	adds	r3, #48	; 0x30
  405258:	f004 040f 	and.w	r4, r4, #15
  40525c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  405260:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  405262:	2000      	movs	r0, #0
  405264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  405266:	2002      	movs	r0, #2
  405268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  40526a:	2001      	movs	r0, #1
  40526c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  40526e:	2002      	movs	r0, #2
  405270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405272:	2002      	movs	r0, #2
}
  405274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405276:	bf00      	nop
  405278:	004050f5 	.word	0x004050f5
  40527c:	00404c05 	.word	0x00404c05

00405280 <put_fat>:
{
  405280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  405284:	2901      	cmp	r1, #1
  405286:	f240 808f 	bls.w	4053a8 <put_fat+0x128>
  40528a:	6983      	ldr	r3, [r0, #24]
  40528c:	4299      	cmp	r1, r3
  40528e:	d301      	bcc.n	405294 <put_fat+0x14>
		res = FR_INT_ERR;
  405290:	2702      	movs	r7, #2
	return res;
  405292:	e08a      	b.n	4053aa <put_fat+0x12a>
  405294:	4615      	mov	r5, r2
  405296:	460c      	mov	r4, r1
  405298:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  40529a:	7803      	ldrb	r3, [r0, #0]
  40529c:	2b02      	cmp	r3, #2
  40529e:	d04e      	beq.n	40533e <put_fat+0xbe>
  4052a0:	2b03      	cmp	r3, #3
  4052a2:	d05f      	beq.n	405364 <put_fat+0xe4>
  4052a4:	2b01      	cmp	r3, #1
  4052a6:	d003      	beq.n	4052b0 <put_fat+0x30>
			res = FR_INT_ERR;
  4052a8:	2702      	movs	r7, #2
		fs->wflag = 1;
  4052aa:	2301      	movs	r3, #1
  4052ac:	7133      	strb	r3, [r6, #4]
  4052ae:	e07c      	b.n	4053aa <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  4052b0:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4052b4:	6a01      	ldr	r1, [r0, #32]
  4052b6:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4052ba:	4b3d      	ldr	r3, [pc, #244]	; (4053b0 <put_fat+0x130>)
  4052bc:	4798      	blx	r3
			if (res != FR_OK) break;
  4052be:	4607      	mov	r7, r0
  4052c0:	2800      	cmp	r0, #0
  4052c2:	d1f2      	bne.n	4052aa <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  4052c4:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4052c8:	f014 0f01 	tst.w	r4, #1
  4052cc:	d01c      	beq.n	405308 <put_fat+0x88>
  4052ce:	4433      	add	r3, r6
  4052d0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  4052d4:	f002 020f 	and.w	r2, r2, #15
  4052d8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  4052dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  4052e0:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  4052e4:	2301      	movs	r3, #1
  4052e6:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4052e8:	6a31      	ldr	r1, [r6, #32]
  4052ea:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4052ee:	4630      	mov	r0, r6
  4052f0:	4b2f      	ldr	r3, [pc, #188]	; (4053b0 <put_fat+0x130>)
  4052f2:	4798      	blx	r3
			if (res != FR_OK) break;
  4052f4:	2800      	cmp	r0, #0
  4052f6:	d153      	bne.n	4053a0 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  4052f8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  4052fc:	f3c5 1207 	ubfx	r2, r5, #4, #8
  405300:	44b0      	add	r8, r6
  405302:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  405306:	e7d0      	b.n	4052aa <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  405308:	4433      	add	r3, r6
  40530a:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  40530e:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  405312:	2301      	movs	r3, #1
  405314:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  405316:	6a31      	ldr	r1, [r6, #32]
  405318:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  40531c:	4630      	mov	r0, r6
  40531e:	4b24      	ldr	r3, [pc, #144]	; (4053b0 <put_fat+0x130>)
  405320:	4798      	blx	r3
			if (res != FR_OK) break;
  405322:	2800      	cmp	r0, #0
  405324:	d13e      	bne.n	4053a4 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  405326:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  40532a:	eb06 0308 	add.w	r3, r6, r8
  40532e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  405332:	f023 030f 	bic.w	r3, r3, #15
  405336:	f3c5 2203 	ubfx	r2, r5, #8, #4
  40533a:	431a      	orrs	r2, r3
  40533c:	e7e0      	b.n	405300 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  40533e:	6a01      	ldr	r1, [r0, #32]
  405340:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  405344:	4b1a      	ldr	r3, [pc, #104]	; (4053b0 <put_fat+0x130>)
  405346:	4798      	blx	r3
			if (res != FR_OK) break;
  405348:	4607      	mov	r7, r0
  40534a:	2800      	cmp	r0, #0
  40534c:	d1ad      	bne.n	4052aa <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  40534e:	0063      	lsls	r3, r4, #1
  405350:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  405354:	4433      	add	r3, r6
  405356:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  40535a:	f3c5 2207 	ubfx	r2, r5, #8, #8
  40535e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  405362:	e7a2      	b.n	4052aa <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  405364:	6a01      	ldr	r1, [r0, #32]
  405366:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  40536a:	4b11      	ldr	r3, [pc, #68]	; (4053b0 <put_fat+0x130>)
  40536c:	4798      	blx	r3
			if (res != FR_OK) break;
  40536e:	4607      	mov	r7, r0
  405370:	2800      	cmp	r0, #0
  405372:	d19a      	bne.n	4052aa <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  405374:	00a1      	lsls	r1, r4, #2
  405376:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  40537a:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40537e:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  405380:	78da      	ldrb	r2, [r3, #3]
  405382:	0612      	lsls	r2, r2, #24
  405384:	4431      	add	r1, r6
  405386:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  40538a:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  40538c:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  405390:	f3c2 2107 	ubfx	r1, r2, #8, #8
  405394:	7059      	strb	r1, [r3, #1]
  405396:	0c11      	lsrs	r1, r2, #16
  405398:	7099      	strb	r1, [r3, #2]
  40539a:	0e12      	lsrs	r2, r2, #24
  40539c:	70da      	strb	r2, [r3, #3]
			break;
  40539e:	e784      	b.n	4052aa <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4053a0:	4607      	mov	r7, r0
  4053a2:	e782      	b.n	4052aa <put_fat+0x2a>
  4053a4:	4607      	mov	r7, r0
  4053a6:	e780      	b.n	4052aa <put_fat+0x2a>
		res = FR_INT_ERR;
  4053a8:	2702      	movs	r7, #2
}
  4053aa:	4638      	mov	r0, r7
  4053ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4053b0:	00405065 	.word	0x00405065

004053b4 <create_chain>:
{
  4053b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4053b8:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  4053ba:	4688      	mov	r8, r1
  4053bc:	b941      	cbnz	r1, 4053d0 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  4053be:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4053c0:	b186      	cbz	r6, 4053e4 <create_chain+0x30>
  4053c2:	6983      	ldr	r3, [r0, #24]
  4053c4:	429e      	cmp	r6, r3
  4053c6:	bf28      	it	cs
  4053c8:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  4053ca:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4053cc:	4f27      	ldr	r7, [pc, #156]	; (40546c <create_chain+0xb8>)
  4053ce:	e017      	b.n	405400 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  4053d0:	4b26      	ldr	r3, [pc, #152]	; (40546c <create_chain+0xb8>)
  4053d2:	4798      	blx	r3
  4053d4:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  4053d6:	2801      	cmp	r0, #1
  4053d8:	d93e      	bls.n	405458 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  4053da:	69aa      	ldr	r2, [r5, #24]
  4053dc:	4290      	cmp	r0, r2
  4053de:	d340      	bcc.n	405462 <create_chain+0xae>
		scl = clst;
  4053e0:	4646      	mov	r6, r8
  4053e2:	e7f2      	b.n	4053ca <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4053e4:	2601      	movs	r6, #1
  4053e6:	e7f0      	b.n	4053ca <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4053e8:	4621      	mov	r1, r4
  4053ea:	4628      	mov	r0, r5
  4053ec:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  4053ee:	4603      	mov	r3, r0
  4053f0:	b170      	cbz	r0, 405410 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  4053f2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4053f6:	d034      	beq.n	405462 <create_chain+0xae>
  4053f8:	2801      	cmp	r0, #1
  4053fa:	d032      	beq.n	405462 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  4053fc:	42b4      	cmp	r4, r6
  4053fe:	d02f      	beq.n	405460 <create_chain+0xac>
		ncl++;							/* Next cluster */
  405400:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  405402:	69ab      	ldr	r3, [r5, #24]
  405404:	429c      	cmp	r4, r3
  405406:	d3ef      	bcc.n	4053e8 <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  405408:	2e01      	cmp	r6, #1
  40540a:	d927      	bls.n	40545c <create_chain+0xa8>
			ncl = 2;
  40540c:	2402      	movs	r4, #2
  40540e:	e7eb      	b.n	4053e8 <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  405410:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  405414:	4621      	mov	r1, r4
  405416:	4628      	mov	r0, r5
  405418:	4b15      	ldr	r3, [pc, #84]	; (405470 <create_chain+0xbc>)
  40541a:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  40541c:	4603      	mov	r3, r0
  40541e:	b910      	cbnz	r0, 405426 <create_chain+0x72>
  405420:	f1b8 0f00 	cmp.w	r8, #0
  405424:	d10b      	bne.n	40543e <create_chain+0x8a>
	if (res == FR_OK) {
  405426:	b98b      	cbnz	r3, 40544c <create_chain+0x98>
		fs->last_clust = ncl;			/* Update FSINFO */
  405428:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  40542a:	692b      	ldr	r3, [r5, #16]
  40542c:	f1b3 3fff 	cmp.w	r3, #4294967295
  405430:	d01a      	beq.n	405468 <create_chain+0xb4>
			fs->free_clust--;
  405432:	3b01      	subs	r3, #1
  405434:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  405436:	2301      	movs	r3, #1
  405438:	716b      	strb	r3, [r5, #5]
  40543a:	4623      	mov	r3, r4
  40543c:	e011      	b.n	405462 <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  40543e:	4622      	mov	r2, r4
  405440:	4641      	mov	r1, r8
  405442:	4628      	mov	r0, r5
  405444:	4b0a      	ldr	r3, [pc, #40]	; (405470 <create_chain+0xbc>)
  405446:	4798      	blx	r3
  405448:	4603      	mov	r3, r0
  40544a:	e7ec      	b.n	405426 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  40544c:	2b01      	cmp	r3, #1
  40544e:	bf0c      	ite	eq
  405450:	f04f 33ff 	moveq.w	r3, #4294967295
  405454:	2301      	movne	r3, #1
  405456:	e004      	b.n	405462 <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  405458:	2301      	movs	r3, #1
  40545a:	e002      	b.n	405462 <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  40545c:	2300      	movs	r3, #0
  40545e:	e000      	b.n	405462 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  405460:	2300      	movs	r3, #0
}
  405462:	4618      	mov	r0, r3
  405464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405468:	4623      	mov	r3, r4
  40546a:	e7fa      	b.n	405462 <create_chain+0xae>
  40546c:	004050f5 	.word	0x004050f5
  405470:	00405281 	.word	0x00405281

00405474 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  405474:	2901      	cmp	r1, #1
  405476:	d92e      	bls.n	4054d6 <remove_chain+0x62>
{
  405478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40547c:	4604      	mov	r4, r0
  40547e:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  405480:	6983      	ldr	r3, [r0, #24]
  405482:	4299      	cmp	r1, r3
  405484:	d303      	bcc.n	40548e <remove_chain+0x1a>
		res = FR_INT_ERR;
  405486:	2202      	movs	r2, #2
}
  405488:	4610      	mov	r0, r2
  40548a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40548e:	4f16      	ldr	r7, [pc, #88]	; (4054e8 <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  405490:	f04f 0900 	mov.w	r9, #0
  405494:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4054ec <remove_chain+0x78>
  405498:	e003      	b.n	4054a2 <remove_chain+0x2e>
  40549a:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  40549c:	69a3      	ldr	r3, [r4, #24]
  40549e:	42ab      	cmp	r3, r5
  4054a0:	d9f2      	bls.n	405488 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  4054a2:	4631      	mov	r1, r6
  4054a4:	4620      	mov	r0, r4
  4054a6:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  4054a8:	4605      	mov	r5, r0
  4054aa:	b1b8      	cbz	r0, 4054dc <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4054ac:	2801      	cmp	r0, #1
  4054ae:	d017      	beq.n	4054e0 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4054b0:	f1b0 3fff 	cmp.w	r0, #4294967295
  4054b4:	d016      	beq.n	4054e4 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  4054b6:	464a      	mov	r2, r9
  4054b8:	4631      	mov	r1, r6
  4054ba:	4620      	mov	r0, r4
  4054bc:	47c0      	blx	r8
			if (res != FR_OK) break;
  4054be:	4602      	mov	r2, r0
  4054c0:	2800      	cmp	r0, #0
  4054c2:	d1e1      	bne.n	405488 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  4054c4:	6923      	ldr	r3, [r4, #16]
  4054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4054ca:	d0e6      	beq.n	40549a <remove_chain+0x26>
				fs->free_clust++;
  4054cc:	3301      	adds	r3, #1
  4054ce:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  4054d0:	2301      	movs	r3, #1
  4054d2:	7163      	strb	r3, [r4, #5]
  4054d4:	e7e1      	b.n	40549a <remove_chain+0x26>
		res = FR_INT_ERR;
  4054d6:	2202      	movs	r2, #2
}
  4054d8:	4610      	mov	r0, r2
  4054da:	4770      	bx	lr
  4054dc:	2200      	movs	r2, #0
  4054de:	e7d3      	b.n	405488 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4054e0:	2202      	movs	r2, #2
  4054e2:	e7d1      	b.n	405488 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4054e4:	2201      	movs	r2, #1
  4054e6:	e7cf      	b.n	405488 <remove_chain+0x14>
  4054e8:	004050f5 	.word	0x004050f5
  4054ec:	00405281 	.word	0x00405281

004054f0 <sync>:
{
  4054f0:	b538      	push	{r3, r4, r5, lr}
  4054f2:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  4054f4:	2100      	movs	r1, #0
  4054f6:	4b2e      	ldr	r3, [pc, #184]	; (4055b0 <sync+0xc0>)
  4054f8:	4798      	blx	r3
	if (res == FR_OK) {
  4054fa:	4603      	mov	r3, r0
  4054fc:	b950      	cbnz	r0, 405514 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  4054fe:	7823      	ldrb	r3, [r4, #0]
  405500:	2b03      	cmp	r3, #3
  405502:	d009      	beq.n	405518 <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  405504:	2200      	movs	r2, #0
  405506:	4611      	mov	r1, r2
  405508:	7860      	ldrb	r0, [r4, #1]
  40550a:	4b2a      	ldr	r3, [pc, #168]	; (4055b4 <sync+0xc4>)
  40550c:	4798      	blx	r3
	res = move_window(fs, 0);
  40550e:	1c03      	adds	r3, r0, #0
  405510:	bf18      	it	ne
  405512:	2301      	movne	r3, #1
}
  405514:	4618      	mov	r0, r3
  405516:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  405518:	7963      	ldrb	r3, [r4, #5]
  40551a:	2b00      	cmp	r3, #0
  40551c:	d0f2      	beq.n	405504 <sync+0x14>
			fs->winsect = 0;
  40551e:	2300      	movs	r3, #0
  405520:	62e3      	str	r3, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  405522:	f104 0130 	add.w	r1, r4, #48	; 0x30
  405526:	f504 700c 	add.w	r0, r4, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  40552a:	460b      	mov	r3, r1
		*d++ = (BYTE)val;
  40552c:	2200      	movs	r2, #0
  40552e:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  405532:	4283      	cmp	r3, r0
  405534:	d1fb      	bne.n	40552e <sync+0x3e>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  405536:	2355      	movs	r3, #85	; 0x55
  405538:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  40553c:	23aa      	movs	r3, #170	; 0xaa
  40553e:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  405542:	2352      	movs	r3, #82	; 0x52
  405544:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  405548:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  40554c:	2361      	movs	r3, #97	; 0x61
  40554e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  405552:	2241      	movs	r2, #65	; 0x41
  405554:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  405558:	2072      	movs	r0, #114	; 0x72
  40555a:	f884 0214 	strb.w	r0, [r4, #532]	; 0x214
  40555e:	f884 0215 	strb.w	r0, [r4, #533]	; 0x215
  405562:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  405566:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  40556a:	6923      	ldr	r3, [r4, #16]
  40556c:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  405570:	f3c3 2207 	ubfx	r2, r3, #8, #8
  405574:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  405578:	0c1a      	lsrs	r2, r3, #16
  40557a:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  40557e:	0e1b      	lsrs	r3, r3, #24
  405580:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  405584:	68e3      	ldr	r3, [r4, #12]
  405586:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  40558a:	f3c3 2207 	ubfx	r2, r3, #8, #8
  40558e:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  405592:	0c1a      	lsrs	r2, r3, #16
  405594:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  405598:	0e1b      	lsrs	r3, r3, #24
  40559a:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  40559e:	2301      	movs	r3, #1
  4055a0:	6962      	ldr	r2, [r4, #20]
  4055a2:	7860      	ldrb	r0, [r4, #1]
  4055a4:	4d04      	ldr	r5, [pc, #16]	; (4055b8 <sync+0xc8>)
  4055a6:	47a8      	blx	r5
			fs->fsi_flag = 0;
  4055a8:	2300      	movs	r3, #0
  4055aa:	7163      	strb	r3, [r4, #5]
  4055ac:	e7aa      	b.n	405504 <sync+0x14>
  4055ae:	bf00      	nop
  4055b0:	00405065 	.word	0x00405065
  4055b4:	00404b29 	.word	0x00404b29
  4055b8:	00404ab9 	.word	0x00404ab9

004055bc <dir_next>:
{
  4055bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  4055c0:	88c4      	ldrh	r4, [r0, #6]
  4055c2:	3401      	adds	r4, #1
  4055c4:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4055c6:	b914      	cbnz	r4, 4055ce <dir_next+0x12>
		return FR_NO_FILE;
  4055c8:	2004      	movs	r0, #4
  4055ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4055ce:	6903      	ldr	r3, [r0, #16]
  4055d0:	b913      	cbnz	r3, 4055d8 <dir_next+0x1c>
		return FR_NO_FILE;
  4055d2:	2004      	movs	r0, #4
  4055d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055d8:	460e      	mov	r6, r1
  4055da:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  4055dc:	f014 070f 	ands.w	r7, r4, #15
  4055e0:	d110      	bne.n	405604 <dir_next+0x48>
		dj->sect++;					/* Next sector */
  4055e2:	3301      	adds	r3, #1
  4055e4:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  4055e6:	68c1      	ldr	r1, [r0, #12]
  4055e8:	b931      	cbnz	r1, 4055f8 <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  4055ea:	6803      	ldr	r3, [r0, #0]
  4055ec:	891b      	ldrh	r3, [r3, #8]
  4055ee:	42a3      	cmp	r3, r4
  4055f0:	d808      	bhi.n	405604 <dir_next+0x48>
				return FR_NO_FILE;
  4055f2:	2004      	movs	r0, #4
  4055f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  4055f8:	6800      	ldr	r0, [r0, #0]
  4055fa:	7883      	ldrb	r3, [r0, #2]
  4055fc:	3b01      	subs	r3, #1
  4055fe:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  405602:	d008      	beq.n	405616 <dir_next+0x5a>
	dj->index = i;
  405604:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  405606:	682b      	ldr	r3, [r5, #0]
  405608:	3330      	adds	r3, #48	; 0x30
  40560a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  40560e:	616b      	str	r3, [r5, #20]
	return FR_OK;
  405610:	2000      	movs	r0, #0
  405612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  405616:	4b33      	ldr	r3, [pc, #204]	; (4056e4 <dir_next+0x128>)
  405618:	4798      	blx	r3
  40561a:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  40561c:	2801      	cmp	r0, #1
  40561e:	d94f      	bls.n	4056c0 <dir_next+0x104>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  405620:	f1b0 3fff 	cmp.w	r0, #4294967295
  405624:	d04f      	beq.n	4056c6 <dir_next+0x10a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  405626:	6828      	ldr	r0, [r5, #0]
  405628:	6983      	ldr	r3, [r0, #24]
  40562a:	4598      	cmp	r8, r3
  40562c:	d340      	bcc.n	4056b0 <dir_next+0xf4>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  40562e:	b916      	cbnz	r6, 405636 <dir_next+0x7a>
  405630:	2004      	movs	r0, #4
  405632:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  405636:	68e9      	ldr	r1, [r5, #12]
  405638:	4b2b      	ldr	r3, [pc, #172]	; (4056e8 <dir_next+0x12c>)
  40563a:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  40563c:	4680      	mov	r8, r0
  40563e:	b910      	cbnz	r0, 405646 <dir_next+0x8a>
  405640:	2007      	movs	r0, #7
  405642:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  405646:	2801      	cmp	r0, #1
  405648:	d040      	beq.n	4056cc <dir_next+0x110>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40564a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40564e:	d040      	beq.n	4056d2 <dir_next+0x116>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  405650:	2100      	movs	r1, #0
  405652:	6828      	ldr	r0, [r5, #0]
  405654:	4b25      	ldr	r3, [pc, #148]	; (4056ec <dir_next+0x130>)
  405656:	4798      	blx	r3
  405658:	2800      	cmp	r0, #0
  40565a:	d13d      	bne.n	4056d8 <dir_next+0x11c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  40565c:	682b      	ldr	r3, [r5, #0]
  40565e:	f503 710c 	add.w	r1, r3, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  405662:	3330      	adds	r3, #48	; 0x30
		*d++ = (BYTE)val;
  405664:	2200      	movs	r2, #0
  405666:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  40566a:	428b      	cmp	r3, r1
  40566c:	d1fb      	bne.n	405666 <dir_next+0xaa>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  40566e:	682e      	ldr	r6, [r5, #0]
  405670:	4641      	mov	r1, r8
  405672:	4630      	mov	r0, r6
  405674:	4b1e      	ldr	r3, [pc, #120]	; (4056f0 <dir_next+0x134>)
  405676:	4798      	blx	r3
  405678:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40567a:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  40567c:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  405680:	46b2      	mov	sl, r6
  405682:	f8df 9068 	ldr.w	r9, [pc, #104]	; 4056ec <dir_next+0x130>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  405686:	682b      	ldr	r3, [r5, #0]
  405688:	7899      	ldrb	r1, [r3, #2]
  40568a:	b2f2      	uxtb	r2, r6
  40568c:	4291      	cmp	r1, r2
  40568e:	d90b      	bls.n	4056a8 <dir_next+0xec>
						dj->fs->wflag = 1;
  405690:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  405694:	4651      	mov	r1, sl
  405696:	6828      	ldr	r0, [r5, #0]
  405698:	47c8      	blx	r9
  40569a:	3601      	adds	r6, #1
  40569c:	b9f8      	cbnz	r0, 4056de <dir_next+0x122>
						dj->fs->winsect++;
  40569e:	682a      	ldr	r2, [r5, #0]
  4056a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  4056a2:	3301      	adds	r3, #1
  4056a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  4056a6:	e7ee      	b.n	405686 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
  4056a8:	4616      	mov	r6, r2
  4056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4056ac:	1b96      	subs	r6, r2, r6
  4056ae:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  4056b0:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  4056b4:	4641      	mov	r1, r8
  4056b6:	6828      	ldr	r0, [r5, #0]
  4056b8:	4b0d      	ldr	r3, [pc, #52]	; (4056f0 <dir_next+0x134>)
  4056ba:	4798      	blx	r3
  4056bc:	6128      	str	r0, [r5, #16]
  4056be:	e7a1      	b.n	405604 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  4056c0:	2002      	movs	r0, #2
  4056c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4056c6:	2001      	movs	r0, #1
  4056c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4056cc:	2002      	movs	r0, #2
  4056ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4056d2:	2001      	movs	r0, #1
  4056d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4056d8:	2001      	movs	r0, #1
  4056da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4056de:	2001      	movs	r0, #1
}
  4056e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056e4:	004050f5 	.word	0x004050f5
  4056e8:	004053b5 	.word	0x004053b5
  4056ec:	00405065 	.word	0x00405065
  4056f0:	00404c05 	.word	0x00404c05

004056f4 <dir_find>:
{
  4056f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4056f8:	b085      	sub	sp, #20
  4056fa:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  4056fc:	2100      	movs	r1, #0
  4056fe:	4b61      	ldr	r3, [pc, #388]	; (405884 <dir_find+0x190>)
  405700:	4798      	blx	r3
	if (res != FR_OK) return res;
  405702:	4680      	mov	r8, r0
  405704:	bb08      	cbnz	r0, 40574a <dir_find+0x56>
  405706:	f04f 0bff 	mov.w	fp, #255	; 0xff
  40570a:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  40570c:	4f5e      	ldr	r7, [pc, #376]	; (405888 <dir_find+0x194>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  40570e:	46da      	mov	sl, fp
  405710:	e094      	b.n	40583c <dir_find+0x148>
			if (a == AM_LFN) {			/* An LFN entry is found */
  405712:	2a0f      	cmp	r2, #15
  405714:	d01d      	beq.n	405752 <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  405716:	f1b9 0f00 	cmp.w	r9, #0
  40571a:	d104      	bne.n	405726 <dir_find+0x32>
  40571c:	4620      	mov	r0, r4
  40571e:	4b5b      	ldr	r3, [pc, #364]	; (40588c <dir_find+0x198>)
  405720:	4798      	blx	r3
  405722:	4582      	cmp	sl, r0
  405724:	d011      	beq.n	40574a <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  405726:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40572a:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  40572c:	69ab      	ldr	r3, [r5, #24]
  40572e:	7ada      	ldrb	r2, [r3, #11]
  405730:	f012 0f01 	tst.w	r2, #1
  405734:	d179      	bne.n	40582a <dir_find+0x136>
  405736:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  40573a:	f814 1b01 	ldrb.w	r1, [r4], #1
  40573e:	f813 2b01 	ldrb.w	r2, [r3], #1
  405742:	4291      	cmp	r1, r2
  405744:	d16b      	bne.n	40581e <dir_find+0x12a>
  405746:	4284      	cmp	r4, r0
  405748:	d1f7      	bne.n	40573a <dir_find+0x46>
}
  40574a:	4640      	mov	r0, r8
  40574c:	b005      	add	sp, #20
  40574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  405752:	f8d5 801c 	ldr.w	r8, [r5, #28]
  405756:	f1b8 0f00 	cmp.w	r8, #0
  40575a:	d068      	beq.n	40582e <dir_find+0x13a>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  40575c:	f016 0f40 	tst.w	r6, #64	; 0x40
  405760:	d00c      	beq.n	40577c <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  405762:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  405766:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  40576a:	88eb      	ldrh	r3, [r5, #6]
  40576c:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40576e:	f894 b00d 	ldrb.w	fp, [r4, #13]
  405772:	45d3      	cmp	fp, sl
  405774:	d007      	beq.n	405786 <dir_find+0x92>
  405776:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40577a:	e058      	b.n	40582e <dir_find+0x13a>
  40577c:	45b1      	cmp	r9, r6
  40577e:	d0f6      	beq.n	40576e <dir_find+0x7a>
  405780:	f04f 09ff 	mov.w	r9, #255	; 0xff
  405784:	e053      	b.n	40582e <dir_find+0x13a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  405786:	f894 a000 	ldrb.w	sl, [r4]
  40578a:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  40578e:	f10a 3aff 	add.w	sl, sl, #4294967295
  405792:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  405796:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  40579a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 405898 <dir_find+0x1a4>
  40579e:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  4057a2:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4057a4:	9603      	str	r6, [sp, #12]
  4057a6:	f8cd b004 	str.w	fp, [sp, #4]
  4057aa:	461e      	mov	r6, r3
  4057ac:	9502      	str	r5, [sp, #8]
  4057ae:	e00f      	b.n	4057d0 <dir_find+0xdc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4057b0:	4618      	mov	r0, r3
  4057b2:	4b37      	ldr	r3, [pc, #220]	; (405890 <dir_find+0x19c>)
  4057b4:	4798      	blx	r3
  4057b6:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  4057b8:	2efe      	cmp	r6, #254	; 0xfe
  4057ba:	d85a      	bhi.n	405872 <dir_find+0x17e>
  4057bc:	1c75      	adds	r5, r6, #1
  4057be:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  4057c2:	4b33      	ldr	r3, [pc, #204]	; (405890 <dir_find+0x19c>)
  4057c4:	4798      	blx	r3
  4057c6:	4583      	cmp	fp, r0
  4057c8:	d157      	bne.n	40587a <dir_find+0x186>
  4057ca:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  4057cc:	45d1      	cmp	r9, sl
  4057ce:	d013      	beq.n	4057f8 <dir_find+0x104>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4057d0:	f819 2b01 	ldrb.w	r2, [r9], #1
  4057d4:	18a3      	adds	r3, r4, r2
  4057d6:	7859      	ldrb	r1, [r3, #1]
  4057d8:	5ca3      	ldrb	r3, [r4, r2]
  4057da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  4057de:	2800      	cmp	r0, #0
  4057e0:	d1e6      	bne.n	4057b0 <dir_find+0xbc>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4057e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4057e6:	4293      	cmp	r3, r2
  4057e8:	d0f0      	beq.n	4057cc <dir_find+0xd8>
  4057ea:	f8dd b004 	ldr.w	fp, [sp, #4]
  4057ee:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4057f0:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4057f2:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4057f6:	e01a      	b.n	40582e <dir_find+0x13a>
  4057f8:	f8dd b004 	ldr.w	fp, [sp, #4]
  4057fc:	4632      	mov	r2, r6
  4057fe:	9e03      	ldr	r6, [sp, #12]
  405800:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  405802:	7823      	ldrb	r3, [r4, #0]
  405804:	f013 0f40 	tst.w	r3, #64	; 0x40
  405808:	d004      	beq.n	405814 <dir_find+0x120>
  40580a:	b118      	cbz	r0, 405814 <dir_find+0x120>
  40580c:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  405810:	2b00      	cmp	r3, #0
  405812:	d1ed      	bne.n	4057f0 <dir_find+0xfc>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  405814:	3e01      	subs	r6, #1
  405816:	fa5f f986 	uxtb.w	r9, r6
  40581a:	46da      	mov	sl, fp
  40581c:	e007      	b.n	40582e <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40581e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  405822:	e004      	b.n	40582e <dir_find+0x13a>
			ord = 0xFF;
  405824:	f04f 09ff 	mov.w	r9, #255	; 0xff
  405828:	e001      	b.n	40582e <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40582a:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  40582e:	2100      	movs	r1, #0
  405830:	4628      	mov	r0, r5
  405832:	4b18      	ldr	r3, [pc, #96]	; (405894 <dir_find+0x1a0>)
  405834:	4798      	blx	r3
	} while (res == FR_OK);
  405836:	4680      	mov	r8, r0
  405838:	2800      	cmp	r0, #0
  40583a:	d186      	bne.n	40574a <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  40583c:	6929      	ldr	r1, [r5, #16]
  40583e:	6828      	ldr	r0, [r5, #0]
  405840:	47b8      	blx	r7
		if (res != FR_OK) break;
  405842:	4680      	mov	r8, r0
  405844:	2800      	cmp	r0, #0
  405846:	d180      	bne.n	40574a <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  405848:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  40584a:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  40584c:	b176      	cbz	r6, 40586c <dir_find+0x178>
		a = dir[DIR_Attr] & AM_MASK;
  40584e:	7ae3      	ldrb	r3, [r4, #11]
  405850:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  405854:	2ee5      	cmp	r6, #229	; 0xe5
  405856:	d0e5      	beq.n	405824 <dir_find+0x130>
  405858:	f013 0f08 	tst.w	r3, #8
  40585c:	f43f af59 	beq.w	405712 <dir_find+0x1e>
  405860:	2a0f      	cmp	r2, #15
  405862:	f43f af56 	beq.w	405712 <dir_find+0x1e>
			ord = 0xFF;
  405866:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40586a:	e7e0      	b.n	40582e <dir_find+0x13a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  40586c:	f04f 0804 	mov.w	r8, #4
  405870:	e76b      	b.n	40574a <dir_find+0x56>
  405872:	f8dd b004 	ldr.w	fp, [sp, #4]
  405876:	9d02      	ldr	r5, [sp, #8]
  405878:	e7ba      	b.n	4057f0 <dir_find+0xfc>
  40587a:	f8dd b004 	ldr.w	fp, [sp, #4]
  40587e:	9d02      	ldr	r5, [sp, #8]
  405880:	e7b6      	b.n	4057f0 <dir_find+0xfc>
  405882:	bf00      	nop
  405884:	004051dd 	.word	0x004051dd
  405888:	00405065 	.word	0x00405065
  40588c:	00404c1d 	.word	0x00404c1d
  405890:	00406615 	.word	0x00406615
  405894:	004055bd 	.word	0x004055bd
  405898:	0040e60c 	.word	0x0040e60c

0040589c <follow_path>:
{
  40589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058a0:	b083      	sub	sp, #12
  4058a2:	4682      	mov	sl, r0
  4058a4:	460f      	mov	r7, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  4058a6:	780b      	ldrb	r3, [r1, #0]
  4058a8:	2b2f      	cmp	r3, #47	; 0x2f
  4058aa:	d00a      	beq.n	4058c2 <follow_path+0x26>
  4058ac:	2b5c      	cmp	r3, #92	; 0x5c
  4058ae:	d008      	beq.n	4058c2 <follow_path+0x26>
	dj->sclust = 0;						/* Start from the root dir */
  4058b0:	2300      	movs	r3, #0
  4058b2:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  4058b6:	783b      	ldrb	r3, [r7, #0]
  4058b8:	2b1f      	cmp	r3, #31
  4058ba:	d904      	bls.n	4058c6 <follow_path+0x2a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4058bc:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 405bbc <follow_path+0x320>
  4058c0:	e133      	b.n	405b2a <follow_path+0x28e>
		path++;
  4058c2:	3701      	adds	r7, #1
  4058c4:	e7f4      	b.n	4058b0 <follow_path+0x14>
		res = dir_sdi(dj, 0);
  4058c6:	2100      	movs	r1, #0
  4058c8:	4650      	mov	r0, sl
  4058ca:	4bb7      	ldr	r3, [pc, #732]	; (405ba8 <follow_path+0x30c>)
  4058cc:	4798      	blx	r3
  4058ce:	4603      	mov	r3, r0
		dj->dir = 0;
  4058d0:	2200      	movs	r2, #0
  4058d2:	f8ca 2014 	str.w	r2, [sl, #20]
  4058d6:	e15d      	b.n	405b94 <follow_path+0x2f8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  4058d8:	2b00      	cmp	r3, #0
  4058da:	f040 8155 	bne.w	405b88 <follow_path+0x2ec>
		lfn[di++] = w;					/* Store the Unicode char */
  4058de:	f826 2f02 	strh.w	r2, [r6, #2]!
		w = p[si++];					/* Get a character */
  4058e2:	1c63      	adds	r3, r4, #1
  4058e4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  4058e8:	282f      	cmp	r0, #47	; 0x2f
  4058ea:	bf18      	it	ne
  4058ec:	281f      	cmpne	r0, #31
  4058ee:	d91b      	bls.n	405928 <follow_path+0x8c>
  4058f0:	285c      	cmp	r0, #92	; 0x5c
  4058f2:	d019      	beq.n	405928 <follow_path+0x8c>
		if (di >= _MAX_LFN)				/* Reject too long name */
  4058f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4058f8:	f000 8146 	beq.w	405b88 <follow_path+0x2ec>
		w = p[si++];					/* Get a character */
  4058fc:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4058fe:	4641      	mov	r1, r8
  405900:	47c8      	blx	r9
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  405902:	4602      	mov	r2, r0
  405904:	2800      	cmp	r0, #0
  405906:	f000 813f 	beq.w	405b88 <follow_path+0x2ec>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  40590a:	287f      	cmp	r0, #127	; 0x7f
  40590c:	d8e7      	bhi.n	4058de <follow_path+0x42>
	while (*str && *str != chr) str++;
  40590e:	2822      	cmp	r0, #34	; 0x22
  405910:	f000 813f 	beq.w	405b92 <follow_path+0x2f6>
  405914:	232a      	movs	r3, #42	; 0x2a
  405916:	49a5      	ldr	r1, [pc, #660]	; (405bac <follow_path+0x310>)
  405918:	b298      	uxth	r0, r3
  40591a:	4290      	cmp	r0, r2
  40591c:	d0dc      	beq.n	4058d8 <follow_path+0x3c>
  40591e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  405922:	2b00      	cmp	r3, #0
  405924:	d1f8      	bne.n	405918 <follow_path+0x7c>
  405926:	e7da      	b.n	4058de <follow_path+0x42>
	*path = &p[si];						/* Return pointer to the next segment */
  405928:	441f      	add	r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  40592a:	2820      	cmp	r0, #32
  40592c:	bf34      	ite	cc
  40592e:	2504      	movcc	r5, #4
  405930:	2500      	movcs	r5, #0
	while (di) {						/* Strip trailing spaces and dots */
  405932:	2c00      	cmp	r4, #0
  405934:	f000 812d 	beq.w	405b92 <follow_path+0x2f6>
		w = lfn[di-1];
  405938:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40593c:	4423      	add	r3, r4
  40593e:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
  405942:	f83b 3013 	ldrh.w	r3, [fp, r3, lsl #1]
		if (w != ' ' && w != '.') break;
  405946:	2b20      	cmp	r3, #32
  405948:	d001      	beq.n	40594e <follow_path+0xb2>
  40594a:	2b2e      	cmp	r3, #46	; 0x2e
  40594c:	d108      	bne.n	405960 <follow_path+0xc4>
	while (di) {						/* Strip trailing spaces and dots */
  40594e:	3c01      	subs	r4, #1
  405950:	f000 811f 	beq.w	405b92 <follow_path+0x2f6>
		w = lfn[di-1];
  405954:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  405958:	2b20      	cmp	r3, #32
  40595a:	d0f8      	beq.n	40594e <follow_path+0xb2>
  40595c:	2b2e      	cmp	r3, #46	; 0x2e
  40595e:	d0f6      	beq.n	40594e <follow_path+0xb2>
	lfn[di] = 0;						/* LFN is created */
  405960:	0060      	lsls	r0, r4, #1
  405962:	2300      	movs	r3, #0
  405964:	f82b 3014 	strh.w	r3, [fp, r4, lsl #1]
	mem_set(dj->fn, ' ', 11);
  405968:	f8da 3018 	ldr.w	r3, [sl, #24]
  40596c:	f103 010b 	add.w	r1, r3, #11
		*d++ = (BYTE)val;
  405970:	2220      	movs	r2, #32
  405972:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  405976:	4299      	cmp	r1, r3
  405978:	d1fb      	bne.n	405972 <follow_path+0xd6>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  40597a:	f8bb 3000 	ldrh.w	r3, [fp]
  40597e:	2b20      	cmp	r3, #32
  405980:	d001      	beq.n	405986 <follow_path+0xea>
  405982:	2b2e      	cmp	r3, #46	; 0x2e
  405984:	d11f      	bne.n	4059c6 <follow_path+0x12a>
  405986:	4659      	mov	r1, fp
  405988:	2300      	movs	r3, #0
  40598a:	3301      	adds	r3, #1
  40598c:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  405990:	2a20      	cmp	r2, #32
  405992:	d0fa      	beq.n	40598a <follow_path+0xee>
  405994:	2a2e      	cmp	r2, #46	; 0x2e
  405996:	d0f8      	beq.n	40598a <follow_path+0xee>
	if (si) cf |= NS_LOSS | NS_LFN;
  405998:	b10b      	cbz	r3, 40599e <follow_path+0x102>
  40599a:	f045 0503 	orr.w	r5, r5, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  40599e:	3802      	subs	r0, #2
  4059a0:	eb0b 0200 	add.w	r2, fp, r0
  4059a4:	f83b 1000 	ldrh.w	r1, [fp, r0]
  4059a8:	292e      	cmp	r1, #46	; 0x2e
  4059aa:	d005      	beq.n	4059b8 <follow_path+0x11c>
  4059ac:	3c01      	subs	r4, #1
  4059ae:	d003      	beq.n	4059b8 <follow_path+0x11c>
  4059b0:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  4059b4:	292e      	cmp	r1, #46	; 0x2e
  4059b6:	d1f9      	bne.n	4059ac <follow_path+0x110>
		dj->fn[i++] = (BYTE)w;
  4059b8:	2208      	movs	r2, #8
  4059ba:	9200      	str	r2, [sp, #0]
  4059bc:	f04f 0800 	mov.w	r8, #0
  4059c0:	f8cd 8004 	str.w	r8, [sp, #4]
  4059c4:	e004      	b.n	4059d0 <follow_path+0x134>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  4059c6:	2300      	movs	r3, #0
  4059c8:	e7e9      	b.n	40599e <follow_path+0x102>
			cf |= NS_LOSS | NS_LFN; continue;
  4059ca:	f045 0503 	orr.w	r5, r5, #3
		w = lfn[si++];					/* Get an LFN char */
  4059ce:	4633      	mov	r3, r6
  4059d0:	1c5e      	adds	r6, r3, #1
  4059d2:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  4059d6:	2800      	cmp	r0, #0
  4059d8:	d066      	beq.n	405aa8 <follow_path+0x20c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  4059da:	2820      	cmp	r0, #32
  4059dc:	d0f5      	beq.n	4059ca <follow_path+0x12e>
  4059de:	282e      	cmp	r0, #46	; 0x2e
  4059e0:	d101      	bne.n	4059e6 <follow_path+0x14a>
  4059e2:	42a6      	cmp	r6, r4
  4059e4:	d1f1      	bne.n	4059ca <follow_path+0x12e>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  4059e6:	9b00      	ldr	r3, [sp, #0]
  4059e8:	4598      	cmp	r8, r3
  4059ea:	d218      	bcs.n	405a1e <follow_path+0x182>
  4059ec:	42a6      	cmp	r6, r4
  4059ee:	d016      	beq.n	405a1e <follow_path+0x182>
		if (w >= 0x80) {				/* Non ASCII char */
  4059f0:	287f      	cmp	r0, #127	; 0x7f
  4059f2:	d831      	bhi.n	405a58 <follow_path+0x1bc>
	while (*str && *str != chr) str++;
  4059f4:	282b      	cmp	r0, #43	; 0x2b
  4059f6:	d03d      	beq.n	405a74 <follow_path+0x1d8>
  4059f8:	232c      	movs	r3, #44	; 0x2c
  4059fa:	496d      	ldr	r1, [pc, #436]	; (405bb0 <follow_path+0x314>)
  4059fc:	b29a      	uxth	r2, r3
  4059fe:	4282      	cmp	r2, r0
  405a00:	d043      	beq.n	405a8a <follow_path+0x1ee>
  405a02:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  405a06:	2b00      	cmp	r3, #0
  405a08:	d1f8      	bne.n	4059fc <follow_path+0x160>
				if (IsUpper(w)) {		/* ASCII large capital */
  405a0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  405a0e:	b29b      	uxth	r3, r3
  405a10:	2b19      	cmp	r3, #25
  405a12:	d83d      	bhi.n	405a90 <follow_path+0x1f4>
					b |= 2;
  405a14:	9b01      	ldr	r3, [sp, #4]
  405a16:	f043 0302 	orr.w	r3, r3, #2
  405a1a:	9301      	str	r3, [sp, #4]
  405a1c:	e02d      	b.n	405a7a <follow_path+0x1de>
			if (ni == 11) {				/* Long extension */
  405a1e:	9b00      	ldr	r3, [sp, #0]
  405a20:	2b0b      	cmp	r3, #11
  405a22:	d00f      	beq.n	405a44 <follow_path+0x1a8>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  405a24:	42a6      	cmp	r6, r4
  405a26:	bf18      	it	ne
  405a28:	f045 0503 	orrne.w	r5, r5, #3
			if (si > di) break;			/* No extension */
  405a2c:	42a6      	cmp	r6, r4
  405a2e:	d83b      	bhi.n	405aa8 <follow_path+0x20c>
			b <<= 2; continue;
  405a30:	9b01      	ldr	r3, [sp, #4]
  405a32:	009b      	lsls	r3, r3, #2
  405a34:	b2db      	uxtb	r3, r3
  405a36:	9301      	str	r3, [sp, #4]
  405a38:	4623      	mov	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
  405a3a:	220b      	movs	r2, #11
  405a3c:	9200      	str	r2, [sp, #0]
  405a3e:	f04f 0808 	mov.w	r8, #8
  405a42:	e7c5      	b.n	4059d0 <follow_path+0x134>
				cf |= NS_LOSS | NS_LFN; break;
  405a44:	f045 0503 	orr.w	r5, r5, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  405a48:	f8da 3018 	ldr.w	r3, [sl, #24]
  405a4c:	781a      	ldrb	r2, [r3, #0]
  405a4e:	2ae5      	cmp	r2, #229	; 0xe5
  405a50:	d132      	bne.n	405ab8 <follow_path+0x21c>
  405a52:	2205      	movs	r2, #5
  405a54:	701a      	strb	r2, [r3, #0]
  405a56:	e02c      	b.n	405ab2 <follow_path+0x216>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  405a58:	2100      	movs	r1, #0
  405a5a:	47c8      	blx	r9
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  405a5c:	4603      	mov	r3, r0
  405a5e:	2800      	cmp	r0, #0
  405a60:	f000 809f 	beq.w	405ba2 <follow_path+0x306>
  405a64:	4a53      	ldr	r2, [pc, #332]	; (405bb4 <follow_path+0x318>)
  405a66:	4413      	add	r3, r2
  405a68:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  405a6c:	f045 0502 	orr.w	r5, r5, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  405a70:	2800      	cmp	r0, #0
  405a72:	d1bf      	bne.n	4059f4 <follow_path+0x158>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  405a74:	f045 0503 	orr.w	r5, r5, #3
  405a78:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  405a7a:	f8da 3018 	ldr.w	r3, [sl, #24]
  405a7e:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  405a82:	4633      	mov	r3, r6
		dj->fn[i++] = (BYTE)w;
  405a84:	f108 0801 	add.w	r8, r8, #1
  405a88:	e7a2      	b.n	4059d0 <follow_path+0x134>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  405a8a:	2b00      	cmp	r3, #0
  405a8c:	d1f2      	bne.n	405a74 <follow_path+0x1d8>
  405a8e:	e7bc      	b.n	405a0a <follow_path+0x16e>
					if (IsLower(w)) {	/* ASCII small capital */
  405a90:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  405a94:	b29b      	uxth	r3, r3
  405a96:	2b19      	cmp	r3, #25
  405a98:	d8ef      	bhi.n	405a7a <follow_path+0x1de>
						b |= 1; w -= 0x20;
  405a9a:	9b01      	ldr	r3, [sp, #4]
  405a9c:	f043 0301 	orr.w	r3, r3, #1
  405aa0:	9301      	str	r3, [sp, #4]
  405aa2:	3820      	subs	r0, #32
  405aa4:	b280      	uxth	r0, r0
  405aa6:	e7e8      	b.n	405a7a <follow_path+0x1de>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  405aa8:	f8da 3018 	ldr.w	r3, [sl, #24]
  405aac:	781a      	ldrb	r2, [r3, #0]
  405aae:	2ae5      	cmp	r2, #229	; 0xe5
  405ab0:	d0cf      	beq.n	405a52 <follow_path+0x1b6>
	if (ni == 8) b <<= 2;
  405ab2:	9b00      	ldr	r3, [sp, #0]
  405ab4:	2b08      	cmp	r3, #8
  405ab6:	d052      	beq.n	405b5e <follow_path+0x2c2>
  405ab8:	9a01      	ldr	r2, [sp, #4]
  405aba:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  405abe:	2b0c      	cmp	r3, #12
  405ac0:	d054      	beq.n	405b6c <follow_path+0x2d0>
  405ac2:	f002 0203 	and.w	r2, r2, #3
  405ac6:	2a03      	cmp	r2, #3
  405ac8:	d050      	beq.n	405b6c <follow_path+0x2d0>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  405aca:	f015 0f02 	tst.w	r5, #2
  405ace:	d10b      	bne.n	405ae8 <follow_path+0x24c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  405ad0:	9a01      	ldr	r2, [sp, #4]
  405ad2:	f002 0b03 	and.w	fp, r2, #3
  405ad6:	f1bb 0f01 	cmp.w	fp, #1
  405ada:	bf08      	it	eq
  405adc:	f045 0510 	orreq.w	r5, r5, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  405ae0:	2b04      	cmp	r3, #4
  405ae2:	bf08      	it	eq
  405ae4:	f045 0508 	orreq.w	r5, r5, #8
	dj->fn[NS] = cf;	/* SFN is created */
  405ae8:	f8da 3018 	ldr.w	r3, [sl, #24]
  405aec:	72dd      	strb	r5, [r3, #11]
			res = dir_find(dj);				/* Find it */
  405aee:	4650      	mov	r0, sl
  405af0:	4b31      	ldr	r3, [pc, #196]	; (405bb8 <follow_path+0x31c>)
  405af2:	4798      	blx	r3
			ns = *(dj->fn+NS);
  405af4:	f8da 3018 	ldr.w	r3, [sl, #24]
  405af8:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  405afa:	4603      	mov	r3, r0
  405afc:	2800      	cmp	r0, #0
  405afe:	d138      	bne.n	405b72 <follow_path+0x2d6>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  405b00:	f012 0f04 	tst.w	r2, #4
  405b04:	d146      	bne.n	405b94 <follow_path+0x2f8>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  405b06:	f8da 3014 	ldr.w	r3, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  405b0a:	7ada      	ldrb	r2, [r3, #11]
  405b0c:	f012 0f10 	tst.w	r2, #16
  405b10:	d038      	beq.n	405b84 <follow_path+0x2e8>
			dj->sclust = LD_CLUST(dir);
  405b12:	7d59      	ldrb	r1, [r3, #21]
  405b14:	7d1a      	ldrb	r2, [r3, #20]
  405b16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  405b1a:	7ed9      	ldrb	r1, [r3, #27]
  405b1c:	7e9b      	ldrb	r3, [r3, #26]
  405b1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  405b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405b26:	f8ca 3008 	str.w	r3, [sl, #8]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  405b2a:	783b      	ldrb	r3, [r7, #0]
  405b2c:	2b2f      	cmp	r3, #47	; 0x2f
  405b2e:	d001      	beq.n	405b34 <follow_path+0x298>
  405b30:	2b5c      	cmp	r3, #92	; 0x5c
  405b32:	d105      	bne.n	405b40 <follow_path+0x2a4>
  405b34:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  405b38:	2b2f      	cmp	r3, #47	; 0x2f
  405b3a:	d0fb      	beq.n	405b34 <follow_path+0x298>
  405b3c:	2b5c      	cmp	r3, #92	; 0x5c
  405b3e:	d0f9      	beq.n	405b34 <follow_path+0x298>
	lfn = dj->lfn;
  405b40:	f8da b01c 	ldr.w	fp, [sl, #28]
		w = p[si++];					/* Get a character */
  405b44:	7838      	ldrb	r0, [r7, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  405b46:	282f      	cmp	r0, #47	; 0x2f
  405b48:	bf18      	it	ne
  405b4a:	281f      	cmpne	r0, #31
  405b4c:	d91e      	bls.n	405b8c <follow_path+0x2f0>
  405b4e:	285c      	cmp	r0, #92	; 0x5c
  405b50:	d01c      	beq.n	405b8c <follow_path+0x2f0>
  405b52:	f1ab 0602 	sub.w	r6, fp, #2
  405b56:	463d      	mov	r5, r7
  405b58:	2401      	movs	r4, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  405b5a:	46a0      	mov	r8, r4
  405b5c:	e6cf      	b.n	4058fe <follow_path+0x62>
	if (ni == 8) b <<= 2;
  405b5e:	9b01      	ldr	r3, [sp, #4]
  405b60:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  405b64:	fa5f f38b 	uxtb.w	r3, fp
  405b68:	9301      	str	r3, [sp, #4]
  405b6a:	e7a5      	b.n	405ab8 <follow_path+0x21c>
		cf |= NS_LFN;
  405b6c:	f045 0502 	orr.w	r5, r5, #2
  405b70:	e7ab      	b.n	405aca <follow_path+0x22e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  405b72:	2804      	cmp	r0, #4
  405b74:	d10e      	bne.n	405b94 <follow_path+0x2f8>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  405b76:	f002 0204 	and.w	r2, r2, #4
  405b7a:	2a00      	cmp	r2, #0
  405b7c:	bf14      	ite	ne
  405b7e:	4603      	movne	r3, r0
  405b80:	2305      	moveq	r3, #5
  405b82:	e007      	b.n	405b94 <follow_path+0x2f8>
				res = FR_NO_PATH; break;
  405b84:	2305      	movs	r3, #5
  405b86:	e005      	b.n	405b94 <follow_path+0x2f8>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  405b88:	2306      	movs	r3, #6
	return res;
  405b8a:	e003      	b.n	405b94 <follow_path+0x2f8>
	*path = &p[si];						/* Return pointer to the next segment */
  405b8c:	3701      	adds	r7, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  405b8e:	281f      	cmp	r0, #31
  405b90:	d804      	bhi.n	405b9c <follow_path+0x300>
  405b92:	2306      	movs	r3, #6
}
  405b94:	4618      	mov	r0, r3
  405b96:	b003      	add	sp, #12
  405b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	si = di = 0;
  405b9c:	2400      	movs	r4, #0
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  405b9e:	4625      	mov	r5, r4
  405ba0:	e6c7      	b.n	405932 <follow_path+0x96>
			cf |= NS_LFN;				/* Force create LFN entry */
  405ba2:	f045 0502 	orr.w	r5, r5, #2
  405ba6:	e765      	b.n	405a74 <follow_path+0x1d8>
  405ba8:	004051dd 	.word	0x004051dd
  405bac:	0040e69d 	.word	0x0040e69d
  405bb0:	0040e6a9 	.word	0x0040e6a9
  405bb4:	0040e61c 	.word	0x0040e61c
  405bb8:	004056f5 	.word	0x004056f5
  405bbc:	004065d5 	.word	0x004065d5

00405bc0 <dir_register>:
{
  405bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405bc4:	b089      	sub	sp, #36	; 0x24
  405bc6:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  405bc8:	6985      	ldr	r5, [r0, #24]
  405bca:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  405bce:	220c      	movs	r2, #12
  405bd0:	4629      	mov	r1, r5
  405bd2:	a805      	add	r0, sp, #20
  405bd4:	4baa      	ldr	r3, [pc, #680]	; (405e80 <dir_register+0x2c0>)
  405bd6:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  405bd8:	f89d 301f 	ldrb.w	r3, [sp, #31]
  405bdc:	f013 0f01 	tst.w	r3, #1
  405be0:	d079      	beq.n	405cd6 <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  405be2:	2300      	movs	r3, #0
  405be4:	72eb      	strb	r3, [r5, #11]
  405be6:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  405be8:	220b      	movs	r2, #11
  405bea:	a905      	add	r1, sp, #20
  405bec:	4628      	mov	r0, r5
  405bee:	4ba4      	ldr	r3, [pc, #656]	; (405e80 <dir_register+0x2c0>)
  405bf0:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  405bf2:	2701      	movs	r7, #1
  405bf4:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405bf6:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  405bfa:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 405e9c <dir_register+0x2dc>
	mem_cpy(dst, src, 11);
  405bfe:	f8df a280 	ldr.w	sl, [pc, #640]	; 405e80 <dir_register+0x2c0>
  405c02:	e032      	b.n	405c6a <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  405c04:	463b      	mov	r3, r7
  405c06:	e030      	b.n	405c6a <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  405c08:	4613      	mov	r3, r2
  405c0a:	e002      	b.n	405c12 <dir_register+0x52>
  405c0c:	2300      	movs	r3, #0
  405c0e:	e000      	b.n	405c12 <dir_register+0x52>
  405c10:	4613      	mov	r3, r2
  405c12:	442b      	add	r3, r5
  405c14:	e005      	b.n	405c22 <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405c16:	4641      	mov	r1, r8
  405c18:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  405c1c:	1b59      	subs	r1, r3, r5
  405c1e:	2907      	cmp	r1, #7
  405c20:	d807      	bhi.n	405c32 <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405c22:	2a07      	cmp	r2, #7
  405c24:	d8f7      	bhi.n	405c16 <dir_register+0x56>
  405c26:	a908      	add	r1, sp, #32
  405c28:	4411      	add	r1, r2
  405c2a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  405c2e:	3201      	adds	r2, #1
  405c30:	e7f2      	b.n	405c18 <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  405c32:	4620      	mov	r0, r4
  405c34:	47c8      	blx	r9
			if (res != FR_OK) break;
  405c36:	4606      	mov	r6, r0
  405c38:	2800      	cmp	r0, #0
  405c3a:	d13e      	bne.n	405cba <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  405c3c:	3701      	adds	r7, #1
  405c3e:	b2bf      	uxth	r7, r7
  405c40:	2f64      	cmp	r7, #100	; 0x64
  405c42:	d038      	beq.n	405cb6 <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  405c44:	220b      	movs	r2, #11
  405c46:	a905      	add	r1, sp, #20
  405c48:	4628      	mov	r0, r5
  405c4a:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  405c4c:	2f05      	cmp	r7, #5
  405c4e:	d9d9      	bls.n	405c04 <dir_register+0x44>
  405c50:	463b      	mov	r3, r7
  405c52:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  405c54:	03da      	lsls	r2, r3, #15
  405c56:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  405c5a:	f831 2b02 	ldrh.w	r2, [r1], #2
  405c5e:	fa12 f383 	uxtah	r3, r2, r3
  405c62:	b29b      	uxth	r3, r3
  405c64:	880a      	ldrh	r2, [r1, #0]
  405c66:	2a00      	cmp	r2, #0
  405c68:	d1f4      	bne.n	405c54 <dir_register+0x94>
  405c6a:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  405c6e:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  405c70:	f003 000f 	and.w	r0, r3, #15
  405c74:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  405c78:	2939      	cmp	r1, #57	; 0x39
  405c7a:	bf88      	it	hi
  405c7c:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  405c80:	3a01      	subs	r2, #1
  405c82:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  405c86:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  405c8a:	2b00      	cmp	r3, #0
  405c8c:	d1f0      	bne.n	405c70 <dir_register+0xb0>
	ns[i] = '~';
  405c8e:	217e      	movs	r1, #126	; 0x7e
  405c90:	ab08      	add	r3, sp, #32
  405c92:	4413      	add	r3, r2
  405c94:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  405c98:	2a00      	cmp	r2, #0
  405c9a:	d0b5      	beq.n	405c08 <dir_register+0x48>
  405c9c:	782b      	ldrb	r3, [r5, #0]
  405c9e:	2b20      	cmp	r3, #32
  405ca0:	d0b4      	beq.n	405c0c <dir_register+0x4c>
  405ca2:	4629      	mov	r1, r5
  405ca4:	2300      	movs	r3, #0
  405ca6:	3301      	adds	r3, #1
  405ca8:	429a      	cmp	r2, r3
  405caa:	d0b1      	beq.n	405c10 <dir_register+0x50>
  405cac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  405cb0:	2820      	cmp	r0, #32
  405cb2:	d1f8      	bne.n	405ca6 <dir_register+0xe6>
  405cb4:	e7ad      	b.n	405c12 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  405cb6:	2607      	movs	r6, #7
  405cb8:	e004      	b.n	405cc4 <dir_register+0x104>
  405cba:	2f64      	cmp	r7, #100	; 0x64
  405cbc:	f000 80af 	beq.w	405e1e <dir_register+0x25e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  405cc0:	2804      	cmp	r0, #4
  405cc2:	d003      	beq.n	405ccc <dir_register+0x10c>
}
  405cc4:	4630      	mov	r0, r6
  405cc6:	b009      	add	sp, #36	; 0x24
  405cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  405ccc:	f89d 301f 	ldrb.w	r3, [sp, #31]
  405cd0:	72eb      	strb	r3, [r5, #11]
  405cd2:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  405cd6:	f89d 301f 	ldrb.w	r3, [sp, #31]
  405cda:	f013 0f02 	tst.w	r3, #2
  405cde:	d014      	beq.n	405d0a <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  405ce0:	f8bb 3000 	ldrh.w	r3, [fp]
  405ce4:	b17b      	cbz	r3, 405d06 <dir_register+0x146>
  405ce6:	2300      	movs	r3, #0
  405ce8:	3301      	adds	r3, #1
  405cea:	b29b      	uxth	r3, r3
  405cec:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  405cf0:	2a00      	cmp	r2, #0
  405cf2:	d1f9      	bne.n	405ce8 <dir_register+0x128>
		ne = (ne + 25) / 13;
  405cf4:	3319      	adds	r3, #25
  405cf6:	4f63      	ldr	r7, [pc, #396]	; (405e84 <dir_register+0x2c4>)
  405cf8:	fb87 2703 	smull	r2, r7, r7, r3
  405cfc:	17db      	asrs	r3, r3, #31
  405cfe:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  405d02:	b2bf      	uxth	r7, r7
  405d04:	e002      	b.n	405d0c <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  405d06:	2300      	movs	r3, #0
  405d08:	e7f4      	b.n	405cf4 <dir_register+0x134>
		ne = 1;
  405d0a:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  405d0c:	2100      	movs	r1, #0
  405d0e:	4620      	mov	r0, r4
  405d10:	4b5d      	ldr	r3, [pc, #372]	; (405e88 <dir_register+0x2c8>)
  405d12:	4798      	blx	r3
	if (res != FR_OK) return res;
  405d14:	4606      	mov	r6, r0
  405d16:	2800      	cmp	r0, #0
  405d18:	d1d4      	bne.n	405cc4 <dir_register+0x104>
  405d1a:	f04f 0a00 	mov.w	sl, #0
  405d1e:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  405d20:	f8df 816c 	ldr.w	r8, [pc, #364]	; 405e90 <dir_register+0x2d0>
			n = 0;					/* Not a blank entry. Restart to search */
  405d24:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  405d26:	f8df 9164 	ldr.w	r9, [pc, #356]	; 405e8c <dir_register+0x2cc>
  405d2a:	e00a      	b.n	405d42 <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  405d2c:	1c6b      	adds	r3, r5, #1
  405d2e:	b29b      	uxth	r3, r3
  405d30:	429f      	cmp	r7, r3
  405d32:	d076      	beq.n	405e22 <dir_register+0x262>
  405d34:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  405d36:	2101      	movs	r1, #1
  405d38:	4620      	mov	r0, r4
  405d3a:	47c8      	blx	r9
	} while (res == FR_OK);
  405d3c:	4606      	mov	r6, r0
  405d3e:	2800      	cmp	r0, #0
  405d40:	d1c0      	bne.n	405cc4 <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  405d42:	6921      	ldr	r1, [r4, #16]
  405d44:	6820      	ldr	r0, [r4, #0]
  405d46:	47c0      	blx	r8
		if (res != FR_OK) break;
  405d48:	4606      	mov	r6, r0
  405d4a:	2800      	cmp	r0, #0
  405d4c:	d1ba      	bne.n	405cc4 <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  405d4e:	6963      	ldr	r3, [r4, #20]
  405d50:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  405d52:	2be5      	cmp	r3, #229	; 0xe5
  405d54:	d000      	beq.n	405d58 <dir_register+0x198>
  405d56:	b923      	cbnz	r3, 405d62 <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  405d58:	2d00      	cmp	r5, #0
  405d5a:	d1e7      	bne.n	405d2c <dir_register+0x16c>
  405d5c:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  405d60:	e7e4      	b.n	405d2c <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  405d62:	465d      	mov	r5, fp
  405d64:	e7e7      	b.n	405d36 <dir_register+0x176>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  405d66:	4671      	mov	r1, lr
  405d68:	e073      	b.n	405e52 <dir_register+0x292>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  405d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  405d6e:	4293      	cmp	r3, r2
  405d70:	d002      	beq.n	405d78 <dir_register+0x1b8>
  405d72:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  405d76:	b90b      	cbnz	r3, 405d7c <dir_register+0x1bc>
  405d78:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  405d7c:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  405d80:	6823      	ldr	r3, [r4, #0]
  405d82:	2201      	movs	r2, #1
  405d84:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  405d86:	4639      	mov	r1, r7
  405d88:	4620      	mov	r0, r4
  405d8a:	4b40      	ldr	r3, [pc, #256]	; (405e8c <dir_register+0x2cc>)
  405d8c:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  405d8e:	4606      	mov	r6, r0
  405d90:	2800      	cmp	r0, #0
  405d92:	d197      	bne.n	405cc4 <dir_register+0x104>
  405d94:	3d01      	subs	r5, #1
  405d96:	b2ad      	uxth	r5, r5
  405d98:	b315      	cbz	r5, 405de0 <dir_register+0x220>
				res = move_window(dj->fs, dj->sect);
  405d9a:	6921      	ldr	r1, [r4, #16]
  405d9c:	6820      	ldr	r0, [r4, #0]
  405d9e:	4b3c      	ldr	r3, [pc, #240]	; (405e90 <dir_register+0x2d0>)
  405da0:	4798      	blx	r3
				if (res != FR_OK) break;
  405da2:	4606      	mov	r6, r0
  405da4:	2800      	cmp	r0, #0
  405da6:	d18d      	bne.n	405cc4 <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  405da8:	f8d4 901c 	ldr.w	r9, [r4, #28]
  405dac:	6960      	ldr	r0, [r4, #20]
  405dae:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  405db2:	f89d 3000 	ldrb.w	r3, [sp]
  405db6:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  405db8:	230f      	movs	r3, #15
  405dba:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  405dbc:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  405dbe:	7687      	strb	r7, [r0, #26]
  405dc0:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  405dc2:	f10b 31ff 	add.w	r1, fp, #4294967295
  405dc6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  405dca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  405dce:	4a31      	ldr	r2, [pc, #196]	; (405e94 <dir_register+0x2d4>)
  405dd0:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  405dd4:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  405dd6:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  405dda:	f04f 0aff 	mov.w	sl, #255	; 0xff
  405dde:	e03b      	b.n	405e58 <dir_register+0x298>
		res = move_window(dj->fs, dj->sect);
  405de0:	6921      	ldr	r1, [r4, #16]
  405de2:	6820      	ldr	r0, [r4, #0]
  405de4:	4b2a      	ldr	r3, [pc, #168]	; (405e90 <dir_register+0x2d0>)
  405de6:	4798      	blx	r3
		if (res == FR_OK) {
  405de8:	4606      	mov	r6, r0
  405dea:	2800      	cmp	r0, #0
  405dec:	f47f af6a 	bne.w	405cc4 <dir_register+0x104>
			dir = dj->dir;
  405df0:	6965      	ldr	r5, [r4, #20]
  405df2:	f105 0120 	add.w	r1, r5, #32
	BYTE *d = (BYTE*)dst;
  405df6:	462b      	mov	r3, r5
		*d++ = (BYTE)val;
  405df8:	2200      	movs	r2, #0
  405dfa:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  405dfe:	4299      	cmp	r1, r3
  405e00:	d1fb      	bne.n	405dfa <dir_register+0x23a>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  405e02:	220b      	movs	r2, #11
  405e04:	69a1      	ldr	r1, [r4, #24]
  405e06:	4628      	mov	r0, r5
  405e08:	4b1d      	ldr	r3, [pc, #116]	; (405e80 <dir_register+0x2c0>)
  405e0a:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  405e0c:	69a3      	ldr	r3, [r4, #24]
  405e0e:	7adb      	ldrb	r3, [r3, #11]
  405e10:	f003 0318 	and.w	r3, r3, #24
  405e14:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  405e16:	6823      	ldr	r3, [r4, #0]
  405e18:	2201      	movs	r2, #1
  405e1a:	711a      	strb	r2, [r3, #4]
  405e1c:	e752      	b.n	405cc4 <dir_register+0x104>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  405e1e:	2607      	movs	r6, #7
  405e20:	e750      	b.n	405cc4 <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  405e22:	2b01      	cmp	r3, #1
  405e24:	d9dc      	bls.n	405de0 <dir_register+0x220>
		res = dir_sdi(dj, is);
  405e26:	4651      	mov	r1, sl
  405e28:	4620      	mov	r0, r4
  405e2a:	4b17      	ldr	r3, [pc, #92]	; (405e88 <dir_register+0x2c8>)
  405e2c:	4798      	blx	r3
		if (res == FR_OK) {
  405e2e:	4606      	mov	r6, r0
  405e30:	2800      	cmp	r0, #0
  405e32:	f47f af47 	bne.w	405cc4 <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  405e36:	69a0      	ldr	r0, [r4, #24]
  405e38:	4b17      	ldr	r3, [pc, #92]	; (405e98 <dir_register+0x2d8>)
  405e3a:	4798      	blx	r3
  405e3c:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  405e3e:	2700      	movs	r7, #0
	s = wc = 0;
  405e40:	9701      	str	r7, [sp, #4]
  405e42:	e7aa      	b.n	405d9a <dir_register+0x1da>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  405e44:	f892 e000 	ldrb.w	lr, [r2]
  405e48:	f800 a00e 	strb.w	sl, [r0, lr]
  405e4c:	4486      	add	lr, r0
  405e4e:	f88e a001 	strb.w	sl, [lr, #1]
  405e52:	3201      	adds	r2, #1
	} while (++s < 13);
  405e54:	4542      	cmp	r2, r8
  405e56:	d088      	beq.n	405d6a <dir_register+0x1aa>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  405e58:	42b3      	cmp	r3, r6
  405e5a:	d0f3      	beq.n	405e44 <dir_register+0x284>
  405e5c:	f101 0e01 	add.w	lr, r1, #1
  405e60:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  405e64:	7811      	ldrb	r1, [r2, #0]
  405e66:	5443      	strb	r3, [r0, r1]
  405e68:	4401      	add	r1, r0
  405e6a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  405e6e:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  405e72:	2b00      	cmp	r3, #0
  405e74:	f47f af77 	bne.w	405d66 <dir_register+0x1a6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  405e78:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  405e7a:	4633      	mov	r3, r6
  405e7c:	e7e9      	b.n	405e52 <dir_register+0x292>
  405e7e:	bf00      	nop
  405e80:	00404bf1 	.word	0x00404bf1
  405e84:	4ec4ec4f 	.word	0x4ec4ec4f
  405e88:	004051dd 	.word	0x004051dd
  405e8c:	004055bd 	.word	0x004055bd
  405e90:	00405065 	.word	0x00405065
  405e94:	0040e60c 	.word	0x0040e60c
  405e98:	00404c1d 	.word	0x00404c1d
  405e9c:	004056f5 	.word	0x004056f5

00405ea0 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  405ea0:	b108      	cbz	r0, 405ea6 <f_mount+0x6>
		return FR_INVALID_DRIVE;
  405ea2:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  405ea4:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  405ea6:	4b06      	ldr	r3, [pc, #24]	; (405ec0 <f_mount+0x20>)
  405ea8:	681b      	ldr	r3, [r3, #0]
	if (rfs) {
  405eaa:	b10b      	cbz	r3, 405eb0 <f_mount+0x10>
		rfs->fs_type = 0;		/* Clear old fs object */
  405eac:	2200      	movs	r2, #0
  405eae:	701a      	strb	r2, [r3, #0]
	if (fs) {
  405eb0:	b109      	cbz	r1, 405eb6 <f_mount+0x16>
		fs->fs_type = 0;		/* Clear new fs object */
  405eb2:	2300      	movs	r3, #0
  405eb4:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  405eb6:	4b02      	ldr	r3, [pc, #8]	; (405ec0 <f_mount+0x20>)
  405eb8:	6019      	str	r1, [r3, #0]
	return FR_OK;
  405eba:	2000      	movs	r0, #0
  405ebc:	4770      	bx	lr
  405ebe:	bf00      	nop
  405ec0:	20400cbc 	.word	0x20400cbc

00405ec4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  405ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405ec8:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  405ecc:	4605      	mov	r5, r0
  405ece:	9101      	str	r1, [sp, #4]
  405ed0:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  405ed2:	2300      	movs	r3, #0
  405ed4:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  405ed6:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  405eda:	f002 021e 	and.w	r2, r2, #30
  405ede:	a985      	add	r1, sp, #532	; 0x214
  405ee0:	a801      	add	r0, sp, #4
  405ee2:	4b58      	ldr	r3, [pc, #352]	; (406044 <f_open+0x180>)
  405ee4:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  405ee6:	ab82      	add	r3, sp, #520	; 0x208
  405ee8:	938b      	str	r3, [sp, #556]	; 0x22c
  405eea:	ab02      	add	r3, sp, #8
  405eec:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  405eee:	b168      	cbz	r0, 405f0c <f_open+0x48>
  405ef0:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  405ef2:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  405ef4:	f016 0f1c 	tst.w	r6, #28
  405ef8:	d158      	bne.n	405fac <f_open+0xe8>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  405efa:	2b00      	cmp	r3, #0
  405efc:	f040 8096 	bne.w	40602c <f_open+0x168>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  405f00:	7ae3      	ldrb	r3, [r4, #11]
  405f02:	f013 0f10 	tst.w	r3, #16
  405f06:	d062      	beq.n	405fce <f_open+0x10a>
				res = FR_NO_FILE;
  405f08:	2304      	movs	r3, #4
  405f0a:	e08f      	b.n	40602c <f_open+0x168>
		res = follow_path(&dj, path);	/* Follow the file path */
  405f0c:	9901      	ldr	r1, [sp, #4]
  405f0e:	a885      	add	r0, sp, #532	; 0x214
  405f10:	4b4d      	ldr	r3, [pc, #308]	; (406048 <f_open+0x184>)
  405f12:	4798      	blx	r3
  405f14:	4603      	mov	r3, r0
	dir = dj.dir;
  405f16:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (!dir)	/* Current dir itself */
  405f18:	b934      	cbnz	r4, 405f28 <f_open+0x64>
  405f1a:	b928      	cbnz	r0, 405f28 <f_open+0x64>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  405f1c:	f016 0f1c 	tst.w	r6, #28
  405f20:	f040 8089 	bne.w	406036 <f_open+0x172>
			res = FR_INVALID_NAME;
  405f24:	2306      	movs	r3, #6
  405f26:	e046      	b.n	405fb6 <f_open+0xf2>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  405f28:	f016 0f1c 	tst.w	r6, #28
  405f2c:	d0e5      	beq.n	405efa <f_open+0x36>
		if (res != FR_OK) {					/* No file, create new */
  405f2e:	2b00      	cmp	r3, #0
  405f30:	d13c      	bne.n	405fac <f_open+0xe8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  405f32:	7ae3      	ldrb	r3, [r4, #11]
  405f34:	f013 0f11 	tst.w	r3, #17
  405f38:	d17f      	bne.n	40603a <f_open+0x176>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  405f3a:	f016 0f04 	tst.w	r6, #4
  405f3e:	d17e      	bne.n	40603e <f_open+0x17a>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  405f40:	f017 0f08 	tst.w	r7, #8
  405f44:	d050      	beq.n	405fe8 <f_open+0x124>
			dw = get_fattime();					/* Created time */
  405f46:	4b41      	ldr	r3, [pc, #260]	; (40604c <f_open+0x188>)
  405f48:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  405f4a:	73a0      	strb	r0, [r4, #14]
  405f4c:	f3c0 2307 	ubfx	r3, r0, #8, #8
  405f50:	73e3      	strb	r3, [r4, #15]
  405f52:	0c03      	lsrs	r3, r0, #16
  405f54:	7423      	strb	r3, [r4, #16]
  405f56:	0e00      	lsrs	r0, r0, #24
  405f58:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  405f5a:	2300      	movs	r3, #0
  405f5c:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  405f5e:	7723      	strb	r3, [r4, #28]
  405f60:	7763      	strb	r3, [r4, #29]
  405f62:	77a3      	strb	r3, [r4, #30]
  405f64:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  405f66:	7d62      	ldrb	r2, [r4, #21]
  405f68:	7d26      	ldrb	r6, [r4, #20]
  405f6a:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  405f6e:	7ee1      	ldrb	r1, [r4, #27]
  405f70:	7ea2      	ldrb	r2, [r4, #26]
  405f72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  405f76:	76a3      	strb	r3, [r4, #26]
  405f78:	76e3      	strb	r3, [r4, #27]
  405f7a:	7523      	strb	r3, [r4, #20]
  405f7c:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  405f7e:	9885      	ldr	r0, [sp, #532]	; 0x214
  405f80:	2301      	movs	r3, #1
  405f82:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  405f84:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  405f88:	d02c      	beq.n	405fe4 <f_open+0x120>
				dw = dj.fs->winsect;
  405f8a:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  405f8e:	4631      	mov	r1, r6
  405f90:	4b2f      	ldr	r3, [pc, #188]	; (406050 <f_open+0x18c>)
  405f92:	4798      	blx	r3
				if (res == FR_OK) {
  405f94:	4603      	mov	r3, r0
  405f96:	2800      	cmp	r0, #0
  405f98:	d148      	bne.n	40602c <f_open+0x168>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  405f9a:	9885      	ldr	r0, [sp, #532]	; 0x214
  405f9c:	3e01      	subs	r6, #1
  405f9e:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  405fa0:	4641      	mov	r1, r8
  405fa2:	4b2c      	ldr	r3, [pc, #176]	; (406054 <f_open+0x190>)
  405fa4:	4798      	blx	r3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  405fa6:	4603      	mov	r3, r0
  405fa8:	b1e0      	cbz	r0, 405fe4 <f_open+0x120>
  405faa:	e03f      	b.n	40602c <f_open+0x168>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  405fac:	2b04      	cmp	r3, #4
  405fae:	d004      	beq.n	405fba <f_open+0xf6>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  405fb0:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  405fb4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  405fb6:	b1db      	cbz	r3, 405ff0 <f_open+0x12c>
  405fb8:	e038      	b.n	40602c <f_open+0x168>
				res = dir_register(&dj);
  405fba:	a885      	add	r0, sp, #532	; 0x214
  405fbc:	4b26      	ldr	r3, [pc, #152]	; (406058 <f_open+0x194>)
  405fbe:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  405fc0:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  405fc4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  405fc6:	4603      	mov	r3, r0
  405fc8:	2800      	cmp	r0, #0
  405fca:	d0b9      	beq.n	405f40 <f_open+0x7c>
  405fcc:	e02e      	b.n	40602c <f_open+0x168>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  405fce:	f016 0f02 	tst.w	r6, #2
  405fd2:	d004      	beq.n	405fde <f_open+0x11a>
  405fd4:	f013 0f01 	tst.w	r3, #1
  405fd8:	d001      	beq.n	405fde <f_open+0x11a>
					res = FR_DENIED;
  405fda:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  405fdc:	e026      	b.n	40602c <f_open+0x168>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  405fde:	f016 0f08 	tst.w	r6, #8
  405fe2:	d001      	beq.n	405fe8 <f_open+0x124>
			mode |= FA__WRITTEN;
  405fe4:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  405fe8:	9b85      	ldr	r3, [sp, #532]	; 0x214
  405fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405fec:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  405fee:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  405ff0:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  405ff2:	7d62      	ldrb	r2, [r4, #21]
  405ff4:	7d23      	ldrb	r3, [r4, #20]
  405ff6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  405ffa:	7ee1      	ldrb	r1, [r4, #27]
  405ffc:	7ea3      	ldrb	r3, [r4, #26]
  405ffe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  406002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406006:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  406008:	7fe2      	ldrb	r2, [r4, #31]
  40600a:	7fa3      	ldrb	r3, [r4, #30]
  40600c:	041b      	lsls	r3, r3, #16
  40600e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  406012:	7f22      	ldrb	r2, [r4, #28]
  406014:	4313      	orrs	r3, r2
  406016:	7f62      	ldrb	r2, [r4, #29]
  406018:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40601c:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  40601e:	2300      	movs	r3, #0
  406020:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  406022:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  406024:	9a85      	ldr	r2, [sp, #532]	; 0x214
  406026:	602a      	str	r2, [r5, #0]
  406028:	88d2      	ldrh	r2, [r2, #6]
  40602a:	80aa      	strh	r2, [r5, #4]
}
  40602c:	4618      	mov	r0, r3
  40602e:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  406032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_INVALID_NAME;
  406036:	2306      	movs	r3, #6
  406038:	e7ba      	b.n	405fb0 <f_open+0xec>
				res = FR_DENIED;
  40603a:	2307      	movs	r3, #7
  40603c:	e7f6      	b.n	40602c <f_open+0x168>
					res = FR_EXIST;
  40603e:	2308      	movs	r3, #8
  406040:	e7f4      	b.n	40602c <f_open+0x168>
  406042:	bf00      	nop
  406044:	00404d01 	.word	0x00404d01
  406048:	0040589d 	.word	0x0040589d
  40604c:	00404b99 	.word	0x00404b99
  406050:	00405475 	.word	0x00405475
  406054:	00405065 	.word	0x00405065
  406058:	00405bc1 	.word	0x00405bc1

0040605c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  40605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406060:	b083      	sub	sp, #12
  406062:	4604      	mov	r4, r0
  406064:	4689      	mov	r9, r1
  406066:	4616      	mov	r6, r2
  406068:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  40606a:	2300      	movs	r3, #0
  40606c:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  406070:	8881      	ldrh	r1, [r0, #4]
  406072:	6800      	ldr	r0, [r0, #0]
  406074:	4b75      	ldr	r3, [pc, #468]	; (40624c <f_write+0x1f0>)
  406076:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  406078:	9001      	str	r0, [sp, #4]
  40607a:	2800      	cmp	r0, #0
  40607c:	f040 80e2 	bne.w	406244 <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  406080:	79a3      	ldrb	r3, [r4, #6]
  406082:	f013 0f80 	tst.w	r3, #128	; 0x80
  406086:	f040 80db 	bne.w	406240 <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  40608a:	f013 0f02 	tst.w	r3, #2
  40608e:	d102      	bne.n	406096 <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  406090:	2307      	movs	r3, #7
  406092:	9301      	str	r3, [sp, #4]
  406094:	e0d6      	b.n	406244 <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  406096:	68e3      	ldr	r3, [r4, #12]
  406098:	42f3      	cmn	r3, r6
  40609a:	d20f      	bcs.n	4060bc <f_write+0x60>

	for ( ;  btw;							/* Repeat until all data written */
  40609c:	2e00      	cmp	r6, #0
  40609e:	d17a      	bne.n	406196 <f_write+0x13a>
  4060a0:	e00c      	b.n	4060bc <f_write+0x60>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  4060a2:	2100      	movs	r1, #0
  4060a4:	4b6a      	ldr	r3, [pc, #424]	; (406250 <f_write+0x1f4>)
  4060a6:	4798      	blx	r3
  4060a8:	4603      	mov	r3, r0
  4060aa:	6120      	str	r0, [r4, #16]
  4060ac:	e003      	b.n	4060b6 <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  4060ae:	6961      	ldr	r1, [r4, #20]
  4060b0:	4b67      	ldr	r3, [pc, #412]	; (406250 <f_write+0x1f4>)
  4060b2:	4798      	blx	r3
  4060b4:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  4060b6:	2b00      	cmp	r3, #0
  4060b8:	f040 8081 	bne.w	4061be <f_write+0x162>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  4060bc:	68a3      	ldr	r3, [r4, #8]
  4060be:	68e2      	ldr	r2, [r4, #12]
  4060c0:	4293      	cmp	r3, r2
  4060c2:	bf88      	it	hi
  4060c4:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  4060c6:	79a3      	ldrb	r3, [r4, #6]
  4060c8:	f043 0320 	orr.w	r3, r3, #32
  4060cc:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  4060ce:	e0b9      	b.n	406244 <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4060d0:	79a3      	ldrb	r3, [r4, #6]
  4060d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4060d6:	71a3      	strb	r3, [r4, #6]
  4060d8:	2302      	movs	r3, #2
  4060da:	9301      	str	r3, [sp, #4]
  4060dc:	e0b2      	b.n	406244 <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4060de:	79a3      	ldrb	r3, [r4, #6]
  4060e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4060e4:	71a3      	strb	r3, [r4, #6]
  4060e6:	2301      	movs	r3, #1
  4060e8:	9301      	str	r3, [sp, #4]
  4060ea:	e0ab      	b.n	406244 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  4060ec:	6820      	ldr	r0, [r4, #0]
  4060ee:	2301      	movs	r3, #1
  4060f0:	69a2      	ldr	r2, [r4, #24]
  4060f2:	f104 0124 	add.w	r1, r4, #36	; 0x24
  4060f6:	7840      	ldrb	r0, [r0, #1]
  4060f8:	4d56      	ldr	r5, [pc, #344]	; (406254 <f_write+0x1f8>)
  4060fa:	47a8      	blx	r5
  4060fc:	b920      	cbnz	r0, 406108 <f_write+0xac>
				fp->flag &= ~FA__DIRTY;
  4060fe:	79a3      	ldrb	r3, [r4, #6]
  406100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  406104:	71a3      	strb	r3, [r4, #6]
  406106:	e064      	b.n	4061d2 <f_write+0x176>
					ABORT(fp->fs, FR_DISK_ERR);
  406108:	79a3      	ldrb	r3, [r4, #6]
  40610a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40610e:	71a3      	strb	r3, [r4, #6]
  406110:	2301      	movs	r3, #1
  406112:	9301      	str	r3, [sp, #4]
  406114:	e096      	b.n	406244 <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  406116:	79a3      	ldrb	r3, [r4, #6]
  406118:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40611c:	71a3      	strb	r3, [r4, #6]
  40611e:	2302      	movs	r3, #2
  406120:	9301      	str	r3, [sp, #4]
  406122:	e08f      	b.n	406244 <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  406124:	79a3      	ldrb	r3, [r4, #6]
  406126:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40612a:	71a3      	strb	r3, [r4, #6]
  40612c:	2301      	movs	r3, #1
  40612e:	9301      	str	r3, [sp, #4]
  406130:	e088      	b.n	406244 <f_write+0x1e8>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  406132:	f44f 7200 	mov.w	r2, #512	; 0x200
  406136:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  40613a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40613e:	4b46      	ldr	r3, [pc, #280]	; (406258 <f_write+0x1fc>)
  406140:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
  406142:	79a3      	ldrb	r3, [r4, #6]
  406144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  406148:	71a3      	strb	r3, [r4, #6]
  40614a:	e065      	b.n	406218 <f_write+0x1bc>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
  40614c:	69a3      	ldr	r3, [r4, #24]
  40614e:	429d      	cmp	r5, r3
  406150:	d003      	beq.n	40615a <f_write+0xfe>
				if (fp->fptr < fp->fsize &&
  406152:	68a2      	ldr	r2, [r4, #8]
  406154:	68e3      	ldr	r3, [r4, #12]
  406156:	429a      	cmp	r2, r3
  406158:	d361      	bcc.n	40621e <f_write+0x1c2>
			fp->dsect = sect;
  40615a:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  40615c:	68a0      	ldr	r0, [r4, #8]
  40615e:	f3c0 0008 	ubfx	r0, r0, #0, #9
  406162:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
  406166:	42b5      	cmp	r5, r6
  406168:	bf28      	it	cs
  40616a:	4635      	movcs	r5, r6
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  40616c:	3024      	adds	r0, #36	; 0x24
  40616e:	462a      	mov	r2, r5
  406170:	4649      	mov	r1, r9
  406172:	4420      	add	r0, r4
  406174:	4b38      	ldr	r3, [pc, #224]	; (406258 <f_write+0x1fc>)
  406176:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
  406178:	79a3      	ldrb	r3, [r4, #6]
  40617a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40617e:	71a3      	strb	r3, [r4, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  406180:	44a9      	add	r9, r5
  406182:	68a3      	ldr	r3, [r4, #8]
  406184:	442b      	add	r3, r5
  406186:	60a3      	str	r3, [r4, #8]
  406188:	f8d8 3000 	ldr.w	r3, [r8]
  40618c:	442b      	add	r3, r5
  40618e:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  406192:	1b76      	subs	r6, r6, r5
  406194:	d092      	beq.n	4060bc <f_write+0x60>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  406196:	68a2      	ldr	r2, [r4, #8]
  406198:	f3c2 0308 	ubfx	r3, r2, #0, #9
  40619c:	2b00      	cmp	r3, #0
  40619e:	d1dd      	bne.n	40615c <f_write+0x100>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  4061a0:	6820      	ldr	r0, [r4, #0]
  4061a2:	7883      	ldrb	r3, [r0, #2]
  4061a4:	3b01      	subs	r3, #1
  4061a6:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  4061aa:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  4061ae:	d10c      	bne.n	4061ca <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
  4061b0:	2a00      	cmp	r2, #0
  4061b2:	f47f af7c 	bne.w	4060ae <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  4061b6:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  4061b8:	2b00      	cmp	r3, #0
  4061ba:	f43f af72 	beq.w	4060a2 <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4061be:	2b01      	cmp	r3, #1
  4061c0:	d086      	beq.n	4060d0 <f_write+0x74>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4061c2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4061c6:	d08a      	beq.n	4060de <f_write+0x82>
				fp->clust = clst;			/* Update current cluster */
  4061c8:	6163      	str	r3, [r4, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
  4061ca:	79a3      	ldrb	r3, [r4, #6]
  4061cc:	f013 0f40 	tst.w	r3, #64	; 0x40
  4061d0:	d18c      	bne.n	4060ec <f_write+0x90>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  4061d2:	f8d4 a000 	ldr.w	sl, [r4]
  4061d6:	6961      	ldr	r1, [r4, #20]
  4061d8:	4650      	mov	r0, sl
  4061da:	4b20      	ldr	r3, [pc, #128]	; (40625c <f_write+0x200>)
  4061dc:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  4061de:	4605      	mov	r5, r0
  4061e0:	2800      	cmp	r0, #0
  4061e2:	d098      	beq.n	406116 <f_write+0xba>
			sect += csect;
  4061e4:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  4061e6:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  4061ea:	d0af      	beq.n	40614c <f_write+0xf0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  4061ec:	f89a 3002 	ldrb.w	r3, [sl, #2]
  4061f0:	eb07 020b 	add.w	r2, r7, fp
  4061f4:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  4061f6:	bf88      	it	hi
  4061f8:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  4061fc:	fa5f f38b 	uxtb.w	r3, fp
  406200:	462a      	mov	r2, r5
  406202:	4649      	mov	r1, r9
  406204:	f89a 0001 	ldrb.w	r0, [sl, #1]
  406208:	4f12      	ldr	r7, [pc, #72]	; (406254 <f_write+0x1f8>)
  40620a:	47b8      	blx	r7
  40620c:	2800      	cmp	r0, #0
  40620e:	d189      	bne.n	406124 <f_write+0xc8>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  406210:	69a1      	ldr	r1, [r4, #24]
  406212:	1b49      	subs	r1, r1, r5
  406214:	458b      	cmp	fp, r1
  406216:	d88c      	bhi.n	406132 <f_write+0xd6>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  406218:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  40621c:	e7b0      	b.n	406180 <f_write+0x124>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  40621e:	2301      	movs	r3, #1
  406220:	462a      	mov	r2, r5
  406222:	f104 0124 	add.w	r1, r4, #36	; 0x24
  406226:	f89a 0001 	ldrb.w	r0, [sl, #1]
  40622a:	4f0d      	ldr	r7, [pc, #52]	; (406260 <f_write+0x204>)
  40622c:	47b8      	blx	r7
				if (fp->fptr < fp->fsize &&
  40622e:	2800      	cmp	r0, #0
  406230:	d093      	beq.n	40615a <f_write+0xfe>
						ABORT(fp->fs, FR_DISK_ERR);
  406232:	79a3      	ldrb	r3, [r4, #6]
  406234:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406238:	71a3      	strb	r3, [r4, #6]
  40623a:	2301      	movs	r3, #1
  40623c:	9301      	str	r3, [sp, #4]
  40623e:	e001      	b.n	406244 <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  406240:	2302      	movs	r3, #2
  406242:	9301      	str	r3, [sp, #4]
}
  406244:	9801      	ldr	r0, [sp, #4]
  406246:	b003      	add	sp, #12
  406248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40624c:	00404c3d 	.word	0x00404c3d
  406250:	004053b5 	.word	0x004053b5
  406254:	00404ab9 	.word	0x00404ab9
  406258:	00404bf1 	.word	0x00404bf1
  40625c:	00404c05 	.word	0x00404c05
  406260:	00404a49 	.word	0x00404a49

00406264 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  406264:	b538      	push	{r3, r4, r5, lr}
  406266:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  406268:	8881      	ldrh	r1, [r0, #4]
  40626a:	6800      	ldr	r0, [r0, #0]
  40626c:	4b28      	ldr	r3, [pc, #160]	; (406310 <f_sync+0xac>)
  40626e:	4798      	blx	r3
	if (res == FR_OK) {
  406270:	4603      	mov	r3, r0
  406272:	b9d0      	cbnz	r0, 4062aa <f_sync+0x46>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  406274:	79a2      	ldrb	r2, [r4, #6]
  406276:	f012 0f20 	tst.w	r2, #32
  40627a:	d016      	beq.n	4062aa <f_sync+0x46>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
  40627c:	f012 0f40 	tst.w	r2, #64	; 0x40
  406280:	d00d      	beq.n	40629e <f_sync+0x3a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  406282:	6820      	ldr	r0, [r4, #0]
  406284:	2301      	movs	r3, #1
  406286:	69a2      	ldr	r2, [r4, #24]
  406288:	f104 0124 	add.w	r1, r4, #36	; 0x24
  40628c:	7840      	ldrb	r0, [r0, #1]
  40628e:	4d21      	ldr	r5, [pc, #132]	; (406314 <f_sync+0xb0>)
  406290:	47a8      	blx	r5
  406292:	2800      	cmp	r0, #0
  406294:	d139      	bne.n	40630a <f_sync+0xa6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
  406296:	79a3      	ldrb	r3, [r4, #6]
  406298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40629c:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  40629e:	69e1      	ldr	r1, [r4, #28]
  4062a0:	6820      	ldr	r0, [r4, #0]
  4062a2:	4b1d      	ldr	r3, [pc, #116]	; (406318 <f_sync+0xb4>)
  4062a4:	4798      	blx	r3
			if (res == FR_OK) {
  4062a6:	4603      	mov	r3, r0
  4062a8:	b108      	cbz	r0, 4062ae <f_sync+0x4a>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  4062aa:	4618      	mov	r0, r3
  4062ac:	bd38      	pop	{r3, r4, r5, pc}
				dir = fp->dir_ptr;
  4062ae:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  4062b0:	7aeb      	ldrb	r3, [r5, #11]
  4062b2:	f043 0320 	orr.w	r3, r3, #32
  4062b6:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  4062b8:	68e3      	ldr	r3, [r4, #12]
  4062ba:	772b      	strb	r3, [r5, #28]
  4062bc:	89a3      	ldrh	r3, [r4, #12]
  4062be:	0a1b      	lsrs	r3, r3, #8
  4062c0:	776b      	strb	r3, [r5, #29]
  4062c2:	89e3      	ldrh	r3, [r4, #14]
  4062c4:	77ab      	strb	r3, [r5, #30]
  4062c6:	7be3      	ldrb	r3, [r4, #15]
  4062c8:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  4062ca:	6923      	ldr	r3, [r4, #16]
  4062cc:	76ab      	strb	r3, [r5, #26]
  4062ce:	8a23      	ldrh	r3, [r4, #16]
  4062d0:	0a1b      	lsrs	r3, r3, #8
  4062d2:	76eb      	strb	r3, [r5, #27]
  4062d4:	8a63      	ldrh	r3, [r4, #18]
  4062d6:	752b      	strb	r3, [r5, #20]
  4062d8:	8a63      	ldrh	r3, [r4, #18]
  4062da:	0a1b      	lsrs	r3, r3, #8
  4062dc:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  4062de:	4b0f      	ldr	r3, [pc, #60]	; (40631c <f_sync+0xb8>)
  4062e0:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  4062e2:	75a8      	strb	r0, [r5, #22]
  4062e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
  4062e8:	75eb      	strb	r3, [r5, #23]
  4062ea:	0c03      	lsrs	r3, r0, #16
  4062ec:	762b      	strb	r3, [r5, #24]
  4062ee:	0e00      	lsrs	r0, r0, #24
  4062f0:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  4062f2:	79a3      	ldrb	r3, [r4, #6]
  4062f4:	f023 0320 	bic.w	r3, r3, #32
  4062f8:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  4062fa:	6823      	ldr	r3, [r4, #0]
  4062fc:	2201      	movs	r2, #1
  4062fe:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  406300:	6820      	ldr	r0, [r4, #0]
  406302:	4b07      	ldr	r3, [pc, #28]	; (406320 <f_sync+0xbc>)
  406304:	4798      	blx	r3
  406306:	4603      	mov	r3, r0
  406308:	e7cf      	b.n	4062aa <f_sync+0x46>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  40630a:	2301      	movs	r3, #1
  40630c:	e7cd      	b.n	4062aa <f_sync+0x46>
  40630e:	bf00      	nop
  406310:	00404c3d 	.word	0x00404c3d
  406314:	00404ab9 	.word	0x00404ab9
  406318:	00405065 	.word	0x00405065
  40631c:	00404b99 	.word	0x00404b99
  406320:	004054f1 	.word	0x004054f1

00406324 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  406324:	b510      	push	{r4, lr}
  406326:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  406328:	4b03      	ldr	r3, [pc, #12]	; (406338 <f_close+0x14>)
  40632a:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  40632c:	4603      	mov	r3, r0
  40632e:	b908      	cbnz	r0, 406334 <f_close+0x10>
  406330:	2200      	movs	r2, #0
  406332:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  406334:	4618      	mov	r0, r3
  406336:	bd10      	pop	{r4, pc}
  406338:	00406265 	.word	0x00406265

0040633c <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
  40633c:	b510      	push	{r4, lr}
  40633e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
  406342:	4604      	mov	r4, r0
  406344:	9101      	str	r1, [sp, #4]
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
  406346:	2200      	movs	r2, #0
  406348:	4601      	mov	r1, r0
  40634a:	a801      	add	r0, sp, #4
  40634c:	4b18      	ldr	r3, [pc, #96]	; (4063b0 <f_opendir+0x74>)
  40634e:	4798      	blx	r3
	if (res == FR_OK) {
  406350:	4603      	mov	r3, r0
  406352:	b118      	cbz	r0, 40635c <f_opendir+0x20>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
  406354:	4618      	mov	r0, r3
  406356:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
  40635a:	bd10      	pop	{r4, pc}
		INIT_BUF(*dj);
  40635c:	ab83      	add	r3, sp, #524	; 0x20c
  40635e:	61a3      	str	r3, [r4, #24]
  406360:	ab03      	add	r3, sp, #12
  406362:	61e3      	str	r3, [r4, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
  406364:	9901      	ldr	r1, [sp, #4]
  406366:	4620      	mov	r0, r4
  406368:	4b12      	ldr	r3, [pc, #72]	; (4063b4 <f_opendir+0x78>)
  40636a:	4798      	blx	r3
		if (res == FR_OK) {						/* Follow completed */
  40636c:	4603      	mov	r3, r0
  40636e:	b9c0      	cbnz	r0, 4063a2 <f_opendir+0x66>
			if (dj->dir) {						/* It is not the root dir */
  406370:	6963      	ldr	r3, [r4, #20]
  406372:	b173      	cbz	r3, 406392 <f_opendir+0x56>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
  406374:	7ada      	ldrb	r2, [r3, #11]
  406376:	f012 0f10 	tst.w	r2, #16
  40637a:	d016      	beq.n	4063aa <f_opendir+0x6e>
					dj->sclust = LD_CLUST(dj->dir);
  40637c:	7d59      	ldrb	r1, [r3, #21]
  40637e:	7d1a      	ldrb	r2, [r3, #20]
  406380:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  406384:	7ed9      	ldrb	r1, [r3, #27]
  406386:	7e9b      	ldrb	r3, [r3, #26]
  406388:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  40638c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406390:	60a3      	str	r3, [r4, #8]
				dj->id = dj->fs->id;
  406392:	6823      	ldr	r3, [r4, #0]
  406394:	88db      	ldrh	r3, [r3, #6]
  406396:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
  406398:	2100      	movs	r1, #0
  40639a:	4620      	mov	r0, r4
  40639c:	4b06      	ldr	r3, [pc, #24]	; (4063b8 <f_opendir+0x7c>)
  40639e:	4798      	blx	r3
  4063a0:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
  4063a2:	2b04      	cmp	r3, #4
  4063a4:	bf08      	it	eq
  4063a6:	2305      	moveq	r3, #5
  4063a8:	e7d4      	b.n	406354 <f_opendir+0x18>
					res = FR_NO_PATH;
  4063aa:	2305      	movs	r3, #5
	LEAVE_FF(dj->fs, res);
  4063ac:	e7d2      	b.n	406354 <f_opendir+0x18>
  4063ae:	bf00      	nop
  4063b0:	00404d01 	.word	0x00404d01
  4063b4:	0040589d 	.word	0x0040589d
  4063b8:	004051dd 	.word	0x004051dd

004063bc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
  4063bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063c0:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  4063c4:	9001      	str	r0, [sp, #4]
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
  4063c6:	4b6e      	ldr	r3, [pc, #440]	; (406580 <f_mkdir+0x1c4>)
  4063c8:	4798      	blx	r3
  4063ca:	4607      	mov	r7, r0
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
  4063cc:	2201      	movs	r2, #1
  4063ce:	a985      	add	r1, sp, #532	; 0x214
  4063d0:	a801      	add	r0, sp, #4
  4063d2:	4b6c      	ldr	r3, [pc, #432]	; (406584 <f_mkdir+0x1c8>)
  4063d4:	4798      	blx	r3
	if (res == FR_OK) {
  4063d6:	4605      	mov	r5, r0
  4063d8:	b120      	cbz	r0, 4063e4 <f_mkdir+0x28>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
  4063da:	4628      	mov	r0, r5
  4063dc:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  4063e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_BUF(dj);
  4063e4:	ab82      	add	r3, sp, #520	; 0x208
  4063e6:	938b      	str	r3, [sp, #556]	; 0x22c
  4063e8:	ab02      	add	r3, sp, #8
  4063ea:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);			/* Follow the file path */
  4063ec:	9901      	ldr	r1, [sp, #4]
  4063ee:	a885      	add	r0, sp, #532	; 0x214
  4063f0:	4b65      	ldr	r3, [pc, #404]	; (406588 <f_mkdir+0x1cc>)
  4063f2:	4798      	blx	r3
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
  4063f4:	2800      	cmp	r0, #0
  4063f6:	f000 809a 	beq.w	40652e <f_mkdir+0x172>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
  4063fa:	2804      	cmp	r0, #4
  4063fc:	d001      	beq.n	406402 <f_mkdir+0x46>
		res = follow_path(&dj, path);			/* Follow the file path */
  4063fe:	4605      	mov	r5, r0
	LEAVE_FF(dj.fs, res);
  406400:	e7eb      	b.n	4063da <f_mkdir+0x1e>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
  406402:	2100      	movs	r1, #0
  406404:	9885      	ldr	r0, [sp, #532]	; 0x214
  406406:	4b61      	ldr	r3, [pc, #388]	; (40658c <f_mkdir+0x1d0>)
  406408:	4798      	blx	r3
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
  40640a:	4681      	mov	r9, r0
  40640c:	b140      	cbz	r0, 406420 <f_mkdir+0x64>
			if (dcl == 1) res = FR_INT_ERR;
  40640e:	2801      	cmp	r0, #1
  406410:	d101      	bne.n	406416 <f_mkdir+0x5a>
  406412:	2502      	movs	r5, #2
  406414:	e005      	b.n	406422 <f_mkdir+0x66>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
  406416:	f1b0 3fff 	cmp.w	r0, #4294967295
  40641a:	d102      	bne.n	406422 <f_mkdir+0x66>
  40641c:	2501      	movs	r5, #1
  40641e:	e08c      	b.n	40653a <f_mkdir+0x17e>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
  406420:	2507      	movs	r5, #7
			if (res == FR_OK)					/* Flush FAT */
  406422:	b125      	cbz	r5, 40642e <f_mkdir+0x72>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
  406424:	4649      	mov	r1, r9
  406426:	9885      	ldr	r0, [sp, #532]	; 0x214
  406428:	4b59      	ldr	r3, [pc, #356]	; (406590 <f_mkdir+0x1d4>)
  40642a:	4798      	blx	r3
  40642c:	e7d5      	b.n	4063da <f_mkdir+0x1e>
				res = move_window(dj.fs, 0);
  40642e:	2100      	movs	r1, #0
  406430:	9885      	ldr	r0, [sp, #532]	; 0x214
  406432:	4b58      	ldr	r3, [pc, #352]	; (406594 <f_mkdir+0x1d8>)
  406434:	4798      	blx	r3
			if (res == FR_OK) {					/* Initialize the new directory table */
  406436:	4605      	mov	r5, r0
  406438:	2800      	cmp	r0, #0
  40643a:	d1f3      	bne.n	406424 <f_mkdir+0x68>
				dsc = clust2sect(dj.fs, dcl);
  40643c:	9e85      	ldr	r6, [sp, #532]	; 0x214
  40643e:	4649      	mov	r1, r9
  406440:	4630      	mov	r0, r6
  406442:	4b55      	ldr	r3, [pc, #340]	; (406598 <f_mkdir+0x1dc>)
  406444:	4798      	blx	r3
  406446:	4605      	mov	r5, r0
				dir = dj.fs->win;
  406448:	f106 0330 	add.w	r3, r6, #48	; 0x30
  40644c:	9300      	str	r3, [sp, #0]
  40644e:	f506 720c 	add.w	r2, r6, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  406452:	461c      	mov	r4, r3
		*d++ = (BYTE)val;
  406454:	2300      	movs	r3, #0
  406456:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt--)
  40645a:	42a2      	cmp	r2, r4
  40645c:	d1fb      	bne.n	406456 <f_mkdir+0x9a>
  40645e:	f106 013b 	add.w	r1, r6, #59	; 0x3b
  406462:	9b00      	ldr	r3, [sp, #0]
		*d++ = (BYTE)val;
  406464:	2220      	movs	r2, #32
  406466:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  40646a:	428b      	cmp	r3, r1
  40646c:	d1fb      	bne.n	406466 <f_mkdir+0xaa>
				dir[DIR_Name] = '.';
  40646e:	f04f 082e 	mov.w	r8, #46	; 0x2e
  406472:	f886 8030 	strb.w	r8, [r6, #48]	; 0x30
				dir[DIR_Attr] = AM_DIR;
  406476:	2310      	movs	r3, #16
  406478:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
				ST_DWORD(dir+DIR_WrtTime, tim);
  40647c:	f886 7046 	strb.w	r7, [r6, #70]	; 0x46
  406480:	f3c7 2307 	ubfx	r3, r7, #8, #8
  406484:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
  406488:	0c3b      	lsrs	r3, r7, #16
  40648a:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
  40648e:	0e3b      	lsrs	r3, r7, #24
  406490:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
				ST_CLUST(dir, dcl);
  406494:	f886 904a 	strb.w	r9, [r6, #74]	; 0x4a
  406498:	f3c9 2307 	ubfx	r3, r9, #8, #8
  40649c:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
  4064a0:	ea4f 4319 	mov.w	r3, r9, lsr #16
  4064a4:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
  4064a8:	0a1b      	lsrs	r3, r3, #8
  4064aa:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
  4064ae:	2220      	movs	r2, #32
  4064b0:	9900      	ldr	r1, [sp, #0]
  4064b2:	f106 0050 	add.w	r0, r6, #80	; 0x50
  4064b6:	4b39      	ldr	r3, [pc, #228]	; (40659c <f_mkdir+0x1e0>)
  4064b8:	4798      	blx	r3
				dir[33] = '.'; pcl = dj.sclust;
  4064ba:	f886 8051 	strb.w	r8, [r6, #81]	; 0x51
  4064be:	9b87      	ldr	r3, [sp, #540]	; 0x21c
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  4064c0:	9a85      	ldr	r2, [sp, #532]	; 0x214
  4064c2:	7811      	ldrb	r1, [r2, #0]
  4064c4:	2903      	cmp	r1, #3
  4064c6:	d018      	beq.n	4064fa <f_mkdir+0x13e>
				ST_CLUST(dir+SZ_DIR, pcl);
  4064c8:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
  4064cc:	f3c3 2107 	ubfx	r1, r3, #8, #8
  4064d0:	f886 106b 	strb.w	r1, [r6, #107]	; 0x6b
  4064d4:	0c1b      	lsrs	r3, r3, #16
  4064d6:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
  4064da:	0a1b      	lsrs	r3, r3, #8
  4064dc:	f886 3065 	strb.w	r3, [r6, #101]	; 0x65
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
  4064e0:	7893      	ldrb	r3, [r2, #2]
  4064e2:	b333      	cbz	r3, 406532 <f_mkdir+0x176>
  4064e4:	f103 3aff 	add.w	sl, r3, #4294967295
  4064e8:	fa5f fa8a 	uxtb.w	sl, sl
  4064ec:	f10a 0a01 	add.w	sl, sl, #1
  4064f0:	44aa      	add	sl, r5
					dj.fs->wflag = 1;
  4064f2:	f04f 0b01 	mov.w	fp, #1
					res = move_window(dj.fs, 0);
  4064f6:	2600      	movs	r6, #0
  4064f8:	e007      	b.n	40650a <f_mkdir+0x14e>
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  4064fa:	6a51      	ldr	r1, [r2, #36]	; 0x24
					pcl = 0;
  4064fc:	428b      	cmp	r3, r1
  4064fe:	bf08      	it	eq
  406500:	2300      	moveq	r3, #0
  406502:	e7e1      	b.n	4064c8 <f_mkdir+0x10c>
					dj.fs->winsect = dsc++;
  406504:	4645      	mov	r5, r8
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
  406506:	45d0      	cmp	r8, sl
  406508:	d013      	beq.n	406532 <f_mkdir+0x176>
					dj.fs->winsect = dsc++;
  40650a:	9885      	ldr	r0, [sp, #532]	; 0x214
  40650c:	f105 0801 	add.w	r8, r5, #1
  406510:	62c5      	str	r5, [r0, #44]	; 0x2c
					dj.fs->wflag = 1;
  406512:	f880 b004 	strb.w	fp, [r0, #4]
					res = move_window(dj.fs, 0);
  406516:	4631      	mov	r1, r6
  406518:	4b1e      	ldr	r3, [pc, #120]	; (406594 <f_mkdir+0x1d8>)
  40651a:	4798      	blx	r3
					if (res != FR_OK) break;
  40651c:	4605      	mov	r5, r0
  40651e:	2800      	cmp	r0, #0
  406520:	d180      	bne.n	406424 <f_mkdir+0x68>
  406522:	9b00      	ldr	r3, [sp, #0]
		*d++ = (BYTE)val;
  406524:	f803 6b01 	strb.w	r6, [r3], #1
	while (cnt--)
  406528:	429c      	cmp	r4, r3
  40652a:	d1fb      	bne.n	406524 <f_mkdir+0x168>
  40652c:	e7ea      	b.n	406504 <f_mkdir+0x148>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
  40652e:	2508      	movs	r5, #8
  406530:	e753      	b.n	4063da <f_mkdir+0x1e>
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
  406532:	a885      	add	r0, sp, #532	; 0x214
  406534:	4b1a      	ldr	r3, [pc, #104]	; (4065a0 <f_mkdir+0x1e4>)
  406536:	4798      	blx	r3
  406538:	4605      	mov	r5, r0
			if (res != FR_OK) {
  40653a:	2d00      	cmp	r5, #0
  40653c:	f47f af72 	bne.w	406424 <f_mkdir+0x68>
				dir = dj.dir;
  406540:	9b8a      	ldr	r3, [sp, #552]	; 0x228
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
  406542:	2210      	movs	r2, #16
  406544:	72da      	strb	r2, [r3, #11]
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
  406546:	759f      	strb	r7, [r3, #22]
  406548:	f3c7 2207 	ubfx	r2, r7, #8, #8
  40654c:	75da      	strb	r2, [r3, #23]
  40654e:	0c3a      	lsrs	r2, r7, #16
  406550:	761a      	strb	r2, [r3, #24]
  406552:	0e3f      	lsrs	r7, r7, #24
  406554:	765f      	strb	r7, [r3, #25]
				ST_CLUST(dir, dcl);					/* Table start cluster */
  406556:	f883 901a 	strb.w	r9, [r3, #26]
  40655a:	f3c9 2207 	ubfx	r2, r9, #8, #8
  40655e:	76da      	strb	r2, [r3, #27]
  406560:	ea4f 4919 	mov.w	r9, r9, lsr #16
  406564:	f883 9014 	strb.w	r9, [r3, #20]
  406568:	ea4f 2919 	mov.w	r9, r9, lsr #8
  40656c:	f883 9015 	strb.w	r9, [r3, #21]
				dj.fs->wflag = 1;
  406570:	9885      	ldr	r0, [sp, #532]	; 0x214
  406572:	2301      	movs	r3, #1
  406574:	7103      	strb	r3, [r0, #4]
				res = sync(dj.fs);
  406576:	4b0b      	ldr	r3, [pc, #44]	; (4065a4 <f_mkdir+0x1e8>)
  406578:	4798      	blx	r3
  40657a:	4605      	mov	r5, r0
  40657c:	e72d      	b.n	4063da <f_mkdir+0x1e>
  40657e:	bf00      	nop
  406580:	00404b99 	.word	0x00404b99
  406584:	00404d01 	.word	0x00404d01
  406588:	0040589d 	.word	0x0040589d
  40658c:	004053b5 	.word	0x004053b5
  406590:	00405475 	.word	0x00405475
  406594:	00405065 	.word	0x00405065
  406598:	00404c05 	.word	0x00404c05
  40659c:	00404bf1 	.word	0x00404bf1
  4065a0:	00405bc1 	.word	0x00405bc1
  4065a4:	004054f1 	.word	0x004054f1

004065a8 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  4065a8:	b510      	push	{r4, lr}
  4065aa:	b082      	sub	sp, #8
  4065ac:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  4065ae:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  4065b2:	ab01      	add	r3, sp, #4
  4065b4:	2201      	movs	r2, #1
  4065b6:	4669      	mov	r1, sp
  4065b8:	4620      	mov	r0, r4
  4065ba:	4c05      	ldr	r4, [pc, #20]	; (4065d0 <f_putc+0x28>)
  4065bc:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  4065be:	9b01      	ldr	r3, [sp, #4]
  4065c0:	2b01      	cmp	r3, #1
}
  4065c2:	bf0c      	ite	eq
  4065c4:	2001      	moveq	r0, #1
  4065c6:	f04f 30ff 	movne.w	r0, #4294967295
  4065ca:	b002      	add	sp, #8
  4065cc:	bd10      	pop	{r4, pc}
  4065ce:	bf00      	nop
  4065d0:	0040605d 	.word	0x0040605d

004065d4 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  4065d4:	287f      	cmp	r0, #127	; 0x7f
  4065d6:	d919      	bls.n	40660c <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  4065d8:	b971      	cbnz	r1, 4065f8 <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  4065da:	28c7      	cmp	r0, #199	; 0xc7
  4065dc:	d013      	beq.n	406606 <ff_convert+0x32>
  4065de:	4a0c      	ldr	r2, [pc, #48]	; (406610 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  4065e0:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  4065e2:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  4065e6:	4281      	cmp	r1, r0
  4065e8:	d003      	beq.n	4065f2 <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  4065ea:	3301      	adds	r3, #1
  4065ec:	b29b      	uxth	r3, r3
  4065ee:	2b80      	cmp	r3, #128	; 0x80
  4065f0:	d1f7      	bne.n	4065e2 <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  4065f2:	3380      	adds	r3, #128	; 0x80
  4065f4:	b2d8      	uxtb	r0, r3
  4065f6:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4065f8:	28ff      	cmp	r0, #255	; 0xff
  4065fa:	d806      	bhi.n	40660a <ff_convert+0x36>
  4065fc:	3880      	subs	r0, #128	; 0x80
  4065fe:	4b04      	ldr	r3, [pc, #16]	; (406610 <ff_convert+0x3c>)
  406600:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  406604:	4770      	bx	lr
				if (src == Tbl[c]) break;
  406606:	2300      	movs	r3, #0
  406608:	e7f3      	b.n	4065f2 <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40660a:	2000      	movs	r0, #0
		}
	}

	return c;
}
  40660c:	4770      	bx	lr
  40660e:	bf00      	nop
  406610:	0040e6b0 	.word	0x0040e6b0

00406614 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  406614:	2861      	cmp	r0, #97	; 0x61
  406616:	d00e      	beq.n	406636 <ff_wtoupper+0x22>
  406618:	4908      	ldr	r1, [pc, #32]	; (40663c <ff_wtoupper+0x28>)
  40661a:	2200      	movs	r2, #0
  40661c:	3201      	adds	r2, #1
  40661e:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  406622:	4283      	cmp	r3, r0
  406624:	d001      	beq.n	40662a <ff_wtoupper+0x16>
  406626:	2b00      	cmp	r3, #0
  406628:	d1f8      	bne.n	40661c <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  40662a:	b11b      	cbz	r3, 406634 <ff_wtoupper+0x20>
  40662c:	4b04      	ldr	r3, [pc, #16]	; (406640 <ff_wtoupper+0x2c>)
  40662e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  406632:	4770      	bx	lr
  406634:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  406636:	2200      	movs	r2, #0
  406638:	e7f8      	b.n	40662c <ff_wtoupper+0x18>
  40663a:	bf00      	nop
  40663c:	0040e7b0 	.word	0x0040e7b0
  406640:	0040e990 	.word	0x0040e990

00406644 <_isi_AllocateFBD>:
***********************************************************************/
static void _isi_AllocateFBD(void)
{
uint32_t i;
for(i = 0; i < ISI_MAX_PREV_BUFFER; i++) {
preBufDescList[i].Current = (uint32_t)SRAM_BASE;
  406644:	4b03      	ldr	r3, [pc, #12]	; (406654 <_isi_AllocateFBD+0x10>)
  406646:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
  40664a:	601a      	str	r2, [r3, #0]
preBufDescList[i].Control = ISI_DMA_C_CTRL_C_FETCH;
  40664c:	2201      	movs	r2, #1
  40664e:	605a      	str	r2, [r3, #4]
preBufDescList[i].Next = (uint32_t)&preBufDescList[0];
  406650:	609b      	str	r3, [r3, #8]
  406652:	4770      	bx	lr
  406654:	20400f80 	.word	0x20400f80

00406658 <hex1ToAscii>:
 /***********************************************************************/
 /*  hex1ToAscii nibble to 2-byte Ascii
 ***********************************************************************/
 static unsigned int hex1ToAscii(int hex){
   int a;
   hex &= 0x000F;
  406658:	f000 000f 	and.w	r0, r0, #15
     switch (hex) {
  40665c:	280f      	cmp	r0, #15
  40665e:	d80a      	bhi.n	406676 <hex1ToAscii+0x1e>
  406660:	e8df f000 	tbb	[pc, r0]
  406664:	0f0d0b08 	.word	0x0f0d0b08
  406668:	17151311 	.word	0x17151311
  40666c:	1f1d1b19 	.word	0x1f1d1b19
  406670:	27252321 	.word	0x27252321
       case 0: a = 0x30;
  406674:	2330      	movs	r3, #48	; 0x30
       break;
       case 15: a = 0x46;
       break;
     };
    return a;
 }
  406676:	4618      	mov	r0, r3
  406678:	4770      	bx	lr
       case 1: a = 0x31;
  40667a:	2331      	movs	r3, #49	; 0x31
       break;
  40667c:	e7fb      	b.n	406676 <hex1ToAscii+0x1e>
       case 2: a = 0x32;
  40667e:	2332      	movs	r3, #50	; 0x32
       break;
  406680:	e7f9      	b.n	406676 <hex1ToAscii+0x1e>
       case 3: a = 0x33;
  406682:	2333      	movs	r3, #51	; 0x33
       break;
  406684:	e7f7      	b.n	406676 <hex1ToAscii+0x1e>
       case 4: a = 0x34;
  406686:	2334      	movs	r3, #52	; 0x34
       break;
  406688:	e7f5      	b.n	406676 <hex1ToAscii+0x1e>
       case 5: a = 0x35;
  40668a:	2335      	movs	r3, #53	; 0x35
       break;
  40668c:	e7f3      	b.n	406676 <hex1ToAscii+0x1e>
       case 6: a = 0x36;
  40668e:	2336      	movs	r3, #54	; 0x36
       break;
  406690:	e7f1      	b.n	406676 <hex1ToAscii+0x1e>
       case 7: a = 0x37;
  406692:	2337      	movs	r3, #55	; 0x37
       break;
  406694:	e7ef      	b.n	406676 <hex1ToAscii+0x1e>
       case 8: a = 0x38;
  406696:	2338      	movs	r3, #56	; 0x38
       break;
  406698:	e7ed      	b.n	406676 <hex1ToAscii+0x1e>
       case 9: a = 0x39;
  40669a:	2339      	movs	r3, #57	; 0x39
       break;
  40669c:	e7eb      	b.n	406676 <hex1ToAscii+0x1e>
       case 10: a = 0x41;
  40669e:	2341      	movs	r3, #65	; 0x41
       break;
  4066a0:	e7e9      	b.n	406676 <hex1ToAscii+0x1e>
       case 11: a = 0x42;
  4066a2:	2342      	movs	r3, #66	; 0x42
       break;
  4066a4:	e7e7      	b.n	406676 <hex1ToAscii+0x1e>
       case 12: a = 0x43;
  4066a6:	2343      	movs	r3, #67	; 0x43
       break;
  4066a8:	e7e5      	b.n	406676 <hex1ToAscii+0x1e>
       case 13: a = 0x44;
  4066aa:	2344      	movs	r3, #68	; 0x44
       break;
  4066ac:	e7e3      	b.n	406676 <hex1ToAscii+0x1e>
       case 14: a = 0x45;
  4066ae:	2345      	movs	r3, #69	; 0x45
       break;
  4066b0:	e7e1      	b.n	406676 <hex1ToAscii+0x1e>
       case 15: a = 0x46;
  4066b2:	2346      	movs	r3, #70	; 0x46
       break;
  4066b4:	e7df      	b.n	406676 <hex1ToAscii+0x1e>

004066b6 <bcdToHex>:
/***********************************************************************/
/*  Converts BCD to Hex.
***********************************************************************/
char bcdToHex (char toConvert){
char inHex;
inHex = ((toConvert>>4)*10)+(toConvert%16);
  4066b6:	0903      	lsrs	r3, r0, #4
  4066b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4066bc:	f000 000f 	and.w	r0, r0, #15
  4066c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
return inHex;
}
  4066c4:	b2c0      	uxtb	r0, r0
  4066c6:	4770      	bx	lr

004066c8 <hexToBCD>:
/***********************************************************************/
/*  Converts Hex to BCD. Works up to 99,999.
***********************************************************************/
static int hexToBCD (int toConvert){
  4066c8:	b410      	push	{r4}
	char tenThous=0;
	char thousands=0;
	char hundreds=0;
	char tens=0;
	if(toConvert>89999){tenThous=9;toConvert-=90000;}
  4066ca:	4b8c      	ldr	r3, [pc, #560]	; (4068fc <hexToBCD+0x234>)
  4066cc:	4298      	cmp	r0, r3
  4066ce:	dd31      	ble.n	406734 <hexToBCD+0x6c>
  4066d0:	f5a0 30af 	sub.w	r0, r0, #89600	; 0x15e00
  4066d4:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
  4066d8:	2409      	movs	r4, #9
	else if(toConvert>39999){tenThous=4;toConvert-=40000;}
	else if(toConvert>29999){tenThous=3;toConvert-=30000;}
	else if(toConvert>19999){tenThous=2;toConvert-=20000;}
	else if(toConvert>9999){tenThous=1;toConvert-=10000;}

	if(toConvert>8999){thousands=9;toConvert-=9000;}
  4066da:	f242 3127 	movw	r1, #8999	; 0x2327
  4066de:	4288      	cmp	r0, r1
  4066e0:	dd71      	ble.n	4067c6 <hexToBCD+0xfe>
  4066e2:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
  4066e6:	3828      	subs	r0, #40	; 0x28
  4066e8:	2209      	movs	r2, #9
	else if(toConvert>3999){thousands=4;toConvert-=4000;}
	else if(toConvert>2999){thousands=3;toConvert-=3000;}
	else if(toConvert>1999){thousands=2;toConvert-=2000;}
	else if(toConvert>999){thousands=1;toConvert-=1000;}

	if(toConvert>899){hundreds=9;toConvert-=900;}
  4066ea:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
  4066ee:	f2c0 80ab 	blt.w	406848 <hexToBCD+0x180>
  4066f2:	f5a0 7061 	sub.w	r0, r0, #900	; 0x384
  4066f6:	2309      	movs	r3, #9
	else if(toConvert>399){hundreds=4;toConvert-=400;}
	else if(toConvert>299){hundreds=3;toConvert-=300;}
	else if(toConvert>199){hundreds=2;toConvert-=200;}
	else if(toConvert>99){hundreds=1;toConvert-=100;}

	if(toConvert>89){tens=9;toConvert-=90;}
  4066f8:	2859      	cmp	r0, #89	; 0x59
  4066fa:	f300 80db 	bgt.w	4068b4 <hexToBCD+0x1ec>
	else if(toConvert>79){tens=8;toConvert-=80;}
  4066fe:	284f      	cmp	r0, #79	; 0x4f
  406700:	f300 80e5 	bgt.w	4068ce <hexToBCD+0x206>
	else if(toConvert>69){tens=7;toConvert-=70;}
  406704:	2845      	cmp	r0, #69	; 0x45
  406706:	f300 80e5 	bgt.w	4068d4 <hexToBCD+0x20c>
	else if(toConvert>59){tens=6;toConvert-=60;}
  40670a:	283b      	cmp	r0, #59	; 0x3b
  40670c:	f300 80e5 	bgt.w	4068da <hexToBCD+0x212>
	else if(toConvert>49){tens=5;toConvert-=50;}
  406710:	2831      	cmp	r0, #49	; 0x31
  406712:	f300 80e5 	bgt.w	4068e0 <hexToBCD+0x218>
	else if(toConvert>39){tens=4;toConvert-=40;}
  406716:	2827      	cmp	r0, #39	; 0x27
  406718:	f300 80e5 	bgt.w	4068e6 <hexToBCD+0x21e>
	else if(toConvert>29){tens=3;toConvert-=30;}
  40671c:	281d      	cmp	r0, #29
  40671e:	f300 80e5 	bgt.w	4068ec <hexToBCD+0x224>
	else if(toConvert>19){tens=2;toConvert-=20;}
  406722:	2813      	cmp	r0, #19
  406724:	f300 80e5 	bgt.w	4068f2 <hexToBCD+0x22a>
	else if(toConvert>9){tens=1;toConvert-=10;}
  406728:	2809      	cmp	r0, #9
  40672a:	f340 80e5 	ble.w	4068f8 <hexToBCD+0x230>
  40672e:	380a      	subs	r0, #10
  406730:	2101      	movs	r1, #1
  406732:	e0c1      	b.n	4068b8 <hexToBCD+0x1f0>
	else if(toConvert>79999){tenThous=8;toConvert-=80000;}
  406734:	4b72      	ldr	r3, [pc, #456]	; (406900 <hexToBCD+0x238>)
  406736:	4298      	cmp	r0, r3
  406738:	dd04      	ble.n	406744 <hexToBCD+0x7c>
  40673a:	f5a0 309c 	sub.w	r0, r0, #79872	; 0x13800
  40673e:	3880      	subs	r0, #128	; 0x80
  406740:	2408      	movs	r4, #8
  406742:	e7ca      	b.n	4066da <hexToBCD+0x12>
	else if(toConvert>69999){tenThous=7;toConvert-=70000;}
  406744:	4b6f      	ldr	r3, [pc, #444]	; (406904 <hexToBCD+0x23c>)
  406746:	4298      	cmp	r0, r3
  406748:	dd05      	ble.n	406756 <hexToBCD+0x8e>
  40674a:	f5a0 3088 	sub.w	r0, r0, #69632	; 0x11000
  40674e:	f5a0 70b8 	sub.w	r0, r0, #368	; 0x170
  406752:	2407      	movs	r4, #7
  406754:	e7c1      	b.n	4066da <hexToBCD+0x12>
	else if(toConvert>59999){tenThous=6;toConvert-=60000;}
  406756:	f64e 235f 	movw	r3, #59999	; 0xea5f
  40675a:	4298      	cmp	r0, r3
  40675c:	dd04      	ble.n	406768 <hexToBCD+0xa0>
  40675e:	f5a0 406a 	sub.w	r0, r0, #59904	; 0xea00
  406762:	3860      	subs	r0, #96	; 0x60
  406764:	2406      	movs	r4, #6
  406766:	e7b8      	b.n	4066da <hexToBCD+0x12>
	else if(toConvert>49999){tenThous=5;toConvert-=50000;}
  406768:	f24c 334f 	movw	r3, #49999	; 0xc34f
  40676c:	4298      	cmp	r0, r3
  40676e:	dd04      	ble.n	40677a <hexToBCD+0xb2>
  406770:	f5a0 4043 	sub.w	r0, r0, #49920	; 0xc300
  406774:	3850      	subs	r0, #80	; 0x50
  406776:	2405      	movs	r4, #5
  406778:	e7af      	b.n	4066da <hexToBCD+0x12>
	else if(toConvert>39999){tenThous=4;toConvert-=40000;}
  40677a:	f649 433f 	movw	r3, #39999	; 0x9c3f
  40677e:	4298      	cmp	r0, r3
  406780:	dd04      	ble.n	40678c <hexToBCD+0xc4>
  406782:	f5a0 401c 	sub.w	r0, r0, #39936	; 0x9c00
  406786:	3840      	subs	r0, #64	; 0x40
  406788:	2404      	movs	r4, #4
  40678a:	e7a6      	b.n	4066da <hexToBCD+0x12>
	else if(toConvert>29999){tenThous=3;toConvert-=30000;}
  40678c:	f247 532f 	movw	r3, #29999	; 0x752f
  406790:	4298      	cmp	r0, r3
  406792:	dd04      	ble.n	40679e <hexToBCD+0xd6>
  406794:	f5a0 40ea 	sub.w	r0, r0, #29952	; 0x7500
  406798:	3830      	subs	r0, #48	; 0x30
  40679a:	2403      	movs	r4, #3
  40679c:	e79d      	b.n	4066da <hexToBCD+0x12>
	else if(toConvert>19999){tenThous=2;toConvert-=20000;}
  40679e:	f644 631f 	movw	r3, #19999	; 0x4e1f
  4067a2:	4298      	cmp	r0, r3
  4067a4:	dd04      	ble.n	4067b0 <hexToBCD+0xe8>
  4067a6:	f5a0 409c 	sub.w	r0, r0, #19968	; 0x4e00
  4067aa:	3820      	subs	r0, #32
  4067ac:	2402      	movs	r4, #2
  4067ae:	e794      	b.n	4066da <hexToBCD+0x12>
	else if(toConvert>9999){tenThous=1;toConvert-=10000;}
  4067b0:	f242 730f 	movw	r3, #9999	; 0x270f
  4067b4:	4298      	cmp	r0, r3
  4067b6:	dd04      	ble.n	4067c2 <hexToBCD+0xfa>
  4067b8:	f5a0 501c 	sub.w	r0, r0, #9984	; 0x2700
  4067bc:	3810      	subs	r0, #16
  4067be:	2401      	movs	r4, #1
  4067c0:	e78b      	b.n	4066da <hexToBCD+0x12>
	char tenThous=0;
  4067c2:	2400      	movs	r4, #0
  4067c4:	e789      	b.n	4066da <hexToBCD+0x12>
	else if(toConvert>7999){thousands=8;toConvert-=8000;}
  4067c6:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
  4067ca:	db03      	blt.n	4067d4 <hexToBCD+0x10c>
  4067cc:	f5a0 50fa 	sub.w	r0, r0, #8000	; 0x1f40
  4067d0:	2208      	movs	r2, #8
  4067d2:	e78a      	b.n	4066ea <hexToBCD+0x22>
	else if(toConvert>6999){thousands=7;toConvert-=7000;}
  4067d4:	f641 3357 	movw	r3, #6999	; 0x1b57
  4067d8:	4298      	cmp	r0, r3
  4067da:	dd04      	ble.n	4067e6 <hexToBCD+0x11e>
  4067dc:	f5a0 50da 	sub.w	r0, r0, #6976	; 0x1b40
  4067e0:	3818      	subs	r0, #24
  4067e2:	2207      	movs	r2, #7
  4067e4:	e781      	b.n	4066ea <hexToBCD+0x22>
	else if(toConvert>5999){thousands=6;toConvert-=6000;}
  4067e6:	f241 736f 	movw	r3, #5999	; 0x176f
  4067ea:	4298      	cmp	r0, r3
  4067ec:	dd04      	ble.n	4067f8 <hexToBCD+0x130>
  4067ee:	f5a0 50bb 	sub.w	r0, r0, #5984	; 0x1760
  4067f2:	3810      	subs	r0, #16
  4067f4:	2206      	movs	r2, #6
  4067f6:	e778      	b.n	4066ea <hexToBCD+0x22>
	else if(toConvert>4999){thousands=5;toConvert-=5000;}
  4067f8:	f241 3387 	movw	r3, #4999	; 0x1387
  4067fc:	4298      	cmp	r0, r3
  4067fe:	dd04      	ble.n	40680a <hexToBCD+0x142>
  406800:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
  406804:	3808      	subs	r0, #8
  406806:	2205      	movs	r2, #5
  406808:	e76f      	b.n	4066ea <hexToBCD+0x22>
	else if(toConvert>3999){thousands=4;toConvert-=4000;}
  40680a:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
  40680e:	db03      	blt.n	406818 <hexToBCD+0x150>
  406810:	f5a0 607a 	sub.w	r0, r0, #4000	; 0xfa0
  406814:	2204      	movs	r2, #4
  406816:	e768      	b.n	4066ea <hexToBCD+0x22>
	else if(toConvert>2999){thousands=3;toConvert-=3000;}
  406818:	f640 33b7 	movw	r3, #2999	; 0xbb7
  40681c:	4298      	cmp	r0, r3
  40681e:	dd03      	ble.n	406828 <hexToBCD+0x160>
  406820:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
  406824:	2203      	movs	r2, #3
  406826:	e760      	b.n	4066ea <hexToBCD+0x22>
	else if(toConvert>1999){thousands=2;toConvert-=2000;}
  406828:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
  40682c:	db03      	blt.n	406836 <hexToBCD+0x16e>
  40682e:	f5a0 60fa 	sub.w	r0, r0, #2000	; 0x7d0
  406832:	2202      	movs	r2, #2
  406834:	e759      	b.n	4066ea <hexToBCD+0x22>
	else if(toConvert>999){thousands=1;toConvert-=1000;}
  406836:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  40683a:	db03      	blt.n	406844 <hexToBCD+0x17c>
  40683c:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
  406840:	2201      	movs	r2, #1
  406842:	e752      	b.n	4066ea <hexToBCD+0x22>
	char thousands=0;
  406844:	2200      	movs	r2, #0
  406846:	e750      	b.n	4066ea <hexToBCD+0x22>
	else if(toConvert>799){hundreds=8;toConvert-=800;}
  406848:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
  40684c:	db03      	blt.n	406856 <hexToBCD+0x18e>
  40684e:	f5a0 7048 	sub.w	r0, r0, #800	; 0x320
  406852:	2308      	movs	r3, #8
  406854:	e750      	b.n	4066f8 <hexToBCD+0x30>
	else if(toConvert>699){hundreds=7;toConvert-=700;}
  406856:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
  40685a:	db03      	blt.n	406864 <hexToBCD+0x19c>
  40685c:	f5a0 702f 	sub.w	r0, r0, #700	; 0x2bc
  406860:	2307      	movs	r3, #7
  406862:	e749      	b.n	4066f8 <hexToBCD+0x30>
	else if(toConvert>599){hundreds=6;toConvert-=600;}
  406864:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
  406868:	db03      	blt.n	406872 <hexToBCD+0x1aa>
  40686a:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
  40686e:	2306      	movs	r3, #6
  406870:	e742      	b.n	4066f8 <hexToBCD+0x30>
	else if(toConvert>499){hundreds=5;toConvert-=500;}
  406872:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  406876:	db03      	blt.n	406880 <hexToBCD+0x1b8>
  406878:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
  40687c:	2305      	movs	r3, #5
  40687e:	e73b      	b.n	4066f8 <hexToBCD+0x30>
	else if(toConvert>399){hundreds=4;toConvert-=400;}
  406880:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
  406884:	db03      	blt.n	40688e <hexToBCD+0x1c6>
  406886:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
  40688a:	2304      	movs	r3, #4
  40688c:	e734      	b.n	4066f8 <hexToBCD+0x30>
	else if(toConvert>299){hundreds=3;toConvert-=300;}
  40688e:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
  406892:	db03      	blt.n	40689c <hexToBCD+0x1d4>
  406894:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
  406898:	2303      	movs	r3, #3
  40689a:	e72d      	b.n	4066f8 <hexToBCD+0x30>
	else if(toConvert>199){hundreds=2;toConvert-=200;}
  40689c:	28c7      	cmp	r0, #199	; 0xc7
  40689e:	dd02      	ble.n	4068a6 <hexToBCD+0x1de>
  4068a0:	38c8      	subs	r0, #200	; 0xc8
  4068a2:	2302      	movs	r3, #2
  4068a4:	e728      	b.n	4066f8 <hexToBCD+0x30>
	else if(toConvert>99){hundreds=1;toConvert-=100;}
  4068a6:	2863      	cmp	r0, #99	; 0x63
  4068a8:	dd02      	ble.n	4068b0 <hexToBCD+0x1e8>
  4068aa:	3864      	subs	r0, #100	; 0x64
  4068ac:	2301      	movs	r3, #1
  4068ae:	e723      	b.n	4066f8 <hexToBCD+0x30>
	char hundreds=0;
  4068b0:	2300      	movs	r3, #0
  4068b2:	e721      	b.n	4066f8 <hexToBCD+0x30>
	if(toConvert>89){tens=9;toConvert-=90;}
  4068b4:	385a      	subs	r0, #90	; 0x5a
  4068b6:	2109      	movs	r1, #9

	return (tenThous*65536)+(thousands*4096)+(hundreds*256)+(tens*16)+toConvert;
  4068b8:	eb02 1204 	add.w	r2, r2, r4, lsl #4
  4068bc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  4068c0:	eb01 1303 	add.w	r3, r1, r3, lsl #4
}
  4068c4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  4068c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4068cc:	4770      	bx	lr
	else if(toConvert>79){tens=8;toConvert-=80;}
  4068ce:	3850      	subs	r0, #80	; 0x50
  4068d0:	2108      	movs	r1, #8
  4068d2:	e7f1      	b.n	4068b8 <hexToBCD+0x1f0>
	else if(toConvert>69){tens=7;toConvert-=70;}
  4068d4:	3846      	subs	r0, #70	; 0x46
  4068d6:	2107      	movs	r1, #7
  4068d8:	e7ee      	b.n	4068b8 <hexToBCD+0x1f0>
	else if(toConvert>59){tens=6;toConvert-=60;}
  4068da:	383c      	subs	r0, #60	; 0x3c
  4068dc:	2106      	movs	r1, #6
  4068de:	e7eb      	b.n	4068b8 <hexToBCD+0x1f0>
	else if(toConvert>49){tens=5;toConvert-=50;}
  4068e0:	3832      	subs	r0, #50	; 0x32
  4068e2:	2105      	movs	r1, #5
  4068e4:	e7e8      	b.n	4068b8 <hexToBCD+0x1f0>
	else if(toConvert>39){tens=4;toConvert-=40;}
  4068e6:	3828      	subs	r0, #40	; 0x28
  4068e8:	2104      	movs	r1, #4
  4068ea:	e7e5      	b.n	4068b8 <hexToBCD+0x1f0>
	else if(toConvert>29){tens=3;toConvert-=30;}
  4068ec:	381e      	subs	r0, #30
  4068ee:	2103      	movs	r1, #3
  4068f0:	e7e2      	b.n	4068b8 <hexToBCD+0x1f0>
	else if(toConvert>19){tens=2;toConvert-=20;}
  4068f2:	3814      	subs	r0, #20
  4068f4:	2102      	movs	r1, #2
  4068f6:	e7df      	b.n	4068b8 <hexToBCD+0x1f0>
	char tens=0;
  4068f8:	2100      	movs	r1, #0
  4068fa:	e7dd      	b.n	4068b8 <hexToBCD+0x1f0>
  4068fc:	00015f8f 	.word	0x00015f8f
  406900:	0001387f 	.word	0x0001387f
  406904:	0001116f 	.word	0x0001116f

00406908 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  406908:	b5f0      	push	{r4, r5, r6, r7, lr}
  40690a:	b083      	sub	sp, #12
  40690c:	4605      	mov	r5, r0
  40690e:	460c      	mov	r4, r1
	uint32_t val = 0;
  406910:	2300      	movs	r3, #0
  406912:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406914:	4b2a      	ldr	r3, [pc, #168]	; (4069c0 <usart_serial_getchar+0xb8>)
  406916:	4298      	cmp	r0, r3
  406918:	d013      	beq.n	406942 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40691a:	4b2a      	ldr	r3, [pc, #168]	; (4069c4 <usart_serial_getchar+0xbc>)
  40691c:	4298      	cmp	r0, r3
  40691e:	d018      	beq.n	406952 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406920:	4b29      	ldr	r3, [pc, #164]	; (4069c8 <usart_serial_getchar+0xc0>)
  406922:	4298      	cmp	r0, r3
  406924:	d01d      	beq.n	406962 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  406926:	4b29      	ldr	r3, [pc, #164]	; (4069cc <usart_serial_getchar+0xc4>)
  406928:	429d      	cmp	r5, r3
  40692a:	d022      	beq.n	406972 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40692c:	4b28      	ldr	r3, [pc, #160]	; (4069d0 <usart_serial_getchar+0xc8>)
  40692e:	429d      	cmp	r5, r3
  406930:	d027      	beq.n	406982 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  406932:	4b28      	ldr	r3, [pc, #160]	; (4069d4 <usart_serial_getchar+0xcc>)
  406934:	429d      	cmp	r5, r3
  406936:	d02e      	beq.n	406996 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406938:	4b27      	ldr	r3, [pc, #156]	; (4069d8 <usart_serial_getchar+0xd0>)
  40693a:	429d      	cmp	r5, r3
  40693c:	d035      	beq.n	4069aa <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40693e:	b003      	add	sp, #12
  406940:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  406942:	461f      	mov	r7, r3
  406944:	4e25      	ldr	r6, [pc, #148]	; (4069dc <usart_serial_getchar+0xd4>)
  406946:	4621      	mov	r1, r4
  406948:	4638      	mov	r0, r7
  40694a:	47b0      	blx	r6
  40694c:	2800      	cmp	r0, #0
  40694e:	d1fa      	bne.n	406946 <usart_serial_getchar+0x3e>
  406950:	e7e9      	b.n	406926 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  406952:	461f      	mov	r7, r3
  406954:	4e21      	ldr	r6, [pc, #132]	; (4069dc <usart_serial_getchar+0xd4>)
  406956:	4621      	mov	r1, r4
  406958:	4638      	mov	r0, r7
  40695a:	47b0      	blx	r6
  40695c:	2800      	cmp	r0, #0
  40695e:	d1fa      	bne.n	406956 <usart_serial_getchar+0x4e>
  406960:	e7e4      	b.n	40692c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  406962:	461f      	mov	r7, r3
  406964:	4e1d      	ldr	r6, [pc, #116]	; (4069dc <usart_serial_getchar+0xd4>)
  406966:	4621      	mov	r1, r4
  406968:	4638      	mov	r0, r7
  40696a:	47b0      	blx	r6
  40696c:	2800      	cmp	r0, #0
  40696e:	d1fa      	bne.n	406966 <usart_serial_getchar+0x5e>
  406970:	e7df      	b.n	406932 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  406972:	461f      	mov	r7, r3
  406974:	4e19      	ldr	r6, [pc, #100]	; (4069dc <usart_serial_getchar+0xd4>)
  406976:	4621      	mov	r1, r4
  406978:	4638      	mov	r0, r7
  40697a:	47b0      	blx	r6
  40697c:	2800      	cmp	r0, #0
  40697e:	d1fa      	bne.n	406976 <usart_serial_getchar+0x6e>
  406980:	e7da      	b.n	406938 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  406982:	461e      	mov	r6, r3
  406984:	4d16      	ldr	r5, [pc, #88]	; (4069e0 <usart_serial_getchar+0xd8>)
  406986:	a901      	add	r1, sp, #4
  406988:	4630      	mov	r0, r6
  40698a:	47a8      	blx	r5
  40698c:	2800      	cmp	r0, #0
  40698e:	d1fa      	bne.n	406986 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  406990:	9b01      	ldr	r3, [sp, #4]
  406992:	7023      	strb	r3, [r4, #0]
  406994:	e7d3      	b.n	40693e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  406996:	461e      	mov	r6, r3
  406998:	4d11      	ldr	r5, [pc, #68]	; (4069e0 <usart_serial_getchar+0xd8>)
  40699a:	a901      	add	r1, sp, #4
  40699c:	4630      	mov	r0, r6
  40699e:	47a8      	blx	r5
  4069a0:	2800      	cmp	r0, #0
  4069a2:	d1fa      	bne.n	40699a <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4069a4:	9b01      	ldr	r3, [sp, #4]
  4069a6:	7023      	strb	r3, [r4, #0]
  4069a8:	e7c9      	b.n	40693e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4069aa:	461e      	mov	r6, r3
  4069ac:	4d0c      	ldr	r5, [pc, #48]	; (4069e0 <usart_serial_getchar+0xd8>)
  4069ae:	a901      	add	r1, sp, #4
  4069b0:	4630      	mov	r0, r6
  4069b2:	47a8      	blx	r5
  4069b4:	2800      	cmp	r0, #0
  4069b6:	d1fa      	bne.n	4069ae <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4069b8:	9b01      	ldr	r3, [sp, #4]
  4069ba:	7023      	strb	r3, [r4, #0]
}
  4069bc:	e7bf      	b.n	40693e <usart_serial_getchar+0x36>
  4069be:	bf00      	nop
  4069c0:	400e0800 	.word	0x400e0800
  4069c4:	400e0a00 	.word	0x400e0a00
  4069c8:	400e1a00 	.word	0x400e1a00
  4069cc:	400e1c00 	.word	0x400e1c00
  4069d0:	40024000 	.word	0x40024000
  4069d4:	40028000 	.word	0x40028000
  4069d8:	4002c000 	.word	0x4002c000
  4069dc:	004028fd 	.word	0x004028fd
  4069e0:	004026f3 	.word	0x004026f3

004069e4 <usart_serial_putchar>:
{
  4069e4:	b570      	push	{r4, r5, r6, lr}
  4069e6:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4069e8:	4b2a      	ldr	r3, [pc, #168]	; (406a94 <usart_serial_putchar+0xb0>)
  4069ea:	4298      	cmp	r0, r3
  4069ec:	d013      	beq.n	406a16 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4069ee:	4b2a      	ldr	r3, [pc, #168]	; (406a98 <usart_serial_putchar+0xb4>)
  4069f0:	4298      	cmp	r0, r3
  4069f2:	d019      	beq.n	406a28 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4069f4:	4b29      	ldr	r3, [pc, #164]	; (406a9c <usart_serial_putchar+0xb8>)
  4069f6:	4298      	cmp	r0, r3
  4069f8:	d01f      	beq.n	406a3a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4069fa:	4b29      	ldr	r3, [pc, #164]	; (406aa0 <usart_serial_putchar+0xbc>)
  4069fc:	4298      	cmp	r0, r3
  4069fe:	d025      	beq.n	406a4c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  406a00:	4b28      	ldr	r3, [pc, #160]	; (406aa4 <usart_serial_putchar+0xc0>)
  406a02:	4298      	cmp	r0, r3
  406a04:	d02b      	beq.n	406a5e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  406a06:	4b28      	ldr	r3, [pc, #160]	; (406aa8 <usart_serial_putchar+0xc4>)
  406a08:	4298      	cmp	r0, r3
  406a0a:	d031      	beq.n	406a70 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  406a0c:	4b27      	ldr	r3, [pc, #156]	; (406aac <usart_serial_putchar+0xc8>)
  406a0e:	4298      	cmp	r0, r3
  406a10:	d037      	beq.n	406a82 <usart_serial_putchar+0x9e>
	return 0;
  406a12:	2000      	movs	r0, #0
}
  406a14:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406a16:	461e      	mov	r6, r3
  406a18:	4d25      	ldr	r5, [pc, #148]	; (406ab0 <usart_serial_putchar+0xcc>)
  406a1a:	4621      	mov	r1, r4
  406a1c:	4630      	mov	r0, r6
  406a1e:	47a8      	blx	r5
  406a20:	2800      	cmp	r0, #0
  406a22:	d1fa      	bne.n	406a1a <usart_serial_putchar+0x36>
		return 1;
  406a24:	2001      	movs	r0, #1
  406a26:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406a28:	461e      	mov	r6, r3
  406a2a:	4d21      	ldr	r5, [pc, #132]	; (406ab0 <usart_serial_putchar+0xcc>)
  406a2c:	4621      	mov	r1, r4
  406a2e:	4630      	mov	r0, r6
  406a30:	47a8      	blx	r5
  406a32:	2800      	cmp	r0, #0
  406a34:	d1fa      	bne.n	406a2c <usart_serial_putchar+0x48>
		return 1;
  406a36:	2001      	movs	r0, #1
  406a38:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406a3a:	461e      	mov	r6, r3
  406a3c:	4d1c      	ldr	r5, [pc, #112]	; (406ab0 <usart_serial_putchar+0xcc>)
  406a3e:	4621      	mov	r1, r4
  406a40:	4630      	mov	r0, r6
  406a42:	47a8      	blx	r5
  406a44:	2800      	cmp	r0, #0
  406a46:	d1fa      	bne.n	406a3e <usart_serial_putchar+0x5a>
		return 1;
  406a48:	2001      	movs	r0, #1
  406a4a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406a4c:	461e      	mov	r6, r3
  406a4e:	4d18      	ldr	r5, [pc, #96]	; (406ab0 <usart_serial_putchar+0xcc>)
  406a50:	4621      	mov	r1, r4
  406a52:	4630      	mov	r0, r6
  406a54:	47a8      	blx	r5
  406a56:	2800      	cmp	r0, #0
  406a58:	d1fa      	bne.n	406a50 <usart_serial_putchar+0x6c>
		return 1;
  406a5a:	2001      	movs	r0, #1
  406a5c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406a5e:	461e      	mov	r6, r3
  406a60:	4d14      	ldr	r5, [pc, #80]	; (406ab4 <usart_serial_putchar+0xd0>)
  406a62:	4621      	mov	r1, r4
  406a64:	4630      	mov	r0, r6
  406a66:	47a8      	blx	r5
  406a68:	2800      	cmp	r0, #0
  406a6a:	d1fa      	bne.n	406a62 <usart_serial_putchar+0x7e>
		return 1;
  406a6c:	2001      	movs	r0, #1
  406a6e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406a70:	461e      	mov	r6, r3
  406a72:	4d10      	ldr	r5, [pc, #64]	; (406ab4 <usart_serial_putchar+0xd0>)
  406a74:	4621      	mov	r1, r4
  406a76:	4630      	mov	r0, r6
  406a78:	47a8      	blx	r5
  406a7a:	2800      	cmp	r0, #0
  406a7c:	d1fa      	bne.n	406a74 <usart_serial_putchar+0x90>
		return 1;
  406a7e:	2001      	movs	r0, #1
  406a80:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406a82:	461e      	mov	r6, r3
  406a84:	4d0b      	ldr	r5, [pc, #44]	; (406ab4 <usart_serial_putchar+0xd0>)
  406a86:	4621      	mov	r1, r4
  406a88:	4630      	mov	r0, r6
  406a8a:	47a8      	blx	r5
  406a8c:	2800      	cmp	r0, #0
  406a8e:	d1fa      	bne.n	406a86 <usart_serial_putchar+0xa2>
		return 1;
  406a90:	2001      	movs	r0, #1
  406a92:	bd70      	pop	{r4, r5, r6, pc}
  406a94:	400e0800 	.word	0x400e0800
  406a98:	400e0a00 	.word	0x400e0a00
  406a9c:	400e1a00 	.word	0x400e1a00
  406aa0:	400e1c00 	.word	0x400e1c00
  406aa4:	40024000 	.word	0x40024000
  406aa8:	40028000 	.word	0x40028000
  406aac:	4002c000 	.word	0x4002c000
  406ab0:	004028eb 	.word	0x004028eb
  406ab4:	004026dd 	.word	0x004026dd

00406ab8 <main_vendor_int_out_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  406ab8:	b100      	cbz	r0, 406abc <main_vendor_int_out_received+0x4>
  406aba:	4770      	bx	lr
{
  406abc:	b510      	push	{r4, lr}
  406abe:	b084      	sub	sp, #16
	udi_vendor_interrupt_in_run(
  406ac0:	4c0a      	ldr	r4, [pc, #40]	; (406aec <main_vendor_int_out_received+0x34>)
  406ac2:	4a0b      	ldr	r2, [pc, #44]	; (406af0 <main_vendor_int_out_received+0x38>)
  406ac4:	4620      	mov	r0, r4
  406ac6:	4b0b      	ldr	r3, [pc, #44]	; (406af4 <main_vendor_int_out_received+0x3c>)
  406ac8:	4798      	blx	r3
	printf("OUT: %d %d %d %d %d %d %d\r\n",main_buf_loopback[0],main_buf_loopback[1],main_buf_loopback[2],main_buf_loopback[3],main_buf_loopback[4],main_buf_loopback[5],main_buf_loopback[6]);
  406aca:	78a3      	ldrb	r3, [r4, #2]
  406acc:	7862      	ldrb	r2, [r4, #1]
  406ace:	7821      	ldrb	r1, [r4, #0]
  406ad0:	79a0      	ldrb	r0, [r4, #6]
  406ad2:	9003      	str	r0, [sp, #12]
  406ad4:	7960      	ldrb	r0, [r4, #5]
  406ad6:	9002      	str	r0, [sp, #8]
  406ad8:	7920      	ldrb	r0, [r4, #4]
  406ada:	9001      	str	r0, [sp, #4]
  406adc:	78e0      	ldrb	r0, [r4, #3]
  406ade:	9000      	str	r0, [sp, #0]
  406ae0:	4805      	ldr	r0, [pc, #20]	; (406af8 <main_vendor_int_out_received+0x40>)
  406ae2:	4c06      	ldr	r4, [pc, #24]	; (406afc <main_vendor_int_out_received+0x44>)
  406ae4:	47a0      	blx	r4
}
  406ae6:	b004      	add	sp, #16
  406ae8:	bd10      	pop	{r4, pc}
  406aea:	bf00      	nop
  406aec:	20400cc8 	.word	0x20400cc8
  406af0:	004098cd 	.word	0x004098cd
  406af4:	00402a35 	.word	0x00402a35
  406af8:	0040f058 	.word	0x0040f058
  406afc:	0040b671 	.word	0x0040b671

00406b00 <main_vendor_bulk_in_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  406b00:	b100      	cbz	r0, 406b04 <main_vendor_bulk_in_received+0x4>
  406b02:	4770      	bx	lr
{
  406b04:	b510      	push	{r4, lr}
  406b06:	b086      	sub	sp, #24
	udi_vendor_bulk_out_run(
  406b08:	4c0b      	ldr	r4, [pc, #44]	; (406b38 <main_vendor_bulk_in_received+0x38>)
  406b0a:	4a0c      	ldr	r2, [pc, #48]	; (406b3c <main_vendor_bulk_in_received+0x3c>)
  406b0c:	2114      	movs	r1, #20
  406b0e:	4620      	mov	r0, r4
  406b10:	4b0b      	ldr	r3, [pc, #44]	; (406b40 <main_vendor_bulk_in_received+0x40>)
  406b12:	4798      	blx	r3
	 printf("BULK OUT RCVD: %x %x %x %x %x %x %x %x\r\n",crapBuf[0],crapBuf[1],crapBuf[2],crapBuf[3],crapBuf[4],crapBuf[5],crapBuf[6],crapBuf[7]);
  406b14:	78a3      	ldrb	r3, [r4, #2]
  406b16:	7862      	ldrb	r2, [r4, #1]
  406b18:	7821      	ldrb	r1, [r4, #0]
  406b1a:	79e0      	ldrb	r0, [r4, #7]
  406b1c:	9004      	str	r0, [sp, #16]
  406b1e:	79a0      	ldrb	r0, [r4, #6]
  406b20:	9003      	str	r0, [sp, #12]
  406b22:	7960      	ldrb	r0, [r4, #5]
  406b24:	9002      	str	r0, [sp, #8]
  406b26:	7920      	ldrb	r0, [r4, #4]
  406b28:	9001      	str	r0, [sp, #4]
  406b2a:	78e0      	ldrb	r0, [r4, #3]
  406b2c:	9000      	str	r0, [sp, #0]
  406b2e:	4805      	ldr	r0, [pc, #20]	; (406b44 <main_vendor_bulk_in_received+0x44>)
  406b30:	4c05      	ldr	r4, [pc, #20]	; (406b48 <main_vendor_bulk_in_received+0x48>)
  406b32:	47a0      	blx	r4
}
  406b34:	b006      	add	sp, #24
  406b36:	bd10      	pop	{r4, pc}
  406b38:	20400fcc 	.word	0x20400fcc
  406b3c:	00406b4d 	.word	0x00406b4d
  406b40:	00402a89 	.word	0x00402a89
  406b44:	0040ef9c 	.word	0x0040ef9c
  406b48:	0040b671 	.word	0x0040b671

00406b4c <main_vendor_bulk_out_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  406b4c:	2800      	cmp	r0, #0
  406b4e:	d136      	bne.n	406bbe <main_vendor_bulk_out_received+0x72>
{
  406b50:	b510      	push	{r4, lr}
  406b52:	b086      	sub	sp, #24
	if(g_imageSize==0){
  406b54:	4b1a      	ldr	r3, [pc, #104]	; (406bc0 <main_vendor_bulk_out_received+0x74>)
  406b56:	781b      	ldrb	r3, [r3, #0]
  406b58:	b1cb      	cbz	r3, 406b8e <main_vendor_bulk_out_received+0x42>
	udi_vendor_bulk_in_run(
  406b5a:	4a1a      	ldr	r2, [pc, #104]	; (406bc4 <main_vendor_bulk_out_received+0x78>)
  406b5c:	491a      	ldr	r1, [pc, #104]	; (406bc8 <main_vendor_bulk_out_received+0x7c>)
  406b5e:	4b1b      	ldr	r3, [pc, #108]	; (406bcc <main_vendor_bulk_out_received+0x80>)
  406b60:	6818      	ldr	r0, [r3, #0]
  406b62:	4b1b      	ldr	r3, [pc, #108]	; (406bd0 <main_vendor_bulk_out_received+0x84>)
  406b64:	4798      	blx	r3
			printf("BULK IN DATA SENT 888: %x %x %x %x %x %x %x %x\r\n",picBuff[0],picBuff[1],picBuff[2],picBuff[3],picBuff[4],picBuff[5],picBuff[6],picBuff[7]);
  406b66:	4b1b      	ldr	r3, [pc, #108]	; (406bd4 <main_vendor_bulk_out_received+0x88>)
  406b68:	6818      	ldr	r0, [r3, #0]
  406b6a:	7883      	ldrb	r3, [r0, #2]
  406b6c:	7842      	ldrb	r2, [r0, #1]
  406b6e:	7801      	ldrb	r1, [r0, #0]
  406b70:	79c4      	ldrb	r4, [r0, #7]
  406b72:	9404      	str	r4, [sp, #16]
  406b74:	7984      	ldrb	r4, [r0, #6]
  406b76:	9403      	str	r4, [sp, #12]
  406b78:	7944      	ldrb	r4, [r0, #5]
  406b7a:	9402      	str	r4, [sp, #8]
  406b7c:	7904      	ldrb	r4, [r0, #4]
  406b7e:	9401      	str	r4, [sp, #4]
  406b80:	78c0      	ldrb	r0, [r0, #3]
  406b82:	9000      	str	r0, [sp, #0]
  406b84:	4814      	ldr	r0, [pc, #80]	; (406bd8 <main_vendor_bulk_out_received+0x8c>)
  406b86:	4c15      	ldr	r4, [pc, #84]	; (406bdc <main_vendor_bulk_out_received+0x90>)
  406b88:	47a0      	blx	r4
}
  406b8a:	b006      	add	sp, #24
  406b8c:	bd10      	pop	{r4, pc}
	udi_vendor_bulk_in_run(
  406b8e:	4c11      	ldr	r4, [pc, #68]	; (406bd4 <main_vendor_bulk_out_received+0x88>)
  406b90:	4a0c      	ldr	r2, [pc, #48]	; (406bc4 <main_vendor_bulk_out_received+0x78>)
  406b92:	4913      	ldr	r1, [pc, #76]	; (406be0 <main_vendor_bulk_out_received+0x94>)
  406b94:	6820      	ldr	r0, [r4, #0]
  406b96:	4b0e      	ldr	r3, [pc, #56]	; (406bd0 <main_vendor_bulk_out_received+0x84>)
  406b98:	4798      	blx	r3
 	 printf("BULK IN DATA SENT 565: %x %x %x %x %x %x %x %x\r\n",picBuff[0],picBuff[1],picBuff[2],picBuff[3],picBuff[4],picBuff[5],picBuff[6],picBuff[7]);
  406b9a:	6820      	ldr	r0, [r4, #0]
  406b9c:	7883      	ldrb	r3, [r0, #2]
  406b9e:	7842      	ldrb	r2, [r0, #1]
  406ba0:	7801      	ldrb	r1, [r0, #0]
  406ba2:	79c4      	ldrb	r4, [r0, #7]
  406ba4:	9404      	str	r4, [sp, #16]
  406ba6:	7984      	ldrb	r4, [r0, #6]
  406ba8:	9403      	str	r4, [sp, #12]
  406baa:	7944      	ldrb	r4, [r0, #5]
  406bac:	9402      	str	r4, [sp, #8]
  406bae:	7904      	ldrb	r4, [r0, #4]
  406bb0:	9401      	str	r4, [sp, #4]
  406bb2:	78c0      	ldrb	r0, [r0, #3]
  406bb4:	9000      	str	r0, [sp, #0]
  406bb6:	480b      	ldr	r0, [pc, #44]	; (406be4 <main_vendor_bulk_out_received+0x98>)
  406bb8:	4c08      	ldr	r4, [pc, #32]	; (406bdc <main_vendor_bulk_out_received+0x90>)
  406bba:	47a0      	blx	r4
  406bbc:	e7e5      	b.n	406b8a <main_vendor_bulk_out_received+0x3e>
  406bbe:	4770      	bx	lr
  406bc0:	20400cc2 	.word	0x20400cc2
  406bc4:	00406b01 	.word	0x00406b01
  406bc8:	0057e400 	.word	0x0057e400
  406bcc:	20400180 	.word	0x20400180
  406bd0:	00402a6d 	.word	0x00402a6d
  406bd4:	2040017c 	.word	0x2040017c
  406bd8:	0040effc 	.word	0x0040effc
  406bdc:	0040b671 	.word	0x0040b671
  406be0:	003a9800 	.word	0x003a9800
  406be4:	0040efc8 	.word	0x0040efc8

00406be8 <main_vendor_iso_in_received>:
{
  406be8:	b508      	push	{r3, lr}
	ui_loop_back_state(false);
  406bea:	2000      	movs	r0, #0
  406bec:	4b01      	ldr	r3, [pc, #4]	; (406bf4 <main_vendor_iso_in_received+0xc>)
  406bee:	4798      	blx	r3
  406bf0:	bd08      	pop	{r3, pc}
  406bf2:	bf00      	nop
  406bf4:	00402915 	.word	0x00402915

00406bf8 <main_vendor_iso_out_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  406bf8:	bb20      	cbnz	r0, 406c44 <main_vendor_iso_out_received+0x4c>
{
  406bfa:	b510      	push	{r4, lr}
  406bfc:	460c      	mov	r4, r1
	if (nb_transfered) {
  406bfe:	b9a1      	cbnz	r1, 406c2a <main_vendor_iso_out_received+0x32>
	main_buf_iso_sel = main_buf_iso_sel? 0:1;
  406c00:	4a11      	ldr	r2, [pc, #68]	; (406c48 <main_vendor_iso_out_received+0x50>)
  406c02:	7813      	ldrb	r3, [r2, #0]
  406c04:	fab3 f383 	clz	r3, r3
  406c08:	095b      	lsrs	r3, r3, #5
  406c0a:	7013      	strb	r3, [r2, #0]
	buf_ptr = &main_buf_loopback[ main_buf_iso_sel
  406c0c:	4c0f      	ldr	r4, [pc, #60]	; (406c4c <main_vendor_iso_out_received+0x54>)
  406c0e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
			udd_is_high_speed()?
  406c12:	4b0f      	ldr	r3, [pc, #60]	; (406c50 <main_vendor_iso_out_received+0x58>)
  406c14:	4798      	blx	r3
	udi_vendor_iso_out_run(
  406c16:	2800      	cmp	r0, #0
  406c18:	4a0e      	ldr	r2, [pc, #56]	; (406c54 <main_vendor_iso_out_received+0x5c>)
  406c1a:	bf14      	ite	ne
  406c1c:	2140      	movne	r1, #64	; 0x40
  406c1e:	f44f 7180 	moveq.w	r1, #256	; 0x100
  406c22:	4620      	mov	r0, r4
  406c24:	4b0c      	ldr	r3, [pc, #48]	; (406c58 <main_vendor_iso_out_received+0x60>)
  406c26:	4798      	blx	r3
  406c28:	bd10      	pop	{r4, pc}
		ui_loop_back_state(true);
  406c2a:	2001      	movs	r0, #1
  406c2c:	4b0b      	ldr	r3, [pc, #44]	; (406c5c <main_vendor_iso_out_received+0x64>)
  406c2e:	4798      	blx	r3
				*(sizeof(main_buf_loopback)/2) ];
  406c30:	4b05      	ldr	r3, [pc, #20]	; (406c48 <main_vendor_iso_out_received+0x50>)
  406c32:	7818      	ldrb	r0, [r3, #0]
		udi_vendor_iso_in_run(
  406c34:	4a0a      	ldr	r2, [pc, #40]	; (406c60 <main_vendor_iso_out_received+0x68>)
  406c36:	4621      	mov	r1, r4
  406c38:	4b04      	ldr	r3, [pc, #16]	; (406c4c <main_vendor_iso_out_received+0x54>)
  406c3a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
  406c3e:	4b09      	ldr	r3, [pc, #36]	; (406c64 <main_vendor_iso_out_received+0x6c>)
  406c40:	4798      	blx	r3
  406c42:	e7dd      	b.n	406c00 <main_vendor_iso_out_received+0x8>
  406c44:	4770      	bx	lr
  406c46:	bf00      	nop
  406c48:	20400cc7 	.word	0x20400cc7
  406c4c:	20400cc8 	.word	0x20400cc8
  406c50:	00404079 	.word	0x00404079
  406c54:	00406bf9 	.word	0x00406bf9
  406c58:	00402ac1 	.word	0x00402ac1
  406c5c:	00402915 	.word	0x00402915
  406c60:	00406be9 	.word	0x00406be9
  406c64:	00402aa5 	.word	0x00402aa5

00406c68 <configure_console>:
{
  406c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406c6c:	b086      	sub	sp, #24
		base->PIO_PUDR = mask;
  406c6e:	4b25      	ldr	r3, [pc, #148]	; (406d04 <configure_console+0x9c>)
  406c70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  406c74:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  406c76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406c7a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406c7c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406c82:	6f19      	ldr	r1, [r3, #112]	; 0x70
  406c84:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  406c88:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406c8a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  406c8c:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  406c90:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  406c92:	605a      	str	r2, [r3, #4]
  406c94:	202d      	movs	r0, #45	; 0x2d
  406c96:	4d1c      	ldr	r5, [pc, #112]	; (406d08 <configure_console+0xa0>)
  406c98:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  406c9a:	4c1c      	ldr	r4, [pc, #112]	; (406d0c <configure_console+0xa4>)
  406c9c:	4b1c      	ldr	r3, [pc, #112]	; (406d10 <configure_console+0xa8>)
  406c9e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  406ca0:	4a1c      	ldr	r2, [pc, #112]	; (406d14 <configure_console+0xac>)
  406ca2:	4b1d      	ldr	r3, [pc, #116]	; (406d18 <configure_console+0xb0>)
  406ca4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  406ca6:	4a1d      	ldr	r2, [pc, #116]	; (406d1c <configure_console+0xb4>)
  406ca8:	4b1d      	ldr	r3, [pc, #116]	; (406d20 <configure_console+0xb8>)
  406caa:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  406cac:	f8df 807c 	ldr.w	r8, [pc, #124]	; 406d2c <configure_console+0xc4>
  406cb0:	f8cd 8000 	str.w	r8, [sp]
	uart_settings.ul_baudrate = opt->baudrate;
  406cb4:	f44f 5716 	mov.w	r7, #9600	; 0x2580
  406cb8:	9701      	str	r7, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  406cba:	f44f 6600 	mov.w	r6, #2048	; 0x800
  406cbe:	9602      	str	r6, [sp, #8]
  406cc0:	202d      	movs	r0, #45	; 0x2d
  406cc2:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  406cc4:	4669      	mov	r1, sp
  406cc6:	4620      	mov	r0, r4
  406cc8:	4d16      	ldr	r5, [pc, #88]	; (406d24 <configure_console+0xbc>)
  406cca:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  406ccc:	f8df a060 	ldr.w	sl, [pc, #96]	; 406d30 <configure_console+0xc8>
  406cd0:	f8da 3000 	ldr.w	r3, [sl]
  406cd4:	2100      	movs	r1, #0
  406cd6:	6898      	ldr	r0, [r3, #8]
  406cd8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 406d34 <configure_console+0xcc>
  406cdc:	47c8      	blx	r9
	setbuf(stdin, NULL);
  406cde:	f8da 3000 	ldr.w	r3, [sl]
  406ce2:	2100      	movs	r1, #0
  406ce4:	6858      	ldr	r0, [r3, #4]
  406ce6:	47c8      	blx	r9
   uart_enable_tx(CONF_UART);
  406ce8:	4620      	mov	r0, r4
  406cea:	4b0f      	ldr	r3, [pc, #60]	; (406d28 <configure_console+0xc0>)
  406cec:	4798      	blx	r3
   uart_settings.ul_mck = sysclk_get_peripheral_hz();
  406cee:	f8cd 800c 	str.w	r8, [sp, #12]
   uart_settings.ul_baudrate = CONF_UART_BAUDRATE;
  406cf2:	9704      	str	r7, [sp, #16]
   uart_settings.ul_mode = CONF_UART_PARITY;
  406cf4:	9605      	str	r6, [sp, #20]
   uart_init(CONF_UART, &uart_settings);
  406cf6:	a903      	add	r1, sp, #12
  406cf8:	4620      	mov	r0, r4
  406cfa:	47a8      	blx	r5
}
  406cfc:	b006      	add	sp, #24
  406cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406d02:	bf00      	nop
  406d04:	400e1400 	.word	0x400e1400
  406d08:	00403575 	.word	0x00403575
  406d0c:	400e1c00 	.word	0x400e1c00
  406d10:	20400f04 	.word	0x20400f04
  406d14:	004069e5 	.word	0x004069e5
  406d18:	20400f00 	.word	0x20400f00
  406d1c:	00406909 	.word	0x00406909
  406d20:	20400efc 	.word	0x20400efc
  406d24:	004028b5 	.word	0x004028b5
  406d28:	004028e5 	.word	0x004028e5
  406d2c:	08f0d180 	.word	0x08f0d180
  406d30:	20400184 	.word	0x20400184
  406d34:	0040b869 	.word	0x0040b869

00406d38 <ISI_Handler>:
	status = ISI->ISI_SR;
  406d38:	4b0b      	ldr	r3, [pc, #44]	; (406d68 <ISI_Handler+0x30>)
  406d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	imr = ISI->ISI_IMR;
  406d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	if ((status & ISI_SR_CXFR_DONE) && (imr & ISI_IMR_CXFR_DONE)) {
  406d3e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
  406d42:	d00f      	beq.n	406d64 <ISI_Handler+0x2c>
  406d44:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  406d48:	d00c      	beq.n	406d64 <ISI_Handler+0x2c>
		ISI->ISI_DMA_CHDR |= ISI_DMA_CHDR_C_CH_DIS;
  406d4a:	4b07      	ldr	r3, [pc, #28]	; (406d68 <ISI_Handler+0x30>)
  406d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  406d4e:	f042 0202 	orr.w	r2, r2, #2
  406d52:	63da      	str	r2, [r3, #60]	; 0x3c
		ISI->ISI_IDR = ISI_IDR_CXFR_DONE;
  406d54:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  406d58:	6319      	str	r1, [r3, #48]	; 0x30
		ISI->ISI_DMA_CHER |= ISI_DMA_CHER_C_CH_EN;
  406d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406d5c:	f042 0202 	orr.w	r2, r2, #2
  406d60:	639a      	str	r2, [r3, #56]	; 0x38
		ISI->ISI_IER = ISI_IER_CXFR_DONE;
  406d62:	62d9      	str	r1, [r3, #44]	; 0x2c
  406d64:	4770      	bx	lr
  406d66:	bf00      	nop
  406d68:	4004c000 	.word	0x4004c000

00406d6c <main_suspend_action>:
{
  406d6c:	b508      	push	{r3, lr}
	ui_powerdown();
  406d6e:	4b03      	ldr	r3, [pc, #12]	; (406d7c <main_suspend_action+0x10>)
  406d70:	4798      	blx	r3
	g_usbFlagA=1;
  406d72:	2201      	movs	r2, #1
  406d74:	4b02      	ldr	r3, [pc, #8]	; (406d80 <main_suspend_action+0x14>)
  406d76:	701a      	strb	r2, [r3, #0]
  406d78:	bd08      	pop	{r3, pc}
  406d7a:	bf00      	nop
  406d7c:	00402911 	.word	0x00402911
  406d80:	20400cc3 	.word	0x20400cc3

00406d84 <main_resume_action>:
{
  406d84:	b508      	push	{r3, lr}
	ui_wakeup();
  406d86:	4b03      	ldr	r3, [pc, #12]	; (406d94 <main_resume_action+0x10>)
  406d88:	4798      	blx	r3
	g_usbFlagB=2;
  406d8a:	2202      	movs	r2, #2
  406d8c:	4b02      	ldr	r3, [pc, #8]	; (406d98 <main_resume_action+0x14>)
  406d8e:	701a      	strb	r2, [r3, #0]
  406d90:	bd08      	pop	{r3, pc}
  406d92:	bf00      	nop
  406d94:	00402913 	.word	0x00402913
  406d98:	20400cc4 	.word	0x20400cc4

00406d9c <main_sof_action>:
{
  406d9c:	b508      	push	{r3, lr}
	if (!main_b_vendor_enable)
  406d9e:	4b04      	ldr	r3, [pc, #16]	; (406db0 <main_sof_action+0x14>)
  406da0:	781b      	ldrb	r3, [r3, #0]
  406da2:	b903      	cbnz	r3, 406da6 <main_sof_action+0xa>
  406da4:	bd08      	pop	{r3, pc}
	ui_process(udd_get_frame_number());
  406da6:	4b03      	ldr	r3, [pc, #12]	; (406db4 <main_sof_action+0x18>)
  406da8:	4798      	blx	r3
  406daa:	4b03      	ldr	r3, [pc, #12]	; (406db8 <main_sof_action+0x1c>)
  406dac:	4798      	blx	r3
  406dae:	e7f9      	b.n	406da4 <main_sof_action+0x8>
  406db0:	20400cc6 	.word	0x20400cc6
  406db4:	004040b5 	.word	0x004040b5
  406db8:	00402917 	.word	0x00402917

00406dbc <main_vendor_disable>:
	main_b_vendor_enable = false;
  406dbc:	2200      	movs	r2, #0
  406dbe:	4b01      	ldr	r3, [pc, #4]	; (406dc4 <main_vendor_disable+0x8>)
  406dc0:	701a      	strb	r2, [r3, #0]
  406dc2:	4770      	bx	lr
  406dc4:	20400cc6 	.word	0x20400cc6

00406dc8 <main_setup_out_received>:
	udd_g_ctrlreq.payload = main_buf_loopback;
  406dc8:	4b05      	ldr	r3, [pc, #20]	; (406de0 <main_setup_out_received+0x18>)
  406dca:	4a06      	ldr	r2, [pc, #24]	; (406de4 <main_setup_out_received+0x1c>)
  406dcc:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = min(
  406dce:	88da      	ldrh	r2, [r3, #6]
  406dd0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406dd4:	bf28      	it	cs
  406dd6:	f44f 7200 	movcs.w	r2, #512	; 0x200
  406dda:	819a      	strh	r2, [r3, #12]
}
  406ddc:	2001      	movs	r0, #1
  406dde:	4770      	bx	lr
  406de0:	20400f10 	.word	0x20400f10
  406de4:	20400cc8 	.word	0x20400cc8

00406de8 <main_setup_in_received>:
	udd_g_ctrlreq.payload = main_buf_loopback;
  406de8:	4b05      	ldr	r3, [pc, #20]	; (406e00 <main_setup_in_received+0x18>)
  406dea:	4a06      	ldr	r2, [pc, #24]	; (406e04 <main_setup_in_received+0x1c>)
  406dec:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size =
  406dee:	88da      	ldrh	r2, [r3, #6]
  406df0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406df4:	bf28      	it	cs
  406df6:	f44f 7200 	movcs.w	r2, #512	; 0x200
  406dfa:	819a      	strh	r2, [r3, #12]
}
  406dfc:	2001      	movs	r0, #1
  406dfe:	4770      	bx	lr
  406e00:	20400f10 	.word	0x20400f10
  406e04:	20400cc8 	.word	0x20400cc8

00406e08 <receiveUSBcamConfig>:
void receiveUSBcamConfig(void){
  406e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406e0a:	4d06      	ldr	r5, [pc, #24]	; (406e24 <receiveUSBcamConfig+0x1c>)
  406e0c:	1e6c      	subs	r4, r5, #1
  406e0e:	3577      	adds	r5, #119	; 0x77
		printf("%x",main_buf_loopback[iters]);
  406e10:	4f05      	ldr	r7, [pc, #20]	; (406e28 <receiveUSBcamConfig+0x20>)
  406e12:	4e06      	ldr	r6, [pc, #24]	; (406e2c <receiveUSBcamConfig+0x24>)
  406e14:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  406e18:	4638      	mov	r0, r7
  406e1a:	47b0      	blx	r6
	for(iters=0;iters<120;iters++){
  406e1c:	42ac      	cmp	r4, r5
  406e1e:	d1f9      	bne.n	406e14 <receiveUSBcamConfig+0xc>
}
  406e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406e22:	bf00      	nop
  406e24:	20400cc8 	.word	0x20400cc8
  406e28:	0040f234 	.word	0x0040f234
  406e2c:	0040b671 	.word	0x0040b671

00406e30 <RGB565toRGB888>:
void RGB565toRGB888 (void){
  406e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  406e34:	4822      	ldr	r0, [pc, #136]	; (406ec0 <RGB565toRGB888+0x90>)
  406e36:	4c23      	ldr	r4, [pc, #140]	; (406ec4 <RGB565toRGB888+0x94>)
  406e38:	4f23      	ldr	r7, [pc, #140]	; (406ec8 <RGB565toRGB888+0x98>)
  406e3a:	4e24      	ldr	r6, [pc, #144]	; (406ecc <RGB565toRGB888+0x9c>)
	for(picBlockCtr=0;picBlockCtr<600;picBlockCtr++){
  406e3c:	4d24      	ldr	r5, [pc, #144]	; (406ed0 <RGB565toRGB888+0xa0>)
  406e3e:	19e1      	adds	r1, r4, r7
  406e40:	f5a0 5296 	sub.w	r2, r0, #4800	; 0x12c0
  406e44:	eb04 0806 	add.w	r8, r4, r6
			firstByte=*camBuffPtrA++;
  406e48:	f811 cc02 	ldrb.w	ip, [r1, #-2]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  406e4c:	f811 ec01 	ldrb.w	lr, [r1, #-1]
			blueByte=(firstByte&0xF8);
  406e50:	f02c 0307 	bic.w	r3, ip, #7
			*camBuffPtrC++=blueByte;
  406e54:	f802 3c03 	strb.w	r3, [r2, #-3]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  406e58:	ea4f 03ee 	mov.w	r3, lr, asr #3
  406e5c:	f003 031c 	and.w	r3, r3, #28
  406e60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
			*camBuffPtrC++=greenByte;
  406e64:	f802 3c02 	strb.w	r3, [r2, #-2]
			redByte=(secondByte&0x1F)<<3;
  406e68:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  406e6c:	f802 ec01 	strb.w	lr, [r2, #-1]
  406e70:	3102      	adds	r1, #2
  406e72:	3203      	adds	r2, #3
		for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  406e74:	4541      	cmp	r1, r8
  406e76:	d1e7      	bne.n	406e48 <RGB565toRGB888+0x18>
  406e78:	f500 5896 	add.w	r8, r0, #4800	; 0x12c0
  406e7c:	4603      	mov	r3, r0
  406e7e:	46a6      	mov	lr, r4
			firstByte=*camBuffPtrB++;
  406e80:	f81e cc02 	ldrb.w	ip, [lr, #-2]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  406e84:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
			blueByte=(firstByte&0xF8);
  406e88:	f02c 0207 	bic.w	r2, ip, #7
			*camBuffPtrC++=blueByte;
  406e8c:	f803 2c03 	strb.w	r2, [r3, #-3]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  406e90:	10ca      	asrs	r2, r1, #3
  406e92:	f002 021c 	and.w	r2, r2, #28
  406e96:	eb02 124c 	add.w	r2, r2, ip, lsl #5
			*camBuffPtrC++=greenByte;
  406e9a:	f803 2c02 	strb.w	r2, [r3, #-2]
			redByte=(secondByte&0x1F)<<3;
  406e9e:	00c9      	lsls	r1, r1, #3
  406ea0:	f803 1c01 	strb.w	r1, [r3, #-1]
  406ea4:	f10e 0e02 	add.w	lr, lr, #2
  406ea8:	3303      	adds	r3, #3
		for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  406eaa:	4543      	cmp	r3, r8
  406eac:	d1e8      	bne.n	406e80 <RGB565toRGB888+0x50>
  406eae:	f504 6448 	add.w	r4, r4, #3200	; 0xc80
  406eb2:	f500 5016 	add.w	r0, r0, #9600	; 0x2580
	for(picBlockCtr=0;picBlockCtr<600;picBlockCtr++){
  406eb6:	42a8      	cmp	r0, r5
  406eb8:	d1c1      	bne.n	406e3e <RGB565toRGB888+0xe>
  406eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ebe:	bf00      	nop
  406ec0:	703aaac3 	.word	0x703aaac3
  406ec4:	701d3302 	.word	0x701d3302
  406ec8:	ffe2cd00 	.word	0xffe2cd00
  406ecc:	ffe2d980 	.word	0xffe2d980
  406ed0:	70928ec3 	.word	0x70928ec3

00406ed4 <LCDclear>:
void LCDclear (void){
  406ed4:	b510      	push	{r4, lr}
  406ed6:	b086      	sub	sp, #24
	printf("%c%c%c%c%c%c%c%c",0xFE,0x46,0xFE,0x48,0xFE,0x4C,0xFE,0x51);//clear display, cursor home
  406ed8:	2351      	movs	r3, #81	; 0x51
  406eda:	9304      	str	r3, [sp, #16]
  406edc:	21fe      	movs	r1, #254	; 0xfe
  406ede:	9103      	str	r1, [sp, #12]
  406ee0:	234c      	movs	r3, #76	; 0x4c
  406ee2:	9302      	str	r3, [sp, #8]
  406ee4:	9101      	str	r1, [sp, #4]
  406ee6:	2348      	movs	r3, #72	; 0x48
  406ee8:	9300      	str	r3, [sp, #0]
  406eea:	460b      	mov	r3, r1
  406eec:	2246      	movs	r2, #70	; 0x46
  406eee:	4804      	ldr	r0, [pc, #16]	; (406f00 <LCDclear+0x2c>)
  406ef0:	4c04      	ldr	r4, [pc, #16]	; (406f04 <LCDclear+0x30>)
  406ef2:	47a0      	blx	r4
	delay_ms(10);
  406ef4:	4804      	ldr	r0, [pc, #16]	; (406f08 <LCDclear+0x34>)
  406ef6:	4b05      	ldr	r3, [pc, #20]	; (406f0c <LCDclear+0x38>)
  406ef8:	4798      	blx	r3
}
  406efa:	b006      	add	sp, #24
  406efc:	bd10      	pop	{r4, pc}
  406efe:	bf00      	nop
  406f00:	0040ed9c 	.word	0x0040ed9c
  406f04:	0040b671 	.word	0x0040b671
  406f08:	0007b784 	.word	0x0007b784
  406f0c:	2040008d 	.word	0x2040008d

00406f10 <sendCmdToTiny>:
 void sendCmdToTiny(char cmdToSend){
  406f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f12:	4604      	mov	r4, r0
	 if((cmdToSend&0x80)==0)ioport_set_pin_level(BigTiny_DAT,0);
  406f14:	f010 0f80 	tst.w	r0, #128	; 0x80
  406f18:	f040 8086 	bne.w	407028 <sendCmdToTiny+0x118>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406f1c:	2201      	movs	r2, #1
  406f1e:	4b52      	ldr	r3, [pc, #328]	; (407068 <sendCmdToTiny+0x158>)
  406f20:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  406f22:	f240 302a 	movw	r0, #810	; 0x32a
  406f26:	4f51      	ldr	r7, [pc, #324]	; (40706c <sendCmdToTiny+0x15c>)
  406f28:	47b8      	blx	r7
  406f2a:	4d51      	ldr	r5, [pc, #324]	; (407070 <sendCmdToTiny+0x160>)
  406f2c:	2608      	movs	r6, #8
  406f2e:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  406f30:	f240 302a 	movw	r0, #810	; 0x32a
  406f34:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406f36:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x40)==0)ioport_set_pin_level(BigTiny_DAT,0);
  406f38:	f014 0f40 	tst.w	r4, #64	; 0x40
  406f3c:	d178      	bne.n	407030 <sendCmdToTiny+0x120>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406f3e:	2201      	movs	r2, #1
  406f40:	4b49      	ldr	r3, [pc, #292]	; (407068 <sendCmdToTiny+0x158>)
  406f42:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  406f44:	f240 302a 	movw	r0, #810	; 0x32a
  406f48:	4f48      	ldr	r7, [pc, #288]	; (40706c <sendCmdToTiny+0x15c>)
  406f4a:	47b8      	blx	r7
  406f4c:	4d48      	ldr	r5, [pc, #288]	; (407070 <sendCmdToTiny+0x160>)
  406f4e:	2608      	movs	r6, #8
  406f50:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  406f52:	f240 302a 	movw	r0, #810	; 0x32a
  406f56:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406f58:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x20)==0)ioport_set_pin_level(BigTiny_DAT,0);
  406f5a:	f014 0f20 	tst.w	r4, #32
  406f5e:	d16b      	bne.n	407038 <sendCmdToTiny+0x128>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406f60:	2201      	movs	r2, #1
  406f62:	4b41      	ldr	r3, [pc, #260]	; (407068 <sendCmdToTiny+0x158>)
  406f64:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  406f66:	f240 302a 	movw	r0, #810	; 0x32a
  406f6a:	4f40      	ldr	r7, [pc, #256]	; (40706c <sendCmdToTiny+0x15c>)
  406f6c:	47b8      	blx	r7
  406f6e:	4d40      	ldr	r5, [pc, #256]	; (407070 <sendCmdToTiny+0x160>)
  406f70:	2608      	movs	r6, #8
  406f72:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  406f74:	f240 302a 	movw	r0, #810	; 0x32a
  406f78:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406f7a:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x10)==0)ioport_set_pin_level(BigTiny_DAT,0);
  406f7c:	f014 0f10 	tst.w	r4, #16
  406f80:	d15e      	bne.n	407040 <sendCmdToTiny+0x130>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406f82:	2201      	movs	r2, #1
  406f84:	4b38      	ldr	r3, [pc, #224]	; (407068 <sendCmdToTiny+0x158>)
  406f86:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  406f88:	f240 302a 	movw	r0, #810	; 0x32a
  406f8c:	4f37      	ldr	r7, [pc, #220]	; (40706c <sendCmdToTiny+0x15c>)
  406f8e:	47b8      	blx	r7
  406f90:	4d37      	ldr	r5, [pc, #220]	; (407070 <sendCmdToTiny+0x160>)
  406f92:	2608      	movs	r6, #8
  406f94:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  406f96:	f240 302a 	movw	r0, #810	; 0x32a
  406f9a:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406f9c:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x08)==0)ioport_set_pin_level(BigTiny_DAT,0);
  406f9e:	f014 0f08 	tst.w	r4, #8
  406fa2:	d151      	bne.n	407048 <sendCmdToTiny+0x138>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406fa4:	2201      	movs	r2, #1
  406fa6:	4b30      	ldr	r3, [pc, #192]	; (407068 <sendCmdToTiny+0x158>)
  406fa8:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep
  406faa:	f240 302a 	movw	r0, #810	; 0x32a
  406fae:	4f2f      	ldr	r7, [pc, #188]	; (40706c <sendCmdToTiny+0x15c>)
  406fb0:	47b8      	blx	r7
  406fb2:	4d2f      	ldr	r5, [pc, #188]	; (407070 <sendCmdToTiny+0x160>)
  406fb4:	2608      	movs	r6, #8
  406fb6:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  406fb8:	f240 302a 	movw	r0, #810	; 0x32a
  406fbc:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406fbe:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x04)==0)ioport_set_pin_level(BigTiny_DAT,0);
  406fc0:	f014 0f04 	tst.w	r4, #4
  406fc4:	d144      	bne.n	407050 <sendCmdToTiny+0x140>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406fc6:	2201      	movs	r2, #1
  406fc8:	4b27      	ldr	r3, [pc, #156]	; (407068 <sendCmdToTiny+0x158>)
  406fca:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  406fcc:	f240 302a 	movw	r0, #810	; 0x32a
  406fd0:	4f26      	ldr	r7, [pc, #152]	; (40706c <sendCmdToTiny+0x15c>)
  406fd2:	47b8      	blx	r7
  406fd4:	4d26      	ldr	r5, [pc, #152]	; (407070 <sendCmdToTiny+0x160>)
  406fd6:	2608      	movs	r6, #8
  406fd8:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  406fda:	f240 302a 	movw	r0, #810	; 0x32a
  406fde:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406fe0:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x02)==0)ioport_set_pin_level(BigTiny_DAT,0);
  406fe2:	f014 0f02 	tst.w	r4, #2
  406fe6:	d137      	bne.n	407058 <sendCmdToTiny+0x148>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406fe8:	2201      	movs	r2, #1
  406fea:	4b1f      	ldr	r3, [pc, #124]	; (407068 <sendCmdToTiny+0x158>)
  406fec:	635a      	str	r2, [r3, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  406fee:	f240 302a 	movw	r0, #810	; 0x32a
  406ff2:	4f1e      	ldr	r7, [pc, #120]	; (40706c <sendCmdToTiny+0x15c>)
  406ff4:	47b8      	blx	r7
  406ff6:	4d1e      	ldr	r5, [pc, #120]	; (407070 <sendCmdToTiny+0x160>)
  406ff8:	2608      	movs	r6, #8
  406ffa:	636e      	str	r6, [r5, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  406ffc:	f240 302a 	movw	r0, #810	; 0x32a
  407000:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407002:	632e      	str	r6, [r5, #48]	; 0x30
	 if((cmdToSend&0x01)==0)ioport_set_pin_level(BigTiny_DAT,0);
  407004:	f014 0f01 	tst.w	r4, #1
  407008:	d02a      	beq.n	407060 <sendCmdToTiny+0x150>
  40700a:	2201      	movs	r2, #1
  40700c:	4b16      	ldr	r3, [pc, #88]	; (407068 <sendCmdToTiny+0x158>)
  40700e:	631a      	str	r2, [r3, #48]	; 0x30
	 delay_us(TINY_CLK_DELAY);
  407010:	f240 302a 	movw	r0, #810	; 0x32a
  407014:	4e15      	ldr	r6, [pc, #84]	; (40706c <sendCmdToTiny+0x15c>)
  407016:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407018:	4c15      	ldr	r4, [pc, #84]	; (407070 <sendCmdToTiny+0x160>)
  40701a:	2508      	movs	r5, #8
  40701c:	6365      	str	r5, [r4, #52]	; 0x34
	 delay_us(TINY_CLK_DELAY);
  40701e:	f240 302a 	movw	r0, #810	; 0x32a
  407022:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407024:	6325      	str	r5, [r4, #48]	; 0x30
  407026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407028:	2201      	movs	r2, #1
  40702a:	4b0f      	ldr	r3, [pc, #60]	; (407068 <sendCmdToTiny+0x158>)
  40702c:	631a      	str	r2, [r3, #48]	; 0x30
  40702e:	e778      	b.n	406f22 <sendCmdToTiny+0x12>
  407030:	2201      	movs	r2, #1
  407032:	4b0d      	ldr	r3, [pc, #52]	; (407068 <sendCmdToTiny+0x158>)
  407034:	631a      	str	r2, [r3, #48]	; 0x30
  407036:	e785      	b.n	406f44 <sendCmdToTiny+0x34>
  407038:	2201      	movs	r2, #1
  40703a:	4b0b      	ldr	r3, [pc, #44]	; (407068 <sendCmdToTiny+0x158>)
  40703c:	631a      	str	r2, [r3, #48]	; 0x30
  40703e:	e792      	b.n	406f66 <sendCmdToTiny+0x56>
  407040:	2201      	movs	r2, #1
  407042:	4b09      	ldr	r3, [pc, #36]	; (407068 <sendCmdToTiny+0x158>)
  407044:	631a      	str	r2, [r3, #48]	; 0x30
  407046:	e79f      	b.n	406f88 <sendCmdToTiny+0x78>
  407048:	2201      	movs	r2, #1
  40704a:	4b07      	ldr	r3, [pc, #28]	; (407068 <sendCmdToTiny+0x158>)
  40704c:	631a      	str	r2, [r3, #48]	; 0x30
  40704e:	e7ac      	b.n	406faa <sendCmdToTiny+0x9a>
  407050:	2201      	movs	r2, #1
  407052:	4b05      	ldr	r3, [pc, #20]	; (407068 <sendCmdToTiny+0x158>)
  407054:	631a      	str	r2, [r3, #48]	; 0x30
  407056:	e7b9      	b.n	406fcc <sendCmdToTiny+0xbc>
  407058:	2201      	movs	r2, #1
  40705a:	4b03      	ldr	r3, [pc, #12]	; (407068 <sendCmdToTiny+0x158>)
  40705c:	631a      	str	r2, [r3, #48]	; 0x30
  40705e:	e7c6      	b.n	406fee <sendCmdToTiny+0xde>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407060:	2201      	movs	r2, #1
  407062:	4b01      	ldr	r3, [pc, #4]	; (407068 <sendCmdToTiny+0x158>)
  407064:	635a      	str	r2, [r3, #52]	; 0x34
  407066:	e7d3      	b.n	407010 <sendCmdToTiny+0x100>
  407068:	400e1000 	.word	0x400e1000
  40706c:	2040008d 	.word	0x2040008d
  407070:	400e1400 	.word	0x400e1400

00407074 <getByteFromTiny>:
char getByteFromTiny(void){
  407074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407076:	4c48      	ldr	r4, [pc, #288]	; (407198 <getByteFromTiny+0x124>)
  407078:	2508      	movs	r5, #8
  40707a:	6325      	str	r5, [r4, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);//likely need longer to wake Tiny from sleep. Making only this one longer doesn't help.
  40707c:	f240 302a 	movw	r0, #810	; 0x32a
  407080:	4b46      	ldr	r3, [pc, #280]	; (40719c <getByteFromTiny+0x128>)
  407082:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407084:	6365      	str	r5, [r4, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407086:	4b46      	ldr	r3, [pc, #280]	; (4071a0 <getByteFromTiny+0x12c>)
  407088:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  40708a:	f004 0401 	and.w	r4, r4, #1
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x80;
  40708e:	01e4      	lsls	r4, r4, #7
	delay_us(TINY_CLK_DELAY);
  407090:	f240 302a 	movw	r0, #810	; 0x32a
  407094:	4f41      	ldr	r7, [pc, #260]	; (40719c <getByteFromTiny+0x128>)
  407096:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407098:	4d3f      	ldr	r5, [pc, #252]	; (407198 <getByteFromTiny+0x124>)
  40709a:	2608      	movs	r6, #8
  40709c:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  40709e:	f240 302a 	movw	r0, #810	; 0x32a
  4070a2:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4070a4:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4070a6:	4b3e      	ldr	r3, [pc, #248]	; (4071a0 <getByteFromTiny+0x12c>)
  4070a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x40;
  4070aa:	f013 0f01 	tst.w	r3, #1
  4070ae:	bf18      	it	ne
  4070b0:	f044 0440 	orrne.w	r4, r4, #64	; 0x40
	delay_us(TINY_CLK_DELAY);
  4070b4:	f240 302a 	movw	r0, #810	; 0x32a
  4070b8:	4f38      	ldr	r7, [pc, #224]	; (40719c <getByteFromTiny+0x128>)
  4070ba:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4070bc:	4d36      	ldr	r5, [pc, #216]	; (407198 <getByteFromTiny+0x124>)
  4070be:	2608      	movs	r6, #8
  4070c0:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  4070c2:	f240 302a 	movw	r0, #810	; 0x32a
  4070c6:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4070c8:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4070ca:	4b35      	ldr	r3, [pc, #212]	; (4071a0 <getByteFromTiny+0x12c>)
  4070cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x20;
  4070ce:	f013 0f01 	tst.w	r3, #1
  4070d2:	bf18      	it	ne
  4070d4:	f044 0420 	orrne.w	r4, r4, #32
	delay_us(TINY_CLK_DELAY);
  4070d8:	f240 302a 	movw	r0, #810	; 0x32a
  4070dc:	4f2f      	ldr	r7, [pc, #188]	; (40719c <getByteFromTiny+0x128>)
  4070de:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4070e0:	4d2d      	ldr	r5, [pc, #180]	; (407198 <getByteFromTiny+0x124>)
  4070e2:	2608      	movs	r6, #8
  4070e4:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  4070e6:	f240 302a 	movw	r0, #810	; 0x32a
  4070ea:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4070ec:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4070ee:	4b2c      	ldr	r3, [pc, #176]	; (4071a0 <getByteFromTiny+0x12c>)
  4070f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x10;
  4070f2:	f013 0f01 	tst.w	r3, #1
  4070f6:	bf18      	it	ne
  4070f8:	f044 0410 	orrne.w	r4, r4, #16
	delay_us(TINY_CLK_DELAY);
  4070fc:	f240 302a 	movw	r0, #810	; 0x32a
  407100:	4f26      	ldr	r7, [pc, #152]	; (40719c <getByteFromTiny+0x128>)
  407102:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407104:	4d24      	ldr	r5, [pc, #144]	; (407198 <getByteFromTiny+0x124>)
  407106:	2608      	movs	r6, #8
  407108:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  40710a:	f240 302a 	movw	r0, #810	; 0x32a
  40710e:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407110:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407112:	4b23      	ldr	r3, [pc, #140]	; (4071a0 <getByteFromTiny+0x12c>)
  407114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x08;
  407116:	f013 0f01 	tst.w	r3, #1
  40711a:	bf18      	it	ne
  40711c:	4334      	orrne	r4, r6
	delay_us(TINY_CLK_DELAY);
  40711e:	f240 302a 	movw	r0, #810	; 0x32a
  407122:	4f1e      	ldr	r7, [pc, #120]	; (40719c <getByteFromTiny+0x128>)
  407124:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407126:	4d1c      	ldr	r5, [pc, #112]	; (407198 <getByteFromTiny+0x124>)
  407128:	2608      	movs	r6, #8
  40712a:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  40712c:	f240 302a 	movw	r0, #810	; 0x32a
  407130:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407132:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407134:	4b1a      	ldr	r3, [pc, #104]	; (4071a0 <getByteFromTiny+0x12c>)
  407136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x04;
  407138:	f013 0f01 	tst.w	r3, #1
  40713c:	bf18      	it	ne
  40713e:	f044 0404 	orrne.w	r4, r4, #4
	delay_us(TINY_CLK_DELAY);
  407142:	f240 302a 	movw	r0, #810	; 0x32a
  407146:	4f15      	ldr	r7, [pc, #84]	; (40719c <getByteFromTiny+0x128>)
  407148:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40714a:	4d13      	ldr	r5, [pc, #76]	; (407198 <getByteFromTiny+0x124>)
  40714c:	2608      	movs	r6, #8
  40714e:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  407150:	f240 302a 	movw	r0, #810	; 0x32a
  407154:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407156:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  407158:	4b11      	ldr	r3, [pc, #68]	; (4071a0 <getByteFromTiny+0x12c>)
  40715a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x02;
  40715c:	f013 0f01 	tst.w	r3, #1
  407160:	bf18      	it	ne
  407162:	f044 0402 	orrne.w	r4, r4, #2
	delay_us(TINY_CLK_DELAY);
  407166:	f240 302a 	movw	r0, #810	; 0x32a
  40716a:	4f0c      	ldr	r7, [pc, #48]	; (40719c <getByteFromTiny+0x128>)
  40716c:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40716e:	4d0a      	ldr	r5, [pc, #40]	; (407198 <getByteFromTiny+0x124>)
  407170:	2608      	movs	r6, #8
  407172:	632e      	str	r6, [r5, #48]	; 0x30
	delay_us(TINY_CLK_DELAY);
  407174:	f240 302a 	movw	r0, #810	; 0x32a
  407178:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40717a:	636e      	str	r6, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40717c:	4b08      	ldr	r3, [pc, #32]	; (4071a0 <getByteFromTiny+0x12c>)
  40717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(BigTiny_DAT))ret|=0x01;
  407180:	f013 0f01 	tst.w	r3, #1
  407184:	bf18      	it	ne
  407186:	f044 0401 	orrne.w	r4, r4, #1
	delay_us(TINY_CLK_DELAY);
  40718a:	f240 302a 	movw	r0, #810	; 0x32a
  40718e:	4b03      	ldr	r3, [pc, #12]	; (40719c <getByteFromTiny+0x128>)
  407190:	4798      	blx	r3
}
  407192:	4620      	mov	r0, r4
  407194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407196:	bf00      	nop
  407198:	400e1400 	.word	0x400e1400
  40719c:	2040008d 	.word	0x2040008d
  4071a0:	400e1000 	.word	0x400e1000

004071a4 <calcCRC>:
   for (i=0;i<LEN;i++){       //for each element
  4071a4:	2900      	cmp	r1, #0
  4071a6:	dd20      	ble.n	4071ea <calcCRC+0x46>
unsigned short calcCRC(char cbuff[], int LEN) {
  4071a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4071aa:	4605      	mov	r5, r0
  4071ac:	1847      	adds	r7, r0, r1
   for (i=0;i<LEN;i++){       //for each element
  4071ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
       if((Y & cbuff[i]) != 0){ X++;};
  4071b2:	f04f 0e80 	mov.w	lr, #128	; 0x80
       if ((Z & 0x8000) != 0) {X ^= 0x1021; };
  4071b6:	f241 0621 	movw	r6, #4129	; 0x1021
  4071ba:	e011      	b.n	4071e0 <calcCRC+0x3c>
       Y >>= 1;
  4071bc:	0849      	lsrs	r1, r1, #1
       if ((Z & 0x8000) != 0) {X ^= 0x1021; };
  4071be:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  4071c2:	bf14      	ite	ne
  4071c4:	ea83 0006 	eorne.w	r0, r3, r6
  4071c8:	4618      	moveq	r0, r3
     for (j=0;j<8;j++){
  4071ca:	3a01      	subs	r2, #1
  4071cc:	d006      	beq.n	4071dc <calcCRC+0x38>
       X <<= 1;
  4071ce:	0043      	lsls	r3, r0, #1
  4071d0:	b29b      	uxth	r3, r3
       if((Y & cbuff[i]) != 0){ X++;};
  4071d2:	4221      	tst	r1, r4
  4071d4:	d0f2      	beq.n	4071bc <calcCRC+0x18>
  4071d6:	3301      	adds	r3, #1
  4071d8:	b29b      	uxth	r3, r3
  4071da:	e7ef      	b.n	4071bc <calcCRC+0x18>
   for (i=0;i<LEN;i++){       //for each element
  4071dc:	42bd      	cmp	r5, r7
  4071de:	d013      	beq.n	407208 <calcCRC+0x64>
       if((Y & cbuff[i]) != 0){ X++;};
  4071e0:	f815 4b01 	ldrb.w	r4, [r5], #1
  4071e4:	2208      	movs	r2, #8
  4071e6:	4671      	mov	r1, lr
  4071e8:	e7f1      	b.n	4071ce <calcCRC+0x2a>
   unsigned short X = 0xFFFF;
  4071ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4071ee:	2310      	movs	r3, #16
    if ((X & 0x8000) != 0) { X<<=1; X ^= 0x1021; } else X <<= 1;
  4071f0:	f241 0221 	movw	r2, #4129	; 0x1021
  4071f4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  4071f8:	ea4f 0040 	mov.w	r0, r0, lsl #1
  4071fc:	b280      	uxth	r0, r0
  4071fe:	bf18      	it	ne
  407200:	4050      	eorne	r0, r2
  for (i=0;i<16;i++){
  407202:	3b01      	subs	r3, #1
  407204:	d1f6      	bne.n	4071f4 <calcCRC+0x50>
  407206:	4770      	bx	lr
   unsigned short X = 0xFFFF;
  407208:	2310      	movs	r3, #16
    if ((X & 0x8000) != 0) { X<<=1; X ^= 0x1021; } else X <<= 1;
  40720a:	f241 0221 	movw	r2, #4129	; 0x1021
  40720e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  407212:	ea4f 0040 	mov.w	r0, r0, lsl #1
  407216:	b280      	uxth	r0, r0
  407218:	bf18      	it	ne
  40721a:	4050      	eorne	r0, r2
  for (i=0;i<16;i++){
  40721c:	3b01      	subs	r3, #1
  40721e:	d1f6      	bne.n	40720e <calcCRC+0x6a>
}
  407220:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00407224 <getGPSdateTimeFrmTiny>:
/***********************************************************************/
/*  Interrupt from Tiny
***********************************************************************/
void getGPSdateTimeFrmTiny(void){
  407224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407228:	b09b      	sub	sp, #108	; 0x6c
	char rcvFromTinyGG[56];
	char writeRet,iters;
	unsigned short crcrc;
	int yearNow;

	pmc_enable_periph_clk(ID_PIOB);
  40722a:	200b      	movs	r0, #11
  40722c:	4c97      	ldr	r4, [pc, #604]	; (40748c <getGPSdateTimeFrmTiny+0x268>)
  40722e:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  407230:	2010      	movs	r0, #16
  407232:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407234:	4b96      	ldr	r3, [pc, #600]	; (407490 <getGPSdateTimeFrmTiny+0x26c>)
  407236:	2208      	movs	r2, #8
  407238:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40723a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40723e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407240:	4994      	ldr	r1, [pc, #592]	; (407494 <getGPSdateTimeFrmTiny+0x270>)
  407242:	2001      	movs	r0, #1
  407244:	6148      	str	r0, [r1, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407246:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40724a:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(BigTiny_CLK, 1);
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_INPUT);
	ioport_set_pin_level(BigTiny_CLK, 0);//start condition for big-to-tiny
	delay_us(150);
  40724c:	f641 50a2 	movw	r0, #7586	; 0x1da2
  407250:	4b91      	ldr	r3, [pc, #580]	; (407498 <getGPSdateTimeFrmTiny+0x274>)
  407252:	4798      	blx	r3
  407254:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
  407258:	ae12      	add	r6, sp, #72	; 0x48
	for(iters=0;iters<25;iters++){
		rcvFromTinyGG[iters]=getByteFromTiny();
  40725a:	4d90      	ldr	r5, [pc, #576]	; (40749c <getGPSdateTimeFrmTiny+0x278>)
  40725c:	47a8      	blx	r5
  40725e:	f804 0f01 	strb.w	r0, [r4, #1]!
	for(iters=0;iters<25;iters++){
  407262:	42a6      	cmp	r6, r4
  407264:	d1fa      	bne.n	40725c <getGPSdateTimeFrmTiny+0x38>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407266:	2208      	movs	r2, #8
  407268:	4b89      	ldr	r3, [pc, #548]	; (407490 <getGPSdateTimeFrmTiny+0x26c>)
  40726a:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ioport_set_pin_level(BigTiny_CLK, 1);//start condition for tiny-to-big
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40726c:	4a8c      	ldr	r2, [pc, #560]	; (4074a0 <getGPSdateTimeFrmTiny+0x27c>)
  40726e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
  407272:	601a      	str	r2, [r3, #0]
	crcrc=calcCRC(rcvFromTinyGG,23);
  407274:	2117      	movs	r1, #23
  407276:	a80c      	add	r0, sp, #48	; 0x30
  407278:	4b8a      	ldr	r3, [pc, #552]	; (4074a4 <getGPSdateTimeFrmTiny+0x280>)
  40727a:	4798      	blx	r3
	if(((crcrc>>8)!=rcvFromTinyGG[23])||((crcrc&0x00FF)!=rcvFromTinyGG[24])){
  40727c:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
  407280:	f3c0 230f 	ubfx	r3, r0, #8, #16
  407284:	429a      	cmp	r2, r3
  407286:	d104      	bne.n	407292 <getGPSdateTimeFrmTiny+0x6e>
  407288:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
  40728c:	b2c0      	uxtb	r0, r0
  40728e:	4283      	cmp	r3, r0
  407290:	d02e      	beq.n	4072f0 <getGPSdateTimeFrmTiny+0xcc>
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407292:	4b7f      	ldr	r3, [pc, #508]	; (407490 <getGPSdateTimeFrmTiny+0x26c>)
  407294:	2208      	movs	r2, #8
  407296:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407298:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40729c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40729e:	4c7d      	ldr	r4, [pc, #500]	; (407494 <getGPSdateTimeFrmTiny+0x270>)
  4072a0:	2501      	movs	r5, #1
  4072a2:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072a4:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);//WakeUp Tiny
		ioport_set_pin_level(BigTiny_CLK, 1);//start condition
		ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);//WakeUp Tiny
		sendCmdToTiny('b');//potential addition tshoooooooooooot
  4072a8:	2062      	movs	r0, #98	; 0x62
  4072aa:	4b7f      	ldr	r3, [pc, #508]	; (4074a8 <getGPSdateTimeFrmTiny+0x284>)
  4072ac:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4072ae:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072b0:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_INPUT);//WakeUp Tiny
#ifdef DO_DIAGS
		configure_console();  //TSHOOOOOOOOOOOOOOT
  4072b4:	4b7d      	ldr	r3, [pc, #500]	; (4074ac <getGPSdateTimeFrmTiny+0x288>)
  4072b6:	4798      	blx	r3
		printf("\r\nFAIL CRC TO TINY\r\n");
  4072b8:	487d      	ldr	r0, [pc, #500]	; (4074b0 <getGPSdateTimeFrmTiny+0x28c>)
  4072ba:	4b7e      	ldr	r3, [pc, #504]	; (4074b4 <getGPSdateTimeFrmTiny+0x290>)
  4072bc:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072be:	4b74      	ldr	r3, [pc, #464]	; (407490 <getGPSdateTimeFrmTiny+0x26c>)
  4072c0:	2208      	movs	r2, #8
  4072c2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4072c8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072ca:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4072ce:	2201      	movs	r2, #1
  4072d0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4072d6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
	ioport_set_pin_dir(BigTiny_CLK, IOPORT_DIR_OUTPUT);//WakeUp Tiny
	ioport_set_pin_level(BigTiny_CLK, 1);//start condition for tiny-to-big
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_OUTPUT);//WakeUp Tiny
	ioport_set_pin_dir(BigTiny_DAT, IOPORT_DIR_INPUT);//WakeUp Tiny
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4072dc:	4c76      	ldr	r4, [pc, #472]	; (4074b8 <getGPSdateTimeFrmTiny+0x294>)
  4072de:	4d70      	ldr	r5, [pc, #448]	; (4074a0 <getGPSdateTimeFrmTiny+0x27c>)
  4072e0:	6025      	str	r5, [r4, #0]
	delay_ms(1000);
  4072e2:	4876      	ldr	r0, [pc, #472]	; (4074bc <getGPSdateTimeFrmTiny+0x298>)
  4072e4:	4b6c      	ldr	r3, [pc, #432]	; (407498 <getGPSdateTimeFrmTiny+0x274>)
  4072e6:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4072e8:	6025      	str	r5, [r4, #0]
}
  4072ea:	b01b      	add	sp, #108	; 0x6c
  4072ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072f0:	4b67      	ldr	r3, [pc, #412]	; (407490 <getGPSdateTimeFrmTiny+0x26c>)
  4072f2:	2208      	movs	r2, #8
  4072f4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4072f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4072fa:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4072fc:	4c65      	ldr	r4, [pc, #404]	; (407494 <getGPSdateTimeFrmTiny+0x270>)
  4072fe:	2501      	movs	r5, #1
  407300:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407302:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		sendCmdToTiny('G');//potential addition tshoooooooooooot
  407306:	2047      	movs	r0, #71	; 0x47
  407308:	4b67      	ldr	r3, [pc, #412]	; (4074a8 <getGPSdateTimeFrmTiny+0x284>)
  40730a:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40730c:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40730e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		yearNow = rcvFromTinyGG[9];
  407312:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
  407316:	9303      	str	r3, [sp, #12]
		monthNow = rcvFromTinyGG[10];
  407318:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 4074e4 <getGPSdateTimeFrmTiny+0x2c0>
  40731c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
  407320:	f8ca 3000 	str.w	r3, [sl]
		dayNow = rcvFromTinyGG[11];
  407324:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 4074e8 <getGPSdateTimeFrmTiny+0x2c4>
  407328:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
  40732c:	f8cb 3000 	str.w	r3, [fp]
		hourNow = rcvFromTinyGG[12];
  407330:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 4074ec <getGPSdateTimeFrmTiny+0x2c8>
  407334:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  407338:	f8c8 3000 	str.w	r3, [r8]
		minsNow = rcvFromTinyGG[13];
  40733c:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 4074f0 <getGPSdateTimeFrmTiny+0x2cc>
  407340:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
  407344:	f8c9 3000 	str.w	r3, [r9]
		secNow = rcvFromTinyGG[14];
  407348:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
  40734c:	4a5c      	ldr	r2, [pc, #368]	; (4074c0 <getGPSdateTimeFrmTiny+0x29c>)
  40734e:	6013      	str	r3, [r2, #0]
	pmc_enable_periph_clk(ID_PIOC);
  407350:	200c      	movs	r0, #12
  407352:	4b4e      	ldr	r3, [pc, #312]	; (40748c <getGPSdateTimeFrmTiny+0x268>)
  407354:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407356:	4b5b      	ldr	r3, [pc, #364]	; (4074c4 <getGPSdateTimeFrmTiny+0x2a0>)
  407358:	2204      	movs	r2, #4
  40735a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40735c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  407360:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  407362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407366:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407368:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40736a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40736e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  407370:	f022 0204 	bic.w	r2, r2, #4
  407374:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407376:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  407378:	f022 0204 	bic.w	r2, r2, #4
  40737c:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40737e:	f504 7400 	add.w	r4, r4, #512	; 0x200
  407382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  407386:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407388:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40738c:	f44f 6680 	mov.w	r6, #1024	; 0x400
  407390:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407392:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407396:	6323      	str	r3, [r4, #48]	; 0x30
  407398:	6326      	str	r6, [r4, #48]	; 0x30
	delay_ms(200);//looked fine even at only 1ms (when repeated every 500ms);
  40739a:	484b      	ldr	r0, [pc, #300]	; (4074c8 <getGPSdateTimeFrmTiny+0x2a4>)
  40739c:	4f3e      	ldr	r7, [pc, #248]	; (407498 <getGPSdateTimeFrmTiny+0x274>)
  40739e:	47b8      	blx	r7
	twi_init_RTC();
  4073a0:	4b4a      	ldr	r3, [pc, #296]	; (4074cc <getGPSdateTimeFrmTiny+0x2a8>)
  4073a2:	4798      	blx	r3
	delay_ms(500);//
  4073a4:	484a      	ldr	r0, [pc, #296]	; (4074d0 <getGPSdateTimeFrmTiny+0x2ac>)
  4073a6:	47b8      	blx	r7
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4073a8:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4073aa:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4073ae:	6666      	str	r6, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4073b0:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4073b4:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4073b6:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4073b8:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4073bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4073be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4073c2:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4073c4:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4073c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4073ca:	6763      	str	r3, [r4, #116]	; 0x74
	rtcData[0]=0x00;//write to Address 0x00  SET ALL
  4073cc:	2600      	movs	r6, #0
  4073ce:	f88d 6014 	strb.w	r6, [sp, #20]
	rtcData[1]=0x02;//contents of Addr 0x00 CTL1
  4073d2:	f04f 0202 	mov.w	r2, #2
  4073d6:	f88d 2015 	strb.w	r2, [sp, #21]
	rtcData[2]=0x00;//contents of Addr 0x01 CTL2
  4073da:	f88d 6016 	strb.w	r6, [sp, #22]
	rtcData[3]=0x00;//contents of Addr 0x02 CTL3
  4073de:	f88d 6017 	strb.w	r6, [sp, #23]
	rtcData[4]=hexToBCD(secNow);//contents of Addr 0x03 SECONDS works
  4073e2:	4a37      	ldr	r2, [pc, #220]	; (4074c0 <getGPSdateTimeFrmTiny+0x29c>)
  4073e4:	6810      	ldr	r0, [r2, #0]
  4073e6:	4c3b      	ldr	r4, [pc, #236]	; (4074d4 <getGPSdateTimeFrmTiny+0x2b0>)
  4073e8:	47a0      	blx	r4
  4073ea:	f88d 0018 	strb.w	r0, [sp, #24]
	rtcData[5]=hexToBCD(minsNow);//contents of Addr 0x04 MINUTES works
  4073ee:	f8d9 0000 	ldr.w	r0, [r9]
  4073f2:	47a0      	blx	r4
  4073f4:	f88d 0019 	strb.w	r0, [sp, #25]
	rtcData[6]=hexToBCD(hourNow);//contents of Addr 0x05 HOURS works
  4073f8:	f8d8 0000 	ldr.w	r0, [r8]
  4073fc:	47a0      	blx	r4
  4073fe:	f88d 001a 	strb.w	r0, [sp, #26]
	rtcData[7]=hexToBCD(dayNow);//contents of Addr 0x06 DAYS
  407402:	f8db 0000 	ldr.w	r0, [fp]
  407406:	47a0      	blx	r4
  407408:	f88d 001b 	strb.w	r0, [sp, #27]
	rtcData[8]=0x02;//contents of Addr 0x07 WEEKDAY
  40740c:	f04f 0202 	mov.w	r2, #2
  407410:	f88d 201c 	strb.w	r2, [sp, #28]
	rtcData[9]=hexToBCD(monthNow);//contents of Addr 0x08 MONTH
  407414:	f8da 0000 	ldr.w	r0, [sl]
  407418:	47a0      	blx	r4
  40741a:	f88d 001d 	strb.w	r0, [sp, #29]
	rtcData[0x0A]=hexToBCD(yearNow);//contents of Addr 0x09 YEAR
  40741e:	9803      	ldr	r0, [sp, #12]
  407420:	47a0      	blx	r4
  407422:	f88d 001e 	strb.w	r0, [sp, #30]
	rtcData[0x0B]=0x80;//contents of Addr 0x0A  0x80 = second alarm disabled
  407426:	2380      	movs	r3, #128	; 0x80
  407428:	f88d 301f 	strb.w	r3, [sp, #31]
	rtcData[0x0C]=0x80;//contents of Addr 0x0B  0x80 = minute alarm disabled
  40742c:	f88d 3020 	strb.w	r3, [sp, #32]
	rtcData[0x0D]=0x80;//contents of Addr 0x0C  0x80 = Hour alarm disabled
  407430:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	rtcData[0x0E]=0x80;//contents of Addr 0x0D  0x80 = day alarm disabled
  407434:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	rtcData[0x0F]=0x80;//contents of Addr 0x0E  0x80 = weekday alarm disabled
  407438:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	rtcData[0x10]=0x00;//contents of Addr 0x0F  0x00 = temperature clockout period 4 minutes
  40743c:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	rtcData[0x11]=0x00;//contents of Addr 0x10  20=PULSED INTERRUPT
  407440:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
	writeRet = write_data_RTC(rtcData,18);//!< write sequentially to the slave "1" sends addr plus data[0].
  407444:	2112      	movs	r1, #18
  407446:	a805      	add	r0, sp, #20
  407448:	4c23      	ldr	r4, [pc, #140]	; (4074d8 <getGPSdateTimeFrmTiny+0x2b4>)
  40744a:	47a0      	blx	r4
	delay_ms(200);//
  40744c:	481e      	ldr	r0, [pc, #120]	; (4074c8 <getGPSdateTimeFrmTiny+0x2a4>)
  40744e:	47b8      	blx	r7
	rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  407450:	f88d 5014 	strb.w	r5, [sp, #20]
	rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  407454:	2330      	movs	r3, #48	; 0x30
  407456:	f88d 3015 	strb.w	r3, [sp, #21]
	write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40745a:	2102      	movs	r1, #2
  40745c:	a805      	add	r0, sp, #20
  40745e:	47a0      	blx	r4
		configure_console();  //TSHOOOOOOOOOOOOOOT
  407460:	4b12      	ldr	r3, [pc, #72]	; (4074ac <getGPSdateTimeFrmTiny+0x288>)
  407462:	4798      	blx	r3
		printf("\r\nGOOD DATA RCVD FROM TINY: %d-%d-%d %d:%d \r\n",monthNow, dayNow, yearNow, hourNow, minsNow);
  407464:	f8db 2000 	ldr.w	r2, [fp]
  407468:	f8da 1000 	ldr.w	r1, [sl]
  40746c:	f8d9 3000 	ldr.w	r3, [r9]
  407470:	9301      	str	r3, [sp, #4]
  407472:	f8d8 3000 	ldr.w	r3, [r8]
  407476:	9300      	str	r3, [sp, #0]
  407478:	9b03      	ldr	r3, [sp, #12]
  40747a:	4818      	ldr	r0, [pc, #96]	; (4074dc <getGPSdateTimeFrmTiny+0x2b8>)
  40747c:	4c0d      	ldr	r4, [pc, #52]	; (4074b4 <getGPSdateTimeFrmTiny+0x290>)
  40747e:	47a0      	blx	r4
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  407480:	4a07      	ldr	r2, [pc, #28]	; (4074a0 <getGPSdateTimeFrmTiny+0x27c>)
  407482:	4b0d      	ldr	r3, [pc, #52]	; (4074b8 <getGPSdateTimeFrmTiny+0x294>)
  407484:	601a      	str	r2, [r3, #0]
		delay_s(2);
  407486:	4816      	ldr	r0, [pc, #88]	; (4074e0 <getGPSdateTimeFrmTiny+0x2bc>)
  407488:	47b8      	blx	r7
  40748a:	e718      	b.n	4072be <getGPSdateTimeFrmTiny+0x9a>
  40748c:	00403575 	.word	0x00403575
  407490:	400e1400 	.word	0x400e1400
  407494:	400e1000 	.word	0x400e1000
  407498:	2040008d 	.word	0x2040008d
  40749c:	00407075 	.word	0x00407075
  4074a0:	a5000001 	.word	0xa5000001
  4074a4:	004071a5 	.word	0x004071a5
  4074a8:	00406f11 	.word	0x00406f11
  4074ac:	00406c69 	.word	0x00406c69
  4074b0:	0040edbc 	.word	0x0040edbc
  4074b4:	0040b671 	.word	0x0040b671
  4074b8:	400e1850 	.word	0x400e1850
  4074bc:	0303af6b 	.word	0x0303af6b
  4074c0:	20400f70 	.word	0x20400f70
  4074c4:	400e0e00 	.word	0x400e0e00
  4074c8:	009a5649 	.word	0x009a5649
  4074cc:	00401a65 	.word	0x00401a65
  4074d0:	0181d7b6 	.word	0x0181d7b6
  4074d4:	004066c9 	.word	0x004066c9
  4074d8:	00401b91 	.word	0x00401b91
  4074dc:	0040edd4 	.word	0x0040edd4
  4074e0:	06075ed6 	.word	0x06075ed6
  4074e4:	20400f44 	.word	0x20400f44
  4074e8:	20400f60 	.word	0x20400f60
  4074ec:	20400fbc 	.word	0x20400fbc
  4074f0:	20400f90 	.word	0x20400f90

004074f4 <getHumidity>:
/***********************************************************************/
/*  Get Humidity
***********************************************************************/
short getHumidity(char slaveAddress){
  4074f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4074f6:	b083      	sub	sp, #12
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4074f8:	4c26      	ldr	r4, [pc, #152]	; (407594 <getHumidity+0xa0>)
  4074fa:	f44f 7600 	mov.w	r6, #512	; 0x200
  4074fe:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407500:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407504:	f44f 7580 	mov.w	r5, #256	; 0x100
  407508:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40750a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40750e:	4b22      	ldr	r3, [pc, #136]	; (407598 <getHumidity+0xa4>)
  407510:	2240      	movs	r2, #64	; 0x40
  407512:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407514:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407518:	635a      	str	r2, [r3, #52]	; 0x34
	char errCtr;
		SENS_SCL_FLOAT;
		SENS_SDA_FLOAT;
		SENSPWR_OUTPUT;
		SENSPWR_ON;
		delay_ms(10);
  40751a:	4820      	ldr	r0, [pc, #128]	; (40759c <getHumidity+0xa8>)
  40751c:	4f20      	ldr	r7, [pc, #128]	; (4075a0 <getHumidity+0xac>)
  40751e:	47b8      	blx	r7
 		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  407520:	4a20      	ldr	r2, [pc, #128]	; (4075a4 <getHumidity+0xb0>)
  407522:	4b21      	ldr	r3, [pc, #132]	; (4075a8 <getHumidity+0xb4>)
  407524:	601a      	str	r2, [r3, #0]
  407526:	6366      	str	r6, [r4, #52]	; 0x34
  407528:	6365      	str	r5, [r4, #52]	; 0x34
		SENS_SCL_LO;//Make them both low so that when the code drives them they will be low.
		SENS_SDA_LO;//Make them both low so that when the code drives them they will be low.
		data[0]=0xF5;//Config
  40752a:	a802      	add	r0, sp, #8
  40752c:	23f5      	movs	r3, #245	; 0xf5
  40752e:	f800 3d08 	strb.w	r3, [r0, #-8]!
		write_data_L(data,1,0x80,0);
  407532:	2300      	movs	r3, #0
  407534:	2280      	movs	r2, #128	; 0x80
  407536:	2101      	movs	r1, #1
  407538:	4c1c      	ldr	r4, [pc, #112]	; (4075ac <getHumidity+0xb8>)
  40753a:	47a0      	blx	r4
		delay_us(1);
  40753c:	2033      	movs	r0, #51	; 0x33
  40753e:	47b8      	blx	r7
		errCtr=20;
		data[0]=0;data[1]=0;data[2]=0;
  407540:	2300      	movs	r3, #0
  407542:	f88d 3000 	strb.w	r3, [sp]
  407546:	f88d 3001 	strb.w	r3, [sp, #1]
  40754a:	f88d 3002 	strb.w	r3, [sp, #2]
  40754e:	2414      	movs	r4, #20
		while((errCtr>0)&&(read_bytes_L(data,3,0x80)==0)){
  407550:	4d17      	ldr	r5, [pc, #92]	; (4075b0 <getHumidity+0xbc>)
			errCtr--;
			delay_ms(2);
  407552:	4f18      	ldr	r7, [pc, #96]	; (4075b4 <getHumidity+0xc0>)
  407554:	4e12      	ldr	r6, [pc, #72]	; (4075a0 <getHumidity+0xac>)
		while((errCtr>0)&&(read_bytes_L(data,3,0x80)==0)){
  407556:	2280      	movs	r2, #128	; 0x80
  407558:	2103      	movs	r1, #3
  40755a:	4668      	mov	r0, sp
  40755c:	47a8      	blx	r5
  40755e:	b928      	cbnz	r0, 40756c <getHumidity+0x78>
			delay_ms(2);
  407560:	4638      	mov	r0, r7
  407562:	47b0      	blx	r6
  407564:	1e63      	subs	r3, r4, #1
		while((errCtr>0)&&(read_bytes_L(data,3,0x80)==0)){
  407566:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40756a:	d1f4      	bne.n	407556 <getHumidity+0x62>
		}
		humidityMeasurement=(((unsigned int)data[0])<<2)+(((unsigned int)data[1])>>6);//only want the upper ten bits
  40756c:	f89d 0000 	ldrb.w	r0, [sp]
  407570:	f89d 2001 	ldrb.w	r2, [sp, #1]
  407574:	0992      	lsrs	r2, r2, #6
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407576:	4b07      	ldr	r3, [pc, #28]	; (407594 <getHumidity+0xa0>)
  407578:	f44f 7100 	mov.w	r1, #512	; 0x200
  40757c:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40757e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407582:	f44f 7180 	mov.w	r1, #256	; 0x100
  407586:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407588:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		SENS_SCL_FLOAT;
		SENS_SDA_FLOAT;
	return(humidityMeasurement);
}
  40758c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  407590:	b003      	add	sp, #12
  407592:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407594:	400e1200 	.word	0x400e1200
  407598:	400e0e00 	.word	0x400e0e00
  40759c:	0007b784 	.word	0x0007b784
  4075a0:	2040008d 	.word	0x2040008d
  4075a4:	a5000001 	.word	0xa5000001
  4075a8:	400e1850 	.word	0x400e1850
  4075ac:	00401965 	.word	0x00401965
  4075b0:	00401905 	.word	0x00401905
  4075b4:	00018b1b 	.word	0x00018b1b

004075b8 <getALSfromVEML>:
// 		return ((temperature<<16)+pressure);
//  }
/***********************************************************************/
/*  Get Ambient Light from VEML Sensor
***********************************************************************/
short getALSfromVEML(char slaveAddress){
  4075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4075bc:	b083      	sub	sp, #12
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4075be:	4d35      	ldr	r5, [pc, #212]	; (407694 <getALSfromVEML+0xdc>)
  4075c0:	f44f 7700 	mov.w	r7, #512	; 0x200
  4075c4:	636f      	str	r7, [r5, #52]	; 0x34
  4075c6:	f44f 7680 	mov.w	r6, #256	; 0x100
  4075ca:	636e      	str	r6, [r5, #52]	; 0x34
	unsigned char data[4];
	char iters;
	unsigned short lightMeasurement;
		SENS_SCL_LO;
		SENS_SDA_LO;
		data[0]=0x01;//Register Address 01
  4075cc:	f04f 0901 	mov.w	r9, #1
  4075d0:	f88d 9004 	strb.w	r9, [sp, #4]
		data[1]=0x00;//Config:  High threshold window
  4075d4:	2400      	movs	r4, #0
  4075d6:	f88d 4005 	strb.w	r4, [sp, #5]
		data[2]=0x00;
  4075da:	f88d 4006 	strb.w	r4, [sp, #6]
		write_data_L(data,3,0x20,0);
  4075de:	4623      	mov	r3, r4
  4075e0:	2220      	movs	r2, #32
  4075e2:	2103      	movs	r1, #3
  4075e4:	a801      	add	r0, sp, #4
  4075e6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 4076ac <getALSfromVEML+0xf4>
  4075ea:	47c0      	blx	r8
		data[0]=0x02;//Register Address 02
  4075ec:	f04f 0b02 	mov.w	fp, #2
  4075f0:	f88d b004 	strb.w	fp, [sp, #4]
		data[1]=0x00;//Config:  Low threshold window
  4075f4:	f88d 4005 	strb.w	r4, [sp, #5]
		data[2]=0x00;
  4075f8:	f88d 4006 	strb.w	r4, [sp, #6]
		write_data_L(data,3,0x20,0);
  4075fc:	4623      	mov	r3, r4
  4075fe:	2220      	movs	r2, #32
  407600:	2103      	movs	r1, #3
  407602:	a801      	add	r0, sp, #4
  407604:	47c0      	blx	r8
		data[0]=0x03;//Register Address 03
  407606:	f04f 0a03 	mov.w	sl, #3
  40760a:	f88d a004 	strb.w	sl, [sp, #4]
		data[1]=0x00;//Power saving mode
  40760e:	f88d 4005 	strb.w	r4, [sp, #5]
		data[2]=0x00;
  407612:	f88d 4006 	strb.w	r4, [sp, #6]
		write_data_L(data,3,0x20,0);
  407616:	4623      	mov	r3, r4
  407618:	2220      	movs	r2, #32
  40761a:	4651      	mov	r1, sl
  40761c:	a801      	add	r0, sp, #4
  40761e:	47c0      	blx	r8
		data[0]=0x00;//Register Address 00
  407620:	f88d 4004 	strb.w	r4, [sp, #4]
		data[1]=0x00;//Config:  0x000 00(sensitivity=1) 0 00(integration time=100ms)
  407624:	f88d 4005 	strb.w	r4, [sp, #5]
		data[2]=0x00;//00(integration time) 00(persistence) 00 0(no interrupt) 0(power on)
  407628:	f88d 4006 	strb.w	r4, [sp, #6]
		write_data_L(data,3,0x20,0);
  40762c:	4623      	mov	r3, r4
  40762e:	2220      	movs	r2, #32
  407630:	4651      	mov	r1, sl
  407632:	a801      	add	r0, sp, #4
  407634:	47c0      	blx	r8
		delay_ms(100);
  407636:	4818      	ldr	r0, [pc, #96]	; (407698 <getALSfromVEML+0xe0>)
  407638:	4b18      	ldr	r3, [pc, #96]	; (40769c <getALSfromVEML+0xe4>)
  40763a:	4798      	blx	r3
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40763c:	4a18      	ldr	r2, [pc, #96]	; (4076a0 <getALSfromVEML+0xe8>)
  40763e:	4b19      	ldr	r3, [pc, #100]	; (4076a4 <getALSfromVEML+0xec>)
  407640:	601a      	str	r2, [r3, #0]
		data[0]=0x04;//
  407642:	2304      	movs	r3, #4
  407644:	f88d 3004 	strb.w	r3, [sp, #4]
		write_data_L(data,1,0x20,1);
  407648:	464b      	mov	r3, r9
  40764a:	2220      	movs	r2, #32
  40764c:	4649      	mov	r1, r9
  40764e:	a801      	add	r0, sp, #4
  407650:	47c0      	blx	r8
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407652:	616f      	str	r7, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407654:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407658:	616e      	str	r6, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40765a:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		SENS_SCL_FLOAT;
 		SENS_SDA_FLOAT;
		for(iters=0;iters<3;iters++)data[iters]=0;//ZERO the buffer
  40765e:	f88d 4004 	strb.w	r4, [sp, #4]
  407662:	f88d 4005 	strb.w	r4, [sp, #5]
  407666:	f88d 4006 	strb.w	r4, [sp, #6]
 		read_bytes_L(data,2,0x20);
  40766a:	2220      	movs	r2, #32
  40766c:	4659      	mov	r1, fp
  40766e:	a801      	add	r0, sp, #4
  407670:	4b0d      	ldr	r3, [pc, #52]	; (4076a8 <getALSfromVEML+0xf0>)
  407672:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407674:	616f      	str	r7, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407676:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40767a:	616e      	str	r6, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40767c:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		SENS_SCL_FLOAT;
 		SENS_SDA_FLOAT;
		lightMeasurement = (data[1] << 4) + (data[0]>>4);
  407680:	f89d 0005 	ldrb.w	r0, [sp, #5]
  407684:	f89d 3004 	ldrb.w	r3, [sp, #4]
  407688:	091b      	lsrs	r3, r3, #4
	return(lightMeasurement);
}
  40768a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  40768e:	b003      	add	sp, #12
  407690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407694:	400e1200 	.word	0x400e1200
  407698:	004d2b25 	.word	0x004d2b25
  40769c:	2040008d 	.word	0x2040008d
  4076a0:	a5000001 	.word	0xa5000001
  4076a4:	400e1850 	.word	0x400e1850
  4076a8:	00401905 	.word	0x00401905
  4076ac:	00401965 	.word	0x00401965

004076b0 <mult64bit>:
		return (((compTemperature<<16)&0xFFFF0000)+(compPressure&0x0000FFFF));
 }
/***********************************************************************/
/*  32 x 32 = 64 bit MULTIPLY
***********************************************************************/
void mult64bit (unsigned int A32,unsigned int B32,unsigned int* resultHigh, unsigned int* resultLow) {
  4076b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int Ahigh,Alow,Bhigh,Blow,BLALL,BLALH,BLAHL,BLAHH,BHALL,BHALH,BHAH,carry;
	Ahigh=(A32>>16)&0x0000FFFF;
  4076b2:	0c04      	lsrs	r4, r0, #16
	Alow=A32&0x0000FFFF;
  4076b4:	b280      	uxth	r0, r0
	Bhigh=(B32>>16)&0x0000FFFF;
  4076b6:	0c0e      	lsrs	r6, r1, #16
	Blow=B32&0x0000FFFF;
  4076b8:	b289      	uxth	r1, r1

	BLALH=Blow*Alow;
  4076ba:	fb01 f700 	mul.w	r7, r1, r0
	BLALL=BLALH;
	BLALH=(BLALH>>16)&0x0000FFFF;
	BLALL&=0x0000FFFF;

	BLAHH=Blow*Ahigh;
  4076be:	fb01 f104 	mul.w	r1, r1, r4
	BLAHL=BLAHH;
	BLAHH=(BLAHH>>16)&0x0000FFFF;
	BLAHL&=0x0000FFFF;
	BHALH=Bhigh*Alow;
  4076c2:	fb06 f000 	mul.w	r0, r6, r0
	BLAHL&=0x0000FFFF;
  4076c6:	b28d      	uxth	r5, r1
	BHALL=BHALH;
	BHALH=(BHALH>>16)&0x0000FFFF;
	BHALL&=0x0000FFFF;
	BHAH=Bhigh*Ahigh;
	carry=((BLALH+BLAHL+BHALL)&0xFFFF0000)>>16;
  4076c8:	eb05 4517 	add.w	r5, r5, r7, lsr #16
  4076cc:	fa15 f580 	uxtah	r5, r5, r0

	*resultLow=((BLALH+BLAHL+BHALL)<<16)+BLALL;
  4076d0:	ea4f 4e05 	mov.w	lr, r5, lsl #16
  4076d4:	fa1e f787 	uxtah	r7, lr, r7
  4076d8:	601f      	str	r7, [r3, #0]
	BHALH=(BHALH>>16)&0x0000FFFF;
  4076da:	0c00      	lsrs	r0, r0, #16
	*resultHigh=BLAHH+BHALH+BHAH + carry;
  4076dc:	eb00 4011 	add.w	r0, r0, r1, lsr #16
  4076e0:	fb06 0004 	mla	r0, r6, r4, r0
  4076e4:	eb00 4015 	add.w	r0, r0, r5, lsr #16
  4076e8:	6010      	str	r0, [r2, #0]
  4076ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

004076ec <getAltimeterTemperatureTE>:
unsigned int getAltimeterTemperatureTE(char slaveAddr){
  4076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4076f0:	b08f      	sub	sp, #60	; 0x3c
		pmc_enable_periph_clk(ID_PIOD);
  4076f2:	2010      	movs	r0, #16
  4076f4:	4bb3      	ldr	r3, [pc, #716]	; (4079c4 <getAltimeterTemperatureTE+0x2d8>)
  4076f6:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4076f8:	4fb3      	ldr	r7, [pc, #716]	; (4079c8 <getAltimeterTemperatureTE+0x2dc>)
  4076fa:	f44f 7300 	mov.w	r3, #512	; 0x200
  4076fe:	617b      	str	r3, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407700:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407704:	f44f 7380 	mov.w	r3, #256	; 0x100
  407708:	617b      	str	r3, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40770a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40770e:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 4079ec <getAltimeterTemperatureTE+0x300>
  407712:	f04f 0b40 	mov.w	fp, #64	; 0x40
  407716:	f8ca b010 	str.w	fp, [sl, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40771a:	f8ca b0a0 	str.w	fp, [sl, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40771e:	f8ca b034 	str.w	fp, [sl, #52]	; 0x34
		delay_ms(20);//looked fine even at only 1ms (when repeated every 500ms);
  407722:	48aa      	ldr	r0, [pc, #680]	; (4079cc <getAltimeterTemperatureTE+0x2e0>)
  407724:	4daa      	ldr	r5, [pc, #680]	; (4079d0 <getAltimeterTemperatureTE+0x2e4>)
  407726:	47a8      	blx	r5
		data[0]=0x1E;//Altimeter RESET
  407728:	ab0e      	add	r3, sp, #56	; 0x38
  40772a:	461a      	mov	r2, r3
  40772c:	231e      	movs	r3, #30
  40772e:	f802 3d18 	strb.w	r3, [r2, #-24]!
  407732:	4610      	mov	r0, r2
		writeRet = write_data_L(data,1,0xEE,0);
  407734:	2300      	movs	r3, #0
  407736:	22ee      	movs	r2, #238	; 0xee
  407738:	2101      	movs	r1, #1
  40773a:	4681      	mov	r9, r0
  40773c:	4ea5      	ldr	r6, [pc, #660]	; (4079d4 <getAltimeterTemperatureTE+0x2e8>)
  40773e:	47b0      	blx	r6
		delay_ms(4);//datasheet says 2.8ms needed after reset
  407740:	48a5      	ldr	r0, [pc, #660]	; (4079d8 <getAltimeterTemperatureTE+0x2ec>)
  407742:	47a8      	blx	r5
		data[0]=0xA2;//Ax=read PROM
  407744:	23a2      	movs	r3, #162	; 0xa2
  407746:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_L(data,1,0xEE,0);
  40774a:	2300      	movs	r3, #0
  40774c:	22ee      	movs	r2, #238	; 0xee
  40774e:	2101      	movs	r1, #1
  407750:	4648      	mov	r0, r9
  407752:	47b0      	blx	r6
		data[0]=0;data[1]=0;
  407754:	2400      	movs	r4, #0
  407756:	f88d 4020 	strb.w	r4, [sp, #32]
  40775a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		readRet = read_bytes_L(data,2,0xEE);
  40775e:	22ee      	movs	r2, #238	; 0xee
  407760:	2102      	movs	r1, #2
  407762:	4648      	mov	r0, r9
  407764:	f8df 8288 	ldr.w	r8, [pc, #648]	; 4079f0 <getAltimeterTemperatureTE+0x304>
  407768:	47c0      	blx	r8
		C1=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  40776a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  40776e:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
  407772:	eb01 2303 	add.w	r3, r1, r3, lsl #8
  407776:	9302      	str	r3, [sp, #8]
		data[0]=0xA4;//Ax=read PROM
  407778:	23a4      	movs	r3, #164	; 0xa4
  40777a:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_L(data,1,0xEE,0);
  40777e:	4623      	mov	r3, r4
  407780:	22ee      	movs	r2, #238	; 0xee
  407782:	2101      	movs	r1, #1
  407784:	4648      	mov	r0, r9
  407786:	47b0      	blx	r6
		data[0]=0;data[1]=0;
  407788:	f88d 4020 	strb.w	r4, [sp, #32]
  40778c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		readRet = read_bytes_L(data,2,0xEE);
  407790:	22ee      	movs	r2, #238	; 0xee
  407792:	2102      	movs	r1, #2
  407794:	4648      	mov	r0, r9
  407796:	47c0      	blx	r8
		C2=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  407798:	f89d 2020 	ldrb.w	r2, [sp, #32]
  40779c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  4077a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  4077a4:	9303      	str	r3, [sp, #12]
		data[0]=0xA6;//Ax=read PROM
  4077a6:	23a6      	movs	r3, #166	; 0xa6
  4077a8:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_L(data,1,0xEE,0);
  4077ac:	4623      	mov	r3, r4
  4077ae:	22ee      	movs	r2, #238	; 0xee
  4077b0:	2101      	movs	r1, #1
  4077b2:	4648      	mov	r0, r9
  4077b4:	47b0      	blx	r6
		data[0]=0;data[1]=0;
  4077b6:	f88d 4020 	strb.w	r4, [sp, #32]
  4077ba:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		readRet = read_bytes_L(data,2,0xEE);
  4077be:	22ee      	movs	r2, #238	; 0xee
  4077c0:	2102      	movs	r1, #2
  4077c2:	4648      	mov	r0, r9
  4077c4:	47c0      	blx	r8
		C3=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  4077c6:	f89d 2020 	ldrb.w	r2, [sp, #32]
  4077ca:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  4077ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  4077d2:	9304      	str	r3, [sp, #16]
		data[0]=0xA8;//Ax=read PROM
  4077d4:	23a8      	movs	r3, #168	; 0xa8
  4077d6:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_L(data,1,0xEE,0);
  4077da:	4623      	mov	r3, r4
  4077dc:	22ee      	movs	r2, #238	; 0xee
  4077de:	2101      	movs	r1, #1
  4077e0:	4648      	mov	r0, r9
  4077e2:	47b0      	blx	r6
		data[0]=0;data[1]=0;
  4077e4:	f88d 4020 	strb.w	r4, [sp, #32]
  4077e8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		readRet = read_bytes_L(data,2,0xEE);
  4077ec:	22ee      	movs	r2, #238	; 0xee
  4077ee:	2102      	movs	r1, #2
  4077f0:	4648      	mov	r0, r9
  4077f2:	47c0      	blx	r8
		C4=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  4077f4:	f89d 2020 	ldrb.w	r2, [sp, #32]
  4077f8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  4077fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  407800:	9305      	str	r3, [sp, #20]
		data[0]=0xAA;//Ax=read PROM
  407802:	23aa      	movs	r3, #170	; 0xaa
  407804:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_L(data,1,0xEE,0);
  407808:	4623      	mov	r3, r4
  40780a:	22ee      	movs	r2, #238	; 0xee
  40780c:	2101      	movs	r1, #1
  40780e:	4648      	mov	r0, r9
  407810:	47b0      	blx	r6
		data[0]=0;data[1]=0;
  407812:	f88d 4020 	strb.w	r4, [sp, #32]
  407816:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		readRet = read_bytes_L(data,2,0xEE);
  40781a:	22ee      	movs	r2, #238	; 0xee
  40781c:	2102      	movs	r1, #2
  40781e:	4648      	mov	r0, r9
  407820:	47c0      	blx	r8
		C5=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  407822:	f89d 2020 	ldrb.w	r2, [sp, #32]
  407826:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  40782a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40782e:	9306      	str	r3, [sp, #24]
		data[0]=0xAC;//Ax=read PROM
  407830:	23ac      	movs	r3, #172	; 0xac
  407832:	f88d 3020 	strb.w	r3, [sp, #32]
		writeRet = write_data_L(data,1,0xEE,0);
  407836:	4623      	mov	r3, r4
  407838:	22ee      	movs	r2, #238	; 0xee
  40783a:	2101      	movs	r1, #1
  40783c:	4648      	mov	r0, r9
  40783e:	47b0      	blx	r6
		data[0]=0;data[1]=0;
  407840:	f88d 4020 	strb.w	r4, [sp, #32]
  407844:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		readRet = read_bytes_L(data,2,0xEE);
  407848:	22ee      	movs	r2, #238	; 0xee
  40784a:	2102      	movs	r1, #2
  40784c:	4648      	mov	r0, r9
  40784e:	47c0      	blx	r8
		C6=(((unsigned int)data[0])<<8)+(((unsigned int)data[1]));
  407850:	f89d 2020 	ldrb.w	r2, [sp, #32]
  407854:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  407858:	eb03 2202 	add.w	r2, r3, r2, lsl #8
  40785c:	9207      	str	r2, [sp, #28]
			data[0]=0x48;//48=start conversion of 24 bit pressure
  40785e:	2348      	movs	r3, #72	; 0x48
  407860:	f88d 3020 	strb.w	r3, [sp, #32]
			writeRet = write_data_L(data,1,0xEE,0);
  407864:	4623      	mov	r3, r4
  407866:	22ee      	movs	r2, #238	; 0xee
  407868:	2101      	movs	r1, #1
  40786a:	4648      	mov	r0, r9
  40786c:	47b0      	blx	r6
			delay_ms(9);//datasheet says 8ms delay for 4096 OverSampling (OSR) bits
  40786e:	485b      	ldr	r0, [pc, #364]	; (4079dc <getAltimeterTemperatureTE+0x2f0>)
  407870:	47a8      	blx	r5
			data[0]=0x00;//00=Read Command
  407872:	f88d 4020 	strb.w	r4, [sp, #32]
			writeRet = write_data_L(data,1,0xEE,0);
  407876:	4623      	mov	r3, r4
  407878:	22ee      	movs	r2, #238	; 0xee
  40787a:	2101      	movs	r1, #1
  40787c:	4648      	mov	r0, r9
  40787e:	47b0      	blx	r6
			data[0]=0;data[1]=0;data[2]=0;
  407880:	f88d 4020 	strb.w	r4, [sp, #32]
  407884:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  407888:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
			readRet = read_bytes_L(data,3,0xEE);
  40788c:	22ee      	movs	r2, #238	; 0xee
  40788e:	2103      	movs	r1, #3
  407890:	f8cd 9004 	str.w	r9, [sp, #4]
  407894:	4648      	mov	r0, r9
  407896:	47c0      	blx	r8
			rawPressure+=(((int)data[0])<<16)+(((int)data[1])<<8)+(((int)data[2]));
  407898:	f89d 3020 	ldrb.w	r3, [sp, #32]
  40789c:	f89d 9021 	ldrb.w	r9, [sp, #33]	; 0x21
  4078a0:	ea4f 2909 	mov.w	r9, r9, lsl #8
  4078a4:	eb09 4903 	add.w	r9, r9, r3, lsl #16
  4078a8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
  4078ac:	4499      	add	r9, r3
			data[0]=0x58;//58=start conversion of 24 bit temperature
  4078ae:	2358      	movs	r3, #88	; 0x58
  4078b0:	f88d 3020 	strb.w	r3, [sp, #32]
			writeRet = write_data_L(data,1,0xEE,0);
  4078b4:	4623      	mov	r3, r4
  4078b6:	22ee      	movs	r2, #238	; 0xee
  4078b8:	2101      	movs	r1, #1
  4078ba:	9801      	ldr	r0, [sp, #4]
  4078bc:	47b0      	blx	r6
			delay_ms(9);
  4078be:	4847      	ldr	r0, [pc, #284]	; (4079dc <getAltimeterTemperatureTE+0x2f0>)
  4078c0:	47a8      	blx	r5
			data[0]=0x00;//00=Read Command
  4078c2:	f88d 4020 	strb.w	r4, [sp, #32]
			writeRet = write_data_L(data,1,0xEE,0);
  4078c6:	4623      	mov	r3, r4
  4078c8:	22ee      	movs	r2, #238	; 0xee
  4078ca:	2101      	movs	r1, #1
  4078cc:	9d01      	ldr	r5, [sp, #4]
  4078ce:	4628      	mov	r0, r5
  4078d0:	47b0      	blx	r6
			data[0]=0;data[1]=0;data[2]=0;
  4078d2:	f88d 4020 	strb.w	r4, [sp, #32]
  4078d6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  4078da:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
			readRet = read_bytes_L(data,3,0xEE);
  4078de:	22ee      	movs	r2, #238	; 0xee
  4078e0:	2103      	movs	r1, #3
  4078e2:	4628      	mov	r0, r5
  4078e4:	47c0      	blx	r8
			rawTemperature+=(((unsigned int)data[0])<<16)+(((unsigned int)data[1])<<8)+(((unsigned int)data[2]));
  4078e6:	f89d 3020 	ldrb.w	r3, [sp, #32]
  4078ea:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
  4078ee:	022d      	lsls	r5, r5, #8
  4078f0:	eb05 4503 	add.w	r5, r5, r3, lsl #16
  4078f4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
  4078f8:	441d      	add	r5, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4078fa:	f44f 7200 	mov.w	r2, #512	; 0x200
  4078fe:	617a      	str	r2, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407900:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407904:	f44f 7280 	mov.w	r2, #256	; 0x100
  407908:	617a      	str	r2, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40790a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40790e:	f8ca b010 	str.w	fp, [sl, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407912:	f8ca b0a0 	str.w	fp, [sl, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407916:	f8ca b030 	str.w	fp, [sl, #48]	; 0x30
			C5=C5<<8;
  40791a:	9b06      	ldr	r3, [sp, #24]
  40791c:	021b      	lsls	r3, r3, #8
			if(rawTemperature>C5){
  40791e:	429d      	cmp	r5, r3
  407920:	d868      	bhi.n	4079f4 <getAltimeterTemperatureTE+0x308>
					dT=C5-rawTemperature;//dT is negative
  407922:	1b5d      	subs	r5, r3, r5
					mult64bit(dT,C6,&HH64,&LL64);//28325
  407924:	ab0c      	add	r3, sp, #48	; 0x30
  407926:	aa0d      	add	r2, sp, #52	; 0x34
  407928:	9907      	ldr	r1, [sp, #28]
  40792a:	4628      	mov	r0, r5
  40792c:	4c2c      	ldr	r4, [pc, #176]	; (4079e0 <getAltimeterTemperatureTE+0x2f4>)
  40792e:	47a0      	blx	r4
					below20 = ((int)((LL64>>23)+(HH64<<9)));
  407930:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  407932:	0264      	lsls	r4, r4, #9
  407934:	980c      	ldr	r0, [sp, #48]	; 0x30
  407936:	eb04 54d0 	add.w	r4, r4, r0, lsr #23
						compTemperature = 0-(below20-2000);
  40793a:	f5c4 64fa 	rsb	r4, r4, #2000	; 0x7d0
						mult64bit(C4,dT,&HH64,&LL64);
  40793e:	ab0c      	add	r3, sp, #48	; 0x30
  407940:	aa0d      	add	r2, sp, #52	; 0x34
  407942:	4629      	mov	r1, r5
  407944:	9805      	ldr	r0, [sp, #20]
  407946:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4079e0 <getAltimeterTemperatureTE+0x2f4>
  40794a:	47c0      	blx	r8
						OFF_L+=(HH64<<25);
  40794c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40794e:	067e      	lsls	r6, r7, #25
  407950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407952:	eb06 16d3 	add.w	r6, r6, r3, lsr #7
						mult64bit(C3,dT,&HH64,&LL64);
  407956:	ab0c      	add	r3, sp, #48	; 0x30
  407958:	aa0d      	add	r2, sp, #52	; 0x34
  40795a:	4629      	mov	r1, r5
  40795c:	9804      	ldr	r0, [sp, #16]
  40795e:	47c0      	blx	r8
						SENS_L+=(HH64<<24);
  407960:	990d      	ldr	r1, [sp, #52]	; 0x34
  407962:	060b      	lsls	r3, r1, #24
  407964:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407966:	eb03 2312 	add.w	r3, r3, r2, lsr #8
						SENS_LL=SENS_L&0x00007FFF;
  40796a:	f3c3 000e 	ubfx	r0, r3, #0, #15
						SENS_H=(HH64>>8)&0x00FFFFFF;
  40796e:	0a09      	lsrs	r1, r1, #8
						SENS_M=C1-SENS_M;
  407970:	9a02      	ldr	r2, [sp, #8]
  407972:	eba2 4141 	sub.w	r1, r2, r1, lsl #17
  407976:	eba1 31d3 	sub.w	r1, r1, r3, lsr #15
						mult64bit(rawPressure,SENS_L,&HH64,&LL64);
  40797a:	ab0c      	add	r3, sp, #48	; 0x30
  40797c:	aa0d      	add	r2, sp, #52	; 0x34
  40797e:	eb00 31c1 	add.w	r1, r0, r1, lsl #15
  407982:	4648      	mov	r0, r9
  407984:	47c0      	blx	r8
						compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  407986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407988:	02db      	lsls	r3, r3, #11
  40798a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40798c:	eb03 5352 	add.w	r3, r3, r2, lsr #21
						OFF_LL=OFF_L&0x0000FFFF;
  407990:	b2b2      	uxth	r2, r6
						compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  407992:	1a9b      	subs	r3, r3, r2
						OFF_H=(HH64>>7)&0x01FFFFFF;
  407994:	09ff      	lsrs	r7, r7, #7
						OFF_M=C2-OFF_M;
  407996:	9a03      	ldr	r2, [sp, #12]
  407998:	eba2 4707 	sub.w	r7, r2, r7, lsl #16
  40799c:	eba7 4616 	sub.w	r6, r7, r6, lsr #16
						compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  4079a0:	eba3 4306 	sub.w	r3, r3, r6, lsl #16
  4079a4:	0bdb      	lsrs	r3, r3, #15
		compTemperature/=10;
  4079a6:	480f      	ldr	r0, [pc, #60]	; (4079e4 <getAltimeterTemperatureTE+0x2f8>)
  4079a8:	fb80 2004 	smull	r2, r0, r0, r4
  4079ac:	17e4      	asrs	r4, r4, #31
  4079ae:	ebc4 00a0 	rsb	r0, r4, r0, asr #2
		compPressure/=10;
  4079b2:	4e0d      	ldr	r6, [pc, #52]	; (4079e8 <getAltimeterTemperatureTE+0x2fc>)
  4079b4:	fba6 2303 	umull	r2, r3, r6, r3
		return (((compTemperature<<16)&0xFFFF0000)+(compPressure&0x0000FFFF));
  4079b8:	08db      	lsrs	r3, r3, #3
 }
  4079ba:	eb03 4000 	add.w	r0, r3, r0, lsl #16
  4079be:	b00f      	add	sp, #60	; 0x3c
  4079c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4079c4:	00403575 	.word	0x00403575
  4079c8:	400e1200 	.word	0x400e1200
  4079cc:	000f6f08 	.word	0x000f6f08
  4079d0:	2040008d 	.word	0x2040008d
  4079d4:	00401965 	.word	0x00401965
  4079d8:	00031635 	.word	0x00031635
  4079dc:	0006f1f7 	.word	0x0006f1f7
  4079e0:	004076b1 	.word	0x004076b1
  4079e4:	66666667 	.word	0x66666667
  4079e8:	cccccccd 	.word	0xcccccccd
  4079ec:	400e0e00 	.word	0x400e0e00
  4079f0:	00401905 	.word	0x00401905
				dT=rawTemperature-C5;//dT is positive
  4079f4:	1aed      	subs	r5, r5, r3
				mult64bit(dT,C6,&HH64,&LL64);
  4079f6:	ab0c      	add	r3, sp, #48	; 0x30
  4079f8:	aa0d      	add	r2, sp, #52	; 0x34
  4079fa:	9907      	ldr	r1, [sp, #28]
  4079fc:	4628      	mov	r0, r5
  4079fe:	4e1b      	ldr	r6, [pc, #108]	; (407a6c <getAltimeterTemperatureTE+0x380>)
  407a00:	47b0      	blx	r6
				compTemperature=((int)((LL64>>23)+(HH64<<9)))+2000;
  407a02:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  407a04:	0264      	lsls	r4, r4, #9
  407a06:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a08:	eb04 54d0 	add.w	r4, r4, r0, lsr #23
  407a0c:	f504 64fa 	add.w	r4, r4, #2000	; 0x7d0
				mult64bit(C4,dT,&HH64,&LL64);
  407a10:	ab0c      	add	r3, sp, #48	; 0x30
  407a12:	aa0d      	add	r2, sp, #52	; 0x34
  407a14:	4629      	mov	r1, r5
  407a16:	9805      	ldr	r0, [sp, #20]
  407a18:	47b0      	blx	r6
				OFF_L+=(HH64<<25);
  407a1a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  407a1c:	067f      	lsls	r7, r7, #25
  407a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407a20:	eb07 17d3 	add.w	r7, r7, r3, lsr #7
				mult64bit(C3,dT,&HH64,&LL64);
  407a24:	ab0c      	add	r3, sp, #48	; 0x30
  407a26:	aa0d      	add	r2, sp, #52	; 0x34
  407a28:	4629      	mov	r1, r5
  407a2a:	9804      	ldr	r0, [sp, #16]
  407a2c:	47b0      	blx	r6
				SENS_L+=(HH64<<24);
  407a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407a30:	061b      	lsls	r3, r3, #24
  407a32:	990c      	ldr	r1, [sp, #48]	; 0x30
  407a34:	eb03 2311 	add.w	r3, r3, r1, lsr #8
				SENS_LL=SENS_L&0x00007FFF;
  407a38:	f3c3 000e 	ubfx	r0, r3, #0, #15
				SENS_M=(SENS_H<<17)+(SENS_L>>15)+C1;
  407a3c:	9a02      	ldr	r2, [sp, #8]
  407a3e:	eb02 31d3 	add.w	r1, r2, r3, lsr #15
				mult64bit(rawPressure,SENS_L,&HH64,&LL64);
  407a42:	ab0c      	add	r3, sp, #48	; 0x30
  407a44:	aa0d      	add	r2, sp, #52	; 0x34
  407a46:	eb00 31c1 	add.w	r1, r0, r1, lsl #15
  407a4a:	4648      	mov	r0, r9
  407a4c:	47b0      	blx	r6
				compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  407a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407a50:	02db      	lsls	r3, r3, #11
  407a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407a54:	eb03 5352 	add.w	r3, r3, r2, lsr #21
				OFF_LL=OFF_L&0x0000FFFF;
  407a58:	b2ba      	uxth	r2, r7
				compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  407a5a:	1a9b      	subs	r3, r3, r2
				OFF_M=(OFF_H<<16)+(OFF_L>>16)+C2;
  407a5c:	9a03      	ldr	r2, [sp, #12]
  407a5e:	eb02 4717 	add.w	r7, r2, r7, lsr #16
				compPressure=(((LL64>>21)+(HH64<<11))-(OFF_L))>>15;//assumes OFF_H==0
  407a62:	eba3 4307 	sub.w	r3, r3, r7, lsl #16
  407a66:	0bdb      	lsrs	r3, r3, #15
  407a68:	e79d      	b.n	4079a6 <getAltimeterTemperatureTE+0x2ba>
  407a6a:	bf00      	nop
  407a6c:	004076b1 	.word	0x004076b1

00407a70 <getSetDeviceID>:
	ioport_set_pin_mode(BigTiny_DAT, 0);//BigTiny DAT
}
 /***********************************************************************/
 /*  READ ATMEL'S UNIQUE CHIP ID
 ***********************************************************************/
void getSetDeviceID(void){
  407a70:	b500      	push	{lr}
  407a72:	b085      	sub	sp, #20
	char rdIDerr;
	int unique_id[4];
	rdIDerr = flash_read_unique_id(unique_id, 4);
  407a74:	2104      	movs	r1, #4
  407a76:	4668      	mov	r0, sp
  407a78:	4b17      	ldr	r3, [pc, #92]	; (407ad8 <getSetDeviceID+0x68>)
  407a7a:	4798      	blx	r3
	if (rdIDerr != FLASH_RC_OK) {
  407a7c:	b2c0      	uxtb	r0, r0
  407a7e:	bb20      	cbnz	r0, 407aca <getSetDeviceID+0x5a>
		LCDclear();
		printf("UniqueID error");
	}
	DEVICEID[0]=(char)(unique_id[0]>>24);
  407a80:	9a00      	ldr	r2, [sp, #0]
  407a82:	4b16      	ldr	r3, [pc, #88]	; (407adc <getSetDeviceID+0x6c>)
  407a84:	1611      	asrs	r1, r2, #24
  407a86:	7019      	strb	r1, [r3, #0]
	DEVICEID[1]=(char)((unique_id[0]>>16)&0x00FF);
  407a88:	1411      	asrs	r1, r2, #16
  407a8a:	7059      	strb	r1, [r3, #1]
	DEVICEID[2]=(char)((unique_id[0]>>8)&0x00FF);
  407a8c:	1212      	asrs	r2, r2, #8
  407a8e:	709a      	strb	r2, [r3, #2]
	DEVICEID[3]=0x30;//(char)(unique_id[0]&0x00FF);
  407a90:	2230      	movs	r2, #48	; 0x30
  407a92:	70da      	strb	r2, [r3, #3]
	DEVICEID[4]=(char)(unique_id[1]>>24);
  407a94:	9a01      	ldr	r2, [sp, #4]
  407a96:	1611      	asrs	r1, r2, #24
  407a98:	7119      	strb	r1, [r3, #4]
	DEVICEID[5]=(char)((unique_id[1]>>16)&0x00FF);
  407a9a:	1411      	asrs	r1, r2, #16
  407a9c:	7159      	strb	r1, [r3, #5]
	DEVICEID[6]=(char)((unique_id[1]>>8)&0x00FF);
  407a9e:	1211      	asrs	r1, r2, #8
  407aa0:	7199      	strb	r1, [r3, #6]
	DEVICEID[7]=(char)(unique_id[1]&0x00FF);
  407aa2:	71da      	strb	r2, [r3, #7]
	DEVICEID[8]=(char)(unique_id[2]>>24);
  407aa4:	9a02      	ldr	r2, [sp, #8]
  407aa6:	1611      	asrs	r1, r2, #24
  407aa8:	7219      	strb	r1, [r3, #8]
	DEVICEID[9]=(char)((unique_id[2]>>16)&0x00FF);
  407aaa:	1411      	asrs	r1, r2, #16
  407aac:	7259      	strb	r1, [r3, #9]
	DEVICEID[10]=(char)((unique_id[2]>>8)&0x00FF);
  407aae:	1211      	asrs	r1, r2, #8
  407ab0:	7299      	strb	r1, [r3, #10]
	DEVICEID[11]=(char)(unique_id[2]&0x00FF);
  407ab2:	72da      	strb	r2, [r3, #11]
	DEVICEID[12]=(char)(unique_id[3]>>24);
  407ab4:	9a03      	ldr	r2, [sp, #12]
  407ab6:	1611      	asrs	r1, r2, #24
  407ab8:	7319      	strb	r1, [r3, #12]
	DEVICEID[13]=(char)((unique_id[3]>>16)&0x00FF);
  407aba:	1411      	asrs	r1, r2, #16
  407abc:	7359      	strb	r1, [r3, #13]
	DEVICEID[14]=(char)((unique_id[3]>>8)&0x00FF);
  407abe:	1211      	asrs	r1, r2, #8
  407ac0:	7399      	strb	r1, [r3, #14]
	DEVICEID[15]=(char)(unique_id[3]&0x00FF);
  407ac2:	73da      	strb	r2, [r3, #15]
}
  407ac4:	b005      	add	sp, #20
  407ac6:	f85d fb04 	ldr.w	pc, [sp], #4
		LCDclear();
  407aca:	4b05      	ldr	r3, [pc, #20]	; (407ae0 <getSetDeviceID+0x70>)
  407acc:	4798      	blx	r3
		printf("UniqueID error");
  407ace:	4805      	ldr	r0, [pc, #20]	; (407ae4 <getSetDeviceID+0x74>)
  407ad0:	4b05      	ldr	r3, [pc, #20]	; (407ae8 <getSetDeviceID+0x78>)
  407ad2:	4798      	blx	r3
  407ad4:	e7d4      	b.n	407a80 <getSetDeviceID+0x10>
  407ad6:	bf00      	nop
  407ad8:	004046e9 	.word	0x004046e9
  407adc:	20400fa8 	.word	0x20400fa8
  407ae0:	00406ed5 	.word	0x00406ed5
  407ae4:	0040ee04 	.word	0x0040ee04
  407ae8:	0040b671 	.word	0x0040b671

00407aec <configPinsSDRAM>:
	}
}
/***********************************************************************
 *    CONFIGURE SDRAM PINS
 ***********************************************************************/
void configPinsSDRAM(void){
  407aec:	b510      	push	{r4, lr}
	pio_configure_pin(SDRAM_A0_PIO, SDRAM_A_FLAGS);	//V71 A2
  407aee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407af2:	2054      	movs	r0, #84	; 0x54
  407af4:	4c4d      	ldr	r4, [pc, #308]	; (407c2c <configPinsSDRAM+0x140>)
  407af6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A1_PIO, SDRAM_A_FLAGS);	//V71 A3
  407af8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407afc:	2055      	movs	r0, #85	; 0x55
  407afe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);	//V71 A4
  407b00:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407b04:	2056      	movs	r0, #86	; 0x56
  407b06:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  //V71 A5
  407b08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407b0c:	2057      	movs	r0, #87	; 0x57
  407b0e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  //V71 A6
  407b10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407b14:	2058      	movs	r0, #88	; 0x58
  407b16:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  //V71 A7
  407b18:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407b1c:	2059      	movs	r0, #89	; 0x59
  407b1e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  //V71 A8
  407b20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407b24:	205a      	movs	r0, #90	; 0x5a
  407b26:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  //V71 A9
  407b28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407b2c:	205b      	movs	r0, #91	; 0x5b
  407b2e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);	 //V71 A10
  407b30:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407b34:	205c      	movs	r0, #92	; 0x5c
  407b36:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  //V71 A11
  407b38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407b3c:	205d      	movs	r0, #93	; 0x5d
  407b3e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS); //V71 SDA10
  407b40:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  407b44:	206d      	movs	r0, #109	; 0x6d
  407b46:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A13_FLAGS); //V71 A13
  407b48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407b4c:	205f      	movs	r0, #95	; 0x5f
  407b4e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A12_PIO, SDRAM_A14_FLAGS); //V71 A14
  407b50:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  407b54:	2012      	movs	r0, #18
  407b56:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  407b58:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  407b5c:	2014      	movs	r0, #20
  407b5e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_BA1_PIO, SDRAM_BA1_FLAGS);
  407b60:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  407b64:	2000      	movs	r0, #0
  407b66:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  407b68:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  407b6c:	2077      	movs	r0, #119	; 0x77
  407b6e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  407b70:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  407b74:	206e      	movs	r0, #110	; 0x6e
  407b76:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  407b78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407b7c:	204f      	movs	r0, #79	; 0x4f
  407b7e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  407b80:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  407b84:	2070      	movs	r0, #112	; 0x70
  407b86:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  407b88:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  407b8c:	2071      	movs	r0, #113	; 0x71
  407b8e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  407b90:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  407b94:	207d      	movs	r0, #125	; 0x7d
  407b96:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  407b98:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407b9c:	2052      	movs	r0, #82	; 0x52
  407b9e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  407ba0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  407ba4:	206f      	movs	r0, #111	; 0x6f
  407ba6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);
  407ba8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407bac:	2040      	movs	r0, #64	; 0x40
  407bae:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);
  407bb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407bb4:	2041      	movs	r0, #65	; 0x41
  407bb6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);
  407bb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407bbc:	2042      	movs	r0, #66	; 0x42
  407bbe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);
  407bc0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407bc4:	2043      	movs	r0, #67	; 0x43
  407bc6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);
  407bc8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407bcc:	2044      	movs	r0, #68	; 0x44
  407bce:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);
  407bd0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407bd4:	2045      	movs	r0, #69	; 0x45
  407bd6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);
  407bd8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407bdc:	2046      	movs	r0, #70	; 0x46
  407bde:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);
  407be0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407be4:	2047      	movs	r0, #71	; 0x47
  407be6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);
  407be8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407bec:	2080      	movs	r0, #128	; 0x80
  407bee:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);
  407bf0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407bf4:	2081      	movs	r0, #129	; 0x81
  407bf6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS);
  407bf8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407bfc:	2082      	movs	r0, #130	; 0x82
  407bfe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS);
  407c00:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407c04:	2083      	movs	r0, #131	; 0x83
  407c06:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS);
  407c08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407c0c:	2084      	movs	r0, #132	; 0x84
  407c0e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS);
  407c10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407c14:	2085      	movs	r0, #133	; 0x85
  407c16:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS);
  407c18:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407c1c:	200f      	movs	r0, #15
  407c1e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS);
  407c20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407c24:	2010      	movs	r0, #16
  407c26:	47a0      	blx	r4
  407c28:	bd10      	pop	{r4, pc}
  407c2a:	bf00      	nop
  407c2c:	00403271 	.word	0x00403271

00407c30 <redBlink>:
}
 /***********************************************************************/
 /*    Dev Board BLINK ATSAM
 ***********************************************************************/
 void redBlink (int numBlinks) {
  407c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407c34:	4b0f      	ldr	r3, [pc, #60]	; (407c74 <redBlink+0x44>)
  407c36:	2201      	movs	r2, #1
  407c38:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407c3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 int i;
	 ioport_set_pin_dir(LED_RED_GPIO, IOPORT_DIR_OUTPUT);
	 for (i=numBlinks; i>0; i--){
  407c3e:	1e04      	subs	r4, r0, #0
  407c40:	dd10      	ble.n	407c64 <redBlink+0x34>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  407c42:	461e      	mov	r6, r3
  407c44:	4617      	mov	r7, r2
  407c46:	4692      	mov	sl, r2
		 ioport_set_pin_level(LED_RED_GPIO, LED_ACTIVE_LEVEL); //LED ON
		 delay_ms(20);
  407c48:	f8df 9030 	ldr.w	r9, [pc, #48]	; 407c7c <redBlink+0x4c>
  407c4c:	4d0a      	ldr	r5, [pc, #40]	; (407c78 <redBlink+0x48>)
		 ioport_set_pin_level(LED_RED_GPIO, LED_INACTIVE_LEVEL); //LED OFF
		 delay_ms(50);
  407c4e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 407c80 <redBlink+0x50>
  407c52:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		 delay_ms(20);
  407c56:	4648      	mov	r0, r9
  407c58:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407c5a:	6337      	str	r7, [r6, #48]	; 0x30
		 delay_ms(50);
  407c5c:	4640      	mov	r0, r8
  407c5e:	47a8      	blx	r5
	 for (i=numBlinks; i>0; i--){
  407c60:	3c01      	subs	r4, #1
  407c62:	d1f6      	bne.n	407c52 <redBlink+0x22>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407c64:	4b03      	ldr	r3, [pc, #12]	; (407c74 <redBlink+0x44>)
  407c66:	2201      	movs	r2, #1
  407c68:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407c6a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  407c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c72:	bf00      	nop
  407c74:	400e1400 	.word	0x400e1400
  407c78:	2040008d 	.word	0x2040008d
  407c7c:	000f6f08 	.word	0x000f6f08
  407c80:	00269593 	.word	0x00269593

00407c84 <resetPinsSDRAM>:
	printf("\r\n    %d MB\r\n", (uint16_t)(sd_mmc_get_capacity(slot) / 1024));
}
/***********************************************************************
 *    RESET SDRAM PINS
 ***********************************************************************/
void resetPinsSDRAM(void){
  407c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		base->PIO_PUDR = mask;
  407c88:	4bcb      	ldr	r3, [pc, #812]	; (407fb8 <resetPinsSDRAM+0x334>)
  407c8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  407c8e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407c90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407c94:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407c96:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407c9c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  407c9e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  407ca2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407ca4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  407ca6:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  407caa:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407cac:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  407cae:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  407cb2:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407cb4:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407cb8:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407cba:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407cbc:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407cc0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  407cc2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  407cc6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407cc8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  407cca:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  407cce:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407cd0:	601f      	str	r7, [r3, #0]
		base->PIO_PUDR = mask;
  407cd2:	f44f 2680 	mov.w	r6, #262144	; 0x40000
  407cd6:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407cd8:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407cdc:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407cde:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407ce0:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407ce4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  407ce6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
  407cea:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407cec:	6f59      	ldr	r1, [r3, #116]	; 0x74
  407cee:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
  407cf2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407cf4:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  407cf6:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
  407cfa:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407cfc:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407d00:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407d02:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407d04:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407d08:	6f19      	ldr	r1, [r3, #112]	; 0x70
  407d0a:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  407d0e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407d10:	6f59      	ldr	r1, [r3, #116]	; 0x74
  407d12:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  407d16:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407d18:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  407d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  407d1e:	2401      	movs	r4, #1
  407d20:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407d22:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407d26:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407d28:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407d2a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407d2e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  407d30:	f021 0101 	bic.w	r1, r1, #1
  407d34:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407d36:	6f59      	ldr	r1, [r3, #116]	; 0x74
  407d38:	f021 0101 	bic.w	r1, r1, #1
  407d3c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407d3e:	601c      	str	r4, [r3, #0]
		base->PIO_PUDR = mask;
  407d40:	2002      	movs	r0, #2
  407d42:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407d44:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407d48:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407d4a:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407d4c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407d50:	6f19      	ldr	r1, [r3, #112]	; 0x70
  407d52:	f021 0102 	bic.w	r1, r1, #2
  407d56:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407d58:	6f59      	ldr	r1, [r3, #116]	; 0x74
  407d5a:	f021 0102 	bic.w	r1, r1, #2
  407d5e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407d60:	6018      	str	r0, [r3, #0]
		base->PIO_PUDR = mask;
  407d62:	2104      	movs	r1, #4
  407d64:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407d66:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407d6a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407d6c:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407d6e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407d72:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  407d76:	f02e 0e04 	bic.w	lr, lr, #4
  407d7a:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407d7e:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  407d82:	f02e 0e04 	bic.w	lr, lr, #4
  407d86:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407d8a:	6019      	str	r1, [r3, #0]
		base->PIO_PUDR = mask;
  407d8c:	f04f 0e08 	mov.w	lr, #8
  407d90:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407d94:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407d98:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407d9c:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407da0:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407da4:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  407da8:	f02c 0c08 	bic.w	ip, ip, #8
  407dac:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407db0:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  407db4:	f02c 0c08 	bic.w	ip, ip, #8
  407db8:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407dbc:	f8c3 e000 	str.w	lr, [r3]
		base->PIO_PUDR = mask;
  407dc0:	f04f 0c10 	mov.w	ip, #16
  407dc4:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407dc8:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407dcc:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407dd0:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407dd4:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407dd8:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  407ddc:	f028 0810 	bic.w	r8, r8, #16
  407de0:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407de4:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  407de8:	f028 0810 	bic.w	r8, r8, #16
  407dec:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407df0:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  407df4:	f04f 0c20 	mov.w	ip, #32
  407df8:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407dfc:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407e00:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407e04:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407e08:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407e0c:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  407e10:	f028 0820 	bic.w	r8, r8, #32
  407e14:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407e18:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  407e1c:	f028 0820 	bic.w	r8, r8, #32
  407e20:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407e24:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  407e28:	f04f 0c40 	mov.w	ip, #64	; 0x40
  407e2c:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407e30:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407e34:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407e38:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407e3c:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407e40:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  407e44:	f028 0840 	bic.w	r8, r8, #64	; 0x40
  407e48:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407e4c:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  407e50:	f028 0840 	bic.w	r8, r8, #64	; 0x40
  407e54:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407e58:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  407e5c:	f04f 0c80 	mov.w	ip, #128	; 0x80
  407e60:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407e64:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407e68:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407e6c:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407e70:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407e74:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  407e78:	f028 0880 	bic.w	r8, r8, #128	; 0x80
  407e7c:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407e80:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  407e84:	f028 0880 	bic.w	r8, r8, #128	; 0x80
  407e88:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407e8c:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  407e90:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407e92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407e96:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407e98:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407e9e:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  407ea2:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  407ea6:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407eaa:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  407eae:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  407eb2:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407eb6:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  407eb8:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407eba:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407ebe:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407ec0:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407ec2:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407ec6:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  407eca:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  407ece:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407ed2:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  407ed6:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  407eda:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407ede:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  407ee0:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407ee2:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407ee6:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407ee8:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407eea:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407eee:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  407ef0:	f426 1680 	bic.w	r6, r6, #1048576	; 0x100000
  407ef4:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407ef6:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  407ef8:	f426 1680 	bic.w	r6, r6, #1048576	; 0x100000
  407efc:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407efe:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  407f00:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
  407f04:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407f06:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407f0a:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407f0c:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407f0e:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407f12:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  407f14:	f426 1600 	bic.w	r6, r6, #2097152	; 0x200000
  407f18:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407f1a:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  407f1c:	f426 1600 	bic.w	r6, r6, #2097152	; 0x200000
  407f20:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407f22:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  407f24:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  407f28:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407f2a:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407f2e:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407f30:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407f32:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407f36:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  407f38:	f426 0680 	bic.w	r6, r6, #4194304	; 0x400000
  407f3c:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407f3e:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  407f40:	f426 0680 	bic.w	r6, r6, #4194304	; 0x400000
  407f44:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407f46:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  407f48:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
  407f4c:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407f4e:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407f52:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407f54:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407f56:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407f5a:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  407f5c:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
  407f60:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407f62:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  407f64:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
  407f68:	675d      	str	r5, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407f6a:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  407f6c:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  407f70:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407f72:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407f76:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407f78:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407f7a:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407f7e:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  407f82:	f02c 7c80 	bic.w	ip, ip, #16777216	; 0x1000000
  407f86:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407f8a:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  407f8e:	f02c 7c80 	bic.w	ip, ip, #16777216	; 0x1000000
  407f92:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407f96:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  407f98:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  407f9c:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407f9e:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407fa2:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407fa4:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407fa6:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407faa:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  407fae:	f02c 7c00 	bic.w	ip, ip, #33554432	; 0x2000000
  407fb2:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
  407fb6:	e001      	b.n	407fbc <resetPinsSDRAM+0x338>
  407fb8:	400e0e00 	.word	0x400e0e00
		base->PIO_ABCDSR[1] &= ~mask;
  407fbc:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  407fc0:	f02c 7c00 	bic.w	ip, ip, #33554432	; 0x2000000
  407fc4:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407fc8:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  407fca:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  407fce:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407fd0:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407fd4:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407fd6:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407fd8:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407fdc:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  407fe0:	f02c 6c80 	bic.w	ip, ip, #67108864	; 0x4000000
  407fe4:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407fe8:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  407fec:	f02c 6c80 	bic.w	ip, ip, #67108864	; 0x4000000
  407ff0:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  407ff4:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  407ff6:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  407ffa:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407ffc:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408000:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408002:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408004:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408008:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  40800c:	f02c 6c00 	bic.w	ip, ip, #134217728	; 0x8000000
  408010:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408014:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  408018:	f02c 6c00 	bic.w	ip, ip, #134217728	; 0x8000000
  40801c:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408020:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  408022:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408026:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408028:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40802c:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40802e:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408030:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408034:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  408038:	f02c 5c80 	bic.w	ip, ip, #268435456	; 0x10000000
  40803c:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408040:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  408044:	f02c 5c80 	bic.w	ip, ip, #268435456	; 0x10000000
  408048:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40804c:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  40804e:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  408052:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408054:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408058:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40805a:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40805c:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408060:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  408064:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  408068:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40806c:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  408070:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  408074:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408078:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  40807a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40807e:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408082:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408086:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40808a:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40808e:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408092:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  408096:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
  40809a:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40809e:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  4080a2:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
  4080a6:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4080aa:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  4080ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4080b2:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  4080b6:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4080ba:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4080be:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4080c2:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4080c6:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4080ca:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  4080ce:	f428 5800 	bic.w	r8, r8, #8192	; 0x2000
  4080d2:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4080d6:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  4080da:	f428 5800 	bic.w	r8, r8, #8192	; 0x2000
  4080de:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4080e2:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  4080e6:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  4080ea:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4080ee:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4080f2:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4080f6:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4080fa:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4080fe:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  408102:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
  408106:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40810a:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  40810e:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
  408112:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408116:	f8c3 c000 	str.w	ip, [r3]
		base->PIO_PUDR = mask;
  40811a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40811c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408120:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408122:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408128:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  40812c:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  408130:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408134:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  408138:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  40813c:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408140:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  408142:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408144:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408148:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40814a:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40814c:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408150:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408152:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  408156:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408158:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40815a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  40815e:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408160:	601f      	str	r7, [r3, #0]
		base->PIO_PUDR = mask;
  408162:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  408166:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40816c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40816e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408174:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  408176:	f427 3700 	bic.w	r7, r7, #131072	; 0x20000
  40817a:	671f      	str	r7, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40817c:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  40817e:	f427 3700 	bic.w	r7, r7, #131072	; 0x20000
  408182:	675f      	str	r7, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408184:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  408186:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408188:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40818c:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40818e:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408190:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408196:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  40819a:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40819c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40819e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  4081a2:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4081a4:	601e      	str	r6, [r3, #0]
		base->PIO_PUDR = mask;
  4081a6:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4081a8:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4081ac:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4081ae:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4081b0:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4081b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4081b6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  4081ba:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4081bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4081be:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  4081c2:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4081c4:	601d      	str	r5, [r3, #0]
		base->PIO_PUDR = mask;
  4081c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4081ca:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4081cc:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4081d0:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4081d2:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4081d4:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4081d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4081da:	f022 0201 	bic.w	r2, r2, #1
  4081de:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4081e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4081e2:	f022 0201 	bic.w	r2, r2, #1
  4081e6:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4081e8:	601c      	str	r4, [r3, #0]
		base->PIO_PUDR = mask;
  4081ea:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4081ec:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4081f0:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4081f2:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4081f4:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4081f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4081fa:	f022 0202 	bic.w	r2, r2, #2
  4081fe:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408200:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408202:	f022 0202 	bic.w	r2, r2, #2
  408206:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408208:	6018      	str	r0, [r3, #0]
		base->PIO_PUDR = mask;
  40820a:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40820c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408210:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408212:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408214:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408218:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40821a:	f022 0204 	bic.w	r2, r2, #4
  40821e:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408220:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408222:	f022 0204 	bic.w	r2, r2, #4
  408226:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408228:	6019      	str	r1, [r3, #0]
		base->PIO_PUDR = mask;
  40822a:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40822e:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408232:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408236:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40823a:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40823e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408240:	f022 0208 	bic.w	r2, r2, #8
  408244:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408246:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408248:	f022 0208 	bic.w	r2, r2, #8
  40824c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40824e:	f8c3 e000 	str.w	lr, [r3]
		base->PIO_PUDR = mask;
  408252:	2210      	movs	r2, #16
  408254:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408256:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40825a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40825c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40825e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408262:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408264:	f021 0110 	bic.w	r1, r1, #16
  408268:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40826a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40826c:	f021 0110 	bic.w	r1, r1, #16
  408270:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408272:	601a      	str	r2, [r3, #0]
		base->PIO_PUDR = mask;
  408274:	2220      	movs	r2, #32
  408276:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408278:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40827c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40827e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408284:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408286:	f021 0120 	bic.w	r1, r1, #32
  40828a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40828c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40828e:	f021 0120 	bic.w	r1, r1, #32
  408292:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  408294:	601a      	str	r2, [r3, #0]
  408296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40829a:	bf00      	nop

0040829c <closeSDcard>:
	ioport_enable_pin(GPIO_PE5);//Enable normal SDRAM function
}
/***********************************************************************
 *    CLOSE SD CARD
 ***********************************************************************/
void closeSDcard(void){
  40829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  40829e:	4c49      	ldr	r4, [pc, #292]	; (4083c4 <closeSDcard+0x128>)
  4082a0:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
  4082a4:	6626      	str	r6, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4082a6:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4082aa:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4082ac:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4082ae:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4082b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4082b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  4082b8:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4082ba:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4082bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  4082c0:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4082c2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  4082c6:	6625      	str	r5, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4082c8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4082cc:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4082ce:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4082d0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4082d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4082d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  4082da:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4082dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4082de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  4082e2:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4082e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4082e8:	6620      	str	r0, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4082ea:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4082ee:	6560      	str	r0, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4082f0:	6260      	str	r0, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4082f2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4082f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4082f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  4082fc:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4082fe:	6f63      	ldr	r3, [r4, #116]	; 0x74
  408300:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  408304:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  408306:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40830a:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40830c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  408310:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  408312:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408314:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408318:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40831a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40831e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408320:	6f63      	ldr	r3, [r4, #116]	; 0x74
  408322:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  408326:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  408328:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40832c:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40832e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  408332:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  408334:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408336:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40833a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40833c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  408340:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408342:	6f63      	ldr	r3, [r4, #116]	; 0x74
  408344:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  408348:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  40834a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40834e:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408350:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  408354:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  408356:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408358:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40835c:	6f27      	ldr	r7, [r4, #112]	; 0x70
  40835e:	f027 6700 	bic.w	r7, r7, #134217728	; 0x8000000
  408362:	6727      	str	r7, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408364:	6f67      	ldr	r7, [r4, #116]	; 0x74
  408366:	f027 6700 	bic.w	r7, r7, #134217728	; 0x8000000
  40836a:	6767      	str	r7, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40836c:	6026      	str	r6, [r4, #0]
  40836e:	6025      	str	r5, [r4, #0]
  408370:	6020      	str	r0, [r4, #0]
  408372:	6021      	str	r1, [r4, #0]
  408374:	6022      	str	r2, [r4, #0]
  408376:	6023      	str	r3, [r4, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408378:	6126      	str	r6, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40837a:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40837e:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408380:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408384:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408386:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40838a:	6121      	str	r1, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40838c:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408390:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408392:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408396:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408398:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40839c:	6366      	str	r6, [r4, #52]	; 0x34
  40839e:	6365      	str	r5, [r4, #52]	; 0x34
  4083a0:	6360      	str	r0, [r4, #52]	; 0x34
  4083a2:	6361      	str	r1, [r4, #52]	; 0x34
  4083a4:	6362      	str	r2, [r4, #52]	; 0x34
  4083a6:	6363      	str	r3, [r4, #52]	; 0x34
	ioport_set_pin_level(PIN_HSMCI_MCCK_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA0_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA1_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA2_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA3_GPIO,0);
	delay_ms(10);
  4083a8:	4e07      	ldr	r6, [pc, #28]	; (4083c8 <closeSDcard+0x12c>)
  4083aa:	4630      	mov	r0, r6
  4083ac:	4d07      	ldr	r5, [pc, #28]	; (4083cc <closeSDcard+0x130>)
  4083ae:	47a8      	blx	r5
  4083b0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4083b4:	4b06      	ldr	r3, [pc, #24]	; (4083d0 <closeSDcard+0x134>)
  4083b6:	635a      	str	r2, [r3, #52]	; 0x34
  4083b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4083bc:	6363      	str	r3, [r4, #52]	; 0x34
	ioport_set_pin_level(SDCARDPWRC_GPIO, 0);
	ioport_set_pin_level(CPWRC_GPIO,0);
	delay_ms(10);
  4083be:	4630      	mov	r0, r6
  4083c0:	47a8      	blx	r5
  4083c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4083c4:	400e0e00 	.word	0x400e0e00
  4083c8:	0007b784 	.word	0x0007b784
  4083cc:	2040008d 	.word	0x2040008d
  4083d0:	400e1400 	.word	0x400e1400

004083d4 <resetSD>:
}
/***********************************************************************
 *    SSD Card Hardware Reset
 ***********************************************************************/
void resetSD (int offDelay){
  4083d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4083d8:	4b97      	ldr	r3, [pc, #604]	; (408638 <resetSD+0x264>)
  4083da:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4083de:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4083e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4083e4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4083e6:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
  4083ea:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4083ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  4083f2:	f502 2261 	add.w	r2, r2, #921600	; 0xe1000
  4083f6:	f44f 7e80 	mov.w	lr, #256	; 0x100
  4083fa:	f8c2 e010 	str.w	lr, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4083fe:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408402:	f8c2 e034 	str.w	lr, [r2, #52]	; 0x34
		base->PIO_PUDR = mask;
  408406:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  40840a:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40840c:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408410:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408412:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408414:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408418:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40841a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
  40841e:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408420:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408422:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
  408426:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  408428:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  40842c:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40842e:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408432:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408434:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408436:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40843a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40843c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  408440:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408442:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408444:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  408448:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40844a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  40844e:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408450:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408454:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408456:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408458:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40845c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40845e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  408462:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408464:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408466:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  40846a:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40846c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  408470:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408472:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408476:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408478:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40847a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40847e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408480:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  408484:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408486:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408488:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  40848c:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40848e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  408492:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408494:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408498:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40849a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40849c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4084a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4084a2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  4084a6:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4084a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4084aa:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  4084ae:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  4084b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4084b4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4084b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4084ba:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4084bc:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4084be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4084c2:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  4084c6:	f02c 6c00 	bic.w	ip, ip, #134217728	; 0x8000000
  4084ca:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4084ce:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  4084d2:	f02c 6c00 	bic.w	ip, ip, #134217728	; 0x8000000
  4084d6:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4084da:	601f      	str	r7, [r3, #0]
  4084dc:	601e      	str	r6, [r3, #0]
  4084de:	601d      	str	r5, [r3, #0]
  4084e0:	601c      	str	r4, [r3, #0]
  4084e2:	6019      	str	r1, [r3, #0]
  4084e4:	601a      	str	r2, [r3, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4084e6:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4084e8:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4084ec:	611e      	str	r6, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4084ee:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4084f2:	611d      	str	r5, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4084f4:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4084f8:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4084fa:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4084fe:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408500:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408504:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408506:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40850a:	635f      	str	r7, [r3, #52]	; 0x34
  40850c:	635e      	str	r6, [r3, #52]	; 0x34
  40850e:	635d      	str	r5, [r3, #52]	; 0x34
  408510:	635c      	str	r4, [r3, #52]	; 0x34
  408512:	6359      	str	r1, [r3, #52]	; 0x34
  408514:	635a      	str	r2, [r3, #52]	; 0x34
  408516:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40851a:	f8c3 e010 	str.w	lr, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40851e:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408522:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
	ioport_set_pin_level(PIN_HSMCI_MCDA2_GPIO,0);
	ioport_set_pin_level(PIN_HSMCI_MCDA3_GPIO,0);
	ioport_set_pin_level(CPWRC_GPIO,0);
	ioport_set_pin_dir(SRAMPWRC_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SRAMPWRC_GPIO, SRAMPWRC_POWER_OFF);
	delay_ms(offDelay);//needs 300 to drift down to zero
  408526:	2800      	cmp	r0, #0
  408528:	d172      	bne.n	408610 <resetSD+0x23c>
  40852a:	2033      	movs	r0, #51	; 0x33
  40852c:	4b43      	ldr	r3, [pc, #268]	; (40863c <resetSD+0x268>)
  40852e:	4798      	blx	r3
		base->PIO_PUDR = mask;
  408530:	4b41      	ldr	r3, [pc, #260]	; (408638 <resetSD+0x264>)
  408532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  408536:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40853c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40853e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408544:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408546:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  40854a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40854c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40854e:	4311      	orrs	r1, r2
  408550:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  408552:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  408554:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  408558:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40855a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40855e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408560:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  408566:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408568:	4311      	orrs	r1, r2
  40856a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40856c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40856e:	4311      	orrs	r1, r2
  408570:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  408572:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  408574:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  408578:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40857a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40857e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408580:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408586:	6f19      	ldr	r1, [r3, #112]	; 0x70
  408588:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  40858c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40858e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  408590:	4311      	orrs	r1, r2
  408592:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  408594:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  408596:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40859a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40859c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4085a0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4085a2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4085a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4085a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4085aa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4085ae:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4085b0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4085b2:	4311      	orrs	r1, r2
  4085b4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4085b6:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4085b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4085bc:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4085be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4085c2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4085c4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4085c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4085ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4085cc:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  4085d0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4085d2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4085d4:	4311      	orrs	r1, r2
  4085d6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4085d8:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4085da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4085de:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4085e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4085e4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4085e6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4085e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4085ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4085ee:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  4085f2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4085f4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4085f6:	4311      	orrs	r1, r2
  4085f8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4085fa:	605a      	str	r2, [r3, #4]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4085fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  408600:	631a      	str	r2, [r3, #48]	; 0x30
  408602:	f44f 7280 	mov.w	r2, #256	; 0x100
  408606:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  40860a:	631a      	str	r2, [r3, #48]	; 0x30
  40860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408610:	17c5      	asrs	r5, r0, #31
  408612:	4a0b      	ldr	r2, [pc, #44]	; (408640 <resetSD+0x26c>)
  408614:	fba0 0102 	umull	r0, r1, r0, r2
  408618:	fb02 1105 	mla	r1, r2, r5, r1
  40861c:	f241 722c 	movw	r2, #5932	; 0x172c
  408620:	2300      	movs	r3, #0
  408622:	f241 742b 	movw	r4, #5931	; 0x172b
  408626:	2500      	movs	r5, #0
  408628:	1900      	adds	r0, r0, r4
  40862a:	4169      	adcs	r1, r5
  40862c:	4c05      	ldr	r4, [pc, #20]	; (408644 <resetSD+0x270>)
  40862e:	47a0      	blx	r4
  408630:	4b02      	ldr	r3, [pc, #8]	; (40863c <resetSD+0x268>)
  408632:	4798      	blx	r3
  408634:	e77c      	b.n	408530 <resetSD+0x15c>
  408636:	bf00      	nop
  408638:	400e0e00 	.word	0x400e0e00
  40863c:	2040008d 	.word	0x2040008d
  408640:	11e1a300 	.word	0x11e1a300
  408644:	0040b311 	.word	0x0040b311

00408648 <storeImage>:
void storeImage(void){
  408648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40864c:	f5ad 5dbc 	sub.w	sp, sp, #6016	; 0x1780
  408650:	b085      	sub	sp, #20
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  408652:	4bc6      	ldr	r3, [pc, #792]	; (40896c <storeImage+0x324>)
  408654:	4ac6      	ldr	r2, [pc, #792]	; (408970 <storeImage+0x328>)
  408656:	601a      	str	r2, [r3, #0]
	twi_init_RTC();
  408658:	4bc6      	ldr	r3, [pc, #792]	; (408974 <storeImage+0x32c>)
  40865a:	4798      	blx	r3
	delay_ms(100);//
  40865c:	48c6      	ldr	r0, [pc, #792]	; (408978 <storeImage+0x330>)
  40865e:	f8df 9368 	ldr.w	r9, [pc, #872]	; 4089c8 <storeImage+0x380>
  408662:	47c8      	blx	r9
	rtcData[0]=0x03;//
  408664:	f241 3410 	movw	r4, #4880	; 0x1310
  408668:	446c      	add	r4, sp
  40866a:	2303      	movs	r3, #3
  40866c:	7023      	strb	r3, [r4, #0]
	write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40866e:	2101      	movs	r1, #1
  408670:	4620      	mov	r0, r4
  408672:	4bc2      	ldr	r3, [pc, #776]	; (40897c <storeImage+0x334>)
  408674:	4798      	blx	r3
	delay_ms(1);//
  408676:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40867a:	47c8      	blx	r9
	read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  40867c:	2107      	movs	r1, #7
  40867e:	4620      	mov	r0, r4
  408680:	4bbf      	ldr	r3, [pc, #764]	; (408980 <storeImage+0x338>)
  408682:	4798      	blx	r3
	rtc_set_date(RTC,(unsigned int)(bcdToHex(rtcData[0])+19),bcdToHex(rtcData[5]),bcdToHex(rtcData[3]),5);//Flag to avoid bogus downloads or other interruptions from interfering with initial GPS)
  408684:	7820      	ldrb	r0, [r4, #0]
  408686:	4fbf      	ldr	r7, [pc, #764]	; (408984 <storeImage+0x33c>)
  408688:	47b8      	blx	r7
  40868a:	4606      	mov	r6, r0
  40868c:	7960      	ldrb	r0, [r4, #5]
  40868e:	47b8      	blx	r7
  408690:	4680      	mov	r8, r0
  408692:	78e0      	ldrb	r0, [r4, #3]
  408694:	47b8      	blx	r7
  408696:	4dbc      	ldr	r5, [pc, #752]	; (408988 <storeImage+0x340>)
  408698:	2305      	movs	r3, #5
  40869a:	9300      	str	r3, [sp, #0]
  40869c:	4603      	mov	r3, r0
  40869e:	4642      	mov	r2, r8
  4086a0:	f106 0113 	add.w	r1, r6, #19
  4086a4:	4628      	mov	r0, r5
  4086a6:	4eb9      	ldr	r6, [pc, #740]	; (40898c <storeImage+0x344>)
  4086a8:	47b0      	blx	r6
	rtc_set_time(RTC,bcdToHex(rtcData[2]),bcdToHex(rtcData[1]),bcdToHex(rtcData[0]));//[RTC,hourNow,minsNow,secNow] Set these as a counter to determine if stuck in a stupid boot-up loop. )
  4086aa:	78a0      	ldrb	r0, [r4, #2]
  4086ac:	47b8      	blx	r7
  4086ae:	4606      	mov	r6, r0
  4086b0:	7860      	ldrb	r0, [r4, #1]
  4086b2:	47b8      	blx	r7
  4086b4:	4680      	mov	r8, r0
  4086b6:	7820      	ldrb	r0, [r4, #0]
  4086b8:	47b8      	blx	r7
  4086ba:	4603      	mov	r3, r0
  4086bc:	4642      	mov	r2, r8
  4086be:	4631      	mov	r1, r6
  4086c0:	4628      	mov	r0, r5
  4086c2:	4db3      	ldr	r5, [pc, #716]	; (408990 <storeImage+0x348>)
  4086c4:	47a8      	blx	r5
	getSetDeviceID();
  4086c6:	4bb3      	ldr	r3, [pc, #716]	; (408994 <storeImage+0x34c>)
  4086c8:	4798      	blx	r3
	printf(" %d%d\r\n",rtcData[2],rtcData[1]);
  4086ca:	7862      	ldrb	r2, [r4, #1]
  4086cc:	78a1      	ldrb	r1, [r4, #2]
  4086ce:	48b2      	ldr	r0, [pc, #712]	; (408998 <storeImage+0x350>)
  4086d0:	4bb2      	ldr	r3, [pc, #712]	; (40899c <storeImage+0x354>)
  4086d2:	4798      	blx	r3
	const char fdtFolderName[] = {'F','D','T','_','I','M','G',0};
  4086d4:	ab12      	add	r3, sp, #72	; 0x48
  4086d6:	4ab2      	ldr	r2, [pc, #712]	; (4089a0 <storeImage+0x358>)
  4086d8:	e892 0003 	ldmia.w	r2, {r0, r1}
  4086dc:	e883 0003 	stmia.w	r3, {r0, r1}
	char picFileName[] = {'F','D','T','_','I','M','G','/',
  4086e0:	4bb0      	ldr	r3, [pc, #704]	; (4089a4 <storeImage+0x35c>)
  4086e2:	2246      	movs	r2, #70	; 0x46
  4086e4:	f241 7190 	movw	r1, #6032	; 0x1790
  4086e8:	4469      	add	r1, sp
  4086ea:	54ca      	strb	r2, [r1, r3]
  4086ec:	2344      	movs	r3, #68	; 0x44
  4086ee:	f88d 3019 	strb.w	r3, [sp, #25]
  4086f2:	2354      	movs	r3, #84	; 0x54
  4086f4:	f88d 301a 	strb.w	r3, [sp, #26]
  4086f8:	f04f 0a5f 	mov.w	sl, #95	; 0x5f
  4086fc:	f88d a01b 	strb.w	sl, [sp, #27]
  408700:	2349      	movs	r3, #73	; 0x49
  408702:	f88d 301c 	strb.w	r3, [sp, #28]
  408706:	f04f 034d 	mov.w	r3, #77	; 0x4d
  40870a:	f88d 301d 	strb.w	r3, [sp, #29]
  40870e:	2347      	movs	r3, #71	; 0x47
  408710:	f88d 301e 	strb.w	r3, [sp, #30]
  408714:	232f      	movs	r3, #47	; 0x2f
  408716:	f88d 301f 	strb.w	r3, [sp, #31]
	DEVICEID[0],DEVICEID[1],DEVICEID[2],DEVICEID[3],DEVICEID[4],DEVICEID[5],DEVICEID[6],DEVICEID[7],
  40871a:	4ba3      	ldr	r3, [pc, #652]	; (4089a8 <storeImage+0x360>)
	char picFileName[] = {'F','D','T','_','I','M','G','/',
  40871c:	781a      	ldrb	r2, [r3, #0]
  40871e:	f88d 2020 	strb.w	r2, [sp, #32]
  408722:	785a      	ldrb	r2, [r3, #1]
  408724:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
  408728:	789a      	ldrb	r2, [r3, #2]
  40872a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
  40872e:	78da      	ldrb	r2, [r3, #3]
  408730:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
  408734:	791a      	ldrb	r2, [r3, #4]
  408736:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  40873a:	795a      	ldrb	r2, [r3, #5]
  40873c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
  408740:	799a      	ldrb	r2, [r3, #6]
  408742:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
  408746:	79da      	ldrb	r2, [r3, #7]
  408748:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  40874c:	7a1a      	ldrb	r2, [r3, #8]
  40874e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
  408752:	7a5a      	ldrb	r2, [r3, #9]
  408754:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  408758:	7a9a      	ldrb	r2, [r3, #10]
  40875a:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
  40875e:	7ada      	ldrb	r2, [r3, #11]
  408760:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
  408764:	7b1a      	ldrb	r2, [r3, #12]
  408766:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  40876a:	7b5a      	ldrb	r2, [r3, #13]
  40876c:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  408770:	7b9a      	ldrb	r2, [r3, #14]
  408772:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  408776:	7bdb      	ldrb	r3, [r3, #15]
  408778:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40877c:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
	'_',(char)(hex1ToAscii((bcdToHex(rtcData[6]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[6]))%10)),
  408780:	79a0      	ldrb	r0, [r4, #6]
  408782:	47b8      	blx	r7
  408784:	4683      	mov	fp, r0
  408786:	4d89      	ldr	r5, [pc, #548]	; (4089ac <storeImage+0x364>)
  408788:	fba5 3800 	umull	r3, r8, r5, r0
  40878c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  408790:	fa5f f088 	uxtb.w	r0, r8
  408794:	4e86      	ldr	r6, [pc, #536]	; (4089b0 <storeImage+0x368>)
  408796:	47b0      	blx	r6
  408798:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
  40879c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  4087a0:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
  4087a4:	fa5f f088 	uxtb.w	r0, r8
  4087a8:	47b0      	blx	r6
  4087aa:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
	(char)(hex1ToAscii((bcdToHex(rtcData[5]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[5]))%10)),
  4087ae:	7960      	ldrb	r0, [r4, #5]
  4087b0:	47b8      	blx	r7
  4087b2:	4683      	mov	fp, r0
  4087b4:	fba5 3800 	umull	r3, r8, r5, r0
  4087b8:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  4087bc:	fa5f f088 	uxtb.w	r0, r8
  4087c0:	47b0      	blx	r6
  4087c2:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
  4087c6:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  4087ca:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
  4087ce:	fa5f f088 	uxtb.w	r0, r8
  4087d2:	47b0      	blx	r6
  4087d4:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
	(char)(hex1ToAscii((bcdToHex(rtcData[3]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[3]))%10)),
  4087d8:	78e0      	ldrb	r0, [r4, #3]
  4087da:	47b8      	blx	r7
  4087dc:	4683      	mov	fp, r0
  4087de:	fba5 3800 	umull	r3, r8, r5, r0
  4087e2:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  4087e6:	fa5f f088 	uxtb.w	r0, r8
  4087ea:	47b0      	blx	r6
  4087ec:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
  4087f0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  4087f4:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
  4087f8:	fa5f f088 	uxtb.w	r0, r8
  4087fc:	47b0      	blx	r6
  4087fe:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
	(char)(hex1ToAscii((bcdToHex(rtcData[2]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[2]))%10)),
  408802:	78a0      	ldrb	r0, [r4, #2]
  408804:	47b8      	blx	r7
  408806:	4683      	mov	fp, r0
  408808:	fba5 3800 	umull	r3, r8, r5, r0
  40880c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  408810:	fa5f f088 	uxtb.w	r0, r8
  408814:	47b0      	blx	r6
  408816:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40881a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  40881e:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
  408822:	fa5f f088 	uxtb.w	r0, r8
  408826:	47b0      	blx	r6
  408828:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	(char)(hex1ToAscii((bcdToHex(rtcData[1]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[1]))%10)),
  40882c:	7860      	ldrb	r0, [r4, #1]
  40882e:	47b8      	blx	r7
  408830:	4683      	mov	fp, r0
  408832:	fba5 3800 	umull	r3, r8, r5, r0
  408836:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  40883a:	fa5f f088 	uxtb.w	r0, r8
  40883e:	47b0      	blx	r6
  408840:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
  408844:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  408848:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
  40884c:	fa5f f088 	uxtb.w	r0, r8
  408850:	47b0      	blx	r6
  408852:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	(char)(hex1ToAscii((bcdToHex(rtcData[0]))/10)),(char)(hex1ToAscii((bcdToHex(rtcData[0]))%10)),'_',0x30,0x30,'.','B','M','P',0
  408856:	7820      	ldrb	r0, [r4, #0]
  408858:	47b8      	blx	r7
  40885a:	4604      	mov	r4, r0
  40885c:	fba5 3500 	umull	r3, r5, r5, r0
  408860:	08ed      	lsrs	r5, r5, #3
  408862:	b2e8      	uxtb	r0, r5
  408864:	47b0      	blx	r6
  408866:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
  40886a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40886e:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
  408872:	b2e8      	uxtb	r0, r5
  408874:	47b0      	blx	r6
  408876:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
	char picFileName[] = {'F','D','T','_','I','M','G','/',
  40887a:	f88d a03d 	strb.w	sl, [sp, #61]	; 0x3d
  40887e:	2330      	movs	r3, #48	; 0x30
  408880:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
  408884:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
  408888:	232e      	movs	r3, #46	; 0x2e
  40888a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40888e:	2342      	movs	r3, #66	; 0x42
  408890:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
  408894:	f04f 034d 	mov.w	r3, #77	; 0x4d
  408898:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
  40889c:	2350      	movs	r3, #80	; 0x50
  40889e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
  4088a2:	2300      	movs	r3, #0
  4088a4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	configure_console();
  4088a8:	4b42      	ldr	r3, [pc, #264]	; (4089b4 <storeImage+0x36c>)
  4088aa:	4798      	blx	r3
	delay_ms(10);
  4088ac:	4842      	ldr	r0, [pc, #264]	; (4089b8 <storeImage+0x370>)
  4088ae:	47c8      	blx	r9
	printf("BEGIN STORE IMAGE\r\n");
  4088b0:	4842      	ldr	r0, [pc, #264]	; (4089bc <storeImage+0x374>)
  4088b2:	4b3a      	ldr	r3, [pc, #232]	; (40899c <storeImage+0x354>)
  4088b4:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  4088b6:	4b2d      	ldr	r3, [pc, #180]	; (40896c <storeImage+0x324>)
  4088b8:	4a2d      	ldr	r2, [pc, #180]	; (408970 <storeImage+0x328>)
  4088ba:	601a      	str	r2, [r3, #0]
	resetSD(300);
  4088bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
  4088c0:	4b3f      	ldr	r3, [pc, #252]	; (4089c0 <storeImage+0x378>)
  4088c2:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4088c4:	4b3f      	ldr	r3, [pc, #252]	; (4089c4 <storeImage+0x37c>)
  4088c6:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4088ca:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4088ce:	f007 0007 	and.w	r0, r7, #7
  4088d2:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4088d4:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4088d8:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4088dc:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4088e0:	f3bf 8f4f 	dsb	sy
  4088e4:	f04f 34ff 	mov.w	r4, #4294967295
  4088e8:	fa04 fc00 	lsl.w	ip, r4, r0
  4088ec:	fa06 f000 	lsl.w	r0, r6, r0
  4088f0:	fa04 f40e 	lsl.w	r4, r4, lr
  4088f4:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4088f8:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4088fa:	463a      	mov	r2, r7
  4088fc:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4088fe:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  408902:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  408906:	3a01      	subs	r2, #1
  408908:	4423      	add	r3, r4
  40890a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40890e:	d1f6      	bne.n	4088fe <storeImage+0x2b6>
        } while(sets--);
  408910:	3e01      	subs	r6, #1
  408912:	4460      	add	r0, ip
  408914:	f1b6 3fff 	cmp.w	r6, #4294967295
  408918:	d1ef      	bne.n	4088fa <storeImage+0x2b2>
  40891a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40891e:	4b29      	ldr	r3, [pc, #164]	; (4089c4 <storeImage+0x37c>)
  408920:	695a      	ldr	r2, [r3, #20]
  408922:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  408926:	615a      	str	r2, [r3, #20]
  408928:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40892c:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  408930:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  408934:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  408938:	f007 0007 	and.w	r0, r7, #7
  40893c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40893e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  408942:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  408946:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40894a:	f3bf 8f4f 	dsb	sy
  40894e:	f04f 34ff 	mov.w	r4, #4294967295
  408952:	fa04 fc00 	lsl.w	ip, r4, r0
  408956:	fa06 f000 	lsl.w	r0, r6, r0
  40895a:	fa04 f40e 	lsl.w	r4, r4, lr
  40895e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  408962:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  408964:	463a      	mov	r2, r7
  408966:	4673      	mov	r3, lr
  408968:	e030      	b.n	4089cc <storeImage+0x384>
  40896a:	bf00      	nop
  40896c:	400e1850 	.word	0x400e1850
  408970:	a5000001 	.word	0xa5000001
  408974:	00401a65 	.word	0x00401a65
  408978:	004d2b25 	.word	0x004d2b25
  40897c:	00401b91 	.word	0x00401b91
  408980:	00401cb9 	.word	0x00401cb9
  408984:	004066b7 	.word	0x004066b7
  408988:	400e1860 	.word	0x400e1860
  40898c:	00402625 	.word	0x00402625
  408990:	00402521 	.word	0x00402521
  408994:	00407a71 	.word	0x00407a71
  408998:	0040f238 	.word	0x0040f238
  40899c:	0040b671 	.word	0x0040b671
  4089a0:	0040eb78 	.word	0x0040eb78
  4089a4:	ffffe888 	.word	0xffffe888
  4089a8:	20400fa8 	.word	0x20400fa8
  4089ac:	cccccccd 	.word	0xcccccccd
  4089b0:	00406659 	.word	0x00406659
  4089b4:	00406c69 	.word	0x00406c69
  4089b8:	0007b784 	.word	0x0007b784
  4089bc:	0040f240 	.word	0x0040f240
  4089c0:	004083d5 	.word	0x004083d5
  4089c4:	e000ed00 	.word	0xe000ed00
  4089c8:	2040008d 	.word	0x2040008d
              sw = ((tmpways << wshift) | (sets << sshift));
  4089cc:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  4089d0:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  4089d4:	3a01      	subs	r2, #1
  4089d6:	4423      	add	r3, r4
  4089d8:	f1b2 3fff 	cmp.w	r2, #4294967295
  4089dc:	d1f6      	bne.n	4089cc <storeImage+0x384>
        } while(sets--);
  4089de:	3e01      	subs	r6, #1
  4089e0:	4460      	add	r0, ip
  4089e2:	f1b6 3fff 	cmp.w	r6, #4294967295
  4089e6:	d1bd      	bne.n	408964 <storeImage+0x31c>
  4089e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4089ec:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  4089f0:	4ba1      	ldr	r3, [pc, #644]	; (408c78 <storeImage+0x630>)
  4089f2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4089f6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4089fa:	f007 0007 	and.w	r0, r7, #7
  4089fe:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  408a00:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  408a04:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  408a08:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  408a0c:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  408a10:	695a      	ldr	r2, [r3, #20]
  408a12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  408a16:	615a      	str	r2, [r3, #20]
  408a18:	f04f 34ff 	mov.w	r4, #4294967295
  408a1c:	fa04 fc00 	lsl.w	ip, r4, r0
  408a20:	fa06 f000 	lsl.w	r0, r6, r0
  408a24:	fa04 f40e 	lsl.w	r4, r4, lr
  408a28:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  408a2c:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  408a2e:	463a      	mov	r2, r7
  408a30:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  408a32:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  408a36:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  408a3a:	3a01      	subs	r2, #1
  408a3c:	4423      	add	r3, r4
  408a3e:	f1b2 3fff 	cmp.w	r2, #4294967295
  408a42:	d1f6      	bne.n	408a32 <storeImage+0x3ea>
        } while(sets--);
  408a44:	3e01      	subs	r6, #1
  408a46:	4460      	add	r0, ip
  408a48:	f1b6 3fff 	cmp.w	r6, #4294967295
  408a4c:	d1ef      	bne.n	408a2e <storeImage+0x3e6>
  408a4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  408a52:	f3bf 8f6f 	isb	sy
	sd_mmc_init();
  408a56:	4b89      	ldr	r3, [pc, #548]	; (408c7c <storeImage+0x634>)
  408a58:	4798      	blx	r3
	errorLoopCtr=50;
  408a5a:	2432      	movs	r4, #50	; 0x32
		status = sd_mmc_test_unit_ready(0);//first electronic signals
  408a5c:	2600      	movs	r6, #0
			WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  408a5e:	4f88      	ldr	r7, [pc, #544]	; (408c80 <storeImage+0x638>)
  408a60:	e00a      	b.n	408a78 <storeImage+0x430>
		delay_ms(100);
  408a62:	4888      	ldr	r0, [pc, #544]	; (408c84 <storeImage+0x63c>)
  408a64:	4b88      	ldr	r3, [pc, #544]	; (408c88 <storeImage+0x640>)
  408a66:	4798      	blx	r3
		errorLoopCtr--;
  408a68:	3c01      	subs	r4, #1
  408a6a:	b2e4      	uxtb	r4, r4
	} while ((status != CTRL_GOOD)&&(errorLoopCtr>0));
  408a6c:	2d00      	cmp	r5, #0
  408a6e:	f000 80c6 	beq.w	408bfe <storeImage+0x5b6>
  408a72:	2c00      	cmp	r4, #0
  408a74:	f000 80c3 	beq.w	408bfe <storeImage+0x5b6>
		status = sd_mmc_test_unit_ready(0);//first electronic signals
  408a78:	4630      	mov	r0, r6
  408a7a:	4b84      	ldr	r3, [pc, #528]	; (408c8c <storeImage+0x644>)
  408a7c:	4798      	blx	r3
  408a7e:	4605      	mov	r5, r0
		printf("MMC %d %d\r\n",status, errorLoopCtr);
  408a80:	9003      	str	r0, [sp, #12]
  408a82:	4622      	mov	r2, r4
  408a84:	4601      	mov	r1, r0
  408a86:	4882      	ldr	r0, [pc, #520]	; (408c90 <storeImage+0x648>)
  408a88:	4b82      	ldr	r3, [pc, #520]	; (408c94 <storeImage+0x64c>)
  408a8a:	4798      	blx	r3
		isCard = sd_mmc_check(0);
  408a8c:	4630      	mov	r0, r6
  408a8e:	4b82      	ldr	r3, [pc, #520]	; (408c98 <storeImage+0x650>)
  408a90:	4798      	blx	r3
		if  ((status == CTRL_FAIL)&&((errorLoopCtr%4)==0)) {
  408a92:	2d01      	cmp	r5, #1
  408a94:	d1e5      	bne.n	408a62 <storeImage+0x41a>
  408a96:	f014 0f03 	tst.w	r4, #3
  408a9a:	d1e2      	bne.n	408a62 <storeImage+0x41a>
			printf("MMC RESET %d %d\r\n",status, errorLoopCtr);
  408a9c:	4622      	mov	r2, r4
  408a9e:	2101      	movs	r1, #1
  408aa0:	487e      	ldr	r0, [pc, #504]	; (408c9c <storeImage+0x654>)
  408aa2:	4b7c      	ldr	r3, [pc, #496]	; (408c94 <storeImage+0x64c>)
  408aa4:	4798      	blx	r3
			if(errorLoopCtr<20)resetSD(2000);else resetSD(300);//number of msec to remain off
  408aa6:	2c13      	cmp	r4, #19
  408aa8:	bf94      	ite	ls
  408aaa:	f44f 60fa 	movls.w	r0, #2000	; 0x7d0
  408aae:	f44f 7096 	movhi.w	r0, #300	; 0x12c
  408ab2:	4b7b      	ldr	r3, [pc, #492]	; (408ca0 <storeImage+0x658>)
  408ab4:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  408ab6:	4b70      	ldr	r3, [pc, #448]	; (408c78 <storeImage+0x630>)
  408ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  408abc:	f3c3 3a4e 	ubfx	sl, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  408ac0:	f003 0007 	and.w	r0, r3, #7
  408ac4:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  408ac6:	f3c3 08c9 	ubfx	r8, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  408aca:	fab8 f988 	clz	r9, r8
    wshift  = __CLZ(ways) & 0x1f;
  408ace:	f009 091f 	and.w	r9, r9, #31
  __ASM volatile ("dsb");
  408ad2:	f3bf 8f4f 	dsb	sy
  408ad6:	f04f 3eff 	mov.w	lr, #4294967295
  408ada:	fa0e fb00 	lsl.w	fp, lr, r0
  408ade:	fa0a f000 	lsl.w	r0, sl, r0
  408ae2:	fa0e fe09 	lsl.w	lr, lr, r9
  408ae6:	fa08 f909 	lsl.w	r9, r8, r9
              SCB->DCISW = sw;
  408aea:	f8df c18c 	ldr.w	ip, [pc, #396]	; 408c78 <storeImage+0x630>
         int32_t tmpways = ways;
  408aee:	4642      	mov	r2, r8
  408af0:	464b      	mov	r3, r9
              sw = ((tmpways << wshift) | (sets << sshift));
  408af2:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  408af6:	f8cc 1260 	str.w	r1, [ip, #608]	; 0x260
            } while(tmpways--);
  408afa:	3a01      	subs	r2, #1
  408afc:	4473      	add	r3, lr
  408afe:	f1b2 3fff 	cmp.w	r2, #4294967295
  408b02:	d1f6      	bne.n	408af2 <storeImage+0x4aa>
        } while(sets--);
  408b04:	f10a 3aff 	add.w	sl, sl, #4294967295
  408b08:	4458      	add	r0, fp
  408b0a:	f1ba 3fff 	cmp.w	sl, #4294967295
  408b0e:	d1ee      	bne.n	408aee <storeImage+0x4a6>
  408b10:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  408b14:	4b58      	ldr	r3, [pc, #352]	; (408c78 <storeImage+0x630>)
  408b16:	695a      	ldr	r2, [r3, #20]
  408b18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  408b1c:	615a      	str	r2, [r3, #20]
  408b1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  408b22:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  408b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  408b2a:	f3c3 3a4e 	ubfx	sl, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  408b2e:	f003 0007 	and.w	r0, r3, #7
  408b32:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  408b34:	f3c3 08c9 	ubfx	r8, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  408b38:	fab8 f988 	clz	r9, r8
    wshift  = __CLZ(ways) & 0x1f;
  408b3c:	f009 091f 	and.w	r9, r9, #31
  __ASM volatile ("dsb");
  408b40:	f3bf 8f4f 	dsb	sy
  408b44:	f04f 3eff 	mov.w	lr, #4294967295
  408b48:	fa0e fb00 	lsl.w	fp, lr, r0
  408b4c:	fa0a f000 	lsl.w	r0, sl, r0
  408b50:	fa0e fe09 	lsl.w	lr, lr, r9
  408b54:	fa08 f909 	lsl.w	r9, r8, r9
              SCB->DCCISW = sw;
  408b58:	f8df c11c 	ldr.w	ip, [pc, #284]	; 408c78 <storeImage+0x630>
         int32_t tmpways = ways;
  408b5c:	4642      	mov	r2, r8
  408b5e:	464b      	mov	r3, r9
              sw = ((tmpways << wshift) | (sets << sshift));
  408b60:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  408b64:	f8cc 1274 	str.w	r1, [ip, #628]	; 0x274
            } while(tmpways--);
  408b68:	3a01      	subs	r2, #1
  408b6a:	4473      	add	r3, lr
  408b6c:	f1b2 3fff 	cmp.w	r2, #4294967295
  408b70:	d1f6      	bne.n	408b60 <storeImage+0x518>
        } while(sets--);
  408b72:	f10a 3aff 	add.w	sl, sl, #4294967295
  408b76:	4458      	add	r0, fp
  408b78:	f1ba 3fff 	cmp.w	sl, #4294967295
  408b7c:	d1ee      	bne.n	408b5c <storeImage+0x514>
  408b7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  408b82:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  408b86:	4b3c      	ldr	r3, [pc, #240]	; (408c78 <storeImage+0x630>)
  408b88:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  408b8c:	f3c2 3a4e 	ubfx	sl, r2, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  408b90:	f002 0007 	and.w	r0, r2, #7
  408b94:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  408b96:	f3c2 08c9 	ubfx	r8, r2, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  408b9a:	fab8 f988 	clz	r9, r8
    wshift  = __CLZ(ways) & 0x1f;
  408b9e:	f009 091f 	and.w	r9, r9, #31
  __ASM volatile ("dsb");
  408ba2:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  408ba6:	695a      	ldr	r2, [r3, #20]
  408ba8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  408bac:	615a      	str	r2, [r3, #20]
  408bae:	f04f 3eff 	mov.w	lr, #4294967295
  408bb2:	fa0e fb00 	lsl.w	fp, lr, r0
  408bb6:	fa0a f000 	lsl.w	r0, sl, r0
  408bba:	fa0e fe09 	lsl.w	lr, lr, r9
  408bbe:	fa08 f909 	lsl.w	r9, r8, r9
              SCB->DCCISW = sw;
  408bc2:	469c      	mov	ip, r3
         int32_t tmpways = ways;
  408bc4:	4642      	mov	r2, r8
  408bc6:	464b      	mov	r3, r9
              sw = ((tmpways << wshift) | (sets << sshift));
  408bc8:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  408bcc:	f8cc 1274 	str.w	r1, [ip, #628]	; 0x274
            } while(tmpways--);
  408bd0:	3a01      	subs	r2, #1
  408bd2:	4473      	add	r3, lr
  408bd4:	f1b2 3fff 	cmp.w	r2, #4294967295
  408bd8:	d1f6      	bne.n	408bc8 <storeImage+0x580>
        } while(sets--);
  408bda:	f10a 3aff 	add.w	sl, sl, #4294967295
  408bde:	4458      	add	r0, fp
  408be0:	f1ba 3fff 	cmp.w	sl, #4294967295
  408be4:	d1ee      	bne.n	408bc4 <storeImage+0x57c>
  408be6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  408bea:	f3bf 8f6f 	isb	sy
			delay_ms(10);
  408bee:	482d      	ldr	r0, [pc, #180]	; (408ca4 <storeImage+0x65c>)
  408bf0:	4b25      	ldr	r3, [pc, #148]	; (408c88 <storeImage+0x640>)
  408bf2:	4798      	blx	r3
			sd_mmc_init();
  408bf4:	4b21      	ldr	r3, [pc, #132]	; (408c7c <storeImage+0x634>)
  408bf6:	4798      	blx	r3
			WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  408bf8:	4b2b      	ldr	r3, [pc, #172]	; (408ca8 <storeImage+0x660>)
  408bfa:	603b      	str	r3, [r7, #0]
  408bfc:	e731      	b.n	408a62 <storeImage+0x41a>
	printf("MMC INIT %d\r\n",status);
  408bfe:	9903      	ldr	r1, [sp, #12]
  408c00:	482a      	ldr	r0, [pc, #168]	; (408cac <storeImage+0x664>)
  408c02:	4c24      	ldr	r4, [pc, #144]	; (408c94 <storeImage+0x64c>)
  408c04:	47a0      	blx	r4
	printf("MOUNT DISK...\r\n");
  408c06:	482a      	ldr	r0, [pc, #168]	; (408cb0 <storeImage+0x668>)
  408c08:	47a0      	blx	r4
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  408c0a:	4a27      	ldr	r2, [pc, #156]	; (408ca8 <storeImage+0x660>)
  408c0c:	4b1c      	ldr	r3, [pc, #112]	; (408c80 <storeImage+0x638>)
  408c0e:	601a      	str	r2, [r3, #0]
	memset(&fs, 0, sizeof(FATFS));
  408c10:	f44f 720c 	mov.w	r2, #560	; 0x230
  408c14:	2100      	movs	r1, #0
  408c16:	f50d 50ab 	add.w	r0, sp, #5472	; 0x1560
  408c1a:	4b26      	ldr	r3, [pc, #152]	; (408cb4 <storeImage+0x66c>)
  408c1c:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  408c1e:	f50d 51ab 	add.w	r1, sp, #5472	; 0x1560
  408c22:	2000      	movs	r0, #0
  408c24:	4b24      	ldr	r3, [pc, #144]	; (408cb8 <storeImage+0x670>)
  408c26:	4798      	blx	r3
  408c28:	4605      	mov	r5, r0
	printf("MOUNT DISK RESULT %d\r\n",res);
  408c2a:	4601      	mov	r1, r0
  408c2c:	4823      	ldr	r0, [pc, #140]	; (408cbc <storeImage+0x674>)
  408c2e:	47a0      	blx	r4
	if (FR_INVALID_DRIVE == res) {
  408c30:	2d0b      	cmp	r5, #11
  408c32:	f000 809b 	beq.w	408d6c <storeImage+0x724>
	printf("TRYING F_OPENDIR()\r\n");
  408c36:	4822      	ldr	r0, [pc, #136]	; (408cc0 <storeImage+0x678>)
  408c38:	4625      	mov	r5, r4
  408c3a:	47a0      	blx	r4
	res = f_opendir(&myDir,fdtFolderName);
  408c3c:	a912      	add	r1, sp, #72	; 0x48
  408c3e:	f241 3018 	movw	r0, #4888	; 0x1318
  408c42:	4468      	add	r0, sp
  408c44:	4b1f      	ldr	r3, [pc, #124]	; (408cc4 <storeImage+0x67c>)
  408c46:	4798      	blx	r3
  408c48:	4604      	mov	r4, r0
	printf("F_OPENDIR() RES = %d\r\n",res);
  408c4a:	4601      	mov	r1, r0
  408c4c:	481e      	ldr	r0, [pc, #120]	; (408cc8 <storeImage+0x680>)
  408c4e:	47a8      	blx	r5
	switch (res){
  408c50:	2c04      	cmp	r4, #4
  408c52:	d041      	beq.n	408cd8 <storeImage+0x690>
  408c54:	2c05      	cmp	r4, #5
  408c56:	f000 809b 	beq.w	408d90 <storeImage+0x748>
  408c5a:	b14c      	cbz	r4, 408c70 <storeImage+0x628>
		printf("SOME OTHER DIRECTORY ERROR %X \r\n",res);
  408c5c:	4621      	mov	r1, r4
  408c5e:	481b      	ldr	r0, [pc, #108]	; (408ccc <storeImage+0x684>)
  408c60:	4b0c      	ldr	r3, [pc, #48]	; (408c94 <storeImage+0x64c>)
  408c62:	4798      	blx	r3
	if(res==0)printf("F_MOUNT GOOD FDT\r\n");
  408c64:	2c00      	cmp	r4, #0
  408c66:	d13d      	bne.n	408ce4 <storeImage+0x69c>
  408c68:	4819      	ldr	r0, [pc, #100]	; (408cd0 <storeImage+0x688>)
  408c6a:	4b0a      	ldr	r3, [pc, #40]	; (408c94 <storeImage+0x64c>)
  408c6c:	4798      	blx	r3
  408c6e:	e039      	b.n	408ce4 <storeImage+0x69c>
		printf("FOUND FDT_IMG FOLDER\r\n");
  408c70:	4818      	ldr	r0, [pc, #96]	; (408cd4 <storeImage+0x68c>)
  408c72:	47a8      	blx	r5
  408c74:	e7f8      	b.n	408c68 <storeImage+0x620>
  408c76:	bf00      	nop
  408c78:	e000ed00 	.word	0xe000ed00
  408c7c:	004004a1 	.word	0x004004a1
  408c80:	400e1850 	.word	0x400e1850
  408c84:	004d2b25 	.word	0x004d2b25
  408c88:	2040008d 	.word	0x2040008d
  408c8c:	00401009 	.word	0x00401009
  408c90:	0040f098 	.word	0x0040f098
  408c94:	0040b671 	.word	0x0040b671
  408c98:	004004c1 	.word	0x004004c1
  408c9c:	0040f0a4 	.word	0x0040f0a4
  408ca0:	004083d5 	.word	0x004083d5
  408ca4:	0007b784 	.word	0x0007b784
  408ca8:	a5000001 	.word	0xa5000001
  408cac:	0040f0b8 	.word	0x0040f0b8
  408cb0:	0040f0c8 	.word	0x0040f0c8
  408cb4:	0040b7cd 	.word	0x0040b7cd
  408cb8:	00405ea1 	.word	0x00405ea1
  408cbc:	0040f0d8 	.word	0x0040f0d8
  408cc0:	0040f0f0 	.word	0x0040f0f0
  408cc4:	0040633d 	.word	0x0040633d
  408cc8:	0040f108 	.word	0x0040f108
  408ccc:	0040f14c 	.word	0x0040f14c
  408cd0:	0040f170 	.word	0x0040f170
  408cd4:	0040f254 	.word	0x0040f254
		printf("CREATING FDT_IMG FOLDER\r\n");
  408cd8:	4879      	ldr	r0, [pc, #484]	; (408ec0 <storeImage+0x878>)
  408cda:	4b7a      	ldr	r3, [pc, #488]	; (408ec4 <storeImage+0x87c>)
  408cdc:	4798      	blx	r3
		f_mkdir((char const *)fdtFolderName);
  408cde:	a812      	add	r0, sp, #72	; 0x48
  408ce0:	4b79      	ldr	r3, [pc, #484]	; (408ec8 <storeImage+0x880>)
  408ce2:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  408ce4:	4a79      	ldr	r2, [pc, #484]	; (408ecc <storeImage+0x884>)
  408ce6:	4b7a      	ldr	r3, [pc, #488]	; (408ed0 <storeImage+0x888>)
  408ce8:	601a      	str	r2, [r3, #0]
	fakeMSec=0;res=0;
  408cea:	2500      	movs	r5, #0
		res = f_open(&file_object,
  408cec:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 408ee4 <storeImage+0x89c>
			delay_ms(100);
  408cf0:	4e78      	ldr	r6, [pc, #480]	; (408ed4 <storeImage+0x88c>)
		res = f_open(&file_object,
  408cf2:	2200      	movs	r2, #0
  408cf4:	a906      	add	r1, sp, #24
  408cf6:	f241 303c 	movw	r0, #4924	; 0x133c
  408cfa:	4468      	add	r0, sp
  408cfc:	47c0      	blx	r8
  408cfe:	4607      	mov	r7, r0
		if(res==FR_NO_FILE)fakeMSec=101;
  408d00:	2804      	cmp	r0, #4
  408d02:	d021      	beq.n	408d48 <storeImage+0x700>
			delay_ms(100);
  408d04:	4630      	mov	r0, r6
  408d06:	4c74      	ldr	r4, [pc, #464]	; (408ed8 <storeImage+0x890>)
  408d08:	47a0      	blx	r4
			f_close(&file_object);
  408d0a:	f241 303c 	movw	r0, #4924	; 0x133c
  408d0e:	4468      	add	r0, sp
  408d10:	4b72      	ldr	r3, [pc, #456]	; (408edc <storeImage+0x894>)
  408d12:	4798      	blx	r3
			delay_ms(100);
  408d14:	4630      	mov	r0, r6
  408d16:	47a0      	blx	r4
			fakeMSec++;
  408d18:	3501      	adds	r5, #1
  408d1a:	b2ed      	uxtb	r5, r5
			picFileName[38]=(char)(hex1ToAscii(fakeMSec/10));
  408d1c:	4c70      	ldr	r4, [pc, #448]	; (408ee0 <storeImage+0x898>)
  408d1e:	fba4 3405 	umull	r3, r4, r4, r5
  408d22:	08e4      	lsrs	r4, r4, #3
  408d24:	b2e0      	uxtb	r0, r4
  408d26:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 408f20 <storeImage+0x8d8>
  408d2a:	47c8      	blx	r9
  408d2c:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
			picFileName[39]=(char)(hex1ToAscii(fakeMSec%10));
  408d30:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  408d34:	eba5 0044 	sub.w	r0, r5, r4, lsl #1
  408d38:	b2c0      	uxtb	r0, r0
  408d3a:	47c8      	blx	r9
  408d3c:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
	while((fakeMSec<100)&&(res!=FR_NO_FILE)){
  408d40:	2d63      	cmp	r5, #99	; 0x63
  408d42:	d801      	bhi.n	408d48 <storeImage+0x700>
  408d44:	2f04      	cmp	r7, #4
  408d46:	d1d4      	bne.n	408cf2 <storeImage+0x6aa>
	res = f_open(&file_object, (char const *)picFileName, FA_CREATE_ALWAYS | FA_WRITE);
  408d48:	220a      	movs	r2, #10
  408d4a:	a906      	add	r1, sp, #24
  408d4c:	f241 303c 	movw	r0, #4924	; 0x133c
  408d50:	4468      	add	r0, sp
  408d52:	4c64      	ldr	r4, [pc, #400]	; (408ee4 <storeImage+0x89c>)
  408d54:	47a0      	blx	r4
	res = f_open(&file_object,
  408d56:	220a      	movs	r2, #10
  408d58:	a906      	add	r1, sp, #24
  408d5a:	f241 303c 	movw	r0, #4924	; 0x133c
  408d5e:	4468      	add	r0, sp
  408d60:	47a0      	blx	r4
	if (res != FR_OK) {
  408d62:	4601      	mov	r1, r0
  408d64:	b1d8      	cbz	r0, 408d9e <storeImage+0x756>
		printf("F_OPEN FAIL RES %d\r\n", res);
  408d66:	4860      	ldr	r0, [pc, #384]	; (408ee8 <storeImage+0x8a0>)
  408d68:	4b56      	ldr	r3, [pc, #344]	; (408ec4 <storeImage+0x87c>)
  408d6a:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  408d6c:	4a57      	ldr	r2, [pc, #348]	; (408ecc <storeImage+0x884>)
  408d6e:	4b58      	ldr	r3, [pc, #352]	; (408ed0 <storeImage+0x888>)
  408d70:	601a      	str	r2, [r3, #0]
	delay_ms(10);
  408d72:	485e      	ldr	r0, [pc, #376]	; (408eec <storeImage+0x8a4>)
  408d74:	4c58      	ldr	r4, [pc, #352]	; (408ed8 <storeImage+0x890>)
  408d76:	47a0      	blx	r4
	closeSDcard();//pin cnfig and power off.
  408d78:	4b5d      	ldr	r3, [pc, #372]	; (408ef0 <storeImage+0x8a8>)
  408d7a:	4798      	blx	r3
	printf("\r\CLOSED SD CARD.\r\n");
  408d7c:	485d      	ldr	r0, [pc, #372]	; (408ef4 <storeImage+0x8ac>)
  408d7e:	4b51      	ldr	r3, [pc, #324]	; (408ec4 <storeImage+0x87c>)
  408d80:	4798      	blx	r3
	delay_ms(200);
  408d82:	485d      	ldr	r0, [pc, #372]	; (408ef8 <storeImage+0x8b0>)
  408d84:	47a0      	blx	r4
	}	
  408d86:	f50d 5dbc 	add.w	sp, sp, #6016	; 0x1780
  408d8a:	b005      	add	sp, #20
  408d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("CREATING FDT_IMG FOLDER\r\n");
  408d90:	484b      	ldr	r0, [pc, #300]	; (408ec0 <storeImage+0x878>)
  408d92:	4b4c      	ldr	r3, [pc, #304]	; (408ec4 <storeImage+0x87c>)
  408d94:	4798      	blx	r3
		f_mkdir((char const *)fdtFolderName);
  408d96:	a812      	add	r0, sp, #72	; 0x48
  408d98:	4b4b      	ldr	r3, [pc, #300]	; (408ec8 <storeImage+0x880>)
  408d9a:	4798      	blx	r3
		break;
  408d9c:	e7a2      	b.n	408ce4 <storeImage+0x69c>
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  408d9e:	4a4b      	ldr	r2, [pc, #300]	; (408ecc <storeImage+0x884>)
  408da0:	4b4b      	ldr	r3, [pc, #300]	; (408ed0 <storeImage+0x888>)
  408da2:	601a      	str	r2, [r3, #0]
	printf("CREATED PIC FILE %s\r\n",picFileName);
  408da4:	a906      	add	r1, sp, #24
  408da6:	4855      	ldr	r0, [pc, #340]	; (408efc <storeImage+0x8b4>)
  408da8:	4b46      	ldr	r3, [pc, #280]	; (408ec4 <storeImage+0x87c>)
  408daa:	4798      	blx	r3
  408dac:	4d54      	ldr	r5, [pc, #336]	; (408f00 <storeImage+0x8b8>)
  408dae:	1e6c      	subs	r4, r5, #1
  408db0:	3535      	adds	r5, #53	; 0x35
	f_putc(picHeader_2655[picBuffCtr],&file_object);
  408db2:	4e54      	ldr	r6, [pc, #336]	; (408f04 <storeImage+0x8bc>)
  408db4:	f241 313c 	movw	r1, #4924	; 0x133c
  408db8:	4469      	add	r1, sp
  408dba:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  408dbe:	47b0      	blx	r6
	for(picBuffCtr=0;picBuffCtr<PIC_HEADER_LEN;picBuffCtr++){
  408dc0:	42ac      	cmp	r4, r5
  408dc2:	d1f7      	bne.n	408db4 <storeImage+0x76c>
	printf("WROTE FILE NAME\r\n",picFileName);
  408dc4:	a906      	add	r1, sp, #24
  408dc6:	4850      	ldr	r0, [pc, #320]	; (408f08 <storeImage+0x8c0>)
  408dc8:	4b3e      	ldr	r3, [pc, #248]	; (408ec4 <storeImage+0x87c>)
  408dca:	4798      	blx	r3
  408dcc:	4f4f      	ldr	r7, [pc, #316]	; (408f0c <storeImage+0x8c4>)
	for(picBlockCtr=0;picBlockCtr<600;picBlockCtr++){
  408dce:	2600      	movs	r6, #0
  408dd0:	f8df a150 	ldr.w	sl, [pc, #336]	; 408f24 <storeImage+0x8dc>
		f_write(&file_object,oneLine,4800,&fwret);
  408dd4:	f8df 8150 	ldr.w	r8, [pc, #336]	; 408f28 <storeImage+0x8e0>
	if((picBlockCtr%30)==0)	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  408dd8:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 408ed0 <storeImage+0x888>
	for(picBlockCtr=0;picBlockCtr<600;picBlockCtr++){
  408ddc:	f8df 914c 	ldr.w	r9, [pc, #332]	; 408f2c <storeImage+0x8e4>
  408de0:	e00a      	b.n	408df8 <storeImage+0x7b0>
	if((picBlockCtr%30)==0)printf(".");
  408de2:	484b      	ldr	r0, [pc, #300]	; (408f10 <storeImage+0x8c8>)
  408de4:	4b37      	ldr	r3, [pc, #220]	; (408ec4 <storeImage+0x87c>)
  408de6:	4798      	blx	r3
	if((picBlockCtr%30)==0)	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  408de8:	4b38      	ldr	r3, [pc, #224]	; (408ecc <storeImage+0x884>)
  408dea:	f8cb 3000 	str.w	r3, [fp]
	for(picBlockCtr=0;picBlockCtr<600;picBlockCtr++){
  408dee:	3601      	adds	r6, #1
  408df0:	f507 6748 	add.w	r7, r7, #3200	; 0xc80
  408df4:	454f      	cmp	r7, r9
  408df6:	d053      	beq.n	408ea0 <storeImage+0x858>
  408df8:	eb07 010a 	add.w	r1, r7, sl
  408dfc:	f10d 0553 	add.w	r5, sp, #83	; 0x53
  408e00:	f241 3013 	movw	r0, #4883	; 0x1313
  408e04:	4468      	add	r0, sp
	fakeMSec=0;res=0;
  408e06:	462c      	mov	r4, r5
			firstByte=*camBuffPtrA++;
  408e08:	f811 ec02 	ldrb.w	lr, [r1, #-2]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  408e0c:	f811 2c01 	ldrb.w	r2, [r1, #-1]
			blueByte=(firstByte&0xF8);
  408e10:	f02e 0307 	bic.w	r3, lr, #7
			*oneLinePtr++=blueByte;
  408e14:	f804 3c03 	strb.w	r3, [r4, #-3]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  408e18:	10d3      	asrs	r3, r2, #3
  408e1a:	f003 031c 	and.w	r3, r3, #28
  408e1e:	eb03 134e 	add.w	r3, r3, lr, lsl #5
			*oneLinePtr++=greenByte;
  408e22:	f804 3c02 	strb.w	r3, [r4, #-2]
			redByte=(secondByte&0x1F)<<3;
  408e26:	00d2      	lsls	r2, r2, #3
  408e28:	f804 2c01 	strb.w	r2, [r4, #-1]
  408e2c:	3102      	adds	r1, #2
  408e2e:	3403      	adds	r4, #3
		for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  408e30:	4284      	cmp	r4, r0
  408e32:	d1e9      	bne.n	408e08 <storeImage+0x7c0>
		f_write(&file_object,oneLine,4800,&fwret);
  408e34:	f10d 0317 	add.w	r3, sp, #23
  408e38:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
  408e3c:	a914      	add	r1, sp, #80	; 0x50
  408e3e:	f241 303c 	movw	r0, #4924	; 0x133c
  408e42:	4468      	add	r0, sp
  408e44:	47c0      	blx	r8
  408e46:	4639      	mov	r1, r7
			firstByte=*camBuffPtrB++;
  408e48:	f811 0c02 	ldrb.w	r0, [r1, #-2]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  408e4c:	f811 2c01 	ldrb.w	r2, [r1, #-1]
			blueByte=(firstByte&0xF8);
  408e50:	f020 0307 	bic.w	r3, r0, #7
			*oneLinePtr++=blueByte;
  408e54:	f805 3c03 	strb.w	r3, [r5, #-3]
			greenByte=((firstByte&0x07)<<5)+((secondByte&0xE0)>>3);
  408e58:	10d3      	asrs	r3, r2, #3
  408e5a:	f003 031c 	and.w	r3, r3, #28
  408e5e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
			*oneLinePtr++=greenByte;
  408e62:	f805 3c02 	strb.w	r3, [r5, #-2]
			redByte=(secondByte&0x1F)<<3;
  408e66:	00d2      	lsls	r2, r2, #3
  408e68:	f805 2c01 	strb.w	r2, [r5, #-1]
  408e6c:	3102      	adds	r1, #2
  408e6e:	3503      	adds	r5, #3
		for(picBuffCtr=0;picBuffCtr<1600;picBuffCtr++){
  408e70:	42a5      	cmp	r5, r4
  408e72:	d1e9      	bne.n	408e48 <storeImage+0x800>
	f_write(&file_object,oneLine,4800,&fwret);
  408e74:	f10d 0317 	add.w	r3, sp, #23
  408e78:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
  408e7c:	a914      	add	r1, sp, #80	; 0x50
  408e7e:	f241 303c 	movw	r0, #4924	; 0x133c
  408e82:	4468      	add	r0, sp
  408e84:	47c0      	blx	r8
	if((picBlockCtr%30)==0)printf(".");
  408e86:	4b23      	ldr	r3, [pc, #140]	; (408f14 <storeImage+0x8cc>)
  408e88:	fb83 2306 	smull	r2, r3, r3, r6
  408e8c:	199a      	adds	r2, r3, r6
  408e8e:	17f3      	asrs	r3, r6, #31
  408e90:	ebc3 1322 	rsb	r3, r3, r2, asr #4
  408e94:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  408e98:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
  408e9c:	d1a7      	bne.n	408dee <storeImage+0x7a6>
  408e9e:	e7a0      	b.n	408de2 <storeImage+0x79a>
	f_close(&file_object);
  408ea0:	f241 303c 	movw	r0, #4924	; 0x133c
  408ea4:	4468      	add	r0, sp
  408ea6:	4b0d      	ldr	r3, [pc, #52]	; (408edc <storeImage+0x894>)
  408ea8:	4798      	blx	r3
	closeSDcard();
  408eaa:	4b11      	ldr	r3, [pc, #68]	; (408ef0 <storeImage+0x8a8>)
  408eac:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408eae:	f44f 7280 	mov.w	r2, #256	; 0x100
  408eb2:	4b19      	ldr	r3, [pc, #100]	; (408f18 <storeImage+0x8d0>)
  408eb4:	635a      	str	r2, [r3, #52]	; 0x34
	printf("\r\nCREATED PIC FILE. FILE CLOSED.\r\n");
  408eb6:	4819      	ldr	r0, [pc, #100]	; (408f1c <storeImage+0x8d4>)
  408eb8:	4b02      	ldr	r3, [pc, #8]	; (408ec4 <storeImage+0x87c>)
  408eba:	4798      	blx	r3
  408ebc:	e756      	b.n	408d6c <storeImage+0x724>
  408ebe:	bf00      	nop
  408ec0:	0040f26c 	.word	0x0040f26c
  408ec4:	0040b671 	.word	0x0040b671
  408ec8:	004063bd 	.word	0x004063bd
  408ecc:	a5000001 	.word	0xa5000001
  408ed0:	400e1850 	.word	0x400e1850
  408ed4:	004d2b25 	.word	0x004d2b25
  408ed8:	2040008d 	.word	0x2040008d
  408edc:	00406325 	.word	0x00406325
  408ee0:	cccccccd 	.word	0xcccccccd
  408ee4:	00405ec5 	.word	0x00405ec5
  408ee8:	0040f288 	.word	0x0040f288
  408eec:	0007b784 	.word	0x0007b784
  408ef0:	0040829d 	.word	0x0040829d
  408ef4:	0040f2f0 	.word	0x0040f2f0
  408ef8:	009a5649 	.word	0x009a5649
  408efc:	0040f2a0 	.word	0x0040f2a0
  408f00:	0040f1fc 	.word	0x0040f1fc
  408f04:	004065a9 	.word	0x004065a9
  408f08:	0040f2b8 	.word	0x0040f2b8
  408f0c:	701d3302 	.word	0x701d3302
  408f10:	0040f1d4 	.word	0x0040f1d4
  408f14:	88888889 	.word	0x88888889
  408f18:	400e0e00 	.word	0x400e0e00
  408f1c:	0040f2cc 	.word	0x0040f2cc
  408f20:	00406659 	.word	0x00406659
  408f24:	ffe2cd00 	.word	0xffe2cd00
  408f28:	0040605d 	.word	0x0040605d
  408f2c:	703a7f02 	.word	0x703a7f02

00408f30 <resetPinsISI>:
	ioport_set_pin_level(SDCARDPWRC_GPIO,1);
}
/***********************************************************************
 *    RESET ISI PINS
 ***********************************************************************/
void resetPinsISI(void){
  408f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		base->PIO_PUDR = mask;
  408f34:	4b7c      	ldr	r3, [pc, #496]	; (409128 <resetPinsISI+0x1f8>)
  408f36:	f44f 0a80 	mov.w	sl, #4194304	; 0x400000
  408f3a:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408f3e:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408f42:	f8c3 a054 	str.w	sl, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408f46:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408f4a:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408f4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408f50:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  408f54:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408f56:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408f58:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  408f5c:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  408f5e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  408f62:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408f64:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  408f68:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  408f6a:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408f6c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408f70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408f72:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  408f76:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408f78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408f7a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  408f7e:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  408f80:	4c6a      	ldr	r4, [pc, #424]	; (40912c <resetPinsISI+0x1fc>)
  408f82:	f04f 0908 	mov.w	r9, #8
  408f86:	f8c4 9060 	str.w	r9, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408f8a:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  408f8e:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  408f92:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408f96:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408f9a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  408f9c:	f022 0208 	bic.w	r2, r2, #8
  408fa0:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408fa2:	6f62      	ldr	r2, [r4, #116]	; 0x74
  408fa4:	f022 0208 	bic.w	r2, r2, #8
  408fa8:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  408faa:	4a61      	ldr	r2, [pc, #388]	; (409130 <resetPinsISI+0x200>)
  408fac:	f44f 7800 	mov.w	r8, #512	; 0x200
  408fb0:	f8c2 8060 	str.w	r8, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408fb4:	f8c2 8090 	str.w	r8, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  408fb8:	f8c2 8054 	str.w	r8, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  408fbc:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408fc0:	f8c2 8080 	str.w	r8, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408fc4:	6f11      	ldr	r1, [r2, #112]	; 0x70
  408fc6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  408fca:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408fcc:	6f51      	ldr	r1, [r2, #116]	; 0x74
  408fce:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  408fd2:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  408fd4:	f04f 0c20 	mov.w	ip, #32
  408fd8:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  408fdc:	f8c2 c090 	str.w	ip, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  408fe0:	f8c2 c054 	str.w	ip, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  408fe4:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  408fe8:	f8c2 c080 	str.w	ip, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  408fec:	6f11      	ldr	r1, [r2, #112]	; 0x70
  408fee:	f021 0120 	bic.w	r1, r1, #32
  408ff2:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  408ff4:	6f51      	ldr	r1, [r2, #116]	; 0x74
  408ff6:	f021 0120 	bic.w	r1, r1, #32
  408ffa:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  408ffc:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  409000:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409004:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409008:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40900c:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409010:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409014:	6f19      	ldr	r1, [r3, #112]	; 0x70
  409016:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40901a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40901c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40901e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  409022:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  409024:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  409028:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40902a:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40902e:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409030:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409032:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409036:	6f19      	ldr	r1, [r3, #112]	; 0x70
  409038:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40903c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40903e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  409040:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  409044:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  409046:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  40904a:	6616      	str	r6, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40904c:	f8c2 6090 	str.w	r6, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  409050:	6556      	str	r6, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  409052:	6256      	str	r6, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409054:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409058:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40905a:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40905e:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409060:	6f51      	ldr	r1, [r2, #116]	; 0x74
  409062:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  409066:	6751      	str	r1, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  409068:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  40906c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40906e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409072:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409074:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409076:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40907a:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  40907c:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
  409080:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409082:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  409084:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
  409088:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40908a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  40908e:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409090:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409094:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409096:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409098:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40909c:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  4090a0:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
  4090a4:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4090a8:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  4090ac:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
  4090b0:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  4090b4:	6610      	str	r0, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4090b6:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4090ba:	6550      	str	r0, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4090bc:	6250      	str	r0, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4090be:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4090c2:	f8d2 b070 	ldr.w	fp, [r2, #112]	; 0x70
  4090c6:	f42b 1b00 	bic.w	fp, fp, #2097152	; 0x200000
  4090ca:	f8c2 b070 	str.w	fp, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4090ce:	f8d2 b074 	ldr.w	fp, [r2, #116]	; 0x74
  4090d2:	f42b 1b00 	bic.w	fp, fp, #2097152	; 0x200000
  4090d6:	f8c2 b074 	str.w	fp, [r2, #116]	; 0x74
		base->PIO_PUDR = mask;
  4090da:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4090dc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4090e0:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4090e2:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4090e4:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4090e8:	f8d2 b070 	ldr.w	fp, [r2, #112]	; 0x70
  4090ec:	f02b 7b80 	bic.w	fp, fp, #16777216	; 0x1000000
  4090f0:	f8c2 b070 	str.w	fp, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4090f4:	f8d2 b074 	ldr.w	fp, [r2, #116]	; 0x74
  4090f8:	f02b 7b80 	bic.w	fp, fp, #16777216	; 0x1000000
  4090fc:	f8c2 b074 	str.w	fp, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  409100:	f8c3 a000 	str.w	sl, [r3]
  409104:	6018      	str	r0, [r3, #0]
  409106:	f8c4 9000 	str.w	r9, [r4]
  40910a:	f8c2 8000 	str.w	r8, [r2]
  40910e:	f8c2 c000 	str.w	ip, [r2]
  409112:	f8c3 e000 	str.w	lr, [r3]
  409116:	601f      	str	r7, [r3, #0]
  409118:	6016      	str	r6, [r2, #0]
  40911a:	6019      	str	r1, [r3, #0]
  40911c:	601d      	str	r5, [r3, #0]
  40911e:	6010      	str	r0, [r2, #0]
  409120:	6011      	str	r1, [r2, #0]
  409122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409126:	bf00      	nop
  409128:	400e1400 	.word	0x400e1400
  40912c:	400e1000 	.word	0x400e1000
  409130:	400e0e00 	.word	0x400e0e00

00409134 <takeImage>:
char takeImage(char flash, char configSource, char formatSize){
  409134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409138:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
  40913c:	9102      	str	r1, [sp, #8]
  40913e:	9203      	str	r2, [sp, #12]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409140:	4b94      	ldr	r3, [pc, #592]	; (409394 <takeImage+0x260>)
  409142:	2080      	movs	r0, #128	; 0x80
  409144:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409146:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	printf("TAKE IMAGE. CONFIG SOURCE: %d. IMAGE SIZE: %d \r\n", configSource, formatSize);
  40914a:	4893      	ldr	r0, [pc, #588]	; (409398 <takeImage+0x264>)
  40914c:	4b93      	ldr	r3, [pc, #588]	; (40939c <takeImage+0x268>)
  40914e:	4798      	blx	r3
  __ASM volatile ("dsb");
  409150:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409154:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  409158:	4b91      	ldr	r3, [pc, #580]	; (4093a0 <takeImage+0x26c>)
  40915a:	2200      	movs	r2, #0
  40915c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  409160:	695a      	ldr	r2, [r3, #20]
  409162:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  409166:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  409168:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40916c:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  409170:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  409174:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409178:	f007 0007 	and.w	r0, r7, #7
  40917c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40917e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  409182:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  409186:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40918a:	f3bf 8f4f 	dsb	sy
  40918e:	f04f 34ff 	mov.w	r4, #4294967295
  409192:	fa04 fc00 	lsl.w	ip, r4, r0
  409196:	fa06 f000 	lsl.w	r0, r6, r0
  40919a:	fa04 f40e 	lsl.w	r4, r4, lr
  40919e:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCISW = sw;
  4091a2:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4091a4:	463a      	mov	r2, r7
  4091a6:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4091a8:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCISW = sw;
  4091ac:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4091b0:	3a01      	subs	r2, #1
  4091b2:	4423      	add	r3, r4
  4091b4:	f1b2 3fff 	cmp.w	r2, #4294967295
  4091b8:	d1f6      	bne.n	4091a8 <takeImage+0x74>
        } while(sets--);
  4091ba:	3e01      	subs	r6, #1
  4091bc:	4460      	add	r0, ip
  4091be:	f1b6 3fff 	cmp.w	r6, #4294967295
  4091c2:	d1ef      	bne.n	4091a4 <takeImage+0x70>
  4091c4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4091c8:	4a75      	ldr	r2, [pc, #468]	; (4093a0 <takeImage+0x26c>)
  4091ca:	6953      	ldr	r3, [r2, #20]
  4091cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4091d0:	6153      	str	r3, [r2, #20]
  4091d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4091d6:	f3bf 8f6f 	isb	sy
	configPinsSDRAM();
  4091da:	4b72      	ldr	r3, [pc, #456]	; (4093a4 <takeImage+0x270>)
  4091dc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_SDRAMC);
  4091de:	203e      	movs	r0, #62	; 0x3e
  4091e0:	4b71      	ldr	r3, [pc, #452]	; (4093a8 <takeImage+0x274>)
  4091e2:	4798      	blx	r3
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_INSIGNIS_16M,	sysclk_get_cpu_hz());
  4091e4:	4971      	ldr	r1, [pc, #452]	; (4093ac <takeImage+0x278>)
  4091e6:	4872      	ldr	r0, [pc, #456]	; (4093b0 <takeImage+0x27c>)
  4091e8:	4b72      	ldr	r3, [pc, #456]	; (4093b4 <takeImage+0x280>)
  4091ea:	4798      	blx	r3
/**
 * \brief Unaligned access is supported.
 */
static inline void sdram_enable_unaligned_support(void)
{
	SDRAMC->SDRAMC_CFR1 |= SDRAMC_CFR1_UNAL;
  4091ec:	4a72      	ldr	r2, [pc, #456]	; (4093b8 <takeImage+0x284>)
  4091ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4091f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4091f4:	6293      	str	r3, [r2, #40]	; 0x28
	printf("SRAM COMPLETE\r\n");
  4091f6:	4871      	ldr	r0, [pc, #452]	; (4093bc <takeImage+0x288>)
  4091f8:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 40939c <takeImage+0x268>
  4091fc:	47d8      	blx	fp
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  4091fe:	2210      	movs	r2, #16
  409200:	4b6f      	ldr	r3, [pc, #444]	; (4093c0 <takeImage+0x28c>)
  409202:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409206:	4c6f      	ldr	r4, [pc, #444]	; (4093c4 <takeImage+0x290>)
  409208:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
  40920c:	f8c4 a010 	str.w	sl, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409210:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409214:	4e5f      	ldr	r6, [pc, #380]	; (409394 <takeImage+0x260>)
  409216:	f44f 7780 	mov.w	r7, #256	; 0x100
  40921a:	6137      	str	r7, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40921c:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409220:	f44f 6580 	mov.w	r5, #1024	; 0x400
  409224:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409226:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40922a:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40922c:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  409234:	6173      	str	r3, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409236:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40923a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  40923e:	6173      	str	r3, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409240:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409244:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409246:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40924a:	6325      	str	r5, [r4, #48]	; 0x30
  40924c:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(100);
  40924e:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 4093f4 <takeImage+0x2c0>
  409252:	4648      	mov	r0, r9
  409254:	f8df 8194 	ldr.w	r8, [pc, #404]	; 4093ec <takeImage+0x2b8>
  409258:	47c0      	blx	r8
  40925a:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
  40925e:	6337      	str	r7, [r6, #48]	; 0x30
  409260:	6327      	str	r7, [r4, #48]	; 0x30
	delay_ms(100);
  409262:	4648      	mov	r0, r9
  409264:	47c0      	blx	r8
	delay_ms(6);//OV2710 datasheet says minimum 5ms between applying power an allowing CPWDN to go low.
  409266:	4858      	ldr	r0, [pc, #352]	; (4093c8 <takeImage+0x294>)
  409268:	47c0      	blx	r8
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40926a:	6365      	str	r5, [r4, #52]	; 0x34
	delay_ms(2);
  40926c:	4857      	ldr	r0, [pc, #348]	; (4093cc <takeImage+0x298>)
  40926e:	47c0      	blx	r8
	delay_ms(100);
  409270:	4648      	mov	r0, r9
  409272:	47c0      	blx	r8
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  409274:	4a56      	ldr	r2, [pc, #344]	; (4093d0 <takeImage+0x29c>)
  409276:	4b57      	ldr	r3, [pc, #348]	; (4093d4 <takeImage+0x2a0>)
  409278:	601a      	str	r2, [r3, #0]
	printf("CAM PWR ON\r\n");//
  40927a:	4857      	ldr	r0, [pc, #348]	; (4093d8 <takeImage+0x2a4>)
  40927c:	47d8      	blx	fp
	gpio_configure_pin(ISI_MCLK_GPIO, ISI_MCLK_FLAGS);
  40927e:	4957      	ldr	r1, [pc, #348]	; (4093dc <takeImage+0x2a8>)
  409280:	2015      	movs	r0, #21
  409282:	4b57      	ldr	r3, [pc, #348]	; (4093e0 <takeImage+0x2ac>)
  409284:	4798      	blx	r3
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  409286:	4b57      	ldr	r3, [pc, #348]	; (4093e4 <takeImage+0x2b0>)
  409288:	f44f 7281 	mov.w	r2, #258	; 0x102
  40928c:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  40928e:	f44f 7200 	mov.w	r2, #512	; 0x200
  409292:	601a      	str	r2, [r3, #0]
	while ((!(PMC->PMC_SCSR & PMC_SCSR_PCK1))&&(iters>0)) {
  409294:	689b      	ldr	r3, [r3, #8]
  409296:	f413 7f00 	tst.w	r3, #512	; 0x200
  40929a:	d11e      	bne.n	4092da <takeImage+0x1a6>
  40929c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  4092a0:	4950      	ldr	r1, [pc, #320]	; (4093e4 <takeImage+0x2b0>)
		iters--;
  4092a2:	3b01      	subs	r3, #1
	while ((!(PMC->PMC_SCSR & PMC_SCSR_PCK1))&&(iters>0)) {
  4092a4:	688a      	ldr	r2, [r1, #8]
  4092a6:	f412 7f00 	tst.w	r2, #512	; 0x200
  4092aa:	d101      	bne.n	4092b0 <takeImage+0x17c>
  4092ac:	2b00      	cmp	r3, #0
  4092ae:	dcf8      	bgt.n	4092a2 <takeImage+0x16e>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  4092b0:	b99b      	cbnz	r3, 4092da <takeImage+0x1a6>
  4092b2:	2501      	movs	r5, #1
	resetPinsISI();
  4092b4:	4b4c      	ldr	r3, [pc, #304]	; (4093e8 <takeImage+0x2b4>)
  4092b6:	4798      	blx	r3
	delay_ms(1);
  4092b8:	f24c 508e 	movw	r0, #50574	; 0xc58e
  4092bc:	4c4b      	ldr	r4, [pc, #300]	; (4093ec <takeImage+0x2b8>)
  4092be:	47a0      	blx	r4
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  4092c0:	4a43      	ldr	r2, [pc, #268]	; (4093d0 <takeImage+0x29c>)
  4092c2:	4b44      	ldr	r3, [pc, #272]	; (4093d4 <takeImage+0x2a0>)
  4092c4:	601a      	str	r2, [r3, #0]
	printf("PINS RESET\r\n");
  4092c6:	484a      	ldr	r0, [pc, #296]	; (4093f0 <takeImage+0x2bc>)
  4092c8:	4b34      	ldr	r3, [pc, #208]	; (40939c <takeImage+0x268>)
  4092ca:	4798      	blx	r3
	delay_ms(100);
  4092cc:	4849      	ldr	r0, [pc, #292]	; (4093f4 <takeImage+0x2c0>)
  4092ce:	47a0      	blx	r4
}
  4092d0:	4628      	mov	r0, r5
  4092d2:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
  4092d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	printf("MCLK OKAY\r\n");//tshooooooooooooooooooooooooooooooooooooooooooooot
  4092da:	4847      	ldr	r0, [pc, #284]	; (4093f8 <takeImage+0x2c4>)
  4092dc:	4b2f      	ldr	r3, [pc, #188]	; (40939c <takeImage+0x268>)
  4092de:	4798      	blx	r3
	delay_ms(1);
  4092e0:	f24c 508e 	movw	r0, #50574	; 0xc58e
  4092e4:	4e41      	ldr	r6, [pc, #260]	; (4093ec <takeImage+0x2b8>)
  4092e6:	47b0      	blx	r6
	opt.master_clk = sysclk_get_cpu_hz();
  4092e8:	4b30      	ldr	r3, [pc, #192]	; (4093ac <takeImage+0x278>)
  4092ea:	9391      	str	r3, [sp, #580]	; 0x244
	opt.speed      = TWIHS_CLK;
  4092ec:	4b43      	ldr	r3, [pc, #268]	; (4093fc <takeImage+0x2c8>)
  4092ee:	9392      	str	r3, [sp, #584]	; 0x248
	twihs_master_init(BOARD_TWIHS, &opt);
  4092f0:	a991      	add	r1, sp, #580	; 0x244
  4092f2:	4843      	ldr	r0, [pc, #268]	; (409400 <takeImage+0x2cc>)
  4092f4:	4b43      	ldr	r3, [pc, #268]	; (409404 <takeImage+0x2d0>)
  4092f6:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4092f8:	4b43      	ldr	r3, [pc, #268]	; (409408 <takeImage+0x2d4>)
  4092fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4092fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  409302:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  409306:	2100      	movs	r1, #0
  409308:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40930c:	601a      	str	r2, [r3, #0]
	pmc_enable_periph_clk(ID_BOARD_TWIHS);
  40930e:	2013      	movs	r0, #19
  409310:	4b25      	ldr	r3, [pc, #148]	; (4093a8 <takeImage+0x274>)
  409312:	4798      	blx	r3
	pio_configure_pin(ISI_D0_GPIO, ISI_D0_FLAGS);
  409314:	4d3d      	ldr	r5, [pc, #244]	; (40940c <takeImage+0x2d8>)
  409316:	4629      	mov	r1, r5
  409318:	2076      	movs	r0, #118	; 0x76
  40931a:	4c31      	ldr	r4, [pc, #196]	; (4093e0 <takeImage+0x2ac>)
  40931c:	47a0      	blx	r4
	pio_configure_pin(ISI_D1_GPIO, ISI_D1_FLAGS);
  40931e:	4629      	mov	r1, r5
  409320:	2075      	movs	r0, #117	; 0x75
  409322:	47a0      	blx	r4
	pio_configure_pin(ISI_D2_GPIO, ISI_D2_FLAGS);
  409324:	4629      	mov	r1, r5
  409326:	2023      	movs	r0, #35	; 0x23
  409328:	47a0      	blx	r4
	pio_configure_pin(ISI_D3_GPIO, ISI_D3_FLAGS);
  40932a:	4f2c      	ldr	r7, [pc, #176]	; (4093dc <takeImage+0x2a8>)
  40932c:	4639      	mov	r1, r7
  40932e:	2009      	movs	r0, #9
  409330:	47a0      	blx	r4
	pio_configure_pin(ISI_D4_GPIO, ISI_D4_FLAGS);
  409332:	4639      	mov	r1, r7
  409334:	2005      	movs	r0, #5
  409336:	47a0      	blx	r4
	pio_configure_pin(ISI_D5_GPIO, ISI_D5_FLAGS);
  409338:	4629      	mov	r1, r5
  40933a:	206b      	movs	r0, #107	; 0x6b
  40933c:	47a0      	blx	r4
	pio_configure_pin(ISI_D6_GPIO, ISI_D6_FLAGS);
  40933e:	4629      	mov	r1, r5
  409340:	206c      	movs	r0, #108	; 0x6c
  409342:	47a0      	blx	r4
	pio_configure_pin(ISI_D7_GPIO, ISI_D7_FLAGS);
  409344:	4629      	mov	r1, r5
  409346:	201b      	movs	r0, #27
  409348:	47a0      	blx	r4
	pio_configure_pin(ISI_HSYNC_GPIO, ISI_HSYNC_FLAGS);
  40934a:	4629      	mov	r1, r5
  40934c:	2078      	movs	r0, #120	; 0x78
  40934e:	47a0      	blx	r4
	pio_configure_pin(ISI_VSYNC_GPIO, ISI_VSYNC_FLAGS);
  409350:	4629      	mov	r1, r5
  409352:	2079      	movs	r0, #121	; 0x79
  409354:	47a0      	blx	r4
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
  409356:	4629      	mov	r1, r5
  409358:	2018      	movs	r0, #24
  40935a:	47a0      	blx	r4
	delay_ms(200);
  40935c:	482c      	ldr	r0, [pc, #176]	; (409410 <takeImage+0x2dc>)
  40935e:	47b0      	blx	r6
	iters=10;
  409360:	240a      	movs	r4, #10
	while ((ov_init(BOARD_TWIHS)==1)&&(iters>0)) {
  409362:	4d27      	ldr	r5, [pc, #156]	; (409400 <takeImage+0x2cc>)
		delay_ms(200);
  409364:	4f2a      	ldr	r7, [pc, #168]	; (409410 <takeImage+0x2dc>)
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  409366:	4e1b      	ldr	r6, [pc, #108]	; (4093d4 <takeImage+0x2a0>)
	while ((ov_init(BOARD_TWIHS)==1)&&(iters>0)) {
  409368:	4628      	mov	r0, r5
  40936a:	4b2a      	ldr	r3, [pc, #168]	; (409414 <takeImage+0x2e0>)
  40936c:	4798      	blx	r3
  40936e:	2c00      	cmp	r4, #0
  409370:	dd0b      	ble.n	40938a <takeImage+0x256>
  409372:	2801      	cmp	r0, #1
  409374:	d109      	bne.n	40938a <takeImage+0x256>
		delay_ms(200);
  409376:	4638      	mov	r0, r7
  409378:	4b1c      	ldr	r3, [pc, #112]	; (4093ec <takeImage+0x2b8>)
  40937a:	4798      	blx	r3
		printf(".");
  40937c:	4826      	ldr	r0, [pc, #152]	; (409418 <takeImage+0x2e4>)
  40937e:	4b07      	ldr	r3, [pc, #28]	; (40939c <takeImage+0x268>)
  409380:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  409382:	4b13      	ldr	r3, [pc, #76]	; (4093d0 <takeImage+0x29c>)
  409384:	6033      	str	r3, [r6, #0]
	iters--;	}	//WORKS for OV2655 (after changing one address byte for OV7692 to two address bytes for OV2655)
  409386:	3c01      	subs	r4, #1
  409388:	e7ee      	b.n	409368 <takeImage+0x234>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  40938a:	2c00      	cmp	r4, #0
  40938c:	d146      	bne.n	40941c <takeImage+0x2e8>
  40938e:	2501      	movs	r5, #1
  409390:	e790      	b.n	4092b4 <takeImage+0x180>
  409392:	bf00      	nop
  409394:	400e1400 	.word	0x400e1400
  409398:	0040f304 	.word	0x0040f304
  40939c:	0040b671 	.word	0x0040b671
  4093a0:	e000ed00 	.word	0xe000ed00
  4093a4:	00407aed 	.word	0x00407aed
  4093a8:	00403575 	.word	0x00403575
  4093ac:	11e1a300 	.word	0x11e1a300
  4093b0:	0040edb0 	.word	0x0040edb0
  4093b4:	0040270d 	.word	0x0040270d
  4093b8:	40084000 	.word	0x40084000
  4093bc:	0040f4cc 	.word	0x0040f4cc
  4093c0:	40088000 	.word	0x40088000
  4093c4:	400e0e00 	.word	0x400e0e00
  4093c8:	0004a14f 	.word	0x0004a14f
  4093cc:	00018b1b 	.word	0x00018b1b
  4093d0:	a5000001 	.word	0xa5000001
  4093d4:	400e1850 	.word	0x400e1850
  4093d8:	0040f338 	.word	0x0040f338
  4093dc:	10000001 	.word	0x10000001
  4093e0:	00403271 	.word	0x00403271
  4093e4:	400e0600 	.word	0x400e0600
  4093e8:	00408f31 	.word	0x00408f31
  4093ec:	2040008d 	.word	0x2040008d
  4093f0:	0040f48c 	.word	0x0040f48c
  4093f4:	004d2b25 	.word	0x004d2b25
  4093f8:	0040f348 	.word	0x0040f348
  4093fc:	00061a80 	.word	0x00061a80
  409400:	40018000 	.word	0x40018000
  409404:	00401535 	.word	0x00401535
  409408:	e000e100 	.word	0xe000e100
  40940c:	20000001 	.word	0x20000001
  409410:	009a5649 	.word	0x009a5649
  409414:	00400259 	.word	0x00400259
  409418:	0040f1d4 	.word	0x0040f1d4
	delay_ms(100);//CRITICAL DELAY, THIS NEEDS TO BE HERE OR OV_CONFIG() HANGS when no DO_DIAGS. March 2020. 50 seemed to work at least most of the time.
  40941c:	4865      	ldr	r0, [pc, #404]	; (4095b4 <takeImage+0x480>)
  40941e:	4b66      	ldr	r3, [pc, #408]	; (4095b8 <takeImage+0x484>)
  409420:	4798      	blx	r3
	printf("CAM INIT OKAY\r\n");
  409422:	4866      	ldr	r0, [pc, #408]	; (4095bc <takeImage+0x488>)
  409424:	4c66      	ldr	r4, [pc, #408]	; (4095c0 <takeImage+0x48c>)
  409426:	47a0      	blx	r4
	ov_configure(BOARD_TWIHS, 4);//OV2655 RESET=4
  409428:	2104      	movs	r1, #4
  40942a:	4866      	ldr	r0, [pc, #408]	; (4095c4 <takeImage+0x490>)
  40942c:	4b66      	ldr	r3, [pc, #408]	; (4095c8 <takeImage+0x494>)
  40942e:	4798      	blx	r3
	printf("CAM RESET OKAY\r\n");
  409430:	4866      	ldr	r0, [pc, #408]	; (4095cc <takeImage+0x498>)
  409432:	47a0      	blx	r4
	if(configSource == 0){
  409434:	9b02      	ldr	r3, [sp, #8]
  409436:	2b00      	cmp	r3, #0
  409438:	f040 808f 	bne.w	40955a <takeImage+0x426>
		ov_configure(BOARD_TWIHS, 2);//OV2655 CONFIG=2
  40943c:	2102      	movs	r1, #2
  40943e:	4861      	ldr	r0, [pc, #388]	; (4095c4 <takeImage+0x490>)
  409440:	4b61      	ldr	r3, [pc, #388]	; (4095c8 <takeImage+0x494>)
  409442:	4798      	blx	r3
		printf("CAM CONFIG FROM HARD CODE DEFAULT.\r\n");
  409444:	4862      	ldr	r0, [pc, #392]	; (4095d0 <takeImage+0x49c>)
  409446:	47a0      	blx	r4
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  409448:	4c62      	ldr	r4, [pc, #392]	; (4095d4 <takeImage+0x4a0>)
  40944a:	4d63      	ldr	r5, [pc, #396]	; (4095d8 <takeImage+0x4a4>)
  40944c:	6025      	str	r5, [r4, #0]
	printf("CAM CONFIG OKAY\r\n");
  40944e:	4863      	ldr	r0, [pc, #396]	; (4095dc <takeImage+0x4a8>)
  409450:	4b5b      	ldr	r3, [pc, #364]	; (4095c0 <takeImage+0x48c>)
  409452:	4798      	blx	r3
	delay_ms(100);
  409454:	4857      	ldr	r0, [pc, #348]	; (4095b4 <takeImage+0x480>)
  409456:	4b58      	ldr	r3, [pc, #352]	; (4095b8 <takeImage+0x484>)
  409458:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40945a:	6025      	str	r5, [r4, #0]
    ccsidr  = SCB->CCSIDR;
  40945c:	4b60      	ldr	r3, [pc, #384]	; (4095e0 <takeImage+0x4ac>)
  40945e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  409462:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409466:	f007 0007 	and.w	r0, r7, #7
  40946a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40946c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  409470:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  409474:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  409478:	f3bf 8f4f 	dsb	sy
  40947c:	f04f 34ff 	mov.w	r4, #4294967295
  409480:	fa04 fc00 	lsl.w	ip, r4, r0
  409484:	fa06 f000 	lsl.w	r0, r6, r0
  409488:	fa04 f40e 	lsl.w	r4, r4, lr
  40948c:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  409490:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  409492:	463a      	mov	r2, r7
  409494:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  409496:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40949a:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40949e:	3a01      	subs	r2, #1
  4094a0:	4423      	add	r3, r4
  4094a2:	f1b2 3fff 	cmp.w	r2, #4294967295
  4094a6:	d1f6      	bne.n	409496 <takeImage+0x362>
        } while(sets--);
  4094a8:	3e01      	subs	r6, #1
  4094aa:	4460      	add	r0, ip
  4094ac:	f1b6 3fff 	cmp.w	r6, #4294967295
  4094b0:	d1ef      	bne.n	409492 <takeImage+0x35e>
  4094b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4094b6:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  4094ba:	4b49      	ldr	r3, [pc, #292]	; (4095e0 <takeImage+0x4ac>)
  4094bc:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4094c0:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4094c4:	f007 0007 	and.w	r0, r7, #7
  4094c8:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4094ca:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4094ce:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4094d2:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4094d6:	f3bf 8f4f 	dsb	sy
  4094da:	f04f 34ff 	mov.w	r4, #4294967295
  4094de:	fa04 fc00 	lsl.w	ip, r4, r0
  4094e2:	fa06 f000 	lsl.w	r0, r6, r0
  4094e6:	fa04 f40e 	lsl.w	r4, r4, lr
  4094ea:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  4094ee:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4094f0:	463a      	mov	r2, r7
  4094f2:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4094f4:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  4094f8:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  4094fc:	3a01      	subs	r2, #1
  4094fe:	4423      	add	r3, r4
  409500:	f1b2 3fff 	cmp.w	r2, #4294967295
  409504:	d1f6      	bne.n	4094f4 <takeImage+0x3c0>
        } while(sets--);
  409506:	3e01      	subs	r6, #1
  409508:	4460      	add	r0, ip
  40950a:	f1b6 3fff 	cmp.w	r6, #4294967295
  40950e:	d1ef      	bne.n	4094f0 <takeImage+0x3bc>
  409510:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409514:	f3bf 8f6f 	isb	sy
	pmc_enable_periph_clk(ID_ISI);//
  409518:	203b      	movs	r0, #59	; 0x3b
  40951a:	4b32      	ldr	r3, [pc, #200]	; (4095e4 <takeImage+0x4b0>)
  40951c:	4798      	blx	r3
	_isi_AllocateFBD();//inside here is the address that needs to be sent to isi_set_dma_codec_path() below.
  40951e:	4b32      	ldr	r3, [pc, #200]	; (4095e8 <takeImage+0x4b4>)
  409520:	4798      	blx	r3
	printf("ISI ALLOCATE COMPLETE\r\n");
  409522:	4832      	ldr	r0, [pc, #200]	; (4095ec <takeImage+0x4b8>)
  409524:	4b26      	ldr	r3, [pc, #152]	; (4095c0 <takeImage+0x48c>)
  409526:	4798      	blx	r3
	ISI->ISI_CR = ISI_CR_ISI_SRST | ISI_CR_ISI_DIS;
  409528:	4b31      	ldr	r3, [pc, #196]	; (4095f0 <takeImage+0x4bc>)
  40952a:	2206      	movs	r2, #6
  40952c:	625a      	str	r2, [r3, #36]	; 0x24
	while (((ISI->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST)&&(iters>0)) {  //early boards stalled here
  40952e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  409530:	f013 0f04 	tst.w	r3, #4
  409534:	d11f      	bne.n	409576 <takeImage+0x442>
  409536:	f240 54dc 	movw	r4, #1500	; 0x5dc
		delay_ms(1);
  40953a:	f24c 578e 	movw	r7, #50574	; 0xc58e
  40953e:	4e1e      	ldr	r6, [pc, #120]	; (4095b8 <takeImage+0x484>)
	while (((ISI->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST)&&(iters>0)) {  //early boards stalled here
  409540:	4d2b      	ldr	r5, [pc, #172]	; (4095f0 <takeImage+0x4bc>)
		delay_ms(1);
  409542:	4638      	mov	r0, r7
  409544:	47b0      	blx	r6
		iters--;
  409546:	3c01      	subs	r4, #1
	while (((ISI->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST)&&(iters>0)) {  //early boards stalled here
  409548:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40954a:	f013 0f04 	tst.w	r3, #4
  40954e:	d101      	bne.n	409554 <takeImage+0x420>
  409550:	2c00      	cmp	r4, #0
  409552:	dcf6      	bgt.n	409542 <takeImage+0x40e>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  409554:	b97c      	cbnz	r4, 409576 <takeImage+0x442>
  409556:	2501      	movs	r5, #1
  409558:	e6ac      	b.n	4092b4 <takeImage+0x180>
		ov_reg ov2655FromUSB[] = {
  40955a:	f44f 7207 	mov.w	r2, #540	; 0x21c
  40955e:	4925      	ldr	r1, [pc, #148]	; (4095f4 <takeImage+0x4c0>)
  409560:	a805      	add	r0, sp, #20
  409562:	4b25      	ldr	r3, [pc, #148]	; (4095f8 <takeImage+0x4c4>)
  409564:	4798      	blx	r3
		ov_write_regs(BOARD_TWIHS, ov2655FromUSB);
  409566:	a905      	add	r1, sp, #20
  409568:	4816      	ldr	r0, [pc, #88]	; (4095c4 <takeImage+0x490>)
  40956a:	4b24      	ldr	r3, [pc, #144]	; (4095fc <takeImage+0x4c8>)
  40956c:	4798      	blx	r3
		printf("CAM CONFIG FROM HOST PC\r\n");
  40956e:	4824      	ldr	r0, [pc, #144]	; (409600 <takeImage+0x4cc>)
  409570:	4b13      	ldr	r3, [pc, #76]	; (4095c0 <takeImage+0x48c>)
  409572:	4798      	blx	r3
  409574:	e768      	b.n	409448 <takeImage+0x314>
	ISI->ISI_CR |= ISI_CR_ISI_EN;
  409576:	4c1e      	ldr	r4, [pc, #120]	; (4095f0 <takeImage+0x4bc>)
  409578:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40957a:	f043 0301 	orr.w	r3, r3, #1
  40957e:	6263      	str	r3, [r4, #36]	; 0x24
	delay_ms(10);
  409580:	4820      	ldr	r0, [pc, #128]	; (409604 <takeImage+0x4d0>)
  409582:	4b0d      	ldr	r3, [pc, #52]	; (4095b8 <takeImage+0x484>)
  409584:	4798      	blx	r3
	while (((ISI->ISI_SR & ISI_SR_ENABLE) != ISI_SR_ENABLE)&&(iters>0)) {  //early boards stalled here
  409586:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  409588:	f013 0f01 	tst.w	r3, #1
  40958c:	d13c      	bne.n	409608 <takeImage+0x4d4>
  40958e:	f240 54dc 	movw	r4, #1500	; 0x5dc
		delay_ms(1);
  409592:	f24c 578e 	movw	r7, #50574	; 0xc58e
  409596:	4e08      	ldr	r6, [pc, #32]	; (4095b8 <takeImage+0x484>)
	while (((ISI->ISI_SR & ISI_SR_ENABLE) != ISI_SR_ENABLE)&&(iters>0)) {  //early boards stalled here
  409598:	4d15      	ldr	r5, [pc, #84]	; (4095f0 <takeImage+0x4bc>)
		delay_ms(1);
  40959a:	4638      	mov	r0, r7
  40959c:	47b0      	blx	r6
		iters--;
  40959e:	3c01      	subs	r4, #1
	while (((ISI->ISI_SR & ISI_SR_ENABLE) != ISI_SR_ENABLE)&&(iters>0)) {  //early boards stalled here
  4095a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4095a2:	f013 0f01 	tst.w	r3, #1
  4095a6:	d101      	bne.n	4095ac <takeImage+0x478>
  4095a8:	2c00      	cmp	r4, #0
  4095aa:	dcf6      	bgt.n	40959a <takeImage+0x466>
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  4095ac:	bb64      	cbnz	r4, 409608 <takeImage+0x4d4>
  4095ae:	2501      	movs	r5, #1
  4095b0:	e680      	b.n	4092b4 <takeImage+0x180>
  4095b2:	bf00      	nop
  4095b4:	004d2b25 	.word	0x004d2b25
  4095b8:	2040008d 	.word	0x2040008d
  4095bc:	0040f354 	.word	0x0040f354
  4095c0:	0040b671 	.word	0x0040b671
  4095c4:	40018000 	.word	0x40018000
  4095c8:	00400335 	.word	0x00400335
  4095cc:	0040f364 	.word	0x0040f364
  4095d0:	0040f378 	.word	0x0040f378
  4095d4:	400e1850 	.word	0x400e1850
  4095d8:	a5000001 	.word	0xa5000001
  4095dc:	0040f3bc 	.word	0x0040f3bc
  4095e0:	e000ed00 	.word	0xe000ed00
  4095e4:	00403575 	.word	0x00403575
  4095e8:	00406645 	.word	0x00406645
  4095ec:	0040f3d0 	.word	0x0040f3d0
  4095f0:	4004c000 	.word	0x4004c000
  4095f4:	0040eb80 	.word	0x0040eb80
  4095f8:	0040b699 	.word	0x0040b699
  4095fc:	004001ed 	.word	0x004001ed
  409600:	0040f3a0 	.word	0x0040f3a0
  409604:	0007b784 	.word	0x0007b784
	printf("ISI ENABLED\r\n");
  409608:	4897      	ldr	r0, [pc, #604]	; (409868 <takeImage+0x734>)
  40960a:	4b98      	ldr	r3, [pc, #608]	; (40986c <takeImage+0x738>)
  40960c:	4798      	blx	r3
	adsIsiConfig.crc_sync=0;//0=no crc on embedded sync
  40960e:	2300      	movs	r3, #0
  409610:	f88d 3234 	strb.w	r3, [sp, #564]	; 0x234
	adsIsiConfig.emb_sync=0;//0=sync on vsync/hsync signals
  409614:	f88d 3233 	strb.w	r3, [sp, #563]	; 0x233
	adsIsiConfig.hpol=0;//0=sync active high
  409618:	f88d 3230 	strb.w	r3, [sp, #560]	; 0x230
	adsIsiConfig.vpol=0;//0=sync active high
  40961c:	f88d 3231 	strb.w	r3, [sp, #561]	; 0x231
	adsIsiConfig.image_fmt=ISI_INPUT_YUV;//ISI_INPUT_GS_8BIT;//need 8-bit "grayscale" ("grayscale is deceiving term, it means raw unprocessed, it can mean color)
  409620:	f88d 3238 	strb.w	r3, [sp, #568]	; 0x238
	adsIsiConfig.image_hsize=1600;//OV2655 color bar ~works with 1600.
  409624:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  409628:	928f      	str	r2, [sp, #572]	; 0x23c
	adsIsiConfig.image_vsize=1200;//480;//960;//480;
  40962a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
  40962e:	9290      	str	r2, [sp, #576]	; 0x240
	adsIsiConfig.sld=0;//h blanking
  409630:	f88d 3236 	strb.w	r3, [sp, #566]	; 0x236
	adsIsiConfig.sfd=0;//v blanking
  409634:	f88d 3237 	strb.w	r3, [sp, #567]	; 0x237
	adsIsiConfig.pck_pol=0;//0=data sampled on rising edge
  409638:	f88d 3232 	strb.w	r3, [sp, #562]	; 0x232
	adsIsiConfig.thmask=0;//only four beats of AHB burst allowed
  40963c:	f88d 3235 	strb.w	r3, [sp, #565]	; 0x235
	isi_init(ISI, &adsIsiConfig);
  409640:	4d8b      	ldr	r5, [pc, #556]	; (409870 <takeImage+0x73c>)
  409642:	a98c      	add	r1, sp, #560	; 0x230
  409644:	4628      	mov	r0, r5
  409646:	4b8b      	ldr	r3, [pc, #556]	; (409874 <takeImage+0x740>)
  409648:	4798      	blx	r3
	isi_set_dma_codec_path(ISI,1, 1000,&preBufDescList[0], 1, SRAM_BASE);//Use codec path for capturing in "grayscale" (raw color) mode.
  40964a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  40964e:	9301      	str	r3, [sp, #4]
  409650:	2101      	movs	r1, #1
  409652:	9100      	str	r1, [sp, #0]
  409654:	4b88      	ldr	r3, [pc, #544]	; (409878 <takeImage+0x744>)
  409656:	22e8      	movs	r2, #232	; 0xe8
  409658:	4628      	mov	r0, r5
  40965a:	4c88      	ldr	r4, [pc, #544]	; (40987c <takeImage+0x748>)
  40965c:	47a0      	blx	r4
	ISI->ISI_IDR = 0xFFFFFFFF;
  40965e:	f04f 34ff 	mov.w	r4, #4294967295
  409662:	632c      	str	r4, [r5, #48]	; 0x30
	ISI->ISI_IER = ISI_IER_CXFR_DONE;
  409664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  409668:	62eb      	str	r3, [r5, #44]	; 0x2c
	ISI->ISI_DMA_CHDR |= ISI_DMA_CHDR_P_CH_DIS;//disable Preview Mode
  40966a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40966c:	f043 0301 	orr.w	r3, r3, #1
  409670:	63eb      	str	r3, [r5, #60]	; 0x3c
	ISI->ISI_DMA_CHDR |= ISI_DMA_CHDR_C_CH_DIS;//disable Codec Mode
  409672:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  409674:	f043 0302 	orr.w	r3, r3, #2
  409678:	63eb      	str	r3, [r5, #60]	; 0x3c
    ccsidr  = SCB->CCSIDR;
  40967a:	4b81      	ldr	r3, [pc, #516]	; (409880 <takeImage+0x74c>)
  40967c:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  409680:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409684:	f006 0007 	and.w	r0, r6, #7
  409688:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40968a:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40968e:	fab6 f786 	clz	r7, r6
    wshift  = __CLZ(ways) & 0x1f;
  409692:	f007 071f 	and.w	r7, r7, #31
  __ASM volatile ("dsb");
  409696:	f3bf 8f4f 	dsb	sy
  40969a:	fa04 fc00 	lsl.w	ip, r4, r0
  40969e:	fa0e f000 	lsl.w	r0, lr, r0
  4096a2:	40bc      	lsls	r4, r7
  4096a4:	fa06 f707 	lsl.w	r7, r6, r7
              SCB->DCCSW = sw;
  4096a8:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4096aa:	4632      	mov	r2, r6
  4096ac:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  4096ae:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCSW = sw;
  4096b2:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
            } while(tmpways--);
  4096b6:	3a01      	subs	r2, #1
  4096b8:	4423      	add	r3, r4
  4096ba:	f1b2 3fff 	cmp.w	r2, #4294967295
  4096be:	d1f6      	bne.n	4096ae <takeImage+0x57a>
        } while(sets--);
  4096c0:	f10e 3eff 	add.w	lr, lr, #4294967295
  4096c4:	4460      	add	r0, ip
  4096c6:	f1be 3fff 	cmp.w	lr, #4294967295
  4096ca:	d1ee      	bne.n	4096aa <takeImage+0x576>
  4096cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4096d0:	f3bf 8f6f 	isb	sy
	ISI->ISI_DMA_CHER |= ISI_DMA_CHER_C_CH_EN;//enable Codec Mode. MUST USE CODEC PATH BECAUSE PREVIEW IS ONLY 640 X 480
  4096d4:	4a66      	ldr	r2, [pc, #408]	; (409870 <takeImage+0x73c>)
  4096d6:	6b93      	ldr	r3, [r2, #56]	; 0x38
  4096d8:	f043 0302 	orr.w	r3, r3, #2
  4096dc:	6393      	str	r3, [r2, #56]	; 0x38
	printf("ISI INIT DONE A\r\n");
  4096de:	4869      	ldr	r0, [pc, #420]	; (409884 <takeImage+0x750>)
  4096e0:	4b62      	ldr	r3, [pc, #392]	; (40986c <takeImage+0x738>)
  4096e2:	4798      	blx	r3
	delay_ms(5);
  4096e4:	4868      	ldr	r0, [pc, #416]	; (409888 <takeImage+0x754>)
  4096e6:	4b69      	ldr	r3, [pc, #420]	; (40988c <takeImage+0x758>)
  4096e8:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4096ea:	4b69      	ldr	r3, [pc, #420]	; (409890 <takeImage+0x75c>)
  4096ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4096f0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4096f4:	21e0      	movs	r1, #224	; 0xe0
  4096f6:	f883 133b 	strb.w	r1, [r3, #827]	; 0x33b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4096fa:	605a      	str	r2, [r3, #4]
 */
static inline char isi_capture(Isi *p_isi)
{
	char captureIters = 0;
	/* A new request cannot be taken into account while CDC_PND bit is active */
	while((p_isi->ISI_SR & ISI_SR_CDC_PND) == ISI_SR_CDC_PND);
  4096fc:	4a5c      	ldr	r2, [pc, #368]	; (409870 <takeImage+0x73c>)
  4096fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
  409700:	f413 7f80 	tst.w	r3, #256	; 0x100
  409704:	d1fb      	bne.n	4096fe <takeImage+0x5ca>
	p_isi->ISI_CR = ISI_CR_ISI_CDC;
  409706:	f44f 7280 	mov.w	r2, #256	; 0x100
  40970a:	4b59      	ldr	r3, [pc, #356]	; (409870 <takeImage+0x73c>)
  40970c:	625a      	str	r2, [r3, #36]	; 0x24
	printf("ISI CAPTURE DONE. CAP;sjd;lskdjf;lksjf;sldjkf;sldj AAA= %d\r\n",capIters);
  40970e:	2100      	movs	r1, #0
  409710:	4860      	ldr	r0, [pc, #384]	; (409894 <takeImage+0x760>)
  409712:	4d56      	ldr	r5, [pc, #344]	; (40986c <takeImage+0x738>)
  409714:	47a8      	blx	r5
	delay_ms(1200);//100ms left first row of memory wrong. Need even longer delay if use slower PLL divide on camera.
  409716:	4860      	ldr	r0, [pc, #384]	; (409898 <takeImage+0x764>)
  409718:	4c5c      	ldr	r4, [pc, #368]	; (40988c <takeImage+0x758>)
  40971a:	47a0      	blx	r4
	sdramc_deinit();
  40971c:	4b5f      	ldr	r3, [pc, #380]	; (40989c <takeImage+0x768>)
  40971e:	4798      	blx	r3
	printf("SDRAM DEINIT\r\n");
  409720:	485f      	ldr	r0, [pc, #380]	; (4098a0 <takeImage+0x76c>)
  409722:	47a8      	blx	r5
	delay_ms(100);
  409724:	485f      	ldr	r0, [pc, #380]	; (4098a4 <takeImage+0x770>)
  409726:	47a0      	blx	r4
    ccsidr  = SCB->CCSIDR;
  409728:	4b55      	ldr	r3, [pc, #340]	; (409880 <takeImage+0x74c>)
  40972a:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40972e:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409732:	f006 0007 	and.w	r0, r6, #7
  409736:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409738:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40973c:	fab6 f786 	clz	r7, r6
    wshift  = __CLZ(ways) & 0x1f;
  409740:	f007 071f 	and.w	r7, r7, #31
  __ASM volatile ("dsb");
  409744:	f3bf 8f4f 	dsb	sy
  409748:	f04f 34ff 	mov.w	r4, #4294967295
  40974c:	fa04 fc00 	lsl.w	ip, r4, r0
  409750:	fa0e f000 	lsl.w	r0, lr, r0
  409754:	40bc      	lsls	r4, r7
  409756:	fa06 f707 	lsl.w	r7, r6, r7
              SCB->DCCISW = sw;
  40975a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40975c:	4632      	mov	r2, r6
  40975e:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  409760:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  409764:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  409768:	3a01      	subs	r2, #1
  40976a:	4423      	add	r3, r4
  40976c:	f1b2 3fff 	cmp.w	r2, #4294967295
  409770:	d1f6      	bne.n	409760 <takeImage+0x62c>
        } while(sets--);
  409772:	f10e 3eff 	add.w	lr, lr, #4294967295
  409776:	4460      	add	r0, ip
  409778:	f1be 3fff 	cmp.w	lr, #4294967295
  40977c:	d1ee      	bne.n	40975c <takeImage+0x628>
  40977e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409782:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  409786:	4b3e      	ldr	r3, [pc, #248]	; (409880 <takeImage+0x74c>)
  409788:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40978c:	f3c6 3e4e 	ubfx	lr, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  409790:	f006 0007 	and.w	r0, r6, #7
  409794:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  409796:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40979a:	fab6 f786 	clz	r7, r6
    wshift  = __CLZ(ways) & 0x1f;
  40979e:	f007 071f 	and.w	r7, r7, #31
  __ASM volatile ("dsb");
  4097a2:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  4097a6:	695a      	ldr	r2, [r3, #20]
  4097a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  4097ac:	615a      	str	r2, [r3, #20]
  4097ae:	f04f 34ff 	mov.w	r4, #4294967295
  4097b2:	fa04 fc00 	lsl.w	ip, r4, r0
  4097b6:	fa0e f000 	lsl.w	r0, lr, r0
  4097ba:	40bc      	lsls	r4, r7
  4097bc:	fa06 f707 	lsl.w	r7, r6, r7
              SCB->DCCISW = sw;
  4097c0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4097c2:	4632      	mov	r2, r6
  4097c4:	463b      	mov	r3, r7
              sw = ((tmpways << wshift) | (sets << sshift));
  4097c6:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  4097ca:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  4097ce:	3a01      	subs	r2, #1
  4097d0:	4423      	add	r3, r4
  4097d2:	f1b2 3fff 	cmp.w	r2, #4294967295
  4097d6:	d1f6      	bne.n	4097c6 <takeImage+0x692>
        } while(sets--);
  4097d8:	f10e 3eff 	add.w	lr, lr, #4294967295
  4097dc:	4460      	add	r0, ip
  4097de:	f1be 3fff 	cmp.w	lr, #4294967295
  4097e2:	d1ee      	bne.n	4097c2 <takeImage+0x68e>
  4097e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4097e8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  4097ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4097f0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;
  4097f4:	4b22      	ldr	r3, [pc, #136]	; (409880 <takeImage+0x74c>)
  4097f6:	2100      	movs	r1, #0
  4097f8:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb");
  4097fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409800:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  409804:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  409808:	f3bf 8f6f 	isb	sy
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  40980c:	695a      	ldr	r2, [r3, #20]
  40980e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  409812:	615a      	str	r2, [r3, #20]
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  409814:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb");
  409818:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40981c:	f3bf 8f6f 	isb	sy
	printf("CACHE DISABLED\r\n");
  409820:	4821      	ldr	r0, [pc, #132]	; (4098a8 <takeImage+0x774>)
  409822:	4c12      	ldr	r4, [pc, #72]	; (40986c <takeImage+0x738>)
  409824:	47a0      	blx	r4
	ov_configure(BOARD_TWIHS, 2);//OV2710 RESET. Required to free up ISID7_SDdat3 for SDcard to work.  OV2655 = 2 for Reset (not needed for 2655??)
  409826:	2102      	movs	r1, #2
  409828:	4820      	ldr	r0, [pc, #128]	; (4098ac <takeImage+0x778>)
  40982a:	4b21      	ldr	r3, [pc, #132]	; (4098b0 <takeImage+0x77c>)
  40982c:	4798      	blx	r3
	printf("OV CONFIGURED\r\n");
  40982e:	4821      	ldr	r0, [pc, #132]	; (4098b4 <takeImage+0x780>)
  409830:	47a0      	blx	r4
	delay_ms(100);
  409832:	481c      	ldr	r0, [pc, #112]	; (4098a4 <takeImage+0x770>)
  409834:	4b15      	ldr	r3, [pc, #84]	; (40988c <takeImage+0x758>)
  409836:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  409838:	4a1f      	ldr	r2, [pc, #124]	; (4098b8 <takeImage+0x784>)
  40983a:	4b20      	ldr	r3, [pc, #128]	; (4098bc <takeImage+0x788>)
  40983c:	601a      	str	r2, [r3, #0]
	if(formatSize)RGB565toRGB888();
  40983e:	9b03      	ldr	r3, [sp, #12]
  409840:	b10b      	cbz	r3, 409846 <takeImage+0x712>
  409842:	4b1f      	ldr	r3, [pc, #124]	; (4098c0 <takeImage+0x78c>)
  409844:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  409846:	4c1f      	ldr	r4, [pc, #124]	; (4098c4 <takeImage+0x790>)
  409848:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40984c:	6325      	str	r5, [r4, #48]	; 0x30
  40984e:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(1);
  409850:	f24c 508e 	movw	r0, #50574	; 0xc58e
  409854:	4e0d      	ldr	r6, [pc, #52]	; (40988c <takeImage+0x758>)
  409856:	47b0      	blx	r6
  409858:	6325      	str	r5, [r4, #48]	; 0x30
	printf("CAM OFF\r\n");
  40985a:	481b      	ldr	r0, [pc, #108]	; (4098c8 <takeImage+0x794>)
  40985c:	4b03      	ldr	r3, [pc, #12]	; (40986c <takeImage+0x738>)
  40985e:	4798      	blx	r3
	delay_ms(100);
  409860:	4810      	ldr	r0, [pc, #64]	; (4098a4 <takeImage+0x770>)
  409862:	47b0      	blx	r6
	char ret=0;
  409864:	2500      	movs	r5, #0
  409866:	e525      	b.n	4092b4 <takeImage+0x180>
  409868:	0040f3e8 	.word	0x0040f3e8
  40986c:	0040b671 	.word	0x0040b671
  409870:	4004c000 	.word	0x4004c000
  409874:	004023e1 	.word	0x004023e1
  409878:	20400f80 	.word	0x20400f80
  40987c:	00402491 	.word	0x00402491
  409880:	e000ed00 	.word	0xe000ed00
  409884:	0040f3f8 	.word	0x0040f3f8
  409888:	0003dbc2 	.word	0x0003dbc2
  40988c:	2040008d 	.word	0x2040008d
  409890:	e000e100 	.word	0xe000e100
  409894:	0040f40c 	.word	0x0040f40c
  409898:	039e05b4 	.word	0x039e05b4
  40989c:	0040286d 	.word	0x0040286d
  4098a0:	0040f44c 	.word	0x0040f44c
  4098a4:	004d2b25 	.word	0x004d2b25
  4098a8:	0040f45c 	.word	0x0040f45c
  4098ac:	40018000 	.word	0x40018000
  4098b0:	00400335 	.word	0x00400335
  4098b4:	0040f470 	.word	0x0040f470
  4098b8:	a5000001 	.word	0xa5000001
  4098bc:	400e1850 	.word	0x400e1850
  4098c0:	00406e31 	.word	0x00406e31
  4098c4:	400e0e00 	.word	0x400e0e00
  4098c8:	0040f480 	.word	0x0040f480

004098cc <main_vendor_int_in_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  4098cc:	b100      	cbz	r0, 4098d0 <main_vendor_int_in_received+0x4>
  4098ce:	4770      	bx	lr
{
  4098d0:	b510      	push	{r4, lr}
  4098d2:	b084      	sub	sp, #16
	udi_vendor_interrupt_out_run(
  4098d4:	4c1d      	ldr	r4, [pc, #116]	; (40994c <main_vendor_int_in_received+0x80>)
  4098d6:	4a1e      	ldr	r2, [pc, #120]	; (409950 <main_vendor_int_in_received+0x84>)
  4098d8:	f44f 7100 	mov.w	r1, #512	; 0x200
  4098dc:	4620      	mov	r0, r4
  4098de:	4b1d      	ldr	r3, [pc, #116]	; (409954 <main_vendor_int_in_received+0x88>)
  4098e0:	4798      	blx	r3
	if((main_buf_loopback[0]=='W')&&(main_buf_loopback[1]=='D')&&(main_buf_loopback[2]=='S')){
  4098e2:	7823      	ldrb	r3, [r4, #0]
  4098e4:	2b57      	cmp	r3, #87	; 0x57
  4098e6:	d010      	beq.n	40990a <main_vendor_int_in_received+0x3e>
	printf("IN: %d %d %d %d %d %d %d\r\n",main_buf_loopback[0],main_buf_loopback[1],main_buf_loopback[2],main_buf_loopback[3],main_buf_loopback[4],main_buf_loopback[5],main_buf_loopback[6]);
  4098e8:	4818      	ldr	r0, [pc, #96]	; (40994c <main_vendor_int_in_received+0x80>)
  4098ea:	7883      	ldrb	r3, [r0, #2]
  4098ec:	7842      	ldrb	r2, [r0, #1]
  4098ee:	7801      	ldrb	r1, [r0, #0]
  4098f0:	7984      	ldrb	r4, [r0, #6]
  4098f2:	9403      	str	r4, [sp, #12]
  4098f4:	7944      	ldrb	r4, [r0, #5]
  4098f6:	9402      	str	r4, [sp, #8]
  4098f8:	7904      	ldrb	r4, [r0, #4]
  4098fa:	9401      	str	r4, [sp, #4]
  4098fc:	78c0      	ldrb	r0, [r0, #3]
  4098fe:	9000      	str	r0, [sp, #0]
  409900:	4815      	ldr	r0, [pc, #84]	; (409958 <main_vendor_int_in_received+0x8c>)
  409902:	4c16      	ldr	r4, [pc, #88]	; (40995c <main_vendor_int_in_received+0x90>)
  409904:	47a0      	blx	r4
}
  409906:	b004      	add	sp, #16
  409908:	bd10      	pop	{r4, pc}
	if((main_buf_loopback[0]=='W')&&(main_buf_loopback[1]=='D')&&(main_buf_loopback[2]=='S')){
  40990a:	7863      	ldrb	r3, [r4, #1]
  40990c:	2b44      	cmp	r3, #68	; 0x44
  40990e:	d1eb      	bne.n	4098e8 <main_vendor_int_in_received+0x1c>
  409910:	78a3      	ldrb	r3, [r4, #2]
  409912:	2b53      	cmp	r3, #83	; 0x53
  409914:	d1e8      	bne.n	4098e8 <main_vendor_int_in_received+0x1c>
		switch(main_buf_loopback[5]){
  409916:	7963      	ldrb	r3, [r4, #5]
  409918:	2b02      	cmp	r3, #2
  40991a:	d00c      	beq.n	409936 <main_vendor_int_in_received+0x6a>
  40991c:	2b05      	cmp	r3, #5
  40991e:	d012      	beq.n	409946 <main_vendor_int_in_received+0x7a>
  409920:	2b01      	cmp	r3, #1
  409922:	d1e1      	bne.n	4098e8 <main_vendor_int_in_received+0x1c>
			g_imageSize = main_buf_loopback[17];
  409924:	4b09      	ldr	r3, [pc, #36]	; (40994c <main_vendor_int_in_received+0x80>)
  409926:	7c5a      	ldrb	r2, [r3, #17]
  409928:	490d      	ldr	r1, [pc, #52]	; (409960 <main_vendor_int_in_received+0x94>)
  40992a:	700a      	strb	r2, [r1, #0]
			takeImage(0, main_buf_loopback[14], main_buf_loopback[17]);			
  40992c:	7b99      	ldrb	r1, [r3, #14]
  40992e:	2000      	movs	r0, #0
  409930:	4b0c      	ldr	r3, [pc, #48]	; (409964 <main_vendor_int_in_received+0x98>)
  409932:	4798      	blx	r3
			break;
  409934:	e7d8      	b.n	4098e8 <main_vendor_int_in_received+0x1c>
			redBlink(main_buf_loopback[17]);
  409936:	4b05      	ldr	r3, [pc, #20]	; (40994c <main_vendor_int_in_received+0x80>)
  409938:	7c58      	ldrb	r0, [r3, #17]
  40993a:	4b0b      	ldr	r3, [pc, #44]	; (409968 <main_vendor_int_in_received+0x9c>)
  40993c:	4798      	blx	r3
			printf("Blinked\r\n");
  40993e:	480b      	ldr	r0, [pc, #44]	; (40996c <main_vendor_int_in_received+0xa0>)
  409940:	4b06      	ldr	r3, [pc, #24]	; (40995c <main_vendor_int_in_received+0x90>)
  409942:	4798      	blx	r3
			break;
  409944:	e7d0      	b.n	4098e8 <main_vendor_int_in_received+0x1c>
			receiveUSBcamConfig();
  409946:	4b0a      	ldr	r3, [pc, #40]	; (409970 <main_vendor_int_in_received+0xa4>)
  409948:	4798      	blx	r3
			break;
  40994a:	e7cd      	b.n	4098e8 <main_vendor_int_in_received+0x1c>
  40994c:	20400cc8 	.word	0x20400cc8
  409950:	00406ab9 	.word	0x00406ab9
  409954:	00402a51 	.word	0x00402a51
  409958:	0040f03c 	.word	0x0040f03c
  40995c:	0040b671 	.word	0x0040b671
  409960:	20400cc2 	.word	0x20400cc2
  409964:	00409135 	.word	0x00409135
  409968:	00407c31 	.word	0x00407c31
  40996c:	0040f030 	.word	0x0040f030
  409970:	00406e09 	.word	0x00406e09

00409974 <main_vendor_enable>:
{
  409974:	b510      	push	{r4, lr}
	main_b_vendor_enable = true;
  409976:	2401      	movs	r4, #1
  409978:	4b0b      	ldr	r3, [pc, #44]	; (4099a8 <main_vendor_enable+0x34>)
  40997a:	701c      	strb	r4, [r3, #0]
	main_vendor_int_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  40997c:	2200      	movs	r2, #0
  40997e:	4611      	mov	r1, r2
  409980:	4610      	mov	r0, r2
  409982:	4b0a      	ldr	r3, [pc, #40]	; (4099ac <main_vendor_enable+0x38>)
  409984:	4798      	blx	r3
	g_usbFlagC=3;
  409986:	2203      	movs	r2, #3
  409988:	4b09      	ldr	r3, [pc, #36]	; (4099b0 <main_vendor_enable+0x3c>)
  40998a:	701a      	strb	r2, [r3, #0]
	main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  40998c:	2200      	movs	r2, #0
  40998e:	4611      	mov	r1, r2
  409990:	4610      	mov	r0, r2
  409992:	4b08      	ldr	r3, [pc, #32]	; (4099b4 <main_vendor_enable+0x40>)
  409994:	4798      	blx	r3
	main_buf_iso_sel=0;
  409996:	2000      	movs	r0, #0
  409998:	4b07      	ldr	r3, [pc, #28]	; (4099b8 <main_vendor_enable+0x44>)
  40999a:	7018      	strb	r0, [r3, #0]
	main_vendor_iso_out_received(UDD_EP_TRANSFER_OK, 0, 0);
  40999c:	4602      	mov	r2, r0
  40999e:	4601      	mov	r1, r0
  4099a0:	4b06      	ldr	r3, [pc, #24]	; (4099bc <main_vendor_enable+0x48>)
  4099a2:	4798      	blx	r3
}
  4099a4:	4620      	mov	r0, r4
  4099a6:	bd10      	pop	{r4, pc}
  4099a8:	20400cc6 	.word	0x20400cc6
  4099ac:	004098cd 	.word	0x004098cd
  4099b0:	20400cc5 	.word	0x20400cc5
  4099b4:	00406b01 	.word	0x00406b01
  4099b8:	20400cc7 	.word	0x20400cc7
  4099bc:	00406bf9 	.word	0x00406bf9

004099c0 <sleepPins>:
void sleepPins(void){
  4099c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pmc_enable_periph_clk(ID_PIOA);
  4099c4:	200a      	movs	r0, #10
  4099c6:	4ce1      	ldr	r4, [pc, #900]	; (409d4c <sleepPins+0x38c>)
  4099c8:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  4099ca:	200b      	movs	r0, #11
  4099cc:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOC);
  4099ce:	200c      	movs	r0, #12
  4099d0:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  4099d2:	2010      	movs	r0, #16
  4099d4:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOE);
  4099d6:	2011      	movs	r0, #17
  4099d8:	47a0      	blx	r4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4099da:	4bdd      	ldr	r3, [pc, #884]	; (409d50 <sleepPins+0x390>)
  4099dc:	2701      	movs	r7, #1
  4099de:	615f      	str	r7, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4099e0:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4099e4:	2602      	movs	r6, #2
  4099e6:	615e      	str	r6, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4099e8:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4099ec:	2504      	movs	r5, #4
  4099ee:	615d      	str	r5, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4099f0:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4099f4:	2440      	movs	r4, #64	; 0x40
  4099f6:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4099f8:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4099fc:	f04f 0a80 	mov.w	sl, #128	; 0x80
  409a00:	f8c3 a014 	str.w	sl, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a04:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
  409a0c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409a12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  409a16:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  409a20:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a22:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409a26:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  409a2a:	f8c3 c014 	str.w	ip, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a2e:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409a32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  409a36:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a38:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409a3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  409a40:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a42:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409a46:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
  409a4a:	f8c3 9014 	str.w	r9, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a4e:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409a52:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
  409a56:	f8c3 8010 	str.w	r8, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a5a:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409a5e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  409a62:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a64:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409a68:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  409a6c:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a6e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409a72:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  409a76:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a78:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409a7c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  409a80:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a82:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409a86:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
  409a8a:	f8c3 e010 	str.w	lr, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a8e:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409a92:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  409a96:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409a98:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  409a9c:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409a9e:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409aa2:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409aa4:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409aa6:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409aaa:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  409aae:	f02b 0b01 	bic.w	fp, fp, #1
  409ab2:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409ab6:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  409aba:	f02b 0b01 	bic.w	fp, fp, #1
  409abe:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  409ac2:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409ac4:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDER = mask;
  409ac8:	651e      	str	r6, [r3, #80]	; 0x50
		base->PIO_IFER = mask;
  409aca:	621e      	str	r6, [r3, #32]
		base->PIO_IFSCDR = mask;
  409acc:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409ad0:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  409ad4:	f02b 0b02 	bic.w	fp, fp, #2
  409ad8:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409adc:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  409ae0:	f02b 0b02 	bic.w	fp, fp, #2
  409ae4:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409ae8:	665d      	str	r5, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409aea:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409aee:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409af0:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409af2:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409af6:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  409afa:	f02b 0b04 	bic.w	fp, fp, #4
  409afe:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409b02:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  409b06:	f02b 0b04 	bic.w	fp, fp, #4
  409b0a:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409b0e:	665c      	str	r4, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409b10:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409b14:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409b16:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409b18:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409b1c:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
  409b20:	f02b 0b40 	bic.w	fp, fp, #64	; 0x40
  409b24:	f8c3 b070 	str.w	fp, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409b28:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
  409b2c:	f02b 0b40 	bic.w	fp, fp, #64	; 0x40
  409b30:	f8c3 b074 	str.w	fp, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  409b34:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409b38:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDER = mask;
  409b3c:	f8c3 a050 	str.w	sl, [r3, #80]	; 0x50
		base->PIO_IFDR = mask;
  409b40:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409b44:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409b48:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  409b4c:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
  409b50:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409b54:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  409b58:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
  409b5c:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409b60:	f44f 6000 	mov.w	r0, #2048	; 0x800
  409b64:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409b66:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409b6a:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409b6c:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409b6e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409b72:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  409b76:	f42a 6a00 	bic.w	sl, sl, #2048	; 0x800
  409b7a:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409b7e:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  409b82:	f42a 6a00 	bic.w	sl, sl, #2048	; 0x800
  409b86:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409b8a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409b8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409b90:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409b92:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409b98:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  409b9c:	f42a 5a80 	bic.w	sl, sl, #4096	; 0x1000
  409ba0:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409ba4:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  409ba8:	f42a 5a80 	bic.w	sl, sl, #4096	; 0x1000
  409bac:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409bb0:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409bb2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409bb6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409bb8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409bba:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409bbe:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  409bc2:	f42a 5a00 	bic.w	sl, sl, #8192	; 0x2000
  409bc6:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409bca:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  409bce:	f42a 5a00 	bic.w	sl, sl, #8192	; 0x2000
  409bd2:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409bd6:	f8c3 c064 	str.w	ip, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409bda:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409bde:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409be2:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409be6:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409bea:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  409bee:	f42a 4a80 	bic.w	sl, sl, #16384	; 0x4000
  409bf2:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409bf6:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  409bfa:	f42a 4a80 	bic.w	sl, sl, #16384	; 0x4000
  409bfe:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409c02:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  409c06:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409c08:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409c0c:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409c0e:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409c10:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409c14:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  409c18:	f42a 3a00 	bic.w	sl, sl, #131072	; 0x20000
  409c1c:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409c20:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  409c24:	f42a 3a00 	bic.w	sl, sl, #131072	; 0x20000
  409c28:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409c2c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  409c30:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409c32:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409c36:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409c38:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409c3a:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409c3e:	f8d3 a070 	ldr.w	sl, [r3, #112]	; 0x70
  409c42:	f42a 2a00 	bic.w	sl, sl, #524288	; 0x80000
  409c46:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409c4a:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
  409c4e:	f42a 2a00 	bic.w	sl, sl, #524288	; 0x80000
  409c52:	f8c3 a074 	str.w	sl, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409c56:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409c5a:	f8c3 9090 	str.w	r9, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409c5e:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409c62:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409c66:	f8c3 9080 	str.w	r9, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409c6a:	f8d3 9070 	ldr.w	r9, [r3, #112]	; 0x70
  409c6e:	f429 0980 	bic.w	r9, r9, #4194304	; 0x400000
  409c72:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409c76:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
  409c7a:	f429 0980 	bic.w	r9, r9, #4194304	; 0x400000
  409c7e:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  409c82:	f8c3 8060 	str.w	r8, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409c86:	f8c3 8090 	str.w	r8, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409c8a:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409c8e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409c92:	f8c3 8080 	str.w	r8, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409c96:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  409c9a:	f028 7800 	bic.w	r8, r8, #33554432	; 0x2000000
  409c9e:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409ca2:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  409ca6:	f028 7800 	bic.w	r8, r8, #33554432	; 0x2000000
  409caa:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  409cae:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  409cb2:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409cb4:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409cb8:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409cba:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409cbc:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409cc0:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  409cc4:	f028 6880 	bic.w	r8, r8, #67108864	; 0x4000000
  409cc8:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409ccc:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  409cd0:	f028 6880 	bic.w	r8, r8, #67108864	; 0x4000000
  409cd4:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  409cd8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  409cdc:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409cde:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409ce2:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409ce4:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409ce6:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409cea:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  409cee:	f028 6800 	bic.w	r8, r8, #134217728	; 0x8000000
  409cf2:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409cf6:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  409cfa:	f028 6800 	bic.w	r8, r8, #134217728	; 0x8000000
  409cfe:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  409d02:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  409d06:	6358      	str	r0, [r3, #52]	; 0x34
		base->PIO_PUER = mask;
  409d08:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  409d0c:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409d0e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409d12:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409d14:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409d16:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409d1a:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  409d1e:	f028 5800 	bic.w	r8, r8, #536870912	; 0x20000000
  409d22:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409d26:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  409d2a:	f028 5800 	bic.w	r8, r8, #536870912	; 0x20000000
  409d2e:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  409d32:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409d36:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409d3a:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409d3e:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409d42:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409d46:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  409d4a:	e003      	b.n	409d54 <sleepPins+0x394>
  409d4c:	00403575 	.word	0x00403575
  409d50:	400e0e00 	.word	0x400e0e00
  409d54:	f028 4880 	bic.w	r8, r8, #1073741824	; 0x40000000
  409d58:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409d5c:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  409d60:	f028 4880 	bic.w	r8, r8, #1073741824	; 0x40000000
  409d64:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  409d68:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  409d6c:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409d6e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409d72:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409d74:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409d76:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409d7a:	f8d3 8070 	ldr.w	r8, [r3, #112]	; 0x70
  409d7e:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
  409d82:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409d86:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
  409d8a:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
  409d8e:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409d92:	f503 7300 	add.w	r3, r3, #512	; 0x200
  409d96:	615f      	str	r7, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409d98:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409d9c:	615e      	str	r6, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409d9e:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409da2:	615d      	str	r5, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409da4:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409da8:	f04f 0a10 	mov.w	sl, #16
  409dac:	f8c3 a014 	str.w	sl, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409db0:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409db4:	f04f 0920 	mov.w	r9, #32
  409db8:	f8c3 9014 	str.w	r9, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409dbc:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409dc0:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409dc2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409dc6:	f44f 7800 	mov.w	r8, #512	; 0x200
  409dca:	f8c3 8014 	str.w	r8, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409dce:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409dd2:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409dd4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409dd8:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409dda:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  409dde:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409de0:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409de4:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409de6:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409de8:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409dec:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  409dee:	f027 0701 	bic.w	r7, r7, #1
  409df2:	671f      	str	r7, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409df4:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  409df6:	f027 0701 	bic.w	r7, r7, #1
  409dfa:	675f      	str	r7, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409dfc:	665e      	str	r6, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409dfe:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409e02:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409e04:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409e06:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409e0a:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  409e0c:	f026 0602 	bic.w	r6, r6, #2
  409e10:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409e12:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  409e14:	f026 0602 	bic.w	r6, r6, #2
  409e18:	675e      	str	r6, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409e1a:	665d      	str	r5, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409e1c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409e20:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409e22:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409e24:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409e28:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  409e2a:	f025 0504 	bic.w	r5, r5, #4
  409e2e:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409e30:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  409e32:	f025 0504 	bic.w	r5, r5, #4
  409e36:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409e38:	f8c3 a064 	str.w	sl, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409e3c:	f8c3 a090 	str.w	sl, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409e40:	f8c3 a054 	str.w	sl, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409e44:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409e48:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409e4c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  409e4e:	f025 0510 	bic.w	r5, r5, #16
  409e52:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409e54:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  409e56:	f025 0510 	bic.w	r5, r5, #16
  409e5a:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409e5c:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409e60:	f8c3 9090 	str.w	r9, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409e64:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409e68:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409e6c:	f8c3 9080 	str.w	r9, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409e70:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  409e72:	f025 0520 	bic.w	r5, r5, #32
  409e76:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409e78:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  409e7a:	f025 0520 	bic.w	r5, r5, #32
  409e7e:	675d      	str	r5, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409e80:	665c      	str	r4, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409e82:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409e86:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409e88:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409e8a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409e8e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  409e90:	f024 0440 	bic.w	r4, r4, #64	; 0x40
  409e94:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409e96:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  409e98:	f024 0440 	bic.w	r4, r4, #64	; 0x40
  409e9c:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409e9e:	f8c3 8064 	str.w	r8, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409ea2:	f8c3 8090 	str.w	r8, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409ea6:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409eaa:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409eae:	f8c3 8080 	str.w	r8, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409eb2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  409eb4:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  409eb8:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409eba:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  409ebc:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  409ec0:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  409ec2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  409ec4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  409ec8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409eca:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409ed0:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  409ed2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  409ed6:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409ed8:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  409eda:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  409ede:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409ee0:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409ee2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409ee6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409ee8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409eea:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409eee:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  409ef0:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  409ef4:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409ef6:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  409ef8:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  409efc:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409efe:	f503 7300 	add.w	r3, r3, #512	; 0x200
  409f02:	f44f 7580 	mov.w	r5, #256	; 0x100
  409f06:	611d      	str	r5, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409f08:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  409f0c:	f8c3 8010 	str.w	r8, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409f10:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409f14:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409f18:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409f1a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409f1e:	f44f 6000 	mov.w	r0, #2048	; 0x800
  409f22:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409f24:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409f28:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409f2a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409f2e:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409f30:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409f34:	f8c3 c014 	str.w	ip, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409f38:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409f3c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  409f40:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409f42:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409f46:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  409f4a:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409f4c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409f50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  409f54:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409f56:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  409f5a:	f8c3 e014 	str.w	lr, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  409f5e:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  409f62:	635d      	str	r5, [r3, #52]	; 0x34
  409f64:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
		base->PIO_PUDR = mask;
  409f68:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409f6a:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409f6e:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409f70:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409f72:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409f76:	6f19      	ldr	r1, [r3, #112]	; 0x70
  409f78:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  409f7c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409f7e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  409f80:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  409f84:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409f86:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409f88:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409f8c:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409f8e:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409f90:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409f94:	6f19      	ldr	r1, [r3, #112]	; 0x70
  409f96:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  409f9a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409f9c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  409f9e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  409fa2:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  409fa4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409fa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  409faa:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  409fac:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409fae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  409fb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409fb8:	4dd7      	ldr	r5, [pc, #860]	; (40a318 <sleepPins+0x958>)
  409fba:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409fbc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  409fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409fc2:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUDR = mask;
  409fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  409fc8:	662b      	str	r3, [r5, #96]	; 0x60
		base->PIO_PPDDR = mask;
  409fca:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  409fce:	656b      	str	r3, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  409fd0:	626b      	str	r3, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409fd2:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409fd6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  409fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  409fdc:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  409fde:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  409fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  409fe4:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  409fe6:	f8c5 c064 	str.w	ip, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  409fea:	f8c5 c090 	str.w	ip, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  409fee:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  409ff2:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  409ff6:	f8c5 c080 	str.w	ip, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  409ffa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  409ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  40a000:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a002:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40a004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  40a008:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40a00a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40a00e:	666b      	str	r3, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a010:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a014:	656b      	str	r3, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a016:	626b      	str	r3, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a018:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a01c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40a01e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40a022:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a024:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40a026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40a02a:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40a02c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40a030:	666b      	str	r3, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a032:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a036:	656b      	str	r3, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a038:	626b      	str	r3, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a03a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a03e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40a040:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  40a044:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a046:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40a048:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  40a04c:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40a04e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40a052:	666a      	str	r2, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a054:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a058:	656a      	str	r2, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a05a:	626a      	str	r2, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a05c:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a060:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40a062:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  40a066:	672b      	str	r3, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a068:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  40a06a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  40a06e:	676b      	str	r3, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40a070:	4673      	mov	r3, lr
  40a072:	f8c5 e064 	str.w	lr, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a076:	f8c5 e090 	str.w	lr, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a07a:	f8c5 e054 	str.w	lr, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a07e:	f8c5 e024 	str.w	lr, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a082:	f8c5 e080 	str.w	lr, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a086:	6f29      	ldr	r1, [r5, #112]	; 0x70
  40a088:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  40a08c:	6729      	str	r1, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a08e:	6f69      	ldr	r1, [r5, #116]	; 0x74
  40a090:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  40a094:	6769      	str	r1, [r5, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a096:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
  40a09a:	f504 2461 	add.w	r4, r4, #921600	; 0xe1000
  40a09e:	2101      	movs	r1, #1
  40a0a0:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a0a2:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a0a6:	2102      	movs	r1, #2
  40a0a8:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a0aa:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a0ae:	2104      	movs	r1, #4
  40a0b0:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a0b2:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a0b6:	2708      	movs	r7, #8
  40a0b8:	6167      	str	r7, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a0ba:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a0be:	46d0      	mov	r8, sl
  40a0c0:	f8c4 a014 	str.w	sl, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a0c4:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a0c8:	f8c4 9014 	str.w	r9, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a0cc:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a0d0:	2140      	movs	r1, #64	; 0x40
  40a0d2:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a0d4:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a0d8:	2180      	movs	r1, #128	; 0x80
  40a0da:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a0dc:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a0e0:	f44f 7180 	mov.w	r1, #256	; 0x100
  40a0e4:	6121      	str	r1, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a0e6:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a0ea:	f44f 7b00 	mov.w	fp, #512	; 0x200
  40a0ee:	f8c4 b014 	str.w	fp, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a0f2:	f8c4 b0a0 	str.w	fp, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a0f6:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  40a0fa:	f8c4 a014 	str.w	sl, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a0fe:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a102:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40a106:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a108:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a10c:	6162      	str	r2, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a10e:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a112:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40a116:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a118:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a11c:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
  40a120:	f8c4 e014 	str.w	lr, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a124:	f8c4 e0a0 	str.w	lr, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a128:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  40a12c:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a12e:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a132:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  40a136:	6160      	str	r0, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a138:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a13c:	6163      	str	r3, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a13e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a142:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40a146:	6161      	str	r1, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a148:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  40a14c:	2101      	movs	r1, #1
  40a14e:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a150:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a154:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a156:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a158:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a15c:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40a160:	f02c 0c01 	bic.w	ip, ip, #1
  40a164:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a168:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40a16c:	f02c 0c01 	bic.w	ip, ip, #1
  40a170:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a174:	2102      	movs	r1, #2
  40a176:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a178:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a17c:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a17e:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a180:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a184:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40a188:	f02c 0c02 	bic.w	ip, ip, #2
  40a18c:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a190:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40a194:	f02c 0c02 	bic.w	ip, ip, #2
  40a198:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a19c:	2104      	movs	r1, #4
  40a19e:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a1a0:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a1a4:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a1a6:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a1a8:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a1ac:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40a1b0:	f02c 0c04 	bic.w	ip, ip, #4
  40a1b4:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a1b8:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40a1bc:	f02c 0c04 	bic.w	ip, ip, #4
  40a1c0:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a1c4:	6667      	str	r7, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a1c6:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a1ca:	6567      	str	r7, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a1cc:	6267      	str	r7, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a1ce:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a1d2:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40a1d6:	f02c 0c08 	bic.w	ip, ip, #8
  40a1da:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a1de:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40a1e2:	f02c 0c08 	bic.w	ip, ip, #8
  40a1e6:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a1ea:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a1ee:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a1f2:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a1f6:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a1fa:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a1fe:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40a202:	f02c 0c10 	bic.w	ip, ip, #16
  40a206:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a20a:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40a20e:	f02c 0c10 	bic.w	ip, ip, #16
  40a212:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a216:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a21a:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a21e:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a222:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a226:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a22a:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40a22e:	f02c 0c20 	bic.w	ip, ip, #32
  40a232:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a236:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40a23a:	f02c 0c20 	bic.w	ip, ip, #32
  40a23e:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a242:	2140      	movs	r1, #64	; 0x40
  40a244:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a246:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a24a:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a24c:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a24e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a252:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40a256:	f02c 0c40 	bic.w	ip, ip, #64	; 0x40
  40a25a:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a25e:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40a262:	f02c 0c40 	bic.w	ip, ip, #64	; 0x40
  40a266:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a26a:	2180      	movs	r1, #128	; 0x80
  40a26c:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a26e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a272:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a274:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a276:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a27a:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40a27e:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40a282:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a286:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40a28a:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40a28e:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40a292:	f44f 7180 	mov.w	r1, #256	; 0x100
  40a296:	6361      	str	r1, [r4, #52]	; 0x34
		base->PIO_PUER = mask;
  40a298:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a29c:	f8c4 b090 	str.w	fp, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a2a0:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a2a4:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a2a8:	f8c4 b080 	str.w	fp, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a2ac:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40a2b0:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  40a2b4:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a2b8:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40a2bc:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
  40a2c0:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a2c4:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a2c8:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a2cc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a2d0:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a2d4:	f8c4 a080 	str.w	sl, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a2d8:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40a2dc:	f42c 6c80 	bic.w	ip, ip, #1024	; 0x400
  40a2e0:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a2e4:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40a2e8:	f42c 6c80 	bic.w	ip, ip, #1024	; 0x400
  40a2ec:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a2f0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40a2f4:	6661      	str	r1, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a2f6:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a2fa:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a2fc:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a2fe:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a302:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
  40a306:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  40a30a:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a30e:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
  40a312:	f42c 2c80 	bic.w	ip, ip, #262144	; 0x40000
  40a316:	e001      	b.n	40a31c <sleepPins+0x95c>
  40a318:	400e1200 	.word	0x400e1200
  40a31c:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a320:	6662      	str	r2, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a322:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a326:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a328:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a32a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a32e:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40a330:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  40a334:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a336:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40a338:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  40a33c:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a33e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40a342:	6662      	str	r2, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a344:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a348:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a34a:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a34c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a350:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40a352:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40a356:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a358:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40a35a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40a35e:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a360:	f8c4 e064 	str.w	lr, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a364:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a368:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a36c:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a370:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a374:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40a376:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  40a37a:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a37c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40a37e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  40a382:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a384:	6666      	str	r6, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a386:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a38a:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a38c:	6266      	str	r6, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a38e:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a392:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40a394:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  40a398:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a39a:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40a39c:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  40a3a0:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a3a2:	6660      	str	r0, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a3a4:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a3a8:	6560      	str	r0, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a3aa:	6260      	str	r0, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a3ac:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a3b0:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40a3b2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
  40a3b6:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a3b8:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40a3ba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
  40a3be:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a3c0:	6663      	str	r3, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a3c2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a3c6:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a3c8:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a3ca:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a3ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40a3d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  40a3d4:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a3d6:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40a3d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  40a3dc:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40a3de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  40a3e2:	6663      	str	r3, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a3e4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a3e8:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a3ea:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a3ec:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a3f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40a3f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40a3f6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a3f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40a3fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40a3fe:	6763      	str	r3, [r4, #116]	; 0x74
 	resetPinsISI();
  40a400:	4bc8      	ldr	r3, [pc, #800]	; (40a724 <sleepPins+0xd64>)
  40a402:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a404:	4ec8      	ldr	r6, [pc, #800]	; (40a728 <sleepPins+0xd68>)
  40a406:	6177      	str	r7, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a408:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a40c:	f8c6 8014 	str.w	r8, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a410:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a414:	f8c6 9010 	str.w	r9, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a418:	f8c6 90a0 	str.w	r9, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a41c:	f8c6 b010 	str.w	fp, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a420:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a424:	f8c6 a010 	str.w	sl, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a428:	f8c6 a0a0 	str.w	sl, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a42c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40a430:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a432:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40a43a:	6133      	str	r3, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a43c:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_PUDR = mask;
  40a440:	6637      	str	r7, [r6, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a442:	f8c6 7090 	str.w	r7, [r6, #144]	; 0x90
		base->PIO_MDER = mask;
  40a446:	6537      	str	r7, [r6, #80]	; 0x50
		base->PIO_IFDR = mask;
  40a448:	6277      	str	r7, [r6, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a44a:	f8c6 7080 	str.w	r7, [r6, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a44e:	6f31      	ldr	r1, [r6, #112]	; 0x70
  40a450:	f021 0108 	bic.w	r1, r1, #8
  40a454:	6731      	str	r1, [r6, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a456:	6f71      	ldr	r1, [r6, #116]	; 0x74
  40a458:	f021 0108 	bic.w	r1, r1, #8
  40a45c:	6771      	str	r1, [r6, #116]	; 0x74
		base->PIO_PUDR = mask;
  40a45e:	f8c6 8060 	str.w	r8, [r6, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a462:	f8c6 8090 	str.w	r8, [r6, #144]	; 0x90
		base->PIO_MDER = mask;
  40a466:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
		base->PIO_IFDR = mask;
  40a46a:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a46e:	f8c6 8080 	str.w	r8, [r6, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a472:	6f31      	ldr	r1, [r6, #112]	; 0x70
  40a474:	f021 0110 	bic.w	r1, r1, #16
  40a478:	6731      	str	r1, [r6, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a47a:	6f71      	ldr	r1, [r6, #116]	; 0x74
  40a47c:	f021 0110 	bic.w	r1, r1, #16
  40a480:	6771      	str	r1, [r6, #116]	; 0x74
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40a482:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
  40a486:	f8c6 b034 	str.w	fp, [r6, #52]	; 0x34
  40a48a:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
  40a48e:	6372      	str	r2, [r6, #52]	; 0x34
  40a490:	6373      	str	r3, [r6, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a492:	49a6      	ldr	r1, [pc, #664]	; (40a72c <sleepPins+0xd6c>)
  40a494:	610f      	str	r7, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a496:	f8c1 70a0 	str.w	r7, [r1, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40a49a:	634f      	str	r7, [r1, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a49c:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  40a4a0:	f8c4 c010 	str.w	ip, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a4a4:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a4a8:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  40a4ac:	f8c4 e010 	str.w	lr, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a4b0:	f8c4 e0a0 	str.w	lr, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a4b4:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a4b6:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a4ba:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  40a4be:	6120      	str	r0, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a4c0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a4c4:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a4c6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a4ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40a4ce:	6121      	str	r1, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a4d0:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40a4d4:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
  40a4d8:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  40a4dc:	6362      	str	r2, [r4, #52]	; 0x34
  40a4de:	6360      	str	r0, [r4, #52]	; 0x34
  40a4e0:	6363      	str	r3, [r4, #52]	; 0x34
  40a4e2:	6361      	str	r1, [r4, #52]	; 0x34
	resetPinsSDRAM();
  40a4e4:	4b92      	ldr	r3, [pc, #584]	; (40a730 <sleepPins+0xd70>)
  40a4e6:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a4e8:	f44f 7380 	mov.w	r3, #256	; 0x100
  40a4ec:	6133      	str	r3, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a4ee:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a4f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40a4f6:	6133      	str	r3, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a4f8:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a4fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40a500:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a502:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a506:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40a50a:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a50c:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a510:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40a514:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a516:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a51a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40a51e:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a520:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40a524:	f44f 7180 	mov.w	r1, #256	; 0x100
  40a528:	6371      	str	r1, [r6, #52]	; 0x34
  40a52a:	6373      	str	r3, [r6, #52]	; 0x34
  40a52c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40a530:	6371      	str	r1, [r6, #52]	; 0x34
  40a532:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40a536:	6371      	str	r1, [r6, #52]	; 0x34
  40a538:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40a53c:	6371      	str	r1, [r6, #52]	; 0x34
  40a53e:	6372      	str	r2, [r6, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a540:	2201      	movs	r2, #1
  40a542:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a544:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a548:	2202      	movs	r2, #2
  40a54a:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a54c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a550:	2204      	movs	r2, #4
  40a552:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a554:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a558:	612f      	str	r7, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a55a:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a55e:	f8c5 8010 	str.w	r8, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a562:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a566:	f8c5 9010 	str.w	r9, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a56a:	f8c5 90a0 	str.w	r9, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a56e:	2240      	movs	r2, #64	; 0x40
  40a570:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a572:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a576:	2280      	movs	r2, #128	; 0x80
  40a578:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a57a:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a57e:	612b      	str	r3, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a580:	462b      	mov	r3, r5
  40a582:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  40a586:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a58a:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  40a58e:	f8c5 a010 	str.w	sl, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a592:	f8c5 a0a0 	str.w	sl, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a596:	4689      	mov	r9, r1
  40a598:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a59a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a59e:	f44f 1800 	mov.w	r8, #2097152	; 0x200000
  40a5a2:	f8c5 8010 	str.w	r8, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a5a6:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a5aa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40a5ae:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a5b0:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a5b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  40a5b8:	6128      	str	r0, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a5ba:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a5be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40a5c2:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a5c4:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a5c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40a5cc:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a5ce:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a5d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40a5d6:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a5d8:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a5dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40a5e0:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a5e2:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40a5ea:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a5ec:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a5f0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40a5f4:	6129      	str	r1, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a5f6:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a5fa:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
  40a5fe:	f8c5 b010 	str.w	fp, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a602:	f8c5 b0a0 	str.w	fp, [r5, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40a606:	2201      	movs	r2, #1
  40a608:	636a      	str	r2, [r5, #52]	; 0x34
  40a60a:	f04f 0c02 	mov.w	ip, #2
  40a60e:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
  40a612:	f04f 0e04 	mov.w	lr, #4
  40a616:	f8c5 e034 	str.w	lr, [r5, #52]	; 0x34
  40a61a:	636f      	str	r7, [r5, #52]	; 0x34
  40a61c:	2610      	movs	r6, #16
  40a61e:	636e      	str	r6, [r5, #52]	; 0x34
  40a620:	2520      	movs	r5, #32
  40a622:	635d      	str	r5, [r3, #52]	; 0x34
  40a624:	2540      	movs	r5, #64	; 0x40
  40a626:	635d      	str	r5, [r3, #52]	; 0x34
  40a628:	2580      	movs	r5, #128	; 0x80
  40a62a:	635d      	str	r5, [r3, #52]	; 0x34
  40a62c:	635c      	str	r4, [r3, #52]	; 0x34
  40a62e:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
  40a632:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  40a636:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  40a63a:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  40a63e:	635d      	str	r5, [r3, #52]	; 0x34
  40a640:	6358      	str	r0, [r3, #52]	; 0x34
  40a642:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  40a646:	635d      	str	r5, [r3, #52]	; 0x34
  40a648:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  40a64c:	635d      	str	r5, [r3, #52]	; 0x34
  40a64e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  40a652:	635d      	str	r5, [r3, #52]	; 0x34
  40a654:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  40a658:	635d      	str	r5, [r3, #52]	; 0x34
  40a65a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40a65e:	635d      	str	r5, [r3, #52]	; 0x34
  40a660:	6359      	str	r1, [r3, #52]	; 0x34
  40a662:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a666:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40a66a:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  40a66e:	f8c3 b010 	str.w	fp, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a672:	f8c3 b0a0 	str.w	fp, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a676:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
  40a67a:	f8c3 a010 	str.w	sl, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a67e:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a682:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a684:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a688:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  40a68c:	f8c3 9010 	str.w	r9, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a690:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a694:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  40a698:	f8c3 8010 	str.w	r8, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a69c:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a6a0:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a6a2:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a6a6:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a6a8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40a6ac:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
  40a6b0:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
  40a6b4:	635c      	str	r4, [r3, #52]	; 0x34
  40a6b6:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  40a6ba:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  40a6be:	6358      	str	r0, [r3, #52]	; 0x34
  40a6c0:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_PUDR = mask;
  40a6c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40a6c6:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40a6c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a6cc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a6ce:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a6d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a6d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40a6d6:	f021 0101 	bic.w	r1, r1, #1
  40a6da:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a6dc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40a6de:	f021 0101 	bic.w	r1, r1, #1
  40a6e2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40a6e4:	601a      	str	r2, [r3, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a6e6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a6e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a6ec:	f8c3 c010 	str.w	ip, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a6f0:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a6f4:	f8c3 e010 	str.w	lr, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a6f8:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a6fc:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a6fe:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a702:	611e      	str	r6, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a704:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a708:	2120      	movs	r1, #32
  40a70a:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a70c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40a710:	635a      	str	r2, [r3, #52]	; 0x34
  40a712:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
  40a716:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
  40a71a:	635f      	str	r7, [r3, #52]	; 0x34
  40a71c:	635e      	str	r6, [r3, #52]	; 0x34
  40a71e:	6359      	str	r1, [r3, #52]	; 0x34
  40a720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a724:	00408f31 	.word	0x00408f31
  40a728:	400e0e00 	.word	0x400e0e00
  40a72c:	400e1000 	.word	0x400e1000
  40a730:	00407c85 	.word	0x00407c85

0040a734 <wdt_init>:
/***********************************************************************
 *    WATCHDOG INIT
 ***********************************************************************/
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
uint16_t us_delta)
{
  40a734:	b410      	push	{r4}
	p_wdt->WDT_MR = ul_mode |
	WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
  40a736:	4c05      	ldr	r4, [pc, #20]	; (40a74c <wdt_init+0x18>)
  40a738:	ea04 4303 	and.w	r3, r4, r3, lsl #16
  40a73c:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40a740:	4313      	orrs	r3, r2
  40a742:	430b      	orrs	r3, r1
	p_wdt->WDT_MR = ul_mode |
  40a744:	6043      	str	r3, [r0, #4]
}
  40a746:	f85d 4b04 	ldr.w	r4, [sp], #4
  40a74a:	4770      	bx	lr
  40a74c:	0fff0000 	.word	0x0fff0000

0040a750 <main>:
{
  40a750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a754:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
	unsigned int bootSource = (RSTC->RSTC_SR & RSTC_SR_RSTTYP_Msk);;
  40a758:	4b8d      	ldr	r3, [pc, #564]	; (40a990 <main+0x240>)
  40a75a:	685c      	ldr	r4, [r3, #4]
  40a75c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
	cpu_irq_enable();//
  40a760:	f04f 0801 	mov.w	r8, #1
  40a764:	4b8b      	ldr	r3, [pc, #556]	; (40a994 <main+0x244>)
  40a766:	f883 8000 	strb.w	r8, [r3]
  __ASM volatile ("dmb");
  40a76a:	f3bf 8f5f 	dmb	sy
  40a76e:	b662      	cpsie	i
	sysclk_init();
  40a770:	4f89      	ldr	r7, [pc, #548]	; (40a998 <main+0x248>)
  40a772:	47b8      	blx	r7
	board_init();
  40a774:	4e89      	ldr	r6, [pc, #548]	; (40a99c <main+0x24c>)
  40a776:	47b0      	blx	r6
		sleepmgr_locks[i] = 0;
  40a778:	4b89      	ldr	r3, [pc, #548]	; (40a9a0 <main+0x250>)
  40a77a:	2500      	movs	r5, #0
  40a77c:	701d      	strb	r5, [r3, #0]
  40a77e:	705d      	strb	r5, [r3, #1]
  40a780:	709d      	strb	r5, [r3, #2]
  40a782:	70dd      	strb	r5, [r3, #3]
  40a784:	711d      	strb	r5, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  40a786:	f883 8005 	strb.w	r8, [r3, #5]
	sysclk_init();
  40a78a:	47b8      	blx	r7
	board_init();
  40a78c:	47b0      	blx	r6
	wdt_init(WDT, wdt_mode, timeout_value, timeout_value);
  40a78e:	4f85      	ldr	r7, [pc, #532]	; (40a9a4 <main+0x254>)
  40a790:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40a794:	461a      	mov	r2, r3
  40a796:	4984      	ldr	r1, [pc, #528]	; (40a9a8 <main+0x258>)
  40a798:	4638      	mov	r0, r7
  40a79a:	4e84      	ldr	r6, [pc, #528]	; (40a9ac <main+0x25c>)
  40a79c:	47b0      	blx	r6
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40a79e:	4b84      	ldr	r3, [pc, #528]	; (40a9b0 <main+0x260>)
  40a7a0:	2610      	movs	r6, #16
  40a7a2:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40a7a6:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40a7aa:	f883 5304 	strb.w	r5, [r3, #772]	; 0x304
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40a7ae:	601e      	str	r6, [r3, #0]
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40a7b0:	4b80      	ldr	r3, [pc, #512]	; (40a9b4 <main+0x264>)
  40a7b2:	603b      	str	r3, [r7, #0]
  40a7b4:	200a      	movs	r0, #10
  40a7b6:	4d80      	ldr	r5, [pc, #512]	; (40a9b8 <main+0x268>)
  40a7b8:	47a8      	blx	r5
  40a7ba:	200b      	movs	r0, #11
  40a7bc:	47a8      	blx	r5
  40a7be:	200c      	movs	r0, #12
  40a7c0:	47a8      	blx	r5
  40a7c2:	4630      	mov	r0, r6
  40a7c4:	47a8      	blx	r5
	configure_console();  //pmc_enable_pllack messes up the console speed
  40a7c6:	4d7d      	ldr	r5, [pc, #500]	; (40a9bc <main+0x26c>)
  40a7c8:	47a8      	blx	r5
	configure_console();  //pmc_enable_pllack messes up the console speed
  40a7ca:	47a8      	blx	r5
	printf("\r\nBOOT %X ",bootSource);
  40a7cc:	4621      	mov	r1, r4
  40a7ce:	487c      	ldr	r0, [pc, #496]	; (40a9c0 <main+0x270>)
  40a7d0:	4b7c      	ldr	r3, [pc, #496]	; (40a9c4 <main+0x274>)
  40a7d2:	4798      	blx	r3
	switch(bootSource){
  40a7d4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  40a7d8:	f000 843f 	beq.w	40b05a <main+0x90a>
  40a7dc:	d80e      	bhi.n	40a7fc <main+0xac>
  40a7de:	b1a4      	cbz	r4, 40a80a <main+0xba>
	printf("ALL\r\n");
  40a7e0:	4879      	ldr	r0, [pc, #484]	; (40a9c8 <main+0x278>)
  40a7e2:	4b78      	ldr	r3, [pc, #480]	; (40a9c4 <main+0x274>)
  40a7e4:	4798      	blx	r3
	delay_ms(100);
  40a7e6:	4879      	ldr	r0, [pc, #484]	; (40a9cc <main+0x27c>)
  40a7e8:	4b79      	ldr	r3, [pc, #484]	; (40a9d0 <main+0x280>)
  40a7ea:	4798      	blx	r3
	int badTestImageCtr=0;
  40a7ec:	2400      	movs	r4, #0
	int goodTestImageCtr=0;
  40a7ee:	4627      	mov	r7, r4
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40a7f0:	4e6c      	ldr	r6, [pc, #432]	; (40a9a4 <main+0x254>)
  40a7f2:	4d70      	ldr	r5, [pc, #448]	; (40a9b4 <main+0x264>)
		delay_ms(500);
  40a7f4:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 40a9e4 <main+0x294>
  40a7f8:	f000 bd4b 	b.w	40b292 <main+0xb42>
	switch(bootSource){
  40a7fc:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  40a800:	f000 842b 	beq.w	40b05a <main+0x90a>
  40a804:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  40a808:	d1ea      	bne.n	40a7e0 <main+0x90>
		pmc_enable_periph_clk(ID_PIOC);
  40a80a:	200c      	movs	r0, #12
  40a80c:	4b6a      	ldr	r3, [pc, #424]	; (40a9b8 <main+0x268>)
  40a80e:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a810:	4b70      	ldr	r3, [pc, #448]	; (40a9d4 <main+0x284>)
  40a812:	2204      	movs	r2, #4
  40a814:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a816:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40a81a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a81c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a820:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a822:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a828:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40a82a:	f022 0204 	bic.w	r2, r2, #4
  40a82e:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a830:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40a832:	f022 0204 	bic.w	r2, r2, #4
  40a836:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40a83c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40a840:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a842:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a846:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40a84a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a84c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		delay_ms(200);//looked fine even at only 1ms (when repeated every 500ms);
  40a850:	4861      	ldr	r0, [pc, #388]	; (40a9d8 <main+0x288>)
  40a852:	4b5f      	ldr	r3, [pc, #380]	; (40a9d0 <main+0x280>)
  40a854:	4798      	blx	r3
		twi_init_RTC();
  40a856:	4b61      	ldr	r3, [pc, #388]	; (40a9dc <main+0x28c>)
  40a858:	4798      	blx	r3
		if(bootSource==0)printf("PWR\r\n");else printf("RST\r\n");
  40a85a:	2c00      	cmp	r4, #0
  40a85c:	f040 8093 	bne.w	40a986 <main+0x236>
  40a860:	485f      	ldr	r0, [pc, #380]	; (40a9e0 <main+0x290>)
  40a862:	4b58      	ldr	r3, [pc, #352]	; (40a9c4 <main+0x274>)
  40a864:	4798      	blx	r3
		delay_ms(500);//
  40a866:	485f      	ldr	r0, [pc, #380]	; (40a9e4 <main+0x294>)
  40a868:	4d59      	ldr	r5, [pc, #356]	; (40a9d0 <main+0x280>)
  40a86a:	47a8      	blx	r5
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40a86c:	4b5e      	ldr	r3, [pc, #376]	; (40a9e8 <main+0x298>)
  40a86e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40a872:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40a874:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40a878:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40a87a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40a87e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40a880:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40a882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40a886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40a888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  40a88c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40a88e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40a890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  40a894:	675a      	str	r2, [r3, #116]	; 0x74
		rtcData[0]=0x00;//write to Address 0x00  SET ALL
  40a896:	2400      	movs	r4, #0
  40a898:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
		rtcData[1]=0x02;//contents of Addr 0x00 CTL1
  40a89c:	2602      	movs	r6, #2
  40a89e:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
		rtcData[2]=0x00;//contents of Addr 0x01 CTL2
  40a8a2:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
		rtcData[3]=0x00;//contents of Addr 0x02 CTL3
  40a8a6:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
		rtcData[4]=SET_SECOND;//contents of Addr 0x03 SECONDS works
  40a8aa:	2335      	movs	r3, #53	; 0x35
  40a8ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		rtcData[5]=SET_MINUTE;//contents of Addr 0x04 MINUTES works
  40a8b0:	2309      	movs	r3, #9
  40a8b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
		rtcData[6]=SET_HOUR;//contents of Addr 0x05 HOURS works
  40a8b6:	2308      	movs	r3, #8
  40a8b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
		rtcData[7]=SET_DAY;//contents of Addr 0x06 DAYS
  40a8bc:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
		rtcData[8]=0x02;//contents of Addr 0x07 WEEKDAY
  40a8c0:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
		rtcData[9]=SET_MONTH;//contents of Addr 0x08 MONTH
  40a8c4:	2306      	movs	r3, #6
  40a8c6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
		rtcData[0x0A]=SET_YEAR;//contents of Addr 0x09 YEAR
  40a8ca:	2355      	movs	r3, #85	; 0x55
  40a8cc:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
		rtcData[0x0B]=0x80;//contents of Addr 0x0A  0x80 = second alarm disabled
  40a8d0:	2380      	movs	r3, #128	; 0x80
  40a8d2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
		rtcData[0x0C]=0x80;//contents of Addr 0x0B  0x80 = minute alarm disabled
  40a8d6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		rtcData[0x0D]=0x80;//contents of Addr 0x0C  0x80 = Hour alarm disabled
  40a8da:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		rtcData[0x0E]=0x80;//contents of Addr 0x0D  0x80 = day alarm disabled
  40a8de:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		rtcData[0x0F]=0x80;//contents of Addr 0x0E  0x80 = weekday alarm disabled
  40a8e2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		rtcData[0x10]=0x00;//contents of Addr 0x0F  0x00 = temperature clockout period 4 minutes
  40a8e6:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		rtcData[0x11]=0x00;//contents of Addr 0x10  20=PULSED INTERRUPT
  40a8ea:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		writeRet = write_data_RTC(rtcData,18);//!< write sequentially to the slave "1" sends addr plus data[0].
  40a8ee:	2112      	movs	r1, #18
  40a8f0:	a809      	add	r0, sp, #36	; 0x24
  40a8f2:	4f3e      	ldr	r7, [pc, #248]	; (40a9ec <main+0x29c>)
  40a8f4:	47b8      	blx	r7
		delay_ms(200);//
  40a8f6:	4838      	ldr	r0, [pc, #224]	; (40a9d8 <main+0x288>)
  40a8f8:	47a8      	blx	r5
		rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40a8fa:	f04f 0801 	mov.w	r8, #1
  40a8fe:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
		rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  40a902:	f04f 0b30 	mov.w	fp, #48	; 0x30
  40a906:	f88d b025 	strb.w	fp, [sp, #37]	; 0x25
		write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40a90a:	4631      	mov	r1, r6
  40a90c:	a809      	add	r0, sp, #36	; 0x24
  40a90e:	47b8      	blx	r7
		delay_ms(1000);
  40a910:	4837      	ldr	r0, [pc, #220]	; (40a9f0 <main+0x2a0>)
  40a912:	47a8      	blx	r5
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40a914:	f8df 908c 	ldr.w	r9, [pc, #140]	; 40a9a4 <main+0x254>
  40a918:	f8df a098 	ldr.w	sl, [pc, #152]	; 40a9b4 <main+0x264>
  40a91c:	f8c9 a000 	str.w	sl, [r9]
		rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40a920:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
		rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  40a924:	f88d b025 	strb.w	fp, [sp, #37]	; 0x25
		write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40a928:	4631      	mov	r1, r6
  40a92a:	a809      	add	r0, sp, #36	; 0x24
  40a92c:	47b8      	blx	r7
		rtcData[0]=0x03;//
  40a92e:	2303      	movs	r3, #3
  40a930:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40a934:	4641      	mov	r1, r8
  40a936:	a809      	add	r0, sp, #36	; 0x24
  40a938:	47b8      	blx	r7
		delay_ms(1);//
  40a93a:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40a93e:	47a8      	blx	r5
		read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  40a940:	2107      	movs	r1, #7
  40a942:	a809      	add	r0, sp, #36	; 0x24
  40a944:	4b2b      	ldr	r3, [pc, #172]	; (40a9f4 <main+0x2a4>)
  40a946:	4798      	blx	r3
		delay_ms(1000);
  40a948:	4829      	ldr	r0, [pc, #164]	; (40a9f0 <main+0x2a0>)
  40a94a:	47a8      	blx	r5
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40a94c:	f8c9 a000 	str.w	sl, [r9]
		printf("%X-%X-%X  %X:%X:%X %X \r\n",rtcData[5],rtcData[3],rtcData[6],rtcData[2],rtcData[1],rtcData[0],rtcData[7]);
  40a950:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  40a954:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
  40a958:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
  40a95c:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
  40a960:	9003      	str	r0, [sp, #12]
  40a962:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
  40a966:	9002      	str	r0, [sp, #8]
  40a968:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
  40a96c:	9001      	str	r0, [sp, #4]
  40a96e:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
  40a972:	9000      	str	r0, [sp, #0]
  40a974:	4820      	ldr	r0, [pc, #128]	; (40a9f8 <main+0x2a8>)
  40a976:	4d13      	ldr	r5, [pc, #76]	; (40a9c4 <main+0x274>)
  40a978:	47a8      	blx	r5
int goodCtr2=0;
  40a97a:	9405      	str	r4, [sp, #20]
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40a97c:	46cb      	mov	fp, r9
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40a97e:	4c1f      	ldr	r4, [pc, #124]	; (40a9fc <main+0x2ac>)
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40a980:	4d14      	ldr	r5, [pc, #80]	; (40a9d4 <main+0x284>)
  40a982:	4f1f      	ldr	r7, [pc, #124]	; (40aa00 <main+0x2b0>)
  40a984:	e120      	b.n	40abc8 <main+0x478>
		if(bootSource==0)printf("PWR\r\n");else printf("RST\r\n");
  40a986:	481f      	ldr	r0, [pc, #124]	; (40aa04 <main+0x2b4>)
  40a988:	4b0e      	ldr	r3, [pc, #56]	; (40a9c4 <main+0x274>)
  40a98a:	4798      	blx	r3
  40a98c:	e76b      	b.n	40a866 <main+0x116>
  40a98e:	bf00      	nop
  40a990:	400e1800 	.word	0x400e1800
  40a994:	20400177 	.word	0x20400177
  40a998:	00402919 	.word	0x00402919
  40a99c:	004011c1 	.word	0x004011c1
  40a9a0:	20400f08 	.word	0x20400f08
  40a9a4:	400e1850 	.word	0x400e1850
  40a9a8:	30002000 	.word	0x30002000
  40a9ac:	0040a735 	.word	0x0040a735
  40a9b0:	e000e100 	.word	0xe000e100
  40a9b4:	a5000001 	.word	0xa5000001
  40a9b8:	00403575 	.word	0x00403575
  40a9bc:	00406c69 	.word	0x00406c69
  40a9c0:	0040ee14 	.word	0x0040ee14
  40a9c4:	0040b671 	.word	0x0040b671
  40a9c8:	0040ef44 	.word	0x0040ef44
  40a9cc:	004d2b25 	.word	0x004d2b25
  40a9d0:	2040008d 	.word	0x2040008d
  40a9d4:	400e0e00 	.word	0x400e0e00
  40a9d8:	009a5649 	.word	0x009a5649
  40a9dc:	00401a65 	.word	0x00401a65
  40a9e0:	0040ee20 	.word	0x0040ee20
  40a9e4:	0181d7b6 	.word	0x0181d7b6
  40a9e8:	400e1200 	.word	0x400e1200
  40a9ec:	00401b91 	.word	0x00401b91
  40a9f0:	0303af6b 	.word	0x0303af6b
  40a9f4:	00401cb9 	.word	0x00401cb9
  40a9f8:	0040ee30 	.word	0x0040ee30
  40a9fc:	e000ed00 	.word	0xe000ed00
  40aa00:	400e1400 	.word	0x400e1400
  40aa04:	0040ee28 	.word	0x0040ee28
	if(iters==0){ret=1;goto NO_CAMERA_RESPONSE; }
  40aa08:	2b00      	cmp	r3, #0
  40aa0a:	f040 81db 	bne.w	40adc4 <main+0x674>
	resetPinsISI();
  40aa0e:	4bc5      	ldr	r3, [pc, #788]	; (40ad24 <main+0x5d4>)
  40aa10:	4798      	blx	r3
	delay_ms(1);
  40aa12:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40aa16:	4bc4      	ldr	r3, [pc, #784]	; (40ad28 <main+0x5d8>)
  40aa18:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40aa1a:	4bc4      	ldr	r3, [pc, #784]	; (40ad2c <main+0x5dc>)
  40aa1c:	f8cb 3000 	str.w	r3, [fp]
	printf("PINS RESET\r\n");
  40aa20:	48c3      	ldr	r0, [pc, #780]	; (40ad30 <main+0x5e0>)
  40aa22:	4bc4      	ldr	r3, [pc, #784]	; (40ad34 <main+0x5e4>)
  40aa24:	4798      	blx	r3
	resetSD(300);
  40aa26:	f44f 7096 	mov.w	r0, #300	; 0x12c
  40aa2a:	4bc3      	ldr	r3, [pc, #780]	; (40ad38 <main+0x5e8>)
  40aa2c:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  40aa2e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40aa32:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40aa36:	f003 0007 	and.w	r0, r3, #7
  40aa3a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40aa3c:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40aa40:	fabc f88c 	clz	r8, ip
    wshift  = __CLZ(ways) & 0x1f;
  40aa44:	f008 081f 	and.w	r8, r8, #31
  __ASM volatile ("dsb");
  40aa48:	f3bf 8f4f 	dsb	sy
  40aa4c:	f04f 36ff 	mov.w	r6, #4294967295
  40aa50:	fa06 f900 	lsl.w	r9, r6, r0
  40aa54:	fa0e f000 	lsl.w	r0, lr, r0
  40aa58:	fa06 f608 	lsl.w	r6, r6, r8
  40aa5c:	fa0c f808 	lsl.w	r8, ip, r8
         int32_t tmpways = ways;
  40aa60:	4662      	mov	r2, ip
  40aa62:	4643      	mov	r3, r8
              sw = ((tmpways << wshift) | (sets << sshift));
  40aa64:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40aa68:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
            } while(tmpways--);
  40aa6c:	3a01      	subs	r2, #1
  40aa6e:	4433      	add	r3, r6
  40aa70:	f1b2 3fff 	cmp.w	r2, #4294967295
  40aa74:	d1f6      	bne.n	40aa64 <main+0x314>
        } while(sets--);
  40aa76:	f10e 3eff 	add.w	lr, lr, #4294967295
  40aa7a:	4448      	add	r0, r9
  40aa7c:	f1be 3fff 	cmp.w	lr, #4294967295
  40aa80:	d1ee      	bne.n	40aa60 <main+0x310>
  40aa82:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40aa86:	6963      	ldr	r3, [r4, #20]
  40aa88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40aa8c:	6163      	str	r3, [r4, #20]
  40aa8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40aa92:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40aa96:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40aa9a:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40aa9e:	f003 0007 	and.w	r0, r3, #7
  40aaa2:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40aaa4:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40aaa8:	fabc f88c 	clz	r8, ip
    wshift  = __CLZ(ways) & 0x1f;
  40aaac:	f008 081f 	and.w	r8, r8, #31
  __ASM volatile ("dsb");
  40aab0:	f3bf 8f4f 	dsb	sy
  40aab4:	f04f 36ff 	mov.w	r6, #4294967295
  40aab8:	fa06 f900 	lsl.w	r9, r6, r0
  40aabc:	fa0e f000 	lsl.w	r0, lr, r0
  40aac0:	fa06 f608 	lsl.w	r6, r6, r8
  40aac4:	fa0c f808 	lsl.w	r8, ip, r8
         int32_t tmpways = ways;
  40aac8:	4662      	mov	r2, ip
  40aaca:	4643      	mov	r3, r8
              sw = ((tmpways << wshift) | (sets << sshift));
  40aacc:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  40aad0:	f8c4 1274 	str.w	r1, [r4, #628]	; 0x274
            } while(tmpways--);
  40aad4:	3a01      	subs	r2, #1
  40aad6:	4433      	add	r3, r6
  40aad8:	f1b2 3fff 	cmp.w	r2, #4294967295
  40aadc:	d1f6      	bne.n	40aacc <main+0x37c>
        } while(sets--);
  40aade:	f10e 3eff 	add.w	lr, lr, #4294967295
  40aae2:	4448      	add	r0, r9
  40aae4:	f1be 3fff 	cmp.w	lr, #4294967295
  40aae8:	d1ee      	bne.n	40aac8 <main+0x378>
  40aaea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40aaee:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40aaf2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40aaf6:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40aafa:	f003 0007 	and.w	r0, r3, #7
  40aafe:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40ab00:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40ab04:	fabc f88c 	clz	r8, ip
    wshift  = __CLZ(ways) & 0x1f;
  40ab08:	f008 081f 	and.w	r8, r8, #31
  __ASM volatile ("dsb");
  40ab0c:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  40ab10:	6963      	ldr	r3, [r4, #20]
  40ab12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40ab16:	6163      	str	r3, [r4, #20]
  40ab18:	f04f 36ff 	mov.w	r6, #4294967295
  40ab1c:	fa06 f900 	lsl.w	r9, r6, r0
  40ab20:	fa0e f000 	lsl.w	r0, lr, r0
  40ab24:	fa06 f608 	lsl.w	r6, r6, r8
  40ab28:	fa0c f808 	lsl.w	r8, ip, r8
         int32_t tmpways = ways;
  40ab2c:	4662      	mov	r2, ip
  40ab2e:	4643      	mov	r3, r8
              sw = ((tmpways << wshift) | (sets << sshift));
  40ab30:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40ab34:	f8c4 1274 	str.w	r1, [r4, #628]	; 0x274
            } while(tmpways--);
  40ab38:	3a01      	subs	r2, #1
  40ab3a:	4433      	add	r3, r6
  40ab3c:	f1b2 3fff 	cmp.w	r2, #4294967295
  40ab40:	d1f6      	bne.n	40ab30 <main+0x3e0>
        } while(sets--);
  40ab42:	f10e 3eff 	add.w	lr, lr, #4294967295
  40ab46:	4448      	add	r0, r9
  40ab48:	f1be 3fff 	cmp.w	lr, #4294967295
  40ab4c:	d1ee      	bne.n	40ab2c <main+0x3dc>
  40ab4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40ab52:	f3bf 8f6f 	isb	sy
 	sd_mmc_init();
  40ab56:	4b79      	ldr	r3, [pc, #484]	; (40ad3c <main+0x5ec>)
  40ab58:	4798      	blx	r3
	sd_mmc_test_unit_ready(0);//first electronic signals
  40ab5a:	2000      	movs	r0, #0
  40ab5c:	4b78      	ldr	r3, [pc, #480]	; (40ad40 <main+0x5f0>)
  40ab5e:	4798      	blx	r3
	sd_mmc_check(0);
  40ab60:	2000      	movs	r0, #0
  40ab62:	4b78      	ldr	r3, [pc, #480]	; (40ad44 <main+0x5f4>)
  40ab64:	4798      	blx	r3
	memset(&fs, 0, sizeof(FATFS));
  40ab66:	f44f 720c 	mov.w	r2, #560	; 0x230
  40ab6a:	2100      	movs	r1, #0
  40ab6c:	a810      	add	r0, sp, #64	; 0x40
  40ab6e:	4b76      	ldr	r3, [pc, #472]	; (40ad48 <main+0x5f8>)
  40ab70:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  40ab72:	a910      	add	r1, sp, #64	; 0x40
  40ab74:	2000      	movs	r0, #0
  40ab76:	4b75      	ldr	r3, [pc, #468]	; (40ad4c <main+0x5fc>)
  40ab78:	4798      	blx	r3
 	closeSDcard();
  40ab7a:	f8df 822c 	ldr.w	r8, [pc, #556]	; 40ada8 <main+0x658>
  40ab7e:	47c0      	blx	r8
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40ab80:	f44f 7380 	mov.w	r3, #256	; 0x100
  40ab84:	636b      	str	r3, [r5, #52]	; 0x34
	printf("CREATED PIC FILE. FILE CLOSED.\r\n");
  40ab86:	4872      	ldr	r0, [pc, #456]	; (40ad50 <main+0x600>)
  40ab88:	4b6a      	ldr	r3, [pc, #424]	; (40ad34 <main+0x5e4>)
  40ab8a:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40ab8c:	4e67      	ldr	r6, [pc, #412]	; (40ad2c <main+0x5dc>)
  40ab8e:	f8cb 6000 	str.w	r6, [fp]
	delay_ms(10);
  40ab92:	4870      	ldr	r0, [pc, #448]	; (40ad54 <main+0x604>)
  40ab94:	4b64      	ldr	r3, [pc, #400]	; (40ad28 <main+0x5d8>)
  40ab96:	4798      	blx	r3
	closeSDcard();//pin cnfig and power off.
  40ab98:	47c0      	blx	r8
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40ab9a:	f8cb 6000 	str.w	r6, [fp]
		if(takeImage(0,0,1)==0)
  40ab9e:	2201      	movs	r2, #1
  40aba0:	2100      	movs	r1, #0
  40aba2:	4608      	mov	r0, r1
  40aba4:	4b6c      	ldr	r3, [pc, #432]	; (40ad58 <main+0x608>)
  40aba6:	4798      	blx	r3
  40aba8:	2800      	cmp	r0, #0
  40abaa:	f000 8248 	beq.w	40b03e <main+0x8ee>
			redBlink(2);
  40abae:	2002      	movs	r0, #2
  40abb0:	4b6a      	ldr	r3, [pc, #424]	; (40ad5c <main+0x60c>)
  40abb2:	4798      	blx	r3
			printf("\r\nCONTINUOUS IMAGE TEST TEST LOOP:    GOOD=%d\r\n\r\n",goodCtr2);
  40abb4:	9905      	ldr	r1, [sp, #20]
  40abb6:	486a      	ldr	r0, [pc, #424]	; (40ad60 <main+0x610>)
  40abb8:	4b5e      	ldr	r3, [pc, #376]	; (40ad34 <main+0x5e4>)
  40abba:	4798      	blx	r3
			WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40abbc:	4b5b      	ldr	r3, [pc, #364]	; (40ad2c <main+0x5dc>)
  40abbe:	f8cb 3000 	str.w	r3, [fp]
			delay_ms(150);
  40abc2:	4868      	ldr	r0, [pc, #416]	; (40ad64 <main+0x614>)
  40abc4:	4b58      	ldr	r3, [pc, #352]	; (40ad28 <main+0x5d8>)
  40abc6:	4798      	blx	r3
	sleepPins();
  40abc8:	4b67      	ldr	r3, [pc, #412]	; (40ad68 <main+0x618>)
  40abca:	4798      	blx	r3
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40abcc:	4b57      	ldr	r3, [pc, #348]	; (40ad2c <main+0x5dc>)
  40abce:	f8cb 3000 	str.w	r3, [fp]
	redBlink(1);
  40abd2:	2001      	movs	r0, #1
  40abd4:	4b61      	ldr	r3, [pc, #388]	; (40ad5c <main+0x60c>)
  40abd6:	4798      	blx	r3
  __ASM volatile ("dsb");
  40abd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40abdc:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40abe0:	2300      	movs	r3, #0
  40abe2:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40abe6:	6963      	ldr	r3, [r4, #20]
  40abe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  40abec:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  40abee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40abf2:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40abf6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40abfa:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40abfe:	f003 0007 	and.w	r0, r3, #7
  40ac02:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40ac04:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40ac08:	fabc f88c 	clz	r8, ip
    wshift  = __CLZ(ways) & 0x1f;
  40ac0c:	f008 081f 	and.w	r8, r8, #31
  __ASM volatile ("dsb");
  40ac10:	f3bf 8f4f 	dsb	sy
  40ac14:	f04f 36ff 	mov.w	r6, #4294967295
  40ac18:	fa06 f900 	lsl.w	r9, r6, r0
  40ac1c:	fa0e f000 	lsl.w	r0, lr, r0
  40ac20:	fa06 f608 	lsl.w	r6, r6, r8
  40ac24:	fa0c f808 	lsl.w	r8, ip, r8
         int32_t tmpways = ways;
  40ac28:	4662      	mov	r2, ip
  40ac2a:	4643      	mov	r3, r8
              sw = ((tmpways << wshift) | (sets << sshift));
  40ac2c:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40ac30:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
            } while(tmpways--);
  40ac34:	3a01      	subs	r2, #1
  40ac36:	4433      	add	r3, r6
  40ac38:	f1b2 3fff 	cmp.w	r2, #4294967295
  40ac3c:	d1f6      	bne.n	40ac2c <main+0x4dc>
        } while(sets--);
  40ac3e:	f10e 3eff 	add.w	lr, lr, #4294967295
  40ac42:	4448      	add	r0, r9
  40ac44:	f1be 3fff 	cmp.w	lr, #4294967295
  40ac48:	d1ee      	bne.n	40ac28 <main+0x4d8>
  40ac4a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40ac4e:	6963      	ldr	r3, [r4, #20]
  40ac50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40ac54:	6163      	str	r3, [r4, #20]
  40ac56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40ac5a:	f3bf 8f6f 	isb	sy
	configPinsSDRAM();
  40ac5e:	4b43      	ldr	r3, [pc, #268]	; (40ad6c <main+0x61c>)
  40ac60:	4798      	blx	r3
	pmc_enable_periph_clk(ID_SDRAMC);
  40ac62:	203e      	movs	r0, #62	; 0x3e
  40ac64:	4b42      	ldr	r3, [pc, #264]	; (40ad70 <main+0x620>)
  40ac66:	4798      	blx	r3
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_INSIGNIS_16M,	sysclk_get_cpu_hz());
  40ac68:	4942      	ldr	r1, [pc, #264]	; (40ad74 <main+0x624>)
  40ac6a:	4843      	ldr	r0, [pc, #268]	; (40ad78 <main+0x628>)
  40ac6c:	4b43      	ldr	r3, [pc, #268]	; (40ad7c <main+0x62c>)
  40ac6e:	4798      	blx	r3
  40ac70:	4a43      	ldr	r2, [pc, #268]	; (40ad80 <main+0x630>)
  40ac72:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40ac74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40ac78:	6293      	str	r3, [r2, #40]	; 0x28
	printf("SRAM COMPLETE\r\n");
  40ac7a:	4842      	ldr	r0, [pc, #264]	; (40ad84 <main+0x634>)
  40ac7c:	4b2d      	ldr	r3, [pc, #180]	; (40ad34 <main+0x5e4>)
  40ac7e:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  40ac80:	2210      	movs	r2, #16
  40ac82:	4b41      	ldr	r3, [pc, #260]	; (40ad88 <main+0x638>)
  40ac84:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ac88:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
  40ac8c:	f8c5 a010 	str.w	sl, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ac90:	f8c5 a0a0 	str.w	sl, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40ac94:	f44f 7880 	mov.w	r8, #256	; 0x100
  40ac98:	f8c7 8010 	str.w	r8, [r7, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40ac9c:	f8c7 80a0 	str.w	r8, [r7, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40aca0:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40aca4:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40aca6:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40acaa:	f8c5 8010 	str.w	r8, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40acae:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40acb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40acb6:	617b      	str	r3, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40acb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40acbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  40acc0:	617b      	str	r3, [r7, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40acc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40acc6:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40acc8:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40accc:	632e      	str	r6, [r5, #48]	; 0x30
  40acce:	632e      	str	r6, [r5, #48]	; 0x30
	delay_ms(100);
  40acd0:	482e      	ldr	r0, [pc, #184]	; (40ad8c <main+0x63c>)
  40acd2:	f8df 9054 	ldr.w	r9, [pc, #84]	; 40ad28 <main+0x5d8>
  40acd6:	47c8      	blx	r9
  40acd8:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
  40acdc:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
  40ace0:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
	delay_ms(100);
  40ace4:	4829      	ldr	r0, [pc, #164]	; (40ad8c <main+0x63c>)
  40ace6:	47c8      	blx	r9
	delay_ms(6);//OV2710 datasheet says minimum 5ms between applying power an allowing CPWDN to go low.
  40ace8:	4829      	ldr	r0, [pc, #164]	; (40ad90 <main+0x640>)
  40acea:	47c8      	blx	r9
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40acec:	636e      	str	r6, [r5, #52]	; 0x34
	delay_ms(2);
  40acee:	4829      	ldr	r0, [pc, #164]	; (40ad94 <main+0x644>)
  40acf0:	47c8      	blx	r9
	delay_ms(100);
  40acf2:	4826      	ldr	r0, [pc, #152]	; (40ad8c <main+0x63c>)
  40acf4:	47c8      	blx	r9
	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40acf6:	4b0d      	ldr	r3, [pc, #52]	; (40ad2c <main+0x5dc>)
  40acf8:	f8cb 3000 	str.w	r3, [fp]
	printf("CAM PWR ON\r\n");//
  40acfc:	4826      	ldr	r0, [pc, #152]	; (40ad98 <main+0x648>)
  40acfe:	4b0d      	ldr	r3, [pc, #52]	; (40ad34 <main+0x5e4>)
  40ad00:	4798      	blx	r3
	gpio_configure_pin(ISI_MCLK_GPIO, ISI_MCLK_FLAGS);
  40ad02:	4926      	ldr	r1, [pc, #152]	; (40ad9c <main+0x64c>)
  40ad04:	2015      	movs	r0, #21
  40ad06:	4b26      	ldr	r3, [pc, #152]	; (40ada0 <main+0x650>)
  40ad08:	4798      	blx	r3
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  40ad0a:	4b26      	ldr	r3, [pc, #152]	; (40ada4 <main+0x654>)
  40ad0c:	f44f 7281 	mov.w	r2, #258	; 0x102
  40ad10:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  40ad12:	f44f 7200 	mov.w	r2, #512	; 0x200
  40ad16:	601a      	str	r2, [r3, #0]
	while ((!(PMC->PMC_SCSR & PMC_SCSR_PCK1))&&(iters>0)) {
  40ad18:	689b      	ldr	r3, [r3, #8]
  40ad1a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40ad1e:	d151      	bne.n	40adc4 <main+0x674>
  40ad20:	e044      	b.n	40adac <main+0x65c>
  40ad22:	bf00      	nop
  40ad24:	00408f31 	.word	0x00408f31
  40ad28:	2040008d 	.word	0x2040008d
  40ad2c:	a5000001 	.word	0xa5000001
  40ad30:	0040f48c 	.word	0x0040f48c
  40ad34:	0040b671 	.word	0x0040b671
  40ad38:	004083d5 	.word	0x004083d5
  40ad3c:	004004a1 	.word	0x004004a1
  40ad40:	00401009 	.word	0x00401009
  40ad44:	004004c1 	.word	0x004004c1
  40ad48:	0040b7cd 	.word	0x0040b7cd
  40ad4c:	00405ea1 	.word	0x00405ea1
  40ad50:	0040ee4c 	.word	0x0040ee4c
  40ad54:	0007b784 	.word	0x0007b784
  40ad58:	00409135 	.word	0x00409135
  40ad5c:	00407c31 	.word	0x00407c31
  40ad60:	0040ee80 	.word	0x0040ee80
  40ad64:	0073c0b7 	.word	0x0073c0b7
  40ad68:	004099c1 	.word	0x004099c1
  40ad6c:	00407aed 	.word	0x00407aed
  40ad70:	00403575 	.word	0x00403575
  40ad74:	11e1a300 	.word	0x11e1a300
  40ad78:	0040edb0 	.word	0x0040edb0
  40ad7c:	0040270d 	.word	0x0040270d
  40ad80:	40084000 	.word	0x40084000
  40ad84:	0040f4cc 	.word	0x0040f4cc
  40ad88:	40088000 	.word	0x40088000
  40ad8c:	004d2b25 	.word	0x004d2b25
  40ad90:	0004a14f 	.word	0x0004a14f
  40ad94:	00018b1b 	.word	0x00018b1b
  40ad98:	0040f338 	.word	0x0040f338
  40ad9c:	10000001 	.word	0x10000001
  40ada0:	00403271 	.word	0x00403271
  40ada4:	400e0600 	.word	0x400e0600
  40ada8:	0040829d 	.word	0x0040829d
  40adac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  40adb0:	49bb      	ldr	r1, [pc, #748]	; (40b0a0 <main+0x950>)
		iters--;
  40adb2:	3b01      	subs	r3, #1
	while ((!(PMC->PMC_SCSR & PMC_SCSR_PCK1))&&(iters>0)) {
  40adb4:	688a      	ldr	r2, [r1, #8]
  40adb6:	f412 7f00 	tst.w	r2, #512	; 0x200
  40adba:	f47f ae25 	bne.w	40aa08 <main+0x2b8>
  40adbe:	2b00      	cmp	r3, #0
  40adc0:	dcf7      	bgt.n	40adb2 <main+0x662>
  40adc2:	e621      	b.n	40aa08 <main+0x2b8>
	printf("MCLK OKAY\r\n");//tshooooooooooooooooooooooooooooooooooooooooooooot
  40adc4:	48b7      	ldr	r0, [pc, #732]	; (40b0a4 <main+0x954>)
  40adc6:	4bb8      	ldr	r3, [pc, #736]	; (40b0a8 <main+0x958>)
  40adc8:	4798      	blx	r3
	delay_ms(1);
  40adca:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40adce:	f8df 9314 	ldr.w	r9, [pc, #788]	; 40b0e4 <main+0x994>
  40add2:	47c8      	blx	r9
	opt.master_clk = sysclk_get_cpu_hz();
  40add4:	4bb5      	ldr	r3, [pc, #724]	; (40b0ac <main+0x95c>)
  40add6:	9306      	str	r3, [sp, #24]
	opt.speed      = TWIHS_CLK;
  40add8:	4bb5      	ldr	r3, [pc, #724]	; (40b0b0 <main+0x960>)
  40adda:	9307      	str	r3, [sp, #28]
	twihs_master_init(BOARD_TWIHS, &opt);
  40addc:	a906      	add	r1, sp, #24
  40adde:	48b5      	ldr	r0, [pc, #724]	; (40b0b4 <main+0x964>)
  40ade0:	4bb5      	ldr	r3, [pc, #724]	; (40b0b8 <main+0x968>)
  40ade2:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40ade4:	4bb5      	ldr	r3, [pc, #724]	; (40b0bc <main+0x96c>)
  40ade6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40adea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40adee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40adf2:	2100      	movs	r1, #0
  40adf4:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40adf8:	601a      	str	r2, [r3, #0]
	pmc_enable_periph_clk(ID_BOARD_TWIHS);
  40adfa:	2013      	movs	r0, #19
  40adfc:	4bb0      	ldr	r3, [pc, #704]	; (40b0c0 <main+0x970>)
  40adfe:	4798      	blx	r3
	pio_configure_pin(ISI_D0_GPIO, ISI_D0_FLAGS);
  40ae00:	f8df 830c 	ldr.w	r8, [pc, #780]	; 40b110 <main+0x9c0>
  40ae04:	4641      	mov	r1, r8
  40ae06:	2076      	movs	r0, #118	; 0x76
  40ae08:	4eae      	ldr	r6, [pc, #696]	; (40b0c4 <main+0x974>)
  40ae0a:	47b0      	blx	r6
	pio_configure_pin(ISI_D1_GPIO, ISI_D1_FLAGS);
  40ae0c:	4641      	mov	r1, r8
  40ae0e:	2075      	movs	r0, #117	; 0x75
  40ae10:	47b0      	blx	r6
	pio_configure_pin(ISI_D2_GPIO, ISI_D2_FLAGS);
  40ae12:	4641      	mov	r1, r8
  40ae14:	2023      	movs	r0, #35	; 0x23
  40ae16:	47b0      	blx	r6
	pio_configure_pin(ISI_D3_GPIO, ISI_D3_FLAGS);
  40ae18:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 40b114 <main+0x9c4>
  40ae1c:	4651      	mov	r1, sl
  40ae1e:	2009      	movs	r0, #9
  40ae20:	47b0      	blx	r6
	pio_configure_pin(ISI_D4_GPIO, ISI_D4_FLAGS);
  40ae22:	4651      	mov	r1, sl
  40ae24:	2005      	movs	r0, #5
  40ae26:	47b0      	blx	r6
	pio_configure_pin(ISI_D5_GPIO, ISI_D5_FLAGS);
  40ae28:	4641      	mov	r1, r8
  40ae2a:	206b      	movs	r0, #107	; 0x6b
  40ae2c:	47b0      	blx	r6
	pio_configure_pin(ISI_D6_GPIO, ISI_D6_FLAGS);
  40ae2e:	4641      	mov	r1, r8
  40ae30:	206c      	movs	r0, #108	; 0x6c
  40ae32:	47b0      	blx	r6
	pio_configure_pin(ISI_D7_GPIO, ISI_D7_FLAGS);
  40ae34:	4641      	mov	r1, r8
  40ae36:	201b      	movs	r0, #27
  40ae38:	47b0      	blx	r6
	pio_configure_pin(ISI_HSYNC_GPIO, ISI_HSYNC_FLAGS);
  40ae3a:	4641      	mov	r1, r8
  40ae3c:	2078      	movs	r0, #120	; 0x78
  40ae3e:	47b0      	blx	r6
	pio_configure_pin(ISI_VSYNC_GPIO, ISI_VSYNC_FLAGS);
  40ae40:	4641      	mov	r1, r8
  40ae42:	2079      	movs	r0, #121	; 0x79
  40ae44:	47b0      	blx	r6
	pio_configure_pin(ISI_PCK_PIO, ISI_PCK_FLAGS);
  40ae46:	4641      	mov	r1, r8
  40ae48:	2018      	movs	r0, #24
  40ae4a:	47b0      	blx	r6
	delay_ms(200);
  40ae4c:	489e      	ldr	r0, [pc, #632]	; (40b0c8 <main+0x978>)
  40ae4e:	47c8      	blx	r9
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog;
  40ae50:	4b9e      	ldr	r3, [pc, #632]	; (40b0cc <main+0x97c>)
  40ae52:	f8cb 3000 	str.w	r3, [fp]
    ccsidr  = SCB->CCSIDR;
  40ae56:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40ae5a:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40ae5e:	f003 0007 	and.w	r0, r3, #7
  40ae62:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40ae64:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40ae68:	fabc f88c 	clz	r8, ip
    wshift  = __CLZ(ways) & 0x1f;
  40ae6c:	f008 081f 	and.w	r8, r8, #31
  __ASM volatile ("dsb");
  40ae70:	f3bf 8f4f 	dsb	sy
  40ae74:	f04f 36ff 	mov.w	r6, #4294967295
  40ae78:	fa06 f900 	lsl.w	r9, r6, r0
  40ae7c:	fa0e f000 	lsl.w	r0, lr, r0
  40ae80:	fa06 f608 	lsl.w	r6, r6, r8
  40ae84:	fa0c f808 	lsl.w	r8, ip, r8
         int32_t tmpways = ways;
  40ae88:	4662      	mov	r2, ip
  40ae8a:	4643      	mov	r3, r8
              sw = ((tmpways << wshift) | (sets << sshift));
  40ae8c:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40ae90:	f8c4 1274 	str.w	r1, [r4, #628]	; 0x274
            } while(tmpways--);
  40ae94:	3a01      	subs	r2, #1
  40ae96:	4433      	add	r3, r6
  40ae98:	f1b2 3fff 	cmp.w	r2, #4294967295
  40ae9c:	d1f6      	bne.n	40ae8c <main+0x73c>
        } while(sets--);
  40ae9e:	f10e 3eff 	add.w	lr, lr, #4294967295
  40aea2:	4448      	add	r0, r9
  40aea4:	f1be 3fff 	cmp.w	lr, #4294967295
  40aea8:	d1ee      	bne.n	40ae88 <main+0x738>
  40aeaa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40aeae:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40aeb2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40aeb6:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40aeba:	f003 0007 	and.w	r0, r3, #7
  40aebe:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40aec0:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40aec4:	fabc f88c 	clz	r8, ip
    wshift  = __CLZ(ways) & 0x1f;
  40aec8:	f008 081f 	and.w	r8, r8, #31
  __ASM volatile ("dsb");
  40aecc:	f3bf 8f4f 	dsb	sy
  40aed0:	f04f 36ff 	mov.w	r6, #4294967295
  40aed4:	fa06 f900 	lsl.w	r9, r6, r0
  40aed8:	fa0e f000 	lsl.w	r0, lr, r0
  40aedc:	fa06 f608 	lsl.w	r6, r6, r8
  40aee0:	fa0c f808 	lsl.w	r8, ip, r8
         int32_t tmpways = ways;
  40aee4:	4662      	mov	r2, ip
  40aee6:	4643      	mov	r3, r8
              sw = ((tmpways << wshift) | (sets << sshift));
  40aee8:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40aeec:	f8c4 1274 	str.w	r1, [r4, #628]	; 0x274
            } while(tmpways--);
  40aef0:	3a01      	subs	r2, #1
  40aef2:	4433      	add	r3, r6
  40aef4:	f1b2 3fff 	cmp.w	r2, #4294967295
  40aef8:	d1f6      	bne.n	40aee8 <main+0x798>
        } while(sets--);
  40aefa:	f10e 3eff 	add.w	lr, lr, #4294967295
  40aefe:	4448      	add	r0, r9
  40af00:	f1be 3fff 	cmp.w	lr, #4294967295
  40af04:	d1ee      	bne.n	40aee4 <main+0x794>
  40af06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40af0a:	f3bf 8f6f 	isb	sy
	pmc_enable_periph_clk(ID_ISI);//
  40af0e:	203b      	movs	r0, #59	; 0x3b
  40af10:	4b6b      	ldr	r3, [pc, #428]	; (40b0c0 <main+0x970>)
  40af12:	4798      	blx	r3
	_isi_AllocateFBD();//inside here is the address that needs to be sent to isi_set_dma_codec_path() below.
  40af14:	4b6e      	ldr	r3, [pc, #440]	; (40b0d0 <main+0x980>)
  40af16:	4798      	blx	r3
	printf("ISI ALLOCATE COMPLETE\r\n");
  40af18:	486e      	ldr	r0, [pc, #440]	; (40b0d4 <main+0x984>)
  40af1a:	4e63      	ldr	r6, [pc, #396]	; (40b0a8 <main+0x958>)
  40af1c:	47b0      	blx	r6
	sdramc_deinit();
  40af1e:	4b6e      	ldr	r3, [pc, #440]	; (40b0d8 <main+0x988>)
  40af20:	4798      	blx	r3
	printf("SDRAM DEINIT\r\n");
  40af22:	486e      	ldr	r0, [pc, #440]	; (40b0dc <main+0x98c>)
  40af24:	47b0      	blx	r6
	delay_ms(100);
  40af26:	486e      	ldr	r0, [pc, #440]	; (40b0e0 <main+0x990>)
  40af28:	4b6e      	ldr	r3, [pc, #440]	; (40b0e4 <main+0x994>)
  40af2a:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  40af2c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40af30:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40af34:	f003 0007 	and.w	r0, r3, #7
  40af38:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40af3a:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40af3e:	fabc f88c 	clz	r8, ip
    wshift  = __CLZ(ways) & 0x1f;
  40af42:	f008 081f 	and.w	r8, r8, #31
  __ASM volatile ("dsb");
  40af46:	f3bf 8f4f 	dsb	sy
  40af4a:	f04f 36ff 	mov.w	r6, #4294967295
  40af4e:	fa06 f900 	lsl.w	r9, r6, r0
  40af52:	fa0e f000 	lsl.w	r0, lr, r0
  40af56:	fa06 f608 	lsl.w	r6, r6, r8
  40af5a:	fa0c f808 	lsl.w	r8, ip, r8
         int32_t tmpways = ways;
  40af5e:	4662      	mov	r2, ip
  40af60:	4643      	mov	r3, r8
              sw = ((tmpways << wshift) | (sets << sshift));
  40af62:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40af66:	f8c4 1274 	str.w	r1, [r4, #628]	; 0x274
            } while(tmpways--);
  40af6a:	3a01      	subs	r2, #1
  40af6c:	4433      	add	r3, r6
  40af6e:	f1b2 3fff 	cmp.w	r2, #4294967295
  40af72:	d1f6      	bne.n	40af62 <main+0x812>
        } while(sets--);
  40af74:	f10e 3eff 	add.w	lr, lr, #4294967295
  40af78:	4448      	add	r0, r9
  40af7a:	f1be 3fff 	cmp.w	lr, #4294967295
  40af7e:	d1ee      	bne.n	40af5e <main+0x80e>
  40af80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40af84:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  40af88:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40af8c:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40af90:	f003 0007 	and.w	r0, r3, #7
  40af94:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40af96:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40af9a:	fabc f88c 	clz	r8, ip
    wshift  = __CLZ(ways) & 0x1f;
  40af9e:	f008 081f 	and.w	r8, r8, #31
  __ASM volatile ("dsb");
  40afa2:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~SCB_CCR_DC_Msk;            // disable D-Cache
  40afa6:	6963      	ldr	r3, [r4, #20]
  40afa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40afac:	6163      	str	r3, [r4, #20]
  40afae:	f04f 36ff 	mov.w	r6, #4294967295
  40afb2:	fa06 f900 	lsl.w	r9, r6, r0
  40afb6:	fa0e f000 	lsl.w	r0, lr, r0
  40afba:	fa06 f608 	lsl.w	r6, r6, r8
  40afbe:	fa0c f808 	lsl.w	r8, ip, r8
         int32_t tmpways = ways;
  40afc2:	4662      	mov	r2, ip
  40afc4:	4643      	mov	r3, r8
              sw = ((tmpways << wshift) | (sets << sshift));
  40afc6:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCCISW = sw;
  40afca:	f8c4 1274 	str.w	r1, [r4, #628]	; 0x274
            } while(tmpways--);
  40afce:	3a01      	subs	r2, #1
  40afd0:	4433      	add	r3, r6
  40afd2:	f1b2 3fff 	cmp.w	r2, #4294967295
  40afd6:	d1f6      	bne.n	40afc6 <main+0x876>
        } while(sets--);
  40afd8:	f10e 3eff 	add.w	lr, lr, #4294967295
  40afdc:	4448      	add	r0, r9
  40afde:	f1be 3fff 	cmp.w	lr, #4294967295
  40afe2:	d1ee      	bne.n	40afc2 <main+0x872>
  40afe4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40afe8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  40afec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40aff0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;
  40aff4:	2200      	movs	r2, #0
  40aff6:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
  __ASM volatile ("dsb");
  40affa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40affe:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  40b002:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40b006:	f3bf 8f6f 	isb	sy
    SCB->CCR &= ~SCB_CCR_IC_Msk;            // disable I-Cache
  40b00a:	6963      	ldr	r3, [r4, #20]
  40b00c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  40b010:	6163      	str	r3, [r4, #20]
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40b012:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
  __ASM volatile ("dsb");
  40b016:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40b01a:	f3bf 8f6f 	isb	sy
	printf("CACHE DISABLED\r\n");
  40b01e:	4832      	ldr	r0, [pc, #200]	; (40b0e8 <main+0x998>)
  40b020:	f8df 8084 	ldr.w	r8, [pc, #132]	; 40b0a8 <main+0x958>
  40b024:	47c0      	blx	r8
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b026:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40b02a:	632e      	str	r6, [r5, #48]	; 0x30
  40b02c:	632e      	str	r6, [r5, #48]	; 0x30
	delay_ms(1);
  40b02e:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40b032:	4b2c      	ldr	r3, [pc, #176]	; (40b0e4 <main+0x994>)
  40b034:	4798      	blx	r3
  40b036:	632e      	str	r6, [r5, #48]	; 0x30
	printf("CAM OFF\r\n");
  40b038:	482c      	ldr	r0, [pc, #176]	; (40b0ec <main+0x99c>)
  40b03a:	47c0      	blx	r8
  40b03c:	e4e7      	b.n	40aa0e <main+0x2be>
			 goodCtr2++;
  40b03e:	9b05      	ldr	r3, [sp, #20]
  40b040:	3301      	adds	r3, #1
  40b042:	9305      	str	r3, [sp, #20]
		storeImage();
  40b044:	4b2a      	ldr	r3, [pc, #168]	; (40b0f0 <main+0x9a0>)
  40b046:	4798      	blx	r3
			printf("RETURN OK.\r\n");
  40b048:	482a      	ldr	r0, [pc, #168]	; (40b0f4 <main+0x9a4>)
  40b04a:	4b17      	ldr	r3, [pc, #92]	; (40b0a8 <main+0x958>)
  40b04c:	4798      	blx	r3
			WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40b04e:	f8cb 6000 	str.w	r6, [fp]
			delay_ms(150);
  40b052:	4829      	ldr	r0, [pc, #164]	; (40b0f8 <main+0x9a8>)
  40b054:	4b23      	ldr	r3, [pc, #140]	; (40b0e4 <main+0x994>)
  40b056:	4798      	blx	r3
  40b058:	e5a9      	b.n	40abae <main+0x45e>
		pmc_enable_periph_clk(ID_PIOB);
  40b05a:	200b      	movs	r0, #11
  40b05c:	4d18      	ldr	r5, [pc, #96]	; (40b0c0 <main+0x970>)
  40b05e:	47a8      	blx	r5
		pmc_enable_periph_clk(ID_PIOD);
  40b060:	2010      	movs	r0, #16
  40b062:	47a8      	blx	r5
		pmc_enable_periph_clk(ID_PIOA);//for RTC INT pin
  40b064:	200a      	movs	r0, #10
  40b066:	47a8      	blx	r5
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b068:	4d24      	ldr	r5, [pc, #144]	; (40b0fc <main+0x9ac>)
  40b06a:	2302      	movs	r3, #2
  40b06c:	616b      	str	r3, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b06e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		delay_us(1);
  40b072:	2033      	movs	r0, #51	; 0x33
  40b074:	4b1b      	ldr	r3, [pc, #108]	; (40b0e4 <main+0x994>)
  40b076:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40b078:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		if(ioport_get_pin_level(ToBigWU)==0){//IF THIS WAKEUP IS FROM TINY WITH A GPS DATE/TIME
  40b07a:	f013 0f02 	tst.w	r3, #2
  40b07e:	d14b      	bne.n	40b118 <main+0x9c8>
			getGPSdateTimeFrmTiny();	//RUN TINY STUFF
  40b080:	4b1f      	ldr	r3, [pc, #124]	; (40b100 <main+0x9b0>)
  40b082:	4798      	blx	r3
			WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40b084:	4a11      	ldr	r2, [pc, #68]	; (40b0cc <main+0x97c>)
  40b086:	4b1f      	ldr	r3, [pc, #124]	; (40b104 <main+0x9b4>)
  40b088:	601a      	str	r2, [r3, #0]
			configure_console();
  40b08a:	4b1f      	ldr	r3, [pc, #124]	; (40b108 <main+0x9b8>)
  40b08c:	4798      	blx	r3
			delay_ms(1);
  40b08e:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40b092:	4b14      	ldr	r3, [pc, #80]	; (40b0e4 <main+0x994>)
  40b094:	4798      	blx	r3
			printf("TINY\r\n");
  40b096:	481d      	ldr	r0, [pc, #116]	; (40b10c <main+0x9bc>)
  40b098:	4b03      	ldr	r3, [pc, #12]	; (40b0a8 <main+0x958>)
  40b09a:	4798      	blx	r3
  40b09c:	f7ff bba0 	b.w	40a7e0 <main+0x90>
  40b0a0:	400e0600 	.word	0x400e0600
  40b0a4:	0040f348 	.word	0x0040f348
  40b0a8:	0040b671 	.word	0x0040b671
  40b0ac:	11e1a300 	.word	0x11e1a300
  40b0b0:	00061a80 	.word	0x00061a80
  40b0b4:	40018000 	.word	0x40018000
  40b0b8:	00401535 	.word	0x00401535
  40b0bc:	e000e100 	.word	0xe000e100
  40b0c0:	00403575 	.word	0x00403575
  40b0c4:	00403271 	.word	0x00403271
  40b0c8:	009a5649 	.word	0x009a5649
  40b0cc:	a5000001 	.word	0xa5000001
  40b0d0:	00406645 	.word	0x00406645
  40b0d4:	0040f3d0 	.word	0x0040f3d0
  40b0d8:	0040286d 	.word	0x0040286d
  40b0dc:	0040f44c 	.word	0x0040f44c
  40b0e0:	004d2b25 	.word	0x004d2b25
  40b0e4:	2040008d 	.word	0x2040008d
  40b0e8:	0040f45c 	.word	0x0040f45c
  40b0ec:	0040f480 	.word	0x0040f480
  40b0f0:	00408649 	.word	0x00408649
  40b0f4:	0040ee70 	.word	0x0040ee70
  40b0f8:	0073c0b7 	.word	0x0073c0b7
  40b0fc:	400e0e00 	.word	0x400e0e00
  40b100:	00407225 	.word	0x00407225
  40b104:	400e1850 	.word	0x400e1850
  40b108:	00406c69 	.word	0x00406c69
  40b10c:	0040eeb4 	.word	0x0040eeb4
  40b110:	20000001 	.word	0x20000001
  40b114:	10000001 	.word	0x10000001
  40b118:	4b64      	ldr	r3, [pc, #400]	; (40b2ac <main+0xb5c>)
  40b11a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		}else if (ioport_get_pin_level(RTC_INT)==0)	{
  40b11c:	f013 0f04 	tst.w	r3, #4
  40b120:	f040 80a6 	bne.w	40b270 <main+0xb20>
			pmc_enable_periph_clk(ID_PIOC);
  40b124:	200c      	movs	r0, #12
  40b126:	4b62      	ldr	r3, [pc, #392]	; (40b2b0 <main+0xb60>)
  40b128:	4798      	blx	r3
			if(bootSource==0x100)printf("RTC\r\n");
  40b12a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  40b12e:	bf0c      	ite	eq
  40b130:	4860      	ldreq	r0, [pc, #384]	; (40b2b4 <main+0xb64>)
			else printf("WATCHDOG? MORE LIKELY RTC\r\n");
  40b132:	4861      	ldrne	r0, [pc, #388]	; (40b2b8 <main+0xb68>)
  40b134:	4b61      	ldr	r3, [pc, #388]	; (40b2bc <main+0xb6c>)
  40b136:	4798      	blx	r3
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40b138:	4a61      	ldr	r2, [pc, #388]	; (40b2c0 <main+0xb70>)
  40b13a:	4b62      	ldr	r3, [pc, #392]	; (40b2c4 <main+0xb74>)
  40b13c:	601a      	str	r2, [r3, #0]
		pmc_enable_periph_clk(ID_PIOA);
  40b13e:	200a      	movs	r0, #10
  40b140:	4c5b      	ldr	r4, [pc, #364]	; (40b2b0 <main+0xb60>)
  40b142:	47a0      	blx	r4
		pmc_enable_periph_clk(ID_PIOB);
  40b144:	200b      	movs	r0, #11
  40b146:	47a0      	blx	r4
		pmc_enable_periph_clk(ID_PIOD);
  40b148:	2010      	movs	r0, #16
  40b14a:	47a0      	blx	r4
		rtcData[0]=0x01;//write to Address 0x00    NEED THIS TO ACK THE RTC INTERRUPT
  40b14c:	2501      	movs	r5, #1
  40b14e:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
		rtcData[1]=0x30;//contents of Addr 0x00 CTL1
  40b152:	2330      	movs	r3, #48	; 0x30
  40b154:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		write_data_RTC(rtcData,2);//!< write sequentially to the slave "1" sends addr plus data[0].
  40b158:	2102      	movs	r1, #2
  40b15a:	a810      	add	r0, sp, #64	; 0x40
  40b15c:	4c5a      	ldr	r4, [pc, #360]	; (40b2c8 <main+0xb78>)
  40b15e:	47a0      	blx	r4
		rtcData[0]=0x03;//
  40b160:	2303      	movs	r3, #3
  40b162:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		write_data_RTC(rtcData,1);//!< write sequentially to the slave "1" sends addr plus data[0].
  40b166:	4629      	mov	r1, r5
  40b168:	a810      	add	r0, sp, #64	; 0x40
  40b16a:	47a0      	blx	r4
		delay_ms(1);//
  40b16c:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40b170:	4b56      	ldr	r3, [pc, #344]	; (40b2cc <main+0xb7c>)
  40b172:	4798      	blx	r3
		read_bytes_RTC(rtcData,7);//!< write sequentially to the slave "1" sends addr plus data[0].*/
  40b174:	2107      	movs	r1, #7
  40b176:	a810      	add	r0, sp, #64	; 0x40
  40b178:	4b55      	ldr	r3, [pc, #340]	; (40b2d0 <main+0xb80>)
  40b17a:	4798      	blx	r3
		printf("%X-%X-%X %X:%X:%X\r\n",rtcData[5],rtcData[3],rtcData[6],rtcData[2],rtcData[1],secNow);//tshooooooooooooooooooooooooooooooooooot
  40b17c:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
  40b180:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
  40b184:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
  40b188:	f8df 9180 	ldr.w	r9, [pc, #384]	; 40b30c <main+0xbbc>
  40b18c:	f8d9 0000 	ldr.w	r0, [r9]
  40b190:	9002      	str	r0, [sp, #8]
  40b192:	f89d 0041 	ldrb.w	r0, [sp, #65]	; 0x41
  40b196:	9001      	str	r0, [sp, #4]
  40b198:	f89d 0042 	ldrb.w	r0, [sp, #66]	; 0x42
  40b19c:	9000      	str	r0, [sp, #0]
  40b19e:	484d      	ldr	r0, [pc, #308]	; (40b2d4 <main+0xb84>)
  40b1a0:	4c46      	ldr	r4, [pc, #280]	; (40b2bc <main+0xb6c>)
  40b1a2:	47a0      	blx	r4
		yearNow=rtcData[6];
  40b1a4:	f89d 7046 	ldrb.w	r7, [sp, #70]	; 0x46
  40b1a8:	4b4b      	ldr	r3, [pc, #300]	; (40b2d8 <main+0xb88>)
  40b1aa:	601f      	str	r7, [r3, #0]
		hexMonthNow=bcdToHex(rtcData[5]);
  40b1ac:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
  40b1b0:	4e4a      	ldr	r6, [pc, #296]	; (40b2dc <main+0xb8c>)
  40b1b2:	47b0      	blx	r6
  40b1b4:	4680      	mov	r8, r0
		hexDayNow=bcdToHex(rtcData[3]);
  40b1b6:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
  40b1ba:	47b0      	blx	r6
  40b1bc:	4604      	mov	r4, r0
		hexHourNow=bcdToHex(rtcData[2]);
  40b1be:	f89d 0042 	ldrb.w	r0, [sp, #66]	; 0x42
  40b1c2:	47b0      	blx	r6
  40b1c4:	4605      	mov	r5, r0
		hexMinNow=bcdToHex(rtcData[1]);
  40b1c6:	f89d 0041 	ldrb.w	r0, [sp, #65]	; 0x41
  40b1ca:	47b0      	blx	r6
		secNow=rtcData[0];
  40b1cc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  40b1d0:	f8c9 3000 	str.w	r3, [r9]
		hexHourNow=hexHourNow+24+TIMEZONE_OFFSET;
  40b1d4:	f105 0311 	add.w	r3, r5, #17
  40b1d8:	b2db      	uxtb	r3, r3
		if(hexMonthNow<11)beforeNov2=1;
  40b1da:	f1b8 0f0a 	cmp.w	r8, #10
  40b1de:	bf8c      	ite	hi
  40b1e0:	2100      	movhi	r1, #0
  40b1e2:	2101      	movls	r1, #1
		if((hexMonthNow==11)&&(hexDayNow>1))beforeNov2=0;
  40b1e4:	f1b8 0f0b 	cmp.w	r8, #11
  40b1e8:	d101      	bne.n	40b1ee <main+0xa9e>
  40b1ea:	2c01      	cmp	r4, #1
  40b1ec:	d80c      	bhi.n	40b208 <main+0xab8>
		if(hexMonthNow>3)afterMar7=1;
  40b1ee:	f1b8 0f03 	cmp.w	r8, #3
  40b1f2:	bf8c      	ite	hi
  40b1f4:	2201      	movhi	r2, #1
  40b1f6:	2200      	movls	r2, #0
		if((hexMonthNow==3)&&(hexDayNow<8))afterMar7=0;
  40b1f8:	d101      	bne.n	40b1fe <main+0xaae>
  40b1fa:	2c07      	cmp	r4, #7
  40b1fc:	d904      	bls.n	40b208 <main+0xab8>
		if((beforeNov2)&&(afterMar7))hexHourNow++;//(18 is BCD 12)
  40b1fe:	b119      	cbz	r1, 40b208 <main+0xab8>
  40b200:	b112      	cbz	r2, 40b208 <main+0xab8>
  40b202:	f105 0312 	add.w	r3, r5, #18
  40b206:	b2db      	uxtb	r3, r3
		if(hexHourNow>23)hexHourNow-=24;
  40b208:	2b17      	cmp	r3, #23
  40b20a:	d901      	bls.n	40b210 <main+0xac0>
  40b20c:	3b18      	subs	r3, #24
  40b20e:	b2db      	uxtb	r3, r3
		if((bigBootSoNeedGPS||((yearNow==99)&&((hexHourNow%3)==0)&&(hexMinNow==0)))
  40b210:	2f63      	cmp	r7, #99	; 0x63
  40b212:	d10a      	bne.n	40b22a <main+0xada>
  40b214:	4a32      	ldr	r2, [pc, #200]	; (40b2e0 <main+0xb90>)
  40b216:	fba2 1203 	umull	r1, r2, r2, r3
  40b21a:	0852      	lsrs	r2, r2, #1
  40b21c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40b220:	1a9a      	subs	r2, r3, r2
  40b222:	f012 0fff 	tst.w	r2, #255	; 0xff
  40b226:	d100      	bne.n	40b22a <main+0xada>
  40b228:	b128      	cbz	r0, 40b236 <main+0xae6>
			||(((hexDayNow>>2)==(hexHourNow))&&(hexMinNow==21))){//Always 21 minutes after an hour.
  40b22a:	f3c4 0487 	ubfx	r4, r4, #2, #8
  40b22e:	429c      	cmp	r4, r3
  40b230:	d11a      	bne.n	40b268 <main+0xb18>
  40b232:	2815      	cmp	r0, #21
  40b234:	d118      	bne.n	40b268 <main+0xb18>
			minPacketForTiny[0]=0x10; //set flag to take GPS
  40b236:	2210      	movs	r2, #16
  40b238:	4b2a      	ldr	r3, [pc, #168]	; (40b2e4 <main+0xb94>)
  40b23a:	701a      	strb	r2, [r3, #0]
		gotAltitudeTemperature=getAltimeterTemperatureTE(0xEE);
  40b23c:	20ee      	movs	r0, #238	; 0xee
  40b23e:	4b2a      	ldr	r3, [pc, #168]	; (40b2e8 <main+0xb98>)
  40b240:	4798      	blx	r3
  40b242:	4604      	mov	r4, r0
		gotHumidity=getHumidity(0x80);
  40b244:	2080      	movs	r0, #128	; 0x80
  40b246:	4b29      	ldr	r3, [pc, #164]	; (40b2ec <main+0xb9c>)
  40b248:	4798      	blx	r3
  40b24a:	4605      	mov	r5, r0
		gotLight=getALSfromVEML(0x20);
  40b24c:	2020      	movs	r0, #32
  40b24e:	4b28      	ldr	r3, [pc, #160]	; (40b2f0 <main+0xba0>)
  40b250:	4798      	blx	r3
		printf("TEMP %X BAROM %X HUMIDITY %X LIGHT %X MOTION %X\r\n",(gotAltitudeTemperature>>16),(gotAltitudeTemperature&0x0000FFFF),gotHumidity,gotLight,1);
  40b252:	2301      	movs	r3, #1
  40b254:	9301      	str	r3, [sp, #4]
  40b256:	9000      	str	r0, [sp, #0]
  40b258:	462b      	mov	r3, r5
  40b25a:	b2a2      	uxth	r2, r4
  40b25c:	0c21      	lsrs	r1, r4, #16
  40b25e:	4825      	ldr	r0, [pc, #148]	; (40b2f4 <main+0xba4>)
  40b260:	4c16      	ldr	r4, [pc, #88]	; (40b2bc <main+0xb6c>)
  40b262:	47a0      	blx	r4
  40b264:	f7ff babc 	b.w	40a7e0 <main+0x90>
		}else minPacketForTiny[0]=0;
  40b268:	2200      	movs	r2, #0
  40b26a:	4b1e      	ldr	r3, [pc, #120]	; (40b2e4 <main+0xb94>)
  40b26c:	701a      	strb	r2, [r3, #0]
  40b26e:	e7e5      	b.n	40b23c <main+0xaec>
		}else printf("DIDN'T DETECT RTC PULSE\r\n");//END OF RTC WAKEUPS
  40b270:	4821      	ldr	r0, [pc, #132]	; (40b2f8 <main+0xba8>)
  40b272:	4b12      	ldr	r3, [pc, #72]	; (40b2bc <main+0xb6c>)
  40b274:	4798      	blx	r3
  40b276:	f7ff bab3 	b.w	40a7e0 <main+0x90>
			{goodTestImageCtr++;
  40b27a:	3701      	adds	r7, #1
			storeImage();}
  40b27c:	4b1f      	ldr	r3, [pc, #124]	; (40b2fc <main+0xbac>)
  40b27e:	4798      	blx	r3
		printf("\r\nCONTINUOUS IMAGE TEST LOOP. GOT INTO RTC LOOP:          GOOD=%d  BAD=%d\r\n\r\n",goodTestImageCtr,badTestImageCtr);
  40b280:	4622      	mov	r2, r4
  40b282:	4639      	mov	r1, r7
  40b284:	481e      	ldr	r0, [pc, #120]	; (40b300 <main+0xbb0>)
  40b286:	4b0d      	ldr	r3, [pc, #52]	; (40b2bc <main+0xb6c>)
  40b288:	4798      	blx	r3
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40b28a:	6035      	str	r5, [r6, #0]
		delay_ms(500);
  40b28c:	4640      	mov	r0, r8
  40b28e:	4b0f      	ldr	r3, [pc, #60]	; (40b2cc <main+0xb7c>)
  40b290:	4798      	blx	r3
		sleepPins();
  40b292:	4b1c      	ldr	r3, [pc, #112]	; (40b304 <main+0xbb4>)
  40b294:	4798      	blx	r3
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;//Feeds the WatchDog
  40b296:	6035      	str	r5, [r6, #0]
		if(takeImage(0,0,1)==0)
  40b298:	2201      	movs	r2, #1
  40b29a:	2100      	movs	r1, #0
  40b29c:	4608      	mov	r0, r1
  40b29e:	4b1a      	ldr	r3, [pc, #104]	; (40b308 <main+0xbb8>)
  40b2a0:	4798      	blx	r3
  40b2a2:	2800      	cmp	r0, #0
  40b2a4:	d0e9      	beq.n	40b27a <main+0xb2a>
			else badTestImageCtr++;
  40b2a6:	3401      	adds	r4, #1
  40b2a8:	e7ea      	b.n	40b280 <main+0xb30>
  40b2aa:	bf00      	nop
  40b2ac:	400e0e00 	.word	0x400e0e00
  40b2b0:	00403575 	.word	0x00403575
  40b2b4:	0040eebc 	.word	0x0040eebc
  40b2b8:	0040eec4 	.word	0x0040eec4
  40b2bc:	0040b671 	.word	0x0040b671
  40b2c0:	a5000001 	.word	0xa5000001
  40b2c4:	400e1850 	.word	0x400e1850
  40b2c8:	00401b91 	.word	0x00401b91
  40b2cc:	2040008d 	.word	0x2040008d
  40b2d0:	00401cb9 	.word	0x00401cb9
  40b2d4:	0040eee0 	.word	0x0040eee0
  40b2d8:	20400f78 	.word	0x20400f78
  40b2dc:	004066b7 	.word	0x004066b7
  40b2e0:	aaaaaaab 	.word	0xaaaaaaab
  40b2e4:	20400fec 	.word	0x20400fec
  40b2e8:	004076ed 	.word	0x004076ed
  40b2ec:	004074f5 	.word	0x004074f5
  40b2f0:	004075b9 	.word	0x004075b9
  40b2f4:	0040eef4 	.word	0x0040eef4
  40b2f8:	0040ef28 	.word	0x0040ef28
  40b2fc:	00408649 	.word	0x00408649
  40b300:	0040ef4c 	.word	0x0040ef4c
  40b304:	004099c1 	.word	0x004099c1
  40b308:	00409135 	.word	0x00409135
  40b30c:	20400f70 	.word	0x20400f70

0040b310 <__aeabi_uldivmod>:
  40b310:	b953      	cbnz	r3, 40b328 <__aeabi_uldivmod+0x18>
  40b312:	b94a      	cbnz	r2, 40b328 <__aeabi_uldivmod+0x18>
  40b314:	2900      	cmp	r1, #0
  40b316:	bf08      	it	eq
  40b318:	2800      	cmpeq	r0, #0
  40b31a:	bf1c      	itt	ne
  40b31c:	f04f 31ff 	movne.w	r1, #4294967295
  40b320:	f04f 30ff 	movne.w	r0, #4294967295
  40b324:	f000 b97a 	b.w	40b61c <__aeabi_idiv0>
  40b328:	f1ad 0c08 	sub.w	ip, sp, #8
  40b32c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40b330:	f000 f806 	bl	40b340 <__udivmoddi4>
  40b334:	f8dd e004 	ldr.w	lr, [sp, #4]
  40b338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40b33c:	b004      	add	sp, #16
  40b33e:	4770      	bx	lr

0040b340 <__udivmoddi4>:
  40b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b344:	468c      	mov	ip, r1
  40b346:	460d      	mov	r5, r1
  40b348:	4604      	mov	r4, r0
  40b34a:	9e08      	ldr	r6, [sp, #32]
  40b34c:	2b00      	cmp	r3, #0
  40b34e:	d151      	bne.n	40b3f4 <__udivmoddi4+0xb4>
  40b350:	428a      	cmp	r2, r1
  40b352:	4617      	mov	r7, r2
  40b354:	d96d      	bls.n	40b432 <__udivmoddi4+0xf2>
  40b356:	fab2 fe82 	clz	lr, r2
  40b35a:	f1be 0f00 	cmp.w	lr, #0
  40b35e:	d00b      	beq.n	40b378 <__udivmoddi4+0x38>
  40b360:	f1ce 0c20 	rsb	ip, lr, #32
  40b364:	fa01 f50e 	lsl.w	r5, r1, lr
  40b368:	fa20 fc0c 	lsr.w	ip, r0, ip
  40b36c:	fa02 f70e 	lsl.w	r7, r2, lr
  40b370:	ea4c 0c05 	orr.w	ip, ip, r5
  40b374:	fa00 f40e 	lsl.w	r4, r0, lr
  40b378:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40b37c:	0c25      	lsrs	r5, r4, #16
  40b37e:	fbbc f8fa 	udiv	r8, ip, sl
  40b382:	fa1f f987 	uxth.w	r9, r7
  40b386:	fb0a cc18 	mls	ip, sl, r8, ip
  40b38a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40b38e:	fb08 f309 	mul.w	r3, r8, r9
  40b392:	42ab      	cmp	r3, r5
  40b394:	d90a      	bls.n	40b3ac <__udivmoddi4+0x6c>
  40b396:	19ed      	adds	r5, r5, r7
  40b398:	f108 32ff 	add.w	r2, r8, #4294967295
  40b39c:	f080 8123 	bcs.w	40b5e6 <__udivmoddi4+0x2a6>
  40b3a0:	42ab      	cmp	r3, r5
  40b3a2:	f240 8120 	bls.w	40b5e6 <__udivmoddi4+0x2a6>
  40b3a6:	f1a8 0802 	sub.w	r8, r8, #2
  40b3aa:	443d      	add	r5, r7
  40b3ac:	1aed      	subs	r5, r5, r3
  40b3ae:	b2a4      	uxth	r4, r4
  40b3b0:	fbb5 f0fa 	udiv	r0, r5, sl
  40b3b4:	fb0a 5510 	mls	r5, sl, r0, r5
  40b3b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40b3bc:	fb00 f909 	mul.w	r9, r0, r9
  40b3c0:	45a1      	cmp	r9, r4
  40b3c2:	d909      	bls.n	40b3d8 <__udivmoddi4+0x98>
  40b3c4:	19e4      	adds	r4, r4, r7
  40b3c6:	f100 33ff 	add.w	r3, r0, #4294967295
  40b3ca:	f080 810a 	bcs.w	40b5e2 <__udivmoddi4+0x2a2>
  40b3ce:	45a1      	cmp	r9, r4
  40b3d0:	f240 8107 	bls.w	40b5e2 <__udivmoddi4+0x2a2>
  40b3d4:	3802      	subs	r0, #2
  40b3d6:	443c      	add	r4, r7
  40b3d8:	eba4 0409 	sub.w	r4, r4, r9
  40b3dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40b3e0:	2100      	movs	r1, #0
  40b3e2:	2e00      	cmp	r6, #0
  40b3e4:	d061      	beq.n	40b4aa <__udivmoddi4+0x16a>
  40b3e6:	fa24 f40e 	lsr.w	r4, r4, lr
  40b3ea:	2300      	movs	r3, #0
  40b3ec:	6034      	str	r4, [r6, #0]
  40b3ee:	6073      	str	r3, [r6, #4]
  40b3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b3f4:	428b      	cmp	r3, r1
  40b3f6:	d907      	bls.n	40b408 <__udivmoddi4+0xc8>
  40b3f8:	2e00      	cmp	r6, #0
  40b3fa:	d054      	beq.n	40b4a6 <__udivmoddi4+0x166>
  40b3fc:	2100      	movs	r1, #0
  40b3fe:	e886 0021 	stmia.w	r6, {r0, r5}
  40b402:	4608      	mov	r0, r1
  40b404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b408:	fab3 f183 	clz	r1, r3
  40b40c:	2900      	cmp	r1, #0
  40b40e:	f040 808e 	bne.w	40b52e <__udivmoddi4+0x1ee>
  40b412:	42ab      	cmp	r3, r5
  40b414:	d302      	bcc.n	40b41c <__udivmoddi4+0xdc>
  40b416:	4282      	cmp	r2, r0
  40b418:	f200 80fa 	bhi.w	40b610 <__udivmoddi4+0x2d0>
  40b41c:	1a84      	subs	r4, r0, r2
  40b41e:	eb65 0503 	sbc.w	r5, r5, r3
  40b422:	2001      	movs	r0, #1
  40b424:	46ac      	mov	ip, r5
  40b426:	2e00      	cmp	r6, #0
  40b428:	d03f      	beq.n	40b4aa <__udivmoddi4+0x16a>
  40b42a:	e886 1010 	stmia.w	r6, {r4, ip}
  40b42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b432:	b912      	cbnz	r2, 40b43a <__udivmoddi4+0xfa>
  40b434:	2701      	movs	r7, #1
  40b436:	fbb7 f7f2 	udiv	r7, r7, r2
  40b43a:	fab7 fe87 	clz	lr, r7
  40b43e:	f1be 0f00 	cmp.w	lr, #0
  40b442:	d134      	bne.n	40b4ae <__udivmoddi4+0x16e>
  40b444:	1beb      	subs	r3, r5, r7
  40b446:	0c3a      	lsrs	r2, r7, #16
  40b448:	fa1f fc87 	uxth.w	ip, r7
  40b44c:	2101      	movs	r1, #1
  40b44e:	fbb3 f8f2 	udiv	r8, r3, r2
  40b452:	0c25      	lsrs	r5, r4, #16
  40b454:	fb02 3318 	mls	r3, r2, r8, r3
  40b458:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40b45c:	fb0c f308 	mul.w	r3, ip, r8
  40b460:	42ab      	cmp	r3, r5
  40b462:	d907      	bls.n	40b474 <__udivmoddi4+0x134>
  40b464:	19ed      	adds	r5, r5, r7
  40b466:	f108 30ff 	add.w	r0, r8, #4294967295
  40b46a:	d202      	bcs.n	40b472 <__udivmoddi4+0x132>
  40b46c:	42ab      	cmp	r3, r5
  40b46e:	f200 80d1 	bhi.w	40b614 <__udivmoddi4+0x2d4>
  40b472:	4680      	mov	r8, r0
  40b474:	1aed      	subs	r5, r5, r3
  40b476:	b2a3      	uxth	r3, r4
  40b478:	fbb5 f0f2 	udiv	r0, r5, r2
  40b47c:	fb02 5510 	mls	r5, r2, r0, r5
  40b480:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40b484:	fb0c fc00 	mul.w	ip, ip, r0
  40b488:	45a4      	cmp	ip, r4
  40b48a:	d907      	bls.n	40b49c <__udivmoddi4+0x15c>
  40b48c:	19e4      	adds	r4, r4, r7
  40b48e:	f100 33ff 	add.w	r3, r0, #4294967295
  40b492:	d202      	bcs.n	40b49a <__udivmoddi4+0x15a>
  40b494:	45a4      	cmp	ip, r4
  40b496:	f200 80b8 	bhi.w	40b60a <__udivmoddi4+0x2ca>
  40b49a:	4618      	mov	r0, r3
  40b49c:	eba4 040c 	sub.w	r4, r4, ip
  40b4a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40b4a4:	e79d      	b.n	40b3e2 <__udivmoddi4+0xa2>
  40b4a6:	4631      	mov	r1, r6
  40b4a8:	4630      	mov	r0, r6
  40b4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b4ae:	f1ce 0420 	rsb	r4, lr, #32
  40b4b2:	fa05 f30e 	lsl.w	r3, r5, lr
  40b4b6:	fa07 f70e 	lsl.w	r7, r7, lr
  40b4ba:	fa20 f804 	lsr.w	r8, r0, r4
  40b4be:	0c3a      	lsrs	r2, r7, #16
  40b4c0:	fa25 f404 	lsr.w	r4, r5, r4
  40b4c4:	ea48 0803 	orr.w	r8, r8, r3
  40b4c8:	fbb4 f1f2 	udiv	r1, r4, r2
  40b4cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40b4d0:	fb02 4411 	mls	r4, r2, r1, r4
  40b4d4:	fa1f fc87 	uxth.w	ip, r7
  40b4d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40b4dc:	fb01 f30c 	mul.w	r3, r1, ip
  40b4e0:	42ab      	cmp	r3, r5
  40b4e2:	fa00 f40e 	lsl.w	r4, r0, lr
  40b4e6:	d909      	bls.n	40b4fc <__udivmoddi4+0x1bc>
  40b4e8:	19ed      	adds	r5, r5, r7
  40b4ea:	f101 30ff 	add.w	r0, r1, #4294967295
  40b4ee:	f080 808a 	bcs.w	40b606 <__udivmoddi4+0x2c6>
  40b4f2:	42ab      	cmp	r3, r5
  40b4f4:	f240 8087 	bls.w	40b606 <__udivmoddi4+0x2c6>
  40b4f8:	3902      	subs	r1, #2
  40b4fa:	443d      	add	r5, r7
  40b4fc:	1aeb      	subs	r3, r5, r3
  40b4fe:	fa1f f588 	uxth.w	r5, r8
  40b502:	fbb3 f0f2 	udiv	r0, r3, r2
  40b506:	fb02 3310 	mls	r3, r2, r0, r3
  40b50a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40b50e:	fb00 f30c 	mul.w	r3, r0, ip
  40b512:	42ab      	cmp	r3, r5
  40b514:	d907      	bls.n	40b526 <__udivmoddi4+0x1e6>
  40b516:	19ed      	adds	r5, r5, r7
  40b518:	f100 38ff 	add.w	r8, r0, #4294967295
  40b51c:	d26f      	bcs.n	40b5fe <__udivmoddi4+0x2be>
  40b51e:	42ab      	cmp	r3, r5
  40b520:	d96d      	bls.n	40b5fe <__udivmoddi4+0x2be>
  40b522:	3802      	subs	r0, #2
  40b524:	443d      	add	r5, r7
  40b526:	1aeb      	subs	r3, r5, r3
  40b528:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40b52c:	e78f      	b.n	40b44e <__udivmoddi4+0x10e>
  40b52e:	f1c1 0720 	rsb	r7, r1, #32
  40b532:	fa22 f807 	lsr.w	r8, r2, r7
  40b536:	408b      	lsls	r3, r1
  40b538:	fa05 f401 	lsl.w	r4, r5, r1
  40b53c:	ea48 0303 	orr.w	r3, r8, r3
  40b540:	fa20 fe07 	lsr.w	lr, r0, r7
  40b544:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40b548:	40fd      	lsrs	r5, r7
  40b54a:	ea4e 0e04 	orr.w	lr, lr, r4
  40b54e:	fbb5 f9fc 	udiv	r9, r5, ip
  40b552:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40b556:	fb0c 5519 	mls	r5, ip, r9, r5
  40b55a:	fa1f f883 	uxth.w	r8, r3
  40b55e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40b562:	fb09 f408 	mul.w	r4, r9, r8
  40b566:	42ac      	cmp	r4, r5
  40b568:	fa02 f201 	lsl.w	r2, r2, r1
  40b56c:	fa00 fa01 	lsl.w	sl, r0, r1
  40b570:	d908      	bls.n	40b584 <__udivmoddi4+0x244>
  40b572:	18ed      	adds	r5, r5, r3
  40b574:	f109 30ff 	add.w	r0, r9, #4294967295
  40b578:	d243      	bcs.n	40b602 <__udivmoddi4+0x2c2>
  40b57a:	42ac      	cmp	r4, r5
  40b57c:	d941      	bls.n	40b602 <__udivmoddi4+0x2c2>
  40b57e:	f1a9 0902 	sub.w	r9, r9, #2
  40b582:	441d      	add	r5, r3
  40b584:	1b2d      	subs	r5, r5, r4
  40b586:	fa1f fe8e 	uxth.w	lr, lr
  40b58a:	fbb5 f0fc 	udiv	r0, r5, ip
  40b58e:	fb0c 5510 	mls	r5, ip, r0, r5
  40b592:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40b596:	fb00 f808 	mul.w	r8, r0, r8
  40b59a:	45a0      	cmp	r8, r4
  40b59c:	d907      	bls.n	40b5ae <__udivmoddi4+0x26e>
  40b59e:	18e4      	adds	r4, r4, r3
  40b5a0:	f100 35ff 	add.w	r5, r0, #4294967295
  40b5a4:	d229      	bcs.n	40b5fa <__udivmoddi4+0x2ba>
  40b5a6:	45a0      	cmp	r8, r4
  40b5a8:	d927      	bls.n	40b5fa <__udivmoddi4+0x2ba>
  40b5aa:	3802      	subs	r0, #2
  40b5ac:	441c      	add	r4, r3
  40b5ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40b5b2:	eba4 0408 	sub.w	r4, r4, r8
  40b5b6:	fba0 8902 	umull	r8, r9, r0, r2
  40b5ba:	454c      	cmp	r4, r9
  40b5bc:	46c6      	mov	lr, r8
  40b5be:	464d      	mov	r5, r9
  40b5c0:	d315      	bcc.n	40b5ee <__udivmoddi4+0x2ae>
  40b5c2:	d012      	beq.n	40b5ea <__udivmoddi4+0x2aa>
  40b5c4:	b156      	cbz	r6, 40b5dc <__udivmoddi4+0x29c>
  40b5c6:	ebba 030e 	subs.w	r3, sl, lr
  40b5ca:	eb64 0405 	sbc.w	r4, r4, r5
  40b5ce:	fa04 f707 	lsl.w	r7, r4, r7
  40b5d2:	40cb      	lsrs	r3, r1
  40b5d4:	431f      	orrs	r7, r3
  40b5d6:	40cc      	lsrs	r4, r1
  40b5d8:	6037      	str	r7, [r6, #0]
  40b5da:	6074      	str	r4, [r6, #4]
  40b5dc:	2100      	movs	r1, #0
  40b5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b5e2:	4618      	mov	r0, r3
  40b5e4:	e6f8      	b.n	40b3d8 <__udivmoddi4+0x98>
  40b5e6:	4690      	mov	r8, r2
  40b5e8:	e6e0      	b.n	40b3ac <__udivmoddi4+0x6c>
  40b5ea:	45c2      	cmp	sl, r8
  40b5ec:	d2ea      	bcs.n	40b5c4 <__udivmoddi4+0x284>
  40b5ee:	ebb8 0e02 	subs.w	lr, r8, r2
  40b5f2:	eb69 0503 	sbc.w	r5, r9, r3
  40b5f6:	3801      	subs	r0, #1
  40b5f8:	e7e4      	b.n	40b5c4 <__udivmoddi4+0x284>
  40b5fa:	4628      	mov	r0, r5
  40b5fc:	e7d7      	b.n	40b5ae <__udivmoddi4+0x26e>
  40b5fe:	4640      	mov	r0, r8
  40b600:	e791      	b.n	40b526 <__udivmoddi4+0x1e6>
  40b602:	4681      	mov	r9, r0
  40b604:	e7be      	b.n	40b584 <__udivmoddi4+0x244>
  40b606:	4601      	mov	r1, r0
  40b608:	e778      	b.n	40b4fc <__udivmoddi4+0x1bc>
  40b60a:	3802      	subs	r0, #2
  40b60c:	443c      	add	r4, r7
  40b60e:	e745      	b.n	40b49c <__udivmoddi4+0x15c>
  40b610:	4608      	mov	r0, r1
  40b612:	e708      	b.n	40b426 <__udivmoddi4+0xe6>
  40b614:	f1a8 0802 	sub.w	r8, r8, #2
  40b618:	443d      	add	r5, r7
  40b61a:	e72b      	b.n	40b474 <__udivmoddi4+0x134>

0040b61c <__aeabi_idiv0>:
  40b61c:	4770      	bx	lr
  40b61e:	bf00      	nop

0040b620 <__libc_init_array>:
  40b620:	b570      	push	{r4, r5, r6, lr}
  40b622:	4e0f      	ldr	r6, [pc, #60]	; (40b660 <__libc_init_array+0x40>)
  40b624:	4d0f      	ldr	r5, [pc, #60]	; (40b664 <__libc_init_array+0x44>)
  40b626:	1b76      	subs	r6, r6, r5
  40b628:	10b6      	asrs	r6, r6, #2
  40b62a:	bf18      	it	ne
  40b62c:	2400      	movne	r4, #0
  40b62e:	d005      	beq.n	40b63c <__libc_init_array+0x1c>
  40b630:	3401      	adds	r4, #1
  40b632:	f855 3b04 	ldr.w	r3, [r5], #4
  40b636:	4798      	blx	r3
  40b638:	42a6      	cmp	r6, r4
  40b63a:	d1f9      	bne.n	40b630 <__libc_init_array+0x10>
  40b63c:	4e0a      	ldr	r6, [pc, #40]	; (40b668 <__libc_init_array+0x48>)
  40b63e:	4d0b      	ldr	r5, [pc, #44]	; (40b66c <__libc_init_array+0x4c>)
  40b640:	1b76      	subs	r6, r6, r5
  40b642:	f003 fffd 	bl	40f640 <_init>
  40b646:	10b6      	asrs	r6, r6, #2
  40b648:	bf18      	it	ne
  40b64a:	2400      	movne	r4, #0
  40b64c:	d006      	beq.n	40b65c <__libc_init_array+0x3c>
  40b64e:	3401      	adds	r4, #1
  40b650:	f855 3b04 	ldr.w	r3, [r5], #4
  40b654:	4798      	blx	r3
  40b656:	42a6      	cmp	r6, r4
  40b658:	d1f9      	bne.n	40b64e <__libc_init_array+0x2e>
  40b65a:	bd70      	pop	{r4, r5, r6, pc}
  40b65c:	bd70      	pop	{r4, r5, r6, pc}
  40b65e:	bf00      	nop
  40b660:	0040f64c 	.word	0x0040f64c
  40b664:	0040f64c 	.word	0x0040f64c
  40b668:	0040f654 	.word	0x0040f654
  40b66c:	0040f64c 	.word	0x0040f64c

0040b670 <iprintf>:
  40b670:	b40f      	push	{r0, r1, r2, r3}
  40b672:	b500      	push	{lr}
  40b674:	4907      	ldr	r1, [pc, #28]	; (40b694 <iprintf+0x24>)
  40b676:	b083      	sub	sp, #12
  40b678:	ab04      	add	r3, sp, #16
  40b67a:	6808      	ldr	r0, [r1, #0]
  40b67c:	f853 2b04 	ldr.w	r2, [r3], #4
  40b680:	6881      	ldr	r1, [r0, #8]
  40b682:	9301      	str	r3, [sp, #4]
  40b684:	f000 fa00 	bl	40ba88 <_vfiprintf_r>
  40b688:	b003      	add	sp, #12
  40b68a:	f85d eb04 	ldr.w	lr, [sp], #4
  40b68e:	b004      	add	sp, #16
  40b690:	4770      	bx	lr
  40b692:	bf00      	nop
  40b694:	20400184 	.word	0x20400184

0040b698 <memcpy>:
  40b698:	4684      	mov	ip, r0
  40b69a:	ea41 0300 	orr.w	r3, r1, r0
  40b69e:	f013 0303 	ands.w	r3, r3, #3
  40b6a2:	d16d      	bne.n	40b780 <memcpy+0xe8>
  40b6a4:	3a40      	subs	r2, #64	; 0x40
  40b6a6:	d341      	bcc.n	40b72c <memcpy+0x94>
  40b6a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b6ac:	f840 3b04 	str.w	r3, [r0], #4
  40b6b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b6b4:	f840 3b04 	str.w	r3, [r0], #4
  40b6b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b6bc:	f840 3b04 	str.w	r3, [r0], #4
  40b6c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b6c4:	f840 3b04 	str.w	r3, [r0], #4
  40b6c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b6cc:	f840 3b04 	str.w	r3, [r0], #4
  40b6d0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b6d4:	f840 3b04 	str.w	r3, [r0], #4
  40b6d8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b6dc:	f840 3b04 	str.w	r3, [r0], #4
  40b6e0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b6e4:	f840 3b04 	str.w	r3, [r0], #4
  40b6e8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b6ec:	f840 3b04 	str.w	r3, [r0], #4
  40b6f0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b6f4:	f840 3b04 	str.w	r3, [r0], #4
  40b6f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b6fc:	f840 3b04 	str.w	r3, [r0], #4
  40b700:	f851 3b04 	ldr.w	r3, [r1], #4
  40b704:	f840 3b04 	str.w	r3, [r0], #4
  40b708:	f851 3b04 	ldr.w	r3, [r1], #4
  40b70c:	f840 3b04 	str.w	r3, [r0], #4
  40b710:	f851 3b04 	ldr.w	r3, [r1], #4
  40b714:	f840 3b04 	str.w	r3, [r0], #4
  40b718:	f851 3b04 	ldr.w	r3, [r1], #4
  40b71c:	f840 3b04 	str.w	r3, [r0], #4
  40b720:	f851 3b04 	ldr.w	r3, [r1], #4
  40b724:	f840 3b04 	str.w	r3, [r0], #4
  40b728:	3a40      	subs	r2, #64	; 0x40
  40b72a:	d2bd      	bcs.n	40b6a8 <memcpy+0x10>
  40b72c:	3230      	adds	r2, #48	; 0x30
  40b72e:	d311      	bcc.n	40b754 <memcpy+0xbc>
  40b730:	f851 3b04 	ldr.w	r3, [r1], #4
  40b734:	f840 3b04 	str.w	r3, [r0], #4
  40b738:	f851 3b04 	ldr.w	r3, [r1], #4
  40b73c:	f840 3b04 	str.w	r3, [r0], #4
  40b740:	f851 3b04 	ldr.w	r3, [r1], #4
  40b744:	f840 3b04 	str.w	r3, [r0], #4
  40b748:	f851 3b04 	ldr.w	r3, [r1], #4
  40b74c:	f840 3b04 	str.w	r3, [r0], #4
  40b750:	3a10      	subs	r2, #16
  40b752:	d2ed      	bcs.n	40b730 <memcpy+0x98>
  40b754:	320c      	adds	r2, #12
  40b756:	d305      	bcc.n	40b764 <memcpy+0xcc>
  40b758:	f851 3b04 	ldr.w	r3, [r1], #4
  40b75c:	f840 3b04 	str.w	r3, [r0], #4
  40b760:	3a04      	subs	r2, #4
  40b762:	d2f9      	bcs.n	40b758 <memcpy+0xc0>
  40b764:	3204      	adds	r2, #4
  40b766:	d008      	beq.n	40b77a <memcpy+0xe2>
  40b768:	07d2      	lsls	r2, r2, #31
  40b76a:	bf1c      	itt	ne
  40b76c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b770:	f800 3b01 	strbne.w	r3, [r0], #1
  40b774:	d301      	bcc.n	40b77a <memcpy+0xe2>
  40b776:	880b      	ldrh	r3, [r1, #0]
  40b778:	8003      	strh	r3, [r0, #0]
  40b77a:	4660      	mov	r0, ip
  40b77c:	4770      	bx	lr
  40b77e:	bf00      	nop
  40b780:	2a08      	cmp	r2, #8
  40b782:	d313      	bcc.n	40b7ac <memcpy+0x114>
  40b784:	078b      	lsls	r3, r1, #30
  40b786:	d08d      	beq.n	40b6a4 <memcpy+0xc>
  40b788:	f010 0303 	ands.w	r3, r0, #3
  40b78c:	d08a      	beq.n	40b6a4 <memcpy+0xc>
  40b78e:	f1c3 0304 	rsb	r3, r3, #4
  40b792:	1ad2      	subs	r2, r2, r3
  40b794:	07db      	lsls	r3, r3, #31
  40b796:	bf1c      	itt	ne
  40b798:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b79c:	f800 3b01 	strbne.w	r3, [r0], #1
  40b7a0:	d380      	bcc.n	40b6a4 <memcpy+0xc>
  40b7a2:	f831 3b02 	ldrh.w	r3, [r1], #2
  40b7a6:	f820 3b02 	strh.w	r3, [r0], #2
  40b7aa:	e77b      	b.n	40b6a4 <memcpy+0xc>
  40b7ac:	3a04      	subs	r2, #4
  40b7ae:	d3d9      	bcc.n	40b764 <memcpy+0xcc>
  40b7b0:	3a01      	subs	r2, #1
  40b7b2:	f811 3b01 	ldrb.w	r3, [r1], #1
  40b7b6:	f800 3b01 	strb.w	r3, [r0], #1
  40b7ba:	d2f9      	bcs.n	40b7b0 <memcpy+0x118>
  40b7bc:	780b      	ldrb	r3, [r1, #0]
  40b7be:	7003      	strb	r3, [r0, #0]
  40b7c0:	784b      	ldrb	r3, [r1, #1]
  40b7c2:	7043      	strb	r3, [r0, #1]
  40b7c4:	788b      	ldrb	r3, [r1, #2]
  40b7c6:	7083      	strb	r3, [r0, #2]
  40b7c8:	4660      	mov	r0, ip
  40b7ca:	4770      	bx	lr

0040b7cc <memset>:
  40b7cc:	b470      	push	{r4, r5, r6}
  40b7ce:	0786      	lsls	r6, r0, #30
  40b7d0:	d046      	beq.n	40b860 <memset+0x94>
  40b7d2:	1e54      	subs	r4, r2, #1
  40b7d4:	2a00      	cmp	r2, #0
  40b7d6:	d041      	beq.n	40b85c <memset+0x90>
  40b7d8:	b2ca      	uxtb	r2, r1
  40b7da:	4603      	mov	r3, r0
  40b7dc:	e002      	b.n	40b7e4 <memset+0x18>
  40b7de:	f114 34ff 	adds.w	r4, r4, #4294967295
  40b7e2:	d33b      	bcc.n	40b85c <memset+0x90>
  40b7e4:	f803 2b01 	strb.w	r2, [r3], #1
  40b7e8:	079d      	lsls	r5, r3, #30
  40b7ea:	d1f8      	bne.n	40b7de <memset+0x12>
  40b7ec:	2c03      	cmp	r4, #3
  40b7ee:	d92e      	bls.n	40b84e <memset+0x82>
  40b7f0:	b2cd      	uxtb	r5, r1
  40b7f2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40b7f6:	2c0f      	cmp	r4, #15
  40b7f8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40b7fc:	d919      	bls.n	40b832 <memset+0x66>
  40b7fe:	f103 0210 	add.w	r2, r3, #16
  40b802:	4626      	mov	r6, r4
  40b804:	3e10      	subs	r6, #16
  40b806:	2e0f      	cmp	r6, #15
  40b808:	f842 5c10 	str.w	r5, [r2, #-16]
  40b80c:	f842 5c0c 	str.w	r5, [r2, #-12]
  40b810:	f842 5c08 	str.w	r5, [r2, #-8]
  40b814:	f842 5c04 	str.w	r5, [r2, #-4]
  40b818:	f102 0210 	add.w	r2, r2, #16
  40b81c:	d8f2      	bhi.n	40b804 <memset+0x38>
  40b81e:	f1a4 0210 	sub.w	r2, r4, #16
  40b822:	f022 020f 	bic.w	r2, r2, #15
  40b826:	f004 040f 	and.w	r4, r4, #15
  40b82a:	3210      	adds	r2, #16
  40b82c:	2c03      	cmp	r4, #3
  40b82e:	4413      	add	r3, r2
  40b830:	d90d      	bls.n	40b84e <memset+0x82>
  40b832:	461e      	mov	r6, r3
  40b834:	4622      	mov	r2, r4
  40b836:	3a04      	subs	r2, #4
  40b838:	2a03      	cmp	r2, #3
  40b83a:	f846 5b04 	str.w	r5, [r6], #4
  40b83e:	d8fa      	bhi.n	40b836 <memset+0x6a>
  40b840:	1f22      	subs	r2, r4, #4
  40b842:	f022 0203 	bic.w	r2, r2, #3
  40b846:	3204      	adds	r2, #4
  40b848:	4413      	add	r3, r2
  40b84a:	f004 0403 	and.w	r4, r4, #3
  40b84e:	b12c      	cbz	r4, 40b85c <memset+0x90>
  40b850:	b2c9      	uxtb	r1, r1
  40b852:	441c      	add	r4, r3
  40b854:	f803 1b01 	strb.w	r1, [r3], #1
  40b858:	429c      	cmp	r4, r3
  40b85a:	d1fb      	bne.n	40b854 <memset+0x88>
  40b85c:	bc70      	pop	{r4, r5, r6}
  40b85e:	4770      	bx	lr
  40b860:	4614      	mov	r4, r2
  40b862:	4603      	mov	r3, r0
  40b864:	e7c2      	b.n	40b7ec <memset+0x20>
  40b866:	bf00      	nop

0040b868 <setbuf>:
  40b868:	2900      	cmp	r1, #0
  40b86a:	bf0c      	ite	eq
  40b86c:	2202      	moveq	r2, #2
  40b86e:	2200      	movne	r2, #0
  40b870:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40b874:	f000 b800 	b.w	40b878 <setvbuf>

0040b878 <setvbuf>:
  40b878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40b87c:	4c61      	ldr	r4, [pc, #388]	; (40ba04 <setvbuf+0x18c>)
  40b87e:	6825      	ldr	r5, [r4, #0]
  40b880:	b083      	sub	sp, #12
  40b882:	4604      	mov	r4, r0
  40b884:	460f      	mov	r7, r1
  40b886:	4690      	mov	r8, r2
  40b888:	461e      	mov	r6, r3
  40b88a:	b115      	cbz	r5, 40b892 <setvbuf+0x1a>
  40b88c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40b88e:	2b00      	cmp	r3, #0
  40b890:	d064      	beq.n	40b95c <setvbuf+0xe4>
  40b892:	f1b8 0f02 	cmp.w	r8, #2
  40b896:	d006      	beq.n	40b8a6 <setvbuf+0x2e>
  40b898:	f1b8 0f01 	cmp.w	r8, #1
  40b89c:	f200 809f 	bhi.w	40b9de <setvbuf+0x166>
  40b8a0:	2e00      	cmp	r6, #0
  40b8a2:	f2c0 809c 	blt.w	40b9de <setvbuf+0x166>
  40b8a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40b8a8:	07d8      	lsls	r0, r3, #31
  40b8aa:	d534      	bpl.n	40b916 <setvbuf+0x9e>
  40b8ac:	4621      	mov	r1, r4
  40b8ae:	4628      	mov	r0, r5
  40b8b0:	f001 f888 	bl	40c9c4 <_fflush_r>
  40b8b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40b8b6:	b141      	cbz	r1, 40b8ca <setvbuf+0x52>
  40b8b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40b8bc:	4299      	cmp	r1, r3
  40b8be:	d002      	beq.n	40b8c6 <setvbuf+0x4e>
  40b8c0:	4628      	mov	r0, r5
  40b8c2:	f001 f9fd 	bl	40ccc0 <_free_r>
  40b8c6:	2300      	movs	r3, #0
  40b8c8:	6323      	str	r3, [r4, #48]	; 0x30
  40b8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b8ce:	2200      	movs	r2, #0
  40b8d0:	61a2      	str	r2, [r4, #24]
  40b8d2:	6062      	str	r2, [r4, #4]
  40b8d4:	061a      	lsls	r2, r3, #24
  40b8d6:	d43a      	bmi.n	40b94e <setvbuf+0xd6>
  40b8d8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40b8dc:	f023 0303 	bic.w	r3, r3, #3
  40b8e0:	f1b8 0f02 	cmp.w	r8, #2
  40b8e4:	81a3      	strh	r3, [r4, #12]
  40b8e6:	d01d      	beq.n	40b924 <setvbuf+0xac>
  40b8e8:	ab01      	add	r3, sp, #4
  40b8ea:	466a      	mov	r2, sp
  40b8ec:	4621      	mov	r1, r4
  40b8ee:	4628      	mov	r0, r5
  40b8f0:	f001 fc84 	bl	40d1fc <__swhatbuf_r>
  40b8f4:	89a3      	ldrh	r3, [r4, #12]
  40b8f6:	4318      	orrs	r0, r3
  40b8f8:	81a0      	strh	r0, [r4, #12]
  40b8fa:	2e00      	cmp	r6, #0
  40b8fc:	d132      	bne.n	40b964 <setvbuf+0xec>
  40b8fe:	9e00      	ldr	r6, [sp, #0]
  40b900:	4630      	mov	r0, r6
  40b902:	f001 fcf3 	bl	40d2ec <malloc>
  40b906:	4607      	mov	r7, r0
  40b908:	2800      	cmp	r0, #0
  40b90a:	d06b      	beq.n	40b9e4 <setvbuf+0x16c>
  40b90c:	89a3      	ldrh	r3, [r4, #12]
  40b90e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40b912:	81a3      	strh	r3, [r4, #12]
  40b914:	e028      	b.n	40b968 <setvbuf+0xf0>
  40b916:	89a3      	ldrh	r3, [r4, #12]
  40b918:	0599      	lsls	r1, r3, #22
  40b91a:	d4c7      	bmi.n	40b8ac <setvbuf+0x34>
  40b91c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b91e:	f001 fc69 	bl	40d1f4 <__retarget_lock_acquire_recursive>
  40b922:	e7c3      	b.n	40b8ac <setvbuf+0x34>
  40b924:	2500      	movs	r5, #0
  40b926:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40b928:	2600      	movs	r6, #0
  40b92a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40b92e:	f043 0302 	orr.w	r3, r3, #2
  40b932:	2001      	movs	r0, #1
  40b934:	60a6      	str	r6, [r4, #8]
  40b936:	07ce      	lsls	r6, r1, #31
  40b938:	81a3      	strh	r3, [r4, #12]
  40b93a:	6022      	str	r2, [r4, #0]
  40b93c:	6122      	str	r2, [r4, #16]
  40b93e:	6160      	str	r0, [r4, #20]
  40b940:	d401      	bmi.n	40b946 <setvbuf+0xce>
  40b942:	0598      	lsls	r0, r3, #22
  40b944:	d53e      	bpl.n	40b9c4 <setvbuf+0x14c>
  40b946:	4628      	mov	r0, r5
  40b948:	b003      	add	sp, #12
  40b94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40b94e:	6921      	ldr	r1, [r4, #16]
  40b950:	4628      	mov	r0, r5
  40b952:	f001 f9b5 	bl	40ccc0 <_free_r>
  40b956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b95a:	e7bd      	b.n	40b8d8 <setvbuf+0x60>
  40b95c:	4628      	mov	r0, r5
  40b95e:	f001 f889 	bl	40ca74 <__sinit>
  40b962:	e796      	b.n	40b892 <setvbuf+0x1a>
  40b964:	2f00      	cmp	r7, #0
  40b966:	d0cb      	beq.n	40b900 <setvbuf+0x88>
  40b968:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40b96a:	2b00      	cmp	r3, #0
  40b96c:	d033      	beq.n	40b9d6 <setvbuf+0x15e>
  40b96e:	9b00      	ldr	r3, [sp, #0]
  40b970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b974:	6027      	str	r7, [r4, #0]
  40b976:	429e      	cmp	r6, r3
  40b978:	bf1c      	itt	ne
  40b97a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40b97e:	81a2      	strhne	r2, [r4, #12]
  40b980:	f1b8 0f01 	cmp.w	r8, #1
  40b984:	bf04      	itt	eq
  40b986:	f042 0201 	orreq.w	r2, r2, #1
  40b98a:	81a2      	strheq	r2, [r4, #12]
  40b98c:	b292      	uxth	r2, r2
  40b98e:	f012 0308 	ands.w	r3, r2, #8
  40b992:	6127      	str	r7, [r4, #16]
  40b994:	6166      	str	r6, [r4, #20]
  40b996:	d00e      	beq.n	40b9b6 <setvbuf+0x13e>
  40b998:	07d1      	lsls	r1, r2, #31
  40b99a:	d51a      	bpl.n	40b9d2 <setvbuf+0x15a>
  40b99c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40b99e:	4276      	negs	r6, r6
  40b9a0:	2300      	movs	r3, #0
  40b9a2:	f015 0501 	ands.w	r5, r5, #1
  40b9a6:	61a6      	str	r6, [r4, #24]
  40b9a8:	60a3      	str	r3, [r4, #8]
  40b9aa:	d009      	beq.n	40b9c0 <setvbuf+0x148>
  40b9ac:	2500      	movs	r5, #0
  40b9ae:	4628      	mov	r0, r5
  40b9b0:	b003      	add	sp, #12
  40b9b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40b9b6:	60a3      	str	r3, [r4, #8]
  40b9b8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40b9ba:	f015 0501 	ands.w	r5, r5, #1
  40b9be:	d1f5      	bne.n	40b9ac <setvbuf+0x134>
  40b9c0:	0593      	lsls	r3, r2, #22
  40b9c2:	d4c0      	bmi.n	40b946 <setvbuf+0xce>
  40b9c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b9c6:	f001 fc17 	bl	40d1f8 <__retarget_lock_release_recursive>
  40b9ca:	4628      	mov	r0, r5
  40b9cc:	b003      	add	sp, #12
  40b9ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40b9d2:	60a6      	str	r6, [r4, #8]
  40b9d4:	e7f0      	b.n	40b9b8 <setvbuf+0x140>
  40b9d6:	4628      	mov	r0, r5
  40b9d8:	f001 f84c 	bl	40ca74 <__sinit>
  40b9dc:	e7c7      	b.n	40b96e <setvbuf+0xf6>
  40b9de:	f04f 35ff 	mov.w	r5, #4294967295
  40b9e2:	e7b0      	b.n	40b946 <setvbuf+0xce>
  40b9e4:	f8dd 9000 	ldr.w	r9, [sp]
  40b9e8:	45b1      	cmp	r9, r6
  40b9ea:	d004      	beq.n	40b9f6 <setvbuf+0x17e>
  40b9ec:	4648      	mov	r0, r9
  40b9ee:	f001 fc7d 	bl	40d2ec <malloc>
  40b9f2:	4607      	mov	r7, r0
  40b9f4:	b920      	cbnz	r0, 40ba00 <setvbuf+0x188>
  40b9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b9fa:	f04f 35ff 	mov.w	r5, #4294967295
  40b9fe:	e792      	b.n	40b926 <setvbuf+0xae>
  40ba00:	464e      	mov	r6, r9
  40ba02:	e783      	b.n	40b90c <setvbuf+0x94>
  40ba04:	20400184 	.word	0x20400184

0040ba08 <__sprint_r.part.0>:
  40ba08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ba0c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40ba0e:	049c      	lsls	r4, r3, #18
  40ba10:	4693      	mov	fp, r2
  40ba12:	d52f      	bpl.n	40ba74 <__sprint_r.part.0+0x6c>
  40ba14:	6893      	ldr	r3, [r2, #8]
  40ba16:	6812      	ldr	r2, [r2, #0]
  40ba18:	b353      	cbz	r3, 40ba70 <__sprint_r.part.0+0x68>
  40ba1a:	460e      	mov	r6, r1
  40ba1c:	4607      	mov	r7, r0
  40ba1e:	f102 0908 	add.w	r9, r2, #8
  40ba22:	e919 0420 	ldmdb	r9, {r5, sl}
  40ba26:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40ba2a:	d017      	beq.n	40ba5c <__sprint_r.part.0+0x54>
  40ba2c:	3d04      	subs	r5, #4
  40ba2e:	2400      	movs	r4, #0
  40ba30:	e001      	b.n	40ba36 <__sprint_r.part.0+0x2e>
  40ba32:	45a0      	cmp	r8, r4
  40ba34:	d010      	beq.n	40ba58 <__sprint_r.part.0+0x50>
  40ba36:	4632      	mov	r2, r6
  40ba38:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40ba3c:	4638      	mov	r0, r7
  40ba3e:	f001 f8bb 	bl	40cbb8 <_fputwc_r>
  40ba42:	1c43      	adds	r3, r0, #1
  40ba44:	f104 0401 	add.w	r4, r4, #1
  40ba48:	d1f3      	bne.n	40ba32 <__sprint_r.part.0+0x2a>
  40ba4a:	2300      	movs	r3, #0
  40ba4c:	f8cb 3008 	str.w	r3, [fp, #8]
  40ba50:	f8cb 3004 	str.w	r3, [fp, #4]
  40ba54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ba58:	f8db 3008 	ldr.w	r3, [fp, #8]
  40ba5c:	f02a 0a03 	bic.w	sl, sl, #3
  40ba60:	eba3 030a 	sub.w	r3, r3, sl
  40ba64:	f8cb 3008 	str.w	r3, [fp, #8]
  40ba68:	f109 0908 	add.w	r9, r9, #8
  40ba6c:	2b00      	cmp	r3, #0
  40ba6e:	d1d8      	bne.n	40ba22 <__sprint_r.part.0+0x1a>
  40ba70:	2000      	movs	r0, #0
  40ba72:	e7ea      	b.n	40ba4a <__sprint_r.part.0+0x42>
  40ba74:	f001 fa0a 	bl	40ce8c <__sfvwrite_r>
  40ba78:	2300      	movs	r3, #0
  40ba7a:	f8cb 3008 	str.w	r3, [fp, #8]
  40ba7e:	f8cb 3004 	str.w	r3, [fp, #4]
  40ba82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ba86:	bf00      	nop

0040ba88 <_vfiprintf_r>:
  40ba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ba8c:	b0ad      	sub	sp, #180	; 0xb4
  40ba8e:	461d      	mov	r5, r3
  40ba90:	468b      	mov	fp, r1
  40ba92:	4690      	mov	r8, r2
  40ba94:	9307      	str	r3, [sp, #28]
  40ba96:	9006      	str	r0, [sp, #24]
  40ba98:	b118      	cbz	r0, 40baa2 <_vfiprintf_r+0x1a>
  40ba9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ba9c:	2b00      	cmp	r3, #0
  40ba9e:	f000 80f3 	beq.w	40bc88 <_vfiprintf_r+0x200>
  40baa2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40baa6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40baaa:	07df      	lsls	r7, r3, #31
  40baac:	b281      	uxth	r1, r0
  40baae:	d402      	bmi.n	40bab6 <_vfiprintf_r+0x2e>
  40bab0:	058e      	lsls	r6, r1, #22
  40bab2:	f140 80fc 	bpl.w	40bcae <_vfiprintf_r+0x226>
  40bab6:	048c      	lsls	r4, r1, #18
  40bab8:	d40a      	bmi.n	40bad0 <_vfiprintf_r+0x48>
  40baba:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40babe:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40bac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40bac6:	f8ab 100c 	strh.w	r1, [fp, #12]
  40baca:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40bace:	b289      	uxth	r1, r1
  40bad0:	0708      	lsls	r0, r1, #28
  40bad2:	f140 80b3 	bpl.w	40bc3c <_vfiprintf_r+0x1b4>
  40bad6:	f8db 3010 	ldr.w	r3, [fp, #16]
  40bada:	2b00      	cmp	r3, #0
  40badc:	f000 80ae 	beq.w	40bc3c <_vfiprintf_r+0x1b4>
  40bae0:	f001 031a 	and.w	r3, r1, #26
  40bae4:	2b0a      	cmp	r3, #10
  40bae6:	f000 80b5 	beq.w	40bc54 <_vfiprintf_r+0x1cc>
  40baea:	2300      	movs	r3, #0
  40baec:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  40baf0:	930b      	str	r3, [sp, #44]	; 0x2c
  40baf2:	9311      	str	r3, [sp, #68]	; 0x44
  40baf4:	9310      	str	r3, [sp, #64]	; 0x40
  40baf6:	9303      	str	r3, [sp, #12]
  40baf8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40bafc:	46ca      	mov	sl, r9
  40bafe:	f8cd b010 	str.w	fp, [sp, #16]
  40bb02:	f898 3000 	ldrb.w	r3, [r8]
  40bb06:	4644      	mov	r4, r8
  40bb08:	b1fb      	cbz	r3, 40bb4a <_vfiprintf_r+0xc2>
  40bb0a:	2b25      	cmp	r3, #37	; 0x25
  40bb0c:	d102      	bne.n	40bb14 <_vfiprintf_r+0x8c>
  40bb0e:	e01c      	b.n	40bb4a <_vfiprintf_r+0xc2>
  40bb10:	2b25      	cmp	r3, #37	; 0x25
  40bb12:	d003      	beq.n	40bb1c <_vfiprintf_r+0x94>
  40bb14:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40bb18:	2b00      	cmp	r3, #0
  40bb1a:	d1f9      	bne.n	40bb10 <_vfiprintf_r+0x88>
  40bb1c:	eba4 0508 	sub.w	r5, r4, r8
  40bb20:	b19d      	cbz	r5, 40bb4a <_vfiprintf_r+0xc2>
  40bb22:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40bb24:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40bb26:	f8ca 8000 	str.w	r8, [sl]
  40bb2a:	3301      	adds	r3, #1
  40bb2c:	442a      	add	r2, r5
  40bb2e:	2b07      	cmp	r3, #7
  40bb30:	f8ca 5004 	str.w	r5, [sl, #4]
  40bb34:	9211      	str	r2, [sp, #68]	; 0x44
  40bb36:	9310      	str	r3, [sp, #64]	; 0x40
  40bb38:	dd7a      	ble.n	40bc30 <_vfiprintf_r+0x1a8>
  40bb3a:	2a00      	cmp	r2, #0
  40bb3c:	f040 84b0 	bne.w	40c4a0 <_vfiprintf_r+0xa18>
  40bb40:	9b03      	ldr	r3, [sp, #12]
  40bb42:	9210      	str	r2, [sp, #64]	; 0x40
  40bb44:	442b      	add	r3, r5
  40bb46:	46ca      	mov	sl, r9
  40bb48:	9303      	str	r3, [sp, #12]
  40bb4a:	7823      	ldrb	r3, [r4, #0]
  40bb4c:	2b00      	cmp	r3, #0
  40bb4e:	f000 83e0 	beq.w	40c312 <_vfiprintf_r+0x88a>
  40bb52:	2000      	movs	r0, #0
  40bb54:	f04f 0300 	mov.w	r3, #0
  40bb58:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40bb5c:	f104 0801 	add.w	r8, r4, #1
  40bb60:	7862      	ldrb	r2, [r4, #1]
  40bb62:	4605      	mov	r5, r0
  40bb64:	4606      	mov	r6, r0
  40bb66:	4603      	mov	r3, r0
  40bb68:	f04f 34ff 	mov.w	r4, #4294967295
  40bb6c:	f108 0801 	add.w	r8, r8, #1
  40bb70:	f1a2 0120 	sub.w	r1, r2, #32
  40bb74:	2958      	cmp	r1, #88	; 0x58
  40bb76:	f200 82de 	bhi.w	40c136 <_vfiprintf_r+0x6ae>
  40bb7a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40bb7e:	0221      	.short	0x0221
  40bb80:	02dc02dc 	.word	0x02dc02dc
  40bb84:	02dc0229 	.word	0x02dc0229
  40bb88:	02dc02dc 	.word	0x02dc02dc
  40bb8c:	02dc02dc 	.word	0x02dc02dc
  40bb90:	028902dc 	.word	0x028902dc
  40bb94:	02dc0295 	.word	0x02dc0295
  40bb98:	02bd00a2 	.word	0x02bd00a2
  40bb9c:	019f02dc 	.word	0x019f02dc
  40bba0:	01a401a4 	.word	0x01a401a4
  40bba4:	01a401a4 	.word	0x01a401a4
  40bba8:	01a401a4 	.word	0x01a401a4
  40bbac:	01a401a4 	.word	0x01a401a4
  40bbb0:	02dc01a4 	.word	0x02dc01a4
  40bbb4:	02dc02dc 	.word	0x02dc02dc
  40bbb8:	02dc02dc 	.word	0x02dc02dc
  40bbbc:	02dc02dc 	.word	0x02dc02dc
  40bbc0:	02dc02dc 	.word	0x02dc02dc
  40bbc4:	01b202dc 	.word	0x01b202dc
  40bbc8:	02dc02dc 	.word	0x02dc02dc
  40bbcc:	02dc02dc 	.word	0x02dc02dc
  40bbd0:	02dc02dc 	.word	0x02dc02dc
  40bbd4:	02dc02dc 	.word	0x02dc02dc
  40bbd8:	02dc02dc 	.word	0x02dc02dc
  40bbdc:	02dc0197 	.word	0x02dc0197
  40bbe0:	02dc02dc 	.word	0x02dc02dc
  40bbe4:	02dc02dc 	.word	0x02dc02dc
  40bbe8:	02dc019b 	.word	0x02dc019b
  40bbec:	025302dc 	.word	0x025302dc
  40bbf0:	02dc02dc 	.word	0x02dc02dc
  40bbf4:	02dc02dc 	.word	0x02dc02dc
  40bbf8:	02dc02dc 	.word	0x02dc02dc
  40bbfc:	02dc02dc 	.word	0x02dc02dc
  40bc00:	02dc02dc 	.word	0x02dc02dc
  40bc04:	021b025a 	.word	0x021b025a
  40bc08:	02dc02dc 	.word	0x02dc02dc
  40bc0c:	026e02dc 	.word	0x026e02dc
  40bc10:	02dc021b 	.word	0x02dc021b
  40bc14:	027302dc 	.word	0x027302dc
  40bc18:	01f502dc 	.word	0x01f502dc
  40bc1c:	02090182 	.word	0x02090182
  40bc20:	02dc02d7 	.word	0x02dc02d7
  40bc24:	02dc029a 	.word	0x02dc029a
  40bc28:	02dc00a7 	.word	0x02dc00a7
  40bc2c:	022e02dc 	.word	0x022e02dc
  40bc30:	f10a 0a08 	add.w	sl, sl, #8
  40bc34:	9b03      	ldr	r3, [sp, #12]
  40bc36:	442b      	add	r3, r5
  40bc38:	9303      	str	r3, [sp, #12]
  40bc3a:	e786      	b.n	40bb4a <_vfiprintf_r+0xc2>
  40bc3c:	4659      	mov	r1, fp
  40bc3e:	9806      	ldr	r0, [sp, #24]
  40bc40:	f000 fdac 	bl	40c79c <__swsetup_r>
  40bc44:	bb18      	cbnz	r0, 40bc8e <_vfiprintf_r+0x206>
  40bc46:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40bc4a:	f001 031a 	and.w	r3, r1, #26
  40bc4e:	2b0a      	cmp	r3, #10
  40bc50:	f47f af4b 	bne.w	40baea <_vfiprintf_r+0x62>
  40bc54:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40bc58:	2b00      	cmp	r3, #0
  40bc5a:	f6ff af46 	blt.w	40baea <_vfiprintf_r+0x62>
  40bc5e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40bc62:	07db      	lsls	r3, r3, #31
  40bc64:	d405      	bmi.n	40bc72 <_vfiprintf_r+0x1ea>
  40bc66:	058f      	lsls	r7, r1, #22
  40bc68:	d403      	bmi.n	40bc72 <_vfiprintf_r+0x1ea>
  40bc6a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40bc6e:	f001 fac3 	bl	40d1f8 <__retarget_lock_release_recursive>
  40bc72:	462b      	mov	r3, r5
  40bc74:	4642      	mov	r2, r8
  40bc76:	4659      	mov	r1, fp
  40bc78:	9806      	ldr	r0, [sp, #24]
  40bc7a:	f000 fd4d 	bl	40c718 <__sbprintf>
  40bc7e:	9003      	str	r0, [sp, #12]
  40bc80:	9803      	ldr	r0, [sp, #12]
  40bc82:	b02d      	add	sp, #180	; 0xb4
  40bc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bc88:	f000 fef4 	bl	40ca74 <__sinit>
  40bc8c:	e709      	b.n	40baa2 <_vfiprintf_r+0x1a>
  40bc8e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40bc92:	07d9      	lsls	r1, r3, #31
  40bc94:	d404      	bmi.n	40bca0 <_vfiprintf_r+0x218>
  40bc96:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40bc9a:	059a      	lsls	r2, r3, #22
  40bc9c:	f140 84aa 	bpl.w	40c5f4 <_vfiprintf_r+0xb6c>
  40bca0:	f04f 33ff 	mov.w	r3, #4294967295
  40bca4:	9303      	str	r3, [sp, #12]
  40bca6:	9803      	ldr	r0, [sp, #12]
  40bca8:	b02d      	add	sp, #180	; 0xb4
  40bcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bcae:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40bcb2:	f001 fa9f 	bl	40d1f4 <__retarget_lock_acquire_recursive>
  40bcb6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40bcba:	b281      	uxth	r1, r0
  40bcbc:	e6fb      	b.n	40bab6 <_vfiprintf_r+0x2e>
  40bcbe:	4276      	negs	r6, r6
  40bcc0:	9207      	str	r2, [sp, #28]
  40bcc2:	f043 0304 	orr.w	r3, r3, #4
  40bcc6:	f898 2000 	ldrb.w	r2, [r8]
  40bcca:	e74f      	b.n	40bb6c <_vfiprintf_r+0xe4>
  40bccc:	9608      	str	r6, [sp, #32]
  40bcce:	069e      	lsls	r6, r3, #26
  40bcd0:	f100 8450 	bmi.w	40c574 <_vfiprintf_r+0xaec>
  40bcd4:	9907      	ldr	r1, [sp, #28]
  40bcd6:	06dd      	lsls	r5, r3, #27
  40bcd8:	460a      	mov	r2, r1
  40bcda:	f100 83ef 	bmi.w	40c4bc <_vfiprintf_r+0xa34>
  40bcde:	0658      	lsls	r0, r3, #25
  40bce0:	f140 83ec 	bpl.w	40c4bc <_vfiprintf_r+0xa34>
  40bce4:	880e      	ldrh	r6, [r1, #0]
  40bce6:	3104      	adds	r1, #4
  40bce8:	2700      	movs	r7, #0
  40bcea:	2201      	movs	r2, #1
  40bcec:	9107      	str	r1, [sp, #28]
  40bcee:	f04f 0100 	mov.w	r1, #0
  40bcf2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40bcf6:	2500      	movs	r5, #0
  40bcf8:	1c61      	adds	r1, r4, #1
  40bcfa:	f000 8116 	beq.w	40bf2a <_vfiprintf_r+0x4a2>
  40bcfe:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40bd02:	9102      	str	r1, [sp, #8]
  40bd04:	ea56 0107 	orrs.w	r1, r6, r7
  40bd08:	f040 8114 	bne.w	40bf34 <_vfiprintf_r+0x4ac>
  40bd0c:	2c00      	cmp	r4, #0
  40bd0e:	f040 835c 	bne.w	40c3ca <_vfiprintf_r+0x942>
  40bd12:	2a00      	cmp	r2, #0
  40bd14:	f040 83b7 	bne.w	40c486 <_vfiprintf_r+0x9fe>
  40bd18:	f013 0301 	ands.w	r3, r3, #1
  40bd1c:	9305      	str	r3, [sp, #20]
  40bd1e:	f000 8457 	beq.w	40c5d0 <_vfiprintf_r+0xb48>
  40bd22:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40bd26:	2330      	movs	r3, #48	; 0x30
  40bd28:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40bd2c:	9b05      	ldr	r3, [sp, #20]
  40bd2e:	42a3      	cmp	r3, r4
  40bd30:	bfb8      	it	lt
  40bd32:	4623      	movlt	r3, r4
  40bd34:	9301      	str	r3, [sp, #4]
  40bd36:	b10d      	cbz	r5, 40bd3c <_vfiprintf_r+0x2b4>
  40bd38:	3301      	adds	r3, #1
  40bd3a:	9301      	str	r3, [sp, #4]
  40bd3c:	9b02      	ldr	r3, [sp, #8]
  40bd3e:	f013 0302 	ands.w	r3, r3, #2
  40bd42:	9309      	str	r3, [sp, #36]	; 0x24
  40bd44:	d002      	beq.n	40bd4c <_vfiprintf_r+0x2c4>
  40bd46:	9b01      	ldr	r3, [sp, #4]
  40bd48:	3302      	adds	r3, #2
  40bd4a:	9301      	str	r3, [sp, #4]
  40bd4c:	9b02      	ldr	r3, [sp, #8]
  40bd4e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40bd52:	930a      	str	r3, [sp, #40]	; 0x28
  40bd54:	f040 8217 	bne.w	40c186 <_vfiprintf_r+0x6fe>
  40bd58:	9b08      	ldr	r3, [sp, #32]
  40bd5a:	9a01      	ldr	r2, [sp, #4]
  40bd5c:	1a9d      	subs	r5, r3, r2
  40bd5e:	2d00      	cmp	r5, #0
  40bd60:	f340 8211 	ble.w	40c186 <_vfiprintf_r+0x6fe>
  40bd64:	2d10      	cmp	r5, #16
  40bd66:	f340 8490 	ble.w	40c68a <_vfiprintf_r+0xc02>
  40bd6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40bd6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40bd6e:	4ec4      	ldr	r6, [pc, #784]	; (40c080 <_vfiprintf_r+0x5f8>)
  40bd70:	46d6      	mov	lr, sl
  40bd72:	2710      	movs	r7, #16
  40bd74:	46a2      	mov	sl, r4
  40bd76:	4619      	mov	r1, r3
  40bd78:	9c06      	ldr	r4, [sp, #24]
  40bd7a:	e007      	b.n	40bd8c <_vfiprintf_r+0x304>
  40bd7c:	f101 0c02 	add.w	ip, r1, #2
  40bd80:	f10e 0e08 	add.w	lr, lr, #8
  40bd84:	4601      	mov	r1, r0
  40bd86:	3d10      	subs	r5, #16
  40bd88:	2d10      	cmp	r5, #16
  40bd8a:	dd11      	ble.n	40bdb0 <_vfiprintf_r+0x328>
  40bd8c:	1c48      	adds	r0, r1, #1
  40bd8e:	3210      	adds	r2, #16
  40bd90:	2807      	cmp	r0, #7
  40bd92:	9211      	str	r2, [sp, #68]	; 0x44
  40bd94:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40bd98:	9010      	str	r0, [sp, #64]	; 0x40
  40bd9a:	ddef      	ble.n	40bd7c <_vfiprintf_r+0x2f4>
  40bd9c:	2a00      	cmp	r2, #0
  40bd9e:	f040 81e4 	bne.w	40c16a <_vfiprintf_r+0x6e2>
  40bda2:	3d10      	subs	r5, #16
  40bda4:	2d10      	cmp	r5, #16
  40bda6:	4611      	mov	r1, r2
  40bda8:	f04f 0c01 	mov.w	ip, #1
  40bdac:	46ce      	mov	lr, r9
  40bdae:	dced      	bgt.n	40bd8c <_vfiprintf_r+0x304>
  40bdb0:	4654      	mov	r4, sl
  40bdb2:	4661      	mov	r1, ip
  40bdb4:	46f2      	mov	sl, lr
  40bdb6:	442a      	add	r2, r5
  40bdb8:	2907      	cmp	r1, #7
  40bdba:	9211      	str	r2, [sp, #68]	; 0x44
  40bdbc:	f8ca 6000 	str.w	r6, [sl]
  40bdc0:	f8ca 5004 	str.w	r5, [sl, #4]
  40bdc4:	9110      	str	r1, [sp, #64]	; 0x40
  40bdc6:	f300 82ec 	bgt.w	40c3a2 <_vfiprintf_r+0x91a>
  40bdca:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40bdce:	f10a 0a08 	add.w	sl, sl, #8
  40bdd2:	1c48      	adds	r0, r1, #1
  40bdd4:	2d00      	cmp	r5, #0
  40bdd6:	f040 81de 	bne.w	40c196 <_vfiprintf_r+0x70e>
  40bdda:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bddc:	2b00      	cmp	r3, #0
  40bdde:	f000 81f8 	beq.w	40c1d2 <_vfiprintf_r+0x74a>
  40bde2:	3202      	adds	r2, #2
  40bde4:	a90e      	add	r1, sp, #56	; 0x38
  40bde6:	2302      	movs	r3, #2
  40bde8:	2807      	cmp	r0, #7
  40bdea:	9211      	str	r2, [sp, #68]	; 0x44
  40bdec:	9010      	str	r0, [sp, #64]	; 0x40
  40bdee:	e88a 000a 	stmia.w	sl, {r1, r3}
  40bdf2:	f340 81ea 	ble.w	40c1ca <_vfiprintf_r+0x742>
  40bdf6:	2a00      	cmp	r2, #0
  40bdf8:	f040 838c 	bne.w	40c514 <_vfiprintf_r+0xa8c>
  40bdfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bdfe:	2b80      	cmp	r3, #128	; 0x80
  40be00:	f04f 0001 	mov.w	r0, #1
  40be04:	4611      	mov	r1, r2
  40be06:	46ca      	mov	sl, r9
  40be08:	f040 81e7 	bne.w	40c1da <_vfiprintf_r+0x752>
  40be0c:	9b08      	ldr	r3, [sp, #32]
  40be0e:	9d01      	ldr	r5, [sp, #4]
  40be10:	1b5e      	subs	r6, r3, r5
  40be12:	2e00      	cmp	r6, #0
  40be14:	f340 81e1 	ble.w	40c1da <_vfiprintf_r+0x752>
  40be18:	2e10      	cmp	r6, #16
  40be1a:	4d9a      	ldr	r5, [pc, #616]	; (40c084 <_vfiprintf_r+0x5fc>)
  40be1c:	f340 8450 	ble.w	40c6c0 <_vfiprintf_r+0xc38>
  40be20:	46d4      	mov	ip, sl
  40be22:	2710      	movs	r7, #16
  40be24:	46a2      	mov	sl, r4
  40be26:	9c06      	ldr	r4, [sp, #24]
  40be28:	e007      	b.n	40be3a <_vfiprintf_r+0x3b2>
  40be2a:	f101 0e02 	add.w	lr, r1, #2
  40be2e:	f10c 0c08 	add.w	ip, ip, #8
  40be32:	4601      	mov	r1, r0
  40be34:	3e10      	subs	r6, #16
  40be36:	2e10      	cmp	r6, #16
  40be38:	dd11      	ble.n	40be5e <_vfiprintf_r+0x3d6>
  40be3a:	1c48      	adds	r0, r1, #1
  40be3c:	3210      	adds	r2, #16
  40be3e:	2807      	cmp	r0, #7
  40be40:	9211      	str	r2, [sp, #68]	; 0x44
  40be42:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40be46:	9010      	str	r0, [sp, #64]	; 0x40
  40be48:	ddef      	ble.n	40be2a <_vfiprintf_r+0x3a2>
  40be4a:	2a00      	cmp	r2, #0
  40be4c:	f040 829d 	bne.w	40c38a <_vfiprintf_r+0x902>
  40be50:	3e10      	subs	r6, #16
  40be52:	2e10      	cmp	r6, #16
  40be54:	f04f 0e01 	mov.w	lr, #1
  40be58:	4611      	mov	r1, r2
  40be5a:	46cc      	mov	ip, r9
  40be5c:	dced      	bgt.n	40be3a <_vfiprintf_r+0x3b2>
  40be5e:	4654      	mov	r4, sl
  40be60:	46e2      	mov	sl, ip
  40be62:	4432      	add	r2, r6
  40be64:	f1be 0f07 	cmp.w	lr, #7
  40be68:	9211      	str	r2, [sp, #68]	; 0x44
  40be6a:	e88a 0060 	stmia.w	sl, {r5, r6}
  40be6e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40be72:	f300 8369 	bgt.w	40c548 <_vfiprintf_r+0xac0>
  40be76:	f10a 0a08 	add.w	sl, sl, #8
  40be7a:	f10e 0001 	add.w	r0, lr, #1
  40be7e:	4671      	mov	r1, lr
  40be80:	e1ab      	b.n	40c1da <_vfiprintf_r+0x752>
  40be82:	9608      	str	r6, [sp, #32]
  40be84:	f013 0220 	ands.w	r2, r3, #32
  40be88:	f040 838c 	bne.w	40c5a4 <_vfiprintf_r+0xb1c>
  40be8c:	f013 0110 	ands.w	r1, r3, #16
  40be90:	f040 831a 	bne.w	40c4c8 <_vfiprintf_r+0xa40>
  40be94:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40be98:	f000 8316 	beq.w	40c4c8 <_vfiprintf_r+0xa40>
  40be9c:	9807      	ldr	r0, [sp, #28]
  40be9e:	460a      	mov	r2, r1
  40bea0:	4601      	mov	r1, r0
  40bea2:	3104      	adds	r1, #4
  40bea4:	8806      	ldrh	r6, [r0, #0]
  40bea6:	9107      	str	r1, [sp, #28]
  40bea8:	2700      	movs	r7, #0
  40beaa:	e720      	b.n	40bcee <_vfiprintf_r+0x266>
  40beac:	9608      	str	r6, [sp, #32]
  40beae:	f043 0310 	orr.w	r3, r3, #16
  40beb2:	e7e7      	b.n	40be84 <_vfiprintf_r+0x3fc>
  40beb4:	9608      	str	r6, [sp, #32]
  40beb6:	f043 0310 	orr.w	r3, r3, #16
  40beba:	e708      	b.n	40bcce <_vfiprintf_r+0x246>
  40bebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40bec0:	f898 2000 	ldrb.w	r2, [r8]
  40bec4:	e652      	b.n	40bb6c <_vfiprintf_r+0xe4>
  40bec6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40beca:	2600      	movs	r6, #0
  40becc:	f818 2b01 	ldrb.w	r2, [r8], #1
  40bed0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40bed4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40bed8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40bedc:	2909      	cmp	r1, #9
  40bede:	d9f5      	bls.n	40becc <_vfiprintf_r+0x444>
  40bee0:	e646      	b.n	40bb70 <_vfiprintf_r+0xe8>
  40bee2:	9608      	str	r6, [sp, #32]
  40bee4:	2800      	cmp	r0, #0
  40bee6:	f040 8408 	bne.w	40c6fa <_vfiprintf_r+0xc72>
  40beea:	f043 0310 	orr.w	r3, r3, #16
  40beee:	069e      	lsls	r6, r3, #26
  40bef0:	f100 834c 	bmi.w	40c58c <_vfiprintf_r+0xb04>
  40bef4:	06dd      	lsls	r5, r3, #27
  40bef6:	f100 82f3 	bmi.w	40c4e0 <_vfiprintf_r+0xa58>
  40befa:	0658      	lsls	r0, r3, #25
  40befc:	f140 82f0 	bpl.w	40c4e0 <_vfiprintf_r+0xa58>
  40bf00:	9d07      	ldr	r5, [sp, #28]
  40bf02:	f9b5 6000 	ldrsh.w	r6, [r5]
  40bf06:	462a      	mov	r2, r5
  40bf08:	17f7      	asrs	r7, r6, #31
  40bf0a:	3204      	adds	r2, #4
  40bf0c:	4630      	mov	r0, r6
  40bf0e:	4639      	mov	r1, r7
  40bf10:	9207      	str	r2, [sp, #28]
  40bf12:	2800      	cmp	r0, #0
  40bf14:	f171 0200 	sbcs.w	r2, r1, #0
  40bf18:	f2c0 835d 	blt.w	40c5d6 <_vfiprintf_r+0xb4e>
  40bf1c:	1c61      	adds	r1, r4, #1
  40bf1e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40bf22:	f04f 0201 	mov.w	r2, #1
  40bf26:	f47f aeea 	bne.w	40bcfe <_vfiprintf_r+0x276>
  40bf2a:	ea56 0107 	orrs.w	r1, r6, r7
  40bf2e:	f000 824d 	beq.w	40c3cc <_vfiprintf_r+0x944>
  40bf32:	9302      	str	r3, [sp, #8]
  40bf34:	2a01      	cmp	r2, #1
  40bf36:	f000 828c 	beq.w	40c452 <_vfiprintf_r+0x9ca>
  40bf3a:	2a02      	cmp	r2, #2
  40bf3c:	f040 825c 	bne.w	40c3f8 <_vfiprintf_r+0x970>
  40bf40:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40bf42:	46cb      	mov	fp, r9
  40bf44:	0933      	lsrs	r3, r6, #4
  40bf46:	f006 010f 	and.w	r1, r6, #15
  40bf4a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40bf4e:	093a      	lsrs	r2, r7, #4
  40bf50:	461e      	mov	r6, r3
  40bf52:	4617      	mov	r7, r2
  40bf54:	5c43      	ldrb	r3, [r0, r1]
  40bf56:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40bf5a:	ea56 0307 	orrs.w	r3, r6, r7
  40bf5e:	d1f1      	bne.n	40bf44 <_vfiprintf_r+0x4bc>
  40bf60:	eba9 030b 	sub.w	r3, r9, fp
  40bf64:	9305      	str	r3, [sp, #20]
  40bf66:	e6e1      	b.n	40bd2c <_vfiprintf_r+0x2a4>
  40bf68:	2800      	cmp	r0, #0
  40bf6a:	f040 83c0 	bne.w	40c6ee <_vfiprintf_r+0xc66>
  40bf6e:	0699      	lsls	r1, r3, #26
  40bf70:	f100 8367 	bmi.w	40c642 <_vfiprintf_r+0xbba>
  40bf74:	06da      	lsls	r2, r3, #27
  40bf76:	f100 80f1 	bmi.w	40c15c <_vfiprintf_r+0x6d4>
  40bf7a:	065b      	lsls	r3, r3, #25
  40bf7c:	f140 80ee 	bpl.w	40c15c <_vfiprintf_r+0x6d4>
  40bf80:	9a07      	ldr	r2, [sp, #28]
  40bf82:	6813      	ldr	r3, [r2, #0]
  40bf84:	3204      	adds	r2, #4
  40bf86:	9207      	str	r2, [sp, #28]
  40bf88:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40bf8c:	801a      	strh	r2, [r3, #0]
  40bf8e:	e5b8      	b.n	40bb02 <_vfiprintf_r+0x7a>
  40bf90:	9807      	ldr	r0, [sp, #28]
  40bf92:	4a3d      	ldr	r2, [pc, #244]	; (40c088 <_vfiprintf_r+0x600>)
  40bf94:	9608      	str	r6, [sp, #32]
  40bf96:	920b      	str	r2, [sp, #44]	; 0x2c
  40bf98:	6806      	ldr	r6, [r0, #0]
  40bf9a:	2278      	movs	r2, #120	; 0x78
  40bf9c:	2130      	movs	r1, #48	; 0x30
  40bf9e:	3004      	adds	r0, #4
  40bfa0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40bfa4:	f043 0302 	orr.w	r3, r3, #2
  40bfa8:	9007      	str	r0, [sp, #28]
  40bfaa:	2700      	movs	r7, #0
  40bfac:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40bfb0:	2202      	movs	r2, #2
  40bfb2:	e69c      	b.n	40bcee <_vfiprintf_r+0x266>
  40bfb4:	9608      	str	r6, [sp, #32]
  40bfb6:	2800      	cmp	r0, #0
  40bfb8:	d099      	beq.n	40beee <_vfiprintf_r+0x466>
  40bfba:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40bfbe:	e796      	b.n	40beee <_vfiprintf_r+0x466>
  40bfc0:	f898 2000 	ldrb.w	r2, [r8]
  40bfc4:	2d00      	cmp	r5, #0
  40bfc6:	f47f add1 	bne.w	40bb6c <_vfiprintf_r+0xe4>
  40bfca:	2001      	movs	r0, #1
  40bfcc:	2520      	movs	r5, #32
  40bfce:	e5cd      	b.n	40bb6c <_vfiprintf_r+0xe4>
  40bfd0:	f043 0301 	orr.w	r3, r3, #1
  40bfd4:	f898 2000 	ldrb.w	r2, [r8]
  40bfd8:	e5c8      	b.n	40bb6c <_vfiprintf_r+0xe4>
  40bfda:	9608      	str	r6, [sp, #32]
  40bfdc:	2800      	cmp	r0, #0
  40bfde:	f040 8393 	bne.w	40c708 <_vfiprintf_r+0xc80>
  40bfe2:	4929      	ldr	r1, [pc, #164]	; (40c088 <_vfiprintf_r+0x600>)
  40bfe4:	910b      	str	r1, [sp, #44]	; 0x2c
  40bfe6:	069f      	lsls	r7, r3, #26
  40bfe8:	f100 82e8 	bmi.w	40c5bc <_vfiprintf_r+0xb34>
  40bfec:	9807      	ldr	r0, [sp, #28]
  40bfee:	06de      	lsls	r6, r3, #27
  40bff0:	4601      	mov	r1, r0
  40bff2:	f100 8270 	bmi.w	40c4d6 <_vfiprintf_r+0xa4e>
  40bff6:	065d      	lsls	r5, r3, #25
  40bff8:	f140 826d 	bpl.w	40c4d6 <_vfiprintf_r+0xa4e>
  40bffc:	3104      	adds	r1, #4
  40bffe:	8806      	ldrh	r6, [r0, #0]
  40c000:	9107      	str	r1, [sp, #28]
  40c002:	2700      	movs	r7, #0
  40c004:	07d8      	lsls	r0, r3, #31
  40c006:	f140 8222 	bpl.w	40c44e <_vfiprintf_r+0x9c6>
  40c00a:	ea56 0107 	orrs.w	r1, r6, r7
  40c00e:	f000 821e 	beq.w	40c44e <_vfiprintf_r+0x9c6>
  40c012:	2130      	movs	r1, #48	; 0x30
  40c014:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40c018:	f043 0302 	orr.w	r3, r3, #2
  40c01c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40c020:	2202      	movs	r2, #2
  40c022:	e664      	b.n	40bcee <_vfiprintf_r+0x266>
  40c024:	9608      	str	r6, [sp, #32]
  40c026:	2800      	cmp	r0, #0
  40c028:	f040 836b 	bne.w	40c702 <_vfiprintf_r+0xc7a>
  40c02c:	4917      	ldr	r1, [pc, #92]	; (40c08c <_vfiprintf_r+0x604>)
  40c02e:	910b      	str	r1, [sp, #44]	; 0x2c
  40c030:	e7d9      	b.n	40bfe6 <_vfiprintf_r+0x55e>
  40c032:	9907      	ldr	r1, [sp, #28]
  40c034:	9608      	str	r6, [sp, #32]
  40c036:	680a      	ldr	r2, [r1, #0]
  40c038:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40c03c:	f04f 0000 	mov.w	r0, #0
  40c040:	460a      	mov	r2, r1
  40c042:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40c046:	3204      	adds	r2, #4
  40c048:	2001      	movs	r0, #1
  40c04a:	9001      	str	r0, [sp, #4]
  40c04c:	9207      	str	r2, [sp, #28]
  40c04e:	9005      	str	r0, [sp, #20]
  40c050:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40c054:	9302      	str	r3, [sp, #8]
  40c056:	2400      	movs	r4, #0
  40c058:	e670      	b.n	40bd3c <_vfiprintf_r+0x2b4>
  40c05a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c05e:	f898 2000 	ldrb.w	r2, [r8]
  40c062:	e583      	b.n	40bb6c <_vfiprintf_r+0xe4>
  40c064:	f898 2000 	ldrb.w	r2, [r8]
  40c068:	2a6c      	cmp	r2, #108	; 0x6c
  40c06a:	bf03      	ittte	eq
  40c06c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  40c070:	f043 0320 	orreq.w	r3, r3, #32
  40c074:	f108 0801 	addeq.w	r8, r8, #1
  40c078:	f043 0310 	orrne.w	r3, r3, #16
  40c07c:	e576      	b.n	40bb6c <_vfiprintf_r+0xe4>
  40c07e:	bf00      	nop
  40c080:	0040f510 	.word	0x0040f510
  40c084:	0040f520 	.word	0x0040f520
  40c088:	0040f4f4 	.word	0x0040f4f4
  40c08c:	0040f4e0 	.word	0x0040f4e0
  40c090:	9907      	ldr	r1, [sp, #28]
  40c092:	680e      	ldr	r6, [r1, #0]
  40c094:	460a      	mov	r2, r1
  40c096:	2e00      	cmp	r6, #0
  40c098:	f102 0204 	add.w	r2, r2, #4
  40c09c:	f6ff ae0f 	blt.w	40bcbe <_vfiprintf_r+0x236>
  40c0a0:	9207      	str	r2, [sp, #28]
  40c0a2:	f898 2000 	ldrb.w	r2, [r8]
  40c0a6:	e561      	b.n	40bb6c <_vfiprintf_r+0xe4>
  40c0a8:	f898 2000 	ldrb.w	r2, [r8]
  40c0ac:	2001      	movs	r0, #1
  40c0ae:	252b      	movs	r5, #43	; 0x2b
  40c0b0:	e55c      	b.n	40bb6c <_vfiprintf_r+0xe4>
  40c0b2:	9907      	ldr	r1, [sp, #28]
  40c0b4:	9608      	str	r6, [sp, #32]
  40c0b6:	f8d1 b000 	ldr.w	fp, [r1]
  40c0ba:	f04f 0200 	mov.w	r2, #0
  40c0be:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40c0c2:	1d0e      	adds	r6, r1, #4
  40c0c4:	f1bb 0f00 	cmp.w	fp, #0
  40c0c8:	f000 82e5 	beq.w	40c696 <_vfiprintf_r+0xc0e>
  40c0cc:	1c67      	adds	r7, r4, #1
  40c0ce:	f000 82c4 	beq.w	40c65a <_vfiprintf_r+0xbd2>
  40c0d2:	4622      	mov	r2, r4
  40c0d4:	2100      	movs	r1, #0
  40c0d6:	4658      	mov	r0, fp
  40c0d8:	9301      	str	r3, [sp, #4]
  40c0da:	f001 fbd9 	bl	40d890 <memchr>
  40c0de:	9b01      	ldr	r3, [sp, #4]
  40c0e0:	2800      	cmp	r0, #0
  40c0e2:	f000 82e5 	beq.w	40c6b0 <_vfiprintf_r+0xc28>
  40c0e6:	eba0 020b 	sub.w	r2, r0, fp
  40c0ea:	9205      	str	r2, [sp, #20]
  40c0ec:	9607      	str	r6, [sp, #28]
  40c0ee:	9302      	str	r3, [sp, #8]
  40c0f0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40c0f4:	2400      	movs	r4, #0
  40c0f6:	e619      	b.n	40bd2c <_vfiprintf_r+0x2a4>
  40c0f8:	f898 2000 	ldrb.w	r2, [r8]
  40c0fc:	2a2a      	cmp	r2, #42	; 0x2a
  40c0fe:	f108 0701 	add.w	r7, r8, #1
  40c102:	f000 82e9 	beq.w	40c6d8 <_vfiprintf_r+0xc50>
  40c106:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40c10a:	2909      	cmp	r1, #9
  40c10c:	46b8      	mov	r8, r7
  40c10e:	f04f 0400 	mov.w	r4, #0
  40c112:	f63f ad2d 	bhi.w	40bb70 <_vfiprintf_r+0xe8>
  40c116:	f818 2b01 	ldrb.w	r2, [r8], #1
  40c11a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40c11e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40c122:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40c126:	2909      	cmp	r1, #9
  40c128:	d9f5      	bls.n	40c116 <_vfiprintf_r+0x68e>
  40c12a:	e521      	b.n	40bb70 <_vfiprintf_r+0xe8>
  40c12c:	f043 0320 	orr.w	r3, r3, #32
  40c130:	f898 2000 	ldrb.w	r2, [r8]
  40c134:	e51a      	b.n	40bb6c <_vfiprintf_r+0xe4>
  40c136:	9608      	str	r6, [sp, #32]
  40c138:	2800      	cmp	r0, #0
  40c13a:	f040 82db 	bne.w	40c6f4 <_vfiprintf_r+0xc6c>
  40c13e:	2a00      	cmp	r2, #0
  40c140:	f000 80e7 	beq.w	40c312 <_vfiprintf_r+0x88a>
  40c144:	2101      	movs	r1, #1
  40c146:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40c14a:	f04f 0200 	mov.w	r2, #0
  40c14e:	9101      	str	r1, [sp, #4]
  40c150:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40c154:	9105      	str	r1, [sp, #20]
  40c156:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40c15a:	e77b      	b.n	40c054 <_vfiprintf_r+0x5cc>
  40c15c:	9a07      	ldr	r2, [sp, #28]
  40c15e:	6813      	ldr	r3, [r2, #0]
  40c160:	3204      	adds	r2, #4
  40c162:	9207      	str	r2, [sp, #28]
  40c164:	9a03      	ldr	r2, [sp, #12]
  40c166:	601a      	str	r2, [r3, #0]
  40c168:	e4cb      	b.n	40bb02 <_vfiprintf_r+0x7a>
  40c16a:	aa0f      	add	r2, sp, #60	; 0x3c
  40c16c:	9904      	ldr	r1, [sp, #16]
  40c16e:	4620      	mov	r0, r4
  40c170:	f7ff fc4a 	bl	40ba08 <__sprint_r.part.0>
  40c174:	2800      	cmp	r0, #0
  40c176:	f040 8139 	bne.w	40c3ec <_vfiprintf_r+0x964>
  40c17a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c17c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c17e:	f101 0c01 	add.w	ip, r1, #1
  40c182:	46ce      	mov	lr, r9
  40c184:	e5ff      	b.n	40bd86 <_vfiprintf_r+0x2fe>
  40c186:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c188:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c18a:	1c48      	adds	r0, r1, #1
  40c18c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40c190:	2d00      	cmp	r5, #0
  40c192:	f43f ae22 	beq.w	40bdda <_vfiprintf_r+0x352>
  40c196:	3201      	adds	r2, #1
  40c198:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40c19c:	2101      	movs	r1, #1
  40c19e:	2807      	cmp	r0, #7
  40c1a0:	9211      	str	r2, [sp, #68]	; 0x44
  40c1a2:	9010      	str	r0, [sp, #64]	; 0x40
  40c1a4:	f8ca 5000 	str.w	r5, [sl]
  40c1a8:	f8ca 1004 	str.w	r1, [sl, #4]
  40c1ac:	f340 8108 	ble.w	40c3c0 <_vfiprintf_r+0x938>
  40c1b0:	2a00      	cmp	r2, #0
  40c1b2:	f040 81bc 	bne.w	40c52e <_vfiprintf_r+0xaa6>
  40c1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c1b8:	2b00      	cmp	r3, #0
  40c1ba:	f43f ae1f 	beq.w	40bdfc <_vfiprintf_r+0x374>
  40c1be:	ab0e      	add	r3, sp, #56	; 0x38
  40c1c0:	2202      	movs	r2, #2
  40c1c2:	4608      	mov	r0, r1
  40c1c4:	931c      	str	r3, [sp, #112]	; 0x70
  40c1c6:	921d      	str	r2, [sp, #116]	; 0x74
  40c1c8:	46ca      	mov	sl, r9
  40c1ca:	4601      	mov	r1, r0
  40c1cc:	f10a 0a08 	add.w	sl, sl, #8
  40c1d0:	3001      	adds	r0, #1
  40c1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c1d4:	2b80      	cmp	r3, #128	; 0x80
  40c1d6:	f43f ae19 	beq.w	40be0c <_vfiprintf_r+0x384>
  40c1da:	9b05      	ldr	r3, [sp, #20]
  40c1dc:	1ae4      	subs	r4, r4, r3
  40c1de:	2c00      	cmp	r4, #0
  40c1e0:	dd2e      	ble.n	40c240 <_vfiprintf_r+0x7b8>
  40c1e2:	2c10      	cmp	r4, #16
  40c1e4:	4db3      	ldr	r5, [pc, #716]	; (40c4b4 <_vfiprintf_r+0xa2c>)
  40c1e6:	dd1e      	ble.n	40c226 <_vfiprintf_r+0x79e>
  40c1e8:	46d6      	mov	lr, sl
  40c1ea:	2610      	movs	r6, #16
  40c1ec:	9f06      	ldr	r7, [sp, #24]
  40c1ee:	f8dd a010 	ldr.w	sl, [sp, #16]
  40c1f2:	e006      	b.n	40c202 <_vfiprintf_r+0x77a>
  40c1f4:	1c88      	adds	r0, r1, #2
  40c1f6:	f10e 0e08 	add.w	lr, lr, #8
  40c1fa:	4619      	mov	r1, r3
  40c1fc:	3c10      	subs	r4, #16
  40c1fe:	2c10      	cmp	r4, #16
  40c200:	dd10      	ble.n	40c224 <_vfiprintf_r+0x79c>
  40c202:	1c4b      	adds	r3, r1, #1
  40c204:	3210      	adds	r2, #16
  40c206:	2b07      	cmp	r3, #7
  40c208:	9211      	str	r2, [sp, #68]	; 0x44
  40c20a:	e88e 0060 	stmia.w	lr, {r5, r6}
  40c20e:	9310      	str	r3, [sp, #64]	; 0x40
  40c210:	ddf0      	ble.n	40c1f4 <_vfiprintf_r+0x76c>
  40c212:	2a00      	cmp	r2, #0
  40c214:	d165      	bne.n	40c2e2 <_vfiprintf_r+0x85a>
  40c216:	3c10      	subs	r4, #16
  40c218:	2c10      	cmp	r4, #16
  40c21a:	f04f 0001 	mov.w	r0, #1
  40c21e:	4611      	mov	r1, r2
  40c220:	46ce      	mov	lr, r9
  40c222:	dcee      	bgt.n	40c202 <_vfiprintf_r+0x77a>
  40c224:	46f2      	mov	sl, lr
  40c226:	4422      	add	r2, r4
  40c228:	2807      	cmp	r0, #7
  40c22a:	9211      	str	r2, [sp, #68]	; 0x44
  40c22c:	f8ca 5000 	str.w	r5, [sl]
  40c230:	f8ca 4004 	str.w	r4, [sl, #4]
  40c234:	9010      	str	r0, [sp, #64]	; 0x40
  40c236:	f300 8085 	bgt.w	40c344 <_vfiprintf_r+0x8bc>
  40c23a:	f10a 0a08 	add.w	sl, sl, #8
  40c23e:	3001      	adds	r0, #1
  40c240:	9905      	ldr	r1, [sp, #20]
  40c242:	f8ca b000 	str.w	fp, [sl]
  40c246:	440a      	add	r2, r1
  40c248:	2807      	cmp	r0, #7
  40c24a:	9211      	str	r2, [sp, #68]	; 0x44
  40c24c:	f8ca 1004 	str.w	r1, [sl, #4]
  40c250:	9010      	str	r0, [sp, #64]	; 0x40
  40c252:	f340 8082 	ble.w	40c35a <_vfiprintf_r+0x8d2>
  40c256:	2a00      	cmp	r2, #0
  40c258:	f040 8118 	bne.w	40c48c <_vfiprintf_r+0xa04>
  40c25c:	9b02      	ldr	r3, [sp, #8]
  40c25e:	9210      	str	r2, [sp, #64]	; 0x40
  40c260:	0758      	lsls	r0, r3, #29
  40c262:	d535      	bpl.n	40c2d0 <_vfiprintf_r+0x848>
  40c264:	9b08      	ldr	r3, [sp, #32]
  40c266:	9901      	ldr	r1, [sp, #4]
  40c268:	1a5c      	subs	r4, r3, r1
  40c26a:	2c00      	cmp	r4, #0
  40c26c:	f340 80e7 	ble.w	40c43e <_vfiprintf_r+0x9b6>
  40c270:	46ca      	mov	sl, r9
  40c272:	2c10      	cmp	r4, #16
  40c274:	f340 8218 	ble.w	40c6a8 <_vfiprintf_r+0xc20>
  40c278:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c27a:	4e8f      	ldr	r6, [pc, #572]	; (40c4b8 <_vfiprintf_r+0xa30>)
  40c27c:	9f06      	ldr	r7, [sp, #24]
  40c27e:	f8dd b010 	ldr.w	fp, [sp, #16]
  40c282:	2510      	movs	r5, #16
  40c284:	e006      	b.n	40c294 <_vfiprintf_r+0x80c>
  40c286:	1c88      	adds	r0, r1, #2
  40c288:	f10a 0a08 	add.w	sl, sl, #8
  40c28c:	4619      	mov	r1, r3
  40c28e:	3c10      	subs	r4, #16
  40c290:	2c10      	cmp	r4, #16
  40c292:	dd11      	ble.n	40c2b8 <_vfiprintf_r+0x830>
  40c294:	1c4b      	adds	r3, r1, #1
  40c296:	3210      	adds	r2, #16
  40c298:	2b07      	cmp	r3, #7
  40c29a:	9211      	str	r2, [sp, #68]	; 0x44
  40c29c:	f8ca 6000 	str.w	r6, [sl]
  40c2a0:	f8ca 5004 	str.w	r5, [sl, #4]
  40c2a4:	9310      	str	r3, [sp, #64]	; 0x40
  40c2a6:	ddee      	ble.n	40c286 <_vfiprintf_r+0x7fe>
  40c2a8:	bb42      	cbnz	r2, 40c2fc <_vfiprintf_r+0x874>
  40c2aa:	3c10      	subs	r4, #16
  40c2ac:	2c10      	cmp	r4, #16
  40c2ae:	f04f 0001 	mov.w	r0, #1
  40c2b2:	4611      	mov	r1, r2
  40c2b4:	46ca      	mov	sl, r9
  40c2b6:	dced      	bgt.n	40c294 <_vfiprintf_r+0x80c>
  40c2b8:	4422      	add	r2, r4
  40c2ba:	2807      	cmp	r0, #7
  40c2bc:	9211      	str	r2, [sp, #68]	; 0x44
  40c2be:	f8ca 6000 	str.w	r6, [sl]
  40c2c2:	f8ca 4004 	str.w	r4, [sl, #4]
  40c2c6:	9010      	str	r0, [sp, #64]	; 0x40
  40c2c8:	dd51      	ble.n	40c36e <_vfiprintf_r+0x8e6>
  40c2ca:	2a00      	cmp	r2, #0
  40c2cc:	f040 819b 	bne.w	40c606 <_vfiprintf_r+0xb7e>
  40c2d0:	9b03      	ldr	r3, [sp, #12]
  40c2d2:	9a08      	ldr	r2, [sp, #32]
  40c2d4:	9901      	ldr	r1, [sp, #4]
  40c2d6:	428a      	cmp	r2, r1
  40c2d8:	bfac      	ite	ge
  40c2da:	189b      	addge	r3, r3, r2
  40c2dc:	185b      	addlt	r3, r3, r1
  40c2de:	9303      	str	r3, [sp, #12]
  40c2e0:	e04e      	b.n	40c380 <_vfiprintf_r+0x8f8>
  40c2e2:	aa0f      	add	r2, sp, #60	; 0x3c
  40c2e4:	4651      	mov	r1, sl
  40c2e6:	4638      	mov	r0, r7
  40c2e8:	f7ff fb8e 	bl	40ba08 <__sprint_r.part.0>
  40c2ec:	2800      	cmp	r0, #0
  40c2ee:	f040 813f 	bne.w	40c570 <_vfiprintf_r+0xae8>
  40c2f2:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c2f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c2f6:	1c48      	adds	r0, r1, #1
  40c2f8:	46ce      	mov	lr, r9
  40c2fa:	e77f      	b.n	40c1fc <_vfiprintf_r+0x774>
  40c2fc:	aa0f      	add	r2, sp, #60	; 0x3c
  40c2fe:	4659      	mov	r1, fp
  40c300:	4638      	mov	r0, r7
  40c302:	f7ff fb81 	bl	40ba08 <__sprint_r.part.0>
  40c306:	b960      	cbnz	r0, 40c322 <_vfiprintf_r+0x89a>
  40c308:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c30a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c30c:	1c48      	adds	r0, r1, #1
  40c30e:	46ca      	mov	sl, r9
  40c310:	e7bd      	b.n	40c28e <_vfiprintf_r+0x806>
  40c312:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c314:	f8dd b010 	ldr.w	fp, [sp, #16]
  40c318:	2b00      	cmp	r3, #0
  40c31a:	f040 81d4 	bne.w	40c6c6 <_vfiprintf_r+0xc3e>
  40c31e:	2300      	movs	r3, #0
  40c320:	9310      	str	r3, [sp, #64]	; 0x40
  40c322:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40c326:	f013 0f01 	tst.w	r3, #1
  40c32a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40c32e:	d102      	bne.n	40c336 <_vfiprintf_r+0x8ae>
  40c330:	059a      	lsls	r2, r3, #22
  40c332:	f140 80de 	bpl.w	40c4f2 <_vfiprintf_r+0xa6a>
  40c336:	065b      	lsls	r3, r3, #25
  40c338:	f53f acb2 	bmi.w	40bca0 <_vfiprintf_r+0x218>
  40c33c:	9803      	ldr	r0, [sp, #12]
  40c33e:	b02d      	add	sp, #180	; 0xb4
  40c340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c344:	2a00      	cmp	r2, #0
  40c346:	f040 8106 	bne.w	40c556 <_vfiprintf_r+0xace>
  40c34a:	9a05      	ldr	r2, [sp, #20]
  40c34c:	921d      	str	r2, [sp, #116]	; 0x74
  40c34e:	2301      	movs	r3, #1
  40c350:	9211      	str	r2, [sp, #68]	; 0x44
  40c352:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40c356:	9310      	str	r3, [sp, #64]	; 0x40
  40c358:	46ca      	mov	sl, r9
  40c35a:	f10a 0a08 	add.w	sl, sl, #8
  40c35e:	9b02      	ldr	r3, [sp, #8]
  40c360:	0759      	lsls	r1, r3, #29
  40c362:	d504      	bpl.n	40c36e <_vfiprintf_r+0x8e6>
  40c364:	9b08      	ldr	r3, [sp, #32]
  40c366:	9901      	ldr	r1, [sp, #4]
  40c368:	1a5c      	subs	r4, r3, r1
  40c36a:	2c00      	cmp	r4, #0
  40c36c:	dc81      	bgt.n	40c272 <_vfiprintf_r+0x7ea>
  40c36e:	9b03      	ldr	r3, [sp, #12]
  40c370:	9908      	ldr	r1, [sp, #32]
  40c372:	9801      	ldr	r0, [sp, #4]
  40c374:	4281      	cmp	r1, r0
  40c376:	bfac      	ite	ge
  40c378:	185b      	addge	r3, r3, r1
  40c37a:	181b      	addlt	r3, r3, r0
  40c37c:	9303      	str	r3, [sp, #12]
  40c37e:	bb72      	cbnz	r2, 40c3de <_vfiprintf_r+0x956>
  40c380:	2300      	movs	r3, #0
  40c382:	9310      	str	r3, [sp, #64]	; 0x40
  40c384:	46ca      	mov	sl, r9
  40c386:	f7ff bbbc 	b.w	40bb02 <_vfiprintf_r+0x7a>
  40c38a:	aa0f      	add	r2, sp, #60	; 0x3c
  40c38c:	9904      	ldr	r1, [sp, #16]
  40c38e:	4620      	mov	r0, r4
  40c390:	f7ff fb3a 	bl	40ba08 <__sprint_r.part.0>
  40c394:	bb50      	cbnz	r0, 40c3ec <_vfiprintf_r+0x964>
  40c396:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c398:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c39a:	f101 0e01 	add.w	lr, r1, #1
  40c39e:	46cc      	mov	ip, r9
  40c3a0:	e548      	b.n	40be34 <_vfiprintf_r+0x3ac>
  40c3a2:	2a00      	cmp	r2, #0
  40c3a4:	f040 8140 	bne.w	40c628 <_vfiprintf_r+0xba0>
  40c3a8:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40c3ac:	2900      	cmp	r1, #0
  40c3ae:	f000 811b 	beq.w	40c5e8 <_vfiprintf_r+0xb60>
  40c3b2:	2201      	movs	r2, #1
  40c3b4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40c3b8:	4610      	mov	r0, r2
  40c3ba:	921d      	str	r2, [sp, #116]	; 0x74
  40c3bc:	911c      	str	r1, [sp, #112]	; 0x70
  40c3be:	46ca      	mov	sl, r9
  40c3c0:	4601      	mov	r1, r0
  40c3c2:	f10a 0a08 	add.w	sl, sl, #8
  40c3c6:	3001      	adds	r0, #1
  40c3c8:	e507      	b.n	40bdda <_vfiprintf_r+0x352>
  40c3ca:	9b02      	ldr	r3, [sp, #8]
  40c3cc:	2a01      	cmp	r2, #1
  40c3ce:	f000 8098 	beq.w	40c502 <_vfiprintf_r+0xa7a>
  40c3d2:	2a02      	cmp	r2, #2
  40c3d4:	d10d      	bne.n	40c3f2 <_vfiprintf_r+0x96a>
  40c3d6:	9302      	str	r3, [sp, #8]
  40c3d8:	2600      	movs	r6, #0
  40c3da:	2700      	movs	r7, #0
  40c3dc:	e5b0      	b.n	40bf40 <_vfiprintf_r+0x4b8>
  40c3de:	aa0f      	add	r2, sp, #60	; 0x3c
  40c3e0:	9904      	ldr	r1, [sp, #16]
  40c3e2:	9806      	ldr	r0, [sp, #24]
  40c3e4:	f7ff fb10 	bl	40ba08 <__sprint_r.part.0>
  40c3e8:	2800      	cmp	r0, #0
  40c3ea:	d0c9      	beq.n	40c380 <_vfiprintf_r+0x8f8>
  40c3ec:	f8dd b010 	ldr.w	fp, [sp, #16]
  40c3f0:	e797      	b.n	40c322 <_vfiprintf_r+0x89a>
  40c3f2:	9302      	str	r3, [sp, #8]
  40c3f4:	2600      	movs	r6, #0
  40c3f6:	2700      	movs	r7, #0
  40c3f8:	4649      	mov	r1, r9
  40c3fa:	e000      	b.n	40c3fe <_vfiprintf_r+0x976>
  40c3fc:	4659      	mov	r1, fp
  40c3fe:	08f2      	lsrs	r2, r6, #3
  40c400:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40c404:	08f8      	lsrs	r0, r7, #3
  40c406:	f006 0307 	and.w	r3, r6, #7
  40c40a:	4607      	mov	r7, r0
  40c40c:	4616      	mov	r6, r2
  40c40e:	3330      	adds	r3, #48	; 0x30
  40c410:	ea56 0207 	orrs.w	r2, r6, r7
  40c414:	f801 3c01 	strb.w	r3, [r1, #-1]
  40c418:	f101 3bff 	add.w	fp, r1, #4294967295
  40c41c:	d1ee      	bne.n	40c3fc <_vfiprintf_r+0x974>
  40c41e:	9a02      	ldr	r2, [sp, #8]
  40c420:	07d6      	lsls	r6, r2, #31
  40c422:	f57f ad9d 	bpl.w	40bf60 <_vfiprintf_r+0x4d8>
  40c426:	2b30      	cmp	r3, #48	; 0x30
  40c428:	f43f ad9a 	beq.w	40bf60 <_vfiprintf_r+0x4d8>
  40c42c:	3902      	subs	r1, #2
  40c42e:	2330      	movs	r3, #48	; 0x30
  40c430:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40c434:	eba9 0301 	sub.w	r3, r9, r1
  40c438:	9305      	str	r3, [sp, #20]
  40c43a:	468b      	mov	fp, r1
  40c43c:	e476      	b.n	40bd2c <_vfiprintf_r+0x2a4>
  40c43e:	9b03      	ldr	r3, [sp, #12]
  40c440:	9a08      	ldr	r2, [sp, #32]
  40c442:	428a      	cmp	r2, r1
  40c444:	bfac      	ite	ge
  40c446:	189b      	addge	r3, r3, r2
  40c448:	185b      	addlt	r3, r3, r1
  40c44a:	9303      	str	r3, [sp, #12]
  40c44c:	e798      	b.n	40c380 <_vfiprintf_r+0x8f8>
  40c44e:	2202      	movs	r2, #2
  40c450:	e44d      	b.n	40bcee <_vfiprintf_r+0x266>
  40c452:	2f00      	cmp	r7, #0
  40c454:	bf08      	it	eq
  40c456:	2e0a      	cmpeq	r6, #10
  40c458:	d352      	bcc.n	40c500 <_vfiprintf_r+0xa78>
  40c45a:	46cb      	mov	fp, r9
  40c45c:	4630      	mov	r0, r6
  40c45e:	4639      	mov	r1, r7
  40c460:	220a      	movs	r2, #10
  40c462:	2300      	movs	r3, #0
  40c464:	f7fe ff54 	bl	40b310 <__aeabi_uldivmod>
  40c468:	3230      	adds	r2, #48	; 0x30
  40c46a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40c46e:	4630      	mov	r0, r6
  40c470:	4639      	mov	r1, r7
  40c472:	2300      	movs	r3, #0
  40c474:	220a      	movs	r2, #10
  40c476:	f7fe ff4b 	bl	40b310 <__aeabi_uldivmod>
  40c47a:	4606      	mov	r6, r0
  40c47c:	460f      	mov	r7, r1
  40c47e:	ea56 0307 	orrs.w	r3, r6, r7
  40c482:	d1eb      	bne.n	40c45c <_vfiprintf_r+0x9d4>
  40c484:	e56c      	b.n	40bf60 <_vfiprintf_r+0x4d8>
  40c486:	9405      	str	r4, [sp, #20]
  40c488:	46cb      	mov	fp, r9
  40c48a:	e44f      	b.n	40bd2c <_vfiprintf_r+0x2a4>
  40c48c:	aa0f      	add	r2, sp, #60	; 0x3c
  40c48e:	9904      	ldr	r1, [sp, #16]
  40c490:	9806      	ldr	r0, [sp, #24]
  40c492:	f7ff fab9 	bl	40ba08 <__sprint_r.part.0>
  40c496:	2800      	cmp	r0, #0
  40c498:	d1a8      	bne.n	40c3ec <_vfiprintf_r+0x964>
  40c49a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c49c:	46ca      	mov	sl, r9
  40c49e:	e75e      	b.n	40c35e <_vfiprintf_r+0x8d6>
  40c4a0:	aa0f      	add	r2, sp, #60	; 0x3c
  40c4a2:	9904      	ldr	r1, [sp, #16]
  40c4a4:	9806      	ldr	r0, [sp, #24]
  40c4a6:	f7ff faaf 	bl	40ba08 <__sprint_r.part.0>
  40c4aa:	2800      	cmp	r0, #0
  40c4ac:	d19e      	bne.n	40c3ec <_vfiprintf_r+0x964>
  40c4ae:	46ca      	mov	sl, r9
  40c4b0:	f7ff bbc0 	b.w	40bc34 <_vfiprintf_r+0x1ac>
  40c4b4:	0040f520 	.word	0x0040f520
  40c4b8:	0040f510 	.word	0x0040f510
  40c4bc:	3104      	adds	r1, #4
  40c4be:	6816      	ldr	r6, [r2, #0]
  40c4c0:	9107      	str	r1, [sp, #28]
  40c4c2:	2201      	movs	r2, #1
  40c4c4:	2700      	movs	r7, #0
  40c4c6:	e412      	b.n	40bcee <_vfiprintf_r+0x266>
  40c4c8:	9807      	ldr	r0, [sp, #28]
  40c4ca:	4601      	mov	r1, r0
  40c4cc:	3104      	adds	r1, #4
  40c4ce:	6806      	ldr	r6, [r0, #0]
  40c4d0:	9107      	str	r1, [sp, #28]
  40c4d2:	2700      	movs	r7, #0
  40c4d4:	e40b      	b.n	40bcee <_vfiprintf_r+0x266>
  40c4d6:	680e      	ldr	r6, [r1, #0]
  40c4d8:	3104      	adds	r1, #4
  40c4da:	9107      	str	r1, [sp, #28]
  40c4dc:	2700      	movs	r7, #0
  40c4de:	e591      	b.n	40c004 <_vfiprintf_r+0x57c>
  40c4e0:	9907      	ldr	r1, [sp, #28]
  40c4e2:	680e      	ldr	r6, [r1, #0]
  40c4e4:	460a      	mov	r2, r1
  40c4e6:	17f7      	asrs	r7, r6, #31
  40c4e8:	3204      	adds	r2, #4
  40c4ea:	9207      	str	r2, [sp, #28]
  40c4ec:	4630      	mov	r0, r6
  40c4ee:	4639      	mov	r1, r7
  40c4f0:	e50f      	b.n	40bf12 <_vfiprintf_r+0x48a>
  40c4f2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40c4f6:	f000 fe7f 	bl	40d1f8 <__retarget_lock_release_recursive>
  40c4fa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40c4fe:	e71a      	b.n	40c336 <_vfiprintf_r+0x8ae>
  40c500:	9b02      	ldr	r3, [sp, #8]
  40c502:	9302      	str	r3, [sp, #8]
  40c504:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40c508:	3630      	adds	r6, #48	; 0x30
  40c50a:	2301      	movs	r3, #1
  40c50c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40c510:	9305      	str	r3, [sp, #20]
  40c512:	e40b      	b.n	40bd2c <_vfiprintf_r+0x2a4>
  40c514:	aa0f      	add	r2, sp, #60	; 0x3c
  40c516:	9904      	ldr	r1, [sp, #16]
  40c518:	9806      	ldr	r0, [sp, #24]
  40c51a:	f7ff fa75 	bl	40ba08 <__sprint_r.part.0>
  40c51e:	2800      	cmp	r0, #0
  40c520:	f47f af64 	bne.w	40c3ec <_vfiprintf_r+0x964>
  40c524:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c526:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c528:	1c48      	adds	r0, r1, #1
  40c52a:	46ca      	mov	sl, r9
  40c52c:	e651      	b.n	40c1d2 <_vfiprintf_r+0x74a>
  40c52e:	aa0f      	add	r2, sp, #60	; 0x3c
  40c530:	9904      	ldr	r1, [sp, #16]
  40c532:	9806      	ldr	r0, [sp, #24]
  40c534:	f7ff fa68 	bl	40ba08 <__sprint_r.part.0>
  40c538:	2800      	cmp	r0, #0
  40c53a:	f47f af57 	bne.w	40c3ec <_vfiprintf_r+0x964>
  40c53e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c540:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c542:	1c48      	adds	r0, r1, #1
  40c544:	46ca      	mov	sl, r9
  40c546:	e448      	b.n	40bdda <_vfiprintf_r+0x352>
  40c548:	2a00      	cmp	r2, #0
  40c54a:	f040 8091 	bne.w	40c670 <_vfiprintf_r+0xbe8>
  40c54e:	2001      	movs	r0, #1
  40c550:	4611      	mov	r1, r2
  40c552:	46ca      	mov	sl, r9
  40c554:	e641      	b.n	40c1da <_vfiprintf_r+0x752>
  40c556:	aa0f      	add	r2, sp, #60	; 0x3c
  40c558:	9904      	ldr	r1, [sp, #16]
  40c55a:	9806      	ldr	r0, [sp, #24]
  40c55c:	f7ff fa54 	bl	40ba08 <__sprint_r.part.0>
  40c560:	2800      	cmp	r0, #0
  40c562:	f47f af43 	bne.w	40c3ec <_vfiprintf_r+0x964>
  40c566:	9810      	ldr	r0, [sp, #64]	; 0x40
  40c568:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c56a:	3001      	adds	r0, #1
  40c56c:	46ca      	mov	sl, r9
  40c56e:	e667      	b.n	40c240 <_vfiprintf_r+0x7b8>
  40c570:	46d3      	mov	fp, sl
  40c572:	e6d6      	b.n	40c322 <_vfiprintf_r+0x89a>
  40c574:	9e07      	ldr	r6, [sp, #28]
  40c576:	3607      	adds	r6, #7
  40c578:	f026 0207 	bic.w	r2, r6, #7
  40c57c:	f102 0108 	add.w	r1, r2, #8
  40c580:	e9d2 6700 	ldrd	r6, r7, [r2]
  40c584:	9107      	str	r1, [sp, #28]
  40c586:	2201      	movs	r2, #1
  40c588:	f7ff bbb1 	b.w	40bcee <_vfiprintf_r+0x266>
  40c58c:	9e07      	ldr	r6, [sp, #28]
  40c58e:	3607      	adds	r6, #7
  40c590:	f026 0607 	bic.w	r6, r6, #7
  40c594:	e9d6 0100 	ldrd	r0, r1, [r6]
  40c598:	f106 0208 	add.w	r2, r6, #8
  40c59c:	9207      	str	r2, [sp, #28]
  40c59e:	4606      	mov	r6, r0
  40c5a0:	460f      	mov	r7, r1
  40c5a2:	e4b6      	b.n	40bf12 <_vfiprintf_r+0x48a>
  40c5a4:	9e07      	ldr	r6, [sp, #28]
  40c5a6:	3607      	adds	r6, #7
  40c5a8:	f026 0207 	bic.w	r2, r6, #7
  40c5ac:	f102 0108 	add.w	r1, r2, #8
  40c5b0:	e9d2 6700 	ldrd	r6, r7, [r2]
  40c5b4:	9107      	str	r1, [sp, #28]
  40c5b6:	2200      	movs	r2, #0
  40c5b8:	f7ff bb99 	b.w	40bcee <_vfiprintf_r+0x266>
  40c5bc:	9e07      	ldr	r6, [sp, #28]
  40c5be:	3607      	adds	r6, #7
  40c5c0:	f026 0107 	bic.w	r1, r6, #7
  40c5c4:	f101 0008 	add.w	r0, r1, #8
  40c5c8:	9007      	str	r0, [sp, #28]
  40c5ca:	e9d1 6700 	ldrd	r6, r7, [r1]
  40c5ce:	e519      	b.n	40c004 <_vfiprintf_r+0x57c>
  40c5d0:	46cb      	mov	fp, r9
  40c5d2:	f7ff bbab 	b.w	40bd2c <_vfiprintf_r+0x2a4>
  40c5d6:	252d      	movs	r5, #45	; 0x2d
  40c5d8:	4276      	negs	r6, r6
  40c5da:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40c5de:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40c5e2:	2201      	movs	r2, #1
  40c5e4:	f7ff bb88 	b.w	40bcf8 <_vfiprintf_r+0x270>
  40c5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c5ea:	b9b3      	cbnz	r3, 40c61a <_vfiprintf_r+0xb92>
  40c5ec:	4611      	mov	r1, r2
  40c5ee:	2001      	movs	r0, #1
  40c5f0:	46ca      	mov	sl, r9
  40c5f2:	e5f2      	b.n	40c1da <_vfiprintf_r+0x752>
  40c5f4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40c5f8:	f000 fdfe 	bl	40d1f8 <__retarget_lock_release_recursive>
  40c5fc:	f04f 33ff 	mov.w	r3, #4294967295
  40c600:	9303      	str	r3, [sp, #12]
  40c602:	f7ff bb50 	b.w	40bca6 <_vfiprintf_r+0x21e>
  40c606:	aa0f      	add	r2, sp, #60	; 0x3c
  40c608:	9904      	ldr	r1, [sp, #16]
  40c60a:	9806      	ldr	r0, [sp, #24]
  40c60c:	f7ff f9fc 	bl	40ba08 <__sprint_r.part.0>
  40c610:	2800      	cmp	r0, #0
  40c612:	f47f aeeb 	bne.w	40c3ec <_vfiprintf_r+0x964>
  40c616:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c618:	e6a9      	b.n	40c36e <_vfiprintf_r+0x8e6>
  40c61a:	ab0e      	add	r3, sp, #56	; 0x38
  40c61c:	2202      	movs	r2, #2
  40c61e:	931c      	str	r3, [sp, #112]	; 0x70
  40c620:	921d      	str	r2, [sp, #116]	; 0x74
  40c622:	2001      	movs	r0, #1
  40c624:	46ca      	mov	sl, r9
  40c626:	e5d0      	b.n	40c1ca <_vfiprintf_r+0x742>
  40c628:	aa0f      	add	r2, sp, #60	; 0x3c
  40c62a:	9904      	ldr	r1, [sp, #16]
  40c62c:	9806      	ldr	r0, [sp, #24]
  40c62e:	f7ff f9eb 	bl	40ba08 <__sprint_r.part.0>
  40c632:	2800      	cmp	r0, #0
  40c634:	f47f aeda 	bne.w	40c3ec <_vfiprintf_r+0x964>
  40c638:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c63a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c63c:	1c48      	adds	r0, r1, #1
  40c63e:	46ca      	mov	sl, r9
  40c640:	e5a4      	b.n	40c18c <_vfiprintf_r+0x704>
  40c642:	9a07      	ldr	r2, [sp, #28]
  40c644:	9903      	ldr	r1, [sp, #12]
  40c646:	6813      	ldr	r3, [r2, #0]
  40c648:	17cd      	asrs	r5, r1, #31
  40c64a:	4608      	mov	r0, r1
  40c64c:	3204      	adds	r2, #4
  40c64e:	4629      	mov	r1, r5
  40c650:	9207      	str	r2, [sp, #28]
  40c652:	e9c3 0100 	strd	r0, r1, [r3]
  40c656:	f7ff ba54 	b.w	40bb02 <_vfiprintf_r+0x7a>
  40c65a:	4658      	mov	r0, fp
  40c65c:	9607      	str	r6, [sp, #28]
  40c65e:	9302      	str	r3, [sp, #8]
  40c660:	f001 fbee 	bl	40de40 <strlen>
  40c664:	2400      	movs	r4, #0
  40c666:	9005      	str	r0, [sp, #20]
  40c668:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40c66c:	f7ff bb5e 	b.w	40bd2c <_vfiprintf_r+0x2a4>
  40c670:	aa0f      	add	r2, sp, #60	; 0x3c
  40c672:	9904      	ldr	r1, [sp, #16]
  40c674:	9806      	ldr	r0, [sp, #24]
  40c676:	f7ff f9c7 	bl	40ba08 <__sprint_r.part.0>
  40c67a:	2800      	cmp	r0, #0
  40c67c:	f47f aeb6 	bne.w	40c3ec <_vfiprintf_r+0x964>
  40c680:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c682:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c684:	1c48      	adds	r0, r1, #1
  40c686:	46ca      	mov	sl, r9
  40c688:	e5a7      	b.n	40c1da <_vfiprintf_r+0x752>
  40c68a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c68c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c68e:	4e20      	ldr	r6, [pc, #128]	; (40c710 <_vfiprintf_r+0xc88>)
  40c690:	3101      	adds	r1, #1
  40c692:	f7ff bb90 	b.w	40bdb6 <_vfiprintf_r+0x32e>
  40c696:	2c06      	cmp	r4, #6
  40c698:	bf28      	it	cs
  40c69a:	2406      	movcs	r4, #6
  40c69c:	9405      	str	r4, [sp, #20]
  40c69e:	9607      	str	r6, [sp, #28]
  40c6a0:	9401      	str	r4, [sp, #4]
  40c6a2:	f8df b070 	ldr.w	fp, [pc, #112]	; 40c714 <_vfiprintf_r+0xc8c>
  40c6a6:	e4d5      	b.n	40c054 <_vfiprintf_r+0x5cc>
  40c6a8:	9810      	ldr	r0, [sp, #64]	; 0x40
  40c6aa:	4e19      	ldr	r6, [pc, #100]	; (40c710 <_vfiprintf_r+0xc88>)
  40c6ac:	3001      	adds	r0, #1
  40c6ae:	e603      	b.n	40c2b8 <_vfiprintf_r+0x830>
  40c6b0:	9405      	str	r4, [sp, #20]
  40c6b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40c6b6:	9607      	str	r6, [sp, #28]
  40c6b8:	9302      	str	r3, [sp, #8]
  40c6ba:	4604      	mov	r4, r0
  40c6bc:	f7ff bb36 	b.w	40bd2c <_vfiprintf_r+0x2a4>
  40c6c0:	4686      	mov	lr, r0
  40c6c2:	f7ff bbce 	b.w	40be62 <_vfiprintf_r+0x3da>
  40c6c6:	9806      	ldr	r0, [sp, #24]
  40c6c8:	aa0f      	add	r2, sp, #60	; 0x3c
  40c6ca:	4659      	mov	r1, fp
  40c6cc:	f7ff f99c 	bl	40ba08 <__sprint_r.part.0>
  40c6d0:	2800      	cmp	r0, #0
  40c6d2:	f43f ae24 	beq.w	40c31e <_vfiprintf_r+0x896>
  40c6d6:	e624      	b.n	40c322 <_vfiprintf_r+0x89a>
  40c6d8:	9907      	ldr	r1, [sp, #28]
  40c6da:	f898 2001 	ldrb.w	r2, [r8, #1]
  40c6de:	680c      	ldr	r4, [r1, #0]
  40c6e0:	3104      	adds	r1, #4
  40c6e2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40c6e6:	46b8      	mov	r8, r7
  40c6e8:	9107      	str	r1, [sp, #28]
  40c6ea:	f7ff ba3f 	b.w	40bb6c <_vfiprintf_r+0xe4>
  40c6ee:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40c6f2:	e43c      	b.n	40bf6e <_vfiprintf_r+0x4e6>
  40c6f4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40c6f8:	e521      	b.n	40c13e <_vfiprintf_r+0x6b6>
  40c6fa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40c6fe:	f7ff bbf4 	b.w	40beea <_vfiprintf_r+0x462>
  40c702:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40c706:	e491      	b.n	40c02c <_vfiprintf_r+0x5a4>
  40c708:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40c70c:	e469      	b.n	40bfe2 <_vfiprintf_r+0x55a>
  40c70e:	bf00      	nop
  40c710:	0040f510 	.word	0x0040f510
  40c714:	0040f508 	.word	0x0040f508

0040c718 <__sbprintf>:
  40c718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c71c:	460c      	mov	r4, r1
  40c71e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40c722:	8989      	ldrh	r1, [r1, #12]
  40c724:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40c726:	89e5      	ldrh	r5, [r4, #14]
  40c728:	9619      	str	r6, [sp, #100]	; 0x64
  40c72a:	f021 0102 	bic.w	r1, r1, #2
  40c72e:	4606      	mov	r6, r0
  40c730:	69e0      	ldr	r0, [r4, #28]
  40c732:	f8ad 100c 	strh.w	r1, [sp, #12]
  40c736:	4617      	mov	r7, r2
  40c738:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40c73c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40c73e:	f8ad 500e 	strh.w	r5, [sp, #14]
  40c742:	4698      	mov	r8, r3
  40c744:	ad1a      	add	r5, sp, #104	; 0x68
  40c746:	2300      	movs	r3, #0
  40c748:	9007      	str	r0, [sp, #28]
  40c74a:	a816      	add	r0, sp, #88	; 0x58
  40c74c:	9209      	str	r2, [sp, #36]	; 0x24
  40c74e:	9306      	str	r3, [sp, #24]
  40c750:	9500      	str	r5, [sp, #0]
  40c752:	9504      	str	r5, [sp, #16]
  40c754:	9102      	str	r1, [sp, #8]
  40c756:	9105      	str	r1, [sp, #20]
  40c758:	f000 fd48 	bl	40d1ec <__retarget_lock_init_recursive>
  40c75c:	4643      	mov	r3, r8
  40c75e:	463a      	mov	r2, r7
  40c760:	4669      	mov	r1, sp
  40c762:	4630      	mov	r0, r6
  40c764:	f7ff f990 	bl	40ba88 <_vfiprintf_r>
  40c768:	1e05      	subs	r5, r0, #0
  40c76a:	db07      	blt.n	40c77c <__sbprintf+0x64>
  40c76c:	4630      	mov	r0, r6
  40c76e:	4669      	mov	r1, sp
  40c770:	f000 f928 	bl	40c9c4 <_fflush_r>
  40c774:	2800      	cmp	r0, #0
  40c776:	bf18      	it	ne
  40c778:	f04f 35ff 	movne.w	r5, #4294967295
  40c77c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40c780:	065b      	lsls	r3, r3, #25
  40c782:	d503      	bpl.n	40c78c <__sbprintf+0x74>
  40c784:	89a3      	ldrh	r3, [r4, #12]
  40c786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c78a:	81a3      	strh	r3, [r4, #12]
  40c78c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40c78e:	f000 fd2f 	bl	40d1f0 <__retarget_lock_close_recursive>
  40c792:	4628      	mov	r0, r5
  40c794:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40c798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040c79c <__swsetup_r>:
  40c79c:	b538      	push	{r3, r4, r5, lr}
  40c79e:	4b30      	ldr	r3, [pc, #192]	; (40c860 <__swsetup_r+0xc4>)
  40c7a0:	681b      	ldr	r3, [r3, #0]
  40c7a2:	4605      	mov	r5, r0
  40c7a4:	460c      	mov	r4, r1
  40c7a6:	b113      	cbz	r3, 40c7ae <__swsetup_r+0x12>
  40c7a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40c7aa:	2a00      	cmp	r2, #0
  40c7ac:	d038      	beq.n	40c820 <__swsetup_r+0x84>
  40c7ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c7b2:	b293      	uxth	r3, r2
  40c7b4:	0718      	lsls	r0, r3, #28
  40c7b6:	d50c      	bpl.n	40c7d2 <__swsetup_r+0x36>
  40c7b8:	6920      	ldr	r0, [r4, #16]
  40c7ba:	b1a8      	cbz	r0, 40c7e8 <__swsetup_r+0x4c>
  40c7bc:	f013 0201 	ands.w	r2, r3, #1
  40c7c0:	d01e      	beq.n	40c800 <__swsetup_r+0x64>
  40c7c2:	6963      	ldr	r3, [r4, #20]
  40c7c4:	2200      	movs	r2, #0
  40c7c6:	425b      	negs	r3, r3
  40c7c8:	61a3      	str	r3, [r4, #24]
  40c7ca:	60a2      	str	r2, [r4, #8]
  40c7cc:	b1f0      	cbz	r0, 40c80c <__swsetup_r+0x70>
  40c7ce:	2000      	movs	r0, #0
  40c7d0:	bd38      	pop	{r3, r4, r5, pc}
  40c7d2:	06d9      	lsls	r1, r3, #27
  40c7d4:	d53c      	bpl.n	40c850 <__swsetup_r+0xb4>
  40c7d6:	0758      	lsls	r0, r3, #29
  40c7d8:	d426      	bmi.n	40c828 <__swsetup_r+0x8c>
  40c7da:	6920      	ldr	r0, [r4, #16]
  40c7dc:	f042 0308 	orr.w	r3, r2, #8
  40c7e0:	81a3      	strh	r3, [r4, #12]
  40c7e2:	b29b      	uxth	r3, r3
  40c7e4:	2800      	cmp	r0, #0
  40c7e6:	d1e9      	bne.n	40c7bc <__swsetup_r+0x20>
  40c7e8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40c7ec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40c7f0:	d0e4      	beq.n	40c7bc <__swsetup_r+0x20>
  40c7f2:	4628      	mov	r0, r5
  40c7f4:	4621      	mov	r1, r4
  40c7f6:	f000 fd2f 	bl	40d258 <__smakebuf_r>
  40c7fa:	89a3      	ldrh	r3, [r4, #12]
  40c7fc:	6920      	ldr	r0, [r4, #16]
  40c7fe:	e7dd      	b.n	40c7bc <__swsetup_r+0x20>
  40c800:	0799      	lsls	r1, r3, #30
  40c802:	bf58      	it	pl
  40c804:	6962      	ldrpl	r2, [r4, #20]
  40c806:	60a2      	str	r2, [r4, #8]
  40c808:	2800      	cmp	r0, #0
  40c80a:	d1e0      	bne.n	40c7ce <__swsetup_r+0x32>
  40c80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c810:	061a      	lsls	r2, r3, #24
  40c812:	d5dd      	bpl.n	40c7d0 <__swsetup_r+0x34>
  40c814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c818:	81a3      	strh	r3, [r4, #12]
  40c81a:	f04f 30ff 	mov.w	r0, #4294967295
  40c81e:	bd38      	pop	{r3, r4, r5, pc}
  40c820:	4618      	mov	r0, r3
  40c822:	f000 f927 	bl	40ca74 <__sinit>
  40c826:	e7c2      	b.n	40c7ae <__swsetup_r+0x12>
  40c828:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40c82a:	b151      	cbz	r1, 40c842 <__swsetup_r+0xa6>
  40c82c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40c830:	4299      	cmp	r1, r3
  40c832:	d004      	beq.n	40c83e <__swsetup_r+0xa2>
  40c834:	4628      	mov	r0, r5
  40c836:	f000 fa43 	bl	40ccc0 <_free_r>
  40c83a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c83e:	2300      	movs	r3, #0
  40c840:	6323      	str	r3, [r4, #48]	; 0x30
  40c842:	2300      	movs	r3, #0
  40c844:	6920      	ldr	r0, [r4, #16]
  40c846:	6063      	str	r3, [r4, #4]
  40c848:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40c84c:	6020      	str	r0, [r4, #0]
  40c84e:	e7c5      	b.n	40c7dc <__swsetup_r+0x40>
  40c850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40c854:	2309      	movs	r3, #9
  40c856:	602b      	str	r3, [r5, #0]
  40c858:	f04f 30ff 	mov.w	r0, #4294967295
  40c85c:	81a2      	strh	r2, [r4, #12]
  40c85e:	bd38      	pop	{r3, r4, r5, pc}
  40c860:	20400184 	.word	0x20400184

0040c864 <register_fini>:
  40c864:	4b02      	ldr	r3, [pc, #8]	; (40c870 <register_fini+0xc>)
  40c866:	b113      	cbz	r3, 40c86e <register_fini+0xa>
  40c868:	4802      	ldr	r0, [pc, #8]	; (40c874 <register_fini+0x10>)
  40c86a:	f000 b805 	b.w	40c878 <atexit>
  40c86e:	4770      	bx	lr
  40c870:	00000000 	.word	0x00000000
  40c874:	0040cae5 	.word	0x0040cae5

0040c878 <atexit>:
  40c878:	2300      	movs	r3, #0
  40c87a:	4601      	mov	r1, r0
  40c87c:	461a      	mov	r2, r3
  40c87e:	4618      	mov	r0, r3
  40c880:	f001 bbf2 	b.w	40e068 <__register_exitproc>

0040c884 <__sflush_r>:
  40c884:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40c888:	b29a      	uxth	r2, r3
  40c88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c88e:	460d      	mov	r5, r1
  40c890:	0711      	lsls	r1, r2, #28
  40c892:	4680      	mov	r8, r0
  40c894:	d43a      	bmi.n	40c90c <__sflush_r+0x88>
  40c896:	686a      	ldr	r2, [r5, #4]
  40c898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40c89c:	2a00      	cmp	r2, #0
  40c89e:	81ab      	strh	r3, [r5, #12]
  40c8a0:	dd6f      	ble.n	40c982 <__sflush_r+0xfe>
  40c8a2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40c8a4:	2c00      	cmp	r4, #0
  40c8a6:	d049      	beq.n	40c93c <__sflush_r+0xb8>
  40c8a8:	2200      	movs	r2, #0
  40c8aa:	b29b      	uxth	r3, r3
  40c8ac:	f8d8 6000 	ldr.w	r6, [r8]
  40c8b0:	f8c8 2000 	str.w	r2, [r8]
  40c8b4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40c8b8:	d067      	beq.n	40c98a <__sflush_r+0x106>
  40c8ba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40c8bc:	075f      	lsls	r7, r3, #29
  40c8be:	d505      	bpl.n	40c8cc <__sflush_r+0x48>
  40c8c0:	6869      	ldr	r1, [r5, #4]
  40c8c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40c8c4:	1a52      	subs	r2, r2, r1
  40c8c6:	b10b      	cbz	r3, 40c8cc <__sflush_r+0x48>
  40c8c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40c8ca:	1ad2      	subs	r2, r2, r3
  40c8cc:	2300      	movs	r3, #0
  40c8ce:	69e9      	ldr	r1, [r5, #28]
  40c8d0:	4640      	mov	r0, r8
  40c8d2:	47a0      	blx	r4
  40c8d4:	1c44      	adds	r4, r0, #1
  40c8d6:	d03c      	beq.n	40c952 <__sflush_r+0xce>
  40c8d8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40c8dc:	692a      	ldr	r2, [r5, #16]
  40c8de:	602a      	str	r2, [r5, #0]
  40c8e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40c8e4:	2200      	movs	r2, #0
  40c8e6:	81ab      	strh	r3, [r5, #12]
  40c8e8:	04db      	lsls	r3, r3, #19
  40c8ea:	606a      	str	r2, [r5, #4]
  40c8ec:	d447      	bmi.n	40c97e <__sflush_r+0xfa>
  40c8ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40c8f0:	f8c8 6000 	str.w	r6, [r8]
  40c8f4:	b311      	cbz	r1, 40c93c <__sflush_r+0xb8>
  40c8f6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40c8fa:	4299      	cmp	r1, r3
  40c8fc:	d002      	beq.n	40c904 <__sflush_r+0x80>
  40c8fe:	4640      	mov	r0, r8
  40c900:	f000 f9de 	bl	40ccc0 <_free_r>
  40c904:	2000      	movs	r0, #0
  40c906:	6328      	str	r0, [r5, #48]	; 0x30
  40c908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c90c:	692e      	ldr	r6, [r5, #16]
  40c90e:	b1ae      	cbz	r6, 40c93c <__sflush_r+0xb8>
  40c910:	682c      	ldr	r4, [r5, #0]
  40c912:	602e      	str	r6, [r5, #0]
  40c914:	0791      	lsls	r1, r2, #30
  40c916:	bf0c      	ite	eq
  40c918:	696b      	ldreq	r3, [r5, #20]
  40c91a:	2300      	movne	r3, #0
  40c91c:	1ba4      	subs	r4, r4, r6
  40c91e:	60ab      	str	r3, [r5, #8]
  40c920:	e00a      	b.n	40c938 <__sflush_r+0xb4>
  40c922:	4623      	mov	r3, r4
  40c924:	4632      	mov	r2, r6
  40c926:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40c928:	69e9      	ldr	r1, [r5, #28]
  40c92a:	4640      	mov	r0, r8
  40c92c:	47b8      	blx	r7
  40c92e:	2800      	cmp	r0, #0
  40c930:	eba4 0400 	sub.w	r4, r4, r0
  40c934:	4406      	add	r6, r0
  40c936:	dd04      	ble.n	40c942 <__sflush_r+0xbe>
  40c938:	2c00      	cmp	r4, #0
  40c93a:	dcf2      	bgt.n	40c922 <__sflush_r+0x9e>
  40c93c:	2000      	movs	r0, #0
  40c93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c942:	89ab      	ldrh	r3, [r5, #12]
  40c944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c948:	81ab      	strh	r3, [r5, #12]
  40c94a:	f04f 30ff 	mov.w	r0, #4294967295
  40c94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c952:	f8d8 4000 	ldr.w	r4, [r8]
  40c956:	2c1d      	cmp	r4, #29
  40c958:	d8f3      	bhi.n	40c942 <__sflush_r+0xbe>
  40c95a:	4b19      	ldr	r3, [pc, #100]	; (40c9c0 <__sflush_r+0x13c>)
  40c95c:	40e3      	lsrs	r3, r4
  40c95e:	43db      	mvns	r3, r3
  40c960:	f013 0301 	ands.w	r3, r3, #1
  40c964:	d1ed      	bne.n	40c942 <__sflush_r+0xbe>
  40c966:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40c96a:	606b      	str	r3, [r5, #4]
  40c96c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40c970:	6929      	ldr	r1, [r5, #16]
  40c972:	81ab      	strh	r3, [r5, #12]
  40c974:	04da      	lsls	r2, r3, #19
  40c976:	6029      	str	r1, [r5, #0]
  40c978:	d5b9      	bpl.n	40c8ee <__sflush_r+0x6a>
  40c97a:	2c00      	cmp	r4, #0
  40c97c:	d1b7      	bne.n	40c8ee <__sflush_r+0x6a>
  40c97e:	6528      	str	r0, [r5, #80]	; 0x50
  40c980:	e7b5      	b.n	40c8ee <__sflush_r+0x6a>
  40c982:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40c984:	2a00      	cmp	r2, #0
  40c986:	dc8c      	bgt.n	40c8a2 <__sflush_r+0x1e>
  40c988:	e7d8      	b.n	40c93c <__sflush_r+0xb8>
  40c98a:	2301      	movs	r3, #1
  40c98c:	69e9      	ldr	r1, [r5, #28]
  40c98e:	4640      	mov	r0, r8
  40c990:	47a0      	blx	r4
  40c992:	1c43      	adds	r3, r0, #1
  40c994:	4602      	mov	r2, r0
  40c996:	d002      	beq.n	40c99e <__sflush_r+0x11a>
  40c998:	89ab      	ldrh	r3, [r5, #12]
  40c99a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40c99c:	e78e      	b.n	40c8bc <__sflush_r+0x38>
  40c99e:	f8d8 3000 	ldr.w	r3, [r8]
  40c9a2:	2b00      	cmp	r3, #0
  40c9a4:	d0f8      	beq.n	40c998 <__sflush_r+0x114>
  40c9a6:	2b1d      	cmp	r3, #29
  40c9a8:	d001      	beq.n	40c9ae <__sflush_r+0x12a>
  40c9aa:	2b16      	cmp	r3, #22
  40c9ac:	d102      	bne.n	40c9b4 <__sflush_r+0x130>
  40c9ae:	f8c8 6000 	str.w	r6, [r8]
  40c9b2:	e7c3      	b.n	40c93c <__sflush_r+0xb8>
  40c9b4:	89ab      	ldrh	r3, [r5, #12]
  40c9b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c9ba:	81ab      	strh	r3, [r5, #12]
  40c9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c9c0:	20400001 	.word	0x20400001

0040c9c4 <_fflush_r>:
  40c9c4:	b538      	push	{r3, r4, r5, lr}
  40c9c6:	460d      	mov	r5, r1
  40c9c8:	4604      	mov	r4, r0
  40c9ca:	b108      	cbz	r0, 40c9d0 <_fflush_r+0xc>
  40c9cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40c9ce:	b1bb      	cbz	r3, 40ca00 <_fflush_r+0x3c>
  40c9d0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40c9d4:	b188      	cbz	r0, 40c9fa <_fflush_r+0x36>
  40c9d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40c9d8:	07db      	lsls	r3, r3, #31
  40c9da:	d401      	bmi.n	40c9e0 <_fflush_r+0x1c>
  40c9dc:	0581      	lsls	r1, r0, #22
  40c9de:	d517      	bpl.n	40ca10 <_fflush_r+0x4c>
  40c9e0:	4620      	mov	r0, r4
  40c9e2:	4629      	mov	r1, r5
  40c9e4:	f7ff ff4e 	bl	40c884 <__sflush_r>
  40c9e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40c9ea:	07da      	lsls	r2, r3, #31
  40c9ec:	4604      	mov	r4, r0
  40c9ee:	d402      	bmi.n	40c9f6 <_fflush_r+0x32>
  40c9f0:	89ab      	ldrh	r3, [r5, #12]
  40c9f2:	059b      	lsls	r3, r3, #22
  40c9f4:	d507      	bpl.n	40ca06 <_fflush_r+0x42>
  40c9f6:	4620      	mov	r0, r4
  40c9f8:	bd38      	pop	{r3, r4, r5, pc}
  40c9fa:	4604      	mov	r4, r0
  40c9fc:	4620      	mov	r0, r4
  40c9fe:	bd38      	pop	{r3, r4, r5, pc}
  40ca00:	f000 f838 	bl	40ca74 <__sinit>
  40ca04:	e7e4      	b.n	40c9d0 <_fflush_r+0xc>
  40ca06:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40ca08:	f000 fbf6 	bl	40d1f8 <__retarget_lock_release_recursive>
  40ca0c:	4620      	mov	r0, r4
  40ca0e:	bd38      	pop	{r3, r4, r5, pc}
  40ca10:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40ca12:	f000 fbef 	bl	40d1f4 <__retarget_lock_acquire_recursive>
  40ca16:	e7e3      	b.n	40c9e0 <_fflush_r+0x1c>

0040ca18 <_cleanup_r>:
  40ca18:	4901      	ldr	r1, [pc, #4]	; (40ca20 <_cleanup_r+0x8>)
  40ca1a:	f000 bbaf 	b.w	40d17c <_fwalk_reent>
  40ca1e:	bf00      	nop
  40ca20:	0040e151 	.word	0x0040e151

0040ca24 <std.isra.0>:
  40ca24:	b510      	push	{r4, lr}
  40ca26:	2300      	movs	r3, #0
  40ca28:	4604      	mov	r4, r0
  40ca2a:	8181      	strh	r1, [r0, #12]
  40ca2c:	81c2      	strh	r2, [r0, #14]
  40ca2e:	6003      	str	r3, [r0, #0]
  40ca30:	6043      	str	r3, [r0, #4]
  40ca32:	6083      	str	r3, [r0, #8]
  40ca34:	6643      	str	r3, [r0, #100]	; 0x64
  40ca36:	6103      	str	r3, [r0, #16]
  40ca38:	6143      	str	r3, [r0, #20]
  40ca3a:	6183      	str	r3, [r0, #24]
  40ca3c:	4619      	mov	r1, r3
  40ca3e:	2208      	movs	r2, #8
  40ca40:	305c      	adds	r0, #92	; 0x5c
  40ca42:	f7fe fec3 	bl	40b7cc <memset>
  40ca46:	4807      	ldr	r0, [pc, #28]	; (40ca64 <std.isra.0+0x40>)
  40ca48:	4907      	ldr	r1, [pc, #28]	; (40ca68 <std.isra.0+0x44>)
  40ca4a:	4a08      	ldr	r2, [pc, #32]	; (40ca6c <std.isra.0+0x48>)
  40ca4c:	4b08      	ldr	r3, [pc, #32]	; (40ca70 <std.isra.0+0x4c>)
  40ca4e:	6220      	str	r0, [r4, #32]
  40ca50:	61e4      	str	r4, [r4, #28]
  40ca52:	6261      	str	r1, [r4, #36]	; 0x24
  40ca54:	62a2      	str	r2, [r4, #40]	; 0x28
  40ca56:	62e3      	str	r3, [r4, #44]	; 0x2c
  40ca58:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40ca5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40ca60:	f000 bbc4 	b.w	40d1ec <__retarget_lock_init_recursive>
  40ca64:	0040dd81 	.word	0x0040dd81
  40ca68:	0040dda5 	.word	0x0040dda5
  40ca6c:	0040dde1 	.word	0x0040dde1
  40ca70:	0040de01 	.word	0x0040de01

0040ca74 <__sinit>:
  40ca74:	b510      	push	{r4, lr}
  40ca76:	4604      	mov	r4, r0
  40ca78:	4812      	ldr	r0, [pc, #72]	; (40cac4 <__sinit+0x50>)
  40ca7a:	f000 fbbb 	bl	40d1f4 <__retarget_lock_acquire_recursive>
  40ca7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40ca80:	b9d2      	cbnz	r2, 40cab8 <__sinit+0x44>
  40ca82:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40ca86:	4810      	ldr	r0, [pc, #64]	; (40cac8 <__sinit+0x54>)
  40ca88:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40ca8c:	2103      	movs	r1, #3
  40ca8e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40ca92:	63e0      	str	r0, [r4, #60]	; 0x3c
  40ca94:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40ca98:	6860      	ldr	r0, [r4, #4]
  40ca9a:	2104      	movs	r1, #4
  40ca9c:	f7ff ffc2 	bl	40ca24 <std.isra.0>
  40caa0:	2201      	movs	r2, #1
  40caa2:	2109      	movs	r1, #9
  40caa4:	68a0      	ldr	r0, [r4, #8]
  40caa6:	f7ff ffbd 	bl	40ca24 <std.isra.0>
  40caaa:	2202      	movs	r2, #2
  40caac:	2112      	movs	r1, #18
  40caae:	68e0      	ldr	r0, [r4, #12]
  40cab0:	f7ff ffb8 	bl	40ca24 <std.isra.0>
  40cab4:	2301      	movs	r3, #1
  40cab6:	63a3      	str	r3, [r4, #56]	; 0x38
  40cab8:	4802      	ldr	r0, [pc, #8]	; (40cac4 <__sinit+0x50>)
  40caba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40cabe:	f000 bb9b 	b.w	40d1f8 <__retarget_lock_release_recursive>
  40cac2:	bf00      	nop
  40cac4:	20401008 	.word	0x20401008
  40cac8:	0040ca19 	.word	0x0040ca19

0040cacc <__sfp_lock_acquire>:
  40cacc:	4801      	ldr	r0, [pc, #4]	; (40cad4 <__sfp_lock_acquire+0x8>)
  40cace:	f000 bb91 	b.w	40d1f4 <__retarget_lock_acquire_recursive>
  40cad2:	bf00      	nop
  40cad4:	2040101c 	.word	0x2040101c

0040cad8 <__sfp_lock_release>:
  40cad8:	4801      	ldr	r0, [pc, #4]	; (40cae0 <__sfp_lock_release+0x8>)
  40cada:	f000 bb8d 	b.w	40d1f8 <__retarget_lock_release_recursive>
  40cade:	bf00      	nop
  40cae0:	2040101c 	.word	0x2040101c

0040cae4 <__libc_fini_array>:
  40cae4:	b538      	push	{r3, r4, r5, lr}
  40cae6:	4c0a      	ldr	r4, [pc, #40]	; (40cb10 <__libc_fini_array+0x2c>)
  40cae8:	4d0a      	ldr	r5, [pc, #40]	; (40cb14 <__libc_fini_array+0x30>)
  40caea:	1b64      	subs	r4, r4, r5
  40caec:	10a4      	asrs	r4, r4, #2
  40caee:	d00a      	beq.n	40cb06 <__libc_fini_array+0x22>
  40caf0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40caf4:	3b01      	subs	r3, #1
  40caf6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40cafa:	3c01      	subs	r4, #1
  40cafc:	f855 3904 	ldr.w	r3, [r5], #-4
  40cb00:	4798      	blx	r3
  40cb02:	2c00      	cmp	r4, #0
  40cb04:	d1f9      	bne.n	40cafa <__libc_fini_array+0x16>
  40cb06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40cb0a:	f002 bda3 	b.w	40f654 <_fini>
  40cb0e:	bf00      	nop
  40cb10:	0040f664 	.word	0x0040f664
  40cb14:	0040f660 	.word	0x0040f660

0040cb18 <__fputwc>:
  40cb18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40cb1c:	b082      	sub	sp, #8
  40cb1e:	4680      	mov	r8, r0
  40cb20:	4689      	mov	r9, r1
  40cb22:	4614      	mov	r4, r2
  40cb24:	f000 fb54 	bl	40d1d0 <__locale_mb_cur_max>
  40cb28:	2801      	cmp	r0, #1
  40cb2a:	d036      	beq.n	40cb9a <__fputwc+0x82>
  40cb2c:	464a      	mov	r2, r9
  40cb2e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40cb32:	a901      	add	r1, sp, #4
  40cb34:	4640      	mov	r0, r8
  40cb36:	f001 fa49 	bl	40dfcc <_wcrtomb_r>
  40cb3a:	1c42      	adds	r2, r0, #1
  40cb3c:	4606      	mov	r6, r0
  40cb3e:	d025      	beq.n	40cb8c <__fputwc+0x74>
  40cb40:	b3a8      	cbz	r0, 40cbae <__fputwc+0x96>
  40cb42:	f89d e004 	ldrb.w	lr, [sp, #4]
  40cb46:	2500      	movs	r5, #0
  40cb48:	f10d 0a04 	add.w	sl, sp, #4
  40cb4c:	e009      	b.n	40cb62 <__fputwc+0x4a>
  40cb4e:	6823      	ldr	r3, [r4, #0]
  40cb50:	1c5a      	adds	r2, r3, #1
  40cb52:	6022      	str	r2, [r4, #0]
  40cb54:	f883 e000 	strb.w	lr, [r3]
  40cb58:	3501      	adds	r5, #1
  40cb5a:	42b5      	cmp	r5, r6
  40cb5c:	d227      	bcs.n	40cbae <__fputwc+0x96>
  40cb5e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40cb62:	68a3      	ldr	r3, [r4, #8]
  40cb64:	3b01      	subs	r3, #1
  40cb66:	2b00      	cmp	r3, #0
  40cb68:	60a3      	str	r3, [r4, #8]
  40cb6a:	daf0      	bge.n	40cb4e <__fputwc+0x36>
  40cb6c:	69a7      	ldr	r7, [r4, #24]
  40cb6e:	42bb      	cmp	r3, r7
  40cb70:	4671      	mov	r1, lr
  40cb72:	4622      	mov	r2, r4
  40cb74:	4640      	mov	r0, r8
  40cb76:	db02      	blt.n	40cb7e <__fputwc+0x66>
  40cb78:	f1be 0f0a 	cmp.w	lr, #10
  40cb7c:	d1e7      	bne.n	40cb4e <__fputwc+0x36>
  40cb7e:	f001 f9cd 	bl	40df1c <__swbuf_r>
  40cb82:	1c43      	adds	r3, r0, #1
  40cb84:	d1e8      	bne.n	40cb58 <__fputwc+0x40>
  40cb86:	b002      	add	sp, #8
  40cb88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cb8c:	89a3      	ldrh	r3, [r4, #12]
  40cb8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40cb92:	81a3      	strh	r3, [r4, #12]
  40cb94:	b002      	add	sp, #8
  40cb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cb9a:	f109 33ff 	add.w	r3, r9, #4294967295
  40cb9e:	2bfe      	cmp	r3, #254	; 0xfe
  40cba0:	d8c4      	bhi.n	40cb2c <__fputwc+0x14>
  40cba2:	fa5f fe89 	uxtb.w	lr, r9
  40cba6:	4606      	mov	r6, r0
  40cba8:	f88d e004 	strb.w	lr, [sp, #4]
  40cbac:	e7cb      	b.n	40cb46 <__fputwc+0x2e>
  40cbae:	4648      	mov	r0, r9
  40cbb0:	b002      	add	sp, #8
  40cbb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cbb6:	bf00      	nop

0040cbb8 <_fputwc_r>:
  40cbb8:	b530      	push	{r4, r5, lr}
  40cbba:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40cbbc:	f013 0f01 	tst.w	r3, #1
  40cbc0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40cbc4:	4614      	mov	r4, r2
  40cbc6:	b083      	sub	sp, #12
  40cbc8:	4605      	mov	r5, r0
  40cbca:	b29a      	uxth	r2, r3
  40cbcc:	d101      	bne.n	40cbd2 <_fputwc_r+0x1a>
  40cbce:	0590      	lsls	r0, r2, #22
  40cbd0:	d51c      	bpl.n	40cc0c <_fputwc_r+0x54>
  40cbd2:	0490      	lsls	r0, r2, #18
  40cbd4:	d406      	bmi.n	40cbe4 <_fputwc_r+0x2c>
  40cbd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40cbd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40cbdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40cbe0:	81a3      	strh	r3, [r4, #12]
  40cbe2:	6662      	str	r2, [r4, #100]	; 0x64
  40cbe4:	4628      	mov	r0, r5
  40cbe6:	4622      	mov	r2, r4
  40cbe8:	f7ff ff96 	bl	40cb18 <__fputwc>
  40cbec:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40cbee:	07da      	lsls	r2, r3, #31
  40cbf0:	4605      	mov	r5, r0
  40cbf2:	d402      	bmi.n	40cbfa <_fputwc_r+0x42>
  40cbf4:	89a3      	ldrh	r3, [r4, #12]
  40cbf6:	059b      	lsls	r3, r3, #22
  40cbf8:	d502      	bpl.n	40cc00 <_fputwc_r+0x48>
  40cbfa:	4628      	mov	r0, r5
  40cbfc:	b003      	add	sp, #12
  40cbfe:	bd30      	pop	{r4, r5, pc}
  40cc00:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40cc02:	f000 faf9 	bl	40d1f8 <__retarget_lock_release_recursive>
  40cc06:	4628      	mov	r0, r5
  40cc08:	b003      	add	sp, #12
  40cc0a:	bd30      	pop	{r4, r5, pc}
  40cc0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40cc0e:	9101      	str	r1, [sp, #4]
  40cc10:	f000 faf0 	bl	40d1f4 <__retarget_lock_acquire_recursive>
  40cc14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40cc18:	9901      	ldr	r1, [sp, #4]
  40cc1a:	b29a      	uxth	r2, r3
  40cc1c:	e7d9      	b.n	40cbd2 <_fputwc_r+0x1a>
  40cc1e:	bf00      	nop

0040cc20 <_malloc_trim_r>:
  40cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40cc22:	4f24      	ldr	r7, [pc, #144]	; (40ccb4 <_malloc_trim_r+0x94>)
  40cc24:	460c      	mov	r4, r1
  40cc26:	4606      	mov	r6, r0
  40cc28:	f000 fee6 	bl	40d9f8 <__malloc_lock>
  40cc2c:	68bb      	ldr	r3, [r7, #8]
  40cc2e:	685d      	ldr	r5, [r3, #4]
  40cc30:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40cc34:	310f      	adds	r1, #15
  40cc36:	f025 0503 	bic.w	r5, r5, #3
  40cc3a:	4429      	add	r1, r5
  40cc3c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40cc40:	f021 010f 	bic.w	r1, r1, #15
  40cc44:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40cc48:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40cc4c:	db07      	blt.n	40cc5e <_malloc_trim_r+0x3e>
  40cc4e:	2100      	movs	r1, #0
  40cc50:	4630      	mov	r0, r6
  40cc52:	f001 f883 	bl	40dd5c <_sbrk_r>
  40cc56:	68bb      	ldr	r3, [r7, #8]
  40cc58:	442b      	add	r3, r5
  40cc5a:	4298      	cmp	r0, r3
  40cc5c:	d004      	beq.n	40cc68 <_malloc_trim_r+0x48>
  40cc5e:	4630      	mov	r0, r6
  40cc60:	f000 fed0 	bl	40da04 <__malloc_unlock>
  40cc64:	2000      	movs	r0, #0
  40cc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40cc68:	4261      	negs	r1, r4
  40cc6a:	4630      	mov	r0, r6
  40cc6c:	f001 f876 	bl	40dd5c <_sbrk_r>
  40cc70:	3001      	adds	r0, #1
  40cc72:	d00d      	beq.n	40cc90 <_malloc_trim_r+0x70>
  40cc74:	4b10      	ldr	r3, [pc, #64]	; (40ccb8 <_malloc_trim_r+0x98>)
  40cc76:	68ba      	ldr	r2, [r7, #8]
  40cc78:	6819      	ldr	r1, [r3, #0]
  40cc7a:	1b2d      	subs	r5, r5, r4
  40cc7c:	f045 0501 	orr.w	r5, r5, #1
  40cc80:	4630      	mov	r0, r6
  40cc82:	1b09      	subs	r1, r1, r4
  40cc84:	6055      	str	r5, [r2, #4]
  40cc86:	6019      	str	r1, [r3, #0]
  40cc88:	f000 febc 	bl	40da04 <__malloc_unlock>
  40cc8c:	2001      	movs	r0, #1
  40cc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40cc90:	2100      	movs	r1, #0
  40cc92:	4630      	mov	r0, r6
  40cc94:	f001 f862 	bl	40dd5c <_sbrk_r>
  40cc98:	68ba      	ldr	r2, [r7, #8]
  40cc9a:	1a83      	subs	r3, r0, r2
  40cc9c:	2b0f      	cmp	r3, #15
  40cc9e:	ddde      	ble.n	40cc5e <_malloc_trim_r+0x3e>
  40cca0:	4c06      	ldr	r4, [pc, #24]	; (40ccbc <_malloc_trim_r+0x9c>)
  40cca2:	4905      	ldr	r1, [pc, #20]	; (40ccb8 <_malloc_trim_r+0x98>)
  40cca4:	6824      	ldr	r4, [r4, #0]
  40cca6:	f043 0301 	orr.w	r3, r3, #1
  40ccaa:	1b00      	subs	r0, r0, r4
  40ccac:	6053      	str	r3, [r2, #4]
  40ccae:	6008      	str	r0, [r1, #0]
  40ccb0:	e7d5      	b.n	40cc5e <_malloc_trim_r+0x3e>
  40ccb2:	bf00      	nop
  40ccb4:	20400720 	.word	0x20400720
  40ccb8:	20400ec8 	.word	0x20400ec8
  40ccbc:	20400b28 	.word	0x20400b28

0040ccc0 <_free_r>:
  40ccc0:	2900      	cmp	r1, #0
  40ccc2:	d044      	beq.n	40cd4e <_free_r+0x8e>
  40ccc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ccc8:	460d      	mov	r5, r1
  40ccca:	4680      	mov	r8, r0
  40cccc:	f000 fe94 	bl	40d9f8 <__malloc_lock>
  40ccd0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40ccd4:	4969      	ldr	r1, [pc, #420]	; (40ce7c <_free_r+0x1bc>)
  40ccd6:	f027 0301 	bic.w	r3, r7, #1
  40ccda:	f1a5 0408 	sub.w	r4, r5, #8
  40ccde:	18e2      	adds	r2, r4, r3
  40cce0:	688e      	ldr	r6, [r1, #8]
  40cce2:	6850      	ldr	r0, [r2, #4]
  40cce4:	42b2      	cmp	r2, r6
  40cce6:	f020 0003 	bic.w	r0, r0, #3
  40ccea:	d05e      	beq.n	40cdaa <_free_r+0xea>
  40ccec:	07fe      	lsls	r6, r7, #31
  40ccee:	6050      	str	r0, [r2, #4]
  40ccf0:	d40b      	bmi.n	40cd0a <_free_r+0x4a>
  40ccf2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40ccf6:	1be4      	subs	r4, r4, r7
  40ccf8:	f101 0e08 	add.w	lr, r1, #8
  40ccfc:	68a5      	ldr	r5, [r4, #8]
  40ccfe:	4575      	cmp	r5, lr
  40cd00:	443b      	add	r3, r7
  40cd02:	d06d      	beq.n	40cde0 <_free_r+0x120>
  40cd04:	68e7      	ldr	r7, [r4, #12]
  40cd06:	60ef      	str	r7, [r5, #12]
  40cd08:	60bd      	str	r5, [r7, #8]
  40cd0a:	1815      	adds	r5, r2, r0
  40cd0c:	686d      	ldr	r5, [r5, #4]
  40cd0e:	07ed      	lsls	r5, r5, #31
  40cd10:	d53e      	bpl.n	40cd90 <_free_r+0xd0>
  40cd12:	f043 0201 	orr.w	r2, r3, #1
  40cd16:	6062      	str	r2, [r4, #4]
  40cd18:	50e3      	str	r3, [r4, r3]
  40cd1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40cd1e:	d217      	bcs.n	40cd50 <_free_r+0x90>
  40cd20:	08db      	lsrs	r3, r3, #3
  40cd22:	1c58      	adds	r0, r3, #1
  40cd24:	109a      	asrs	r2, r3, #2
  40cd26:	684d      	ldr	r5, [r1, #4]
  40cd28:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40cd2c:	60a7      	str	r7, [r4, #8]
  40cd2e:	2301      	movs	r3, #1
  40cd30:	4093      	lsls	r3, r2
  40cd32:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40cd36:	432b      	orrs	r3, r5
  40cd38:	3a08      	subs	r2, #8
  40cd3a:	60e2      	str	r2, [r4, #12]
  40cd3c:	604b      	str	r3, [r1, #4]
  40cd3e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40cd42:	60fc      	str	r4, [r7, #12]
  40cd44:	4640      	mov	r0, r8
  40cd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40cd4a:	f000 be5b 	b.w	40da04 <__malloc_unlock>
  40cd4e:	4770      	bx	lr
  40cd50:	0a5a      	lsrs	r2, r3, #9
  40cd52:	2a04      	cmp	r2, #4
  40cd54:	d852      	bhi.n	40cdfc <_free_r+0x13c>
  40cd56:	099a      	lsrs	r2, r3, #6
  40cd58:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40cd5c:	00ff      	lsls	r7, r7, #3
  40cd5e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40cd62:	19c8      	adds	r0, r1, r7
  40cd64:	59ca      	ldr	r2, [r1, r7]
  40cd66:	3808      	subs	r0, #8
  40cd68:	4290      	cmp	r0, r2
  40cd6a:	d04f      	beq.n	40ce0c <_free_r+0x14c>
  40cd6c:	6851      	ldr	r1, [r2, #4]
  40cd6e:	f021 0103 	bic.w	r1, r1, #3
  40cd72:	428b      	cmp	r3, r1
  40cd74:	d232      	bcs.n	40cddc <_free_r+0x11c>
  40cd76:	6892      	ldr	r2, [r2, #8]
  40cd78:	4290      	cmp	r0, r2
  40cd7a:	d1f7      	bne.n	40cd6c <_free_r+0xac>
  40cd7c:	68c3      	ldr	r3, [r0, #12]
  40cd7e:	60a0      	str	r0, [r4, #8]
  40cd80:	60e3      	str	r3, [r4, #12]
  40cd82:	609c      	str	r4, [r3, #8]
  40cd84:	60c4      	str	r4, [r0, #12]
  40cd86:	4640      	mov	r0, r8
  40cd88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40cd8c:	f000 be3a 	b.w	40da04 <__malloc_unlock>
  40cd90:	6895      	ldr	r5, [r2, #8]
  40cd92:	4f3b      	ldr	r7, [pc, #236]	; (40ce80 <_free_r+0x1c0>)
  40cd94:	42bd      	cmp	r5, r7
  40cd96:	4403      	add	r3, r0
  40cd98:	d040      	beq.n	40ce1c <_free_r+0x15c>
  40cd9a:	68d0      	ldr	r0, [r2, #12]
  40cd9c:	60e8      	str	r0, [r5, #12]
  40cd9e:	f043 0201 	orr.w	r2, r3, #1
  40cda2:	6085      	str	r5, [r0, #8]
  40cda4:	6062      	str	r2, [r4, #4]
  40cda6:	50e3      	str	r3, [r4, r3]
  40cda8:	e7b7      	b.n	40cd1a <_free_r+0x5a>
  40cdaa:	07ff      	lsls	r7, r7, #31
  40cdac:	4403      	add	r3, r0
  40cdae:	d407      	bmi.n	40cdc0 <_free_r+0x100>
  40cdb0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40cdb4:	1aa4      	subs	r4, r4, r2
  40cdb6:	4413      	add	r3, r2
  40cdb8:	68a0      	ldr	r0, [r4, #8]
  40cdba:	68e2      	ldr	r2, [r4, #12]
  40cdbc:	60c2      	str	r2, [r0, #12]
  40cdbe:	6090      	str	r0, [r2, #8]
  40cdc0:	4a30      	ldr	r2, [pc, #192]	; (40ce84 <_free_r+0x1c4>)
  40cdc2:	6812      	ldr	r2, [r2, #0]
  40cdc4:	f043 0001 	orr.w	r0, r3, #1
  40cdc8:	4293      	cmp	r3, r2
  40cdca:	6060      	str	r0, [r4, #4]
  40cdcc:	608c      	str	r4, [r1, #8]
  40cdce:	d3b9      	bcc.n	40cd44 <_free_r+0x84>
  40cdd0:	4b2d      	ldr	r3, [pc, #180]	; (40ce88 <_free_r+0x1c8>)
  40cdd2:	4640      	mov	r0, r8
  40cdd4:	6819      	ldr	r1, [r3, #0]
  40cdd6:	f7ff ff23 	bl	40cc20 <_malloc_trim_r>
  40cdda:	e7b3      	b.n	40cd44 <_free_r+0x84>
  40cddc:	4610      	mov	r0, r2
  40cdde:	e7cd      	b.n	40cd7c <_free_r+0xbc>
  40cde0:	1811      	adds	r1, r2, r0
  40cde2:	6849      	ldr	r1, [r1, #4]
  40cde4:	07c9      	lsls	r1, r1, #31
  40cde6:	d444      	bmi.n	40ce72 <_free_r+0x1b2>
  40cde8:	6891      	ldr	r1, [r2, #8]
  40cdea:	68d2      	ldr	r2, [r2, #12]
  40cdec:	60ca      	str	r2, [r1, #12]
  40cdee:	4403      	add	r3, r0
  40cdf0:	f043 0001 	orr.w	r0, r3, #1
  40cdf4:	6091      	str	r1, [r2, #8]
  40cdf6:	6060      	str	r0, [r4, #4]
  40cdf8:	50e3      	str	r3, [r4, r3]
  40cdfa:	e7a3      	b.n	40cd44 <_free_r+0x84>
  40cdfc:	2a14      	cmp	r2, #20
  40cdfe:	d816      	bhi.n	40ce2e <_free_r+0x16e>
  40ce00:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40ce04:	00ff      	lsls	r7, r7, #3
  40ce06:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40ce0a:	e7aa      	b.n	40cd62 <_free_r+0xa2>
  40ce0c:	10aa      	asrs	r2, r5, #2
  40ce0e:	2301      	movs	r3, #1
  40ce10:	684d      	ldr	r5, [r1, #4]
  40ce12:	4093      	lsls	r3, r2
  40ce14:	432b      	orrs	r3, r5
  40ce16:	604b      	str	r3, [r1, #4]
  40ce18:	4603      	mov	r3, r0
  40ce1a:	e7b0      	b.n	40cd7e <_free_r+0xbe>
  40ce1c:	f043 0201 	orr.w	r2, r3, #1
  40ce20:	614c      	str	r4, [r1, #20]
  40ce22:	610c      	str	r4, [r1, #16]
  40ce24:	60e5      	str	r5, [r4, #12]
  40ce26:	60a5      	str	r5, [r4, #8]
  40ce28:	6062      	str	r2, [r4, #4]
  40ce2a:	50e3      	str	r3, [r4, r3]
  40ce2c:	e78a      	b.n	40cd44 <_free_r+0x84>
  40ce2e:	2a54      	cmp	r2, #84	; 0x54
  40ce30:	d806      	bhi.n	40ce40 <_free_r+0x180>
  40ce32:	0b1a      	lsrs	r2, r3, #12
  40ce34:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40ce38:	00ff      	lsls	r7, r7, #3
  40ce3a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40ce3e:	e790      	b.n	40cd62 <_free_r+0xa2>
  40ce40:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40ce44:	d806      	bhi.n	40ce54 <_free_r+0x194>
  40ce46:	0bda      	lsrs	r2, r3, #15
  40ce48:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40ce4c:	00ff      	lsls	r7, r7, #3
  40ce4e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40ce52:	e786      	b.n	40cd62 <_free_r+0xa2>
  40ce54:	f240 5054 	movw	r0, #1364	; 0x554
  40ce58:	4282      	cmp	r2, r0
  40ce5a:	d806      	bhi.n	40ce6a <_free_r+0x1aa>
  40ce5c:	0c9a      	lsrs	r2, r3, #18
  40ce5e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40ce62:	00ff      	lsls	r7, r7, #3
  40ce64:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40ce68:	e77b      	b.n	40cd62 <_free_r+0xa2>
  40ce6a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40ce6e:	257e      	movs	r5, #126	; 0x7e
  40ce70:	e777      	b.n	40cd62 <_free_r+0xa2>
  40ce72:	f043 0101 	orr.w	r1, r3, #1
  40ce76:	6061      	str	r1, [r4, #4]
  40ce78:	6013      	str	r3, [r2, #0]
  40ce7a:	e763      	b.n	40cd44 <_free_r+0x84>
  40ce7c:	20400720 	.word	0x20400720
  40ce80:	20400728 	.word	0x20400728
  40ce84:	20400b2c 	.word	0x20400b2c
  40ce88:	20400ef8 	.word	0x20400ef8

0040ce8c <__sfvwrite_r>:
  40ce8c:	6893      	ldr	r3, [r2, #8]
  40ce8e:	2b00      	cmp	r3, #0
  40ce90:	d073      	beq.n	40cf7a <__sfvwrite_r+0xee>
  40ce92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ce96:	898b      	ldrh	r3, [r1, #12]
  40ce98:	b083      	sub	sp, #12
  40ce9a:	460c      	mov	r4, r1
  40ce9c:	0719      	lsls	r1, r3, #28
  40ce9e:	9000      	str	r0, [sp, #0]
  40cea0:	4616      	mov	r6, r2
  40cea2:	d526      	bpl.n	40cef2 <__sfvwrite_r+0x66>
  40cea4:	6922      	ldr	r2, [r4, #16]
  40cea6:	b322      	cbz	r2, 40cef2 <__sfvwrite_r+0x66>
  40cea8:	f013 0002 	ands.w	r0, r3, #2
  40ceac:	6835      	ldr	r5, [r6, #0]
  40ceae:	d02c      	beq.n	40cf0a <__sfvwrite_r+0x7e>
  40ceb0:	f04f 0900 	mov.w	r9, #0
  40ceb4:	4fb0      	ldr	r7, [pc, #704]	; (40d178 <__sfvwrite_r+0x2ec>)
  40ceb6:	46c8      	mov	r8, r9
  40ceb8:	46b2      	mov	sl, r6
  40ceba:	45b8      	cmp	r8, r7
  40cebc:	4643      	mov	r3, r8
  40cebe:	464a      	mov	r2, r9
  40cec0:	bf28      	it	cs
  40cec2:	463b      	movcs	r3, r7
  40cec4:	9800      	ldr	r0, [sp, #0]
  40cec6:	f1b8 0f00 	cmp.w	r8, #0
  40ceca:	d050      	beq.n	40cf6e <__sfvwrite_r+0xe2>
  40cecc:	69e1      	ldr	r1, [r4, #28]
  40cece:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40ced0:	47b0      	blx	r6
  40ced2:	2800      	cmp	r0, #0
  40ced4:	dd58      	ble.n	40cf88 <__sfvwrite_r+0xfc>
  40ced6:	f8da 3008 	ldr.w	r3, [sl, #8]
  40ceda:	1a1b      	subs	r3, r3, r0
  40cedc:	4481      	add	r9, r0
  40cede:	eba8 0800 	sub.w	r8, r8, r0
  40cee2:	f8ca 3008 	str.w	r3, [sl, #8]
  40cee6:	2b00      	cmp	r3, #0
  40cee8:	d1e7      	bne.n	40ceba <__sfvwrite_r+0x2e>
  40ceea:	2000      	movs	r0, #0
  40ceec:	b003      	add	sp, #12
  40ceee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cef2:	4621      	mov	r1, r4
  40cef4:	9800      	ldr	r0, [sp, #0]
  40cef6:	f7ff fc51 	bl	40c79c <__swsetup_r>
  40cefa:	2800      	cmp	r0, #0
  40cefc:	f040 8133 	bne.w	40d166 <__sfvwrite_r+0x2da>
  40cf00:	89a3      	ldrh	r3, [r4, #12]
  40cf02:	6835      	ldr	r5, [r6, #0]
  40cf04:	f013 0002 	ands.w	r0, r3, #2
  40cf08:	d1d2      	bne.n	40ceb0 <__sfvwrite_r+0x24>
  40cf0a:	f013 0901 	ands.w	r9, r3, #1
  40cf0e:	d145      	bne.n	40cf9c <__sfvwrite_r+0x110>
  40cf10:	464f      	mov	r7, r9
  40cf12:	9601      	str	r6, [sp, #4]
  40cf14:	b337      	cbz	r7, 40cf64 <__sfvwrite_r+0xd8>
  40cf16:	059a      	lsls	r2, r3, #22
  40cf18:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40cf1c:	f140 8083 	bpl.w	40d026 <__sfvwrite_r+0x19a>
  40cf20:	4547      	cmp	r7, r8
  40cf22:	46c3      	mov	fp, r8
  40cf24:	f0c0 80ab 	bcc.w	40d07e <__sfvwrite_r+0x1f2>
  40cf28:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40cf2c:	f040 80ac 	bne.w	40d088 <__sfvwrite_r+0x1fc>
  40cf30:	6820      	ldr	r0, [r4, #0]
  40cf32:	46ba      	mov	sl, r7
  40cf34:	465a      	mov	r2, fp
  40cf36:	4649      	mov	r1, r9
  40cf38:	f000 fcfa 	bl	40d930 <memmove>
  40cf3c:	68a2      	ldr	r2, [r4, #8]
  40cf3e:	6823      	ldr	r3, [r4, #0]
  40cf40:	eba2 0208 	sub.w	r2, r2, r8
  40cf44:	445b      	add	r3, fp
  40cf46:	60a2      	str	r2, [r4, #8]
  40cf48:	6023      	str	r3, [r4, #0]
  40cf4a:	9a01      	ldr	r2, [sp, #4]
  40cf4c:	6893      	ldr	r3, [r2, #8]
  40cf4e:	eba3 030a 	sub.w	r3, r3, sl
  40cf52:	44d1      	add	r9, sl
  40cf54:	eba7 070a 	sub.w	r7, r7, sl
  40cf58:	6093      	str	r3, [r2, #8]
  40cf5a:	2b00      	cmp	r3, #0
  40cf5c:	d0c5      	beq.n	40ceea <__sfvwrite_r+0x5e>
  40cf5e:	89a3      	ldrh	r3, [r4, #12]
  40cf60:	2f00      	cmp	r7, #0
  40cf62:	d1d8      	bne.n	40cf16 <__sfvwrite_r+0x8a>
  40cf64:	f8d5 9000 	ldr.w	r9, [r5]
  40cf68:	686f      	ldr	r7, [r5, #4]
  40cf6a:	3508      	adds	r5, #8
  40cf6c:	e7d2      	b.n	40cf14 <__sfvwrite_r+0x88>
  40cf6e:	f8d5 9000 	ldr.w	r9, [r5]
  40cf72:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40cf76:	3508      	adds	r5, #8
  40cf78:	e79f      	b.n	40ceba <__sfvwrite_r+0x2e>
  40cf7a:	2000      	movs	r0, #0
  40cf7c:	4770      	bx	lr
  40cf7e:	4621      	mov	r1, r4
  40cf80:	9800      	ldr	r0, [sp, #0]
  40cf82:	f7ff fd1f 	bl	40c9c4 <_fflush_r>
  40cf86:	b370      	cbz	r0, 40cfe6 <__sfvwrite_r+0x15a>
  40cf88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40cf8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40cf90:	f04f 30ff 	mov.w	r0, #4294967295
  40cf94:	81a3      	strh	r3, [r4, #12]
  40cf96:	b003      	add	sp, #12
  40cf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cf9c:	4681      	mov	r9, r0
  40cf9e:	4633      	mov	r3, r6
  40cfa0:	464e      	mov	r6, r9
  40cfa2:	46a8      	mov	r8, r5
  40cfa4:	469a      	mov	sl, r3
  40cfa6:	464d      	mov	r5, r9
  40cfa8:	b34e      	cbz	r6, 40cffe <__sfvwrite_r+0x172>
  40cfaa:	b380      	cbz	r0, 40d00e <__sfvwrite_r+0x182>
  40cfac:	6820      	ldr	r0, [r4, #0]
  40cfae:	6923      	ldr	r3, [r4, #16]
  40cfb0:	6962      	ldr	r2, [r4, #20]
  40cfb2:	45b1      	cmp	r9, r6
  40cfb4:	46cb      	mov	fp, r9
  40cfb6:	bf28      	it	cs
  40cfb8:	46b3      	movcs	fp, r6
  40cfba:	4298      	cmp	r0, r3
  40cfbc:	465f      	mov	r7, fp
  40cfbe:	d904      	bls.n	40cfca <__sfvwrite_r+0x13e>
  40cfc0:	68a3      	ldr	r3, [r4, #8]
  40cfc2:	4413      	add	r3, r2
  40cfc4:	459b      	cmp	fp, r3
  40cfc6:	f300 80a6 	bgt.w	40d116 <__sfvwrite_r+0x28a>
  40cfca:	4593      	cmp	fp, r2
  40cfcc:	db4b      	blt.n	40d066 <__sfvwrite_r+0x1da>
  40cfce:	4613      	mov	r3, r2
  40cfd0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40cfd2:	69e1      	ldr	r1, [r4, #28]
  40cfd4:	9800      	ldr	r0, [sp, #0]
  40cfd6:	462a      	mov	r2, r5
  40cfd8:	47b8      	blx	r7
  40cfda:	1e07      	subs	r7, r0, #0
  40cfdc:	ddd4      	ble.n	40cf88 <__sfvwrite_r+0xfc>
  40cfde:	ebb9 0907 	subs.w	r9, r9, r7
  40cfe2:	d0cc      	beq.n	40cf7e <__sfvwrite_r+0xf2>
  40cfe4:	2001      	movs	r0, #1
  40cfe6:	f8da 3008 	ldr.w	r3, [sl, #8]
  40cfea:	1bdb      	subs	r3, r3, r7
  40cfec:	443d      	add	r5, r7
  40cfee:	1bf6      	subs	r6, r6, r7
  40cff0:	f8ca 3008 	str.w	r3, [sl, #8]
  40cff4:	2b00      	cmp	r3, #0
  40cff6:	f43f af78 	beq.w	40ceea <__sfvwrite_r+0x5e>
  40cffa:	2e00      	cmp	r6, #0
  40cffc:	d1d5      	bne.n	40cfaa <__sfvwrite_r+0x11e>
  40cffe:	f108 0308 	add.w	r3, r8, #8
  40d002:	e913 0060 	ldmdb	r3, {r5, r6}
  40d006:	4698      	mov	r8, r3
  40d008:	3308      	adds	r3, #8
  40d00a:	2e00      	cmp	r6, #0
  40d00c:	d0f9      	beq.n	40d002 <__sfvwrite_r+0x176>
  40d00e:	4632      	mov	r2, r6
  40d010:	210a      	movs	r1, #10
  40d012:	4628      	mov	r0, r5
  40d014:	f000 fc3c 	bl	40d890 <memchr>
  40d018:	2800      	cmp	r0, #0
  40d01a:	f000 80a1 	beq.w	40d160 <__sfvwrite_r+0x2d4>
  40d01e:	3001      	adds	r0, #1
  40d020:	eba0 0905 	sub.w	r9, r0, r5
  40d024:	e7c2      	b.n	40cfac <__sfvwrite_r+0x120>
  40d026:	6820      	ldr	r0, [r4, #0]
  40d028:	6923      	ldr	r3, [r4, #16]
  40d02a:	4298      	cmp	r0, r3
  40d02c:	d802      	bhi.n	40d034 <__sfvwrite_r+0x1a8>
  40d02e:	6963      	ldr	r3, [r4, #20]
  40d030:	429f      	cmp	r7, r3
  40d032:	d25d      	bcs.n	40d0f0 <__sfvwrite_r+0x264>
  40d034:	45b8      	cmp	r8, r7
  40d036:	bf28      	it	cs
  40d038:	46b8      	movcs	r8, r7
  40d03a:	4642      	mov	r2, r8
  40d03c:	4649      	mov	r1, r9
  40d03e:	f000 fc77 	bl	40d930 <memmove>
  40d042:	68a3      	ldr	r3, [r4, #8]
  40d044:	6822      	ldr	r2, [r4, #0]
  40d046:	eba3 0308 	sub.w	r3, r3, r8
  40d04a:	4442      	add	r2, r8
  40d04c:	60a3      	str	r3, [r4, #8]
  40d04e:	6022      	str	r2, [r4, #0]
  40d050:	b10b      	cbz	r3, 40d056 <__sfvwrite_r+0x1ca>
  40d052:	46c2      	mov	sl, r8
  40d054:	e779      	b.n	40cf4a <__sfvwrite_r+0xbe>
  40d056:	4621      	mov	r1, r4
  40d058:	9800      	ldr	r0, [sp, #0]
  40d05a:	f7ff fcb3 	bl	40c9c4 <_fflush_r>
  40d05e:	2800      	cmp	r0, #0
  40d060:	d192      	bne.n	40cf88 <__sfvwrite_r+0xfc>
  40d062:	46c2      	mov	sl, r8
  40d064:	e771      	b.n	40cf4a <__sfvwrite_r+0xbe>
  40d066:	465a      	mov	r2, fp
  40d068:	4629      	mov	r1, r5
  40d06a:	f000 fc61 	bl	40d930 <memmove>
  40d06e:	68a2      	ldr	r2, [r4, #8]
  40d070:	6823      	ldr	r3, [r4, #0]
  40d072:	eba2 020b 	sub.w	r2, r2, fp
  40d076:	445b      	add	r3, fp
  40d078:	60a2      	str	r2, [r4, #8]
  40d07a:	6023      	str	r3, [r4, #0]
  40d07c:	e7af      	b.n	40cfde <__sfvwrite_r+0x152>
  40d07e:	6820      	ldr	r0, [r4, #0]
  40d080:	46b8      	mov	r8, r7
  40d082:	46ba      	mov	sl, r7
  40d084:	46bb      	mov	fp, r7
  40d086:	e755      	b.n	40cf34 <__sfvwrite_r+0xa8>
  40d088:	6962      	ldr	r2, [r4, #20]
  40d08a:	6820      	ldr	r0, [r4, #0]
  40d08c:	6921      	ldr	r1, [r4, #16]
  40d08e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40d092:	eba0 0a01 	sub.w	sl, r0, r1
  40d096:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40d09a:	f10a 0001 	add.w	r0, sl, #1
  40d09e:	ea4f 0868 	mov.w	r8, r8, asr #1
  40d0a2:	4438      	add	r0, r7
  40d0a4:	4540      	cmp	r0, r8
  40d0a6:	4642      	mov	r2, r8
  40d0a8:	bf84      	itt	hi
  40d0aa:	4680      	movhi	r8, r0
  40d0ac:	4642      	movhi	r2, r8
  40d0ae:	055b      	lsls	r3, r3, #21
  40d0b0:	d544      	bpl.n	40d13c <__sfvwrite_r+0x2b0>
  40d0b2:	4611      	mov	r1, r2
  40d0b4:	9800      	ldr	r0, [sp, #0]
  40d0b6:	f000 f921 	bl	40d2fc <_malloc_r>
  40d0ba:	4683      	mov	fp, r0
  40d0bc:	2800      	cmp	r0, #0
  40d0be:	d055      	beq.n	40d16c <__sfvwrite_r+0x2e0>
  40d0c0:	4652      	mov	r2, sl
  40d0c2:	6921      	ldr	r1, [r4, #16]
  40d0c4:	f7fe fae8 	bl	40b698 <memcpy>
  40d0c8:	89a3      	ldrh	r3, [r4, #12]
  40d0ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40d0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40d0d2:	81a3      	strh	r3, [r4, #12]
  40d0d4:	eb0b 000a 	add.w	r0, fp, sl
  40d0d8:	eba8 030a 	sub.w	r3, r8, sl
  40d0dc:	f8c4 b010 	str.w	fp, [r4, #16]
  40d0e0:	f8c4 8014 	str.w	r8, [r4, #20]
  40d0e4:	6020      	str	r0, [r4, #0]
  40d0e6:	60a3      	str	r3, [r4, #8]
  40d0e8:	46b8      	mov	r8, r7
  40d0ea:	46ba      	mov	sl, r7
  40d0ec:	46bb      	mov	fp, r7
  40d0ee:	e721      	b.n	40cf34 <__sfvwrite_r+0xa8>
  40d0f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40d0f4:	42b9      	cmp	r1, r7
  40d0f6:	bf28      	it	cs
  40d0f8:	4639      	movcs	r1, r7
  40d0fa:	464a      	mov	r2, r9
  40d0fc:	fb91 f1f3 	sdiv	r1, r1, r3
  40d100:	9800      	ldr	r0, [sp, #0]
  40d102:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40d104:	fb03 f301 	mul.w	r3, r3, r1
  40d108:	69e1      	ldr	r1, [r4, #28]
  40d10a:	47b0      	blx	r6
  40d10c:	f1b0 0a00 	subs.w	sl, r0, #0
  40d110:	f73f af1b 	bgt.w	40cf4a <__sfvwrite_r+0xbe>
  40d114:	e738      	b.n	40cf88 <__sfvwrite_r+0xfc>
  40d116:	461a      	mov	r2, r3
  40d118:	4629      	mov	r1, r5
  40d11a:	9301      	str	r3, [sp, #4]
  40d11c:	f000 fc08 	bl	40d930 <memmove>
  40d120:	6822      	ldr	r2, [r4, #0]
  40d122:	9b01      	ldr	r3, [sp, #4]
  40d124:	9800      	ldr	r0, [sp, #0]
  40d126:	441a      	add	r2, r3
  40d128:	6022      	str	r2, [r4, #0]
  40d12a:	4621      	mov	r1, r4
  40d12c:	f7ff fc4a 	bl	40c9c4 <_fflush_r>
  40d130:	9b01      	ldr	r3, [sp, #4]
  40d132:	2800      	cmp	r0, #0
  40d134:	f47f af28 	bne.w	40cf88 <__sfvwrite_r+0xfc>
  40d138:	461f      	mov	r7, r3
  40d13a:	e750      	b.n	40cfde <__sfvwrite_r+0x152>
  40d13c:	9800      	ldr	r0, [sp, #0]
  40d13e:	f000 fc67 	bl	40da10 <_realloc_r>
  40d142:	4683      	mov	fp, r0
  40d144:	2800      	cmp	r0, #0
  40d146:	d1c5      	bne.n	40d0d4 <__sfvwrite_r+0x248>
  40d148:	9d00      	ldr	r5, [sp, #0]
  40d14a:	6921      	ldr	r1, [r4, #16]
  40d14c:	4628      	mov	r0, r5
  40d14e:	f7ff fdb7 	bl	40ccc0 <_free_r>
  40d152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d156:	220c      	movs	r2, #12
  40d158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40d15c:	602a      	str	r2, [r5, #0]
  40d15e:	e715      	b.n	40cf8c <__sfvwrite_r+0x100>
  40d160:	f106 0901 	add.w	r9, r6, #1
  40d164:	e722      	b.n	40cfac <__sfvwrite_r+0x120>
  40d166:	f04f 30ff 	mov.w	r0, #4294967295
  40d16a:	e6bf      	b.n	40ceec <__sfvwrite_r+0x60>
  40d16c:	9a00      	ldr	r2, [sp, #0]
  40d16e:	230c      	movs	r3, #12
  40d170:	6013      	str	r3, [r2, #0]
  40d172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d176:	e709      	b.n	40cf8c <__sfvwrite_r+0x100>
  40d178:	7ffffc00 	.word	0x7ffffc00

0040d17c <_fwalk_reent>:
  40d17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40d180:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40d184:	d01f      	beq.n	40d1c6 <_fwalk_reent+0x4a>
  40d186:	4688      	mov	r8, r1
  40d188:	4606      	mov	r6, r0
  40d18a:	f04f 0900 	mov.w	r9, #0
  40d18e:	687d      	ldr	r5, [r7, #4]
  40d190:	68bc      	ldr	r4, [r7, #8]
  40d192:	3d01      	subs	r5, #1
  40d194:	d411      	bmi.n	40d1ba <_fwalk_reent+0x3e>
  40d196:	89a3      	ldrh	r3, [r4, #12]
  40d198:	2b01      	cmp	r3, #1
  40d19a:	f105 35ff 	add.w	r5, r5, #4294967295
  40d19e:	d908      	bls.n	40d1b2 <_fwalk_reent+0x36>
  40d1a0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40d1a4:	3301      	adds	r3, #1
  40d1a6:	4621      	mov	r1, r4
  40d1a8:	4630      	mov	r0, r6
  40d1aa:	d002      	beq.n	40d1b2 <_fwalk_reent+0x36>
  40d1ac:	47c0      	blx	r8
  40d1ae:	ea49 0900 	orr.w	r9, r9, r0
  40d1b2:	1c6b      	adds	r3, r5, #1
  40d1b4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40d1b8:	d1ed      	bne.n	40d196 <_fwalk_reent+0x1a>
  40d1ba:	683f      	ldr	r7, [r7, #0]
  40d1bc:	2f00      	cmp	r7, #0
  40d1be:	d1e6      	bne.n	40d18e <_fwalk_reent+0x12>
  40d1c0:	4648      	mov	r0, r9
  40d1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d1c6:	46b9      	mov	r9, r7
  40d1c8:	4648      	mov	r0, r9
  40d1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d1ce:	bf00      	nop

0040d1d0 <__locale_mb_cur_max>:
  40d1d0:	4b04      	ldr	r3, [pc, #16]	; (40d1e4 <__locale_mb_cur_max+0x14>)
  40d1d2:	4a05      	ldr	r2, [pc, #20]	; (40d1e8 <__locale_mb_cur_max+0x18>)
  40d1d4:	681b      	ldr	r3, [r3, #0]
  40d1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40d1d8:	2b00      	cmp	r3, #0
  40d1da:	bf08      	it	eq
  40d1dc:	4613      	moveq	r3, r2
  40d1de:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40d1e2:	4770      	bx	lr
  40d1e4:	20400184 	.word	0x20400184
  40d1e8:	204005b4 	.word	0x204005b4

0040d1ec <__retarget_lock_init_recursive>:
  40d1ec:	4770      	bx	lr
  40d1ee:	bf00      	nop

0040d1f0 <__retarget_lock_close_recursive>:
  40d1f0:	4770      	bx	lr
  40d1f2:	bf00      	nop

0040d1f4 <__retarget_lock_acquire_recursive>:
  40d1f4:	4770      	bx	lr
  40d1f6:	bf00      	nop

0040d1f8 <__retarget_lock_release_recursive>:
  40d1f8:	4770      	bx	lr
  40d1fa:	bf00      	nop

0040d1fc <__swhatbuf_r>:
  40d1fc:	b570      	push	{r4, r5, r6, lr}
  40d1fe:	460c      	mov	r4, r1
  40d200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d204:	2900      	cmp	r1, #0
  40d206:	b090      	sub	sp, #64	; 0x40
  40d208:	4615      	mov	r5, r2
  40d20a:	461e      	mov	r6, r3
  40d20c:	db14      	blt.n	40d238 <__swhatbuf_r+0x3c>
  40d20e:	aa01      	add	r2, sp, #4
  40d210:	f001 f800 	bl	40e214 <_fstat_r>
  40d214:	2800      	cmp	r0, #0
  40d216:	db0f      	blt.n	40d238 <__swhatbuf_r+0x3c>
  40d218:	9a02      	ldr	r2, [sp, #8]
  40d21a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40d21e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40d222:	fab2 f282 	clz	r2, r2
  40d226:	0952      	lsrs	r2, r2, #5
  40d228:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40d22c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40d230:	6032      	str	r2, [r6, #0]
  40d232:	602b      	str	r3, [r5, #0]
  40d234:	b010      	add	sp, #64	; 0x40
  40d236:	bd70      	pop	{r4, r5, r6, pc}
  40d238:	89a2      	ldrh	r2, [r4, #12]
  40d23a:	2300      	movs	r3, #0
  40d23c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40d240:	6033      	str	r3, [r6, #0]
  40d242:	d004      	beq.n	40d24e <__swhatbuf_r+0x52>
  40d244:	2240      	movs	r2, #64	; 0x40
  40d246:	4618      	mov	r0, r3
  40d248:	602a      	str	r2, [r5, #0]
  40d24a:	b010      	add	sp, #64	; 0x40
  40d24c:	bd70      	pop	{r4, r5, r6, pc}
  40d24e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40d252:	602b      	str	r3, [r5, #0]
  40d254:	b010      	add	sp, #64	; 0x40
  40d256:	bd70      	pop	{r4, r5, r6, pc}

0040d258 <__smakebuf_r>:
  40d258:	898a      	ldrh	r2, [r1, #12]
  40d25a:	0792      	lsls	r2, r2, #30
  40d25c:	460b      	mov	r3, r1
  40d25e:	d506      	bpl.n	40d26e <__smakebuf_r+0x16>
  40d260:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40d264:	2101      	movs	r1, #1
  40d266:	601a      	str	r2, [r3, #0]
  40d268:	611a      	str	r2, [r3, #16]
  40d26a:	6159      	str	r1, [r3, #20]
  40d26c:	4770      	bx	lr
  40d26e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d270:	b083      	sub	sp, #12
  40d272:	ab01      	add	r3, sp, #4
  40d274:	466a      	mov	r2, sp
  40d276:	460c      	mov	r4, r1
  40d278:	4606      	mov	r6, r0
  40d27a:	f7ff ffbf 	bl	40d1fc <__swhatbuf_r>
  40d27e:	9900      	ldr	r1, [sp, #0]
  40d280:	4605      	mov	r5, r0
  40d282:	4630      	mov	r0, r6
  40d284:	f000 f83a 	bl	40d2fc <_malloc_r>
  40d288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d28c:	b1d8      	cbz	r0, 40d2c6 <__smakebuf_r+0x6e>
  40d28e:	9a01      	ldr	r2, [sp, #4]
  40d290:	4f15      	ldr	r7, [pc, #84]	; (40d2e8 <__smakebuf_r+0x90>)
  40d292:	9900      	ldr	r1, [sp, #0]
  40d294:	63f7      	str	r7, [r6, #60]	; 0x3c
  40d296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40d29a:	81a3      	strh	r3, [r4, #12]
  40d29c:	6020      	str	r0, [r4, #0]
  40d29e:	6120      	str	r0, [r4, #16]
  40d2a0:	6161      	str	r1, [r4, #20]
  40d2a2:	b91a      	cbnz	r2, 40d2ac <__smakebuf_r+0x54>
  40d2a4:	432b      	orrs	r3, r5
  40d2a6:	81a3      	strh	r3, [r4, #12]
  40d2a8:	b003      	add	sp, #12
  40d2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d2ac:	4630      	mov	r0, r6
  40d2ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40d2b2:	f000 ffc3 	bl	40e23c <_isatty_r>
  40d2b6:	b1a0      	cbz	r0, 40d2e2 <__smakebuf_r+0x8a>
  40d2b8:	89a3      	ldrh	r3, [r4, #12]
  40d2ba:	f023 0303 	bic.w	r3, r3, #3
  40d2be:	f043 0301 	orr.w	r3, r3, #1
  40d2c2:	b21b      	sxth	r3, r3
  40d2c4:	e7ee      	b.n	40d2a4 <__smakebuf_r+0x4c>
  40d2c6:	059a      	lsls	r2, r3, #22
  40d2c8:	d4ee      	bmi.n	40d2a8 <__smakebuf_r+0x50>
  40d2ca:	f023 0303 	bic.w	r3, r3, #3
  40d2ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40d2d2:	f043 0302 	orr.w	r3, r3, #2
  40d2d6:	2101      	movs	r1, #1
  40d2d8:	81a3      	strh	r3, [r4, #12]
  40d2da:	6022      	str	r2, [r4, #0]
  40d2dc:	6122      	str	r2, [r4, #16]
  40d2de:	6161      	str	r1, [r4, #20]
  40d2e0:	e7e2      	b.n	40d2a8 <__smakebuf_r+0x50>
  40d2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d2e6:	e7dd      	b.n	40d2a4 <__smakebuf_r+0x4c>
  40d2e8:	0040ca19 	.word	0x0040ca19

0040d2ec <malloc>:
  40d2ec:	4b02      	ldr	r3, [pc, #8]	; (40d2f8 <malloc+0xc>)
  40d2ee:	4601      	mov	r1, r0
  40d2f0:	6818      	ldr	r0, [r3, #0]
  40d2f2:	f000 b803 	b.w	40d2fc <_malloc_r>
  40d2f6:	bf00      	nop
  40d2f8:	20400184 	.word	0x20400184

0040d2fc <_malloc_r>:
  40d2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d300:	f101 060b 	add.w	r6, r1, #11
  40d304:	2e16      	cmp	r6, #22
  40d306:	b083      	sub	sp, #12
  40d308:	4605      	mov	r5, r0
  40d30a:	f240 809e 	bls.w	40d44a <_malloc_r+0x14e>
  40d30e:	f036 0607 	bics.w	r6, r6, #7
  40d312:	f100 80bd 	bmi.w	40d490 <_malloc_r+0x194>
  40d316:	42b1      	cmp	r1, r6
  40d318:	f200 80ba 	bhi.w	40d490 <_malloc_r+0x194>
  40d31c:	f000 fb6c 	bl	40d9f8 <__malloc_lock>
  40d320:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40d324:	f0c0 8293 	bcc.w	40d84e <_malloc_r+0x552>
  40d328:	0a73      	lsrs	r3, r6, #9
  40d32a:	f000 80b8 	beq.w	40d49e <_malloc_r+0x1a2>
  40d32e:	2b04      	cmp	r3, #4
  40d330:	f200 8179 	bhi.w	40d626 <_malloc_r+0x32a>
  40d334:	09b3      	lsrs	r3, r6, #6
  40d336:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40d33a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40d33e:	00c3      	lsls	r3, r0, #3
  40d340:	4fbf      	ldr	r7, [pc, #764]	; (40d640 <_malloc_r+0x344>)
  40d342:	443b      	add	r3, r7
  40d344:	f1a3 0108 	sub.w	r1, r3, #8
  40d348:	685c      	ldr	r4, [r3, #4]
  40d34a:	42a1      	cmp	r1, r4
  40d34c:	d106      	bne.n	40d35c <_malloc_r+0x60>
  40d34e:	e00c      	b.n	40d36a <_malloc_r+0x6e>
  40d350:	2a00      	cmp	r2, #0
  40d352:	f280 80aa 	bge.w	40d4aa <_malloc_r+0x1ae>
  40d356:	68e4      	ldr	r4, [r4, #12]
  40d358:	42a1      	cmp	r1, r4
  40d35a:	d006      	beq.n	40d36a <_malloc_r+0x6e>
  40d35c:	6863      	ldr	r3, [r4, #4]
  40d35e:	f023 0303 	bic.w	r3, r3, #3
  40d362:	1b9a      	subs	r2, r3, r6
  40d364:	2a0f      	cmp	r2, #15
  40d366:	ddf3      	ble.n	40d350 <_malloc_r+0x54>
  40d368:	4670      	mov	r0, lr
  40d36a:	693c      	ldr	r4, [r7, #16]
  40d36c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40d654 <_malloc_r+0x358>
  40d370:	4574      	cmp	r4, lr
  40d372:	f000 81ab 	beq.w	40d6cc <_malloc_r+0x3d0>
  40d376:	6863      	ldr	r3, [r4, #4]
  40d378:	f023 0303 	bic.w	r3, r3, #3
  40d37c:	1b9a      	subs	r2, r3, r6
  40d37e:	2a0f      	cmp	r2, #15
  40d380:	f300 8190 	bgt.w	40d6a4 <_malloc_r+0x3a8>
  40d384:	2a00      	cmp	r2, #0
  40d386:	f8c7 e014 	str.w	lr, [r7, #20]
  40d38a:	f8c7 e010 	str.w	lr, [r7, #16]
  40d38e:	f280 809d 	bge.w	40d4cc <_malloc_r+0x1d0>
  40d392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40d396:	f080 8161 	bcs.w	40d65c <_malloc_r+0x360>
  40d39a:	08db      	lsrs	r3, r3, #3
  40d39c:	f103 0c01 	add.w	ip, r3, #1
  40d3a0:	1099      	asrs	r1, r3, #2
  40d3a2:	687a      	ldr	r2, [r7, #4]
  40d3a4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40d3a8:	f8c4 8008 	str.w	r8, [r4, #8]
  40d3ac:	2301      	movs	r3, #1
  40d3ae:	408b      	lsls	r3, r1
  40d3b0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40d3b4:	4313      	orrs	r3, r2
  40d3b6:	3908      	subs	r1, #8
  40d3b8:	60e1      	str	r1, [r4, #12]
  40d3ba:	607b      	str	r3, [r7, #4]
  40d3bc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40d3c0:	f8c8 400c 	str.w	r4, [r8, #12]
  40d3c4:	1082      	asrs	r2, r0, #2
  40d3c6:	2401      	movs	r4, #1
  40d3c8:	4094      	lsls	r4, r2
  40d3ca:	429c      	cmp	r4, r3
  40d3cc:	f200 808b 	bhi.w	40d4e6 <_malloc_r+0x1ea>
  40d3d0:	421c      	tst	r4, r3
  40d3d2:	d106      	bne.n	40d3e2 <_malloc_r+0xe6>
  40d3d4:	f020 0003 	bic.w	r0, r0, #3
  40d3d8:	0064      	lsls	r4, r4, #1
  40d3da:	421c      	tst	r4, r3
  40d3dc:	f100 0004 	add.w	r0, r0, #4
  40d3e0:	d0fa      	beq.n	40d3d8 <_malloc_r+0xdc>
  40d3e2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40d3e6:	46cc      	mov	ip, r9
  40d3e8:	4680      	mov	r8, r0
  40d3ea:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40d3ee:	459c      	cmp	ip, r3
  40d3f0:	d107      	bne.n	40d402 <_malloc_r+0x106>
  40d3f2:	e16d      	b.n	40d6d0 <_malloc_r+0x3d4>
  40d3f4:	2a00      	cmp	r2, #0
  40d3f6:	f280 817b 	bge.w	40d6f0 <_malloc_r+0x3f4>
  40d3fa:	68db      	ldr	r3, [r3, #12]
  40d3fc:	459c      	cmp	ip, r3
  40d3fe:	f000 8167 	beq.w	40d6d0 <_malloc_r+0x3d4>
  40d402:	6859      	ldr	r1, [r3, #4]
  40d404:	f021 0103 	bic.w	r1, r1, #3
  40d408:	1b8a      	subs	r2, r1, r6
  40d40a:	2a0f      	cmp	r2, #15
  40d40c:	ddf2      	ble.n	40d3f4 <_malloc_r+0xf8>
  40d40e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40d412:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40d416:	9300      	str	r3, [sp, #0]
  40d418:	199c      	adds	r4, r3, r6
  40d41a:	4628      	mov	r0, r5
  40d41c:	f046 0601 	orr.w	r6, r6, #1
  40d420:	f042 0501 	orr.w	r5, r2, #1
  40d424:	605e      	str	r6, [r3, #4]
  40d426:	f8c8 c00c 	str.w	ip, [r8, #12]
  40d42a:	f8cc 8008 	str.w	r8, [ip, #8]
  40d42e:	617c      	str	r4, [r7, #20]
  40d430:	613c      	str	r4, [r7, #16]
  40d432:	f8c4 e00c 	str.w	lr, [r4, #12]
  40d436:	f8c4 e008 	str.w	lr, [r4, #8]
  40d43a:	6065      	str	r5, [r4, #4]
  40d43c:	505a      	str	r2, [r3, r1]
  40d43e:	f000 fae1 	bl	40da04 <__malloc_unlock>
  40d442:	9b00      	ldr	r3, [sp, #0]
  40d444:	f103 0408 	add.w	r4, r3, #8
  40d448:	e01e      	b.n	40d488 <_malloc_r+0x18c>
  40d44a:	2910      	cmp	r1, #16
  40d44c:	d820      	bhi.n	40d490 <_malloc_r+0x194>
  40d44e:	f000 fad3 	bl	40d9f8 <__malloc_lock>
  40d452:	2610      	movs	r6, #16
  40d454:	2318      	movs	r3, #24
  40d456:	2002      	movs	r0, #2
  40d458:	4f79      	ldr	r7, [pc, #484]	; (40d640 <_malloc_r+0x344>)
  40d45a:	443b      	add	r3, r7
  40d45c:	f1a3 0208 	sub.w	r2, r3, #8
  40d460:	685c      	ldr	r4, [r3, #4]
  40d462:	4294      	cmp	r4, r2
  40d464:	f000 813d 	beq.w	40d6e2 <_malloc_r+0x3e6>
  40d468:	6863      	ldr	r3, [r4, #4]
  40d46a:	68e1      	ldr	r1, [r4, #12]
  40d46c:	68a6      	ldr	r6, [r4, #8]
  40d46e:	f023 0303 	bic.w	r3, r3, #3
  40d472:	4423      	add	r3, r4
  40d474:	4628      	mov	r0, r5
  40d476:	685a      	ldr	r2, [r3, #4]
  40d478:	60f1      	str	r1, [r6, #12]
  40d47a:	f042 0201 	orr.w	r2, r2, #1
  40d47e:	608e      	str	r6, [r1, #8]
  40d480:	605a      	str	r2, [r3, #4]
  40d482:	f000 fabf 	bl	40da04 <__malloc_unlock>
  40d486:	3408      	adds	r4, #8
  40d488:	4620      	mov	r0, r4
  40d48a:	b003      	add	sp, #12
  40d48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d490:	2400      	movs	r4, #0
  40d492:	230c      	movs	r3, #12
  40d494:	4620      	mov	r0, r4
  40d496:	602b      	str	r3, [r5, #0]
  40d498:	b003      	add	sp, #12
  40d49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d49e:	2040      	movs	r0, #64	; 0x40
  40d4a0:	f44f 7300 	mov.w	r3, #512	; 0x200
  40d4a4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40d4a8:	e74a      	b.n	40d340 <_malloc_r+0x44>
  40d4aa:	4423      	add	r3, r4
  40d4ac:	68e1      	ldr	r1, [r4, #12]
  40d4ae:	685a      	ldr	r2, [r3, #4]
  40d4b0:	68a6      	ldr	r6, [r4, #8]
  40d4b2:	f042 0201 	orr.w	r2, r2, #1
  40d4b6:	60f1      	str	r1, [r6, #12]
  40d4b8:	4628      	mov	r0, r5
  40d4ba:	608e      	str	r6, [r1, #8]
  40d4bc:	605a      	str	r2, [r3, #4]
  40d4be:	f000 faa1 	bl	40da04 <__malloc_unlock>
  40d4c2:	3408      	adds	r4, #8
  40d4c4:	4620      	mov	r0, r4
  40d4c6:	b003      	add	sp, #12
  40d4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d4cc:	4423      	add	r3, r4
  40d4ce:	4628      	mov	r0, r5
  40d4d0:	685a      	ldr	r2, [r3, #4]
  40d4d2:	f042 0201 	orr.w	r2, r2, #1
  40d4d6:	605a      	str	r2, [r3, #4]
  40d4d8:	f000 fa94 	bl	40da04 <__malloc_unlock>
  40d4dc:	3408      	adds	r4, #8
  40d4de:	4620      	mov	r0, r4
  40d4e0:	b003      	add	sp, #12
  40d4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d4e6:	68bc      	ldr	r4, [r7, #8]
  40d4e8:	6863      	ldr	r3, [r4, #4]
  40d4ea:	f023 0803 	bic.w	r8, r3, #3
  40d4ee:	45b0      	cmp	r8, r6
  40d4f0:	d304      	bcc.n	40d4fc <_malloc_r+0x200>
  40d4f2:	eba8 0306 	sub.w	r3, r8, r6
  40d4f6:	2b0f      	cmp	r3, #15
  40d4f8:	f300 8085 	bgt.w	40d606 <_malloc_r+0x30a>
  40d4fc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40d658 <_malloc_r+0x35c>
  40d500:	4b50      	ldr	r3, [pc, #320]	; (40d644 <_malloc_r+0x348>)
  40d502:	f8d9 2000 	ldr.w	r2, [r9]
  40d506:	681b      	ldr	r3, [r3, #0]
  40d508:	3201      	adds	r2, #1
  40d50a:	4433      	add	r3, r6
  40d50c:	eb04 0a08 	add.w	sl, r4, r8
  40d510:	f000 8155 	beq.w	40d7be <_malloc_r+0x4c2>
  40d514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40d518:	330f      	adds	r3, #15
  40d51a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40d51e:	f02b 0b0f 	bic.w	fp, fp, #15
  40d522:	4659      	mov	r1, fp
  40d524:	4628      	mov	r0, r5
  40d526:	f000 fc19 	bl	40dd5c <_sbrk_r>
  40d52a:	1c41      	adds	r1, r0, #1
  40d52c:	4602      	mov	r2, r0
  40d52e:	f000 80fc 	beq.w	40d72a <_malloc_r+0x42e>
  40d532:	4582      	cmp	sl, r0
  40d534:	f200 80f7 	bhi.w	40d726 <_malloc_r+0x42a>
  40d538:	4b43      	ldr	r3, [pc, #268]	; (40d648 <_malloc_r+0x34c>)
  40d53a:	6819      	ldr	r1, [r3, #0]
  40d53c:	4459      	add	r1, fp
  40d53e:	6019      	str	r1, [r3, #0]
  40d540:	f000 814d 	beq.w	40d7de <_malloc_r+0x4e2>
  40d544:	f8d9 0000 	ldr.w	r0, [r9]
  40d548:	3001      	adds	r0, #1
  40d54a:	bf1b      	ittet	ne
  40d54c:	eba2 0a0a 	subne.w	sl, r2, sl
  40d550:	4451      	addne	r1, sl
  40d552:	f8c9 2000 	streq.w	r2, [r9]
  40d556:	6019      	strne	r1, [r3, #0]
  40d558:	f012 0107 	ands.w	r1, r2, #7
  40d55c:	f000 8115 	beq.w	40d78a <_malloc_r+0x48e>
  40d560:	f1c1 0008 	rsb	r0, r1, #8
  40d564:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40d568:	4402      	add	r2, r0
  40d56a:	3108      	adds	r1, #8
  40d56c:	eb02 090b 	add.w	r9, r2, fp
  40d570:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40d574:	eba1 0909 	sub.w	r9, r1, r9
  40d578:	4649      	mov	r1, r9
  40d57a:	4628      	mov	r0, r5
  40d57c:	9301      	str	r3, [sp, #4]
  40d57e:	9200      	str	r2, [sp, #0]
  40d580:	f000 fbec 	bl	40dd5c <_sbrk_r>
  40d584:	1c43      	adds	r3, r0, #1
  40d586:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40d58a:	f000 8143 	beq.w	40d814 <_malloc_r+0x518>
  40d58e:	1a80      	subs	r0, r0, r2
  40d590:	4448      	add	r0, r9
  40d592:	f040 0001 	orr.w	r0, r0, #1
  40d596:	6819      	ldr	r1, [r3, #0]
  40d598:	60ba      	str	r2, [r7, #8]
  40d59a:	4449      	add	r1, r9
  40d59c:	42bc      	cmp	r4, r7
  40d59e:	6050      	str	r0, [r2, #4]
  40d5a0:	6019      	str	r1, [r3, #0]
  40d5a2:	d017      	beq.n	40d5d4 <_malloc_r+0x2d8>
  40d5a4:	f1b8 0f0f 	cmp.w	r8, #15
  40d5a8:	f240 80fb 	bls.w	40d7a2 <_malloc_r+0x4a6>
  40d5ac:	6860      	ldr	r0, [r4, #4]
  40d5ae:	f1a8 020c 	sub.w	r2, r8, #12
  40d5b2:	f022 0207 	bic.w	r2, r2, #7
  40d5b6:	eb04 0e02 	add.w	lr, r4, r2
  40d5ba:	f000 0001 	and.w	r0, r0, #1
  40d5be:	f04f 0c05 	mov.w	ip, #5
  40d5c2:	4310      	orrs	r0, r2
  40d5c4:	2a0f      	cmp	r2, #15
  40d5c6:	6060      	str	r0, [r4, #4]
  40d5c8:	f8ce c004 	str.w	ip, [lr, #4]
  40d5cc:	f8ce c008 	str.w	ip, [lr, #8]
  40d5d0:	f200 8117 	bhi.w	40d802 <_malloc_r+0x506>
  40d5d4:	4b1d      	ldr	r3, [pc, #116]	; (40d64c <_malloc_r+0x350>)
  40d5d6:	68bc      	ldr	r4, [r7, #8]
  40d5d8:	681a      	ldr	r2, [r3, #0]
  40d5da:	4291      	cmp	r1, r2
  40d5dc:	bf88      	it	hi
  40d5de:	6019      	strhi	r1, [r3, #0]
  40d5e0:	4b1b      	ldr	r3, [pc, #108]	; (40d650 <_malloc_r+0x354>)
  40d5e2:	681a      	ldr	r2, [r3, #0]
  40d5e4:	4291      	cmp	r1, r2
  40d5e6:	6862      	ldr	r2, [r4, #4]
  40d5e8:	bf88      	it	hi
  40d5ea:	6019      	strhi	r1, [r3, #0]
  40d5ec:	f022 0203 	bic.w	r2, r2, #3
  40d5f0:	4296      	cmp	r6, r2
  40d5f2:	eba2 0306 	sub.w	r3, r2, r6
  40d5f6:	d801      	bhi.n	40d5fc <_malloc_r+0x300>
  40d5f8:	2b0f      	cmp	r3, #15
  40d5fa:	dc04      	bgt.n	40d606 <_malloc_r+0x30a>
  40d5fc:	4628      	mov	r0, r5
  40d5fe:	f000 fa01 	bl	40da04 <__malloc_unlock>
  40d602:	2400      	movs	r4, #0
  40d604:	e740      	b.n	40d488 <_malloc_r+0x18c>
  40d606:	19a2      	adds	r2, r4, r6
  40d608:	f043 0301 	orr.w	r3, r3, #1
  40d60c:	f046 0601 	orr.w	r6, r6, #1
  40d610:	6066      	str	r6, [r4, #4]
  40d612:	4628      	mov	r0, r5
  40d614:	60ba      	str	r2, [r7, #8]
  40d616:	6053      	str	r3, [r2, #4]
  40d618:	f000 f9f4 	bl	40da04 <__malloc_unlock>
  40d61c:	3408      	adds	r4, #8
  40d61e:	4620      	mov	r0, r4
  40d620:	b003      	add	sp, #12
  40d622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d626:	2b14      	cmp	r3, #20
  40d628:	d971      	bls.n	40d70e <_malloc_r+0x412>
  40d62a:	2b54      	cmp	r3, #84	; 0x54
  40d62c:	f200 80a3 	bhi.w	40d776 <_malloc_r+0x47a>
  40d630:	0b33      	lsrs	r3, r6, #12
  40d632:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40d636:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40d63a:	00c3      	lsls	r3, r0, #3
  40d63c:	e680      	b.n	40d340 <_malloc_r+0x44>
  40d63e:	bf00      	nop
  40d640:	20400720 	.word	0x20400720
  40d644:	20400ef8 	.word	0x20400ef8
  40d648:	20400ec8 	.word	0x20400ec8
  40d64c:	20400ef0 	.word	0x20400ef0
  40d650:	20400ef4 	.word	0x20400ef4
  40d654:	20400728 	.word	0x20400728
  40d658:	20400b28 	.word	0x20400b28
  40d65c:	0a5a      	lsrs	r2, r3, #9
  40d65e:	2a04      	cmp	r2, #4
  40d660:	d95b      	bls.n	40d71a <_malloc_r+0x41e>
  40d662:	2a14      	cmp	r2, #20
  40d664:	f200 80ae 	bhi.w	40d7c4 <_malloc_r+0x4c8>
  40d668:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40d66c:	00c9      	lsls	r1, r1, #3
  40d66e:	325b      	adds	r2, #91	; 0x5b
  40d670:	eb07 0c01 	add.w	ip, r7, r1
  40d674:	5879      	ldr	r1, [r7, r1]
  40d676:	f1ac 0c08 	sub.w	ip, ip, #8
  40d67a:	458c      	cmp	ip, r1
  40d67c:	f000 8088 	beq.w	40d790 <_malloc_r+0x494>
  40d680:	684a      	ldr	r2, [r1, #4]
  40d682:	f022 0203 	bic.w	r2, r2, #3
  40d686:	4293      	cmp	r3, r2
  40d688:	d273      	bcs.n	40d772 <_malloc_r+0x476>
  40d68a:	6889      	ldr	r1, [r1, #8]
  40d68c:	458c      	cmp	ip, r1
  40d68e:	d1f7      	bne.n	40d680 <_malloc_r+0x384>
  40d690:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40d694:	687b      	ldr	r3, [r7, #4]
  40d696:	60e2      	str	r2, [r4, #12]
  40d698:	f8c4 c008 	str.w	ip, [r4, #8]
  40d69c:	6094      	str	r4, [r2, #8]
  40d69e:	f8cc 400c 	str.w	r4, [ip, #12]
  40d6a2:	e68f      	b.n	40d3c4 <_malloc_r+0xc8>
  40d6a4:	19a1      	adds	r1, r4, r6
  40d6a6:	f046 0c01 	orr.w	ip, r6, #1
  40d6aa:	f042 0601 	orr.w	r6, r2, #1
  40d6ae:	f8c4 c004 	str.w	ip, [r4, #4]
  40d6b2:	4628      	mov	r0, r5
  40d6b4:	6179      	str	r1, [r7, #20]
  40d6b6:	6139      	str	r1, [r7, #16]
  40d6b8:	f8c1 e00c 	str.w	lr, [r1, #12]
  40d6bc:	f8c1 e008 	str.w	lr, [r1, #8]
  40d6c0:	604e      	str	r6, [r1, #4]
  40d6c2:	50e2      	str	r2, [r4, r3]
  40d6c4:	f000 f99e 	bl	40da04 <__malloc_unlock>
  40d6c8:	3408      	adds	r4, #8
  40d6ca:	e6dd      	b.n	40d488 <_malloc_r+0x18c>
  40d6cc:	687b      	ldr	r3, [r7, #4]
  40d6ce:	e679      	b.n	40d3c4 <_malloc_r+0xc8>
  40d6d0:	f108 0801 	add.w	r8, r8, #1
  40d6d4:	f018 0f03 	tst.w	r8, #3
  40d6d8:	f10c 0c08 	add.w	ip, ip, #8
  40d6dc:	f47f ae85 	bne.w	40d3ea <_malloc_r+0xee>
  40d6e0:	e02d      	b.n	40d73e <_malloc_r+0x442>
  40d6e2:	68dc      	ldr	r4, [r3, #12]
  40d6e4:	42a3      	cmp	r3, r4
  40d6e6:	bf08      	it	eq
  40d6e8:	3002      	addeq	r0, #2
  40d6ea:	f43f ae3e 	beq.w	40d36a <_malloc_r+0x6e>
  40d6ee:	e6bb      	b.n	40d468 <_malloc_r+0x16c>
  40d6f0:	4419      	add	r1, r3
  40d6f2:	461c      	mov	r4, r3
  40d6f4:	684a      	ldr	r2, [r1, #4]
  40d6f6:	68db      	ldr	r3, [r3, #12]
  40d6f8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40d6fc:	f042 0201 	orr.w	r2, r2, #1
  40d700:	604a      	str	r2, [r1, #4]
  40d702:	4628      	mov	r0, r5
  40d704:	60f3      	str	r3, [r6, #12]
  40d706:	609e      	str	r6, [r3, #8]
  40d708:	f000 f97c 	bl	40da04 <__malloc_unlock>
  40d70c:	e6bc      	b.n	40d488 <_malloc_r+0x18c>
  40d70e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40d712:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40d716:	00c3      	lsls	r3, r0, #3
  40d718:	e612      	b.n	40d340 <_malloc_r+0x44>
  40d71a:	099a      	lsrs	r2, r3, #6
  40d71c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40d720:	00c9      	lsls	r1, r1, #3
  40d722:	3238      	adds	r2, #56	; 0x38
  40d724:	e7a4      	b.n	40d670 <_malloc_r+0x374>
  40d726:	42bc      	cmp	r4, r7
  40d728:	d054      	beq.n	40d7d4 <_malloc_r+0x4d8>
  40d72a:	68bc      	ldr	r4, [r7, #8]
  40d72c:	6862      	ldr	r2, [r4, #4]
  40d72e:	f022 0203 	bic.w	r2, r2, #3
  40d732:	e75d      	b.n	40d5f0 <_malloc_r+0x2f4>
  40d734:	f859 3908 	ldr.w	r3, [r9], #-8
  40d738:	4599      	cmp	r9, r3
  40d73a:	f040 8086 	bne.w	40d84a <_malloc_r+0x54e>
  40d73e:	f010 0f03 	tst.w	r0, #3
  40d742:	f100 30ff 	add.w	r0, r0, #4294967295
  40d746:	d1f5      	bne.n	40d734 <_malloc_r+0x438>
  40d748:	687b      	ldr	r3, [r7, #4]
  40d74a:	ea23 0304 	bic.w	r3, r3, r4
  40d74e:	607b      	str	r3, [r7, #4]
  40d750:	0064      	lsls	r4, r4, #1
  40d752:	429c      	cmp	r4, r3
  40d754:	f63f aec7 	bhi.w	40d4e6 <_malloc_r+0x1ea>
  40d758:	2c00      	cmp	r4, #0
  40d75a:	f43f aec4 	beq.w	40d4e6 <_malloc_r+0x1ea>
  40d75e:	421c      	tst	r4, r3
  40d760:	4640      	mov	r0, r8
  40d762:	f47f ae3e 	bne.w	40d3e2 <_malloc_r+0xe6>
  40d766:	0064      	lsls	r4, r4, #1
  40d768:	421c      	tst	r4, r3
  40d76a:	f100 0004 	add.w	r0, r0, #4
  40d76e:	d0fa      	beq.n	40d766 <_malloc_r+0x46a>
  40d770:	e637      	b.n	40d3e2 <_malloc_r+0xe6>
  40d772:	468c      	mov	ip, r1
  40d774:	e78c      	b.n	40d690 <_malloc_r+0x394>
  40d776:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40d77a:	d815      	bhi.n	40d7a8 <_malloc_r+0x4ac>
  40d77c:	0bf3      	lsrs	r3, r6, #15
  40d77e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40d782:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40d786:	00c3      	lsls	r3, r0, #3
  40d788:	e5da      	b.n	40d340 <_malloc_r+0x44>
  40d78a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40d78e:	e6ed      	b.n	40d56c <_malloc_r+0x270>
  40d790:	687b      	ldr	r3, [r7, #4]
  40d792:	1092      	asrs	r2, r2, #2
  40d794:	2101      	movs	r1, #1
  40d796:	fa01 f202 	lsl.w	r2, r1, r2
  40d79a:	4313      	orrs	r3, r2
  40d79c:	607b      	str	r3, [r7, #4]
  40d79e:	4662      	mov	r2, ip
  40d7a0:	e779      	b.n	40d696 <_malloc_r+0x39a>
  40d7a2:	2301      	movs	r3, #1
  40d7a4:	6053      	str	r3, [r2, #4]
  40d7a6:	e729      	b.n	40d5fc <_malloc_r+0x300>
  40d7a8:	f240 5254 	movw	r2, #1364	; 0x554
  40d7ac:	4293      	cmp	r3, r2
  40d7ae:	d822      	bhi.n	40d7f6 <_malloc_r+0x4fa>
  40d7b0:	0cb3      	lsrs	r3, r6, #18
  40d7b2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40d7b6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40d7ba:	00c3      	lsls	r3, r0, #3
  40d7bc:	e5c0      	b.n	40d340 <_malloc_r+0x44>
  40d7be:	f103 0b10 	add.w	fp, r3, #16
  40d7c2:	e6ae      	b.n	40d522 <_malloc_r+0x226>
  40d7c4:	2a54      	cmp	r2, #84	; 0x54
  40d7c6:	d829      	bhi.n	40d81c <_malloc_r+0x520>
  40d7c8:	0b1a      	lsrs	r2, r3, #12
  40d7ca:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40d7ce:	00c9      	lsls	r1, r1, #3
  40d7d0:	326e      	adds	r2, #110	; 0x6e
  40d7d2:	e74d      	b.n	40d670 <_malloc_r+0x374>
  40d7d4:	4b20      	ldr	r3, [pc, #128]	; (40d858 <_malloc_r+0x55c>)
  40d7d6:	6819      	ldr	r1, [r3, #0]
  40d7d8:	4459      	add	r1, fp
  40d7da:	6019      	str	r1, [r3, #0]
  40d7dc:	e6b2      	b.n	40d544 <_malloc_r+0x248>
  40d7de:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40d7e2:	2800      	cmp	r0, #0
  40d7e4:	f47f aeae 	bne.w	40d544 <_malloc_r+0x248>
  40d7e8:	eb08 030b 	add.w	r3, r8, fp
  40d7ec:	68ba      	ldr	r2, [r7, #8]
  40d7ee:	f043 0301 	orr.w	r3, r3, #1
  40d7f2:	6053      	str	r3, [r2, #4]
  40d7f4:	e6ee      	b.n	40d5d4 <_malloc_r+0x2d8>
  40d7f6:	207f      	movs	r0, #127	; 0x7f
  40d7f8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40d7fc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40d800:	e59e      	b.n	40d340 <_malloc_r+0x44>
  40d802:	f104 0108 	add.w	r1, r4, #8
  40d806:	4628      	mov	r0, r5
  40d808:	9300      	str	r3, [sp, #0]
  40d80a:	f7ff fa59 	bl	40ccc0 <_free_r>
  40d80e:	9b00      	ldr	r3, [sp, #0]
  40d810:	6819      	ldr	r1, [r3, #0]
  40d812:	e6df      	b.n	40d5d4 <_malloc_r+0x2d8>
  40d814:	2001      	movs	r0, #1
  40d816:	f04f 0900 	mov.w	r9, #0
  40d81a:	e6bc      	b.n	40d596 <_malloc_r+0x29a>
  40d81c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40d820:	d805      	bhi.n	40d82e <_malloc_r+0x532>
  40d822:	0bda      	lsrs	r2, r3, #15
  40d824:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40d828:	00c9      	lsls	r1, r1, #3
  40d82a:	3277      	adds	r2, #119	; 0x77
  40d82c:	e720      	b.n	40d670 <_malloc_r+0x374>
  40d82e:	f240 5154 	movw	r1, #1364	; 0x554
  40d832:	428a      	cmp	r2, r1
  40d834:	d805      	bhi.n	40d842 <_malloc_r+0x546>
  40d836:	0c9a      	lsrs	r2, r3, #18
  40d838:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40d83c:	00c9      	lsls	r1, r1, #3
  40d83e:	327c      	adds	r2, #124	; 0x7c
  40d840:	e716      	b.n	40d670 <_malloc_r+0x374>
  40d842:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40d846:	227e      	movs	r2, #126	; 0x7e
  40d848:	e712      	b.n	40d670 <_malloc_r+0x374>
  40d84a:	687b      	ldr	r3, [r7, #4]
  40d84c:	e780      	b.n	40d750 <_malloc_r+0x454>
  40d84e:	08f0      	lsrs	r0, r6, #3
  40d850:	f106 0308 	add.w	r3, r6, #8
  40d854:	e600      	b.n	40d458 <_malloc_r+0x15c>
  40d856:	bf00      	nop
  40d858:	20400ec8 	.word	0x20400ec8

0040d85c <__ascii_mbtowc>:
  40d85c:	b082      	sub	sp, #8
  40d85e:	b149      	cbz	r1, 40d874 <__ascii_mbtowc+0x18>
  40d860:	b15a      	cbz	r2, 40d87a <__ascii_mbtowc+0x1e>
  40d862:	b16b      	cbz	r3, 40d880 <__ascii_mbtowc+0x24>
  40d864:	7813      	ldrb	r3, [r2, #0]
  40d866:	600b      	str	r3, [r1, #0]
  40d868:	7812      	ldrb	r2, [r2, #0]
  40d86a:	1c10      	adds	r0, r2, #0
  40d86c:	bf18      	it	ne
  40d86e:	2001      	movne	r0, #1
  40d870:	b002      	add	sp, #8
  40d872:	4770      	bx	lr
  40d874:	a901      	add	r1, sp, #4
  40d876:	2a00      	cmp	r2, #0
  40d878:	d1f3      	bne.n	40d862 <__ascii_mbtowc+0x6>
  40d87a:	4610      	mov	r0, r2
  40d87c:	b002      	add	sp, #8
  40d87e:	4770      	bx	lr
  40d880:	f06f 0001 	mvn.w	r0, #1
  40d884:	e7f4      	b.n	40d870 <__ascii_mbtowc+0x14>
  40d886:	bf00      	nop
	...

0040d890 <memchr>:
  40d890:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40d894:	2a10      	cmp	r2, #16
  40d896:	db2b      	blt.n	40d8f0 <memchr+0x60>
  40d898:	f010 0f07 	tst.w	r0, #7
  40d89c:	d008      	beq.n	40d8b0 <memchr+0x20>
  40d89e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40d8a2:	3a01      	subs	r2, #1
  40d8a4:	428b      	cmp	r3, r1
  40d8a6:	d02d      	beq.n	40d904 <memchr+0x74>
  40d8a8:	f010 0f07 	tst.w	r0, #7
  40d8ac:	b342      	cbz	r2, 40d900 <memchr+0x70>
  40d8ae:	d1f6      	bne.n	40d89e <memchr+0xe>
  40d8b0:	b4f0      	push	{r4, r5, r6, r7}
  40d8b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40d8b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40d8ba:	f022 0407 	bic.w	r4, r2, #7
  40d8be:	f07f 0700 	mvns.w	r7, #0
  40d8c2:	2300      	movs	r3, #0
  40d8c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40d8c8:	3c08      	subs	r4, #8
  40d8ca:	ea85 0501 	eor.w	r5, r5, r1
  40d8ce:	ea86 0601 	eor.w	r6, r6, r1
  40d8d2:	fa85 f547 	uadd8	r5, r5, r7
  40d8d6:	faa3 f587 	sel	r5, r3, r7
  40d8da:	fa86 f647 	uadd8	r6, r6, r7
  40d8de:	faa5 f687 	sel	r6, r5, r7
  40d8e2:	b98e      	cbnz	r6, 40d908 <memchr+0x78>
  40d8e4:	d1ee      	bne.n	40d8c4 <memchr+0x34>
  40d8e6:	bcf0      	pop	{r4, r5, r6, r7}
  40d8e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40d8ec:	f002 0207 	and.w	r2, r2, #7
  40d8f0:	b132      	cbz	r2, 40d900 <memchr+0x70>
  40d8f2:	f810 3b01 	ldrb.w	r3, [r0], #1
  40d8f6:	3a01      	subs	r2, #1
  40d8f8:	ea83 0301 	eor.w	r3, r3, r1
  40d8fc:	b113      	cbz	r3, 40d904 <memchr+0x74>
  40d8fe:	d1f8      	bne.n	40d8f2 <memchr+0x62>
  40d900:	2000      	movs	r0, #0
  40d902:	4770      	bx	lr
  40d904:	3801      	subs	r0, #1
  40d906:	4770      	bx	lr
  40d908:	2d00      	cmp	r5, #0
  40d90a:	bf06      	itte	eq
  40d90c:	4635      	moveq	r5, r6
  40d90e:	3803      	subeq	r0, #3
  40d910:	3807      	subne	r0, #7
  40d912:	f015 0f01 	tst.w	r5, #1
  40d916:	d107      	bne.n	40d928 <memchr+0x98>
  40d918:	3001      	adds	r0, #1
  40d91a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40d91e:	bf02      	ittt	eq
  40d920:	3001      	addeq	r0, #1
  40d922:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40d926:	3001      	addeq	r0, #1
  40d928:	bcf0      	pop	{r4, r5, r6, r7}
  40d92a:	3801      	subs	r0, #1
  40d92c:	4770      	bx	lr
  40d92e:	bf00      	nop

0040d930 <memmove>:
  40d930:	4288      	cmp	r0, r1
  40d932:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d934:	d90d      	bls.n	40d952 <memmove+0x22>
  40d936:	188b      	adds	r3, r1, r2
  40d938:	4298      	cmp	r0, r3
  40d93a:	d20a      	bcs.n	40d952 <memmove+0x22>
  40d93c:	1884      	adds	r4, r0, r2
  40d93e:	2a00      	cmp	r2, #0
  40d940:	d051      	beq.n	40d9e6 <memmove+0xb6>
  40d942:	4622      	mov	r2, r4
  40d944:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40d948:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40d94c:	4299      	cmp	r1, r3
  40d94e:	d1f9      	bne.n	40d944 <memmove+0x14>
  40d950:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d952:	2a0f      	cmp	r2, #15
  40d954:	d948      	bls.n	40d9e8 <memmove+0xb8>
  40d956:	ea41 0300 	orr.w	r3, r1, r0
  40d95a:	079b      	lsls	r3, r3, #30
  40d95c:	d146      	bne.n	40d9ec <memmove+0xbc>
  40d95e:	f100 0410 	add.w	r4, r0, #16
  40d962:	f101 0310 	add.w	r3, r1, #16
  40d966:	4615      	mov	r5, r2
  40d968:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40d96c:	f844 6c10 	str.w	r6, [r4, #-16]
  40d970:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40d974:	f844 6c0c 	str.w	r6, [r4, #-12]
  40d978:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40d97c:	f844 6c08 	str.w	r6, [r4, #-8]
  40d980:	3d10      	subs	r5, #16
  40d982:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40d986:	f844 6c04 	str.w	r6, [r4, #-4]
  40d98a:	2d0f      	cmp	r5, #15
  40d98c:	f103 0310 	add.w	r3, r3, #16
  40d990:	f104 0410 	add.w	r4, r4, #16
  40d994:	d8e8      	bhi.n	40d968 <memmove+0x38>
  40d996:	f1a2 0310 	sub.w	r3, r2, #16
  40d99a:	f023 030f 	bic.w	r3, r3, #15
  40d99e:	f002 0e0f 	and.w	lr, r2, #15
  40d9a2:	3310      	adds	r3, #16
  40d9a4:	f1be 0f03 	cmp.w	lr, #3
  40d9a8:	4419      	add	r1, r3
  40d9aa:	4403      	add	r3, r0
  40d9ac:	d921      	bls.n	40d9f2 <memmove+0xc2>
  40d9ae:	1f1e      	subs	r6, r3, #4
  40d9b0:	460d      	mov	r5, r1
  40d9b2:	4674      	mov	r4, lr
  40d9b4:	3c04      	subs	r4, #4
  40d9b6:	f855 7b04 	ldr.w	r7, [r5], #4
  40d9ba:	f846 7f04 	str.w	r7, [r6, #4]!
  40d9be:	2c03      	cmp	r4, #3
  40d9c0:	d8f8      	bhi.n	40d9b4 <memmove+0x84>
  40d9c2:	f1ae 0404 	sub.w	r4, lr, #4
  40d9c6:	f024 0403 	bic.w	r4, r4, #3
  40d9ca:	3404      	adds	r4, #4
  40d9cc:	4421      	add	r1, r4
  40d9ce:	4423      	add	r3, r4
  40d9d0:	f002 0203 	and.w	r2, r2, #3
  40d9d4:	b162      	cbz	r2, 40d9f0 <memmove+0xc0>
  40d9d6:	3b01      	subs	r3, #1
  40d9d8:	440a      	add	r2, r1
  40d9da:	f811 4b01 	ldrb.w	r4, [r1], #1
  40d9de:	f803 4f01 	strb.w	r4, [r3, #1]!
  40d9e2:	428a      	cmp	r2, r1
  40d9e4:	d1f9      	bne.n	40d9da <memmove+0xaa>
  40d9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d9e8:	4603      	mov	r3, r0
  40d9ea:	e7f3      	b.n	40d9d4 <memmove+0xa4>
  40d9ec:	4603      	mov	r3, r0
  40d9ee:	e7f2      	b.n	40d9d6 <memmove+0xa6>
  40d9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d9f2:	4672      	mov	r2, lr
  40d9f4:	e7ee      	b.n	40d9d4 <memmove+0xa4>
  40d9f6:	bf00      	nop

0040d9f8 <__malloc_lock>:
  40d9f8:	4801      	ldr	r0, [pc, #4]	; (40da00 <__malloc_lock+0x8>)
  40d9fa:	f7ff bbfb 	b.w	40d1f4 <__retarget_lock_acquire_recursive>
  40d9fe:	bf00      	nop
  40da00:	2040100c 	.word	0x2040100c

0040da04 <__malloc_unlock>:
  40da04:	4801      	ldr	r0, [pc, #4]	; (40da0c <__malloc_unlock+0x8>)
  40da06:	f7ff bbf7 	b.w	40d1f8 <__retarget_lock_release_recursive>
  40da0a:	bf00      	nop
  40da0c:	2040100c 	.word	0x2040100c

0040da10 <_realloc_r>:
  40da10:	2900      	cmp	r1, #0
  40da12:	f000 8095 	beq.w	40db40 <_realloc_r+0x130>
  40da16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40da1a:	460d      	mov	r5, r1
  40da1c:	4616      	mov	r6, r2
  40da1e:	b083      	sub	sp, #12
  40da20:	4680      	mov	r8, r0
  40da22:	f106 070b 	add.w	r7, r6, #11
  40da26:	f7ff ffe7 	bl	40d9f8 <__malloc_lock>
  40da2a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40da2e:	2f16      	cmp	r7, #22
  40da30:	f02e 0403 	bic.w	r4, lr, #3
  40da34:	f1a5 0908 	sub.w	r9, r5, #8
  40da38:	d83c      	bhi.n	40dab4 <_realloc_r+0xa4>
  40da3a:	2210      	movs	r2, #16
  40da3c:	4617      	mov	r7, r2
  40da3e:	42be      	cmp	r6, r7
  40da40:	d83d      	bhi.n	40dabe <_realloc_r+0xae>
  40da42:	4294      	cmp	r4, r2
  40da44:	da43      	bge.n	40dace <_realloc_r+0xbe>
  40da46:	4bc4      	ldr	r3, [pc, #784]	; (40dd58 <_realloc_r+0x348>)
  40da48:	6899      	ldr	r1, [r3, #8]
  40da4a:	eb09 0004 	add.w	r0, r9, r4
  40da4e:	4288      	cmp	r0, r1
  40da50:	f000 80b4 	beq.w	40dbbc <_realloc_r+0x1ac>
  40da54:	6843      	ldr	r3, [r0, #4]
  40da56:	f023 0101 	bic.w	r1, r3, #1
  40da5a:	4401      	add	r1, r0
  40da5c:	6849      	ldr	r1, [r1, #4]
  40da5e:	07c9      	lsls	r1, r1, #31
  40da60:	d54c      	bpl.n	40dafc <_realloc_r+0xec>
  40da62:	f01e 0f01 	tst.w	lr, #1
  40da66:	f000 809b 	beq.w	40dba0 <_realloc_r+0x190>
  40da6a:	4631      	mov	r1, r6
  40da6c:	4640      	mov	r0, r8
  40da6e:	f7ff fc45 	bl	40d2fc <_malloc_r>
  40da72:	4606      	mov	r6, r0
  40da74:	2800      	cmp	r0, #0
  40da76:	d03a      	beq.n	40daee <_realloc_r+0xde>
  40da78:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40da7c:	f023 0301 	bic.w	r3, r3, #1
  40da80:	444b      	add	r3, r9
  40da82:	f1a0 0208 	sub.w	r2, r0, #8
  40da86:	429a      	cmp	r2, r3
  40da88:	f000 8121 	beq.w	40dcce <_realloc_r+0x2be>
  40da8c:	1f22      	subs	r2, r4, #4
  40da8e:	2a24      	cmp	r2, #36	; 0x24
  40da90:	f200 8107 	bhi.w	40dca2 <_realloc_r+0x292>
  40da94:	2a13      	cmp	r2, #19
  40da96:	f200 80db 	bhi.w	40dc50 <_realloc_r+0x240>
  40da9a:	4603      	mov	r3, r0
  40da9c:	462a      	mov	r2, r5
  40da9e:	6811      	ldr	r1, [r2, #0]
  40daa0:	6019      	str	r1, [r3, #0]
  40daa2:	6851      	ldr	r1, [r2, #4]
  40daa4:	6059      	str	r1, [r3, #4]
  40daa6:	6892      	ldr	r2, [r2, #8]
  40daa8:	609a      	str	r2, [r3, #8]
  40daaa:	4629      	mov	r1, r5
  40daac:	4640      	mov	r0, r8
  40daae:	f7ff f907 	bl	40ccc0 <_free_r>
  40dab2:	e01c      	b.n	40daee <_realloc_r+0xde>
  40dab4:	f027 0707 	bic.w	r7, r7, #7
  40dab8:	2f00      	cmp	r7, #0
  40daba:	463a      	mov	r2, r7
  40dabc:	dabf      	bge.n	40da3e <_realloc_r+0x2e>
  40dabe:	2600      	movs	r6, #0
  40dac0:	230c      	movs	r3, #12
  40dac2:	4630      	mov	r0, r6
  40dac4:	f8c8 3000 	str.w	r3, [r8]
  40dac8:	b003      	add	sp, #12
  40daca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dace:	462e      	mov	r6, r5
  40dad0:	1be3      	subs	r3, r4, r7
  40dad2:	2b0f      	cmp	r3, #15
  40dad4:	d81e      	bhi.n	40db14 <_realloc_r+0x104>
  40dad6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40dada:	f003 0301 	and.w	r3, r3, #1
  40dade:	4323      	orrs	r3, r4
  40dae0:	444c      	add	r4, r9
  40dae2:	f8c9 3004 	str.w	r3, [r9, #4]
  40dae6:	6863      	ldr	r3, [r4, #4]
  40dae8:	f043 0301 	orr.w	r3, r3, #1
  40daec:	6063      	str	r3, [r4, #4]
  40daee:	4640      	mov	r0, r8
  40daf0:	f7ff ff88 	bl	40da04 <__malloc_unlock>
  40daf4:	4630      	mov	r0, r6
  40daf6:	b003      	add	sp, #12
  40daf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dafc:	f023 0303 	bic.w	r3, r3, #3
  40db00:	18e1      	adds	r1, r4, r3
  40db02:	4291      	cmp	r1, r2
  40db04:	db1f      	blt.n	40db46 <_realloc_r+0x136>
  40db06:	68c3      	ldr	r3, [r0, #12]
  40db08:	6882      	ldr	r2, [r0, #8]
  40db0a:	462e      	mov	r6, r5
  40db0c:	60d3      	str	r3, [r2, #12]
  40db0e:	460c      	mov	r4, r1
  40db10:	609a      	str	r2, [r3, #8]
  40db12:	e7dd      	b.n	40dad0 <_realloc_r+0xc0>
  40db14:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40db18:	eb09 0107 	add.w	r1, r9, r7
  40db1c:	f002 0201 	and.w	r2, r2, #1
  40db20:	444c      	add	r4, r9
  40db22:	f043 0301 	orr.w	r3, r3, #1
  40db26:	4317      	orrs	r7, r2
  40db28:	f8c9 7004 	str.w	r7, [r9, #4]
  40db2c:	604b      	str	r3, [r1, #4]
  40db2e:	6863      	ldr	r3, [r4, #4]
  40db30:	f043 0301 	orr.w	r3, r3, #1
  40db34:	3108      	adds	r1, #8
  40db36:	6063      	str	r3, [r4, #4]
  40db38:	4640      	mov	r0, r8
  40db3a:	f7ff f8c1 	bl	40ccc0 <_free_r>
  40db3e:	e7d6      	b.n	40daee <_realloc_r+0xde>
  40db40:	4611      	mov	r1, r2
  40db42:	f7ff bbdb 	b.w	40d2fc <_malloc_r>
  40db46:	f01e 0f01 	tst.w	lr, #1
  40db4a:	d18e      	bne.n	40da6a <_realloc_r+0x5a>
  40db4c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40db50:	eba9 0a01 	sub.w	sl, r9, r1
  40db54:	f8da 1004 	ldr.w	r1, [sl, #4]
  40db58:	f021 0103 	bic.w	r1, r1, #3
  40db5c:	440b      	add	r3, r1
  40db5e:	4423      	add	r3, r4
  40db60:	4293      	cmp	r3, r2
  40db62:	db25      	blt.n	40dbb0 <_realloc_r+0x1a0>
  40db64:	68c2      	ldr	r2, [r0, #12]
  40db66:	6881      	ldr	r1, [r0, #8]
  40db68:	4656      	mov	r6, sl
  40db6a:	60ca      	str	r2, [r1, #12]
  40db6c:	6091      	str	r1, [r2, #8]
  40db6e:	f8da 100c 	ldr.w	r1, [sl, #12]
  40db72:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40db76:	1f22      	subs	r2, r4, #4
  40db78:	2a24      	cmp	r2, #36	; 0x24
  40db7a:	60c1      	str	r1, [r0, #12]
  40db7c:	6088      	str	r0, [r1, #8]
  40db7e:	f200 8094 	bhi.w	40dcaa <_realloc_r+0x29a>
  40db82:	2a13      	cmp	r2, #19
  40db84:	d96f      	bls.n	40dc66 <_realloc_r+0x256>
  40db86:	6829      	ldr	r1, [r5, #0]
  40db88:	f8ca 1008 	str.w	r1, [sl, #8]
  40db8c:	6869      	ldr	r1, [r5, #4]
  40db8e:	f8ca 100c 	str.w	r1, [sl, #12]
  40db92:	2a1b      	cmp	r2, #27
  40db94:	f200 80a2 	bhi.w	40dcdc <_realloc_r+0x2cc>
  40db98:	3508      	adds	r5, #8
  40db9a:	f10a 0210 	add.w	r2, sl, #16
  40db9e:	e063      	b.n	40dc68 <_realloc_r+0x258>
  40dba0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40dba4:	eba9 0a03 	sub.w	sl, r9, r3
  40dba8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40dbac:	f021 0103 	bic.w	r1, r1, #3
  40dbb0:	1863      	adds	r3, r4, r1
  40dbb2:	4293      	cmp	r3, r2
  40dbb4:	f6ff af59 	blt.w	40da6a <_realloc_r+0x5a>
  40dbb8:	4656      	mov	r6, sl
  40dbba:	e7d8      	b.n	40db6e <_realloc_r+0x15e>
  40dbbc:	6841      	ldr	r1, [r0, #4]
  40dbbe:	f021 0b03 	bic.w	fp, r1, #3
  40dbc2:	44a3      	add	fp, r4
  40dbc4:	f107 0010 	add.w	r0, r7, #16
  40dbc8:	4583      	cmp	fp, r0
  40dbca:	da56      	bge.n	40dc7a <_realloc_r+0x26a>
  40dbcc:	f01e 0f01 	tst.w	lr, #1
  40dbd0:	f47f af4b 	bne.w	40da6a <_realloc_r+0x5a>
  40dbd4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40dbd8:	eba9 0a01 	sub.w	sl, r9, r1
  40dbdc:	f8da 1004 	ldr.w	r1, [sl, #4]
  40dbe0:	f021 0103 	bic.w	r1, r1, #3
  40dbe4:	448b      	add	fp, r1
  40dbe6:	4558      	cmp	r0, fp
  40dbe8:	dce2      	bgt.n	40dbb0 <_realloc_r+0x1a0>
  40dbea:	4656      	mov	r6, sl
  40dbec:	f8da 100c 	ldr.w	r1, [sl, #12]
  40dbf0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40dbf4:	1f22      	subs	r2, r4, #4
  40dbf6:	2a24      	cmp	r2, #36	; 0x24
  40dbf8:	60c1      	str	r1, [r0, #12]
  40dbfa:	6088      	str	r0, [r1, #8]
  40dbfc:	f200 808f 	bhi.w	40dd1e <_realloc_r+0x30e>
  40dc00:	2a13      	cmp	r2, #19
  40dc02:	f240 808a 	bls.w	40dd1a <_realloc_r+0x30a>
  40dc06:	6829      	ldr	r1, [r5, #0]
  40dc08:	f8ca 1008 	str.w	r1, [sl, #8]
  40dc0c:	6869      	ldr	r1, [r5, #4]
  40dc0e:	f8ca 100c 	str.w	r1, [sl, #12]
  40dc12:	2a1b      	cmp	r2, #27
  40dc14:	f200 808a 	bhi.w	40dd2c <_realloc_r+0x31c>
  40dc18:	3508      	adds	r5, #8
  40dc1a:	f10a 0210 	add.w	r2, sl, #16
  40dc1e:	6829      	ldr	r1, [r5, #0]
  40dc20:	6011      	str	r1, [r2, #0]
  40dc22:	6869      	ldr	r1, [r5, #4]
  40dc24:	6051      	str	r1, [r2, #4]
  40dc26:	68a9      	ldr	r1, [r5, #8]
  40dc28:	6091      	str	r1, [r2, #8]
  40dc2a:	eb0a 0107 	add.w	r1, sl, r7
  40dc2e:	ebab 0207 	sub.w	r2, fp, r7
  40dc32:	f042 0201 	orr.w	r2, r2, #1
  40dc36:	6099      	str	r1, [r3, #8]
  40dc38:	604a      	str	r2, [r1, #4]
  40dc3a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40dc3e:	f003 0301 	and.w	r3, r3, #1
  40dc42:	431f      	orrs	r7, r3
  40dc44:	4640      	mov	r0, r8
  40dc46:	f8ca 7004 	str.w	r7, [sl, #4]
  40dc4a:	f7ff fedb 	bl	40da04 <__malloc_unlock>
  40dc4e:	e751      	b.n	40daf4 <_realloc_r+0xe4>
  40dc50:	682b      	ldr	r3, [r5, #0]
  40dc52:	6003      	str	r3, [r0, #0]
  40dc54:	686b      	ldr	r3, [r5, #4]
  40dc56:	6043      	str	r3, [r0, #4]
  40dc58:	2a1b      	cmp	r2, #27
  40dc5a:	d82d      	bhi.n	40dcb8 <_realloc_r+0x2a8>
  40dc5c:	f100 0308 	add.w	r3, r0, #8
  40dc60:	f105 0208 	add.w	r2, r5, #8
  40dc64:	e71b      	b.n	40da9e <_realloc_r+0x8e>
  40dc66:	4632      	mov	r2, r6
  40dc68:	6829      	ldr	r1, [r5, #0]
  40dc6a:	6011      	str	r1, [r2, #0]
  40dc6c:	6869      	ldr	r1, [r5, #4]
  40dc6e:	6051      	str	r1, [r2, #4]
  40dc70:	68a9      	ldr	r1, [r5, #8]
  40dc72:	6091      	str	r1, [r2, #8]
  40dc74:	461c      	mov	r4, r3
  40dc76:	46d1      	mov	r9, sl
  40dc78:	e72a      	b.n	40dad0 <_realloc_r+0xc0>
  40dc7a:	eb09 0107 	add.w	r1, r9, r7
  40dc7e:	ebab 0b07 	sub.w	fp, fp, r7
  40dc82:	f04b 0201 	orr.w	r2, fp, #1
  40dc86:	6099      	str	r1, [r3, #8]
  40dc88:	604a      	str	r2, [r1, #4]
  40dc8a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40dc8e:	f003 0301 	and.w	r3, r3, #1
  40dc92:	431f      	orrs	r7, r3
  40dc94:	4640      	mov	r0, r8
  40dc96:	f845 7c04 	str.w	r7, [r5, #-4]
  40dc9a:	f7ff feb3 	bl	40da04 <__malloc_unlock>
  40dc9e:	462e      	mov	r6, r5
  40dca0:	e728      	b.n	40daf4 <_realloc_r+0xe4>
  40dca2:	4629      	mov	r1, r5
  40dca4:	f7ff fe44 	bl	40d930 <memmove>
  40dca8:	e6ff      	b.n	40daaa <_realloc_r+0x9a>
  40dcaa:	4629      	mov	r1, r5
  40dcac:	4630      	mov	r0, r6
  40dcae:	461c      	mov	r4, r3
  40dcb0:	46d1      	mov	r9, sl
  40dcb2:	f7ff fe3d 	bl	40d930 <memmove>
  40dcb6:	e70b      	b.n	40dad0 <_realloc_r+0xc0>
  40dcb8:	68ab      	ldr	r3, [r5, #8]
  40dcba:	6083      	str	r3, [r0, #8]
  40dcbc:	68eb      	ldr	r3, [r5, #12]
  40dcbe:	60c3      	str	r3, [r0, #12]
  40dcc0:	2a24      	cmp	r2, #36	; 0x24
  40dcc2:	d017      	beq.n	40dcf4 <_realloc_r+0x2e4>
  40dcc4:	f100 0310 	add.w	r3, r0, #16
  40dcc8:	f105 0210 	add.w	r2, r5, #16
  40dccc:	e6e7      	b.n	40da9e <_realloc_r+0x8e>
  40dcce:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40dcd2:	f023 0303 	bic.w	r3, r3, #3
  40dcd6:	441c      	add	r4, r3
  40dcd8:	462e      	mov	r6, r5
  40dcda:	e6f9      	b.n	40dad0 <_realloc_r+0xc0>
  40dcdc:	68a9      	ldr	r1, [r5, #8]
  40dcde:	f8ca 1010 	str.w	r1, [sl, #16]
  40dce2:	68e9      	ldr	r1, [r5, #12]
  40dce4:	f8ca 1014 	str.w	r1, [sl, #20]
  40dce8:	2a24      	cmp	r2, #36	; 0x24
  40dcea:	d00c      	beq.n	40dd06 <_realloc_r+0x2f6>
  40dcec:	3510      	adds	r5, #16
  40dcee:	f10a 0218 	add.w	r2, sl, #24
  40dcf2:	e7b9      	b.n	40dc68 <_realloc_r+0x258>
  40dcf4:	692b      	ldr	r3, [r5, #16]
  40dcf6:	6103      	str	r3, [r0, #16]
  40dcf8:	696b      	ldr	r3, [r5, #20]
  40dcfa:	6143      	str	r3, [r0, #20]
  40dcfc:	f105 0218 	add.w	r2, r5, #24
  40dd00:	f100 0318 	add.w	r3, r0, #24
  40dd04:	e6cb      	b.n	40da9e <_realloc_r+0x8e>
  40dd06:	692a      	ldr	r2, [r5, #16]
  40dd08:	f8ca 2018 	str.w	r2, [sl, #24]
  40dd0c:	696a      	ldr	r2, [r5, #20]
  40dd0e:	f8ca 201c 	str.w	r2, [sl, #28]
  40dd12:	3518      	adds	r5, #24
  40dd14:	f10a 0220 	add.w	r2, sl, #32
  40dd18:	e7a6      	b.n	40dc68 <_realloc_r+0x258>
  40dd1a:	4632      	mov	r2, r6
  40dd1c:	e77f      	b.n	40dc1e <_realloc_r+0x20e>
  40dd1e:	4629      	mov	r1, r5
  40dd20:	4630      	mov	r0, r6
  40dd22:	9301      	str	r3, [sp, #4]
  40dd24:	f7ff fe04 	bl	40d930 <memmove>
  40dd28:	9b01      	ldr	r3, [sp, #4]
  40dd2a:	e77e      	b.n	40dc2a <_realloc_r+0x21a>
  40dd2c:	68a9      	ldr	r1, [r5, #8]
  40dd2e:	f8ca 1010 	str.w	r1, [sl, #16]
  40dd32:	68e9      	ldr	r1, [r5, #12]
  40dd34:	f8ca 1014 	str.w	r1, [sl, #20]
  40dd38:	2a24      	cmp	r2, #36	; 0x24
  40dd3a:	d003      	beq.n	40dd44 <_realloc_r+0x334>
  40dd3c:	3510      	adds	r5, #16
  40dd3e:	f10a 0218 	add.w	r2, sl, #24
  40dd42:	e76c      	b.n	40dc1e <_realloc_r+0x20e>
  40dd44:	692a      	ldr	r2, [r5, #16]
  40dd46:	f8ca 2018 	str.w	r2, [sl, #24]
  40dd4a:	696a      	ldr	r2, [r5, #20]
  40dd4c:	f8ca 201c 	str.w	r2, [sl, #28]
  40dd50:	3518      	adds	r5, #24
  40dd52:	f10a 0220 	add.w	r2, sl, #32
  40dd56:	e762      	b.n	40dc1e <_realloc_r+0x20e>
  40dd58:	20400720 	.word	0x20400720

0040dd5c <_sbrk_r>:
  40dd5c:	b538      	push	{r3, r4, r5, lr}
  40dd5e:	4c07      	ldr	r4, [pc, #28]	; (40dd7c <_sbrk_r+0x20>)
  40dd60:	2300      	movs	r3, #0
  40dd62:	4605      	mov	r5, r0
  40dd64:	4608      	mov	r0, r1
  40dd66:	6023      	str	r3, [r4, #0]
  40dd68:	f7f6 fe18 	bl	40499c <_sbrk>
  40dd6c:	1c43      	adds	r3, r0, #1
  40dd6e:	d000      	beq.n	40dd72 <_sbrk_r+0x16>
  40dd70:	bd38      	pop	{r3, r4, r5, pc}
  40dd72:	6823      	ldr	r3, [r4, #0]
  40dd74:	2b00      	cmp	r3, #0
  40dd76:	d0fb      	beq.n	40dd70 <_sbrk_r+0x14>
  40dd78:	602b      	str	r3, [r5, #0]
  40dd7a:	bd38      	pop	{r3, r4, r5, pc}
  40dd7c:	20401020 	.word	0x20401020

0040dd80 <__sread>:
  40dd80:	b510      	push	{r4, lr}
  40dd82:	460c      	mov	r4, r1
  40dd84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40dd88:	f000 fa80 	bl	40e28c <_read_r>
  40dd8c:	2800      	cmp	r0, #0
  40dd8e:	db03      	blt.n	40dd98 <__sread+0x18>
  40dd90:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40dd92:	4403      	add	r3, r0
  40dd94:	6523      	str	r3, [r4, #80]	; 0x50
  40dd96:	bd10      	pop	{r4, pc}
  40dd98:	89a3      	ldrh	r3, [r4, #12]
  40dd9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40dd9e:	81a3      	strh	r3, [r4, #12]
  40dda0:	bd10      	pop	{r4, pc}
  40dda2:	bf00      	nop

0040dda4 <__swrite>:
  40dda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40dda8:	4616      	mov	r6, r2
  40ddaa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40ddae:	461f      	mov	r7, r3
  40ddb0:	05d3      	lsls	r3, r2, #23
  40ddb2:	460c      	mov	r4, r1
  40ddb4:	4605      	mov	r5, r0
  40ddb6:	d507      	bpl.n	40ddc8 <__swrite+0x24>
  40ddb8:	2200      	movs	r2, #0
  40ddba:	2302      	movs	r3, #2
  40ddbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ddc0:	f000 fa4e 	bl	40e260 <_lseek_r>
  40ddc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40ddc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40ddcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40ddd0:	81a2      	strh	r2, [r4, #12]
  40ddd2:	463b      	mov	r3, r7
  40ddd4:	4632      	mov	r2, r6
  40ddd6:	4628      	mov	r0, r5
  40ddd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40dddc:	f000 b92e 	b.w	40e03c <_write_r>

0040dde0 <__sseek>:
  40dde0:	b510      	push	{r4, lr}
  40dde2:	460c      	mov	r4, r1
  40dde4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40dde8:	f000 fa3a 	bl	40e260 <_lseek_r>
  40ddec:	89a3      	ldrh	r3, [r4, #12]
  40ddee:	1c42      	adds	r2, r0, #1
  40ddf0:	bf0e      	itee	eq
  40ddf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40ddf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40ddfa:	6520      	strne	r0, [r4, #80]	; 0x50
  40ddfc:	81a3      	strh	r3, [r4, #12]
  40ddfe:	bd10      	pop	{r4, pc}

0040de00 <__sclose>:
  40de00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40de04:	f000 b992 	b.w	40e12c <_close_r>
	...

0040de40 <strlen>:
  40de40:	f890 f000 	pld	[r0]
  40de44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40de48:	f020 0107 	bic.w	r1, r0, #7
  40de4c:	f06f 0c00 	mvn.w	ip, #0
  40de50:	f010 0407 	ands.w	r4, r0, #7
  40de54:	f891 f020 	pld	[r1, #32]
  40de58:	f040 8049 	bne.w	40deee <strlen+0xae>
  40de5c:	f04f 0400 	mov.w	r4, #0
  40de60:	f06f 0007 	mvn.w	r0, #7
  40de64:	e9d1 2300 	ldrd	r2, r3, [r1]
  40de68:	f891 f040 	pld	[r1, #64]	; 0x40
  40de6c:	f100 0008 	add.w	r0, r0, #8
  40de70:	fa82 f24c 	uadd8	r2, r2, ip
  40de74:	faa4 f28c 	sel	r2, r4, ip
  40de78:	fa83 f34c 	uadd8	r3, r3, ip
  40de7c:	faa2 f38c 	sel	r3, r2, ip
  40de80:	bb4b      	cbnz	r3, 40ded6 <strlen+0x96>
  40de82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40de86:	fa82 f24c 	uadd8	r2, r2, ip
  40de8a:	f100 0008 	add.w	r0, r0, #8
  40de8e:	faa4 f28c 	sel	r2, r4, ip
  40de92:	fa83 f34c 	uadd8	r3, r3, ip
  40de96:	faa2 f38c 	sel	r3, r2, ip
  40de9a:	b9e3      	cbnz	r3, 40ded6 <strlen+0x96>
  40de9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40dea0:	fa82 f24c 	uadd8	r2, r2, ip
  40dea4:	f100 0008 	add.w	r0, r0, #8
  40dea8:	faa4 f28c 	sel	r2, r4, ip
  40deac:	fa83 f34c 	uadd8	r3, r3, ip
  40deb0:	faa2 f38c 	sel	r3, r2, ip
  40deb4:	b97b      	cbnz	r3, 40ded6 <strlen+0x96>
  40deb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40deba:	f101 0120 	add.w	r1, r1, #32
  40debe:	fa82 f24c 	uadd8	r2, r2, ip
  40dec2:	f100 0008 	add.w	r0, r0, #8
  40dec6:	faa4 f28c 	sel	r2, r4, ip
  40deca:	fa83 f34c 	uadd8	r3, r3, ip
  40dece:	faa2 f38c 	sel	r3, r2, ip
  40ded2:	2b00      	cmp	r3, #0
  40ded4:	d0c6      	beq.n	40de64 <strlen+0x24>
  40ded6:	2a00      	cmp	r2, #0
  40ded8:	bf04      	itt	eq
  40deda:	3004      	addeq	r0, #4
  40dedc:	461a      	moveq	r2, r3
  40dede:	ba12      	rev	r2, r2
  40dee0:	fab2 f282 	clz	r2, r2
  40dee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40dee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40deec:	4770      	bx	lr
  40deee:	e9d1 2300 	ldrd	r2, r3, [r1]
  40def2:	f004 0503 	and.w	r5, r4, #3
  40def6:	f1c4 0000 	rsb	r0, r4, #0
  40defa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40defe:	f014 0f04 	tst.w	r4, #4
  40df02:	f891 f040 	pld	[r1, #64]	; 0x40
  40df06:	fa0c f505 	lsl.w	r5, ip, r5
  40df0a:	ea62 0205 	orn	r2, r2, r5
  40df0e:	bf1c      	itt	ne
  40df10:	ea63 0305 	ornne	r3, r3, r5
  40df14:	4662      	movne	r2, ip
  40df16:	f04f 0400 	mov.w	r4, #0
  40df1a:	e7a9      	b.n	40de70 <strlen+0x30>

0040df1c <__swbuf_r>:
  40df1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40df1e:	460d      	mov	r5, r1
  40df20:	4614      	mov	r4, r2
  40df22:	4606      	mov	r6, r0
  40df24:	b110      	cbz	r0, 40df2c <__swbuf_r+0x10>
  40df26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40df28:	2b00      	cmp	r3, #0
  40df2a:	d04b      	beq.n	40dfc4 <__swbuf_r+0xa8>
  40df2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40df30:	69a3      	ldr	r3, [r4, #24]
  40df32:	60a3      	str	r3, [r4, #8]
  40df34:	b291      	uxth	r1, r2
  40df36:	0708      	lsls	r0, r1, #28
  40df38:	d539      	bpl.n	40dfae <__swbuf_r+0x92>
  40df3a:	6923      	ldr	r3, [r4, #16]
  40df3c:	2b00      	cmp	r3, #0
  40df3e:	d036      	beq.n	40dfae <__swbuf_r+0x92>
  40df40:	b2ed      	uxtb	r5, r5
  40df42:	0489      	lsls	r1, r1, #18
  40df44:	462f      	mov	r7, r5
  40df46:	d515      	bpl.n	40df74 <__swbuf_r+0x58>
  40df48:	6822      	ldr	r2, [r4, #0]
  40df4a:	6961      	ldr	r1, [r4, #20]
  40df4c:	1ad3      	subs	r3, r2, r3
  40df4e:	428b      	cmp	r3, r1
  40df50:	da1c      	bge.n	40df8c <__swbuf_r+0x70>
  40df52:	3301      	adds	r3, #1
  40df54:	68a1      	ldr	r1, [r4, #8]
  40df56:	1c50      	adds	r0, r2, #1
  40df58:	3901      	subs	r1, #1
  40df5a:	60a1      	str	r1, [r4, #8]
  40df5c:	6020      	str	r0, [r4, #0]
  40df5e:	7015      	strb	r5, [r2, #0]
  40df60:	6962      	ldr	r2, [r4, #20]
  40df62:	429a      	cmp	r2, r3
  40df64:	d01a      	beq.n	40df9c <__swbuf_r+0x80>
  40df66:	89a3      	ldrh	r3, [r4, #12]
  40df68:	07db      	lsls	r3, r3, #31
  40df6a:	d501      	bpl.n	40df70 <__swbuf_r+0x54>
  40df6c:	2d0a      	cmp	r5, #10
  40df6e:	d015      	beq.n	40df9c <__swbuf_r+0x80>
  40df70:	4638      	mov	r0, r7
  40df72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40df74:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40df76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40df7a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40df7e:	81a2      	strh	r2, [r4, #12]
  40df80:	6822      	ldr	r2, [r4, #0]
  40df82:	6661      	str	r1, [r4, #100]	; 0x64
  40df84:	6961      	ldr	r1, [r4, #20]
  40df86:	1ad3      	subs	r3, r2, r3
  40df88:	428b      	cmp	r3, r1
  40df8a:	dbe2      	blt.n	40df52 <__swbuf_r+0x36>
  40df8c:	4621      	mov	r1, r4
  40df8e:	4630      	mov	r0, r6
  40df90:	f7fe fd18 	bl	40c9c4 <_fflush_r>
  40df94:	b940      	cbnz	r0, 40dfa8 <__swbuf_r+0x8c>
  40df96:	6822      	ldr	r2, [r4, #0]
  40df98:	2301      	movs	r3, #1
  40df9a:	e7db      	b.n	40df54 <__swbuf_r+0x38>
  40df9c:	4621      	mov	r1, r4
  40df9e:	4630      	mov	r0, r6
  40dfa0:	f7fe fd10 	bl	40c9c4 <_fflush_r>
  40dfa4:	2800      	cmp	r0, #0
  40dfa6:	d0e3      	beq.n	40df70 <__swbuf_r+0x54>
  40dfa8:	f04f 37ff 	mov.w	r7, #4294967295
  40dfac:	e7e0      	b.n	40df70 <__swbuf_r+0x54>
  40dfae:	4621      	mov	r1, r4
  40dfb0:	4630      	mov	r0, r6
  40dfb2:	f7fe fbf3 	bl	40c79c <__swsetup_r>
  40dfb6:	2800      	cmp	r0, #0
  40dfb8:	d1f6      	bne.n	40dfa8 <__swbuf_r+0x8c>
  40dfba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40dfbe:	6923      	ldr	r3, [r4, #16]
  40dfc0:	b291      	uxth	r1, r2
  40dfc2:	e7bd      	b.n	40df40 <__swbuf_r+0x24>
  40dfc4:	f7fe fd56 	bl	40ca74 <__sinit>
  40dfc8:	e7b0      	b.n	40df2c <__swbuf_r+0x10>
  40dfca:	bf00      	nop

0040dfcc <_wcrtomb_r>:
  40dfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  40dfce:	4606      	mov	r6, r0
  40dfd0:	b085      	sub	sp, #20
  40dfd2:	461f      	mov	r7, r3
  40dfd4:	b189      	cbz	r1, 40dffa <_wcrtomb_r+0x2e>
  40dfd6:	4c10      	ldr	r4, [pc, #64]	; (40e018 <_wcrtomb_r+0x4c>)
  40dfd8:	4d10      	ldr	r5, [pc, #64]	; (40e01c <_wcrtomb_r+0x50>)
  40dfda:	6824      	ldr	r4, [r4, #0]
  40dfdc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40dfde:	2c00      	cmp	r4, #0
  40dfe0:	bf08      	it	eq
  40dfe2:	462c      	moveq	r4, r5
  40dfe4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40dfe8:	47a0      	blx	r4
  40dfea:	1c43      	adds	r3, r0, #1
  40dfec:	d103      	bne.n	40dff6 <_wcrtomb_r+0x2a>
  40dfee:	2200      	movs	r2, #0
  40dff0:	238a      	movs	r3, #138	; 0x8a
  40dff2:	603a      	str	r2, [r7, #0]
  40dff4:	6033      	str	r3, [r6, #0]
  40dff6:	b005      	add	sp, #20
  40dff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40dffa:	460c      	mov	r4, r1
  40dffc:	4906      	ldr	r1, [pc, #24]	; (40e018 <_wcrtomb_r+0x4c>)
  40dffe:	4a07      	ldr	r2, [pc, #28]	; (40e01c <_wcrtomb_r+0x50>)
  40e000:	6809      	ldr	r1, [r1, #0]
  40e002:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40e004:	2900      	cmp	r1, #0
  40e006:	bf08      	it	eq
  40e008:	4611      	moveq	r1, r2
  40e00a:	4622      	mov	r2, r4
  40e00c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40e010:	a901      	add	r1, sp, #4
  40e012:	47a0      	blx	r4
  40e014:	e7e9      	b.n	40dfea <_wcrtomb_r+0x1e>
  40e016:	bf00      	nop
  40e018:	20400184 	.word	0x20400184
  40e01c:	204005b4 	.word	0x204005b4

0040e020 <__ascii_wctomb>:
  40e020:	b121      	cbz	r1, 40e02c <__ascii_wctomb+0xc>
  40e022:	2aff      	cmp	r2, #255	; 0xff
  40e024:	d804      	bhi.n	40e030 <__ascii_wctomb+0x10>
  40e026:	700a      	strb	r2, [r1, #0]
  40e028:	2001      	movs	r0, #1
  40e02a:	4770      	bx	lr
  40e02c:	4608      	mov	r0, r1
  40e02e:	4770      	bx	lr
  40e030:	238a      	movs	r3, #138	; 0x8a
  40e032:	6003      	str	r3, [r0, #0]
  40e034:	f04f 30ff 	mov.w	r0, #4294967295
  40e038:	4770      	bx	lr
  40e03a:	bf00      	nop

0040e03c <_write_r>:
  40e03c:	b570      	push	{r4, r5, r6, lr}
  40e03e:	460d      	mov	r5, r1
  40e040:	4c08      	ldr	r4, [pc, #32]	; (40e064 <_write_r+0x28>)
  40e042:	4611      	mov	r1, r2
  40e044:	4606      	mov	r6, r0
  40e046:	461a      	mov	r2, r3
  40e048:	4628      	mov	r0, r5
  40e04a:	2300      	movs	r3, #0
  40e04c:	6023      	str	r3, [r4, #0]
  40e04e:	f7f3 fee7 	bl	401e20 <_write>
  40e052:	1c43      	adds	r3, r0, #1
  40e054:	d000      	beq.n	40e058 <_write_r+0x1c>
  40e056:	bd70      	pop	{r4, r5, r6, pc}
  40e058:	6823      	ldr	r3, [r4, #0]
  40e05a:	2b00      	cmp	r3, #0
  40e05c:	d0fb      	beq.n	40e056 <_write_r+0x1a>
  40e05e:	6033      	str	r3, [r6, #0]
  40e060:	bd70      	pop	{r4, r5, r6, pc}
  40e062:	bf00      	nop
  40e064:	20401020 	.word	0x20401020

0040e068 <__register_exitproc>:
  40e068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40e06c:	4d2c      	ldr	r5, [pc, #176]	; (40e120 <__register_exitproc+0xb8>)
  40e06e:	4606      	mov	r6, r0
  40e070:	6828      	ldr	r0, [r5, #0]
  40e072:	4698      	mov	r8, r3
  40e074:	460f      	mov	r7, r1
  40e076:	4691      	mov	r9, r2
  40e078:	f7ff f8bc 	bl	40d1f4 <__retarget_lock_acquire_recursive>
  40e07c:	4b29      	ldr	r3, [pc, #164]	; (40e124 <__register_exitproc+0xbc>)
  40e07e:	681c      	ldr	r4, [r3, #0]
  40e080:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40e084:	2b00      	cmp	r3, #0
  40e086:	d03e      	beq.n	40e106 <__register_exitproc+0x9e>
  40e088:	685a      	ldr	r2, [r3, #4]
  40e08a:	2a1f      	cmp	r2, #31
  40e08c:	dc1c      	bgt.n	40e0c8 <__register_exitproc+0x60>
  40e08e:	f102 0e01 	add.w	lr, r2, #1
  40e092:	b176      	cbz	r6, 40e0b2 <__register_exitproc+0x4a>
  40e094:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40e098:	2401      	movs	r4, #1
  40e09a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40e09e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40e0a2:	4094      	lsls	r4, r2
  40e0a4:	4320      	orrs	r0, r4
  40e0a6:	2e02      	cmp	r6, #2
  40e0a8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40e0ac:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40e0b0:	d023      	beq.n	40e0fa <__register_exitproc+0x92>
  40e0b2:	3202      	adds	r2, #2
  40e0b4:	f8c3 e004 	str.w	lr, [r3, #4]
  40e0b8:	6828      	ldr	r0, [r5, #0]
  40e0ba:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40e0be:	f7ff f89b 	bl	40d1f8 <__retarget_lock_release_recursive>
  40e0c2:	2000      	movs	r0, #0
  40e0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40e0c8:	4b17      	ldr	r3, [pc, #92]	; (40e128 <__register_exitproc+0xc0>)
  40e0ca:	b30b      	cbz	r3, 40e110 <__register_exitproc+0xa8>
  40e0cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40e0d0:	f7ff f90c 	bl	40d2ec <malloc>
  40e0d4:	4603      	mov	r3, r0
  40e0d6:	b1d8      	cbz	r0, 40e110 <__register_exitproc+0xa8>
  40e0d8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40e0dc:	6002      	str	r2, [r0, #0]
  40e0de:	2100      	movs	r1, #0
  40e0e0:	6041      	str	r1, [r0, #4]
  40e0e2:	460a      	mov	r2, r1
  40e0e4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40e0e8:	f04f 0e01 	mov.w	lr, #1
  40e0ec:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40e0f0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40e0f4:	2e00      	cmp	r6, #0
  40e0f6:	d0dc      	beq.n	40e0b2 <__register_exitproc+0x4a>
  40e0f8:	e7cc      	b.n	40e094 <__register_exitproc+0x2c>
  40e0fa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40e0fe:	430c      	orrs	r4, r1
  40e100:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40e104:	e7d5      	b.n	40e0b2 <__register_exitproc+0x4a>
  40e106:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40e10a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40e10e:	e7bb      	b.n	40e088 <__register_exitproc+0x20>
  40e110:	6828      	ldr	r0, [r5, #0]
  40e112:	f7ff f871 	bl	40d1f8 <__retarget_lock_release_recursive>
  40e116:	f04f 30ff 	mov.w	r0, #4294967295
  40e11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40e11e:	bf00      	nop
  40e120:	204005b0 	.word	0x204005b0
  40e124:	0040f4dc 	.word	0x0040f4dc
  40e128:	0040d2ed 	.word	0x0040d2ed

0040e12c <_close_r>:
  40e12c:	b538      	push	{r3, r4, r5, lr}
  40e12e:	4c07      	ldr	r4, [pc, #28]	; (40e14c <_close_r+0x20>)
  40e130:	2300      	movs	r3, #0
  40e132:	4605      	mov	r5, r0
  40e134:	4608      	mov	r0, r1
  40e136:	6023      	str	r3, [r4, #0]
  40e138:	f7f6 fc4c 	bl	4049d4 <_close>
  40e13c:	1c43      	adds	r3, r0, #1
  40e13e:	d000      	beq.n	40e142 <_close_r+0x16>
  40e140:	bd38      	pop	{r3, r4, r5, pc}
  40e142:	6823      	ldr	r3, [r4, #0]
  40e144:	2b00      	cmp	r3, #0
  40e146:	d0fb      	beq.n	40e140 <_close_r+0x14>
  40e148:	602b      	str	r3, [r5, #0]
  40e14a:	bd38      	pop	{r3, r4, r5, pc}
  40e14c:	20401020 	.word	0x20401020

0040e150 <_fclose_r>:
  40e150:	b570      	push	{r4, r5, r6, lr}
  40e152:	b159      	cbz	r1, 40e16c <_fclose_r+0x1c>
  40e154:	4605      	mov	r5, r0
  40e156:	460c      	mov	r4, r1
  40e158:	b110      	cbz	r0, 40e160 <_fclose_r+0x10>
  40e15a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e15c:	2b00      	cmp	r3, #0
  40e15e:	d03c      	beq.n	40e1da <_fclose_r+0x8a>
  40e160:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40e162:	07d8      	lsls	r0, r3, #31
  40e164:	d505      	bpl.n	40e172 <_fclose_r+0x22>
  40e166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e16a:	b92b      	cbnz	r3, 40e178 <_fclose_r+0x28>
  40e16c:	2600      	movs	r6, #0
  40e16e:	4630      	mov	r0, r6
  40e170:	bd70      	pop	{r4, r5, r6, pc}
  40e172:	89a3      	ldrh	r3, [r4, #12]
  40e174:	0599      	lsls	r1, r3, #22
  40e176:	d53c      	bpl.n	40e1f2 <_fclose_r+0xa2>
  40e178:	4621      	mov	r1, r4
  40e17a:	4628      	mov	r0, r5
  40e17c:	f7fe fb82 	bl	40c884 <__sflush_r>
  40e180:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40e182:	4606      	mov	r6, r0
  40e184:	b133      	cbz	r3, 40e194 <_fclose_r+0x44>
  40e186:	69e1      	ldr	r1, [r4, #28]
  40e188:	4628      	mov	r0, r5
  40e18a:	4798      	blx	r3
  40e18c:	2800      	cmp	r0, #0
  40e18e:	bfb8      	it	lt
  40e190:	f04f 36ff 	movlt.w	r6, #4294967295
  40e194:	89a3      	ldrh	r3, [r4, #12]
  40e196:	061a      	lsls	r2, r3, #24
  40e198:	d422      	bmi.n	40e1e0 <_fclose_r+0x90>
  40e19a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40e19c:	b141      	cbz	r1, 40e1b0 <_fclose_r+0x60>
  40e19e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40e1a2:	4299      	cmp	r1, r3
  40e1a4:	d002      	beq.n	40e1ac <_fclose_r+0x5c>
  40e1a6:	4628      	mov	r0, r5
  40e1a8:	f7fe fd8a 	bl	40ccc0 <_free_r>
  40e1ac:	2300      	movs	r3, #0
  40e1ae:	6323      	str	r3, [r4, #48]	; 0x30
  40e1b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40e1b2:	b121      	cbz	r1, 40e1be <_fclose_r+0x6e>
  40e1b4:	4628      	mov	r0, r5
  40e1b6:	f7fe fd83 	bl	40ccc0 <_free_r>
  40e1ba:	2300      	movs	r3, #0
  40e1bc:	6463      	str	r3, [r4, #68]	; 0x44
  40e1be:	f7fe fc85 	bl	40cacc <__sfp_lock_acquire>
  40e1c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40e1c4:	2200      	movs	r2, #0
  40e1c6:	07db      	lsls	r3, r3, #31
  40e1c8:	81a2      	strh	r2, [r4, #12]
  40e1ca:	d50e      	bpl.n	40e1ea <_fclose_r+0x9a>
  40e1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e1ce:	f7ff f80f 	bl	40d1f0 <__retarget_lock_close_recursive>
  40e1d2:	f7fe fc81 	bl	40cad8 <__sfp_lock_release>
  40e1d6:	4630      	mov	r0, r6
  40e1d8:	bd70      	pop	{r4, r5, r6, pc}
  40e1da:	f7fe fc4b 	bl	40ca74 <__sinit>
  40e1de:	e7bf      	b.n	40e160 <_fclose_r+0x10>
  40e1e0:	6921      	ldr	r1, [r4, #16]
  40e1e2:	4628      	mov	r0, r5
  40e1e4:	f7fe fd6c 	bl	40ccc0 <_free_r>
  40e1e8:	e7d7      	b.n	40e19a <_fclose_r+0x4a>
  40e1ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e1ec:	f7ff f804 	bl	40d1f8 <__retarget_lock_release_recursive>
  40e1f0:	e7ec      	b.n	40e1cc <_fclose_r+0x7c>
  40e1f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e1f4:	f7fe fffe 	bl	40d1f4 <__retarget_lock_acquire_recursive>
  40e1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e1fc:	2b00      	cmp	r3, #0
  40e1fe:	d1bb      	bne.n	40e178 <_fclose_r+0x28>
  40e200:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40e202:	f016 0601 	ands.w	r6, r6, #1
  40e206:	d1b1      	bne.n	40e16c <_fclose_r+0x1c>
  40e208:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e20a:	f7fe fff5 	bl	40d1f8 <__retarget_lock_release_recursive>
  40e20e:	4630      	mov	r0, r6
  40e210:	bd70      	pop	{r4, r5, r6, pc}
  40e212:	bf00      	nop

0040e214 <_fstat_r>:
  40e214:	b538      	push	{r3, r4, r5, lr}
  40e216:	460b      	mov	r3, r1
  40e218:	4c07      	ldr	r4, [pc, #28]	; (40e238 <_fstat_r+0x24>)
  40e21a:	4605      	mov	r5, r0
  40e21c:	4611      	mov	r1, r2
  40e21e:	4618      	mov	r0, r3
  40e220:	2300      	movs	r3, #0
  40e222:	6023      	str	r3, [r4, #0]
  40e224:	f7f6 fbd9 	bl	4049da <_fstat>
  40e228:	1c43      	adds	r3, r0, #1
  40e22a:	d000      	beq.n	40e22e <_fstat_r+0x1a>
  40e22c:	bd38      	pop	{r3, r4, r5, pc}
  40e22e:	6823      	ldr	r3, [r4, #0]
  40e230:	2b00      	cmp	r3, #0
  40e232:	d0fb      	beq.n	40e22c <_fstat_r+0x18>
  40e234:	602b      	str	r3, [r5, #0]
  40e236:	bd38      	pop	{r3, r4, r5, pc}
  40e238:	20401020 	.word	0x20401020

0040e23c <_isatty_r>:
  40e23c:	b538      	push	{r3, r4, r5, lr}
  40e23e:	4c07      	ldr	r4, [pc, #28]	; (40e25c <_isatty_r+0x20>)
  40e240:	2300      	movs	r3, #0
  40e242:	4605      	mov	r5, r0
  40e244:	4608      	mov	r0, r1
  40e246:	6023      	str	r3, [r4, #0]
  40e248:	f7f6 fbcc 	bl	4049e4 <_isatty>
  40e24c:	1c43      	adds	r3, r0, #1
  40e24e:	d000      	beq.n	40e252 <_isatty_r+0x16>
  40e250:	bd38      	pop	{r3, r4, r5, pc}
  40e252:	6823      	ldr	r3, [r4, #0]
  40e254:	2b00      	cmp	r3, #0
  40e256:	d0fb      	beq.n	40e250 <_isatty_r+0x14>
  40e258:	602b      	str	r3, [r5, #0]
  40e25a:	bd38      	pop	{r3, r4, r5, pc}
  40e25c:	20401020 	.word	0x20401020

0040e260 <_lseek_r>:
  40e260:	b570      	push	{r4, r5, r6, lr}
  40e262:	460d      	mov	r5, r1
  40e264:	4c08      	ldr	r4, [pc, #32]	; (40e288 <_lseek_r+0x28>)
  40e266:	4611      	mov	r1, r2
  40e268:	4606      	mov	r6, r0
  40e26a:	461a      	mov	r2, r3
  40e26c:	4628      	mov	r0, r5
  40e26e:	2300      	movs	r3, #0
  40e270:	6023      	str	r3, [r4, #0]
  40e272:	f7f6 fbb9 	bl	4049e8 <_lseek>
  40e276:	1c43      	adds	r3, r0, #1
  40e278:	d000      	beq.n	40e27c <_lseek_r+0x1c>
  40e27a:	bd70      	pop	{r4, r5, r6, pc}
  40e27c:	6823      	ldr	r3, [r4, #0]
  40e27e:	2b00      	cmp	r3, #0
  40e280:	d0fb      	beq.n	40e27a <_lseek_r+0x1a>
  40e282:	6033      	str	r3, [r6, #0]
  40e284:	bd70      	pop	{r4, r5, r6, pc}
  40e286:	bf00      	nop
  40e288:	20401020 	.word	0x20401020

0040e28c <_read_r>:
  40e28c:	b570      	push	{r4, r5, r6, lr}
  40e28e:	460d      	mov	r5, r1
  40e290:	4c08      	ldr	r4, [pc, #32]	; (40e2b4 <_read_r+0x28>)
  40e292:	4611      	mov	r1, r2
  40e294:	4606      	mov	r6, r0
  40e296:	461a      	mov	r2, r3
  40e298:	4628      	mov	r0, r5
  40e29a:	2300      	movs	r3, #0
  40e29c:	6023      	str	r3, [r4, #0]
  40e29e:	f7f3 fda1 	bl	401de4 <_read>
  40e2a2:	1c43      	adds	r3, r0, #1
  40e2a4:	d000      	beq.n	40e2a8 <_read_r+0x1c>
  40e2a6:	bd70      	pop	{r4, r5, r6, pc}
  40e2a8:	6823      	ldr	r3, [r4, #0]
  40e2aa:	2b00      	cmp	r3, #0
  40e2ac:	d0fb      	beq.n	40e2a6 <_read_r+0x1a>
  40e2ae:	6033      	str	r3, [r6, #0]
  40e2b0:	bd70      	pop	{r4, r5, r6, pc}
  40e2b2:	bf00      	nop
  40e2b4:	20401020 	.word	0x20401020

0040e2b8 <MY_OV2655_BASIC_CONFIG>:
  40e2b8:	0080308c 0010308d 0000360b 00fc30b0     .0...0...6...0..
  40e2c8:	002f30b1 002430b2 00003601 00003308     .0/..0$..6...3..
  40e2d8:	00103012 00023011 00003093 00f73013     .0...0...0...0..
  40e2e8:	008c3014 00883018 00703019 00d4301a     .0...0...0p..0..
  40e2f8:	00013020 00183021 00003022 000a3023      0..!0.."0..#0..
  40e308:	00063024 00403025 00023026 00583027     $0..%0@.&0..'0X.
  40e318:	00073028 00933029 0004302a 00d4302b     (0..)0..*0..+0..
  40e328:	00063088 00403089 0002308a 0058308b     .0...0@..0...0X.
  40e338:	00643316 00253317 00803318 00083319     .3d..3%..3...3..
  40e348:	0064331a 004b331b 0000331c 0038331d     .3d..3K..3...38.
  40e358:	00fa3320 00113321 00923322 00013323      3..!3.."3..#3..
  40e368:	00973324 00023325 00ff3326 000c3327     $3..%3..&3..'3..
  40e378:	00103328 00103329 0058332a 0056332b     (3..)3..*3X.+3V.
  40e388:	00be332c 00e1332d 003a332e 0036332f     ,3..-3...3:./36.
  40e398:	004d3330 00443331 00f83332 000a3333     03M.13D.23..33..
  40e3a8:	00f03334 00f03335 00f03336 00403337     43..53..63..73@.
  40e3b8:	00403338 00403339 0000333a 0000333b     83@.93@.:3..;3..
  40e3c8:	00283380 00483381 00103382 00183383     .3(..3H..3...3..
  40e3d8:	00283384 00403385 00403386 00343387     .3(..3@..3@..34.
  40e3e8:	000c3388 00983389 0001338a 00043340     .3...3...3..@3..
  40e3f8:	00073341 00193342 00343343 004a3344     A3..B3..C34.D3J.
  40e408:	005a3345 006a3346 00713347 007c3348     E3Z.F3j.G3q.H3|.
  40e418:	008c3349 009b334a 00a9334b 00c0334c     I3..J3..K3..L3..
  40e428:	00d5334d 00e8334e 0020334f 00413090     M3..N3..O3 ..0A.
  40e438:	00b03300 00ff3301 0011338b 0010338c     .3...3...3...3..
  40e448:	0040338d 00ff3370 00003371 00173372     .3@.p3..q3..r3..
  40e458:	00203373 00003374 00103375 00103376     s3 .t3..u3..v3..
  40e468:	00003377 00103378 00803379 00863069     w3..x3..y3..i0..
  40e478:	00023087 0010307c 0000307a 00023100     .0..|0..z0...1..
  40e488:	00403400 00003601 008330f3 0088304e     .4@..6...0..N0..
  40e498:	00023015 0000302d 0000302e 00003306     .0..-0...0...3..
  40e4a8:	0001363b 00f2363c 004130a1 008030a3     ;6..<6...0A..0..
  40e4b8:	005630a8 007230aa 001030af 002c30b2     .0V..0r..0...0,.
  40e4c8:	008c30d9 00003000 00ffffff              .0...0......

0040e4d4 <MY_OV2655_BASIC_FALLBACK>:
  40e4d4:	00ffffff                                ....

0040e4d8 <MY_OV2655_BASIC_RESET>:
  40e4d8:	00803012 00ffffff                       .0......

0040e4e0 <MY_OV2710_BASIC_CONFIG>:
  40e4e0:	00ffffff                                ....

0040e4e4 <MY_OV2710_BASIC_RESET>:
  40e4e4:	00823008 00003017 00003018 00ffffff     .0...0...0......

0040e4f4 <OV7740_TEST_PATTERN>:
  40e4f4:	0000000e 00ff00ff                       ........

0040e4fc <OV7740_VGA_YUV422_20FPS>:
  40e4fc:	00ff00ff                                ....

0040e500 <mmc_trans_multipliers>:
  40e500:	00000000 0000000a 0000000c 0000000d     ................
  40e510:	0000000f 00000014 0000001a 0000001e     ................
  40e520:	00000023 00000028 0000002d 00000034     #...(...-...4...
  40e530:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040e540 <sd_mmc_trans_units>:
  40e540:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0040e55c <sd_trans_multipliers>:
  40e55c:	00000000 0000000a 0000000c 0000000d     ................
  40e56c:	0000000f 00000014 00000019 0000001e     ................
  40e57c:	00000023 00000028 0000002d 00000032     #...(...-...2...
  40e58c:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040e59c <lun_desc>:
  40e59c:	00401059 00401099 004010b9 004010d1     Y.@...@...@...@.
  40e5ac:	004010f1 00401135 00401199 0040e5dc     ..@.5.@...@...@.
  40e5bc:	00401069 004010a9 004010c5 004010e1     i.@...@...@...@.
  40e5cc:	004010f5 00401149 004011ad 0040e5f4     ..@.I.@...@...@.
  40e5dc:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
  40e5ec:	22302074 00000000 2f445322 20434d4d     t 0"...."SD/MMC 
  40e5fc:	64726143 6f6c5320 22312074 00000000     Card Slot 1"....

0040e60c <LfnOfs>:
  40e60c:	07050301 12100e09 1c181614 0000001e     ................

0040e61c <excvt.5682>:
  40e61c:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
  40e62c:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
  40e63c:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
  40e64c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  40e65c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
  40e66c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  40e67c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
  40e68c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
  40e69c:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  40e6ac:	00005d5b                                []..

0040e6b0 <Tbl>:
  40e6b0:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  40e6c0:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  40e6d0:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  40e6e0:	00d600ff 00f800dc 00d800a3 019200d7     ................
  40e6f0:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  40e700:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
  40e710:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
  40e720:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
  40e730:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
  40e740:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
  40e750:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
  40e760:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
  40e770:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
  40e780:	00da00de 00d900db 00dd00fd 00b400af     ................
  40e790:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
  40e7a0:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0040e7b0 <tbl_lower.5432>:
  40e7b0:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
  40e7c0:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
  40e7d0:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
  40e7e0:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
  40e7f0:	00e100e0 00e300e2 00e500e4 00e700e6     ................
  40e800:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
  40e810:	00f100f0 00f300f2 00f500f4 00f800f6     ................
  40e820:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
  40e830:	01050103 01090107 010d010b 0111010f     ................
  40e840:	01150113 01190117 011d011b 0121011f     ..............!.
  40e850:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
  40e860:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
  40e870:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
  40e880:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
  40e890:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
  40e8a0:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
  40e8b0:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
  40e8c0:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
  40e8d0:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
  40e8e0:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
  40e8f0:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
  40e900:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
  40e910:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
  40e920:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
  40e930:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
  40e940:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
  40e950:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
  40e960:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
  40e970:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
  40e980:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0040e990 <tbl_upper.5433>:
  40e990:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
  40e9a0:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
  40e9b0:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
  40e9c0:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
  40e9d0:	00c100c0 00c300c2 00c500c4 00c700c6     ................
  40e9e0:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
  40e9f0:	00d100d0 00d300d2 00d500d4 00d800d6     ................
  40ea00:	00da00d9 00dc00db 00de00dd 01000178     ............x...
  40ea10:	01040102 01080106 010c010a 0110010e     ................
  40ea20:	01140112 01180116 011c011a 0120011e     .............. .
  40ea30:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
  40ea40:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
  40ea50:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
  40ea60:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
  40ea70:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
  40ea80:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
  40ea90:	03940393 03960395 03980397 039a0399     ................
  40eaa0:	039c039b 039e039d 03a0039f 03a303a1     ................
  40eab0:	03a503a4 03a703a6 03a903a8 041003aa     ................
  40eac0:	04120411 04140413 04160415 04180417     ................
  40ead0:	041a0419 041c041b 041e041d 0420041f     .............. .
  40eae0:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
  40eaf0:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
  40eb00:	04030402 04050404 04070406 04090408     ................
  40eb10:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
  40eb20:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
  40eb30:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
  40eb40:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
  40eb50:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
  40eb60:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
  40eb70:	5f544446 00544144 5f544446 00474d49     FDT_DAT.FDT_IMG.
  40eb80:	0080308c 0010308d 0000360b 00fc30b0     .0...0...6...0..
  40eb90:	002f30b1 002430b2 00003601 00013308     .0/..0$..6...3..
  40eba0:	00103012 00023011 00003093 00f73013     .0...0...0...0..
  40ebb0:	008c3014 00883018 00703019 00d4301a     .0...0...0p..0..
  40ebc0:	00013020 00183021 00003022 000a3023      0..!0.."0..#0..
  40ebd0:	00063024 00403025 00023026 00583027     $0..%0@.&0..'0X.
  40ebe0:	00073028 00933029 0004302a 00d4302b     (0..)0..*0..+0..
  40ebf0:	00063088 00403089 0002308a 0058308b     .0...0@..0...0X.
  40ec00:	00643316 00253317 00803318 00083319     .3d..3%..3...3..
  40ec10:	0064331a 004b331b 0000331c 0038331d     .3d..3K..3...38.
  40ec20:	00fa3320 00113321 00923322 00013323      3..!3.."3..#3..
  40ec30:	00973324 00023325 00ff3326 000c3327     $3..%3..&3..'3..
  40ec40:	00103328 00103329 0058332a 0056332b     (3..)3..*3X.+3V.
  40ec50:	00be332c 00e1332d 003a332e 0036332f     ,3..-3...3:./36.
  40ec60:	004d3330 00443331 00f83332 000a3333     03M.13D.23..33..
  40ec70:	00f03334 00f03335 00f03336 00403337     43..53..63..73@.
  40ec80:	00403338 00403339 0000333a 0000333b     83@.93@.:3..;3..
  40ec90:	00283380 00483381 00103382 00183383     .3(..3H..3...3..
  40eca0:	00283384 00403385 00403386 00343387     .3(..3@..3@..34.
  40ecb0:	000c3388 00983389 0001338a 00043340     .3...3...3..@3..
  40ecc0:	00073341 00193342 00343343 004a3344     A3..B3..C34.D3J.
  40ecd0:	005a3345 006a3346 00713347 007c3348     E3Z.F3j.G3q.H3|.
  40ece0:	008c3349 009b334a 00a9334b 00c0334c     I3..J3..K3..L3..
  40ecf0:	00d5334d 00e8334e 0020334f 00413090     M3..N3..O3 ..0A.
  40ed00:	00b03300 00ff3301 0011338b 0010338c     .3...3...3...3..
  40ed10:	0040338d 00ff3370 00003371 00173372     .3@.p3..q3..r3..
  40ed20:	00203373 00003374 00103375 00103376     s3 .t3..u3..v3..
  40ed30:	00003377 00103378 00803379 00863069     w3..x3..y3..i0..
  40ed40:	00023087 0010307c 0000307a 00023100     .0..|0..z0...1..
  40ed50:	00403400 00003601 008330f3 0088304e     .4@..6...0..N0..
  40ed60:	00023015 0000302d 0000302e 00003306     .0..-0...0...3..
  40ed70:	0001363b 00f2363c 004130a1 008030a3     ;6..<6...0A..0..
  40ed80:	005630a8 007230aa 001030af 002c30b2     .0V..0r..0...0,.
  40ed90:	008c30d9 00003000 00ffffff 63256325     .0...0......%c%c
  40eda0:	63256325 63256325 63256325 00000000     %c%c%c%c%c%c....

0040edb0 <SDRAM_INSIGNIS_16M>:
  40edb0:	00000016 00000030 f955d5f9 41460a0d     ....0.....U...FA
  40edc0:	43204c49 54204352 4954204f 0a0d594e     IL CRC TO TINY..
  40edd0:	00000000 4f470a0d 4420444f 20415441     ......GOOD DATA 
  40ede0:	44564352 4f524620 4954204d 203a594e     RCVD FROM TINY: 
  40edf0:	252d6425 64252d64 3a642520 0d206425     %d-%d-%d %d:%d .
  40ee00:	0000000a 71696e55 44496575 72726520     ....UniqueID err
  40ee10:	0000726f 4f420a0d 2520544f 00002058     or....BOOT %X ..
  40ee20:	0d525750 0000000a 0d545352 0000000a     PWR.....RST.....
  40ee30:	252d5825 58252d58 58252020 3a58253a     %X-%X-%X  %X:%X:
  40ee40:	25205825 0a0d2058 00000000 41455243     %X %X ......CREA
  40ee50:	20444554 20434950 454c4946 4946202e     TED PIC FILE. FI
  40ee60:	4320454c 45534f4c 0a0d2e44 00000000     LE CLOSED.......
  40ee70:	55544552 4f204e52 0a0d2e4b 00000000     RETURN OK.......
  40ee80:	4f430a0d 4e49544e 53554f55 414d4920     ..CONTINUOUS IMA
  40ee90:	54204547 20545345 54534554 4f4f4c20     GE TEST TEST LOO
  40eea0:	20203a50 4f472020 253d444f 0d0a0d64     P:    GOOD=%d...
  40eeb0:	0000000a 594e4954 00000a0d 0d435452     ....TINY....RTC.
  40eec0:	0000000a 43544157 474f4448 4f4d203f     ....WATCHDOG? MO
  40eed0:	4c204552 4c454b49 54522059 000a0d43     RE LIKELY RTC...
  40eee0:	252d5825 58252d58 3a582520 253a5825     %X-%X-%X %X:%X:%
  40eef0:	000a0d58 504d4554 20582520 4f524142     X...TEMP %X BARO
  40ef00:	5825204d 4d554820 54494449 58252059     M %X HUMIDITY %X
  40ef10:	47494c20 25205448 4f4d2058 4e4f4954      LIGHT %X MOTION
  40ef20:	0d582520 0000000a 4e444944 44205427      %X.....DIDN'T D
  40ef30:	43455445 54522054 55502043 0d45534c     ETECT RTC PULSE.
  40ef40:	0000000a 0d4c4c41 0000000a 4f430a0d     ....ALL.......CO
  40ef50:	4e49544e 53554f55 414d4920 54204547     NTINUOUS IMAGE T
  40ef60:	20545345 504f4f4c 4f47202e 4e492054     EST LOOP. GOT IN
  40ef70:	52204f54 4c204354 3a504f4f 20202020     TO RTC LOOP:    
  40ef80:	20202020 4f472020 253d444f 42202064           GOOD=%d  B
  40ef90:	253d4441 0d0a0d64 0000000a 4b4c5542     AD=%d.......BULK
  40efa0:	54554f20 56435220 25203a44 78252078      OUT RCVD: %x %x
  40efb0:	20782520 25207825 78252078 20782520      %x %x %x %x %x 
  40efc0:	0a0d7825 00000000 4b4c5542 204e4920     %x......BULK IN 
  40efd0:	41544144 4e455320 36352054 25203a35     DATA SENT 565: %
  40efe0:	78252078 20782520 25207825 78252078     x %x %x %x %x %x
  40eff0:	20782520 0a0d7825 00000000 4b4c5542      %x %x......BULK
  40f000:	204e4920 41544144 4e455320 38382054      IN DATA SENT 88
  40f010:	25203a38 78252078 20782520 25207825     8: %x %x %x %x %
  40f020:	78252078 20782520 0a0d7825 00000000     x %x %x %x......
  40f030:	6e696c42 0d64656b 0000000a 203a4e49     Blinked.....IN: 
  40f040:	25206425 64252064 20642520 25206425     %d %d %d %d %d %
  40f050:	64252064 00000a0d 3a54554f 20642520     d %d....OUT: %d 
  40f060:	25206425 64252064 20642520 25206425     %d %d %d %d %d %
  40f070:	000a0d64 49474542 4e4f204e 41442045     d...BEGIN ONE DA
  40f080:	50412059 444e4550 204f5420 20565343     Y APPEND TO CSV 
  40f090:	0d2e5825 0000000a 20434d4d 25206425     %X......MMC %d %
  40f0a0:	000a0d64 20434d4d 45534552 64252054     d...MMC RESET %d
  40f0b0:	0d642520 0000000a 20434d4d 54494e49      %d.....MMC INIT
  40f0c0:	0d642520 0000000a 4e554f4d 49442054      %d.....MOUNT DI
  40f0d0:	2e2e4b53 000a0d2e 4e554f4d 49442054     SK......MOUNT DI
  40f0e0:	52204b53 4c555345 64252054 00000a0d     SK RESULT %d....
  40f0f0:	49595254 4620474e 45504f5f 5249444e     TRYING F_OPENDIR
  40f100:	0a0d2928 00000000 504f5f46 49444e45     ()......F_OPENDI
  40f110:	20292852 20534552 6425203d 00000a0d     R() RES = %d....
  40f120:	4e554f46 44462044 4f462054 5245444c     FOUND FDT FOLDER
  40f130:	00000a0d 41455243 474e4954 54444620     ....CREATING FDT
  40f140:	4c4f4620 0d524544 0000000a 454d4f53      FOLDER.....SOME
  40f150:	48544f20 44205245 43455249 59524f54      OTHER DIRECTORY
  40f160:	52524520 2520524f 0a0d2058 00000000      ERROR %X ......
  40f170:	4f4d5f46 20544e55 444f4f47 54444620     F_MOUNT GOOD FDT
  40f180:	00000a0d 504f5f46 46204e45 204c4941     ....F_OPEN FAIL 
  40f190:	20736572 0a0d6425 00000000 41455243     res %d......CREA
  40f1a0:	20444554 20565343 454c4946 53455220     TED CSV FILE RES
  40f1b0:	6425203d 00000a0d 0a0d7325 00000000     = %d....%s......
  40f1c0:	48435241 20455649 4d4f5246 5825203a     ARCHIVE FROM: %X
  40f1d0:	00000a0d 0000002e 614d0a0d 42206e69     ..........Main B
  40f1e0:	636e6172 47202e68 2e444f4f 4c494620     ranch. GOOD. FIL
  40f1f0:	4c432045 4445534f 000a0d2e              E CLOSED....

0040f1fc <picHeader_2655>:
  40f1fc:	e4364d42 00000057 00360000 00280000     BM6.W.....6...(.
  40f20c:	06400000 04b00000 00010000 00000018     ..@.............
  40f21c:	e4000000 00000057 00000000 00000000     ....W...........
	...
  40f234:	00007825 25642520 000a0d64 49474542     %x.. %d%d...BEGI
  40f244:	5453204e 2045524f 47414d49 000a0d45     N STORE IMAGE...
  40f254:	4e554f46 44462044 4d495f54 4f462047     FOUND FDT_IMG FO
  40f264:	5245444c 00000a0d 41455243 474e4954     LDER....CREATING
  40f274:	54444620 474d495f 4c4f4620 0d524544      FDT_IMG FOLDER.
  40f284:	0000000a 504f5f46 46204e45 204c4941     ....F_OPEN FAIL 
  40f294:	20534552 0a0d6425 00000000 41455243     RES %d......CREA
  40f2a4:	20444554 20434950 454c4946 0d732520     TED PIC FILE %s.
  40f2b4:	0000000a 544f5257 49462045 4e20454c     ....WROTE FILE N
  40f2c4:	0d454d41 0000000a 52430a0d 45544145     AME.......CREATE
  40f2d4:	49502044 49462043 202e454c 454c4946     D PIC FILE. FILE
  40f2e4:	4f4c4320 2e444553 00000a0d 4f4c430d      CLOSED......CLO
  40f2f4:	20444553 43204453 2e445241 00000a0d     SED SD CARD.....
  40f304:	454b4154 414d4920 202e4547 464e4f43     TAKE IMAGE. CONF
  40f314:	53204749 4352554f 25203a45 49202e64     IG SOURCE: %d. I
  40f324:	4547414d 5a495320 25203a45 0a0d2064     MAGE SIZE: %d ..
  40f334:	00000000 204d4143 20525750 0a0d4e4f     ....CAM PWR ON..
  40f344:	00000000 4b4c434d 414b4f20 000a0d59     ....MCLK OKAY...
  40f354:	204d4143 54494e49 414b4f20 000a0d59     CAM INIT OKAY...
  40f364:	204d4143 45534552 4b4f2054 0a0d5941     CAM RESET OKAY..
  40f374:	00000000 204d4143 464e4f43 46204749     ....CAM CONFIG F
  40f384:	204d4f52 44524148 444f4320 45442045     ROM HARD CODE DE
  40f394:	4c554146 0a0d2e54 00000000 204d4143     FAULT.......CAM 
  40f3a4:	464e4f43 46204749 204d4f52 54534f48     CONFIG FROM HOST
  40f3b4:	0d435020 0000000a 204d4143 464e4f43      PC.....CAM CONF
  40f3c4:	4f204749 0d59414b 0000000a 20495349     IG OKAY.....ISI 
  40f3d4:	4f4c4c41 45544143 4d4f4320 54454c50     ALLOCATE COMPLET
  40f3e4:	000a0d45 20495349 42414e45 0d44454c     E...ISI ENABLED.
  40f3f4:	0000000a 20495349 54494e49 4e4f4420     ....ISI INIT DON
  40f404:	0d412045 0000000a 20495349 54504143     E A.....ISI CAPT
  40f414:	20455255 454e4f44 4143202e 6a733b50     URE DONE. CAP;sj
  40f424:	736c3b64 666a646b 736b6c3b 733b666a     d;lskdjf;lksjf;s
  40f434:	6b6a646c 6c733b66 41206a64 203d4141     ldjkf;sldj AAA= 
  40f444:	0a0d6425 00000000 41524453 4544204d     %d......SDRAM DE
  40f454:	54494e49 00000a0d 48434143 49442045     INIT....CACHE DI
  40f464:	4c424153 0a0d4445 00000000 4320564f     SABLED......OV C
  40f474:	49464e4f 45525547 000a0d44 204d4143     ONFIGURED...CAM 
  40f484:	0d46464f 0000000a 534e4950 53455220     OFF.....PINS RES
  40f494:	0a0d5445 00000000 454b4154 414d4920     ET......TAKE IMA
  40f4a4:	202e4547 666e6f43 6f536769 65637275     GE. ConfigSource
  40f4b4:	6425203a 6d49202e 53656761 3a657a69     : %d. ImageSize:
  40f4c4:	20642520 00000a0d 4d415253 4d4f4320      %d ....SRAM COM
  40f4d4:	54454c50 000a0d45                       PLETE...

0040f4dc <_global_impure_ptr>:
  40f4dc:	20400188 33323130 37363534 42413938     ..@ 0123456789AB
  40f4ec:	46454443 00000000 33323130 37363534     CDEF....01234567
  40f4fc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40f50c:	0000296c                                l)..

0040f510 <blanks.7217>:
  40f510:	20202020 20202020 20202020 20202020                     

0040f520 <zeroes.7218>:
  40f520:	30303030 30303030 30303030 30303030     0000000000000000
  40f530:	00000043 49534f50 00000058              C...POSIX...

0040f53c <_ctype_>:
  40f53c:	20202000 20202020 28282020 20282828     .         ((((( 
  40f54c:	20202020 20202020 20202020 20202020                     
  40f55c:	10108820 10101010 10101010 10101010      ...............
  40f56c:	04040410 04040404 10040404 10101010     ................
  40f57c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40f58c:	01010101 01010101 01010101 10101010     ................
  40f59c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40f5ac:	02020202 02020202 02020202 10101010     ................
  40f5bc:	00000020 00000000 00000000 00000000      ...............
	...

0040f640 <_init>:
  40f640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f642:	bf00      	nop
  40f644:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f646:	bc08      	pop	{r3}
  40f648:	469e      	mov	lr, r3
  40f64a:	4770      	bx	lr

0040f64c <__init_array_start>:
  40f64c:	0040c865 	.word	0x0040c865

0040f650 <__frame_dummy_init_array_entry>:
  40f650:	0040018d                                ..@.

0040f654 <_fini>:
  40f654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f656:	bf00      	nop
  40f658:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f65a:	bc08      	pop	{r3}
  40f65c:	469e      	mov	lr, r3
  40f65e:	4770      	bx	lr

0040f660 <__fini_array_start>:
  40f660:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20400000:	b430      	push	{r4, r5}
20400002:	b082      	sub	sp, #8
20400004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20400006:	b35b      	cbz	r3, 20400060 <efc_perform_read_sequence+0x60>
20400008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2040000a:	6803      	ldr	r3, [r0, #0]
2040000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20400010:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20400012:	b2c9      	uxtb	r1, r1
20400014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20400018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2040001a:	6883      	ldr	r3, [r0, #8]
2040001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2040001e:	9b01      	ldr	r3, [sp, #4]
20400020:	f013 0f01 	tst.w	r3, #1
20400024:	d1f9      	bne.n	2040001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20400026:	b14d      	cbz	r5, 2040003c <efc_perform_read_sequence+0x3c>
20400028:	4621      	mov	r1, r4
2040002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2040002e:	4c0d      	ldr	r4, [pc, #52]	; (20400064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20400030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20400034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20400038:	4299      	cmp	r1, r3
2040003a:	d1f9      	bne.n	20400030 <efc_perform_read_sequence+0x30>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2040003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2040003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20400042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20400044:	6883      	ldr	r3, [r0, #8]
20400046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20400048:	9b01      	ldr	r3, [sp, #4]
2040004a:	f013 0f01 	tst.w	r3, #1
2040004e:	d0f9      	beq.n	20400044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20400050:	6803      	ldr	r3, [r0, #0]
20400052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20400056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20400058:	2000      	movs	r0, #0
}
2040005a:	b002      	add	sp, #8
2040005c:	bc30      	pop	{r4, r5}
2040005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20400060:	2002      	movs	r0, #2
20400062:	e7fa      	b.n	2040005a <efc_perform_read_sequence+0x5a>
20400064:	003ffffc 	.word	0x003ffffc

20400068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20400068:	6001      	str	r1, [r0, #0]
2040006a:	4770      	bx	lr

2040006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2040006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2040006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20400070:	6883      	ldr	r3, [r0, #8]
20400072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20400074:	9b01      	ldr	r3, [sp, #4]
20400076:	f013 0f01 	tst.w	r3, #1
2040007a:	d0f9      	beq.n	20400070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2040007c:	9b01      	ldr	r3, [sp, #4]
}
2040007e:	4802      	ldr	r0, [pc, #8]	; (20400088 <efc_perform_fcr+0x1c>)
20400080:	4018      	ands	r0, r3
20400082:	b002      	add	sp, #8
20400084:	4770      	bx	lr
20400086:	bf00      	nop
20400088:	000f000e 	.word	0x000f000e

2040008c <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
2040008c:	f3bf 8f5f 	dmb	sy
20400090:	3801      	subs	r0, #1
20400092:	d1fb      	bne.n	2040008c <portable_delay_cycles>
20400094:	4770      	bx	lr
	...

20400098 <udi_api_vendor>:
20400098:	2995 0040 29bd 0040 29d9 0040 2989 0040     .)@..)@..)@..)@.
204000a8:	0000 0000                                   ....

204000ac <udc_config>:
204000ac:	0108 2040 00b8 2040 0000 0000               ..@ ..@ ....

204000b8 <udc_config_lsfs>:
204000b8:	00c0 2040 011c 2040                         ..@ ..@ 

204000c0 <udc_desc_fs>:
204000c0:	0209 0045 0101 c000 0932 0004 0000 ffff     ..E.....2.......
204000d0:	00ff 0409 0100 ff06 ffff 0700 8105 4003     ...............@
204000e0:	0100 0507 0302 0040 0701 8305 4002 0000     ......@......@..
204000f0:	0507 0204 0040 0700 8505 0001 0101 0507     ....@...........
20400100:	0106 0100 0001 0000                         ........

20400108 <udc_device_desc>:
20400108:	0112 0200 0000 4000 03eb 2423 0100 0201     .......@..#$....
20400118:	0100 0000                                   ....

2040011c <udi_apis>:
2040011c:	0098 2040                                   ..@ 

20400120 <udc_string_desc>:
20400120:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20400150 <udc_string_desc_languageid>:
20400150:	0304 0409                                   ....

20400154 <udc_string_manufacturer_name>:
20400154:	6946 6c65 2064 6144 6174 5420 6365 6e68     Field Data Techn
20400164:	6c6f 676f 6569 0073                         ologies.

2040016c <udc_string_product_name>:
2040016c:	4446 2054 6544 6976 6563 0100                    FDT Device.

20400177 <g_interrupt_enabled>:
20400177:	0001                                             .

20400178 <SystemCoreClock>:
20400178:	0900 003d                                   ..=.

2040017c <picBuff>:
2040017c:	0000 7000                                   ...p

20400180 <picBuff_2>:
20400180:	9800 703a                                   ..:p

20400184 <_impure_ptr>:
20400184:	0188 2040                                   ..@ 

20400188 <impure_data>:
20400188:	0000 0000 0474 2040 04dc 2040 0544 2040     ....t.@ ..@ D.@ 
	...
20400230:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400240:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204005b0 <__atexit_recursive_mutex>:
204005b0:	0ffc 2040                                   ..@ 

204005b4 <__global_locale>:
204005b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204005f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400614:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400634:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400654:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400674:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400694:	e021 0040 d85d 0040 0000 0000 f53c 0040     !.@.].@.....<.@.
204006a4:	f1d4 0040 f16c 0040 f16c 0040 f16c 0040     ..@.l.@.l.@.l.@.
204006b4:	f16c 0040 f16c 0040 f16c 0040 f16c 0040     l.@.l.@.l.@.l.@.
204006c4:	f16c 0040 f16c 0040 ffff ffff ffff ffff     l.@.l.@.........
204006d4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204006fc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20400720 <__malloc_av_>:
	...
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 
204009c8:	09c0 2040 09c0 2040 09c8 2040 09c8 2040     ..@ ..@ ..@ ..@ 
204009d8:	09d0 2040 09d0 2040 09d8 2040 09d8 2040     ..@ ..@ ..@ ..@ 
204009e8:	09e0 2040 09e0 2040 09e8 2040 09e8 2040     ..@ ..@ ..@ ..@ 
204009f8:	09f0 2040 09f0 2040 09f8 2040 09f8 2040     ..@ ..@ ..@ ..@ 
20400a08:	0a00 2040 0a00 2040 0a08 2040 0a08 2040     ..@ ..@ ..@ ..@ 
20400a18:	0a10 2040 0a10 2040 0a18 2040 0a18 2040     ..@ ..@ ..@ ..@ 
20400a28:	0a20 2040 0a20 2040 0a28 2040 0a28 2040      .@  .@ (.@ (.@ 
20400a38:	0a30 2040 0a30 2040 0a38 2040 0a38 2040     0.@ 0.@ 8.@ 8.@ 
20400a48:	0a40 2040 0a40 2040 0a48 2040 0a48 2040     @.@ @.@ H.@ H.@ 
20400a58:	0a50 2040 0a50 2040 0a58 2040 0a58 2040     P.@ P.@ X.@ X.@ 
20400a68:	0a60 2040 0a60 2040 0a68 2040 0a68 2040     `.@ `.@ h.@ h.@ 
20400a78:	0a70 2040 0a70 2040 0a78 2040 0a78 2040     p.@ p.@ x.@ x.@ 
20400a88:	0a80 2040 0a80 2040 0a88 2040 0a88 2040     ..@ ..@ ..@ ..@ 
20400a98:	0a90 2040 0a90 2040 0a98 2040 0a98 2040     ..@ ..@ ..@ ..@ 
20400aa8:	0aa0 2040 0aa0 2040 0aa8 2040 0aa8 2040     ..@ ..@ ..@ ..@ 
20400ab8:	0ab0 2040 0ab0 2040 0ab8 2040 0ab8 2040     ..@ ..@ ..@ ..@ 
20400ac8:	0ac0 2040 0ac0 2040 0ac8 2040 0ac8 2040     ..@ ..@ ..@ ..@ 
20400ad8:	0ad0 2040 0ad0 2040 0ad8 2040 0ad8 2040     ..@ ..@ ..@ ..@ 
20400ae8:	0ae0 2040 0ae0 2040 0ae8 2040 0ae8 2040     ..@ ..@ ..@ ..@ 
20400af8:	0af0 2040 0af0 2040 0af8 2040 0af8 2040     ..@ ..@ ..@ ..@ 
20400b08:	0b00 2040 0b00 2040 0b08 2040 0b08 2040     ..@ ..@ ..@ ..@ 
20400b18:	0b10 2040 0b10 2040 0b18 2040 0b18 2040     ..@ ..@ ..@ ..@ 

20400b28 <__malloc_sbrk_base>:
20400b28:	ffff ffff                                   ....

20400b2c <__malloc_trim_threshold>:
20400b2c:	0000 0002                                   ....
